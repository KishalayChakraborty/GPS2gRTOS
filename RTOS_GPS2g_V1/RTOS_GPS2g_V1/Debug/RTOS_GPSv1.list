
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e58  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  08010f18  08010f18  00020f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124b0  080124b0  00030208  2**0
                  CONTENTS
  4 .ARM          00000000  080124b0  080124b0  00030208  2**0
                  CONTENTS
  5 .preinit_array 00000000  080124b0  080124b0  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124b0  080124b0  000224b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124b4  080124b4  000224b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080124b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f68  20000208  080126c0  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006170  080126c0  00036170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038551  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000548c  00000000  00000000  000687c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00017fe8  00000000  00000000  0006dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f58  00000000  00000000  00085c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ce1  00000000  00000000  00087b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000621f  00000000  00000000  00089871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032bdb  00000000  00000000  0008fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000abeee  00000000  00000000  000c266b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000074ec  00000000  00000000  0016e55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00175a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010f00 	.word	0x08010f00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	08010f00 	.word	0x08010f00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	08010fd8 	.word	0x08010fd8
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	08011018 	.word	0x08011018

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	08011058 	.word	0x08011058
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <Read_ADC1>:

static void Init_ADC(){
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
}

static float Read_ADC1(){
 8003288:	b510      	push	{r4, lr}
	float val=(float)ADCvalue[0];
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <Read_ADC1+0x1c>)
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	f7fe f87f 	bl	8001390 <__aeabi_ui2f>

	return ((float)(val*VSENSE*11));
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <Read_ADC1+0x20>)
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	f7fd fd1b 	bl	8000cd0 <__aeabi_fmul>
 800329a:	4904      	ldr	r1, [pc, #16]	; (80032ac <Read_ADC1+0x24>)
 800329c:	f7fd fd18 	bl	8000cd0 <__aeabi_fmul>
    	//HAL_Delay(1);
}
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	20000240 	.word	0x20000240
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	41300000 	.word	0x41300000

080032b0 <Read_ADC2>:

static float Read_ADC2(){
 80032b0:	b510      	push	{r4, lr}
	return (ADCvalue[1]*VSENSE*11);
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <Read_ADC2+0x1c>)
 80032b4:	6858      	ldr	r0, [r3, #4]
 80032b6:	f7fe f86b 	bl	8001390 <__aeabi_ui2f>
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <Read_ADC2+0x20>)
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	f7fd fd07 	bl	8000cd0 <__aeabi_fmul>
 80032c2:	4904      	ldr	r1, [pc, #16]	; (80032d4 <Read_ADC2+0x24>)
 80032c4:	f7fd fd04 	bl	8000cd0 <__aeabi_fmul>
	    	//HAL_Delay(1);
}
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	20000240 	.word	0x20000240
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	41300000 	.word	0x41300000

080032d8 <Read_EXT_B_SENSE>:
static float Read_EXT_B_SENSE(){
 80032d8:	b510      	push	{r4, lr}
	return (ADCvalue[2]*VSENSE*16);
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <Read_EXT_B_SENSE+0x1c>)
 80032dc:	6898      	ldr	r0, [r3, #8]
 80032de:	f7fe f857 	bl	8001390 <__aeabi_ui2f>
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <Read_EXT_B_SENSE+0x20>)
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	f7fd fcf3 	bl	8000cd0 <__aeabi_fmul>
 80032ea:	2183      	movs	r1, #131	; 0x83
 80032ec:	05c9      	lsls	r1, r1, #23
 80032ee:	f7fd fcef 	bl	8000cd0 <__aeabi_fmul>
	    	//HAL_Delay(1);
}
 80032f2:	bd10      	pop	{r4, pc}
 80032f4:	20000240 	.word	0x20000240
 80032f8:	2000000c 	.word	0x2000000c

080032fc <Read_INT_B_SENSE>:
static float Read_INT_B_SENSE(){
 80032fc:	b510      	push	{r4, lr}
	return (ADCvalue[3]*VSENSE*2);
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <Read_INT_B_SENSE+0x1c>)
 8003300:	68d8      	ldr	r0, [r3, #12]
 8003302:	f7fe f845 	bl	8001390 <__aeabi_ui2f>
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <Read_INT_B_SENSE+0x20>)
 8003308:	6819      	ldr	r1, [r3, #0]
 800330a:	f7fd fce1 	bl	8000cd0 <__aeabi_fmul>
 800330e:	1c01      	adds	r1, r0, #0
 8003310:	f7fd f974 	bl	80005fc <__aeabi_fadd>
	    	//HAL_Delay(1);
}
 8003314:	bd10      	pop	{r4, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	20000240 	.word	0x20000240
 800331c:	2000000c 	.word	0x2000000c

08003320 <Debug_Tx>:
}




static void Debug_Tx(char _out[]){
 8003320:	b530      	push	{r4, r5, lr}
 8003322:	b083      	sub	sp, #12
 8003324:	0004      	movs	r4, r0

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003326:	4d0b      	ldr	r5, [pc, #44]	; (8003354 <Debug_Tx+0x34>)
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	220c      	movs	r2, #12
 800332c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800332e:	f7fc feeb 	bl	8000108 <strlen>
 8003332:	b282      	uxth	r2, r0
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <Debug_Tx+0x38>)
 8003336:	0021      	movs	r1, r4
 8003338:	0028      	movs	r0, r5
 800333a:	f006 f9f7 	bl	800972c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800333e:	a901      	add	r1, sp, #4
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <Debug_Tx+0x3c>)
 8003342:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003344:	230a      	movs	r3, #10
 8003346:	2202      	movs	r2, #2
 8003348:	0028      	movs	r0, r5
 800334a:	f006 f9ef 	bl	800972c <HAL_UART_Transmit>


}
 800334e:	b003      	add	sp, #12
 8003350:	bd30      	pop	{r4, r5, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	20004554 	.word	0x20004554
 8003358:	00001388 	.word	0x00001388
 800335c:	00000a0d 	.word	0x00000a0d

08003360 <GSM_Tx>:
}




static void GSM_Tx(const char _out[]){
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0004      	movs	r4, r0
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003364:	4d06      	ldr	r5, [pc, #24]	; (8003380 <GSM_Tx+0x20>)
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	220c      	movs	r2, #12
 800336a:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800336c:	f7fc fecc 	bl	8000108 <strlen>
 8003370:	2396      	movs	r3, #150	; 0x96
 8003372:	b282      	uxth	r2, r0
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	0021      	movs	r1, r4
 8003378:	0028      	movs	r0, r5
 800337a:	f006 f9d7 	bl	800972c <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	2000442c 	.word	0x2000442c

08003384 <Debug_Rx>:
static char* Debug_Rx(){
 8003384:	b510      	push	{r4, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003386:	4807      	ldr	r0, [pc, #28]	; (80033a4 <Debug_Rx+0x20>)
 8003388:	6803      	ldr	r3, [r0, #0]
 800338a:	220c      	movs	r2, #12
 800338c:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 800338e:	2396      	movs	r3, #150	; 0x96
 8003390:	32ee      	adds	r2, #238	; 0xee
 8003392:	4c05      	ldr	r4, [pc, #20]	; (80033a8 <Debug_Rx+0x24>)
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	0021      	movs	r1, r4
 800339a:	f006 fa41 	bl	8009820 <HAL_UART_Receive>
}
 800339e:	0020      	movs	r0, r4
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20004554 	.word	0x20004554
 80033a8:	200045e8 	.word	0x200045e8

080033ac <readAcc>:





static float* readAcc(){
 80033ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ae:	46de      	mov	lr, fp
 80033b0:	4657      	mov	r7, sl
 80033b2:	464e      	mov	r6, r9
 80033b4:	4645      	mov	r5, r8
 80033b6:	b5e0      	push	{r5, r6, r7, lr}
 80033b8:	b089      	sub	sp, #36	; 0x24

	ACC_GYRO_data[0]=0;
 80033ba:	4c53      	ldr	r4, [pc, #332]	; (8003508 <readAcc+0x15c>)
 80033bc:	2300      	movs	r3, #0
 80033be:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=0;
 80033c0:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=0;
 80033c2:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=0;
 80033c4:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=0;
 80033c6:	6123      	str	r3, [r4, #16]
	ACC_GYRO_data[5]=0;
 80033c8:	6163      	str	r3, [r4, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80033ca:	4850      	ldr	r0, [pc, #320]	; (800350c <readAcc+0x160>)
 80033cc:	23fa      	movs	r3, #250	; 0xfa
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	469b      	mov	fp, r3
 80033d2:	9302      	str	r3, [sp, #8]
 80033d4:	2306      	movs	r3, #6
 80033d6:	4698      	mov	r8, r3
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	ad06      	add	r5, sp, #24
 80033dc:	9500      	str	r5, [sp, #0]
 80033de:	3b05      	subs	r3, #5
 80033e0:	223b      	movs	r2, #59	; 0x3b
 80033e2:	21d0      	movs	r1, #208	; 0xd0
 80033e4:	9005      	str	r0, [sp, #20]
 80033e6:	f004 f92b 	bl	8007640 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80033ea:	782b      	ldrb	r3, [r5, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	7868      	ldrb	r0, [r5, #1]
 80033f0:	4318      	orrs	r0, r3
 80033f2:	b200      	sxth	r0, r0
 80033f4:	4b46      	ldr	r3, [pc, #280]	; (8003510 <readAcc+0x164>)
 80033f6:	8018      	strh	r0, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80033f8:	78ab      	ldrb	r3, [r5, #2]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	78ef      	ldrb	r7, [r5, #3]
 80033fe:	431f      	orrs	r7, r3
 8003400:	b23f      	sxth	r7, r7
 8003402:	4b44      	ldr	r3, [pc, #272]	; (8003514 <readAcc+0x168>)
 8003404:	801f      	strh	r7, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003406:	792b      	ldrb	r3, [r5, #4]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	796e      	ldrb	r6, [r5, #5]
 800340c:	431e      	orrs	r6, r3
 800340e:	b236      	sxth	r6, r6
 8003410:	4b41      	ldr	r3, [pc, #260]	; (8003518 <readAcc+0x16c>)
 8003412:	801e      	strh	r6, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8003414:	4b41      	ldr	r3, [pc, #260]	; (800351c <readAcc+0x170>)
 8003416:	469a      	mov	sl, r3
 8003418:	f7ff fdf4 	bl	8003004 <__aeabi_i2d>
 800341c:	2200      	movs	r2, #0
 800341e:	4b40      	ldr	r3, [pc, #256]	; (8003520 <readAcc+0x174>)
 8003420:	f7fe ff58 	bl	80022d4 <__aeabi_dmul>
 8003424:	f7ff fe8c 	bl	8003140 <__aeabi_d2f>
 8003428:	4653      	mov	r3, sl
 800342a:	6018      	str	r0, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 800342c:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <readAcc+0x178>)
 800342e:	4699      	mov	r9, r3
 8003430:	0038      	movs	r0, r7
 8003432:	f7ff fde7 	bl	8003004 <__aeabi_i2d>
 8003436:	2200      	movs	r2, #0
 8003438:	4b39      	ldr	r3, [pc, #228]	; (8003520 <readAcc+0x174>)
 800343a:	f7fe ff4b 	bl	80022d4 <__aeabi_dmul>
 800343e:	f7ff fe7f 	bl	8003140 <__aeabi_d2f>
 8003442:	464b      	mov	r3, r9
 8003444:	6018      	str	r0, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8003446:	4f38      	ldr	r7, [pc, #224]	; (8003528 <readAcc+0x17c>)
 8003448:	0030      	movs	r0, r6
 800344a:	f7ff fddb 	bl	8003004 <__aeabi_i2d>
 800344e:	2200      	movs	r2, #0
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <readAcc+0x174>)
 8003452:	f7fe ff3f 	bl	80022d4 <__aeabi_dmul>
 8003456:	f7ff fe73 	bl	8003140 <__aeabi_d2f>
 800345a:	6038      	str	r0, [r7, #0]


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800345c:	465b      	mov	r3, fp
 800345e:	9302      	str	r3, [sp, #8]
 8003460:	4643      	mov	r3, r8
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	9500      	str	r5, [sp, #0]
 8003466:	3b05      	subs	r3, #5
 8003468:	2243      	movs	r2, #67	; 0x43
 800346a:	21d0      	movs	r1, #208	; 0xd0
 800346c:	9805      	ldr	r0, [sp, #20]
 800346e:	f004 f8e7 	bl	8007640 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003472:	782b      	ldrb	r3, [r5, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	7868      	ldrb	r0, [r5, #1]
 8003478:	4318      	orrs	r0, r3
 800347a:	b200      	sxth	r0, r0
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <readAcc+0x180>)
 800347e:	8018      	strh	r0, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003480:	78ab      	ldrb	r3, [r5, #2]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	78ee      	ldrb	r6, [r5, #3]
 8003486:	431e      	orrs	r6, r3
 8003488:	b236      	sxth	r6, r6
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <readAcc+0x184>)
 800348c:	801e      	strh	r6, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800348e:	792b      	ldrb	r3, [r5, #4]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	796d      	ldrb	r5, [r5, #5]
 8003494:	431d      	orrs	r5, r3
 8003496:	b22d      	sxth	r5, r5
 8003498:	4b26      	ldr	r3, [pc, #152]	; (8003534 <readAcc+0x188>)
 800349a:	801d      	strh	r5, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800349c:	f7ff fdb2 	bl	8003004 <__aeabi_i2d>
 80034a0:	2200      	movs	r2, #0
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <readAcc+0x18c>)
 80034a4:	f7fe fb1c 	bl	8001ae0 <__aeabi_ddiv>
 80034a8:	f7ff fe4a 	bl	8003140 <__aeabi_d2f>
 80034ac:	4680      	mov	r8, r0
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <readAcc+0x190>)
 80034b0:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80034b2:	0030      	movs	r0, r6
 80034b4:	f7ff fda6 	bl	8003004 <__aeabi_i2d>
 80034b8:	2200      	movs	r2, #0
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <readAcc+0x18c>)
 80034bc:	f7fe fb10 	bl	8001ae0 <__aeabi_ddiv>
 80034c0:	f7ff fe3e 	bl	8003140 <__aeabi_d2f>
 80034c4:	1c06      	adds	r6, r0, #0
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <readAcc+0x194>)
 80034c8:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80034ca:	0028      	movs	r0, r5
 80034cc:	f7ff fd9a 	bl	8003004 <__aeabi_i2d>
 80034d0:	2200      	movs	r2, #0
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <readAcc+0x18c>)
 80034d4:	f7fe fb04 	bl	8001ae0 <__aeabi_ddiv>
 80034d8:	f7ff fe32 	bl	8003140 <__aeabi_d2f>
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <readAcc+0x198>)
 80034de:	6018      	str	r0, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 80034e0:	4653      	mov	r3, sl
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=Ay;
 80034e6:	464b      	mov	r3, r9
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=Az;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=Gx;
 80034f0:	4643      	mov	r3, r8
 80034f2:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=Gy;
 80034f4:	6126      	str	r6, [r4, #16]
	ACC_GYRO_data[5]=Gz;
 80034f6:	6160      	str	r0, [r4, #20]
	return(ACC_GYRO_data);

	//sprintf (buf, "%.2f", Ax);
}
 80034f8:	0020      	movs	r0, r4
 80034fa:	b009      	add	sp, #36	; 0x24
 80034fc:	bcf0      	pop	{r4, r5, r6, r7}
 80034fe:	46bb      	mov	fp, r7
 8003500:	46b2      	mov	sl, r6
 8003502:	46a9      	mov	r9, r5
 8003504:	46a0      	mov	r8, r4
 8003506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003508:	20000224 	.word	0x20000224
 800350c:	20004328 	.word	0x20004328
 8003510:	20000258 	.word	0x20000258
 8003514:	2000025a 	.word	0x2000025a
 8003518:	2000025c 	.word	0x2000025c
 800351c:	20000260 	.word	0x20000260
 8003520:	3f100000 	.word	0x3f100000
 8003524:	20000264 	.word	0x20000264
 8003528:	20000268 	.word	0x20000268
 800352c:	20001ba4 	.word	0x20001ba4
 8003530:	20001ba6 	.word	0x20001ba6
 8003534:	20001ba8 	.word	0x20001ba8
 8003538:	40606000 	.word	0x40606000
 800353c:	20001b9c 	.word	0x20001b9c
 8003540:	20001ba0 	.word	0x20001ba0
 8003544:	20001bac 	.word	0x20001bac

08003548 <Read_DI_MAINS_STATE>:
static int Read_DI_MAINS_STATE(){
 8003548:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 800354a:	2180      	movs	r1, #128	; 0x80
 800354c:	0189      	lsls	r1, r1, #6
 800354e:	4802      	ldr	r0, [pc, #8]	; (8003558 <Read_DI_MAINS_STATE+0x10>)
 8003550:	f003 fdc2 	bl	80070d8 <HAL_GPIO_ReadPin>
}
 8003554:	bd10      	pop	{r4, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	50000400 	.word	0x50000400

0800355c <Read_DI_ACC_STATE>:
static int Read_DI_ACC_STATE(){
 800355c:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	01c9      	lsls	r1, r1, #7
 8003562:	4802      	ldr	r0, [pc, #8]	; (800356c <Read_DI_ACC_STATE+0x10>)
 8003564:	f003 fdb8 	bl	80070d8 <HAL_GPIO_ReadPin>
}
 8003568:	bd10      	pop	{r4, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	50000400 	.word	0x50000400

08003570 <Read_DI_BOX_STATE>:
static char Read_DI_BOX_STATE(){
 8003570:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	0209      	lsls	r1, r1, #8
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <Read_DI_BOX_STATE+0x1c>)
 8003578:	f003 fdae 	bl	80070d8 <HAL_GPIO_ReadPin>
		else box='C';
 800357c:	1e43      	subs	r3, r0, #1
 800357e:	425a      	negs	r2, r3
 8003580:	4153      	adcs	r3, r2
 8003582:	425b      	negs	r3, r3
 8003584:	200c      	movs	r0, #12
 8003586:	4018      	ands	r0, r3
 8003588:	3043      	adds	r0, #67	; 0x43
}
 800358a:	bd10      	pop	{r4, pc}
 800358c:	50000400 	.word	0x50000400

08003590 <Read_DI_SOS_STATE>:
static int Read_DI_SOS_STATE(){
 8003590:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8003592:	2180      	movs	r1, #128	; 0x80
 8003594:	20a0      	movs	r0, #160	; 0xa0
 8003596:	0049      	lsls	r1, r1, #1
 8003598:	05c0      	lsls	r0, r0, #23
 800359a:	f003 fd9d 	bl	80070d8 <HAL_GPIO_ReadPin>
}
 800359e:	bd10      	pop	{r4, pc}

080035a0 <StartTask02>:
{
 80035a0:	b510      	push	{r4, lr}
while(1){osDelay(1);
 80035a2:	2001      	movs	r0, #1
 80035a4:	f006 fc0a 	bl	8009dbc <osDelay>
 80035a8:	e7fb      	b.n	80035a2 <StartTask02+0x2>

080035aa <StartTask03>:
{
 80035aa:	b510      	push	{r4, lr}
    osDelay(1);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f006 fc05 	bl	8009dbc <osDelay>
  for(;;)
 80035b2:	e7fb      	b.n	80035ac <StartTask03+0x2>

080035b4 <build_decoding_table>:
								'w', 'x', 'y', 'z', '0', '1', '2', '3',
								'4', '5', '6', '7', '8', '9', '+', '/'};
static char *decoding_table = NULL;

void build_decoding_table()
{
 80035b4:	b510      	push	{r4, lr}

	decoding_table = malloc(256);
 80035b6:	2080      	movs	r0, #128	; 0x80
 80035b8:	0040      	lsls	r0, r0, #1
 80035ba:	f007 ffe5 	bl	800b588 <malloc>
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <build_decoding_table+0x20>)
 80035c0:	6018      	str	r0, [r3, #0]

	for (int i = 0; i < 64; i++)
 80035c2:	2300      	movs	r3, #0
		decoding_table[(unsigned char)encoding_table[i]] = i;
 80035c4:	4904      	ldr	r1, [pc, #16]	; (80035d8 <build_decoding_table+0x24>)
 80035c6:	5c5a      	ldrb	r2, [r3, r1]
 80035c8:	5483      	strb	r3, [r0, r2]
	for (int i = 0; i < 64; i++)
 80035ca:	3301      	adds	r3, #1
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d1fa      	bne.n	80035c6 <build_decoding_table+0x12>
}
 80035d0:	bd10      	pop	{r4, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20003d10 	.word	0x20003d10
 80035d8:	08011ed8 	.word	0x08011ed8

080035dc <base64_decode>:

	return 0;
}

int base64_decode(const uint8_t *data, int loc, size_t input_length)
{
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	46de      	mov	lr, fp
 80035e0:	4657      	mov	r7, sl
 80035e2:	464e      	mov	r6, r9
 80035e4:	4645      	mov	r5, r8
 80035e6:	b5e0      	push	{r5, r6, r7, lr}
 80035e8:	4c4a      	ldr	r4, [pc, #296]	; (8003714 <base64_decode+0x138>)
 80035ea:	44a5      	add	sp, r4
 80035ec:	0004      	movs	r4, r0
 80035ee:	9101      	str	r1, [sp, #4]
 80035f0:	0016      	movs	r6, r2

	if (decoding_table == NULL)
 80035f2:	4b49      	ldr	r3, [pc, #292]	; (8003718 <base64_decode+0x13c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d022      	beq.n	8003640 <base64_decode+0x64>
		build_decoding_table();

	if (input_length % 4 != 0)
 80035fa:	07b3      	lsls	r3, r6, #30
 80035fc:	d123      	bne.n	8003646 <base64_decode+0x6a>
	{
		Debug_Tx("inputlenth err");
		return 0;
	}

	size_t output_length = input_length / 4 * 3;
 80035fe:	08b3      	lsrs	r3, r6, #2
 8003600:	005a      	lsls	r2, r3, #1
 8003602:	4691      	mov	r9, r2
 8003604:	4499      	add	r9, r3
	if (data[input_length - 1] == '=')
 8003606:	19a3      	adds	r3, r4, r6
 8003608:	3b01      	subs	r3, #1
 800360a:	781b      	ldrb	r3, [r3, #0]
		(output_length)--;
 800360c:	3b3d      	subs	r3, #61	; 0x3d
 800360e:	425a      	negs	r2, r3
 8003610:	4153      	adcs	r3, r2
 8003612:	464a      	mov	r2, r9
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	4699      	mov	r9, r3
	if (data[input_length - 2] == '=')
 8003618:	19a3      	adds	r3, r4, r6
 800361a:	3b02      	subs	r3, #2
 800361c:	781b      	ldrb	r3, [r3, #0]
		(output_length)--;
 800361e:	3b3d      	subs	r3, #61	; 0x3d
 8003620:	425a      	negs	r2, r3
 8003622:	4153      	adcs	r3, r2
 8003624:	464a      	mov	r2, r9
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	4699      	mov	r9, r3
	{
		Debug_Tx("decodeddata err");
		return 0;
	}

	for (int i = 0, j = 0; i < input_length;)
 800362a:	2e00      	cmp	r6, #0
 800362c:	d057      	beq.n	80036de <base64_decode+0x102>
	{

		char sextet_a = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
 800362e:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <base64_decode+0x13c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0020      	movs	r0, r4
 8003634:	2104      	movs	r1, #4
	for (int i = 0, j = 0; i < input_length;)
 8003636:	2400      	movs	r4, #0
 8003638:	001d      	movs	r5, r3
 800363a:	46b4      	mov	ip, r6
 800363c:	464e      	mov	r6, r9
 800363e:	e00d      	b.n	800365c <base64_decode+0x80>
		build_decoding_table();
 8003640:	f7ff ffb8 	bl	80035b4 <build_decoding_table>
 8003644:	e7d9      	b.n	80035fa <base64_decode+0x1e>
		Debug_Tx("inputlenth err");
 8003646:	4835      	ldr	r0, [pc, #212]	; (800371c <base64_decode+0x140>)
 8003648:	f7ff fe6a 	bl	8003320 <Debug_Tx>
		return 0;
 800364c:	2000      	movs	r0, #0
 800364e:	e055      	b.n	80036fc <base64_decode+0x120>
		uint32_t triple = (sextet_a << 3 * 6) + (sextet_b << 2 * 6) + (sextet_c << 1 * 6) + (sextet_d << 0 * 6);

		if (j < output_length)
			decoded_data[j++] = (triple >> 2 * 8) & 0xFF;
		if (j < output_length)
			decoded_data[j++] = (triple >> 1 * 8) & 0xFF;
 8003650:	4644      	mov	r4, r8
	for (int i = 0, j = 0; i < input_length;)
 8003652:	1d0b      	adds	r3, r1, #4
 8003654:	3004      	adds	r0, #4
 8003656:	4561      	cmp	r1, ip
 8003658:	d241      	bcs.n	80036de <base64_decode+0x102>
 800365a:	0019      	movs	r1, r3
		char sextet_a = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
 800365c:	0002      	movs	r2, r0
 800365e:	7803      	ldrb	r3, [r0, #0]
 8003660:	2700      	movs	r7, #0
 8003662:	46bb      	mov	fp, r7
 8003664:	2b3d      	cmp	r3, #61	; 0x3d
 8003666:	d001      	beq.n	800366c <base64_decode+0x90>
 8003668:	5ceb      	ldrb	r3, [r5, r3]
 800366a:	469b      	mov	fp, r3
		char sextet_b = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
 800366c:	7853      	ldrb	r3, [r2, #1]
 800366e:	2700      	movs	r7, #0
 8003670:	46b9      	mov	r9, r7
 8003672:	2b3d      	cmp	r3, #61	; 0x3d
 8003674:	d001      	beq.n	800367a <base64_decode+0x9e>
 8003676:	5ceb      	ldrb	r3, [r5, r3]
 8003678:	4699      	mov	r9, r3
		char sextet_c = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
 800367a:	7893      	ldrb	r3, [r2, #2]
 800367c:	2700      	movs	r7, #0
 800367e:	46b8      	mov	r8, r7
 8003680:	2b3d      	cmp	r3, #61	; 0x3d
 8003682:	d001      	beq.n	8003688 <base64_decode+0xac>
 8003684:	5ceb      	ldrb	r3, [r5, r3]
 8003686:	4698      	mov	r8, r3
		char sextet_d = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
 8003688:	78d2      	ldrb	r2, [r2, #3]
 800368a:	2300      	movs	r3, #0
 800368c:	469a      	mov	sl, r3
 800368e:	2a3d      	cmp	r2, #61	; 0x3d
 8003690:	d001      	beq.n	8003696 <base64_decode+0xba>
 8003692:	5cab      	ldrb	r3, [r5, r2]
 8003694:	469a      	mov	sl, r3
		if (j < output_length)
 8003696:	42b4      	cmp	r4, r6
 8003698:	d2db      	bcs.n	8003652 <base64_decode+0x76>
		uint32_t triple = (sextet_a << 3 * 6) + (sextet_b << 2 * 6) + (sextet_c << 1 * 6) + (sextet_d << 0 * 6);
 800369a:	465b      	mov	r3, fp
 800369c:	049b      	lsls	r3, r3, #18
 800369e:	464a      	mov	r2, r9
 80036a0:	0312      	lsls	r2, r2, #12
 80036a2:	4691      	mov	r9, r2
 80036a4:	444b      	add	r3, r9
 80036a6:	4642      	mov	r2, r8
 80036a8:	0192      	lsls	r2, r2, #6
 80036aa:	4690      	mov	r8, r2
 80036ac:	4443      	add	r3, r8
 80036ae:	4453      	add	r3, sl
 80036b0:	469b      	mov	fp, r3
			decoded_data[j++] = (triple >> 2 * 8) & 0xFF;
 80036b2:	1c63      	adds	r3, r4, #1
 80036b4:	469a      	mov	sl, r3
 80036b6:	465b      	mov	r3, fp
 80036b8:	0c1f      	lsrs	r7, r3, #16
 80036ba:	aa03      	add	r2, sp, #12
 80036bc:	5517      	strb	r7, [r2, r4]
		if (j < output_length)
 80036be:	45b2      	cmp	sl, r6
 80036c0:	d225      	bcs.n	800370e <base64_decode+0x132>
			decoded_data[j++] = (triple >> 1 * 8) & 0xFF;
 80036c2:	1ca7      	adds	r7, r4, #2
 80036c4:	46b8      	mov	r8, r7
 80036c6:	0a1f      	lsrs	r7, r3, #8
 80036c8:	aa03      	add	r2, sp, #12
 80036ca:	4653      	mov	r3, sl
 80036cc:	54d7      	strb	r7, [r2, r3]
		if (j < output_length)
 80036ce:	45b0      	cmp	r8, r6
 80036d0:	d2be      	bcs.n	8003650 <base64_decode+0x74>
			decoded_data[j++] = (triple >> 0 * 8) & 0xFF;
 80036d2:	3403      	adds	r4, #3
 80036d4:	4642      	mov	r2, r8
 80036d6:	af03      	add	r7, sp, #12
 80036d8:	465b      	mov	r3, fp
 80036da:	54bb      	strb	r3, [r7, r2]
 80036dc:	e7b9      	b.n	8003652 <base64_decode+0x76>

	// Debug_Tx("decoded data");
	// Debug_Tx((char*)decoded_data);
	for (int i = 0; i < 512; i++)
	{
		GSMDData[i + (loc * 512)] = decoded_data[i];
 80036de:	9b01      	ldr	r3, [sp, #4]
 80036e0:	0259      	lsls	r1, r3, #9
 80036e2:	2301      	movs	r3, #1
 80036e4:	3901      	subs	r1, #1
 80036e6:	4a0e      	ldr	r2, [pc, #56]	; (8003720 <base64_decode+0x144>)
 80036e8:	1889      	adds	r1, r1, r2
 80036ea:	aa02      	add	r2, sp, #8
 80036ec:	1cd4      	adds	r4, r2, #3
	for (int i = 0; i < 512; i++)
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <base64_decode+0x148>)
		GSMDData[i + (loc * 512)] = decoded_data[i];
 80036f0:	5ce2      	ldrb	r2, [r4, r3]
 80036f2:	54ca      	strb	r2, [r1, r3]
	for (int i = 0; i < 512; i++)
 80036f4:	3301      	adds	r3, #1
 80036f6:	4283      	cmp	r3, r0
 80036f8:	d1fa      	bne.n	80036f0 <base64_decode+0x114>
	}
	return 1;
 80036fa:	2001      	movs	r0, #1
}
 80036fc:	2385      	movs	r3, #133	; 0x85
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	449d      	add	sp, r3
 8003702:	bcf0      	pop	{r4, r5, r6, r7}
 8003704:	46bb      	mov	fp, r7
 8003706:	46b2      	mov	sl, r6
 8003708:	46a9      	mov	r9, r5
 800370a:	46a0      	mov	r8, r4
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			decoded_data[j++] = (triple >> 2 * 8) & 0xFF;
 800370e:	4654      	mov	r4, sl
		if (j < output_length)
 8003710:	e79f      	b.n	8003652 <base64_decode+0x76>
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	fffffdec 	.word	0xfffffdec
 8003718:	20003d10 	.word	0x20003d10
 800371c:	08011098 	.word	0x08011098
 8003720:	200002fc 	.word	0x200002fc
 8003724:	00000201 	.word	0x00000201

08003728 <RestartGSM>:

void RestartGSM()
{
 8003728:	b570      	push	{r4, r5, r6, lr}
	}
}

static void SET_GSM_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800372a:	4c20      	ldr	r4, [pc, #128]	; (80037ac <RestartGSM+0x84>)
 800372c:	2201      	movs	r2, #1
 800372e:	2140      	movs	r1, #64	; 0x40
 8003730:	0020      	movs	r0, r4
 8003732:	f003 fcd7 	bl	80070e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8003736:	2200      	movs	r2, #0
 8003738:	2180      	movs	r1, #128	; 0x80
 800373a:	0020      	movs	r0, r4
 800373c:	f003 fcd2 	bl	80070e4 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(1);
	SET_PWRKEY(0);
	HAL_Delay(700);
 8003740:	25af      	movs	r5, #175	; 0xaf
 8003742:	00ad      	lsls	r5, r5, #2
 8003744:	0028      	movs	r0, r5
 8003746:	f002 fdfd 	bl	8006344 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800374a:	2201      	movs	r2, #1
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	0020      	movs	r0, r4
 8003750:	f003 fcc8 	bl	80070e4 <HAL_GPIO_WritePin>
	SET_PWRKEY(1);
	HAL_Delay(500);
 8003754:	26fa      	movs	r6, #250	; 0xfa
 8003756:	0076      	lsls	r6, r6, #1
 8003758:	0030      	movs	r0, r6
 800375a:	f002 fdf3 	bl	8006344 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800375e:	2200      	movs	r2, #0
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0020      	movs	r0, r4
 8003764:	f003 fcbe 	bl	80070e4 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
	HAL_Delay(700);
 8003768:	0028      	movs	r0, r5
 800376a:	f002 fdeb 	bl	8006344 <HAL_Delay>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 800376e:	2200      	movs	r2, #0
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	0020      	movs	r0, r4
 8003774:	f003 fcb6 	bl	80070e4 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(0);
	HAL_Delay(700);
 8003778:	0028      	movs	r0, r5
 800377a:	f002 fde3 	bl	8006344 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800377e:	2201      	movs	r2, #1
 8003780:	2180      	movs	r1, #128	; 0x80
 8003782:	0020      	movs	r0, r4
 8003784:	f003 fcae 	bl	80070e4 <HAL_GPIO_WritePin>
	SET_PWRKEY(1);
	HAL_Delay(500);
 8003788:	0030      	movs	r0, r6
 800378a:	f002 fddb 	bl	8006344 <HAL_Delay>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800378e:	2201      	movs	r2, #1
 8003790:	2140      	movs	r1, #64	; 0x40
 8003792:	0020      	movs	r0, r4
 8003794:	f003 fca6 	bl	80070e4 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(1);
	HAL_Delay(200);
 8003798:	20c8      	movs	r0, #200	; 0xc8
 800379a:	f002 fdd3 	bl	8006344 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800379e:	2200      	movs	r2, #0
 80037a0:	2180      	movs	r1, #128	; 0x80
 80037a2:	0020      	movs	r0, r4
 80037a4:	f003 fc9e 	bl	80070e4 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
}
 80037a8:	bd70      	pop	{r4, r5, r6, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	50000800 	.word	0x50000800

080037b0 <SendGSMCode>:

void SendGSMCode(const char cmd[])
{
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	0005      	movs	r5, r0

	memset(GSMData, 0, 990);
 80037b4:	4818      	ldr	r0, [pc, #96]	; (8003818 <SendGSMCode+0x68>)
 80037b6:	4a19      	ldr	r2, [pc, #100]	; (800381c <SendGSMCode+0x6c>)
 80037b8:	2100      	movs	r1, #0
 80037ba:	f009 fe19 	bl	800d3f0 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80037be:	4b18      	ldr	r3, [pc, #96]	; (8003820 <SendGSMCode+0x70>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	220c      	movs	r2, #12
 80037c4:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80037c6:	4917      	ldr	r1, [pc, #92]	; (8003824 <SendGSMCode+0x74>)
 80037c8:	4817      	ldr	r0, [pc, #92]	; (8003828 <SendGSMCode+0x78>)
 80037ca:	3a0b      	subs	r2, #11
 80037cc:	f006 f99a 	bl	8009b04 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 100);
 80037d0:	4816      	ldr	r0, [pc, #88]	; (800382c <SendGSMCode+0x7c>)
 80037d2:	2264      	movs	r2, #100	; 0x64
 80037d4:	2100      	movs	r1, #0
 80037d6:	f009 fe0b 	bl	800d3f0 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 80037da:	0028      	movs	r0, r5
 80037dc:	f7fc fc94 	bl	8000108 <strlen>
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <SendGSMCode+0x80>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <SendGSMCode+0x3c>
 80037e8:	285a      	cmp	r0, #90	; 0x5a
 80037ea:	d810      	bhi.n	800380e <SendGSMCode+0x5e>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 80037ec:	4c0f      	ldr	r4, [pc, #60]	; (800382c <SendGSMCode+0x7c>)
 80037ee:	0029      	movs	r1, r5
 80037f0:	0020      	movs	r0, r4
 80037f2:	f009 ffb2 	bl	800d75a <strcpy>
	strcat(GSMTXC, "\r\n");
 80037f6:	0020      	movs	r0, r4
 80037f8:	f7fc fc86 	bl	8000108 <strlen>
 80037fc:	1820      	adds	r0, r4, r0
 80037fe:	490d      	ldr	r1, [pc, #52]	; (8003834 <SendGSMCode+0x84>)
 8003800:	2203      	movs	r2, #3
 8003802:	f009 ffbd 	bl	800d780 <memcpy>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 8003806:	0020      	movs	r0, r4
 8003808:	f7ff fdaa 	bl	8003360 <GSM_Tx>
	// return GSM_Rx();
}
 800380c:	bd70      	pop	{r4, r5, r6, pc}
		Debug_Tx("Error:GSM Code Length Exceed");
 800380e:	480a      	ldr	r0, [pc, #40]	; (8003838 <SendGSMCode+0x88>)
 8003810:	f7ff fd86 	bl	8003320 <Debug_Tx>
 8003814:	e7ea      	b.n	80037ec <SendGSMCode+0x3c>
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	20000eb8 	.word	0x20000eb8
 800381c:	000003de 	.word	0x000003de
 8003820:	200044c0 	.word	0x200044c0
 8003824:	200002f8 	.word	0x200002f8
 8003828:	2000442c 	.word	0x2000442c
 800382c:	20001b38 	.word	0x20001b38
 8003830:	20000014 	.word	0x20000014
 8003834:	080110c8 	.word	0x080110c8
 8003838:	080110a8 	.word	0x080110a8

0800383c <SendGSMCodeFOTA>:

int SendGSMCodeFOTA(const char cmd[])
{
 800383c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383e:	46c6      	mov	lr, r8
 8003840:	b500      	push	{lr}
 8003842:	b084      	sub	sp, #16
 8003844:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003846:	4b7d      	ldr	r3, [pc, #500]	; (8003a3c <SendGSMCodeFOTA+0x200>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	220c      	movs	r2, #12
 800384c:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800384e:	497c      	ldr	r1, [pc, #496]	; (8003a40 <SendGSMCodeFOTA+0x204>)
 8003850:	487c      	ldr	r0, [pc, #496]	; (8003a44 <SendGSMCodeFOTA+0x208>)
 8003852:	3a0b      	subs	r2, #11
 8003854:	f006 f956 	bl	8009b04 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 1000);
 8003858:	487b      	ldr	r0, [pc, #492]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 800385a:	22fa      	movs	r2, #250	; 0xfa
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	2100      	movs	r1, #0
 8003860:	f009 fdc6 	bl	800d3f0 <memset>
	// memset(GSMDData,0,3000);
	memset(GSMTXC, 0, 100);
 8003864:	4879      	ldr	r0, [pc, #484]	; (8003a4c <SendGSMCodeFOTA+0x210>)
 8003866:	2264      	movs	r2, #100	; 0x64
 8003868:	2100      	movs	r1, #0
 800386a:	f009 fdc1 	bl	800d3f0 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 800386e:	0028      	movs	r0, r5
 8003870:	f7fc fc4a 	bl	8000108 <strlen>
 8003874:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <SendGSMCodeFOTA+0x214>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <SendGSMCodeFOTA+0x44>
 800387c:	285a      	cmp	r0, #90	; 0x5a
 800387e:	d81e      	bhi.n	80038be <SendGSMCodeFOTA+0x82>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 8003880:	4c72      	ldr	r4, [pc, #456]	; (8003a4c <SendGSMCodeFOTA+0x210>)
 8003882:	0029      	movs	r1, r5
 8003884:	0020      	movs	r0, r4
 8003886:	f009 ff68 	bl	800d75a <strcpy>
	strcat(GSMTXC, "\r\n");
 800388a:	0020      	movs	r0, r4
 800388c:	f7fc fc3c 	bl	8000108 <strlen>
 8003890:	1820      	adds	r0, r4, r0
 8003892:	4970      	ldr	r1, [pc, #448]	; (8003a54 <SendGSMCodeFOTA+0x218>)
 8003894:	2203      	movs	r2, #3
 8003896:	f009 ff73 	bl	800d780 <memcpy>
	dnlfile = 1;
 800389a:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <SendGSMCodeFOTA+0x21c>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]
	Debug_Tx("sending gsm download command and waiting ");
 80038a0:	486e      	ldr	r0, [pc, #440]	; (8003a5c <SendGSMCodeFOTA+0x220>)
 80038a2:	f7ff fd3d 	bl	8003320 <Debug_Tx>
	Debug_Tx(GSMTXC);
 80038a6:	0020      	movs	r0, r4
 80038a8:	f7ff fd3a 	bl	8003320 <Debug_Tx>
	GSM_Tx(GSMTXC);
 80038ac:	0020      	movs	r0, r4
 80038ae:	f7ff fd57 	bl	8003360 <GSM_Tx>
	//
	int try = 20;
	while ((strstr(GSMData, "+QFTPGET:") == NULL) && try > 0)
 80038b2:	2415      	movs	r4, #21
 80038b4:	4e6a      	ldr	r6, [pc, #424]	; (8003a60 <SendGSMCodeFOTA+0x224>)
 80038b6:	4d64      	ldr	r5, [pc, #400]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
	{
		HAL_Delay(500);
 80038b8:	27fa      	movs	r7, #250	; 0xfa
 80038ba:	007f      	lsls	r7, r7, #1
	while ((strstr(GSMData, "+QFTPGET:") == NULL) && try > 0)
 80038bc:	e006      	b.n	80038cc <SendGSMCodeFOTA+0x90>
		Debug_Tx("Error:GSM Code Length Exceed");
 80038be:	4869      	ldr	r0, [pc, #420]	; (8003a64 <SendGSMCodeFOTA+0x228>)
 80038c0:	f7ff fd2e 	bl	8003320 <Debug_Tx>
 80038c4:	e7dc      	b.n	8003880 <SendGSMCodeFOTA+0x44>
		HAL_Delay(500);
 80038c6:	0038      	movs	r0, r7
 80038c8:	f002 fd3c 	bl	8006344 <HAL_Delay>
	while ((strstr(GSMData, "+QFTPGET:") == NULL) && try > 0)
 80038cc:	0031      	movs	r1, r6
 80038ce:	0028      	movs	r0, r5
 80038d0:	f009 fe3e 	bl	800d550 <strstr>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d102      	bne.n	80038de <SendGSMCodeFOTA+0xa2>
 80038d8:	3c01      	subs	r4, #1
 80038da:	2c00      	cmp	r4, #0
 80038dc:	d1f3      	bne.n	80038c6 <SendGSMCodeFOTA+0x8a>
		try = try - 1;
	}

	HAL_Delay(1000);
 80038de:	20fa      	movs	r0, #250	; 0xfa
 80038e0:	0080      	lsls	r0, r0, #2
 80038e2:	f002 fd2f 	bl	8006344 <HAL_Delay>
	Debug_Tx(GSMData);
 80038e6:	4c58      	ldr	r4, [pc, #352]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 80038e8:	0020      	movs	r0, r4
 80038ea:	f7ff fd19 	bl	8003320 <Debug_Tx>
	Debug_Tx("Data read loop over");
 80038ee:	485e      	ldr	r0, [pc, #376]	; (8003a68 <SendGSMCodeFOTA+0x22c>)
 80038f0:	f7ff fd16 	bl	8003320 <Debug_Tx>
	if (strstr(GSMData, "+QFTPGET:") == NULL)
 80038f4:	495a      	ldr	r1, [pc, #360]	; (8003a60 <SendGSMCodeFOTA+0x224>)
 80038f6:	0020      	movs	r0, r4
 80038f8:	f009 fe2a 	bl	800d550 <strstr>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d017      	beq.n	8003930 <SendGSMCodeFOTA+0xf4>
		Debug_Tx("Error Incomplete data");
		Debug_Tx(GSMData);
		return 0;
	}

	Debug_Tx("incomplete check over");
 8003900:	485a      	ldr	r0, [pc, #360]	; (8003a6c <SendGSMCodeFOTA+0x230>)
 8003902:	f7ff fd0d 	bl	8003320 <Debug_Tx>
	if (strstr(GSMData, "END DOWNLOAD") != NULL)
 8003906:	495a      	ldr	r1, [pc, #360]	; (8003a70 <SendGSMCodeFOTA+0x234>)
 8003908:	484f      	ldr	r0, [pc, #316]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 800390a:	f009 fe21 	bl	800d550 <strstr>
 800390e:	2800      	cmp	r0, #0
 8003910:	d020      	beq.n	8003954 <SendGSMCodeFOTA+0x118>
	{
		if (FTPdnS > 0)
 8003912:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <SendGSMCodeFOTA+0x238>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	dc12      	bgt.n	8003940 <SendGSMCodeFOTA+0x104>
			Debug_Tx("data writing");
			//Flash_Write((uint8_t *)GSMDData);
			Debug_Tx("data writing complete");
		}

		Debug_Tx("End of file detected ");
 800391a:	4857      	ldr	r0, [pc, #348]	; (8003a78 <SendGSMCodeFOTA+0x23c>)
 800391c:	f7ff fd00 	bl	8003320 <Debug_Tx>
		Debug_Tx(GSMData);
 8003920:	4849      	ldr	r0, [pc, #292]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 8003922:	f7ff fcfd 	bl	8003320 <Debug_Tx>
		return 2;
 8003926:	2002      	movs	r0, #2
	dnlfile = 0;

	SendGSMCode(" AT");
	HAL_Delay(1000);
	return 1;
}
 8003928:	b004      	add	sp, #16
 800392a:	bc80      	pop	{r7}
 800392c:	46b8      	mov	r8, r7
 800392e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Debug_Tx("Error Incomplete data");
 8003930:	4852      	ldr	r0, [pc, #328]	; (8003a7c <SendGSMCodeFOTA+0x240>)
 8003932:	f7ff fcf5 	bl	8003320 <Debug_Tx>
		Debug_Tx(GSMData);
 8003936:	4844      	ldr	r0, [pc, #272]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 8003938:	f7ff fcf2 	bl	8003320 <Debug_Tx>
		return 0;
 800393c:	2000      	movs	r0, #0
 800393e:	e7f3      	b.n	8003928 <SendGSMCodeFOTA+0xec>
			Debug_Tx(GSMDData);
 8003940:	484f      	ldr	r0, [pc, #316]	; (8003a80 <SendGSMCodeFOTA+0x244>)
 8003942:	f7ff fced 	bl	8003320 <Debug_Tx>
			Debug_Tx("data writing");
 8003946:	484f      	ldr	r0, [pc, #316]	; (8003a84 <SendGSMCodeFOTA+0x248>)
 8003948:	f7ff fcea 	bl	8003320 <Debug_Tx>
			Debug_Tx("data writing complete");
 800394c:	484e      	ldr	r0, [pc, #312]	; (8003a88 <SendGSMCodeFOTA+0x24c>)
 800394e:	f7ff fce7 	bl	8003320 <Debug_Tx>
 8003952:	e7e2      	b.n	800391a <SendGSMCodeFOTA+0xde>
	Debug_Tx(GSMData);
 8003954:	4c3c      	ldr	r4, [pc, #240]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 8003956:	0020      	movs	r0, r4
 8003958:	f7ff fce2 	bl	8003320 <Debug_Tx>
	Debug_Tx("complition check over");
 800395c:	484b      	ldr	r0, [pc, #300]	; (8003a8c <SendGSMCodeFOTA+0x250>)
 800395e:	f7ff fcdf 	bl	8003320 <Debug_Tx>
	char *pos = strstr(GSMData, "CONNECT");
 8003962:	494b      	ldr	r1, [pc, #300]	; (8003a90 <SendGSMCodeFOTA+0x254>)
 8003964:	0020      	movs	r0, r4
 8003966:	f009 fdf3 	bl	800d550 <strstr>
	pos = pos + 9;
 800396a:	0001      	movs	r1, r0
 800396c:	3109      	adds	r1, #9
	strcpy(GSMData, pos);
 800396e:	0020      	movs	r0, r4
 8003970:	f009 fef3 	bl	800d75a <strcpy>
	char *p = strstr(GSMData, "+QFTPGET:");
 8003974:	493a      	ldr	r1, [pc, #232]	; (8003a60 <SendGSMCodeFOTA+0x224>)
 8003976:	0020      	movs	r0, r4
 8003978:	f009 fdea 	bl	800d550 <strstr>
	if (GSMData[p - GSMData - 2] == '=')
 800397c:	1b04      	subs	r4, r0, r4
 800397e:	3802      	subs	r0, #2
 8003980:	7803      	ldrb	r3, [r0, #0]
 8003982:	2b3d      	cmp	r3, #61	; 0x3d
 8003984:	d00b      	beq.n	800399e <SendGSMCodeFOTA+0x162>
		GSMData[p - GSMData] = 0;
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 8003988:	2200      	movs	r2, #0
 800398a:	551a      	strb	r2, [r3, r4]
	Debug_Tx("loop2");
 800398c:	4841      	ldr	r0, [pc, #260]	; (8003a94 <SendGSMCodeFOTA+0x258>)
 800398e:	f7ff fcc7 	bl	8003320 <Debug_Tx>
	for (int i = 0; i < strlen(GSMData); i++)
 8003992:	2400      	movs	r4, #0
	int j = 0;
 8003994:	2500      	movs	r5, #0
	for (int i = 0; i < strlen(GSMData); i++)
 8003996:	4e2c      	ldr	r6, [pc, #176]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
		if (GSMData[i] != 136)
 8003998:	0037      	movs	r7, r6
			GSMData[j] = GSMData[i];
 800399a:	46b0      	mov	r8, r6
	for (int i = 0; i < strlen(GSMData); i++)
 800399c:	e006      	b.n	80039ac <SendGSMCodeFOTA+0x170>
		GSMData[p - GSMData - 1] = 0;
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 80039a0:	191b      	adds	r3, r3, r4
 80039a2:	3b01      	subs	r3, #1
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e7f0      	b.n	800398c <SendGSMCodeFOTA+0x150>
	for (int i = 0; i < strlen(GSMData); i++)
 80039aa:	3401      	adds	r4, #1
 80039ac:	0030      	movs	r0, r6
 80039ae:	f7fc fbab 	bl	8000108 <strlen>
 80039b2:	42a0      	cmp	r0, r4
 80039b4:	d906      	bls.n	80039c4 <SendGSMCodeFOTA+0x188>
		if (GSMData[i] != 136)
 80039b6:	5d3b      	ldrb	r3, [r7, r4]
 80039b8:	2b88      	cmp	r3, #136	; 0x88
 80039ba:	d0f6      	beq.n	80039aa <SendGSMCodeFOTA+0x16e>
			GSMData[j] = GSMData[i];
 80039bc:	4642      	mov	r2, r8
 80039be:	5553      	strb	r3, [r2, r5]
			j = j + 1;
 80039c0:	3501      	adds	r5, #1
 80039c2:	e7f2      	b.n	80039aa <SendGSMCodeFOTA+0x16e>
	Debug_Tx("loop2 ov");
 80039c4:	4834      	ldr	r0, [pc, #208]	; (8003a98 <SendGSMCodeFOTA+0x25c>)
 80039c6:	f7ff fcab 	bl	8003320 <Debug_Tx>
	GSMData[j] = 0;
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	555a      	strb	r2, [r3, r5]
	if (FTPdnS == 0)
 80039d0:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <SendGSMCodeFOTA+0x238>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <SendGSMCodeFOTA+0x1de>
	sprintf(ee, "%d", j - 2);
 80039d8:	3d02      	subs	r5, #2
 80039da:	4930      	ldr	r1, [pc, #192]	; (8003a9c <SendGSMCodeFOTA+0x260>)
 80039dc:	002a      	movs	r2, r5
 80039de:	a801      	add	r0, sp, #4
 80039e0:	f009 fc9a 	bl	800d318 <siprintf>
	Debug_Tx(ee);
 80039e4:	a801      	add	r0, sp, #4
 80039e6:	f7ff fc9b 	bl	8003320 <Debug_Tx>
	base64_decode((uint8_t *)GSMData, FTPdnS, j - 2);
 80039ea:	4c22      	ldr	r4, [pc, #136]	; (8003a74 <SendGSMCodeFOTA+0x238>)
 80039ec:	6821      	ldr	r1, [r4, #0]
 80039ee:	4816      	ldr	r0, [pc, #88]	; (8003a48 <SendGSMCodeFOTA+0x20c>)
 80039f0:	002a      	movs	r2, r5
 80039f2:	f7ff fdf3 	bl	80035dc <base64_decode>
	if (FTPdnS < 3)
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	dc14      	bgt.n	8003a26 <SendGSMCodeFOTA+0x1ea>
		FTPdnS = FTPdnS + 1;
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <SendGSMCodeFOTA+0x238>)
 8003a00:	6013      	str	r3, [r2, #0]
	dnlfile = 0;
 8003a02:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <SendGSMCodeFOTA+0x21c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
	SendGSMCode(" AT");
 8003a08:	4825      	ldr	r0, [pc, #148]	; (8003aa0 <SendGSMCodeFOTA+0x264>)
 8003a0a:	f7ff fed1 	bl	80037b0 <SendGSMCode>
	HAL_Delay(1000);
 8003a0e:	20fa      	movs	r0, #250	; 0xfa
 8003a10:	0080      	lsls	r0, r0, #2
 8003a12:	f002 fc97 	bl	8006344 <HAL_Delay>
	return 1;
 8003a16:	2001      	movs	r0, #1
 8003a18:	e786      	b.n	8003928 <SendGSMCodeFOTA+0xec>
		memset(GSMDData, 0, 3000);
 8003a1a:	4819      	ldr	r0, [pc, #100]	; (8003a80 <SendGSMCodeFOTA+0x244>)
 8003a1c:	4a21      	ldr	r2, [pc, #132]	; (8003aa4 <SendGSMCodeFOTA+0x268>)
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f009 fce6 	bl	800d3f0 <memset>
 8003a24:	e7d8      	b.n	80039d8 <SendGSMCodeFOTA+0x19c>
		Debug_Tx(GSMDData);
 8003a26:	4816      	ldr	r0, [pc, #88]	; (8003a80 <SendGSMCodeFOTA+0x244>)
 8003a28:	f7ff fc7a 	bl	8003320 <Debug_Tx>
		Debug_Tx("data writing");
 8003a2c:	4815      	ldr	r0, [pc, #84]	; (8003a84 <SendGSMCodeFOTA+0x248>)
 8003a2e:	f7ff fc77 	bl	8003320 <Debug_Tx>
		Debug_Tx("data writing complete");
 8003a32:	4815      	ldr	r0, [pc, #84]	; (8003a88 <SendGSMCodeFOTA+0x24c>)
 8003a34:	f7ff fc74 	bl	8003320 <Debug_Tx>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e7e0      	b.n	80039fe <SendGSMCodeFOTA+0x1c2>
 8003a3c:	200044c0 	.word	0x200044c0
 8003a40:	200002f8 	.word	0x200002f8
 8003a44:	2000442c 	.word	0x2000442c
 8003a48:	20000eb8 	.word	0x20000eb8
 8003a4c:	20001b38 	.word	0x20001b38
 8003a50:	20000014 	.word	0x20000014
 8003a54:	080110c8 	.word	0x080110c8
 8003a58:	20003d18 	.word	0x20003d18
 8003a5c:	080110cc 	.word	0x080110cc
 8003a60:	080110f8 	.word	0x080110f8
 8003a64:	080110a8 	.word	0x080110a8
 8003a68:	08011104 	.word	0x08011104
 8003a6c:	08011130 	.word	0x08011130
 8003a70:	08011148 	.word	0x08011148
 8003a74:	200002a4 	.word	0x200002a4
 8003a78:	08011180 	.word	0x08011180
 8003a7c:	08011118 	.word	0x08011118
 8003a80:	200002fc 	.word	0x200002fc
 8003a84:	08011158 	.word	0x08011158
 8003a88:	08011168 	.word	0x08011168
 8003a8c:	08011198 	.word	0x08011198
 8003a90:	080111b0 	.word	0x080111b0
 8003a94:	080111b8 	.word	0x080111b8
 8003a98:	080111c0 	.word	0x080111c0
 8003a9c:	080111cc 	.word	0x080111cc
 8003aa0:	080111d0 	.word	0x080111d0
 8003aa4:	00000bb8 	.word	0x00000bb8

08003aa8 <waitForResponse>:
	memset(end, 0, 3);
	end[0] = 0x1A;
	GSM_Tx((char *)end);
	// return GSM_Rx();
}
int waitForResponse(const char* expectedResponse, int timeout) {
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	0006      	movs	r6, r0
 8003aac:	000d      	movs	r5, r1
	memset(GSMReply3, 0, 500);
 8003aae:	480f      	ldr	r0, [pc, #60]	; (8003aec <waitForResponse+0x44>)
 8003ab0:	22fa      	movs	r2, #250	; 0xfa
 8003ab2:	0052      	lsls	r2, r2, #1
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f009 fc9b 	bl	800d3f0 <memset>
    uint16_t rxBufferIndex = 0;
    int ret=0;

	int stT = HAL_GetTick();
 8003aba:	f002 fc3d 	bl	8006338 <HAL_GetTick>
 8003abe:	0004      	movs	r4, r0
	while (((HAL_GetTick() - stT) <= timeout)){
		//HAL_UART_Receive(&huart1, (uint8_t*)(GSMReply3 + rxBufferIndex), 1, HAL_MAX_DELAY);
        //rxBufferIndex++;
		//strlen(GSMData)
        if (strstr(GSMData, expectedResponse) != NULL) {
 8003ac0:	4f0b      	ldr	r7, [pc, #44]	; (8003af0 <waitForResponse+0x48>)
	while (((HAL_GetTick() - stT) <= timeout)){
 8003ac2:	f002 fc39 	bl	8006338 <HAL_GetTick>
 8003ac6:	1b00      	subs	r0, r0, r4
 8003ac8:	42a8      	cmp	r0, r5
 8003aca:	d807      	bhi.n	8003adc <waitForResponse+0x34>
        if (strstr(GSMData, expectedResponse) != NULL) {
 8003acc:	0031      	movs	r1, r6
 8003ace:	0038      	movs	r0, r7
 8003ad0:	f009 fd3e 	bl	800d550 <strstr>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d0f4      	beq.n	8003ac2 <waitForResponse+0x1a>
        	ret=1;
 8003ad8:	2001      	movs	r0, #1
        }
    }
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
	return ret;

}
 8003ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
 8003adc:	4805      	ldr	r0, [pc, #20]	; (8003af4 <waitForResponse+0x4c>)
 8003ade:	f7ff fc1f 	bl	8003320 <Debug_Tx>
 8003ae2:	4803      	ldr	r0, [pc, #12]	; (8003af0 <waitForResponse+0x48>)
 8003ae4:	f7ff fc1c 	bl	8003320 <Debug_Tx>
    int ret=0;
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e7f6      	b.n	8003ada <waitForResponse+0x32>
 8003aec:	20001944 	.word	0x20001944
 8003af0:	20000eb8 	.word	0x20000eb8
 8003af4:	080111d4 	.word	0x080111d4

08003af8 <SPI_flash_sent_byte>:
uint8_t buffer_SPI_Recive[30];
//The data you want to receive

//This is the definition of an array

void SPI_flash_sent_byte(uint8_t data){
 8003af8:	b500      	push	{lr}
 8003afa:	b083      	sub	sp, #12
 8003afc:	466b      	mov	r3, sp
 8003afe:	1dd9      	adds	r1, r3, #7
 8003b00:	7008      	strb	r0, [r1, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8003b02:	23fa      	movs	r3, #250	; 0xfa
 8003b04:	4803      	ldr	r0, [pc, #12]	; (8003b14 <SPI_flash_sent_byte+0x1c>)
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f004 fd8f 	bl	800862c <HAL_SPI_Transmit>
}
 8003b0e:	b003      	add	sp, #12
 8003b10:	bd00      	pop	{pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	2000437c 	.word	0x2000437c

08003b18 <SPI_flash_Write_Enable>:

void SPI_flash_Write_Enable() {
 8003b18:	b510      	push	{r4, lr}
    SPI_flash_cs_low;
 8003b1a:	24a0      	movs	r4, #160	; 0xa0
 8003b1c:	05e4      	lsls	r4, r4, #23
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2110      	movs	r1, #16
 8003b22:	0020      	movs	r0, r4
 8003b24:	f003 fade 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8003b28:	2006      	movs	r0, #6
 8003b2a:	f7ff ffe5 	bl	8003af8 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2110      	movs	r1, #16
 8003b32:	0020      	movs	r0, r4
 8003b34:	f003 fad6 	bl	80070e4 <HAL_GPIO_WritePin>
}
 8003b38:	bd10      	pop	{r4, pc}

08003b3a <SPI_flash_Write_Disable>:

void SPI_flash_Write_Disable() {
 8003b3a:	b510      	push	{r4, lr}
    SPI_flash_cs_low;
 8003b3c:	24a0      	movs	r4, #160	; 0xa0
 8003b3e:	05e4      	lsls	r4, r4, #23
 8003b40:	2200      	movs	r2, #0
 8003b42:	2110      	movs	r1, #16
 8003b44:	0020      	movs	r0, r4
 8003b46:	f003 facd 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8003b4a:	2004      	movs	r0, #4
 8003b4c:	f7ff ffd4 	bl	8003af8 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003b50:	2201      	movs	r2, #1
 8003b52:	2110      	movs	r1, #16
 8003b54:	0020      	movs	r0, r4
 8003b56:	f003 fac5 	bl	80070e4 <HAL_GPIO_WritePin>
}
 8003b5a:	bd10      	pop	{r4, pc}

08003b5c <SPI_flash_sent_address>:

void SPI_flash_sent_address(uint8_t* Sent){
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	0001      	movs	r1, r0
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8003b60:	23fa      	movs	r3, #250	; 0xfa
 8003b62:	4c03      	ldr	r4, [pc, #12]	; (8003b70 <SPI_flash_sent_address+0x14>)
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	2203      	movs	r2, #3
 8003b68:	0020      	movs	r0, r4
 8003b6a:	f004 fd5f 	bl	800862c <HAL_SPI_Transmit>
}
 8003b6e:	bd10      	pop	{r4, pc}
 8003b70:	2000437c 	.word	0x2000437c

08003b74 <SPI_flash_TransmitReceive>:



void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
 8003b74:	b500      	push	{lr}
 8003b76:	b083      	sub	sp, #12
 8003b78:	0002      	movs	r2, r0
 8003b7a:	000b      	movs	r3, r1
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8003b7c:	4804      	ldr	r0, [pc, #16]	; (8003b90 <SPI_flash_TransmitReceive+0x1c>)
 8003b7e:	21fa      	movs	r1, #250	; 0xfa
 8003b80:	0089      	lsls	r1, r1, #2
 8003b82:	9100      	str	r1, [sp, #0]
 8003b84:	0011      	movs	r1, r2
 8003b86:	f004 fe2b 	bl	80087e0 <HAL_SPI_TransmitReceive>
}
 8003b8a:	b003      	add	sp, #12
 8003b8c:	bd00      	pop	{pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	2000437c 	.word	0x2000437c

08003b94 <SPI_flash_get_device_ID>:

void SPI_flash_get_device_ID( ) {
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	b0a0      	sub	sp, #128	; 0x80
    SPI_flash_cs_low;
 8003b98:	26a0      	movs	r6, #160	; 0xa0
 8003b9a:	05f6      	lsls	r6, r6, #23
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	0030      	movs	r0, r6
 8003ba2:	f003 fa9f 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8003ba6:	2090      	movs	r0, #144	; 0x90
 8003ba8:	f7ff ffa6 	bl	8003af8 <SPI_flash_sent_byte>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8003bac:	ac1d      	add	r4, sp, #116	; 0x74
 8003bae:	2500      	movs	r5, #0
 8003bb0:	7025      	strb	r5, [r4, #0]
    aa[1]=0;
 8003bb2:	7065      	strb	r5, [r4, #1]
    aa[2]=0;
 8003bb4:	70a5      	strb	r5, [r4, #2]
    aa[3]=0;
 8003bb6:	70e5      	strb	r5, [r4, #3]
    aa[4]=0;
 8003bb8:	7125      	strb	r5, [r4, #4]
    aa[5]=0;
 8003bba:	7165      	strb	r5, [r4, #5]
    SPI_flash_sent_address (aa);
 8003bbc:	0020      	movs	r0, r4
 8003bbe:	f7ff ffcd 	bl	8003b5c <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(aa, 2);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	0020      	movs	r0, r4
 8003bc6:	f7ff ffd5 	bl	8003b74 <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003bca:	2201      	movs	r2, #1
 8003bcc:	2110      	movs	r1, #16
 8003bce:	0030      	movs	r0, r6
 8003bd0:	f003 fa88 	bl	80070e4 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8003bd4:	7863      	ldrb	r3, [r4, #1]
 8003bd6:	7822      	ldrb	r2, [r4, #0]
 8003bd8:	492c      	ldr	r1, [pc, #176]	; (8003c8c <SPI_flash_get_device_ID+0xf8>)
 8003bda:	a804      	add	r0, sp, #16
 8003bdc:	f009 fb9c 	bl	800d318 <siprintf>
    Debug_Tx((char*)bufd);
 8003be0:	a804      	add	r0, sp, #16
 8003be2:	f7ff fb9d 	bl	8003320 <Debug_Tx>

    SPI_flash_cs_low;
 8003be6:	2200      	movs	r2, #0
 8003be8:	2110      	movs	r1, #16
 8003bea:	0030      	movs	r0, r6
 8003bec:	f003 fa7a 	bl	80070e4 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8003bf0:	209f      	movs	r0, #159	; 0x9f
 8003bf2:	f7ff ff81 	bl	8003af8 <SPI_flash_sent_byte>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8003bf6:	7025      	strb	r5, [r4, #0]
       aa[1]=0;
 8003bf8:	7065      	strb	r5, [r4, #1]
       aa[2]=0;
 8003bfa:	70a5      	strb	r5, [r4, #2]
       aa[3]=0;
 8003bfc:	70e5      	strb	r5, [r4, #3]
       aa[4]=0;
 8003bfe:	7125      	strb	r5, [r4, #4]
       aa[5]=0;
 8003c00:	7165      	strb	r5, [r4, #5]
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
 8003c02:	2103      	movs	r1, #3
 8003c04:	0020      	movs	r0, r4
 8003c06:	f7ff ffb5 	bl	8003b74 <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	2110      	movs	r1, #16
 8003c0e:	0030      	movs	r0, r6
 8003c10:	f003 fa68 	bl	80070e4 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8003c14:	7863      	ldrb	r3, [r4, #1]
 8003c16:	7822      	ldrb	r2, [r4, #0]
 8003c18:	491d      	ldr	r1, [pc, #116]	; (8003c90 <SPI_flash_get_device_ID+0xfc>)
 8003c1a:	78a0      	ldrb	r0, [r4, #2]
 8003c1c:	9000      	str	r0, [sp, #0]
 8003c1e:	a804      	add	r0, sp, #16
 8003c20:	f009 fb7a 	bl	800d318 <siprintf>
       Debug_Tx((char*)bufd);
 8003c24:	a804      	add	r0, sp, #16
 8003c26:	f7ff fb7b 	bl	8003320 <Debug_Tx>



       SPI_flash_cs_low;
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2110      	movs	r1, #16
 8003c2e:	0030      	movs	r0, r6
 8003c30:	f003 fa58 	bl	80070e4 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8003c34:	204b      	movs	r0, #75	; 0x4b
 8003c36:	f7ff ff5f 	bl	8003af8 <SPI_flash_sent_byte>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8003c3a:	7025      	strb	r5, [r4, #0]
       aa[1]=0;
 8003c3c:	7065      	strb	r5, [r4, #1]
       aa[2]=0;
 8003c3e:	70a5      	strb	r5, [r4, #2]
       aa[3]=0;
 8003c40:	70e5      	strb	r5, [r4, #3]
       aa[4]=0;
 8003c42:	7125      	strb	r5, [r4, #4]
       aa[5]=0;
 8003c44:	7165      	strb	r5, [r4, #5]
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8003c46:	23fa      	movs	r3, #250	; 0xfa
 8003c48:	4812      	ldr	r0, [pc, #72]	; (8003c94 <SPI_flash_get_device_ID+0x100>)
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	0021      	movs	r1, r4
 8003c50:	f004 fcec 	bl	800862c <HAL_SPI_Transmit>
       SPI_flash_TransmitReceive(aa, 6);
 8003c54:	2106      	movs	r1, #6
 8003c56:	0020      	movs	r0, r4
 8003c58:	f7ff ff8c 	bl	8003b74 <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	2110      	movs	r1, #16
 8003c60:	0030      	movs	r0, r6
 8003c62:	f003 fa3f 	bl	80070e4 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 8003c66:	7863      	ldrb	r3, [r4, #1]
 8003c68:	7822      	ldrb	r2, [r4, #0]
 8003c6a:	490b      	ldr	r1, [pc, #44]	; (8003c98 <SPI_flash_get_device_ID+0x104>)
 8003c6c:	7960      	ldrb	r0, [r4, #5]
 8003c6e:	9003      	str	r0, [sp, #12]
 8003c70:	7920      	ldrb	r0, [r4, #4]
 8003c72:	9002      	str	r0, [sp, #8]
 8003c74:	78e0      	ldrb	r0, [r4, #3]
 8003c76:	9001      	str	r0, [sp, #4]
 8003c78:	78a0      	ldrb	r0, [r4, #2]
 8003c7a:	9000      	str	r0, [sp, #0]
 8003c7c:	a804      	add	r0, sp, #16
 8003c7e:	f009 fb4b 	bl	800d318 <siprintf>
       Debug_Tx((char*)bufd);
 8003c82:	a804      	add	r0, sp, #16
 8003c84:	f7ff fb4c 	bl	8003320 <Debug_Tx>
}
 8003c88:	b020      	add	sp, #128	; 0x80
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	08011260 	.word	0x08011260
 8003c90:	08011280 	.word	0x08011280
 8003c94:	2000437c 	.word	0x2000437c
 8003c98:	0801129c 	.word	0x0801129c

08003c9c <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	0004      	movs	r4, r0
    SPI_flash_Write_Enable();
 8003ca0:	f7ff ff3a 	bl	8003b18 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003ca4:	25a0      	movs	r5, #160	; 0xa0
 8003ca6:	05ed      	lsls	r5, r5, #23
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2110      	movs	r1, #16
 8003cac:	0028      	movs	r0, r5
 8003cae:	f003 fa19 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8003cb2:	2020      	movs	r0, #32
 8003cb4:	f7ff ff20 	bl	8003af8 <SPI_flash_sent_byte>
    SPI_flash_sent_address (address);
 8003cb8:	0020      	movs	r0, r4
 8003cba:	f7ff ff4f 	bl	8003b5c <SPI_flash_sent_address>
    SPI_flash_cs_high;
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	2110      	movs	r1, #16
 8003cc2:	0028      	movs	r0, r5
 8003cc4:	f003 fa0e 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003cc8:	f7ff ff37 	bl	8003b3a <SPI_flash_Write_Disable>
    //HAL_Delay(100);
	Debug_Rx();
 8003ccc:	f7ff fb5a 	bl	8003384 <Debug_Rx>
}
 8003cd0:	bd70      	pop	{r4, r5, r6, pc}

08003cd2 <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 8003cd2:	b510      	push	{r4, lr}
    SPI_flash_Write_Enable();
 8003cd4:	f7ff ff20 	bl	8003b18 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003cd8:	24a0      	movs	r4, #160	; 0xa0
 8003cda:	05e4      	lsls	r4, r4, #23
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2110      	movs	r1, #16
 8003ce0:	0020      	movs	r0, r4
 8003ce2:	f003 f9ff 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 8003ce6:	20c7      	movs	r0, #199	; 0xc7
 8003ce8:	f7ff ff06 	bl	8003af8 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003cec:	2201      	movs	r2, #1
 8003cee:	2110      	movs	r1, #16
 8003cf0:	0020      	movs	r0, r4
 8003cf2:	f003 f9f7 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003cf6:	f7ff ff20 	bl	8003b3a <SPI_flash_Write_Disable>
}
 8003cfa:	bd10      	pop	{r4, pc}

08003cfc <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	0006      	movs	r6, r0
 8003d00:	000c      	movs	r4, r1
 8003d02:	0015      	movs	r5, r2
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
 8003d04:	f7ff ff08 	bl	8003b18 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003d08:	27a0      	movs	r7, #160	; 0xa0
 8003d0a:	05ff      	lsls	r7, r7, #23
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2110      	movs	r1, #16
 8003d10:	0038      	movs	r0, r7
 8003d12:	f003 f9e7 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 8003d16:	2002      	movs	r0, #2
 8003d18:	f7ff feee 	bl	8003af8 <SPI_flash_sent_byte>
    SPI_flash_sent_address (data_address);
 8003d1c:	0030      	movs	r0, r6
 8003d1e:	f7ff ff1d 	bl	8003b5c <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8003d22:	0029      	movs	r1, r5
 8003d24:	0020      	movs	r0, r4
 8003d26:	f7ff ff25 	bl	8003b74 <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2110      	movs	r1, #16
 8003d2e:	0038      	movs	r0, r7
 8003d30:	f003 f9d8 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003d34:	f7ff ff01 	bl	8003b3a <SPI_flash_Write_Disable>

	Debug_Rx();
 8003d38:	f7ff fb24 	bl	8003384 <Debug_Rx>
    //HAL_Delay(1);
}
 8003d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d3e <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8003d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d40:	0006      	movs	r6, r0
 8003d42:	000c      	movs	r4, r1
 8003d44:	0015      	movs	r5, r2
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 8003d46:	27a0      	movs	r7, #160	; 0xa0
 8003d48:	05ff      	lsls	r7, r7, #23
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2110      	movs	r1, #16
 8003d4e:	0038      	movs	r0, r7
 8003d50:	f003 f9c8 	bl	80070e4 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 8003d54:	2003      	movs	r0, #3
 8003d56:	f7ff fecf 	bl	8003af8 <SPI_flash_sent_byte>
    SPI_flash_sent_address(data_address);
 8003d5a:	0030      	movs	r0, r6
 8003d5c:	f7ff fefe 	bl	8003b5c <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8003d60:	0029      	movs	r1, r5
 8003d62:	0020      	movs	r0, r4
 8003d64:	f7ff ff06 	bl	8003b74 <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003d68:	2201      	movs	r2, #1
 8003d6a:	2110      	movs	r1, #16
 8003d6c:	0038      	movs	r0, r7
 8003d6e:	f003 f9b9 	bl	80070e4 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8003d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d74 <incrimentAddress2>:


	return add;
}

void incrimentAddress2(int inc){
 8003d74:	b530      	push	{r4, r5, lr}
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <incrimentAddress2+0x44>)
 8003d78:	7813      	ldrb	r3, [r2, #0]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	7851      	ldrb	r1, [r2, #1]
 8003d7e:	185b      	adds	r3, r3, r1
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	7891      	ldrb	r1, [r2, #2]
 8003d84:	185b      	adds	r3, r3, r1
 8003d86:	1818      	adds	r0, r3, r0
	WrtAdd[0]=addi/(256*256);
 8003d88:	17c4      	asrs	r4, r0, #31
 8003d8a:	0423      	lsls	r3, r4, #16
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	181b      	adds	r3, r3, r0
 8003d90:	141b      	asrs	r3, r3, #16
 8003d92:	7013      	strb	r3, [r2, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8003d94:	0c21      	lsrs	r1, r4, #16
 8003d96:	1843      	adds	r3, r0, r1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	1a5b      	subs	r3, r3, r1
 8003d9e:	17d9      	asrs	r1, r3, #31
 8003da0:	25ff      	movs	r5, #255	; 0xff
 8003da2:	4029      	ands	r1, r5
 8003da4:	18cb      	adds	r3, r1, r3
 8003da6:	121b      	asrs	r3, r3, #8
 8003da8:	7053      	strb	r3, [r2, #1]
	WrtAdd[2]=(addi)%256;
 8003daa:	0e24      	lsrs	r4, r4, #24
 8003dac:	1900      	adds	r0, r0, r4
 8003dae:	4005      	ands	r5, r0
 8003db0:	1b2d      	subs	r5, r5, r4
 8003db2:	7095      	strb	r5, [r2, #2]


}
 8003db4:	bd30      	pop	{r4, r5, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	20000010 	.word	0x20000010

08003dbc <WriteQdata>:
	memset(str,0,20);
	sprintf(str, "MemoryAdd:%X-%X-%X",WrtAdd[0],WrtAdd[1],WrtAdd[2]);
	Debug_Tx(str);
}

void WriteQdata(uint8_t* data, uint16_t len) {
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	000a      	movs	r2, r1
	//Writes data at the end of queue
	if (len<255){
 8003dc0:	29fe      	cmp	r1, #254	; 0xfe
 8003dc2:	d900      	bls.n	8003dc6 <WriteQdata+0xa>
		//Debug_Tx("---------------------\nWriting  Data");
		//printAdd();
		SPI_flash_Page_Program(WrtAdd, data,len);
		incrimentAddress2(256);
	}
}
 8003dc4:	bd10      	pop	{r4, pc}
		SPI_flash_Page_Program(WrtAdd, data,len);
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <WriteQdata+0x20>)
 8003dc8:	0001      	movs	r1, r0
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7ff ff96 	bl	8003cfc <SPI_flash_Page_Program>
		incrimentAddress2(256);
 8003dd0:	2080      	movs	r0, #128	; 0x80
 8003dd2:	0040      	lsls	r0, r0, #1
 8003dd4:	f7ff ffce 	bl	8003d74 <incrimentAddress2>
}
 8003dd8:	e7f4      	b.n	8003dc4 <WriteQdata+0x8>
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	20000010 	.word	0x20000010

08003de0 <isQempty>:

int isQempty() {
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8003de0:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <isQempty+0x18>)
 8003de2:	7813      	ldrb	r3, [r2, #0]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	7852      	ldrb	r2, [r2, #1]
 8003de8:	189b      	adds	r3, r3, r2
 8003dea:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 8003dec:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <isQempty+0x1c>)
 8003dee:	2000      	movs	r0, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	429a      	cmp	r2, r3
 8003df4:	4148      	adcs	r0, r1
		return 1;
	}
	return 0;

}
 8003df6:	4770      	bx	lr
 8003df8:	20000010 	.word	0x20000010
 8003dfc:	000300ff 	.word	0x000300ff

08003e00 <ReadQdata>:

}



int ReadQdata() {
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	46c6      	mov	lr, r8
 8003e04:	b500      	push	{lr}
 8003e06:	b0c0      	sub	sp, #256	; 0x100
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 8003e08:	482f      	ldr	r0, [pc, #188]	; (8003ec8 <ReadQdata+0xc8>)
 8003e0a:	2480      	movs	r4, #128	; 0x80
 8003e0c:	0164      	lsls	r4, r4, #5
 8003e0e:	0022      	movs	r2, r4
 8003e10:	2100      	movs	r1, #0
 8003e12:	f009 faed 	bl	800d3f0 <memset>
	memset(ReadMDataS,0,4096);
 8003e16:	482d      	ldr	r0, [pc, #180]	; (8003ecc <ReadQdata+0xcc>)
 8003e18:	0022      	movs	r2, r4
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f009 fae8 	bl	800d3f0 <memset>
	if(isQempty()==1){
 8003e20:	f7ff ffde 	bl	8003de0 <isQempty>
 8003e24:	2801      	cmp	r0, #1
 8003e26:	d018      	beq.n	8003e5a <ReadQdata+0x5a>
		Debug_Tx("Memory Empty");
		return 0;
	}
	incrimentAddress2(-1);
 8003e28:	2001      	movs	r0, #1
 8003e2a:	4240      	negs	r0, r0
 8003e2c:	f7ff ffa2 	bl	8003d74 <incrimentAddress2>
	int len=WrtAdd[1]%16;
 8003e30:	4827      	ldr	r0, [pc, #156]	; (8003ed0 <ReadQdata+0xd0>)
 8003e32:	7843      	ldrb	r3, [r0, #1]
	len=len+1;
 8003e34:	270f      	movs	r7, #15
 8003e36:	401f      	ands	r7, r3
 8003e38:	3701      	adds	r7, #1
	WrtAdd[1]=WrtAdd[1]/16;
	WrtAdd[1]=WrtAdd[1]*16;
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	7043      	strb	r3, [r0, #1]
	WrtAdd[2]=0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	7083      	strb	r3, [r0, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8003e44:	023a      	lsls	r2, r7, #8
 8003e46:	4c20      	ldr	r4, [pc, #128]	; (8003ec8 <ReadQdata+0xc8>)
 8003e48:	0021      	movs	r1, r4
 8003e4a:	f7ff ff78 	bl	8003d3e <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 8003e4e:	3f01      	subs	r7, #1
 8003e50:	023f      	lsls	r7, r7, #8
 8003e52:	193c      	adds	r4, r7, r4
		memset(temp,0,256);
		for (int j=0;j<256;j++){
 8003e54:	2580      	movs	r5, #128	; 0x80
 8003e56:	006d      	lsls	r5, r5, #1
 8003e58:	e01d      	b.n	8003e96 <ReadQdata+0x96>
		Debug_Tx("Memory Empty");
 8003e5a:	481e      	ldr	r0, [pc, #120]	; (8003ed4 <ReadQdata+0xd4>)
 8003e5c:	f7ff fa60 	bl	8003320 <Debug_Tx>
		return 0;
 8003e60:	2000      	movs	r0, #0
 8003e62:	e02c      	b.n	8003ebe <ReadQdata+0xbe>
			temp[j]=ReadMData[(len-i)*256+j];
			if (temp[j]==255){
				temp[j]=0;
 8003e64:	2200      	movs	r2, #0
 8003e66:	4669      	mov	r1, sp
 8003e68:	54ca      	strb	r2, [r1, r3]
				break;
			}
		}
		temp[255]=0;
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <ReadQdata+0xd8>)
 8003e6c:	4698      	mov	r8, r3
 8003e6e:	23ff      	movs	r3, #255	; 0xff
 8003e70:	2200      	movs	r2, #0
 8003e72:	4669      	mov	r1, sp
 8003e74:	54ca      	strb	r2, [r1, r3]
		strcat(ReadMDataS,temp);
 8003e76:	4e15      	ldr	r6, [pc, #84]	; (8003ecc <ReadQdata+0xcc>)
 8003e78:	0030      	movs	r0, r6
 8003e7a:	f009 fac1 	bl	800d400 <strcat>
		strcat(ReadMDataS,"\r\n");
 8003e7e:	0030      	movs	r0, r6
 8003e80:	f7fc f942 	bl	8000108 <strlen>
 8003e84:	1830      	adds	r0, r6, r0
 8003e86:	4915      	ldr	r1, [pc, #84]	; (8003edc <ReadQdata+0xdc>)
 8003e88:	2203      	movs	r2, #3
 8003e8a:	f009 fc79 	bl	800d780 <memcpy>
	for (int i=1;i<=len;i++){
 8003e8e:	4447      	add	r7, r8
 8003e90:	4444      	add	r4, r8
 8003e92:	4547      	cmp	r7, r8
 8003e94:	d00f      	beq.n	8003eb6 <ReadQdata+0xb6>
		memset(temp,0,256);
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4668      	mov	r0, sp
 8003e9c:	f009 faa8 	bl	800d3f0 <memset>
		for (int j=0;j<256;j++){
 8003ea0:	4668      	mov	r0, sp
 8003ea2:	2300      	movs	r3, #0
			temp[j]=ReadMData[(len-i)*256+j];
 8003ea4:	5ce2      	ldrb	r2, [r4, r3]
 8003ea6:	7002      	strb	r2, [r0, #0]
			if (temp[j]==255){
 8003ea8:	2aff      	cmp	r2, #255	; 0xff
 8003eaa:	d0db      	beq.n	8003e64 <ReadQdata+0x64>
		for (int j=0;j<256;j++){
 8003eac:	3301      	adds	r3, #1
 8003eae:	3001      	adds	r0, #1
 8003eb0:	42ab      	cmp	r3, r5
 8003eb2:	d1f7      	bne.n	8003ea4 <ReadQdata+0xa4>
 8003eb4:	e7d9      	b.n	8003e6a <ReadQdata+0x6a>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <ReadQdata+0xd0>)
 8003eb8:	f7ff fef0 	bl	8003c9c <SPI_flash_Sector_Erase>
	return 1;
 8003ebc:	2001      	movs	r0, #1
}
 8003ebe:	b040      	add	sp, #256	; 0x100
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	46b8      	mov	r8, r7
 8003ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	20001bcc 	.word	0x20001bcc
 8003ecc:	20002bcc 	.word	0x20002bcc
 8003ed0:	20000010 	.word	0x20000010
 8003ed4:	080112c0 	.word	0x080112c0
 8003ed8:	ffffff00 	.word	0xffffff00
 8003edc:	080110c8 	.word	0x080110c8

08003ee0 <InitMEMQ>:

void InitMEMQ(){
 8003ee0:	b530      	push	{r4, r5, lr}
 8003ee2:	b0c1      	sub	sp, #260	; 0x104
	if(isQempty()==1){
 8003ee4:	f7ff ff7c 	bl	8003de0 <isQempty>
 8003ee8:	2801      	cmp	r0, #1
 8003eea:	d001      	beq.n	8003ef0 <InitMEMQ+0x10>
		for(i=0;i<2;i++){
			ReadQdata();
		}
	}

}
 8003eec:	b041      	add	sp, #260	; 0x104
 8003eee:	bd30      	pop	{r4, r5, pc}
		Debug_Tx("------------------Init Mem:");
 8003ef0:	480d      	ldr	r0, [pc, #52]	; (8003f28 <InitMEMQ+0x48>)
 8003ef2:	f7ff fa15 	bl	8003320 <Debug_Tx>
		for(i=0;i<5;i++){
 8003ef6:	2400      	movs	r4, #0
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 8003ef8:	4d0c      	ldr	r5, [pc, #48]	; (8003f2c <InitMEMQ+0x4c>)
 8003efa:	0023      	movs	r3, r4
 8003efc:	0022      	movs	r2, r4
 8003efe:	0029      	movs	r1, r5
 8003f00:	4668      	mov	r0, sp
 8003f02:	f009 fa09 	bl	800d318 <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 8003f06:	4668      	mov	r0, sp
 8003f08:	f7fc f8fe 	bl	8000108 <strlen>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	b281      	uxth	r1, r0
 8003f10:	4668      	mov	r0, sp
 8003f12:	f7ff ff53 	bl	8003dbc <WriteQdata>
		for(i=0;i<5;i++){
 8003f16:	3401      	adds	r4, #1
 8003f18:	2c05      	cmp	r4, #5
 8003f1a:	d1ee      	bne.n	8003efa <InitMEMQ+0x1a>
			ReadQdata();
 8003f1c:	f7ff ff70 	bl	8003e00 <ReadQdata>
 8003f20:	f7ff ff6e 	bl	8003e00 <ReadQdata>
}
 8003f24:	e7e2      	b.n	8003eec <InitMEMQ+0xc>
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	080112d0 	.word	0x080112d0
 8003f2c:	080112ec 	.word	0x080112ec

08003f30 <ClearQueue>:





void ClearQueue(){
 8003f30:	b510      	push	{r4, lr}
	//uint8_t dat[]={0x01, 0x00,0x00,0x01, 0x00,0x00,0x00,0x00,0x00,0x00,0x01};
	//uint8_t add[]={0x00,0x10,0x00};

	//SPI_flash_Sector_Erase(add);
	SPI_flash_Chip_Erase();
 8003f32:	f7ff fece 	bl	8003cd2 <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 8003f36:	4802      	ldr	r0, [pc, #8]	; (8003f40 <ClearQueue+0x10>)
 8003f38:	f002 fa04 	bl	8006344 <HAL_Delay>

	//SPI_flash_Page_Program(add,dat,11);
}
 8003f3c:	bd10      	pop	{r4, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	00007530 	.word	0x00007530

08003f44 <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8003f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f46:	46de      	mov	lr, fp
 8003f48:	4657      	mov	r7, sl
 8003f4a:	464e      	mov	r6, r9
 8003f4c:	4645      	mov	r5, r8
 8003f4e:	b5e0      	push	{r5, r6, r7, lr}
 8003f50:	4c60      	ldr	r4, [pc, #384]	; (80040d4 <writeConfig+0x190>)
 8003f52:	44a5      	add	sp, r4
 8003f54:	4682      	mov	sl, r0
 8003f56:	9001      	str	r0, [sp, #4]
 8003f58:	000e      	movs	r6, r1
 8003f5a:	4691      	mov	r9, r2
 8003f5c:	4698      	mov	r8, r3
 8003f5e:	9dce      	ldr	r5, [sp, #824]	; 0x338
 8003f60:	9ccf      	ldr	r4, [sp, #828]	; 0x33c
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 8003f62:	af03      	add	r7, sp, #12
 8003f64:	4b5c      	ldr	r3, [pc, #368]	; (80040d8 <writeConfig+0x194>)
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	803a      	strh	r2, [r7, #0]
 8003f6a:	789b      	ldrb	r3, [r3, #2]
 8003f6c:	70bb      	strb	r3, [r7, #2]

	SPI_flash_Read_Data(add , data1 , 256);
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	469b      	mov	fp, r3
 8003f74:	001a      	movs	r2, r3
 8003f76:	a984      	add	r1, sp, #528	; 0x210
 8003f78:	0038      	movs	r0, r7
 8003f7a:	f7ff fee0 	bl	8003d3e <SPI_flash_Read_Data>
	add[1]=0x01;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	707b      	strb	r3, [r7, #1]
	SPI_flash_Read_Data(add , data2 , 256);
 8003f82:	465a      	mov	r2, fp
 8003f84:	a944      	add	r1, sp, #272	; 0x110
 8003f86:	0038      	movs	r0, r7
 8003f88:	f7ff fed9 	bl	8003d3e <SPI_flash_Read_Data>
	add[1]=0x02;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	707b      	strb	r3, [r7, #1]
	SPI_flash_Read_Data(add , data3 , 256);
 8003f90:	465a      	mov	r2, fp
 8003f92:	a904      	add	r1, sp, #16
 8003f94:	0038      	movs	r0, r7
 8003f96:	f7ff fed2 	bl	8003d3e <SPI_flash_Read_Data>
 8003f9a:	2701      	movs	r7, #1


	int i=0;
	int j=0;
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
		data1[j+i]=RegNo[i];
 8003f9c:	4653      	mov	r3, sl
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	469a      	mov	sl, r3
 8003fa2:	4653      	mov	r3, sl
 8003fa4:	5ddb      	ldrb	r3, [r3, r7]
 8003fa6:	aa02      	add	r2, sp, #8
 8003fa8:	494c      	ldr	r1, [pc, #304]	; (80040dc <writeConfig+0x198>)
 8003faa:	1852      	adds	r2, r2, r1
 8003fac:	55d3      	strb	r3, [r2, r7]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8003fae:	9801      	ldr	r0, [sp, #4]
 8003fb0:	f7fc f8aa 	bl	8000108 <strlen>
 8003fb4:	42b8      	cmp	r0, r7
 8003fb6:	d311      	bcc.n	8003fdc <writeConfig+0x98>
 8003fb8:	3701      	adds	r7, #1
 8003fba:	2f11      	cmp	r7, #17
 8003fbc:	d1f1      	bne.n	8003fa2 <writeConfig+0x5e>
 8003fbe:	2700      	movs	r7, #0
	}
	j=j+RegNoLen;

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
		data1[j+i]=INSMS[i];
 8003fc0:	ab84      	add	r3, sp, #528	; 0x210
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	5df2      	ldrb	r2, [r6, r7]
 8003fc6:	741a      	strb	r2, [r3, #16]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8003fc8:	3701      	adds	r7, #1
 8003fca:	0030      	movs	r0, r6
 8003fcc:	f7fc f89c 	bl	8000108 <strlen>
 8003fd0:	42b8      	cmp	r0, r7
 8003fd2:	d305      	bcc.n	8003fe0 <writeConfig+0x9c>
 8003fd4:	2f64      	cmp	r7, #100	; 0x64
 8003fd6:	d1f3      	bne.n	8003fc0 <writeConfig+0x7c>
 8003fd8:	2600      	movs	r6, #0
 8003fda:	e002      	b.n	8003fe2 <writeConfig+0x9e>
 8003fdc:	2700      	movs	r7, #0
 8003fde:	e7ef      	b.n	8003fc0 <writeConfig+0x7c>
 8003fe0:	2600      	movs	r6, #0
	}
	j=j+INSMSLen;

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
		data1[j+i]=OUTSMS[i];
 8003fe2:	afa1      	add	r7, sp, #644	; 0x284
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	5d9b      	ldrb	r3, [r3, r6]
 8003fe8:	55bb      	strb	r3, [r7, r6]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8003fea:	3601      	adds	r6, #1
 8003fec:	4648      	mov	r0, r9
 8003fee:	f7fc f88b 	bl	8000108 <strlen>
 8003ff2:	42b0      	cmp	r0, r6
 8003ff4:	d303      	bcc.n	8003ffe <writeConfig+0xba>
 8003ff6:	2e3c      	cmp	r6, #60	; 0x3c
 8003ff8:	d1f4      	bne.n	8003fe4 <writeConfig+0xa0>
 8003ffa:	3e3b      	subs	r6, #59	; 0x3b
 8003ffc:	e000      	b.n	8004000 <writeConfig+0xbc>
 8003ffe:	2601      	movs	r6, #1
	}
	j=0;
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
		data2[j+i]=EmgIP[i];
 8004000:	2708      	movs	r7, #8
 8004002:	37ff      	adds	r7, #255	; 0xff
 8004004:	ab02      	add	r3, sp, #8
 8004006:	469c      	mov	ip, r3
 8004008:	4467      	add	r7, ip
 800400a:	2301      	movs	r3, #1
 800400c:	425b      	negs	r3, r3
 800400e:	4443      	add	r3, r8
 8004010:	4699      	mov	r9, r3
 8004012:	464b      	mov	r3, r9
 8004014:	5d9b      	ldrb	r3, [r3, r6]
 8004016:	55bb      	strb	r3, [r7, r6]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8004018:	4640      	mov	r0, r8
 800401a:	f7fc f875 	bl	8000108 <strlen>
 800401e:	42b0      	cmp	r0, r6
 8004020:	d304      	bcc.n	800402c <writeConfig+0xe8>
 8004022:	3601      	adds	r6, #1
 8004024:	2e29      	cmp	r6, #41	; 0x29
 8004026:	d1f4      	bne.n	8004012 <writeConfig+0xce>
 8004028:	2600      	movs	r6, #0
 800402a:	e000      	b.n	800402e <writeConfig+0xea>
 800402c:	2600      	movs	r6, #0
	}
	j=j+EmgIPLen;

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
		data2[j+i]=RegIP[i];
 800402e:	af4e      	add	r7, sp, #312	; 0x138
 8004030:	5dab      	ldrb	r3, [r5, r6]
 8004032:	55bb      	strb	r3, [r7, r6]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8004034:	3601      	adds	r6, #1
 8004036:	0028      	movs	r0, r5
 8004038:	f7fc f866 	bl	8000108 <strlen>
 800403c:	42b0      	cmp	r0, r6
 800403e:	d303      	bcc.n	8004048 <writeConfig+0x104>
 8004040:	2e28      	cmp	r6, #40	; 0x28
 8004042:	d1f5      	bne.n	8004030 <writeConfig+0xec>
 8004044:	2500      	movs	r5, #0
 8004046:	e000      	b.n	800404a <writeConfig+0x106>
 8004048:	2500      	movs	r5, #0
	}
	j=j+RegIPLen;


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
		data2[j+i]=TrackIP[i];
 800404a:	af58      	add	r7, sp, #352	; 0x160
 800404c:	5d63      	ldrb	r3, [r4, r5]
 800404e:	557b      	strb	r3, [r7, r5]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8004050:	3501      	adds	r5, #1
 8004052:	0020      	movs	r0, r4
 8004054:	f7fc f858 	bl	8000108 <strlen>
 8004058:	42a8      	cmp	r0, r5
 800405a:	d303      	bcc.n	8004064 <writeConfig+0x120>
 800405c:	2d28      	cmp	r5, #40	; 0x28
 800405e:	d1f5      	bne.n	800404c <writeConfig+0x108>
 8004060:	2401      	movs	r4, #1
 8004062:	e000      	b.n	8004066 <writeConfig+0x122>
 8004064:	2401      	movs	r4, #1
	}
	j=0;


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
		data3[j+i]=OtherData[i];
 8004066:	ab02      	add	r3, sp, #8
 8004068:	1ddd      	adds	r5, r3, #7
 800406a:	9bd0      	ldr	r3, [sp, #832]	; 0x340
 800406c:	1e5f      	subs	r7, r3, #1
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 800406e:	2302      	movs	r3, #2
 8004070:	33ff      	adds	r3, #255	; 0xff
 8004072:	4698      	mov	r8, r3
		data3[j+i]=OtherData[i];
 8004074:	5d3b      	ldrb	r3, [r7, r4]
 8004076:	552b      	strb	r3, [r5, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 8004078:	98d0      	ldr	r0, [sp, #832]	; 0x340
 800407a:	f7fc f845 	bl	8000108 <strlen>
 800407e:	42a0      	cmp	r0, r4
 8004080:	d302      	bcc.n	8004088 <writeConfig+0x144>
 8004082:	3401      	adds	r4, #1
 8004084:	4544      	cmp	r4, r8
 8004086:	d1f5      	bne.n	8004074 <writeConfig+0x130>
	}
	j=j+OtherDataLen;


	add[1]=0x00;
 8004088:	ad03      	add	r5, sp, #12
 800408a:	2300      	movs	r3, #0
 800408c:	706b      	strb	r3, [r5, #1]

	SPI_flash_Sector_Erase(add);
 800408e:	0028      	movs	r0, r5
 8004090:	f7ff fe04 	bl	8003c9c <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 8004094:	2480      	movs	r4, #128	; 0x80
 8004096:	0064      	lsls	r4, r4, #1
 8004098:	0022      	movs	r2, r4
 800409a:	a984      	add	r1, sp, #528	; 0x210
 800409c:	0028      	movs	r0, r5
 800409e:	f7ff fe2d 	bl	8003cfc <SPI_flash_Page_Program>
	add[1]=0x01;
 80040a2:	2301      	movs	r3, #1
 80040a4:	706b      	strb	r3, [r5, #1]
	SPI_flash_Page_Program(add, data2,256);
 80040a6:	0022      	movs	r2, r4
 80040a8:	a944      	add	r1, sp, #272	; 0x110
 80040aa:	0028      	movs	r0, r5
 80040ac:	f7ff fe26 	bl	8003cfc <SPI_flash_Page_Program>
	add[1]=0x02;
 80040b0:	2302      	movs	r3, #2
 80040b2:	706b      	strb	r3, [r5, #1]
	SPI_flash_Page_Program(add, data3,256);
 80040b4:	0022      	movs	r2, r4
 80040b6:	a904      	add	r1, sp, #16
 80040b8:	0028      	movs	r0, r5
 80040ba:	f7ff fe1f 	bl	8003cfc <SPI_flash_Page_Program>
	return 1;

}
 80040be:	2001      	movs	r0, #1
 80040c0:	23c5      	movs	r3, #197	; 0xc5
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	449d      	add	sp, r3
 80040c6:	bcf0      	pop	{r4, r5, r6, r7}
 80040c8:	46bb      	mov	fp, r7
 80040ca:	46b2      	mov	sl, r6
 80040cc:	46a9      	mov	r9, r5
 80040ce:	46a0      	mov	r8, r4
 80040d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	fffffcec 	.word	0xfffffcec
 80040d8:	08010f18 	.word	0x08010f18
 80040dc:	00000207 	.word	0x00000207

080040e0 <readRegNo>:



char* readRegNo(){
 80040e0:	b510      	push	{r4, lr}
 80040e2:	b082      	sub	sp, #8
	uint8_t add4[]={0x00, 0x00,0x00};
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <readRegNo+0x3c>)
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	4669      	mov	r1, sp
 80040ea:	808a      	strh	r2, [r1, #4]
 80040ec:	789b      	ldrb	r3, [r3, #2]
 80040ee:	718b      	strb	r3, [r1, #6]

    memset(dataR,0,256);
 80040f0:	4c0b      	ldr	r4, [pc, #44]	; (8004120 <readRegNo+0x40>)
 80040f2:	2280      	movs	r2, #128	; 0x80
 80040f4:	0052      	lsls	r2, r2, #1
 80040f6:	2100      	movs	r1, #0
 80040f8:	0020      	movs	r0, r4
 80040fa:	f009 f979 	bl	800d3f0 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 80040fe:	2210      	movs	r2, #16
 8004100:	0021      	movs	r1, r4
 8004102:	a801      	add	r0, sp, #4
 8004104:	f7ff fe1b 	bl	8003d3e <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8004108:	0020      	movs	r0, r4
 800410a:	f7fb fffd 	bl	8000108 <strlen>
 800410e:	2801      	cmp	r0, #1
 8004110:	d902      	bls.n	8004118 <readRegNo+0x38>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
 8004112:	4803      	ldr	r0, [pc, #12]	; (8004120 <readRegNo+0x40>)
	}
	else{
		return "--Err RegNo--";
	}

}
 8004114:	b002      	add	sp, #8
 8004116:	bd10      	pop	{r4, pc}
		return "--Err RegNo--";
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <readRegNo+0x44>)
 800411a:	e7fb      	b.n	8004114 <readRegNo+0x34>
 800411c:	08010f18 	.word	0x08010f18
 8004120:	20003c04 	.word	0x20003c04
 8004124:	080113c4 	.word	0x080113c4

08004128 <detectAcc>:


int detectAcc(){
 8004128:	b510      	push	{r4, lr}
	readAcc();
 800412a:	f7ff f93f 	bl	80033ac <readAcc>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 800412e:	4c14      	ldr	r4, [pc, #80]	; (8004180 <detectAcc+0x58>)
 8004130:	6861      	ldr	r1, [r4, #4]
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	f7fc fa62 	bl	80005fc <__aeabi_fadd>
 8004138:	68a1      	ldr	r1, [r4, #8]
 800413a:	f7fc fa5f 	bl	80005fc <__aeabi_fadd>
 800413e:	1c04      	adds	r4, r0, #0
 8004140:	4910      	ldr	r1, [pc, #64]	; (8004184 <detectAcc+0x5c>)
 8004142:	f7fc f9d7 	bl	80004f4 <__aeabi_fcmpgt>
 8004146:	2800      	cmp	r0, #0
 8004148:	d116      	bne.n	8004178 <detectAcc+0x50>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 800414a:	490f      	ldr	r1, [pc, #60]	; (8004188 <detectAcc+0x60>)
 800414c:	1c20      	adds	r0, r4, #0
 800414e:	f7fc f9bd 	bl	80004cc <__aeabi_fcmplt>
 8004152:	2800      	cmp	r0, #0
 8004154:	d112      	bne.n	800417c <detectAcc+0x54>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 8004156:	4c0a      	ldr	r4, [pc, #40]	; (8004180 <detectAcc+0x58>)
 8004158:	6921      	ldr	r1, [r4, #16]
 800415a:	68e0      	ldr	r0, [r4, #12]
 800415c:	f7fc fa4e 	bl	80005fc <__aeabi_fadd>
 8004160:	6961      	ldr	r1, [r4, #20]
 8004162:	f7fc fa4b 	bl	80005fc <__aeabi_fadd>
 8004166:	4907      	ldr	r1, [pc, #28]	; (8004184 <detectAcc+0x5c>)
 8004168:	f7fc f9c4 	bl	80004f4 <__aeabi_fcmpgt>


	return 0;
 800416c:	1e43      	subs	r3, r0, #1
 800416e:	4198      	sbcs	r0, r3
 8004170:	4243      	negs	r3, r0
 8004172:	2003      	movs	r0, #3
 8004174:	4018      	ands	r0, r3
}
 8004176:	bd10      	pop	{r4, pc}
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8004178:	2001      	movs	r0, #1
 800417a:	e7fc      	b.n	8004176 <detectAcc+0x4e>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 800417c:	2002      	movs	r0, #2
 800417e:	e7fa      	b.n	8004176 <detectAcc+0x4e>
 8004180:	20000224 	.word	0x20000224
 8004184:	44fa0000 	.word	0x44fa0000
 8004188:	c4fa0000 	.word	0xc4fa0000

0800418c <initGPS>:
char printBuf[50];

//char* buffer
//int ProcessRunning_GPS=0;

void initGPS(){
 800418c:	b570      	push	{r4, r5, r6, lr}
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 800418e:	4c0e      	ldr	r4, [pc, #56]	; (80041c8 <initGPS+0x3c>)
 8004190:	2300      	movs	r3, #0
 8004192:	6023      	str	r3, [r4, #0]
	GPSInfo.lon=0.0;
 8004194:	6063      	str	r3, [r4, #4]
	GPSInfo.alt=0.0;
 8004196:	60a3      	str	r3, [r4, #8]
	GPSInfo.hdop=0.0;
 8004198:	60e3      	str	r3, [r4, #12]
	GPSInfo.pdop=0.0;
 800419a:	6123      	str	r3, [r4, #16]
	GPSInfo.head=0.0;
 800419c:	6163      	str	r3, [r4, #20]
	GPSInfo.speed=0.0;
 800419e:	61a3      	str	r3, [r4, #24]
	GPSInfo.fix=0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61e3      	str	r3, [r4, #28]
	GPSInfo.sat=0;
 80041a4:	6223      	str	r3, [r4, #32]
	strcpy(GPSInfo.latD,"x");
 80041a6:	2678      	movs	r6, #120	; 0x78
 80041a8:	8526      	strh	r6, [r4, #40]	; 0x28
	strcpy(GPSInfo.lonD,"x");
 80041aa:	0020      	movs	r0, r4
 80041ac:	302b      	adds	r0, #43	; 0x2b
 80041ae:	4d07      	ldr	r5, [pc, #28]	; (80041cc <initGPS+0x40>)
 80041b0:	2202      	movs	r2, #2
 80041b2:	0029      	movs	r1, r5
 80041b4:	f009 fae4 	bl	800d780 <memcpy>
	strcpy(GPSInfo.time,"x");
 80041b8:	85e6      	strh	r6, [r4, #46]	; 0x2e
	strcpy(GPSInfo.date,"x");
 80041ba:	0020      	movs	r0, r4
 80041bc:	303d      	adds	r0, #61	; 0x3d
 80041be:	2202      	movs	r2, #2
 80041c0:	0029      	movs	r1, r5
 80041c2:	f009 fadd 	bl	800d780 <memcpy>
}
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	200002a8 	.word	0x200002a8
 80041cc:	080113d4 	.word	0x080113d4

080041d0 <getGPSString>:
void getGPSString(){
 80041d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d2:	46c6      	mov	lr, r8
 80041d4:	b500      	push	{lr}
 80041d6:	b096      	sub	sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 80041d8:	4828      	ldr	r0, [pc, #160]	; (800427c <getGPSString+0xac>)
 80041da:	2246      	movs	r2, #70	; 0x46
 80041dc:	2100      	movs	r1, #0
 80041de:	f009 f907 	bl	800d3f0 <memset>

	if(GPSInfo.fix==1){
 80041e2:	4b27      	ldr	r3, [pc, #156]	; (8004280 <getGPSString+0xb0>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d042      	beq.n	8004270 <getGPSString+0xa0>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 80041ea:	2200      	movs	r2, #0
 80041ec:	2104      	movs	r1, #4
 80041ee:	4825      	ldr	r0, [pc, #148]	; (8004284 <getGPSString+0xb4>)
 80041f0:	f002 ff78 	bl	80070e4 <HAL_GPIO_WritePin>
	}




	sprintf(gpsDataRet, "%1d,%s,%s,%0.6f,%1s,%0.6f,%s,%0.1f,%0.2f,%d,%0.1f,%0.1f,%0.1f",
 80041f4:	4c22      	ldr	r4, [pc, #136]	; (8004280 <getGPSString+0xb0>)
 80041f6:	233d      	movs	r3, #61	; 0x3d
 80041f8:	4698      	mov	r8, r3
 80041fa:	44a0      	add	r8, r4
 80041fc:	69e7      	ldr	r7, [r4, #28]
 80041fe:	4e22      	ldr	r6, [pc, #136]	; (8004288 <getGPSString+0xb8>)
 8004200:	4d1e      	ldr	r5, [pc, #120]	; (800427c <getGPSString+0xac>)
 8004202:	68e0      	ldr	r0, [r4, #12]
 8004204:	f7fe ff54 	bl	80030b0 <__aeabi_f2d>
 8004208:	9014      	str	r0, [sp, #80]	; 0x50
 800420a:	9115      	str	r1, [sp, #84]	; 0x54
 800420c:	6920      	ldr	r0, [r4, #16]
 800420e:	f7fe ff4f 	bl	80030b0 <__aeabi_f2d>
 8004212:	9012      	str	r0, [sp, #72]	; 0x48
 8004214:	9113      	str	r1, [sp, #76]	; 0x4c
 8004216:	68a0      	ldr	r0, [r4, #8]
 8004218:	f7fe ff4a 	bl	80030b0 <__aeabi_f2d>
 800421c:	9010      	str	r0, [sp, #64]	; 0x40
 800421e:	9111      	str	r1, [sp, #68]	; 0x44
 8004220:	6a23      	ldr	r3, [r4, #32]
 8004222:	930e      	str	r3, [sp, #56]	; 0x38
 8004224:	6960      	ldr	r0, [r4, #20]
 8004226:	f7fe ff43 	bl	80030b0 <__aeabi_f2d>
 800422a:	900c      	str	r0, [sp, #48]	; 0x30
 800422c:	910d      	str	r1, [sp, #52]	; 0x34
 800422e:	69a0      	ldr	r0, [r4, #24]
 8004230:	f7fe ff3e 	bl	80030b0 <__aeabi_f2d>
 8004234:	900a      	str	r0, [sp, #40]	; 0x28
 8004236:	910b      	str	r1, [sp, #44]	; 0x2c
 8004238:	0023      	movs	r3, r4
 800423a:	332b      	adds	r3, #43	; 0x2b
 800423c:	9308      	str	r3, [sp, #32]
 800423e:	6860      	ldr	r0, [r4, #4]
 8004240:	f7fe ff36 	bl	80030b0 <__aeabi_f2d>
 8004244:	9006      	str	r0, [sp, #24]
 8004246:	9107      	str	r1, [sp, #28]
 8004248:	0023      	movs	r3, r4
 800424a:	3328      	adds	r3, #40	; 0x28
 800424c:	9304      	str	r3, [sp, #16]
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	f7fe ff2e 	bl	80030b0 <__aeabi_f2d>
 8004254:	9002      	str	r0, [sp, #8]
 8004256:	9103      	str	r1, [sp, #12]
 8004258:	342e      	adds	r4, #46	; 0x2e
 800425a:	9400      	str	r4, [sp, #0]
 800425c:	4643      	mov	r3, r8
 800425e:	003a      	movs	r2, r7
 8004260:	0031      	movs	r1, r6
 8004262:	0028      	movs	r0, r5
 8004264:	f009 f858 	bl	800d318 <siprintf>
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
}
 8004268:	b016      	add	sp, #88	; 0x58
 800426a:	bc80      	pop	{r7}
 800426c:	46b8      	mov	r8, r7
 800426e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 8004270:	2201      	movs	r2, #1
 8004272:	2104      	movs	r1, #4
 8004274:	4803      	ldr	r0, [pc, #12]	; (8004284 <getGPSString+0xb4>)
 8004276:	f002 ff35 	bl	80070e4 <HAL_GPIO_WritePin>
}
 800427a:	e7bb      	b.n	80041f4 <getGPSString+0x24>
 800427c:	20004108 	.word	0x20004108
 8004280:	200002a8 	.word	0x200002a8
 8004284:	50000c00 	.word	0x50000c00
 8004288:	080113d8 	.word	0x080113d8

0800428c <DegreeDecimalConvert>:



float DegreeDecimalConvert(float ddmmmm){
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	1c05      	adds	r5, r0, #0
    // printf("insfunction2 %f",ddmmmm);
    int dd1= ddmmmm/100;
 8004290:	490c      	ldr	r1, [pc, #48]	; (80042c4 <DegreeDecimalConvert+0x38>)
 8004292:	f7fc fb53 	bl	800093c <__aeabi_fdiv>
 8004296:	f7fd f809 	bl	80012ac <__aeabi_f2iz>
 800429a:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 800429c:	2064      	movs	r0, #100	; 0x64
 800429e:	4360      	muls	r0, r4
 80042a0:	f7fd f824 	bl	80012ec <__aeabi_i2f>
 80042a4:	1c01      	adds	r1, r0, #0
 80042a6:	1c28      	adds	r0, r5, #0
 80042a8:	f7fc fe60 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 80042ac:	4906      	ldr	r1, [pc, #24]	; (80042c8 <DegreeDecimalConvert+0x3c>)
 80042ae:	f7fc fb45 	bl	800093c <__aeabi_fdiv>
 80042b2:	1c05      	adds	r5, r0, #0
    mm=(float)dd1+mm;
 80042b4:	0020      	movs	r0, r4
 80042b6:	f7fd f819 	bl	80012ec <__aeabi_i2f>
 80042ba:	1c29      	adds	r1, r5, #0
 80042bc:	f7fc f99e 	bl	80005fc <__aeabi_fadd>
    return(mm);
}
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	42c80000 	.word	0x42c80000
 80042c8:	42700000 	.word	0x42700000

080042cc <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 80042cc:	b510      	push	{r4, lr}
 80042ce:	0004      	movs	r4, r0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80042d0:	212a      	movs	r1, #42	; 0x2a
 80042d2:	f009 f8a2 	bl	800d41a <strchr>
 80042d6:	3001      	adds	r0, #1
 80042d8:	2210      	movs	r2, #16
 80042da:	2100      	movs	r1, #0
 80042dc:	f008 f8c6 	bl	800c46c <strtol>
 80042e0:	b2c1      	uxtb	r1, r0

    char p;
    uint8_t sum = 0;
    ++message;
    while ((p = *message++) != '*') {
 80042e2:	7863      	ldrb	r3, [r4, #1]
 80042e4:	2b2a      	cmp	r3, #42	; 0x2a
 80042e6:	d00c      	beq.n	8004302 <nmea_valid_checksum+0x36>
 80042e8:	3402      	adds	r4, #2
    uint8_t sum = 0;
 80042ea:	2200      	movs	r2, #0
        sum ^= p;
 80042ec:	405a      	eors	r2, r3
    while ((p = *message++) != '*') {
 80042ee:	3401      	adds	r4, #1
 80042f0:	1e63      	subs	r3, r4, #1
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b2a      	cmp	r3, #42	; 0x2a
 80042f6:	d1f9      	bne.n	80042ec <nmea_valid_checksum+0x20>
    }

    if (sum != checksum) {
 80042f8:	1a88      	subs	r0, r1, r2
 80042fa:	4243      	negs	r3, r0
 80042fc:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
}
 80042fe:	b2c0      	uxtb	r0, r0
 8004300:	bd10      	pop	{r4, pc}
    uint8_t sum = 0;
 8004302:	2200      	movs	r2, #0
 8004304:	e7f8      	b.n	80042f8 <nmea_valid_checksum+0x2c>
	...

08004308 <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 8004308:	b510      	push	{r4, lr}
 800430a:	b084      	sub	sp, #16
	int i=0;
	Debug_Tx("------------------Testing Memory:");
 800430c:	480f      	ldr	r0, [pc, #60]	; (800434c <TestMEM+0x44>)
 800430e:	f7ff f807 	bl	8003320 <Debug_Tx>
	for(i=0;i<1;i++){
		SPI_flash_get_device_ID( );
 8004312:	f7ff fc3f 	bl	8003b94 <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8004316:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <TestMEM+0x48>)
 8004318:	4c0e      	ldr	r4, [pc, #56]	; (8004354 <TestMEM+0x4c>)
 800431a:	0022      	movs	r2, r4
 800431c:	320c      	adds	r2, #12
 800431e:	0021      	movs	r1, r4
 8004320:	3134      	adds	r1, #52	; 0x34
 8004322:	0020      	movs	r0, r4
 8004324:	3058      	adds	r0, #88	; 0x58
 8004326:	3468      	adds	r4, #104	; 0x68
 8004328:	9402      	str	r4, [sp, #8]
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f7ff fe09 	bl	8003f44 <writeConfig>
		 	  				  "216.10.243.86","216.10.243.86","216.10.243.86",
			  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");


		Debug_Tx("Reading RegNo--");
 8004332:	4809      	ldr	r0, [pc, #36]	; (8004358 <TestMEM+0x50>)
 8004334:	f7fe fff4 	bl	8003320 <Debug_Tx>
		Debug_Tx(readRegNo());
 8004338:	f7ff fed2 	bl	80040e0 <readRegNo>
 800433c:	f7fe fff0 	bl	8003320 <Debug_Tx>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 8004340:	20fa      	movs	r0, #250	; 0xfa
 8004342:	00c0      	lsls	r0, r0, #3
 8004344:	f001 fffe 	bl	8006344 <HAL_Delay>

	}


}
 8004348:	b004      	add	sp, #16
 800434a:	bd10      	pop	{r4, pc}
 800434c:	08011418 	.word	0x08011418
 8004350:	0801143c 	.word	0x0801143c
 8004354:	08010f18 	.word	0x08010f18
 8004358:	0801144c 	.word	0x0801144c

0800435c <SystemClock_Config>:
{
 800435c:	b500      	push	{lr}
 800435e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004360:	2234      	movs	r2, #52	; 0x34
 8004362:	2100      	movs	r1, #0
 8004364:	a805      	add	r0, sp, #20
 8004366:	f009 f843 	bl	800d3f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800436a:	2210      	movs	r2, #16
 800436c:	2100      	movs	r1, #0
 800436e:	a801      	add	r0, sp, #4
 8004370:	f009 f83e 	bl	800d3f0 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004374:	2080      	movs	r0, #128	; 0x80
 8004376:	0080      	lsls	r0, r0, #2
 8004378:	f003 fab8 	bl	80078ec <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800437c:	2302      	movs	r3, #2
 800437e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004380:	33fe      	adds	r3, #254	; 0xfe
 8004382:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004384:	2300      	movs	r3, #0
 8004386:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004388:	2240      	movs	r2, #64	; 0x40
 800438a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800438c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800438e:	a805      	add	r0, sp, #20
 8004390:	f003 fade 	bl	8007950 <HAL_RCC_OscConfig>
 8004394:	2800      	cmp	r0, #0
 8004396:	d10f      	bne.n	80043b8 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004398:	2307      	movs	r3, #7
 800439a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800439c:	2300      	movs	r3, #0
 800439e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043a0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80043a2:	23a0      	movs	r3, #160	; 0xa0
 80043a4:	01db      	lsls	r3, r3, #7
 80043a6:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80043a8:	2100      	movs	r1, #0
 80043aa:	a801      	add	r0, sp, #4
 80043ac:	f003 fdb0 	bl	8007f10 <HAL_RCC_ClockConfig>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d103      	bne.n	80043bc <SystemClock_Config+0x60>
}
 80043b4:	b013      	add	sp, #76	; 0x4c
 80043b6:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043ba:	e7fe      	b.n	80043ba <SystemClock_Config+0x5e>
 80043bc:	b672      	cpsid	i
 80043be:	e7fe      	b.n	80043be <SystemClock_Config+0x62>

080043c0 <main>:
{
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c2:	46de      	mov	lr, fp
 80043c4:	4657      	mov	r7, sl
 80043c6:	464e      	mov	r6, r9
 80043c8:	4645      	mov	r5, r8
 80043ca:	b5e0      	push	{r5, r6, r7, lr}
 80043cc:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80043ce:	f001 ff93 	bl	80062f8 <HAL_Init>
  SystemClock_Config();
 80043d2:	f7ff ffc3 	bl	800435c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d6:	2214      	movs	r2, #20
 80043d8:	2100      	movs	r1, #0
 80043da:	a807      	add	r0, sp, #28
 80043dc:	f009 f808 	bl	800d3f0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e0:	4df1      	ldr	r5, [pc, #964]	; (80047a8 <main+0x3e8>)
 80043e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80043e4:	2704      	movs	r7, #4
 80043e6:	433b      	orrs	r3, r7
 80043e8:	636b      	str	r3, [r5, #52]	; 0x34
 80043ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80043ec:	403b      	ands	r3, r7
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80043f4:	2220      	movs	r2, #32
 80043f6:	4692      	mov	sl, r2
 80043f8:	4313      	orrs	r3, r2
 80043fa:	636b      	str	r3, [r5, #52]	; 0x34
 80043fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80043fe:	4013      	ands	r3, r2
 8004400:	9303      	str	r3, [sp, #12]
 8004402:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004404:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004406:	2601      	movs	r6, #1
 8004408:	4333      	orrs	r3, r6
 800440a:	636b      	str	r3, [r5, #52]	; 0x34
 800440c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800440e:	4033      	ands	r3, r6
 8004410:	9304      	str	r3, [sp, #16]
 8004412:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004414:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004416:	2302      	movs	r3, #2
 8004418:	431a      	orrs	r2, r3
 800441a:	636a      	str	r2, [r5, #52]	; 0x34
 800441c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800441e:	4013      	ands	r3, r2
 8004420:	9305      	str	r3, [sp, #20]
 8004422:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004424:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004426:	2308      	movs	r3, #8
 8004428:	431a      	orrs	r2, r3
 800442a:	636a      	str	r2, [r5, #52]	; 0x34
 800442c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800442e:	4013      	ands	r3, r2
 8004430:	9306      	str	r3, [sp, #24]
 8004432:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8004434:	4cdd      	ldr	r4, [pc, #884]	; (80047ac <main+0x3ec>)
 8004436:	23a0      	movs	r3, #160	; 0xa0
 8004438:	05db      	lsls	r3, r3, #23
 800443a:	4699      	mov	r9, r3
 800443c:	2200      	movs	r2, #0
 800443e:	0021      	movs	r1, r4
 8004440:	0018      	movs	r0, r3
 8004442:	f002 fe4f 	bl	80070e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8004446:	4bda      	ldr	r3, [pc, #872]	; (80047b0 <main+0x3f0>)
 8004448:	469b      	mov	fp, r3
 800444a:	2200      	movs	r2, #0
 800444c:	21c0      	movs	r1, #192	; 0xc0
 800444e:	0018      	movs	r0, r3
 8004450:	f002 fe48 	bl	80070e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8004454:	2200      	movs	r2, #0
 8004456:	2107      	movs	r1, #7
 8004458:	48d6      	ldr	r0, [pc, #856]	; (80047b4 <main+0x3f4>)
 800445a:	f002 fe43 	bl	80070e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 800445e:	4bd6      	ldr	r3, [pc, #856]	; (80047b8 <main+0x3f8>)
 8004460:	4698      	mov	r8, r3
 8004462:	2200      	movs	r2, #0
 8004464:	218e      	movs	r1, #142	; 0x8e
 8004466:	0089      	lsls	r1, r1, #2
 8004468:	0018      	movs	r0, r3
 800446a:	f002 fe3b 	bl	80070e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 800446e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004470:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004472:	2400      	movs	r4, #0
 8004474:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004478:	a907      	add	r1, sp, #28
 800447a:	4648      	mov	r0, r9
 800447c:	f002 fd40 	bl	8006f00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8004480:	23f2      	movs	r3, #242	; 0xf2
 8004482:	01db      	lsls	r3, r3, #7
 8004484:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004486:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448a:	a907      	add	r1, sp, #28
 800448c:	4640      	mov	r0, r8
 800448e:	f002 fd37 	bl	8006f00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004498:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 800449a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449c:	a907      	add	r1, sp, #28
 800449e:	4640      	mov	r0, r8
 80044a0:	f002 fd2e 	bl	8006f00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044aa:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 80044ac:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ae:	a907      	add	r1, sp, #28
 80044b0:	4648      	mov	r0, r9
 80044b2:	f002 fd25 	bl	8006f00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	015b      	lsls	r3, r3, #5
 80044ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044bc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c0:	a907      	add	r1, sp, #28
 80044c2:	4648      	mov	r0, r9
 80044c4:	f002 fd1c 	bl	8006f00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 80044c8:	23c0      	movs	r3, #192	; 0xc0
 80044ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044cc:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d2:	a907      	add	r1, sp, #28
 80044d4:	4658      	mov	r0, fp
 80044d6:	f002 fd13 	bl	8006f00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 80044da:	2307      	movs	r3, #7
 80044dc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044de:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044e4:	a907      	add	r1, sp, #28
 80044e6:	48b3      	ldr	r0, [pc, #716]	; (80047b4 <main+0x3f4>)
 80044e8:	f002 fd0a 	bl	8006f00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 80044ec:	238e      	movs	r3, #142	; 0x8e
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f8:	a907      	add	r1, sp, #28
 80044fa:	4640      	mov	r0, r8
 80044fc:	f002 fd00 	bl	8006f00 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004500:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004502:	4333      	orrs	r3, r6
 8004504:	63ab      	str	r3, [r5, #56]	; 0x38
 8004506:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004508:	401e      	ands	r6, r3
 800450a:	9601      	str	r6, [sp, #4]
 800450c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	2103      	movs	r1, #3
 8004512:	2009      	movs	r0, #9
 8004514:	f002 faac 	bl	8006a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004518:	2009      	movs	r0, #9
 800451a:	f002 fadb 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 800451e:	2200      	movs	r2, #0
 8004520:	2103      	movs	r1, #3
 8004522:	200a      	movs	r0, #10
 8004524:	f002 faa4 	bl	8006a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004528:	200a      	movs	r0, #10
 800452a:	f002 fad3 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 800452e:	2200      	movs	r2, #0
 8004530:	2103      	movs	r1, #3
 8004532:	200b      	movs	r0, #11
 8004534:	f002 fa9c 	bl	8006a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8004538:	200b      	movs	r0, #11
 800453a:	f002 facb 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 800453e:	220c      	movs	r2, #12
 8004540:	2100      	movs	r1, #0
 8004542:	a807      	add	r0, sp, #28
 8004544:	f008 ff54 	bl	800d3f0 <memset>
  hadc1.Instance = ADC1;
 8004548:	489c      	ldr	r0, [pc, #624]	; (80047bc <main+0x3fc>)
 800454a:	4b9d      	ldr	r3, [pc, #628]	; (80047c0 <main+0x400>)
 800454c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004554:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004556:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	039b      	lsls	r3, r3, #14
 800455c:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800455e:	6147      	str	r7, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004560:	7604      	strb	r4, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004562:	7644      	strb	r4, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004564:	7684      	strb	r4, [r0, #26]
  hadc1.Init.NbrOfConversion = 4;
 8004566:	61c7      	str	r7, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004568:	4653      	mov	r3, sl
 800456a:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800456c:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800456e:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004570:	330c      	adds	r3, #12
 8004572:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004574:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004576:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004578:	6384      	str	r4, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800457a:	3310      	adds	r3, #16
 800457c:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800457e:	64c4      	str	r4, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004580:	f001 fefe 	bl	8006380 <HAL_ADC_Init>
 8004584:	2800      	cmp	r0, #0
 8004586:	d000      	beq.n	800458a <main+0x1ca>
 8004588:	e10c      	b.n	80047a4 <main+0x3e4>
  sConfig.Channel = ADC_CHANNEL_1;
 800458a:	4b8e      	ldr	r3, [pc, #568]	; (80047c4 <main+0x404>)
 800458c:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800458e:	2304      	movs	r3, #4
 8004590:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004592:	2300      	movs	r3, #0
 8004594:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004596:	4889      	ldr	r0, [pc, #548]	; (80047bc <main+0x3fc>)
 8004598:	a907      	add	r1, sp, #28
 800459a:	f002 f861 	bl	8006660 <HAL_ADC_ConfigChannel>
 800459e:	2800      	cmp	r0, #0
 80045a0:	d000      	beq.n	80045a4 <main+0x1e4>
 80045a2:	e147      	b.n	8004834 <main+0x474>
  sConfig.Channel = ADC_CHANNEL_9;
 80045a4:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <main+0x408>)
 80045a6:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80045a8:	2308      	movs	r3, #8
 80045aa:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045ac:	4883      	ldr	r0, [pc, #524]	; (80047bc <main+0x3fc>)
 80045ae:	a907      	add	r1, sp, #28
 80045b0:	f002 f856 	bl	8006660 <HAL_ADC_ConfigChannel>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d000      	beq.n	80045ba <main+0x1fa>
 80045b8:	e13e      	b.n	8004838 <main+0x478>
  sConfig.Channel = ADC_CHANNEL_11;
 80045ba:	4b84      	ldr	r3, [pc, #528]	; (80047cc <main+0x40c>)
 80045bc:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80045be:	230c      	movs	r3, #12
 80045c0:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045c2:	487e      	ldr	r0, [pc, #504]	; (80047bc <main+0x3fc>)
 80045c4:	a907      	add	r1, sp, #28
 80045c6:	f002 f84b 	bl	8006660 <HAL_ADC_ConfigChannel>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d000      	beq.n	80045d0 <main+0x210>
 80045ce:	e135      	b.n	800483c <main+0x47c>
  hi2c1.Instance = I2C1;
 80045d0:	487f      	ldr	r0, [pc, #508]	; (80047d0 <main+0x410>)
 80045d2:	4b80      	ldr	r3, [pc, #512]	; (80047d4 <main+0x414>)
 80045d4:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80045d6:	4b80      	ldr	r3, [pc, #512]	; (80047d8 <main+0x418>)
 80045d8:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045de:	2201      	movs	r2, #1
 80045e0:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045e2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80045e4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045e6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045e8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045ea:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045ec:	f002 fec4 	bl	8007378 <HAL_I2C_Init>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d000      	beq.n	80045f6 <main+0x236>
 80045f4:	e124      	b.n	8004840 <main+0x480>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045f6:	4876      	ldr	r0, [pc, #472]	; (80047d0 <main+0x410>)
 80045f8:	2100      	movs	r1, #0
 80045fa:	f003 f921 	bl	8007840 <HAL_I2CEx_ConfigAnalogFilter>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d000      	beq.n	8004604 <main+0x244>
 8004602:	e11f      	b.n	8004844 <main+0x484>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004604:	4872      	ldr	r0, [pc, #456]	; (80047d0 <main+0x410>)
 8004606:	2100      	movs	r1, #0
 8004608:	f003 f946 	bl	8007898 <HAL_I2CEx_ConfigDigitalFilter>
 800460c:	2800      	cmp	r0, #0
 800460e:	d000      	beq.n	8004612 <main+0x252>
 8004610:	e11a      	b.n	8004848 <main+0x488>
  hspi1.Instance = SPI1;
 8004612:	4872      	ldr	r0, [pc, #456]	; (80047dc <main+0x41c>)
 8004614:	4b72      	ldr	r3, [pc, #456]	; (80047e0 <main+0x420>)
 8004616:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004618:	2382      	movs	r3, #130	; 0x82
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800461e:	2300      	movs	r3, #0
 8004620:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004622:	22e0      	movs	r2, #224	; 0xe0
 8004624:	00d2      	lsls	r2, r2, #3
 8004626:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004628:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800462a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	0092      	lsls	r2, r2, #2
 8004630:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004632:	3af9      	subs	r2, #249	; 0xf9
 8004634:	3aff      	subs	r2, #255	; 0xff
 8004636:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004638:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800463a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800463e:	2107      	movs	r1, #7
 8004640:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004642:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004644:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004646:	f003 ff75 	bl	8008534 <HAL_SPI_Init>
 800464a:	2800      	cmp	r0, #0
 800464c:	d000      	beq.n	8004650 <main+0x290>
 800464e:	e0fd      	b.n	800484c <main+0x48c>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004650:	220c      	movs	r2, #12
 8004652:	2100      	movs	r1, #0
 8004654:	a807      	add	r0, sp, #28
 8004656:	f008 fecb 	bl	800d3f0 <memset>
  htim6.Instance = TIM6;
 800465a:	4862      	ldr	r0, [pc, #392]	; (80047e4 <main+0x424>)
 800465c:	4b62      	ldr	r3, [pc, #392]	; (80047e8 <main+0x428>)
 800465e:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 8000-1;
 8004660:	4b62      	ldr	r3, [pc, #392]	; (80047ec <main+0x42c>)
 8004662:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004664:	2300      	movs	r3, #0
 8004666:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 500-1;
 8004668:	22f4      	movs	r2, #244	; 0xf4
 800466a:	32ff      	adds	r2, #255	; 0xff
 800466c:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800466e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004670:	f004 fb64 	bl	8008d3c <HAL_TIM_Base_Init>
 8004674:	2800      	cmp	r0, #0
 8004676:	d000      	beq.n	800467a <main+0x2ba>
 8004678:	e0ea      	b.n	8004850 <main+0x490>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004680:	4858      	ldr	r0, [pc, #352]	; (80047e4 <main+0x424>)
 8004682:	a907      	add	r1, sp, #28
 8004684:	f004 fb8a 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 8004688:	2800      	cmp	r0, #0
 800468a:	d000      	beq.n	800468e <main+0x2ce>
 800468c:	e0e2      	b.n	8004854 <main+0x494>
  huart1.Instance = USART1;
 800468e:	4858      	ldr	r0, [pc, #352]	; (80047f0 <main+0x430>)
 8004690:	4b58      	ldr	r3, [pc, #352]	; (80047f4 <main+0x434>)
 8004692:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8004694:	2396      	movs	r3, #150	; 0x96
 8004696:	019b      	lsls	r3, r3, #6
 8004698:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800469a:	2300      	movs	r3, #0
 800469c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800469e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046a0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046a2:	220c      	movs	r2, #12
 80046a4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046a8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046aa:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046ac:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046b0:	f005 f996 	bl	80099e0 <HAL_UART_Init>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d000      	beq.n	80046ba <main+0x2fa>
 80046b8:	e0ce      	b.n	8004858 <main+0x498>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046ba:	484d      	ldr	r0, [pc, #308]	; (80047f0 <main+0x430>)
 80046bc:	2100      	movs	r1, #0
 80046be:	f005 fa9d 	bl	8009bfc <HAL_UARTEx_SetTxFifoThreshold>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d000      	beq.n	80046c8 <main+0x308>
 80046c6:	e0c9      	b.n	800485c <main+0x49c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046c8:	4849      	ldr	r0, [pc, #292]	; (80047f0 <main+0x430>)
 80046ca:	2100      	movs	r1, #0
 80046cc:	f005 fabc 	bl	8009c48 <HAL_UARTEx_SetRxFifoThreshold>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d000      	beq.n	80046d6 <main+0x316>
 80046d4:	e0c4      	b.n	8004860 <main+0x4a0>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80046d6:	4846      	ldr	r0, [pc, #280]	; (80047f0 <main+0x430>)
 80046d8:	f005 fa70 	bl	8009bbc <HAL_UARTEx_DisableFifoMode>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d000      	beq.n	80046e2 <main+0x322>
 80046e0:	e0c0      	b.n	8004864 <main+0x4a4>
  huart2.Instance = USART2;
 80046e2:	4845      	ldr	r0, [pc, #276]	; (80047f8 <main+0x438>)
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <main+0x43c>)
 80046e6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80046e8:	2396      	movs	r3, #150	; 0x96
 80046ea:	019b      	lsls	r3, r3, #6
 80046ec:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046ee:	2300      	movs	r3, #0
 80046f0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046f2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046f4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046f6:	220c      	movs	r2, #12
 80046f8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046fa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046fc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046fe:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004700:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004702:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004704:	f005 f96c 	bl	80099e0 <HAL_UART_Init>
 8004708:	2800      	cmp	r0, #0
 800470a:	d000      	beq.n	800470e <main+0x34e>
 800470c:	e0ac      	b.n	8004868 <main+0x4a8>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800470e:	483a      	ldr	r0, [pc, #232]	; (80047f8 <main+0x438>)
 8004710:	2100      	movs	r1, #0
 8004712:	f005 fa73 	bl	8009bfc <HAL_UARTEx_SetTxFifoThreshold>
 8004716:	2800      	cmp	r0, #0
 8004718:	d000      	beq.n	800471c <main+0x35c>
 800471a:	e0a7      	b.n	800486c <main+0x4ac>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800471c:	4836      	ldr	r0, [pc, #216]	; (80047f8 <main+0x438>)
 800471e:	2100      	movs	r1, #0
 8004720:	f005 fa92 	bl	8009c48 <HAL_UARTEx_SetRxFifoThreshold>
 8004724:	2800      	cmp	r0, #0
 8004726:	d000      	beq.n	800472a <main+0x36a>
 8004728:	e0a2      	b.n	8004870 <main+0x4b0>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800472a:	4833      	ldr	r0, [pc, #204]	; (80047f8 <main+0x438>)
 800472c:	f005 fa46 	bl	8009bbc <HAL_UARTEx_DisableFifoMode>
 8004730:	2800      	cmp	r0, #0
 8004732:	d000      	beq.n	8004736 <main+0x376>
 8004734:	e09e      	b.n	8004874 <main+0x4b4>
  huart3.Instance = USART3;
 8004736:	4832      	ldr	r0, [pc, #200]	; (8004800 <main+0x440>)
 8004738:	4b32      	ldr	r3, [pc, #200]	; (8004804 <main+0x444>)
 800473a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 800473c:	2396      	movs	r3, #150	; 0x96
 800473e:	019b      	lsls	r3, r3, #6
 8004740:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004742:	2300      	movs	r3, #0
 8004744:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004746:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004748:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800474a:	220c      	movs	r2, #12
 800474c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800474e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004750:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004752:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004754:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004756:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004758:	f005 f942 	bl	80099e0 <HAL_UART_Init>
 800475c:	2800      	cmp	r0, #0
 800475e:	d000      	beq.n	8004762 <main+0x3a2>
 8004760:	e08a      	b.n	8004878 <main+0x4b8>
  osKernelInitialize();
 8004762:	f005 faa7 	bl	8009cb4 <osKernelInitialize>
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8004766:	4a28      	ldr	r2, [pc, #160]	; (8004808 <main+0x448>)
 8004768:	2102      	movs	r1, #2
 800476a:	2010      	movs	r0, #16
 800476c:	f005 fb38 	bl	8009de0 <osMessageQueueNew>
 8004770:	4b26      	ldr	r3, [pc, #152]	; (800480c <main+0x44c>)
 8004772:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004774:	4a26      	ldr	r2, [pc, #152]	; (8004810 <main+0x450>)
 8004776:	4827      	ldr	r0, [pc, #156]	; (8004814 <main+0x454>)
 8004778:	2100      	movs	r1, #0
 800477a:	f005 facf 	bl	8009d1c <osThreadNew>
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <main+0x458>)
 8004780:	6018      	str	r0, [r3, #0]
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8004782:	4a26      	ldr	r2, [pc, #152]	; (800481c <main+0x45c>)
 8004784:	4826      	ldr	r0, [pc, #152]	; (8004820 <main+0x460>)
 8004786:	2100      	movs	r1, #0
 8004788:	f005 fac8 	bl	8009d1c <osThreadNew>
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <main+0x464>)
 800478e:	6018      	str	r0, [r3, #0]
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8004790:	4a25      	ldr	r2, [pc, #148]	; (8004828 <main+0x468>)
 8004792:	4826      	ldr	r0, [pc, #152]	; (800482c <main+0x46c>)
 8004794:	2100      	movs	r1, #0
 8004796:	f005 fac1 	bl	8009d1c <osThreadNew>
 800479a:	4b25      	ldr	r3, [pc, #148]	; (8004830 <main+0x470>)
 800479c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800479e:	f005 fa9d 	bl	8009cdc <osKernelStart>
  while (1)
 80047a2:	e7fe      	b.n	80047a2 <main+0x3e2>
 80047a4:	b672      	cpsid	i
  while (1)
 80047a6:	e7fe      	b.n	80047a6 <main+0x3e6>
 80047a8:	40021000 	.word	0x40021000
 80047ac:	00008010 	.word	0x00008010
 80047b0:	50000800 	.word	0x50000800
 80047b4:	50000c00 	.word	0x50000c00
 80047b8:	50000400 	.word	0x50000400
 80047bc:	20004154 	.word	0x20004154
 80047c0:	40012400 	.word	0x40012400
 80047c4:	04000002 	.word	0x04000002
 80047c8:	24000200 	.word	0x24000200
 80047cc:	2c000800 	.word	0x2c000800
 80047d0:	20004328 	.word	0x20004328
 80047d4:	40005400 	.word	0x40005400
 80047d8:	00000e14 	.word	0x00000e14
 80047dc:	2000437c 	.word	0x2000437c
 80047e0:	40013000 	.word	0x40013000
 80047e4:	200043e0 	.word	0x200043e0
 80047e8:	40001000 	.word	0x40001000
 80047ec:	00001f3f 	.word	0x00001f3f
 80047f0:	2000442c 	.word	0x2000442c
 80047f4:	40013800 	.word	0x40013800
 80047f8:	200044c0 	.word	0x200044c0
 80047fc:	40004400 	.word	0x40004400
 8004800:	20004554 	.word	0x20004554
 8004804:	40004800 	.word	0x40004800
 8004808:	08011f18 	.word	0x08011f18
 800480c:	200045f0 	.word	0x200045f0
 8004810:	08011eb4 	.word	0x08011eb4
 8004814:	08005835 	.word	0x08005835
 8004818:	20003d14 	.word	0x20003d14
 800481c:	08011e6c 	.word	0x08011e6c
 8004820:	080035a1 	.word	0x080035a1
 8004824:	200002f4 	.word	0x200002f4
 8004828:	08011e90 	.word	0x08011e90
 800482c:	080035ab 	.word	0x080035ab
 8004830:	20003be4 	.word	0x20003be4
 8004834:	b672      	cpsid	i
 8004836:	e7fe      	b.n	8004836 <main+0x476>
 8004838:	b672      	cpsid	i
 800483a:	e7fe      	b.n	800483a <main+0x47a>
 800483c:	b672      	cpsid	i
 800483e:	e7fe      	b.n	800483e <main+0x47e>
 8004840:	b672      	cpsid	i
 8004842:	e7fe      	b.n	8004842 <main+0x482>
 8004844:	b672      	cpsid	i
 8004846:	e7fe      	b.n	8004846 <main+0x486>
 8004848:	b672      	cpsid	i
 800484a:	e7fe      	b.n	800484a <main+0x48a>
 800484c:	b672      	cpsid	i
 800484e:	e7fe      	b.n	800484e <main+0x48e>
 8004850:	b672      	cpsid	i
 8004852:	e7fe      	b.n	8004852 <main+0x492>
 8004854:	b672      	cpsid	i
 8004856:	e7fe      	b.n	8004856 <main+0x496>
 8004858:	b672      	cpsid	i
 800485a:	e7fe      	b.n	800485a <main+0x49a>
 800485c:	b672      	cpsid	i
 800485e:	e7fe      	b.n	800485e <main+0x49e>
 8004860:	b672      	cpsid	i
 8004862:	e7fe      	b.n	8004862 <main+0x4a2>
 8004864:	b672      	cpsid	i
 8004866:	e7fe      	b.n	8004866 <main+0x4a6>
 8004868:	b672      	cpsid	i
 800486a:	e7fe      	b.n	800486a <main+0x4aa>
 800486c:	b672      	cpsid	i
 800486e:	e7fe      	b.n	800486e <main+0x4ae>
 8004870:	b672      	cpsid	i
 8004872:	e7fe      	b.n	8004872 <main+0x4b2>
 8004874:	b672      	cpsid	i
 8004876:	e7fe      	b.n	8004876 <main+0x4b6>
 8004878:	b672      	cpsid	i
 800487a:	e7fe      	b.n	800487a <main+0x4ba>

0800487c <timedWork>:
void timedWork(){
 800487c:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 800487e:	2104      	movs	r1, #4
 8004880:	4809      	ldr	r0, [pc, #36]	; (80048a8 <timedWork+0x2c>)
 8004882:	f002 fc35 	bl	80070f0 <HAL_GPIO_TogglePin>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <timedWork+0x30>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <timedWork+0x20>
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <timedWork+0x34>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	dd01      	ble.n	800489a <timedWork+0x1e>
 8004896:	4a05      	ldr	r2, [pc, #20]	; (80048ac <timedWork+0x30>)
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	bd10      	pop	{r4, pc}
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 800489c:	f7ff fc44 	bl	8004128 <detectAcc>
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <timedWork+0x34>)
 80048a2:	6018      	str	r0, [r3, #0]
 80048a4:	e7f3      	b.n	800488e <timedWork+0x12>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	50000c00 	.word	0x50000c00
 80048ac:	20000254 	.word	0x20000254
 80048b0:	20000250 	.word	0x20000250

080048b4 <stor>:
float stor(const char* str) {
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	46ce      	mov	lr, r9
 80048b8:	4647      	mov	r7, r8
 80048ba:	b580      	push	{r7, lr}
 80048bc:	0005      	movs	r5, r0
    float sign = *str == '-' ? str++, -1 : 1;
 80048be:	7803      	ldrb	r3, [r0, #0]
 80048c0:	2b2d      	cmp	r3, #45	; 0x2d
 80048c2:	d02f      	beq.n	8004924 <stor+0x70>
 80048c4:	23fe      	movs	r3, #254	; 0xfe
 80048c6:	059b      	lsls	r3, r3, #22
 80048c8:	4698      	mov	r8, r3
    while (*str >= '0' && *str <= '9') {
 80048ca:	782e      	ldrb	r6, [r5, #0]
 80048cc:	0033      	movs	r3, r6
 80048ce:	3b30      	subs	r3, #48	; 0x30
 80048d0:	2b09      	cmp	r3, #9
 80048d2:	d82b      	bhi.n	800492c <stor+0x78>
    float result = 0;
 80048d4:	2400      	movs	r4, #0
        result *= 10;
 80048d6:	4f45      	ldr	r7, [pc, #276]	; (80049ec <stor+0x138>)
 80048d8:	1c39      	adds	r1, r7, #0
 80048da:	1c20      	adds	r0, r4, #0
 80048dc:	f7fc f9f8 	bl	8000cd0 <__aeabi_fmul>
 80048e0:	1c04      	adds	r4, r0, #0
        result += *str - '0';
 80048e2:	0030      	movs	r0, r6
 80048e4:	3830      	subs	r0, #48	; 0x30
 80048e6:	f7fc fd01 	bl	80012ec <__aeabi_i2f>
 80048ea:	1c21      	adds	r1, r4, #0
 80048ec:	f7fb fe86 	bl	80005fc <__aeabi_fadd>
 80048f0:	1c04      	adds	r4, r0, #0
        str++;
 80048f2:	3501      	adds	r5, #1
    while (*str >= '0' && *str <= '9') {
 80048f4:	782e      	ldrb	r6, [r5, #0]
 80048f6:	0033      	movs	r3, r6
 80048f8:	3b30      	subs	r3, #48	; 0x30
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	d9ec      	bls.n	80048d8 <stor+0x24>
    if (*str == ',' || *str == '.') {
 80048fe:	2302      	movs	r3, #2
 8004900:	439e      	bics	r6, r3
 8004902:	2e2c      	cmp	r6, #44	; 0x2c
 8004904:	d014      	beq.n	8004930 <stor+0x7c>
    result *= sign;
 8004906:	4641      	mov	r1, r8
 8004908:	1c20      	adds	r0, r4, #0
 800490a:	f7fc f9e1 	bl	8000cd0 <__aeabi_fmul>
 800490e:	4681      	mov	r9, r0
    if (*str == 'e' || *str == 'E') {
 8004910:	782b      	ldrb	r3, [r5, #0]
 8004912:	2220      	movs	r2, #32
 8004914:	4393      	bics	r3, r2
 8004916:	2b45      	cmp	r3, #69	; 0x45
 8004918:	d02c      	beq.n	8004974 <stor+0xc0>
}
 800491a:	4648      	mov	r0, r9
 800491c:	bcc0      	pop	{r6, r7}
 800491e:	46b9      	mov	r9, r7
 8004920:	46b0      	mov	r8, r6
 8004922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    float sign = *str == '-' ? str++, -1 : 1;
 8004924:	3501      	adds	r5, #1
 8004926:	4b32      	ldr	r3, [pc, #200]	; (80049f0 <stor+0x13c>)
 8004928:	4698      	mov	r8, r3
 800492a:	e7ce      	b.n	80048ca <stor+0x16>
    float result = 0;
 800492c:	2400      	movs	r4, #0
 800492e:	e7e6      	b.n	80048fe <stor+0x4a>
        str++;
 8004930:	1c6e      	adds	r6, r5, #1
        while (*str >= '0' && *str <= '9') {
 8004932:	7868      	ldrb	r0, [r5, #1]
 8004934:	0002      	movs	r2, r0
 8004936:	3a30      	subs	r2, #48	; 0x30
 8004938:	2a09      	cmp	r2, #9
 800493a:	d819      	bhi.n	8004970 <stor+0xbc>
        float multiplier = 0.1;
 800493c:	4d2d      	ldr	r5, [pc, #180]	; (80049f4 <stor+0x140>)
            multiplier /= 10;
 800493e:	4f2b      	ldr	r7, [pc, #172]	; (80049ec <stor+0x138>)
            result += (*str - '0') * multiplier;
 8004940:	3830      	subs	r0, #48	; 0x30
 8004942:	f7fc fcd3 	bl	80012ec <__aeabi_i2f>
 8004946:	1c29      	adds	r1, r5, #0
 8004948:	f7fc f9c2 	bl	8000cd0 <__aeabi_fmul>
 800494c:	1c01      	adds	r1, r0, #0
 800494e:	1c20      	adds	r0, r4, #0
 8004950:	f7fb fe54 	bl	80005fc <__aeabi_fadd>
 8004954:	1c04      	adds	r4, r0, #0
            multiplier /= 10;
 8004956:	1c39      	adds	r1, r7, #0
 8004958:	1c28      	adds	r0, r5, #0
 800495a:	f7fb ffef 	bl	800093c <__aeabi_fdiv>
 800495e:	1c05      	adds	r5, r0, #0
            str++;
 8004960:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 8004962:	7830      	ldrb	r0, [r6, #0]
 8004964:	0002      	movs	r2, r0
 8004966:	3a30      	subs	r2, #48	; 0x30
 8004968:	2a09      	cmp	r2, #9
 800496a:	d9e9      	bls.n	8004940 <stor+0x8c>
            str++;
 800496c:	0035      	movs	r5, r6
 800496e:	e7ca      	b.n	8004906 <stor+0x52>
        str++;
 8004970:	0035      	movs	r5, r6
 8004972:	e7c8      	b.n	8004906 <stor+0x52>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8004974:	786b      	ldrb	r3, [r5, #1]
 8004976:	2b2d      	cmp	r3, #45	; 0x2d
 8004978:	d032      	beq.n	80049e0 <stor+0x12c>
        str++;
 800497a:	1c6e      	adds	r6, r5, #1
        float powerer = *str == '-'? str++, 0.1 : 10;
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <stor+0x138>)
 800497e:	4698      	mov	r8, r3
        while (*str >= '0' && *str <= '9') {
 8004980:	7835      	ldrb	r5, [r6, #0]
 8004982:	002b      	movs	r3, r5
 8004984:	3b30      	subs	r3, #48	; 0x30
 8004986:	2b09      	cmp	r3, #9
 8004988:	d82e      	bhi.n	80049e8 <stor+0x134>
        float power = 0;
 800498a:	2000      	movs	r0, #0
            power *= 10;
 800498c:	4f17      	ldr	r7, [pc, #92]	; (80049ec <stor+0x138>)
 800498e:	1c39      	adds	r1, r7, #0
 8004990:	f7fc f99e 	bl	8000cd0 <__aeabi_fmul>
 8004994:	1c04      	adds	r4, r0, #0
            power += *str - '0';
 8004996:	0028      	movs	r0, r5
 8004998:	3830      	subs	r0, #48	; 0x30
 800499a:	f7fc fca7 	bl	80012ec <__aeabi_i2f>
 800499e:	1c21      	adds	r1, r4, #0
 80049a0:	f7fb fe2c 	bl	80005fc <__aeabi_fadd>
            str++;
 80049a4:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 80049a6:	7835      	ldrb	r5, [r6, #0]
 80049a8:	002b      	movs	r3, r5
 80049aa:	3b30      	subs	r3, #48	; 0x30
 80049ac:	2b09      	cmp	r3, #9
 80049ae:	d9ee      	bls.n	800498e <stor+0xda>
        result *= pow(powerer, power);
 80049b0:	f7fe fb7e 	bl	80030b0 <__aeabi_f2d>
 80049b4:	0006      	movs	r6, r0
 80049b6:	000f      	movs	r7, r1
 80049b8:	4640      	mov	r0, r8
 80049ba:	f7fe fb79 	bl	80030b0 <__aeabi_f2d>
 80049be:	0032      	movs	r2, r6
 80049c0:	003b      	movs	r3, r7
 80049c2:	f00b fb91 	bl	80100e8 <pow>
 80049c6:	0006      	movs	r6, r0
 80049c8:	000f      	movs	r7, r1
 80049ca:	4648      	mov	r0, r9
 80049cc:	f7fe fb70 	bl	80030b0 <__aeabi_f2d>
 80049d0:	0032      	movs	r2, r6
 80049d2:	003b      	movs	r3, r7
 80049d4:	f7fd fc7e 	bl	80022d4 <__aeabi_dmul>
 80049d8:	f7fe fbb2 	bl	8003140 <__aeabi_d2f>
 80049dc:	4681      	mov	r9, r0
    return result;
 80049de:	e79c      	b.n	800491a <stor+0x66>
        float powerer = *str == '-'? str++, 0.1 : 10;
 80049e0:	1cae      	adds	r6, r5, #2
 80049e2:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <stor+0x140>)
 80049e4:	4698      	mov	r8, r3
 80049e6:	e7cb      	b.n	8004980 <stor+0xcc>
        float power = 0;
 80049e8:	2000      	movs	r0, #0
 80049ea:	e7e1      	b.n	80049b0 <stor+0xfc>
 80049ec:	41200000 	.word	0x41200000
 80049f0:	bf800000 	.word	0xbf800000
 80049f4:	3dcccccd 	.word	0x3dcccccd

080049f8 <getGNRMC>:
void getGNRMC(const char * ptra){
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	46ce      	mov	lr, r9
 80049fc:	4647      	mov	r7, r8
 80049fe:	b580      	push	{r7, lr}
    char *token = strtok((char *)ptra, ",");
 8004a00:	493e      	ldr	r1, [pc, #248]	; (8004afc <getGNRMC+0x104>)
 8004a02:	f008 fd3d 	bl	800d480 <strtok>
 8004a06:	1e05      	subs	r5, r0, #0
    while( token != NULL ) {
 8004a08:	d073      	beq.n	8004af2 <getGNRMC+0xfa>
	int i=0;
 8004a0a:	2400      	movs	r4, #0
  	        GPSInfo.head=stor(token);
 8004a0c:	4b3c      	ldr	r3, [pc, #240]	; (8004b00 <getGNRMC+0x108>)
 8004a0e:	4699      	mov	r9, r3
  	        GPSInfo.speed=stor(token);
 8004a10:	4698      	mov	r8, r3
  	        strcpy(GPSInfo.date,dd);
 8004a12:	001f      	movs	r7, r3
 8004a14:	373d      	adds	r7, #61	; 0x3d
  	    	strcpy(GPSInfo.lonD,token);
 8004a16:	001e      	movs	r6, r3
 8004a18:	362b      	adds	r6, #43	; 0x2b
 8004a1a:	e020      	b.n	8004a5e <getGNRMC+0x66>
  	    	strncpy(GPSInfo.time,token,6);
 8004a1c:	4838      	ldr	r0, [pc, #224]	; (8004b00 <getGNRMC+0x108>)
 8004a1e:	302e      	adds	r0, #46	; 0x2e
 8004a20:	2206      	movs	r2, #6
 8004a22:	0029      	movs	r1, r5
 8004a24:	f008 fd18 	bl	800d458 <strncpy>
  	    if(i==3){ //Getting Latitude
 8004a28:	e01f      	b.n	8004a6a <getGNRMC+0x72>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8004a2a:	214e      	movs	r1, #78	; 0x4e
 8004a2c:	0028      	movs	r0, r5
 8004a2e:	f008 fcf4 	bl	800d41a <strchr>
  	        else{GPSInfo.fix=1;}
 8004a32:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <getGNRMC+0x108>)
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8004a34:	4242      	negs	r2, r0
 8004a36:	4150      	adcs	r0, r2
  	        else{GPSInfo.fix=1;}
 8004a38:	61d8      	str	r0, [r3, #28]
  	    if(i==5){ //Getting Longitude
 8004a3a:	2c05      	cmp	r4, #5
 8004a3c:	d025      	beq.n	8004a8a <getGNRMC+0x92>
  	    if(i==6){ //Getting Longitude ind
 8004a3e:	2c06      	cmp	r4, #6
 8004a40:	d02b      	beq.n	8004a9a <getGNRMC+0xa2>
  	    if(i==9){ //Getting Date
 8004a42:	2c09      	cmp	r4, #9
 8004a44:	d02e      	beq.n	8004aa4 <getGNRMC+0xac>
  	    if(i==7){ //Getting Speed
 8004a46:	2c07      	cmp	r4, #7
 8004a48:	d047      	beq.n	8004ada <getGNRMC+0xe2>
  	    if(i==8){ //Getting Course
 8004a4a:	2c08      	cmp	r4, #8
 8004a4c:	d04b      	beq.n	8004ae6 <getGNRMC+0xee>
  	    token = strtok(NULL,",");
 8004a4e:	492b      	ldr	r1, [pc, #172]	; (8004afc <getGNRMC+0x104>)
 8004a50:	2000      	movs	r0, #0
 8004a52:	f008 fd15 	bl	800d480 <strtok>
 8004a56:	0005      	movs	r5, r0
        i++;
 8004a58:	3401      	adds	r4, #1
    while( token != NULL ) {
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d049      	beq.n	8004af2 <getGNRMC+0xfa>
  	    if(i==1){ //Getting time
 8004a5e:	2c01      	cmp	r4, #1
 8004a60:	d0dc      	beq.n	8004a1c <getGNRMC+0x24>
  	    if(i==10){ //Getting GPS status
 8004a62:	2c0a      	cmp	r4, #10
 8004a64:	d0e1      	beq.n	8004a2a <getGNRMC+0x32>
  	    if(i==3){ //Getting Latitude
 8004a66:	2c03      	cmp	r4, #3
 8004a68:	d007      	beq.n	8004a7a <getGNRMC+0x82>
  	    if(i==4){ //Getting Latitude ind
 8004a6a:	2c04      	cmp	r4, #4
 8004a6c:	d1e5      	bne.n	8004a3a <getGNRMC+0x42>
  	        strcpy(GPSInfo.latD,token);
 8004a6e:	4824      	ldr	r0, [pc, #144]	; (8004b00 <getGNRMC+0x108>)
 8004a70:	3028      	adds	r0, #40	; 0x28
 8004a72:	0029      	movs	r1, r5
 8004a74:	f008 fe71 	bl	800d75a <strcpy>
  	    if(i==6){ //Getting Longitude ind
 8004a78:	e7e3      	b.n	8004a42 <getGNRMC+0x4a>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8004a7a:	0028      	movs	r0, r5
 8004a7c:	f7ff ff1a 	bl	80048b4 <stor>
 8004a80:	f7ff fc04 	bl	800428c <DegreeDecimalConvert>
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <getGNRMC+0x108>)
 8004a86:	6018      	str	r0, [r3, #0]
  	    if(i==5){ //Getting Longitude
 8004a88:	e7d9      	b.n	8004a3e <getGNRMC+0x46>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8004a8a:	0028      	movs	r0, r5
 8004a8c:	f7ff ff12 	bl	80048b4 <stor>
 8004a90:	f7ff fbfc 	bl	800428c <DegreeDecimalConvert>
 8004a94:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <getGNRMC+0x108>)
 8004a96:	6058      	str	r0, [r3, #4]
  	    if(i==9){ //Getting Date
 8004a98:	e7d5      	b.n	8004a46 <getGNRMC+0x4e>
  	    	strcpy(GPSInfo.lonD,token);
 8004a9a:	0029      	movs	r1, r5
 8004a9c:	0030      	movs	r0, r6
 8004a9e:	f008 fe5c 	bl	800d75a <strcpy>
  	    if(i==7){ //Getting Speed
 8004aa2:	e7d2      	b.n	8004a4a <getGNRMC+0x52>
  			memset(dd,0,10);
 8004aa4:	4817      	ldr	r0, [pc, #92]	; (8004b04 <getGNRMC+0x10c>)
 8004aa6:	220a      	movs	r2, #10
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	f008 fca1 	bl	800d3f0 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4914      	ldr	r1, [pc, #80]	; (8004b04 <getGNRMC+0x10c>)
 8004ab2:	5cea      	ldrb	r2, [r5, r3]
 8004ab4:	545a      	strb	r2, [r3, r1]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d1fa      	bne.n	8004ab2 <getGNRMC+0xba>
  	        dd[4]='2';
 8004abc:	4911      	ldr	r1, [pc, #68]	; (8004b04 <getGNRMC+0x10c>)
 8004abe:	332e      	adds	r3, #46	; 0x2e
 8004ac0:	710b      	strb	r3, [r1, #4]
  	        dd[5]='0';
 8004ac2:	3b02      	subs	r3, #2
 8004ac4:	714b      	strb	r3, [r1, #5]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8004ac6:	792b      	ldrb	r3, [r5, #4]
 8004ac8:	718b      	strb	r3, [r1, #6]
 8004aca:	796b      	ldrb	r3, [r5, #5]
 8004acc:	71cb      	strb	r3, [r1, #7]
  	        dd[8]='\0';
 8004ace:	2300      	movs	r3, #0
 8004ad0:	720b      	strb	r3, [r1, #8]
  	        strcpy(GPSInfo.date,dd);
 8004ad2:	0038      	movs	r0, r7
 8004ad4:	f008 fe41 	bl	800d75a <strcpy>
  	    if(i==8){ //Getting Course
 8004ad8:	e7b9      	b.n	8004a4e <getGNRMC+0x56>
  	        GPSInfo.speed=stor(token);
 8004ada:	0028      	movs	r0, r5
 8004adc:	f7ff feea 	bl	80048b4 <stor>
 8004ae0:	4643      	mov	r3, r8
 8004ae2:	6198      	str	r0, [r3, #24]
  	    if(i==8){ //Getting Course
 8004ae4:	e7b3      	b.n	8004a4e <getGNRMC+0x56>
  	        GPSInfo.head=stor(token);
 8004ae6:	0028      	movs	r0, r5
 8004ae8:	f7ff fee4 	bl	80048b4 <stor>
 8004aec:	464b      	mov	r3, r9
 8004aee:	6158      	str	r0, [r3, #20]
 8004af0:	e7ad      	b.n	8004a4e <getGNRMC+0x56>
}
 8004af2:	bcc0      	pop	{r6, r7}
 8004af4:	46b9      	mov	r9, r7
 8004af6:	46b0      	mov	r8, r6
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	08011204 	.word	0x08011204
 8004b00:	200002a8 	.word	0x200002a8
 8004b04:	20003d04 	.word	0x20003d04

08004b08 <getGNGSA>:
void getGNGSA(const  char * ptra){
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8004b0a:	490e      	ldr	r1, [pc, #56]	; (8004b44 <getGNGSA+0x3c>)
 8004b0c:	f008 fcb8 	bl	800d480 <strtok>
    while( token != NULL ) {
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d016      	beq.n	8004b42 <getGNGSA+0x3a>
	int i=0;
 8004b14:	2400      	movs	r4, #0
    	    GPSInfo.hdop=stor(token);
 8004b16:	4f0c      	ldr	r7, [pc, #48]	; (8004b48 <getGNGSA+0x40>)
    	    GPSInfo.pdop=stor(token);
 8004b18:	003e      	movs	r6, r7
  	    token = strtok(NULL,",");
 8004b1a:	4d0a      	ldr	r5, [pc, #40]	; (8004b44 <getGNGSA+0x3c>)
 8004b1c:	e009      	b.n	8004b32 <getGNGSA+0x2a>
    	    GPSInfo.pdop=stor(token);
 8004b1e:	f7ff fec9 	bl	80048b4 <stor>
 8004b22:	6130      	str	r0, [r6, #16]
  	    token = strtok(NULL,",");
 8004b24:	0029      	movs	r1, r5
 8004b26:	2000      	movs	r0, #0
 8004b28:	f008 fcaa 	bl	800d480 <strtok>
        i++;
 8004b2c:	3401      	adds	r4, #1
    while( token != NULL ) {
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d007      	beq.n	8004b42 <getGNGSA+0x3a>
        if(i==15){ //Getting PDOP
 8004b32:	2c0f      	cmp	r4, #15
 8004b34:	d0f3      	beq.n	8004b1e <getGNGSA+0x16>
    	if(i==16){ //Getting HDOP
 8004b36:	2c10      	cmp	r4, #16
 8004b38:	d1f4      	bne.n	8004b24 <getGNGSA+0x1c>
    	    GPSInfo.hdop=stor(token);
 8004b3a:	f7ff febb 	bl	80048b4 <stor>
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	e7f0      	b.n	8004b24 <getGNGSA+0x1c>
}
 8004b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b44:	08011204 	.word	0x08011204
 8004b48:	200002a8 	.word	0x200002a8

08004b4c <getGNGGA>:
void getGNGGA(const  char * ptra){
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8004b4e:	490e      	ldr	r1, [pc, #56]	; (8004b88 <getGNGGA+0x3c>)
 8004b50:	f008 fc96 	bl	800d480 <strtok>
    while( token != NULL ) {
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d016      	beq.n	8004b86 <getGNGGA+0x3a>
	int i=0;
 8004b58:	2400      	movs	r4, #0
            GPSInfo.alt = stor(token);
 8004b5a:	4f0c      	ldr	r7, [pc, #48]	; (8004b8c <getGNGGA+0x40>)
            GPSInfo.sat = atoi(token);
 8004b5c:	003e      	movs	r6, r7
  	    token = strtok(NULL,",");
 8004b5e:	4d0a      	ldr	r5, [pc, #40]	; (8004b88 <getGNGGA+0x3c>)
 8004b60:	e009      	b.n	8004b76 <getGNGGA+0x2a>
            GPSInfo.sat = atoi(token);
 8004b62:	f006 fd0b 	bl	800b57c <atoi>
 8004b66:	6230      	str	r0, [r6, #32]
  	    token = strtok(NULL,",");
 8004b68:	0029      	movs	r1, r5
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f008 fc88 	bl	800d480 <strtok>
        i++;
 8004b70:	3401      	adds	r4, #1
    while( token != NULL ) {
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d007      	beq.n	8004b86 <getGNGGA+0x3a>
    	if(i==7){ //Getting Satellites no
 8004b76:	2c07      	cmp	r4, #7
 8004b78:	d0f3      	beq.n	8004b62 <getGNGGA+0x16>
    	if(i==9){ //Getting Saltitute
 8004b7a:	2c09      	cmp	r4, #9
 8004b7c:	d1f4      	bne.n	8004b68 <getGNGGA+0x1c>
            GPSInfo.alt = stor(token);
 8004b7e:	f7ff fe99 	bl	80048b4 <stor>
 8004b82:	60b8      	str	r0, [r7, #8]
 8004b84:	e7f0      	b.n	8004b68 <getGNGGA+0x1c>
}
 8004b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b88:	08011204 	.word	0x08011204
 8004b8c:	200002a8 	.word	0x200002a8

08004b90 <validateGPS>:
int validateGPS(const char * str){
 8004b90:	b510      	push	{r4, lr}
 8004b92:	0004      	movs	r4, r0
	int GPStyp=0;

	uint8_t checksum = 0;
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8004b94:	f7ff fb9a 	bl	80042cc <nmea_valid_checksum>
	        return 0;
 8004b98:	2300      	movs	r3, #0
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8004b9a:	2801      	cmp	r0, #1
 8004b9c:	d10e      	bne.n	8004bbc <validateGPS+0x2c>
	    }
	    if(strlen(str)<4){return 0;}
 8004b9e:	0020      	movs	r0, r4
 8004ba0:	f7fb fab2 	bl	8000108 <strlen>
 8004ba4:	2803      	cmp	r0, #3
 8004ba6:	d93a      	bls.n	8004c1e <validateGPS+0x8e>

	    if (strstr(str, "GNRMC") != NULL) {
 8004ba8:	491e      	ldr	r1, [pc, #120]	; (8004c24 <validateGPS+0x94>)
 8004baa:	0020      	movs	r0, r4
 8004bac:	f008 fcd0 	bl	800d550 <strstr>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d005      	beq.n	8004bc0 <validateGPS+0x30>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8004bb4:	0020      	movs	r0, r4
 8004bb6:	f7ff ff1f 	bl	80049f8 <getGNRMC>
 8004bba:	2301      	movs	r3, #1
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
	    	GPStyp=6;
	    }
    return(GPStyp);
}
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	bd10      	pop	{r4, pc}
	    else if (strstr(str, "GNGGA") != NULL) {
 8004bc0:	4919      	ldr	r1, [pc, #100]	; (8004c28 <validateGPS+0x98>)
 8004bc2:	0020      	movs	r0, r4
 8004bc4:	f008 fcc4 	bl	800d550 <strstr>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d11e      	bne.n	8004c0a <validateGPS+0x7a>
	    else if (strstr(str, "GNGSA") != NULL) {
 8004bcc:	4917      	ldr	r1, [pc, #92]	; (8004c2c <validateGPS+0x9c>)
 8004bce:	0020      	movs	r0, r4
 8004bd0:	f008 fcbe 	bl	800d550 <strstr>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d11d      	bne.n	8004c14 <validateGPS+0x84>
	    else if (strstr(str, "GNGSV") != NULL) {
 8004bd8:	4915      	ldr	r1, [pc, #84]	; (8004c30 <validateGPS+0xa0>)
 8004bda:	0020      	movs	r0, r4
 8004bdc:	f008 fcb8 	bl	800d550 <strstr>
	    	GPStyp=4;
 8004be0:	2304      	movs	r3, #4
	    else if (strstr(str, "GNGSV") != NULL) {
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d1ea      	bne.n	8004bbc <validateGPS+0x2c>
	    else if (strstr(str, "GNGLL") != NULL) {
 8004be6:	4913      	ldr	r1, [pc, #76]	; (8004c34 <validateGPS+0xa4>)
 8004be8:	0020      	movs	r0, r4
 8004bea:	f008 fcb1 	bl	800d550 <strstr>
	    	GPStyp=5;
 8004bee:	2305      	movs	r3, #5
	    else if (strstr(str, "GNGLL") != NULL) {
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d1e3      	bne.n	8004bbc <validateGPS+0x2c>
	    else if (strstr(str, "GNVTG") != NULL) {
 8004bf4:	4910      	ldr	r1, [pc, #64]	; (8004c38 <validateGPS+0xa8>)
 8004bf6:	0020      	movs	r0, r4
 8004bf8:	f008 fcaa 	bl	800d550 <strstr>
	    	GPStyp=6;
 8004bfc:	4243      	negs	r3, r0
 8004bfe:	4158      	adcs	r0, r3
 8004c00:	4243      	negs	r3, r0
 8004c02:	2205      	movs	r2, #5
 8004c04:	4393      	bics	r3, r2
 8004c06:	3306      	adds	r3, #6
 8004c08:	e7d8      	b.n	8004bbc <validateGPS+0x2c>
	    	GPStyp=2; getGNGGA(str);
 8004c0a:	0020      	movs	r0, r4
 8004c0c:	f7ff ff9e 	bl	8004b4c <getGNGGA>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e7d3      	b.n	8004bbc <validateGPS+0x2c>
	    	GPStyp=3;getGNGSA(str);
 8004c14:	0020      	movs	r0, r4
 8004c16:	f7ff ff77 	bl	8004b08 <getGNGSA>
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e7ce      	b.n	8004bbc <validateGPS+0x2c>
	    if(strlen(str)<4){return 0;}
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e7cc      	b.n	8004bbc <validateGPS+0x2c>
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	0801145c 	.word	0x0801145c
 8004c28:	08011464 	.word	0x08011464
 8004c2c:	0801146c 	.word	0x0801146c
 8004c30:	08011474 	.word	0x08011474
 8004c34:	0801147c 	.word	0x0801147c
 8004c38:	08011484 	.word	0x08011484

08004c3c <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	b082      	sub	sp, #8
	    //Debug_Tx(gpsData);
		int valid=0 ;
		if(strlen((char*)gpsData)>5){
 8004c40:	480d      	ldr	r0, [pc, #52]	; (8004c78 <ProcessGPS+0x3c>)
 8004c42:	f7fb fa61 	bl	8000108 <strlen>
 8004c46:	2805      	cmp	r0, #5
 8004c48:	d801      	bhi.n	8004c4e <ProcessGPS+0x12>
				valid=valid+validateGPS(token);
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
			}
			//free(token);
		}
}
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd10      	pop	{r4, pc}
			char *tk= NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9301      	str	r3, [sp, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8004c52:	490a      	ldr	r1, [pc, #40]	; (8004c7c <ProcessGPS+0x40>)
 8004c54:	4808      	ldr	r0, [pc, #32]	; (8004c78 <ProcessGPS+0x3c>)
 8004c56:	aa01      	add	r2, sp, #4
 8004c58:	f008 fc75 	bl	800d546 <strtok_r>
			while( token != NULL ) {
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d0f4      	beq.n	8004c4a <ProcessGPS+0xe>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8004c60:	4c06      	ldr	r4, [pc, #24]	; (8004c7c <ProcessGPS+0x40>)
				valid=valid+validateGPS(token);
 8004c62:	f7ff ff95 	bl	8004b90 <validateGPS>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8004c66:	aa01      	add	r2, sp, #4
 8004c68:	0021      	movs	r1, r4
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f008 fc6b 	bl	800d546 <strtok_r>
			while( token != NULL ) {
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d1f6      	bne.n	8004c62 <ProcessGPS+0x26>
 8004c74:	e7e9      	b.n	8004c4a <ProcessGPS+0xe>
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	20003d20 	.word	0x20003d20
 8004c7c:	080110c8 	.word	0x080110c8

08004c80 <HAL_UART_TxCpltCallback>:
}
 8004c80:	4770      	bx	lr
	...

08004c84 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8004c84:	b510      	push	{r4, lr}
	if(huart==&huart2){
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <HAL_UART_ErrorCallback+0x6c>)
 8004c88:	4298      	cmp	r0, r3
 8004c8a:	d003      	beq.n	8004c94 <HAL_UART_ErrorCallback+0x10>
	if(huart==&huart1){
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_UART_ErrorCallback+0x70>)
 8004c8e:	4298      	cmp	r0, r3
 8004c90:	d01c      	beq.n	8004ccc <HAL_UART_ErrorCallback+0x48>
}
 8004c92:	bd10      	pop	{r4, pc}
		if(dnlfile==0){
 8004c94:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <HAL_UART_ErrorCallback+0x74>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1fa      	bne.n	8004c92 <HAL_UART_ErrorCallback+0xe>
		if(DMAon==1){
 8004c9c:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <HAL_UART_ErrorCallback+0x78>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d1f6      	bne.n	8004c92 <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8004ca4:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <HAL_UART_ErrorCallback+0x7c>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <HAL_UART_ErrorCallback+0x3c>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004cac:	4810      	ldr	r0, [pc, #64]	; (8004cf0 <HAL_UART_ErrorCallback+0x6c>)
 8004cae:	6803      	ldr	r3, [r0, #0]
 8004cb0:	220c      	movs	r2, #12
 8004cb2:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8004cb4:	32d5      	adds	r2, #213	; 0xd5
 8004cb6:	4912      	ldr	r1, [pc, #72]	; (8004d00 <HAL_UART_ErrorCallback+0x7c>)
 8004cb8:	0092      	lsls	r2, r2, #2
 8004cba:	f004 ff23 	bl	8009b04 <HAL_UART_Receive_DMA>
 8004cbe:	e7e8      	b.n	8004c92 <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8004cc0:	480f      	ldr	r0, [pc, #60]	; (8004d00 <HAL_UART_ErrorCallback+0x7c>)
 8004cc2:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <HAL_UART_ErrorCallback+0x80>)
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	f008 fb93 	bl	800d3f0 <memset>
 8004cca:	e7ef      	b.n	8004cac <HAL_UART_ErrorCallback+0x28>
		if(DMAon==1){
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_UART_ErrorCallback+0x78>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d1de      	bne.n	8004c92 <HAL_UART_ErrorCallback+0xe>
		GSMBuff[0]=0;
 8004cd4:	490c      	ldr	r1, [pc, #48]	; (8004d08 <HAL_UART_ErrorCallback+0x84>)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	700b      	strb	r3, [r1, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004cda:	4806      	ldr	r0, [pc, #24]	; (8004cf4 <HAL_UART_ErrorCallback+0x70>)
 8004cdc:	6802      	ldr	r2, [r0, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	6213      	str	r3, [r2, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ce2:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <HAL_UART_ErrorCallback+0x6c>)
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	6213      	str	r3, [r2, #32]
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f004 ff0b 	bl	8009b04 <HAL_UART_Receive_DMA>
}
 8004cee:	e7d0      	b.n	8004c92 <HAL_UART_ErrorCallback+0xe>
 8004cf0:	200044c0 	.word	0x200044c0
 8004cf4:	2000442c 	.word	0x2000442c
 8004cf8:	20003d18 	.word	0x20003d18
 8004cfc:	20000004 	.word	0x20000004
 8004d00:	20003d20 	.word	0x20003d20
 8004d04:	000003e7 	.word	0x000003e7
 8004d08:	200002f8 	.word	0x200002f8

08004d0c <HAL_TIM_PeriodElapsedCallback>:
{
 8004d0c:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004d10:	6802      	ldr	r2, [r0, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d000      	beq.n	8004d18 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8004d16:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8004d18:	f001 fb02 	bl	8006320 <HAL_IncTick>
}
 8004d1c:	e7fb      	b.n	8004d16 <HAL_TIM_PeriodElapsedCallback+0xa>
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	40012c00 	.word	0x40012c00

08004d24 <restartGSMuart>:
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d24:	b510      	push	{r4, lr}
 8004d26:	4907      	ldr	r1, [pc, #28]	; (8004d44 <restartGSMuart+0x20>)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	700b      	strb	r3, [r1, #0]
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <restartGSMuart+0x24>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	230c      	movs	r3, #12
 8004d32:	6213      	str	r3, [r2, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d34:	4805      	ldr	r0, [pc, #20]	; (8004d4c <restartGSMuart+0x28>)
 8004d36:	6802      	ldr	r2, [r0, #0]
 8004d38:	6213      	str	r3, [r2, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f004 fee2 	bl	8009b04 <HAL_UART_Receive_DMA>
}
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	200002f8 	.word	0x200002f8
 8004d48:	200044c0 	.word	0x200044c0
 8004d4c:	2000442c 	.word	0x2000442c

08004d50 <GetGSMReply>:

char *GetGSMReply(int extra, const char *find, int gap, const char *LineEnd, const char *ErrorMsg, int timeout, const char *finChar)
{
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	46de      	mov	lr, fp
 8004d54:	4657      	mov	r7, sl
 8004d56:	464e      	mov	r6, r9
 8004d58:	4645      	mov	r5, r8
 8004d5a:	b5e0      	push	{r5, r6, r7, lr}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	468a      	mov	sl, r1
 8004d60:	9201      	str	r2, [sp, #4]
 8004d62:	4698      	mov	r8, r3
 8004d64:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	memset(GSMReply, 0, 100);
 8004d66:	484e      	ldr	r0, [pc, #312]	; (8004ea0 <GetGSMReply+0x150>)
 8004d68:	2264      	movs	r2, #100	; 0x64
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	f008 fb40 	bl	800d3f0 <memset>
	memset(GSMInData, 0, 1000);
 8004d70:	484c      	ldr	r0, [pc, #304]	; (8004ea4 <GetGSMReply+0x154>)
 8004d72:	22fa      	movs	r2, #250	; 0xfa
 8004d74:	0092      	lsls	r2, r2, #2
 8004d76:	2100      	movs	r1, #0
 8004d78:	f008 fb3a 	bl	800d3f0 <memset>
	int stT = HAL_GetTick();
 8004d7c:	f001 fadc 	bl	8006338 <HAL_GetTick>
 8004d80:	0005      	movs	r5, r0
	while (((HAL_GetTick() - stT) <= timeout))
	{
		HAL_Delay(70);
		if (strlen(GSMData) > 0)
 8004d82:	4f49      	ldr	r7, [pc, #292]	; (8004ea8 <GetGSMReply+0x158>)
			}
			gsmER = 0;
		}
		else
		{
			gsmER++;
 8004d84:	4c49      	ldr	r4, [pc, #292]	; (8004eac <GetGSMReply+0x15c>)
			if (gsmER > 9)
			{
				RestartGSM();
				restartGSMuart();
				gsmER = 0;
 8004d86:	46a3      	mov	fp, r4
	while (((HAL_GetTick() - stT) <= timeout))
 8004d88:	e030      	b.n	8004dec <GetGSMReply+0x9c>
			strcpy(GSMInData, GSMData);
 8004d8a:	4947      	ldr	r1, [pc, #284]	; (8004ea8 <GetGSMReply+0x158>)
 8004d8c:	4b45      	ldr	r3, [pc, #276]	; (8004ea4 <GetGSMReply+0x154>)
 8004d8e:	4699      	mov	r9, r3
 8004d90:	0018      	movs	r0, r3
 8004d92:	f008 fce2 	bl	800d75a <strcpy>
			char *pq = strstr(GSMInData, finChar);
 8004d96:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004d98:	4648      	mov	r0, r9
 8004d9a:	f008 fbd9 	bl	800d550 <strstr>
			if ((pq != NULL))
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d064      	beq.n	8004e6c <GetGSMReply+0x11c>
				if ((strlen(find) < 1))
 8004da2:	4653      	mov	r3, sl
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d038      	beq.n	8004e1c <GetGSMReply+0xcc>
				char *p = strstr(GSMInData, find);
 8004daa:	483e      	ldr	r0, [pc, #248]	; (8004ea4 <GetGSMReply+0x154>)
 8004dac:	4651      	mov	r1, sl
 8004dae:	f008 fbcf 	bl	800d550 <strstr>
 8004db2:	9000      	str	r0, [sp, #0]
				if ((strlen(LineEnd) < 1))
 8004db4:	4643      	mov	r3, r8
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d043      	beq.n	8004e44 <GetGSMReply+0xf4>
					if ((strstr(GSMInData, LineEnd) != NULL))
 8004dbc:	4839      	ldr	r0, [pc, #228]	; (8004ea4 <GetGSMReply+0x154>)
 8004dbe:	4641      	mov	r1, r8
 8004dc0:	f008 fbc6 	bl	800d550 <strstr>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d00e      	beq.n	8004de6 <GetGSMReply+0x96>
						if ((strlen(p + gap) > strlen(LineEnd)))
 8004dc8:	9b00      	ldr	r3, [sp, #0]
 8004dca:	9a01      	ldr	r2, [sp, #4]
 8004dcc:	4694      	mov	ip, r2
 8004dce:	4463      	add	r3, ip
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7fb f998 	bl	8000108 <strlen>
 8004dd8:	9000      	str	r0, [sp, #0]
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f7fb f994 	bl	8000108 <strlen>
 8004de0:	9b00      	ldr	r3, [sp, #0]
 8004de2:	4283      	cmp	r3, r0
 8004de4:	d833      	bhi.n	8004e4e <GetGSMReply+0xfe>
			gsmER = 0;
 8004de6:	4b31      	ldr	r3, [pc, #196]	; (8004eac <GetGSMReply+0x15c>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
	while (((HAL_GetTick() - stT) <= timeout))
 8004dec:	f001 faa4 	bl	8006338 <HAL_GetTick>
 8004df0:	1b40      	subs	r0, r0, r5
 8004df2:	42b0      	cmp	r0, r6
 8004df4:	d817      	bhi.n	8004e26 <GetGSMReply+0xd6>
		HAL_Delay(70);
 8004df6:	2046      	movs	r0, #70	; 0x46
 8004df8:	f001 faa4 	bl	8006344 <HAL_Delay>
		if (strlen(GSMData) > 0)
 8004dfc:	783b      	ldrb	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1c3      	bne.n	8004d8a <GetGSMReply+0x3a>
			gsmER++;
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	3301      	adds	r3, #1
 8004e06:	6023      	str	r3, [r4, #0]
			if (gsmER > 9)
 8004e08:	2b09      	cmp	r3, #9
 8004e0a:	ddef      	ble.n	8004dec <GetGSMReply+0x9c>
				RestartGSM();
 8004e0c:	f7fe fc8c 	bl	8003728 <RestartGSM>
				restartGSMuart();
 8004e10:	f7ff ff88 	bl	8004d24 <restartGSMuart>
				gsmER = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	465a      	mov	r2, fp
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e7e7      	b.n	8004dec <GetGSMReply+0x9c>
					strcpy(GSMReply, pq);
 8004e1c:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <GetGSMReply+0x150>)
 8004e1e:	0001      	movs	r1, r0
 8004e20:	0018      	movs	r0, r3
 8004e22:	f008 fc9a 	bl	800d75a <strcpy>
			}
		}
	}

	// Debug_Tx(GSMInData);
	if (strlen(GSMReply) < 1)
 8004e26:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <GetGSMReply+0x150>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d02e      	beq.n	8004e8c <GetGSMReply+0x13c>
		// Debug_Tx(GSMData);
		// Debug_Tx("****");
		// Debug_Tx(GSMReply);
		// Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 8004e2e:	2064      	movs	r0, #100	; 0x64
 8004e30:	f001 fa88 	bl	8006344 <HAL_Delay>
	// if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
 8004e34:	481a      	ldr	r0, [pc, #104]	; (8004ea0 <GetGSMReply+0x150>)
}
 8004e36:	b003      	add	sp, #12
 8004e38:	bcf0      	pop	{r4, r5, r6, r7}
 8004e3a:	46bb      	mov	fp, r7
 8004e3c:	46b2      	mov	sl, r6
 8004e3e:	46a9      	mov	r9, r5
 8004e40:	46a0      	mov	r8, r4
 8004e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
					strcpy(GSMReply, p);
 8004e44:	4816      	ldr	r0, [pc, #88]	; (8004ea0 <GetGSMReply+0x150>)
 8004e46:	9900      	ldr	r1, [sp, #0]
 8004e48:	f008 fc87 	bl	800d75a <strcpy>
					break;
 8004e4c:	e7eb      	b.n	8004e26 <GetGSMReply+0xd6>
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 8004e4e:	2200      	movs	r2, #0
 8004e50:	4641      	mov	r1, r8
 8004e52:	4648      	mov	r0, r9
 8004e54:	f008 fb77 	bl	800d546 <strtok_r>
 8004e58:	4681      	mov	r9, r0
							if (strlen(p1) < 88)
 8004e5a:	f7fb f955 	bl	8000108 <strlen>
 8004e5e:	2857      	cmp	r0, #87	; 0x57
 8004e60:	d8c1      	bhi.n	8004de6 <GetGSMReply+0x96>
								strcpy(GSMReply, p1);
 8004e62:	480f      	ldr	r0, [pc, #60]	; (8004ea0 <GetGSMReply+0x150>)
 8004e64:	4649      	mov	r1, r9
 8004e66:	f008 fc78 	bl	800d75a <strcpy>
								break;
 8004e6a:	e7dc      	b.n	8004e26 <GetGSMReply+0xd6>
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 8004e6c:	4910      	ldr	r1, [pc, #64]	; (8004eb0 <GetGSMReply+0x160>)
 8004e6e:	480d      	ldr	r0, [pc, #52]	; (8004ea4 <GetGSMReply+0x154>)
 8004e70:	f008 fb6e 	bl	800d550 <strstr>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d105      	bne.n	8004e84 <GetGSMReply+0x134>
 8004e78:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <GetGSMReply+0x164>)
 8004e7a:	480a      	ldr	r0, [pc, #40]	; (8004ea4 <GetGSMReply+0x154>)
 8004e7c:	f008 fb68 	bl	800d550 <strstr>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d0b0      	beq.n	8004de6 <GetGSMReply+0x96>
					Debug_Tx("Err Found");
 8004e84:	480c      	ldr	r0, [pc, #48]	; (8004eb8 <GetGSMReply+0x168>)
 8004e86:	f7fe fa4b 	bl	8003320 <Debug_Tx>
					break;
 8004e8a:	e7cc      	b.n	8004e26 <GetGSMReply+0xd6>
		Debug_Tx("****");
 8004e8c:	480b      	ldr	r0, [pc, #44]	; (8004ebc <GetGSMReply+0x16c>)
 8004e8e:	f7fe fa47 	bl	8003320 <Debug_Tx>
		Debug_Tx(GSMInData);
 8004e92:	4804      	ldr	r0, [pc, #16]	; (8004ea4 <GetGSMReply+0x154>)
 8004e94:	f7fe fa44 	bl	8003320 <Debug_Tx>
		Debug_Tx((char *)ErrorMsg);
 8004e98:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e9a:	f7fe fa41 	bl	8003320 <Debug_Tx>
 8004e9e:	e7c6      	b.n	8004e2e <GetGSMReply+0xde>
 8004ea0:	200018e0 	.word	0x200018e0
 8004ea4:	200014f8 	.word	0x200014f8
 8004ea8:	20000eb8 	.word	0x20000eb8
 8004eac:	20004150 	.word	0x20004150
 8004eb0:	0801148c 	.word	0x0801148c
 8004eb4:	08011494 	.word	0x08011494
 8004eb8:	0801149c 	.word	0x0801149c
 8004ebc:	080114a8 	.word	0x080114a8

08004ec0 <GSMIMEI>:

	return (0);
}

char *GSMIMEI()
{
 8004ec0:	b500      	push	{lr}
 8004ec2:	b085      	sub	sp, #20
	SendGSMCode(" AT+QGSN");
 8004ec4:	4808      	ldr	r0, [pc, #32]	; (8004ee8 <GSMIMEI+0x28>)
 8004ec6:	f7fe fc73 	bl	80037b0 <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 8004eca:	4b08      	ldr	r3, [pc, #32]	; (8004eec <GSMIMEI+0x2c>)
 8004ecc:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <GSMIMEI+0x30>)
 8004ece:	4a09      	ldr	r2, [pc, #36]	; (8004ef4 <GSMIMEI+0x34>)
 8004ed0:	9202      	str	r2, [sp, #8]
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <GSMIMEI+0x38>)
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	9201      	str	r2, [sp, #4]
 8004ed8:	4a08      	ldr	r2, [pc, #32]	; (8004efc <GSMIMEI+0x3c>)
 8004eda:	9200      	str	r2, [sp, #0]
 8004edc:	2208      	movs	r2, #8
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f7ff ff36 	bl	8004d50 <GetGSMReply>
}
 8004ee4:	b005      	add	sp, #20
 8004ee6:	bd00      	pop	{pc}
 8004ee8:	080114f0 	.word	0x080114f0
 8004eec:	080114bc 	.word	0x080114bc
 8004ef0:	080114fc 	.word	0x080114fc
 8004ef4:	080114c8 	.word	0x080114c8
 8004ef8:	20000018 	.word	0x20000018
 8004efc:	08011504 	.word	0x08011504

08004f00 <DownloadFile>:
	SendGSMCode(" AT+CCID");
	return (GetGSMReply(0, "+CCID:", 8, "\"", "Error: AT+CCID Sim NO Read error", gpsto_dev, "OK"));
}

int DownloadFile()
{
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	b08e      	sub	sp, #56	; 0x38
	int rr = 0;
	SendGSMCode(" AT+QIFGCNT=0");
 8004f04:	487a      	ldr	r0, [pc, #488]	; (80050f0 <DownloadFile+0x1f0>)
 8004f06:	f7fe fc53 	bl	80037b0 <SendGSMCode>
	if (strlen(GetGSMReply(0, "", 0, "", "Error:  AT+QIFGCNT=0 init ftp ", gpsto_net, "OK")) > 0)
 8004f0a:	497a      	ldr	r1, [pc, #488]	; (80050f4 <DownloadFile+0x1f4>)
 8004f0c:	4b7a      	ldr	r3, [pc, #488]	; (80050f8 <DownloadFile+0x1f8>)
 8004f0e:	9302      	str	r3, [sp, #8]
 8004f10:	4b7a      	ldr	r3, [pc, #488]	; (80050fc <DownloadFile+0x1fc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	4b7a      	ldr	r3, [pc, #488]	; (8005100 <DownloadFile+0x200>)
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	000b      	movs	r3, r1
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7ff ff16 	bl	8004d50 <GetGSMReply>
 8004f24:	7803      	ldrb	r3, [r0, #0]
	int rr = 0;
 8004f26:	2500      	movs	r5, #0
	if (strlen(GetGSMReply(0, "", 0, "", "Error:  AT+QIFGCNT=0 init ftp ", gpsto_net, "OK")) > 0)
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d129      	bne.n	8004f80 <DownloadFile+0x80>
				Debug_Tx(GSMReply);
			}Debug_Tx("debug");
			Debug_Tx(GSMReply);
		}
	}
	SendGSMCode(" AT+QFTPCLOSE");
 8004f2c:	4875      	ldr	r0, [pc, #468]	; (8005104 <DownloadFile+0x204>)
 8004f2e:	f7fe fc3f 	bl	80037b0 <SendGSMCode>
	GetGSMReply(0, "", 0, "", "Error:  AT+QFTPCLOSE ftp closeeror ", gpsto_net, "+QFTPCLOSE");
 8004f32:	4c70      	ldr	r4, [pc, #448]	; (80050f4 <DownloadFile+0x1f4>)
 8004f34:	4b74      	ldr	r3, [pc, #464]	; (8005108 <DownloadFile+0x208>)
 8004f36:	9302      	str	r3, [sp, #8]
 8004f38:	4b70      	ldr	r3, [pc, #448]	; (80050fc <DownloadFile+0x1fc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	4b73      	ldr	r3, [pc, #460]	; (800510c <DownloadFile+0x20c>)
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	0023      	movs	r3, r4
 8004f44:	2200      	movs	r2, #0
 8004f46:	0021      	movs	r1, r4
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f7ff ff01 	bl	8004d50 <GetGSMReply>
	SendGSMCode(" AT");
 8004f4e:	4870      	ldr	r0, [pc, #448]	; (8005110 <DownloadFile+0x210>)
 8004f50:	f7fe fc2e 	bl	80037b0 <SendGSMCode>
	GetGSMReply(0, "", 0, "", "Error:  AT eror ", gpsto_dev, "OK");
 8004f54:	4b68      	ldr	r3, [pc, #416]	; (80050f8 <DownloadFile+0x1f8>)
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	4b6e      	ldr	r3, [pc, #440]	; (8005114 <DownloadFile+0x214>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	4b6e      	ldr	r3, [pc, #440]	; (8005118 <DownloadFile+0x218>)
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	0023      	movs	r3, r4
 8004f64:	2200      	movs	r2, #0
 8004f66:	0021      	movs	r1, r4
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f7ff fef1 	bl	8004d50 <GetGSMReply>
	Debug_Tx("**done**");
 8004f6e:	486b      	ldr	r0, [pc, #428]	; (800511c <DownloadFile+0x21c>)
 8004f70:	f7fe f9d6 	bl	8003320 <Debug_Tx>
	dnlfile = 0;
 8004f74:	4b6a      	ldr	r3, [pc, #424]	; (8005120 <DownloadFile+0x220>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
	// SendGSMCode(" AT+QIFGCNT=0AT+QIOPEN=3,\"TCP\",\"34.74.249.18\",300");

	return rr;
}
 8004f7a:	0028      	movs	r0, r5
 8004f7c:	b00e      	add	sp, #56	; 0x38
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
		Debug_Tx("*ftp init");
 8004f80:	4868      	ldr	r0, [pc, #416]	; (8005124 <DownloadFile+0x224>)
 8004f82:	f7fe f9cd 	bl	8003320 <Debug_Tx>
		SendGSMCode(" AT+QFTPCFG=2,0");
 8004f86:	4868      	ldr	r0, [pc, #416]	; (8005128 <DownloadFile+0x228>)
 8004f88:	f7fe fc12 	bl	80037b0 <SendGSMCode>
		if (strlen(GetGSMReply(0, "", 0, "", "Error:  AT+QFTPCFG set binery mode ", gpsto_net, "+QFTPCFG:0")) > 0)
 8004f8c:	4959      	ldr	r1, [pc, #356]	; (80050f4 <DownloadFile+0x1f4>)
 8004f8e:	4b67      	ldr	r3, [pc, #412]	; (800512c <DownloadFile+0x22c>)
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	4b5a      	ldr	r3, [pc, #360]	; (80050fc <DownloadFile+0x1fc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	4b65      	ldr	r3, [pc, #404]	; (8005130 <DownloadFile+0x230>)
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	000b      	movs	r3, r1
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f7ff fed5 	bl	8004d50 <GetGSMReply>
 8004fa6:	7803      	ldrb	r3, [r0, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0bf      	beq.n	8004f2c <DownloadFile+0x2c>
			Debug_Tx("*set Bin mode");
 8004fac:	4861      	ldr	r0, [pc, #388]	; (8005134 <DownloadFile+0x234>)
 8004fae:	f7fe f9b7 	bl	8003320 <Debug_Tx>
			SendGSMCode(" AT+QFTPUSER=\"sammy\"");
 8004fb2:	4861      	ldr	r0, [pc, #388]	; (8005138 <DownloadFile+0x238>)
 8004fb4:	f7fe fbfc 	bl	80037b0 <SendGSMCode>
			if (waitForResponse("OK",4000)> 0)//if (strlen(GetGSMReply(0, "", 0, "", "Error:  AT+QFTPUSER set ftp user ", gpsto_net, "OK")) > 0)
 8004fb8:	21fa      	movs	r1, #250	; 0xfa
 8004fba:	484f      	ldr	r0, [pc, #316]	; (80050f8 <DownloadFile+0x1f8>)
 8004fbc:	0109      	lsls	r1, r1, #4
 8004fbe:	f7fe fd73 	bl	8003aa8 <waitForResponse>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	dc06      	bgt.n	8004fd4 <DownloadFile+0xd4>
			}Debug_Tx("debug");
 8004fc6:	485d      	ldr	r0, [pc, #372]	; (800513c <DownloadFile+0x23c>)
 8004fc8:	f7fe f9aa 	bl	8003320 <Debug_Tx>
			Debug_Tx(GSMReply);
 8004fcc:	485c      	ldr	r0, [pc, #368]	; (8005140 <DownloadFile+0x240>)
 8004fce:	f7fe f9a7 	bl	8003320 <Debug_Tx>
 8004fd2:	e7ab      	b.n	8004f2c <DownloadFile+0x2c>
			{HAL_Delay(2000);
 8004fd4:	24fa      	movs	r4, #250	; 0xfa
 8004fd6:	00e4      	lsls	r4, r4, #3
 8004fd8:	0020      	movs	r0, r4
 8004fda:	f001 f9b3 	bl	8006344 <HAL_Delay>
			Debug_Tx(GSMReply);
 8004fde:	4d58      	ldr	r5, [pc, #352]	; (8005140 <DownloadFile+0x240>)
 8004fe0:	0028      	movs	r0, r5
 8004fe2:	f7fe f99d 	bl	8003320 <Debug_Tx>
					Debug_Tx("*set ftp user");HAL_Delay(2000);HAL_Delay(2000);
 8004fe6:	4857      	ldr	r0, [pc, #348]	; (8005144 <DownloadFile+0x244>)
 8004fe8:	f7fe f99a 	bl	8003320 <Debug_Tx>
 8004fec:	0020      	movs	r0, r4
 8004fee:	f001 f9a9 	bl	8006344 <HAL_Delay>
 8004ff2:	0020      	movs	r0, r4
 8004ff4:	f001 f9a6 	bl	8006344 <HAL_Delay>
					Debug_Tx(GSMReply);
 8004ff8:	0028      	movs	r0, r5
 8004ffa:	f7fe f991 	bl	8003320 <Debug_Tx>
				SendGSMCode(" AT+QFTPPASS=\"12345678\"\n");
 8004ffe:	4852      	ldr	r0, [pc, #328]	; (8005148 <DownloadFile+0x248>)
 8005000:	f7fe fbd6 	bl	80037b0 <SendGSMCode>
				if (waitForResponse("OK",6000)> 0)//AT+QFTPCFG
 8005004:	483c      	ldr	r0, [pc, #240]	; (80050f8 <DownloadFile+0x1f8>)
 8005006:	4951      	ldr	r1, [pc, #324]	; (800514c <DownloadFile+0x24c>)
 8005008:	f7fe fd4e 	bl	8003aa8 <waitForResponse>
	int rr = 0;
 800500c:	2500      	movs	r5, #0
				if (waitForResponse("OK",6000)> 0)//AT+QFTPCFG
 800500e:	2800      	cmp	r0, #0
 8005010:	dc06      	bgt.n	8005020 <DownloadFile+0x120>
				Debug_Tx("debug");
 8005012:	484a      	ldr	r0, [pc, #296]	; (800513c <DownloadFile+0x23c>)
 8005014:	f7fe f984 	bl	8003320 <Debug_Tx>
				Debug_Tx(GSMReply);
 8005018:	4849      	ldr	r0, [pc, #292]	; (8005140 <DownloadFile+0x240>)
 800501a:	f7fe f981 	bl	8003320 <Debug_Tx>
 800501e:	e7d2      	b.n	8004fc6 <DownloadFile+0xc6>
				{ 	Debug_Tx(GSMReply);
 8005020:	4847      	ldr	r0, [pc, #284]	; (8005140 <DownloadFile+0x240>)
 8005022:	f7fe f97d 	bl	8003320 <Debug_Tx>
					Debug_Tx("*ftp pass");HAL_Delay(2000);
 8005026:	484a      	ldr	r0, [pc, #296]	; (8005150 <DownloadFile+0x250>)
 8005028:	f7fe f97a 	bl	8003320 <Debug_Tx>
 800502c:	20fa      	movs	r0, #250	; 0xfa
 800502e:	00c0      	lsls	r0, r0, #3
 8005030:	f001 f988 	bl	8006344 <HAL_Delay>
					SendGSMCode(" AT+QFTPPATH=\"/\"");
 8005034:	4847      	ldr	r0, [pc, #284]	; (8005154 <DownloadFile+0x254>)
 8005036:	f7fe fbbb 	bl	80037b0 <SendGSMCode>
					if (strlen(GetGSMReply(0, "", 0, "", "Error:  AT+QFTPPATH set savepath ", gpsto_net, "+QFTPPATH: 0")) > 0)
 800503a:	492e      	ldr	r1, [pc, #184]	; (80050f4 <DownloadFile+0x1f4>)
 800503c:	4b46      	ldr	r3, [pc, #280]	; (8005158 <DownloadFile+0x258>)
 800503e:	9302      	str	r3, [sp, #8]
 8005040:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <DownloadFile+0x1fc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	4b45      	ldr	r3, [pc, #276]	; (800515c <DownloadFile+0x25c>)
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	000b      	movs	r3, r1
 800504c:	2200      	movs	r2, #0
 800504e:	2000      	movs	r0, #0
 8005050:	f7ff fe7e 	bl	8004d50 <GetGSMReply>
 8005054:	7803      	ldrb	r3, [r0, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0db      	beq.n	8005012 <DownloadFile+0x112>
						Debug_Tx("*ftp path");
 800505a:	4841      	ldr	r0, [pc, #260]	; (8005160 <DownloadFile+0x260>)
 800505c:	f7fe f960 	bl	8003320 <Debug_Tx>
						SendGSMCode(" AT+QFTPOPEN=\"35.185.111.158\",21");
 8005060:	4840      	ldr	r0, [pc, #256]	; (8005164 <DownloadFile+0x264>)
 8005062:	f7fe fba5 	bl	80037b0 <SendGSMCode>
						if (strlen(GetGSMReply(0, "", 0, "", "Error:  AT+QFTPOPEN open ip port ", gpsto_net, "+QFTPOPEN:0")) > 0)
 8005066:	4923      	ldr	r1, [pc, #140]	; (80050f4 <DownloadFile+0x1f4>)
 8005068:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <DownloadFile+0x268>)
 800506a:	9302      	str	r3, [sp, #8]
 800506c:	4b23      	ldr	r3, [pc, #140]	; (80050fc <DownloadFile+0x1fc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	4b3e      	ldr	r3, [pc, #248]	; (800516c <DownloadFile+0x26c>)
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	000b      	movs	r3, r1
 8005078:	2200      	movs	r2, #0
 800507a:	2000      	movs	r0, #0
 800507c:	f7ff fe68 	bl	8004d50 <GetGSMReply>
 8005080:	7803      	ldrb	r3, [r0, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0c5      	beq.n	8005012 <DownloadFile+0x112>
							Debug_Tx("*ftp portopen");
 8005086:	483a      	ldr	r0, [pc, #232]	; (8005170 <DownloadFile+0x270>)
 8005088:	f7fe f94a 	bl	8003320 <Debug_Tx>
							Debug_Tx(GSMReply);
 800508c:	4c2c      	ldr	r4, [pc, #176]	; (8005140 <DownloadFile+0x240>)
 800508e:	0020      	movs	r0, r4
 8005090:	f7fe f946 	bl	8003320 <Debug_Tx>
							Debug_Tx("**ClearingFlash");
 8005094:	4837      	ldr	r0, [pc, #220]	; (8005174 <DownloadFile+0x274>)
 8005096:	f7fe f943 	bl	8003320 <Debug_Tx>
							Debug_Tx("**flash clear done");
 800509a:	4837      	ldr	r0, [pc, #220]	; (8005178 <DownloadFile+0x278>)
 800509c:	f7fe f940 	bl	8003320 <Debug_Tx>
							Debug_Tx("**get file");
 80050a0:	4836      	ldr	r0, [pc, #216]	; (800517c <DownloadFile+0x27c>)
 80050a2:	f7fe f93d 	bl	8003320 <Debug_Tx>
							SendGSMCode(" AT+QFTPLIST=\"/\"");
 80050a6:	4836      	ldr	r0, [pc, #216]	; (8005180 <DownloadFile+0x280>)
 80050a8:	f7fe fb82 	bl	80037b0 <SendGSMCode>
							HAL_Delay(2000);
 80050ac:	20fa      	movs	r0, #250	; 0xfa
 80050ae:	00c0      	lsls	r0, r0, #3
 80050b0:	f001 f948 	bl	8006344 <HAL_Delay>
							Debug_Tx("debug file list");
 80050b4:	4833      	ldr	r0, [pc, #204]	; (8005184 <DownloadFile+0x284>)
 80050b6:	f7fe f933 	bl	8003320 <Debug_Tx>
										Debug_Tx(GSMReply);
 80050ba:	0020      	movs	r0, r4
 80050bc:	f7fe f930 	bl	8003320 <Debug_Tx>
								sprintf(adrs, "  AT+QFTPGET=\"/test.txt\"");//
 80050c0:	ac04      	add	r4, sp, #16
 80050c2:	4e31      	ldr	r6, [pc, #196]	; (8005188 <DownloadFile+0x288>)
 80050c4:	0023      	movs	r3, r4
 80050c6:	0032      	movs	r2, r6
 80050c8:	ca23      	ldmia	r2!, {r0, r1, r5}
 80050ca:	c323      	stmia	r3!, {r0, r1, r5}
 80050cc:	ca23      	ldmia	r2!, {r0, r1, r5}
 80050ce:	c323      	stmia	r3!, {r0, r1, r5}
 80050d0:	7812      	ldrb	r2, [r2, #0]
 80050d2:	701a      	strb	r2, [r3, #0]
									g = SendGSMCodeFOTA(adrs);
 80050d4:	0020      	movs	r0, r4
 80050d6:	f7fe fbb1 	bl	800383c <SendGSMCodeFOTA>
 80050da:	1e05      	subs	r5, r0, #0
								while (g == 0 && try < 2)
 80050dc:	d103      	bne.n	80050e6 <DownloadFile+0x1e6>
									g = SendGSMCodeFOTA(adrs);
 80050de:	a804      	add	r0, sp, #16
 80050e0:	f7fe fbac 	bl	800383c <SendGSMCodeFOTA>
								while (g == 0 && try < 2)
 80050e4:	e795      	b.n	8005012 <DownloadFile+0x112>
							while (g != 2)
 80050e6:	2802      	cmp	r0, #2
 80050e8:	d1ec      	bne.n	80050c4 <DownloadFile+0x1c4>
							rr = 1;
 80050ea:	3d01      	subs	r5, #1
 80050ec:	e791      	b.n	8005012 <DownloadFile+0x112>
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	08011524 	.word	0x08011524
 80050f4:	080115f0 	.word	0x080115f0
 80050f8:	080114c8 	.word	0x080114c8
 80050fc:	2000001c 	.word	0x2000001c
 8005100:	08011534 	.word	0x08011534
 8005104:	08011730 	.word	0x08011730
 8005108:	08011740 	.word	0x08011740
 800510c:	0801174c 	.word	0x0801174c
 8005110:	080111d0 	.word	0x080111d0
 8005114:	20000018 	.word	0x20000018
 8005118:	08011770 	.word	0x08011770
 800511c:	08011784 	.word	0x08011784
 8005120:	20003d18 	.word	0x20003d18
 8005124:	08011554 	.word	0x08011554
 8005128:	08011560 	.word	0x08011560
 800512c:	08011570 	.word	0x08011570
 8005130:	0801157c 	.word	0x0801157c
 8005134:	080115a0 	.word	0x080115a0
 8005138:	080115b0 	.word	0x080115b0
 800513c:	08011728 	.word	0x08011728
 8005140:	200018e0 	.word	0x200018e0
 8005144:	080115c8 	.word	0x080115c8
 8005148:	080115d8 	.word	0x080115d8
 800514c:	00001770 	.word	0x00001770
 8005150:	080115f4 	.word	0x080115f4
 8005154:	08011600 	.word	0x08011600
 8005158:	08011614 	.word	0x08011614
 800515c:	08011624 	.word	0x08011624
 8005160:	08011648 	.word	0x08011648
 8005164:	08011654 	.word	0x08011654
 8005168:	08011678 	.word	0x08011678
 800516c:	08011684 	.word	0x08011684
 8005170:	080116a8 	.word	0x080116a8
 8005174:	080116b8 	.word	0x080116b8
 8005178:	080116c8 	.word	0x080116c8
 800517c:	080116dc 	.word	0x080116dc
 8005180:	080116e8 	.word	0x080116e8
 8005184:	080116fc 	.word	0x080116fc
 8005188:	0801170c 	.word	0x0801170c

0800518c <SetTCPMux>:
	return(GSMData);
}
*/

char *SetTCPMux()
{
 800518c:	b500      	push	{lr}
 800518e:	b085      	sub	sp, #20
	SendGSMCode(" AT+QIMUX=1");
 8005190:	4808      	ldr	r0, [pc, #32]	; (80051b4 <SetTCPMux+0x28>)
 8005192:	f7fe fb0d 	bl	80037b0 <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8005196:	4908      	ldr	r1, [pc, #32]	; (80051b8 <SetTCPMux+0x2c>)
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <SetTCPMux+0x30>)
 800519a:	9302      	str	r3, [sp, #8]
 800519c:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <SetTCPMux+0x34>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <SetTCPMux+0x38>)
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	000b      	movs	r3, r1
 80051a8:	2200      	movs	r2, #0
 80051aa:	2000      	movs	r0, #0
 80051ac:	f7ff fdd0 	bl	8004d50 <GetGSMReply>
}
 80051b0:	b005      	add	sp, #20
 80051b2:	bd00      	pop	{pc}
 80051b4:	08011790 	.word	0x08011790
 80051b8:	080115f0 	.word	0x080115f0
 80051bc:	080114c8 	.word	0x080114c8
 80051c0:	20000018 	.word	0x20000018
 80051c4:	0801179c 	.word	0x0801179c

080051c8 <SetupGPRS>:
	}
	return smsok;
}

void SetupGPRS(char *apn)
{
 80051c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ca:	46ce      	mov	lr, r9
 80051cc:	4647      	mov	r7, r8
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b085      	sub	sp, #20
 80051d2:	4680      	mov	r8, r0

	int ck = 5;

	gprsok = 0;
 80051d4:	4b2e      	ldr	r3, [pc, #184]	; (8005290 <SetupGPRS+0xc8>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	2705      	movs	r7, #5
	{
		HAL_Delay(2000);
		ck = ck - 1;
		// SendGSMCode(" AT+CGACT=0,1");
		// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",500));
		memset(GSMDataC, 0, 100);
 80051dc:	4c2d      	ldr	r4, [pc, #180]	; (8005294 <SetupGPRS+0xcc>)
 80051de:	0026      	movs	r6, r4
 80051e0:	360c      	adds	r6, #12
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80051e2:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <SetupGPRS+0xd0>)
 80051e4:	4699      	mov	r9, r3
		HAL_Delay(2000);
 80051e6:	20fa      	movs	r0, #250	; 0xfa
 80051e8:	00c0      	lsls	r0, r0, #3
 80051ea:	f001 f8ab 	bl	8006344 <HAL_Delay>
		memset(GSMDataC, 0, 100);
 80051ee:	2258      	movs	r2, #88	; 0x58
 80051f0:	2100      	movs	r1, #0
 80051f2:	0030      	movs	r0, r6
 80051f4:	f008 f8fc 	bl	800d3f0 <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80051f8:	0022      	movs	r2, r4
 80051fa:	464b      	mov	r3, r9
 80051fc:	cb23      	ldmia	r3!, {r0, r1, r5}
 80051fe:	c223      	stmia	r2!, {r0, r1, r5}
 8005200:	881a      	ldrh	r2, [r3, #0]
 8005202:	8032      	strh	r2, [r6, #0]
 8005204:	789b      	ldrb	r3, [r3, #2]
 8005206:	70b3      	strb	r3, [r6, #2]
		strcat(GSMDataC, apn);
 8005208:	4641      	mov	r1, r8
 800520a:	0020      	movs	r0, r4
 800520c:	f008 f8f8 	bl	800d400 <strcat>
		strcat(GSMDataC, "\",\"\",\"\",0");
 8005210:	0020      	movs	r0, r4
 8005212:	f7fa ff79 	bl	8000108 <strlen>
 8005216:	1820      	adds	r0, r4, r0
 8005218:	4920      	ldr	r1, [pc, #128]	; (800529c <SetupGPRS+0xd4>)
 800521a:	220a      	movs	r2, #10
 800521c:	f008 fab0 	bl	800d780 <memcpy>
		SendGSMCode(GSMDataC);
 8005220:	0020      	movs	r0, r4
 8005222:	f7fe fac5 	bl	80037b0 <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 8005226:	491e      	ldr	r1, [pc, #120]	; (80052a0 <SetupGPRS+0xd8>)
 8005228:	4b1e      	ldr	r3, [pc, #120]	; (80052a4 <SetupGPRS+0xdc>)
 800522a:	9302      	str	r3, [sp, #8]
 800522c:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <SetupGPRS+0xe0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <SetupGPRS+0xe4>)
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	000b      	movs	r3, r1
 8005238:	2200      	movs	r2, #0
 800523a:	2000      	movs	r0, #0
 800523c:	f7ff fd88 	bl	8004d50 <GetGSMReply>
 8005240:	f7fa ff62 	bl	8000108 <strlen>
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <SetupGPRS+0xc8>)
 8005246:	6018      	str	r0, [r3, #0]

		// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",10));
		if (gprsok > 0)
 8005248:	2800      	cmp	r0, #0
 800524a:	dc07      	bgt.n	800525c <SetupGPRS+0x94>
	while ((ck > 0) && (gprsok < 1))
 800524c:	3f01      	subs	r7, #1
 800524e:	2f00      	cmp	r7, #0
 8005250:	d1c9      	bne.n	80051e6 <SetupGPRS+0x1e>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 8005252:	b005      	add	sp, #20
 8005254:	bcc0      	pop	{r6, r7}
 8005256:	46b9      	mov	r9, r7
 8005258:	46b0      	mov	r8, r6
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SendGSMCode(" AT+QIMODE=0");
 800525c:	4814      	ldr	r0, [pc, #80]	; (80052b0 <SetupGPRS+0xe8>)
 800525e:	f7fe faa7 	bl	80037b0 <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8005262:	490f      	ldr	r1, [pc, #60]	; (80052a0 <SetupGPRS+0xd8>)
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <SetupGPRS+0xdc>)
 8005266:	9302      	str	r3, [sp, #8]
 8005268:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <SetupGPRS+0xe0>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <SetupGPRS+0xec>)
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	000b      	movs	r3, r1
 8005274:	2200      	movs	r2, #0
 8005276:	2000      	movs	r0, #0
 8005278:	f7ff fd6a 	bl	8004d50 <GetGSMReply>
 800527c:	f7fa ff44 	bl	8000108 <strlen>
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <SetupGPRS+0xc8>)
 8005282:	6018      	str	r0, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 8005284:	3f01      	subs	r7, #1
 8005286:	2f00      	cmp	r7, #0
 8005288:	d0e3      	beq.n	8005252 <SetupGPRS+0x8a>
 800528a:	2800      	cmp	r0, #0
 800528c:	ddab      	ble.n	80051e6 <SetupGPRS+0x1e>
 800528e:	e7e0      	b.n	8005252 <SetupGPRS+0x8a>
 8005290:	20003d1c 	.word	0x20003d1c
 8005294:	20001494 	.word	0x20001494
 8005298:	080117bc 	.word	0x080117bc
 800529c:	080117cc 	.word	0x080117cc
 80052a0:	080115f0 	.word	0x080115f0
 80052a4:	080114c8 	.word	0x080114c8
 80052a8:	20000018 	.word	0x20000018
 80052ac:	080117d8 	.word	0x080117d8
 80052b0:	080117f8 	.word	0x080117f8
 80052b4:	08011808 	.word	0x08011808

080052b8 <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ba:	46c6      	mov	lr, r8
 80052bc:	b500      	push	{lr}
 80052be:	b084      	sub	sp, #16
	// RestartGSM();
	int ook;
	Debug_Tx("______________Begin_____________________________");
 80052c0:	486a      	ldr	r0, [pc, #424]	; (800546c <ShiftGSMProfile+0x1b4>)
 80052c2:	f7fe f82d 	bl	8003320 <Debug_Tx>

	// Debug_Tx("______________print operator_____________________________");
	// Debug_Tx(GSMSimOperator());

	// Debug_Tx("______________setup stk_____________________________");
	int ck = 10;
 80052c6:	240a      	movs	r4, #10
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		HAL_Delay(3000);
		ck = ck - 1;
		SendGSMCode(" AT+QSTK=1");
 80052c8:	4f69      	ldr	r7, [pc, #420]	; (8005470 <ShiftGSMProfile+0x1b8>)
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 80052ca:	4d6a      	ldr	r5, [pc, #424]	; (8005474 <ShiftGSMProfile+0x1bc>)
 80052cc:	4e6a      	ldr	r6, [pc, #424]	; (8005478 <ShiftGSMProfile+0x1c0>)
		HAL_Delay(3000);
 80052ce:	486b      	ldr	r0, [pc, #428]	; (800547c <ShiftGSMProfile+0x1c4>)
 80052d0:	f001 f838 	bl	8006344 <HAL_Delay>
		ck = ck - 1;
 80052d4:	3c01      	subs	r4, #1
		SendGSMCode(" AT+QSTK=1");
 80052d6:	0038      	movs	r0, r7
 80052d8:	f7fe fa6a 	bl	80037b0 <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 80052dc:	9602      	str	r6, [sp, #8]
 80052de:	4b68      	ldr	r3, [pc, #416]	; (8005480 <ShiftGSMProfile+0x1c8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	4b67      	ldr	r3, [pc, #412]	; (8005484 <ShiftGSMProfile+0x1cc>)
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	002b      	movs	r3, r5
 80052ea:	2200      	movs	r2, #0
 80052ec:	0029      	movs	r1, r5
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7ff fd2e 	bl	8004d50 <GetGSMReply>
 80052f4:	f7fa ff08 	bl	8000108 <strlen>
		if (ook > 0)
 80052f8:	2800      	cmp	r0, #0
 80052fa:	dc2f      	bgt.n	800535c <ShiftGSMProfile+0xa4>
	while ((ck > 0) && (ook < 1))
 80052fc:	2c00      	cmp	r4, #0
 80052fe:	dce6      	bgt.n	80052ce <ShiftGSMProfile+0x16>
				}
			}
		}
	}

	Debug_Tx("_____________Restart_____________________________");
 8005300:	4861      	ldr	r0, [pc, #388]	; (8005488 <ShiftGSMProfile+0x1d0>)
 8005302:	f7fe f80d 	bl	8003320 <Debug_Tx>
	ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+QPOWD=1");
 8005306:	4861      	ldr	r0, [pc, #388]	; (800548c <ShiftGSMProfile+0x1d4>)
 8005308:	f7fe fa52 	bl	80037b0 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 800530c:	4959      	ldr	r1, [pc, #356]	; (8005474 <ShiftGSMProfile+0x1bc>)
 800530e:	4b60      	ldr	r3, [pc, #384]	; (8005490 <ShiftGSMProfile+0x1d8>)
 8005310:	9302      	str	r3, [sp, #8]
 8005312:	4b60      	ldr	r3, [pc, #384]	; (8005494 <ShiftGSMProfile+0x1dc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	4b5f      	ldr	r3, [pc, #380]	; (8005498 <ShiftGSMProfile+0x1e0>)
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	000b      	movs	r3, r1
 800531e:	2200      	movs	r2, #0
 8005320:	200f      	movs	r0, #15
 8005322:	f7ff fd15 	bl	8004d50 <GetGSMReply>
 8005326:	f7fa feef 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 800532a:	2800      	cmp	r0, #0
 800532c:	dc0f      	bgt.n	800534e <ShiftGSMProfile+0x96>
		SendGSMCode(" AT+QPOWD=1");
 800532e:	4857      	ldr	r0, [pc, #348]	; (800548c <ShiftGSMProfile+0x1d4>)
 8005330:	f7fe fa3e 	bl	80037b0 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 8005334:	494f      	ldr	r1, [pc, #316]	; (8005474 <ShiftGSMProfile+0x1bc>)
 8005336:	4b56      	ldr	r3, [pc, #344]	; (8005490 <ShiftGSMProfile+0x1d8>)
 8005338:	9302      	str	r3, [sp, #8]
 800533a:	4b56      	ldr	r3, [pc, #344]	; (8005494 <ShiftGSMProfile+0x1dc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	4b55      	ldr	r3, [pc, #340]	; (8005498 <ShiftGSMProfile+0x1e0>)
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	000b      	movs	r3, r1
 8005346:	2200      	movs	r2, #0
 8005348:	200f      	movs	r0, #15
 800534a:	f7ff fd01 	bl	8004d50 <GetGSMReply>
	}
	HAL_Delay(6000);
 800534e:	4853      	ldr	r0, [pc, #332]	; (800549c <ShiftGSMProfile+0x1e4>)
 8005350:	f000 fff8 	bl	8006344 <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 8005354:	b004      	add	sp, #16
 8005356:	bc80      	pop	{r7}
 8005358:	46b8      	mov	r8, r7
 800535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Debug_Tx("______________Setup Menu_____________________________");
 800535c:	4850      	ldr	r0, [pc, #320]	; (80054a0 <ShiftGSMProfile+0x1e8>)
 800535e:	f7fd ffdf 	bl	8003320 <Debug_Tx>
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 8005362:	4850      	ldr	r0, [pc, #320]	; (80054a4 <ShiftGSMProfile+0x1ec>)
 8005364:	f7fe fa24 	bl	80037b0 <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", gpsto_net, "OK"));
 8005368:	4942      	ldr	r1, [pc, #264]	; (8005474 <ShiftGSMProfile+0x1bc>)
 800536a:	4b43      	ldr	r3, [pc, #268]	; (8005478 <ShiftGSMProfile+0x1c0>)
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	4b44      	ldr	r3, [pc, #272]	; (8005480 <ShiftGSMProfile+0x1c8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	4b4c      	ldr	r3, [pc, #304]	; (80054a8 <ShiftGSMProfile+0x1f0>)
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	000b      	movs	r3, r1
 800537a:	2200      	movs	r2, #0
 800537c:	2000      	movs	r0, #0
 800537e:	f7ff fce7 	bl	8004d50 <GetGSMReply>
 8005382:	f7fa fec1 	bl	8000108 <strlen>
 8005386:	4680      	mov	r8, r0
			HAL_Delay(3000);
 8005388:	483c      	ldr	r0, [pc, #240]	; (800547c <ShiftGSMProfile+0x1c4>)
 800538a:	f000 ffdb 	bl	8006344 <HAL_Delay>
			if (ook > 0)
 800538e:	4643      	mov	r3, r8
 8005390:	2b00      	cmp	r3, #0
 8005392:	ddb3      	ble.n	80052fc <ShiftGSMProfile+0x44>
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
 8005394:	4845      	ldr	r0, [pc, #276]	; (80054ac <ShiftGSMProfile+0x1f4>)
 8005396:	f7fd ffc3 	bl	8003320 <Debug_Tx>
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 800539a:	4845      	ldr	r0, [pc, #276]	; (80054b0 <ShiftGSMProfile+0x1f8>)
 800539c:	f7fe fa08 	bl	80037b0 <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 80053a0:	4934      	ldr	r1, [pc, #208]	; (8005474 <ShiftGSMProfile+0x1bc>)
 80053a2:	4b35      	ldr	r3, [pc, #212]	; (8005478 <ShiftGSMProfile+0x1c0>)
 80053a4:	9302      	str	r3, [sp, #8]
 80053a6:	4b36      	ldr	r3, [pc, #216]	; (8005480 <ShiftGSMProfile+0x1c8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	9301      	str	r3, [sp, #4]
 80053ac:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <ShiftGSMProfile+0x1fc>)
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	000b      	movs	r3, r1
 80053b2:	2200      	movs	r2, #0
 80053b4:	2000      	movs	r0, #0
 80053b6:	f7ff fccb 	bl	8004d50 <GetGSMReply>
 80053ba:	f7fa fea5 	bl	8000108 <strlen>
				if (ook > 0)
 80053be:	2800      	cmp	r0, #0
 80053c0:	dd9c      	ble.n	80052fc <ShiftGSMProfile+0x44>
					if (GSMProf == 0)
 80053c2:	4b3d      	ldr	r3, [pc, #244]	; (80054b8 <ShiftGSMProfile+0x200>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01d      	beq.n	8005406 <ShiftGSMProfile+0x14e>
					else if (GSMProf == 1)
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d037      	beq.n	800543e <ShiftGSMProfile+0x186>
						Debug_Tx("_____________Refresh_____________________________");
 80053ce:	483b      	ldr	r0, [pc, #236]	; (80054bc <ShiftGSMProfile+0x204>)
 80053d0:	f7fd ffa6 	bl	8003320 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 80053d4:	483a      	ldr	r0, [pc, #232]	; (80054c0 <ShiftGSMProfile+0x208>)
 80053d6:	f7fe f9eb 	bl	80037b0 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh", gpsto_net, "OK"));
 80053da:	4926      	ldr	r1, [pc, #152]	; (8005474 <ShiftGSMProfile+0x1bc>)
 80053dc:	4b26      	ldr	r3, [pc, #152]	; (8005478 <ShiftGSMProfile+0x1c0>)
 80053de:	9302      	str	r3, [sp, #8]
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <ShiftGSMProfile+0x1c8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	4b37      	ldr	r3, [pc, #220]	; (80054c4 <ShiftGSMProfile+0x20c>)
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	000b      	movs	r3, r1
 80053ec:	2200      	movs	r2, #0
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7ff fcae 	bl	8004d50 <GetGSMReply>
 80053f4:	f7fa fe88 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 80053f8:	2c00      	cmp	r4, #0
 80053fa:	dc00      	bgt.n	80053fe <ShiftGSMProfile+0x146>
 80053fc:	e780      	b.n	8005300 <ShiftGSMProfile+0x48>
 80053fe:	2800      	cmp	r0, #0
 8005400:	dd00      	ble.n	8005404 <ShiftGSMProfile+0x14c>
 8005402:	e77d      	b.n	8005300 <ShiftGSMProfile+0x48>
 8005404:	e763      	b.n	80052ce <ShiftGSMProfile+0x16>
						Debug_Tx("_____________BSNL profile Selection_____________________________");
 8005406:	4830      	ldr	r0, [pc, #192]	; (80054c8 <ShiftGSMProfile+0x210>)
 8005408:	f7fd ff8a 	bl	8003320 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 800540c:	482f      	ldr	r0, [pc, #188]	; (80054cc <ShiftGSMProfile+0x214>)
 800540e:	f7fe f9cf 	bl	80037b0 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
 8005412:	4918      	ldr	r1, [pc, #96]	; (8005474 <ShiftGSMProfile+0x1bc>)
 8005414:	4b18      	ldr	r3, [pc, #96]	; (8005478 <ShiftGSMProfile+0x1c0>)
 8005416:	9302      	str	r3, [sp, #8]
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <ShiftGSMProfile+0x1c8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	4b2c      	ldr	r3, [pc, #176]	; (80054d0 <ShiftGSMProfile+0x218>)
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	000b      	movs	r3, r1
 8005424:	2200      	movs	r2, #0
 8005426:	2000      	movs	r0, #0
 8005428:	f7ff fc92 	bl	8004d50 <GetGSMReply>
 800542c:	f7fa fe6c 	bl	8000108 <strlen>
						GSMProf = 1;
 8005430:	2201      	movs	r2, #1
 8005432:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <ShiftGSMProfile+0x200>)
 8005434:	601a      	str	r2, [r3, #0]
					if (ook > 0)
 8005436:	2800      	cmp	r0, #0
 8005438:	dc00      	bgt.n	800543c <ShiftGSMProfile+0x184>
 800543a:	e75f      	b.n	80052fc <ShiftGSMProfile+0x44>
 800543c:	e7c7      	b.n	80053ce <ShiftGSMProfile+0x116>
						Debug_Tx("_____________Airtel profile Selection_____________________________");
 800543e:	4825      	ldr	r0, [pc, #148]	; (80054d4 <ShiftGSMProfile+0x21c>)
 8005440:	f7fd ff6e 	bl	8003320 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 8005444:	4824      	ldr	r0, [pc, #144]	; (80054d8 <ShiftGSMProfile+0x220>)
 8005446:	f7fe f9b3 	bl	80037b0 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", gpsto_net, "OK"));
 800544a:	490a      	ldr	r1, [pc, #40]	; (8005474 <ShiftGSMProfile+0x1bc>)
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <ShiftGSMProfile+0x1c0>)
 800544e:	9302      	str	r3, [sp, #8]
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <ShiftGSMProfile+0x1c8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	4b21      	ldr	r3, [pc, #132]	; (80054dc <ShiftGSMProfile+0x224>)
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	000b      	movs	r3, r1
 800545c:	2200      	movs	r2, #0
 800545e:	2000      	movs	r0, #0
 8005460:	f7ff fc76 	bl	8004d50 <GetGSMReply>
 8005464:	f7fa fe50 	bl	8000108 <strlen>
 8005468:	2200      	movs	r2, #0
 800546a:	e7e2      	b.n	8005432 <ShiftGSMProfile+0x17a>
 800546c:	0801182c 	.word	0x0801182c
 8005470:	08011860 	.word	0x08011860
 8005474:	080115f0 	.word	0x080115f0
 8005478:	080114c8 	.word	0x080114c8
 800547c:	00000bb8 	.word	0x00000bb8
 8005480:	2000001c 	.word	0x2000001c
 8005484:	0801186c 	.word	0x0801186c
 8005488:	08011b24 	.word	0x08011b24
 800548c:	08011b58 	.word	0x08011b58
 8005490:	08011b64 	.word	0x08011b64
 8005494:	20000018 	.word	0x20000018
 8005498:	08011b78 	.word	0x08011b78
 800549c:	00001770 	.word	0x00001770
 80054a0:	08011888 	.word	0x08011888
 80054a4:	080118c0 	.word	0x080118c0
 80054a8:	080118e8 	.word	0x080118e8
 80054ac:	08011908 	.word	0x08011908
 80054b0:	08011948 	.word	0x08011948
 80054b4:	08011968 	.word	0x08011968
 80054b8:	20000008 	.word	0x20000008
 80054bc:	08011aac 	.word	0x08011aac
 80054c0:	08011ae0 	.word	0x08011ae0
 80054c4:	08011b08 	.word	0x08011b08
 80054c8:	0801198c 	.word	0x0801198c
 80054cc:	080119d0 	.word	0x080119d0
 80054d0:	080119fc 	.word	0x080119fc
 80054d4:	08011a1c 	.word	0x08011a1c
 80054d8:	08011a60 	.word	0x08011a60
 80054dc:	08011a8c 	.word	0x08011a8c

080054e0 <InitGSM>:

void InitGSM()
{
 80054e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e2:	46c6      	mov	lr, r8
 80054e4:	b500      	push	{lr}
 80054e6:	b084      	sub	sp, #16
	// RestartGSM();
	HAL_Delay(5000);
 80054e8:	48a9      	ldr	r0, [pc, #676]	; (8005790 <InitGSM+0x2b0>)
 80054ea:	f000 ff2b 	bl	8006344 <HAL_Delay>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 80054ee:	48a9      	ldr	r0, [pc, #676]	; (8005794 <InitGSM+0x2b4>)
 80054f0:	f7fe f95e 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 80054f4:	49a8      	ldr	r1, [pc, #672]	; (8005798 <InitGSM+0x2b8>)
 80054f6:	4ba9      	ldr	r3, [pc, #676]	; (800579c <InitGSM+0x2bc>)
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	4ba9      	ldr	r3, [pc, #676]	; (80057a0 <InitGSM+0x2c0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	4ba8      	ldr	r3, [pc, #672]	; (80057a4 <InitGSM+0x2c4>)
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	000b      	movs	r3, r1
 8005506:	2200      	movs	r2, #0
 8005508:	200f      	movs	r0, #15
 800550a:	f7ff fc21 	bl	8004d50 <GetGSMReply>
 800550e:	f7fa fdfb 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 8005512:	2800      	cmp	r0, #0
 8005514:	dc0f      	bgt.n	8005536 <InitGSM+0x56>
		SendGSMCode(" ATE0");
 8005516:	489f      	ldr	r0, [pc, #636]	; (8005794 <InitGSM+0x2b4>)
 8005518:	f7fe f94a 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 800551c:	499e      	ldr	r1, [pc, #632]	; (8005798 <InitGSM+0x2b8>)
 800551e:	4b9f      	ldr	r3, [pc, #636]	; (800579c <InitGSM+0x2bc>)
 8005520:	9302      	str	r3, [sp, #8]
 8005522:	4b9f      	ldr	r3, [pc, #636]	; (80057a0 <InitGSM+0x2c0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	4b9e      	ldr	r3, [pc, #632]	; (80057a4 <InitGSM+0x2c4>)
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	000b      	movs	r3, r1
 800552e:	2200      	movs	r2, #0
 8005530:	200f      	movs	r0, #15
 8005532:	f7ff fc0d 	bl	8004d50 <GetGSMReply>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8005536:	489c      	ldr	r0, [pc, #624]	; (80057a8 <InitGSM+0x2c8>)
 8005538:	f7fe f93a 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 800553c:	4996      	ldr	r1, [pc, #600]	; (8005798 <InitGSM+0x2b8>)
 800553e:	4b97      	ldr	r3, [pc, #604]	; (800579c <InitGSM+0x2bc>)
 8005540:	9302      	str	r3, [sp, #8]
 8005542:	4b97      	ldr	r3, [pc, #604]	; (80057a0 <InitGSM+0x2c0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	4b98      	ldr	r3, [pc, #608]	; (80057ac <InitGSM+0x2cc>)
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	000b      	movs	r3, r1
 800554e:	2200      	movs	r2, #0
 8005550:	200f      	movs	r0, #15
 8005552:	f7ff fbfd 	bl	8004d50 <GetGSMReply>
 8005556:	f7fa fdd7 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 800555a:	2800      	cmp	r0, #0
 800555c:	dc0f      	bgt.n	800557e <InitGSM+0x9e>
		SendGSMCode(" AT");
 800555e:	4892      	ldr	r0, [pc, #584]	; (80057a8 <InitGSM+0x2c8>)
 8005560:	f7fe f926 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8005564:	498c      	ldr	r1, [pc, #560]	; (8005798 <InitGSM+0x2b8>)
 8005566:	4b8d      	ldr	r3, [pc, #564]	; (800579c <InitGSM+0x2bc>)
 8005568:	9302      	str	r3, [sp, #8]
 800556a:	4b8d      	ldr	r3, [pc, #564]	; (80057a0 <InitGSM+0x2c0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	4b8e      	ldr	r3, [pc, #568]	; (80057ac <InitGSM+0x2cc>)
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	000b      	movs	r3, r1
 8005576:	2200      	movs	r2, #0
 8005578:	200f      	movs	r0, #15
 800557a:	f7ff fbe9 	bl	8004d50 <GetGSMReply>
	}

	HAL_Delay(2000);
 800557e:	20fa      	movs	r0, #250	; 0xfa
 8005580:	00c0      	lsls	r0, r0, #3
 8005582:	f000 fedf 	bl	8006344 <HAL_Delay>
	ShiftGSMProfile();
 8005586:	f7ff fe97 	bl	80052b8 <ShiftGSMProfile>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 800558a:	4882      	ldr	r0, [pc, #520]	; (8005794 <InitGSM+0x2b4>)
 800558c:	f7fe f910 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8005590:	4981      	ldr	r1, [pc, #516]	; (8005798 <InitGSM+0x2b8>)
 8005592:	4b82      	ldr	r3, [pc, #520]	; (800579c <InitGSM+0x2bc>)
 8005594:	9302      	str	r3, [sp, #8]
 8005596:	4b82      	ldr	r3, [pc, #520]	; (80057a0 <InitGSM+0x2c0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	4b84      	ldr	r3, [pc, #528]	; (80057b0 <InitGSM+0x2d0>)
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	000b      	movs	r3, r1
 80055a2:	2200      	movs	r2, #0
 80055a4:	200a      	movs	r0, #10
 80055a6:	f7ff fbd3 	bl	8004d50 <GetGSMReply>
 80055aa:	f7fa fdad 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 80055ae:	2800      	cmp	r0, #0
 80055b0:	dc0f      	bgt.n	80055d2 <InitGSM+0xf2>
		SendGSMCode(" ATE0");
 80055b2:	4878      	ldr	r0, [pc, #480]	; (8005794 <InitGSM+0x2b4>)
 80055b4:	f7fe f8fc 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 80055b8:	4977      	ldr	r1, [pc, #476]	; (8005798 <InitGSM+0x2b8>)
 80055ba:	4b78      	ldr	r3, [pc, #480]	; (800579c <InitGSM+0x2bc>)
 80055bc:	9302      	str	r3, [sp, #8]
 80055be:	4b78      	ldr	r3, [pc, #480]	; (80057a0 <InitGSM+0x2c0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	4b7a      	ldr	r3, [pc, #488]	; (80057b0 <InitGSM+0x2d0>)
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	000b      	movs	r3, r1
 80055ca:	2200      	movs	r2, #0
 80055cc:	200a      	movs	r0, #10
 80055ce:	f7ff fbbf 	bl	8004d50 <GetGSMReply>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 80055d2:	4875      	ldr	r0, [pc, #468]	; (80057a8 <InitGSM+0x2c8>)
 80055d4:	f7fe f8ec 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 80055d8:	496f      	ldr	r1, [pc, #444]	; (8005798 <InitGSM+0x2b8>)
 80055da:	4b70      	ldr	r3, [pc, #448]	; (800579c <InitGSM+0x2bc>)
 80055dc:	9302      	str	r3, [sp, #8]
 80055de:	4b70      	ldr	r3, [pc, #448]	; (80057a0 <InitGSM+0x2c0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	4b71      	ldr	r3, [pc, #452]	; (80057ac <InitGSM+0x2cc>)
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	000b      	movs	r3, r1
 80055ea:	2200      	movs	r2, #0
 80055ec:	200a      	movs	r0, #10
 80055ee:	f7ff fbaf 	bl	8004d50 <GetGSMReply>
 80055f2:	f7fa fd89 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 80055f6:	2800      	cmp	r0, #0
 80055f8:	dc0f      	bgt.n	800561a <InitGSM+0x13a>
		SendGSMCode(" AT");
 80055fa:	486b      	ldr	r0, [pc, #428]	; (80057a8 <InitGSM+0x2c8>)
 80055fc:	f7fe f8d8 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8005600:	4965      	ldr	r1, [pc, #404]	; (8005798 <InitGSM+0x2b8>)
 8005602:	4b66      	ldr	r3, [pc, #408]	; (800579c <InitGSM+0x2bc>)
 8005604:	9302      	str	r3, [sp, #8]
 8005606:	4b66      	ldr	r3, [pc, #408]	; (80057a0 <InitGSM+0x2c0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	4b67      	ldr	r3, [pc, #412]	; (80057ac <InitGSM+0x2cc>)
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	000b      	movs	r3, r1
 8005612:	2200      	movs	r2, #0
 8005614:	200a      	movs	r0, #10
 8005616:	f7ff fb9b 	bl	8004d50 <GetGSMReply>
{
 800561a:	250a      	movs	r5, #10
	ck = 10;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 800561c:	4b65      	ldr	r3, [pc, #404]	; (80057b4 <InitGSM+0x2d4>)
 800561e:	4698      	mov	r8, r3
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 8005620:	4e5d      	ldr	r6, [pc, #372]	; (8005798 <InitGSM+0x2b8>)
 8005622:	4f5e      	ldr	r7, [pc, #376]	; (800579c <InitGSM+0x2bc>)
 8005624:	e011      	b.n	800564a <InitGSM+0x16a>
								{

									HAL_Delay(1000);
									if (GSMProf == 0)
									{
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
 8005626:	4864      	ldr	r0, [pc, #400]	; (80057b8 <InitGSM+0x2d8>)
 8005628:	f7fd fe7a 	bl	8003320 <Debug_Tx>
										SetupGPRS("taisysnet"); // taisysnet");
 800562c:	4863      	ldr	r0, [pc, #396]	; (80057bc <InitGSM+0x2dc>)
 800562e:	f7ff fdcb 	bl	80051c8 <SetupGPRS>
 8005632:	e096      	b.n	8005762 <InitGSM+0x282>
									}
									else if (GSMProf == 1)
									{
										Debug_Tx("_____________BSNL APN SET_____________________________");
 8005634:	4862      	ldr	r0, [pc, #392]	; (80057c0 <InitGSM+0x2e0>)
 8005636:	f7fd fe73 	bl	8003320 <Debug_Tx>
										SetupGPRS("bsnlnet"); // taisysnet");
 800563a:	4862      	ldr	r0, [pc, #392]	; (80057c4 <InitGSM+0x2e4>)
 800563c:	f7ff fdc4 	bl	80051c8 <SetupGPRS>
 8005640:	e08f      	b.n	8005762 <InitGSM+0x282>
	while ((ck > 0) && (i < 1))
 8005642:	3d01      	subs	r5, #1
 8005644:	2d00      	cmp	r5, #0
 8005646:	d100      	bne.n	800564a <InitGSM+0x16a>
 8005648:	e09d      	b.n	8005786 <InitGSM+0x2a6>
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 800564a:	4640      	mov	r0, r8
 800564c:	f7fe f8b0 	bl	80037b0 <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 8005650:	9702      	str	r7, [sp, #8]
 8005652:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <InitGSM+0x2c0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	4b5b      	ldr	r3, [pc, #364]	; (80057c8 <InitGSM+0x2e8>)
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	0033      	movs	r3, r6
 800565e:	2200      	movs	r2, #0
 8005660:	0031      	movs	r1, r6
 8005662:	2005      	movs	r0, #5
 8005664:	f7ff fb74 	bl	8004d50 <GetGSMReply>
 8005668:	f7fa fd4e 	bl	8000108 <strlen>
 800566c:	0004      	movs	r4, r0
		HAL_Delay(1000);
 800566e:	20fa      	movs	r0, #250	; 0xfa
 8005670:	0080      	lsls	r0, r0, #2
 8005672:	f000 fe67 	bl	8006344 <HAL_Delay>
		if (i > 0)
 8005676:	2c00      	cmp	r4, #0
 8005678:	dde3      	ble.n	8005642 <InitGSM+0x162>
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 800567a:	4854      	ldr	r0, [pc, #336]	; (80057cc <InitGSM+0x2ec>)
 800567c:	f7fe f898 	bl	80037b0 <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 8005680:	4945      	ldr	r1, [pc, #276]	; (8005798 <InitGSM+0x2b8>)
 8005682:	4b46      	ldr	r3, [pc, #280]	; (800579c <InitGSM+0x2bc>)
 8005684:	9302      	str	r3, [sp, #8]
 8005686:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <InitGSM+0x2c0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	4b50      	ldr	r3, [pc, #320]	; (80057d0 <InitGSM+0x2f0>)
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	000b      	movs	r3, r1
 8005692:	2200      	movs	r2, #0
 8005694:	2000      	movs	r0, #0
 8005696:	f7ff fb5b 	bl	8004d50 <GetGSMReply>
 800569a:	f7fa fd35 	bl	8000108 <strlen>
			if (i > 0)
 800569e:	2800      	cmp	r0, #0
 80056a0:	ddcf      	ble.n	8005642 <InitGSM+0x162>
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 80056a2:	484c      	ldr	r0, [pc, #304]	; (80057d4 <InitGSM+0x2f4>)
 80056a4:	f7fe f884 	bl	80037b0 <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 80056a8:	493b      	ldr	r1, [pc, #236]	; (8005798 <InitGSM+0x2b8>)
 80056aa:	4b3c      	ldr	r3, [pc, #240]	; (800579c <InitGSM+0x2bc>)
 80056ac:	9302      	str	r3, [sp, #8]
 80056ae:	4b3c      	ldr	r3, [pc, #240]	; (80057a0 <InitGSM+0x2c0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	4b48      	ldr	r3, [pc, #288]	; (80057d8 <InitGSM+0x2f8>)
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	000b      	movs	r3, r1
 80056ba:	2200      	movs	r2, #0
 80056bc:	2000      	movs	r0, #0
 80056be:	f7ff fb47 	bl	8004d50 <GetGSMReply>
 80056c2:	f7fa fd21 	bl	8000108 <strlen>
				if (i > 0)
 80056c6:	2800      	cmp	r0, #0
 80056c8:	ddbb      	ble.n	8005642 <InitGSM+0x162>
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 80056ca:	4844      	ldr	r0, [pc, #272]	; (80057dc <InitGSM+0x2fc>)
 80056cc:	f7fe f870 	bl	80037b0 <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 80056d0:	4931      	ldr	r1, [pc, #196]	; (8005798 <InitGSM+0x2b8>)
 80056d2:	4b32      	ldr	r3, [pc, #200]	; (800579c <InitGSM+0x2bc>)
 80056d4:	9302      	str	r3, [sp, #8]
 80056d6:	4b32      	ldr	r3, [pc, #200]	; (80057a0 <InitGSM+0x2c0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	4b40      	ldr	r3, [pc, #256]	; (80057e0 <InitGSM+0x300>)
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	000b      	movs	r3, r1
 80056e2:	2200      	movs	r2, #0
 80056e4:	2000      	movs	r0, #0
 80056e6:	f7ff fb33 	bl	8004d50 <GetGSMReply>
 80056ea:	f7fa fd0d 	bl	8000108 <strlen>
					if (i > 0)
 80056ee:	2800      	cmp	r0, #0
 80056f0:	dda7      	ble.n	8005642 <InitGSM+0x162>
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 80056f2:	483c      	ldr	r0, [pc, #240]	; (80057e4 <InitGSM+0x304>)
 80056f4:	f7fe f85c 	bl	80037b0 <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 80056f8:	4927      	ldr	r1, [pc, #156]	; (8005798 <InitGSM+0x2b8>)
 80056fa:	4b28      	ldr	r3, [pc, #160]	; (800579c <InitGSM+0x2bc>)
 80056fc:	9302      	str	r3, [sp, #8]
 80056fe:	4b28      	ldr	r3, [pc, #160]	; (80057a0 <InitGSM+0x2c0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	4b38      	ldr	r3, [pc, #224]	; (80057e8 <InitGSM+0x308>)
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	000b      	movs	r3, r1
 800570a:	2200      	movs	r2, #0
 800570c:	2000      	movs	r0, #0
 800570e:	f7ff fb1f 	bl	8004d50 <GetGSMReply>
 8005712:	f7fa fcf9 	bl	8000108 <strlen>
						if (i > 0)
 8005716:	2800      	cmp	r0, #0
 8005718:	dd93      	ble.n	8005642 <InitGSM+0x162>
							HAL_Delay(3000);
 800571a:	4834      	ldr	r0, [pc, #208]	; (80057ec <InitGSM+0x30c>)
 800571c:	f000 fe12 	bl	8006344 <HAL_Delay>
								SendGSMCode(" AT+QENG=1,4");
 8005720:	4833      	ldr	r0, [pc, #204]	; (80057f0 <InitGSM+0x310>)
 8005722:	f7fe f845 	bl	80037b0 <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 8005726:	491c      	ldr	r1, [pc, #112]	; (8005798 <InitGSM+0x2b8>)
 8005728:	4b1c      	ldr	r3, [pc, #112]	; (800579c <InitGSM+0x2bc>)
 800572a:	9302      	str	r3, [sp, #8]
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <InitGSM+0x2c0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	4b30      	ldr	r3, [pc, #192]	; (80057f4 <InitGSM+0x314>)
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	000b      	movs	r3, r1
 8005738:	2200      	movs	r2, #0
 800573a:	2000      	movs	r0, #0
 800573c:	f7ff fb08 	bl	8004d50 <GetGSMReply>
 8005740:	f7fa fce2 	bl	8000108 <strlen>
								if (i > 0)
 8005744:	2800      	cmp	r0, #0
 8005746:	dc00      	bgt.n	800574a <InitGSM+0x26a>
 8005748:	e77b      	b.n	8005642 <InitGSM+0x162>
									HAL_Delay(1000);
 800574a:	20fa      	movs	r0, #250	; 0xfa
 800574c:	0080      	lsls	r0, r0, #2
 800574e:	f000 fdf9 	bl	8006344 <HAL_Delay>
									if (GSMProf == 0)
 8005752:	4b29      	ldr	r3, [pc, #164]	; (80057f8 <InitGSM+0x318>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d100      	bne.n	800575c <InitGSM+0x27c>
 800575a:	e764      	b.n	8005626 <InitGSM+0x146>
									else if (GSMProf == 1)
 800575c:	2b01      	cmp	r3, #1
 800575e:	d100      	bne.n	8005762 <InitGSM+0x282>
 8005760:	e768      	b.n	8005634 <InitGSM+0x154>
									}
									HAL_Delay(1000);
 8005762:	24fa      	movs	r4, #250	; 0xfa
 8005764:	00a4      	lsls	r4, r4, #2
 8005766:	0020      	movs	r0, r4
 8005768:	f000 fdec 	bl	8006344 <HAL_Delay>

									Debug_Tx("_____________Operator again_____________________________");
 800576c:	4823      	ldr	r0, [pc, #140]	; (80057fc <InitGSM+0x31c>)
 800576e:	f7fd fdd7 	bl	8003320 <Debug_Tx>
									// Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 8005772:	0020      	movs	r0, r4
 8005774:	f000 fde6 	bl	8006344 <HAL_Delay>
									SetTCPMux();
 8005778:	f7ff fd08 	bl	800518c <SetTCPMux>
									HAL_Delay(1000);
 800577c:	0020      	movs	r0, r4
 800577e:	f000 fde1 	bl	8006344 <HAL_Delay>
									SetTCPMux();
 8005782:	f7ff fd03 	bl	800518c <SetTCPMux>
					}
				}
			}
		}
	}
}
 8005786:	b004      	add	sp, #16
 8005788:	bc80      	pop	{r7}
 800578a:	46b8      	mov	r8, r7
 800578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	00001388 	.word	0x00001388
 8005794:	08011b94 	.word	0x08011b94
 8005798:	080115f0 	.word	0x080115f0
 800579c:	080114c8 	.word	0x080114c8
 80057a0:	20000018 	.word	0x20000018
 80057a4:	08011b9c 	.word	0x08011b9c
 80057a8:	080111d0 	.word	0x080111d0
 80057ac:	08011bb0 	.word	0x08011bb0
 80057b0:	08011bc4 	.word	0x08011bc4
 80057b4:	08011bd8 	.word	0x08011bd8
 80057b8:	08011d18 	.word	0x08011d18
 80057bc:	08011d54 	.word	0x08011d54
 80057c0:	08011d60 	.word	0x08011d60
 80057c4:	08011d98 	.word	0x08011d98
 80057c8:	08011be4 	.word	0x08011be4
 80057cc:	08011c0c 	.word	0x08011c0c
 80057d0:	08011c18 	.word	0x08011c18
 80057d4:	08011c40 	.word	0x08011c40
 80057d8:	08011c4c 	.word	0x08011c4c
 80057dc:	08011c68 	.word	0x08011c68
 80057e0:	08011c74 	.word	0x08011c74
 80057e4:	08011ca4 	.word	0x08011ca4
 80057e8:	08011cb4 	.word	0x08011cb4
 80057ec:	00000bb8 	.word	0x00000bb8
 80057f0:	08011ce0 	.word	0x08011ce0
 80057f4:	08011cf0 	.word	0x08011cf0
 80057f8:	20000008 	.word	0x20000008
 80057fc:	08011da0 	.word	0x08011da0

08005800 <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 8005800:	b510      	push	{r4, lr}
 8005802:	b084      	sub	sp, #16
	ClearQueue();
 8005804:	f7fe fb94 	bl	8003f30 <ClearQueue>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <initFirstRun+0x28>)
 800580a:	4c08      	ldr	r4, [pc, #32]	; (800582c <initFirstRun+0x2c>)
 800580c:	0022      	movs	r2, r4
 800580e:	320c      	adds	r2, #12
 8005810:	0021      	movs	r1, r4
 8005812:	3134      	adds	r1, #52	; 0x34
 8005814:	4806      	ldr	r0, [pc, #24]	; (8005830 <initFirstRun+0x30>)
 8005816:	3024      	adds	r0, #36	; 0x24
 8005818:	3468      	adds	r4, #104	; 0x68
 800581a:	9402      	str	r4, [sp, #8]
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	f7fe fb90 	bl	8003f44 <writeConfig>
}
 8005824:	b004      	add	sp, #16
 8005826:	bd10      	pop	{r4, pc}
 8005828:	08011ddc 	.word	0x08011ddc
 800582c:	08010f18 	.word	0x08010f18
 8005830:	08010f98 	.word	0x08010f98

08005834 <StartDefaultTask>:
{
 8005834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005836:	46c6      	mov	lr, r8
 8005838:	b500      	push	{lr}
 800583a:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800583c:	487a      	ldr	r0, [pc, #488]	; (8005a28 <StartDefaultTask+0x1f4>)
 800583e:	23fa      	movs	r3, #250	; 0xfa
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	9302      	str	r3, [sp, #8]
 8005844:	2301      	movs	r3, #1
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	2416      	movs	r4, #22
 800584a:	446c      	add	r4, sp
 800584c:	9400      	str	r4, [sp, #0]
 800584e:	2275      	movs	r2, #117	; 0x75
 8005850:	21d0      	movs	r1, #208	; 0xd0
 8005852:	f001 fef5 	bl	8007640 <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8005856:	7823      	ldrb	r3, [r4, #0]
 8005858:	2b68      	cmp	r3, #104	; 0x68
 800585a:	d100      	bne.n	800585e <StartDefaultTask+0x2a>
 800585c:	e0ac      	b.n	80059b8 <StartDefaultTask+0x184>
		Data = 0;
 800585e:	2517      	movs	r5, #23
 8005860:	446d      	add	r5, sp
 8005862:	2300      	movs	r3, #0
 8005864:	4698      	mov	r8, r3
 8005866:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8005868:	4e6f      	ldr	r6, [pc, #444]	; (8005a28 <StartDefaultTask+0x1f4>)
 800586a:	27fa      	movs	r7, #250	; 0xfa
 800586c:	00bf      	lsls	r7, r7, #2
 800586e:	9702      	str	r7, [sp, #8]
 8005870:	2401      	movs	r4, #1
 8005872:	9401      	str	r4, [sp, #4]
 8005874:	9500      	str	r5, [sp, #0]
 8005876:	0023      	movs	r3, r4
 8005878:	226b      	movs	r2, #107	; 0x6b
 800587a:	21d0      	movs	r1, #208	; 0xd0
 800587c:	0030      	movs	r0, r6
 800587e:	f001 fde1 	bl	8007444 <HAL_I2C_Mem_Write>
				Data = 0x07;
 8005882:	2307      	movs	r3, #7
 8005884:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8005886:	9702      	str	r7, [sp, #8]
 8005888:	9401      	str	r4, [sp, #4]
 800588a:	9500      	str	r5, [sp, #0]
 800588c:	0023      	movs	r3, r4
 800588e:	2219      	movs	r2, #25
 8005890:	21d0      	movs	r1, #208	; 0xd0
 8005892:	0030      	movs	r0, r6
 8005894:	f001 fdd6 	bl	8007444 <HAL_I2C_Mem_Write>
				Data = 0x00;
 8005898:	4643      	mov	r3, r8
 800589a:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800589c:	9702      	str	r7, [sp, #8]
 800589e:	9401      	str	r4, [sp, #4]
 80058a0:	9500      	str	r5, [sp, #0]
 80058a2:	0023      	movs	r3, r4
 80058a4:	221c      	movs	r2, #28
 80058a6:	21d0      	movs	r1, #208	; 0xd0
 80058a8:	0030      	movs	r0, r6
 80058aa:	f001 fdcb 	bl	8007444 <HAL_I2C_Mem_Write>
				Data = 0x00;
 80058ae:	4643      	mov	r3, r8
 80058b0:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80058b2:	9702      	str	r7, [sp, #8]
 80058b4:	9401      	str	r4, [sp, #4]
 80058b6:	9500      	str	r5, [sp, #0]
 80058b8:	0023      	movs	r3, r4
 80058ba:	221b      	movs	r2, #27
 80058bc:	21d0      	movs	r1, #208	; 0xd0
 80058be:	0030      	movs	r0, r6
 80058c0:	f001 fdc0 	bl	8007444 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 80058c4:	4859      	ldr	r0, [pc, #356]	; (8005a2c <StartDefaultTask+0x1f8>)
 80058c6:	f7fd fd2b 	bl	8003320 <Debug_Tx>
	ACC_GYRO_data[0]=0;
 80058ca:	4b59      	ldr	r3, [pc, #356]	; (8005a30 <StartDefaultTask+0x1fc>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 80058d0:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 80058d2:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 80058d4:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 80058d6:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 80058d8:	615a      	str	r2, [r3, #20]
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80058da:	2680      	movs	r6, #128	; 0x80
 80058dc:	0236      	lsls	r6, r6, #8
 80058de:	25a0      	movs	r5, #160	; 0xa0
 80058e0:	05ed      	lsls	r5, r5, #23
 80058e2:	2201      	movs	r2, #1
 80058e4:	0031      	movs	r1, r6
 80058e6:	0028      	movs	r0, r5
 80058e8:	f001 fbfc 	bl	80070e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80058ec:	4c51      	ldr	r4, [pc, #324]	; (8005a34 <StartDefaultTask+0x200>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	2140      	movs	r1, #64	; 0x40
 80058f2:	0020      	movs	r0, r4
 80058f4:	f001 fbf6 	bl	80070e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80058f8:	2201      	movs	r2, #1
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	0020      	movs	r0, r4
 80058fe:	f001 fbf1 	bl	80070e4 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 8005902:	494d      	ldr	r1, [pc, #308]	; (8005a38 <StartDefaultTask+0x204>)
 8005904:	484d      	ldr	r0, [pc, #308]	; (8005a3c <StartDefaultTask+0x208>)
 8005906:	2204      	movs	r2, #4
 8005908:	f001 f854 	bl	80069b4 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 800590c:	2201      	movs	r2, #1
 800590e:	2120      	movs	r1, #32
 8005910:	484b      	ldr	r0, [pc, #300]	; (8005a40 <StartDefaultTask+0x20c>)
 8005912:	f001 fbe7 	bl	80070e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8005916:	2201      	movs	r2, #1
 8005918:	0031      	movs	r1, r6
 800591a:	0028      	movs	r0, r5
 800591c:	f001 fbe2 	bl	80070e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8005920:	2201      	movs	r2, #1
 8005922:	2140      	movs	r1, #64	; 0x40
 8005924:	0020      	movs	r0, r4
 8005926:	f001 fbdd 	bl	80070e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800592a:	2201      	movs	r2, #1
 800592c:	2180      	movs	r1, #128	; 0x80
 800592e:	0020      	movs	r0, r4
 8005930:	f001 fbd8 	bl	80070e4 <HAL_GPIO_WritePin>
GSMBuff[0]=0;
 8005934:	4c43      	ldr	r4, [pc, #268]	; (8005a44 <StartDefaultTask+0x210>)
 8005936:	2300      	movs	r3, #0
 8005938:	7023      	strb	r3, [r4, #0]
 memset((char*)gpsData,0,1000);
 800593a:	4d43      	ldr	r5, [pc, #268]	; (8005a48 <StartDefaultTask+0x214>)
 800593c:	22fa      	movs	r2, #250	; 0xfa
 800593e:	0092      	lsls	r2, r2, #2
 8005940:	2100      	movs	r1, #0
 8005942:	0028      	movs	r0, r5
 8005944:	f007 fd54 	bl	800d3f0 <memset>
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005948:	4840      	ldr	r0, [pc, #256]	; (8005a4c <StartDefaultTask+0x218>)
 800594a:	6803      	ldr	r3, [r0, #0]
 800594c:	260c      	movs	r6, #12
 800594e:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8005950:	22e1      	movs	r2, #225	; 0xe1
 8005952:	0092      	lsls	r2, r2, #2
 8005954:	0029      	movs	r1, r5
 8005956:	f004 f8d5 	bl	8009b04 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800595a:	483d      	ldr	r0, [pc, #244]	; (8005a50 <StartDefaultTask+0x21c>)
 800595c:	6803      	ldr	r3, [r0, #0]
 800595e:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8005960:	2201      	movs	r2, #1
 8005962:	0021      	movs	r1, r4
 8005964:	f004 f8ce 	bl	8009b04 <HAL_UART_Receive_DMA>
initGPS();
 8005968:	f7fe fc10 	bl	800418c <initGPS>
initFirstRun();
 800596c:	f7ff ff48 	bl	8005800 <initFirstRun>
InitMEMQ();
 8005970:	f7fe fab6 	bl	8003ee0 <InitMEMQ>
HAL_Delay(10000);
 8005974:	4837      	ldr	r0, [pc, #220]	; (8005a54 <StartDefaultTask+0x220>)
 8005976:	f000 fce5 	bl	8006344 <HAL_Delay>
InitGSM();
 800597a:	f7ff fdb1 	bl	80054e0 <InitGSM>
TestMEM();
 800597e:	f7fe fcc3 	bl	8004308 <TestMEM>
 memset(IMEI,0,20);
 8005982:	4d35      	ldr	r5, [pc, #212]	; (8005a58 <StartDefaultTask+0x224>)
 8005984:	2214      	movs	r2, #20
 8005986:	2100      	movs	r1, #0
 8005988:	0028      	movs	r0, r5
 800598a:	f007 fd31 	bl	800d3f0 <memset>
 memset(Regno,0,20);
 800598e:	4c33      	ldr	r4, [pc, #204]	; (8005a5c <StartDefaultTask+0x228>)
 8005990:	2214      	movs	r2, #20
 8005992:	2100      	movs	r1, #0
 8005994:	0020      	movs	r0, r4
 8005996:	f007 fd2b 	bl	800d3f0 <memset>
strcpy(IMEI,GSMIMEI());
 800599a:	f7ff fa91 	bl	8004ec0 <GSMIMEI>
 800599e:	0001      	movs	r1, r0
 80059a0:	0028      	movs	r0, r5
 80059a2:	f007 feda 	bl	800d75a <strcpy>
 strcpy(Regno,readRegNo());
 80059a6:	f7fe fb9b 	bl	80040e0 <readRegNo>
 80059aa:	0001      	movs	r1, r0
 80059ac:	0020      	movs	r0, r4
 80059ae:	f007 fed4 	bl	800d75a <strcpy>
while (1){DownloadFile();
 80059b2:	f7ff faa5 	bl	8004f00 <DownloadFile>
 80059b6:	e7fc      	b.n	80059b2 <StartDefaultTask+0x17e>
		Data = 0;
 80059b8:	2517      	movs	r5, #23
 80059ba:	446d      	add	r5, sp
 80059bc:	2300      	movs	r3, #0
 80059be:	4698      	mov	r8, r3
 80059c0:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80059c2:	4e19      	ldr	r6, [pc, #100]	; (8005a28 <StartDefaultTask+0x1f4>)
 80059c4:	27fa      	movs	r7, #250	; 0xfa
 80059c6:	00bf      	lsls	r7, r7, #2
 80059c8:	9702      	str	r7, [sp, #8]
 80059ca:	2401      	movs	r4, #1
 80059cc:	9401      	str	r4, [sp, #4]
 80059ce:	9500      	str	r5, [sp, #0]
 80059d0:	0023      	movs	r3, r4
 80059d2:	226b      	movs	r2, #107	; 0x6b
 80059d4:	21d0      	movs	r1, #208	; 0xd0
 80059d6:	0030      	movs	r0, r6
 80059d8:	f001 fd34 	bl	8007444 <HAL_I2C_Mem_Write>
		Data = 0x07;
 80059dc:	2307      	movs	r3, #7
 80059de:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80059e0:	9702      	str	r7, [sp, #8]
 80059e2:	9401      	str	r4, [sp, #4]
 80059e4:	9500      	str	r5, [sp, #0]
 80059e6:	0023      	movs	r3, r4
 80059e8:	2219      	movs	r2, #25
 80059ea:	21d0      	movs	r1, #208	; 0xd0
 80059ec:	0030      	movs	r0, r6
 80059ee:	f001 fd29 	bl	8007444 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80059f2:	4643      	mov	r3, r8
 80059f4:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80059f6:	9702      	str	r7, [sp, #8]
 80059f8:	9401      	str	r4, [sp, #4]
 80059fa:	9500      	str	r5, [sp, #0]
 80059fc:	0023      	movs	r3, r4
 80059fe:	221c      	movs	r2, #28
 8005a00:	21d0      	movs	r1, #208	; 0xd0
 8005a02:	0030      	movs	r0, r6
 8005a04:	f001 fd1e 	bl	8007444 <HAL_I2C_Mem_Write>
		Data = 0x00;
 8005a08:	4643      	mov	r3, r8
 8005a0a:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8005a0c:	9702      	str	r7, [sp, #8]
 8005a0e:	9401      	str	r4, [sp, #4]
 8005a10:	9500      	str	r5, [sp, #0]
 8005a12:	0023      	movs	r3, r4
 8005a14:	221b      	movs	r2, #27
 8005a16:	21d0      	movs	r1, #208	; 0xd0
 8005a18:	0030      	movs	r0, r6
 8005a1a:	f001 fd13 	bl	8007444 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 8005a1e:	4810      	ldr	r0, [pc, #64]	; (8005a60 <StartDefaultTask+0x22c>)
 8005a20:	f7fd fc7e 	bl	8003320 <Debug_Tx>
 8005a24:	e751      	b.n	80058ca <StartDefaultTask+0x96>
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	20004328 	.word	0x20004328
 8005a2c:	08011e00 	.word	0x08011e00
 8005a30:	20000224 	.word	0x20000224
 8005a34:	50000800 	.word	0x50000800
 8005a38:	20000240 	.word	0x20000240
 8005a3c:	20004154 	.word	0x20004154
 8005a40:	50000400 	.word	0x50000400
 8005a44:	200002f8 	.word	0x200002f8
 8005a48:	20003d20 	.word	0x20003d20
 8005a4c:	200044c0 	.word	0x200044c0
 8005a50:	2000442c 	.word	0x2000442c
 8005a54:	00002710 	.word	0x00002710
 8005a58:	20001bb0 	.word	0x20001bb0
 8005a5c:	20003bcc 	.word	0x20003bcc
 8005a60:	08011dec 	.word	0x08011dec

08005a64 <ReadAllGPIO>:
void ReadAllGPIO(){
 8005a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a66:	46de      	mov	lr, fp
 8005a68:	4657      	mov	r7, sl
 8005a6a:	464e      	mov	r6, r9
 8005a6c:	4645      	mov	r5, r8
 8005a6e:	b5e0      	push	{r5, r6, r7, lr}
 8005a70:	b089      	sub	sp, #36	; 0x24
	memset(StatusStrng,0,20);
 8005a72:	4b43      	ldr	r3, [pc, #268]	; (8005b80 <ReadAllGPIO+0x11c>)
 8005a74:	2214      	movs	r2, #20
 8005a76:	2100      	movs	r1, #0
 8005a78:	9306      	str	r3, [sp, #24]
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f007 fcb8 	bl	800d3f0 <memset>
	memset(Dig_io,0,30);
 8005a80:	4d40      	ldr	r5, [pc, #256]	; (8005b84 <ReadAllGPIO+0x120>)
 8005a82:	221e      	movs	r2, #30
 8005a84:	2100      	movs	r1, #0
 8005a86:	0028      	movs	r0, r5
 8005a88:	f007 fcb2 	bl	800d3f0 <memset>
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 8005a8c:	2780      	movs	r7, #128	; 0x80
 8005a8e:	017f      	lsls	r7, r7, #5
 8005a90:	20a0      	movs	r0, #160	; 0xa0
 8005a92:	0039      	movs	r1, r7
 8005a94:	05c0      	lsls	r0, r0, #23
 8005a96:	f001 fb1f 	bl	80070d8 <HAL_GPIO_ReadPin>
	Dig_in[0]=Read_DI_IN1();
 8005a9a:	4c3b      	ldr	r4, [pc, #236]	; (8005b88 <ReadAllGPIO+0x124>)
 8005a9c:	6020      	str	r0, [r4, #0]
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	4e3a      	ldr	r6, [pc, #232]	; (8005b8c <ReadAllGPIO+0x128>)
 8005aa2:	0109      	lsls	r1, r1, #4
 8005aa4:	0030      	movs	r0, r6
 8005aa6:	f001 fb17 	bl	80070d8 <HAL_GPIO_ReadPin>
 8005aaa:	6060      	str	r0, [r4, #4]
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 8005aac:	0039      	movs	r1, r7
 8005aae:	0030      	movs	r0, r6
 8005ab0:	f001 fb12 	bl	80070d8 <HAL_GPIO_ReadPin>
 8005ab4:	60a0      	str	r0, [r4, #8]
	MAINS_STATE=Read_DI_MAINS_STATE();
 8005ab6:	f7fd fd47 	bl	8003548 <Read_DI_MAINS_STATE>
 8005aba:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <ReadAllGPIO+0x12c>)
 8005abc:	469a      	mov	sl, r3
 8005abe:	6018      	str	r0, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 8005ac0:	f7fd fd4c 	bl	800355c <Read_DI_ACC_STATE>
 8005ac4:	4b33      	ldr	r3, [pc, #204]	; (8005b94 <ReadAllGPIO+0x130>)
 8005ac6:	4699      	mov	r9, r3
 8005ac8:	6018      	str	r0, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 8005aca:	f7fd fd51 	bl	8003570 <Read_DI_BOX_STATE>
 8005ace:	4b32      	ldr	r3, [pc, #200]	; (8005b98 <ReadAllGPIO+0x134>)
 8005ad0:	9307      	str	r3, [sp, #28]
 8005ad2:	7018      	strb	r0, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 8005ad4:	f7fd fd5c 	bl	8003590 <Read_DI_SOS_STATE>
 8005ad8:	4a30      	ldr	r2, [pc, #192]	; (8005b9c <ReadAllGPIO+0x138>)
 8005ada:	4690      	mov	r8, r2
 8005adc:	6010      	str	r0, [r2, #0]
	EXT_B=Read_EXT_B_SENSE();
 8005ade:	f7fd fbfb 	bl	80032d8 <Read_EXT_B_SENSE>
 8005ae2:	4e2f      	ldr	r6, [pc, #188]	; (8005ba0 <ReadAllGPIO+0x13c>)
 8005ae4:	6030      	str	r0, [r6, #0]
	INT_B=Read_INT_B_SENSE();
 8005ae6:	f7fd fc09 	bl	80032fc <Read_INT_B_SENSE>
 8005aea:	4f2e      	ldr	r7, [pc, #184]	; (8005ba4 <ReadAllGPIO+0x140>)
 8005aec:	6038      	str	r0, [r7, #0]
	adc[0]=Read_ADC1();
 8005aee:	f7fd fbcb 	bl	8003288 <Read_ADC1>
 8005af2:	4a2d      	ldr	r2, [pc, #180]	; (8005ba8 <ReadAllGPIO+0x144>)
 8005af4:	4693      	mov	fp, r2
 8005af6:	6010      	str	r0, [r2, #0]
	adc[1]=Read_ADC2();
 8005af8:	f7fd fbda 	bl	80032b0 <Read_ADC2>
 8005afc:	465a      	mov	r2, fp
 8005afe:	6050      	str	r0, [r2, #4]
	memset(StatusStrng,0,20);
 8005b00:	2214      	movs	r2, #20
 8005b02:	2100      	movs	r1, #0
 8005b04:	9b06      	ldr	r3, [sp, #24]
 8005b06:	469b      	mov	fp, r3
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f007 fc71 	bl	800d3f0 <memset>
	memset(Dig_io,0,30);
 8005b0e:	221e      	movs	r2, #30
 8005b10:	2100      	movs	r1, #0
 8005b12:	0028      	movs	r0, r5
 8005b14:	f007 fc6c 	bl	800d3f0 <memset>
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	4923      	ldr	r1, [pc, #140]	; (8005bac <ReadAllGPIO+0x148>)
 8005b1e:	4824      	ldr	r0, [pc, #144]	; (8005bb0 <ReadAllGPIO+0x14c>)
 8005b20:	6800      	ldr	r0, [r0, #0]
 8005b22:	9003      	str	r0, [sp, #12]
 8005b24:	4823      	ldr	r0, [pc, #140]	; (8005bb4 <ReadAllGPIO+0x150>)
 8005b26:	6800      	ldr	r0, [r0, #0]
 8005b28:	9002      	str	r0, [sp, #8]
 8005b2a:	4823      	ldr	r0, [pc, #140]	; (8005bb8 <ReadAllGPIO+0x154>)
 8005b2c:	6800      	ldr	r0, [r0, #0]
 8005b2e:	9001      	str	r0, [sp, #4]
 8005b30:	68a0      	ldr	r0, [r4, #8]
 8005b32:	9000      	str	r0, [sp, #0]
 8005b34:	0028      	movs	r0, r5
 8005b36:	f007 fbef 	bl	800d318 <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 8005b3a:	4652      	mov	r2, sl
 8005b3c:	6815      	ldr	r5, [r2, #0]
 8005b3e:	464a      	mov	r2, r9
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	4691      	mov	r9, r2
 8005b44:	4c1d      	ldr	r4, [pc, #116]	; (8005bbc <ReadAllGPIO+0x158>)
 8005b46:	9b07      	ldr	r3, [sp, #28]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	9305      	str	r3, [sp, #20]
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	9304      	str	r3, [sp, #16]
 8005b52:	6838      	ldr	r0, [r7, #0]
 8005b54:	f7fd faac 	bl	80030b0 <__aeabi_f2d>
 8005b58:	9002      	str	r0, [sp, #8]
 8005b5a:	9103      	str	r1, [sp, #12]
 8005b5c:	6830      	ldr	r0, [r6, #0]
 8005b5e:	f7fd faa7 	bl	80030b0 <__aeabi_f2d>
 8005b62:	9000      	str	r0, [sp, #0]
 8005b64:	9101      	str	r1, [sp, #4]
 8005b66:	002b      	movs	r3, r5
 8005b68:	464a      	mov	r2, r9
 8005b6a:	0021      	movs	r1, r4
 8005b6c:	4658      	mov	r0, fp
 8005b6e:	f007 fbd3 	bl	800d318 <siprintf>
}
 8005b72:	b009      	add	sp, #36	; 0x24
 8005b74:	bcf0      	pop	{r4, r5, r6, r7}
 8005b76:	46bb      	mov	fp, r7
 8005b78:	46b2      	mov	sl, r6
 8005b7a:	46a9      	mov	r9, r5
 8005b7c:	46a0      	mov	r8, r4
 8005b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b80:	20003be8 	.word	0x20003be8
 8005b84:	20000278 	.word	0x20000278
 8005b88:	2000026c 	.word	0x2000026c
 8005b8c:	50000400 	.word	0x50000400
 8005b90:	20001bc8 	.word	0x20001bc8
 8005b94:	2000023c 	.word	0x2000023c
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	20003be0 	.word	0x20003be0
 8005ba0:	200002a0 	.word	0x200002a0
 8005ba4:	20001bc4 	.word	0x20001bc4
 8005ba8:	20003bfc 	.word	0x20003bfc
 8005bac:	08011e10 	.word	0x08011e10
 8005bb0:	200045ec 	.word	0x200045ec
 8005bb4:	2000029c 	.word	0x2000029c
 8005bb8:	20000298 	.word	0x20000298
 8005bbc:	08011e28 	.word	0x08011e28

08005bc0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	0004      	movs	r4, r0
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8005bc4:	2104      	movs	r1, #4
 8005bc6:	4827      	ldr	r0, [pc, #156]	; (8005c64 <HAL_UART_RxCpltCallback+0xa4>)
 8005bc8:	f001 fa92 	bl	80070f0 <HAL_GPIO_TogglePin>
	if(huart==&huart2){
 8005bcc:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <HAL_UART_RxCpltCallback+0xa8>)
 8005bce:	429c      	cmp	r4, r3
 8005bd0:	d003      	beq.n	8005bda <HAL_UART_RxCpltCallback+0x1a>
	if(huart==&huart1){
 8005bd2:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <HAL_UART_RxCpltCallback+0xac>)
 8005bd4:	429c      	cmp	r4, r3
 8005bd6:	d028      	beq.n	8005c2a <HAL_UART_RxCpltCallback+0x6a>
}
 8005bd8:	bd10      	pop	{r4, pc}
		if(dnlfile==0){
 8005bda:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <HAL_UART_RxCpltCallback+0xb0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1fa      	bne.n	8005bd8 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>10){
 8005be2:	4824      	ldr	r0, [pc, #144]	; (8005c74 <HAL_UART_RxCpltCallback+0xb4>)
 8005be4:	f7fa fa90 	bl	8000108 <strlen>
 8005be8:	280a      	cmp	r0, #10
 8005bea:	d80e      	bhi.n	8005c0a <HAL_UART_RxCpltCallback+0x4a>
		if(DMAon==1){
 8005bec:	4b22      	ldr	r3, [pc, #136]	; (8005c78 <HAL_UART_RxCpltCallback+0xb8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d1f1      	bne.n	8005bd8 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8005bf4:	4b1f      	ldr	r3, [pc, #124]	; (8005c74 <HAL_UART_RxCpltCallback+0xb4>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d110      	bne.n	8005c1e <HAL_UART_RxCpltCallback+0x5e>
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 8005bfc:	22e1      	movs	r2, #225	; 0xe1
 8005bfe:	491d      	ldr	r1, [pc, #116]	; (8005c74 <HAL_UART_RxCpltCallback+0xb4>)
 8005c00:	4819      	ldr	r0, [pc, #100]	; (8005c68 <HAL_UART_RxCpltCallback+0xa8>)
 8005c02:	0092      	lsls	r2, r2, #2
 8005c04:	f003 ff7e 	bl	8009b04 <HAL_UART_Receive_DMA>
 8005c08:	e7e6      	b.n	8005bd8 <HAL_UART_RxCpltCallback+0x18>
			ProcessGPS((char*)gpsData);
 8005c0a:	481a      	ldr	r0, [pc, #104]	; (8005c74 <HAL_UART_RxCpltCallback+0xb4>)
 8005c0c:	f7ff f816 	bl	8004c3c <ProcessGPS>
			getGPSString();
 8005c10:	f7fe fade 	bl	80041d0 <getGPSString>
			timedWork();
 8005c14:	f7fe fe32 	bl	800487c <timedWork>
			ReadAllGPIO();
 8005c18:	f7ff ff24 	bl	8005a64 <ReadAllGPIO>
 8005c1c:	e7e6      	b.n	8005bec <HAL_UART_RxCpltCallback+0x2c>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8005c1e:	4815      	ldr	r0, [pc, #84]	; (8005c74 <HAL_UART_RxCpltCallback+0xb4>)
 8005c20:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <HAL_UART_RxCpltCallback+0xbc>)
 8005c22:	2100      	movs	r1, #0
 8005c24:	f007 fbe4 	bl	800d3f0 <memset>
 8005c28:	e7e8      	b.n	8005bfc <HAL_UART_RxCpltCallback+0x3c>
		if(strlen((char*)GSMData)<900){
 8005c2a:	4815      	ldr	r0, [pc, #84]	; (8005c80 <HAL_UART_RxCpltCallback+0xc0>)
 8005c2c:	f7fa fa6c 	bl	8000108 <strlen>
 8005c30:	23e1      	movs	r3, #225	; 0xe1
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4298      	cmp	r0, r3
 8005c36:	d203      	bcs.n	8005c40 <HAL_UART_RxCpltCallback+0x80>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <HAL_UART_RxCpltCallback+0xc4>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <HAL_UART_RxCpltCallback+0x98>
		if(DMAon==1){
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <HAL_UART_RxCpltCallback+0xb8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d1c7      	bne.n	8005bd8 <HAL_UART_RxCpltCallback+0x18>
		GSMBuff[0]=0;
 8005c48:	490e      	ldr	r1, [pc, #56]	; (8005c84 <HAL_UART_RxCpltCallback+0xc4>)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	700b      	strb	r3, [r1, #0]
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8005c4e:	4807      	ldr	r0, [pc, #28]	; (8005c6c <HAL_UART_RxCpltCallback+0xac>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	f003 ff57 	bl	8009b04 <HAL_UART_Receive_DMA>
}
 8005c56:	e7bf      	b.n	8005bd8 <HAL_UART_RxCpltCallback+0x18>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8005c58:	490a      	ldr	r1, [pc, #40]	; (8005c84 <HAL_UART_RxCpltCallback+0xc4>)
 8005c5a:	4809      	ldr	r0, [pc, #36]	; (8005c80 <HAL_UART_RxCpltCallback+0xc0>)
 8005c5c:	f007 fbd0 	bl	800d400 <strcat>
 8005c60:	e7ee      	b.n	8005c40 <HAL_UART_RxCpltCallback+0x80>
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	50000c00 	.word	0x50000c00
 8005c68:	200044c0 	.word	0x200044c0
 8005c6c:	2000442c 	.word	0x2000442c
 8005c70:	20003d18 	.word	0x20003d18
 8005c74:	20003d20 	.word	0x20003d20
 8005c78:	20000004 	.word	0x20000004
 8005c7c:	000003e7 	.word	0x000003e7
 8005c80:	20000eb8 	.word	0x20000eb8
 8005c84:	200002f8 	.word	0x200002f8

08005c88 <Error_Handler>:
 8005c88:	b672      	cpsid	i
  while (1)
 8005c8a:	e7fe      	b.n	8005c8a <Error_Handler+0x2>

08005c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c8c:	b500      	push	{lr}
 8005c8e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c90:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <HAL_MspInit+0x40>)
 8005c92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c94:	2201      	movs	r2, #1
 8005c96:	4311      	orrs	r1, r2
 8005c98:	6419      	str	r1, [r3, #64]	; 0x40
 8005c9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c9c:	400a      	ands	r2, r1
 8005c9e:	9200      	str	r2, [sp, #0]
 8005ca0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	0549      	lsls	r1, r1, #21
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	63da      	str	r2, [r3, #60]	; 0x3c
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	400b      	ands	r3, r1
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8005cb4:	2002      	movs	r0, #2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2103      	movs	r1, #3
 8005cba:	4240      	negs	r0, r0
 8005cbc:	f000 fed8 	bl	8006a70 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8005cc0:	20c0      	movs	r0, #192	; 0xc0
 8005cc2:	00c0      	lsls	r0, r0, #3
 8005cc4:	f000 fb50 	bl	8006368 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cc8:	b003      	add	sp, #12
 8005cca:	bd00      	pop	{pc}
 8005ccc:	40021000 	.word	0x40021000

08005cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005cd0:	b530      	push	{r4, r5, lr}
 8005cd2:	b089      	sub	sp, #36	; 0x24
 8005cd4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd6:	2214      	movs	r2, #20
 8005cd8:	2100      	movs	r1, #0
 8005cda:	a803      	add	r0, sp, #12
 8005cdc:	f007 fb88 	bl	800d3f0 <memset>
  if(hadc->Instance==ADC1)
 8005ce0:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_ADC_MspInit+0xac>)
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ce8:	b009      	add	sp, #36	; 0x24
 8005cea:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8005cec:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <HAL_ADC_MspInit+0xb0>)
 8005cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	0349      	lsls	r1, r1, #13
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8005cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cfa:	400a      	ands	r2, r1
 8005cfc:	9200      	str	r2, [sp, #0]
 8005cfe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d02:	2201      	movs	r2, #1
 8005d04:	4311      	orrs	r1, r2
 8005d06:	6359      	str	r1, [r3, #52]	; 0x34
 8005d08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d0a:	400a      	ands	r2, r1
 8005d0c:	9201      	str	r2, [sp, #4]
 8005d0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d12:	2202      	movs	r2, #2
 8005d14:	4311      	orrs	r1, r2
 8005d16:	6359      	str	r1, [r3, #52]	; 0x34
 8005d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	9202      	str	r2, [sp, #8]
 8005d1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 8005d20:	2503      	movs	r5, #3
 8005d22:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d24:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d26:	20a0      	movs	r0, #160	; 0xa0
 8005d28:	a903      	add	r1, sp, #12
 8005d2a:	05c0      	lsls	r0, r0, #23
 8005d2c:	f001 f8e8 	bl	8006f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8005d30:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <HAL_ADC_MspInit+0xb4>)
 8005d32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d34:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d36:	2500      	movs	r5, #0
 8005d38:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d3a:	a903      	add	r1, sp, #12
 8005d3c:	4812      	ldr	r0, [pc, #72]	; (8005d88 <HAL_ADC_MspInit+0xb8>)
 8005d3e:	f001 f8df 	bl	8006f00 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8005d42:	4812      	ldr	r0, [pc, #72]	; (8005d8c <HAL_ADC_MspInit+0xbc>)
 8005d44:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <HAL_ADC_MspInit+0xc0>)
 8005d46:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005d48:	2305      	movs	r3, #5
 8005d4a:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d4c:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d4e:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005d50:	337b      	adds	r3, #123	; 0x7b
 8005d52:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d54:	3381      	adds	r3, #129	; 0x81
 8005d56:	33ff      	adds	r3, #255	; 0xff
 8005d58:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005d60:	2320      	movs	r3, #32
 8005d62:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005d64:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d66:	f000 feff 	bl	8006b68 <HAL_DMA_Init>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d103      	bne.n	8005d76 <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005d6e:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <HAL_ADC_MspInit+0xbc>)
 8005d70:	6523      	str	r3, [r4, #80]	; 0x50
 8005d72:	629c      	str	r4, [r3, #40]	; 0x28
}
 8005d74:	e7b8      	b.n	8005ce8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8005d76:	f7ff ff87 	bl	8005c88 <Error_Handler>
 8005d7a:	e7f8      	b.n	8005d6e <HAL_ADC_MspInit+0x9e>
 8005d7c:	40012400 	.word	0x40012400
 8005d80:	40021000 	.word	0x40021000
 8005d84:	00000402 	.word	0x00000402
 8005d88:	50000400 	.word	0x50000400
 8005d8c:	200041b8 	.word	0x200041b8
 8005d90:	40020008 	.word	0x40020008

08005d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d94:	b510      	push	{r4, lr}
 8005d96:	b08e      	sub	sp, #56	; 0x38
 8005d98:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d9a:	2214      	movs	r2, #20
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	a809      	add	r0, sp, #36	; 0x24
 8005da0:	f007 fb26 	bl	800d3f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005da4:	221c      	movs	r2, #28
 8005da6:	2100      	movs	r1, #0
 8005da8:	a802      	add	r0, sp, #8
 8005daa:	f007 fb21 	bl	800d3f0 <memset>
  if(hi2c->Instance==I2C1)
 8005dae:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <HAL_I2C_MspInit+0x7c>)
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005db6:	b00e      	add	sp, #56	; 0x38
 8005db8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005dba:	2320      	movs	r3, #32
 8005dbc:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dbe:	a802      	add	r0, sp, #8
 8005dc0:	f002 f9a8 	bl	8008114 <HAL_RCCEx_PeriphCLKConfig>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d120      	bne.n	8005e0a <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dc8:	4c12      	ldr	r4, [pc, #72]	; (8005e14 <HAL_I2C_MspInit+0x80>)
 8005dca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005dcc:	2302      	movs	r3, #2
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	6362      	str	r2, [r4, #52]	; 0x34
 8005dd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8005dda:	23c0      	movs	r3, #192	; 0xc0
 8005ddc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dde:	3bae      	subs	r3, #174	; 0xae
 8005de0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005de2:	3b11      	subs	r3, #17
 8005de4:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005de6:	2300      	movs	r3, #0
 8005de8:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005dea:	3306      	adds	r3, #6
 8005dec:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dee:	a909      	add	r1, sp, #36	; 0x24
 8005df0:	4809      	ldr	r0, [pc, #36]	; (8005e18 <HAL_I2C_MspInit+0x84>)
 8005df2:	f001 f885 	bl	8006f00 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005df6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005df8:	2280      	movs	r2, #128	; 0x80
 8005dfa:	0392      	lsls	r2, r2, #14
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005e00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e02:	4013      	ands	r3, r2
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	9b01      	ldr	r3, [sp, #4]
}
 8005e08:	e7d5      	b.n	8005db6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8005e0a:	f7ff ff3d 	bl	8005c88 <Error_Handler>
 8005e0e:	e7db      	b.n	8005dc8 <HAL_I2C_MspInit+0x34>
 8005e10:	40005400 	.word	0x40005400
 8005e14:	40021000 	.word	0x40021000
 8005e18:	50000400 	.word	0x50000400

08005e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e22:	2214      	movs	r2, #20
 8005e24:	2100      	movs	r1, #0
 8005e26:	a803      	add	r0, sp, #12
 8005e28:	f007 fae2 	bl	800d3f0 <memset>
  if(hspi->Instance==SPI1)
 8005e2c:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <HAL_SPI_MspInit+0x54>)
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005e34:	b008      	add	sp, #32
 8005e36:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005e38:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <HAL_SPI_MspInit+0x58>)
 8005e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	0149      	lsls	r1, r1, #5
 8005e40:	430a      	orrs	r2, r1
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
 8005e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e46:	400a      	ands	r2, r1
 8005e48:	9201      	str	r2, [sp, #4]
 8005e4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4311      	orrs	r1, r2
 8005e52:	6359      	str	r1, [r3, #52]	; 0x34
 8005e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e56:	401a      	ands	r2, r3
 8005e58:	9202      	str	r2, [sp, #8]
 8005e5a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8005e5c:	23e0      	movs	r3, #224	; 0xe0
 8005e5e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e60:	3bde      	subs	r3, #222	; 0xde
 8005e62:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e64:	20a0      	movs	r0, #160	; 0xa0
 8005e66:	a903      	add	r1, sp, #12
 8005e68:	05c0      	lsls	r0, r0, #23
 8005e6a:	f001 f849 	bl	8006f00 <HAL_GPIO_Init>
}
 8005e6e:	e7e1      	b.n	8005e34 <HAL_SPI_MspInit+0x18>
 8005e70:	40013000 	.word	0x40013000
 8005e74:	40021000 	.word	0x40021000

08005e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e78:	b500      	push	{lr}
 8005e7a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <HAL_TIM_Base_MspInit+0x34>)
 8005e7e:	6802      	ldr	r2, [r0, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005e84:	b003      	add	sp, #12
 8005e86:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005e88:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <HAL_TIM_Base_MspInit+0x38>)
 8005e8a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	4319      	orrs	r1, r3
 8005e90:	63d1      	str	r1, [r2, #60]	; 0x3c
 8005e92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e94:	4013      	ands	r3, r2
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2103      	movs	r1, #3
 8005e9e:	2011      	movs	r0, #17
 8005ea0:	f000 fde6 	bl	8006a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005ea4:	2011      	movs	r0, #17
 8005ea6:	f000 fe15 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
}
 8005eaa:	e7eb      	b.n	8005e84 <HAL_TIM_Base_MspInit+0xc>
 8005eac:	40001000 	.word	0x40001000
 8005eb0:	40021000 	.word	0x40021000

08005eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005eb4:	b530      	push	{r4, r5, lr}
 8005eb6:	b093      	sub	sp, #76	; 0x4c
 8005eb8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eba:	2214      	movs	r2, #20
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	a80d      	add	r0, sp, #52	; 0x34
 8005ec0:	f007 fa96 	bl	800d3f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ec4:	221c      	movs	r2, #28
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	a806      	add	r0, sp, #24
 8005eca:	f007 fa91 	bl	800d3f0 <memset>
  if(huart->Instance==USART1)
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	4a6e      	ldr	r2, [pc, #440]	; (800608c <HAL_UART_MspInit+0x1d8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d008      	beq.n	8005ee8 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8005ed6:	4a6e      	ldr	r2, [pc, #440]	; (8006090 <HAL_UART_MspInit+0x1dc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d050      	beq.n	8005f7e <HAL_UART_MspInit+0xca>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005edc:	4a6d      	ldr	r2, [pc, #436]	; (8006094 <HAL_UART_MspInit+0x1e0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d100      	bne.n	8005ee4 <HAL_UART_MspInit+0x30>
 8005ee2:	e096      	b.n	8006012 <HAL_UART_MspInit+0x15e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005ee4:	b013      	add	sp, #76	; 0x4c
 8005ee6:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005eec:	a806      	add	r0, sp, #24
 8005eee:	f002 f911 	bl	8008114 <HAL_RCCEx_PeriphCLKConfig>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d13d      	bne.n	8005f72 <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005ef6:	4b68      	ldr	r3, [pc, #416]	; (8006098 <HAL_UART_MspInit+0x1e4>)
 8005ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	01c9      	lsls	r1, r1, #7
 8005efe:	430a      	orrs	r2, r1
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40
 8005f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f04:	400a      	ands	r2, r1
 8005f06:	9200      	str	r2, [sp, #0]
 8005f08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4311      	orrs	r1, r2
 8005f10:	6359      	str	r1, [r3, #52]	; 0x34
 8005f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f14:	4013      	ands	r3, r2
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 8005f1a:	23c0      	movs	r3, #192	; 0xc0
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f20:	2302      	movs	r3, #2
 8005f22:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f24:	2500      	movs	r5, #0
 8005f26:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f28:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005f2a:	9211      	str	r2, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f2c:	20a0      	movs	r0, #160	; 0xa0
 8005f2e:	a90d      	add	r1, sp, #52	; 0x34
 8005f30:	05c0      	lsls	r0, r0, #23
 8005f32:	f000 ffe5 	bl	8006f00 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8005f36:	4859      	ldr	r0, [pc, #356]	; (800609c <HAL_UART_MspInit+0x1e8>)
 8005f38:	4b59      	ldr	r3, [pc, #356]	; (80060a0 <HAL_UART_MspInit+0x1ec>)
 8005f3a:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005f3c:	2332      	movs	r3, #50	; 0x32
 8005f3e:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f40:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f42:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f44:	334e      	adds	r3, #78	; 0x4e
 8005f46:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f48:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f4a:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005f4c:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f4e:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005f50:	f000 fe0a 	bl	8006b68 <HAL_DMA_Init>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d10f      	bne.n	8005f78 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005f58:	4b50      	ldr	r3, [pc, #320]	; (800609c <HAL_UART_MspInit+0x1e8>)
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	50a3      	str	r3, [r4, r2]
 8005f5e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8005f60:	2200      	movs	r2, #0
 8005f62:	2103      	movs	r1, #3
 8005f64:	201b      	movs	r0, #27
 8005f66:	f000 fd83 	bl	8006a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005f6a:	201b      	movs	r0, #27
 8005f6c:	f000 fdb2 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
 8005f70:	e7b8      	b.n	8005ee4 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8005f72:	f7ff fe89 	bl	8005c88 <Error_Handler>
 8005f76:	e7be      	b.n	8005ef6 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8005f78:	f7ff fe86 	bl	8005c88 <Error_Handler>
 8005f7c:	e7ec      	b.n	8005f58 <HAL_UART_MspInit+0xa4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f82:	a806      	add	r0, sp, #24
 8005f84:	f002 f8c6 	bl	8008114 <HAL_RCCEx_PeriphCLKConfig>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d13c      	bne.n	8006006 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f8c:	4b42      	ldr	r3, [pc, #264]	; (8006098 <HAL_UART_MspInit+0x1e4>)
 8005f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f90:	2180      	movs	r1, #128	; 0x80
 8005f92:	0289      	lsls	r1, r1, #10
 8005f94:	430a      	orrs	r2, r1
 8005f96:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9a:	400a      	ands	r2, r1
 8005f9c:	9202      	str	r2, [sp, #8]
 8005f9e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	4311      	orrs	r1, r2
 8005fa6:	6359      	str	r1, [r3, #52]	; 0x34
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	4013      	ands	r3, r2
 8005fac:	9303      	str	r3, [sp, #12]
 8005fae:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb4:	3b0a      	subs	r3, #10
 8005fb6:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb8:	2500      	movs	r5, #0
 8005fba:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fbc:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005fbe:	9211      	str	r2, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc0:	20a0      	movs	r0, #160	; 0xa0
 8005fc2:	a90d      	add	r1, sp, #52	; 0x34
 8005fc4:	05c0      	lsls	r0, r0, #23
 8005fc6:	f000 ff9b 	bl	8006f00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8005fca:	4836      	ldr	r0, [pc, #216]	; (80060a4 <HAL_UART_MspInit+0x1f0>)
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <HAL_UART_MspInit+0x1f4>)
 8005fce:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005fd0:	2334      	movs	r3, #52	; 0x34
 8005fd2:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fd4:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fd6:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fd8:	334c      	adds	r3, #76	; 0x4c
 8005fda:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fdc:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fde:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005fe0:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fe2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005fe4:	f000 fdc0 	bl	8006b68 <HAL_DMA_Init>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d10f      	bne.n	800600c <HAL_UART_MspInit+0x158>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005fec:	4b2d      	ldr	r3, [pc, #180]	; (80060a4 <HAL_UART_MspInit+0x1f0>)
 8005fee:	2280      	movs	r2, #128	; 0x80
 8005ff0:	50a3      	str	r3, [r4, r2]
 8005ff2:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2103      	movs	r1, #3
 8005ff8:	201c      	movs	r0, #28
 8005ffa:	f000 fd39 	bl	8006a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005ffe:	201c      	movs	r0, #28
 8006000:	f000 fd68 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
 8006004:	e76e      	b.n	8005ee4 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8006006:	f7ff fe3f 	bl	8005c88 <Error_Handler>
 800600a:	e7bf      	b.n	8005f8c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800600c:	f7ff fe3c 	bl	8005c88 <Error_Handler>
 8006010:	e7ec      	b.n	8005fec <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006012:	4b21      	ldr	r3, [pc, #132]	; (8006098 <HAL_UART_MspInit+0x1e4>)
 8006014:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	02c9      	lsls	r1, r1, #11
 800601a:	430a      	orrs	r2, r1
 800601c:	63da      	str	r2, [r3, #60]	; 0x3c
 800601e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006020:	400a      	ands	r2, r1
 8006022:	9204      	str	r2, [sp, #16]
 8006024:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006026:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006028:	2202      	movs	r2, #2
 800602a:	4311      	orrs	r1, r2
 800602c:	6359      	str	r1, [r3, #52]	; 0x34
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	4013      	ands	r3, r2
 8006032:	9305      	str	r3, [sp, #20]
 8006034:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8006036:	2305      	movs	r3, #5
 8006038:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603a:	920e      	str	r2, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800603c:	3b01      	subs	r3, #1
 800603e:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006040:	a90d      	add	r1, sp, #52	; 0x34
 8006042:	481a      	ldr	r0, [pc, #104]	; (80060ac <HAL_UART_MspInit+0x1f8>)
 8006044:	f000 ff5c 	bl	8006f00 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8006048:	4819      	ldr	r0, [pc, #100]	; (80060b0 <HAL_UART_MspInit+0x1fc>)
 800604a:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <HAL_UART_MspInit+0x200>)
 800604c:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800604e:	2337      	movs	r3, #55	; 0x37
 8006050:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006052:	3b27      	subs	r3, #39	; 0x27
 8006054:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006056:	2300      	movs	r3, #0
 8006058:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800605a:	2280      	movs	r2, #128	; 0x80
 800605c:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800605e:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006060:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006062:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006064:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006066:	f000 fd7f 	bl	8006b68 <HAL_DMA_Init>
 800606a:	2800      	cmp	r0, #0
 800606c:	d10b      	bne.n	8006086 <HAL_UART_MspInit+0x1d2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_UART_MspInit+0x1fc>)
 8006070:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006072:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8006074:	2200      	movs	r2, #0
 8006076:	2103      	movs	r1, #3
 8006078:	201d      	movs	r0, #29
 800607a:	f000 fcf9 	bl	8006a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800607e:	201d      	movs	r0, #29
 8006080:	f000 fd28 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
}
 8006084:	e72e      	b.n	8005ee4 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8006086:	f7ff fdff 	bl	8005c88 <Error_Handler>
 800608a:	e7f0      	b.n	800606e <HAL_UART_MspInit+0x1ba>
 800608c:	40013800 	.word	0x40013800
 8006090:	40004400 	.word	0x40004400
 8006094:	40004800 	.word	0x40004800
 8006098:	40021000 	.word	0x40021000
 800609c:	20004214 	.word	0x20004214
 80060a0:	4002001c 	.word	0x4002001c
 80060a4:	20004270 	.word	0x20004270
 80060a8:	40020030 	.word	0x40020030
 80060ac:	50000400 	.word	0x50000400
 80060b0:	200042cc 	.word	0x200042cc
 80060b4:	40020044 	.word	0x40020044

080060b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060b8:	b530      	push	{r4, r5, lr}
 80060ba:	b087      	sub	sp, #28
 80060bc:	0005      	movs	r5, r0
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80060be:	4b20      	ldr	r3, [pc, #128]	; (8006140 <HAL_InitTick+0x88>)
 80060c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	0109      	lsls	r1, r1, #4
 80060c6:	430a      	orrs	r2, r1
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	400b      	ands	r3, r1
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80060d2:	a901      	add	r1, sp, #4
 80060d4:	a802      	add	r0, sp, #8
 80060d6:	f002 f803 	bl	80080e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80060da:	9b05      	ldr	r3, [sp, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d117      	bne.n	8006110 <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80060e0:	f001 ffea 	bl	80080b8 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80060e4:	4c17      	ldr	r4, [pc, #92]	; (8006144 <HAL_InitTick+0x8c>)
 80060e6:	4b18      	ldr	r3, [pc, #96]	; (8006148 <HAL_InitTick+0x90>)
 80060e8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80060ea:	4b18      	ldr	r3, [pc, #96]	; (800614c <HAL_InitTick+0x94>)
 80060ec:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80060ee:	4918      	ldr	r1, [pc, #96]	; (8006150 <HAL_InitTick+0x98>)
 80060f0:	f7fa f826 	bl	8000140 <__udivsi3>
 80060f4:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80060f6:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060fc:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060fe:	61a3      	str	r3, [r4, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006100:	0020      	movs	r0, r4
 8006102:	f002 fe1b 	bl	8008d3c <HAL_TIM_Base_Init>
 8006106:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 8006108:	d006      	beq.n	8006118 <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 800610a:	0020      	movs	r0, r4
 800610c:	b007      	add	sp, #28
 800610e:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006110:	f001 ffd2 	bl	80080b8 <HAL_RCC_GetPCLK1Freq>
 8006114:	0040      	lsls	r0, r0, #1
 8006116:	e7e5      	b.n	80060e4 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006118:	480a      	ldr	r0, [pc, #40]	; (8006144 <HAL_InitTick+0x8c>)
 800611a:	f002 fc99 	bl	8008a50 <HAL_TIM_Base_Start_IT>
 800611e:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 8006120:	d1f3      	bne.n	800610a <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8006122:	200d      	movs	r0, #13
 8006124:	f000 fcd6 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006128:	2d03      	cmp	r5, #3
 800612a:	d901      	bls.n	8006130 <HAL_InitTick+0x78>
        status = HAL_ERROR;
 800612c:	2401      	movs	r4, #1
 800612e:	e7ec      	b.n	800610a <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8006130:	2200      	movs	r2, #0
 8006132:	0029      	movs	r1, r5
 8006134:	200d      	movs	r0, #13
 8006136:	f000 fc9b 	bl	8006a70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800613a:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_InitTick+0x9c>)
 800613c:	601d      	str	r5, [r3, #0]
 800613e:	e7e4      	b.n	800610a <HAL_InitTick+0x52>
 8006140:	40021000 	.word	0x40021000
 8006144:	200045f4 	.word	0x200045f4
 8006148:	40012c00 	.word	0x40012c00
 800614c:	000003e7 	.word	0x000003e7
 8006150:	000f4240 	.word	0x000f4240
 8006154:	20000028 	.word	0x20000028

08006158 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006158:	e7fe      	b.n	8006158 <NMI_Handler>

0800615a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800615a:	e7fe      	b.n	800615a <HardFault_Handler>

0800615c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800615c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800615e:	4802      	ldr	r0, [pc, #8]	; (8006168 <DMA1_Channel1_IRQHandler+0xc>)
 8006160:	f000 fe34 	bl	8006dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006164:	bd10      	pop	{r4, pc}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	200041b8 	.word	0x200041b8

0800616c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800616c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800616e:	4803      	ldr	r0, [pc, #12]	; (800617c <DMA1_Channel2_3_IRQHandler+0x10>)
 8006170:	f000 fe2c 	bl	8006dcc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006174:	4802      	ldr	r0, [pc, #8]	; (8006180 <DMA1_Channel2_3_IRQHandler+0x14>)
 8006176:	f000 fe29 	bl	8006dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800617a:	bd10      	pop	{r4, pc}
 800617c:	20004214 	.word	0x20004214
 8006180:	20004270 	.word	0x20004270

08006184 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8006184:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006186:	4803      	ldr	r0, [pc, #12]	; (8006194 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8006188:	f000 fe20 	bl	8006dcc <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 800618c:	4802      	ldr	r0, [pc, #8]	; (8006198 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800618e:	f000 fe83 	bl	8006e98 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8006192:	bd10      	pop	{r4, pc}
 8006194:	200042cc 	.word	0x200042cc
 8006198:	200041b8 	.word	0x200041b8

0800619c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800619c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800619e:	4802      	ldr	r0, [pc, #8]	; (80061a8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80061a0:	f002 fc92 	bl	8008ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80061a4:	bd10      	pop	{r4, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	200045f4 	.word	0x200045f4

080061ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80061ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80061ae:	4802      	ldr	r0, [pc, #8]	; (80061b8 <TIM6_IRQHandler+0xc>)
 80061b0:	f002 fc8a 	bl	8008ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80061b4:	bd10      	pop	{r4, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	200043e0 	.word	0x200043e0

080061bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80061bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80061be:	4802      	ldr	r0, [pc, #8]	; (80061c8 <USART1_IRQHandler+0xc>)
 80061c0:	f002 feb2 	bl	8008f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	2000442c 	.word	0x2000442c

080061cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80061cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80061ce:	4802      	ldr	r0, [pc, #8]	; (80061d8 <USART2_IRQHandler+0xc>)
 80061d0:	f002 feaa 	bl	8008f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	200044c0 	.word	0x200044c0

080061dc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80061dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80061de:	4802      	ldr	r0, [pc, #8]	; (80061e8 <USART3_4_IRQHandler+0xc>)
 80061e0:	f002 fea2 	bl	8008f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	20004554 	.word	0x20004554

080061ec <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80061ec:	2001      	movs	r0, #1
 80061ee:	4770      	bx	lr

080061f0 <_kill>:

int _kill(int pid, int sig)
{
 80061f0:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80061f2:	f007 fa85 	bl	800d700 <__errno>
 80061f6:	2316      	movs	r3, #22
 80061f8:	6003      	str	r3, [r0, #0]
  return -1;
 80061fa:	2001      	movs	r0, #1
}
 80061fc:	4240      	negs	r0, r0
 80061fe:	bd10      	pop	{r4, pc}

08006200 <_exit>:

void _exit (int status)
{
 8006200:	b510      	push	{r4, lr}
  errno = EINVAL;
 8006202:	f007 fa7d 	bl	800d700 <__errno>
 8006206:	2316      	movs	r3, #22
 8006208:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800620a:	e7fe      	b.n	800620a <_exit+0xa>

0800620c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006210:	dd07      	ble.n	8006222 <_read+0x16>
 8006212:	000c      	movs	r4, r1
 8006214:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8006216:	e000      	b.n	800621a <_read+0xe>
 8006218:	bf00      	nop
 800621a:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800621c:	3401      	adds	r4, #1
 800621e:	42ac      	cmp	r4, r5
 8006220:	d1f9      	bne.n	8006216 <_read+0xa>
  }

  return len;
}
 8006222:	0030      	movs	r0, r6
 8006224:	bd70      	pop	{r4, r5, r6, pc}

08006226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006226:	b570      	push	{r4, r5, r6, lr}
 8006228:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800622a:	dd07      	ble.n	800623c <_write+0x16>
 800622c:	000c      	movs	r4, r1
 800622e:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8006230:	7820      	ldrb	r0, [r4, #0]
 8006232:	e000      	b.n	8006236 <_write+0x10>
 8006234:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006236:	3401      	adds	r4, #1
 8006238:	42ac      	cmp	r4, r5
 800623a:	d1f9      	bne.n	8006230 <_write+0xa>
  }
  return len;
}
 800623c:	0030      	movs	r0, r6
 800623e:	bd70      	pop	{r4, r5, r6, pc}

08006240 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8006240:	2001      	movs	r0, #1
}
 8006242:	4240      	negs	r0, r0
 8006244:	4770      	bx	lr

08006246 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006246:	2380      	movs	r3, #128	; 0x80
 8006248:	019b      	lsls	r3, r3, #6
 800624a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800624c:	2000      	movs	r0, #0
 800624e:	4770      	bx	lr

08006250 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006250:	2001      	movs	r0, #1
 8006252:	4770      	bx	lr

08006254 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006254:	2000      	movs	r0, #0
 8006256:	4770      	bx	lr

08006258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006258:	b510      	push	{r4, lr}
 800625a:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800625c:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <_sbrk+0x38>)
 800625e:	490d      	ldr	r1, [pc, #52]	; (8006294 <_sbrk+0x3c>)
 8006260:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006262:	490d      	ldr	r1, [pc, #52]	; (8006298 <_sbrk+0x40>)
 8006264:	6809      	ldr	r1, [r1, #0]
 8006266:	2900      	cmp	r1, #0
 8006268:	d007      	beq.n	800627a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800626a:	490b      	ldr	r1, [pc, #44]	; (8006298 <_sbrk+0x40>)
 800626c:	6808      	ldr	r0, [r1, #0]
 800626e:	18c3      	adds	r3, r0, r3
 8006270:	4293      	cmp	r3, r2
 8006272:	d806      	bhi.n	8006282 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006274:	4a08      	ldr	r2, [pc, #32]	; (8006298 <_sbrk+0x40>)
 8006276:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8006278:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800627a:	4907      	ldr	r1, [pc, #28]	; (8006298 <_sbrk+0x40>)
 800627c:	4807      	ldr	r0, [pc, #28]	; (800629c <_sbrk+0x44>)
 800627e:	6008      	str	r0, [r1, #0]
 8006280:	e7f3      	b.n	800626a <_sbrk+0x12>
    errno = ENOMEM;
 8006282:	f007 fa3d 	bl	800d700 <__errno>
 8006286:	230c      	movs	r3, #12
 8006288:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800628a:	2001      	movs	r0, #1
 800628c:	4240      	negs	r0, r0
 800628e:	e7f3      	b.n	8006278 <_sbrk+0x20>
 8006290:	20009000 	.word	0x20009000
 8006294:	00000400 	.word	0x00000400
 8006298:	20004640 	.word	0x20004640
 800629c:	20006170 	.word	0x20006170

080062a0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062a0:	4770      	bx	lr
	...

080062a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80062a4:	480d      	ldr	r0, [pc, #52]	; (80062dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80062a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80062a8:	f7ff fffa 	bl	80062a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062ac:	480c      	ldr	r0, [pc, #48]	; (80062e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80062ae:	490d      	ldr	r1, [pc, #52]	; (80062e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062b0:	4a0d      	ldr	r2, [pc, #52]	; (80062e8 <LoopForever+0xe>)
  movs r3, #0
 80062b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062b4:	e002      	b.n	80062bc <LoopCopyDataInit>

080062b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062ba:	3304      	adds	r3, #4

080062bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062c0:	d3f9      	bcc.n	80062b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062c2:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80062c4:	4c0a      	ldr	r4, [pc, #40]	; (80062f0 <LoopForever+0x16>)
  movs r3, #0
 80062c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062c8:	e001      	b.n	80062ce <LoopFillZerobss>

080062ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062cc:	3204      	adds	r2, #4

080062ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062d0:	d3fb      	bcc.n	80062ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80062d2:	f007 fa1b 	bl	800d70c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80062d6:	f7fe f873 	bl	80043c0 <main>

080062da <LoopForever>:

LoopForever:
  b LoopForever
 80062da:	e7fe      	b.n	80062da <LoopForever>
  ldr   r0, =_estack
 80062dc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80062e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062e4:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80062e8:	080124b8 	.word	0x080124b8
  ldr r2, =_sbss
 80062ec:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80062f0:	20006170 	.word	0x20006170

080062f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062f4:	e7fe      	b.n	80062f4 <ADC1_IRQHandler>
	...

080062f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062f8:	b510      	push	{r4, lr}
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062fa:	4a08      	ldr	r2, [pc, #32]	; (800631c <HAL_Init+0x24>)
 80062fc:	6811      	ldr	r1, [r2, #0]
 80062fe:	2380      	movs	r3, #128	; 0x80
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	430b      	orrs	r3, r1
 8006304:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006306:	2003      	movs	r0, #3
 8006308:	f7ff fed6 	bl	80060b8 <HAL_InitTick>
 800630c:	1e04      	subs	r4, r0, #0
 800630e:	d002      	beq.n	8006316 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8006310:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8006312:	0020      	movs	r0, r4
 8006314:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8006316:	f7ff fcb9 	bl	8005c8c <HAL_MspInit>
 800631a:	e7fa      	b.n	8006312 <HAL_Init+0x1a>
 800631c:	40022000 	.word	0x40022000

08006320 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006320:	4a03      	ldr	r2, [pc, #12]	; (8006330 <HAL_IncTick+0x10>)
 8006322:	6811      	ldr	r1, [r2, #0]
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <HAL_IncTick+0x14>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	185b      	adds	r3, r3, r1
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	4770      	bx	lr
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	20004644 	.word	0x20004644
 8006334:	20000024 	.word	0x20000024

08006338 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006338:	4b01      	ldr	r3, [pc, #4]	; (8006340 <HAL_GetTick+0x8>)
 800633a:	6818      	ldr	r0, [r3, #0]
}
 800633c:	4770      	bx	lr
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	20004644 	.word	0x20004644

08006344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006348:	f7ff fff6 	bl	8006338 <HAL_GetTick>
 800634c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800634e:	1c63      	adds	r3, r4, #1
 8006350:	d002      	beq.n	8006358 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006352:	4b04      	ldr	r3, [pc, #16]	; (8006364 <HAL_Delay+0x20>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006358:	f7ff ffee 	bl	8006338 <HAL_GetTick>
 800635c:	1b40      	subs	r0, r0, r5
 800635e:	42a0      	cmp	r0, r4
 8006360:	d3fa      	bcc.n	8006358 <HAL_Delay+0x14>
  {
  }
}
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	20000024 	.word	0x20000024

08006368 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006368:	4a03      	ldr	r2, [pc, #12]	; (8006378 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 800636a:	6813      	ldr	r3, [r2, #0]
 800636c:	4903      	ldr	r1, [pc, #12]	; (800637c <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 800636e:	400b      	ands	r3, r1
 8006370:	4303      	orrs	r3, r0
 8006372:	6013      	str	r3, [r2, #0]
}
 8006374:	4770      	bx	lr
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	40010000 	.word	0x40010000
 800637c:	fffff9ff 	.word	0xfffff9ff

08006380 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	b083      	sub	sp, #12
 8006384:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006386:	2300      	movs	r3, #0
 8006388:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800638a:	2800      	cmp	r0, #0
 800638c:	d100      	bne.n	8006390 <HAL_ADC_Init+0x10>
 800638e:	e0ff      	b.n	8006590 <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006390:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006392:	2b00      	cmp	r3, #0
 8006394:	d100      	bne.n	8006398 <HAL_ADC_Init+0x18>
 8006396:	e0b6      	b.n	8006506 <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006398:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	00d2      	lsls	r2, r2, #3
 800639e:	d417      	bmi.n	80063d0 <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 80063a0:	6899      	ldr	r1, [r3, #8]
 80063a2:	4a7c      	ldr	r2, [pc, #496]	; (8006594 <HAL_ADC_Init+0x214>)
 80063a4:	4011      	ands	r1, r2
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	0552      	lsls	r2, r2, #21
 80063aa:	430a      	orrs	r2, r1
 80063ac:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063ae:	4b7a      	ldr	r3, [pc, #488]	; (8006598 <HAL_ADC_Init+0x218>)
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	497a      	ldr	r1, [pc, #488]	; (800659c <HAL_ADC_Init+0x21c>)
 80063b4:	f7f9 fec4 	bl	8000140 <__udivsi3>
 80063b8:	3001      	adds	r0, #1
 80063ba:	0040      	lsls	r0, r0, #1
 80063bc:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f9      	bne.n	80063c4 <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063d0:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80063d2:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063d4:	2000      	movs	r0, #0
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	d408      	bmi.n	80063ec <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063dc:	2210      	movs	r2, #16
 80063de:	4313      	orrs	r3, r2
 80063e0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063e4:	3a0f      	subs	r2, #15
 80063e6:	4313      	orrs	r3, r2
 80063e8:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80063ea:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063ec:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063ee:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80063f0:	2310      	movs	r3, #16
 80063f2:	4013      	ands	r3, r2
 80063f4:	2204      	movs	r2, #4
 80063f6:	402a      	ands	r2, r5
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d000      	beq.n	80063fe <HAL_ADC_Init+0x7e>
 80063fc:	e0c1      	b.n	8006582 <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006400:	4a67      	ldr	r2, [pc, #412]	; (80065a0 <HAL_ADC_Init+0x220>)
 8006402:	4013      	ands	r3, r2
 8006404:	3206      	adds	r2, #6
 8006406:	32ff      	adds	r2, #255	; 0xff
 8006408:	4313      	orrs	r3, r2
 800640a:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800640c:	688b      	ldr	r3, [r1, #8]
 800640e:	07db      	lsls	r3, r3, #31
 8006410:	d44f      	bmi.n	80064b2 <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006412:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006414:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006416:	1e73      	subs	r3, r6, #1
 8006418:	419e      	sbcs	r6, r3
 800641a:	0336      	lsls	r6, r6, #12
 800641c:	68a2      	ldr	r2, [r4, #8]
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006422:	7e23      	ldrb	r3, [r4, #24]
 8006424:	039b      	lsls	r3, r3, #14
 8006426:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006428:	7e63      	ldrb	r3, [r4, #25]
 800642a:	03db      	lsls	r3, r3, #15
 800642c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800642e:	036b      	lsls	r3, r5, #13
 8006430:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	db6d      	blt.n	8006514 <HAL_ADC_Init+0x194>
 8006438:	2780      	movs	r7, #128	; 0x80
 800643a:	03bf      	lsls	r7, r7, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800643c:	232c      	movs	r3, #44	; 0x2c
 800643e:	5ce3      	ldrb	r3, [r4, r3]
 8006440:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006442:	4313      	orrs	r3, r2
 8006444:	4333      	orrs	r3, r6
 8006446:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006448:	2220      	movs	r2, #32
 800644a:	5ca2      	ldrb	r2, [r4, r2]
 800644c:	2a01      	cmp	r2, #1
 800644e:	d064      	beq.n	800651a <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006450:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006452:	2a00      	cmp	r2, #0
 8006454:	d005      	beq.n	8006462 <HAL_ADC_Init+0xe2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006456:	25e0      	movs	r5, #224	; 0xe0
 8006458:	006d      	lsls	r5, r5, #1
 800645a:	402a      	ands	r2, r5
 800645c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800645e:	432a      	orrs	r2, r5
 8006460:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006462:	68ca      	ldr	r2, [r1, #12]
 8006464:	4d4f      	ldr	r5, [pc, #316]	; (80065a4 <HAL_ADC_Init+0x224>)
 8006466:	402a      	ands	r2, r5
 8006468:	4313      	orrs	r3, r2
 800646a:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	0f9b      	lsrs	r3, r3, #30
 8006470:	079b      	lsls	r3, r3, #30
 8006472:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006474:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006476:	213c      	movs	r1, #60	; 0x3c
 8006478:	5c61      	ldrb	r1, [r4, r1]
 800647a:	2901      	cmp	r1, #1
 800647c:	d05c      	beq.n	8006538 <HAL_ADC_Init+0x1b8>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800647e:	6821      	ldr	r1, [r4, #0]
 8006480:	690b      	ldr	r3, [r1, #16]
 8006482:	4d49      	ldr	r5, [pc, #292]	; (80065a8 <HAL_ADC_Init+0x228>)
 8006484:	402b      	ands	r3, r5
 8006486:	4313      	orrs	r3, r2
 8006488:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800648a:	6862      	ldr	r2, [r4, #4]
 800648c:	0053      	lsls	r3, r2, #1
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	2180      	movs	r1, #128	; 0x80
 8006492:	05c9      	lsls	r1, r1, #23
 8006494:	428b      	cmp	r3, r1
 8006496:	d00c      	beq.n	80064b2 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	429a      	cmp	r2, r3
 800649e:	d008      	beq.n	80064b2 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80064a0:	4942      	ldr	r1, [pc, #264]	; (80065ac <HAL_ADC_Init+0x22c>)
 80064a2:	680b      	ldr	r3, [r1, #0]
 80064a4:	4d42      	ldr	r5, [pc, #264]	; (80065b0 <HAL_ADC_Init+0x230>)
 80064a6:	402b      	ands	r3, r5
 80064a8:	25f0      	movs	r5, #240	; 0xf0
 80064aa:	03ad      	lsls	r5, r5, #14
 80064ac:	402a      	ands	r2, r5
 80064ae:	4313      	orrs	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80064b2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 80064b4:	6953      	ldr	r3, [r2, #20]
 80064b6:	2107      	movs	r1, #7
 80064b8:	438b      	bics	r3, r1
 80064ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064bc:	430b      	orrs	r3, r1
 80064be:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80064c0:	6821      	ldr	r1, [r4, #0]
 80064c2:	694a      	ldr	r2, [r1, #20]
 80064c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	2570      	movs	r5, #112	; 0x70
 80064ca:	43aa      	bics	r2, r5
 80064cc:	4313      	orrs	r3, r2
 80064ce:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d13a      	bne.n	800654c <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064da:	3b10      	subs	r3, #16
 80064dc:	430b      	orrs	r3, r1
 80064de:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80064e0:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	2307      	movs	r3, #7
 80064e6:	4013      	ands	r3, r2
 80064e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d040      	beq.n	8006570 <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80064ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064f0:	2212      	movs	r2, #18
 80064f2:	4393      	bics	r3, r2
 80064f4:	3a02      	subs	r2, #2
 80064f6:	4313      	orrs	r3, r2
 80064f8:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80064fc:	3a0f      	subs	r2, #15
 80064fe:	4313      	orrs	r3, r2
 8006500:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8006502:	2001      	movs	r0, #1
 8006504:	e042      	b.n	800658c <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 8006506:	f7ff fbe3 	bl	8005cd0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800650a:	2300      	movs	r3, #0
 800650c:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800650e:	2254      	movs	r2, #84	; 0x54
 8006510:	54a3      	strb	r3, [r4, r2]
 8006512:	e741      	b.n	8006398 <HAL_ADC_Init+0x18>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	085f      	lsrs	r7, r3, #1
 8006518:	e790      	b.n	800643c <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800651a:	2d00      	cmp	r5, #0
 800651c:	d103      	bne.n	8006526 <HAL_ADC_Init+0x1a6>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800651e:	2280      	movs	r2, #128	; 0x80
 8006520:	0252      	lsls	r2, r2, #9
 8006522:	4313      	orrs	r3, r2
 8006524:	e794      	b.n	8006450 <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006526:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006528:	2520      	movs	r5, #32
 800652a:	432a      	orrs	r2, r5
 800652c:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800652e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006530:	3d1f      	subs	r5, #31
 8006532:	432a      	orrs	r2, r5
 8006534:	65e2      	str	r2, [r4, #92]	; 0x5c
 8006536:	e78b      	b.n	8006450 <HAL_ADC_Init+0xd0>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8006538:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800653a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800653c:	4329      	orrs	r1, r5
 800653e:	430a      	orrs	r2, r1
 8006540:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006542:	430a      	orrs	r2, r1
 8006544:	4313      	orrs	r3, r2
 8006546:	2201      	movs	r2, #1
 8006548:	431a      	orrs	r2, r3
 800654a:	e798      	b.n	800647e <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800654c:	2280      	movs	r2, #128	; 0x80
 800654e:	0392      	lsls	r2, r2, #14
 8006550:	4293      	cmp	r3, r2
 8006552:	d1c5      	bne.n	80064e0 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 8006554:	6821      	ldr	r1, [r4, #0]
 8006556:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006558:	69e3      	ldr	r3, [r4, #28]
 800655a:	3b01      	subs	r3, #1
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	221c      	movs	r2, #28
 8006560:	401a      	ands	r2, r3
 8006562:	2310      	movs	r3, #16
 8006564:	425b      	negs	r3, r3
 8006566:	4093      	lsls	r3, r2
 8006568:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800656a:	4313      	orrs	r3, r2
 800656c:	628b      	str	r3, [r1, #40]	; 0x28
 800656e:	e7b7      	b.n	80064e0 <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 8006570:	2300      	movs	r3, #0
 8006572:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8006574:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006576:	2203      	movs	r2, #3
 8006578:	4393      	bics	r3, r2
 800657a:	3a02      	subs	r2, #2
 800657c:	4313      	orrs	r3, r2
 800657e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006580:	e004      	b.n	800658c <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006584:	2210      	movs	r2, #16
 8006586:	4313      	orrs	r3, r2
 8006588:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800658a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800658c:	b003      	add	sp, #12
 800658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006590:	2001      	movs	r0, #1
 8006592:	e7fb      	b.n	800658c <HAL_ADC_Init+0x20c>
 8006594:	6fffffe8 	.word	0x6fffffe8
 8006598:	20000020 	.word	0x20000020
 800659c:	00030d40 	.word	0x00030d40
 80065a0:	fffffefd 	.word	0xfffffefd
 80065a4:	fffe0201 	.word	0xfffe0201
 80065a8:	1ffffc02 	.word	0x1ffffc02
 80065ac:	40012708 	.word	0x40012708
 80065b0:	ffc3ffff 	.word	0xffc3ffff

080065b4 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80065b4:	4770      	bx	lr

080065b6 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80065b6:	4770      	bx	lr

080065b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80065b8:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80065bc:	f7ff fffb 	bl	80065b6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065c0:	bd10      	pop	{r4, pc}

080065c2 <HAL_ADC_ErrorCallback>:
}
 80065c2:	4770      	bx	lr

080065c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80065c4:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c6:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80065c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	4313      	orrs	r3, r2
 80065ce:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80065d0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80065d2:	3a3c      	subs	r2, #60	; 0x3c
 80065d4:	4313      	orrs	r3, r2
 80065d6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80065d8:	f7ff fff3 	bl	80065c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065dc:	bd10      	pop	{r4, pc}
	...

080065e0 <ADC_DMAConvCplt>:
{
 80065e0:	b510      	push	{r4, lr}
 80065e2:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80065e6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80065e8:	2150      	movs	r1, #80	; 0x50
 80065ea:	4211      	tst	r1, r2
 80065ec:	d12a      	bne.n	8006644 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065ee:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80065f0:	2380      	movs	r3, #128	; 0x80
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4313      	orrs	r3, r2
 80065f6:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80065f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80065fa:	68d9      	ldr	r1, [r3, #12]
 80065fc:	22c0      	movs	r2, #192	; 0xc0
 80065fe:	0112      	lsls	r2, r2, #4
 8006600:	4211      	tst	r1, r2
 8006602:	d113      	bne.n	800662c <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006604:	7e82      	ldrb	r2, [r0, #26]
 8006606:	2a00      	cmp	r2, #0
 8006608:	d110      	bne.n	800662c <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	0712      	lsls	r2, r2, #28
 800660e:	d50d      	bpl.n	800662c <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	0752      	lsls	r2, r2, #29
 8006614:	d40d      	bmi.n	8006632 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	210c      	movs	r1, #12
 800661a:	438a      	bics	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800661e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006620:	4a0e      	ldr	r2, [pc, #56]	; (800665c <ADC_DMAConvCplt+0x7c>)
 8006622:	4013      	ands	r3, r2
 8006624:	3204      	adds	r2, #4
 8006626:	32ff      	adds	r2, #255	; 0xff
 8006628:	4313      	orrs	r3, r2
 800662a:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800662c:	f7ff ffc2 	bl	80065b4 <HAL_ADC_ConvCpltCallback>
}
 8006630:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006632:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006634:	2220      	movs	r2, #32
 8006636:	4313      	orrs	r3, r2
 8006638:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800663a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800663c:	3a1f      	subs	r2, #31
 800663e:	4313      	orrs	r3, r2
 8006640:	65c3      	str	r3, [r0, #92]	; 0x5c
 8006642:	e7f3      	b.n	800662c <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006644:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006646:	06d2      	lsls	r2, r2, #27
 8006648:	d404      	bmi.n	8006654 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800664a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800664c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800664e:	0018      	movs	r0, r3
 8006650:	4790      	blx	r2
}
 8006652:	e7ed      	b.n	8006630 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8006654:	f7ff ffb5 	bl	80065c2 <HAL_ADC_ErrorCallback>
 8006658:	e7ea      	b.n	8006630 <ADC_DMAConvCplt+0x50>
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	fffffefe 	.word	0xfffffefe

08006660 <HAL_ADC_ConfigChannel>:
{
 8006660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006662:	b083      	sub	sp, #12
 8006664:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8006666:	2300      	movs	r3, #0
 8006668:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800666a:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 800666c:	3354      	adds	r3, #84	; 0x54
 800666e:	5cc3      	ldrb	r3, [r0, r3]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d100      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x16>
 8006674:	e11e      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x254>
 8006676:	2354      	movs	r3, #84	; 0x54
 8006678:	2201      	movs	r2, #1
 800667a:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800667c:	6800      	ldr	r0, [r0, #0]
 800667e:	6883      	ldr	r3, [r0, #8]
 8006680:	3203      	adds	r2, #3
 8006682:	0017      	movs	r7, r2
 8006684:	401f      	ands	r7, r3
 8006686:	421a      	tst	r2, r3
 8006688:	d009      	beq.n	800669e <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800668a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800668c:	321c      	adds	r2, #28
 800668e:	4313      	orrs	r3, r2
 8006690:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8006692:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8006694:	2354      	movs	r3, #84	; 0x54
 8006696:	2200      	movs	r2, #0
 8006698:	54e2      	strb	r2, [r4, r3]
}
 800669a:	b003      	add	sp, #12
 800669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 800669e:	684a      	ldr	r2, [r1, #4]
 80066a0:	2a02      	cmp	r2, #2
 80066a2:	d100      	bne.n	80066a6 <HAL_ADC_ConfigChannel+0x46>
 80066a4:	e0c4      	b.n	8006830 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80066a6:	2304      	movs	r3, #4
 80066a8:	439d      	bics	r5, r3
 80066aa:	2680      	movs	r6, #128	; 0x80
 80066ac:	0636      	lsls	r6, r6, #24
 80066ae:	42b5      	cmp	r5, r6
 80066b0:	d021      	beq.n	80066f6 <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80066b2:	231f      	movs	r3, #31
 80066b4:	401a      	ands	r2, r3
 80066b6:	3b10      	subs	r3, #16
 80066b8:	4093      	lsls	r3, r2
 80066ba:	6e26      	ldr	r6, [r4, #96]	; 0x60
 80066bc:	439e      	bics	r6, r3
 80066be:	680b      	ldr	r3, [r1, #0]
 80066c0:	035d      	lsls	r5, r3, #13
 80066c2:	d148      	bne.n	8006756 <HAL_ADC_ConfigChannel+0xf6>
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	0edf      	lsrs	r7, r3, #27
 80066c8:	003b      	movs	r3, r7
 80066ca:	4093      	lsls	r3, r2
 80066cc:	4333      	orrs	r3, r6
 80066ce:	6623      	str	r3, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80066d0:	684a      	ldr	r2, [r1, #4]
 80066d2:	0893      	lsrs	r3, r2, #2
 80066d4:	3301      	adds	r3, #1
 80066d6:	69e5      	ldr	r5, [r4, #28]
 80066d8:	42ab      	cmp	r3, r5
 80066da:	d812      	bhi.n	8006702 <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 80066dc:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80066de:	251f      	movs	r5, #31
 80066e0:	4015      	ands	r5, r2
 80066e2:	680b      	ldr	r3, [r1, #0]
 80066e4:	0e9b      	lsrs	r3, r3, #26
 80066e6:	220f      	movs	r2, #15
 80066e8:	4013      	ands	r3, r2
 80066ea:	40ab      	lsls	r3, r5
 80066ec:	40aa      	lsls	r2, r5
 80066ee:	4396      	bics	r6, r2
 80066f0:	4333      	orrs	r3, r6
 80066f2:	6283      	str	r3, [r0, #40]	; 0x28
}
 80066f4:	e005      	b.n	8006702 <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80066f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80066f8:	680b      	ldr	r3, [r1, #0]
 80066fa:	035b      	lsls	r3, r3, #13
 80066fc:	0b5b      	lsrs	r3, r3, #13
 80066fe:	4313      	orrs	r3, r2
 8006700:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006702:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8006704:	6968      	ldr	r0, [r5, #20]
 8006706:	680a      	ldr	r2, [r1, #0]
 8006708:	0212      	lsls	r2, r2, #8
 800670a:	688b      	ldr	r3, [r1, #8]
 800670c:	4013      	ands	r3, r2
 800670e:	4e6a      	ldr	r6, [pc, #424]	; (80068b8 <HAL_ADC_ConfigChannel+0x258>)
 8006710:	4033      	ands	r3, r6
 8006712:	4390      	bics	r0, r2
 8006714:	4303      	orrs	r3, r0
 8006716:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006718:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800671a:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800671c:	2b00      	cmp	r3, #0
 800671e:	dab9      	bge.n	8006694 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006720:	4a66      	ldr	r2, [pc, #408]	; (80068bc <HAL_ADC_ConfigChannel+0x25c>)
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	25e0      	movs	r5, #224	; 0xe0
 8006726:	046d      	lsls	r5, r5, #17
 8006728:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800672a:	4965      	ldr	r1, [pc, #404]	; (80068c0 <HAL_ADC_ConfigChannel+0x260>)
 800672c:	428b      	cmp	r3, r1
 800672e:	d050      	beq.n	80067d2 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006730:	4864      	ldr	r0, [pc, #400]	; (80068c4 <HAL_ADC_ConfigChannel+0x264>)
 8006732:	4283      	cmp	r3, r0
 8006734:	d06e      	beq.n	8006814 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006736:	4964      	ldr	r1, [pc, #400]	; (80068c8 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006738:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800673a:	428b      	cmp	r3, r1
 800673c:	d1aa      	bne.n	8006694 <HAL_ADC_ConfigChannel+0x34>
 800673e:	0252      	lsls	r2, r2, #9
 8006740:	d4a8      	bmi.n	8006694 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006742:	495e      	ldr	r1, [pc, #376]	; (80068bc <HAL_ADC_ConfigChannel+0x25c>)
 8006744:	680b      	ldr	r3, [r1, #0]
 8006746:	4a61      	ldr	r2, [pc, #388]	; (80068cc <HAL_ADC_ConfigChannel+0x26c>)
 8006748:	4013      	ands	r3, r2
 800674a:	432b      	orrs	r3, r5
 800674c:	2280      	movs	r2, #128	; 0x80
 800674e:	03d2      	lsls	r2, r2, #15
 8006750:	4313      	orrs	r3, r2
 8006752:	600b      	str	r3, [r1, #0]
}
 8006754:	e79e      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006756:	07dd      	lsls	r5, r3, #31
 8006758:	d4b6      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 800675a:	2701      	movs	r7, #1
 800675c:	079d      	lsls	r5, r3, #30
 800675e:	d4b3      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 8006760:	3701      	adds	r7, #1
 8006762:	075d      	lsls	r5, r3, #29
 8006764:	d4b0      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 8006766:	3701      	adds	r7, #1
 8006768:	071d      	lsls	r5, r3, #28
 800676a:	d4ad      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 800676c:	3701      	adds	r7, #1
 800676e:	06dd      	lsls	r5, r3, #27
 8006770:	d4aa      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 8006772:	3701      	adds	r7, #1
 8006774:	069d      	lsls	r5, r3, #26
 8006776:	d4a7      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 8006778:	3701      	adds	r7, #1
 800677a:	065d      	lsls	r5, r3, #25
 800677c:	d4a4      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 800677e:	3701      	adds	r7, #1
 8006780:	061d      	lsls	r5, r3, #24
 8006782:	d4a1      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 8006784:	3701      	adds	r7, #1
 8006786:	05dd      	lsls	r5, r3, #23
 8006788:	d49e      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 800678a:	3701      	adds	r7, #1
 800678c:	059d      	lsls	r5, r3, #22
 800678e:	d49b      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 8006790:	3701      	adds	r7, #1
 8006792:	055d      	lsls	r5, r3, #21
 8006794:	d498      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 8006796:	3701      	adds	r7, #1
 8006798:	051d      	lsls	r5, r3, #20
 800679a:	d495      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 800679c:	3701      	adds	r7, #1
 800679e:	04dd      	lsls	r5, r3, #19
 80067a0:	d492      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 80067a2:	3701      	adds	r7, #1
 80067a4:	049d      	lsls	r5, r3, #18
 80067a6:	d48f      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 80067a8:	3701      	adds	r7, #1
 80067aa:	045d      	lsls	r5, r3, #17
 80067ac:	d48c      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 80067ae:	3701      	adds	r7, #1
 80067b0:	041d      	lsls	r5, r3, #16
 80067b2:	d489      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 80067b4:	3701      	adds	r7, #1
 80067b6:	03dd      	lsls	r5, r3, #15
 80067b8:	d486      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 80067ba:	3701      	adds	r7, #1
 80067bc:	039d      	lsls	r5, r3, #14
 80067be:	d483      	bmi.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 80067c0:	2580      	movs	r5, #128	; 0x80
 80067c2:	02ed      	lsls	r5, r5, #11
 80067c4:	001f      	movs	r7, r3
 80067c6:	402f      	ands	r7, r5
 80067c8:	422b      	tst	r3, r5
 80067ca:	d100      	bne.n	80067ce <HAL_ADC_ConfigChannel+0x16e>
 80067cc:	e77c      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
 80067ce:	2712      	movs	r7, #18
 80067d0:	e77a      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80067d2:	0212      	lsls	r2, r2, #8
 80067d4:	d500      	bpl.n	80067d8 <HAL_ADC_ConfigChannel+0x178>
 80067d6:	e75d      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80067d8:	4938      	ldr	r1, [pc, #224]	; (80068bc <HAL_ADC_ConfigChannel+0x25c>)
 80067da:	680b      	ldr	r3, [r1, #0]
 80067dc:	4a3b      	ldr	r2, [pc, #236]	; (80068cc <HAL_ADC_ConfigChannel+0x26c>)
 80067de:	4013      	ands	r3, r2
 80067e0:	432b      	orrs	r3, r5
 80067e2:	2280      	movs	r2, #128	; 0x80
 80067e4:	0412      	lsls	r2, r2, #16
 80067e6:	4313      	orrs	r3, r2
 80067e8:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067ea:	4b39      	ldr	r3, [pc, #228]	; (80068d0 <HAL_ADC_ConfigChannel+0x270>)
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	4939      	ldr	r1, [pc, #228]	; (80068d4 <HAL_ADC_ConfigChannel+0x274>)
 80067f0:	f7f9 fca6 	bl	8000140 <__udivsi3>
 80067f4:	3001      	adds	r0, #1
 80067f6:	0043      	lsls	r3, r0, #1
 80067f8:	181b      	adds	r3, r3, r0
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80067fe:	9b01      	ldr	r3, [sp, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d055      	beq.n	80068b0 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	3b01      	subs	r3, #1
 8006808:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800680a:	9b01      	ldr	r3, [sp, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f9      	bne.n	8006804 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006810:	2000      	movs	r0, #0
 8006812:	e73f      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
 8006814:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006816:	01d2      	lsls	r2, r2, #7
 8006818:	d500      	bpl.n	800681c <HAL_ADC_ConfigChannel+0x1bc>
 800681a:	e73b      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
 800681c:	4927      	ldr	r1, [pc, #156]	; (80068bc <HAL_ADC_ConfigChannel+0x25c>)
 800681e:	680b      	ldr	r3, [r1, #0]
 8006820:	4a2a      	ldr	r2, [pc, #168]	; (80068cc <HAL_ADC_ConfigChannel+0x26c>)
 8006822:	4013      	ands	r3, r2
 8006824:	432b      	orrs	r3, r5
 8006826:	2280      	movs	r2, #128	; 0x80
 8006828:	0452      	lsls	r2, r2, #17
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
}
 800682e:	e731      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006830:	2304      	movs	r3, #4
 8006832:	439d      	bics	r5, r3
 8006834:	2380      	movs	r3, #128	; 0x80
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	429d      	cmp	r5, r3
 800683a:	d01c      	beq.n	8006876 <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800683c:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800683e:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006840:	2b00      	cmp	r3, #0
 8006842:	db00      	blt.n	8006846 <HAL_ADC_ConfigChannel+0x1e6>
 8006844:	e726      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006846:	4a1d      	ldr	r2, [pc, #116]	; (80068bc <HAL_ADC_ConfigChannel+0x25c>)
 8006848:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800684a:	491d      	ldr	r1, [pc, #116]	; (80068c0 <HAL_ADC_ConfigChannel+0x260>)
 800684c:	428b      	cmp	r3, r1
 800684e:	d019      	beq.n	8006884 <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006850:	491c      	ldr	r1, [pc, #112]	; (80068c4 <HAL_ADC_ConfigChannel+0x264>)
 8006852:	428b      	cmp	r3, r1
 8006854:	d021      	beq.n	800689a <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006856:	491c      	ldr	r1, [pc, #112]	; (80068c8 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006858:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800685a:	428b      	cmp	r3, r1
 800685c:	d000      	beq.n	8006860 <HAL_ADC_ConfigChannel+0x200>
 800685e:	e719      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006860:	4816      	ldr	r0, [pc, #88]	; (80068bc <HAL_ADC_ConfigChannel+0x25c>)
 8006862:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006864:	23c0      	movs	r3, #192	; 0xc0
 8006866:	045b      	lsls	r3, r3, #17
 8006868:	4013      	ands	r3, r2
 800686a:	4a18      	ldr	r2, [pc, #96]	; (80068cc <HAL_ADC_ConfigChannel+0x26c>)
 800686c:	400a      	ands	r2, r1
 800686e:	4313      	orrs	r3, r2
 8006870:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006872:	2000      	movs	r0, #0
}
 8006874:	e70e      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006876:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006878:	680b      	ldr	r3, [r1, #0]
 800687a:	035b      	lsls	r3, r3, #13
 800687c:	0b5b      	lsrs	r3, r3, #13
 800687e:	439a      	bics	r2, r3
 8006880:	6282      	str	r2, [r0, #40]	; 0x28
}
 8006882:	e7db      	b.n	800683c <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006884:	480d      	ldr	r0, [pc, #52]	; (80068bc <HAL_ADC_ConfigChannel+0x25c>)
 8006886:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006888:	23a0      	movs	r3, #160	; 0xa0
 800688a:	045b      	lsls	r3, r3, #17
 800688c:	4013      	ands	r3, r2
 800688e:	4a0f      	ldr	r2, [pc, #60]	; (80068cc <HAL_ADC_ConfigChannel+0x26c>)
 8006890:	400a      	ands	r2, r1
 8006892:	4313      	orrs	r3, r2
 8006894:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006896:	2000      	movs	r0, #0
}
 8006898:	e6fc      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800689a:	4808      	ldr	r0, [pc, #32]	; (80068bc <HAL_ADC_ConfigChannel+0x25c>)
 800689c:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800689e:	23c0      	movs	r3, #192	; 0xc0
 80068a0:	041b      	lsls	r3, r3, #16
 80068a2:	4013      	ands	r3, r2
 80068a4:	4a09      	ldr	r2, [pc, #36]	; (80068cc <HAL_ADC_ConfigChannel+0x26c>)
 80068a6:	400a      	ands	r2, r1
 80068a8:	4313      	orrs	r3, r2
 80068aa:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068ac:	2000      	movs	r0, #0
}
 80068ae:	e6f1      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
 80068b0:	2000      	movs	r0, #0
 80068b2:	e6ef      	b.n	8006694 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80068b4:	2002      	movs	r0, #2
 80068b6:	e6f0      	b.n	800669a <HAL_ADC_ConfigChannel+0x3a>
 80068b8:	07ffff00 	.word	0x07ffff00
 80068bc:	40012708 	.word	0x40012708
 80068c0:	b0001000 	.word	0xb0001000
 80068c4:	b8004000 	.word	0xb8004000
 80068c8:	b4002000 	.word	0xb4002000
 80068cc:	fe3fffff 	.word	0xfe3fffff
 80068d0:	20000020 	.word	0x20000020
 80068d4:	00030d40 	.word	0x00030d40

080068d8 <ADC_Enable>:
{
 80068d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068da:	b083      	sub	sp, #12
 80068dc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80068de:	2300      	movs	r3, #0
 80068e0:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068e2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80068e4:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80068e6:	2000      	movs	r0, #0
 80068e8:	07d2      	lsls	r2, r2, #31
 80068ea:	d434      	bmi.n	8006956 <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80068ec:	6899      	ldr	r1, [r3, #8]
 80068ee:	4a2c      	ldr	r2, [pc, #176]	; (80069a0 <ADC_Enable+0xc8>)
 80068f0:	4211      	tst	r1, r2
 80068f2:	d127      	bne.n	8006944 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	492b      	ldr	r1, [pc, #172]	; (80069a4 <ADC_Enable+0xcc>)
 80068f8:	400a      	ands	r2, r1
 80068fa:	2101      	movs	r1, #1
 80068fc:	430a      	orrs	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006900:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <ADC_Enable+0xd0>)
 8006902:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	d50f      	bpl.n	8006928 <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006908:	4b28      	ldr	r3, [pc, #160]	; (80069ac <ADC_Enable+0xd4>)
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	4928      	ldr	r1, [pc, #160]	; (80069b0 <ADC_Enable+0xd8>)
 800690e:	f7f9 fc17 	bl	8000140 <__udivsi3>
 8006912:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8006914:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8006916:	9b01      	ldr	r3, [sp, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <ADC_Enable+0x50>
        wait_loop_index--;
 800691c:	9b01      	ldr	r3, [sp, #4]
 800691e:	3b01      	subs	r3, #1
 8006920:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006922:	9b01      	ldr	r3, [sp, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f9      	bne.n	800691c <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006928:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 800692a:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800692c:	2b01      	cmp	r3, #1
 800692e:	d012      	beq.n	8006956 <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 8006930:	f7ff fd02 	bl	8006338 <HAL_GetTick>
 8006934:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	07d2      	lsls	r2, r2, #31
 800693c:	d42d      	bmi.n	800699a <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800693e:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8006940:	4f18      	ldr	r7, [pc, #96]	; (80069a4 <ADC_Enable+0xcc>)
 8006942:	e00e      	b.n	8006962 <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006944:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006946:	2210      	movs	r2, #16
 8006948:	4313      	orrs	r3, r2
 800694a:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800694c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800694e:	3a0f      	subs	r2, #15
 8006950:	4313      	orrs	r3, r2
 8006952:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006954:	3001      	adds	r0, #1
}
 8006956:	b003      	add	sp, #12
 8006958:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4215      	tst	r5, r2
 8006960:	d119      	bne.n	8006996 <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	4215      	tst	r5, r2
 8006966:	d103      	bne.n	8006970 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	403a      	ands	r2, r7
 800696c:	432a      	orrs	r2, r5
 800696e:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006970:	f7ff fce2 	bl	8006338 <HAL_GetTick>
 8006974:	1b80      	subs	r0, r0, r6
 8006976:	2802      	cmp	r0, #2
 8006978:	d9ef      	bls.n	800695a <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	421d      	tst	r5, r3
 8006980:	d1eb      	bne.n	800695a <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006984:	2210      	movs	r2, #16
 8006986:	4313      	orrs	r3, r2
 8006988:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800698a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800698c:	3a0f      	subs	r2, #15
 800698e:	4313      	orrs	r3, r2
 8006990:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8006992:	2001      	movs	r0, #1
 8006994:	e7df      	b.n	8006956 <ADC_Enable+0x7e>
  return HAL_OK;
 8006996:	2000      	movs	r0, #0
 8006998:	e7dd      	b.n	8006956 <ADC_Enable+0x7e>
 800699a:	2000      	movs	r0, #0
 800699c:	e7db      	b.n	8006956 <ADC_Enable+0x7e>
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	80000017 	.word	0x80000017
 80069a4:	7fffffe8 	.word	0x7fffffe8
 80069a8:	40012708 	.word	0x40012708
 80069ac:	20000020 	.word	0x20000020
 80069b0:	00030d40 	.word	0x00030d40

080069b4 <HAL_ADC_Start_DMA>:
{
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	0004      	movs	r4, r0
 80069b8:	000d      	movs	r5, r1
 80069ba:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069bc:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069be:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 80069c0:	2002      	movs	r0, #2
 80069c2:	075b      	lsls	r3, r3, #29
 80069c4:	d41c      	bmi.n	8006a00 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 80069c6:	2354      	movs	r3, #84	; 0x54
 80069c8:	5ce3      	ldrb	r3, [r4, r3]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d044      	beq.n	8006a58 <HAL_ADC_Start_DMA+0xa4>
 80069ce:	2301      	movs	r3, #1
 80069d0:	2154      	movs	r1, #84	; 0x54
 80069d2:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80069d4:	68d1      	ldr	r1, [r2, #12]
 80069d6:	420b      	tst	r3, r1
 80069d8:	d10d      	bne.n	80069f6 <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069da:	6893      	ldr	r3, [r2, #8]
 80069dc:	07db      	lsls	r3, r3, #31
 80069de:	d505      	bpl.n	80069ec <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 80069e0:	6893      	ldr	r3, [r2, #8]
 80069e2:	491e      	ldr	r1, [pc, #120]	; (8006a5c <HAL_ADC_Start_DMA+0xa8>)
 80069e4:	400b      	ands	r3, r1
 80069e6:	2102      	movs	r1, #2
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	68d3      	ldr	r3, [r2, #12]
 80069f0:	2101      	movs	r1, #1
 80069f2:	430b      	orrs	r3, r1
 80069f4:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80069f6:	0020      	movs	r0, r4
 80069f8:	f7ff ff6e 	bl	80068d8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d000      	beq.n	8006a02 <HAL_ADC_Start_DMA+0x4e>
}
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8006a02:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006a04:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <HAL_ADC_Start_DMA+0xac>)
 8006a06:	401a      	ands	r2, r3
 8006a08:	2380      	movs	r3, #128	; 0x80
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8006a10:	2300      	movs	r3, #0
 8006a12:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a14:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a16:	4913      	ldr	r1, [pc, #76]	; (8006a64 <HAL_ADC_Start_DMA+0xb0>)
 8006a18:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a1a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a1c:	4912      	ldr	r1, [pc, #72]	; (8006a68 <HAL_ADC_Start_DMA+0xb4>)
 8006a1e:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a20:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a22:	4912      	ldr	r1, [pc, #72]	; (8006a6c <HAL_ADC_Start_DMA+0xb8>)
 8006a24:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	211c      	movs	r1, #28
 8006a2a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8006a2c:	2254      	movs	r2, #84	; 0x54
 8006a2e:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a30:	6822      	ldr	r2, [r4, #0]
 8006a32:	6853      	ldr	r3, [r2, #4]
 8006a34:	390c      	subs	r1, #12
 8006a36:	430b      	orrs	r3, r1
 8006a38:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a3a:	6821      	ldr	r1, [r4, #0]
 8006a3c:	3140      	adds	r1, #64	; 0x40
 8006a3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006a40:	0033      	movs	r3, r6
 8006a42:	002a      	movs	r2, r5
 8006a44:	f000 f8f4 	bl	8006c30 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006a48:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006a4a:	6893      	ldr	r3, [r2, #8]
 8006a4c:	4903      	ldr	r1, [pc, #12]	; (8006a5c <HAL_ADC_Start_DMA+0xa8>)
 8006a4e:	400b      	ands	r3, r1
 8006a50:	2104      	movs	r1, #4
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6093      	str	r3, [r2, #8]
}
 8006a56:	e7d3      	b.n	8006a00 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8006a58:	2002      	movs	r0, #2
 8006a5a:	e7d1      	b.n	8006a00 <HAL_ADC_Start_DMA+0x4c>
 8006a5c:	7fffffe8 	.word	0x7fffffe8
 8006a60:	fffff0fe 	.word	0xfffff0fe
 8006a64:	080065e1 	.word	0x080065e1
 8006a68:	080065b9 	.word	0x080065b9
 8006a6c:	080065c5 	.word	0x080065c5

08006a70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a70:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8006a72:	2800      	cmp	r0, #0
 8006a74:	db14      	blt.n	8006aa0 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a76:	0884      	lsrs	r4, r0, #2
 8006a78:	00a4      	lsls	r4, r4, #2
 8006a7a:	4b14      	ldr	r3, [pc, #80]	; (8006acc <HAL_NVIC_SetPriority+0x5c>)
 8006a7c:	469c      	mov	ip, r3
 8006a7e:	4464      	add	r4, ip
 8006a80:	26c0      	movs	r6, #192	; 0xc0
 8006a82:	00b6      	lsls	r6, r6, #2
 8006a84:	59a5      	ldr	r5, [r4, r6]
 8006a86:	2203      	movs	r2, #3
 8006a88:	4002      	ands	r2, r0
 8006a8a:	00d2      	lsls	r2, r2, #3
 8006a8c:	23ff      	movs	r3, #255	; 0xff
 8006a8e:	0018      	movs	r0, r3
 8006a90:	4090      	lsls	r0, r2
 8006a92:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006a94:	0189      	lsls	r1, r1, #6
 8006a96:	400b      	ands	r3, r1
 8006a98:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a9a:	432b      	orrs	r3, r5
 8006a9c:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006aa0:	230f      	movs	r3, #15
 8006aa2:	4003      	ands	r3, r0
 8006aa4:	3b08      	subs	r3, #8
 8006aa6:	089b      	lsrs	r3, r3, #2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <HAL_NVIC_SetPriority+0x60>)
 8006aac:	4694      	mov	ip, r2
 8006aae:	4463      	add	r3, ip
 8006ab0:	69dc      	ldr	r4, [r3, #28]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	4010      	ands	r0, r2
 8006ab6:	00c0      	lsls	r0, r0, #3
 8006ab8:	32fc      	adds	r2, #252	; 0xfc
 8006aba:	0015      	movs	r5, r2
 8006abc:	4085      	lsls	r5, r0
 8006abe:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ac0:	0189      	lsls	r1, r1, #6
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ac6:	4322      	orrs	r2, r4
 8006ac8:	61da      	str	r2, [r3, #28]
 8006aca:	e7e8      	b.n	8006a9e <HAL_NVIC_SetPriority+0x2e>
 8006acc:	e000e100 	.word	0xe000e100
 8006ad0:	e000ed00 	.word	0xe000ed00

08006ad4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	db05      	blt.n	8006ae4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ad8:	221f      	movs	r2, #31
 8006ada:	4002      	ands	r2, r0
 8006adc:	2301      	movs	r3, #1
 8006ade:	4093      	lsls	r3, r2
 8006ae0:	4a01      	ldr	r2, [pc, #4]	; (8006ae8 <HAL_NVIC_EnableIRQ+0x14>)
 8006ae2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ae4:	4770      	bx	lr
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	e000e100 	.word	0xe000e100

08006aec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aec:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006aee:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006af0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8006af2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006af4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	d002      	beq.n	8006b00 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006afa:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8006afc:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8006afe:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006b00:	4e0b      	ldr	r6, [pc, #44]	; (8006b30 <DMA_SetConfig+0x44>)
 8006b02:	6877      	ldr	r7, [r6, #4]
 8006b04:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006b06:	241c      	movs	r4, #28
 8006b08:	4025      	ands	r5, r4
 8006b0a:	3c1b      	subs	r4, #27
 8006b0c:	40ac      	lsls	r4, r5
 8006b0e:	433c      	orrs	r4, r7
 8006b10:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b12:	6804      	ldr	r4, [r0, #0]
 8006b14:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b16:	6883      	ldr	r3, [r0, #8]
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d004      	beq.n	8006b26 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006b1c:	6803      	ldr	r3, [r0, #0]
 8006b1e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006b20:	6803      	ldr	r3, [r0, #0]
 8006b22:	60da      	str	r2, [r3, #12]
  }
}
 8006b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8006b26:	6803      	ldr	r3, [r0, #0]
 8006b28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006b2a:	6803      	ldr	r3, [r0, #0]
 8006b2c:	60d9      	str	r1, [r3, #12]
 8006b2e:	e7f9      	b.n	8006b24 <DMA_SetConfig+0x38>
 8006b30:	40020000 	.word	0x40020000

08006b34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b34:	b510      	push	{r4, lr}
 8006b36:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b3a:	089b      	lsrs	r3, r3, #2
 8006b3c:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8006b3e:	4694      	mov	ip, r2
 8006b40:	4463      	add	r3, ip
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b46:	7800      	ldrb	r0, [r0, #0]
 8006b48:	3808      	subs	r0, #8
 8006b4a:	2114      	movs	r1, #20
 8006b4c:	f7f9 faf8 	bl	8000140 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b50:	4b04      	ldr	r3, [pc, #16]	; (8006b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8006b52:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b54:	231f      	movs	r3, #31
 8006b56:	4018      	ands	r0, r3
 8006b58:	3b1e      	subs	r3, #30
 8006b5a:	4083      	lsls	r3, r0
 8006b5c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8006b5e:	bd10      	pop	{r4, pc}
 8006b60:	10008200 	.word	0x10008200
 8006b64:	40020880 	.word	0x40020880

08006b68 <HAL_DMA_Init>:
{
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8006b6c:	d055      	beq.n	8006c1a <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006b6e:	6805      	ldr	r5, [r0, #0]
 8006b70:	4b2b      	ldr	r3, [pc, #172]	; (8006c20 <HAL_DMA_Init+0xb8>)
 8006b72:	18e8      	adds	r0, r5, r3
 8006b74:	2114      	movs	r1, #20
 8006b76:	f7f9 fae3 	bl	8000140 <__udivsi3>
 8006b7a:	0080      	lsls	r0, r0, #2
 8006b7c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b7e:	2325      	movs	r3, #37	; 0x25
 8006b80:	2202      	movs	r2, #2
 8006b82:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	4a27      	ldr	r2, [pc, #156]	; (8006c24 <HAL_DMA_Init+0xbc>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	6811      	ldr	r1, [r2, #0]
 8006b90:	68a3      	ldr	r3, [r4, #8]
 8006b92:	68e0      	ldr	r0, [r4, #12]
 8006b94:	4303      	orrs	r3, r0
 8006b96:	6920      	ldr	r0, [r4, #16]
 8006b98:	4303      	orrs	r3, r0
 8006b9a:	6960      	ldr	r0, [r4, #20]
 8006b9c:	4303      	orrs	r3, r0
 8006b9e:	69a0      	ldr	r0, [r4, #24]
 8006ba0:	4303      	orrs	r3, r0
 8006ba2:	69e0      	ldr	r0, [r4, #28]
 8006ba4:	4303      	orrs	r3, r0
 8006ba6:	6a20      	ldr	r0, [r4, #32]
 8006ba8:	4303      	orrs	r3, r0
 8006baa:	430b      	orrs	r3, r1
 8006bac:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006bae:	0020      	movs	r0, r4
 8006bb0:	f7ff ffc0 	bl	8006b34 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006bb4:	2380      	movs	r3, #128	; 0x80
 8006bb6:	01db      	lsls	r3, r3, #7
 8006bb8:	68a2      	ldr	r2, [r4, #8]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d018      	beq.n	8006bf0 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006bbe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	213f      	movs	r1, #63	; 0x3f
 8006bc4:	400b      	ands	r3, r1
 8006bc6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006bca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006bcc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	1e5a      	subs	r2, r3, #1
 8006bd2:	2a03      	cmp	r2, #3
 8006bd4:	d90f      	bls.n	8006bf6 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006bda:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006bdc:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8006be2:	2225      	movs	r2, #37	; 0x25
 8006be4:	2101      	movs	r1, #1
 8006be6:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8006be8:	3a01      	subs	r2, #1
 8006bea:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8006bec:	2000      	movs	r0, #0
}
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	6063      	str	r3, [r4, #4]
 8006bf4:	e7e3      	b.n	8006bbe <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006bf6:	223f      	movs	r2, #63	; 0x3f
 8006bf8:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bfa:	4a0b      	ldr	r2, [pc, #44]	; (8006c28 <HAL_DMA_Init+0xc0>)
 8006bfc:	189a      	adds	r2, r3, r2
 8006bfe:	0092      	lsls	r2, r2, #2
 8006c00:	6522      	str	r2, [r4, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c02:	490a      	ldr	r1, [pc, #40]	; (8006c2c <HAL_DMA_Init+0xc4>)
 8006c04:	6561      	str	r1, [r4, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006c06:	3b01      	subs	r3, #1
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4099      	lsls	r1, r3
 8006c0c:	65a1      	str	r1, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c14:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	e7e1      	b.n	8006bde <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	e7e7      	b.n	8006bee <HAL_DMA_Init+0x86>
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	bffdfff8 	.word	0xbffdfff8
 8006c24:	ffff800f 	.word	0xffff800f
 8006c28:	1000823f 	.word	0x1000823f
 8006c2c:	40020940 	.word	0x40020940

08006c30 <HAL_DMA_Start_IT>:
{
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8006c34:	2024      	movs	r0, #36	; 0x24
 8006c36:	5c20      	ldrb	r0, [r4, r0]
 8006c38:	2801      	cmp	r0, #1
 8006c3a:	d045      	beq.n	8006cc8 <HAL_DMA_Start_IT+0x98>
 8006c3c:	2024      	movs	r0, #36	; 0x24
 8006c3e:	2501      	movs	r5, #1
 8006c40:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8006c42:	3001      	adds	r0, #1
 8006c44:	5c20      	ldrb	r0, [r4, r0]
 8006c46:	2801      	cmp	r0, #1
 8006c48:	d006      	beq.n	8006c58 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006c4e:	3b5c      	subs	r3, #92	; 0x5c
 8006c50:	2200      	movs	r2, #0
 8006c52:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8006c54:	2001      	movs	r0, #1
}
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c58:	3024      	adds	r0, #36	; 0x24
 8006c5a:	3501      	adds	r5, #1
 8006c5c:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c5e:	2000      	movs	r0, #0
 8006c60:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006c62:	6825      	ldr	r5, [r4, #0]
 8006c64:	6828      	ldr	r0, [r5, #0]
 8006c66:	2601      	movs	r6, #1
 8006c68:	43b0      	bics	r0, r6
 8006c6a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c6c:	0020      	movs	r0, r4
 8006c6e:	f7ff ff3d 	bl	8006aec <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006c72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01c      	beq.n	8006cb2 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	6813      	ldr	r3, [r2, #0]
 8006c7c:	210e      	movs	r1, #14
 8006c7e:	430b      	orrs	r3, r1
 8006c80:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c82:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006c84:	6813      	ldr	r3, [r2, #0]
 8006c86:	03db      	lsls	r3, r3, #15
 8006c88:	d504      	bpl.n	8006c94 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c8a:	6811      	ldr	r1, [r2, #0]
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006c94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c9a:	6819      	ldr	r1, [r3, #0]
 8006c9c:	2280      	movs	r2, #128	; 0x80
 8006c9e:	0052      	lsls	r2, r2, #1
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8006ca4:	6822      	ldr	r2, [r4, #0]
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	2101      	movs	r1, #1
 8006caa:	430b      	orrs	r3, r1
 8006cac:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e7d1      	b.n	8006c56 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	6813      	ldr	r3, [r2, #0]
 8006cb6:	2104      	movs	r1, #4
 8006cb8:	438b      	bics	r3, r1
 8006cba:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006cbc:	6822      	ldr	r2, [r4, #0]
 8006cbe:	6813      	ldr	r3, [r2, #0]
 8006cc0:	3106      	adds	r1, #6
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e7dc      	b.n	8006c82 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8006cc8:	2002      	movs	r0, #2
 8006cca:	e7c4      	b.n	8006c56 <HAL_DMA_Start_IT+0x26>

08006ccc <HAL_DMA_Abort>:
{
 8006ccc:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d036      	beq.n	8006d40 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006cd2:	2325      	movs	r3, #37	; 0x25
 8006cd4:	5cc3      	ldrb	r3, [r0, r3]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d006      	beq.n	8006ce8 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cda:	2304      	movs	r3, #4
 8006cdc:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006cde:	3320      	adds	r3, #32
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8006ce4:	2001      	movs	r0, #1
}
 8006ce6:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ce8:	6802      	ldr	r2, [r0, #0]
 8006cea:	6813      	ldr	r3, [r2, #0]
 8006cec:	210e      	movs	r1, #14
 8006cee:	438b      	bics	r3, r1
 8006cf0:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cf2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cf4:	6813      	ldr	r3, [r2, #0]
 8006cf6:	4913      	ldr	r1, [pc, #76]	; (8006d44 <HAL_DMA_Abort+0x78>)
 8006cf8:	400b      	ands	r3, r1
 8006cfa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006cfc:	6801      	ldr	r1, [r0, #0]
 8006cfe:	680a      	ldr	r2, [r1, #0]
 8006d00:	2301      	movs	r3, #1
 8006d02:	439a      	bics	r2, r3
 8006d04:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006d06:	4910      	ldr	r1, [pc, #64]	; (8006d48 <HAL_DMA_Abort+0x7c>)
 8006d08:	684c      	ldr	r4, [r1, #4]
 8006d0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006d0c:	251c      	movs	r5, #28
 8006d0e:	402a      	ands	r2, r5
 8006d10:	4093      	lsls	r3, r2
 8006d12:	4323      	orrs	r3, r4
 8006d14:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d16:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006d18:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006d1a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006d1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	4907      	ldr	r1, [pc, #28]	; (8006d44 <HAL_DMA_Abort+0x78>)
 8006d26:	400a      	ands	r2, r1
 8006d28:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d2a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006d2c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006d2e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006d30:	2325      	movs	r3, #37	; 0x25
 8006d32:	2201      	movs	r2, #1
 8006d34:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8006d36:	3b01      	subs	r3, #1
 8006d38:	2200      	movs	r2, #0
 8006d3a:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e7d2      	b.n	8006ce6 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8006d40:	2001      	movs	r0, #1
 8006d42:	e7d0      	b.n	8006ce6 <HAL_DMA_Abort+0x1a>
 8006d44:	fffffeff 	.word	0xfffffeff
 8006d48:	40020000 	.word	0x40020000

08006d4c <HAL_DMA_Abort_IT>:
{
 8006d4c:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006d4e:	2325      	movs	r3, #37	; 0x25
 8006d50:	5cc3      	ldrb	r3, [r0, r3]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d003      	beq.n	8006d5e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d56:	2304      	movs	r3, #4
 8006d58:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8006d5a:	2001      	movs	r0, #1
}
 8006d5c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d5e:	6802      	ldr	r2, [r0, #0]
 8006d60:	6813      	ldr	r3, [r2, #0]
 8006d62:	210e      	movs	r1, #14
 8006d64:	438b      	bics	r3, r1
 8006d66:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006d68:	6801      	ldr	r1, [r0, #0]
 8006d6a:	680a      	ldr	r2, [r1, #0]
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	439a      	bics	r2, r3
 8006d70:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d72:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006d74:	680a      	ldr	r2, [r1, #0]
 8006d76:	4c13      	ldr	r4, [pc, #76]	; (8006dc4 <HAL_DMA_Abort_IT+0x78>)
 8006d78:	4022      	ands	r2, r4
 8006d7a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006d7c:	4912      	ldr	r1, [pc, #72]	; (8006dc8 <HAL_DMA_Abort_IT+0x7c>)
 8006d7e:	684c      	ldr	r4, [r1, #4]
 8006d80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006d82:	251c      	movs	r5, #28
 8006d84:	402a      	ands	r2, r5
 8006d86:	4093      	lsls	r3, r2
 8006d88:	4323      	orrs	r3, r4
 8006d8a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d8c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006d8e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006d90:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006d92:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	490a      	ldr	r1, [pc, #40]	; (8006dc4 <HAL_DMA_Abort_IT+0x78>)
 8006d9c:	400a      	ands	r2, r1
 8006d9e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006da0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006da2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006da4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006da6:	2325      	movs	r3, #37	; 0x25
 8006da8:	2201      	movs	r2, #1
 8006daa:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8006dac:	3b01      	subs	r3, #1
 8006dae:	2200      	movs	r2, #0
 8006db0:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8006db2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8006db8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e7ce      	b.n	8006d5c <HAL_DMA_Abort_IT+0x10>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e7cc      	b.n	8006d5c <HAL_DMA_Abort_IT+0x10>
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	fffffeff 	.word	0xfffffeff
 8006dc8:	40020000 	.word	0x40020000

08006dcc <HAL_DMA_IRQHandler>:
{
 8006dcc:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8006dce:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <HAL_DMA_IRQHandler+0xc8>)
 8006dd0:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006dd2:	6804      	ldr	r4, [r0, #0]
 8006dd4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006dd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006dd8:	221c      	movs	r2, #28
 8006dda:	4013      	ands	r3, r2
 8006ddc:	3a18      	subs	r2, #24
 8006dde:	409a      	lsls	r2, r3
 8006de0:	4211      	tst	r1, r2
 8006de2:	d016      	beq.n	8006e12 <HAL_DMA_IRQHandler+0x46>
 8006de4:	076a      	lsls	r2, r5, #29
 8006de6:	d514      	bpl.n	8006e12 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	069b      	lsls	r3, r3, #26
 8006dec:	d403      	bmi.n	8006df6 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	2204      	movs	r2, #4
 8006df2:	4393      	bics	r3, r2
 8006df4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006df6:	4927      	ldr	r1, [pc, #156]	; (8006e94 <HAL_DMA_IRQHandler+0xc8>)
 8006df8:	684c      	ldr	r4, [r1, #4]
 8006dfa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006dfc:	231c      	movs	r3, #28
 8006dfe:	401a      	ands	r2, r3
 8006e00:	3b18      	subs	r3, #24
 8006e02:	4093      	lsls	r3, r2
 8006e04:	4323      	orrs	r3, r4
 8006e06:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8006e08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d000      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8006e0e:	4798      	blx	r3
}
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006e12:	2202      	movs	r2, #2
 8006e14:	409a      	lsls	r2, r3
 8006e16:	4211      	tst	r1, r2
 8006e18:	d01c      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x88>
 8006e1a:	07aa      	lsls	r2, r5, #30
 8006e1c:	d51a      	bpl.n	8006e54 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	069b      	lsls	r3, r3, #26
 8006e22:	d406      	bmi.n	8006e32 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	220a      	movs	r2, #10
 8006e28:	4393      	bics	r3, r2
 8006e2a:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8006e2c:	2325      	movs	r3, #37	; 0x25
 8006e2e:	3a09      	subs	r2, #9
 8006e30:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006e32:	4918      	ldr	r1, [pc, #96]	; (8006e94 <HAL_DMA_IRQHandler+0xc8>)
 8006e34:	684c      	ldr	r4, [r1, #4]
 8006e36:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006e38:	231c      	movs	r3, #28
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	3b1a      	subs	r3, #26
 8006e3e:	4093      	lsls	r3, r2
 8006e40:	4323      	orrs	r3, r4
 8006e42:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8006e44:	2324      	movs	r3, #36	; 0x24
 8006e46:	2200      	movs	r2, #0
 8006e48:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8006e4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0df      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8006e50:	4798      	blx	r3
 8006e52:	e7dd      	b.n	8006e10 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006e54:	2208      	movs	r2, #8
 8006e56:	409a      	lsls	r2, r3
 8006e58:	4211      	tst	r1, r2
 8006e5a:	d0d9      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x44>
 8006e5c:	072d      	lsls	r5, r5, #28
 8006e5e:	d5d7      	bpl.n	8006e10 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	220e      	movs	r2, #14
 8006e64:	4393      	bics	r3, r2
 8006e66:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006e68:	490a      	ldr	r1, [pc, #40]	; (8006e94 <HAL_DMA_IRQHandler+0xc8>)
 8006e6a:	684c      	ldr	r4, [r1, #4]
 8006e6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006e6e:	231c      	movs	r3, #28
 8006e70:	401a      	ands	r2, r3
 8006e72:	3b1b      	subs	r3, #27
 8006e74:	001d      	movs	r5, r3
 8006e76:	4095      	lsls	r5, r2
 8006e78:	002a      	movs	r2, r5
 8006e7a:	4322      	orrs	r2, r4
 8006e7c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e7e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006e80:	2225      	movs	r2, #37	; 0x25
 8006e82:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8006e84:	3323      	adds	r3, #35	; 0x23
 8006e86:	2200      	movs	r2, #0
 8006e88:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8006e8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0bf      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8006e90:	4798      	blx	r3
  return;
 8006e92:	e7bd      	b.n	8006e10 <HAL_DMA_IRQHandler+0x44>
 8006e94:	40020000 	.word	0x40020000

08006e98 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	0004      	movs	r4, r0
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8006e9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006ea2:	421a      	tst	r2, r3
 8006ea4:	d010      	beq.n	8006ec8 <HAL_DMAEx_MUX_IRQHandler+0x30>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ea6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ea8:	6813      	ldr	r3, [r2, #0]
 8006eaa:	4914      	ldr	r1, [pc, #80]	; (8006efc <HAL_DMAEx_MUX_IRQHandler+0x64>)
 8006eac:	400b      	ands	r3, r1
 8006eae:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006eb0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006eb2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006eb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8006eb6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006eb8:	2380      	movs	r3, #128	; 0x80
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	63c3      	str	r3, [r0, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8006ec0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d000      	beq.n	8006ec8 <HAL_DMAEx_MUX_IRQHandler+0x30>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ec6:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8006ec8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d015      	beq.n	8006efa <HAL_DMAEx_MUX_IRQHandler+0x62>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8006ece:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ed4:	4211      	tst	r1, r2
 8006ed6:	d010      	beq.n	8006efa <HAL_DMAEx_MUX_IRQHandler+0x62>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4908      	ldr	r1, [pc, #32]	; (8006efc <HAL_DMAEx_MUX_IRQHandler+0x64>)
 8006edc:	400a      	ands	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ee0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ee2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006ee4:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8006ee6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006ee8:	2380      	movs	r3, #128	; 0x80
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4313      	orrs	r3, r2
 8006eee:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8006ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_DMAEx_MUX_IRQHandler+0x62>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ef6:	0020      	movs	r0, r4
 8006ef8:	4798      	blx	r3
      }
    }
  }
}
 8006efa:	bd10      	pop	{r4, pc}
 8006efc:	fffffeff 	.word	0xfffffeff

08006f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f02:	46de      	mov	lr, fp
 8006f04:	4657      	mov	r7, sl
 8006f06:	464e      	mov	r6, r9
 8006f08:	4645      	mov	r5, r8
 8006f0a:	b5e0      	push	{r5, r6, r7, lr}
 8006f0c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f0e:	680e      	ldr	r6, [r1, #0]
 8006f10:	2e00      	cmp	r6, #0
 8006f12:	d100      	bne.n	8006f16 <HAL_GPIO_Init+0x16>
 8006f14:	e0d1      	b.n	80070ba <HAL_GPIO_Init+0x1ba>
 8006f16:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8006f18:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f1a:	2401      	movs	r4, #1
 8006f1c:	46a4      	mov	ip, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f1e:	3402      	adds	r4, #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f20:	25c0      	movs	r5, #192	; 0xc0
 8006f22:	02ad      	lsls	r5, r5, #10
 8006f24:	46a9      	mov	r9, r5
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006f26:	250f      	movs	r5, #15
 8006f28:	46aa      	mov	sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006f2a:	4d67      	ldr	r5, [pc, #412]	; (80070c8 <HAL_GPIO_Init+0x1c8>)
 8006f2c:	1945      	adds	r5, r0, r5
 8006f2e:	426f      	negs	r7, r5
 8006f30:	417d      	adcs	r5, r7
 8006f32:	426d      	negs	r5, r5
 8006f34:	9503      	str	r5, [sp, #12]
 8006f36:	e04e      	b.n	8006fd6 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8006f38:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006f3a:	0027      	movs	r7, r4
 8006f3c:	4097      	lsls	r7, r2
 8006f3e:	43be      	bics	r6, r7
 8006f40:	46b0      	mov	r8, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006f42:	68ce      	ldr	r6, [r1, #12]
 8006f44:	4096      	lsls	r6, r2
 8006f46:	4647      	mov	r7, r8
 8006f48:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8006f4a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8006f4c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f4e:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f50:	684d      	ldr	r5, [r1, #4]
 8006f52:	092d      	lsrs	r5, r5, #4
 8006f54:	4667      	mov	r7, ip
 8006f56:	403d      	ands	r5, r7
 8006f58:	409d      	lsls	r5, r3
 8006f5a:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8006f5c:	6045      	str	r5, [r0, #4]
 8006f5e:	e046      	b.n	8006fee <HAL_GPIO_Init+0xee>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006f60:	2600      	movs	r6, #0
 8006f62:	465f      	mov	r7, fp
 8006f64:	40be      	lsls	r6, r7
 8006f66:	4647      	mov	r7, r8
 8006f68:	433e      	orrs	r6, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8006f6a:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f6c:	4d57      	ldr	r5, [pc, #348]	; (80070cc <HAL_GPIO_Init+0x1cc>)
 8006f6e:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8006f70:	9e01      	ldr	r6, [sp, #4]
 8006f72:	43f6      	mvns	r6, r6
 8006f74:	9602      	str	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f76:	684f      	ldr	r7, [r1, #4]
 8006f78:	02fe      	lsls	r6, r7, #11
 8006f7a:	d500      	bpl.n	8006f7e <HAL_GPIO_Init+0x7e>
 8006f7c:	e091      	b.n	80070a2 <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 8006f7e:	9e02      	ldr	r6, [sp, #8]
 8006f80:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8006f82:	4f52      	ldr	r7, [pc, #328]	; (80070cc <HAL_GPIO_Init+0x1cc>)
 8006f84:	603d      	str	r5, [r7, #0]

        temp = EXTI->FTSR1;
 8006f86:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f88:	684f      	ldr	r7, [r1, #4]
 8006f8a:	02be      	lsls	r6, r7, #10
 8006f8c:	d500      	bpl.n	8006f90 <HAL_GPIO_Init+0x90>
 8006f8e:	e08b      	b.n	80070a8 <HAL_GPIO_Init+0x1a8>
        temp &= ~(iocurrent);
 8006f90:	9e02      	ldr	r6, [sp, #8]
 8006f92:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8006f94:	4f4d      	ldr	r7, [pc, #308]	; (80070cc <HAL_GPIO_Init+0x1cc>)
 8006f96:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006f98:	2584      	movs	r5, #132	; 0x84
 8006f9a:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f9c:	684f      	ldr	r7, [r1, #4]
 8006f9e:	03be      	lsls	r6, r7, #14
 8006fa0:	d500      	bpl.n	8006fa4 <HAL_GPIO_Init+0xa4>
 8006fa2:	e084      	b.n	80070ae <HAL_GPIO_Init+0x1ae>
        temp &= ~(iocurrent);
 8006fa4:	9e02      	ldr	r6, [sp, #8]
 8006fa6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8006fa8:	4f48      	ldr	r7, [pc, #288]	; (80070cc <HAL_GPIO_Init+0x1cc>)
 8006faa:	46b8      	mov	r8, r7
 8006fac:	2784      	movs	r7, #132	; 0x84
 8006fae:	46bb      	mov	fp, r7
 8006fb0:	4647      	mov	r7, r8
 8006fb2:	465e      	mov	r6, fp
 8006fb4:	51bd      	str	r5, [r7, r6]

        temp = EXTI->IMR1;
 8006fb6:	2580      	movs	r5, #128	; 0x80
 8006fb8:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006fba:	684e      	ldr	r6, [r1, #4]
 8006fbc:	03f6      	lsls	r6, r6, #15
 8006fbe:	d479      	bmi.n	80070b4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(iocurrent);
 8006fc0:	9e02      	ldr	r6, [sp, #8]
 8006fc2:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8006fc4:	4f41      	ldr	r7, [pc, #260]	; (80070cc <HAL_GPIO_Init+0x1cc>)
 8006fc6:	2680      	movs	r6, #128	; 0x80
 8006fc8:	51bd      	str	r5, [r7, r6]
      }
    }

    position++;
 8006fca:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fcc:	680e      	ldr	r6, [r1, #0]
 8006fce:	3202      	adds	r2, #2
 8006fd0:	0035      	movs	r5, r6
 8006fd2:	40dd      	lsrs	r5, r3
 8006fd4:	d071      	beq.n	80070ba <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006fd6:	4665      	mov	r5, ip
 8006fd8:	409d      	lsls	r5, r3
 8006fda:	0037      	movs	r7, r6
 8006fdc:	402f      	ands	r7, r5
 8006fde:	9701      	str	r7, [sp, #4]
    if (iocurrent != 0x00u)
 8006fe0:	422e      	tst	r6, r5
 8006fe2:	d0f2      	beq.n	8006fca <HAL_GPIO_Init+0xca>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fe4:	684e      	ldr	r6, [r1, #4]
 8006fe6:	4026      	ands	r6, r4
 8006fe8:	3e01      	subs	r6, #1
 8006fea:	2e01      	cmp	r6, #1
 8006fec:	d9a4      	bls.n	8006f38 <HAL_GPIO_Init+0x38>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fee:	684d      	ldr	r5, [r1, #4]
 8006ff0:	4025      	ands	r5, r4
 8006ff2:	2d03      	cmp	r5, #3
 8006ff4:	d023      	beq.n	800703e <HAL_GPIO_Init+0x13e>
        temp = GPIOx->PUPDR;
 8006ff6:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006ff8:	0025      	movs	r5, r4
 8006ffa:	4095      	lsls	r5, r2
 8006ffc:	43ae      	bics	r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006ffe:	688d      	ldr	r5, [r1, #8]
 8007000:	4095      	lsls	r5, r2
 8007002:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8007004:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007006:	684d      	ldr	r5, [r1, #4]
 8007008:	4025      	ands	r5, r4
 800700a:	2d02      	cmp	r5, #2
 800700c:	d117      	bne.n	800703e <HAL_GPIO_Init+0x13e>
        temp = GPIOx->AFR[position >> 3u];
 800700e:	08dd      	lsrs	r5, r3, #3
 8007010:	00ad      	lsls	r5, r5, #2
 8007012:	1945      	adds	r5, r0, r5
 8007014:	9502      	str	r5, [sp, #8]
 8007016:	6a2e      	ldr	r6, [r5, #32]
 8007018:	46b0      	mov	r8, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800701a:	2607      	movs	r6, #7
 800701c:	401e      	ands	r6, r3
 800701e:	00b6      	lsls	r6, r6, #2
 8007020:	4657      	mov	r7, sl
 8007022:	40b7      	lsls	r7, r6
 8007024:	46bb      	mov	fp, r7
 8007026:	4647      	mov	r7, r8
 8007028:	465d      	mov	r5, fp
 800702a:	43af      	bics	r7, r5
 800702c:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800702e:	690d      	ldr	r5, [r1, #16]
 8007030:	002f      	movs	r7, r5
 8007032:	40b7      	lsls	r7, r6
 8007034:	003e      	movs	r6, r7
 8007036:	4645      	mov	r5, r8
 8007038:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 800703a:	9d02      	ldr	r5, [sp, #8]
 800703c:	622e      	str	r6, [r5, #32]
      temp = GPIOx->MODER;
 800703e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007040:	0025      	movs	r5, r4
 8007042:	4095      	lsls	r5, r2
 8007044:	43ae      	bics	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007046:	684d      	ldr	r5, [r1, #4]
 8007048:	4025      	ands	r5, r4
 800704a:	4095      	lsls	r5, r2
 800704c:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 800704e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007050:	684d      	ldr	r5, [r1, #4]
 8007052:	464e      	mov	r6, r9
 8007054:	4235      	tst	r5, r6
 8007056:	d0b8      	beq.n	8006fca <HAL_GPIO_Init+0xca>
        temp = EXTI->EXTICR[position >> 2u];
 8007058:	089d      	lsrs	r5, r3, #2
 800705a:	00ad      	lsls	r5, r5, #2
 800705c:	4e1b      	ldr	r6, [pc, #108]	; (80070cc <HAL_GPIO_Init+0x1cc>)
 800705e:	46b0      	mov	r8, r6
 8007060:	4445      	add	r5, r8
 8007062:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8007064:	9602      	str	r6, [sp, #8]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007066:	0027      	movs	r7, r4
 8007068:	401f      	ands	r7, r3
 800706a:	00ff      	lsls	r7, r7, #3
 800706c:	46bb      	mov	fp, r7
 800706e:	4657      	mov	r7, sl
 8007070:	465e      	mov	r6, fp
 8007072:	40b7      	lsls	r7, r6
 8007074:	9e02      	ldr	r6, [sp, #8]
 8007076:	43be      	bics	r6, r7
 8007078:	46b0      	mov	r8, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800707a:	26a0      	movs	r6, #160	; 0xa0
 800707c:	05f6      	lsls	r6, r6, #23
 800707e:	42b0      	cmp	r0, r6
 8007080:	d100      	bne.n	8007084 <HAL_GPIO_Init+0x184>
 8007082:	e76d      	b.n	8006f60 <HAL_GPIO_Init+0x60>
 8007084:	4e12      	ldr	r6, [pc, #72]	; (80070d0 <HAL_GPIO_Init+0x1d0>)
 8007086:	42b0      	cmp	r0, r6
 8007088:	d007      	beq.n	800709a <HAL_GPIO_Init+0x19a>
 800708a:	4e12      	ldr	r6, [pc, #72]	; (80070d4 <HAL_GPIO_Init+0x1d4>)
 800708c:	42b0      	cmp	r0, r6
 800708e:	d006      	beq.n	800709e <HAL_GPIO_Init+0x19e>
 8007090:	9e03      	ldr	r6, [sp, #12]
 8007092:	4667      	mov	r7, ip
 8007094:	43be      	bics	r6, r7
 8007096:	3605      	adds	r6, #5
 8007098:	e763      	b.n	8006f62 <HAL_GPIO_Init+0x62>
 800709a:	2601      	movs	r6, #1
 800709c:	e761      	b.n	8006f62 <HAL_GPIO_Init+0x62>
 800709e:	2602      	movs	r6, #2
 80070a0:	e75f      	b.n	8006f62 <HAL_GPIO_Init+0x62>
          temp |= iocurrent;
 80070a2:	9e01      	ldr	r6, [sp, #4]
 80070a4:	4335      	orrs	r5, r6
 80070a6:	e76c      	b.n	8006f82 <HAL_GPIO_Init+0x82>
          temp |= iocurrent;
 80070a8:	9e01      	ldr	r6, [sp, #4]
 80070aa:	4335      	orrs	r5, r6
 80070ac:	e772      	b.n	8006f94 <HAL_GPIO_Init+0x94>
          temp |= iocurrent;
 80070ae:	9e01      	ldr	r6, [sp, #4]
 80070b0:	4335      	orrs	r5, r6
 80070b2:	e779      	b.n	8006fa8 <HAL_GPIO_Init+0xa8>
          temp |= iocurrent;
 80070b4:	9e01      	ldr	r6, [sp, #4]
 80070b6:	4335      	orrs	r5, r6
 80070b8:	e784      	b.n	8006fc4 <HAL_GPIO_Init+0xc4>
  }
}
 80070ba:	b005      	add	sp, #20
 80070bc:	bcf0      	pop	{r4, r5, r6, r7}
 80070be:	46bb      	mov	fp, r7
 80070c0:	46b2      	mov	sl, r6
 80070c2:	46a9      	mov	r9, r5
 80070c4:	46a0      	mov	r8, r4
 80070c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c8:	affff400 	.word	0xaffff400
 80070cc:	40021800 	.word	0x40021800
 80070d0:	50000400 	.word	0x50000400
 80070d4:	50000800 	.word	0x50000800

080070d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80070d8:	6900      	ldr	r0, [r0, #16]
 80070da:	4008      	ands	r0, r1
 80070dc:	1e43      	subs	r3, r0, #1
 80070de:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80070e0:	b2c0      	uxtb	r0, r0
}
 80070e2:	4770      	bx	lr

080070e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070e4:	2a00      	cmp	r2, #0
 80070e6:	d001      	beq.n	80070ec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070e8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070ea:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070ec:	6281      	str	r1, [r0, #40]	; 0x28
}
 80070ee:	e7fc      	b.n	80070ea <HAL_GPIO_WritePin+0x6>

080070f0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070f0:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070f2:	0013      	movs	r3, r2
 80070f4:	400b      	ands	r3, r1
 80070f6:	041b      	lsls	r3, r3, #16
 80070f8:	4391      	bics	r1, r2
 80070fa:	430b      	orrs	r3, r1
 80070fc:	6183      	str	r3, [r0, #24]
}
 80070fe:	4770      	bx	lr

08007100 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007100:	6802      	ldr	r2, [r0, #0]
 8007102:	6993      	ldr	r3, [r2, #24]
 8007104:	079b      	lsls	r3, r3, #30
 8007106:	d501      	bpl.n	800710c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007108:	2300      	movs	r3, #0
 800710a:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800710c:	6803      	ldr	r3, [r0, #0]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	07d2      	lsls	r2, r2, #31
 8007112:	d403      	bmi.n	800711c <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	2101      	movs	r1, #1
 8007118:	430a      	orrs	r2, r1
 800711a:	619a      	str	r2, [r3, #24]
  }
}
 800711c:	4770      	bx	lr
	...

08007120 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007120:	b530      	push	{r4, r5, lr}
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007122:	6800      	ldr	r0, [r0, #0]
 8007124:	6844      	ldr	r4, [r0, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007126:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007128:	9d03      	ldr	r5, [sp, #12]
 800712a:	432b      	orrs	r3, r5
 800712c:	431a      	orrs	r2, r3
 800712e:	0589      	lsls	r1, r1, #22
 8007130:	0d89      	lsrs	r1, r1, #22
 8007132:	430a      	orrs	r2, r1
 8007134:	0052      	lsls	r2, r2, #1
 8007136:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007138:	0d6b      	lsrs	r3, r5, #21
 800713a:	2180      	movs	r1, #128	; 0x80
 800713c:	00c9      	lsls	r1, r1, #3
 800713e:	400b      	ands	r3, r1
 8007140:	4902      	ldr	r1, [pc, #8]	; (800714c <I2C_TransferConfig+0x2c>)
 8007142:	430b      	orrs	r3, r1
 8007144:	439c      	bics	r4, r3
 8007146:	4322      	orrs	r2, r4
 8007148:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800714a:	bd30      	pop	{r4, r5, pc}
 800714c:	03ff63ff 	.word	0x03ff63ff

08007150 <I2C_IsErrorOccurred>:
{
 8007150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007152:	46de      	mov	lr, fp
 8007154:	4657      	mov	r7, sl
 8007156:	464e      	mov	r6, r9
 8007158:	4645      	mov	r5, r8
 800715a:	b5e0      	push	{r5, r6, r7, lr}
 800715c:	0004      	movs	r4, r0
 800715e:	000d      	movs	r5, r1
 8007160:	4690      	mov	r8, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8007162:	6801      	ldr	r1, [r0, #0]
 8007164:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007166:	2210      	movs	r2, #16
 8007168:	0016      	movs	r6, r2
 800716a:	401e      	ands	r6, r3
  HAL_StatusTypeDef status = HAL_OK;
 800716c:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800716e:	421a      	tst	r2, r3
 8007170:	d048      	beq.n	8007204 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007172:	2310      	movs	r3, #16
 8007174:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	4699      	mov	r9, r3
  HAL_StatusTypeDef status = HAL_OK;
 800717a:	2700      	movs	r7, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800717c:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 800717e:	3342      	adds	r3, #66	; 0x42
 8007180:	469b      	mov	fp, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007182:	2380      	movs	r3, #128	; 0x80
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	469a      	mov	sl, r3
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	6993      	ldr	r3, [r2, #24]
 800718c:	421e      	tst	r6, r3
 800718e:	d130      	bne.n	80071f2 <I2C_IsErrorOccurred+0xa2>
 8007190:	2f00      	cmp	r7, #0
 8007192:	d132      	bne.n	80071fa <I2C_IsErrorOccurred+0xaa>
      if (Timeout != HAL_MAX_DELAY)
 8007194:	1c6b      	adds	r3, r5, #1
 8007196:	d0f8      	beq.n	800718a <I2C_IsErrorOccurred+0x3a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007198:	f7ff f8ce 	bl	8006338 <HAL_GetTick>
 800719c:	4643      	mov	r3, r8
 800719e:	1ac0      	subs	r0, r0, r3
 80071a0:	42a8      	cmp	r0, r5
 80071a2:	d801      	bhi.n	80071a8 <I2C_IsErrorOccurred+0x58>
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	d1ef      	bne.n	8007188 <I2C_IsErrorOccurred+0x38>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 80071ac:	465b      	mov	r3, fp
 80071ae:	5ce3      	ldrb	r3, [r4, r3]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	469c      	mov	ip, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80071b4:	6991      	ldr	r1, [r2, #24]
 80071b6:	4653      	mov	r3, sl
 80071b8:	4219      	tst	r1, r3
 80071ba:	d004      	beq.n	80071c6 <I2C_IsErrorOccurred+0x76>
 80071bc:	0440      	lsls	r0, r0, #17
 80071be:	d402      	bmi.n	80071c6 <I2C_IsErrorOccurred+0x76>
              (tmp1 != I2C_CR2_STOP) && \
 80071c0:	4663      	mov	r3, ip
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d10c      	bne.n	80071e0 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	421e      	tst	r6, r3
 80071cc:	d1dc      	bne.n	8007188 <I2C_IsErrorOccurred+0x38>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80071ce:	f7ff f8b3 	bl	8006338 <HAL_GetTick>
 80071d2:	4643      	mov	r3, r8
 80071d4:	1ac0      	subs	r0, r0, r3
 80071d6:	2819      	cmp	r0, #25
 80071d8:	d9f5      	bls.n	80071c6 <I2C_IsErrorOccurred+0x76>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80071da:	46b1      	mov	r9, r6
              status = HAL_ERROR;
 80071dc:	2701      	movs	r7, #1
 80071de:	e7d3      	b.n	8007188 <I2C_IsErrorOccurred+0x38>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071e0:	6851      	ldr	r1, [r2, #4]
 80071e2:	2380      	movs	r3, #128	; 0x80
 80071e4:	01db      	lsls	r3, r3, #7
 80071e6:	430b      	orrs	r3, r1
 80071e8:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 80071ea:	f7ff f8a5 	bl	8006338 <HAL_GetTick>
 80071ee:	4680      	mov	r8, r0
 80071f0:	e7e9      	b.n	80071c6 <I2C_IsErrorOccurred+0x76>
    if (status == HAL_OK)
 80071f2:	2f00      	cmp	r7, #0
 80071f4:	d101      	bne.n	80071fa <I2C_IsErrorOccurred+0xaa>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f6:	2320      	movs	r3, #32
 80071f8:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80071fa:	2604      	movs	r6, #4
 80071fc:	464b      	mov	r3, r9
 80071fe:	4333      	orrs	r3, r6
 8007200:	001e      	movs	r6, r3
    status = HAL_ERROR;
 8007202:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007208:	05d9      	lsls	r1, r3, #23
 800720a:	d504      	bpl.n	8007216 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800720c:	2101      	movs	r1, #1
 800720e:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007210:	31ff      	adds	r1, #255	; 0xff
 8007212:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8007214:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007216:	055a      	lsls	r2, r3, #21
 8007218:	d527      	bpl.n	800726a <I2C_IsErrorOccurred+0x11a>
    error_code |= HAL_I2C_ERROR_OVR;
 800721a:	2208      	movs	r2, #8
 800721c:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	2180      	movs	r1, #128	; 0x80
 8007222:	00c9      	lsls	r1, r1, #3
 8007224:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007226:	059b      	lsls	r3, r3, #22
 8007228:	d505      	bpl.n	8007236 <I2C_IsErrorOccurred+0xe6>
    error_code |= HAL_I2C_ERROR_ARLO;
 800722a:	2302      	movs	r3, #2
 800722c:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	2280      	movs	r2, #128	; 0x80
 8007232:	0092      	lsls	r2, r2, #2
 8007234:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8007236:	0020      	movs	r0, r4
 8007238:	f7ff ff62 	bl	8007100 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	6853      	ldr	r3, [r2, #4]
 8007240:	490c      	ldr	r1, [pc, #48]	; (8007274 <I2C_IsErrorOccurred+0x124>)
 8007242:	400b      	ands	r3, r1
 8007244:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8007246:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007248:	4333      	orrs	r3, r6
 800724a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800724c:	2341      	movs	r3, #65	; 0x41
 800724e:	2220      	movs	r2, #32
 8007250:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007252:	2300      	movs	r3, #0
 8007254:	3222      	adds	r2, #34	; 0x22
 8007256:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8007258:	3a02      	subs	r2, #2
 800725a:	54a3      	strb	r3, [r4, r2]
 800725c:	2001      	movs	r0, #1
}
 800725e:	bcf0      	pop	{r4, r5, r6, r7}
 8007260:	46bb      	mov	fp, r7
 8007262:	46b2      	mov	sl, r6
 8007264:	46a9      	mov	r9, r5
 8007266:	46a0      	mov	r8, r4
 8007268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800726a:	059b      	lsls	r3, r3, #22
 800726c:	d4dd      	bmi.n	800722a <I2C_IsErrorOccurred+0xda>
  if (status != HAL_OK)
 800726e:	2800      	cmp	r0, #0
 8007270:	d0f5      	beq.n	800725e <I2C_IsErrorOccurred+0x10e>
 8007272:	e7e0      	b.n	8007236 <I2C_IsErrorOccurred+0xe6>
 8007274:	fe00e800 	.word	0xfe00e800

08007278 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	0004      	movs	r4, r0
 800727c:	000d      	movs	r5, r1
 800727e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007280:	2702      	movs	r7, #2
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	421f      	tst	r7, r3
 8007288:	d11c      	bne.n	80072c4 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800728a:	0032      	movs	r2, r6
 800728c:	0029      	movs	r1, r5
 800728e:	0020      	movs	r0, r4
 8007290:	f7ff ff5e 	bl	8007150 <I2C_IsErrorOccurred>
 8007294:	2800      	cmp	r0, #0
 8007296:	d117      	bne.n	80072c8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007298:	1c6b      	adds	r3, r5, #1
 800729a:	d0f2      	beq.n	8007282 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729c:	f7ff f84c 	bl	8006338 <HAL_GetTick>
 80072a0:	1b80      	subs	r0, r0, r6
 80072a2:	42a8      	cmp	r0, r5
 80072a4:	d801      	bhi.n	80072aa <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	d1eb      	bne.n	8007282 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80072ac:	2220      	movs	r2, #32
 80072ae:	4313      	orrs	r3, r2
 80072b0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072b2:	2341      	movs	r3, #65	; 0x41
 80072b4:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	3222      	adds	r2, #34	; 0x22
 80072ba:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80072bc:	3a02      	subs	r2, #2
 80072be:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 80072c0:	2001      	movs	r0, #1
 80072c2:	e000      	b.n	80072c6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 80072c4:	2000      	movs	r0, #0
}
 80072c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80072c8:	2001      	movs	r0, #1
 80072ca:	e7fc      	b.n	80072c6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

080072cc <I2C_WaitOnFlagUntilTimeout>:
{
 80072cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ce:	46c6      	mov	lr, r8
 80072d0:	b500      	push	{lr}
 80072d2:	4680      	mov	r8, r0
 80072d4:	000d      	movs	r5, r1
 80072d6:	0017      	movs	r7, r2
 80072d8:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072da:	4643      	mov	r3, r8
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699c      	ldr	r4, [r3, #24]
 80072e0:	402c      	ands	r4, r5
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	4262      	negs	r2, r4
 80072e6:	4154      	adcs	r4, r2
 80072e8:	42bc      	cmp	r4, r7
 80072ea:	d118      	bne.n	800731e <I2C_WaitOnFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80072ec:	1c72      	adds	r2, r6, #1
 80072ee:	d0f6      	beq.n	80072de <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f0:	f7ff f822 	bl	8006338 <HAL_GetTick>
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	1ac0      	subs	r0, r0, r3
 80072f8:	42b0      	cmp	r0, r6
 80072fa:	d801      	bhi.n	8007300 <I2C_WaitOnFlagUntilTimeout+0x34>
 80072fc:	2e00      	cmp	r6, #0
 80072fe:	d1ec      	bne.n	80072da <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007300:	4643      	mov	r3, r8
 8007302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007304:	2220      	movs	r2, #32
 8007306:	4313      	orrs	r3, r2
 8007308:	4641      	mov	r1, r8
 800730a:	644b      	str	r3, [r1, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800730c:	2341      	movs	r3, #65	; 0x41
 800730e:	54ca      	strb	r2, [r1, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007310:	2300      	movs	r3, #0
 8007312:	3222      	adds	r2, #34	; 0x22
 8007314:	548b      	strb	r3, [r1, r2]
        __HAL_UNLOCK(hi2c);
 8007316:	3a02      	subs	r2, #2
 8007318:	548b      	strb	r3, [r1, r2]
        return HAL_ERROR;
 800731a:	2001      	movs	r0, #1
 800731c:	e000      	b.n	8007320 <I2C_WaitOnFlagUntilTimeout+0x54>
  return HAL_OK;
 800731e:	2000      	movs	r0, #0
}
 8007320:	bc80      	pop	{r7}
 8007322:	46b8      	mov	r8, r7
 8007324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007326 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007328:	0005      	movs	r5, r0
 800732a:	000c      	movs	r4, r1
 800732c:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800732e:	2720      	movs	r7, #32
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	421f      	tst	r7, r3
 8007336:	d11a      	bne.n	800736e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007338:	0032      	movs	r2, r6
 800733a:	0021      	movs	r1, r4
 800733c:	0028      	movs	r0, r5
 800733e:	f7ff ff07 	bl	8007150 <I2C_IsErrorOccurred>
 8007342:	2800      	cmp	r0, #0
 8007344:	d115      	bne.n	8007372 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007346:	f7fe fff7 	bl	8006338 <HAL_GetTick>
 800734a:	1b80      	subs	r0, r0, r6
 800734c:	42a0      	cmp	r0, r4
 800734e:	d801      	bhi.n	8007354 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007350:	2c00      	cmp	r4, #0
 8007352:	d1ed      	bne.n	8007330 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007354:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007356:	2220      	movs	r2, #32
 8007358:	4313      	orrs	r3, r2
 800735a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800735c:	2341      	movs	r3, #65	; 0x41
 800735e:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007360:	2300      	movs	r3, #0
 8007362:	3222      	adds	r2, #34	; 0x22
 8007364:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 8007366:	3a02      	subs	r2, #2
 8007368:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 800736a:	2001      	movs	r0, #1
}
 800736c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800736e:	2000      	movs	r0, #0
 8007370:	e7fc      	b.n	800736c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8007372:	2001      	movs	r0, #1
 8007374:	e7fa      	b.n	800736c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08007378 <HAL_I2C_Init>:
{
 8007378:	b510      	push	{r4, lr}
 800737a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 800737c:	d059      	beq.n	8007432 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800737e:	2341      	movs	r3, #65	; 0x41
 8007380:	5cc3      	ldrb	r3, [r0, r3]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d043      	beq.n	800740e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007386:	2341      	movs	r3, #65	; 0x41
 8007388:	2224      	movs	r2, #36	; 0x24
 800738a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	6813      	ldr	r3, [r2, #0]
 8007390:	2101      	movs	r1, #1
 8007392:	438b      	bics	r3, r1
 8007394:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	6863      	ldr	r3, [r4, #4]
 800739a:	4927      	ldr	r1, [pc, #156]	; (8007438 <HAL_I2C_Init+0xc0>)
 800739c:	400b      	ands	r3, r1
 800739e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073a0:	6822      	ldr	r2, [r4, #0]
 80073a2:	6893      	ldr	r3, [r2, #8]
 80073a4:	4925      	ldr	r1, [pc, #148]	; (800743c <HAL_I2C_Init+0xc4>)
 80073a6:	400b      	ands	r3, r1
 80073a8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d034      	beq.n	800741a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073b0:	6822      	ldr	r2, [r4, #0]
 80073b2:	68a1      	ldr	r1, [r4, #8]
 80073b4:	2384      	movs	r3, #132	; 0x84
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073bc:	68e3      	ldr	r3, [r4, #12]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d032      	beq.n	8007428 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	6851      	ldr	r1, [r2, #4]
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <HAL_I2C_Init+0xc8>)
 80073c8:	430b      	orrs	r3, r1
 80073ca:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073cc:	6822      	ldr	r2, [r4, #0]
 80073ce:	68d3      	ldr	r3, [r2, #12]
 80073d0:	491a      	ldr	r1, [pc, #104]	; (800743c <HAL_I2C_Init+0xc4>)
 80073d2:	400b      	ands	r3, r1
 80073d4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073d6:	6821      	ldr	r1, [r4, #0]
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	6962      	ldr	r2, [r4, #20]
 80073dc:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80073de:	69a2      	ldr	r2, [r4, #24]
 80073e0:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80073e6:	6822      	ldr	r2, [r4, #0]
 80073e8:	69e3      	ldr	r3, [r4, #28]
 80073ea:	6a21      	ldr	r1, [r4, #32]
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80073f0:	6822      	ldr	r2, [r4, #0]
 80073f2:	6813      	ldr	r3, [r2, #0]
 80073f4:	2101      	movs	r1, #1
 80073f6:	430b      	orrs	r3, r1
 80073f8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80073fe:	2241      	movs	r2, #65	; 0x41
 8007400:	311f      	adds	r1, #31
 8007402:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007404:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007406:	3201      	adds	r2, #1
 8007408:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800740a:	2000      	movs	r0, #0
}
 800740c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800740e:	3340      	adds	r3, #64	; 0x40
 8007410:	2200      	movs	r2, #0
 8007412:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8007414:	f7fe fcbe 	bl	8005d94 <HAL_I2C_MspInit>
 8007418:	e7b5      	b.n	8007386 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	68a1      	ldr	r1, [r4, #8]
 800741e:	2380      	movs	r3, #128	; 0x80
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	430b      	orrs	r3, r1
 8007424:	6093      	str	r3, [r2, #8]
 8007426:	e7c9      	b.n	80073bc <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	2280      	movs	r2, #128	; 0x80
 800742c:	0112      	lsls	r2, r2, #4
 800742e:	605a      	str	r2, [r3, #4]
 8007430:	e7c7      	b.n	80073c2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8007432:	2001      	movs	r0, #1
 8007434:	e7ea      	b.n	800740c <HAL_I2C_Init+0x94>
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	f0ffffff 	.word	0xf0ffffff
 800743c:	ffff7fff 	.word	0xffff7fff
 8007440:	02008000 	.word	0x02008000

08007444 <HAL_I2C_Mem_Write>:
{
 8007444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007446:	46ce      	mov	lr, r9
 8007448:	b500      	push	{lr}
 800744a:	b086      	sub	sp, #24
 800744c:	0004      	movs	r4, r0
 800744e:	9103      	str	r1, [sp, #12]
 8007450:	9205      	str	r2, [sp, #20]
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	ab0c      	add	r3, sp, #48	; 0x30
 8007456:	cb20      	ldmia	r3!, {r5}
 8007458:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800745a:	2341      	movs	r3, #65	; 0x41
 800745c:	5cc3      	ldrb	r3, [r0, r3]
 800745e:	2b20      	cmp	r3, #32
 8007460:	d000      	beq.n	8007464 <HAL_I2C_Mem_Write+0x20>
 8007462:	e0db      	b.n	800761c <HAL_I2C_Mem_Write+0x1d8>
    if ((pData == NULL) || (Size == 0U))
 8007464:	2d00      	cmp	r5, #0
 8007466:	d05a      	beq.n	800751e <HAL_I2C_Mem_Write+0xda>
 8007468:	2e00      	cmp	r6, #0
 800746a:	d058      	beq.n	800751e <HAL_I2C_Mem_Write+0xda>
    __HAL_LOCK(hi2c);
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	5cc3      	ldrb	r3, [r0, r3]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d100      	bne.n	8007476 <HAL_I2C_Mem_Write+0x32>
 8007474:	e0d7      	b.n	8007626 <HAL_I2C_Mem_Write+0x1e2>
 8007476:	2340      	movs	r3, #64	; 0x40
 8007478:	2201      	movs	r2, #1
 800747a:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 800747c:	f7fe ff5c 	bl	8006338 <HAL_GetTick>
 8007480:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007482:	2180      	movs	r1, #128	; 0x80
 8007484:	9000      	str	r0, [sp, #0]
 8007486:	2319      	movs	r3, #25
 8007488:	2201      	movs	r2, #1
 800748a:	0209      	lsls	r1, r1, #8
 800748c:	0020      	movs	r0, r4
 800748e:	f7ff ff1d 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 8007492:	0003      	movs	r3, r0
      return HAL_ERROR;
 8007494:	2001      	movs	r0, #1
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007496:	2b00      	cmp	r3, #0
 8007498:	d000      	beq.n	800749c <HAL_I2C_Mem_Write+0x58>
 800749a:	e0c0      	b.n	800761e <HAL_I2C_Mem_Write+0x1da>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800749c:	3341      	adds	r3, #65	; 0x41
 800749e:	2221      	movs	r2, #33	; 0x21
 80074a0:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074a2:	3301      	adds	r3, #1
 80074a4:	321f      	adds	r2, #31
 80074a6:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80074ac:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80074ae:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074b0:	6363      	str	r3, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80074b2:	3380      	adds	r3, #128	; 0x80
 80074b4:	9d04      	ldr	r5, [sp, #16]
 80074b6:	b2ea      	uxtb	r2, r5
 80074b8:	495f      	ldr	r1, [pc, #380]	; (8007638 <HAL_I2C_Mem_Write+0x1f4>)
 80074ba:	9100      	str	r1, [sp, #0]
 80074bc:	045b      	lsls	r3, r3, #17
 80074be:	9903      	ldr	r1, [sp, #12]
 80074c0:	0020      	movs	r0, r4
 80074c2:	f7ff fe2d 	bl	8007120 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074c6:	003a      	movs	r2, r7
 80074c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80074ca:	0020      	movs	r0, r4
 80074cc:	f7ff fed4 	bl	8007278 <I2C_WaitOnTXISFlagUntilTimeout>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d138      	bne.n	8007546 <HAL_I2C_Mem_Write+0x102>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074d4:	2d01      	cmp	r5, #1
 80074d6:	d127      	bne.n	8007528 <HAL_I2C_Mem_Write+0xe4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	466a      	mov	r2, sp
 80074dc:	7d16      	ldrb	r6, [r2, #20]
 80074de:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80074e0:	9700      	str	r7, [sp, #0]
 80074e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074e4:	2200      	movs	r2, #0
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	0020      	movs	r0, r4
 80074ea:	f7ff feef 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d129      	bne.n	8007546 <HAL_I2C_Mem_Write+0x102>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2bff      	cmp	r3, #255	; 0xff
 80074f8:	d92a      	bls.n	8007550 <HAL_I2C_Mem_Write+0x10c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074fa:	23ff      	movs	r3, #255	; 0xff
 80074fc:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074fe:	3b7f      	subs	r3, #127	; 0x7f
 8007500:	2200      	movs	r2, #0
 8007502:	9200      	str	r2, [sp, #0]
 8007504:	045b      	lsls	r3, r3, #17
 8007506:	32ff      	adds	r2, #255	; 0xff
 8007508:	9903      	ldr	r1, [sp, #12]
 800750a:	0020      	movs	r0, r4
 800750c:	f7ff fe08 	bl	8007120 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	049b      	lsls	r3, r3, #18
 8007514:	4699      	mov	r9, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007516:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007518:	2580      	movs	r5, #128	; 0x80
 800751a:	046d      	lsls	r5, r5, #17
 800751c:	e034      	b.n	8007588 <HAL_I2C_Mem_Write+0x144>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800751e:	2380      	movs	r3, #128	; 0x80
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8007524:	2001      	movs	r0, #1
 8007526:	e07a      	b.n	800761e <HAL_I2C_Mem_Write+0x1da>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	9d05      	ldr	r5, [sp, #20]
 800752c:	0a2a      	lsrs	r2, r5, #8
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007530:	003a      	movs	r2, r7
 8007532:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007534:	0020      	movs	r0, r4
 8007536:	f7ff fe9f 	bl	8007278 <I2C_WaitOnTXISFlagUntilTimeout>
 800753a:	2800      	cmp	r0, #0
 800753c:	d103      	bne.n	8007546 <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	b2ee      	uxtb	r6, r5
 8007542:	629e      	str	r6, [r3, #40]	; 0x28
 8007544:	e7cc      	b.n	80074e0 <HAL_I2C_Mem_Write+0x9c>
      __HAL_UNLOCK(hi2c);
 8007546:	2340      	movs	r3, #64	; 0x40
 8007548:	2200      	movs	r2, #0
 800754a:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800754c:	2001      	movs	r0, #1
 800754e:	e066      	b.n	800761e <HAL_I2C_Mem_Write+0x1da>
      hi2c->XferSize = hi2c->XferCount;
 8007550:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007552:	b292      	uxth	r2, r2
 8007554:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007556:	2380      	movs	r3, #128	; 0x80
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	2100      	movs	r1, #0
 800755c:	9100      	str	r1, [sp, #0]
 800755e:	049b      	lsls	r3, r3, #18
 8007560:	9903      	ldr	r1, [sp, #12]
 8007562:	0020      	movs	r0, r4
 8007564:	f7ff fddc 	bl	8007120 <I2C_TransferConfig>
 8007568:	e7d2      	b.n	8007510 <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = hi2c->XferCount;
 800756a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800756c:	b292      	uxth	r2, r2
 800756e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	2300      	movs	r3, #0
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	464b      	mov	r3, r9
 8007578:	9903      	ldr	r1, [sp, #12]
 800757a:	0020      	movs	r0, r4
 800757c:	f7ff fdd0 	bl	8007120 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d032      	beq.n	80075ee <HAL_I2C_Mem_Write+0x1aa>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007588:	003a      	movs	r2, r7
 800758a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800758c:	0020      	movs	r0, r4
 800758e:	f7ff fe73 	bl	8007278 <I2C_WaitOnTXISFlagUntilTimeout>
 8007592:	2800      	cmp	r0, #0
 8007594:	d149      	bne.n	800762a <HAL_I2C_Mem_Write+0x1e6>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800759a:	7812      	ldrb	r2, [r2, #0]
 800759c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800759e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a0:	3301      	adds	r3, #1
 80075a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80075a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80075ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80075b6:	b292      	uxth	r2, r2
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	d0e1      	beq.n	8007580 <HAL_I2C_Mem_Write+0x13c>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1df      	bne.n	8007580 <HAL_I2C_Mem_Write+0x13c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075c0:	9700      	str	r7, [sp, #0]
 80075c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075c4:	2200      	movs	r2, #0
 80075c6:	2180      	movs	r1, #128	; 0x80
 80075c8:	0020      	movs	r0, r4
 80075ca:	f7ff fe7f 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d12d      	bne.n	800762e <HAL_I2C_Mem_Write+0x1ea>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2bff      	cmp	r3, #255	; 0xff
 80075d8:	d9c7      	bls.n	800756a <HAL_I2C_Mem_Write+0x126>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075da:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075dc:	2300      	movs	r3, #0
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	002b      	movs	r3, r5
 80075e2:	0032      	movs	r2, r6
 80075e4:	9903      	ldr	r1, [sp, #12]
 80075e6:	0020      	movs	r0, r4
 80075e8:	f7ff fd9a 	bl	8007120 <I2C_TransferConfig>
 80075ec:	e7c8      	b.n	8007580 <HAL_I2C_Mem_Write+0x13c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ee:	003a      	movs	r2, r7
 80075f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80075f2:	0020      	movs	r0, r4
 80075f4:	f7ff fe97 	bl	8007326 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d11a      	bne.n	8007632 <HAL_I2C_Mem_Write+0x1ee>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	2220      	movs	r2, #32
 8007600:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007602:	6821      	ldr	r1, [r4, #0]
 8007604:	684b      	ldr	r3, [r1, #4]
 8007606:	4d0d      	ldr	r5, [pc, #52]	; (800763c <HAL_I2C_Mem_Write+0x1f8>)
 8007608:	402b      	ands	r3, r5
 800760a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800760c:	2341      	movs	r3, #65	; 0x41
 800760e:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007610:	2300      	movs	r3, #0
 8007612:	3222      	adds	r2, #34	; 0x22
 8007614:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8007616:	3a02      	subs	r2, #2
 8007618:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 800761a:	e000      	b.n	800761e <HAL_I2C_Mem_Write+0x1da>
    return HAL_BUSY;
 800761c:	2002      	movs	r0, #2
}
 800761e:	b006      	add	sp, #24
 8007620:	bc80      	pop	{r7}
 8007622:	46b9      	mov	r9, r7
 8007624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8007626:	2002      	movs	r0, #2
 8007628:	e7f9      	b.n	800761e <HAL_I2C_Mem_Write+0x1da>
        return HAL_ERROR;
 800762a:	2001      	movs	r0, #1
 800762c:	e7f7      	b.n	800761e <HAL_I2C_Mem_Write+0x1da>
          return HAL_ERROR;
 800762e:	2001      	movs	r0, #1
 8007630:	e7f5      	b.n	800761e <HAL_I2C_Mem_Write+0x1da>
      return HAL_ERROR;
 8007632:	2001      	movs	r0, #1
 8007634:	e7f3      	b.n	800761e <HAL_I2C_Mem_Write+0x1da>
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	80002000 	.word	0x80002000
 800763c:	fe00e800 	.word	0xfe00e800

08007640 <HAL_I2C_Mem_Read>:
{
 8007640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007642:	46ce      	mov	lr, r9
 8007644:	b500      	push	{lr}
 8007646:	b086      	sub	sp, #24
 8007648:	0004      	movs	r4, r0
 800764a:	9103      	str	r1, [sp, #12]
 800764c:	9205      	str	r2, [sp, #20]
 800764e:	9304      	str	r3, [sp, #16]
 8007650:	ab0c      	add	r3, sp, #48	; 0x30
 8007652:	cb20      	ldmia	r3!, {r5}
 8007654:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007656:	2341      	movs	r3, #65	; 0x41
 8007658:	5cc3      	ldrb	r3, [r0, r3]
 800765a:	2b20      	cmp	r3, #32
 800765c:	d000      	beq.n	8007660 <HAL_I2C_Mem_Read+0x20>
 800765e:	e0dc      	b.n	800781a <HAL_I2C_Mem_Read+0x1da>
    if ((pData == NULL) || (Size == 0U))
 8007660:	2d00      	cmp	r5, #0
 8007662:	d059      	beq.n	8007718 <HAL_I2C_Mem_Read+0xd8>
 8007664:	2e00      	cmp	r6, #0
 8007666:	d057      	beq.n	8007718 <HAL_I2C_Mem_Read+0xd8>
    __HAL_LOCK(hi2c);
 8007668:	2340      	movs	r3, #64	; 0x40
 800766a:	5cc3      	ldrb	r3, [r0, r3]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d100      	bne.n	8007672 <HAL_I2C_Mem_Read+0x32>
 8007670:	e0d8      	b.n	8007824 <HAL_I2C_Mem_Read+0x1e4>
 8007672:	2340      	movs	r3, #64	; 0x40
 8007674:	2201      	movs	r2, #1
 8007676:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8007678:	f7fe fe5e 	bl	8006338 <HAL_GetTick>
 800767c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800767e:	2180      	movs	r1, #128	; 0x80
 8007680:	9000      	str	r0, [sp, #0]
 8007682:	2319      	movs	r3, #25
 8007684:	2201      	movs	r2, #1
 8007686:	0209      	lsls	r1, r1, #8
 8007688:	0020      	movs	r0, r4
 800768a:	f7ff fe1f 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 800768e:	0003      	movs	r3, r0
      return HAL_ERROR;
 8007690:	2001      	movs	r0, #1
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007692:	2b00      	cmp	r3, #0
 8007694:	d000      	beq.n	8007698 <HAL_I2C_Mem_Read+0x58>
 8007696:	e0c1      	b.n	800781c <HAL_I2C_Mem_Read+0x1dc>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007698:	3341      	adds	r3, #65	; 0x41
 800769a:	2222      	movs	r2, #34	; 0x22
 800769c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800769e:	3301      	adds	r3, #1
 80076a0:	321e      	adds	r2, #30
 80076a2:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80076a8:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80076aa:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076ac:	6363      	str	r3, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076ae:	9d04      	ldr	r5, [sp, #16]
 80076b0:	b2ea      	uxtb	r2, r5
 80076b2:	4b60      	ldr	r3, [pc, #384]	; (8007834 <HAL_I2C_Mem_Read+0x1f4>)
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9903      	ldr	r1, [sp, #12]
 80076ba:	0020      	movs	r0, r4
 80076bc:	f7ff fd30 	bl	8007120 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c0:	003a      	movs	r2, r7
 80076c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80076c4:	0020      	movs	r0, r4
 80076c6:	f7ff fdd7 	bl	8007278 <I2C_WaitOnTXISFlagUntilTimeout>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d138      	bne.n	8007740 <HAL_I2C_Mem_Read+0x100>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076ce:	2d01      	cmp	r5, #1
 80076d0:	d127      	bne.n	8007722 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	466a      	mov	r2, sp
 80076d6:	7d16      	ldrb	r6, [r2, #20]
 80076d8:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80076da:	9700      	str	r7, [sp, #0]
 80076dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076de:	2200      	movs	r2, #0
 80076e0:	2140      	movs	r1, #64	; 0x40
 80076e2:	0020      	movs	r0, r4
 80076e4:	f7ff fdf2 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d129      	bne.n	8007740 <HAL_I2C_Mem_Read+0x100>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2bff      	cmp	r3, #255	; 0xff
 80076f2:	d92a      	bls.n	800774a <HAL_I2C_Mem_Read+0x10a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076f4:	23ff      	movs	r3, #255	; 0xff
 80076f6:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076f8:	3b7f      	subs	r3, #127	; 0x7f
 80076fa:	4a4f      	ldr	r2, [pc, #316]	; (8007838 <HAL_I2C_Mem_Read+0x1f8>)
 80076fc:	9200      	str	r2, [sp, #0]
 80076fe:	045b      	lsls	r3, r3, #17
 8007700:	22ff      	movs	r2, #255	; 0xff
 8007702:	9903      	ldr	r1, [sp, #12]
 8007704:	0020      	movs	r0, r4
 8007706:	f7ff fd0b 	bl	8007120 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800770a:	2380      	movs	r3, #128	; 0x80
 800770c:	049b      	lsls	r3, r3, #18
 800770e:	4699      	mov	r9, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007710:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007712:	2580      	movs	r5, #128	; 0x80
 8007714:	046d      	lsls	r5, r5, #17
 8007716:	e034      	b.n	8007782 <HAL_I2C_Mem_Read+0x142>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800771e:	2001      	movs	r0, #1
 8007720:	e07c      	b.n	800781c <HAL_I2C_Mem_Read+0x1dc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	9d05      	ldr	r5, [sp, #20]
 8007726:	0a2a      	lsrs	r2, r5, #8
 8007728:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800772a:	003a      	movs	r2, r7
 800772c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800772e:	0020      	movs	r0, r4
 8007730:	f7ff fda2 	bl	8007278 <I2C_WaitOnTXISFlagUntilTimeout>
 8007734:	2800      	cmp	r0, #0
 8007736:	d103      	bne.n	8007740 <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	b2ee      	uxtb	r6, r5
 800773c:	629e      	str	r6, [r3, #40]	; 0x28
 800773e:	e7cc      	b.n	80076da <HAL_I2C_Mem_Read+0x9a>
      __HAL_UNLOCK(hi2c);
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	2200      	movs	r2, #0
 8007744:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8007746:	2001      	movs	r0, #1
 8007748:	e068      	b.n	800781c <HAL_I2C_Mem_Read+0x1dc>
      hi2c->XferSize = hi2c->XferCount;
 800774a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800774c:	b292      	uxth	r2, r2
 800774e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	4938      	ldr	r1, [pc, #224]	; (8007838 <HAL_I2C_Mem_Read+0x1f8>)
 8007756:	9100      	str	r1, [sp, #0]
 8007758:	049b      	lsls	r3, r3, #18
 800775a:	9903      	ldr	r1, [sp, #12]
 800775c:	0020      	movs	r0, r4
 800775e:	f7ff fcdf 	bl	8007120 <I2C_TransferConfig>
 8007762:	e7d2      	b.n	800770a <HAL_I2C_Mem_Read+0xca>
          hi2c->XferSize = hi2c->XferCount;
 8007764:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007766:	b292      	uxth	r2, r2
 8007768:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	2300      	movs	r3, #0
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	464b      	mov	r3, r9
 8007772:	9903      	ldr	r1, [sp, #12]
 8007774:	0020      	movs	r0, r4
 8007776:	f7ff fcd3 	bl	8007120 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800777a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d034      	beq.n	80077ec <HAL_I2C_Mem_Read+0x1ac>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007782:	9700      	str	r7, [sp, #0]
 8007784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007786:	2200      	movs	r2, #0
 8007788:	2104      	movs	r1, #4
 800778a:	0020      	movs	r0, r4
 800778c:	f7ff fd9e 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 8007790:	2800      	cmp	r0, #0
 8007792:	d149      	bne.n	8007828 <HAL_I2C_Mem_Read+0x1e8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800779a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800779c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800779e:	3301      	adds	r3, #1
 80077a0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80077a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80077aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80077ac:	3a01      	subs	r2, #1
 80077ae:	b292      	uxth	r2, r2
 80077b0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80077b4:	b292      	uxth	r2, r2
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	d0df      	beq.n	800777a <HAL_I2C_Mem_Read+0x13a>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1dd      	bne.n	800777a <HAL_I2C_Mem_Read+0x13a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077be:	9700      	str	r7, [sp, #0]
 80077c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c2:	2200      	movs	r2, #0
 80077c4:	2180      	movs	r1, #128	; 0x80
 80077c6:	0020      	movs	r0, r4
 80077c8:	f7ff fd80 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d12d      	bne.n	800782c <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	2bff      	cmp	r3, #255	; 0xff
 80077d6:	d9c5      	bls.n	8007764 <HAL_I2C_Mem_Read+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077d8:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80077da:	2300      	movs	r3, #0
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	002b      	movs	r3, r5
 80077e0:	0032      	movs	r2, r6
 80077e2:	9903      	ldr	r1, [sp, #12]
 80077e4:	0020      	movs	r0, r4
 80077e6:	f7ff fc9b 	bl	8007120 <I2C_TransferConfig>
 80077ea:	e7c6      	b.n	800777a <HAL_I2C_Mem_Read+0x13a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ec:	003a      	movs	r2, r7
 80077ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80077f0:	0020      	movs	r0, r4
 80077f2:	f7ff fd98 	bl	8007326 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d11a      	bne.n	8007830 <HAL_I2C_Mem_Read+0x1f0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	2220      	movs	r2, #32
 80077fe:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007800:	6821      	ldr	r1, [r4, #0]
 8007802:	684b      	ldr	r3, [r1, #4]
 8007804:	4d0d      	ldr	r5, [pc, #52]	; (800783c <HAL_I2C_Mem_Read+0x1fc>)
 8007806:	402b      	ands	r3, r5
 8007808:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800780a:	2341      	movs	r3, #65	; 0x41
 800780c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800780e:	2300      	movs	r3, #0
 8007810:	3222      	adds	r2, #34	; 0x22
 8007812:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8007814:	3a02      	subs	r2, #2
 8007816:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8007818:	e000      	b.n	800781c <HAL_I2C_Mem_Read+0x1dc>
    return HAL_BUSY;
 800781a:	2002      	movs	r0, #2
}
 800781c:	b006      	add	sp, #24
 800781e:	bc80      	pop	{r7}
 8007820:	46b9      	mov	r9, r7
 8007822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8007824:	2002      	movs	r0, #2
 8007826:	e7f9      	b.n	800781c <HAL_I2C_Mem_Read+0x1dc>
        return HAL_ERROR;
 8007828:	2001      	movs	r0, #1
 800782a:	e7f7      	b.n	800781c <HAL_I2C_Mem_Read+0x1dc>
          return HAL_ERROR;
 800782c:	2001      	movs	r0, #1
 800782e:	e7f5      	b.n	800781c <HAL_I2C_Mem_Read+0x1dc>
      return HAL_ERROR;
 8007830:	2001      	movs	r0, #1
 8007832:	e7f3      	b.n	800781c <HAL_I2C_Mem_Read+0x1dc>
 8007834:	80002000 	.word	0x80002000
 8007838:	80002400 	.word	0x80002400
 800783c:	fe00e800 	.word	0xfe00e800

08007840 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007840:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007842:	2341      	movs	r3, #65	; 0x41
 8007844:	5cc3      	ldrb	r3, [r0, r3]
 8007846:	2b20      	cmp	r3, #32
 8007848:	d120      	bne.n	800788c <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800784a:	3320      	adds	r3, #32
 800784c:	5cc3      	ldrb	r3, [r0, r3]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d01e      	beq.n	8007890 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8007852:	2440      	movs	r4, #64	; 0x40
 8007854:	2201      	movs	r2, #1
 8007856:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007858:	2541      	movs	r5, #65	; 0x41
 800785a:	2324      	movs	r3, #36	; 0x24
 800785c:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800785e:	6806      	ldr	r6, [r0, #0]
 8007860:	6833      	ldr	r3, [r6, #0]
 8007862:	4393      	bics	r3, r2
 8007864:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007866:	6806      	ldr	r6, [r0, #0]
 8007868:	6833      	ldr	r3, [r6, #0]
 800786a:	4f0a      	ldr	r7, [pc, #40]	; (8007894 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 800786c:	403b      	ands	r3, r7
 800786e:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007870:	6806      	ldr	r6, [r0, #0]
 8007872:	6833      	ldr	r3, [r6, #0]
 8007874:	430b      	orrs	r3, r1
 8007876:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007878:	6801      	ldr	r1, [r0, #0]
 800787a:	680b      	ldr	r3, [r1, #0]
 800787c:	4313      	orrs	r3, r2
 800787e:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007880:	2320      	movs	r3, #32
 8007882:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007884:	2300      	movs	r3, #0
 8007886:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8007888:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800788a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800788c:	2002      	movs	r0, #2
 800788e:	e7fc      	b.n	800788a <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8007890:	2002      	movs	r0, #2
 8007892:	e7fa      	b.n	800788a <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8007894:	ffffefff 	.word	0xffffefff

08007898 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007898:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800789a:	2341      	movs	r3, #65	; 0x41
 800789c:	5cc3      	ldrb	r3, [r0, r3]
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d11e      	bne.n	80078e0 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078a2:	3320      	adds	r3, #32
 80078a4:	5cc3      	ldrb	r3, [r0, r3]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d01c      	beq.n	80078e4 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80078aa:	2440      	movs	r4, #64	; 0x40
 80078ac:	2201      	movs	r2, #1
 80078ae:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078b0:	2541      	movs	r5, #65	; 0x41
 80078b2:	2324      	movs	r3, #36	; 0x24
 80078b4:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078b6:	6806      	ldr	r6, [r0, #0]
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	4393      	bics	r3, r2
 80078bc:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078be:	6806      	ldr	r6, [r0, #0]
 80078c0:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078c2:	4f09      	ldr	r7, [pc, #36]	; (80078e8 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 80078c4:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078c6:	0209      	lsls	r1, r1, #8
 80078c8:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078ca:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078cc:	6801      	ldr	r1, [r0, #0]
 80078ce:	680b      	ldr	r3, [r1, #0]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078d4:	2320      	movs	r3, #32
 80078d6:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d8:	2300      	movs	r3, #0
 80078da:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80078dc:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80078de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80078e0:	2002      	movs	r0, #2
 80078e2:	e7fc      	b.n	80078de <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 80078e4:	2002      	movs	r0, #2
 80078e6:	e7fa      	b.n	80078de <HAL_I2CEx_ConfigDigitalFilter+0x46>
 80078e8:	fffff0ff 	.word	0xfffff0ff

080078ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80078ec:	b510      	push	{r4, lr}
 80078ee:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80078f0:	4913      	ldr	r1, [pc, #76]	; (8007940 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80078f2:	680b      	ldr	r3, [r1, #0]
 80078f4:	4813      	ldr	r0, [pc, #76]	; (8007944 <HAL_PWREx_ControlVoltageScaling+0x58>)
 80078f6:	4003      	ands	r3, r0
 80078f8:	4313      	orrs	r3, r2
 80078fa:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078fc:	2380      	movs	r3, #128	; 0x80
 80078fe:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8007900:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007902:	429a      	cmp	r2, r3
 8007904:	d000      	beq.n	8007908 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8007906:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007908:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	0058      	lsls	r0, r3, #1
 800790e:	18c0      	adds	r0, r0, r3
 8007910:	0040      	lsls	r0, r0, #1
 8007912:	490e      	ldr	r1, [pc, #56]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x60>)
 8007914:	f7f8 fc14 	bl	8000140 <__udivsi3>
 8007918:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800791a:	4b09      	ldr	r3, [pc, #36]	; (8007940 <HAL_PWREx_ControlVoltageScaling+0x54>)
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	055b      	lsls	r3, r3, #21
 8007920:	d50a      	bpl.n	8007938 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8007922:	4907      	ldr	r1, [pc, #28]	; (8007940 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8007924:	2280      	movs	r2, #128	; 0x80
 8007926:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8007928:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800792a:	694b      	ldr	r3, [r1, #20]
 800792c:	4213      	tst	r3, r2
 800792e:	d005      	beq.n	800793c <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 8007930:	2800      	cmp	r0, #0
 8007932:	d1f9      	bne.n	8007928 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8007934:	2003      	movs	r0, #3
 8007936:	e7e6      	b.n	8007906 <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8007938:	2000      	movs	r0, #0
 800793a:	e7e4      	b.n	8007906 <HAL_PWREx_ControlVoltageScaling+0x1a>
 800793c:	2000      	movs	r0, #0
 800793e:	e7e2      	b.n	8007906 <HAL_PWREx_ControlVoltageScaling+0x1a>
 8007940:	40007000 	.word	0x40007000
 8007944:	fffff9ff 	.word	0xfffff9ff
 8007948:	20000020 	.word	0x20000020
 800794c:	000f4240 	.word	0x000f4240

08007950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007952:	46ce      	mov	lr, r9
 8007954:	4647      	mov	r7, r8
 8007956:	b580      	push	{r7, lr}
 8007958:	b083      	sub	sp, #12
 800795a:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800795c:	d100      	bne.n	8007960 <HAL_RCC_OscConfig+0x10>
 800795e:	e23e      	b.n	8007dde <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	07db      	lsls	r3, r3, #31
 8007964:	d538      	bpl.n	80079d8 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007966:	4ac7      	ldr	r2, [pc, #796]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007968:	6891      	ldr	r1, [r2, #8]
 800796a:	2338      	movs	r3, #56	; 0x38
 800796c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800796e:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007970:	2b10      	cmp	r3, #16
 8007972:	d026      	beq.n	80079c2 <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007974:	2b08      	cmp	r3, #8
 8007976:	d027      	beq.n	80079c8 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007978:	6863      	ldr	r3, [r4, #4]
 800797a:	2280      	movs	r2, #128	; 0x80
 800797c:	0252      	lsls	r2, r2, #9
 800797e:	4293      	cmp	r3, r2
 8007980:	d07a      	beq.n	8007a78 <HAL_RCC_OscConfig+0x128>
 8007982:	22a0      	movs	r2, #160	; 0xa0
 8007984:	02d2      	lsls	r2, r2, #11
 8007986:	4293      	cmp	r3, r2
 8007988:	d07d      	beq.n	8007a86 <HAL_RCC_OscConfig+0x136>
 800798a:	4bbe      	ldr	r3, [pc, #760]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	49be      	ldr	r1, [pc, #760]	; (8007c88 <HAL_RCC_OscConfig+0x338>)
 8007990:	400a      	ands	r2, r1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	49bd      	ldr	r1, [pc, #756]	; (8007c8c <HAL_RCC_OscConfig+0x33c>)
 8007998:	400a      	ands	r2, r1
 800799a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d07d      	beq.n	8007a9e <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a2:	f7fe fcc9 	bl	8006338 <HAL_GetTick>
 80079a6:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079a8:	4fb6      	ldr	r7, [pc, #728]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 80079aa:	2680      	movs	r6, #128	; 0x80
 80079ac:	02b6      	lsls	r6, r6, #10
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	4233      	tst	r3, r6
 80079b2:	d111      	bne.n	80079d8 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079b4:	f7fe fcc0 	bl	8006338 <HAL_GetTick>
 80079b8:	1b40      	subs	r0, r0, r5
 80079ba:	2864      	cmp	r0, #100	; 0x64
 80079bc:	d9f7      	bls.n	80079ae <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 80079be:	2003      	movs	r0, #3
 80079c0:	e20e      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079c2:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80079c4:	0792      	lsls	r2, r2, #30
 80079c6:	d1d7      	bne.n	8007978 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c8:	4bae      	ldr	r3, [pc, #696]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	039b      	lsls	r3, r3, #14
 80079ce:	d503      	bpl.n	80079d8 <HAL_RCC_OscConfig+0x88>
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d100      	bne.n	80079d8 <HAL_RCC_OscConfig+0x88>
 80079d6:	e208      	b.n	8007dea <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	079b      	lsls	r3, r3, #30
 80079dc:	d52a      	bpl.n	8007a34 <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079de:	4aa9      	ldr	r2, [pc, #676]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 80079e0:	6891      	ldr	r1, [r2, #8]
 80079e2:	2338      	movs	r3, #56	; 0x38
 80079e4:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079e6:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d068      	beq.n	8007abe <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d16b      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079f0:	4ba4      	ldr	r3, [pc, #656]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	055b      	lsls	r3, r3, #21
 80079f6:	d500      	bpl.n	80079fa <HAL_RCC_OscConfig+0xaa>
 80079f8:	e21a      	b.n	8007e30 <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079fa:	49a2      	ldr	r1, [pc, #648]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 80079fc:	684a      	ldr	r2, [r1, #4]
 80079fe:	6963      	ldr	r3, [r4, #20]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	48a3      	ldr	r0, [pc, #652]	; (8007c90 <HAL_RCC_OscConfig+0x340>)
 8007a04:	4002      	ands	r2, r0
 8007a06:	4313      	orrs	r3, r2
 8007a08:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007a0a:	4a9e      	ldr	r2, [pc, #632]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007a0c:	6813      	ldr	r3, [r2, #0]
 8007a0e:	49a1      	ldr	r1, [pc, #644]	; (8007c94 <HAL_RCC_OscConfig+0x344>)
 8007a10:	400b      	ands	r3, r1
 8007a12:	6921      	ldr	r1, [r4, #16]
 8007a14:	430b      	orrs	r3, r1
 8007a16:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007a18:	6813      	ldr	r3, [r2, #0]
 8007a1a:	499f      	ldr	r1, [pc, #636]	; (8007c98 <HAL_RCC_OscConfig+0x348>)
 8007a1c:	049b      	lsls	r3, r3, #18
 8007a1e:	0f5b      	lsrs	r3, r3, #29
 8007a20:	4a9e      	ldr	r2, [pc, #632]	; (8007c9c <HAL_RCC_OscConfig+0x34c>)
 8007a22:	40da      	lsrs	r2, r3
 8007a24:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007a26:	4b9e      	ldr	r3, [pc, #632]	; (8007ca0 <HAL_RCC_OscConfig+0x350>)
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	f7fe fb45 	bl	80060b8 <HAL_InitTick>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d000      	beq.n	8007a34 <HAL_RCC_OscConfig+0xe4>
 8007a32:	e1dc      	b.n	8007dee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	071b      	lsls	r3, r3, #28
 8007a38:	d400      	bmi.n	8007a3c <HAL_RCC_OscConfig+0xec>
 8007a3a:	e08b      	b.n	8007b54 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007a3c:	4b91      	ldr	r3, [pc, #580]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	2338      	movs	r3, #56	; 0x38
 8007a42:	4013      	ands	r3, r2
 8007a44:	2b18      	cmp	r3, #24
 8007a46:	d07d      	beq.n	8007b44 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a48:	69a3      	ldr	r3, [r4, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d100      	bne.n	8007a50 <HAL_RCC_OscConfig+0x100>
 8007a4e:	e0c4      	b.n	8007bda <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007a50:	4a8c      	ldr	r2, [pc, #560]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007a52:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8007a54:	2101      	movs	r1, #1
 8007a56:	430b      	orrs	r3, r1
 8007a58:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5a:	f7fe fc6d 	bl	8006338 <HAL_GetTick>
 8007a5e:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a60:	4f88      	ldr	r7, [pc, #544]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007a62:	2602      	movs	r6, #2
 8007a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a66:	421e      	tst	r6, r3
 8007a68:	d174      	bne.n	8007b54 <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a6a:	f7fe fc65 	bl	8006338 <HAL_GetTick>
 8007a6e:	1b40      	subs	r0, r0, r5
 8007a70:	2802      	cmp	r0, #2
 8007a72:	d9f7      	bls.n	8007a64 <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 8007a74:	2003      	movs	r0, #3
 8007a76:	e1b3      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a78:	4a82      	ldr	r2, [pc, #520]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007a7a:	6811      	ldr	r1, [r2, #0]
 8007a7c:	2380      	movs	r3, #128	; 0x80
 8007a7e:	025b      	lsls	r3, r3, #9
 8007a80:	430b      	orrs	r3, r1
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	e78a      	b.n	800799c <HAL_RCC_OscConfig+0x4c>
 8007a86:	4b7f      	ldr	r3, [pc, #508]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007a88:	6819      	ldr	r1, [r3, #0]
 8007a8a:	2280      	movs	r2, #128	; 0x80
 8007a8c:	02d2      	lsls	r2, r2, #11
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	2280      	movs	r2, #128	; 0x80
 8007a96:	0252      	lsls	r2, r2, #9
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e77e      	b.n	800799c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8007a9e:	f7fe fc4b 	bl	8006338 <HAL_GetTick>
 8007aa2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007aa4:	4f77      	ldr	r7, [pc, #476]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007aa6:	2680      	movs	r6, #128	; 0x80
 8007aa8:	02b6      	lsls	r6, r6, #10
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	4233      	tst	r3, r6
 8007aae:	d093      	beq.n	80079d8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ab0:	f7fe fc42 	bl	8006338 <HAL_GetTick>
 8007ab4:	1b40      	subs	r0, r0, r5
 8007ab6:	2864      	cmp	r0, #100	; 0x64
 8007ab8:	d9f7      	bls.n	8007aaa <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8007aba:	2003      	movs	r0, #3
 8007abc:	e190      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007abe:	3b0d      	subs	r3, #13
 8007ac0:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d100      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x178>
 8007ac6:	e1a3      	b.n	8007e10 <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ac8:	68e3      	ldr	r3, [r4, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d024      	beq.n	8007b18 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007ace:	4a6d      	ldr	r2, [pc, #436]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007ad0:	6813      	ldr	r3, [r2, #0]
 8007ad2:	4970      	ldr	r1, [pc, #448]	; (8007c94 <HAL_RCC_OscConfig+0x344>)
 8007ad4:	400b      	ands	r3, r1
 8007ad6:	6921      	ldr	r1, [r4, #16]
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	2380      	movs	r3, #128	; 0x80
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007ae6:	f7fe fc27 	bl	8006338 <HAL_GetTick>
 8007aea:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007aec:	4f65      	ldr	r7, [pc, #404]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007aee:	2680      	movs	r6, #128	; 0x80
 8007af0:	00f6      	lsls	r6, r6, #3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	4233      	tst	r3, r6
 8007af6:	d106      	bne.n	8007b06 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af8:	f7fe fc1e 	bl	8006338 <HAL_GetTick>
 8007afc:	1b40      	subs	r0, r0, r5
 8007afe:	2802      	cmp	r0, #2
 8007b00:	d9f7      	bls.n	8007af2 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 8007b02:	2003      	movs	r0, #3
 8007b04:	e16c      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b06:	495f      	ldr	r1, [pc, #380]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007b08:	684a      	ldr	r2, [r1, #4]
 8007b0a:	6963      	ldr	r3, [r4, #20]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	4860      	ldr	r0, [pc, #384]	; (8007c90 <HAL_RCC_OscConfig+0x340>)
 8007b10:	4002      	ands	r2, r0
 8007b12:	4313      	orrs	r3, r2
 8007b14:	604b      	str	r3, [r1, #4]
 8007b16:	e78d      	b.n	8007a34 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8007b18:	4a5a      	ldr	r2, [pc, #360]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007b1a:	6813      	ldr	r3, [r2, #0]
 8007b1c:	4961      	ldr	r1, [pc, #388]	; (8007ca4 <HAL_RCC_OscConfig+0x354>)
 8007b1e:	400b      	ands	r3, r1
 8007b20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007b22:	f7fe fc09 	bl	8006338 <HAL_GetTick>
 8007b26:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b28:	4f56      	ldr	r7, [pc, #344]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007b2a:	2680      	movs	r6, #128	; 0x80
 8007b2c:	00f6      	lsls	r6, r6, #3
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	4233      	tst	r3, r6
 8007b32:	d100      	bne.n	8007b36 <HAL_RCC_OscConfig+0x1e6>
 8007b34:	e77e      	b.n	8007a34 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b36:	f7fe fbff 	bl	8006338 <HAL_GetTick>
 8007b3a:	1b40      	subs	r0, r0, r5
 8007b3c:	2802      	cmp	r0, #2
 8007b3e:	d9f6      	bls.n	8007b2e <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 8007b40:	2003      	movs	r0, #3
 8007b42:	e14d      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007b44:	4b4f      	ldr	r3, [pc, #316]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b48:	079b      	lsls	r3, r3, #30
 8007b4a:	d503      	bpl.n	8007b54 <HAL_RCC_OscConfig+0x204>
 8007b4c:	69a3      	ldr	r3, [r4, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d100      	bne.n	8007b54 <HAL_RCC_OscConfig+0x204>
 8007b52:	e14e      	b.n	8007df2 <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	075b      	lsls	r3, r3, #29
 8007b58:	d400      	bmi.n	8007b5c <HAL_RCC_OscConfig+0x20c>
 8007b5a:	e0ac      	b.n	8007cb6 <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007b5c:	4b49      	ldr	r3, [pc, #292]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	2338      	movs	r3, #56	; 0x38
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d04c      	beq.n	8007c02 <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b68:	4b46      	ldr	r3, [pc, #280]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	d40b      	bmi.n	8007b8c <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007b74:	4b43      	ldr	r3, [pc, #268]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b78:	2180      	movs	r1, #128	; 0x80
 8007b7a:	0549      	lsls	r1, r1, #21
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	400b      	ands	r3, r1
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b8c:	4b46      	ldr	r3, [pc, #280]	; (8007ca8 <HAL_RCC_OscConfig+0x358>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	05db      	lsls	r3, r3, #23
 8007b92:	d53f      	bpl.n	8007c14 <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b94:	68a3      	ldr	r3, [r4, #8]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d052      	beq.n	8007c40 <HAL_RCC_OscConfig+0x2f0>
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d056      	beq.n	8007c4c <HAL_RCC_OscConfig+0x2fc>
 8007b9e:	4b39      	ldr	r3, [pc, #228]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007ba0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	438a      	bics	r2, r1
 8007ba6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007baa:	3103      	adds	r1, #3
 8007bac:	438a      	bics	r2, r1
 8007bae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007bb0:	68a3      	ldr	r3, [r4, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d054      	beq.n	8007c60 <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb6:	f7fe fbbf 	bl	8006338 <HAL_GetTick>
 8007bba:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bbc:	4b31      	ldr	r3, [pc, #196]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007bbe:	4698      	mov	r8, r3
 8007bc0:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc2:	4d3a      	ldr	r5, [pc, #232]	; (8007cac <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc8:	421f      	tst	r7, r3
 8007bca:	d171      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bcc:	f7fe fbb4 	bl	8006338 <HAL_GetTick>
 8007bd0:	1b80      	subs	r0, r0, r6
 8007bd2:	42a8      	cmp	r0, r5
 8007bd4:	d9f6      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8007bd6:	2003      	movs	r0, #3
 8007bd8:	e102      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 8007bda:	4a2a      	ldr	r2, [pc, #168]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007bdc:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8007bde:	2101      	movs	r1, #1
 8007be0:	438b      	bics	r3, r1
 8007be2:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007be4:	f7fe fba8 	bl	8006338 <HAL_GetTick>
 8007be8:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bea:	4f26      	ldr	r7, [pc, #152]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007bec:	2602      	movs	r6, #2
 8007bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bf0:	421e      	tst	r6, r3
 8007bf2:	d0af      	beq.n	8007b54 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bf4:	f7fe fba0 	bl	8006338 <HAL_GetTick>
 8007bf8:	1b40      	subs	r0, r0, r5
 8007bfa:	2802      	cmp	r0, #2
 8007bfc:	d9f7      	bls.n	8007bee <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 8007bfe:	2003      	movs	r0, #3
 8007c00:	e0ee      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007c02:	4b20      	ldr	r3, [pc, #128]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c06:	079b      	lsls	r3, r3, #30
 8007c08:	d555      	bpl.n	8007cb6 <HAL_RCC_OscConfig+0x366>
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d152      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 8007c10:	2001      	movs	r0, #1
 8007c12:	e0e5      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c14:	4a24      	ldr	r2, [pc, #144]	; (8007ca8 <HAL_RCC_OscConfig+0x358>)
 8007c16:	6811      	ldr	r1, [r2, #0]
 8007c18:	2380      	movs	r3, #128	; 0x80
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007c20:	f7fe fb8a 	bl	8006338 <HAL_GetTick>
 8007c24:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c26:	4d20      	ldr	r5, [pc, #128]	; (8007ca8 <HAL_RCC_OscConfig+0x358>)
 8007c28:	2780      	movs	r7, #128	; 0x80
 8007c2a:	007f      	lsls	r7, r7, #1
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	423b      	tst	r3, r7
 8007c30:	d1b0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c32:	f7fe fb81 	bl	8006338 <HAL_GetTick>
 8007c36:	1b80      	subs	r0, r0, r6
 8007c38:	2802      	cmp	r0, #2
 8007c3a:	d9f7      	bls.n	8007c2c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8007c3c:	2003      	movs	r0, #3
 8007c3e:	e0cf      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c40:	4a10      	ldr	r2, [pc, #64]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007c42:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8007c44:	2101      	movs	r1, #1
 8007c46:	430b      	orrs	r3, r1
 8007c48:	65d3      	str	r3, [r2, #92]	; 0x5c
 8007c4a:	e7b1      	b.n	8007bb0 <HAL_RCC_OscConfig+0x260>
 8007c4c:	4b0d      	ldr	r3, [pc, #52]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007c4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c50:	2104      	movs	r1, #4
 8007c52:	430a      	orrs	r2, r1
 8007c54:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c58:	3903      	subs	r1, #3
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c5e:	e7a7      	b.n	8007bb0 <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c60:	f7fe fb6a 	bl	8006338 <HAL_GetTick>
 8007c64:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c66:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <HAL_RCC_OscConfig+0x334>)
 8007c68:	4698      	mov	r8, r3
 8007c6a:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c6c:	4d0f      	ldr	r5, [pc, #60]	; (8007cac <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c6e:	4643      	mov	r3, r8
 8007c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c72:	421f      	tst	r7, r3
 8007c74:	d01c      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c76:	f7fe fb5f 	bl	8006338 <HAL_GetTick>
 8007c7a:	1b80      	subs	r0, r0, r6
 8007c7c:	42a8      	cmp	r0, r5
 8007c7e:	d9f6      	bls.n	8007c6e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8007c80:	2003      	movs	r0, #3
 8007c82:	e0ad      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
 8007c84:	40021000 	.word	0x40021000
 8007c88:	fffeffff 	.word	0xfffeffff
 8007c8c:	fffbffff 	.word	0xfffbffff
 8007c90:	ffff80ff 	.word	0xffff80ff
 8007c94:	ffffc7ff 	.word	0xffffc7ff
 8007c98:	20000020 	.word	0x20000020
 8007c9c:	00f42400 	.word	0x00f42400
 8007ca0:	20000028 	.word	0x20000028
 8007ca4:	fffffeff 	.word	0xfffffeff
 8007ca8:	40007000 	.word	0x40007000
 8007cac:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d021      	beq.n	8007cfa <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007cb6:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8007cb8:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d100      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x370>
 8007cbe:	e08f      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cc0:	4a62      	ldr	r2, [pc, #392]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007cc2:	6891      	ldr	r1, [r2, #8]
 8007cc4:	2238      	movs	r2, #56	; 0x38
 8007cc6:	400a      	ands	r2, r1
 8007cc8:	2a10      	cmp	r2, #16
 8007cca:	d064      	beq.n	8007d96 <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d01a      	beq.n	8007d06 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8007cd0:	4a5e      	ldr	r2, [pc, #376]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007cd2:	6813      	ldr	r3, [r2, #0]
 8007cd4:	495e      	ldr	r1, [pc, #376]	; (8007e50 <HAL_RCC_OscConfig+0x500>)
 8007cd6:	400b      	ands	r3, r1
 8007cd8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007cda:	f7fe fb2d 	bl	8006338 <HAL_GetTick>
 8007cde:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ce0:	4e5a      	ldr	r6, [pc, #360]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007ce2:	2580      	movs	r5, #128	; 0x80
 8007ce4:	04ad      	lsls	r5, r5, #18
 8007ce6:	6833      	ldr	r3, [r6, #0]
 8007ce8:	422b      	tst	r3, r5
 8007cea:	d04d      	beq.n	8007d88 <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cec:	f7fe fb24 	bl	8006338 <HAL_GetTick>
 8007cf0:	1b00      	subs	r0, r0, r4
 8007cf2:	2802      	cmp	r0, #2
 8007cf4:	d9f7      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 8007cf6:	2003      	movs	r0, #3
 8007cf8:	e072      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 8007cfa:	4a54      	ldr	r2, [pc, #336]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007cfc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007cfe:	4955      	ldr	r1, [pc, #340]	; (8007e54 <HAL_RCC_OscConfig+0x504>)
 8007d00:	400b      	ands	r3, r1
 8007d02:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007d04:	e7d7      	b.n	8007cb6 <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8007d06:	4a51      	ldr	r2, [pc, #324]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007d08:	6813      	ldr	r3, [r2, #0]
 8007d0a:	4951      	ldr	r1, [pc, #324]	; (8007e50 <HAL_RCC_OscConfig+0x500>)
 8007d0c:	400b      	ands	r3, r1
 8007d0e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007d10:	f7fe fb12 	bl	8006338 <HAL_GetTick>
 8007d14:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d16:	4f4d      	ldr	r7, [pc, #308]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007d18:	2680      	movs	r6, #128	; 0x80
 8007d1a:	04b6      	lsls	r6, r6, #18
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	4233      	tst	r3, r6
 8007d20:	d006      	beq.n	8007d30 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d22:	f7fe fb09 	bl	8006338 <HAL_GetTick>
 8007d26:	1b40      	subs	r0, r0, r5
 8007d28:	2802      	cmp	r0, #2
 8007d2a:	d9f7      	bls.n	8007d1c <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8007d2c:	2003      	movs	r0, #3
 8007d2e:	e057      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d30:	4a46      	ldr	r2, [pc, #280]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007d32:	68d1      	ldr	r1, [r2, #12]
 8007d34:	6a23      	ldr	r3, [r4, #32]
 8007d36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d38:	4303      	orrs	r3, r0
 8007d3a:	4847      	ldr	r0, [pc, #284]	; (8007e58 <HAL_RCC_OscConfig+0x508>)
 8007d3c:	4001      	ands	r1, r0
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007d42:	430b      	orrs	r3, r1
 8007d44:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007d46:	430b      	orrs	r3, r1
 8007d48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007d4a:	0209      	lsls	r1, r1, #8
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8007d50:	6811      	ldr	r1, [r2, #0]
 8007d52:	2380      	movs	r3, #128	; 0x80
 8007d54:	045b      	lsls	r3, r3, #17
 8007d56:	430b      	orrs	r3, r1
 8007d58:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007d5a:	68d1      	ldr	r1, [r2, #12]
 8007d5c:	2380      	movs	r3, #128	; 0x80
 8007d5e:	055b      	lsls	r3, r3, #21
 8007d60:	430b      	orrs	r3, r1
 8007d62:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007d64:	f7fe fae8 	bl	8006338 <HAL_GetTick>
 8007d68:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d6a:	4e38      	ldr	r6, [pc, #224]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007d6c:	2580      	movs	r5, #128	; 0x80
 8007d6e:	04ad      	lsls	r5, r5, #18
 8007d70:	6833      	ldr	r3, [r6, #0]
 8007d72:	422b      	tst	r3, r5
 8007d74:	d106      	bne.n	8007d84 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d76:	f7fe fadf 	bl	8006338 <HAL_GetTick>
 8007d7a:	1b00      	subs	r0, r0, r4
 8007d7c:	2802      	cmp	r0, #2
 8007d7e:	d9f7      	bls.n	8007d70 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8007d80:	2003      	movs	r0, #3
 8007d82:	e02d      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8007d84:	2000      	movs	r0, #0
 8007d86:	e02b      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007d88:	4a30      	ldr	r2, [pc, #192]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007d8a:	68d3      	ldr	r3, [r2, #12]
 8007d8c:	4933      	ldr	r1, [pc, #204]	; (8007e5c <HAL_RCC_OscConfig+0x50c>)
 8007d8e:	400b      	ands	r3, r1
 8007d90:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8007d92:	2000      	movs	r0, #0
 8007d94:	e024      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d02d      	beq.n	8007df6 <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 8007d9a:	4b2c      	ldr	r3, [pc, #176]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007d9c:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d9e:	2303      	movs	r3, #3
 8007da0:	4013      	ands	r3, r2
 8007da2:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8007da4:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da6:	428b      	cmp	r3, r1
 8007da8:	d11a      	bne.n	8007de0 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007daa:	2370      	movs	r3, #112	; 0x70
 8007dac:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007db0:	428b      	cmp	r3, r1
 8007db2:	d115      	bne.n	8007de0 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007db4:	21fe      	movs	r1, #254	; 0xfe
 8007db6:	01c9      	lsls	r1, r1, #7
 8007db8:	4011      	ands	r1, r2
 8007dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dbc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dbe:	4299      	cmp	r1, r3
 8007dc0:	d10e      	bne.n	8007de0 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007dc2:	23f8      	movs	r3, #248	; 0xf8
 8007dc4:	039b      	lsls	r3, r3, #14
 8007dc6:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007dca:	428b      	cmp	r3, r1
 8007dcc:	d108      	bne.n	8007de0 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007dce:	0f53      	lsrs	r3, r2, #29
 8007dd0:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007dd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	1e5a      	subs	r2, r3, #1
 8007dd8:	4193      	sbcs	r3, r2
    return HAL_ERROR;
 8007dda:	b2d8      	uxtb	r0, r3
 8007ddc:	e000      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
 8007dde:	2001      	movs	r0, #1
}
 8007de0:	b003      	add	sp, #12
 8007de2:	bcc0      	pop	{r6, r7}
 8007de4:	46b9      	mov	r9, r7
 8007de6:	46b0      	mov	r8, r6
 8007de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8007dea:	2001      	movs	r0, #1
 8007dec:	e7f8      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 8007dee:	2001      	movs	r0, #1
 8007df0:	e7f6      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8007df2:	2001      	movs	r0, #1
 8007df4:	e7f4      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8007df6:	2001      	movs	r0, #1
 8007df8:	e7f2      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	e7f0      	b.n	8007de0 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dfe:	4913      	ldr	r1, [pc, #76]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007e00:	684a      	ldr	r2, [r1, #4]
 8007e02:	6963      	ldr	r3, [r4, #20]
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	4816      	ldr	r0, [pc, #88]	; (8007e60 <HAL_RCC_OscConfig+0x510>)
 8007e08:	4002      	ands	r2, r0
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e0e:	e60a      	b.n	8007a26 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e10:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	055b      	lsls	r3, r3, #21
 8007e16:	d5f2      	bpl.n	8007dfe <HAL_RCC_OscConfig+0x4ae>
 8007e18:	68e3      	ldr	r3, [r4, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d0ed      	beq.n	8007dfa <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e1e:	490b      	ldr	r1, [pc, #44]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007e20:	684a      	ldr	r2, [r1, #4]
 8007e22:	6963      	ldr	r3, [r4, #20]
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	480e      	ldr	r0, [pc, #56]	; (8007e60 <HAL_RCC_OscConfig+0x510>)
 8007e28:	4002      	ands	r2, r0
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e2e:	e5fa      	b.n	8007a26 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e30:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8007e32:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0d3      	beq.n	8007de0 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e38:	4904      	ldr	r1, [pc, #16]	; (8007e4c <HAL_RCC_OscConfig+0x4fc>)
 8007e3a:	684a      	ldr	r2, [r1, #4]
 8007e3c:	6963      	ldr	r3, [r4, #20]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	4807      	ldr	r0, [pc, #28]	; (8007e60 <HAL_RCC_OscConfig+0x510>)
 8007e42:	4002      	ands	r2, r0
 8007e44:	4313      	orrs	r3, r2
 8007e46:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e48:	e5df      	b.n	8007a0a <HAL_RCC_OscConfig+0xba>
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	40021000 	.word	0x40021000
 8007e50:	feffffff 	.word	0xfeffffff
 8007e54:	efffffff 	.word	0xefffffff
 8007e58:	1fc1808c 	.word	0x1fc1808c
 8007e5c:	effefffc 	.word	0xeffefffc
 8007e60:	ffff80ff 	.word	0xffff80ff

08007e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e64:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e66:	4b27      	ldr	r3, [pc, #156]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2238      	movs	r2, #56	; 0x38
 8007e6c:	421a      	tst	r2, r3
 8007e6e:	d106      	bne.n	8007e7e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007e70:	4b24      	ldr	r3, [pc, #144]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	049b      	lsls	r3, r3, #18
 8007e76:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007e78:	4823      	ldr	r0, [pc, #140]	; (8007f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007e7a:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8007e7c:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e7e:	4b21      	ldr	r3, [pc, #132]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	2338      	movs	r3, #56	; 0x38
 8007e84:	4013      	ands	r3, r2
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d037      	beq.n	8007efa <HAL_RCC_GetSysClockFreq+0x96>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e8a:	4b1e      	ldr	r3, [pc, #120]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	2338      	movs	r3, #56	; 0x38
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d011      	beq.n	8007eba <HAL_RCC_GetSysClockFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007e96:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	2338      	movs	r3, #56	; 0x38
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d02d      	beq.n	8007efe <HAL_RCC_GetSysClockFreq+0x9a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007ea2:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	2038      	movs	r0, #56	; 0x38
 8007ea8:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 8007eaa:	3818      	subs	r0, #24
 8007eac:	4243      	negs	r3, r0
 8007eae:	4158      	adcs	r0, r3
 8007eb0:	4240      	negs	r0, r0
 8007eb2:	23fa      	movs	r3, #250	; 0xfa
 8007eb4:	01db      	lsls	r3, r3, #7
 8007eb6:	4018      	ands	r0, r3
 8007eb8:	e7e0      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007eba:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007ebc:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ebe:	68d1      	ldr	r1, [r2, #12]
 8007ec0:	0649      	lsls	r1, r1, #25
 8007ec2:	0f49      	lsrs	r1, r1, #29
 8007ec4:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007ec6:	43db      	mvns	r3, r3
    switch (pllsource)
 8007ec8:	079b      	lsls	r3, r3, #30
 8007eca:	d00e      	beq.n	8007eea <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007ece:	68dc      	ldr	r4, [r3, #12]
 8007ed0:	0464      	lsls	r4, r4, #17
 8007ed2:	0e64      	lsrs	r4, r4, #25
 8007ed4:	480c      	ldr	r0, [pc, #48]	; (8007f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007ed6:	f7f8 f933 	bl	8000140 <__udivsi3>
 8007eda:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007ede:	68d9      	ldr	r1, [r3, #12]
 8007ee0:	0f49      	lsrs	r1, r1, #29
 8007ee2:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8007ee4:	f7f8 f92c 	bl	8000140 <__udivsi3>
 8007ee8:	e7c8      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007eea:	68d4      	ldr	r4, [r2, #12]
 8007eec:	0464      	lsls	r4, r4, #17
 8007eee:	0e64      	lsrs	r4, r4, #25
 8007ef0:	4806      	ldr	r0, [pc, #24]	; (8007f0c <HAL_RCC_GetSysClockFreq+0xa8>)
 8007ef2:	f7f8 f925 	bl	8000140 <__udivsi3>
 8007ef6:	4360      	muls	r0, r4
        break;
 8007ef8:	e7f0      	b.n	8007edc <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSE_VALUE;
 8007efa:	4804      	ldr	r0, [pc, #16]	; (8007f0c <HAL_RCC_GetSysClockFreq+0xa8>)
 8007efc:	e7be      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8007efe:	2080      	movs	r0, #128	; 0x80
 8007f00:	0200      	lsls	r0, r0, #8
 8007f02:	e7bb      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x18>
 8007f04:	40021000 	.word	0x40021000
 8007f08:	00f42400 	.word	0x00f42400
 8007f0c:	007a1200 	.word	0x007a1200

08007f10 <HAL_RCC_ClockConfig>:
{
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	46ce      	mov	lr, r9
 8007f14:	4647      	mov	r7, r8
 8007f16:	b580      	push	{r7, lr}
 8007f18:	0004      	movs	r4, r0
 8007f1a:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d100      	bne.n	8007f22 <HAL_RCC_ClockConfig+0x12>
 8007f20:	e0b6      	b.n	8008090 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f22:	4b5d      	ldr	r3, [pc, #372]	; (8008098 <HAL_RCC_ClockConfig+0x188>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	2307      	movs	r3, #7
 8007f28:	4013      	ands	r3, r2
 8007f2a:	428b      	cmp	r3, r1
 8007f2c:	d321      	bcc.n	8007f72 <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	079a      	lsls	r2, r3, #30
 8007f32:	d50e      	bpl.n	8007f52 <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f34:	075b      	lsls	r3, r3, #29
 8007f36:	d505      	bpl.n	8007f44 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007f38:	4a58      	ldr	r2, [pc, #352]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8007f3a:	6891      	ldr	r1, [r2, #8]
 8007f3c:	23e0      	movs	r3, #224	; 0xe0
 8007f3e:	01db      	lsls	r3, r3, #7
 8007f40:	430b      	orrs	r3, r1
 8007f42:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f44:	4a55      	ldr	r2, [pc, #340]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8007f46:	6893      	ldr	r3, [r2, #8]
 8007f48:	4955      	ldr	r1, [pc, #340]	; (80080a0 <HAL_RCC_ClockConfig+0x190>)
 8007f4a:	400b      	ands	r3, r1
 8007f4c:	68a1      	ldr	r1, [r4, #8]
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	07db      	lsls	r3, r3, #31
 8007f56:	d55b      	bpl.n	8008010 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f58:	6863      	ldr	r3, [r4, #4]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d023      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d042      	beq.n	8007fe8 <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d146      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f66:	4a4d      	ldr	r2, [pc, #308]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8007f68:	6812      	ldr	r2, [r2, #0]
 8007f6a:	0552      	lsls	r2, r2, #21
 8007f6c:	d420      	bmi.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8007f6e:	2001      	movs	r0, #1
 8007f70:	e070      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f72:	4a49      	ldr	r2, [pc, #292]	; (8008098 <HAL_RCC_ClockConfig+0x188>)
 8007f74:	6813      	ldr	r3, [r2, #0]
 8007f76:	2107      	movs	r1, #7
 8007f78:	438b      	bics	r3, r1
 8007f7a:	432b      	orrs	r3, r5
 8007f7c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007f7e:	f7fe f9db 	bl	8006338 <HAL_GetTick>
 8007f82:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007f84:	4b44      	ldr	r3, [pc, #272]	; (8008098 <HAL_RCC_ClockConfig+0x188>)
 8007f86:	4698      	mov	r8, r3
 8007f88:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f8a:	4b46      	ldr	r3, [pc, #280]	; (80080a4 <HAL_RCC_ClockConfig+0x194>)
 8007f8c:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007f8e:	4643      	mov	r3, r8
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	403b      	ands	r3, r7
 8007f94:	42ab      	cmp	r3, r5
 8007f96:	d0ca      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f98:	f7fe f9ce 	bl	8006338 <HAL_GetTick>
 8007f9c:	1b80      	subs	r0, r0, r6
 8007f9e:	4548      	cmp	r0, r9
 8007fa0:	d9f5      	bls.n	8007f8e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8007fa2:	2003      	movs	r0, #3
 8007fa4:	e056      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fa6:	4a3d      	ldr	r2, [pc, #244]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	0392      	lsls	r2, r2, #14
 8007fac:	d400      	bmi.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
 8007fae:	e071      	b.n	8008094 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fb0:	493a      	ldr	r1, [pc, #232]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8007fb2:	688a      	ldr	r2, [r1, #8]
 8007fb4:	2007      	movs	r0, #7
 8007fb6:	4382      	bics	r2, r0
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8007fbc:	f7fe f9bc 	bl	8006338 <HAL_GetTick>
 8007fc0:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fc2:	4b36      	ldr	r3, [pc, #216]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8007fc4:	4698      	mov	r8, r3
 8007fc6:	2738      	movs	r7, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc8:	4b36      	ldr	r3, [pc, #216]	; (80080a4 <HAL_RCC_ClockConfig+0x194>)
 8007fca:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fcc:	4643      	mov	r3, r8
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	403a      	ands	r2, r7
 8007fd2:	6863      	ldr	r3, [r4, #4]
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d01a      	beq.n	8008010 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fda:	f7fe f9ad 	bl	8006338 <HAL_GetTick>
 8007fde:	1b80      	subs	r0, r0, r6
 8007fe0:	4548      	cmp	r0, r9
 8007fe2:	d9f3      	bls.n	8007fcc <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8007fe4:	2003      	movs	r0, #3
 8007fe6:	e035      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fe8:	4a2c      	ldr	r2, [pc, #176]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	0192      	lsls	r2, r2, #6
 8007fee:	d4df      	bmi.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	e02f      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d005      	beq.n	8008004 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ff8:	4a28      	ldr	r2, [pc, #160]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8007ffa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ffc:	0792      	lsls	r2, r2, #30
 8007ffe:	d4d7      	bmi.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8008000:	2001      	movs	r0, #1
 8008002:	e027      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008004:	4a25      	ldr	r2, [pc, #148]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8008006:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8008008:	0792      	lsls	r2, r2, #30
 800800a:	d4d1      	bmi.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 800800c:	2001      	movs	r0, #1
 800800e:	e021      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008010:	4b21      	ldr	r3, [pc, #132]	; (8008098 <HAL_RCC_ClockConfig+0x188>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	2307      	movs	r3, #7
 8008016:	4013      	ands	r3, r2
 8008018:	42ab      	cmp	r3, r5
 800801a:	d81f      	bhi.n	800805c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	075b      	lsls	r3, r3, #29
 8008020:	d506      	bpl.n	8008030 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008022:	4a1e      	ldr	r2, [pc, #120]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8008024:	6893      	ldr	r3, [r2, #8]
 8008026:	4920      	ldr	r1, [pc, #128]	; (80080a8 <HAL_RCC_ClockConfig+0x198>)
 8008028:	400b      	ands	r3, r1
 800802a:	68e1      	ldr	r1, [r4, #12]
 800802c:	430b      	orrs	r3, r1
 800802e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008030:	f7ff ff18 	bl	8007e64 <HAL_RCC_GetSysClockFreq>
 8008034:	4b19      	ldr	r3, [pc, #100]	; (800809c <HAL_RCC_ClockConfig+0x18c>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	491c      	ldr	r1, [pc, #112]	; (80080ac <HAL_RCC_ClockConfig+0x19c>)
 800803a:	4a1d      	ldr	r2, [pc, #116]	; (80080b0 <HAL_RCC_ClockConfig+0x1a0>)
 800803c:	051b      	lsls	r3, r3, #20
 800803e:	0f1b      	lsrs	r3, r3, #28
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	589b      	ldr	r3, [r3, r2]
 8008044:	221f      	movs	r2, #31
 8008046:	4013      	ands	r3, r2
 8008048:	40d8      	lsrs	r0, r3
 800804a:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800804c:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <HAL_RCC_ClockConfig+0x1a4>)
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	f7fe f832 	bl	80060b8 <HAL_InitTick>
}
 8008054:	bcc0      	pop	{r6, r7}
 8008056:	46b9      	mov	r9, r7
 8008058:	46b0      	mov	r8, r6
 800805a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800805c:	4a0e      	ldr	r2, [pc, #56]	; (8008098 <HAL_RCC_ClockConfig+0x188>)
 800805e:	6813      	ldr	r3, [r2, #0]
 8008060:	2107      	movs	r1, #7
 8008062:	438b      	bics	r3, r1
 8008064:	432b      	orrs	r3, r5
 8008066:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008068:	f7fe f966 	bl	8006338 <HAL_GetTick>
 800806c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800806e:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <HAL_RCC_ClockConfig+0x188>)
 8008070:	4698      	mov	r8, r3
 8008072:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008074:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <HAL_RCC_ClockConfig+0x194>)
 8008076:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008078:	4643      	mov	r3, r8
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	403b      	ands	r3, r7
 800807e:	42ab      	cmp	r3, r5
 8008080:	d0cc      	beq.n	800801c <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008082:	f7fe f959 	bl	8006338 <HAL_GetTick>
 8008086:	1b80      	subs	r0, r0, r6
 8008088:	4548      	cmp	r0, r9
 800808a:	d9f5      	bls.n	8008078 <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 800808c:	2003      	movs	r0, #3
 800808e:	e7e1      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8008090:	2001      	movs	r0, #1
 8008092:	e7df      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8008094:	2001      	movs	r0, #1
 8008096:	e7dd      	b.n	8008054 <HAL_RCC_ClockConfig+0x144>
 8008098:	40022000 	.word	0x40022000
 800809c:	40021000 	.word	0x40021000
 80080a0:	fffff0ff 	.word	0xfffff0ff
 80080a4:	00001388 	.word	0x00001388
 80080a8:	ffff8fff 	.word	0xffff8fff
 80080ac:	20000020 	.word	0x20000020
 80080b0:	08011f30 	.word	0x08011f30
 80080b4:	20000028 	.word	0x20000028

080080b8 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80080b8:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80080ba:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80080bc:	4a06      	ldr	r2, [pc, #24]	; (80080d8 <HAL_RCC_GetPCLK1Freq+0x20>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80080be:	4907      	ldr	r1, [pc, #28]	; (80080dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080c0:	045b      	lsls	r3, r3, #17
 80080c2:	0f5b      	lsrs	r3, r3, #29
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	585b      	ldr	r3, [r3, r1]
 80080c8:	211f      	movs	r1, #31
 80080ca:	400b      	ands	r3, r1
 80080cc:	6810      	ldr	r0, [r2, #0]
 80080ce:	40d8      	lsrs	r0, r3
}
 80080d0:	4770      	bx	lr
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	40021000 	.word	0x40021000
 80080d8:	20000020 	.word	0x20000020
 80080dc:	08011f70 	.word	0x08011f70

080080e0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080e0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80080e2:	2307      	movs	r3, #7
 80080e4:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080e6:	4a09      	ldr	r2, [pc, #36]	; (800810c <HAL_RCC_GetClockConfig+0x2c>)
 80080e8:	6894      	ldr	r4, [r2, #8]
 80080ea:	401c      	ands	r4, r3
 80080ec:	6044      	str	r4, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80080ee:	6894      	ldr	r4, [r2, #8]
 80080f0:	25f0      	movs	r5, #240	; 0xf0
 80080f2:	012d      	lsls	r5, r5, #4
 80080f4:	402c      	ands	r4, r5
 80080f6:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80080f8:	6892      	ldr	r2, [r2, #8]
 80080fa:	24e0      	movs	r4, #224	; 0xe0
 80080fc:	01e4      	lsls	r4, r4, #7
 80080fe:	4022      	ands	r2, r4
 8008100:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008102:	4a03      	ldr	r2, [pc, #12]	; (8008110 <HAL_RCC_GetClockConfig+0x30>)
 8008104:	6812      	ldr	r2, [r2, #0]
 8008106:	4013      	ands	r3, r2
 8008108:	600b      	str	r3, [r1, #0]
}
 800810a:	bd30      	pop	{r4, r5, pc}
 800810c:	40021000 	.word	0x40021000
 8008110:	40022000 	.word	0x40022000

08008114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008116:	46d6      	mov	lr, sl
 8008118:	464f      	mov	r7, r9
 800811a:	4646      	mov	r6, r8
 800811c:	b5c0      	push	{r6, r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008122:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008124:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008126:	039b      	lsls	r3, r3, #14
 8008128:	d52a      	bpl.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800812a:	4b5c      	ldr	r3, [pc, #368]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800812c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800812e:	2200      	movs	r2, #0
 8008130:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	d40b      	bmi.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008136:	4b59      	ldr	r3, [pc, #356]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800813a:	2180      	movs	r1, #128	; 0x80
 800813c:	0549      	lsls	r1, r1, #21
 800813e:	430a      	orrs	r2, r1
 8008140:	63da      	str	r2, [r3, #60]	; 0x3c
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	400b      	ands	r3, r1
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800814a:	2301      	movs	r3, #1
 800814c:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800814e:	4a54      	ldr	r2, [pc, #336]	; (80082a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8008150:	6811      	ldr	r1, [r2, #0]
 8008152:	2380      	movs	r3, #128	; 0x80
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	430b      	orrs	r3, r1
 8008158:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800815a:	f7fe f8ed 	bl	8006338 <HAL_GetTick>
 800815e:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008160:	4f4f      	ldr	r7, [pc, #316]	; (80082a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8008162:	2680      	movs	r6, #128	; 0x80
 8008164:	0076      	lsls	r6, r6, #1
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	4233      	tst	r3, r6
 800816a:	d000      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800816c:	e084      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800816e:	f7fe f8e3 	bl	8006338 <HAL_GetTick>
 8008172:	1b40      	subs	r0, r0, r5
 8008174:	2802      	cmp	r0, #2
 8008176:	d9f6      	bls.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 8008178:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800817a:	4653      	mov	r3, sl
 800817c:	2b01      	cmp	r3, #1
 800817e:	d067      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	07db      	lsls	r3, r3, #31
 8008184:	d506      	bpl.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008186:	4a45      	ldr	r2, [pc, #276]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008188:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800818a:	2103      	movs	r1, #3
 800818c:	438b      	bics	r3, r1
 800818e:	6861      	ldr	r1, [r4, #4]
 8008190:	430b      	orrs	r3, r1
 8008192:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	079b      	lsls	r3, r3, #30
 8008198:	d506      	bpl.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800819a:	4a40      	ldr	r2, [pc, #256]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800819c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800819e:	210c      	movs	r1, #12
 80081a0:	438b      	bics	r3, r1
 80081a2:	68a1      	ldr	r1, [r4, #8]
 80081a4:	430b      	orrs	r3, r1
 80081a6:	6553      	str	r3, [r2, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	069b      	lsls	r3, r3, #26
 80081ac:	d506      	bpl.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081ae:	4a3b      	ldr	r2, [pc, #236]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80081b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80081b2:	493c      	ldr	r1, [pc, #240]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80081b4:	400b      	ands	r3, r1
 80081b6:	68e1      	ldr	r1, [r4, #12]
 80081b8:	430b      	orrs	r3, r1
 80081ba:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	045b      	lsls	r3, r3, #17
 80081c0:	d50b      	bpl.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081c2:	4a36      	ldr	r2, [pc, #216]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80081c4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	089b      	lsrs	r3, r3, #2
 80081ca:	6961      	ldr	r1, [r4, #20]
 80081cc:	430b      	orrs	r3, r1
 80081ce:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	05db      	lsls	r3, r3, #23
 80081d4:	6962      	ldr	r2, [r4, #20]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d040      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	051b      	lsls	r3, r3, #20
 80081de:	d50b      	bpl.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80081e0:	4a2e      	ldr	r2, [pc, #184]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80081e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80081e4:	4930      	ldr	r1, [pc, #192]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80081e6:	400b      	ands	r3, r1
 80081e8:	6921      	ldr	r1, [r4, #16]
 80081ea:	430b      	orrs	r3, r1
 80081ec:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80081ee:	2380      	movs	r3, #128	; 0x80
 80081f0:	01db      	lsls	r3, r3, #7
 80081f2:	6922      	ldr	r2, [r4, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d038      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80081f8:	b002      	add	sp, #8
 80081fa:	bce0      	pop	{r5, r6, r7}
 80081fc:	46ba      	mov	sl, r7
 80081fe:	46b1      	mov	r9, r6
 8008200:	46a8      	mov	r8, r5
 8008202:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008204:	69a2      	ldr	r2, [r4, #24]
 8008206:	429a      	cmp	r2, r3
 8008208:	d00d      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x112>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800820a:	4a24      	ldr	r2, [pc, #144]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800820c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800820e:	4927      	ldr	r1, [pc, #156]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8008210:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_FORCE();
 8008212:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8008214:	2180      	movs	r1, #128	; 0x80
 8008216:	0249      	lsls	r1, r1, #9
 8008218:	4301      	orrs	r1, r0
 800821a:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800821c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800821e:	4824      	ldr	r0, [pc, #144]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8008220:	4001      	ands	r1, r0
 8008222:	65d1      	str	r1, [r2, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8008224:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008226:	07db      	lsls	r3, r3, #31
 8008228:	d52e      	bpl.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tickstart = HAL_GetTick();
 800822a:	f7fe f885 	bl	8006338 <HAL_GetTick>
 800822e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008230:	4b1a      	ldr	r3, [pc, #104]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008232:	4698      	mov	r8, r3
 8008234:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008236:	4b1f      	ldr	r3, [pc, #124]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8008238:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800823a:	4643      	mov	r3, r8
 800823c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800823e:	421e      	tst	r6, r3
 8008240:	d122      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x174>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008242:	f7fe f879 	bl	8006338 <HAL_GetTick>
 8008246:	1b40      	subs	r0, r0, r5
 8008248:	4548      	cmp	r0, r9
 800824a:	d9f6      	bls.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x126>
            ret = HAL_TIMEOUT;
 800824c:	2003      	movs	r0, #3
 800824e:	e794      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008250:	4a12      	ldr	r2, [pc, #72]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008252:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8008254:	4918      	ldr	r1, [pc, #96]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008256:	400b      	ands	r3, r1
 8008258:	63d3      	str	r3, [r2, #60]	; 0x3c
 800825a:	e791      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800825c:	4a0f      	ldr	r2, [pc, #60]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800825e:	68d1      	ldr	r1, [r2, #12]
 8008260:	2380      	movs	r3, #128	; 0x80
 8008262:	025b      	lsls	r3, r3, #9
 8008264:	430b      	orrs	r3, r1
 8008266:	60d3      	str	r3, [r2, #12]
 8008268:	e7b7      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800826a:	4a0c      	ldr	r2, [pc, #48]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800826c:	68d1      	ldr	r1, [r2, #12]
 800826e:	2380      	movs	r3, #128	; 0x80
 8008270:	025b      	lsls	r3, r3, #9
 8008272:	430b      	orrs	r3, r1
 8008274:	60d3      	str	r3, [r2, #12]
  return status;
 8008276:	e7bf      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008278:	4b08      	ldr	r3, [pc, #32]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800827a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800827c:	22c0      	movs	r2, #192	; 0xc0
 800827e:	0092      	lsls	r2, r2, #2
 8008280:	000b      	movs	r3, r1
 8008282:	4013      	ands	r3, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008284:	4211      	tst	r1, r2
 8008286:	d1bd      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008288:	4a04      	ldr	r2, [pc, #16]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800828a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800828c:	4907      	ldr	r1, [pc, #28]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800828e:	400b      	ands	r3, r1
 8008290:	69a1      	ldr	r1, [r4, #24]
 8008292:	430b      	orrs	r3, r1
 8008294:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008296:	2000      	movs	r0, #0
 8008298:	e76f      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x66>
 800829a:	46c0      	nop			; (mov r8, r8)
 800829c:	40021000 	.word	0x40021000
 80082a0:	40007000 	.word	0x40007000
 80082a4:	ffffcfff 	.word	0xffffcfff
 80082a8:	ffff3fff 	.word	0xffff3fff
 80082ac:	fffffcff 	.word	0xfffffcff
 80082b0:	fffeffff 	.word	0xfffeffff
 80082b4:	00001388 	.word	0x00001388
 80082b8:	efffffff 	.word	0xefffffff

080082bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	46d6      	mov	lr, sl
 80082c0:	464f      	mov	r7, r9
 80082c2:	4646      	mov	r6, r8
 80082c4:	b5c0      	push	{r6, r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	4681      	mov	r9, r0
 80082ca:	000d      	movs	r5, r1
 80082cc:	0017      	movs	r7, r2
 80082ce:	001e      	movs	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082d0:	f7fe f832 	bl	8006338 <HAL_GetTick>
 80082d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d6:	199b      	adds	r3, r3, r6
 80082d8:	1a1b      	subs	r3, r3, r0
 80082da:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 80082dc:	f7fe f82c 	bl	8006338 <HAL_GetTick>
 80082e0:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082e2:	4b30      	ldr	r3, [pc, #192]	; (80083a4 <SPI_WaitFlagStateUntilTimeout+0xe8>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	015b      	lsls	r3, r3, #5
 80082e8:	0d1b      	lsrs	r3, r3, #20
 80082ea:	4642      	mov	r2, r8
 80082ec:	4353      	muls	r3, r2
 80082ee:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082f0:	464b      	mov	r3, r9
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689c      	ldr	r4, [r3, #8]
 80082f6:	402c      	ands	r4, r5
 80082f8:	1b64      	subs	r4, r4, r5
 80082fa:	4262      	negs	r2, r4
 80082fc:	4154      	adcs	r4, r2
 80082fe:	42bc      	cmp	r4, r7
 8008300:	d049      	beq.n	8008396 <SPI_WaitFlagStateUntilTimeout+0xda>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008302:	1c72      	adds	r2, r6, #1
 8008304:	d0f6      	beq.n	80082f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008306:	f7fe f817 	bl	8006338 <HAL_GetTick>
 800830a:	4653      	mov	r3, sl
 800830c:	1ac0      	subs	r0, r0, r3
 800830e:	4540      	cmp	r0, r8
 8008310:	d207      	bcs.n	8008322 <SPI_WaitFlagStateUntilTimeout+0x66>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d100      	bne.n	800831a <SPI_WaitFlagStateUntilTimeout+0x5e>
      {
        tmp_timeout = 0U;
 8008318:	4698      	mov	r8, r3
      }
      count--;
 800831a:	9b01      	ldr	r3, [sp, #4]
 800831c:	3b01      	subs	r3, #1
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	e7e6      	b.n	80082f0 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008322:	464b      	mov	r3, r9
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	6853      	ldr	r3, [r2, #4]
 8008328:	21e0      	movs	r1, #224	; 0xe0
 800832a:	438b      	bics	r3, r1
 800832c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800832e:	2382      	movs	r3, #130	; 0x82
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	464a      	mov	r2, r9
 8008334:	6852      	ldr	r2, [r2, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d00e      	beq.n	8008358 <SPI_WaitFlagStateUntilTimeout+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800833a:	2380      	movs	r3, #128	; 0x80
 800833c:	019b      	lsls	r3, r3, #6
 800833e:	464a      	mov	r2, r9
 8008340:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008342:	429a      	cmp	r2, r3
 8008344:	d019      	beq.n	800837a <SPI_WaitFlagStateUntilTimeout+0xbe>
        hspi->State = HAL_SPI_STATE_READY;
 8008346:	235d      	movs	r3, #93	; 0x5d
 8008348:	2201      	movs	r2, #1
 800834a:	4649      	mov	r1, r9
 800834c:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 800834e:	3b01      	subs	r3, #1
 8008350:	2200      	movs	r2, #0
 8008352:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8008354:	2003      	movs	r0, #3
 8008356:	e01f      	b.n	8008398 <SPI_WaitFlagStateUntilTimeout+0xdc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008358:	464b      	mov	r3, r9
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2280      	movs	r2, #128	; 0x80
 800835e:	0212      	lsls	r2, r2, #8
 8008360:	4293      	cmp	r3, r2
 8008362:	d003      	beq.n	800836c <SPI_WaitFlagStateUntilTimeout+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008364:	2280      	movs	r2, #128	; 0x80
 8008366:	00d2      	lsls	r2, r2, #3
 8008368:	4293      	cmp	r3, r2
 800836a:	d1e6      	bne.n	800833a <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 800836c:	464b      	mov	r3, r9
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	6813      	ldr	r3, [r2, #0]
 8008372:	2140      	movs	r1, #64	; 0x40
 8008374:	438b      	bics	r3, r1
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	e7df      	b.n	800833a <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 800837a:	464b      	mov	r3, r9
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	4909      	ldr	r1, [pc, #36]	; (80083a8 <SPI_WaitFlagStateUntilTimeout+0xec>)
 8008382:	400b      	ands	r3, r1
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	464b      	mov	r3, r9
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	6811      	ldr	r1, [r2, #0]
 800838c:	2380      	movs	r3, #128	; 0x80
 800838e:	019b      	lsls	r3, r3, #6
 8008390:	430b      	orrs	r3, r1
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	e7d7      	b.n	8008346 <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8008396:	2000      	movs	r0, #0
}
 8008398:	b002      	add	sp, #8
 800839a:	bce0      	pop	{r5, r6, r7}
 800839c:	46ba      	mov	sl, r7
 800839e:	46b1      	mov	r9, r6
 80083a0:	46a8      	mov	r8, r5
 80083a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a4:	20000020 	.word	0x20000020
 80083a8:	ffffdfff 	.word	0xffffdfff

080083ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ae:	46de      	mov	lr, fp
 80083b0:	4657      	mov	r7, sl
 80083b2:	464e      	mov	r6, r9
 80083b4:	4645      	mov	r5, r8
 80083b6:	b5e0      	push	{r5, r6, r7, lr}
 80083b8:	b083      	sub	sp, #12
 80083ba:	4682      	mov	sl, r0
 80083bc:	000c      	movs	r4, r1
 80083be:	0015      	movs	r5, r2
 80083c0:	001e      	movs	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083c2:	466b      	mov	r3, sp
 80083c4:	2200      	movs	r2, #0
 80083c6:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083c8:	f7fd ffb6 	bl	8006338 <HAL_GetTick>
 80083cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ce:	199b      	adds	r3, r3, r6
 80083d0:	1a1b      	subs	r3, r3, r0
 80083d2:	4699      	mov	r9, r3
  tmp_tickstart = HAL_GetTick();
 80083d4:	f7fd ffb0 	bl	8006338 <HAL_GetTick>
 80083d8:	4680      	mov	r8, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083da:	4653      	mov	r3, sl
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083e0:	4b38      	ldr	r3, [pc, #224]	; (80084c4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	009a      	lsls	r2, r3, #2
 80083e6:	18d2      	adds	r2, r2, r3
 80083e8:	00d3      	lsls	r3, r2, #3
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	0d1b      	lsrs	r3, r3, #20
 80083ee:	464a      	mov	r2, r9
 80083f0:	4353      	muls	r3, r2
 80083f2:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083f4:	27c0      	movs	r7, #192	; 0xc0
 80083f6:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 80083f8:	4653      	mov	r3, sl
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	e001      	b.n	8008402 <SPI_WaitFifoStateUntilTimeout+0x56>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80083fe:	1c73      	adds	r3, r6, #1
 8008400:	d10f      	bne.n	8008422 <SPI_WaitFifoStateUntilTimeout+0x76>
  while ((hspi->Instance->SR & Fifo) != State)
 8008402:	6893      	ldr	r3, [r2, #8]
 8008404:	4023      	ands	r3, r4
 8008406:	42ab      	cmp	r3, r5
 8008408:	d053      	beq.n	80084b2 <SPI_WaitFifoStateUntilTimeout+0x106>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800840a:	42bc      	cmp	r4, r7
 800840c:	d1f7      	bne.n	80083fe <SPI_WaitFifoStateUntilTimeout+0x52>
 800840e:	2d00      	cmp	r5, #0
 8008410:	d1f5      	bne.n	80083fe <SPI_WaitFifoStateUntilTimeout+0x52>
      tmpreg8 = *ptmpreg8;
 8008412:	465b      	mov	r3, fp
 8008414:	7b1b      	ldrb	r3, [r3, #12]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	4669      	mov	r1, sp
 800841a:	70cb      	strb	r3, [r1, #3]
      UNUSED(tmpreg8);
 800841c:	466b      	mov	r3, sp
 800841e:	78db      	ldrb	r3, [r3, #3]
 8008420:	e7ed      	b.n	80083fe <SPI_WaitFifoStateUntilTimeout+0x52>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008422:	f7fd ff89 	bl	8006338 <HAL_GetTick>
 8008426:	4643      	mov	r3, r8
 8008428:	1ac0      	subs	r0, r0, r3
 800842a:	4548      	cmp	r0, r9
 800842c:	d207      	bcs.n	800843e <SPI_WaitFifoStateUntilTimeout+0x92>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d100      	bne.n	8008436 <SPI_WaitFifoStateUntilTimeout+0x8a>
      {
        tmp_timeout = 0U;
 8008434:	4699      	mov	r9, r3
      }
      count--;
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	3b01      	subs	r3, #1
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	e7dc      	b.n	80083f8 <SPI_WaitFifoStateUntilTimeout+0x4c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800843e:	4653      	mov	r3, sl
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	6853      	ldr	r3, [r2, #4]
 8008444:	21e0      	movs	r1, #224	; 0xe0
 8008446:	438b      	bics	r3, r1
 8008448:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800844a:	2382      	movs	r3, #130	; 0x82
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	4652      	mov	r2, sl
 8008450:	6852      	ldr	r2, [r2, #4]
 8008452:	429a      	cmp	r2, r3
 8008454:	d00e      	beq.n	8008474 <SPI_WaitFifoStateUntilTimeout+0xc8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008456:	2380      	movs	r3, #128	; 0x80
 8008458:	019b      	lsls	r3, r3, #6
 800845a:	4652      	mov	r2, sl
 800845c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800845e:	429a      	cmp	r2, r3
 8008460:	d019      	beq.n	8008496 <SPI_WaitFifoStateUntilTimeout+0xea>
        hspi->State = HAL_SPI_STATE_READY;
 8008462:	235d      	movs	r3, #93	; 0x5d
 8008464:	2201      	movs	r2, #1
 8008466:	4651      	mov	r1, sl
 8008468:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 800846a:	3b01      	subs	r3, #1
 800846c:	2200      	movs	r2, #0
 800846e:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8008470:	2003      	movs	r0, #3
 8008472:	e01f      	b.n	80084b4 <SPI_WaitFifoStateUntilTimeout+0x108>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008474:	4653      	mov	r3, sl
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	2280      	movs	r2, #128	; 0x80
 800847a:	0212      	lsls	r2, r2, #8
 800847c:	4293      	cmp	r3, r2
 800847e:	d003      	beq.n	8008488 <SPI_WaitFifoStateUntilTimeout+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008480:	2280      	movs	r2, #128	; 0x80
 8008482:	00d2      	lsls	r2, r2, #3
 8008484:	4293      	cmp	r3, r2
 8008486:	d1e6      	bne.n	8008456 <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 8008488:	4653      	mov	r3, sl
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	6813      	ldr	r3, [r2, #0]
 800848e:	2140      	movs	r1, #64	; 0x40
 8008490:	438b      	bics	r3, r1
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	e7df      	b.n	8008456 <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 8008496:	4653      	mov	r3, sl
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	490a      	ldr	r1, [pc, #40]	; (80084c8 <SPI_WaitFifoStateUntilTimeout+0x11c>)
 800849e:	400b      	ands	r3, r1
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	4653      	mov	r3, sl
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	6811      	ldr	r1, [r2, #0]
 80084a8:	2380      	movs	r3, #128	; 0x80
 80084aa:	019b      	lsls	r3, r3, #6
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	e7d7      	b.n	8008462 <SPI_WaitFifoStateUntilTimeout+0xb6>
    }
  }

  return HAL_OK;
 80084b2:	2000      	movs	r0, #0
}
 80084b4:	b003      	add	sp, #12
 80084b6:	bcf0      	pop	{r4, r5, r6, r7}
 80084b8:	46bb      	mov	fp, r7
 80084ba:	46b2      	mov	sl, r6
 80084bc:	46a9      	mov	r9, r5
 80084be:	46a0      	mov	r8, r4
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	20000020 	.word	0x20000020
 80084c8:	ffffdfff 	.word	0xffffdfff

080084cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	0004      	movs	r4, r0
 80084d2:	000d      	movs	r5, r1
 80084d4:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084d6:	21c0      	movs	r1, #192	; 0xc0
 80084d8:	9200      	str	r2, [sp, #0]
 80084da:	002b      	movs	r3, r5
 80084dc:	2200      	movs	r2, #0
 80084de:	0149      	lsls	r1, r1, #5
 80084e0:	f7ff ff64 	bl	80083ac <SPI_WaitFifoStateUntilTimeout>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d118      	bne.n	800851a <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084e8:	9600      	str	r6, [sp, #0]
 80084ea:	002b      	movs	r3, r5
 80084ec:	2200      	movs	r2, #0
 80084ee:	2180      	movs	r1, #128	; 0x80
 80084f0:	0020      	movs	r0, r4
 80084f2:	f7ff fee3 	bl	80082bc <SPI_WaitFlagStateUntilTimeout>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d116      	bne.n	8008528 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084fa:	21c0      	movs	r1, #192	; 0xc0
 80084fc:	9600      	str	r6, [sp, #0]
 80084fe:	002b      	movs	r3, r5
 8008500:	2200      	movs	r2, #0
 8008502:	00c9      	lsls	r1, r1, #3
 8008504:	0020      	movs	r0, r4
 8008506:	f7ff ff51 	bl	80083ac <SPI_WaitFifoStateUntilTimeout>
 800850a:	2800      	cmp	r0, #0
 800850c:	d00a      	beq.n	8008524 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800850e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008510:	2220      	movs	r2, #32
 8008512:	4313      	orrs	r3, r2
 8008514:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008516:	2003      	movs	r0, #3
 8008518:	e004      	b.n	8008524 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800851a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800851c:	2220      	movs	r2, #32
 800851e:	4313      	orrs	r3, r2
 8008520:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008522:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8008524:	b002      	add	sp, #8
 8008526:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008528:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800852a:	2220      	movs	r2, #32
 800852c:	4313      	orrs	r3, r2
 800852e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008530:	2003      	movs	r0, #3
 8008532:	e7f7      	b.n	8008524 <SPI_EndRxTxTransaction+0x58>

08008534 <HAL_SPI_Init>:
{
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8008538:	d100      	bne.n	800853c <HAL_SPI_Init+0x8>
 800853a:	e073      	b.n	8008624 <HAL_SPI_Init+0xf0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800853c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800853e:	2b00      	cmp	r3, #0
 8008540:	d107      	bne.n	8008552 <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008542:	3305      	adds	r3, #5
 8008544:	33ff      	adds	r3, #255	; 0xff
 8008546:	6842      	ldr	r2, [r0, #4]
 8008548:	429a      	cmp	r2, r3
 800854a:	d005      	beq.n	8008558 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800854c:	2300      	movs	r3, #0
 800854e:	61c3      	str	r3, [r0, #28]
 8008550:	e002      	b.n	8008558 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008552:	2300      	movs	r3, #0
 8008554:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008556:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008558:	2300      	movs	r3, #0
 800855a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800855c:	335d      	adds	r3, #93	; 0x5d
 800855e:	5ce3      	ldrb	r3, [r4, r3]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d058      	beq.n	8008616 <HAL_SPI_Init+0xe2>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008564:	235d      	movs	r3, #93	; 0x5d
 8008566:	2202      	movs	r2, #2
 8008568:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 800856a:	6822      	ldr	r2, [r4, #0]
 800856c:	6813      	ldr	r3, [r2, #0]
 800856e:	2140      	movs	r1, #64	; 0x40
 8008570:	438b      	bics	r3, r1
 8008572:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008574:	68e3      	ldr	r3, [r4, #12]
 8008576:	21e0      	movs	r1, #224	; 0xe0
 8008578:	00c9      	lsls	r1, r1, #3
 800857a:	2200      	movs	r2, #0
 800857c:	4299      	cmp	r1, r3
 800857e:	4152      	adcs	r2, r2
 8008580:	0312      	lsls	r2, r2, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008582:	4829      	ldr	r0, [pc, #164]	; (8008628 <HAL_SPI_Init+0xf4>)
 8008584:	4003      	ands	r3, r0
 8008586:	428b      	cmp	r3, r1
 8008588:	d001      	beq.n	800858e <HAL_SPI_Init+0x5a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800858a:	2300      	movs	r3, #0
 800858c:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	6863      	ldr	r3, [r4, #4]
 8008592:	2182      	movs	r1, #130	; 0x82
 8008594:	0049      	lsls	r1, r1, #1
 8008596:	400b      	ands	r3, r1
 8008598:	68a1      	ldr	r1, [r4, #8]
 800859a:	2584      	movs	r5, #132	; 0x84
 800859c:	022d      	lsls	r5, r5, #8
 800859e:	4029      	ands	r1, r5
 80085a0:	430b      	orrs	r3, r1
 80085a2:	6921      	ldr	r1, [r4, #16]
 80085a4:	2502      	movs	r5, #2
 80085a6:	4029      	ands	r1, r5
 80085a8:	430b      	orrs	r3, r1
 80085aa:	2101      	movs	r1, #1
 80085ac:	6965      	ldr	r5, [r4, #20]
 80085ae:	400d      	ands	r5, r1
 80085b0:	432b      	orrs	r3, r5
 80085b2:	69a5      	ldr	r5, [r4, #24]
 80085b4:	2680      	movs	r6, #128	; 0x80
 80085b6:	00b6      	lsls	r6, r6, #2
 80085b8:	4035      	ands	r5, r6
 80085ba:	432b      	orrs	r3, r5
 80085bc:	69e5      	ldr	r5, [r4, #28]
 80085be:	3ec9      	subs	r6, #201	; 0xc9
 80085c0:	3eff      	subs	r6, #255	; 0xff
 80085c2:	4035      	ands	r5, r6
 80085c4:	432b      	orrs	r3, r5
 80085c6:	6a25      	ldr	r5, [r4, #32]
 80085c8:	3648      	adds	r6, #72	; 0x48
 80085ca:	4035      	ands	r5, r6
 80085cc:	432b      	orrs	r3, r5
 80085ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80085d0:	2680      	movs	r6, #128	; 0x80
 80085d2:	01b6      	lsls	r6, r6, #6
 80085d4:	4035      	ands	r5, r6
 80085d6:	432b      	orrs	r3, r5
 80085d8:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085da:	6825      	ldr	r5, [r4, #0]
 80085dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085de:	2010      	movs	r0, #16
 80085e0:	4003      	ands	r3, r0
 80085e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80085e4:	2608      	movs	r6, #8
 80085e6:	4030      	ands	r0, r6
 80085e8:	4303      	orrs	r3, r0
 80085ea:	68e0      	ldr	r0, [r4, #12]
 80085ec:	26f0      	movs	r6, #240	; 0xf0
 80085ee:	0136      	lsls	r6, r6, #4
 80085f0:	4030      	ands	r0, r6
 80085f2:	4303      	orrs	r3, r0
 80085f4:	8b66      	ldrh	r6, [r4, #26]
 80085f6:	2004      	movs	r0, #4
 80085f8:	4030      	ands	r0, r6
 80085fa:	4303      	orrs	r3, r0
 80085fc:	4313      	orrs	r3, r2
 80085fe:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008600:	6822      	ldr	r2, [r4, #0]
 8008602:	69d3      	ldr	r3, [r2, #28]
 8008604:	4808      	ldr	r0, [pc, #32]	; (8008628 <HAL_SPI_Init+0xf4>)
 8008606:	4003      	ands	r3, r0
 8008608:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800860a:	2300      	movs	r3, #0
 800860c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800860e:	335d      	adds	r3, #93	; 0x5d
 8008610:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 8008612:	2000      	movs	r0, #0
}
 8008614:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8008616:	335c      	adds	r3, #92	; 0x5c
 8008618:	2200      	movs	r2, #0
 800861a:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800861c:	0020      	movs	r0, r4
 800861e:	f7fd fbfd 	bl	8005e1c <HAL_SPI_MspInit>
 8008622:	e79f      	b.n	8008564 <HAL_SPI_Init+0x30>
    return HAL_ERROR;
 8008624:	2001      	movs	r0, #1
 8008626:	e7f5      	b.n	8008614 <HAL_SPI_Init+0xe0>
 8008628:	fffff7ff 	.word	0xfffff7ff

0800862c <HAL_SPI_Transmit>:
{
 800862c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862e:	b085      	sub	sp, #20
 8008630:	0004      	movs	r4, r0
 8008632:	9101      	str	r1, [sp, #4]
 8008634:	0017      	movs	r7, r2
 8008636:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8008638:	235c      	movs	r3, #92	; 0x5c
 800863a:	5cc3      	ldrb	r3, [r0, r3]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d100      	bne.n	8008642 <HAL_SPI_Transmit+0x16>
 8008640:	e0cb      	b.n	80087da <HAL_SPI_Transmit+0x1ae>
 8008642:	235c      	movs	r3, #92	; 0x5c
 8008644:	2201      	movs	r2, #1
 8008646:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8008648:	f7fd fe76 	bl	8006338 <HAL_GetTick>
 800864c:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800864e:	235d      	movs	r3, #93	; 0x5d
 8008650:	5ce3      	ldrb	r3, [r4, r3]
 8008652:	b2d8      	uxtb	r0, r3
 8008654:	2b01      	cmp	r3, #1
 8008656:	d000      	beq.n	800865a <HAL_SPI_Transmit+0x2e>
 8008658:	e0b2      	b.n	80087c0 <HAL_SPI_Transmit+0x194>
  if ((pData == NULL) || (Size == 0U))
 800865a:	9901      	ldr	r1, [sp, #4]
 800865c:	2900      	cmp	r1, #0
 800865e:	d100      	bne.n	8008662 <HAL_SPI_Transmit+0x36>
 8008660:	e0af      	b.n	80087c2 <HAL_SPI_Transmit+0x196>
 8008662:	2f00      	cmp	r7, #0
 8008664:	d100      	bne.n	8008668 <HAL_SPI_Transmit+0x3c>
 8008666:	e0ac      	b.n	80087c2 <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008668:	335c      	adds	r3, #92	; 0x5c
 800866a:	2203      	movs	r2, #3
 800866c:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800866e:	2300      	movs	r3, #0
 8008670:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008672:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008674:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008676:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008678:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800867a:	3241      	adds	r2, #65	; 0x41
 800867c:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 800867e:	3202      	adds	r2, #2
 8008680:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8008682:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008684:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008686:	2380      	movs	r3, #128	; 0x80
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	68a2      	ldr	r2, [r4, #8]
 800868c:	429a      	cmp	r2, r3
 800868e:	d039      	beq.n	8008704 <HAL_SPI_Transmit+0xd8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	065b      	lsls	r3, r3, #25
 8008696:	d403      	bmi.n	80086a0 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_ENABLE(hspi);
 8008698:	6813      	ldr	r3, [r2, #0]
 800869a:	2140      	movs	r1, #64	; 0x40
 800869c:	430b      	orrs	r3, r1
 800869e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086a0:	23e0      	movs	r3, #224	; 0xe0
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	68e2      	ldr	r2, [r4, #12]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d956      	bls.n	8008758 <HAL_SPI_Transmit+0x12c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086aa:	6863      	ldr	r3, [r4, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <HAL_SPI_Transmit+0x88>
 80086b0:	2f01      	cmp	r7, #1
 80086b2:	d10a      	bne.n	80086ca <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086b8:	8812      	ldrh	r2, [r2, #0]
 80086ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086be:	3302      	adds	r3, #2
 80086c0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80086c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80086c4:	3b01      	subs	r3, #1
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80086ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80086cc:	b29b      	uxth	r3, r3
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086ce:	2702      	movs	r7, #2
    while (hspi->TxXferCount > 0U)
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d12e      	bne.n	8008732 <HAL_SPI_Transmit+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086d4:	0032      	movs	r2, r6
 80086d6:	0029      	movs	r1, r5
 80086d8:	0020      	movs	r0, r4
 80086da:	f7ff fef7 	bl	80084cc <SPI_EndRxTxTransaction>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d001      	beq.n	80086e6 <HAL_SPI_Transmit+0xba>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086e2:	2320      	movs	r3, #32
 80086e4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086e6:	68a3      	ldr	r3, [r4, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d106      	bne.n	80086fa <HAL_SPI_Transmit+0xce>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	9203      	str	r2, [sp, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	9303      	str	r3, [sp, #12]
 80086f8:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80086fc:	1e43      	subs	r3, r0, #1
 80086fe:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8008700:	b2c0      	uxtb	r0, r0
error:
 8008702:	e05e      	b.n	80087c2 <HAL_SPI_Transmit+0x196>
    __HAL_SPI_DISABLE(hspi);
 8008704:	6822      	ldr	r2, [r4, #0]
 8008706:	6813      	ldr	r3, [r2, #0]
 8008708:	2140      	movs	r1, #64	; 0x40
 800870a:	438b      	bics	r3, r1
 800870c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800870e:	6822      	ldr	r2, [r4, #0]
 8008710:	6811      	ldr	r1, [r2, #0]
 8008712:	2380      	movs	r3, #128	; 0x80
 8008714:	01db      	lsls	r3, r3, #7
 8008716:	430b      	orrs	r3, r1
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	e7b9      	b.n	8008690 <HAL_SPI_Transmit+0x64>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800871c:	f7fd fe0c 	bl	8006338 <HAL_GetTick>
 8008720:	1b80      	subs	r0, r0, r6
 8008722:	42a8      	cmp	r0, r5
 8008724:	d314      	bcc.n	8008750 <HAL_SPI_Transmit+0x124>
 8008726:	1c6b      	adds	r3, r5, #1
 8008728:	d153      	bne.n	80087d2 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 800872a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0d0      	beq.n	80086d4 <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	4217      	tst	r7, r2
 8008738:	d0f0      	beq.n	800871c <HAL_SPI_Transmit+0xf0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800873a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800873c:	8812      	ldrh	r2, [r2, #0]
 800873e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008742:	3302      	adds	r3, #2
 8008744:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008746:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8008748:	3901      	subs	r1, #1
 800874a:	b289      	uxth	r1, r1
 800874c:	87e1      	strh	r1, [r4, #62]	; 0x3e
 800874e:	e7ec      	b.n	800872a <HAL_SPI_Transmit+0xfe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008750:	2d00      	cmp	r5, #0
 8008752:	d1ea      	bne.n	800872a <HAL_SPI_Transmit+0xfe>
          errorcode = HAL_TIMEOUT;
 8008754:	2003      	movs	r0, #3
 8008756:	e034      	b.n	80087c2 <HAL_SPI_Transmit+0x196>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008758:	6863      	ldr	r3, [r4, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <HAL_SPI_Transmit+0x136>
 800875e:	2f01      	cmp	r7, #1
 8008760:	d10a      	bne.n	8008778 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008766:	7812      	ldrb	r2, [r2, #0]
 8008768:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800876a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800876c:	3301      	adds	r3, #1
 800876e:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008770:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008772:	3b01      	subs	r3, #1
 8008774:	b29b      	uxth	r3, r3
 8008776:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8008778:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800877a:	b29b      	uxth	r3, r3
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800877c:	2702      	movs	r7, #2
    while (hspi->TxXferCount > 0U)
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10b      	bne.n	800879a <HAL_SPI_Transmit+0x16e>
 8008782:	e7a7      	b.n	80086d4 <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008784:	f7fd fdd8 	bl	8006338 <HAL_GetTick>
 8008788:	1b80      	subs	r0, r0, r6
 800878a:	42a8      	cmp	r0, r5
 800878c:	d314      	bcc.n	80087b8 <HAL_SPI_Transmit+0x18c>
 800878e:	1c6b      	adds	r3, r5, #1
 8008790:	d121      	bne.n	80087d6 <HAL_SPI_Transmit+0x1aa>
    while (hspi->TxXferCount > 0U)
 8008792:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d09c      	beq.n	80086d4 <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	689a      	ldr	r2, [r3, #8]
 800879e:	4217      	tst	r7, r2
 80087a0:	d0f0      	beq.n	8008784 <HAL_SPI_Transmit+0x158>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087a4:	7812      	ldrb	r2, [r2, #0]
 80087a6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80087a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80087aa:	3301      	adds	r3, #1
 80087ac:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80087ae:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80087b0:	3901      	subs	r1, #1
 80087b2:	b289      	uxth	r1, r1
 80087b4:	87e1      	strh	r1, [r4, #62]	; 0x3e
 80087b6:	e7ec      	b.n	8008792 <HAL_SPI_Transmit+0x166>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	d1ea      	bne.n	8008792 <HAL_SPI_Transmit+0x166>
          errorcode = HAL_TIMEOUT;
 80087bc:	2003      	movs	r0, #3
 80087be:	e000      	b.n	80087c2 <HAL_SPI_Transmit+0x196>
    errorcode = HAL_BUSY;
 80087c0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80087c2:	235d      	movs	r3, #93	; 0x5d
 80087c4:	2201      	movs	r2, #1
 80087c6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80087c8:	3b01      	subs	r3, #1
 80087ca:	2200      	movs	r2, #0
 80087cc:	54e2      	strb	r2, [r4, r3]
}
 80087ce:	b005      	add	sp, #20
 80087d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          errorcode = HAL_TIMEOUT;
 80087d2:	2003      	movs	r0, #3
 80087d4:	e7f5      	b.n	80087c2 <HAL_SPI_Transmit+0x196>
          errorcode = HAL_TIMEOUT;
 80087d6:	2003      	movs	r0, #3
 80087d8:	e7f3      	b.n	80087c2 <HAL_SPI_Transmit+0x196>
  __HAL_LOCK(hspi);
 80087da:	2002      	movs	r0, #2
 80087dc:	e7f7      	b.n	80087ce <HAL_SPI_Transmit+0x1a2>
	...

080087e0 <HAL_SPI_TransmitReceive>:
{
 80087e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e2:	46d6      	mov	lr, sl
 80087e4:	464f      	mov	r7, r9
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b083      	sub	sp, #12
 80087ea:	0004      	movs	r4, r0
 80087ec:	9100      	str	r1, [sp, #0]
 80087ee:	9201      	str	r2, [sp, #4]
 80087f0:	001f      	movs	r7, r3
 80087f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80087f4:	235c      	movs	r3, #92	; 0x5c
 80087f6:	5cc3      	ldrb	r3, [r0, r3]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d100      	bne.n	80087fe <HAL_SPI_TransmitReceive+0x1e>
 80087fc:	e124      	b.n	8008a48 <HAL_SPI_TransmitReceive+0x268>
 80087fe:	235c      	movs	r3, #92	; 0x5c
 8008800:	2201      	movs	r2, #1
 8008802:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8008804:	f7fd fd98 	bl	8006338 <HAL_GetTick>
 8008808:	0006      	movs	r6, r0
  tmp_state           = hspi->State;
 800880a:	235d      	movs	r3, #93	; 0x5d
 800880c:	5ce3      	ldrb	r3, [r4, r3]
 800880e:	b2d9      	uxtb	r1, r3
  tmp_mode            = hspi->Init.Mode;
 8008810:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008812:	2b01      	cmp	r3, #1
 8008814:	d00c      	beq.n	8008830 <HAL_SPI_TransmitReceive+0x50>
 8008816:	2382      	movs	r3, #130	; 0x82
 8008818:	005b      	lsls	r3, r3, #1
    errorcode = HAL_BUSY;
 800881a:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800881c:	429a      	cmp	r2, r3
 800881e:	d000      	beq.n	8008822 <HAL_SPI_TransmitReceive+0x42>
 8008820:	e0fd      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008822:	68a3      	ldr	r3, [r4, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d000      	beq.n	800882a <HAL_SPI_TransmitReceive+0x4a>
 8008828:	e0f8      	b.n	8008a1c <HAL_SPI_TransmitReceive+0x23c>
 800882a:	2904      	cmp	r1, #4
 800882c:	d000      	beq.n	8008830 <HAL_SPI_TransmitReceive+0x50>
 800882e:	e0f6      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008830:	9b00      	ldr	r3, [sp, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d100      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x58>
 8008836:	e0fd      	b.n	8008a34 <HAL_SPI_TransmitReceive+0x254>
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d100      	bne.n	8008840 <HAL_SPI_TransmitReceive+0x60>
 800883e:	e0fb      	b.n	8008a38 <HAL_SPI_TransmitReceive+0x258>
 8008840:	2f00      	cmp	r7, #0
 8008842:	d100      	bne.n	8008846 <HAL_SPI_TransmitReceive+0x66>
 8008844:	e0fa      	b.n	8008a3c <HAL_SPI_TransmitReceive+0x25c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008846:	235d      	movs	r3, #93	; 0x5d
 8008848:	5ce3      	ldrb	r3, [r4, r3]
 800884a:	2b04      	cmp	r3, #4
 800884c:	d002      	beq.n	8008854 <HAL_SPI_TransmitReceive+0x74>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800884e:	235d      	movs	r3, #93	; 0x5d
 8008850:	2205      	movs	r2, #5
 8008852:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008854:	2300      	movs	r3, #0
 8008856:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008858:	9a01      	ldr	r2, [sp, #4]
 800885a:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800885c:	2246      	movs	r2, #70	; 0x46
 800885e:	52a7      	strh	r7, [r4, r2]
  hspi->RxXferSize  = Size;
 8008860:	3a02      	subs	r2, #2
 8008862:	52a7      	strh	r7, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008864:	9a00      	ldr	r2, [sp, #0]
 8008866:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008868:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800886a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800886c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800886e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008870:	23e0      	movs	r3, #224	; 0xe0
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	68e2      	ldr	r2, [r4, #12]
 8008876:	429a      	cmp	r2, r3
 8008878:	d927      	bls.n	80088ca <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800887a:	6822      	ldr	r2, [r4, #0]
 800887c:	6853      	ldr	r3, [r2, #4]
 800887e:	4973      	ldr	r1, [pc, #460]	; (8008a4c <HAL_SPI_TransmitReceive+0x26c>)
 8008880:	400b      	ands	r3, r1
 8008882:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	0652      	lsls	r2, r2, #25
 800888a:	d403      	bmi.n	8008894 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	2140      	movs	r1, #64	; 0x40
 8008890:	430a      	orrs	r2, r1
 8008892:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008894:	23e0      	movs	r3, #224	; 0xe0
 8008896:	00db      	lsls	r3, r3, #3
 8008898:	68e2      	ldr	r2, [r4, #12]
 800889a:	429a      	cmp	r2, r3
 800889c:	d95b      	bls.n	8008956 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800889e:	6863      	ldr	r3, [r4, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <HAL_SPI_TransmitReceive+0xc8>
 80088a4:	2f01      	cmp	r7, #1
 80088a6:	d10a      	bne.n	80088be <HAL_SPI_TransmitReceive+0xde>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80088ac:	8812      	ldrh	r2, [r2, #0]
 80088ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80088b2:	3302      	adds	r3, #2
 80088b4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80088b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80088be:	2301      	movs	r3, #1
 80088c0:	469a      	mov	sl, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088c2:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088c4:	3301      	adds	r3, #1
 80088c6:	4699      	mov	r9, r3
 80088c8:	e030      	b.n	800892c <HAL_SPI_TransmitReceive+0x14c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	6851      	ldr	r1, [r2, #4]
 80088ce:	2380      	movs	r3, #128	; 0x80
 80088d0:	015b      	lsls	r3, r3, #5
 80088d2:	430b      	orrs	r3, r1
 80088d4:	6053      	str	r3, [r2, #4]
 80088d6:	e7d5      	b.n	8008884 <HAL_SPI_TransmitReceive+0xa4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80088da:	8812      	ldrh	r2, [r2, #0]
 80088dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80088e0:	3302      	adds	r3, #2
 80088e2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80088e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80088e6:	3b01      	subs	r3, #1
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	469a      	mov	sl, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088f0:	6821      	ldr	r1, [r4, #0]
 80088f2:	688b      	ldr	r3, [r1, #8]
 80088f4:	2201      	movs	r2, #1
 80088f6:	0010      	movs	r0, r2
 80088f8:	4018      	ands	r0, r3
 80088fa:	421a      	tst	r2, r3
 80088fc:	d00e      	beq.n	800891c <HAL_SPI_TransmitReceive+0x13c>
 80088fe:	5be3      	ldrh	r3, [r4, r7]
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <HAL_SPI_TransmitReceive+0x13c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008906:	68ca      	ldr	r2, [r1, #12]
 8008908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800890a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800890c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800890e:	3302      	adds	r3, #2
 8008910:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008912:	5be3      	ldrh	r3, [r4, r7]
 8008914:	3b01      	subs	r3, #1
 8008916:	b29b      	uxth	r3, r3
 8008918:	53e3      	strh	r3, [r4, r7]
        txallowed = 1U;
 800891a:	4682      	mov	sl, r0
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800891c:	f7fd fd0c 	bl	8006338 <HAL_GetTick>
 8008920:	1b80      	subs	r0, r0, r6
 8008922:	42a8      	cmp	r0, r5
 8008924:	d302      	bcc.n	800892c <HAL_SPI_TransmitReceive+0x14c>
 8008926:	1c6b      	adds	r3, r5, #1
 8008928:	d000      	beq.n	800892c <HAL_SPI_TransmitReceive+0x14c>
 800892a:	e089      	b.n	8008a40 <HAL_SPI_TransmitReceive+0x260>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800892c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800892e:	b29b      	uxth	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d103      	bne.n	800893c <HAL_SPI_TransmitReceive+0x15c>
 8008934:	5be3      	ldrh	r3, [r4, r7]
 8008936:	b29b      	uxth	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d064      	beq.n	8008a06 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	4649      	mov	r1, r9
 8008942:	4211      	tst	r1, r2
 8008944:	d0d4      	beq.n	80088f0 <HAL_SPI_TransmitReceive+0x110>
 8008946:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008948:	b292      	uxth	r2, r2
 800894a:	2a00      	cmp	r2, #0
 800894c:	d0d0      	beq.n	80088f0 <HAL_SPI_TransmitReceive+0x110>
 800894e:	4652      	mov	r2, sl
 8008950:	2a01      	cmp	r2, #1
 8008952:	d1cd      	bne.n	80088f0 <HAL_SPI_TransmitReceive+0x110>
 8008954:	e7c0      	b.n	80088d8 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008956:	6863      	ldr	r3, [r4, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_SPI_TransmitReceive+0x180>
 800895c:	2f01      	cmp	r7, #1
 800895e:	d10a      	bne.n	8008976 <HAL_SPI_TransmitReceive+0x196>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800896a:	3301      	adds	r3, #1
 800896c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800896e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008970:	3b01      	subs	r3, #1
 8008972:	b29b      	uxth	r3, r3
 8008974:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008976:	2301      	movs	r3, #1
 8008978:	469a      	mov	sl, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800897a:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800897c:	3301      	adds	r3, #1
 800897e:	4699      	mov	r9, r3
 8008980:	e01c      	b.n	80089bc <HAL_SPI_TransmitReceive+0x1dc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008982:	6821      	ldr	r1, [r4, #0]
 8008984:	688b      	ldr	r3, [r1, #8]
 8008986:	2201      	movs	r2, #1
 8008988:	0010      	movs	r0, r2
 800898a:	4018      	ands	r0, r3
 800898c:	421a      	tst	r2, r3
 800898e:	d00e      	beq.n	80089ae <HAL_SPI_TransmitReceive+0x1ce>
 8008990:	5be3      	ldrh	r3, [r4, r7]
 8008992:	b29b      	uxth	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <HAL_SPI_TransmitReceive+0x1ce>
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800899a:	7b0a      	ldrb	r2, [r1, #12]
 800899c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800899e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089a0:	3301      	adds	r3, #1
 80089a2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80089a4:	5be3      	ldrh	r3, [r4, r7]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	53e3      	strh	r3, [r4, r7]
        txallowed = 1U;
 80089ac:	4682      	mov	sl, r0
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80089ae:	f7fd fcc3 	bl	8006338 <HAL_GetTick>
 80089b2:	1b80      	subs	r0, r0, r6
 80089b4:	42a8      	cmp	r0, r5
 80089b6:	d322      	bcc.n	80089fe <HAL_SPI_TransmitReceive+0x21e>
 80089b8:	1c6b      	adds	r3, r5, #1
 80089ba:	d143      	bne.n	8008a44 <HAL_SPI_TransmitReceive+0x264>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d103      	bne.n	80089cc <HAL_SPI_TransmitReceive+0x1ec>
 80089c4:	5be3      	ldrh	r3, [r4, r7]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01c      	beq.n	8008a06 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	4649      	mov	r1, r9
 80089d2:	4211      	tst	r1, r2
 80089d4:	d0d5      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x1a2>
 80089d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80089d8:	b292      	uxth	r2, r2
 80089da:	2a00      	cmp	r2, #0
 80089dc:	d0d1      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x1a2>
 80089de:	4652      	mov	r2, sl
 80089e0:	2a01      	cmp	r2, #1
 80089e2:	d1ce      	bne.n	8008982 <HAL_SPI_TransmitReceive+0x1a2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80089e6:	7812      	ldrb	r2, [r2, #0]
 80089e8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80089ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089ec:	3301      	adds	r3, #1
 80089ee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80089f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80089f2:	3b01      	subs	r3, #1
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	469a      	mov	sl, r3
 80089fc:	e7c1      	b.n	8008982 <HAL_SPI_TransmitReceive+0x1a2>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80089fe:	2d00      	cmp	r5, #0
 8008a00:	d1dc      	bne.n	80089bc <HAL_SPI_TransmitReceive+0x1dc>
        errorcode = HAL_TIMEOUT;
 8008a02:	2003      	movs	r0, #3
 8008a04:	e00b      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a06:	0032      	movs	r2, r6
 8008a08:	0029      	movs	r1, r5
 8008a0a:	0020      	movs	r0, r4
 8008a0c:	f7ff fd5e 	bl	80084cc <SPI_EndRxTxTransaction>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d004      	beq.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a14:	2320      	movs	r3, #32
 8008a16:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008a18:	2001      	movs	r0, #1
 8008a1a:	e000      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
    errorcode = HAL_BUSY;
 8008a1c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008a1e:	235d      	movs	r3, #93	; 0x5d
 8008a20:	2201      	movs	r2, #1
 8008a22:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8008a24:	3b01      	subs	r3, #1
 8008a26:	2200      	movs	r2, #0
 8008a28:	54e2      	strb	r2, [r4, r3]
}
 8008a2a:	b003      	add	sp, #12
 8008a2c:	bcc0      	pop	{r6, r7}
 8008a2e:	46ba      	mov	sl, r7
 8008a30:	46b1      	mov	r9, r6
 8008a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorcode = HAL_ERROR;
 8008a34:	2001      	movs	r0, #1
 8008a36:	e7f2      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
 8008a38:	2001      	movs	r0, #1
 8008a3a:	e7f0      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
 8008a3c:	2001      	movs	r0, #1
 8008a3e:	e7ee      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
        errorcode = HAL_TIMEOUT;
 8008a40:	2003      	movs	r0, #3
 8008a42:	e7ec      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
        errorcode = HAL_TIMEOUT;
 8008a44:	2003      	movs	r0, #3
 8008a46:	e7ea      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x23e>
  __HAL_LOCK(hspi);
 8008a48:	2002      	movs	r0, #2
 8008a4a:	e7ee      	b.n	8008a2a <HAL_SPI_TransmitReceive+0x24a>
 8008a4c:	ffffefff 	.word	0xffffefff

08008a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a50:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a52:	223d      	movs	r2, #61	; 0x3d
 8008a54:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 8008a56:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8008a58:	2a01      	cmp	r2, #1
 8008a5a:	d115      	bne.n	8008a88 <HAL_TIM_Base_Start_IT+0x38>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a5c:	323c      	adds	r2, #60	; 0x3c
 8008a5e:	2102      	movs	r1, #2
 8008a60:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	68ca      	ldr	r2, [r1, #12]
 8008a66:	4302      	orrs	r2, r0
 8008a68:	60ca      	str	r2, [r1, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a10      	ldr	r2, [pc, #64]	; (8008ab0 <HAL_TIM_Base_Start_IT+0x60>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00b      	beq.n	8008a8a <HAL_TIM_Base_Start_IT+0x3a>
 8008a72:	4a10      	ldr	r2, [pc, #64]	; (8008ab4 <HAL_TIM_Base_Start_IT+0x64>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d008      	beq.n	8008a8a <HAL_TIM_Base_Start_IT+0x3a>
 8008a78:	4a0f      	ldr	r2, [pc, #60]	; (8008ab8 <HAL_TIM_Base_Start_IT+0x68>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d005      	beq.n	8008a8a <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	2101      	movs	r1, #1
 8008a82:	430a      	orrs	r2, r1
 8008a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a86:	2000      	movs	r0, #0
}
 8008a88:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	490b      	ldr	r1, [pc, #44]	; (8008abc <HAL_TIM_Base_Start_IT+0x6c>)
 8008a8e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a90:	2a06      	cmp	r2, #6
 8008a92:	d008      	beq.n	8008aa6 <HAL_TIM_Base_Start_IT+0x56>
 8008a94:	3907      	subs	r1, #7
 8008a96:	428a      	cmp	r2, r1
 8008a98:	d007      	beq.n	8008aaa <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e7f0      	b.n	8008a88 <HAL_TIM_Base_Start_IT+0x38>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e7ee      	b.n	8008a88 <HAL_TIM_Base_Start_IT+0x38>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e7ec      	b.n	8008a88 <HAL_TIM_Base_Start_IT+0x38>
 8008aae:	46c0      	nop			; (mov r8, r8)
 8008ab0:	40012c00 	.word	0x40012c00
 8008ab4:	40000400 	.word	0x40000400
 8008ab8:	40014000 	.word	0x40014000
 8008abc:	00010007 	.word	0x00010007

08008ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ac4:	4770      	bx	lr

08008ac6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIM_IRQHandler>:
{
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008acc:	6802      	ldr	r2, [r0, #0]
 8008ace:	6913      	ldr	r3, [r2, #16]
 8008ad0:	079b      	lsls	r3, r3, #30
 8008ad2:	d50f      	bpl.n	8008af4 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ad4:	68d3      	ldr	r3, [r2, #12]
 8008ad6:	079b      	lsls	r3, r3, #30
 8008ad8:	d50c      	bpl.n	8008af4 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ada:	2303      	movs	r3, #3
 8008adc:	425b      	negs	r3, r3
 8008ade:	6113      	str	r3, [r2, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ae4:	6803      	ldr	r3, [r0, #0]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	079b      	lsls	r3, r3, #30
 8008aea:	d06a      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 8008aec:	f7ff ffe9 	bl	8008ac2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008af0:	2300      	movs	r3, #0
 8008af2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008af4:	6822      	ldr	r2, [r4, #0]
 8008af6:	6913      	ldr	r3, [r2, #16]
 8008af8:	075b      	lsls	r3, r3, #29
 8008afa:	d512      	bpl.n	8008b22 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008afc:	68d3      	ldr	r3, [r2, #12]
 8008afe:	075b      	lsls	r3, r3, #29
 8008b00:	d50f      	bpl.n	8008b22 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b02:	2305      	movs	r3, #5
 8008b04:	425b      	negs	r3, r3
 8008b06:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b08:	3307      	adds	r3, #7
 8008b0a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	23c0      	movs	r3, #192	; 0xc0
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	421a      	tst	r2, r3
 8008b16:	d05a      	beq.n	8008bce <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b18:	0020      	movs	r0, r4
 8008b1a:	f7ff ffd2 	bl	8008ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	6913      	ldr	r3, [r2, #16]
 8008b26:	071b      	lsls	r3, r3, #28
 8008b28:	d510      	bpl.n	8008b4c <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b2a:	68d3      	ldr	r3, [r2, #12]
 8008b2c:	071b      	lsls	r3, r3, #28
 8008b2e:	d50d      	bpl.n	8008b4c <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b30:	2309      	movs	r3, #9
 8008b32:	425b      	negs	r3, r3
 8008b34:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b36:	330d      	adds	r3, #13
 8008b38:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	079b      	lsls	r3, r3, #30
 8008b40:	d04c      	beq.n	8008bdc <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b42:	0020      	movs	r0, r4
 8008b44:	f7ff ffbd 	bl	8008ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b4c:	6822      	ldr	r2, [r4, #0]
 8008b4e:	6913      	ldr	r3, [r2, #16]
 8008b50:	06db      	lsls	r3, r3, #27
 8008b52:	d512      	bpl.n	8008b7a <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b54:	68d3      	ldr	r3, [r2, #12]
 8008b56:	06db      	lsls	r3, r3, #27
 8008b58:	d50f      	bpl.n	8008b7a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b5a:	2311      	movs	r3, #17
 8008b5c:	425b      	negs	r3, r3
 8008b5e:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b60:	3319      	adds	r3, #25
 8008b62:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	69da      	ldr	r2, [r3, #28]
 8008b68:	23c0      	movs	r3, #192	; 0xc0
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	421a      	tst	r2, r3
 8008b6e:	d03c      	beq.n	8008bea <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b70:	0020      	movs	r0, r4
 8008b72:	f7ff ffa6 	bl	8008ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b76:	2300      	movs	r3, #0
 8008b78:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	6913      	ldr	r3, [r2, #16]
 8008b7e:	07db      	lsls	r3, r3, #31
 8008b80:	d502      	bpl.n	8008b88 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b82:	68d3      	ldr	r3, [r2, #12]
 8008b84:	07db      	lsls	r3, r3, #31
 8008b86:	d437      	bmi.n	8008bf8 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	6913      	ldr	r3, [r2, #16]
 8008b8c:	061b      	lsls	r3, r3, #24
 8008b8e:	d502      	bpl.n	8008b96 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b90:	68d3      	ldr	r3, [r2, #12]
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	d437      	bmi.n	8008c06 <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b96:	6822      	ldr	r2, [r4, #0]
 8008b98:	6913      	ldr	r3, [r2, #16]
 8008b9a:	05db      	lsls	r3, r3, #23
 8008b9c:	d502      	bpl.n	8008ba4 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b9e:	68d3      	ldr	r3, [r2, #12]
 8008ba0:	061b      	lsls	r3, r3, #24
 8008ba2:	d437      	bmi.n	8008c14 <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ba4:	6822      	ldr	r2, [r4, #0]
 8008ba6:	6913      	ldr	r3, [r2, #16]
 8008ba8:	065b      	lsls	r3, r3, #25
 8008baa:	d502      	bpl.n	8008bb2 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bac:	68d3      	ldr	r3, [r2, #12]
 8008bae:	065b      	lsls	r3, r3, #25
 8008bb0:	d436      	bmi.n	8008c20 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bb2:	6822      	ldr	r2, [r4, #0]
 8008bb4:	6913      	ldr	r3, [r2, #16]
 8008bb6:	069b      	lsls	r3, r3, #26
 8008bb8:	d502      	bpl.n	8008bc0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bba:	68d3      	ldr	r3, [r2, #12]
 8008bbc:	069b      	lsls	r3, r3, #26
 8008bbe:	d436      	bmi.n	8008c2e <HAL_TIM_IRQHandler+0x166>
}
 8008bc0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc2:	f7ff ff7d 	bl	8008ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc6:	0020      	movs	r0, r4
 8008bc8:	f7ff ff7c 	bl	8008ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008bcc:	e790      	b.n	8008af0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bce:	0020      	movs	r0, r4
 8008bd0:	f7ff ff76 	bl	8008ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd4:	0020      	movs	r0, r4
 8008bd6:	f7ff ff75 	bl	8008ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008bda:	e7a0      	b.n	8008b1e <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bdc:	0020      	movs	r0, r4
 8008bde:	f7ff ff6f 	bl	8008ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be2:	0020      	movs	r0, r4
 8008be4:	f7ff ff6e 	bl	8008ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008be8:	e7ae      	b.n	8008b48 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bea:	0020      	movs	r0, r4
 8008bec:	f7ff ff68 	bl	8008ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf0:	0020      	movs	r0, r4
 8008bf2:	f7ff ff67 	bl	8008ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008bf6:	e7be      	b.n	8008b76 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	425b      	negs	r3, r3
 8008bfc:	6113      	str	r3, [r2, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bfe:	0020      	movs	r0, r4
 8008c00:	f7fc f884 	bl	8004d0c <HAL_TIM_PeriodElapsedCallback>
 8008c04:	e7c0      	b.n	8008b88 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c06:	2381      	movs	r3, #129	; 0x81
 8008c08:	425b      	negs	r3, r3
 8008c0a:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008c0c:	0020      	movs	r0, r4
 8008c0e:	f000 f902 	bl	8008e16 <HAL_TIMEx_BreakCallback>
 8008c12:	e7c0      	b.n	8008b96 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c14:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <HAL_TIM_IRQHandler+0x174>)
 8008c16:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008c18:	0020      	movs	r0, r4
 8008c1a:	f000 f8fd 	bl	8008e18 <HAL_TIMEx_Break2Callback>
 8008c1e:	e7c1      	b.n	8008ba4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c20:	2341      	movs	r3, #65	; 0x41
 8008c22:	425b      	negs	r3, r3
 8008c24:	6113      	str	r3, [r2, #16]
      HAL_TIM_TriggerCallback(htim);
 8008c26:	0020      	movs	r0, r4
 8008c28:	f7ff ff4d 	bl	8008ac6 <HAL_TIM_TriggerCallback>
 8008c2c:	e7c1      	b.n	8008bb2 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c2e:	2321      	movs	r3, #33	; 0x21
 8008c30:	425b      	negs	r3, r3
 8008c32:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008c34:	0020      	movs	r0, r4
 8008c36:	f000 f8ed 	bl	8008e14 <HAL_TIMEx_CommutCallback>
}
 8008c3a:	e7c1      	b.n	8008bc0 <HAL_TIM_IRQHandler+0xf8>
 8008c3c:	fffffeff 	.word	0xfffffeff

08008c40 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c40:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c42:	4a37      	ldr	r2, [pc, #220]	; (8008d20 <TIM_Base_SetConfig+0xe0>)
 8008c44:	4290      	cmp	r0, r2
 8008c46:	d042      	beq.n	8008cce <TIM_Base_SetConfig+0x8e>
 8008c48:	4a36      	ldr	r2, [pc, #216]	; (8008d24 <TIM_Base_SetConfig+0xe4>)
 8008c4a:	4290      	cmp	r0, r2
 8008c4c:	d055      	beq.n	8008cfa <TIM_Base_SetConfig+0xba>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4e:	4a36      	ldr	r2, [pc, #216]	; (8008d28 <TIM_Base_SetConfig+0xe8>)
 8008c50:	4290      	cmp	r0, r2
 8008c52:	d056      	beq.n	8008d02 <TIM_Base_SetConfig+0xc2>
 8008c54:	4a35      	ldr	r2, [pc, #212]	; (8008d2c <TIM_Base_SetConfig+0xec>)
 8008c56:	4290      	cmp	r0, r2
 8008c58:	d01d      	beq.n	8008c96 <TIM_Base_SetConfig+0x56>
 8008c5a:	4a35      	ldr	r2, [pc, #212]	; (8008d30 <TIM_Base_SetConfig+0xf0>)
 8008c5c:	4290      	cmp	r0, r2
 8008c5e:	d00c      	beq.n	8008c7a <TIM_Base_SetConfig+0x3a>
 8008c60:	4a34      	ldr	r2, [pc, #208]	; (8008d34 <TIM_Base_SetConfig+0xf4>)
 8008c62:	4290      	cmp	r0, r2
 8008c64:	d025      	beq.n	8008cb2 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c66:	2280      	movs	r2, #128	; 0x80
 8008c68:	4393      	bics	r3, r2
 8008c6a:	694a      	ldr	r2, [r1, #20]
 8008c6c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008c6e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c70:	688b      	ldr	r3, [r1, #8]
 8008c72:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c74:	680b      	ldr	r3, [r1, #0]
 8008c76:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c78:	e03c      	b.n	8008cf4 <TIM_Base_SetConfig+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c7a:	4a2f      	ldr	r2, [pc, #188]	; (8008d38 <TIM_Base_SetConfig+0xf8>)
 8008c7c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c7e:	68ca      	ldr	r2, [r1, #12]
 8008c80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c82:	2280      	movs	r2, #128	; 0x80
 8008c84:	4393      	bics	r3, r2
 8008c86:	694a      	ldr	r2, [r1, #20]
 8008c88:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008c8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c8c:	688b      	ldr	r3, [r1, #8]
 8008c8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c90:	680b      	ldr	r3, [r1, #0]
 8008c92:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c94:	e02c      	b.n	8008cf0 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c96:	4a28      	ldr	r2, [pc, #160]	; (8008d38 <TIM_Base_SetConfig+0xf8>)
 8008c98:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c9a:	68ca      	ldr	r2, [r1, #12]
 8008c9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c9e:	2280      	movs	r2, #128	; 0x80
 8008ca0:	4393      	bics	r3, r2
 8008ca2:	694a      	ldr	r2, [r1, #20]
 8008ca4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008ca6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ca8:	688b      	ldr	r3, [r1, #8]
 8008caa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008cac:	680b      	ldr	r3, [r1, #0]
 8008cae:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cb0:	e01e      	b.n	8008cf0 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cb2:	4a21      	ldr	r2, [pc, #132]	; (8008d38 <TIM_Base_SetConfig+0xf8>)
 8008cb4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cb6:	68ca      	ldr	r2, [r1, #12]
 8008cb8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cba:	2280      	movs	r2, #128	; 0x80
 8008cbc:	4393      	bics	r3, r2
 8008cbe:	694a      	ldr	r2, [r1, #20]
 8008cc0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008cc2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cc4:	688b      	ldr	r3, [r1, #8]
 8008cc6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008cc8:	680b      	ldr	r3, [r1, #0]
 8008cca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ccc:	e010      	b.n	8008cf0 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cce:	2270      	movs	r2, #112	; 0x70
 8008cd0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8008cd2:	684a      	ldr	r2, [r1, #4]
 8008cd4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cd6:	4a18      	ldr	r2, [pc, #96]	; (8008d38 <TIM_Base_SetConfig+0xf8>)
 8008cd8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cda:	68ca      	ldr	r2, [r1, #12]
 8008cdc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cde:	2280      	movs	r2, #128	; 0x80
 8008ce0:	4393      	bics	r3, r2
 8008ce2:	694a      	ldr	r2, [r1, #20]
 8008ce4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008ce6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ce8:	688b      	ldr	r3, [r1, #8]
 8008cea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008cec:	680b      	ldr	r3, [r1, #0]
 8008cee:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf0:	690b      	ldr	r3, [r1, #16]
 8008cf2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	6143      	str	r3, [r0, #20]
}
 8008cf8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cfa:	2270      	movs	r2, #112	; 0x70
 8008cfc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8008cfe:	684a      	ldr	r2, [r1, #4]
 8008d00:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d02:	4a0d      	ldr	r2, [pc, #52]	; (8008d38 <TIM_Base_SetConfig+0xf8>)
 8008d04:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d06:	68ca      	ldr	r2, [r1, #12]
 8008d08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d0a:	2280      	movs	r2, #128	; 0x80
 8008d0c:	4393      	bics	r3, r2
 8008d0e:	694a      	ldr	r2, [r1, #20]
 8008d10:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008d12:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d14:	688b      	ldr	r3, [r1, #8]
 8008d16:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008d18:	680b      	ldr	r3, [r1, #0]
 8008d1a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d1c:	e7ea      	b.n	8008cf4 <TIM_Base_SetConfig+0xb4>
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	40012c00 	.word	0x40012c00
 8008d24:	40000400 	.word	0x40000400
 8008d28:	40002000 	.word	0x40002000
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40014400 	.word	0x40014400
 8008d34:	40014800 	.word	0x40014800
 8008d38:	fffffcff 	.word	0xfffffcff

08008d3c <HAL_TIM_Base_Init>:
{
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8008d40:	d02a      	beq.n	8008d98 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008d42:	233d      	movs	r3, #61	; 0x3d
 8008d44:	5cc3      	ldrb	r3, [r0, r3]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d020      	beq.n	8008d8c <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8008d4a:	253d      	movs	r5, #61	; 0x3d
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d50:	0021      	movs	r1, r4
 8008d52:	c901      	ldmia	r1!, {r0}
 8008d54:	f7ff ff74 	bl	8008c40 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	2248      	movs	r2, #72	; 0x48
 8008d5c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d5e:	3a0a      	subs	r2, #10
 8008d60:	54a3      	strb	r3, [r4, r2]
 8008d62:	3201      	adds	r2, #1
 8008d64:	54a3      	strb	r3, [r4, r2]
 8008d66:	3201      	adds	r2, #1
 8008d68:	54a3      	strb	r3, [r4, r2]
 8008d6a:	3201      	adds	r2, #1
 8008d6c:	54a3      	strb	r3, [r4, r2]
 8008d6e:	3201      	adds	r2, #1
 8008d70:	54a3      	strb	r3, [r4, r2]
 8008d72:	3201      	adds	r2, #1
 8008d74:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d76:	3201      	adds	r2, #1
 8008d78:	54a3      	strb	r3, [r4, r2]
 8008d7a:	3201      	adds	r2, #1
 8008d7c:	54a3      	strb	r3, [r4, r2]
 8008d7e:	3201      	adds	r2, #1
 8008d80:	54a3      	strb	r3, [r4, r2]
 8008d82:	3201      	adds	r2, #1
 8008d84:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8008d86:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8008d88:	2000      	movs	r0, #0
}
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8008d8c:	333c      	adds	r3, #60	; 0x3c
 8008d8e:	2200      	movs	r2, #0
 8008d90:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8008d92:	f7fd f871 	bl	8005e78 <HAL_TIM_Base_MspInit>
 8008d96:	e7d8      	b.n	8008d4a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8008d98:	2001      	movs	r0, #1
 8008d9a:	e7f6      	b.n	8008d8a <HAL_TIM_Base_Init+0x4e>

08008d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d9c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d9e:	233c      	movs	r3, #60	; 0x3c
 8008da0:	5cc3      	ldrb	r3, [r0, r3]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d02c      	beq.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008da6:	233c      	movs	r3, #60	; 0x3c
 8008da8:	2201      	movs	r2, #1
 8008daa:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	3301      	adds	r3, #1
 8008dae:	3201      	adds	r2, #1
 8008db0:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008db2:	6802      	ldr	r2, [r0, #0]
 8008db4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008db6:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008db8:	4d12      	ldr	r5, [pc, #72]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8008dba:	42aa      	cmp	r2, r5
 8008dbc:	d01b      	beq.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dbe:	2570      	movs	r5, #112	; 0x70
 8008dc0:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dc2:	680d      	ldr	r5, [r1, #0]
 8008dc4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dc6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dc8:	6803      	ldr	r3, [r0, #0]
 8008dca:	4a0e      	ldr	r2, [pc, #56]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d005      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8008dd0:	4a0d      	ldr	r2, [pc, #52]	; (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d002      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8008dd6:	4a0d      	ldr	r2, [pc, #52]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d104      	bne.n	8008de6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ddc:	2280      	movs	r2, #128	; 0x80
 8008dde:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008de0:	688a      	ldr	r2, [r1, #8]
 8008de2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008de4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008de6:	233d      	movs	r3, #61	; 0x3d
 8008de8:	2201      	movs	r2, #1
 8008dea:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8008dec:	3b01      	subs	r3, #1
 8008dee:	2200      	movs	r2, #0
 8008df0:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8008df2:	2000      	movs	r0, #0
}
 8008df4:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008df6:	4d06      	ldr	r5, [pc, #24]	; (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8008df8:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dfa:	684d      	ldr	r5, [r1, #4]
 8008dfc:	432b      	orrs	r3, r5
 8008dfe:	e7de      	b.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8008e00:	2002      	movs	r0, #2
 8008e02:	e7f7      	b.n	8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8008e04:	40012c00 	.word	0x40012c00
 8008e08:	40000400 	.word	0x40000400
 8008e0c:	40014000 	.word	0x40014000
 8008e10:	ff0fffff 	.word	0xff0fffff

08008e14 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e14:	4770      	bx	lr

08008e16 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e18:	4770      	bx	lr
	...

08008e1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e1c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e1e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e22:	2201      	movs	r2, #1
 8008e24:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e28:	6801      	ldr	r1, [r0, #0]
 8008e2a:	680b      	ldr	r3, [r1, #0]
 8008e2c:	25c0      	movs	r5, #192	; 0xc0
 8008e2e:	43ab      	bics	r3, r5
 8008e30:	600b      	str	r3, [r1, #0]
 8008e32:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e36:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e3a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e3e:	6802      	ldr	r2, [r0, #0]
 8008e40:	6893      	ldr	r3, [r2, #8]
 8008e42:	4c04      	ldr	r4, [pc, #16]	; (8008e54 <UART_EndTxTransfer+0x38>)
 8008e44:	4023      	ands	r3, r4
 8008e46:	6093      	str	r3, [r2, #8]
 8008e48:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e4c:	2388      	movs	r3, #136	; 0x88
 8008e4e:	2220      	movs	r2, #32
 8008e50:	50c2      	str	r2, [r0, r3]
}
 8008e52:	bd30      	pop	{r4, r5, pc}
 8008e54:	ff7fffff 	.word	0xff7fffff

08008e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e58:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e5a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e64:	6801      	ldr	r1, [r0, #0]
 8008e66:	680b      	ldr	r3, [r1, #0]
 8008e68:	4d12      	ldr	r5, [pc, #72]	; (8008eb4 <UART_EndRxTransfer+0x5c>)
 8008e6a:	402b      	ands	r3, r5
 8008e6c:	600b      	str	r3, [r1, #0]
 8008e6e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e72:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e76:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e7a:	6802      	ldr	r2, [r0, #0]
 8008e7c:	6893      	ldr	r3, [r2, #8]
 8008e7e:	4c0e      	ldr	r4, [pc, #56]	; (8008eb8 <UART_EndRxTransfer+0x60>)
 8008e80:	4023      	ands	r3, r4
 8008e82:	6093      	str	r3, [r2, #8]
 8008e84:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e88:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d006      	beq.n	8008e9c <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e8e:	238c      	movs	r3, #140	; 0x8c
 8008e90:	2220      	movs	r2, #32
 8008e92:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e94:	2300      	movs	r3, #0
 8008e96:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e98:	6743      	str	r3, [r0, #116]	; 0x74
}
 8008e9a:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e9c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea4:	6802      	ldr	r2, [r0, #0]
 8008ea6:	6813      	ldr	r3, [r2, #0]
 8008ea8:	2410      	movs	r4, #16
 8008eaa:	43a3      	bics	r3, r4
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	f381 8810 	msr	PRIMASK, r1
}
 8008eb2:	e7ec      	b.n	8008e8e <UART_EndRxTransfer+0x36>
 8008eb4:	fffffedf 	.word	0xfffffedf
 8008eb8:	effffffe 	.word	0xeffffffe

08008ebc <HAL_UART_RxHalfCpltCallback>:
}
 8008ebc:	4770      	bx	lr

08008ebe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ebe:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ec0:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ec2:	2388      	movs	r3, #136	; 0x88
 8008ec4:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	061b      	lsls	r3, r3, #24
 8008ed0:	d501      	bpl.n	8008ed6 <UART_DMAError+0x18>
 8008ed2:	2a21      	cmp	r2, #33	; 0x21
 8008ed4:	d00e      	beq.n	8008ef4 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	065b      	lsls	r3, r3, #25
 8008edc:	d501      	bpl.n	8008ee2 <UART_DMAError+0x24>
 8008ede:	2d22      	cmp	r5, #34	; 0x22
 8008ee0:	d00f      	beq.n	8008f02 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ee2:	2290      	movs	r2, #144	; 0x90
 8008ee4:	58a3      	ldr	r3, [r4, r2]
 8008ee6:	2110      	movs	r1, #16
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eec:	0020      	movs	r0, r4
 8008eee:	f7fb fec9 	bl	8004c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8008ef4:	2356      	movs	r3, #86	; 0x56
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8008efa:	0020      	movs	r0, r4
 8008efc:	f7ff ff8e 	bl	8008e1c <UART_EndTxTransfer>
 8008f00:	e7e9      	b.n	8008ed6 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8008f02:	235e      	movs	r3, #94	; 0x5e
 8008f04:	2200      	movs	r2, #0
 8008f06:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8008f08:	0020      	movs	r0, r4
 8008f0a:	f7ff ffa5 	bl	8008e58 <UART_EndRxTransfer>
 8008f0e:	e7e8      	b.n	8008ee2 <UART_DMAError+0x24>

08008f10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f10:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f12:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	225e      	movs	r2, #94	; 0x5e
 8008f18:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8008f1a:	3a08      	subs	r2, #8
 8008f1c:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f1e:	f7fb feb1 	bl	8004c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f22:	bd10      	pop	{r4, pc}

08008f24 <HAL_UARTEx_RxEventCallback>:
}
 8008f24:	4770      	bx	lr
	...

08008f28 <HAL_UART_IRQHandler>:
{
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f2c:	6802      	ldr	r2, [r0, #0]
 8008f2e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f30:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f32:	6891      	ldr	r1, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f34:	4dbb      	ldr	r5, [pc, #748]	; (8009224 <HAL_UART_IRQHandler+0x2fc>)
  if (errorflags == 0U)
 8008f36:	422b      	tst	r3, r5
 8008f38:	d10e      	bne.n	8008f58 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f3a:	069d      	lsls	r5, r3, #26
 8008f3c:	d512      	bpl.n	8008f64 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f3e:	2520      	movs	r5, #32
 8008f40:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f42:	2680      	movs	r6, #128	; 0x80
 8008f44:	0576      	lsls	r6, r6, #21
 8008f46:	400e      	ands	r6, r1
 8008f48:	4335      	orrs	r5, r6
 8008f4a:	d00b      	beq.n	8008f64 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 8008f4c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d02a      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x80>
        huart->RxISR(huart);
 8008f52:	0020      	movs	r0, r4
 8008f54:	4798      	blx	r3
 8008f56:	e027      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f58:	4eb3      	ldr	r6, [pc, #716]	; (8009228 <HAL_UART_IRQHandler+0x300>)
 8008f5a:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f5c:	4db3      	ldr	r5, [pc, #716]	; (800922c <HAL_UART_IRQHandler+0x304>)
 8008f5e:	4005      	ands	r5, r0
 8008f60:	4335      	orrs	r5, r6
 8008f62:	d122      	bne.n	8008faa <HAL_UART_IRQHandler+0x82>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f64:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8008f66:	2d01      	cmp	r5, #1
 8008f68:	d100      	bne.n	8008f6c <HAL_UART_IRQHandler+0x44>
 8008f6a:	e0ad      	b.n	80090c8 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f6c:	02dd      	lsls	r5, r3, #11
 8008f6e:	d502      	bpl.n	8008f76 <HAL_UART_IRQHandler+0x4e>
 8008f70:	024d      	lsls	r5, r1, #9
 8008f72:	d500      	bpl.n	8008f76 <HAL_UART_IRQHandler+0x4e>
 8008f74:	e147      	b.n	8009206 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008f76:	061a      	lsls	r2, r3, #24
 8008f78:	d507      	bpl.n	8008f8a <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008f7a:	2280      	movs	r2, #128	; 0x80
 8008f7c:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008f7e:	2580      	movs	r5, #128	; 0x80
 8008f80:	042d      	lsls	r5, r5, #16
 8008f82:	4029      	ands	r1, r5
 8008f84:	430a      	orrs	r2, r1
 8008f86:	d000      	beq.n	8008f8a <HAL_UART_IRQHandler+0x62>
 8008f88:	e144      	b.n	8009214 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f8a:	065a      	lsls	r2, r3, #25
 8008f8c:	d502      	bpl.n	8008f94 <HAL_UART_IRQHandler+0x6c>
 8008f8e:	0642      	lsls	r2, r0, #25
 8008f90:	d500      	bpl.n	8008f94 <HAL_UART_IRQHandler+0x6c>
 8008f92:	e155      	b.n	8009240 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008f94:	021a      	lsls	r2, r3, #8
 8008f96:	d502      	bpl.n	8008f9e <HAL_UART_IRQHandler+0x76>
 8008f98:	0042      	lsls	r2, r0, #1
 8008f9a:	d500      	bpl.n	8008f9e <HAL_UART_IRQHandler+0x76>
 8008f9c:	e165      	b.n	800926a <HAL_UART_IRQHandler+0x342>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008f9e:	01db      	lsls	r3, r3, #7
 8008fa0:	d502      	bpl.n	8008fa8 <HAL_UART_IRQHandler+0x80>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	da00      	bge.n	8008fa8 <HAL_UART_IRQHandler+0x80>
 8008fa6:	e164      	b.n	8009272 <HAL_UART_IRQHandler+0x34a>
}
 8008fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008faa:	07dd      	lsls	r5, r3, #31
 8008fac:	d507      	bpl.n	8008fbe <HAL_UART_IRQHandler+0x96>
 8008fae:	05c5      	lsls	r5, r0, #23
 8008fb0:	d505      	bpl.n	8008fbe <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fb2:	2701      	movs	r7, #1
 8008fb4:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fb6:	2590      	movs	r5, #144	; 0x90
 8008fb8:	5962      	ldr	r2, [r4, r5]
 8008fba:	433a      	orrs	r2, r7
 8008fbc:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fbe:	079a      	lsls	r2, r3, #30
 8008fc0:	d50c      	bpl.n	8008fdc <HAL_UART_IRQHandler+0xb4>
 8008fc2:	07ca      	lsls	r2, r1, #31
 8008fc4:	d516      	bpl.n	8008ff4 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	2502      	movs	r5, #2
 8008fca:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fcc:	2790      	movs	r7, #144	; 0x90
 8008fce:	59e2      	ldr	r2, [r4, r7]
 8008fd0:	3502      	adds	r5, #2
 8008fd2:	432a      	orrs	r2, r5
 8008fd4:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fd6:	421d      	tst	r5, r3
 8008fd8:	d104      	bne.n	8008fe4 <HAL_UART_IRQHandler+0xbc>
 8008fda:	e00b      	b.n	8008ff4 <HAL_UART_IRQHandler+0xcc>
 8008fdc:	075a      	lsls	r2, r3, #29
 8008fde:	d509      	bpl.n	8008ff4 <HAL_UART_IRQHandler+0xcc>
 8008fe0:	07ca      	lsls	r2, r1, #31
 8008fe2:	d507      	bpl.n	8008ff4 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fe4:	6822      	ldr	r2, [r4, #0]
 8008fe6:	2504      	movs	r5, #4
 8008fe8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fea:	358c      	adds	r5, #140	; 0x8c
 8008fec:	5962      	ldr	r2, [r4, r5]
 8008fee:	2702      	movs	r7, #2
 8008ff0:	433a      	orrs	r2, r7
 8008ff2:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ff4:	071a      	lsls	r2, r3, #28
 8008ff6:	d50a      	bpl.n	800900e <HAL_UART_IRQHandler+0xe6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	4002      	ands	r2, r0
 8008ffc:	4332      	orrs	r2, r6
 8008ffe:	d006      	beq.n	800900e <HAL_UART_IRQHandler+0xe6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009000:	6822      	ldr	r2, [r4, #0]
 8009002:	2608      	movs	r6, #8
 8009004:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009006:	2590      	movs	r5, #144	; 0x90
 8009008:	5962      	ldr	r2, [r4, r5]
 800900a:	4332      	orrs	r2, r6
 800900c:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800900e:	051a      	lsls	r2, r3, #20
 8009010:	d50a      	bpl.n	8009028 <HAL_UART_IRQHandler+0x100>
 8009012:	0142      	lsls	r2, r0, #5
 8009014:	d508      	bpl.n	8009028 <HAL_UART_IRQHandler+0x100>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	2580      	movs	r5, #128	; 0x80
 800901a:	012d      	lsls	r5, r5, #4
 800901c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800901e:	2590      	movs	r5, #144	; 0x90
 8009020:	5962      	ldr	r2, [r4, r5]
 8009022:	2620      	movs	r6, #32
 8009024:	4332      	orrs	r2, r6
 8009026:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009028:	2290      	movs	r2, #144	; 0x90
 800902a:	58a2      	ldr	r2, [r4, r2]
 800902c:	2a00      	cmp	r2, #0
 800902e:	d0bb      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x80>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009030:	069b      	lsls	r3, r3, #26
 8009032:	d50b      	bpl.n	800904c <HAL_UART_IRQHandler+0x124>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009034:	2320      	movs	r3, #32
 8009036:	4003      	ands	r3, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009038:	2280      	movs	r2, #128	; 0x80
 800903a:	0552      	lsls	r2, r2, #21
 800903c:	400a      	ands	r2, r1
 800903e:	4313      	orrs	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_UART_IRQHandler+0x124>
        if (huart->RxISR != NULL)
 8009042:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <HAL_UART_IRQHandler+0x124>
          huart->RxISR(huart);
 8009048:	0020      	movs	r0, r4
 800904a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800904c:	2390      	movs	r3, #144	; 0x90
 800904e:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	2340      	movs	r3, #64	; 0x40
 8009056:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009058:	2228      	movs	r2, #40	; 0x28
 800905a:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800905c:	4313      	orrs	r3, r2
 800905e:	d02c      	beq.n	80090ba <HAL_UART_IRQHandler+0x192>
        UART_EndRxTransfer(huart);
 8009060:	0020      	movs	r0, r4
 8009062:	f7ff fef9 	bl	8008e58 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	065b      	lsls	r3, r3, #25
 800906c:	d521      	bpl.n	80090b2 <HAL_UART_IRQHandler+0x18a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009072:	2301      	movs	r3, #1
 8009074:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009078:	6822      	ldr	r2, [r4, #0]
 800907a:	6893      	ldr	r3, [r2, #8]
 800907c:	2040      	movs	r0, #64	; 0x40
 800907e:	4383      	bics	r3, r0
 8009080:	6093      	str	r3, [r2, #8]
 8009082:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8009086:	2380      	movs	r3, #128	; 0x80
 8009088:	58e3      	ldr	r3, [r4, r3]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00d      	beq.n	80090aa <HAL_UART_IRQHandler+0x182>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800908e:	4a68      	ldr	r2, [pc, #416]	; (8009230 <HAL_UART_IRQHandler+0x308>)
 8009090:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009092:	2380      	movs	r3, #128	; 0x80
 8009094:	58e0      	ldr	r0, [r4, r3]
 8009096:	f7fd fe59 	bl	8006d4c <HAL_DMA_Abort_IT>
 800909a:	2800      	cmp	r0, #0
 800909c:	d100      	bne.n	80090a0 <HAL_UART_IRQHandler+0x178>
 800909e:	e783      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090a0:	2380      	movs	r3, #128	; 0x80
 80090a2:	58e0      	ldr	r0, [r4, r3]
 80090a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80090a6:	4798      	blx	r3
 80090a8:	e77e      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
            HAL_UART_ErrorCallback(huart);
 80090aa:	0020      	movs	r0, r4
 80090ac:	f7fb fdea 	bl	8004c84 <HAL_UART_ErrorCallback>
 80090b0:	e77a      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
          HAL_UART_ErrorCallback(huart);
 80090b2:	0020      	movs	r0, r4
 80090b4:	f7fb fde6 	bl	8004c84 <HAL_UART_ErrorCallback>
 80090b8:	e776      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
        HAL_UART_ErrorCallback(huart);
 80090ba:	0020      	movs	r0, r4
 80090bc:	f7fb fde2 	bl	8004c84 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c0:	2390      	movs	r3, #144	; 0x90
 80090c2:	2200      	movs	r2, #0
 80090c4:	50e2      	str	r2, [r4, r3]
 80090c6:	e76f      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090c8:	06dd      	lsls	r5, r3, #27
 80090ca:	d400      	bmi.n	80090ce <HAL_UART_IRQHandler+0x1a6>
 80090cc:	e74e      	b.n	8008f6c <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090ce:	06c5      	lsls	r5, r0, #27
 80090d0:	d400      	bmi.n	80090d4 <HAL_UART_IRQHandler+0x1ac>
 80090d2:	e74b      	b.n	8008f6c <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090d4:	2310      	movs	r3, #16
 80090d6:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	065b      	lsls	r3, r3, #25
 80090de:	d555      	bpl.n	800918c <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090e0:	2380      	movs	r3, #128	; 0x80
 80090e2:	58e2      	ldr	r2, [r4, r3]
 80090e4:	6813      	ldr	r3, [r2, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d100      	bne.n	80090f0 <HAL_UART_IRQHandler+0x1c8>
 80090ee:	e75b      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090f0:	215c      	movs	r1, #92	; 0x5c
 80090f2:	5a61      	ldrh	r1, [r4, r1]
 80090f4:	4299      	cmp	r1, r3
 80090f6:	d800      	bhi.n	80090fa <HAL_UART_IRQHandler+0x1d2>
 80090f8:	e756      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
        huart->RxXferCount = nb_remaining_rx_data;
 80090fa:	215e      	movs	r1, #94	; 0x5e
 80090fc:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80090fe:	6813      	ldr	r3, [r2, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	069b      	lsls	r3, r3, #26
 8009104:	d50b      	bpl.n	800911e <HAL_UART_IRQHandler+0x1f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009106:	2302      	movs	r3, #2
 8009108:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800910a:	335c      	adds	r3, #92	; 0x5c
 800910c:	5ae3      	ldrh	r3, [r4, r3]
 800910e:	225c      	movs	r2, #92	; 0x5c
 8009110:	5aa1      	ldrh	r1, [r4, r2]
 8009112:	1ac9      	subs	r1, r1, r3
 8009114:	b289      	uxth	r1, r1
 8009116:	0020      	movs	r0, r4
 8009118:	f7ff ff04 	bl	8008f24 <HAL_UARTEx_RxEventCallback>
 800911c:	e744      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800911e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009122:	2301      	movs	r3, #1
 8009124:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009128:	6821      	ldr	r1, [r4, #0]
 800912a:	680a      	ldr	r2, [r1, #0]
 800912c:	4d41      	ldr	r5, [pc, #260]	; (8009234 <HAL_UART_IRQHandler+0x30c>)
 800912e:	402a      	ands	r2, r5
 8009130:	600a      	str	r2, [r1, #0]
 8009132:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009136:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800913a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913e:	6821      	ldr	r1, [r4, #0]
 8009140:	688a      	ldr	r2, [r1, #8]
 8009142:	439a      	bics	r2, r3
 8009144:	608a      	str	r2, [r1, #8]
 8009146:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800914a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009152:	6821      	ldr	r1, [r4, #0]
 8009154:	688a      	ldr	r2, [r1, #8]
 8009156:	3542      	adds	r5, #66	; 0x42
 8009158:	35ff      	adds	r5, #255	; 0xff
 800915a:	43aa      	bics	r2, r5
 800915c:	608a      	str	r2, [r1, #8]
 800915e:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8009162:	228c      	movs	r2, #140	; 0x8c
 8009164:	2120      	movs	r1, #32
 8009166:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009168:	2200      	movs	r2, #0
 800916a:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800916c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009170:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009174:	6822      	ldr	r2, [r4, #0]
 8009176:	6813      	ldr	r3, [r2, #0]
 8009178:	2010      	movs	r0, #16
 800917a:	4383      	bics	r3, r0
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009182:	2380      	movs	r3, #128	; 0x80
 8009184:	58e0      	ldr	r0, [r4, r3]
 8009186:	f7fd fda1 	bl	8006ccc <HAL_DMA_Abort>
 800918a:	e7bc      	b.n	8009106 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800918c:	215e      	movs	r1, #94	; 0x5e
 800918e:	5a62      	ldrh	r2, [r4, r1]
 8009190:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8009192:	5a63      	ldrh	r3, [r4, r1]
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d100      	bne.n	800919c <HAL_UART_IRQHandler+0x274>
 800919a:	e705      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800919c:	235c      	movs	r3, #92	; 0x5c
 800919e:	5ae1      	ldrh	r1, [r4, r3]
 80091a0:	1a89      	subs	r1, r1, r2
 80091a2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80091a4:	2900      	cmp	r1, #0
 80091a6:	d100      	bne.n	80091aa <HAL_UART_IRQHandler+0x282>
 80091a8:	e6fe      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091aa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ae:	3b5b      	subs	r3, #91	; 0x5b
 80091b0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	6802      	ldr	r2, [r0, #0]
 80091b8:	4e1f      	ldr	r6, [pc, #124]	; (8009238 <HAL_UART_IRQHandler+0x310>)
 80091ba:	4032      	ands	r2, r6
 80091bc:	6002      	str	r2, [r0, #0]
 80091be:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ca:	6820      	ldr	r0, [r4, #0]
 80091cc:	6882      	ldr	r2, [r0, #8]
 80091ce:	4e1b      	ldr	r6, [pc, #108]	; (800923c <HAL_UART_IRQHandler+0x314>)
 80091d0:	4032      	ands	r2, r6
 80091d2:	6082      	str	r2, [r0, #8]
 80091d4:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 80091d8:	228c      	movs	r2, #140	; 0x8c
 80091da:	2020      	movs	r0, #32
 80091dc:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091de:	2200      	movs	r2, #0
 80091e0:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80091e2:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091e4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e8:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	6822      	ldr	r2, [r4, #0]
 80091ee:	6813      	ldr	r3, [r2, #0]
 80091f0:	2510      	movs	r5, #16
 80091f2:	43ab      	bics	r3, r5
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091fa:	2302      	movs	r3, #2
 80091fc:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091fe:	0020      	movs	r0, r4
 8009200:	f7ff fe90 	bl	8008f24 <HAL_UARTEx_RxEventCallback>
 8009204:	e6d0      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009206:	2380      	movs	r3, #128	; 0x80
 8009208:	035b      	lsls	r3, r3, #13
 800920a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800920c:	0020      	movs	r0, r4
 800920e:	f000 fcd1 	bl	8009bb4 <HAL_UARTEx_WakeupCallback>
    return;
 8009212:	e6c9      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
    if (huart->TxISR != NULL)
 8009214:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009216:	2b00      	cmp	r3, #0
 8009218:	d100      	bne.n	800921c <HAL_UART_IRQHandler+0x2f4>
 800921a:	e6c5      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
      huart->TxISR(huart);
 800921c:	0020      	movs	r0, r4
 800921e:	4798      	blx	r3
 8009220:	e6c2      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
 8009222:	46c0      	nop			; (mov r8, r8)
 8009224:	0000080f 	.word	0x0000080f
 8009228:	10000001 	.word	0x10000001
 800922c:	04000120 	.word	0x04000120
 8009230:	08008f11 	.word	0x08008f11
 8009234:	fffffeff 	.word	0xfffffeff
 8009238:	fffffedf 	.word	0xfffffedf
 800923c:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009240:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009244:	2301      	movs	r3, #1
 8009246:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	6813      	ldr	r3, [r2, #0]
 800924e:	2040      	movs	r0, #64	; 0x40
 8009250:	4383      	bics	r3, r0
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009258:	2388      	movs	r3, #136	; 0x88
 800925a:	2220      	movs	r2, #32
 800925c:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	67a3      	str	r3, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009262:	0020      	movs	r0, r4
 8009264:	f7fb fd0c 	bl	8004c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009268:	e69e      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800926a:	0020      	movs	r0, r4
 800926c:	f000 fca4 	bl	8009bb8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8009270:	e69a      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009272:	0020      	movs	r0, r4
 8009274:	f000 fc9f 	bl	8009bb6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8009278:	e696      	b.n	8008fa8 <HAL_UART_IRQHandler+0x80>
 800927a:	46c0      	nop			; (mov r8, r8)

0800927c <UART_DMARxHalfCplt>:
{
 800927c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800927e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009280:	2301      	movs	r3, #1
 8009282:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009284:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009286:	2b01      	cmp	r3, #1
 8009288:	d002      	beq.n	8009290 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800928a:	f7ff fe17 	bl	8008ebc <HAL_UART_RxHalfCpltCallback>
}
 800928e:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009290:	335b      	adds	r3, #91	; 0x5b
 8009292:	5ac1      	ldrh	r1, [r0, r3]
 8009294:	0849      	lsrs	r1, r1, #1
 8009296:	f7ff fe45 	bl	8008f24 <HAL_UARTEx_RxEventCallback>
 800929a:	e7f8      	b.n	800928e <UART_DMARxHalfCplt+0x12>

0800929c <UART_DMAReceiveCplt>:
{
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	069b      	lsls	r3, r3, #26
 80092a8:	d429      	bmi.n	80092fe <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 80092aa:	235e      	movs	r3, #94	; 0x5e
 80092ac:	2200      	movs	r2, #0
 80092ae:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b4:	3b5d      	subs	r3, #93	; 0x5d
 80092b6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ba:	6801      	ldr	r1, [r0, #0]
 80092bc:	680a      	ldr	r2, [r1, #0]
 80092be:	4d1c      	ldr	r5, [pc, #112]	; (8009330 <UART_DMAReceiveCplt+0x94>)
 80092c0:	402a      	ands	r2, r5
 80092c2:	600a      	str	r2, [r1, #0]
 80092c4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092cc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d0:	6801      	ldr	r1, [r0, #0]
 80092d2:	688a      	ldr	r2, [r1, #8]
 80092d4:	439a      	bics	r2, r3
 80092d6:	608a      	str	r2, [r1, #8]
 80092d8:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092e4:	6802      	ldr	r2, [r0, #0]
 80092e6:	6893      	ldr	r3, [r2, #8]
 80092e8:	2440      	movs	r4, #64	; 0x40
 80092ea:	43a3      	bics	r3, r4
 80092ec:	6093      	str	r3, [r2, #8]
 80092ee:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 80092f2:	238c      	movs	r3, #140	; 0x8c
 80092f4:	2220      	movs	r2, #32
 80092f6:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d007      	beq.n	800930e <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092fe:	2300      	movs	r3, #0
 8009300:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009302:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009304:	2b01      	cmp	r3, #1
 8009306:	d00e      	beq.n	8009326 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8009308:	f7fc fc5a 	bl	8005bc0 <HAL_UART_RxCpltCallback>
}
 800930c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800930e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009312:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009316:	6802      	ldr	r2, [r0, #0]
 8009318:	6813      	ldr	r3, [r2, #0]
 800931a:	3c30      	subs	r4, #48	; 0x30
 800931c:	43a3      	bics	r3, r4
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	f381 8810 	msr	PRIMASK, r1
}
 8009324:	e7eb      	b.n	80092fe <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009326:	335b      	adds	r3, #91	; 0x5b
 8009328:	5ac1      	ldrh	r1, [r0, r3]
 800932a:	f7ff fdfb 	bl	8008f24 <HAL_UARTEx_RxEventCallback>
 800932e:	e7ed      	b.n	800930c <UART_DMAReceiveCplt+0x70>
 8009330:	fffffeff 	.word	0xfffffeff

08009334 <UART_SetConfig>:
{
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009338:	6801      	ldr	r1, [r0, #0]
 800933a:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800933c:	6883      	ldr	r3, [r0, #8]
 800933e:	6900      	ldr	r0, [r0, #16]
 8009340:	4303      	orrs	r3, r0
 8009342:	6960      	ldr	r0, [r4, #20]
 8009344:	4303      	orrs	r3, r0
 8009346:	69e0      	ldr	r0, [r4, #28]
 8009348:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800934a:	4873      	ldr	r0, [pc, #460]	; (8009518 <UART_SetConfig+0x1e4>)
 800934c:	4002      	ands	r2, r0
 800934e:	4313      	orrs	r3, r2
 8009350:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	6853      	ldr	r3, [r2, #4]
 8009356:	4971      	ldr	r1, [pc, #452]	; (800951c <UART_SetConfig+0x1e8>)
 8009358:	400b      	ands	r3, r1
 800935a:	68e1      	ldr	r1, [r4, #12]
 800935c:	430b      	orrs	r3, r1
 800935e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009360:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009362:	6821      	ldr	r1, [r4, #0]
 8009364:	688a      	ldr	r2, [r1, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8009366:	6a20      	ldr	r0, [r4, #32]
 8009368:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800936a:	486d      	ldr	r0, [pc, #436]	; (8009520 <UART_SetConfig+0x1ec>)
 800936c:	4002      	ands	r2, r0
 800936e:	4313      	orrs	r3, r2
 8009370:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009376:	210f      	movs	r1, #15
 8009378:	438b      	bics	r3, r1
 800937a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800937c:	430b      	orrs	r3, r1
 800937e:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	4a68      	ldr	r2, [pc, #416]	; (8009524 <UART_SetConfig+0x1f0>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d01e      	beq.n	80093c6 <UART_SetConfig+0x92>
 8009388:	4a67      	ldr	r2, [pc, #412]	; (8009528 <UART_SetConfig+0x1f4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d030      	beq.n	80093f0 <UART_SetConfig+0xbc>
 800938e:	4a67      	ldr	r2, [pc, #412]	; (800952c <UART_SetConfig+0x1f8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d100      	bne.n	8009396 <UART_SetConfig+0x62>
 8009394:	e08c      	b.n	80094b0 <UART_SetConfig+0x17c>
 8009396:	4a66      	ldr	r2, [pc, #408]	; (8009530 <UART_SetConfig+0x1fc>)
 8009398:	4694      	mov	ip, r2
 800939a:	4463      	add	r3, ip
 800939c:	1e5a      	subs	r2, r3, #1
 800939e:	4193      	sbcs	r3, r2
 80093a0:	011b      	lsls	r3, r3, #4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093a2:	2280      	movs	r2, #128	; 0x80
 80093a4:	0212      	lsls	r2, r2, #8
 80093a6:	69e1      	ldr	r1, [r4, #28]
 80093a8:	4291      	cmp	r1, r2
 80093aa:	d100      	bne.n	80093ae <UART_SetConfig+0x7a>
 80093ac:	e0ab      	b.n	8009506 <UART_SetConfig+0x1d2>
    switch (clocksource)
 80093ae:	2001      	movs	r0, #1
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d944      	bls.n	800943e <UART_SetConfig+0x10a>
  huart->NbTxDataToProcess = 1;
 80093b4:	2301      	movs	r3, #1
 80093b6:	226a      	movs	r2, #106	; 0x6a
 80093b8:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 80093ba:	3a02      	subs	r2, #2
 80093bc:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80093c2:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093c6:	4b5b      	ldr	r3, [pc, #364]	; (8009534 <UART_SetConfig+0x200>)
 80093c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ca:	2303      	movs	r3, #3
 80093cc:	4013      	ands	r3, r2
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d067      	beq.n	80094a2 <UART_SetConfig+0x16e>
 80093d2:	d85f      	bhi.n	8009494 <UART_SetConfig+0x160>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d02a      	beq.n	800942e <UART_SetConfig+0xfa>
        ret = HAL_ERROR;
 80093d8:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d1ea      	bne.n	80093b4 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093de:	2380      	movs	r3, #128	; 0x80
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	69e2      	ldr	r2, [r4, #28]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d014      	beq.n	8009412 <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetSysClockFreq();
 80093e8:	f7fe fd3c 	bl	8007e64 <HAL_RCC_GetSysClockFreq>
 80093ec:	0003      	movs	r3, r0
        break;
 80093ee:	e02b      	b.n	8009448 <UART_SetConfig+0x114>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093f0:	4b50      	ldr	r3, [pc, #320]	; (8009534 <UART_SetConfig+0x200>)
 80093f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093f4:	230c      	movs	r3, #12
 80093f6:	4013      	ands	r3, r2
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d044      	beq.n	8009486 <UART_SetConfig+0x152>
 80093fc:	d80d      	bhi.n	800941a <UART_SetConfig+0xe6>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d017      	beq.n	8009432 <UART_SetConfig+0xfe>
        ret = HAL_ERROR;
 8009402:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009404:	2b04      	cmp	r3, #4
 8009406:	d1d5      	bne.n	80093b4 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009408:	2380      	movs	r3, #128	; 0x80
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	69e2      	ldr	r2, [r4, #28]
 800940e:	429a      	cmp	r2, r3
 8009410:	d1ea      	bne.n	80093e8 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8009412:	f7fe fd27 	bl	8007e64 <HAL_RCC_GetSysClockFreq>
 8009416:	0003      	movs	r3, r0
        break;
 8009418:	e052      	b.n	80094c0 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 800941a:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800941c:	2b0c      	cmp	r3, #12
 800941e:	d1c9      	bne.n	80093b4 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009420:	69e3      	ldr	r3, [r4, #28]
 8009422:	2280      	movs	r2, #128	; 0x80
 8009424:	0212      	lsls	r2, r2, #8
 8009426:	4293      	cmp	r3, r2
 8009428:	d04e      	beq.n	80094c8 <UART_SetConfig+0x194>
        pclk = (uint32_t) LSE_VALUE;
 800942a:	0013      	movs	r3, r2
 800942c:	e00f      	b.n	800944e <UART_SetConfig+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800942e:	2300      	movs	r3, #0
 8009430:	e7b7      	b.n	80093a2 <UART_SetConfig+0x6e>
 8009432:	2300      	movs	r3, #0
 8009434:	e7b5      	b.n	80093a2 <UART_SetConfig+0x6e>
        pclk = (uint32_t) HSI_VALUE;
 8009436:	4b40      	ldr	r3, [pc, #256]	; (8009538 <UART_SetConfig+0x204>)
 8009438:	e046      	b.n	80094c8 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800943a:	4b3f      	ldr	r3, [pc, #252]	; (8009538 <UART_SetConfig+0x204>)
 800943c:	e044      	b.n	80094c8 <UART_SetConfig+0x194>
    switch (clocksource)
 800943e:	2b00      	cmp	r3, #0
 8009440:	d11f      	bne.n	8009482 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009442:	f7fe fe39 	bl	80080b8 <HAL_RCC_GetPCLK1Freq>
 8009446:	0003      	movs	r3, r0
    if (pclk != 0U)
 8009448:	2000      	movs	r0, #0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0b2      	beq.n	80093b4 <UART_SetConfig+0x80>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800944e:	6865      	ldr	r5, [r4, #4]
 8009450:	4a3a      	ldr	r2, [pc, #232]	; (800953c <UART_SetConfig+0x208>)
 8009452:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009454:	0049      	lsls	r1, r1, #1
 8009456:	5a89      	ldrh	r1, [r1, r2]
 8009458:	0018      	movs	r0, r3
 800945a:	f7f6 fe71 	bl	8000140 <__udivsi3>
 800945e:	086b      	lsrs	r3, r5, #1
 8009460:	18c0      	adds	r0, r0, r3
 8009462:	0029      	movs	r1, r5
 8009464:	f7f6 fe6c 	bl	8000140 <__udivsi3>
 8009468:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800946a:	0001      	movs	r1, r0
 800946c:	3910      	subs	r1, #16
 800946e:	4a34      	ldr	r2, [pc, #208]	; (8009540 <UART_SetConfig+0x20c>)
        ret = HAL_ERROR;
 8009470:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009472:	4291      	cmp	r1, r2
 8009474:	d89e      	bhi.n	80093b4 <UART_SetConfig+0x80>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	041b      	lsls	r3, r3, #16
 800947a:	0c1b      	lsrs	r3, r3, #16
 800947c:	60d3      	str	r3, [r2, #12]
 800947e:	2000      	movs	r0, #0
 8009480:	e798      	b.n	80093b4 <UART_SetConfig+0x80>
    switch (clocksource)
 8009482:	2001      	movs	r0, #1
 8009484:	e796      	b.n	80093b4 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009486:	2380      	movs	r3, #128	; 0x80
 8009488:	021b      	lsls	r3, r3, #8
 800948a:	69e2      	ldr	r2, [r4, #28]
 800948c:	429a      	cmp	r2, r3
 800948e:	d0d2      	beq.n	8009436 <UART_SetConfig+0x102>
 8009490:	4b29      	ldr	r3, [pc, #164]	; (8009538 <UART_SetConfig+0x204>)
 8009492:	e7dc      	b.n	800944e <UART_SetConfig+0x11a>
 8009494:	69e3      	ldr	r3, [r4, #28]
 8009496:	2280      	movs	r2, #128	; 0x80
 8009498:	0212      	lsls	r2, r2, #8
 800949a:	4293      	cmp	r3, r2
 800949c:	d014      	beq.n	80094c8 <UART_SetConfig+0x194>
        pclk = (uint32_t) LSE_VALUE;
 800949e:	0013      	movs	r3, r2
 80094a0:	e7d5      	b.n	800944e <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094a2:	2380      	movs	r3, #128	; 0x80
 80094a4:	021b      	lsls	r3, r3, #8
 80094a6:	69e2      	ldr	r2, [r4, #28]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d0c6      	beq.n	800943a <UART_SetConfig+0x106>
        pclk = (uint32_t) HSI_VALUE;
 80094ac:	4b22      	ldr	r3, [pc, #136]	; (8009538 <UART_SetConfig+0x204>)
 80094ae:	e7ce      	b.n	800944e <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094b0:	2380      	movs	r3, #128	; 0x80
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	69e2      	ldr	r2, [r4, #28]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d1c3      	bne.n	8009442 <UART_SetConfig+0x10e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80094ba:	f7fe fdfd 	bl	80080b8 <HAL_RCC_GetPCLK1Freq>
 80094be:	0003      	movs	r3, r0
    if (pclk != 0U)
 80094c0:	2000      	movs	r0, #0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d100      	bne.n	80094c8 <UART_SetConfig+0x194>
 80094c6:	e775      	b.n	80093b4 <UART_SetConfig+0x80>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094c8:	6865      	ldr	r5, [r4, #4]
 80094ca:	4a1c      	ldr	r2, [pc, #112]	; (800953c <UART_SetConfig+0x208>)
 80094cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094ce:	0049      	lsls	r1, r1, #1
 80094d0:	5a89      	ldrh	r1, [r1, r2]
 80094d2:	0018      	movs	r0, r3
 80094d4:	f7f6 fe34 	bl	8000140 <__udivsi3>
 80094d8:	0040      	lsls	r0, r0, #1
 80094da:	086b      	lsrs	r3, r5, #1
 80094dc:	18c0      	adds	r0, r0, r3
 80094de:	0029      	movs	r1, r5
 80094e0:	f7f6 fe2e 	bl	8000140 <__udivsi3>
 80094e4:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e6:	0001      	movs	r1, r0
 80094e8:	3910      	subs	r1, #16
 80094ea:	4a15      	ldr	r2, [pc, #84]	; (8009540 <UART_SetConfig+0x20c>)
        ret = HAL_ERROR;
 80094ec:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094ee:	4291      	cmp	r1, r2
 80094f0:	d900      	bls.n	80094f4 <UART_SetConfig+0x1c0>
 80094f2:	e75f      	b.n	80093b4 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094f4:	4a13      	ldr	r2, [pc, #76]	; (8009544 <UART_SetConfig+0x210>)
 80094f6:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 80094f8:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094fa:	071b      	lsls	r3, r3, #28
 80094fc:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80094fe:	4313      	orrs	r3, r2
 8009500:	60cb      	str	r3, [r1, #12]
 8009502:	2000      	movs	r0, #0
 8009504:	e756      	b.n	80093b4 <UART_SetConfig+0x80>
    switch (clocksource)
 8009506:	2001      	movs	r0, #1
 8009508:	2b04      	cmp	r3, #4
 800950a:	d900      	bls.n	800950e <UART_SetConfig+0x1da>
 800950c:	e752      	b.n	80093b4 <UART_SetConfig+0x80>
 800950e:	2001      	movs	r0, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d000      	beq.n	8009516 <UART_SetConfig+0x1e2>
 8009514:	e74e      	b.n	80093b4 <UART_SetConfig+0x80>
 8009516:	e7d0      	b.n	80094ba <UART_SetConfig+0x186>
 8009518:	cfff69f3 	.word	0xcfff69f3
 800951c:	ffffcfff 	.word	0xffffcfff
 8009520:	11fff4ff 	.word	0x11fff4ff
 8009524:	40013800 	.word	0x40013800
 8009528:	40004400 	.word	0x40004400
 800952c:	40004800 	.word	0x40004800
 8009530:	bfffb400 	.word	0xbfffb400
 8009534:	40021000 	.word	0x40021000
 8009538:	00f42400 	.word	0x00f42400
 800953c:	08011f90 	.word	0x08011f90
 8009540:	0000ffef 	.word	0x0000ffef
 8009544:	0000fff0 	.word	0x0000fff0

08009548 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009548:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800954a:	07db      	lsls	r3, r3, #31
 800954c:	d506      	bpl.n	800955c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800954e:	6802      	ldr	r2, [r0, #0]
 8009550:	6853      	ldr	r3, [r2, #4]
 8009552:	492c      	ldr	r1, [pc, #176]	; (8009604 <UART_AdvFeatureConfig+0xbc>)
 8009554:	400b      	ands	r3, r1
 8009556:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009558:	430b      	orrs	r3, r1
 800955a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800955c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800955e:	079b      	lsls	r3, r3, #30
 8009560:	d506      	bpl.n	8009570 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009562:	6802      	ldr	r2, [r0, #0]
 8009564:	6853      	ldr	r3, [r2, #4]
 8009566:	4928      	ldr	r1, [pc, #160]	; (8009608 <UART_AdvFeatureConfig+0xc0>)
 8009568:	400b      	ands	r3, r1
 800956a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800956c:	430b      	orrs	r3, r1
 800956e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009572:	075b      	lsls	r3, r3, #29
 8009574:	d506      	bpl.n	8009584 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009576:	6802      	ldr	r2, [r0, #0]
 8009578:	6853      	ldr	r3, [r2, #4]
 800957a:	4924      	ldr	r1, [pc, #144]	; (800960c <UART_AdvFeatureConfig+0xc4>)
 800957c:	400b      	ands	r3, r1
 800957e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009580:	430b      	orrs	r3, r1
 8009582:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009584:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009586:	071b      	lsls	r3, r3, #28
 8009588:	d506      	bpl.n	8009598 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800958a:	6802      	ldr	r2, [r0, #0]
 800958c:	6853      	ldr	r3, [r2, #4]
 800958e:	4920      	ldr	r1, [pc, #128]	; (8009610 <UART_AdvFeatureConfig+0xc8>)
 8009590:	400b      	ands	r3, r1
 8009592:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009594:	430b      	orrs	r3, r1
 8009596:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009598:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800959a:	06db      	lsls	r3, r3, #27
 800959c:	d506      	bpl.n	80095ac <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800959e:	6802      	ldr	r2, [r0, #0]
 80095a0:	6893      	ldr	r3, [r2, #8]
 80095a2:	491c      	ldr	r1, [pc, #112]	; (8009614 <UART_AdvFeatureConfig+0xcc>)
 80095a4:	400b      	ands	r3, r1
 80095a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80095a8:	430b      	orrs	r3, r1
 80095aa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80095ae:	069b      	lsls	r3, r3, #26
 80095b0:	d506      	bpl.n	80095c0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095b2:	6802      	ldr	r2, [r0, #0]
 80095b4:	6893      	ldr	r3, [r2, #8]
 80095b6:	4918      	ldr	r1, [pc, #96]	; (8009618 <UART_AdvFeatureConfig+0xd0>)
 80095b8:	400b      	ands	r3, r1
 80095ba:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80095bc:	430b      	orrs	r3, r1
 80095be:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80095c2:	065b      	lsls	r3, r3, #25
 80095c4:	d50b      	bpl.n	80095de <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095c6:	6802      	ldr	r2, [r0, #0]
 80095c8:	6853      	ldr	r3, [r2, #4]
 80095ca:	4914      	ldr	r1, [pc, #80]	; (800961c <UART_AdvFeatureConfig+0xd4>)
 80095cc:	400b      	ands	r3, r1
 80095ce:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80095d0:	430b      	orrs	r3, r1
 80095d2:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095d4:	2380      	movs	r3, #128	; 0x80
 80095d6:	035b      	lsls	r3, r3, #13
 80095d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095da:	429a      	cmp	r2, r3
 80095dc:	d00a      	beq.n	80095f4 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80095e0:	061b      	lsls	r3, r3, #24
 80095e2:	d506      	bpl.n	80095f2 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095e4:	6802      	ldr	r2, [r0, #0]
 80095e6:	6853      	ldr	r3, [r2, #4]
 80095e8:	490d      	ldr	r1, [pc, #52]	; (8009620 <UART_AdvFeatureConfig+0xd8>)
 80095ea:	400b      	ands	r3, r1
 80095ec:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80095ee:	430b      	orrs	r3, r1
 80095f0:	6053      	str	r3, [r2, #4]
}
 80095f2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095f4:	6802      	ldr	r2, [r0, #0]
 80095f6:	6853      	ldr	r3, [r2, #4]
 80095f8:	490a      	ldr	r1, [pc, #40]	; (8009624 <UART_AdvFeatureConfig+0xdc>)
 80095fa:	400b      	ands	r3, r1
 80095fc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80095fe:	430b      	orrs	r3, r1
 8009600:	6053      	str	r3, [r2, #4]
 8009602:	e7ec      	b.n	80095de <UART_AdvFeatureConfig+0x96>
 8009604:	fffdffff 	.word	0xfffdffff
 8009608:	fffeffff 	.word	0xfffeffff
 800960c:	fffbffff 	.word	0xfffbffff
 8009610:	ffff7fff 	.word	0xffff7fff
 8009614:	ffffefff 	.word	0xffffefff
 8009618:	ffffdfff 	.word	0xffffdfff
 800961c:	ffefffff 	.word	0xffefffff
 8009620:	fff7ffff 	.word	0xfff7ffff
 8009624:	ff9fffff 	.word	0xff9fffff

08009628 <UART_WaitOnFlagUntilTimeout>:
{
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	46de      	mov	lr, fp
 800962c:	4657      	mov	r7, sl
 800962e:	464e      	mov	r6, r9
 8009630:	4645      	mov	r5, r8
 8009632:	b5e0      	push	{r5, r6, r7, lr}
 8009634:	4680      	mov	r8, r0
 8009636:	000d      	movs	r5, r1
 8009638:	0016      	movs	r6, r2
 800963a:	4699      	mov	r9, r3
 800963c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800963e:	2304      	movs	r3, #4
 8009640:	469a      	mov	sl, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009642:	2380      	movs	r3, #128	; 0x80
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	469b      	mov	fp, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009648:	4643      	mov	r3, r8
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69dc      	ldr	r4, [r3, #28]
 800964e:	402c      	ands	r4, r5
 8009650:	1b64      	subs	r4, r4, r5
 8009652:	4262      	negs	r2, r4
 8009654:	4154      	adcs	r4, r2
 8009656:	42b4      	cmp	r4, r6
 8009658:	d15e      	bne.n	8009718 <UART_WaitOnFlagUntilTimeout+0xf0>
    if (Timeout != HAL_MAX_DELAY)
 800965a:	1c7a      	adds	r2, r7, #1
 800965c:	d0f6      	beq.n	800964c <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800965e:	f7fc fe6b 	bl	8006338 <HAL_GetTick>
 8009662:	464b      	mov	r3, r9
 8009664:	1ac0      	subs	r0, r0, r3
 8009666:	42b8      	cmp	r0, r7
 8009668:	d833      	bhi.n	80096d2 <UART_WaitOnFlagUntilTimeout+0xaa>
 800966a:	2f00      	cmp	r7, #0
 800966c:	d031      	beq.n	80096d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800966e:	4643      	mov	r3, r8
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	4651      	mov	r1, sl
 8009676:	4211      	tst	r1, r2
 8009678:	d0e6      	beq.n	8009648 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800967a:	69da      	ldr	r2, [r3, #28]
 800967c:	4659      	mov	r1, fp
 800967e:	420a      	tst	r2, r1
 8009680:	d0e2      	beq.n	8009648 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009682:	2280      	movs	r2, #128	; 0x80
 8009684:	0112      	lsls	r2, r2, #4
 8009686:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009688:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800968c:	2201      	movs	r2, #1
 800968e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009692:	4643      	mov	r3, r8
 8009694:	6819      	ldr	r1, [r3, #0]
 8009696:	680b      	ldr	r3, [r1, #0]
 8009698:	4c23      	ldr	r4, [pc, #140]	; (8009728 <UART_WaitOnFlagUntilTimeout+0x100>)
 800969a:	4023      	ands	r3, r4
 800969c:	600b      	str	r3, [r1, #0]
 800969e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096a2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096aa:	4643      	mov	r3, r8
 80096ac:	6819      	ldr	r1, [r3, #0]
 80096ae:	688b      	ldr	r3, [r1, #8]
 80096b0:	4393      	bics	r3, r2
 80096b2:	608b      	str	r3, [r1, #8]
 80096b4:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80096b8:	2320      	movs	r3, #32
 80096ba:	3287      	adds	r2, #135	; 0x87
 80096bc:	4641      	mov	r1, r8
 80096be:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80096c0:	3204      	adds	r2, #4
 80096c2:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096c4:	3204      	adds	r2, #4
 80096c6:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 80096c8:	3364      	adds	r3, #100	; 0x64
 80096ca:	2200      	movs	r2, #0
 80096cc:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 80096ce:	2003      	movs	r0, #3
 80096d0:	e023      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xf2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096d6:	2201      	movs	r2, #1
 80096d8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80096dc:	4643      	mov	r3, r8
 80096de:	6819      	ldr	r1, [r3, #0]
 80096e0:	680b      	ldr	r3, [r1, #0]
 80096e2:	4c11      	ldr	r4, [pc, #68]	; (8009728 <UART_WaitOnFlagUntilTimeout+0x100>)
 80096e4:	4023      	ands	r3, r4
 80096e6:	600b      	str	r3, [r1, #0]
 80096e8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096ec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096f0:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f4:	4643      	mov	r3, r8
 80096f6:	6819      	ldr	r1, [r3, #0]
 80096f8:	688b      	ldr	r3, [r1, #8]
 80096fa:	4393      	bics	r3, r2
 80096fc:	608b      	str	r3, [r1, #8]
 80096fe:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8009702:	2320      	movs	r3, #32
 8009704:	3287      	adds	r2, #135	; 0x87
 8009706:	4641      	mov	r1, r8
 8009708:	508b      	str	r3, [r1, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800970a:	3204      	adds	r2, #4
 800970c:	508b      	str	r3, [r1, r2]
        __HAL_UNLOCK(huart);
 800970e:	3364      	adds	r3, #100	; 0x64
 8009710:	2200      	movs	r2, #0
 8009712:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8009714:	2003      	movs	r0, #3
 8009716:	e000      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xf2>
  return HAL_OK;
 8009718:	2000      	movs	r0, #0
}
 800971a:	bcf0      	pop	{r4, r5, r6, r7}
 800971c:	46bb      	mov	fp, r7
 800971e:	46b2      	mov	sl, r6
 8009720:	46a9      	mov	r9, r5
 8009722:	46a0      	mov	r8, r4
 8009724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009726:	46c0      	nop			; (mov r8, r8)
 8009728:	fffffe5f 	.word	0xfffffe5f

0800972c <HAL_UART_Transmit>:
{
 800972c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800972e:	46ce      	mov	lr, r9
 8009730:	4647      	mov	r7, r8
 8009732:	b580      	push	{r7, lr}
 8009734:	b083      	sub	sp, #12
 8009736:	0004      	movs	r4, r0
 8009738:	000d      	movs	r5, r1
 800973a:	0016      	movs	r6, r2
 800973c:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800973e:	2388      	movs	r3, #136	; 0x88
 8009740:	58c3      	ldr	r3, [r0, r3]
 8009742:	2b20      	cmp	r3, #32
 8009744:	d15c      	bne.n	8009800 <HAL_UART_Transmit+0xd4>
    if ((pData == NULL) || (Size == 0U))
 8009746:	2900      	cmp	r1, #0
 8009748:	d060      	beq.n	800980c <HAL_UART_Transmit+0xe0>
 800974a:	2a00      	cmp	r2, #0
 800974c:	d060      	beq.n	8009810 <HAL_UART_Transmit+0xe4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800974e:	2380      	movs	r3, #128	; 0x80
 8009750:	015b      	lsls	r3, r3, #5
 8009752:	6882      	ldr	r2, [r0, #8]
 8009754:	429a      	cmp	r2, r3
 8009756:	d104      	bne.n	8009762 <HAL_UART_Transmit+0x36>
 8009758:	6903      	ldr	r3, [r0, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800975e:	07cb      	lsls	r3, r1, #31
 8009760:	d458      	bmi.n	8009814 <HAL_UART_Transmit+0xe8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009762:	2390      	movs	r3, #144	; 0x90
 8009764:	2200      	movs	r2, #0
 8009766:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009768:	3b08      	subs	r3, #8
 800976a:	3221      	adds	r2, #33	; 0x21
 800976c:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800976e:	f7fc fde3 	bl	8006338 <HAL_GetTick>
 8009772:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8009774:	2354      	movs	r3, #84	; 0x54
 8009776:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 8009778:	3302      	adds	r3, #2
 800977a:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800977c:	2380      	movs	r3, #128	; 0x80
 800977e:	015b      	lsls	r3, r3, #5
 8009780:	68a2      	ldr	r2, [r4, #8]
      pdata16bits = NULL;
 8009782:	2100      	movs	r1, #0
 8009784:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009786:	429a      	cmp	r2, r3
 8009788:	d006      	beq.n	8009798 <HAL_UART_Transmit+0x6c>
    while (huart->TxXferCount > 0U)
 800978a:	2356      	movs	r3, #86	; 0x56
 800978c:	5ae3      	ldrh	r3, [r4, r3]
 800978e:	b29b      	uxth	r3, r3
 8009790:	2b00      	cmp	r3, #0
 8009792:	d028      	beq.n	80097e6 <HAL_UART_Transmit+0xba>
      huart->TxXferCount--;
 8009794:	2656      	movs	r6, #86	; 0x56
 8009796:	e016      	b.n	80097c6 <HAL_UART_Transmit+0x9a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1f5      	bne.n	800978a <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 800979e:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80097a0:	2500      	movs	r5, #0
 80097a2:	e7f2      	b.n	800978a <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097a4:	6822      	ldr	r2, [r4, #0]
 80097a6:	464b      	mov	r3, r9
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	05db      	lsls	r3, r3, #23
 80097ac:	0ddb      	lsrs	r3, r3, #23
 80097ae:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80097b0:	2302      	movs	r3, #2
 80097b2:	469c      	mov	ip, r3
 80097b4:	44e1      	add	r9, ip
      huart->TxXferCount--;
 80097b6:	5ba2      	ldrh	r2, [r4, r6]
 80097b8:	3a01      	subs	r2, #1
 80097ba:	b292      	uxth	r2, r2
 80097bc:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 80097be:	5ba3      	ldrh	r3, [r4, r6]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00f      	beq.n	80097e6 <HAL_UART_Transmit+0xba>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097c6:	9700      	str	r7, [sp, #0]
 80097c8:	4643      	mov	r3, r8
 80097ca:	2200      	movs	r2, #0
 80097cc:	2180      	movs	r1, #128	; 0x80
 80097ce:	0020      	movs	r0, r4
 80097d0:	f7ff ff2a 	bl	8009628 <UART_WaitOnFlagUntilTimeout>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d11f      	bne.n	8009818 <HAL_UART_Transmit+0xec>
      if (pdata8bits == NULL)
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d0e3      	beq.n	80097a4 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	782a      	ldrb	r2, [r5, #0]
 80097e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097e2:	3501      	adds	r5, #1
 80097e4:	e7e7      	b.n	80097b6 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097e6:	9700      	str	r7, [sp, #0]
 80097e8:	4643      	mov	r3, r8
 80097ea:	2200      	movs	r2, #0
 80097ec:	2140      	movs	r1, #64	; 0x40
 80097ee:	0020      	movs	r0, r4
 80097f0:	f7ff ff1a 	bl	8009628 <UART_WaitOnFlagUntilTimeout>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d111      	bne.n	800981c <HAL_UART_Transmit+0xf0>
    huart->gState = HAL_UART_STATE_READY;
 80097f8:	2388      	movs	r3, #136	; 0x88
 80097fa:	2220      	movs	r2, #32
 80097fc:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 80097fe:	e000      	b.n	8009802 <HAL_UART_Transmit+0xd6>
    return HAL_BUSY;
 8009800:	2002      	movs	r0, #2
}
 8009802:	b003      	add	sp, #12
 8009804:	bcc0      	pop	{r6, r7}
 8009806:	46b9      	mov	r9, r7
 8009808:	46b0      	mov	r8, r6
 800980a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800980c:	2001      	movs	r0, #1
 800980e:	e7f8      	b.n	8009802 <HAL_UART_Transmit+0xd6>
 8009810:	2001      	movs	r0, #1
 8009812:	e7f6      	b.n	8009802 <HAL_UART_Transmit+0xd6>
        return  HAL_ERROR;
 8009814:	2001      	movs	r0, #1
 8009816:	e7f4      	b.n	8009802 <HAL_UART_Transmit+0xd6>
        return HAL_TIMEOUT;
 8009818:	2003      	movs	r0, #3
 800981a:	e7f2      	b.n	8009802 <HAL_UART_Transmit+0xd6>
      return HAL_TIMEOUT;
 800981c:	2003      	movs	r0, #3
 800981e:	e7f0      	b.n	8009802 <HAL_UART_Transmit+0xd6>

08009820 <HAL_UART_Receive>:
{
 8009820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009822:	46d6      	mov	lr, sl
 8009824:	464f      	mov	r7, r9
 8009826:	4646      	mov	r6, r8
 8009828:	b5c0      	push	{r6, r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	0004      	movs	r4, r0
 800982e:	000d      	movs	r5, r1
 8009830:	0016      	movs	r6, r2
 8009832:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8009834:	238c      	movs	r3, #140	; 0x8c
 8009836:	58c3      	ldr	r3, [r0, r3]
 8009838:	2b20      	cmp	r3, #32
 800983a:	d000      	beq.n	800983e <HAL_UART_Receive+0x1e>
 800983c:	e07d      	b.n	800993a <HAL_UART_Receive+0x11a>
    if ((pData == NULL) || (Size == 0U))
 800983e:	2900      	cmp	r1, #0
 8009840:	d100      	bne.n	8009844 <HAL_UART_Receive+0x24>
 8009842:	e081      	b.n	8009948 <HAL_UART_Receive+0x128>
 8009844:	2a00      	cmp	r2, #0
 8009846:	d100      	bne.n	800984a <HAL_UART_Receive+0x2a>
 8009848:	e080      	b.n	800994c <HAL_UART_Receive+0x12c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800984a:	2380      	movs	r3, #128	; 0x80
 800984c:	015b      	lsls	r3, r3, #5
 800984e:	6882      	ldr	r2, [r0, #8]
 8009850:	429a      	cmp	r2, r3
 8009852:	d105      	bne.n	8009860 <HAL_UART_Receive+0x40>
 8009854:	6903      	ldr	r3, [r0, #16]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <HAL_UART_Receive+0x40>
      if ((((uint32_t)pData) & 1U) != 0U)
 800985a:	07cb      	lsls	r3, r1, #31
 800985c:	d500      	bpl.n	8009860 <HAL_UART_Receive+0x40>
 800985e:	e077      	b.n	8009950 <HAL_UART_Receive+0x130>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009860:	2300      	movs	r3, #0
 8009862:	2290      	movs	r2, #144	; 0x90
 8009864:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009866:	3a04      	subs	r2, #4
 8009868:	2122      	movs	r1, #34	; 0x22
 800986a:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986c:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 800986e:	f7fc fd63 	bl	8006338 <HAL_GetTick>
 8009872:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8009874:	235c      	movs	r3, #92	; 0x5c
 8009876:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 8009878:	3302      	adds	r3, #2
 800987a:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 800987c:	68a3      	ldr	r3, [r4, #8]
 800987e:	2280      	movs	r2, #128	; 0x80
 8009880:	0152      	lsls	r2, r2, #5
 8009882:	4293      	cmp	r3, r2
 8009884:	d015      	beq.n	80098b2 <HAL_UART_Receive+0x92>
 8009886:	2b00      	cmp	r3, #0
 8009888:	d11e      	bne.n	80098c8 <HAL_UART_Receive+0xa8>
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	425a      	negs	r2, r3
 800988e:	4153      	adcs	r3, r2
 8009890:	01db      	lsls	r3, r3, #7
 8009892:	4698      	mov	r8, r3
 8009894:	237f      	movs	r3, #127	; 0x7f
 8009896:	469c      	mov	ip, r3
 8009898:	44e0      	add	r8, ip
 800989a:	2360      	movs	r3, #96	; 0x60
 800989c:	4642      	mov	r2, r8
 800989e:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 80098a4:	235e      	movs	r3, #94	; 0x5e
 80098a6:	5ae3      	ldrh	r3, [r4, r3]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d040      	beq.n	8009930 <HAL_UART_Receive+0x110>
      huart->RxXferCount--;
 80098ae:	265e      	movs	r6, #94	; 0x5e
 80098b0:	e02c      	b.n	800990c <HAL_UART_Receive+0xec>
    UART_MASK_COMPUTATION(huart);
 80098b2:	6923      	ldr	r3, [r4, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d04f      	beq.n	8009958 <HAL_UART_Receive+0x138>
 80098b8:	2360      	movs	r3, #96	; 0x60
 80098ba:	22ff      	movs	r2, #255	; 0xff
 80098bc:	52e2      	strh	r2, [r4, r3]
 80098be:	339f      	adds	r3, #159	; 0x9f
 80098c0:	4698      	mov	r8, r3
      pdata16bits = NULL;
 80098c2:	2300      	movs	r3, #0
 80098c4:	469a      	mov	sl, r3
 80098c6:	e7ed      	b.n	80098a4 <HAL_UART_Receive+0x84>
    UART_MASK_COMPUTATION(huart);
 80098c8:	2280      	movs	r2, #128	; 0x80
 80098ca:	0552      	lsls	r2, r2, #21
 80098cc:	2100      	movs	r1, #0
 80098ce:	4688      	mov	r8, r1
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d1e2      	bne.n	800989a <HAL_UART_Receive+0x7a>
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	1e5a      	subs	r2, r3, #1
 80098d8:	4193      	sbcs	r3, r2
 80098da:	425b      	negs	r3, r3
 80098dc:	223f      	movs	r2, #63	; 0x3f
 80098de:	4393      	bics	r3, r2
 80098e0:	4698      	mov	r8, r3
 80098e2:	237f      	movs	r3, #127	; 0x7f
 80098e4:	469c      	mov	ip, r3
 80098e6:	44e0      	add	r8, ip
 80098e8:	e7d7      	b.n	800989a <HAL_UART_Receive+0x7a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ee:	4642      	mov	r2, r8
 80098f0:	4013      	ands	r3, r2
 80098f2:	4652      	mov	r2, sl
 80098f4:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 80098f6:	2302      	movs	r3, #2
 80098f8:	469c      	mov	ip, r3
 80098fa:	44e2      	add	sl, ip
      huart->RxXferCount--;
 80098fc:	5ba2      	ldrh	r2, [r4, r6]
 80098fe:	3a01      	subs	r2, #1
 8009900:	b292      	uxth	r2, r2
 8009902:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 8009904:	5ba3      	ldrh	r3, [r4, r6]
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d011      	beq.n	8009930 <HAL_UART_Receive+0x110>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800990c:	9700      	str	r7, [sp, #0]
 800990e:	464b      	mov	r3, r9
 8009910:	2200      	movs	r2, #0
 8009912:	2120      	movs	r1, #32
 8009914:	0020      	movs	r0, r4
 8009916:	f7ff fe87 	bl	8009628 <UART_WaitOnFlagUntilTimeout>
 800991a:	2800      	cmp	r0, #0
 800991c:	d11a      	bne.n	8009954 <HAL_UART_Receive+0x134>
      if (pdata8bits == NULL)
 800991e:	2d00      	cmp	r5, #0
 8009920:	d0e3      	beq.n	80098ea <HAL_UART_Receive+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	4642      	mov	r2, r8
 8009928:	4013      	ands	r3, r2
 800992a:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800992c:	3501      	adds	r5, #1
 800992e:	e7e5      	b.n	80098fc <HAL_UART_Receive+0xdc>
    huart->RxState = HAL_UART_STATE_READY;
 8009930:	238c      	movs	r3, #140	; 0x8c
 8009932:	2220      	movs	r2, #32
 8009934:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8009936:	2000      	movs	r0, #0
 8009938:	e000      	b.n	800993c <HAL_UART_Receive+0x11c>
    return HAL_BUSY;
 800993a:	2002      	movs	r0, #2
}
 800993c:	b002      	add	sp, #8
 800993e:	bce0      	pop	{r5, r6, r7}
 8009940:	46ba      	mov	sl, r7
 8009942:	46b1      	mov	r9, r6
 8009944:	46a8      	mov	r8, r5
 8009946:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8009948:	2001      	movs	r0, #1
 800994a:	e7f7      	b.n	800993c <HAL_UART_Receive+0x11c>
 800994c:	2001      	movs	r0, #1
 800994e:	e7f5      	b.n	800993c <HAL_UART_Receive+0x11c>
        return  HAL_ERROR;
 8009950:	2001      	movs	r0, #1
 8009952:	e7f3      	b.n	800993c <HAL_UART_Receive+0x11c>
        return HAL_TIMEOUT;
 8009954:	2003      	movs	r0, #3
 8009956:	e7f1      	b.n	800993c <HAL_UART_Receive+0x11c>
    UART_MASK_COMPUTATION(huart);
 8009958:	4b03      	ldr	r3, [pc, #12]	; (8009968 <HAL_UART_Receive+0x148>)
 800995a:	2260      	movs	r2, #96	; 0x60
 800995c:	52a3      	strh	r3, [r4, r2]
      pdata16bits = (uint16_t *) pData;
 800995e:	46aa      	mov	sl, r5
    UART_MASK_COMPUTATION(huart);
 8009960:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 8009962:	2500      	movs	r5, #0
 8009964:	e79e      	b.n	80098a4 <HAL_UART_Receive+0x84>
 8009966:	46c0      	nop			; (mov r8, r8)
 8009968:	000001ff 	.word	0x000001ff

0800996c <UART_CheckIdleState>:
{
 800996c:	b530      	push	{r4, r5, lr}
 800996e:	b083      	sub	sp, #12
 8009970:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009972:	2390      	movs	r3, #144	; 0x90
 8009974:	2200      	movs	r2, #0
 8009976:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009978:	f7fc fcde 	bl	8006338 <HAL_GetTick>
 800997c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	071b      	lsls	r3, r3, #28
 8009984:	d410      	bmi.n	80099a8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	075b      	lsls	r3, r3, #29
 800998c:	d419      	bmi.n	80099c2 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800998e:	2320      	movs	r3, #32
 8009990:	2288      	movs	r2, #136	; 0x88
 8009992:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009994:	3204      	adds	r2, #4
 8009996:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009998:	2300      	movs	r3, #0
 800999a:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800999c:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800999e:	3a08      	subs	r2, #8
 80099a0:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80099a2:	2000      	movs	r0, #0
}
 80099a4:	b003      	add	sp, #12
 80099a6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099a8:	2180      	movs	r1, #128	; 0x80
 80099aa:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <UART_CheckIdleState+0x70>)
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	0003      	movs	r3, r0
 80099b0:	2200      	movs	r2, #0
 80099b2:	0389      	lsls	r1, r1, #14
 80099b4:	0020      	movs	r0, r4
 80099b6:	f7ff fe37 	bl	8009628 <UART_WaitOnFlagUntilTimeout>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d0e3      	beq.n	8009986 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80099be:	2003      	movs	r0, #3
 80099c0:	e7f0      	b.n	80099a4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c2:	2180      	movs	r1, #128	; 0x80
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <UART_CheckIdleState+0x70>)
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	002b      	movs	r3, r5
 80099ca:	2200      	movs	r2, #0
 80099cc:	03c9      	lsls	r1, r1, #15
 80099ce:	0020      	movs	r0, r4
 80099d0:	f7ff fe2a 	bl	8009628 <UART_WaitOnFlagUntilTimeout>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d0da      	beq.n	800998e <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 80099d8:	2003      	movs	r0, #3
 80099da:	e7e3      	b.n	80099a4 <UART_CheckIdleState+0x38>
 80099dc:	01ffffff 	.word	0x01ffffff

080099e0 <HAL_UART_Init>:
{
 80099e0:	b510      	push	{r4, lr}
 80099e2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80099e4:	d030      	beq.n	8009a48 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 80099e6:	2388      	movs	r3, #136	; 0x88
 80099e8:	58c3      	ldr	r3, [r0, r3]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d022      	beq.n	8009a34 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80099ee:	2388      	movs	r3, #136	; 0x88
 80099f0:	2224      	movs	r2, #36	; 0x24
 80099f2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80099f4:	6822      	ldr	r2, [r4, #0]
 80099f6:	6813      	ldr	r3, [r2, #0]
 80099f8:	2101      	movs	r1, #1
 80099fa:	438b      	bics	r3, r1
 80099fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099fe:	0020      	movs	r0, r4
 8009a00:	f7ff fc98 	bl	8009334 <UART_SetConfig>
 8009a04:	2801      	cmp	r0, #1
 8009a06:	d014      	beq.n	8009a32 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d118      	bne.n	8009a40 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	6853      	ldr	r3, [r2, #4]
 8009a12:	490e      	ldr	r1, [pc, #56]	; (8009a4c <HAL_UART_Init+0x6c>)
 8009a14:	400b      	ands	r3, r1
 8009a16:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a18:	6822      	ldr	r2, [r4, #0]
 8009a1a:	6893      	ldr	r3, [r2, #8]
 8009a1c:	212a      	movs	r1, #42	; 0x2a
 8009a1e:	438b      	bics	r3, r1
 8009a20:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	6813      	ldr	r3, [r2, #0]
 8009a26:	3929      	subs	r1, #41	; 0x29
 8009a28:	430b      	orrs	r3, r1
 8009a2a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009a2c:	0020      	movs	r0, r4
 8009a2e:	f7ff ff9d 	bl	800996c <UART_CheckIdleState>
}
 8009a32:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009a34:	3384      	adds	r3, #132	; 0x84
 8009a36:	2200      	movs	r2, #0
 8009a38:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8009a3a:	f7fc fa3b 	bl	8005eb4 <HAL_UART_MspInit>
 8009a3e:	e7d6      	b.n	80099ee <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8009a40:	0020      	movs	r0, r4
 8009a42:	f7ff fd81 	bl	8009548 <UART_AdvFeatureConfig>
 8009a46:	e7e2      	b.n	8009a0e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8009a48:	2001      	movs	r0, #1
 8009a4a:	e7f2      	b.n	8009a32 <HAL_UART_Init+0x52>
 8009a4c:	ffffb7ff 	.word	0xffffb7ff

08009a50 <UART_Start_Receive_DMA>:
{
 8009a50:	b510      	push	{r4, lr}
 8009a52:	0004      	movs	r4, r0
 8009a54:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8009a56:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8009a58:	225c      	movs	r2, #92	; 0x5c
 8009a5a:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a5c:	3234      	adds	r2, #52	; 0x34
 8009a5e:	2100      	movs	r1, #0
 8009a60:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a62:	3a04      	subs	r2, #4
 8009a64:	3122      	adds	r1, #34	; 0x22
 8009a66:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8009a68:	3a0c      	subs	r2, #12
 8009a6a:	5882      	ldr	r2, [r0, r2]
 8009a6c:	2a00      	cmp	r2, #0
 8009a6e:	d013      	beq.n	8009a98 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a70:	4921      	ldr	r1, [pc, #132]	; (8009af8 <UART_Start_Receive_DMA+0xa8>)
 8009a72:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a74:	2080      	movs	r0, #128	; 0x80
 8009a76:	5822      	ldr	r2, [r4, r0]
 8009a78:	4920      	ldr	r1, [pc, #128]	; (8009afc <UART_Start_Receive_DMA+0xac>)
 8009a7a:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a7c:	5822      	ldr	r2, [r4, r0]
 8009a7e:	4920      	ldr	r1, [pc, #128]	; (8009b00 <UART_Start_Receive_DMA+0xb0>)
 8009a80:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8009a82:	5822      	ldr	r2, [r4, r0]
 8009a84:	2100      	movs	r1, #0
 8009a86:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a88:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8009a8a:	6821      	ldr	r1, [r4, #0]
 8009a8c:	3124      	adds	r1, #36	; 0x24
 8009a8e:	5820      	ldr	r0, [r4, r0]
 8009a90:	f7fd f8ce 	bl	8006c30 <HAL_DMA_Start_IT>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d126      	bne.n	8009ae6 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a9e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aa8:	6822      	ldr	r2, [r4, #0]
 8009aaa:	6810      	ldr	r0, [r2, #0]
 8009aac:	33ff      	adds	r3, #255	; 0xff
 8009aae:	4303      	orrs	r3, r0
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ab6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aba:	2301      	movs	r3, #1
 8009abc:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac0:	6821      	ldr	r1, [r4, #0]
 8009ac2:	688a      	ldr	r2, [r1, #8]
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	608a      	str	r2, [r1, #8]
 8009ac8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009acc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ad0:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ad4:	6822      	ldr	r2, [r4, #0]
 8009ad6:	6893      	ldr	r3, [r2, #8]
 8009ad8:	2040      	movs	r0, #64	; 0x40
 8009ada:	4303      	orrs	r3, r0
 8009adc:	6093      	str	r3, [r2, #8]
 8009ade:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8009ae2:	2000      	movs	r0, #0
}
 8009ae4:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ae6:	2390      	movs	r3, #144	; 0x90
 8009ae8:	2210      	movs	r2, #16
 8009aea:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8009aec:	3b04      	subs	r3, #4
 8009aee:	3210      	adds	r2, #16
 8009af0:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8009af2:	2001      	movs	r0, #1
 8009af4:	e7f6      	b.n	8009ae4 <UART_Start_Receive_DMA+0x94>
 8009af6:	46c0      	nop			; (mov r8, r8)
 8009af8:	0800929d 	.word	0x0800929d
 8009afc:	0800927d 	.word	0x0800927d
 8009b00:	08008ebf 	.word	0x08008ebf

08009b04 <HAL_UART_Receive_DMA>:
{
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b08:	208c      	movs	r0, #140	; 0x8c
 8009b0a:	5818      	ldr	r0, [r3, r0]
 8009b0c:	2820      	cmp	r0, #32
 8009b0e:	d125      	bne.n	8009b5c <HAL_UART_Receive_DMA+0x58>
    if ((pData == NULL) || (Size == 0U))
 8009b10:	2900      	cmp	r1, #0
 8009b12:	d025      	beq.n	8009b60 <HAL_UART_Receive_DMA+0x5c>
 8009b14:	2a00      	cmp	r2, #0
 8009b16:	d025      	beq.n	8009b64 <HAL_UART_Receive_DMA+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b18:	2080      	movs	r0, #128	; 0x80
 8009b1a:	0140      	lsls	r0, r0, #5
 8009b1c:	689c      	ldr	r4, [r3, #8]
 8009b1e:	4284      	cmp	r4, r0
 8009b20:	d105      	bne.n	8009b2e <HAL_UART_Receive_DMA+0x2a>
 8009b22:	6918      	ldr	r0, [r3, #16]
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d102      	bne.n	8009b2e <HAL_UART_Receive_DMA+0x2a>
        return  HAL_ERROR;
 8009b28:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8009b2a:	07cc      	lsls	r4, r1, #31
 8009b2c:	d417      	bmi.n	8009b5e <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2e:	2000      	movs	r0, #0
 8009b30:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b32:	6818      	ldr	r0, [r3, #0]
 8009b34:	6840      	ldr	r0, [r0, #4]
 8009b36:	0200      	lsls	r0, r0, #8
 8009b38:	d50c      	bpl.n	8009b54 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b3a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b3e:	2001      	movs	r0, #1
 8009b40:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b44:	681c      	ldr	r4, [r3, #0]
 8009b46:	6825      	ldr	r5, [r4, #0]
 8009b48:	2080      	movs	r0, #128	; 0x80
 8009b4a:	04c0      	lsls	r0, r0, #19
 8009b4c:	4328      	orrs	r0, r5
 8009b4e:	6020      	str	r0, [r4, #0]
 8009b50:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009b54:	0018      	movs	r0, r3
 8009b56:	f7ff ff7b 	bl	8009a50 <UART_Start_Receive_DMA>
 8009b5a:	e000      	b.n	8009b5e <HAL_UART_Receive_DMA+0x5a>
    return HAL_BUSY;
 8009b5c:	2002      	movs	r0, #2
}
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009b60:	2001      	movs	r0, #1
 8009b62:	e7fc      	b.n	8009b5e <HAL_UART_Receive_DMA+0x5a>
 8009b64:	2001      	movs	r0, #1
 8009b66:	e7fa      	b.n	8009b5e <HAL_UART_Receive_DMA+0x5a>

08009b68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b6c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8009b72:	336a      	adds	r3, #106	; 0x6a
 8009b74:	2201      	movs	r2, #1
 8009b76:	52c2      	strh	r2, [r0, r3]
    huart->NbRxDataToProcess = 1U;
 8009b78:	2001      	movs	r0, #1
 8009b7a:	2368      	movs	r3, #104	; 0x68
 8009b7c:	52e0      	strh	r0, [r4, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b80:	6803      	ldr	r3, [r0, #0]
 8009b82:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b88:	4f08      	ldr	r7, [pc, #32]	; (8009bac <UARTEx_SetNbDataToProcess+0x44>)
 8009b8a:	5cf8      	ldrb	r0, [r7, r3]
 8009b8c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b8e:	4e08      	ldr	r6, [pc, #32]	; (8009bb0 <UARTEx_SetNbDataToProcess+0x48>)
 8009b90:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b92:	f7f6 fb5f 	bl	8000254 <__divsi3>
 8009b96:	236a      	movs	r3, #106	; 0x6a
 8009b98:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b9a:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b9c:	0f5b      	lsrs	r3, r3, #29
 8009b9e:	5cf8      	ldrb	r0, [r7, r3]
 8009ba0:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ba2:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ba4:	f7f6 fb56 	bl	8000254 <__divsi3>
 8009ba8:	b280      	uxth	r0, r0
 8009baa:	e7e6      	b.n	8009b7a <UARTEx_SetNbDataToProcess+0x12>
 8009bac:	08011fb0 	.word	0x08011fb0
 8009bb0:	08011fa8 	.word	0x08011fa8

08009bb4 <HAL_UARTEx_WakeupCallback>:
}
 8009bb4:	4770      	bx	lr

08009bb6 <HAL_UARTEx_RxFifoFullCallback>:
}
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8009bb8:	4770      	bx	lr
	...

08009bbc <HAL_UARTEx_DisableFifoMode>:
{
 8009bbc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8009bbe:	2384      	movs	r3, #132	; 0x84
 8009bc0:	5cc3      	ldrb	r3, [r0, r3]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d015      	beq.n	8009bf2 <HAL_UARTEx_DisableFifoMode+0x36>
 8009bc6:	2484      	movs	r4, #132	; 0x84
 8009bc8:	2601      	movs	r6, #1
 8009bca:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8009bcc:	2588      	movs	r5, #136	; 0x88
 8009bce:	2324      	movs	r3, #36	; 0x24
 8009bd0:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bd2:	6802      	ldr	r2, [r0, #0]
 8009bd4:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009bd6:	6811      	ldr	r1, [r2, #0]
 8009bd8:	43b1      	bics	r1, r6
 8009bda:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bdc:	4a06      	ldr	r2, [pc, #24]	; (8009bf8 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8009bde:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009be0:	2200      	movs	r2, #0
 8009be2:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009be4:	6801      	ldr	r1, [r0, #0]
 8009be6:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009be8:	2320      	movs	r3, #32
 8009bea:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8009bec:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8009bee:	2000      	movs	r0, #0
}
 8009bf0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8009bf2:	2002      	movs	r0, #2
 8009bf4:	e7fc      	b.n	8009bf0 <HAL_UARTEx_DisableFifoMode+0x34>
 8009bf6:	46c0      	nop			; (mov r8, r8)
 8009bf8:	dfffffff 	.word	0xdfffffff

08009bfc <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	0004      	movs	r4, r0
 8009c00:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8009c02:	2384      	movs	r3, #132	; 0x84
 8009c04:	5cc3      	ldrb	r3, [r0, r3]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d01b      	beq.n	8009c42 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8009c0a:	2584      	movs	r5, #132	; 0x84
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8009c10:	2688      	movs	r6, #136	; 0x88
 8009c12:	2324      	movs	r3, #36	; 0x24
 8009c14:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009c1a:	6819      	ldr	r1, [r3, #0]
 8009c1c:	4381      	bics	r1, r0
 8009c1e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c20:	6820      	ldr	r0, [r4, #0]
 8009c22:	6883      	ldr	r3, [r0, #8]
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	08d9      	lsrs	r1, r3, #3
 8009c28:	4311      	orrs	r1, r2
 8009c2a:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009c2c:	0020      	movs	r0, r4
 8009c2e:	f7ff ff9b 	bl	8009b68 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009c36:	2320      	movs	r3, #32
 8009c38:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8009c3e:	2000      	movs	r0, #0
}
 8009c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8009c42:	2002      	movs	r0, #2
 8009c44:	e7fc      	b.n	8009c40 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08009c48 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	0004      	movs	r4, r0
 8009c4c:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8009c4e:	2284      	movs	r2, #132	; 0x84
 8009c50:	5c82      	ldrb	r2, [r0, r2]
 8009c52:	2a01      	cmp	r2, #1
 8009c54:	d01b      	beq.n	8009c8e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8009c56:	2584      	movs	r5, #132	; 0x84
 8009c58:	2001      	movs	r0, #1
 8009c5a:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8009c5c:	2688      	movs	r6, #136	; 0x88
 8009c5e:	2224      	movs	r2, #36	; 0x24
 8009c60:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009c66:	6811      	ldr	r1, [r2, #0]
 8009c68:	4381      	bics	r1, r0
 8009c6a:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c6c:	6822      	ldr	r2, [r4, #0]
 8009c6e:	6891      	ldr	r1, [r2, #8]
 8009c70:	4808      	ldr	r0, [pc, #32]	; (8009c94 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8009c72:	4001      	ands	r1, r0
 8009c74:	4319      	orrs	r1, r3
 8009c76:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009c78:	0020      	movs	r0, r4
 8009c7a:	f7ff ff75 	bl	8009b68 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009c82:	2320      	movs	r3, #32
 8009c84:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8009c86:	2300      	movs	r3, #0
 8009c88:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8009c8a:	2000      	movs	r0, #0
}
 8009c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8009c8e:	2002      	movs	r0, #2
 8009c90:	e7fc      	b.n	8009c8c <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8009c92:	46c0      	nop			; (mov r8, r8)
 8009c94:	f1ffffff 	.word	0xf1ffffff

08009c98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009c98:	b510      	push	{r4, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <SysTick_Handler+0x18>)
 8009c9c:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009c9e:	f001 f87b 	bl	800ad98 <xTaskGetSchedulerState>
 8009ca2:	2801      	cmp	r0, #1
 8009ca4:	d100      	bne.n	8009ca8 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8009ca6:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 8009ca8:	f001 fb34 	bl	800b314 <xPortSysTickHandler>
}
 8009cac:	e7fb      	b.n	8009ca6 <SysTick_Handler+0xe>
 8009cae:	46c0      	nop			; (mov r8, r8)
 8009cb0:	e000e010 	.word	0xe000e010

08009cb4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cb4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d106      	bne.n	8009cca <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009cbc:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <osKernelInitialize+0x24>)
 8009cbe:	6818      	ldr	r0, [r3, #0]
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d105      	bne.n	8009cd0 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 8009cc8:	4770      	bx	lr
    stat = osErrorISR;
 8009cca:	2006      	movs	r0, #6
 8009ccc:	4240      	negs	r0, r0
 8009cce:	e7fb      	b.n	8009cc8 <osKernelInitialize+0x14>
      stat = osError;
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	4240      	negs	r0, r0
  return (stat);
 8009cd4:	e7f8      	b.n	8009cc8 <osKernelInitialize+0x14>
 8009cd6:	46c0      	nop			; (mov r8, r8)
 8009cd8:	200048f0 	.word	0x200048f0

08009cdc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10f      	bne.n	8009d06 <osKernelStart+0x2a>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <osKernelStart+0x38>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10e      	bne.n	8009d0c <osKernelStart+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009cee:	4a0a      	ldr	r2, [pc, #40]	; (8009d18 <osKernelStart+0x3c>)
 8009cf0:	69d3      	ldr	r3, [r2, #28]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	0a1b      	lsrs	r3, r3, #8
 8009cf6:	61d3      	str	r3, [r2, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009cf8:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <osKernelStart+0x38>)
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009cfe:	f000 fdcd 	bl	800a89c <vTaskStartScheduler>
      stat = osOK;
 8009d02:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8009d04:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009d06:	2006      	movs	r0, #6
 8009d08:	4240      	negs	r0, r0
 8009d0a:	e7fb      	b.n	8009d04 <osKernelStart+0x28>
      stat = osError;
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	4240      	negs	r0, r0
  return (stat);
 8009d10:	e7f8      	b.n	8009d04 <osKernelStart+0x28>
 8009d12:	46c0      	nop			; (mov r8, r8)
 8009d14:	200048f0 	.word	0x200048f0
 8009d18:	e000ed00 	.word	0xe000ed00

08009d1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d22:	2200      	movs	r2, #0
 8009d24:	9205      	str	r2, [sp, #20]
 8009d26:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009d2a:	2a00      	cmp	r2, #0
 8009d2c:	d12a      	bne.n	8009d84 <osThreadNew+0x68>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d028      	beq.n	8009d84 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009d32:	2c00      	cmp	r4, #0
 8009d34:	d031      	beq.n	8009d9a <osThreadNew+0x7e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009d36:	69a3      	ldr	r3, [r4, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <osThreadNew+0x2c>
        prio = (UBaseType_t)attr->priority;
 8009d3c:	001d      	movs	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	2b37      	cmp	r3, #55	; 0x37
 8009d42:	d902      	bls.n	8009d4a <osThreadNew+0x2e>
        return (NULL);
 8009d44:	2000      	movs	r0, #0
 8009d46:	e01e      	b.n	8009d86 <osThreadNew+0x6a>
 8009d48:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d4a:	6863      	ldr	r3, [r4, #4]
 8009d4c:	07db      	lsls	r3, r3, #31
 8009d4e:	d433      	bmi.n	8009db8 <osThreadNew+0x9c>
      }

      if (attr->stack_size > 0U) {
 8009d50:	6963      	ldr	r3, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 8009d52:	2280      	movs	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d000      	beq.n	8009d5a <osThreadNew+0x3e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d58:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8009d5a:	6826      	ldr	r6, [r4, #0]
 8009d5c:	46b4      	mov	ip, r6
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d5e:	68a6      	ldr	r6, [r4, #8]
 8009d60:	2e00      	cmp	r6, #0
 8009d62:	d012      	beq.n	8009d8a <osThreadNew+0x6e>
 8009d64:	68e7      	ldr	r7, [r4, #12]
 8009d66:	2fa7      	cmp	r7, #167	; 0xa7
 8009d68:	d90c      	bls.n	8009d84 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d6a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d6c:	2c00      	cmp	r4, #0
 8009d6e:	d009      	beq.n	8009d84 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <osThreadNew+0x68>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d74:	9602      	str	r6, [sp, #8]
 8009d76:	9401      	str	r4, [sp, #4]
 8009d78:	9500      	str	r5, [sp, #0]
 8009d7a:	000b      	movs	r3, r1
 8009d7c:	4661      	mov	r1, ip
 8009d7e:	f000 fd33 	bl	800a7e8 <xTaskCreateStatic>
 8009d82:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d84:	9805      	ldr	r0, [sp, #20]
}
 8009d86:	b007      	add	sp, #28
 8009d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d8a:	68e3      	ldr	r3, [r4, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1f9      	bne.n	8009d84 <osThreadNew+0x68>
      if (mem == 0) {
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	4664      	mov	r4, ip
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1f5      	bne.n	8009d84 <osThreadNew+0x68>
 8009d98:	e001      	b.n	8009d9e <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;
 8009d9a:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8009d9c:	2280      	movs	r2, #128	; 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d9e:	b292      	uxth	r2, r2
 8009da0:	ab05      	add	r3, sp, #20
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	9500      	str	r5, [sp, #0]
 8009da6:	000b      	movs	r3, r1
 8009da8:	0021      	movs	r1, r4
 8009daa:	f000 fd47 	bl	800a83c <xTaskCreate>
 8009dae:	2801      	cmp	r0, #1
 8009db0:	d0e8      	beq.n	8009d84 <osThreadNew+0x68>
            hTask = NULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	9305      	str	r3, [sp, #20]
 8009db6:	e7e5      	b.n	8009d84 <osThreadNew+0x68>
        return (NULL);
 8009db8:	2000      	movs	r0, #0
 8009dba:	e7e4      	b.n	8009d86 <osThreadNew+0x6a>

08009dbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	0003      	movs	r3, r0
 8009dc0:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dc4:	2a00      	cmp	r2, #0
 8009dc6:	d108      	bne.n	8009dda <osDelay+0x1e>
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 8009dc8:	2000      	movs	r0, #0

    if (ticks != 0U) {
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d100      	bne.n	8009dd0 <osDelay+0x14>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8009dce:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f000 fec5 	bl	800ab60 <vTaskDelay>
    stat = osOK;
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e7f9      	b.n	8009dce <osDelay+0x12>
    stat = osErrorISR;
 8009dda:	2006      	movs	r0, #6
 8009ddc:	4240      	negs	r0, r0
 8009dde:	e7f6      	b.n	8009dce <osDelay+0x12>

08009de0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	0014      	movs	r4, r2
 8009de6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d132      	bne.n	8009e54 <osMessageQueueNew+0x74>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d034      	beq.n	8009e5c <osMessageQueueNew+0x7c>
 8009df2:	2900      	cmp	r1, #0
 8009df4:	d034      	beq.n	8009e60 <osMessageQueueNew+0x80>
    mem = -1;

    if (attr != NULL) {
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	d038      	beq.n	8009e6c <osMessageQueueNew+0x8c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009dfa:	6895      	ldr	r5, [r2, #8]
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	d00c      	beq.n	8009e1a <osMessageQueueNew+0x3a>
 8009e00:	68d3      	ldr	r3, [r2, #12]
 8009e02:	2b4f      	cmp	r3, #79	; 0x4f
 8009e04:	d92e      	bls.n	8009e64 <osMessageQueueNew+0x84>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009e06:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	d02d      	beq.n	8009e68 <osMessageQueueNew+0x88>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009e0c:	6966      	ldr	r6, [r4, #20]
 8009e0e:	000b      	movs	r3, r1
 8009e10:	4343      	muls	r3, r0
 8009e12:	429e      	cmp	r6, r3
 8009e14:	d216      	bcs.n	8009e44 <osMessageQueueNew+0x64>
  hQueue = NULL;
 8009e16:	2500      	movs	r5, #0
 8009e18:	e01d      	b.n	8009e56 <osMessageQueueNew+0x76>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009e1a:	68d3      	ldr	r3, [r2, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d11a      	bne.n	8009e56 <osMessageQueueNew+0x76>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009e20:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009e22:	2a00      	cmp	r2, #0
 8009e24:	d117      	bne.n	8009e56 <osMessageQueueNew+0x76>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8009e26:	6963      	ldr	r3, [r4, #20]
  hQueue = NULL;
 8009e28:	0015      	movs	r5, r2
      if (mem == 0) {
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d113      	bne.n	8009e56 <osMessageQueueNew+0x76>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f000 f97c 	bl	800a12c <xQueueGenericCreate>
 8009e34:	1e05      	subs	r5, r0, #0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009e36:	d00e      	beq.n	8009e56 <osMessageQueueNew+0x76>
      if (attr != NULL) {
        name = attr->name;
 8009e38:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8009e3a:	0021      	movs	r1, r4
 8009e3c:	0028      	movs	r0, r5
 8009e3e:	f000 fb1f 	bl	800a480 <vQueueAddToRegistry>
 8009e42:	e008      	b.n	8009e56 <osMessageQueueNew+0x76>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009e44:	2300      	movs	r3, #0
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	002b      	movs	r3, r5
 8009e4a:	f000 f939 	bl	800a0c0 <xQueueGenericCreateStatic>
 8009e4e:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8009e50:	d1f2      	bne.n	8009e38 <osMessageQueueNew+0x58>
 8009e52:	e000      	b.n	8009e56 <osMessageQueueNew+0x76>
  hQueue = NULL;
 8009e54:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009e56:	0028      	movs	r0, r5
 8009e58:	b002      	add	sp, #8
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8009e5c:	2500      	movs	r5, #0
 8009e5e:	e7fa      	b.n	8009e56 <osMessageQueueNew+0x76>
 8009e60:	2500      	movs	r5, #0
 8009e62:	e7f8      	b.n	8009e56 <osMessageQueueNew+0x76>
 8009e64:	2500      	movs	r5, #0
 8009e66:	e7f6      	b.n	8009e56 <osMessageQueueNew+0x76>
 8009e68:	0015      	movs	r5, r2
  return ((osMessageQueueId_t)hQueue);
 8009e6a:	e7f4      	b.n	8009e56 <osMessageQueueNew+0x76>
          hQueue = xQueueCreate (msg_count, msg_size);
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f000 f95d 	bl	800a12c <xQueueGenericCreate>
 8009e72:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8009e74:	d0ef      	beq.n	8009e56 <osMessageQueueNew+0x76>
 8009e76:	e7e0      	b.n	8009e3a <osMessageQueueNew+0x5a>

08009e78 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e78:	4b03      	ldr	r3, [pc, #12]	; (8009e88 <vApplicationGetIdleTaskMemory+0x10>)
 8009e7a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e7c:	4b03      	ldr	r3, [pc, #12]	; (8009e8c <vApplicationGetIdleTaskMemory+0x14>)
 8009e7e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e80:	2380      	movs	r3, #128	; 0x80
 8009e82:	6013      	str	r3, [r2, #0]
}
 8009e84:	4770      	bx	lr
 8009e86:	46c0      	nop			; (mov r8, r8)
 8009e88:	20004848 	.word	0x20004848
 8009e8c:	20004648 	.word	0x20004648

08009e90 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e90:	4b03      	ldr	r3, [pc, #12]	; (8009ea0 <vApplicationGetTimerTaskMemory+0x10>)
 8009e92:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e94:	4b03      	ldr	r3, [pc, #12]	; (8009ea4 <vApplicationGetTimerTaskMemory+0x14>)
 8009e96:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e98:	2380      	movs	r3, #128	; 0x80
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	6013      	str	r3, [r2, #0]
}
 8009e9e:	4770      	bx	lr
 8009ea0:	20004cf4 	.word	0x20004cf4
 8009ea4:	200048f4 	.word	0x200048f4

08009ea8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea8:	0003      	movs	r3, r0
 8009eaa:	3308      	adds	r3, #8
 8009eac:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009eae:	2201      	movs	r2, #1
 8009eb0:	4252      	negs	r2, r2
 8009eb2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eb4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eb6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ebc:	4770      	bx	lr

08009ebe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ec2:	4770      	bx	lr

08009ec4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ec4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ec6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ecc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ece:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ed0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009ed2:	6803      	ldr	r3, [r0, #0]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	6003      	str	r3, [r0, #0]
}
 8009ed8:	4770      	bx	lr

08009eda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009eda:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009edc:	680d      	ldr	r5, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ede:	0003      	movs	r3, r0
 8009ee0:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8009ee2:	1c6a      	adds	r2, r5, #1
 8009ee4:	d00e      	beq.n	8009f04 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ee6:	001c      	movs	r4, r3
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	42aa      	cmp	r2, r5
 8009eee:	d9fa      	bls.n	8009ee6 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ef0:	6863      	ldr	r3, [r4, #4]
 8009ef2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ef4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ef6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ef8:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009efa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009efc:	6803      	ldr	r3, [r0, #0]
 8009efe:	3301      	adds	r3, #1
 8009f00:	6003      	str	r3, [r0, #0]
}
 8009f02:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f04:	6904      	ldr	r4, [r0, #16]
 8009f06:	e7f3      	b.n	8009ef0 <vListInsert+0x16>

08009f08 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f08:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f0a:	6841      	ldr	r1, [r0, #4]
 8009f0c:	6882      	ldr	r2, [r0, #8]
 8009f0e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f10:	6841      	ldr	r1, [r0, #4]
 8009f12:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	4282      	cmp	r2, r0
 8009f18:	d006      	beq.n	8009f28 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	3a01      	subs	r2, #1
 8009f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f24:	6818      	ldr	r0, [r3, #0]
}
 8009f26:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f28:	6882      	ldr	r2, [r0, #8]
 8009f2a:	605a      	str	r2, [r3, #4]
 8009f2c:	e7f5      	b.n	8009f1a <uxListRemove+0x12>

08009f2e <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f2e:	b510      	push	{r4, lr}
 8009f30:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f32:	f001 f9a5 	bl	800b280 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f36:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009f38:	f001 f9ae 	bl	800b298 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f3c:	4260      	negs	r0, r4
 8009f3e:	4160      	adcs	r0, r4

	return xReturn;
}
 8009f40:	bd10      	pop	{r4, pc}

08009f42 <prvCopyDataToQueue>:
{
 8009f42:	b570      	push	{r4, r5, r6, lr}
 8009f44:	0004      	movs	r4, r0
 8009f46:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f48:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009f4c:	2a00      	cmp	r2, #0
 8009f4e:	d10c      	bne.n	8009f6a <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f50:	6803      	ldr	r3, [r0, #0]
BaseType_t xReturn = pdFALSE;
 8009f52:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <prvCopyDataToQueue+0x1c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f58:	3501      	adds	r5, #1
 8009f5a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f5e:	68a0      	ldr	r0, [r4, #8]
 8009f60:	f000 ff2a 	bl	800adb8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60a3      	str	r3, [r4, #8]
 8009f68:	e7f6      	b.n	8009f58 <prvCopyDataToQueue+0x16>
	else if( xPosition == queueSEND_TO_BACK )
 8009f6a:	2e00      	cmp	r6, #0
 8009f6c:	d10d      	bne.n	8009f8a <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f6e:	6840      	ldr	r0, [r0, #4]
 8009f70:	f003 fc06 	bl	800d780 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f74:	6863      	ldr	r3, [r4, #4]
 8009f76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009f78:	189b      	adds	r3, r3, r2
 8009f7a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f7c:	68a2      	ldr	r2, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8009f7e:	0030      	movs	r0, r6
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d3e9      	bcc.n	8009f58 <prvCopyDataToQueue+0x16>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	6063      	str	r3, [r4, #4]
 8009f88:	e7e6      	b.n	8009f58 <prvCopyDataToQueue+0x16>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f8a:	68c0      	ldr	r0, [r0, #12]
 8009f8c:	f003 fbf8 	bl	800d780 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009f92:	4251      	negs	r1, r2
 8009f94:	68e3      	ldr	r3, [r4, #12]
 8009f96:	1a9b      	subs	r3, r3, r2
 8009f98:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f9a:	6822      	ldr	r2, [r4, #0]
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d202      	bcs.n	8009fa6 <prvCopyDataToQueue+0x64>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fa0:	68a3      	ldr	r3, [r4, #8]
 8009fa2:	185b      	adds	r3, r3, r1
 8009fa4:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
 8009fa6:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 8009fa8:	2e02      	cmp	r6, #2
 8009faa:	d1d5      	bne.n	8009f58 <prvCopyDataToQueue+0x16>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	d0d3      	beq.n	8009f58 <prvCopyDataToQueue+0x16>
				--uxMessagesWaiting;
 8009fb0:	3d01      	subs	r5, #1
 8009fb2:	e7d1      	b.n	8009f58 <prvCopyDataToQueue+0x16>

08009fb4 <prvCopyDataFromQueue>:
{
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	0003      	movs	r3, r0
 8009fb8:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fbc:	2a00      	cmp	r2, #0
 8009fbe:	d00a      	beq.n	8009fd6 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fc0:	68dc      	ldr	r4, [r3, #12]
 8009fc2:	18a4      	adds	r4, r4, r2
 8009fc4:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009fc6:	6899      	ldr	r1, [r3, #8]
 8009fc8:	428c      	cmp	r4, r1
 8009fca:	d301      	bcc.n	8009fd0 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009fcc:	6819      	ldr	r1, [r3, #0]
 8009fce:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fd0:	68d9      	ldr	r1, [r3, #12]
 8009fd2:	f003 fbd5 	bl	800d780 <memcpy>
}
 8009fd6:	bd10      	pop	{r4, pc}

08009fd8 <prvUnlockQueue>:
{
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 8009fdc:	f001 f950 	bl	800b280 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009fe0:	2345      	movs	r3, #69	; 0x45
 8009fe2:	5cec      	ldrb	r4, [r5, r3]
 8009fe4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fe6:	2c00      	cmp	r4, #0
 8009fe8:	dd11      	ble.n	800a00e <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fea:	002e      	movs	r6, r5
 8009fec:	3624      	adds	r6, #36	; 0x24
 8009fee:	e003      	b.n	8009ff8 <prvUnlockQueue+0x20>
			--cTxLock;
 8009ff0:	3c01      	subs	r4, #1
 8009ff2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ff4:	2c00      	cmp	r4, #0
 8009ff6:	d00a      	beq.n	800a00e <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ff8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d007      	beq.n	800a00e <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ffe:	0030      	movs	r0, r6
 800a000:	f000 fe44 	bl	800ac8c <xTaskRemoveFromEventList>
 800a004:	2800      	cmp	r0, #0
 800a006:	d0f3      	beq.n	8009ff0 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800a008:	f000 fec0 	bl	800ad8c <vTaskMissedYield>
 800a00c:	e7f0      	b.n	8009ff0 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 800a00e:	2345      	movs	r3, #69	; 0x45
 800a010:	22ff      	movs	r2, #255	; 0xff
 800a012:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 800a014:	f001 f940 	bl	800b298 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a018:	f001 f932 	bl	800b280 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a01c:	2344      	movs	r3, #68	; 0x44
 800a01e:	5cec      	ldrb	r4, [r5, r3]
 800a020:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a022:	2c00      	cmp	r4, #0
 800a024:	dd11      	ble.n	800a04a <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a026:	002e      	movs	r6, r5
 800a028:	3610      	adds	r6, #16
 800a02a:	e003      	b.n	800a034 <prvUnlockQueue+0x5c>
				--cRxLock;
 800a02c:	3c01      	subs	r4, #1
 800a02e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a030:	2c00      	cmp	r4, #0
 800a032:	d00a      	beq.n	800a04a <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a034:	692b      	ldr	r3, [r5, #16]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d007      	beq.n	800a04a <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a03a:	0030      	movs	r0, r6
 800a03c:	f000 fe26 	bl	800ac8c <xTaskRemoveFromEventList>
 800a040:	2800      	cmp	r0, #0
 800a042:	d0f3      	beq.n	800a02c <prvUnlockQueue+0x54>
					vTaskMissedYield();
 800a044:	f000 fea2 	bl	800ad8c <vTaskMissedYield>
 800a048:	e7f0      	b.n	800a02c <prvUnlockQueue+0x54>
		pxQueue->cRxLock = queueUNLOCKED;
 800a04a:	2344      	movs	r3, #68	; 0x44
 800a04c:	22ff      	movs	r2, #255	; 0xff
 800a04e:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 800a050:	f001 f922 	bl	800b298 <vPortExitCritical>
}
 800a054:	bd70      	pop	{r4, r5, r6, pc}

0800a056 <xQueueGenericReset>:
{
 800a056:	b570      	push	{r4, r5, r6, lr}
 800a058:	0004      	movs	r4, r0
 800a05a:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d01b      	beq.n	800a098 <xQueueGenericReset+0x42>
	taskENTER_CRITICAL();
 800a060:	f001 f90e 	bl	800b280 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a064:	6822      	ldr	r2, [r4, #0]
 800a066:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a06a:	434b      	muls	r3, r1
 800a06c:	18d0      	adds	r0, r2, r3
 800a06e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a070:	2000      	movs	r0, #0
 800a072:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a074:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a076:	1a5b      	subs	r3, r3, r1
 800a078:	18d2      	adds	r2, r2, r3
 800a07a:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a07c:	23ff      	movs	r3, #255	; 0xff
 800a07e:	2244      	movs	r2, #68	; 0x44
 800a080:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800a082:	3201      	adds	r2, #1
 800a084:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 800a086:	2d00      	cmp	r5, #0
 800a088:	d111      	bne.n	800a0ae <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a08a:	6923      	ldr	r3, [r4, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d105      	bne.n	800a09c <xQueueGenericReset+0x46>
	taskEXIT_CRITICAL();
 800a090:	f001 f902 	bl	800b298 <vPortExitCritical>
}
 800a094:	2001      	movs	r0, #1
 800a096:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800a098:	b672      	cpsid	i
 800a09a:	e7fe      	b.n	800a09a <xQueueGenericReset+0x44>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a09c:	0020      	movs	r0, r4
 800a09e:	3010      	adds	r0, #16
 800a0a0:	f000 fdf4 	bl	800ac8c <xTaskRemoveFromEventList>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d0f3      	beq.n	800a090 <xQueueGenericReset+0x3a>
					queueYIELD_IF_USING_PREEMPTION();
 800a0a8:	f001 f8de 	bl	800b268 <vPortYield>
 800a0ac:	e7f0      	b.n	800a090 <xQueueGenericReset+0x3a>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0ae:	0020      	movs	r0, r4
 800a0b0:	3010      	adds	r0, #16
 800a0b2:	f7ff fef9 	bl	8009ea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0b6:	0020      	movs	r0, r4
 800a0b8:	3024      	adds	r0, #36	; 0x24
 800a0ba:	f7ff fef5 	bl	8009ea8 <vListInitialise>
 800a0be:	e7e7      	b.n	800a090 <xQueueGenericReset+0x3a>

0800a0c0 <xQueueGenericCreateStatic>:
	{
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	001d      	movs	r5, r3
 800a0c6:	ac06      	add	r4, sp, #24
 800a0c8:	7824      	ldrb	r4, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d101      	bne.n	800a0d2 <xQueueGenericCreateStatic+0x12>
 800a0ce:	b672      	cpsid	i
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0d6:	2a00      	cmp	r2, #0
 800a0d8:	d005      	beq.n	800a0e6 <xQueueGenericCreateStatic+0x26>
 800a0da:	2900      	cmp	r1, #0
 800a0dc:	d107      	bne.n	800a0ee <xQueueGenericCreateStatic+0x2e>
 800a0de:	b672      	cpsid	i
 800a0e0:	e7fe      	b.n	800a0e0 <xQueueGenericCreateStatic+0x20>
		configASSERT( pxStaticQueue != NULL );
 800a0e2:	b672      	cpsid	i
 800a0e4:	e7fe      	b.n	800a0e4 <xQueueGenericCreateStatic+0x24>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	d018      	beq.n	800a11c <xQueueGenericCreateStatic+0x5c>
 800a0ea:	b672      	cpsid	i
 800a0ec:	e7fe      	b.n	800a0ec <xQueueGenericCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0ee:	2350      	movs	r3, #80	; 0x50
 800a0f0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0f2:	9b01      	ldr	r3, [sp, #4]
 800a0f4:	2b50      	cmp	r3, #80	; 0x50
 800a0f6:	d001      	beq.n	800a0fc <xQueueGenericCreateStatic+0x3c>
 800a0f8:	b672      	cpsid	i
 800a0fa:	e7fe      	b.n	800a0fa <xQueueGenericCreateStatic+0x3a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0fc:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0fe:	2346      	movs	r3, #70	; 0x46
 800a100:	2601      	movs	r6, #1
 800a102:	54ee      	strb	r6, [r5, r3]
 800a104:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a106:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a108:	6429      	str	r1, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a10a:	2101      	movs	r1, #1
 800a10c:	0028      	movs	r0, r5
 800a10e:	f7ff ffa2 	bl	800a056 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a112:	234c      	movs	r3, #76	; 0x4c
 800a114:	54ec      	strb	r4, [r5, r3]
	}
 800a116:	0028      	movs	r0, r5
 800a118:	b002      	add	sp, #8
 800a11a:	bd70      	pop	{r4, r5, r6, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a11c:	2350      	movs	r3, #80	; 0x50
 800a11e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a120:	9b01      	ldr	r3, [sp, #4]
 800a122:	2b50      	cmp	r3, #80	; 0x50
 800a124:	d1e8      	bne.n	800a0f8 <xQueueGenericCreateStatic+0x38>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a126:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a128:	002a      	movs	r2, r5
 800a12a:	e7e8      	b.n	800a0fe <xQueueGenericCreateStatic+0x3e>

0800a12c <xQueueGenericCreate>:
	{
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	0004      	movs	r4, r0
 800a130:	000d      	movs	r5, r1
 800a132:	0016      	movs	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a134:	2800      	cmp	r0, #0
 800a136:	d101      	bne.n	800a13c <xQueueGenericCreate+0x10>
 800a138:	b672      	cpsid	i
 800a13a:	e7fe      	b.n	800a13a <xQueueGenericCreate+0xe>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a13c:	0008      	movs	r0, r1
 800a13e:	4360      	muls	r0, r4
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a140:	3050      	adds	r0, #80	; 0x50
 800a142:	f001 f95f 	bl	800b404 <pvPortMalloc>
 800a146:	1e07      	subs	r7, r0, #0
		if( pxNewQueue != NULL )
 800a148:	d00f      	beq.n	800a16a <xQueueGenericCreate+0x3e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a14a:	2346      	movs	r3, #70	; 0x46
 800a14c:	2200      	movs	r2, #0
 800a14e:	54c2      	strb	r2, [r0, r3]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a150:	0003      	movs	r3, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a152:	2d00      	cmp	r5, #0
 800a154:	d000      	beq.n	800a158 <xQueueGenericCreate+0x2c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a156:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a158:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a15a:	63fc      	str	r4, [r7, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a15c:	643d      	str	r5, [r7, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a15e:	2101      	movs	r1, #1
 800a160:	0038      	movs	r0, r7
 800a162:	f7ff ff78 	bl	800a056 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a166:	234c      	movs	r3, #76	; 0x4c
 800a168:	54fe      	strb	r6, [r7, r3]
	}
 800a16a:	0038      	movs	r0, r7
 800a16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a16e <xQueueGenericSend>:
{
 800a16e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a170:	46d6      	mov	lr, sl
 800a172:	464f      	mov	r7, r9
 800a174:	4646      	mov	r6, r8
 800a176:	b5c0      	push	{r6, r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	0004      	movs	r4, r0
 800a17c:	4688      	mov	r8, r1
 800a17e:	9201      	str	r2, [sp, #4]
 800a180:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800a182:	2800      	cmp	r0, #0
 800a184:	d008      	beq.n	800a198 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a186:	2900      	cmp	r1, #0
 800a188:	d008      	beq.n	800a19c <xQueueGenericSend+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a18a:	2d02      	cmp	r5, #2
 800a18c:	d10b      	bne.n	800a1a6 <xQueueGenericSend+0x38>
 800a18e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a190:	2b01      	cmp	r3, #1
 800a192:	d008      	beq.n	800a1a6 <xQueueGenericSend+0x38>
 800a194:	b672      	cpsid	i
 800a196:	e7fe      	b.n	800a196 <xQueueGenericSend+0x28>
	configASSERT( pxQueue );
 800a198:	b672      	cpsid	i
 800a19a:	e7fe      	b.n	800a19a <xQueueGenericSend+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a19c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0f3      	beq.n	800a18a <xQueueGenericSend+0x1c>
 800a1a2:	b672      	cpsid	i
 800a1a4:	e7fe      	b.n	800a1a4 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a6:	f000 fdf7 	bl	800ad98 <xTaskGetSchedulerState>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d104      	bne.n	800a1b8 <xQueueGenericSend+0x4a>
 800a1ae:	9b01      	ldr	r3, [sp, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d006      	beq.n	800a1c2 <xQueueGenericSend+0x54>
 800a1b4:	b672      	cpsid	i
 800a1b6:	e7fe      	b.n	800a1b6 <xQueueGenericSend+0x48>
 800a1b8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800a1ba:	2744      	movs	r7, #68	; 0x44
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4699      	mov	r9, r3
 800a1c0:	e034      	b.n	800a22c <xQueueGenericSend+0xbe>
 800a1c2:	2600      	movs	r6, #0
 800a1c4:	e7f9      	b.n	800a1ba <xQueueGenericSend+0x4c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1c6:	002a      	movs	r2, r5
 800a1c8:	4641      	mov	r1, r8
 800a1ca:	0020      	movs	r0, r4
 800a1cc:	f7ff feb9 	bl	8009f42 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <xQueueGenericSend+0x7e>
					else if( xYieldRequired != pdFALSE )
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d111      	bne.n	800a1fe <xQueueGenericSend+0x90>
				taskEXIT_CRITICAL();
 800a1da:	f001 f85d 	bl	800b298 <vPortExitCritical>
				return pdPASS;
 800a1de:	2001      	movs	r0, #1
}
 800a1e0:	b004      	add	sp, #16
 800a1e2:	bce0      	pop	{r5, r6, r7}
 800a1e4:	46ba      	mov	sl, r7
 800a1e6:	46b1      	mov	r9, r6
 800a1e8:	46a8      	mov	r8, r5
 800a1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1ec:	0020      	movs	r0, r4
 800a1ee:	3024      	adds	r0, #36	; 0x24
 800a1f0:	f000 fd4c 	bl	800ac8c <xTaskRemoveFromEventList>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d0f0      	beq.n	800a1da <xQueueGenericSend+0x6c>
							queueYIELD_IF_USING_PREEMPTION();
 800a1f8:	f001 f836 	bl	800b268 <vPortYield>
 800a1fc:	e7ed      	b.n	800a1da <xQueueGenericSend+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800a1fe:	f001 f833 	bl	800b268 <vPortYield>
 800a202:	e7ea      	b.n	800a1da <xQueueGenericSend+0x6c>
					taskEXIT_CRITICAL();
 800a204:	f001 f848 	bl	800b298 <vPortExitCritical>
					return errQUEUE_FULL;
 800a208:	2000      	movs	r0, #0
 800a20a:	e7e9      	b.n	800a1e0 <xQueueGenericSend+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a20c:	a802      	add	r0, sp, #8
 800a20e:	f000 fd7d 	bl	800ad0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a212:	e018      	b.n	800a246 <xQueueGenericSend+0xd8>
		prvLockQueue( pxQueue );
 800a214:	464b      	mov	r3, r9
 800a216:	55e3      	strb	r3, [r4, r7]
 800a218:	e01f      	b.n	800a25a <xQueueGenericSend+0xec>
 800a21a:	464a      	mov	r2, r9
 800a21c:	54e2      	strb	r2, [r4, r3]
 800a21e:	e021      	b.n	800a264 <xQueueGenericSend+0xf6>
				prvUnlockQueue( pxQueue );
 800a220:	0020      	movs	r0, r4
 800a222:	f7ff fed9 	bl	8009fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a226:	f000 fc23 	bl	800aa70 <xTaskResumeAll>
 800a22a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a22c:	f001 f828 	bl	800b280 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a230:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a232:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a234:	429a      	cmp	r2, r3
 800a236:	d3c6      	bcc.n	800a1c6 <xQueueGenericSend+0x58>
 800a238:	2d02      	cmp	r5, #2
 800a23a:	d0c4      	beq.n	800a1c6 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a23c:	9b01      	ldr	r3, [sp, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0e0      	beq.n	800a204 <xQueueGenericSend+0x96>
				else if( xEntryTimeSet == pdFALSE )
 800a242:	2e00      	cmp	r6, #0
 800a244:	d0e2      	beq.n	800a20c <xQueueGenericSend+0x9e>
		taskEXIT_CRITICAL();
 800a246:	f001 f827 	bl	800b298 <vPortExitCritical>
		vTaskSuspendAll();
 800a24a:	f000 fb69 	bl	800a920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a24e:	f001 f817 	bl	800b280 <vPortEnterCritical>
 800a252:	5de3      	ldrb	r3, [r4, r7]
 800a254:	b25b      	sxtb	r3, r3
 800a256:	3301      	adds	r3, #1
 800a258:	d0dc      	beq.n	800a214 <xQueueGenericSend+0xa6>
 800a25a:	2345      	movs	r3, #69	; 0x45
 800a25c:	5ce2      	ldrb	r2, [r4, r3]
 800a25e:	b252      	sxtb	r2, r2
 800a260:	3201      	adds	r2, #1
 800a262:	d0da      	beq.n	800a21a <xQueueGenericSend+0xac>
 800a264:	f001 f818 	bl	800b298 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a268:	a901      	add	r1, sp, #4
 800a26a:	a802      	add	r0, sp, #8
 800a26c:	f000 fd5a 	bl	800ad24 <xTaskCheckForTimeOut>
 800a270:	2800      	cmp	r0, #0
 800a272:	d117      	bne.n	800a2a4 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a274:	f001 f804 	bl	800b280 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a27a:	469a      	mov	sl, r3
 800a27c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a27e:	f001 f80b 	bl	800b298 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a282:	45b2      	cmp	sl, r6
 800a284:	d1cc      	bne.n	800a220 <xQueueGenericSend+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a286:	9901      	ldr	r1, [sp, #4]
 800a288:	0020      	movs	r0, r4
 800a28a:	3010      	adds	r0, #16
 800a28c:	f000 fcd4 	bl	800ac38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a290:	0020      	movs	r0, r4
 800a292:	f7ff fea1 	bl	8009fd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a296:	f000 fbeb 	bl	800aa70 <xTaskResumeAll>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	d1c5      	bne.n	800a22a <xQueueGenericSend+0xbc>
					portYIELD_WITHIN_API();
 800a29e:	f000 ffe3 	bl	800b268 <vPortYield>
 800a2a2:	e7c2      	b.n	800a22a <xQueueGenericSend+0xbc>
			prvUnlockQueue( pxQueue );
 800a2a4:	0020      	movs	r0, r4
 800a2a6:	f7ff fe97 	bl	8009fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2aa:	f000 fbe1 	bl	800aa70 <xTaskResumeAll>
			return errQUEUE_FULL;
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e796      	b.n	800a1e0 <xQueueGenericSend+0x72>

0800a2b2 <xQueueGenericSendFromISR>:
{
 800a2b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2b4:	46c6      	mov	lr, r8
 800a2b6:	b500      	push	{lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	0004      	movs	r4, r0
 800a2bc:	000f      	movs	r7, r1
 800a2be:	9201      	str	r2, [sp, #4]
 800a2c0:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d008      	beq.n	800a2d8 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	d008      	beq.n	800a2dc <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2ca:	2d02      	cmp	r5, #2
 800a2cc:	d135      	bne.n	800a33a <xQueueGenericSendFromISR+0x88>
 800a2ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d01a      	beq.n	800a30a <xQueueGenericSendFromISR+0x58>
 800a2d4:	b672      	cpsid	i
 800a2d6:	e7fe      	b.n	800a2d6 <xQueueGenericSendFromISR+0x24>
	configASSERT( pxQueue );
 800a2d8:	b672      	cpsid	i
 800a2da:	e7fe      	b.n	800a2da <xQueueGenericSendFromISR+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0f3      	beq.n	800a2ca <xQueueGenericSendFromISR+0x18>
 800a2e2:	b672      	cpsid	i
 800a2e4:	e7fe      	b.n	800a2e4 <xQueueGenericSendFromISR+0x32>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800a2e8:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d02d      	beq.n	800a34a <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2ee:	0020      	movs	r0, r4
 800a2f0:	3024      	adds	r0, #36	; 0x24
 800a2f2:	f000 fccb 	bl	800ac8c <xTaskRemoveFromEventList>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d027      	beq.n	800a34a <xQueueGenericSendFromISR+0x98>
							if( pxHigherPriorityTaskWoken != NULL )
 800a2fa:	9a01      	ldr	r2, [sp, #4]
 800a2fc:	2a00      	cmp	r2, #0
 800a2fe:	d002      	beq.n	800a306 <xQueueGenericSendFromISR+0x54>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a300:	2301      	movs	r3, #1
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	e021      	b.n	800a34a <xQueueGenericSendFromISR+0x98>
			xReturn = pdPASS;
 800a306:	2501      	movs	r5, #1
 800a308:	e01f      	b.n	800a34a <xQueueGenericSendFromISR+0x98>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a30a:	f000 ffd5 	bl	800b2b8 <ulSetInterruptMaskFromISR>
 800a30e:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a310:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800a312:	2345      	movs	r3, #69	; 0x45
 800a314:	5ce3      	ldrb	r3, [r4, r3]
 800a316:	b25b      	sxtb	r3, r3
 800a318:	4698      	mov	r8, r3
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a31a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a31c:	002a      	movs	r2, r5
 800a31e:	0039      	movs	r1, r7
 800a320:	0020      	movs	r0, r4
 800a322:	f7ff fe0e 	bl	8009f42 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a326:	4643      	mov	r3, r8
 800a328:	3301      	adds	r3, #1
 800a32a:	d0dc      	beq.n	800a2e6 <xQueueGenericSendFromISR+0x34>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a32c:	4643      	mov	r3, r8
 800a32e:	3301      	adds	r3, #1
 800a330:	b25b      	sxtb	r3, r3
 800a332:	2245      	movs	r2, #69	; 0x45
 800a334:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
 800a336:	2501      	movs	r5, #1
 800a338:	e007      	b.n	800a34a <xQueueGenericSendFromISR+0x98>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a33a:	f000 ffbd 	bl	800b2b8 <ulSetInterruptMaskFromISR>
 800a33e:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a340:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a342:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a344:	429a      	cmp	r2, r3
 800a346:	d3e4      	bcc.n	800a312 <xQueueGenericSendFromISR+0x60>
			xReturn = errQUEUE_FULL;
 800a348:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a34a:	0030      	movs	r0, r6
 800a34c:	f000 ffb8 	bl	800b2c0 <vClearInterruptMaskFromISR>
}
 800a350:	0028      	movs	r0, r5
 800a352:	b002      	add	sp, #8
 800a354:	bc80      	pop	{r7}
 800a356:	46b8      	mov	r8, r7
 800a358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a35a <xQueueReceive>:
{
 800a35a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a35c:	46ce      	mov	lr, r9
 800a35e:	4647      	mov	r7, r8
 800a360:	b580      	push	{r7, lr}
 800a362:	b085      	sub	sp, #20
 800a364:	1e04      	subs	r4, r0, #0
 800a366:	4688      	mov	r8, r1
 800a368:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a36a:	d00a      	beq.n	800a382 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a36c:	2900      	cmp	r1, #0
 800a36e:	d00a      	beq.n	800a386 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a370:	f000 fd12 	bl	800ad98 <xTaskGetSchedulerState>
 800a374:	2800      	cmp	r0, #0
 800a376:	d10b      	bne.n	800a390 <xQueueReceive+0x36>
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00d      	beq.n	800a39a <xQueueReceive+0x40>
 800a37e:	b672      	cpsid	i
 800a380:	e7fe      	b.n	800a380 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
 800a382:	b672      	cpsid	i
 800a384:	e7fe      	b.n	800a384 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a386:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d0f1      	beq.n	800a370 <xQueueReceive+0x16>
 800a38c:	b672      	cpsid	i
 800a38e:	e7fe      	b.n	800a38e <xQueueReceive+0x34>
 800a390:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800a392:	2544      	movs	r5, #68	; 0x44
 800a394:	2300      	movs	r3, #0
 800a396:	4699      	mov	r9, r3
 800a398:	e03b      	b.n	800a412 <xQueueReceive+0xb8>
 800a39a:	2700      	movs	r7, #0
 800a39c:	e7f9      	b.n	800a392 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a39e:	4641      	mov	r1, r8
 800a3a0:	0020      	movs	r0, r4
 800a3a2:	f7ff fe07 	bl	8009fb4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3a6:	1e73      	subs	r3, r6, #1
 800a3a8:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3aa:	6923      	ldr	r3, [r4, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d107      	bne.n	800a3c0 <xQueueReceive+0x66>
				taskEXIT_CRITICAL();
 800a3b0:	f000 ff72 	bl	800b298 <vPortExitCritical>
				return pdPASS;
 800a3b4:	2001      	movs	r0, #1
}
 800a3b6:	b005      	add	sp, #20
 800a3b8:	bcc0      	pop	{r6, r7}
 800a3ba:	46b9      	mov	r9, r7
 800a3bc:	46b0      	mov	r8, r6
 800a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3c0:	0020      	movs	r0, r4
 800a3c2:	3010      	adds	r0, #16
 800a3c4:	f000 fc62 	bl	800ac8c <xTaskRemoveFromEventList>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d0f1      	beq.n	800a3b0 <xQueueReceive+0x56>
						queueYIELD_IF_USING_PREEMPTION();
 800a3cc:	f000 ff4c 	bl	800b268 <vPortYield>
 800a3d0:	e7ee      	b.n	800a3b0 <xQueueReceive+0x56>
					taskEXIT_CRITICAL();
 800a3d2:	f000 ff61 	bl	800b298 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e7ed      	b.n	800a3b6 <xQueueReceive+0x5c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3da:	a802      	add	r0, sp, #8
 800a3dc:	f000 fc96 	bl	800ad0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3e0:	e021      	b.n	800a426 <xQueueReceive+0xcc>
		prvLockQueue( pxQueue );
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	5563      	strb	r3, [r4, r5]
 800a3e6:	e028      	b.n	800a43a <xQueueReceive+0xe0>
 800a3e8:	2345      	movs	r3, #69	; 0x45
 800a3ea:	464a      	mov	r2, r9
 800a3ec:	54e2      	strb	r2, [r4, r3]
 800a3ee:	e029      	b.n	800a444 <xQueueReceive+0xea>
				prvUnlockQueue( pxQueue );
 800a3f0:	0020      	movs	r0, r4
 800a3f2:	f7ff fdf1 	bl	8009fd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3f6:	f000 fb3b 	bl	800aa70 <xTaskResumeAll>
 800a3fa:	e009      	b.n	800a410 <xQueueReceive+0xb6>
			prvUnlockQueue( pxQueue );
 800a3fc:	0020      	movs	r0, r4
 800a3fe:	f7ff fdeb 	bl	8009fd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a402:	f000 fb35 	bl	800aa70 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a406:	0020      	movs	r0, r4
 800a408:	f7ff fd91 	bl	8009f2e <prvIsQueueEmpty>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d135      	bne.n	800a47c <xQueueReceive+0x122>
 800a410:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800a412:	f000 ff35 	bl	800b280 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a416:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a418:	2e00      	cmp	r6, #0
 800a41a:	d1c0      	bne.n	800a39e <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a41c:	9b01      	ldr	r3, [sp, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0d7      	beq.n	800a3d2 <xQueueReceive+0x78>
				else if( xEntryTimeSet == pdFALSE )
 800a422:	2f00      	cmp	r7, #0
 800a424:	d0d9      	beq.n	800a3da <xQueueReceive+0x80>
		taskEXIT_CRITICAL();
 800a426:	f000 ff37 	bl	800b298 <vPortExitCritical>
		vTaskSuspendAll();
 800a42a:	f000 fa79 	bl	800a920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a42e:	f000 ff27 	bl	800b280 <vPortEnterCritical>
 800a432:	5d63      	ldrb	r3, [r4, r5]
 800a434:	b25b      	sxtb	r3, r3
 800a436:	3301      	adds	r3, #1
 800a438:	d0d3      	beq.n	800a3e2 <xQueueReceive+0x88>
 800a43a:	2345      	movs	r3, #69	; 0x45
 800a43c:	5ce3      	ldrb	r3, [r4, r3]
 800a43e:	b25b      	sxtb	r3, r3
 800a440:	3301      	adds	r3, #1
 800a442:	d0d1      	beq.n	800a3e8 <xQueueReceive+0x8e>
 800a444:	f000 ff28 	bl	800b298 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a448:	a901      	add	r1, sp, #4
 800a44a:	a802      	add	r0, sp, #8
 800a44c:	f000 fc6a 	bl	800ad24 <xTaskCheckForTimeOut>
 800a450:	2800      	cmp	r0, #0
 800a452:	d1d3      	bne.n	800a3fc <xQueueReceive+0xa2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a454:	0020      	movs	r0, r4
 800a456:	f7ff fd6a 	bl	8009f2e <prvIsQueueEmpty>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d0c8      	beq.n	800a3f0 <xQueueReceive+0x96>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a45e:	9901      	ldr	r1, [sp, #4]
 800a460:	0020      	movs	r0, r4
 800a462:	3024      	adds	r0, #36	; 0x24
 800a464:	f000 fbe8 	bl	800ac38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a468:	0020      	movs	r0, r4
 800a46a:	f7ff fdb5 	bl	8009fd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a46e:	f000 faff 	bl	800aa70 <xTaskResumeAll>
 800a472:	2800      	cmp	r0, #0
 800a474:	d1cc      	bne.n	800a410 <xQueueReceive+0xb6>
					portYIELD_WITHIN_API();
 800a476:	f000 fef7 	bl	800b268 <vPortYield>
 800a47a:	e7c9      	b.n	800a410 <xQueueReceive+0xb6>
				return errQUEUE_EMPTY;
 800a47c:	2000      	movs	r0, #0
 800a47e:	e79a      	b.n	800a3b6 <xQueueReceive+0x5c>

0800a480 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a480:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a482:	4a08      	ldr	r2, [pc, #32]	; (800a4a4 <vQueueAddToRegistry+0x24>)
 800a484:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a486:	6814      	ldr	r4, [r2, #0]
 800a488:	2c00      	cmp	r4, #0
 800a48a:	d004      	beq.n	800a496 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a48c:	3301      	adds	r3, #1
 800a48e:	3208      	adds	r2, #8
 800a490:	2b08      	cmp	r3, #8
 800a492:	d1f8      	bne.n	800a486 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a494:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a496:	4a03      	ldr	r2, [pc, #12]	; (800a4a4 <vQueueAddToRegistry+0x24>)
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a49c:	18d2      	adds	r2, r2, r3
 800a49e:	6050      	str	r0, [r2, #4]
				break;
 800a4a0:	e7f8      	b.n	800a494 <vQueueAddToRegistry+0x14>
 800a4a2:	46c0      	nop			; (mov r8, r8)
 800a4a4:	20004d9c 	.word	0x20004d9c

0800a4a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	0004      	movs	r4, r0
 800a4ac:	000d      	movs	r5, r1
 800a4ae:	0016      	movs	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a4b0:	f000 fee6 	bl	800b280 <vPortEnterCritical>
 800a4b4:	2344      	movs	r3, #68	; 0x44
 800a4b6:	5ce3      	ldrb	r3, [r4, r3]
 800a4b8:	b25b      	sxtb	r3, r3
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	d00d      	beq.n	800a4da <vQueueWaitForMessageRestricted+0x32>
 800a4be:	2345      	movs	r3, #69	; 0x45
 800a4c0:	5ce3      	ldrb	r3, [r4, r3]
 800a4c2:	b25b      	sxtb	r3, r3
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	d00c      	beq.n	800a4e2 <vQueueWaitForMessageRestricted+0x3a>
 800a4c8:	f000 fee6 	bl	800b298 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a4cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <vQueueWaitForMessageRestricted+0x42>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a4d2:	0020      	movs	r0, r4
 800a4d4:	f7ff fd80 	bl	8009fd8 <prvUnlockQueue>
	}
 800a4d8:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800a4da:	2344      	movs	r3, #68	; 0x44
 800a4dc:	2200      	movs	r2, #0
 800a4de:	54e2      	strb	r2, [r4, r3]
 800a4e0:	e7ed      	b.n	800a4be <vQueueWaitForMessageRestricted+0x16>
 800a4e2:	2345      	movs	r3, #69	; 0x45
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	54e2      	strb	r2, [r4, r3]
 800a4e8:	e7ee      	b.n	800a4c8 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a4ea:	0020      	movs	r0, r4
 800a4ec:	3024      	adds	r0, #36	; 0x24
 800a4ee:	0032      	movs	r2, r6
 800a4f0:	0029      	movs	r1, r5
 800a4f2:	f000 fbb3 	bl	800ac5c <vTaskPlaceOnEventListRestricted>
 800a4f6:	e7ec      	b.n	800a4d2 <vQueueWaitForMessageRestricted+0x2a>

0800a4f8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4f8:	4b08      	ldr	r3, [pc, #32]	; (800a51c <prvResetNextTaskUnblockTime+0x24>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d104      	bne.n	800a50c <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a502:	4b07      	ldr	r3, [pc, #28]	; (800a520 <prvResetNextTaskUnblockTime+0x28>)
 800a504:	2201      	movs	r2, #1
 800a506:	4252      	negs	r2, r2
 800a508:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a50a:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a50c:	4b03      	ldr	r3, [pc, #12]	; (800a51c <prvResetNextTaskUnblockTime+0x24>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	4b02      	ldr	r3, [pc, #8]	; (800a520 <prvResetNextTaskUnblockTime+0x28>)
 800a518:	601a      	str	r2, [r3, #0]
}
 800a51a:	e7f6      	b.n	800a50a <prvResetNextTaskUnblockTime+0x12>
 800a51c:	20004de0 	.word	0x20004de0
 800a520:	20005284 	.word	0x20005284

0800a524 <prvInitialiseNewTask>:
{
 800a524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a526:	46d6      	mov	lr, sl
 800a528:	464f      	mov	r7, r9
 800a52a:	4646      	mov	r6, r8
 800a52c:	b5c0      	push	{r6, r7, lr}
 800a52e:	4681      	mov	r9, r0
 800a530:	000f      	movs	r7, r1
 800a532:	469a      	mov	sl, r3
 800a534:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a536:	0094      	lsls	r4, r2, #2
 800a538:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800a53a:	0022      	movs	r2, r4
 800a53c:	21a5      	movs	r1, #165	; 0xa5
 800a53e:	f002 ff57 	bl	800d3f0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a542:	3c04      	subs	r4, #4
 800a544:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a546:	191b      	adds	r3, r3, r4
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a548:	2207      	movs	r2, #7
 800a54a:	4393      	bics	r3, r2
 800a54c:	4698      	mov	r8, r3
	if( pcName != NULL )
 800a54e:	2f00      	cmp	r7, #0
 800a550:	d040      	beq.n	800a5d4 <prvInitialiseNewTask+0xb0>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a552:	2400      	movs	r4, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a554:	002b      	movs	r3, r5
 800a556:	3334      	adds	r3, #52	; 0x34
 800a558:	5d3e      	ldrb	r6, [r7, r4]
 800a55a:	551e      	strb	r6, [r3, r4]
			if( pcName[ x ] == ( char ) 0x00 )
 800a55c:	2e00      	cmp	r6, #0
 800a55e:	d002      	beq.n	800a566 <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a560:	3401      	adds	r4, #1
 800a562:	2c10      	cmp	r4, #16
 800a564:	d1f8      	bne.n	800a558 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a566:	2343      	movs	r3, #67	; 0x43
 800a568:	2200      	movs	r2, #0
 800a56a:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a56c:	9c08      	ldr	r4, [sp, #32]
 800a56e:	2c37      	cmp	r4, #55	; 0x37
 800a570:	d900      	bls.n	800a574 <prvInitialiseNewTask+0x50>
 800a572:	2437      	movs	r4, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a574:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a576:	64ec      	str	r4, [r5, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a578:	2600      	movs	r6, #0
 800a57a:	652e      	str	r6, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a57c:	1d28      	adds	r0, r5, #4
 800a57e:	f7ff fc9e 	bl	8009ebe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a582:	0028      	movs	r0, r5
 800a584:	3018      	adds	r0, #24
 800a586:	f7ff fc9a 	bl	8009ebe <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a58a:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a58c:	2338      	movs	r3, #56	; 0x38
 800a58e:	1b1b      	subs	r3, r3, r4
 800a590:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a592:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800a594:	23a0      	movs	r3, #160	; 0xa0
 800a596:	50ee      	str	r6, [r5, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a598:	3304      	adds	r3, #4
 800a59a:	54ee      	strb	r6, [r5, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a59c:	0028      	movs	r0, r5
 800a59e:	3054      	adds	r0, #84	; 0x54
 800a5a0:	224c      	movs	r2, #76	; 0x4c
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	f002 ff24 	bl	800d3f0 <memset>
 800a5a8:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <prvInitialiseNewTask+0xb8>)
 800a5aa:	65ab      	str	r3, [r5, #88]	; 0x58
 800a5ac:	001a      	movs	r2, r3
 800a5ae:	3268      	adds	r2, #104	; 0x68
 800a5b0:	65ea      	str	r2, [r5, #92]	; 0x5c
 800a5b2:	33d0      	adds	r3, #208	; 0xd0
 800a5b4:	662b      	str	r3, [r5, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5b6:	4652      	mov	r2, sl
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	f000 fe42 	bl	800b244 <pxPortInitialiseStack>
 800a5c0:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 800a5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d000      	beq.n	800a5ca <prvInitialiseNewTask+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5c8:	601d      	str	r5, [r3, #0]
}
 800a5ca:	bce0      	pop	{r5, r6, r7}
 800a5cc:	46ba      	mov	sl, r7
 800a5ce:	46b1      	mov	r9, r6
 800a5d0:	46a8      	mov	r8, r5
 800a5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5d4:	2334      	movs	r3, #52	; 0x34
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	54ea      	strb	r2, [r5, r3]
 800a5da:	e7c7      	b.n	800a56c <prvInitialiseNewTask+0x48>
 800a5dc:	2000602c 	.word	0x2000602c

0800a5e0 <prvAddNewTaskToReadyList>:
{
 800a5e0:	b570      	push	{r4, r5, r6, lr}
 800a5e2:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 800a5e4:	f000 fe4c 	bl	800b280 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800a5e8:	4a2e      	ldr	r2, [pc, #184]	; (800a6a4 <prvAddNewTaskToReadyList+0xc4>)
 800a5ea:	6813      	ldr	r3, [r2, #0]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5f0:	4b2d      	ldr	r3, [pc, #180]	; (800a6a8 <prvAddNewTaskToReadyList+0xc8>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00c      	beq.n	800a612 <prvAddNewTaskToReadyList+0x32>
			if( xSchedulerRunning == pdFALSE )
 800a5f8:	4b2c      	ldr	r3, [pc, #176]	; (800a6ac <prvAddNewTaskToReadyList+0xcc>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10d      	bne.n	800a61c <prvAddNewTaskToReadyList+0x3c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a600:	4b29      	ldr	r3, [pc, #164]	; (800a6a8 <prvAddNewTaskToReadyList+0xc8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a606:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a608:	429a      	cmp	r2, r3
 800a60a:	d807      	bhi.n	800a61c <prvAddNewTaskToReadyList+0x3c>
					pxCurrentTCB = pxNewTCB;
 800a60c:	4b26      	ldr	r3, [pc, #152]	; (800a6a8 <prvAddNewTaskToReadyList+0xc8>)
 800a60e:	601d      	str	r5, [r3, #0]
 800a610:	e004      	b.n	800a61c <prvAddNewTaskToReadyList+0x3c>
			pxCurrentTCB = pxNewTCB;
 800a612:	4b25      	ldr	r3, [pc, #148]	; (800a6a8 <prvAddNewTaskToReadyList+0xc8>)
 800a614:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a616:	6813      	ldr	r3, [r2, #0]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d020      	beq.n	800a65e <prvAddNewTaskToReadyList+0x7e>
		uxTaskNumber++;
 800a61c:	4a24      	ldr	r2, [pc, #144]	; (800a6b0 <prvAddNewTaskToReadyList+0xd0>)
 800a61e:	6813      	ldr	r3, [r2, #0]
 800a620:	3301      	adds	r3, #1
 800a622:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a624:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a626:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a628:	4a22      	ldr	r2, [pc, #136]	; (800a6b4 <prvAddNewTaskToReadyList+0xd4>)
 800a62a:	6812      	ldr	r2, [r2, #0]
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d901      	bls.n	800a634 <prvAddNewTaskToReadyList+0x54>
 800a630:	4a20      	ldr	r2, [pc, #128]	; (800a6b4 <prvAddNewTaskToReadyList+0xd4>)
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	1d29      	adds	r1, r5, #4
 800a636:	0098      	lsls	r0, r3, #2
 800a638:	18c0      	adds	r0, r0, r3
 800a63a:	0080      	lsls	r0, r0, #2
 800a63c:	4b1e      	ldr	r3, [pc, #120]	; (800a6b8 <prvAddNewTaskToReadyList+0xd8>)
 800a63e:	18c0      	adds	r0, r0, r3
 800a640:	f7ff fc40 	bl	8009ec4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a644:	f000 fe28 	bl	800b298 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a648:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <prvAddNewTaskToReadyList+0xcc>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a650:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <prvAddNewTaskToReadyList+0xc8>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a656:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a658:	429a      	cmp	r2, r3
 800a65a:	d320      	bcc.n	800a69e <prvAddNewTaskToReadyList+0xbe>
}
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
 800a65e:	4c16      	ldr	r4, [pc, #88]	; (800a6b8 <prvAddNewTaskToReadyList+0xd8>)
 800a660:	238c      	movs	r3, #140	; 0x8c
 800a662:	00db      	lsls	r3, r3, #3
 800a664:	18e6      	adds	r6, r4, r3
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a666:	0020      	movs	r0, r4
 800a668:	f7ff fc1e 	bl	8009ea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a66c:	3414      	adds	r4, #20
 800a66e:	42b4      	cmp	r4, r6
 800a670:	d1f9      	bne.n	800a666 <prvAddNewTaskToReadyList+0x86>
	vListInitialise( &xDelayedTaskList1 );
 800a672:	4e12      	ldr	r6, [pc, #72]	; (800a6bc <prvAddNewTaskToReadyList+0xdc>)
 800a674:	0030      	movs	r0, r6
 800a676:	f7ff fc17 	bl	8009ea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a67a:	4c11      	ldr	r4, [pc, #68]	; (800a6c0 <prvAddNewTaskToReadyList+0xe0>)
 800a67c:	0020      	movs	r0, r4
 800a67e:	f7ff fc13 	bl	8009ea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a682:	4810      	ldr	r0, [pc, #64]	; (800a6c4 <prvAddNewTaskToReadyList+0xe4>)
 800a684:	f7ff fc10 	bl	8009ea8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800a688:	480f      	ldr	r0, [pc, #60]	; (800a6c8 <prvAddNewTaskToReadyList+0xe8>)
 800a68a:	f7ff fc0d 	bl	8009ea8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800a68e:	480f      	ldr	r0, [pc, #60]	; (800a6cc <prvAddNewTaskToReadyList+0xec>)
 800a690:	f7ff fc0a 	bl	8009ea8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800a694:	4b0e      	ldr	r3, [pc, #56]	; (800a6d0 <prvAddNewTaskToReadyList+0xf0>)
 800a696:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a698:	4b0e      	ldr	r3, [pc, #56]	; (800a6d4 <prvAddNewTaskToReadyList+0xf4>)
 800a69a:	601c      	str	r4, [r3, #0]
}
 800a69c:	e7be      	b.n	800a61c <prvAddNewTaskToReadyList+0x3c>
			taskYIELD_IF_USING_PREEMPTION();
 800a69e:	f000 fde3 	bl	800b268 <vPortYield>
}
 800a6a2:	e7db      	b.n	800a65c <prvAddNewTaskToReadyList+0x7c>
 800a6a4:	20005248 	.word	0x20005248
 800a6a8:	20004ddc 	.word	0x20004ddc
 800a6ac:	200052a4 	.word	0x200052a4
 800a6b0:	20005254 	.word	0x20005254
 800a6b4:	20005258 	.word	0x20005258
 800a6b8:	20004de8 	.word	0x20004de8
 800a6bc:	2000525c 	.word	0x2000525c
 800a6c0:	20005270 	.word	0x20005270
 800a6c4:	20005290 	.word	0x20005290
 800a6c8:	200052bc 	.word	0x200052bc
 800a6cc:	200052a8 	.word	0x200052a8
 800a6d0:	20004de0 	.word	0x20004de0
 800a6d4:	20004de4 	.word	0x20004de4

0800a6d8 <prvDeleteTCB>:
	{
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a6dc:	3054      	adds	r0, #84	; 0x54
 800a6de:	f002 ff63 	bl	800d5a8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6e2:	23a5      	movs	r3, #165	; 0xa5
 800a6e4:	5ce3      	ldrb	r3, [r4, r3]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d005      	beq.n	800a6f6 <prvDeleteTCB+0x1e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d00a      	beq.n	800a704 <prvDeleteTCB+0x2c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d007      	beq.n	800a702 <prvDeleteTCB+0x2a>
 800a6f2:	b672      	cpsid	i
 800a6f4:	e7fe      	b.n	800a6f4 <prvDeleteTCB+0x1c>
				vPortFree( pxTCB->pxStack );
 800a6f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a6f8:	f000 ff12 	bl	800b520 <vPortFree>
				vPortFree( pxTCB );
 800a6fc:	0020      	movs	r0, r4
 800a6fe:	f000 ff0f 	bl	800b520 <vPortFree>
	}
 800a702:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800a704:	0020      	movs	r0, r4
 800a706:	f000 ff0b 	bl	800b520 <vPortFree>
 800a70a:	e7fa      	b.n	800a702 <prvDeleteTCB+0x2a>

0800a70c <prvIdleTask>:
{
 800a70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a70e:	46c6      	mov	lr, r8
 800a710:	b500      	push	{lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a712:	4b12      	ldr	r3, [pc, #72]	; (800a75c <prvIdleTask+0x50>)
 800a714:	4698      	mov	r8, r3
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a716:	4f12      	ldr	r7, [pc, #72]	; (800a760 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800a718:	4e12      	ldr	r6, [pc, #72]	; (800a764 <prvIdleTask+0x58>)
				--uxDeletedTasksWaitingCleanUp;
 800a71a:	001c      	movs	r4, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a71c:	4643      	mov	r3, r8
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d014      	beq.n	800a74e <prvIdleTask+0x42>
			taskENTER_CRITICAL();
 800a724:	f000 fdac 	bl	800b280 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a72c:	1d28      	adds	r0, r5, #4
 800a72e:	f7ff fbeb 	bl	8009f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a732:	6833      	ldr	r3, [r6, #0]
 800a734:	3b01      	subs	r3, #1
 800a736:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a73e:	f000 fdab 	bl	800b298 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a742:	0028      	movs	r0, r5
 800a744:	f7ff ffc8 	bl	800a6d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1ea      	bne.n	800a724 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a74e:	4b06      	ldr	r3, [pc, #24]	; (800a768 <prvIdleTask+0x5c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d9e2      	bls.n	800a71c <prvIdleTask+0x10>
				taskYIELD();
 800a756:	f000 fd87 	bl	800b268 <vPortYield>
 800a75a:	e7df      	b.n	800a71c <prvIdleTask+0x10>
 800a75c:	2000524c 	.word	0x2000524c
 800a760:	200052bc 	.word	0x200052bc
 800a764:	20005248 	.word	0x20005248
 800a768:	20004de8 	.word	0x20004de8

0800a76c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	0004      	movs	r4, r0
 800a770:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a772:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <prvAddCurrentTaskToDelayedList+0x64>)
 800a774:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a776:	4b17      	ldr	r3, [pc, #92]	; (800a7d4 <prvAddCurrentTaskToDelayedList+0x68>)
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	3004      	adds	r0, #4
 800a77c:	f7ff fbc4 	bl	8009f08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a780:	1c63      	adds	r3, r4, #1
 800a782:	d00d      	beq.n	800a7a0 <prvAddCurrentTaskToDelayedList+0x34>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a784:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a786:	4b13      	ldr	r3, [pc, #76]	; (800a7d4 <prvAddCurrentTaskToDelayedList+0x68>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a78c:	42a6      	cmp	r6, r4
 800a78e:	d910      	bls.n	800a7b2 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a790:	4b11      	ldr	r3, [pc, #68]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0x6c>)
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	4b0f      	ldr	r3, [pc, #60]	; (800a7d4 <prvAddCurrentTaskToDelayedList+0x68>)
 800a796:	6819      	ldr	r1, [r3, #0]
 800a798:	3104      	adds	r1, #4
 800a79a:	f7ff fb9e 	bl	8009eda <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7a0:	2d00      	cmp	r5, #0
 800a7a2:	d0ef      	beq.n	800a784 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7a4:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <prvAddCurrentTaskToDelayedList+0x68>)
 800a7a6:	6819      	ldr	r1, [r3, #0]
 800a7a8:	3104      	adds	r1, #4
 800a7aa:	480c      	ldr	r0, [pc, #48]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x70>)
 800a7ac:	f7ff fb8a 	bl	8009ec4 <vListInsertEnd>
 800a7b0:	e7f5      	b.n	800a79e <prvAddCurrentTaskToDelayedList+0x32>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7b2:	4b0b      	ldr	r3, [pc, #44]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x74>)
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <prvAddCurrentTaskToDelayedList+0x68>)
 800a7b8:	6819      	ldr	r1, [r3, #0]
 800a7ba:	3104      	adds	r1, #4
 800a7bc:	f7ff fb8d 	bl	8009eda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7c0:	4b08      	ldr	r3, [pc, #32]	; (800a7e4 <prvAddCurrentTaskToDelayedList+0x78>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	d9ea      	bls.n	800a79e <prvAddCurrentTaskToDelayedList+0x32>
					xNextTaskUnblockTime = xTimeToWake;
 800a7c8:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <prvAddCurrentTaskToDelayedList+0x78>)
 800a7ca:	601c      	str	r4, [r3, #0]
}
 800a7cc:	e7e7      	b.n	800a79e <prvAddCurrentTaskToDelayedList+0x32>
 800a7ce:	46c0      	nop			; (mov r8, r8)
 800a7d0:	200052d0 	.word	0x200052d0
 800a7d4:	20004ddc 	.word	0x20004ddc
 800a7d8:	20004de4 	.word	0x20004de4
 800a7dc:	200052a8 	.word	0x200052a8
 800a7e0:	20004de0 	.word	0x20004de0
 800a7e4:	20005284 	.word	0x20005284

0800a7e8 <xTaskCreateStatic>:
	{
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 800a7ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a7ee:	2c00      	cmp	r4, #0
 800a7f0:	d009      	beq.n	800a806 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800a7f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	d008      	beq.n	800a80a <xTaskCreateStatic+0x22>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a7f8:	24a8      	movs	r4, #168	; 0xa8
 800a7fa:	9404      	str	r4, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a7fc:	9c04      	ldr	r4, [sp, #16]
 800a7fe:	2ca8      	cmp	r4, #168	; 0xa8
 800a800:	d005      	beq.n	800a80e <xTaskCreateStatic+0x26>
 800a802:	b672      	cpsid	i
 800a804:	e7fe      	b.n	800a804 <xTaskCreateStatic+0x1c>
		configASSERT( puxStackBuffer != NULL );
 800a806:	b672      	cpsid	i
 800a808:	e7fe      	b.n	800a808 <xTaskCreateStatic+0x20>
		configASSERT( pxTaskBuffer != NULL );
 800a80a:	b672      	cpsid	i
 800a80c:	e7fe      	b.n	800a80c <xTaskCreateStatic+0x24>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a80e:	9c04      	ldr	r4, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a810:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a814:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a816:	24a5      	movs	r4, #165	; 0xa5
 800a818:	2502      	movs	r5, #2
 800a81a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a81c:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a81e:	2400      	movs	r4, #0
 800a820:	9403      	str	r4, [sp, #12]
 800a822:	9602      	str	r6, [sp, #8]
 800a824:	ac05      	add	r4, sp, #20
 800a826:	9401      	str	r4, [sp, #4]
 800a828:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a82a:	9400      	str	r4, [sp, #0]
 800a82c:	f7ff fe7a 	bl	800a524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a830:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a832:	f7ff fed5 	bl	800a5e0 <prvAddNewTaskToReadyList>
		return xReturn;
 800a836:	9805      	ldr	r0, [sp, #20]
	}
 800a838:	b006      	add	sp, #24
 800a83a:	bd70      	pop	{r4, r5, r6, pc}

0800a83c <xTaskCreate>:
	{
 800a83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a83e:	b087      	sub	sp, #28
 800a840:	9004      	str	r0, [sp, #16]
 800a842:	9105      	str	r1, [sp, #20]
 800a844:	0016      	movs	r6, r2
 800a846:	001f      	movs	r7, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a848:	0090      	lsls	r0, r2, #2
 800a84a:	f000 fddb 	bl	800b404 <pvPortMalloc>
 800a84e:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 800a850:	d01f      	beq.n	800a892 <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a852:	20a8      	movs	r0, #168	; 0xa8
 800a854:	f000 fdd6 	bl	800b404 <pvPortMalloc>
 800a858:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 800a85a:	d014      	beq.n	800a886 <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
 800a85c:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a85e:	2300      	movs	r3, #0
 800a860:	22a5      	movs	r2, #165	; 0xa5
 800a862:	5483      	strb	r3, [r0, r2]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a864:	9303      	str	r3, [sp, #12]
 800a866:	9002      	str	r0, [sp, #8]
 800a868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	003b      	movs	r3, r7
 800a872:	0032      	movs	r2, r6
 800a874:	9905      	ldr	r1, [sp, #20]
 800a876:	9804      	ldr	r0, [sp, #16]
 800a878:	f7ff fe54 	bl	800a524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a87c:	0028      	movs	r0, r5
 800a87e:	f7ff feaf 	bl	800a5e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a882:	2001      	movs	r0, #1
 800a884:	e007      	b.n	800a896 <xTaskCreate+0x5a>
					vPortFree( pxStack );
 800a886:	0020      	movs	r0, r4
 800a888:	f000 fe4a 	bl	800b520 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a88c:	2001      	movs	r0, #1
 800a88e:	4240      	negs	r0, r0
 800a890:	e001      	b.n	800a896 <xTaskCreate+0x5a>
 800a892:	2001      	movs	r0, #1
 800a894:	4240      	negs	r0, r0
	}
 800a896:	b007      	add	sp, #28
 800a898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a89c <vTaskStartScheduler>:
{
 800a89c:	b510      	push	{r4, lr}
 800a89e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8a0:	2400      	movs	r4, #0
 800a8a2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8a4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8a6:	aa07      	add	r2, sp, #28
 800a8a8:	a906      	add	r1, sp, #24
 800a8aa:	a805      	add	r0, sp, #20
 800a8ac:	f7ff fae4 	bl	8009e78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8b0:	9a07      	ldr	r2, [sp, #28]
 800a8b2:	4914      	ldr	r1, [pc, #80]	; (800a904 <vTaskStartScheduler+0x68>)
 800a8b4:	4814      	ldr	r0, [pc, #80]	; (800a908 <vTaskStartScheduler+0x6c>)
 800a8b6:	9b05      	ldr	r3, [sp, #20]
 800a8b8:	9302      	str	r3, [sp, #8]
 800a8ba:	9b06      	ldr	r3, [sp, #24]
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	9400      	str	r4, [sp, #0]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f7ff ff91 	bl	800a7e8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d019      	beq.n	800a8fe <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800a8ca:	f000 fb0b 	bl	800aee4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a8ce:	2801      	cmp	r0, #1
 800a8d0:	d003      	beq.n	800a8da <vTaskStartScheduler+0x3e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	d113      	bne.n	800a8fe <vTaskStartScheduler+0x62>
 800a8d6:	b672      	cpsid	i
 800a8d8:	e7fe      	b.n	800a8d8 <vTaskStartScheduler+0x3c>
		portDISABLE_INTERRUPTS();
 800a8da:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8dc:	4b0b      	ldr	r3, [pc, #44]	; (800a90c <vTaskStartScheduler+0x70>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a0b      	ldr	r2, [pc, #44]	; (800a910 <vTaskStartScheduler+0x74>)
 800a8e2:	3354      	adds	r3, #84	; 0x54
 800a8e4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8e6:	4b0b      	ldr	r3, [pc, #44]	; (800a914 <vTaskStartScheduler+0x78>)
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	4252      	negs	r2, r2
 800a8ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8ee:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <vTaskStartScheduler+0x7c>)
 800a8f0:	3202      	adds	r2, #2
 800a8f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8f4:	4b09      	ldr	r3, [pc, #36]	; (800a91c <vTaskStartScheduler+0x80>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a8fa:	f000 fd37 	bl	800b36c <xPortStartScheduler>
}
 800a8fe:	b008      	add	sp, #32
 800a900:	bd10      	pop	{r4, pc}
 800a902:	46c0      	nop			; (mov r8, r8)
 800a904:	08011fb8 	.word	0x08011fb8
 800a908:	0800a70d 	.word	0x0800a70d
 800a90c:	20004ddc 	.word	0x20004ddc
 800a910:	200001f4 	.word	0x200001f4
 800a914:	20005284 	.word	0x20005284
 800a918:	200052a4 	.word	0x200052a4
 800a91c:	200052d0 	.word	0x200052d0

0800a920 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a920:	4a02      	ldr	r2, [pc, #8]	; (800a92c <vTaskSuspendAll+0xc>)
 800a922:	6813      	ldr	r3, [r2, #0]
 800a924:	3301      	adds	r3, #1
 800a926:	6013      	str	r3, [r2, #0]
}
 800a928:	4770      	bx	lr
 800a92a:	46c0      	nop			; (mov r8, r8)
 800a92c:	20005250 	.word	0x20005250

0800a930 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a930:	4b01      	ldr	r3, [pc, #4]	; (800a938 <xTaskGetTickCount+0x8>)
 800a932:	6818      	ldr	r0, [r3, #0]
}
 800a934:	4770      	bx	lr
 800a936:	46c0      	nop			; (mov r8, r8)
 800a938:	200052d0 	.word	0x200052d0

0800a93c <xTaskIncrementTick>:
{
 800a93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a93e:	46d6      	mov	lr, sl
 800a940:	464f      	mov	r7, r9
 800a942:	4646      	mov	r6, r8
 800a944:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a946:	4b3f      	ldr	r3, [pc, #252]	; (800aa44 <xTaskIncrementTick+0x108>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d16f      	bne.n	800aa2e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a94e:	4b3e      	ldr	r3, [pc, #248]	; (800aa48 <xTaskIncrementTick+0x10c>)
 800a950:	681d      	ldr	r5, [r3, #0]
 800a952:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a954:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a956:	2d00      	cmp	r5, #0
 800a958:	d112      	bne.n	800a980 <xTaskIncrementTick+0x44>
			taskSWITCH_DELAYED_LISTS();
 800a95a:	4b3c      	ldr	r3, [pc, #240]	; (800aa4c <xTaskIncrementTick+0x110>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <xTaskIncrementTick+0x2c>
 800a964:	b672      	cpsid	i
 800a966:	e7fe      	b.n	800a966 <xTaskIncrementTick+0x2a>
 800a968:	4a38      	ldr	r2, [pc, #224]	; (800aa4c <xTaskIncrementTick+0x110>)
 800a96a:	6811      	ldr	r1, [r2, #0]
 800a96c:	4b38      	ldr	r3, [pc, #224]	; (800aa50 <xTaskIncrementTick+0x114>)
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	6010      	str	r0, [r2, #0]
 800a972:	6019      	str	r1, [r3, #0]
 800a974:	4a37      	ldr	r2, [pc, #220]	; (800aa54 <xTaskIncrementTick+0x118>)
 800a976:	6813      	ldr	r3, [r2, #0]
 800a978:	3301      	adds	r3, #1
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	f7ff fdbc 	bl	800a4f8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a980:	4b35      	ldr	r3, [pc, #212]	; (800aa58 <xTaskIncrementTick+0x11c>)
 800a982:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a984:	2700      	movs	r7, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a986:	42ab      	cmp	r3, r5
 800a988:	d83d      	bhi.n	800aa06 <xTaskIncrementTick+0xca>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a98a:	4b30      	ldr	r3, [pc, #192]	; (800aa4c <xTaskIncrementTick+0x110>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d033      	beq.n	800a9fc <xTaskIncrementTick+0xc0>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a994:	4b2d      	ldr	r3, [pc, #180]	; (800aa4c <xTaskIncrementTick+0x110>)
 800a996:	4698      	mov	r8, r3
					prvAddTaskToReadyList( pxTCB );
 800a998:	4b30      	ldr	r3, [pc, #192]	; (800aa5c <xTaskIncrementTick+0x120>)
 800a99a:	4699      	mov	r9, r3
 800a99c:	469a      	mov	sl, r3
 800a99e:	e004      	b.n	800a9aa <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9a0:	4b2a      	ldr	r3, [pc, #168]	; (800aa4c <xTaskIncrementTick+0x110>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d029      	beq.n	800a9fe <xTaskIncrementTick+0xc2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9aa:	4643      	mov	r3, r8
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9b2:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800a9b4:	429d      	cmp	r5, r3
 800a9b6:	d337      	bcc.n	800aa28 <xTaskIncrementTick+0xec>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9b8:	1d26      	adds	r6, r4, #4
 800a9ba:	0030      	movs	r0, r6
 800a9bc:	f7ff faa4 	bl	8009f08 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d003      	beq.n	800a9ce <xTaskIncrementTick+0x92>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9c6:	0020      	movs	r0, r4
 800a9c8:	3018      	adds	r0, #24
 800a9ca:	f7ff fa9d 	bl	8009f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9d0:	464a      	mov	r2, r9
 800a9d2:	6812      	ldr	r2, [r2, #0]
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d901      	bls.n	800a9dc <xTaskIncrementTick+0xa0>
 800a9d8:	4652      	mov	r2, sl
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	0098      	lsls	r0, r3, #2
 800a9de:	18c0      	adds	r0, r0, r3
 800a9e0:	0080      	lsls	r0, r0, #2
 800a9e2:	4b1f      	ldr	r3, [pc, #124]	; (800aa60 <xTaskIncrementTick+0x124>)
 800a9e4:	18c0      	adds	r0, r0, r3
 800a9e6:	0031      	movs	r1, r6
 800a9e8:	f7ff fa6c 	bl	8009ec4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9ec:	4b1d      	ldr	r3, [pc, #116]	; (800aa64 <xTaskIncrementTick+0x128>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d3d3      	bcc.n	800a9a0 <xTaskIncrementTick+0x64>
							xSwitchRequired = pdTRUE;
 800a9f8:	2701      	movs	r7, #1
 800a9fa:	e7d1      	b.n	800a9a0 <xTaskIncrementTick+0x64>
BaseType_t xSwitchRequired = pdFALSE;
 800a9fc:	2700      	movs	r7, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9fe:	4b16      	ldr	r3, [pc, #88]	; (800aa58 <xTaskIncrementTick+0x11c>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	4252      	negs	r2, r2
 800aa04:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa06:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <xTaskIncrementTick+0x128>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa0c:	4a14      	ldr	r2, [pc, #80]	; (800aa60 <xTaskIncrementTick+0x124>)
 800aa0e:	008b      	lsls	r3, r1, #2
 800aa10:	185b      	adds	r3, r3, r1
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	589b      	ldr	r3, [r3, r2]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d900      	bls.n	800aa1c <xTaskIncrementTick+0xe0>
				xSwitchRequired = pdTRUE;
 800aa1a:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800aa1c:	4b12      	ldr	r3, [pc, #72]	; (800aa68 <xTaskIncrementTick+0x12c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <xTaskIncrementTick+0xfc>
				xSwitchRequired = pdTRUE;
 800aa24:	2701      	movs	r7, #1
 800aa26:	e007      	b.n	800aa38 <xTaskIncrementTick+0xfc>
						xNextTaskUnblockTime = xItemValue;
 800aa28:	4a0b      	ldr	r2, [pc, #44]	; (800aa58 <xTaskIncrementTick+0x11c>)
 800aa2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa2c:	e7eb      	b.n	800aa06 <xTaskIncrementTick+0xca>
		++xPendedTicks;
 800aa2e:	4a0f      	ldr	r2, [pc, #60]	; (800aa6c <xTaskIncrementTick+0x130>)
 800aa30:	6813      	ldr	r3, [r2, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800aa36:	2700      	movs	r7, #0
}
 800aa38:	0038      	movs	r0, r7
 800aa3a:	bce0      	pop	{r5, r6, r7}
 800aa3c:	46ba      	mov	sl, r7
 800aa3e:	46b1      	mov	r9, r6
 800aa40:	46a8      	mov	r8, r5
 800aa42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa44:	20005250 	.word	0x20005250
 800aa48:	200052d0 	.word	0x200052d0
 800aa4c:	20004de0 	.word	0x20004de0
 800aa50:	20004de4 	.word	0x20004de4
 800aa54:	20005288 	.word	0x20005288
 800aa58:	20005284 	.word	0x20005284
 800aa5c:	20005258 	.word	0x20005258
 800aa60:	20004de8 	.word	0x20004de8
 800aa64:	20004ddc 	.word	0x20004ddc
 800aa68:	200052d4 	.word	0x200052d4
 800aa6c:	2000528c 	.word	0x2000528c

0800aa70 <xTaskResumeAll>:
{
 800aa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa72:	46c6      	mov	lr, r8
 800aa74:	b500      	push	{lr}
	configASSERT( uxSchedulerSuspended );
 800aa76:	4b32      	ldr	r3, [pc, #200]	; (800ab40 <xTaskResumeAll+0xd0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <xTaskResumeAll+0x12>
 800aa7e:	b672      	cpsid	i
 800aa80:	e7fe      	b.n	800aa80 <xTaskResumeAll+0x10>
	taskENTER_CRITICAL();
 800aa82:	f000 fbfd 	bl	800b280 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800aa86:	4b2e      	ldr	r3, [pc, #184]	; (800ab40 <xTaskResumeAll+0xd0>)
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	3a01      	subs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa8e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa90:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d141      	bne.n	800ab1a <xTaskResumeAll+0xaa>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa96:	4b2b      	ldr	r3, [pc, #172]	; (800ab44 <xTaskResumeAll+0xd4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d03d      	beq.n	800ab1a <xTaskResumeAll+0xaa>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa9e:	4b2a      	ldr	r3, [pc, #168]	; (800ab48 <xTaskResumeAll+0xd8>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d045      	beq.n	800ab32 <xTaskResumeAll+0xc2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa6:	4f28      	ldr	r7, [pc, #160]	; (800ab48 <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 800aaa8:	4e28      	ldr	r6, [pc, #160]	; (800ab4c <xTaskResumeAll+0xdc>)
 800aaaa:	46b0      	mov	r8, r6
 800aaac:	e003      	b.n	800aab6 <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaae:	4b26      	ldr	r3, [pc, #152]	; (800ab48 <xTaskResumeAll+0xd8>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d03b      	beq.n	800ab2e <xTaskResumeAll+0xbe>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaba:	0020      	movs	r0, r4
 800aabc:	3018      	adds	r0, #24
 800aabe:	f7ff fa23 	bl	8009f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aac2:	1d25      	adds	r5, r4, #4
 800aac4:	0028      	movs	r0, r5
 800aac6:	f7ff fa1f 	bl	8009f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aaca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aacc:	6832      	ldr	r2, [r6, #0]
 800aace:	4293      	cmp	r3, r2
 800aad0:	d901      	bls.n	800aad6 <xTaskResumeAll+0x66>
 800aad2:	4642      	mov	r2, r8
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	0098      	lsls	r0, r3, #2
 800aad8:	18c0      	adds	r0, r0, r3
 800aada:	0080      	lsls	r0, r0, #2
 800aadc:	4b1c      	ldr	r3, [pc, #112]	; (800ab50 <xTaskResumeAll+0xe0>)
 800aade:	18c0      	adds	r0, r0, r3
 800aae0:	0029      	movs	r1, r5
 800aae2:	f7ff f9ef 	bl	8009ec4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aae6:	4b1b      	ldr	r3, [pc, #108]	; (800ab54 <xTaskResumeAll+0xe4>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d3dd      	bcc.n	800aaae <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800aaf2:	4b19      	ldr	r3, [pc, #100]	; (800ab58 <xTaskResumeAll+0xe8>)
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	e7d9      	b.n	800aaae <xTaskResumeAll+0x3e>
							--xPendedCounts;
 800aafa:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aafc:	2c00      	cmp	r4, #0
 800aafe:	d005      	beq.n	800ab0c <xTaskResumeAll+0x9c>
							if( xTaskIncrementTick() != pdFALSE )
 800ab00:	f7ff ff1c 	bl	800a93c <xTaskIncrementTick>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d0f8      	beq.n	800aafa <xTaskResumeAll+0x8a>
								xYieldPending = pdTRUE;
 800ab08:	6035      	str	r5, [r6, #0]
 800ab0a:	e7f6      	b.n	800aafa <xTaskResumeAll+0x8a>
						xPendedTicks = 0;
 800ab0c:	4b13      	ldr	r3, [pc, #76]	; (800ab5c <xTaskResumeAll+0xec>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800ab12:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <xTaskResumeAll+0xe8>)
 800ab14:	681c      	ldr	r4, [r3, #0]
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d105      	bne.n	800ab26 <xTaskResumeAll+0xb6>
	taskEXIT_CRITICAL();
 800ab1a:	f000 fbbd 	bl	800b298 <vPortExitCritical>
}
 800ab1e:	0020      	movs	r0, r4
 800ab20:	bc80      	pop	{r7}
 800ab22:	46b8      	mov	r8, r7
 800ab24:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800ab26:	f000 fb9f 	bl	800b268 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800ab2a:	2401      	movs	r4, #1
 800ab2c:	e7f5      	b.n	800ab1a <xTaskResumeAll+0xaa>
					prvResetNextTaskUnblockTime();
 800ab2e:	f7ff fce3 	bl	800a4f8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab32:	4b0a      	ldr	r3, [pc, #40]	; (800ab5c <xTaskResumeAll+0xec>)
 800ab34:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800ab36:	2c00      	cmp	r4, #0
 800ab38:	d0eb      	beq.n	800ab12 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800ab3a:	4e07      	ldr	r6, [pc, #28]	; (800ab58 <xTaskResumeAll+0xe8>)
 800ab3c:	2501      	movs	r5, #1
 800ab3e:	e7df      	b.n	800ab00 <xTaskResumeAll+0x90>
 800ab40:	20005250 	.word	0x20005250
 800ab44:	20005248 	.word	0x20005248
 800ab48:	20005290 	.word	0x20005290
 800ab4c:	20005258 	.word	0x20005258
 800ab50:	20004de8 	.word	0x20004de8
 800ab54:	20004ddc 	.word	0x20004ddc
 800ab58:	200052d4 	.word	0x200052d4
 800ab5c:	2000528c 	.word	0x2000528c

0800ab60 <vTaskDelay>:
	{
 800ab60:	b510      	push	{r4, lr}
 800ab62:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab64:	d00f      	beq.n	800ab86 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
 800ab66:	4b09      	ldr	r3, [pc, #36]	; (800ab8c <vTaskDelay+0x2c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <vTaskDelay+0x12>
 800ab6e:	b672      	cpsid	i
 800ab70:	e7fe      	b.n	800ab70 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800ab72:	f7ff fed5 	bl	800a920 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab76:	2100      	movs	r1, #0
 800ab78:	0020      	movs	r0, r4
 800ab7a:	f7ff fdf7 	bl	800a76c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ab7e:	f7ff ff77 	bl	800aa70 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d101      	bne.n	800ab8a <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 800ab86:	f000 fb6f 	bl	800b268 <vPortYield>
	}
 800ab8a:	bd10      	pop	{r4, pc}
 800ab8c:	20005250 	.word	0x20005250

0800ab90 <vTaskSwitchContext>:
{
 800ab90:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab92:	4b23      	ldr	r3, [pc, #140]	; (800ac20 <vTaskSwitchContext+0x90>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800ab9a:	4b22      	ldr	r3, [pc, #136]	; (800ac24 <vTaskSwitchContext+0x94>)
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	601a      	str	r2, [r3, #0]
}
 800aba0:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800aba2:	4b20      	ldr	r3, [pc, #128]	; (800ac24 <vTaskSwitchContext+0x94>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aba8:	4b1f      	ldr	r3, [pc, #124]	; (800ac28 <vTaskSwitchContext+0x98>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	491f      	ldr	r1, [pc, #124]	; (800ac2c <vTaskSwitchContext+0x9c>)
 800abae:	0093      	lsls	r3, r2, #2
 800abb0:	189b      	adds	r3, r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	585b      	ldr	r3, [r3, r1]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10c      	bne.n	800abd4 <vTaskSwitchContext+0x44>
 800abba:	2a00      	cmp	r2, #0
 800abbc:	d008      	beq.n	800abd0 <vTaskSwitchContext+0x40>
 800abbe:	3a01      	subs	r2, #1
 800abc0:	0093      	lsls	r3, r2, #2
 800abc2:	189b      	adds	r3, r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	585b      	ldr	r3, [r3, r1]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d103      	bne.n	800abd4 <vTaskSwitchContext+0x44>
 800abcc:	2a00      	cmp	r2, #0
 800abce:	d1f6      	bne.n	800abbe <vTaskSwitchContext+0x2e>
 800abd0:	b672      	cpsid	i
 800abd2:	e7fe      	b.n	800abd2 <vTaskSwitchContext+0x42>
 800abd4:	4815      	ldr	r0, [pc, #84]	; (800ac2c <vTaskSwitchContext+0x9c>)
 800abd6:	0093      	lsls	r3, r2, #2
 800abd8:	1899      	adds	r1, r3, r2
 800abda:	0089      	lsls	r1, r1, #2
 800abdc:	1841      	adds	r1, r0, r1
 800abde:	684c      	ldr	r4, [r1, #4]
 800abe0:	6864      	ldr	r4, [r4, #4]
 800abe2:	604c      	str	r4, [r1, #4]
 800abe4:	189b      	adds	r3, r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	3308      	adds	r3, #8
 800abea:	181b      	adds	r3, r3, r0
 800abec:	429c      	cmp	r4, r3
 800abee:	d00f      	beq.n	800ac10 <vTaskSwitchContext+0x80>
 800abf0:	4b0e      	ldr	r3, [pc, #56]	; (800ac2c <vTaskSwitchContext+0x9c>)
 800abf2:	0091      	lsls	r1, r2, #2
 800abf4:	1889      	adds	r1, r1, r2
 800abf6:	0089      	lsls	r1, r1, #2
 800abf8:	185b      	adds	r3, r3, r1
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	68d9      	ldr	r1, [r3, #12]
 800abfe:	4b0c      	ldr	r3, [pc, #48]	; (800ac30 <vTaskSwitchContext+0xa0>)
 800ac00:	6019      	str	r1, [r3, #0]
 800ac02:	4909      	ldr	r1, [pc, #36]	; (800ac28 <vTaskSwitchContext+0x98>)
 800ac04:	600a      	str	r2, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a0a      	ldr	r2, [pc, #40]	; (800ac34 <vTaskSwitchContext+0xa4>)
 800ac0a:	3354      	adds	r3, #84	; 0x54
 800ac0c:	6013      	str	r3, [r2, #0]
}
 800ac0e:	e7c7      	b.n	800aba0 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac10:	6860      	ldr	r0, [r4, #4]
 800ac12:	4b06      	ldr	r3, [pc, #24]	; (800ac2c <vTaskSwitchContext+0x9c>)
 800ac14:	0091      	lsls	r1, r2, #2
 800ac16:	1889      	adds	r1, r1, r2
 800ac18:	0089      	lsls	r1, r1, #2
 800ac1a:	185b      	adds	r3, r3, r1
 800ac1c:	6058      	str	r0, [r3, #4]
 800ac1e:	e7e7      	b.n	800abf0 <vTaskSwitchContext+0x60>
 800ac20:	20005250 	.word	0x20005250
 800ac24:	200052d4 	.word	0x200052d4
 800ac28:	20005258 	.word	0x20005258
 800ac2c:	20004de8 	.word	0x20004de8
 800ac30:	20004ddc 	.word	0x20004ddc
 800ac34:	200001f4 	.word	0x200001f4

0800ac38 <vTaskPlaceOnEventList>:
{
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d009      	beq.n	800ac54 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac40:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <vTaskPlaceOnEventList+0x20>)
 800ac42:	6819      	ldr	r1, [r3, #0]
 800ac44:	3118      	adds	r1, #24
 800ac46:	f7ff f948 	bl	8009eda <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac4a:	2101      	movs	r1, #1
 800ac4c:	0020      	movs	r0, r4
 800ac4e:	f7ff fd8d 	bl	800a76c <prvAddCurrentTaskToDelayedList>
}
 800ac52:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 800ac54:	b672      	cpsid	i
 800ac56:	e7fe      	b.n	800ac56 <vTaskPlaceOnEventList+0x1e>
 800ac58:	20004ddc 	.word	0x20004ddc

0800ac5c <vTaskPlaceOnEventListRestricted>:
	{
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	000d      	movs	r5, r1
 800ac60:	0014      	movs	r4, r2
		configASSERT( pxEventList );
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d00d      	beq.n	800ac82 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac66:	4b08      	ldr	r3, [pc, #32]	; (800ac88 <vTaskPlaceOnEventListRestricted+0x2c>)
 800ac68:	6819      	ldr	r1, [r3, #0]
 800ac6a:	3118      	adds	r1, #24
 800ac6c:	f7ff f92a 	bl	8009ec4 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800ac70:	2c00      	cmp	r4, #0
 800ac72:	d001      	beq.n	800ac78 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
 800ac74:	2501      	movs	r5, #1
 800ac76:	426d      	negs	r5, r5
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac78:	0021      	movs	r1, r4
 800ac7a:	0028      	movs	r0, r5
 800ac7c:	f7ff fd76 	bl	800a76c <prvAddCurrentTaskToDelayedList>
	}
 800ac80:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800ac82:	b672      	cpsid	i
 800ac84:	e7fe      	b.n	800ac84 <vTaskPlaceOnEventListRestricted+0x28>
 800ac86:	46c0      	nop			; (mov r8, r8)
 800ac88:	20004ddc 	.word	0x20004ddc

0800ac8c <xTaskRemoveFromEventList>:
{
 800ac8c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac8e:	68c3      	ldr	r3, [r0, #12]
 800ac90:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ac92:	2c00      	cmp	r4, #0
 800ac94:	d027      	beq.n	800ace6 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac96:	0025      	movs	r5, r4
 800ac98:	3518      	adds	r5, #24
 800ac9a:	0028      	movs	r0, r5
 800ac9c:	f7ff f934 	bl	8009f08 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca0:	4b14      	ldr	r3, [pc, #80]	; (800acf4 <xTaskRemoveFromEventList+0x68>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d120      	bne.n	800acea <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aca8:	1d25      	adds	r5, r4, #4
 800acaa:	0028      	movs	r0, r5
 800acac:	f7ff f92c 	bl	8009f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800acb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800acb2:	4a11      	ldr	r2, [pc, #68]	; (800acf8 <xTaskRemoveFromEventList+0x6c>)
 800acb4:	6812      	ldr	r2, [r2, #0]
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d901      	bls.n	800acbe <xTaskRemoveFromEventList+0x32>
 800acba:	4a0f      	ldr	r2, [pc, #60]	; (800acf8 <xTaskRemoveFromEventList+0x6c>)
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	0098      	lsls	r0, r3, #2
 800acc0:	18c0      	adds	r0, r0, r3
 800acc2:	0080      	lsls	r0, r0, #2
 800acc4:	4b0d      	ldr	r3, [pc, #52]	; (800acfc <xTaskRemoveFromEventList+0x70>)
 800acc6:	18c0      	adds	r0, r0, r3
 800acc8:	0029      	movs	r1, r5
 800acca:	f7ff f8fb 	bl	8009ec4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acce:	4b0c      	ldr	r3, [pc, #48]	; (800ad00 <xTaskRemoveFromEventList+0x74>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800acd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800acd6:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acd8:	429a      	cmp	r2, r3
 800acda:	d903      	bls.n	800ace4 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800acdc:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <xTaskRemoveFromEventList+0x78>)
 800acde:	2201      	movs	r2, #1
 800ace0:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ace2:	3001      	adds	r0, #1
}
 800ace4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800ace6:	b672      	cpsid	i
 800ace8:	e7fe      	b.n	800ace8 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acea:	4807      	ldr	r0, [pc, #28]	; (800ad08 <xTaskRemoveFromEventList+0x7c>)
 800acec:	0029      	movs	r1, r5
 800acee:	f7ff f8e9 	bl	8009ec4 <vListInsertEnd>
 800acf2:	e7ec      	b.n	800acce <xTaskRemoveFromEventList+0x42>
 800acf4:	20005250 	.word	0x20005250
 800acf8:	20005258 	.word	0x20005258
 800acfc:	20004de8 	.word	0x20004de8
 800ad00:	20004ddc 	.word	0x20004ddc
 800ad04:	200052d4 	.word	0x200052d4
 800ad08:	20005290 	.word	0x20005290

0800ad0c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad0c:	4b03      	ldr	r3, [pc, #12]	; (800ad1c <vTaskInternalSetTimeOutState+0x10>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad12:	4b03      	ldr	r3, [pc, #12]	; (800ad20 <vTaskInternalSetTimeOutState+0x14>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6043      	str	r3, [r0, #4]
}
 800ad18:	4770      	bx	lr
 800ad1a:	46c0      	nop			; (mov r8, r8)
 800ad1c:	20005288 	.word	0x20005288
 800ad20:	200052d0 	.word	0x200052d0

0800ad24 <xTaskCheckForTimeOut>:
{
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	0004      	movs	r4, r0
 800ad28:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d018      	beq.n	800ad60 <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTicksToWait );
 800ad2e:	2900      	cmp	r1, #0
 800ad30:	d018      	beq.n	800ad64 <xTaskCheckForTimeOut+0x40>
	taskENTER_CRITICAL();
 800ad32:	f000 faa5 	bl	800b280 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ad36:	4b13      	ldr	r3, [pc, #76]	; (800ad84 <xTaskCheckForTimeOut+0x60>)
 800ad38:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ad3a:	682b      	ldr	r3, [r5, #0]
 800ad3c:	1c59      	adds	r1, r3, #1
 800ad3e:	d01b      	beq.n	800ad78 <xTaskCheckForTimeOut+0x54>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad40:	6861      	ldr	r1, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad42:	4811      	ldr	r0, [pc, #68]	; (800ad88 <xTaskCheckForTimeOut+0x64>)
 800ad44:	6800      	ldr	r0, [r0, #0]
 800ad46:	6826      	ldr	r6, [r4, #0]
 800ad48:	4286      	cmp	r6, r0
 800ad4a:	d002      	beq.n	800ad52 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 800ad4c:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad4e:	4291      	cmp	r1, r2
 800ad50:	d913      	bls.n	800ad7a <xTaskCheckForTimeOut+0x56>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad52:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad54:	4283      	cmp	r3, r0
 800ad56:	d807      	bhi.n	800ad68 <xTaskCheckForTimeOut+0x44>
			*pxTicksToWait = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800ad5c:	2601      	movs	r6, #1
 800ad5e:	e00c      	b.n	800ad7a <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTimeOut );
 800ad60:	b672      	cpsid	i
 800ad62:	e7fe      	b.n	800ad62 <xTaskCheckForTimeOut+0x3e>
	configASSERT( pxTicksToWait );
 800ad64:	b672      	cpsid	i
 800ad66:	e7fe      	b.n	800ad66 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= xElapsedTime;
 800ad68:	1a9b      	subs	r3, r3, r2
 800ad6a:	185b      	adds	r3, r3, r1
 800ad6c:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad6e:	0020      	movs	r0, r4
 800ad70:	f7ff ffcc 	bl	800ad0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad74:	2600      	movs	r6, #0
 800ad76:	e000      	b.n	800ad7a <xTaskCheckForTimeOut+0x56>
				xReturn = pdFALSE;
 800ad78:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800ad7a:	f000 fa8d 	bl	800b298 <vPortExitCritical>
}
 800ad7e:	0030      	movs	r0, r6
 800ad80:	bd70      	pop	{r4, r5, r6, pc}
 800ad82:	46c0      	nop			; (mov r8, r8)
 800ad84:	200052d0 	.word	0x200052d0
 800ad88:	20005288 	.word	0x20005288

0800ad8c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ad8c:	4b01      	ldr	r3, [pc, #4]	; (800ad94 <vTaskMissedYield+0x8>)
 800ad8e:	2201      	movs	r2, #1
 800ad90:	601a      	str	r2, [r3, #0]
}
 800ad92:	4770      	bx	lr
 800ad94:	200052d4 	.word	0x200052d4

0800ad98 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ad98:	4b05      	ldr	r3, [pc, #20]	; (800adb0 <xTaskGetSchedulerState+0x18>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad9c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d004      	beq.n	800adac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ada2:	4b04      	ldr	r3, [pc, #16]	; (800adb4 <xTaskGetSchedulerState+0x1c>)
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	4243      	negs	r3, r0
 800ada8:	4158      	adcs	r0, r3
 800adaa:	0040      	lsls	r0, r0, #1
	}
 800adac:	4770      	bx	lr
 800adae:	46c0      	nop			; (mov r8, r8)
 800adb0:	200052a4 	.word	0x200052a4
 800adb4:	20005250 	.word	0x20005250

0800adb8 <xTaskPriorityDisinherit>:
	{
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800adbc:	d02c      	beq.n	800ae18 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 800adbe:	4b18      	ldr	r3, [pc, #96]	; (800ae20 <xTaskPriorityDisinherit+0x68>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4283      	cmp	r3, r0
 800adc4:	d001      	beq.n	800adca <xTaskPriorityDisinherit+0x12>
 800adc6:	b672      	cpsid	i
 800adc8:	e7fe      	b.n	800adc8 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800adca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d101      	bne.n	800add4 <xTaskPriorityDisinherit+0x1c>
 800add0:	b672      	cpsid	i
 800add2:	e7fe      	b.n	800add2 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800add4:	3b01      	subs	r3, #1
 800add6:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800add8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800adda:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800addc:	4291      	cmp	r1, r2
 800adde:	d01d      	beq.n	800ae1c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800ade0:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d119      	bne.n	800ae1a <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ade6:	1d25      	adds	r5, r4, #4
 800ade8:	0028      	movs	r0, r5
 800adea:	f7ff f88d 	bl	8009f08 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800adf0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adf2:	2238      	movs	r2, #56	; 0x38
 800adf4:	1ad2      	subs	r2, r2, r3
 800adf6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800adf8:	4a0a      	ldr	r2, [pc, #40]	; (800ae24 <xTaskPriorityDisinherit+0x6c>)
 800adfa:	6812      	ldr	r2, [r2, #0]
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d901      	bls.n	800ae04 <xTaskPriorityDisinherit+0x4c>
 800ae00:	4a08      	ldr	r2, [pc, #32]	; (800ae24 <xTaskPriorityDisinherit+0x6c>)
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	0098      	lsls	r0, r3, #2
 800ae06:	18c0      	adds	r0, r0, r3
 800ae08:	0080      	lsls	r0, r0, #2
 800ae0a:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <xTaskPriorityDisinherit+0x70>)
 800ae0c:	18c0      	adds	r0, r0, r3
 800ae0e:	0029      	movs	r1, r5
 800ae10:	f7ff f858 	bl	8009ec4 <vListInsertEnd>
					xReturn = pdTRUE;
 800ae14:	2001      	movs	r0, #1
 800ae16:	e000      	b.n	800ae1a <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800ae18:	2000      	movs	r0, #0
	}
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e7fc      	b.n	800ae1a <xTaskPriorityDisinherit+0x62>
 800ae20:	20004ddc 	.word	0x20004ddc
 800ae24:	20005258 	.word	0x20005258
 800ae28:	20004de8 	.word	0x20004de8

0800ae2c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae30:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae32:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae34:	4291      	cmp	r1, r2
 800ae36:	d80c      	bhi.n	800ae52 <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae38:	1ad2      	subs	r2, r2, r3
 800ae3a:	6983      	ldr	r3, [r0, #24]
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae3c:	2001      	movs	r0, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d300      	bcc.n	800ae44 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800ae42:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae44:	1d21      	adds	r1, r4, #4
 800ae46:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <prvInsertTimerInActiveList+0x40>)
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	f7ff f846 	bl	8009eda <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e7f7      	b.n	800ae42 <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d202      	bcs.n	800ae5c <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 800ae56:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae58:	4299      	cmp	r1, r3
 800ae5a:	d2f2      	bcs.n	800ae42 <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae5c:	1d21      	adds	r1, r4, #4
 800ae5e:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <prvInsertTimerInActiveList+0x44>)
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	f7ff f83a 	bl	8009eda <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ae66:	2000      	movs	r0, #0
 800ae68:	e7eb      	b.n	800ae42 <prvInsertTimerInActiveList+0x16>
 800ae6a:	46c0      	nop			; (mov r8, r8)
 800ae6c:	200052dc 	.word	0x200052dc
 800ae70:	200052d8 	.word	0x200052d8

0800ae74 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae74:	b530      	push	{r4, r5, lr}
 800ae76:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae78:	f000 fa02 	bl	800b280 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae7c:	4b11      	ldr	r3, [pc, #68]	; (800aec4 <prvCheckForValidListAndQueue+0x50>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <prvCheckForValidListAndQueue+0x18>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae84:	f000 fa08 	bl	800b298 <vPortExitCritical>
}
 800ae88:	b003      	add	sp, #12
 800ae8a:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800ae8c:	4d0e      	ldr	r5, [pc, #56]	; (800aec8 <prvCheckForValidListAndQueue+0x54>)
 800ae8e:	0028      	movs	r0, r5
 800ae90:	f7ff f80a 	bl	8009ea8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae94:	4c0d      	ldr	r4, [pc, #52]	; (800aecc <prvCheckForValidListAndQueue+0x58>)
 800ae96:	0020      	movs	r0, r4
 800ae98:	f7ff f806 	bl	8009ea8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae9c:	4b0c      	ldr	r3, [pc, #48]	; (800aed0 <prvCheckForValidListAndQueue+0x5c>)
 800ae9e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aea0:	4b0c      	ldr	r3, [pc, #48]	; (800aed4 <prvCheckForValidListAndQueue+0x60>)
 800aea2:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aea4:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <prvCheckForValidListAndQueue+0x64>)
 800aea6:	4a0d      	ldr	r2, [pc, #52]	; (800aedc <prvCheckForValidListAndQueue+0x68>)
 800aea8:	2100      	movs	r1, #0
 800aeaa:	9100      	str	r1, [sp, #0]
 800aeac:	3110      	adds	r1, #16
 800aeae:	200a      	movs	r0, #10
 800aeb0:	f7ff f906 	bl	800a0c0 <xQueueGenericCreateStatic>
 800aeb4:	4b03      	ldr	r3, [pc, #12]	; (800aec4 <prvCheckForValidListAndQueue+0x50>)
 800aeb6:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d0e3      	beq.n	800ae84 <prvCheckForValidListAndQueue+0x10>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aebc:	4908      	ldr	r1, [pc, #32]	; (800aee0 <prvCheckForValidListAndQueue+0x6c>)
 800aebe:	f7ff fadf 	bl	800a480 <vQueueAddToRegistry>
 800aec2:	e7df      	b.n	800ae84 <prvCheckForValidListAndQueue+0x10>
 800aec4:	200053fc 	.word	0x200053fc
 800aec8:	20005380 	.word	0x20005380
 800aecc:	20005394 	.word	0x20005394
 800aed0:	200052d8 	.word	0x200052d8
 800aed4:	200052dc 	.word	0x200052dc
 800aed8:	200053ac 	.word	0x200053ac
 800aedc:	200052e0 	.word	0x200052e0
 800aee0:	08011fc0 	.word	0x08011fc0

0800aee4 <xTimerCreateTimerTask>:
{
 800aee4:	b500      	push	{lr}
 800aee6:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 800aee8:	f7ff ffc4 	bl	800ae74 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800aeec:	4b10      	ldr	r3, [pc, #64]	; (800af30 <xTimerCreateTimerTask+0x4c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d01a      	beq.n	800af2a <xTimerCreateTimerTask+0x46>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aef4:	2300      	movs	r3, #0
 800aef6:	9305      	str	r3, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aef8:	9306      	str	r3, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aefa:	aa07      	add	r2, sp, #28
 800aefc:	a906      	add	r1, sp, #24
 800aefe:	a805      	add	r0, sp, #20
 800af00:	f7fe ffc6 	bl	8009e90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af04:	9a07      	ldr	r2, [sp, #28]
 800af06:	490b      	ldr	r1, [pc, #44]	; (800af34 <xTimerCreateTimerTask+0x50>)
 800af08:	480b      	ldr	r0, [pc, #44]	; (800af38 <xTimerCreateTimerTask+0x54>)
 800af0a:	9b05      	ldr	r3, [sp, #20]
 800af0c:	9302      	str	r3, [sp, #8]
 800af0e:	9b06      	ldr	r3, [sp, #24]
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	2302      	movs	r3, #2
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	2300      	movs	r3, #0
 800af18:	f7ff fc66 	bl	800a7e8 <xTaskCreateStatic>
 800af1c:	4b07      	ldr	r3, [pc, #28]	; (800af3c <xTimerCreateTimerTask+0x58>)
 800af1e:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800af20:	2800      	cmp	r0, #0
 800af22:	d002      	beq.n	800af2a <xTimerCreateTimerTask+0x46>
}
 800af24:	2001      	movs	r0, #1
 800af26:	b009      	add	sp, #36	; 0x24
 800af28:	bd00      	pop	{pc}
	configASSERT( xReturn );
 800af2a:	b672      	cpsid	i
 800af2c:	e7fe      	b.n	800af2c <xTimerCreateTimerTask+0x48>
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	200053fc 	.word	0x200053fc
 800af34:	08011fc8 	.word	0x08011fc8
 800af38:	0800b051 	.word	0x0800b051
 800af3c:	20005400 	.word	0x20005400

0800af40 <xTimerGenericCommand>:
{
 800af40:	b530      	push	{r4, r5, lr}
 800af42:	b085      	sub	sp, #20
 800af44:	001c      	movs	r4, r3
	configASSERT( xTimer );
 800af46:	2800      	cmp	r0, #0
 800af48:	d014      	beq.n	800af74 <xTimerGenericCommand+0x34>
	if( xTimerQueue != NULL )
 800af4a:	4b14      	ldr	r3, [pc, #80]	; (800af9c <xTimerGenericCommand+0x5c>)
 800af4c:	681d      	ldr	r5, [r3, #0]
 800af4e:	2d00      	cmp	r5, #0
 800af50:	d022      	beq.n	800af98 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
 800af52:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af54:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af56:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af58:	2905      	cmp	r1, #5
 800af5a:	dc15      	bgt.n	800af88 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af5c:	f7ff ff1c 	bl	800ad98 <xTaskGetSchedulerState>
 800af60:	2802      	cmp	r0, #2
 800af62:	d009      	beq.n	800af78 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af64:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <xTimerGenericCommand+0x5c>)
 800af66:	6818      	ldr	r0, [r3, #0]
 800af68:	2300      	movs	r3, #0
 800af6a:	2200      	movs	r2, #0
 800af6c:	4669      	mov	r1, sp
 800af6e:	f7ff f8fe 	bl	800a16e <xQueueGenericSend>
 800af72:	e00f      	b.n	800af94 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
 800af74:	b672      	cpsid	i
 800af76:	e7fe      	b.n	800af76 <xTimerGenericCommand+0x36>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af78:	4b08      	ldr	r3, [pc, #32]	; (800af9c <xTimerGenericCommand+0x5c>)
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	2300      	movs	r3, #0
 800af7e:	9a08      	ldr	r2, [sp, #32]
 800af80:	4669      	mov	r1, sp
 800af82:	f7ff f8f4 	bl	800a16e <xQueueGenericSend>
 800af86:	e005      	b.n	800af94 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af88:	2300      	movs	r3, #0
 800af8a:	0022      	movs	r2, r4
 800af8c:	4669      	mov	r1, sp
 800af8e:	0028      	movs	r0, r5
 800af90:	f7ff f98f 	bl	800a2b2 <xQueueGenericSendFromISR>
}
 800af94:	b005      	add	sp, #20
 800af96:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800af98:	2000      	movs	r0, #0
	return xReturn;
 800af9a:	e7fb      	b.n	800af94 <xTimerGenericCommand+0x54>
 800af9c:	200053fc 	.word	0x200053fc

0800afa0 <prvSampleTimeNow>:
{
 800afa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afa2:	46de      	mov	lr, fp
 800afa4:	4657      	mov	r7, sl
 800afa6:	464e      	mov	r6, r9
 800afa8:	4645      	mov	r5, r8
 800afaa:	b5e0      	push	{r5, r6, r7, lr}
 800afac:	b083      	sub	sp, #12
 800afae:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
 800afb0:	f7ff fcbe 	bl	800a930 <xTaskGetTickCount>
 800afb4:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 800afb6:	4b23      	ldr	r3, [pc, #140]	; (800b044 <prvSampleTimeNow+0xa4>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4283      	cmp	r3, r0
 800afbc:	d80d      	bhi.n	800afda <prvSampleTimeNow+0x3a>
 800afbe:	2300      	movs	r3, #0
		*pxTimerListsWereSwitched = pdTRUE;
 800afc0:	464a      	mov	r2, r9
 800afc2:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800afc4:	4b1f      	ldr	r3, [pc, #124]	; (800b044 <prvSampleTimeNow+0xa4>)
 800afc6:	4642      	mov	r2, r8
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	4640      	mov	r0, r8
 800afcc:	b003      	add	sp, #12
 800afce:	bcf0      	pop	{r4, r5, r6, r7}
 800afd0:	46bb      	mov	fp, r7
 800afd2:	46b2      	mov	sl, r6
 800afd4:	46a9      	mov	r9, r5
 800afd6:	46a0      	mov	r8, r4
 800afd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afda:	4d1b      	ldr	r5, [pc, #108]	; (800b048 <prvSampleTimeNow+0xa8>)
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afdc:	2728      	movs	r7, #40	; 0x28
 800afde:	2604      	movs	r6, #4
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	d025      	beq.n	800b034 <prvSampleTimeNow+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afee:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aff0:	1d23      	adds	r3, r4, #4
 800aff2:	469b      	mov	fp, r3
 800aff4:	0018      	movs	r0, r3
 800aff6:	f7fe ff87 	bl	8009f08 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800affa:	6a23      	ldr	r3, [r4, #32]
 800affc:	0020      	movs	r0, r4
 800affe:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b000:	5de3      	ldrb	r3, [r4, r7]
 800b002:	421e      	tst	r6, r3
 800b004:	d0ec      	beq.n	800afe0 <prvSampleTimeNow+0x40>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b006:	69a3      	ldr	r3, [r4, #24]
 800b008:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800b00a:	459a      	cmp	sl, r3
 800b00c:	d207      	bcs.n	800b01e <prvSampleTimeNow+0x7e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b00e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b010:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b012:	4b0d      	ldr	r3, [pc, #52]	; (800b048 <prvSampleTimeNow+0xa8>)
 800b014:	6818      	ldr	r0, [r3, #0]
 800b016:	4659      	mov	r1, fp
 800b018:	f7fe ff5f 	bl	8009eda <vListInsert>
 800b01c:	e7df      	b.n	800afde <prvSampleTimeNow+0x3e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b01e:	2300      	movs	r3, #0
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	4652      	mov	r2, sl
 800b024:	2100      	movs	r1, #0
 800b026:	0020      	movs	r0, r4
 800b028:	f7ff ff8a 	bl	800af40 <xTimerGenericCommand>
				configASSERT( xResult );
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d1d6      	bne.n	800afde <prvSampleTimeNow+0x3e>
 800b030:	b672      	cpsid	i
 800b032:	e7fe      	b.n	800b032 <prvSampleTimeNow+0x92>
	pxCurrentTimerList = pxOverflowTimerList;
 800b034:	4a04      	ldr	r2, [pc, #16]	; (800b048 <prvSampleTimeNow+0xa8>)
 800b036:	4905      	ldr	r1, [pc, #20]	; (800b04c <prvSampleTimeNow+0xac>)
 800b038:	6808      	ldr	r0, [r1, #0]
 800b03a:	6010      	str	r0, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b03c:	600b      	str	r3, [r1, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800b03e:	2301      	movs	r3, #1
 800b040:	e7be      	b.n	800afc0 <prvSampleTimeNow+0x20>
 800b042:	46c0      	nop			; (mov r8, r8)
 800b044:	200053a8 	.word	0x200053a8
 800b048:	200052d8 	.word	0x200052d8
 800b04c:	200052dc 	.word	0x200052dc

0800b050 <prvTimerTask>:
{
 800b050:	b570      	push	{r4, r5, r6, lr}
 800b052:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b054:	4b61      	ldr	r3, [pc, #388]	; (800b1dc <prvTimerTask+0x18c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b05a:	2c00      	cmp	r4, #0
 800b05c:	d021      	beq.n	800b0a2 <prvTimerTask+0x52>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800b062:	f7ff fc5d 	bl	800a920 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b066:	a804      	add	r0, sp, #16
 800b068:	f7ff ff9a 	bl	800afa0 <prvSampleTimeNow>
 800b06c:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b06e:	9a04      	ldr	r2, [sp, #16]
 800b070:	2a00      	cmp	r2, #0
 800b072:	d146      	bne.n	800b102 <prvTimerTask+0xb2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b074:	4284      	cmp	r4, r0
 800b076:	d822      	bhi.n	800b0be <prvTimerTask+0x6e>
				( void ) xTaskResumeAll();
 800b078:	f7ff fcfa 	bl	800aa70 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07c:	4b57      	ldr	r3, [pc, #348]	; (800b1dc <prvTimerTask+0x18c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b084:	1d30      	adds	r0, r6, #4
 800b086:	f7fe ff3f 	bl	8009f08 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b08a:	2328      	movs	r3, #40	; 0x28
 800b08c:	5cf3      	ldrb	r3, [r6, r3]
 800b08e:	075a      	lsls	r2, r3, #29
 800b090:	d420      	bmi.n	800b0d4 <prvTimerTask+0x84>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b092:	2201      	movs	r2, #1
 800b094:	4393      	bics	r3, r2
 800b096:	3227      	adds	r2, #39	; 0x27
 800b098:	54b3      	strb	r3, [r6, r2]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b09a:	6a33      	ldr	r3, [r6, #32]
 800b09c:	0030      	movs	r0, r6
 800b09e:	4798      	blx	r3
}
 800b0a0:	e016      	b.n	800b0d0 <prvTimerTask+0x80>
	vTaskSuspendAll();
 800b0a2:	f7ff fc3d 	bl	800a920 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0a6:	a804      	add	r0, sp, #16
 800b0a8:	f7ff ff7a 	bl	800afa0 <prvSampleTimeNow>
 800b0ac:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d126      	bne.n	800b102 <prvTimerTask+0xb2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b0b4:	4b4a      	ldr	r3, [pc, #296]	; (800b1e0 <prvTimerTask+0x190>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	4253      	negs	r3, r2
 800b0bc:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b0be:	1b61      	subs	r1, r4, r5
 800b0c0:	4b48      	ldr	r3, [pc, #288]	; (800b1e4 <prvTimerTask+0x194>)
 800b0c2:	6818      	ldr	r0, [r3, #0]
 800b0c4:	f7ff f9f0 	bl	800a4a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b0c8:	f7ff fcd2 	bl	800aa70 <xTaskResumeAll>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d015      	beq.n	800b0fc <prvTimerTask+0xac>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0d0:	4c44      	ldr	r4, [pc, #272]	; (800b1e4 <prvTimerTask+0x194>)
}
 800b0d2:	e020      	b.n	800b116 <prvTimerTask+0xc6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0d4:	69b1      	ldr	r1, [r6, #24]
 800b0d6:	1861      	adds	r1, r4, r1
 800b0d8:	0023      	movs	r3, r4
 800b0da:	002a      	movs	r2, r5
 800b0dc:	0030      	movs	r0, r6
 800b0de:	f7ff fea5 	bl	800ae2c <prvInsertTimerInActiveList>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d0d9      	beq.n	800b09a <prvTimerTask+0x4a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	0022      	movs	r2, r4
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	0030      	movs	r0, r6
 800b0f0:	f7ff ff26 	bl	800af40 <xTimerGenericCommand>
			configASSERT( xResult );
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d1d0      	bne.n	800b09a <prvTimerTask+0x4a>
 800b0f8:	b672      	cpsid	i
 800b0fa:	e7fe      	b.n	800b0fa <prvTimerTask+0xaa>
					portYIELD_WITHIN_API();
 800b0fc:	f000 f8b4 	bl	800b268 <vPortYield>
 800b100:	e7e6      	b.n	800b0d0 <prvTimerTask+0x80>
			( void ) xTaskResumeAll();
 800b102:	f7ff fcb5 	bl	800aa70 <xTaskResumeAll>
 800b106:	e7e3      	b.n	800b0d0 <prvTimerTask+0x80>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b108:	9907      	ldr	r1, [sp, #28]
 800b10a:	9806      	ldr	r0, [sp, #24]
 800b10c:	9b05      	ldr	r3, [sp, #20]
 800b10e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b110:	9b04      	ldr	r3, [sp, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	da09      	bge.n	800b12a <prvTimerTask+0xda>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b116:	6820      	ldr	r0, [r4, #0]
 800b118:	2200      	movs	r2, #0
 800b11a:	a904      	add	r1, sp, #16
 800b11c:	f7ff f91d 	bl	800a35a <xQueueReceive>
 800b120:	2800      	cmp	r0, #0
 800b122:	d097      	beq.n	800b054 <prvTimerTask+0x4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	dbee      	blt.n	800b108 <prvTimerTask+0xb8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b12a:	9d06      	ldr	r5, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b12c:	696b      	ldr	r3, [r5, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <prvTimerTask+0xe8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b132:	1d28      	adds	r0, r5, #4
 800b134:	f7fe fee8 	bl	8009f08 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b138:	a803      	add	r0, sp, #12
 800b13a:	f7ff ff31 	bl	800afa0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b13e:	9904      	ldr	r1, [sp, #16]
 800b140:	2909      	cmp	r1, #9
 800b142:	d8e8      	bhi.n	800b116 <prvTimerTask+0xc6>
 800b144:	0089      	lsls	r1, r1, #2
 800b146:	4b28      	ldr	r3, [pc, #160]	; (800b1e8 <prvTimerTask+0x198>)
 800b148:	5859      	ldr	r1, [r3, r1]
 800b14a:	468f      	mov	pc, r1
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b14c:	2228      	movs	r2, #40	; 0x28
 800b14e:	5cab      	ldrb	r3, [r5, r2]
 800b150:	2101      	movs	r1, #1
 800b152:	430b      	orrs	r3, r1
 800b154:	54ab      	strb	r3, [r5, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b156:	9b05      	ldr	r3, [sp, #20]
 800b158:	69a9      	ldr	r1, [r5, #24]
 800b15a:	1859      	adds	r1, r3, r1
 800b15c:	0002      	movs	r2, r0
 800b15e:	0028      	movs	r0, r5
 800b160:	f7ff fe64 	bl	800ae2c <prvInsertTimerInActiveList>
 800b164:	2800      	cmp	r0, #0
 800b166:	d0d6      	beq.n	800b116 <prvTimerTask+0xc6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b168:	6a2b      	ldr	r3, [r5, #32]
 800b16a:	0028      	movs	r0, r5
 800b16c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b16e:	2328      	movs	r3, #40	; 0x28
 800b170:	5ceb      	ldrb	r3, [r5, r3]
 800b172:	075b      	lsls	r3, r3, #29
 800b174:	d5cf      	bpl.n	800b116 <prvTimerTask+0xc6>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b176:	9a05      	ldr	r2, [sp, #20]
 800b178:	69ab      	ldr	r3, [r5, #24]
 800b17a:	18d2      	adds	r2, r2, r3
 800b17c:	2300      	movs	r3, #0
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	2100      	movs	r1, #0
 800b182:	0028      	movs	r0, r5
 800b184:	f7ff fedc 	bl	800af40 <xTimerGenericCommand>
							configASSERT( xResult );
 800b188:	2800      	cmp	r0, #0
 800b18a:	d1c4      	bne.n	800b116 <prvTimerTask+0xc6>
 800b18c:	b672      	cpsid	i
 800b18e:	e7fe      	b.n	800b18e <prvTimerTask+0x13e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b190:	2228      	movs	r2, #40	; 0x28
 800b192:	5cab      	ldrb	r3, [r5, r2]
 800b194:	2101      	movs	r1, #1
 800b196:	438b      	bics	r3, r1
 800b198:	54ab      	strb	r3, [r5, r2]
					break;
 800b19a:	e7bc      	b.n	800b116 <prvTimerTask+0xc6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b19c:	2228      	movs	r2, #40	; 0x28
 800b19e:	5cab      	ldrb	r3, [r5, r2]
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	430b      	orrs	r3, r1
 800b1a4:	54ab      	strb	r3, [r5, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1a6:	9905      	ldr	r1, [sp, #20]
 800b1a8:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1aa:	2900      	cmp	r1, #0
 800b1ac:	d006      	beq.n	800b1bc <prvTimerTask+0x16c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1ae:	1841      	adds	r1, r0, r1
 800b1b0:	0003      	movs	r3, r0
 800b1b2:	0002      	movs	r2, r0
 800b1b4:	0028      	movs	r0, r5
 800b1b6:	f7ff fe39 	bl	800ae2c <prvInsertTimerInActiveList>
					break;
 800b1ba:	e7ac      	b.n	800b116 <prvTimerTask+0xc6>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1bc:	b672      	cpsid	i
 800b1be:	e7fe      	b.n	800b1be <prvTimerTask+0x16e>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1c0:	2328      	movs	r3, #40	; 0x28
 800b1c2:	5ceb      	ldrb	r3, [r5, r3]
 800b1c4:	079a      	lsls	r2, r3, #30
 800b1c6:	d504      	bpl.n	800b1d2 <prvTimerTask+0x182>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	4393      	bics	r3, r2
 800b1cc:	3227      	adds	r2, #39	; 0x27
 800b1ce:	54ab      	strb	r3, [r5, r2]
 800b1d0:	e7a1      	b.n	800b116 <prvTimerTask+0xc6>
							vPortFree( pxTimer );
 800b1d2:	0028      	movs	r0, r5
 800b1d4:	f000 f9a4 	bl	800b520 <vPortFree>
 800b1d8:	e79d      	b.n	800b116 <prvTimerTask+0xc6>
 800b1da:	46c0      	nop			; (mov r8, r8)
 800b1dc:	200052d8 	.word	0x200052d8
 800b1e0:	200052dc 	.word	0x200052dc
 800b1e4:	200053fc 	.word	0x200053fc
 800b1e8:	08011fd0 	.word	0x08011fd0

0800b1ec <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1ec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1f2:	4b06      	ldr	r3, [pc, #24]	; (800b20c <prvTaskExitError+0x20>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	d001      	beq.n	800b1fe <prvTaskExitError+0x12>
 800b1fa:	b672      	cpsid	i
 800b1fc:	e7fe      	b.n	800b1fc <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800b1fe:	b672      	cpsid	i
	while( ulDummy == 0 )
 800b200:	9b01      	ldr	r3, [sp, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0fc      	beq.n	800b200 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b206:	b002      	add	sp, #8
 800b208:	4770      	bx	lr
 800b20a:	46c0      	nop			; (mov r8, r8)
 800b20c:	2000002c 	.word	0x2000002c

0800b210 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800b210:	4a0b      	ldr	r2, [pc, #44]	; (800b240 <pxCurrentTCBConst2>)
 800b212:	6813      	ldr	r3, [r2, #0]
 800b214:	6818      	ldr	r0, [r3, #0]
 800b216:	3020      	adds	r0, #32
 800b218:	f380 8809 	msr	PSP, r0
 800b21c:	2002      	movs	r0, #2
 800b21e:	f380 8814 	msr	CONTROL, r0
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800b228:	46ae      	mov	lr, r5
 800b22a:	bc08      	pop	{r3}
 800b22c:	bc04      	pop	{r2}
 800b22e:	b662      	cpsie	i
 800b230:	4718      	bx	r3
 800b232:	46c0      	nop			; (mov r8, r8)
 800b234:	46c0      	nop			; (mov r8, r8)
 800b236:	46c0      	nop			; (mov r8, r8)
 800b238:	46c0      	nop			; (mov r8, r8)
 800b23a:	46c0      	nop			; (mov r8, r8)
 800b23c:	46c0      	nop			; (mov r8, r8)
 800b23e:	46c0      	nop			; (mov r8, r8)

0800b240 <pxCurrentTCBConst2>:
 800b240:	20004ddc 	.word	0x20004ddc

0800b244 <pxPortInitialiseStack>:
{
 800b244:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b246:	1f03      	subs	r3, r0, #4
 800b248:	2480      	movs	r4, #128	; 0x80
 800b24a:	0464      	lsls	r4, r4, #17
 800b24c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800b24e:	3b04      	subs	r3, #4
 800b250:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b252:	3b04      	subs	r3, #4
 800b254:	4902      	ldr	r1, [pc, #8]	; (800b260 <pxPortInitialiseStack+0x1c>)
 800b256:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b258:	3b14      	subs	r3, #20
 800b25a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800b25c:	3840      	subs	r0, #64	; 0x40
}
 800b25e:	bd10      	pop	{r4, pc}
 800b260:	0800b1ed 	.word	0x0800b1ed

0800b264 <SVC_Handler>:
}
 800b264:	4770      	bx	lr
	...

0800b268 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b268:	4b04      	ldr	r3, [pc, #16]	; (800b27c <vPortYield+0x14>)
 800b26a:	2280      	movs	r2, #128	; 0x80
 800b26c:	0552      	lsls	r2, r2, #21
 800b26e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800b270:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800b274:	f3bf 8f6f 	isb	sy
}
 800b278:	4770      	bx	lr
 800b27a:	46c0      	nop			; (mov r8, r8)
 800b27c:	e000ed04 	.word	0xe000ed04

0800b280 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800b280:	b672      	cpsid	i
	uxCriticalNesting++;
 800b282:	4a04      	ldr	r2, [pc, #16]	; (800b294 <vPortEnterCritical+0x14>)
 800b284:	6813      	ldr	r3, [r2, #0]
 800b286:	3301      	adds	r3, #1
 800b288:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800b28a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800b28e:	f3bf 8f6f 	isb	sy
}
 800b292:	4770      	bx	lr
 800b294:	2000002c 	.word	0x2000002c

0800b298 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800b298:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <vPortExitCritical+0x1c>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <vPortExitCritical+0xc>
 800b2a0:	b672      	cpsid	i
 800b2a2:	e7fe      	b.n	800b2a2 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	4a03      	ldr	r2, [pc, #12]	; (800b2b4 <vPortExitCritical+0x1c>)
 800b2a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d100      	bne.n	800b2b0 <vPortExitCritical+0x18>
	{
		portENABLE_INTERRUPTS();
 800b2ae:	b662      	cpsie	i
	}
}
 800b2b0:	4770      	bx	lr
 800b2b2:	46c0      	nop			; (mov r8, r8)
 800b2b4:	2000002c 	.word	0x2000002c

0800b2b8 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800b2b8:	f3ef 8010 	mrs	r0, PRIMASK
 800b2bc:	b672      	cpsid	i
 800b2be:	4770      	bx	lr

0800b2c0 <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800b2c0:	f380 8810 	msr	PRIMASK, r0
 800b2c4:	4770      	bx	lr
	...

0800b2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2d0:	f3ef 8009 	mrs	r0, PSP
 800b2d4:	4b0e      	ldr	r3, [pc, #56]	; (800b310 <pxCurrentTCBConst>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	3820      	subs	r0, #32
 800b2da:	6010      	str	r0, [r2, #0]
 800b2dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800b2de:	4644      	mov	r4, r8
 800b2e0:	464d      	mov	r5, r9
 800b2e2:	4656      	mov	r6, sl
 800b2e4:	465f      	mov	r7, fp
 800b2e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800b2e8:	b508      	push	{r3, lr}
 800b2ea:	b672      	cpsid	i
 800b2ec:	f7ff fc50 	bl	800ab90 <vTaskSwitchContext>
 800b2f0:	b662      	cpsie	i
 800b2f2:	bc0c      	pop	{r2, r3}
 800b2f4:	6811      	ldr	r1, [r2, #0]
 800b2f6:	6808      	ldr	r0, [r1, #0]
 800b2f8:	3010      	adds	r0, #16
 800b2fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800b2fc:	46a0      	mov	r8, r4
 800b2fe:	46a9      	mov	r9, r5
 800b300:	46b2      	mov	sl, r6
 800b302:	46bb      	mov	fp, r7
 800b304:	f380 8809 	msr	PSP, r0
 800b308:	3820      	subs	r0, #32
 800b30a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800b30c:	4718      	bx	r3
 800b30e:	46c0      	nop			; (mov r8, r8)

0800b310 <pxCurrentTCBConst>:
 800b310:	20004ddc 	.word	0x20004ddc

0800b314 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b314:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800b316:	f7ff ffcf 	bl	800b2b8 <ulSetInterruptMaskFromISR>
 800b31a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b31c:	f7ff fb0e 	bl	800a93c <xTaskIncrementTick>
 800b320:	2800      	cmp	r0, #0
 800b322:	d003      	beq.n	800b32c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b324:	4b03      	ldr	r3, [pc, #12]	; (800b334 <xPortSysTickHandler+0x20>)
 800b326:	2280      	movs	r2, #128	; 0x80
 800b328:	0552      	lsls	r2, r2, #21
 800b32a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800b32c:	0020      	movs	r0, r4
 800b32e:	f7ff ffc7 	bl	800b2c0 <vClearInterruptMaskFromISR>
}
 800b332:	bd10      	pop	{r4, pc}
 800b334:	e000ed04 	.word	0xe000ed04

0800b338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b338:	b510      	push	{r4, lr}
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b33a:	4c08      	ldr	r4, [pc, #32]	; (800b35c <vPortSetupTimerInterrupt+0x24>)
 800b33c:	2300      	movs	r3, #0
 800b33e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b340:	4a07      	ldr	r2, [pc, #28]	; (800b360 <vPortSetupTimerInterrupt+0x28>)
 800b342:	6013      	str	r3, [r2, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b344:	4b07      	ldr	r3, [pc, #28]	; (800b364 <vPortSetupTimerInterrupt+0x2c>)
 800b346:	6818      	ldr	r0, [r3, #0]
 800b348:	21fa      	movs	r1, #250	; 0xfa
 800b34a:	0089      	lsls	r1, r1, #2
 800b34c:	f7f4 fef8 	bl	8000140 <__udivsi3>
 800b350:	3801      	subs	r0, #1
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <vPortSetupTimerInterrupt+0x30>)
 800b354:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800b356:	2307      	movs	r3, #7
 800b358:	6023      	str	r3, [r4, #0]
}
 800b35a:	bd10      	pop	{r4, pc}
 800b35c:	e000e010 	.word	0xe000e010
 800b360:	e000e018 	.word	0xe000e018
 800b364:	20000020 	.word	0x20000020
 800b368:	e000e014 	.word	0xe000e014

0800b36c <xPortStartScheduler>:
{
 800b36c:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b36e:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <xPortStartScheduler+0x34>)
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	22ff      	movs	r2, #255	; 0xff
 800b374:	0412      	lsls	r2, r2, #16
 800b376:	430a      	orrs	r2, r1
 800b378:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b37a:	6819      	ldr	r1, [r3, #0]
 800b37c:	22ff      	movs	r2, #255	; 0xff
 800b37e:	0612      	lsls	r2, r2, #24
 800b380:	430a      	orrs	r2, r1
 800b382:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800b384:	f7ff ffd8 	bl	800b338 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b388:	4b06      	ldr	r3, [pc, #24]	; (800b3a4 <xPortStartScheduler+0x38>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800b38e:	f7ff ff3f 	bl	800b210 <vPortStartFirstTask>
	vTaskSwitchContext();
 800b392:	f7ff fbfd 	bl	800ab90 <vTaskSwitchContext>
	prvTaskExitError();
 800b396:	f7ff ff29 	bl	800b1ec <prvTaskExitError>
}
 800b39a:	2000      	movs	r0, #0
 800b39c:	bd10      	pop	{r4, pc}
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	e000ed20 	.word	0xe000ed20
 800b3a4:	2000002c 	.word	0x2000002c

0800b3a8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3a8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3aa:	4b14      	ldr	r3, [pc, #80]	; (800b3fc <prvInsertBlockIntoFreeList+0x54>)
 800b3ac:	001a      	movs	r2, r3
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4283      	cmp	r3, r0
 800b3b2:	d3fb      	bcc.n	800b3ac <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3b4:	6854      	ldr	r4, [r2, #4]
 800b3b6:	1911      	adds	r1, r2, r4
 800b3b8:	4288      	cmp	r0, r1
 800b3ba:	d008      	beq.n	800b3ce <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3bc:	6844      	ldr	r4, [r0, #4]
 800b3be:	1901      	adds	r1, r0, r4
 800b3c0:	428b      	cmp	r3, r1
 800b3c2:	d00e      	beq.n	800b3e2 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3c4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3c6:	4282      	cmp	r2, r0
 800b3c8:	d000      	beq.n	800b3cc <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3ca:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3cc:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3ce:	6841      	ldr	r1, [r0, #4]
 800b3d0:	1909      	adds	r1, r1, r4
 800b3d2:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3d4:	000c      	movs	r4, r1
 800b3d6:	1851      	adds	r1, r2, r1
 800b3d8:	428b      	cmp	r3, r1
 800b3da:	d001      	beq.n	800b3e0 <prvInsertBlockIntoFreeList+0x38>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3dc:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800b3de:	e7f5      	b.n	800b3cc <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3e0:	0010      	movs	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3e2:	4907      	ldr	r1, [pc, #28]	; (800b400 <prvInsertBlockIntoFreeList+0x58>)
 800b3e4:	6809      	ldr	r1, [r1, #0]
 800b3e6:	428b      	cmp	r3, r1
 800b3e8:	d005      	beq.n	800b3f6 <prvInsertBlockIntoFreeList+0x4e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	191b      	adds	r3, r3, r4
 800b3ee:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3f0:	6813      	ldr	r3, [r2, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	e7e6      	b.n	800b3c4 <prvInsertBlockIntoFreeList+0x1c>
 800b3f6:	000b      	movs	r3, r1
 800b3f8:	e7e4      	b.n	800b3c4 <prvInsertBlockIntoFreeList+0x1c>
 800b3fa:	46c0      	nop			; (mov r8, r8)
 800b3fc:	2000601c 	.word	0x2000601c
 800b400:	20005404 	.word	0x20005404

0800b404 <pvPortMalloc>:
{
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800b408:	f7ff fa8a 	bl	800a920 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b40c:	4b3d      	ldr	r3, [pc, #244]	; (800b504 <pvPortMalloc+0x100>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d015      	beq.n	800b440 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b414:	4b3c      	ldr	r3, [pc, #240]	; (800b508 <pvPortMalloc+0x104>)
 800b416:	681d      	ldr	r5, [r3, #0]
 800b418:	422c      	tst	r4, r5
 800b41a:	d16d      	bne.n	800b4f8 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 800b41c:	2c00      	cmp	r4, #0
 800b41e:	d06b      	beq.n	800b4f8 <pvPortMalloc+0xf4>
				xWantedSize += xHeapStructSize;
 800b420:	0022      	movs	r2, r4
 800b422:	3208      	adds	r2, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b424:	0764      	lsls	r4, r4, #29
 800b426:	d002      	beq.n	800b42e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b428:	2307      	movs	r3, #7
 800b42a:	439a      	bics	r2, r3
 800b42c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b42e:	2a00      	cmp	r2, #0
 800b430:	d062      	beq.n	800b4f8 <pvPortMalloc+0xf4>
 800b432:	4b36      	ldr	r3, [pc, #216]	; (800b50c <pvPortMalloc+0x108>)
 800b434:	681f      	ldr	r7, [r3, #0]
 800b436:	4297      	cmp	r7, r2
 800b438:	d35e      	bcc.n	800b4f8 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 800b43a:	4935      	ldr	r1, [pc, #212]	; (800b510 <pvPortMalloc+0x10c>)
 800b43c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b43e:	e028      	b.n	800b492 <pvPortMalloc+0x8e>
	uxAddress = ( size_t ) ucHeap;
 800b440:	4a34      	ldr	r2, [pc, #208]	; (800b514 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b442:	0753      	lsls	r3, r2, #29
 800b444:	d009      	beq.n	800b45a <pvPortMalloc+0x56>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b446:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b448:	2307      	movs	r3, #7
 800b44a:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b44c:	23c0      	movs	r3, #192	; 0xc0
 800b44e:	011b      	lsls	r3, r3, #4
 800b450:	469c      	mov	ip, r3
 800b452:	4462      	add	r2, ip
 800b454:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b456:	000a      	movs	r2, r1
 800b458:	e001      	b.n	800b45e <pvPortMalloc+0x5a>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b45a:	23c0      	movs	r3, #192	; 0xc0
 800b45c:	011b      	lsls	r3, r3, #4
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b45e:	482c      	ldr	r0, [pc, #176]	; (800b510 <pvPortMalloc+0x10c>)
 800b460:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b462:	2100      	movs	r1, #0
 800b464:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b466:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 800b468:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b46a:	2007      	movs	r0, #7
 800b46c:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 800b46e:	4825      	ldr	r0, [pc, #148]	; (800b504 <pvPortMalloc+0x100>)
 800b470:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800b472:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b474:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b476:	1a99      	subs	r1, r3, r2
 800b478:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b47a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b47c:	4b26      	ldr	r3, [pc, #152]	; (800b518 <pvPortMalloc+0x114>)
 800b47e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b480:	4b22      	ldr	r3, [pc, #136]	; (800b50c <pvPortMalloc+0x108>)
 800b482:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b484:	4b20      	ldr	r3, [pc, #128]	; (800b508 <pvPortMalloc+0x104>)
 800b486:	2280      	movs	r2, #128	; 0x80
 800b488:	0612      	lsls	r2, r2, #24
 800b48a:	601a      	str	r2, [r3, #0]
}
 800b48c:	e7c2      	b.n	800b414 <pvPortMalloc+0x10>
 800b48e:	0021      	movs	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800b490:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b492:	6863      	ldr	r3, [r4, #4]
 800b494:	4293      	cmp	r3, r2
 800b496:	d202      	bcs.n	800b49e <pvPortMalloc+0x9a>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1f7      	bne.n	800b48e <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 800b49e:	4b19      	ldr	r3, [pc, #100]	; (800b504 <pvPortMalloc+0x100>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	42a3      	cmp	r3, r4
 800b4a4:	d028      	beq.n	800b4f8 <pvPortMalloc+0xf4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4a6:	680e      	ldr	r6, [r1, #0]
 800b4a8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4ae:	6863      	ldr	r3, [r4, #4]
 800b4b0:	1a9b      	subs	r3, r3, r2
 800b4b2:	2b10      	cmp	r3, #16
 800b4b4:	d908      	bls.n	800b4c8 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4b6:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4b8:	0741      	lsls	r1, r0, #29
 800b4ba:	d001      	beq.n	800b4c0 <pvPortMalloc+0xbc>
 800b4bc:	b672      	cpsid	i
 800b4be:	e7fe      	b.n	800b4be <pvPortMalloc+0xba>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4c0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4c2:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4c4:	f7ff ff70 	bl	800b3a8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	1aff      	subs	r7, r7, r3
 800b4cc:	4a0f      	ldr	r2, [pc, #60]	; (800b50c <pvPortMalloc+0x108>)
 800b4ce:	6017      	str	r7, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4d0:	4a11      	ldr	r2, [pc, #68]	; (800b518 <pvPortMalloc+0x114>)
 800b4d2:	6812      	ldr	r2, [r2, #0]
 800b4d4:	4297      	cmp	r7, r2
 800b4d6:	d201      	bcs.n	800b4dc <pvPortMalloc+0xd8>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4d8:	4a0f      	ldr	r2, [pc, #60]	; (800b518 <pvPortMalloc+0x114>)
 800b4da:	6017      	str	r7, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4dc:	431d      	orrs	r5, r3
 800b4de:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800b4e4:	4a0d      	ldr	r2, [pc, #52]	; (800b51c <pvPortMalloc+0x118>)
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b4ec:	f7ff fac0 	bl	800aa70 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4f0:	0773      	lsls	r3, r6, #29
 800b4f2:	d004      	beq.n	800b4fe <pvPortMalloc+0xfa>
 800b4f4:	b672      	cpsid	i
 800b4f6:	e7fe      	b.n	800b4f6 <pvPortMalloc+0xf2>
	( void ) xTaskResumeAll();
 800b4f8:	f7ff faba 	bl	800aa70 <xTaskResumeAll>
 800b4fc:	2600      	movs	r6, #0
}
 800b4fe:	0030      	movs	r0, r6
 800b500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b502:	46c0      	nop			; (mov r8, r8)
 800b504:	20005404 	.word	0x20005404
 800b508:	20006008 	.word	0x20006008
 800b50c:	2000600c 	.word	0x2000600c
 800b510:	2000601c 	.word	0x2000601c
 800b514:	20005408 	.word	0x20005408
 800b518:	20006010 	.word	0x20006010
 800b51c:	20006014 	.word	0x20006014

0800b520 <vPortFree>:
{
 800b520:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b522:	2800      	cmp	r0, #0
 800b524:	d023      	beq.n	800b56e <vPortFree+0x4e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b526:	0003      	movs	r3, r0
 800b528:	3b08      	subs	r3, #8
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	4a10      	ldr	r2, [pc, #64]	; (800b570 <vPortFree+0x50>)
 800b52e:	6812      	ldr	r2, [r2, #0]
 800b530:	421a      	tst	r2, r3
 800b532:	d101      	bne.n	800b538 <vPortFree+0x18>
 800b534:	b672      	cpsid	i
 800b536:	e7fe      	b.n	800b536 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b538:	0001      	movs	r1, r0
 800b53a:	3908      	subs	r1, #8
 800b53c:	6809      	ldr	r1, [r1, #0]
 800b53e:	2900      	cmp	r1, #0
 800b540:	d001      	beq.n	800b546 <vPortFree+0x26>
 800b542:	b672      	cpsid	i
 800b544:	e7fe      	b.n	800b544 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b546:	3808      	subs	r0, #8
 800b548:	0004      	movs	r4, r0
 800b54a:	4393      	bics	r3, r2
 800b54c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800b54e:	f7ff f9e7 	bl	800a920 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b552:	4a08      	ldr	r2, [pc, #32]	; (800b574 <vPortFree+0x54>)
 800b554:	6863      	ldr	r3, [r4, #4]
 800b556:	6811      	ldr	r1, [r2, #0]
 800b558:	185b      	adds	r3, r3, r1
 800b55a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b55c:	0020      	movs	r0, r4
 800b55e:	f7ff ff23 	bl	800b3a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b562:	4a05      	ldr	r2, [pc, #20]	; (800b578 <vPortFree+0x58>)
 800b564:	6813      	ldr	r3, [r2, #0]
 800b566:	3301      	adds	r3, #1
 800b568:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b56a:	f7ff fa81 	bl	800aa70 <xTaskResumeAll>
}
 800b56e:	bd10      	pop	{r4, pc}
 800b570:	20006008 	.word	0x20006008
 800b574:	2000600c 	.word	0x2000600c
 800b578:	20006018 	.word	0x20006018

0800b57c <atoi>:
 800b57c:	b510      	push	{r4, lr}
 800b57e:	220a      	movs	r2, #10
 800b580:	2100      	movs	r1, #0
 800b582:	f000 ff73 	bl	800c46c <strtol>
 800b586:	bd10      	pop	{r4, pc}

0800b588 <malloc>:
 800b588:	b510      	push	{r4, lr}
 800b58a:	4b03      	ldr	r3, [pc, #12]	; (800b598 <malloc+0x10>)
 800b58c:	0001      	movs	r1, r0
 800b58e:	6818      	ldr	r0, [r3, #0]
 800b590:	f000 f826 	bl	800b5e0 <_malloc_r>
 800b594:	bd10      	pop	{r4, pc}
 800b596:	46c0      	nop			; (mov r8, r8)
 800b598:	200001f4 	.word	0x200001f4

0800b59c <sbrk_aligned>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	4e0f      	ldr	r6, [pc, #60]	; (800b5dc <sbrk_aligned+0x40>)
 800b5a0:	000d      	movs	r5, r1
 800b5a2:	6831      	ldr	r1, [r6, #0]
 800b5a4:	0004      	movs	r4, r0
 800b5a6:	2900      	cmp	r1, #0
 800b5a8:	d102      	bne.n	800b5b0 <sbrk_aligned+0x14>
 800b5aa:	f002 f883 	bl	800d6b4 <_sbrk_r>
 800b5ae:	6030      	str	r0, [r6, #0]
 800b5b0:	0029      	movs	r1, r5
 800b5b2:	0020      	movs	r0, r4
 800b5b4:	f002 f87e 	bl	800d6b4 <_sbrk_r>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d00a      	beq.n	800b5d2 <sbrk_aligned+0x36>
 800b5bc:	2303      	movs	r3, #3
 800b5be:	1cc5      	adds	r5, r0, #3
 800b5c0:	439d      	bics	r5, r3
 800b5c2:	42a8      	cmp	r0, r5
 800b5c4:	d007      	beq.n	800b5d6 <sbrk_aligned+0x3a>
 800b5c6:	1a29      	subs	r1, r5, r0
 800b5c8:	0020      	movs	r0, r4
 800b5ca:	f002 f873 	bl	800d6b4 <_sbrk_r>
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	d101      	bne.n	800b5d6 <sbrk_aligned+0x3a>
 800b5d2:	2501      	movs	r5, #1
 800b5d4:	426d      	negs	r5, r5
 800b5d6:	0028      	movs	r0, r5
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
 800b5da:	46c0      	nop			; (mov r8, r8)
 800b5dc:	20006028 	.word	0x20006028

0800b5e0 <_malloc_r>:
 800b5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5e2:	2203      	movs	r2, #3
 800b5e4:	1ccb      	adds	r3, r1, #3
 800b5e6:	4393      	bics	r3, r2
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	0006      	movs	r6, r0
 800b5ec:	001f      	movs	r7, r3
 800b5ee:	2b0c      	cmp	r3, #12
 800b5f0:	d238      	bcs.n	800b664 <_malloc_r+0x84>
 800b5f2:	270c      	movs	r7, #12
 800b5f4:	42b9      	cmp	r1, r7
 800b5f6:	d837      	bhi.n	800b668 <_malloc_r+0x88>
 800b5f8:	0030      	movs	r0, r6
 800b5fa:	f000 f873 	bl	800b6e4 <__malloc_lock>
 800b5fe:	4b38      	ldr	r3, [pc, #224]	; (800b6e0 <_malloc_r+0x100>)
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	001c      	movs	r4, r3
 800b606:	2c00      	cmp	r4, #0
 800b608:	d133      	bne.n	800b672 <_malloc_r+0x92>
 800b60a:	0039      	movs	r1, r7
 800b60c:	0030      	movs	r0, r6
 800b60e:	f7ff ffc5 	bl	800b59c <sbrk_aligned>
 800b612:	0004      	movs	r4, r0
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	d15e      	bne.n	800b6d6 <_malloc_r+0xf6>
 800b618:	9b00      	ldr	r3, [sp, #0]
 800b61a:	681c      	ldr	r4, [r3, #0]
 800b61c:	0025      	movs	r5, r4
 800b61e:	2d00      	cmp	r5, #0
 800b620:	d14e      	bne.n	800b6c0 <_malloc_r+0xe0>
 800b622:	2c00      	cmp	r4, #0
 800b624:	d051      	beq.n	800b6ca <_malloc_r+0xea>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	0029      	movs	r1, r5
 800b62a:	18e3      	adds	r3, r4, r3
 800b62c:	0030      	movs	r0, r6
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	f002 f840 	bl	800d6b4 <_sbrk_r>
 800b634:	9b01      	ldr	r3, [sp, #4]
 800b636:	4283      	cmp	r3, r0
 800b638:	d147      	bne.n	800b6ca <_malloc_r+0xea>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	0030      	movs	r0, r6
 800b63e:	1aff      	subs	r7, r7, r3
 800b640:	0039      	movs	r1, r7
 800b642:	f7ff ffab 	bl	800b59c <sbrk_aligned>
 800b646:	3001      	adds	r0, #1
 800b648:	d03f      	beq.n	800b6ca <_malloc_r+0xea>
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	19db      	adds	r3, r3, r7
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	9b00      	ldr	r3, [sp, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d040      	beq.n	800b6da <_malloc_r+0xfa>
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	42a2      	cmp	r2, r4
 800b65c:	d133      	bne.n	800b6c6 <_malloc_r+0xe6>
 800b65e:	2200      	movs	r2, #0
 800b660:	605a      	str	r2, [r3, #4]
 800b662:	e014      	b.n	800b68e <_malloc_r+0xae>
 800b664:	2b00      	cmp	r3, #0
 800b666:	dac5      	bge.n	800b5f4 <_malloc_r+0x14>
 800b668:	230c      	movs	r3, #12
 800b66a:	2500      	movs	r5, #0
 800b66c:	6033      	str	r3, [r6, #0]
 800b66e:	0028      	movs	r0, r5
 800b670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b672:	6821      	ldr	r1, [r4, #0]
 800b674:	1bc9      	subs	r1, r1, r7
 800b676:	d420      	bmi.n	800b6ba <_malloc_r+0xda>
 800b678:	290b      	cmp	r1, #11
 800b67a:	d918      	bls.n	800b6ae <_malloc_r+0xce>
 800b67c:	19e2      	adds	r2, r4, r7
 800b67e:	6027      	str	r7, [r4, #0]
 800b680:	42a3      	cmp	r3, r4
 800b682:	d112      	bne.n	800b6aa <_malloc_r+0xca>
 800b684:	9b00      	ldr	r3, [sp, #0]
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	6863      	ldr	r3, [r4, #4]
 800b68a:	6011      	str	r1, [r2, #0]
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	0030      	movs	r0, r6
 800b690:	0025      	movs	r5, r4
 800b692:	f000 f82f 	bl	800b6f4 <__malloc_unlock>
 800b696:	2207      	movs	r2, #7
 800b698:	350b      	adds	r5, #11
 800b69a:	1d23      	adds	r3, r4, #4
 800b69c:	4395      	bics	r5, r2
 800b69e:	1aea      	subs	r2, r5, r3
 800b6a0:	429d      	cmp	r5, r3
 800b6a2:	d0e4      	beq.n	800b66e <_malloc_r+0x8e>
 800b6a4:	1b5b      	subs	r3, r3, r5
 800b6a6:	50a3      	str	r3, [r4, r2]
 800b6a8:	e7e1      	b.n	800b66e <_malloc_r+0x8e>
 800b6aa:	605a      	str	r2, [r3, #4]
 800b6ac:	e7ec      	b.n	800b688 <_malloc_r+0xa8>
 800b6ae:	6862      	ldr	r2, [r4, #4]
 800b6b0:	42a3      	cmp	r3, r4
 800b6b2:	d1d5      	bne.n	800b660 <_malloc_r+0x80>
 800b6b4:	9b00      	ldr	r3, [sp, #0]
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	e7e9      	b.n	800b68e <_malloc_r+0xae>
 800b6ba:	0023      	movs	r3, r4
 800b6bc:	6864      	ldr	r4, [r4, #4]
 800b6be:	e7a2      	b.n	800b606 <_malloc_r+0x26>
 800b6c0:	002c      	movs	r4, r5
 800b6c2:	686d      	ldr	r5, [r5, #4]
 800b6c4:	e7ab      	b.n	800b61e <_malloc_r+0x3e>
 800b6c6:	0013      	movs	r3, r2
 800b6c8:	e7c4      	b.n	800b654 <_malloc_r+0x74>
 800b6ca:	230c      	movs	r3, #12
 800b6cc:	0030      	movs	r0, r6
 800b6ce:	6033      	str	r3, [r6, #0]
 800b6d0:	f000 f810 	bl	800b6f4 <__malloc_unlock>
 800b6d4:	e7cb      	b.n	800b66e <_malloc_r+0x8e>
 800b6d6:	6027      	str	r7, [r4, #0]
 800b6d8:	e7d9      	b.n	800b68e <_malloc_r+0xae>
 800b6da:	605b      	str	r3, [r3, #4]
 800b6dc:	deff      	udf	#255	; 0xff
 800b6de:	46c0      	nop			; (mov r8, r8)
 800b6e0:	20006024 	.word	0x20006024

0800b6e4 <__malloc_lock>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	4802      	ldr	r0, [pc, #8]	; (800b6f0 <__malloc_lock+0xc>)
 800b6e8:	f002 f835 	bl	800d756 <__retarget_lock_acquire_recursive>
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	46c0      	nop			; (mov r8, r8)
 800b6f0:	2000616c 	.word	0x2000616c

0800b6f4 <__malloc_unlock>:
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	4802      	ldr	r0, [pc, #8]	; (800b700 <__malloc_unlock+0xc>)
 800b6f8:	f002 f82e 	bl	800d758 <__retarget_lock_release_recursive>
 800b6fc:	bd10      	pop	{r4, pc}
 800b6fe:	46c0      	nop			; (mov r8, r8)
 800b700:	2000616c 	.word	0x2000616c

0800b704 <sulp>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	0016      	movs	r6, r2
 800b708:	000d      	movs	r5, r1
 800b70a:	f003 fe47 	bl	800f39c <__ulp>
 800b70e:	2e00      	cmp	r6, #0
 800b710:	d00d      	beq.n	800b72e <sulp+0x2a>
 800b712:	236b      	movs	r3, #107	; 0x6b
 800b714:	006a      	lsls	r2, r5, #1
 800b716:	0d52      	lsrs	r2, r2, #21
 800b718:	1a9b      	subs	r3, r3, r2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dd07      	ble.n	800b72e <sulp+0x2a>
 800b71e:	2400      	movs	r4, #0
 800b720:	4a03      	ldr	r2, [pc, #12]	; (800b730 <sulp+0x2c>)
 800b722:	051b      	lsls	r3, r3, #20
 800b724:	189d      	adds	r5, r3, r2
 800b726:	002b      	movs	r3, r5
 800b728:	0022      	movs	r2, r4
 800b72a:	f7f6 fdd3 	bl	80022d4 <__aeabi_dmul>
 800b72e:	bd70      	pop	{r4, r5, r6, pc}
 800b730:	3ff00000 	.word	0x3ff00000

0800b734 <_strtod_l>:
 800b734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b736:	b0a1      	sub	sp, #132	; 0x84
 800b738:	9219      	str	r2, [sp, #100]	; 0x64
 800b73a:	2200      	movs	r2, #0
 800b73c:	2600      	movs	r6, #0
 800b73e:	2700      	movs	r7, #0
 800b740:	9004      	str	r0, [sp, #16]
 800b742:	9107      	str	r1, [sp, #28]
 800b744:	921c      	str	r2, [sp, #112]	; 0x70
 800b746:	911b      	str	r1, [sp, #108]	; 0x6c
 800b748:	780a      	ldrb	r2, [r1, #0]
 800b74a:	2a2b      	cmp	r2, #43	; 0x2b
 800b74c:	d055      	beq.n	800b7fa <_strtod_l+0xc6>
 800b74e:	d841      	bhi.n	800b7d4 <_strtod_l+0xa0>
 800b750:	2a0d      	cmp	r2, #13
 800b752:	d83b      	bhi.n	800b7cc <_strtod_l+0x98>
 800b754:	2a08      	cmp	r2, #8
 800b756:	d83b      	bhi.n	800b7d0 <_strtod_l+0x9c>
 800b758:	2a00      	cmp	r2, #0
 800b75a:	d044      	beq.n	800b7e6 <_strtod_l+0xb2>
 800b75c:	2200      	movs	r2, #0
 800b75e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b760:	2100      	movs	r1, #0
 800b762:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b764:	9109      	str	r1, [sp, #36]	; 0x24
 800b766:	782a      	ldrb	r2, [r5, #0]
 800b768:	2a30      	cmp	r2, #48	; 0x30
 800b76a:	d000      	beq.n	800b76e <_strtod_l+0x3a>
 800b76c:	e085      	b.n	800b87a <_strtod_l+0x146>
 800b76e:	786a      	ldrb	r2, [r5, #1]
 800b770:	3120      	adds	r1, #32
 800b772:	438a      	bics	r2, r1
 800b774:	2a58      	cmp	r2, #88	; 0x58
 800b776:	d000      	beq.n	800b77a <_strtod_l+0x46>
 800b778:	e075      	b.n	800b866 <_strtod_l+0x132>
 800b77a:	9302      	str	r3, [sp, #8]
 800b77c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b77e:	4a97      	ldr	r2, [pc, #604]	; (800b9dc <_strtod_l+0x2a8>)
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	ab1c      	add	r3, sp, #112	; 0x70
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	9804      	ldr	r0, [sp, #16]
 800b788:	ab1d      	add	r3, sp, #116	; 0x74
 800b78a:	a91b      	add	r1, sp, #108	; 0x6c
 800b78c:	f002 ff7c 	bl	800e688 <__gethex>
 800b790:	230f      	movs	r3, #15
 800b792:	0002      	movs	r2, r0
 800b794:	401a      	ands	r2, r3
 800b796:	0004      	movs	r4, r0
 800b798:	9205      	str	r2, [sp, #20]
 800b79a:	4218      	tst	r0, r3
 800b79c:	d005      	beq.n	800b7aa <_strtod_l+0x76>
 800b79e:	2a06      	cmp	r2, #6
 800b7a0:	d12d      	bne.n	800b7fe <_strtod_l+0xca>
 800b7a2:	1c6b      	adds	r3, r5, #1
 800b7a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <_strtod_l+0x82>
 800b7b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d01b      	beq.n	800b7f4 <_strtod_l+0xc0>
 800b7bc:	2380      	movs	r3, #128	; 0x80
 800b7be:	0032      	movs	r2, r6
 800b7c0:	061b      	lsls	r3, r3, #24
 800b7c2:	18fb      	adds	r3, r7, r3
 800b7c4:	0010      	movs	r0, r2
 800b7c6:	0019      	movs	r1, r3
 800b7c8:	b021      	add	sp, #132	; 0x84
 800b7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7cc:	2a20      	cmp	r2, #32
 800b7ce:	d1c5      	bne.n	800b75c <_strtod_l+0x28>
 800b7d0:	3101      	adds	r1, #1
 800b7d2:	e7b8      	b.n	800b746 <_strtod_l+0x12>
 800b7d4:	2a2d      	cmp	r2, #45	; 0x2d
 800b7d6:	d1c1      	bne.n	800b75c <_strtod_l+0x28>
 800b7d8:	3a2c      	subs	r2, #44	; 0x2c
 800b7da:	920f      	str	r2, [sp, #60]	; 0x3c
 800b7dc:	1c4a      	adds	r2, r1, #1
 800b7de:	921b      	str	r2, [sp, #108]	; 0x6c
 800b7e0:	784a      	ldrb	r2, [r1, #1]
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	d1bc      	bne.n	800b760 <_strtod_l+0x2c>
 800b7e6:	9b07      	ldr	r3, [sp, #28]
 800b7e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1dd      	bne.n	800b7b0 <_strtod_l+0x7c>
 800b7f4:	0032      	movs	r2, r6
 800b7f6:	003b      	movs	r3, r7
 800b7f8:	e7e4      	b.n	800b7c4 <_strtod_l+0x90>
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	e7ed      	b.n	800b7da <_strtod_l+0xa6>
 800b7fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b800:	2a00      	cmp	r2, #0
 800b802:	d007      	beq.n	800b814 <_strtod_l+0xe0>
 800b804:	2135      	movs	r1, #53	; 0x35
 800b806:	a81e      	add	r0, sp, #120	; 0x78
 800b808:	f003 feb9 	bl	800f57e <__copybits>
 800b80c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b80e:	9804      	ldr	r0, [sp, #16]
 800b810:	f003 fa82 	bl	800ed18 <_Bfree>
 800b814:	9805      	ldr	r0, [sp, #20]
 800b816:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b818:	3801      	subs	r0, #1
 800b81a:	2804      	cmp	r0, #4
 800b81c:	d806      	bhi.n	800b82c <_strtod_l+0xf8>
 800b81e:	f7f4 fc7b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b822:	0312      	.short	0x0312
 800b824:	1e1c      	.short	0x1e1c
 800b826:	12          	.byte	0x12
 800b827:	00          	.byte	0x00
 800b828:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b82a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b82c:	05e4      	lsls	r4, r4, #23
 800b82e:	d502      	bpl.n	800b836 <_strtod_l+0x102>
 800b830:	2380      	movs	r3, #128	; 0x80
 800b832:	061b      	lsls	r3, r3, #24
 800b834:	431f      	orrs	r7, r3
 800b836:	4b6a      	ldr	r3, [pc, #424]	; (800b9e0 <_strtod_l+0x2ac>)
 800b838:	423b      	tst	r3, r7
 800b83a:	d1b6      	bne.n	800b7aa <_strtod_l+0x76>
 800b83c:	f001 ff60 	bl	800d700 <__errno>
 800b840:	2322      	movs	r3, #34	; 0x22
 800b842:	6003      	str	r3, [r0, #0]
 800b844:	e7b1      	b.n	800b7aa <_strtod_l+0x76>
 800b846:	4967      	ldr	r1, [pc, #412]	; (800b9e4 <_strtod_l+0x2b0>)
 800b848:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b84a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b84c:	400a      	ands	r2, r1
 800b84e:	4966      	ldr	r1, [pc, #408]	; (800b9e8 <_strtod_l+0x2b4>)
 800b850:	185b      	adds	r3, r3, r1
 800b852:	051b      	lsls	r3, r3, #20
 800b854:	431a      	orrs	r2, r3
 800b856:	0017      	movs	r7, r2
 800b858:	e7e8      	b.n	800b82c <_strtod_l+0xf8>
 800b85a:	4f61      	ldr	r7, [pc, #388]	; (800b9e0 <_strtod_l+0x2ac>)
 800b85c:	e7e6      	b.n	800b82c <_strtod_l+0xf8>
 800b85e:	2601      	movs	r6, #1
 800b860:	4f62      	ldr	r7, [pc, #392]	; (800b9ec <_strtod_l+0x2b8>)
 800b862:	4276      	negs	r6, r6
 800b864:	e7e2      	b.n	800b82c <_strtod_l+0xf8>
 800b866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b30      	cmp	r3, #48	; 0x30
 800b870:	d0f9      	beq.n	800b866 <_strtod_l+0x132>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d099      	beq.n	800b7aa <_strtod_l+0x76>
 800b876:	2301      	movs	r3, #1
 800b878:	9309      	str	r3, [sp, #36]	; 0x24
 800b87a:	2500      	movs	r5, #0
 800b87c:	220a      	movs	r2, #10
 800b87e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b880:	950d      	str	r5, [sp, #52]	; 0x34
 800b882:	9310      	str	r3, [sp, #64]	; 0x40
 800b884:	9508      	str	r5, [sp, #32]
 800b886:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b888:	7804      	ldrb	r4, [r0, #0]
 800b88a:	0023      	movs	r3, r4
 800b88c:	3b30      	subs	r3, #48	; 0x30
 800b88e:	b2d9      	uxtb	r1, r3
 800b890:	2909      	cmp	r1, #9
 800b892:	d927      	bls.n	800b8e4 <_strtod_l+0x1b0>
 800b894:	2201      	movs	r2, #1
 800b896:	4956      	ldr	r1, [pc, #344]	; (800b9f0 <_strtod_l+0x2bc>)
 800b898:	f001 fdcd 	bl	800d436 <strncmp>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d031      	beq.n	800b904 <_strtod_l+0x1d0>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	0023      	movs	r3, r4
 800b8a4:	4684      	mov	ip, r0
 800b8a6:	9a08      	ldr	r2, [sp, #32]
 800b8a8:	900c      	str	r0, [sp, #48]	; 0x30
 800b8aa:	9205      	str	r2, [sp, #20]
 800b8ac:	2220      	movs	r2, #32
 800b8ae:	0019      	movs	r1, r3
 800b8b0:	4391      	bics	r1, r2
 800b8b2:	000a      	movs	r2, r1
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	9106      	str	r1, [sp, #24]
 800b8b8:	2a45      	cmp	r2, #69	; 0x45
 800b8ba:	d000      	beq.n	800b8be <_strtod_l+0x18a>
 800b8bc:	e0c2      	b.n	800ba44 <_strtod_l+0x310>
 800b8be:	9b05      	ldr	r3, [sp, #20]
 800b8c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8c2:	4303      	orrs	r3, r0
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	428b      	cmp	r3, r1
 800b8c8:	d08d      	beq.n	800b7e6 <_strtod_l+0xb2>
 800b8ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8cc:	9307      	str	r3, [sp, #28]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b8d2:	9b07      	ldr	r3, [sp, #28]
 800b8d4:	785b      	ldrb	r3, [r3, #1]
 800b8d6:	2b2b      	cmp	r3, #43	; 0x2b
 800b8d8:	d071      	beq.n	800b9be <_strtod_l+0x28a>
 800b8da:	000c      	movs	r4, r1
 800b8dc:	2b2d      	cmp	r3, #45	; 0x2d
 800b8de:	d174      	bne.n	800b9ca <_strtod_l+0x296>
 800b8e0:	2401      	movs	r4, #1
 800b8e2:	e06d      	b.n	800b9c0 <_strtod_l+0x28c>
 800b8e4:	9908      	ldr	r1, [sp, #32]
 800b8e6:	2908      	cmp	r1, #8
 800b8e8:	dc09      	bgt.n	800b8fe <_strtod_l+0x1ca>
 800b8ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8ec:	4351      	muls	r1, r2
 800b8ee:	185b      	adds	r3, r3, r1
 800b8f0:	930d      	str	r3, [sp, #52]	; 0x34
 800b8f2:	9b08      	ldr	r3, [sp, #32]
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	9308      	str	r3, [sp, #32]
 800b8fa:	901b      	str	r0, [sp, #108]	; 0x6c
 800b8fc:	e7c3      	b.n	800b886 <_strtod_l+0x152>
 800b8fe:	4355      	muls	r5, r2
 800b900:	195d      	adds	r5, r3, r5
 800b902:	e7f6      	b.n	800b8f2 <_strtod_l+0x1be>
 800b904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	921b      	str	r2, [sp, #108]	; 0x6c
 800b90a:	9a08      	ldr	r2, [sp, #32]
 800b90c:	785b      	ldrb	r3, [r3, #1]
 800b90e:	2a00      	cmp	r2, #0
 800b910:	d03a      	beq.n	800b988 <_strtod_l+0x254>
 800b912:	900c      	str	r0, [sp, #48]	; 0x30
 800b914:	9205      	str	r2, [sp, #20]
 800b916:	001a      	movs	r2, r3
 800b918:	3a30      	subs	r2, #48	; 0x30
 800b91a:	2a09      	cmp	r2, #9
 800b91c:	d912      	bls.n	800b944 <_strtod_l+0x210>
 800b91e:	2201      	movs	r2, #1
 800b920:	4694      	mov	ip, r2
 800b922:	e7c3      	b.n	800b8ac <_strtod_l+0x178>
 800b924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b926:	3001      	adds	r0, #1
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b92c:	785b      	ldrb	r3, [r3, #1]
 800b92e:	2b30      	cmp	r3, #48	; 0x30
 800b930:	d0f8      	beq.n	800b924 <_strtod_l+0x1f0>
 800b932:	001a      	movs	r2, r3
 800b934:	3a31      	subs	r2, #49	; 0x31
 800b936:	2a08      	cmp	r2, #8
 800b938:	d83c      	bhi.n	800b9b4 <_strtod_l+0x280>
 800b93a:	900c      	str	r0, [sp, #48]	; 0x30
 800b93c:	2000      	movs	r0, #0
 800b93e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b940:	9005      	str	r0, [sp, #20]
 800b942:	9210      	str	r2, [sp, #64]	; 0x40
 800b944:	001a      	movs	r2, r3
 800b946:	1c41      	adds	r1, r0, #1
 800b948:	3a30      	subs	r2, #48	; 0x30
 800b94a:	2b30      	cmp	r3, #48	; 0x30
 800b94c:	d016      	beq.n	800b97c <_strtod_l+0x248>
 800b94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b950:	185b      	adds	r3, r3, r1
 800b952:	930c      	str	r3, [sp, #48]	; 0x30
 800b954:	9b05      	ldr	r3, [sp, #20]
 800b956:	210a      	movs	r1, #10
 800b958:	469c      	mov	ip, r3
 800b95a:	4484      	add	ip, r0
 800b95c:	4563      	cmp	r3, ip
 800b95e:	d115      	bne.n	800b98c <_strtod_l+0x258>
 800b960:	9905      	ldr	r1, [sp, #20]
 800b962:	9b05      	ldr	r3, [sp, #20]
 800b964:	3101      	adds	r1, #1
 800b966:	1809      	adds	r1, r1, r0
 800b968:	181b      	adds	r3, r3, r0
 800b96a:	9105      	str	r1, [sp, #20]
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	dc19      	bgt.n	800b9a4 <_strtod_l+0x270>
 800b970:	230a      	movs	r3, #10
 800b972:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b974:	434b      	muls	r3, r1
 800b976:	2100      	movs	r1, #0
 800b978:	18d3      	adds	r3, r2, r3
 800b97a:	930d      	str	r3, [sp, #52]	; 0x34
 800b97c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b97e:	0008      	movs	r0, r1
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	921b      	str	r2, [sp, #108]	; 0x6c
 800b984:	785b      	ldrb	r3, [r3, #1]
 800b986:	e7c6      	b.n	800b916 <_strtod_l+0x1e2>
 800b988:	9808      	ldr	r0, [sp, #32]
 800b98a:	e7d0      	b.n	800b92e <_strtod_l+0x1fa>
 800b98c:	1c5c      	adds	r4, r3, #1
 800b98e:	2b08      	cmp	r3, #8
 800b990:	dc04      	bgt.n	800b99c <_strtod_l+0x268>
 800b992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b994:	434b      	muls	r3, r1
 800b996:	930d      	str	r3, [sp, #52]	; 0x34
 800b998:	0023      	movs	r3, r4
 800b99a:	e7df      	b.n	800b95c <_strtod_l+0x228>
 800b99c:	2c10      	cmp	r4, #16
 800b99e:	dcfb      	bgt.n	800b998 <_strtod_l+0x264>
 800b9a0:	434d      	muls	r5, r1
 800b9a2:	e7f9      	b.n	800b998 <_strtod_l+0x264>
 800b9a4:	9b05      	ldr	r3, [sp, #20]
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	2b10      	cmp	r3, #16
 800b9aa:	dce7      	bgt.n	800b97c <_strtod_l+0x248>
 800b9ac:	230a      	movs	r3, #10
 800b9ae:	435d      	muls	r5, r3
 800b9b0:	1955      	adds	r5, r2, r5
 800b9b2:	e7e3      	b.n	800b97c <_strtod_l+0x248>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	920c      	str	r2, [sp, #48]	; 0x30
 800b9b8:	9205      	str	r2, [sp, #20]
 800b9ba:	3201      	adds	r2, #1
 800b9bc:	e7b0      	b.n	800b920 <_strtod_l+0x1ec>
 800b9be:	2400      	movs	r4, #0
 800b9c0:	9b07      	ldr	r3, [sp, #28]
 800b9c2:	3302      	adds	r3, #2
 800b9c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800b9c6:	9b07      	ldr	r3, [sp, #28]
 800b9c8:	789b      	ldrb	r3, [r3, #2]
 800b9ca:	001a      	movs	r2, r3
 800b9cc:	3a30      	subs	r2, #48	; 0x30
 800b9ce:	2a09      	cmp	r2, #9
 800b9d0:	d914      	bls.n	800b9fc <_strtod_l+0x2c8>
 800b9d2:	9a07      	ldr	r2, [sp, #28]
 800b9d4:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	e033      	b.n	800ba42 <_strtod_l+0x30e>
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	08011ffc 	.word	0x08011ffc
 800b9e0:	7ff00000 	.word	0x7ff00000
 800b9e4:	ffefffff 	.word	0xffefffff
 800b9e8:	00000433 	.word	0x00000433
 800b9ec:	7fffffff 	.word	0x7fffffff
 800b9f0:	08011ff8 	.word	0x08011ff8
 800b9f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9f6:	1c5a      	adds	r2, r3, #1
 800b9f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9fa:	785b      	ldrb	r3, [r3, #1]
 800b9fc:	2b30      	cmp	r3, #48	; 0x30
 800b9fe:	d0f9      	beq.n	800b9f4 <_strtod_l+0x2c0>
 800ba00:	2200      	movs	r2, #0
 800ba02:	9206      	str	r2, [sp, #24]
 800ba04:	001a      	movs	r2, r3
 800ba06:	3a31      	subs	r2, #49	; 0x31
 800ba08:	2a08      	cmp	r2, #8
 800ba0a:	d81b      	bhi.n	800ba44 <_strtod_l+0x310>
 800ba0c:	3b30      	subs	r3, #48	; 0x30
 800ba0e:	930e      	str	r3, [sp, #56]	; 0x38
 800ba10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba12:	9306      	str	r3, [sp, #24]
 800ba14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba16:	1c59      	adds	r1, r3, #1
 800ba18:	911b      	str	r1, [sp, #108]	; 0x6c
 800ba1a:	785b      	ldrb	r3, [r3, #1]
 800ba1c:	001a      	movs	r2, r3
 800ba1e:	3a30      	subs	r2, #48	; 0x30
 800ba20:	2a09      	cmp	r2, #9
 800ba22:	d93a      	bls.n	800ba9a <_strtod_l+0x366>
 800ba24:	9a06      	ldr	r2, [sp, #24]
 800ba26:	1a8a      	subs	r2, r1, r2
 800ba28:	49b2      	ldr	r1, [pc, #712]	; (800bcf4 <_strtod_l+0x5c0>)
 800ba2a:	9106      	str	r1, [sp, #24]
 800ba2c:	2a08      	cmp	r2, #8
 800ba2e:	dc04      	bgt.n	800ba3a <_strtod_l+0x306>
 800ba30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba32:	9206      	str	r2, [sp, #24]
 800ba34:	428a      	cmp	r2, r1
 800ba36:	dd00      	ble.n	800ba3a <_strtod_l+0x306>
 800ba38:	9106      	str	r1, [sp, #24]
 800ba3a:	2c00      	cmp	r4, #0
 800ba3c:	d002      	beq.n	800ba44 <_strtod_l+0x310>
 800ba3e:	9a06      	ldr	r2, [sp, #24]
 800ba40:	4252      	negs	r2, r2
 800ba42:	9206      	str	r2, [sp, #24]
 800ba44:	9a05      	ldr	r2, [sp, #20]
 800ba46:	2a00      	cmp	r2, #0
 800ba48:	d14d      	bne.n	800bae6 <_strtod_l+0x3b2>
 800ba4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba4c:	4310      	orrs	r0, r2
 800ba4e:	d000      	beq.n	800ba52 <_strtod_l+0x31e>
 800ba50:	e6ab      	b.n	800b7aa <_strtod_l+0x76>
 800ba52:	4662      	mov	r2, ip
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	d000      	beq.n	800ba5a <_strtod_l+0x326>
 800ba58:	e6c5      	b.n	800b7e6 <_strtod_l+0xb2>
 800ba5a:	2b69      	cmp	r3, #105	; 0x69
 800ba5c:	d027      	beq.n	800baae <_strtod_l+0x37a>
 800ba5e:	dc23      	bgt.n	800baa8 <_strtod_l+0x374>
 800ba60:	2b49      	cmp	r3, #73	; 0x49
 800ba62:	d024      	beq.n	800baae <_strtod_l+0x37a>
 800ba64:	2b4e      	cmp	r3, #78	; 0x4e
 800ba66:	d000      	beq.n	800ba6a <_strtod_l+0x336>
 800ba68:	e6bd      	b.n	800b7e6 <_strtod_l+0xb2>
 800ba6a:	49a3      	ldr	r1, [pc, #652]	; (800bcf8 <_strtod_l+0x5c4>)
 800ba6c:	a81b      	add	r0, sp, #108	; 0x6c
 800ba6e:	f003 f841 	bl	800eaf4 <__match>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d100      	bne.n	800ba78 <_strtod_l+0x344>
 800ba76:	e6b6      	b.n	800b7e6 <_strtod_l+0xb2>
 800ba78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	2b28      	cmp	r3, #40	; 0x28
 800ba7e:	d12c      	bne.n	800bada <_strtod_l+0x3a6>
 800ba80:	499e      	ldr	r1, [pc, #632]	; (800bcfc <_strtod_l+0x5c8>)
 800ba82:	aa1e      	add	r2, sp, #120	; 0x78
 800ba84:	a81b      	add	r0, sp, #108	; 0x6c
 800ba86:	f003 f849 	bl	800eb1c <__hexnan>
 800ba8a:	2805      	cmp	r0, #5
 800ba8c:	d125      	bne.n	800bada <_strtod_l+0x3a6>
 800ba8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba90:	4a9b      	ldr	r2, [pc, #620]	; (800bd00 <_strtod_l+0x5cc>)
 800ba92:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ba94:	431a      	orrs	r2, r3
 800ba96:	0017      	movs	r7, r2
 800ba98:	e687      	b.n	800b7aa <_strtod_l+0x76>
 800ba9a:	220a      	movs	r2, #10
 800ba9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ba9e:	434a      	muls	r2, r1
 800baa0:	18d2      	adds	r2, r2, r3
 800baa2:	3a30      	subs	r2, #48	; 0x30
 800baa4:	920e      	str	r2, [sp, #56]	; 0x38
 800baa6:	e7b5      	b.n	800ba14 <_strtod_l+0x2e0>
 800baa8:	2b6e      	cmp	r3, #110	; 0x6e
 800baaa:	d0de      	beq.n	800ba6a <_strtod_l+0x336>
 800baac:	e69b      	b.n	800b7e6 <_strtod_l+0xb2>
 800baae:	4995      	ldr	r1, [pc, #596]	; (800bd04 <_strtod_l+0x5d0>)
 800bab0:	a81b      	add	r0, sp, #108	; 0x6c
 800bab2:	f003 f81f 	bl	800eaf4 <__match>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d100      	bne.n	800babc <_strtod_l+0x388>
 800baba:	e694      	b.n	800b7e6 <_strtod_l+0xb2>
 800babc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800babe:	4992      	ldr	r1, [pc, #584]	; (800bd08 <_strtod_l+0x5d4>)
 800bac0:	3b01      	subs	r3, #1
 800bac2:	a81b      	add	r0, sp, #108	; 0x6c
 800bac4:	931b      	str	r3, [sp, #108]	; 0x6c
 800bac6:	f003 f815 	bl	800eaf4 <__match>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d102      	bne.n	800bad4 <_strtod_l+0x3a0>
 800bace:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bad0:	3301      	adds	r3, #1
 800bad2:	931b      	str	r3, [sp, #108]	; 0x6c
 800bad4:	2600      	movs	r6, #0
 800bad6:	4f8a      	ldr	r7, [pc, #552]	; (800bd00 <_strtod_l+0x5cc>)
 800bad8:	e667      	b.n	800b7aa <_strtod_l+0x76>
 800bada:	488c      	ldr	r0, [pc, #560]	; (800bd0c <_strtod_l+0x5d8>)
 800badc:	f001 fe5a 	bl	800d794 <nan>
 800bae0:	0006      	movs	r6, r0
 800bae2:	000f      	movs	r7, r1
 800bae4:	e661      	b.n	800b7aa <_strtod_l+0x76>
 800bae6:	9b06      	ldr	r3, [sp, #24]
 800bae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800baea:	1a9b      	subs	r3, r3, r2
 800baec:	9309      	str	r3, [sp, #36]	; 0x24
 800baee:	9b08      	ldr	r3, [sp, #32]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <_strtod_l+0x3c4>
 800baf4:	9b05      	ldr	r3, [sp, #20]
 800baf6:	9308      	str	r3, [sp, #32]
 800baf8:	9c05      	ldr	r4, [sp, #20]
 800bafa:	2c10      	cmp	r4, #16
 800bafc:	dd00      	ble.n	800bb00 <_strtod_l+0x3cc>
 800bafe:	2410      	movs	r4, #16
 800bb00:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bb02:	f7f7 faaf 	bl	8003064 <__aeabi_ui2d>
 800bb06:	9b05      	ldr	r3, [sp, #20]
 800bb08:	0006      	movs	r6, r0
 800bb0a:	000f      	movs	r7, r1
 800bb0c:	2b09      	cmp	r3, #9
 800bb0e:	dd15      	ble.n	800bb3c <_strtod_l+0x408>
 800bb10:	0022      	movs	r2, r4
 800bb12:	4b7f      	ldr	r3, [pc, #508]	; (800bd10 <_strtod_l+0x5dc>)
 800bb14:	3a09      	subs	r2, #9
 800bb16:	00d2      	lsls	r2, r2, #3
 800bb18:	189b      	adds	r3, r3, r2
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	f7f6 fbd9 	bl	80022d4 <__aeabi_dmul>
 800bb22:	0006      	movs	r6, r0
 800bb24:	0028      	movs	r0, r5
 800bb26:	000f      	movs	r7, r1
 800bb28:	f7f7 fa9c 	bl	8003064 <__aeabi_ui2d>
 800bb2c:	0002      	movs	r2, r0
 800bb2e:	000b      	movs	r3, r1
 800bb30:	0030      	movs	r0, r6
 800bb32:	0039      	movs	r1, r7
 800bb34:	f7f5 fc74 	bl	8001420 <__aeabi_dadd>
 800bb38:	0006      	movs	r6, r0
 800bb3a:	000f      	movs	r7, r1
 800bb3c:	9b05      	ldr	r3, [sp, #20]
 800bb3e:	2b0f      	cmp	r3, #15
 800bb40:	dc39      	bgt.n	800bbb6 <_strtod_l+0x482>
 800bb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d100      	bne.n	800bb4a <_strtod_l+0x416>
 800bb48:	e62f      	b.n	800b7aa <_strtod_l+0x76>
 800bb4a:	dd24      	ble.n	800bb96 <_strtod_l+0x462>
 800bb4c:	2b16      	cmp	r3, #22
 800bb4e:	dc09      	bgt.n	800bb64 <_strtod_l+0x430>
 800bb50:	496f      	ldr	r1, [pc, #444]	; (800bd10 <_strtod_l+0x5dc>)
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	18c9      	adds	r1, r1, r3
 800bb56:	0032      	movs	r2, r6
 800bb58:	6808      	ldr	r0, [r1, #0]
 800bb5a:	6849      	ldr	r1, [r1, #4]
 800bb5c:	003b      	movs	r3, r7
 800bb5e:	f7f6 fbb9 	bl	80022d4 <__aeabi_dmul>
 800bb62:	e7bd      	b.n	800bae0 <_strtod_l+0x3ac>
 800bb64:	2325      	movs	r3, #37	; 0x25
 800bb66:	9a05      	ldr	r2, [sp, #20]
 800bb68:	1a9b      	subs	r3, r3, r2
 800bb6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	db22      	blt.n	800bbb6 <_strtod_l+0x482>
 800bb70:	240f      	movs	r4, #15
 800bb72:	9b05      	ldr	r3, [sp, #20]
 800bb74:	4d66      	ldr	r5, [pc, #408]	; (800bd10 <_strtod_l+0x5dc>)
 800bb76:	1ae4      	subs	r4, r4, r3
 800bb78:	00e1      	lsls	r1, r4, #3
 800bb7a:	1869      	adds	r1, r5, r1
 800bb7c:	0032      	movs	r2, r6
 800bb7e:	6808      	ldr	r0, [r1, #0]
 800bb80:	6849      	ldr	r1, [r1, #4]
 800bb82:	003b      	movs	r3, r7
 800bb84:	f7f6 fba6 	bl	80022d4 <__aeabi_dmul>
 800bb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb8a:	1b1c      	subs	r4, r3, r4
 800bb8c:	00e4      	lsls	r4, r4, #3
 800bb8e:	192d      	adds	r5, r5, r4
 800bb90:	682a      	ldr	r2, [r5, #0]
 800bb92:	686b      	ldr	r3, [r5, #4]
 800bb94:	e7e3      	b.n	800bb5e <_strtod_l+0x42a>
 800bb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb98:	3316      	adds	r3, #22
 800bb9a:	db0c      	blt.n	800bbb6 <_strtod_l+0x482>
 800bb9c:	9906      	ldr	r1, [sp, #24]
 800bb9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bba0:	4b5b      	ldr	r3, [pc, #364]	; (800bd10 <_strtod_l+0x5dc>)
 800bba2:	1a52      	subs	r2, r2, r1
 800bba4:	00d2      	lsls	r2, r2, #3
 800bba6:	189b      	adds	r3, r3, r2
 800bba8:	0030      	movs	r0, r6
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	0039      	movs	r1, r7
 800bbb0:	f7f5 ff96 	bl	8001ae0 <__aeabi_ddiv>
 800bbb4:	e794      	b.n	800bae0 <_strtod_l+0x3ac>
 800bbb6:	9b05      	ldr	r3, [sp, #20]
 800bbb8:	1b1c      	subs	r4, r3, r4
 800bbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbbc:	18e4      	adds	r4, r4, r3
 800bbbe:	2c00      	cmp	r4, #0
 800bbc0:	dd72      	ble.n	800bca8 <_strtod_l+0x574>
 800bbc2:	220f      	movs	r2, #15
 800bbc4:	0023      	movs	r3, r4
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	4214      	tst	r4, r2
 800bbca:	d00a      	beq.n	800bbe2 <_strtod_l+0x4ae>
 800bbcc:	4950      	ldr	r1, [pc, #320]	; (800bd10 <_strtod_l+0x5dc>)
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	18c9      	adds	r1, r1, r3
 800bbd2:	0032      	movs	r2, r6
 800bbd4:	6808      	ldr	r0, [r1, #0]
 800bbd6:	6849      	ldr	r1, [r1, #4]
 800bbd8:	003b      	movs	r3, r7
 800bbda:	f7f6 fb7b 	bl	80022d4 <__aeabi_dmul>
 800bbde:	0006      	movs	r6, r0
 800bbe0:	000f      	movs	r7, r1
 800bbe2:	230f      	movs	r3, #15
 800bbe4:	439c      	bics	r4, r3
 800bbe6:	d04a      	beq.n	800bc7e <_strtod_l+0x54a>
 800bbe8:	3326      	adds	r3, #38	; 0x26
 800bbea:	33ff      	adds	r3, #255	; 0xff
 800bbec:	429c      	cmp	r4, r3
 800bbee:	dd22      	ble.n	800bc36 <_strtod_l+0x502>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	9305      	str	r3, [sp, #20]
 800bbf4:	9306      	str	r3, [sp, #24]
 800bbf6:	930d      	str	r3, [sp, #52]	; 0x34
 800bbf8:	9308      	str	r3, [sp, #32]
 800bbfa:	2322      	movs	r3, #34	; 0x22
 800bbfc:	2600      	movs	r6, #0
 800bbfe:	9a04      	ldr	r2, [sp, #16]
 800bc00:	4f3f      	ldr	r7, [pc, #252]	; (800bd00 <_strtod_l+0x5cc>)
 800bc02:	6013      	str	r3, [r2, #0]
 800bc04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc06:	42b3      	cmp	r3, r6
 800bc08:	d100      	bne.n	800bc0c <_strtod_l+0x4d8>
 800bc0a:	e5ce      	b.n	800b7aa <_strtod_l+0x76>
 800bc0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc0e:	9804      	ldr	r0, [sp, #16]
 800bc10:	f003 f882 	bl	800ed18 <_Bfree>
 800bc14:	9908      	ldr	r1, [sp, #32]
 800bc16:	9804      	ldr	r0, [sp, #16]
 800bc18:	f003 f87e 	bl	800ed18 <_Bfree>
 800bc1c:	9906      	ldr	r1, [sp, #24]
 800bc1e:	9804      	ldr	r0, [sp, #16]
 800bc20:	f003 f87a 	bl	800ed18 <_Bfree>
 800bc24:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bc26:	9804      	ldr	r0, [sp, #16]
 800bc28:	f003 f876 	bl	800ed18 <_Bfree>
 800bc2c:	9905      	ldr	r1, [sp, #20]
 800bc2e:	9804      	ldr	r0, [sp, #16]
 800bc30:	f003 f872 	bl	800ed18 <_Bfree>
 800bc34:	e5b9      	b.n	800b7aa <_strtod_l+0x76>
 800bc36:	2300      	movs	r3, #0
 800bc38:	0030      	movs	r0, r6
 800bc3a:	0039      	movs	r1, r7
 800bc3c:	4d35      	ldr	r5, [pc, #212]	; (800bd14 <_strtod_l+0x5e0>)
 800bc3e:	1124      	asrs	r4, r4, #4
 800bc40:	9307      	str	r3, [sp, #28]
 800bc42:	2c01      	cmp	r4, #1
 800bc44:	dc1e      	bgt.n	800bc84 <_strtod_l+0x550>
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <_strtod_l+0x51a>
 800bc4a:	0006      	movs	r6, r0
 800bc4c:	000f      	movs	r7, r1
 800bc4e:	4b32      	ldr	r3, [pc, #200]	; (800bd18 <_strtod_l+0x5e4>)
 800bc50:	9a07      	ldr	r2, [sp, #28]
 800bc52:	18ff      	adds	r7, r7, r3
 800bc54:	4b2f      	ldr	r3, [pc, #188]	; (800bd14 <_strtod_l+0x5e0>)
 800bc56:	00d2      	lsls	r2, r2, #3
 800bc58:	189d      	adds	r5, r3, r2
 800bc5a:	6828      	ldr	r0, [r5, #0]
 800bc5c:	6869      	ldr	r1, [r5, #4]
 800bc5e:	0032      	movs	r2, r6
 800bc60:	003b      	movs	r3, r7
 800bc62:	f7f6 fb37 	bl	80022d4 <__aeabi_dmul>
 800bc66:	4b26      	ldr	r3, [pc, #152]	; (800bd00 <_strtod_l+0x5cc>)
 800bc68:	4a2c      	ldr	r2, [pc, #176]	; (800bd1c <_strtod_l+0x5e8>)
 800bc6a:	0006      	movs	r6, r0
 800bc6c:	400b      	ands	r3, r1
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d8be      	bhi.n	800bbf0 <_strtod_l+0x4bc>
 800bc72:	4a2b      	ldr	r2, [pc, #172]	; (800bd20 <_strtod_l+0x5ec>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d913      	bls.n	800bca0 <_strtod_l+0x56c>
 800bc78:	2601      	movs	r6, #1
 800bc7a:	4f2a      	ldr	r7, [pc, #168]	; (800bd24 <_strtod_l+0x5f0>)
 800bc7c:	4276      	negs	r6, r6
 800bc7e:	2300      	movs	r3, #0
 800bc80:	9307      	str	r3, [sp, #28]
 800bc82:	e088      	b.n	800bd96 <_strtod_l+0x662>
 800bc84:	2201      	movs	r2, #1
 800bc86:	4214      	tst	r4, r2
 800bc88:	d004      	beq.n	800bc94 <_strtod_l+0x560>
 800bc8a:	682a      	ldr	r2, [r5, #0]
 800bc8c:	686b      	ldr	r3, [r5, #4]
 800bc8e:	f7f6 fb21 	bl	80022d4 <__aeabi_dmul>
 800bc92:	2301      	movs	r3, #1
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	1064      	asrs	r4, r4, #1
 800bc98:	3201      	adds	r2, #1
 800bc9a:	9207      	str	r2, [sp, #28]
 800bc9c:	3508      	adds	r5, #8
 800bc9e:	e7d0      	b.n	800bc42 <_strtod_l+0x50e>
 800bca0:	23d4      	movs	r3, #212	; 0xd4
 800bca2:	049b      	lsls	r3, r3, #18
 800bca4:	18cf      	adds	r7, r1, r3
 800bca6:	e7ea      	b.n	800bc7e <_strtod_l+0x54a>
 800bca8:	2c00      	cmp	r4, #0
 800bcaa:	d0e8      	beq.n	800bc7e <_strtod_l+0x54a>
 800bcac:	4264      	negs	r4, r4
 800bcae:	230f      	movs	r3, #15
 800bcb0:	0022      	movs	r2, r4
 800bcb2:	401a      	ands	r2, r3
 800bcb4:	421c      	tst	r4, r3
 800bcb6:	d00a      	beq.n	800bcce <_strtod_l+0x59a>
 800bcb8:	4b15      	ldr	r3, [pc, #84]	; (800bd10 <_strtod_l+0x5dc>)
 800bcba:	00d2      	lsls	r2, r2, #3
 800bcbc:	189b      	adds	r3, r3, r2
 800bcbe:	0030      	movs	r0, r6
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	0039      	movs	r1, r7
 800bcc6:	f7f5 ff0b 	bl	8001ae0 <__aeabi_ddiv>
 800bcca:	0006      	movs	r6, r0
 800bccc:	000f      	movs	r7, r1
 800bcce:	1124      	asrs	r4, r4, #4
 800bcd0:	d0d5      	beq.n	800bc7e <_strtod_l+0x54a>
 800bcd2:	2c1f      	cmp	r4, #31
 800bcd4:	dd28      	ble.n	800bd28 <_strtod_l+0x5f4>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	9306      	str	r3, [sp, #24]
 800bcdc:	930d      	str	r3, [sp, #52]	; 0x34
 800bcde:	9308      	str	r3, [sp, #32]
 800bce0:	2322      	movs	r3, #34	; 0x22
 800bce2:	9a04      	ldr	r2, [sp, #16]
 800bce4:	2600      	movs	r6, #0
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcea:	2700      	movs	r7, #0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d18d      	bne.n	800bc0c <_strtod_l+0x4d8>
 800bcf0:	e55b      	b.n	800b7aa <_strtod_l+0x76>
 800bcf2:	46c0      	nop			; (mov r8, r8)
 800bcf4:	00004e1f 	.word	0x00004e1f
 800bcf8:	0801215e 	.word	0x0801215e
 800bcfc:	08012010 	.word	0x08012010
 800bd00:	7ff00000 	.word	0x7ff00000
 800bd04:	08012156 	.word	0x08012156
 800bd08:	08012242 	.word	0x08012242
 800bd0c:	0801223e 	.word	0x0801223e
 800bd10:	08012398 	.word	0x08012398
 800bd14:	08012370 	.word	0x08012370
 800bd18:	fcb00000 	.word	0xfcb00000
 800bd1c:	7ca00000 	.word	0x7ca00000
 800bd20:	7c900000 	.word	0x7c900000
 800bd24:	7fefffff 	.word	0x7fefffff
 800bd28:	2310      	movs	r3, #16
 800bd2a:	0022      	movs	r2, r4
 800bd2c:	401a      	ands	r2, r3
 800bd2e:	9207      	str	r2, [sp, #28]
 800bd30:	421c      	tst	r4, r3
 800bd32:	d001      	beq.n	800bd38 <_strtod_l+0x604>
 800bd34:	335a      	adds	r3, #90	; 0x5a
 800bd36:	9307      	str	r3, [sp, #28]
 800bd38:	0030      	movs	r0, r6
 800bd3a:	0039      	movs	r1, r7
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4dc4      	ldr	r5, [pc, #784]	; (800c050 <_strtod_l+0x91c>)
 800bd40:	2201      	movs	r2, #1
 800bd42:	4214      	tst	r4, r2
 800bd44:	d004      	beq.n	800bd50 <_strtod_l+0x61c>
 800bd46:	682a      	ldr	r2, [r5, #0]
 800bd48:	686b      	ldr	r3, [r5, #4]
 800bd4a:	f7f6 fac3 	bl	80022d4 <__aeabi_dmul>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	1064      	asrs	r4, r4, #1
 800bd52:	3508      	adds	r5, #8
 800bd54:	2c00      	cmp	r4, #0
 800bd56:	d1f3      	bne.n	800bd40 <_strtod_l+0x60c>
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <_strtod_l+0x62c>
 800bd5c:	0006      	movs	r6, r0
 800bd5e:	000f      	movs	r7, r1
 800bd60:	9b07      	ldr	r3, [sp, #28]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00f      	beq.n	800bd86 <_strtod_l+0x652>
 800bd66:	236b      	movs	r3, #107	; 0x6b
 800bd68:	007a      	lsls	r2, r7, #1
 800bd6a:	0d52      	lsrs	r2, r2, #21
 800bd6c:	0039      	movs	r1, r7
 800bd6e:	1a9b      	subs	r3, r3, r2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	dd08      	ble.n	800bd86 <_strtod_l+0x652>
 800bd74:	2b1f      	cmp	r3, #31
 800bd76:	dc00      	bgt.n	800bd7a <_strtod_l+0x646>
 800bd78:	e121      	b.n	800bfbe <_strtod_l+0x88a>
 800bd7a:	2600      	movs	r6, #0
 800bd7c:	2b34      	cmp	r3, #52	; 0x34
 800bd7e:	dc00      	bgt.n	800bd82 <_strtod_l+0x64e>
 800bd80:	e116      	b.n	800bfb0 <_strtod_l+0x87c>
 800bd82:	27dc      	movs	r7, #220	; 0xdc
 800bd84:	04bf      	lsls	r7, r7, #18
 800bd86:	2200      	movs	r2, #0
 800bd88:	2300      	movs	r3, #0
 800bd8a:	0030      	movs	r0, r6
 800bd8c:	0039      	movs	r1, r7
 800bd8e:	f7f4 fb5d 	bl	800044c <__aeabi_dcmpeq>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d19f      	bne.n	800bcd6 <_strtod_l+0x5a2>
 800bd96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd98:	9a08      	ldr	r2, [sp, #32]
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bd9e:	9b05      	ldr	r3, [sp, #20]
 800bda0:	9804      	ldr	r0, [sp, #16]
 800bda2:	f003 f821 	bl	800ede8 <__s2b>
 800bda6:	900d      	str	r0, [sp, #52]	; 0x34
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d100      	bne.n	800bdae <_strtod_l+0x67a>
 800bdac:	e720      	b.n	800bbf0 <_strtod_l+0x4bc>
 800bdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb0:	9906      	ldr	r1, [sp, #24]
 800bdb2:	17da      	asrs	r2, r3, #31
 800bdb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdb6:	1a5b      	subs	r3, r3, r1
 800bdb8:	401a      	ands	r2, r3
 800bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdbc:	9215      	str	r2, [sp, #84]	; 0x54
 800bdbe:	43db      	mvns	r3, r3
 800bdc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdc2:	17db      	asrs	r3, r3, #31
 800bdc4:	401a      	ands	r2, r3
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	9218      	str	r2, [sp, #96]	; 0x60
 800bdca:	9305      	str	r3, [sp, #20]
 800bdcc:	9306      	str	r3, [sp, #24]
 800bdce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdd0:	9804      	ldr	r0, [sp, #16]
 800bdd2:	6859      	ldr	r1, [r3, #4]
 800bdd4:	f002 ff5c 	bl	800ec90 <_Balloc>
 800bdd8:	9008      	str	r0, [sp, #32]
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d100      	bne.n	800bde0 <_strtod_l+0x6ac>
 800bdde:	e70c      	b.n	800bbfa <_strtod_l+0x4c6>
 800bde0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde2:	300c      	adds	r0, #12
 800bde4:	0019      	movs	r1, r3
 800bde6:	691a      	ldr	r2, [r3, #16]
 800bde8:	310c      	adds	r1, #12
 800bdea:	3202      	adds	r2, #2
 800bdec:	0092      	lsls	r2, r2, #2
 800bdee:	f001 fcc7 	bl	800d780 <memcpy>
 800bdf2:	ab1e      	add	r3, sp, #120	; 0x78
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	ab1d      	add	r3, sp, #116	; 0x74
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	0032      	movs	r2, r6
 800bdfc:	003b      	movs	r3, r7
 800bdfe:	9804      	ldr	r0, [sp, #16]
 800be00:	9610      	str	r6, [sp, #64]	; 0x40
 800be02:	9711      	str	r7, [sp, #68]	; 0x44
 800be04:	f003 fb32 	bl	800f46c <__d2b>
 800be08:	901c      	str	r0, [sp, #112]	; 0x70
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d100      	bne.n	800be10 <_strtod_l+0x6dc>
 800be0e:	e6f4      	b.n	800bbfa <_strtod_l+0x4c6>
 800be10:	2101      	movs	r1, #1
 800be12:	9804      	ldr	r0, [sp, #16]
 800be14:	f003 f87c 	bl	800ef10 <__i2b>
 800be18:	9006      	str	r0, [sp, #24]
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d100      	bne.n	800be20 <_strtod_l+0x6ec>
 800be1e:	e6ec      	b.n	800bbfa <_strtod_l+0x4c6>
 800be20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be24:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800be26:	1ad4      	subs	r4, r2, r3
 800be28:	2b00      	cmp	r3, #0
 800be2a:	db01      	blt.n	800be30 <_strtod_l+0x6fc>
 800be2c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800be2e:	195d      	adds	r5, r3, r5
 800be30:	9907      	ldr	r1, [sp, #28]
 800be32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800be34:	1a5b      	subs	r3, r3, r1
 800be36:	2136      	movs	r1, #54	; 0x36
 800be38:	189b      	adds	r3, r3, r2
 800be3a:	1a8a      	subs	r2, r1, r2
 800be3c:	4985      	ldr	r1, [pc, #532]	; (800c054 <_strtod_l+0x920>)
 800be3e:	2001      	movs	r0, #1
 800be40:	468c      	mov	ip, r1
 800be42:	2100      	movs	r1, #0
 800be44:	3b01      	subs	r3, #1
 800be46:	9114      	str	r1, [sp, #80]	; 0x50
 800be48:	9012      	str	r0, [sp, #72]	; 0x48
 800be4a:	4563      	cmp	r3, ip
 800be4c:	da07      	bge.n	800be5e <_strtod_l+0x72a>
 800be4e:	4661      	mov	r1, ip
 800be50:	1ac9      	subs	r1, r1, r3
 800be52:	1a52      	subs	r2, r2, r1
 800be54:	291f      	cmp	r1, #31
 800be56:	dd00      	ble.n	800be5a <_strtod_l+0x726>
 800be58:	e0b6      	b.n	800bfc8 <_strtod_l+0x894>
 800be5a:	4088      	lsls	r0, r1
 800be5c:	9012      	str	r0, [sp, #72]	; 0x48
 800be5e:	18ab      	adds	r3, r5, r2
 800be60:	930c      	str	r3, [sp, #48]	; 0x30
 800be62:	18a4      	adds	r4, r4, r2
 800be64:	9b07      	ldr	r3, [sp, #28]
 800be66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be68:	191c      	adds	r4, r3, r4
 800be6a:	002b      	movs	r3, r5
 800be6c:	4295      	cmp	r5, r2
 800be6e:	dd00      	ble.n	800be72 <_strtod_l+0x73e>
 800be70:	0013      	movs	r3, r2
 800be72:	42a3      	cmp	r3, r4
 800be74:	dd00      	ble.n	800be78 <_strtod_l+0x744>
 800be76:	0023      	movs	r3, r4
 800be78:	2b00      	cmp	r3, #0
 800be7a:	dd04      	ble.n	800be86 <_strtod_l+0x752>
 800be7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be7e:	1ae4      	subs	r4, r4, r3
 800be80:	1ad2      	subs	r2, r2, r3
 800be82:	920c      	str	r2, [sp, #48]	; 0x30
 800be84:	1aed      	subs	r5, r5, r3
 800be86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be88:	2b00      	cmp	r3, #0
 800be8a:	dd17      	ble.n	800bebc <_strtod_l+0x788>
 800be8c:	001a      	movs	r2, r3
 800be8e:	9906      	ldr	r1, [sp, #24]
 800be90:	9804      	ldr	r0, [sp, #16]
 800be92:	f003 f905 	bl	800f0a0 <__pow5mult>
 800be96:	9006      	str	r0, [sp, #24]
 800be98:	2800      	cmp	r0, #0
 800be9a:	d100      	bne.n	800be9e <_strtod_l+0x76a>
 800be9c:	e6ad      	b.n	800bbfa <_strtod_l+0x4c6>
 800be9e:	0001      	movs	r1, r0
 800bea0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bea2:	9804      	ldr	r0, [sp, #16]
 800bea4:	f003 f84c 	bl	800ef40 <__multiply>
 800bea8:	900e      	str	r0, [sp, #56]	; 0x38
 800beaa:	2800      	cmp	r0, #0
 800beac:	d100      	bne.n	800beb0 <_strtod_l+0x77c>
 800beae:	e6a4      	b.n	800bbfa <_strtod_l+0x4c6>
 800beb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800beb2:	9804      	ldr	r0, [sp, #16]
 800beb4:	f002 ff30 	bl	800ed18 <_Bfree>
 800beb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beba:	931c      	str	r3, [sp, #112]	; 0x70
 800bebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	dd00      	ble.n	800bec4 <_strtod_l+0x790>
 800bec2:	e087      	b.n	800bfd4 <_strtod_l+0x8a0>
 800bec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	dd08      	ble.n	800bedc <_strtod_l+0x7a8>
 800beca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800becc:	9908      	ldr	r1, [sp, #32]
 800bece:	9804      	ldr	r0, [sp, #16]
 800bed0:	f003 f8e6 	bl	800f0a0 <__pow5mult>
 800bed4:	9008      	str	r0, [sp, #32]
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d100      	bne.n	800bedc <_strtod_l+0x7a8>
 800beda:	e68e      	b.n	800bbfa <_strtod_l+0x4c6>
 800bedc:	2c00      	cmp	r4, #0
 800bede:	dd08      	ble.n	800bef2 <_strtod_l+0x7be>
 800bee0:	0022      	movs	r2, r4
 800bee2:	9908      	ldr	r1, [sp, #32]
 800bee4:	9804      	ldr	r0, [sp, #16]
 800bee6:	f003 f937 	bl	800f158 <__lshift>
 800beea:	9008      	str	r0, [sp, #32]
 800beec:	2800      	cmp	r0, #0
 800beee:	d100      	bne.n	800bef2 <_strtod_l+0x7be>
 800bef0:	e683      	b.n	800bbfa <_strtod_l+0x4c6>
 800bef2:	2d00      	cmp	r5, #0
 800bef4:	dd08      	ble.n	800bf08 <_strtod_l+0x7d4>
 800bef6:	002a      	movs	r2, r5
 800bef8:	9906      	ldr	r1, [sp, #24]
 800befa:	9804      	ldr	r0, [sp, #16]
 800befc:	f003 f92c 	bl	800f158 <__lshift>
 800bf00:	9006      	str	r0, [sp, #24]
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d100      	bne.n	800bf08 <_strtod_l+0x7d4>
 800bf06:	e678      	b.n	800bbfa <_strtod_l+0x4c6>
 800bf08:	9a08      	ldr	r2, [sp, #32]
 800bf0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf0c:	9804      	ldr	r0, [sp, #16]
 800bf0e:	f003 f9ad 	bl	800f26c <__mdiff>
 800bf12:	9005      	str	r0, [sp, #20]
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d100      	bne.n	800bf1a <_strtod_l+0x7e6>
 800bf18:	e66f      	b.n	800bbfa <_strtod_l+0x4c6>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	68c3      	ldr	r3, [r0, #12]
 800bf1e:	9906      	ldr	r1, [sp, #24]
 800bf20:	60c2      	str	r2, [r0, #12]
 800bf22:	930c      	str	r3, [sp, #48]	; 0x30
 800bf24:	f003 f986 	bl	800f234 <__mcmp>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	da5d      	bge.n	800bfe8 <_strtod_l+0x8b4>
 800bf2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf2e:	4333      	orrs	r3, r6
 800bf30:	d000      	beq.n	800bf34 <_strtod_l+0x800>
 800bf32:	e088      	b.n	800c046 <_strtod_l+0x912>
 800bf34:	033b      	lsls	r3, r7, #12
 800bf36:	d000      	beq.n	800bf3a <_strtod_l+0x806>
 800bf38:	e085      	b.n	800c046 <_strtod_l+0x912>
 800bf3a:	22d6      	movs	r2, #214	; 0xd6
 800bf3c:	4b46      	ldr	r3, [pc, #280]	; (800c058 <_strtod_l+0x924>)
 800bf3e:	04d2      	lsls	r2, r2, #19
 800bf40:	403b      	ands	r3, r7
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d97f      	bls.n	800c046 <_strtod_l+0x912>
 800bf46:	9b05      	ldr	r3, [sp, #20]
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d103      	bne.n	800bf56 <_strtod_l+0x822>
 800bf4e:	9b05      	ldr	r3, [sp, #20]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	dd77      	ble.n	800c046 <_strtod_l+0x912>
 800bf56:	9905      	ldr	r1, [sp, #20]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	9804      	ldr	r0, [sp, #16]
 800bf5c:	f003 f8fc 	bl	800f158 <__lshift>
 800bf60:	9906      	ldr	r1, [sp, #24]
 800bf62:	9005      	str	r0, [sp, #20]
 800bf64:	f003 f966 	bl	800f234 <__mcmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	dd6c      	ble.n	800c046 <_strtod_l+0x912>
 800bf6c:	9907      	ldr	r1, [sp, #28]
 800bf6e:	003b      	movs	r3, r7
 800bf70:	4a39      	ldr	r2, [pc, #228]	; (800c058 <_strtod_l+0x924>)
 800bf72:	2900      	cmp	r1, #0
 800bf74:	d100      	bne.n	800bf78 <_strtod_l+0x844>
 800bf76:	e094      	b.n	800c0a2 <_strtod_l+0x96e>
 800bf78:	0011      	movs	r1, r2
 800bf7a:	20d6      	movs	r0, #214	; 0xd6
 800bf7c:	4039      	ands	r1, r7
 800bf7e:	04c0      	lsls	r0, r0, #19
 800bf80:	4281      	cmp	r1, r0
 800bf82:	dd00      	ble.n	800bf86 <_strtod_l+0x852>
 800bf84:	e08d      	b.n	800c0a2 <_strtod_l+0x96e>
 800bf86:	23dc      	movs	r3, #220	; 0xdc
 800bf88:	049b      	lsls	r3, r3, #18
 800bf8a:	4299      	cmp	r1, r3
 800bf8c:	dc00      	bgt.n	800bf90 <_strtod_l+0x85c>
 800bf8e:	e6a7      	b.n	800bce0 <_strtod_l+0x5ac>
 800bf90:	0030      	movs	r0, r6
 800bf92:	0039      	movs	r1, r7
 800bf94:	4b31      	ldr	r3, [pc, #196]	; (800c05c <_strtod_l+0x928>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	f7f6 f99c 	bl	80022d4 <__aeabi_dmul>
 800bf9c:	4b2e      	ldr	r3, [pc, #184]	; (800c058 <_strtod_l+0x924>)
 800bf9e:	0006      	movs	r6, r0
 800bfa0:	000f      	movs	r7, r1
 800bfa2:	420b      	tst	r3, r1
 800bfa4:	d000      	beq.n	800bfa8 <_strtod_l+0x874>
 800bfa6:	e631      	b.n	800bc0c <_strtod_l+0x4d8>
 800bfa8:	2322      	movs	r3, #34	; 0x22
 800bfaa:	9a04      	ldr	r2, [sp, #16]
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	e62d      	b.n	800bc0c <_strtod_l+0x4d8>
 800bfb0:	234b      	movs	r3, #75	; 0x4b
 800bfb2:	1a9a      	subs	r2, r3, r2
 800bfb4:	3b4c      	subs	r3, #76	; 0x4c
 800bfb6:	4093      	lsls	r3, r2
 800bfb8:	4019      	ands	r1, r3
 800bfba:	000f      	movs	r7, r1
 800bfbc:	e6e3      	b.n	800bd86 <_strtod_l+0x652>
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	4252      	negs	r2, r2
 800bfc2:	409a      	lsls	r2, r3
 800bfc4:	4016      	ands	r6, r2
 800bfc6:	e6de      	b.n	800bd86 <_strtod_l+0x652>
 800bfc8:	4925      	ldr	r1, [pc, #148]	; (800c060 <_strtod_l+0x92c>)
 800bfca:	1acb      	subs	r3, r1, r3
 800bfcc:	0001      	movs	r1, r0
 800bfce:	4099      	lsls	r1, r3
 800bfd0:	9114      	str	r1, [sp, #80]	; 0x50
 800bfd2:	e743      	b.n	800be5c <_strtod_l+0x728>
 800bfd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bfd8:	9804      	ldr	r0, [sp, #16]
 800bfda:	f003 f8bd 	bl	800f158 <__lshift>
 800bfde:	901c      	str	r0, [sp, #112]	; 0x70
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d000      	beq.n	800bfe6 <_strtod_l+0x8b2>
 800bfe4:	e76e      	b.n	800bec4 <_strtod_l+0x790>
 800bfe6:	e608      	b.n	800bbfa <_strtod_l+0x4c6>
 800bfe8:	970e      	str	r7, [sp, #56]	; 0x38
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d177      	bne.n	800c0de <_strtod_l+0x9aa>
 800bfee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bff0:	033b      	lsls	r3, r7, #12
 800bff2:	0b1b      	lsrs	r3, r3, #12
 800bff4:	2a00      	cmp	r2, #0
 800bff6:	d039      	beq.n	800c06c <_strtod_l+0x938>
 800bff8:	4a1a      	ldr	r2, [pc, #104]	; (800c064 <_strtod_l+0x930>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d139      	bne.n	800c072 <_strtod_l+0x93e>
 800bffe:	2101      	movs	r1, #1
 800c000:	9b07      	ldr	r3, [sp, #28]
 800c002:	4249      	negs	r1, r1
 800c004:	0032      	movs	r2, r6
 800c006:	0008      	movs	r0, r1
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <_strtod_l+0x8f0>
 800c00c:	24d4      	movs	r4, #212	; 0xd4
 800c00e:	4b12      	ldr	r3, [pc, #72]	; (800c058 <_strtod_l+0x924>)
 800c010:	0008      	movs	r0, r1
 800c012:	403b      	ands	r3, r7
 800c014:	04e4      	lsls	r4, r4, #19
 800c016:	42a3      	cmp	r3, r4
 800c018:	d804      	bhi.n	800c024 <_strtod_l+0x8f0>
 800c01a:	306c      	adds	r0, #108	; 0x6c
 800c01c:	0d1b      	lsrs	r3, r3, #20
 800c01e:	1ac3      	subs	r3, r0, r3
 800c020:	4099      	lsls	r1, r3
 800c022:	0008      	movs	r0, r1
 800c024:	4282      	cmp	r2, r0
 800c026:	d124      	bne.n	800c072 <_strtod_l+0x93e>
 800c028:	4b0f      	ldr	r3, [pc, #60]	; (800c068 <_strtod_l+0x934>)
 800c02a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c02c:	4299      	cmp	r1, r3
 800c02e:	d102      	bne.n	800c036 <_strtod_l+0x902>
 800c030:	3201      	adds	r2, #1
 800c032:	d100      	bne.n	800c036 <_strtod_l+0x902>
 800c034:	e5e1      	b.n	800bbfa <_strtod_l+0x4c6>
 800c036:	4b08      	ldr	r3, [pc, #32]	; (800c058 <_strtod_l+0x924>)
 800c038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c03a:	2600      	movs	r6, #0
 800c03c:	401a      	ands	r2, r3
 800c03e:	0013      	movs	r3, r2
 800c040:	2280      	movs	r2, #128	; 0x80
 800c042:	0352      	lsls	r2, r2, #13
 800c044:	189f      	adds	r7, r3, r2
 800c046:	9b07      	ldr	r3, [sp, #28]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1a1      	bne.n	800bf90 <_strtod_l+0x85c>
 800c04c:	e5de      	b.n	800bc0c <_strtod_l+0x4d8>
 800c04e:	46c0      	nop			; (mov r8, r8)
 800c050:	08012028 	.word	0x08012028
 800c054:	fffffc02 	.word	0xfffffc02
 800c058:	7ff00000 	.word	0x7ff00000
 800c05c:	39500000 	.word	0x39500000
 800c060:	fffffbe2 	.word	0xfffffbe2
 800c064:	000fffff 	.word	0x000fffff
 800c068:	7fefffff 	.word	0x7fefffff
 800c06c:	4333      	orrs	r3, r6
 800c06e:	d100      	bne.n	800c072 <_strtod_l+0x93e>
 800c070:	e77c      	b.n	800bf6c <_strtod_l+0x838>
 800c072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01d      	beq.n	800c0b4 <_strtod_l+0x980>
 800c078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c07c:	4213      	tst	r3, r2
 800c07e:	d0e2      	beq.n	800c046 <_strtod_l+0x912>
 800c080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c082:	0030      	movs	r0, r6
 800c084:	0039      	movs	r1, r7
 800c086:	9a07      	ldr	r2, [sp, #28]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d017      	beq.n	800c0bc <_strtod_l+0x988>
 800c08c:	f7ff fb3a 	bl	800b704 <sulp>
 800c090:	0002      	movs	r2, r0
 800c092:	000b      	movs	r3, r1
 800c094:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c096:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c098:	f7f5 f9c2 	bl	8001420 <__aeabi_dadd>
 800c09c:	0006      	movs	r6, r0
 800c09e:	000f      	movs	r7, r1
 800c0a0:	e7d1      	b.n	800c046 <_strtod_l+0x912>
 800c0a2:	2601      	movs	r6, #1
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	4a98      	ldr	r2, [pc, #608]	; (800c308 <_strtod_l+0xbd4>)
 800c0a8:	4276      	negs	r6, r6
 800c0aa:	189b      	adds	r3, r3, r2
 800c0ac:	4a97      	ldr	r2, [pc, #604]	; (800c30c <_strtod_l+0xbd8>)
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	0017      	movs	r7, r2
 800c0b2:	e7c8      	b.n	800c046 <_strtod_l+0x912>
 800c0b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0b6:	4233      	tst	r3, r6
 800c0b8:	d0c5      	beq.n	800c046 <_strtod_l+0x912>
 800c0ba:	e7e1      	b.n	800c080 <_strtod_l+0x94c>
 800c0bc:	f7ff fb22 	bl	800b704 <sulp>
 800c0c0:	0002      	movs	r2, r0
 800c0c2:	000b      	movs	r3, r1
 800c0c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c0c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c0c8:	f7f6 fbc6 	bl	8002858 <__aeabi_dsub>
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	0006      	movs	r6, r0
 800c0d2:	000f      	movs	r7, r1
 800c0d4:	f7f4 f9ba 	bl	800044c <__aeabi_dcmpeq>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0b4      	beq.n	800c046 <_strtod_l+0x912>
 800c0dc:	e600      	b.n	800bce0 <_strtod_l+0x5ac>
 800c0de:	9906      	ldr	r1, [sp, #24]
 800c0e0:	9805      	ldr	r0, [sp, #20]
 800c0e2:	f003 fa23 	bl	800f52c <__ratio>
 800c0e6:	2380      	movs	r3, #128	; 0x80
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	05db      	lsls	r3, r3, #23
 800c0ec:	0004      	movs	r4, r0
 800c0ee:	000d      	movs	r5, r1
 800c0f0:	f7f4 f9bc 	bl	800046c <__aeabi_dcmple>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d06d      	beq.n	800c1d4 <_strtod_l+0xaa0>
 800c0f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d000      	beq.n	800c100 <_strtod_l+0x9cc>
 800c0fe:	e07e      	b.n	800c1fe <_strtod_l+0xaca>
 800c100:	2e00      	cmp	r6, #0
 800c102:	d158      	bne.n	800c1b6 <_strtod_l+0xa82>
 800c104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c106:	031b      	lsls	r3, r3, #12
 800c108:	d000      	beq.n	800c10c <_strtod_l+0x9d8>
 800c10a:	e07f      	b.n	800c20c <_strtod_l+0xad8>
 800c10c:	2200      	movs	r2, #0
 800c10e:	0020      	movs	r0, r4
 800c110:	0029      	movs	r1, r5
 800c112:	4b7f      	ldr	r3, [pc, #508]	; (800c310 <_strtod_l+0xbdc>)
 800c114:	f7f4 f9a0 	bl	8000458 <__aeabi_dcmplt>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d158      	bne.n	800c1ce <_strtod_l+0xa9a>
 800c11c:	0020      	movs	r0, r4
 800c11e:	0029      	movs	r1, r5
 800c120:	2200      	movs	r2, #0
 800c122:	4b7c      	ldr	r3, [pc, #496]	; (800c314 <_strtod_l+0xbe0>)
 800c124:	f7f6 f8d6 	bl	80022d4 <__aeabi_dmul>
 800c128:	0004      	movs	r4, r0
 800c12a:	000d      	movs	r5, r1
 800c12c:	2380      	movs	r3, #128	; 0x80
 800c12e:	061b      	lsls	r3, r3, #24
 800c130:	940a      	str	r4, [sp, #40]	; 0x28
 800c132:	18eb      	adds	r3, r5, r3
 800c134:	930b      	str	r3, [sp, #44]	; 0x2c
 800c136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c13a:	9212      	str	r2, [sp, #72]	; 0x48
 800c13c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c13e:	4a76      	ldr	r2, [pc, #472]	; (800c318 <_strtod_l+0xbe4>)
 800c140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c142:	4013      	ands	r3, r2
 800c144:	9314      	str	r3, [sp, #80]	; 0x50
 800c146:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c148:	4b74      	ldr	r3, [pc, #464]	; (800c31c <_strtod_l+0xbe8>)
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d000      	beq.n	800c150 <_strtod_l+0xa1c>
 800c14e:	e091      	b.n	800c274 <_strtod_l+0xb40>
 800c150:	4a73      	ldr	r2, [pc, #460]	; (800c320 <_strtod_l+0xbec>)
 800c152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c154:	4694      	mov	ip, r2
 800c156:	4463      	add	r3, ip
 800c158:	001f      	movs	r7, r3
 800c15a:	0030      	movs	r0, r6
 800c15c:	0019      	movs	r1, r3
 800c15e:	f003 f91d 	bl	800f39c <__ulp>
 800c162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c166:	f7f6 f8b5 	bl	80022d4 <__aeabi_dmul>
 800c16a:	0032      	movs	r2, r6
 800c16c:	003b      	movs	r3, r7
 800c16e:	f7f5 f957 	bl	8001420 <__aeabi_dadd>
 800c172:	4a69      	ldr	r2, [pc, #420]	; (800c318 <_strtod_l+0xbe4>)
 800c174:	4b6b      	ldr	r3, [pc, #428]	; (800c324 <_strtod_l+0xbf0>)
 800c176:	0006      	movs	r6, r0
 800c178:	400a      	ands	r2, r1
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d949      	bls.n	800c212 <_strtod_l+0xade>
 800c17e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c180:	4b69      	ldr	r3, [pc, #420]	; (800c328 <_strtod_l+0xbf4>)
 800c182:	429a      	cmp	r2, r3
 800c184:	d103      	bne.n	800c18e <_strtod_l+0xa5a>
 800c186:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c188:	3301      	adds	r3, #1
 800c18a:	d100      	bne.n	800c18e <_strtod_l+0xa5a>
 800c18c:	e535      	b.n	800bbfa <_strtod_l+0x4c6>
 800c18e:	2601      	movs	r6, #1
 800c190:	4f65      	ldr	r7, [pc, #404]	; (800c328 <_strtod_l+0xbf4>)
 800c192:	4276      	negs	r6, r6
 800c194:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c196:	9804      	ldr	r0, [sp, #16]
 800c198:	f002 fdbe 	bl	800ed18 <_Bfree>
 800c19c:	9908      	ldr	r1, [sp, #32]
 800c19e:	9804      	ldr	r0, [sp, #16]
 800c1a0:	f002 fdba 	bl	800ed18 <_Bfree>
 800c1a4:	9906      	ldr	r1, [sp, #24]
 800c1a6:	9804      	ldr	r0, [sp, #16]
 800c1a8:	f002 fdb6 	bl	800ed18 <_Bfree>
 800c1ac:	9905      	ldr	r1, [sp, #20]
 800c1ae:	9804      	ldr	r0, [sp, #16]
 800c1b0:	f002 fdb2 	bl	800ed18 <_Bfree>
 800c1b4:	e60b      	b.n	800bdce <_strtod_l+0x69a>
 800c1b6:	2e01      	cmp	r6, #1
 800c1b8:	d103      	bne.n	800c1c2 <_strtod_l+0xa8e>
 800c1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d100      	bne.n	800c1c2 <_strtod_l+0xa8e>
 800c1c0:	e58e      	b.n	800bce0 <_strtod_l+0x5ac>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4c59      	ldr	r4, [pc, #356]	; (800c32c <_strtod_l+0xbf8>)
 800c1c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1c8:	940b      	str	r4, [sp, #44]	; 0x2c
 800c1ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c1cc:	e01c      	b.n	800c208 <_strtod_l+0xad4>
 800c1ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c1d0:	4d50      	ldr	r5, [pc, #320]	; (800c314 <_strtod_l+0xbe0>)
 800c1d2:	e7ab      	b.n	800c12c <_strtod_l+0x9f8>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	0020      	movs	r0, r4
 800c1d8:	0029      	movs	r1, r5
 800c1da:	4b4e      	ldr	r3, [pc, #312]	; (800c314 <_strtod_l+0xbe0>)
 800c1dc:	f7f6 f87a 	bl	80022d4 <__aeabi_dmul>
 800c1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1e2:	0004      	movs	r4, r0
 800c1e4:	000b      	movs	r3, r1
 800c1e6:	000d      	movs	r5, r1
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	d104      	bne.n	800c1f6 <_strtod_l+0xac2>
 800c1ec:	2280      	movs	r2, #128	; 0x80
 800c1ee:	0612      	lsls	r2, r2, #24
 800c1f0:	900a      	str	r0, [sp, #40]	; 0x28
 800c1f2:	188b      	adds	r3, r1, r2
 800c1f4:	e79e      	b.n	800c134 <_strtod_l+0xa00>
 800c1f6:	0002      	movs	r2, r0
 800c1f8:	920a      	str	r2, [sp, #40]	; 0x28
 800c1fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1fc:	e79b      	b.n	800c136 <_strtod_l+0xa02>
 800c1fe:	2300      	movs	r3, #0
 800c200:	4c43      	ldr	r4, [pc, #268]	; (800c310 <_strtod_l+0xbdc>)
 800c202:	930a      	str	r3, [sp, #40]	; 0x28
 800c204:	940b      	str	r4, [sp, #44]	; 0x2c
 800c206:	2400      	movs	r4, #0
 800c208:	4d41      	ldr	r5, [pc, #260]	; (800c310 <_strtod_l+0xbdc>)
 800c20a:	e794      	b.n	800c136 <_strtod_l+0xa02>
 800c20c:	2300      	movs	r3, #0
 800c20e:	4c47      	ldr	r4, [pc, #284]	; (800c32c <_strtod_l+0xbf8>)
 800c210:	e7f7      	b.n	800c202 <_strtod_l+0xace>
 800c212:	23d4      	movs	r3, #212	; 0xd4
 800c214:	049b      	lsls	r3, r3, #18
 800c216:	18cf      	adds	r7, r1, r3
 800c218:	9b07      	ldr	r3, [sp, #28]
 800c21a:	970e      	str	r7, [sp, #56]	; 0x38
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1b9      	bne.n	800c194 <_strtod_l+0xa60>
 800c220:	4b3d      	ldr	r3, [pc, #244]	; (800c318 <_strtod_l+0xbe4>)
 800c222:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c224:	403b      	ands	r3, r7
 800c226:	429a      	cmp	r2, r3
 800c228:	d1b4      	bne.n	800c194 <_strtod_l+0xa60>
 800c22a:	0020      	movs	r0, r4
 800c22c:	0029      	movs	r1, r5
 800c22e:	f7f4 f993 	bl	8000558 <__aeabi_d2lz>
 800c232:	f7f4 f9cd 	bl	80005d0 <__aeabi_l2d>
 800c236:	0002      	movs	r2, r0
 800c238:	000b      	movs	r3, r1
 800c23a:	0020      	movs	r0, r4
 800c23c:	0029      	movs	r1, r5
 800c23e:	f7f6 fb0b 	bl	8002858 <__aeabi_dsub>
 800c242:	033b      	lsls	r3, r7, #12
 800c244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c246:	0b1b      	lsrs	r3, r3, #12
 800c248:	4333      	orrs	r3, r6
 800c24a:	4313      	orrs	r3, r2
 800c24c:	0004      	movs	r4, r0
 800c24e:	000d      	movs	r5, r1
 800c250:	4a37      	ldr	r2, [pc, #220]	; (800c330 <_strtod_l+0xbfc>)
 800c252:	2b00      	cmp	r3, #0
 800c254:	d054      	beq.n	800c300 <_strtod_l+0xbcc>
 800c256:	4b37      	ldr	r3, [pc, #220]	; (800c334 <_strtod_l+0xc00>)
 800c258:	f7f4 f8fe 	bl	8000458 <__aeabi_dcmplt>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d000      	beq.n	800c262 <_strtod_l+0xb2e>
 800c260:	e4d4      	b.n	800bc0c <_strtod_l+0x4d8>
 800c262:	0020      	movs	r0, r4
 800c264:	0029      	movs	r1, r5
 800c266:	4a34      	ldr	r2, [pc, #208]	; (800c338 <_strtod_l+0xc04>)
 800c268:	4b2a      	ldr	r3, [pc, #168]	; (800c314 <_strtod_l+0xbe0>)
 800c26a:	f7f4 f909 	bl	8000480 <__aeabi_dcmpgt>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d090      	beq.n	800c194 <_strtod_l+0xa60>
 800c272:	e4cb      	b.n	800bc0c <_strtod_l+0x4d8>
 800c274:	9b07      	ldr	r3, [sp, #28]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d02b      	beq.n	800c2d2 <_strtod_l+0xb9e>
 800c27a:	23d4      	movs	r3, #212	; 0xd4
 800c27c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c27e:	04db      	lsls	r3, r3, #19
 800c280:	429a      	cmp	r2, r3
 800c282:	d826      	bhi.n	800c2d2 <_strtod_l+0xb9e>
 800c284:	0020      	movs	r0, r4
 800c286:	0029      	movs	r1, r5
 800c288:	4a2c      	ldr	r2, [pc, #176]	; (800c33c <_strtod_l+0xc08>)
 800c28a:	4b2d      	ldr	r3, [pc, #180]	; (800c340 <_strtod_l+0xc0c>)
 800c28c:	f7f4 f8ee 	bl	800046c <__aeabi_dcmple>
 800c290:	2800      	cmp	r0, #0
 800c292:	d017      	beq.n	800c2c4 <_strtod_l+0xb90>
 800c294:	0020      	movs	r0, r4
 800c296:	0029      	movs	r1, r5
 800c298:	f7f4 f940 	bl	800051c <__aeabi_d2uiz>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d100      	bne.n	800c2a2 <_strtod_l+0xb6e>
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	f7f6 fedf 	bl	8003064 <__aeabi_ui2d>
 800c2a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2a8:	0004      	movs	r4, r0
 800c2aa:	000b      	movs	r3, r1
 800c2ac:	000d      	movs	r5, r1
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	d122      	bne.n	800c2f8 <_strtod_l+0xbc4>
 800c2b2:	2280      	movs	r2, #128	; 0x80
 800c2b4:	0612      	lsls	r2, r2, #24
 800c2b6:	188b      	adds	r3, r1, r2
 800c2b8:	9016      	str	r0, [sp, #88]	; 0x58
 800c2ba:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c2be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2c0:	9212      	str	r2, [sp, #72]	; 0x48
 800c2c2:	9313      	str	r3, [sp, #76]	; 0x4c
 800c2c4:	22d6      	movs	r2, #214	; 0xd6
 800c2c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2c8:	04d2      	lsls	r2, r2, #19
 800c2ca:	189b      	adds	r3, r3, r2
 800c2cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2ce:	1a9b      	subs	r3, r3, r2
 800c2d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c2d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c2d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c2d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c2d8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c2da:	f003 f85f 	bl	800f39c <__ulp>
 800c2de:	0002      	movs	r2, r0
 800c2e0:	000b      	movs	r3, r1
 800c2e2:	0030      	movs	r0, r6
 800c2e4:	0039      	movs	r1, r7
 800c2e6:	f7f5 fff5 	bl	80022d4 <__aeabi_dmul>
 800c2ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2ee:	f7f5 f897 	bl	8001420 <__aeabi_dadd>
 800c2f2:	0006      	movs	r6, r0
 800c2f4:	000f      	movs	r7, r1
 800c2f6:	e78f      	b.n	800c218 <_strtod_l+0xae4>
 800c2f8:	0002      	movs	r2, r0
 800c2fa:	9216      	str	r2, [sp, #88]	; 0x58
 800c2fc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2fe:	e7dd      	b.n	800c2bc <_strtod_l+0xb88>
 800c300:	4b10      	ldr	r3, [pc, #64]	; (800c344 <_strtod_l+0xc10>)
 800c302:	f7f4 f8a9 	bl	8000458 <__aeabi_dcmplt>
 800c306:	e7b2      	b.n	800c26e <_strtod_l+0xb3a>
 800c308:	fff00000 	.word	0xfff00000
 800c30c:	000fffff 	.word	0x000fffff
 800c310:	3ff00000 	.word	0x3ff00000
 800c314:	3fe00000 	.word	0x3fe00000
 800c318:	7ff00000 	.word	0x7ff00000
 800c31c:	7fe00000 	.word	0x7fe00000
 800c320:	fcb00000 	.word	0xfcb00000
 800c324:	7c9fffff 	.word	0x7c9fffff
 800c328:	7fefffff 	.word	0x7fefffff
 800c32c:	bff00000 	.word	0xbff00000
 800c330:	94a03595 	.word	0x94a03595
 800c334:	3fdfffff 	.word	0x3fdfffff
 800c338:	35afe535 	.word	0x35afe535
 800c33c:	ffc00000 	.word	0xffc00000
 800c340:	41dfffff 	.word	0x41dfffff
 800c344:	3fcfffff 	.word	0x3fcfffff

0800c348 <_strtod_r>:
 800c348:	b510      	push	{r4, lr}
 800c34a:	4b02      	ldr	r3, [pc, #8]	; (800c354 <_strtod_r+0xc>)
 800c34c:	f7ff f9f2 	bl	800b734 <_strtod_l>
 800c350:	bd10      	pop	{r4, pc}
 800c352:	46c0      	nop			; (mov r8, r8)
 800c354:	2000003c 	.word	0x2000003c

0800c358 <_strtol_l.constprop.0>:
 800c358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c35a:	b087      	sub	sp, #28
 800c35c:	001e      	movs	r6, r3
 800c35e:	9005      	str	r0, [sp, #20]
 800c360:	9101      	str	r1, [sp, #4]
 800c362:	9202      	str	r2, [sp, #8]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d048      	beq.n	800c3fa <_strtol_l.constprop.0+0xa2>
 800c368:	000b      	movs	r3, r1
 800c36a:	2e24      	cmp	r6, #36	; 0x24
 800c36c:	d845      	bhi.n	800c3fa <_strtol_l.constprop.0+0xa2>
 800c36e:	4a3b      	ldr	r2, [pc, #236]	; (800c45c <_strtol_l.constprop.0+0x104>)
 800c370:	2108      	movs	r1, #8
 800c372:	4694      	mov	ip, r2
 800c374:	001a      	movs	r2, r3
 800c376:	4660      	mov	r0, ip
 800c378:	7814      	ldrb	r4, [r2, #0]
 800c37a:	3301      	adds	r3, #1
 800c37c:	5d00      	ldrb	r0, [r0, r4]
 800c37e:	001d      	movs	r5, r3
 800c380:	0007      	movs	r7, r0
 800c382:	400f      	ands	r7, r1
 800c384:	4208      	tst	r0, r1
 800c386:	d1f5      	bne.n	800c374 <_strtol_l.constprop.0+0x1c>
 800c388:	2c2d      	cmp	r4, #45	; 0x2d
 800c38a:	d13d      	bne.n	800c408 <_strtol_l.constprop.0+0xb0>
 800c38c:	2701      	movs	r7, #1
 800c38e:	781c      	ldrb	r4, [r3, #0]
 800c390:	1c95      	adds	r5, r2, #2
 800c392:	2e00      	cmp	r6, #0
 800c394:	d05e      	beq.n	800c454 <_strtol_l.constprop.0+0xfc>
 800c396:	2e10      	cmp	r6, #16
 800c398:	d109      	bne.n	800c3ae <_strtol_l.constprop.0+0x56>
 800c39a:	2c30      	cmp	r4, #48	; 0x30
 800c39c:	d107      	bne.n	800c3ae <_strtol_l.constprop.0+0x56>
 800c39e:	2220      	movs	r2, #32
 800c3a0:	782b      	ldrb	r3, [r5, #0]
 800c3a2:	4393      	bics	r3, r2
 800c3a4:	2b58      	cmp	r3, #88	; 0x58
 800c3a6:	d150      	bne.n	800c44a <_strtol_l.constprop.0+0xf2>
 800c3a8:	2610      	movs	r6, #16
 800c3aa:	786c      	ldrb	r4, [r5, #1]
 800c3ac:	3502      	adds	r5, #2
 800c3ae:	4b2c      	ldr	r3, [pc, #176]	; (800c460 <_strtol_l.constprop.0+0x108>)
 800c3b0:	0031      	movs	r1, r6
 800c3b2:	18fb      	adds	r3, r7, r3
 800c3b4:	0018      	movs	r0, r3
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	f7f3 ff48 	bl	800024c <__aeabi_uidivmod>
 800c3bc:	2200      	movs	r2, #0
 800c3be:	9104      	str	r1, [sp, #16]
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	4684      	mov	ip, r0
 800c3c4:	0010      	movs	r0, r2
 800c3c6:	4249      	negs	r1, r1
 800c3c8:	0023      	movs	r3, r4
 800c3ca:	3b30      	subs	r3, #48	; 0x30
 800c3cc:	2b09      	cmp	r3, #9
 800c3ce:	d903      	bls.n	800c3d8 <_strtol_l.constprop.0+0x80>
 800c3d0:	3b11      	subs	r3, #17
 800c3d2:	2b19      	cmp	r3, #25
 800c3d4:	d81d      	bhi.n	800c412 <_strtol_l.constprop.0+0xba>
 800c3d6:	330a      	adds	r3, #10
 800c3d8:	429e      	cmp	r6, r3
 800c3da:	dd1e      	ble.n	800c41a <_strtol_l.constprop.0+0xc2>
 800c3dc:	1c54      	adds	r4, r2, #1
 800c3de:	d009      	beq.n	800c3f4 <_strtol_l.constprop.0+0x9c>
 800c3e0:	000a      	movs	r2, r1
 800c3e2:	4584      	cmp	ip, r0
 800c3e4:	d306      	bcc.n	800c3f4 <_strtol_l.constprop.0+0x9c>
 800c3e6:	d102      	bne.n	800c3ee <_strtol_l.constprop.0+0x96>
 800c3e8:	9c04      	ldr	r4, [sp, #16]
 800c3ea:	429c      	cmp	r4, r3
 800c3ec:	db02      	blt.n	800c3f4 <_strtol_l.constprop.0+0x9c>
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	4370      	muls	r0, r6
 800c3f2:	1818      	adds	r0, r3, r0
 800c3f4:	782c      	ldrb	r4, [r5, #0]
 800c3f6:	3501      	adds	r5, #1
 800c3f8:	e7e6      	b.n	800c3c8 <_strtol_l.constprop.0+0x70>
 800c3fa:	f001 f981 	bl	800d700 <__errno>
 800c3fe:	2316      	movs	r3, #22
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	2000      	movs	r0, #0
 800c404:	b007      	add	sp, #28
 800c406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c408:	2c2b      	cmp	r4, #43	; 0x2b
 800c40a:	d1c2      	bne.n	800c392 <_strtol_l.constprop.0+0x3a>
 800c40c:	781c      	ldrb	r4, [r3, #0]
 800c40e:	1c95      	adds	r5, r2, #2
 800c410:	e7bf      	b.n	800c392 <_strtol_l.constprop.0+0x3a>
 800c412:	0023      	movs	r3, r4
 800c414:	3b61      	subs	r3, #97	; 0x61
 800c416:	2b19      	cmp	r3, #25
 800c418:	d9dd      	bls.n	800c3d6 <_strtol_l.constprop.0+0x7e>
 800c41a:	1c53      	adds	r3, r2, #1
 800c41c:	d109      	bne.n	800c432 <_strtol_l.constprop.0+0xda>
 800c41e:	2322      	movs	r3, #34	; 0x22
 800c420:	9a05      	ldr	r2, [sp, #20]
 800c422:	9803      	ldr	r0, [sp, #12]
 800c424:	6013      	str	r3, [r2, #0]
 800c426:	9b02      	ldr	r3, [sp, #8]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d0eb      	beq.n	800c404 <_strtol_l.constprop.0+0xac>
 800c42c:	1e6b      	subs	r3, r5, #1
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	e007      	b.n	800c442 <_strtol_l.constprop.0+0xea>
 800c432:	2f00      	cmp	r7, #0
 800c434:	d000      	beq.n	800c438 <_strtol_l.constprop.0+0xe0>
 800c436:	4240      	negs	r0, r0
 800c438:	9b02      	ldr	r3, [sp, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0e2      	beq.n	800c404 <_strtol_l.constprop.0+0xac>
 800c43e:	2a00      	cmp	r2, #0
 800c440:	d1f4      	bne.n	800c42c <_strtol_l.constprop.0+0xd4>
 800c442:	9b02      	ldr	r3, [sp, #8]
 800c444:	9a01      	ldr	r2, [sp, #4]
 800c446:	601a      	str	r2, [r3, #0]
 800c448:	e7dc      	b.n	800c404 <_strtol_l.constprop.0+0xac>
 800c44a:	2430      	movs	r4, #48	; 0x30
 800c44c:	2e00      	cmp	r6, #0
 800c44e:	d1ae      	bne.n	800c3ae <_strtol_l.constprop.0+0x56>
 800c450:	3608      	adds	r6, #8
 800c452:	e7ac      	b.n	800c3ae <_strtol_l.constprop.0+0x56>
 800c454:	2c30      	cmp	r4, #48	; 0x30
 800c456:	d0a2      	beq.n	800c39e <_strtol_l.constprop.0+0x46>
 800c458:	260a      	movs	r6, #10
 800c45a:	e7a8      	b.n	800c3ae <_strtol_l.constprop.0+0x56>
 800c45c:	08012051 	.word	0x08012051
 800c460:	7fffffff 	.word	0x7fffffff

0800c464 <_strtol_r>:
 800c464:	b510      	push	{r4, lr}
 800c466:	f7ff ff77 	bl	800c358 <_strtol_l.constprop.0>
 800c46a:	bd10      	pop	{r4, pc}

0800c46c <strtol>:
 800c46c:	b510      	push	{r4, lr}
 800c46e:	4c04      	ldr	r4, [pc, #16]	; (800c480 <strtol+0x14>)
 800c470:	0013      	movs	r3, r2
 800c472:	000a      	movs	r2, r1
 800c474:	0001      	movs	r1, r0
 800c476:	6820      	ldr	r0, [r4, #0]
 800c478:	f7ff ff6e 	bl	800c358 <_strtol_l.constprop.0>
 800c47c:	bd10      	pop	{r4, pc}
 800c47e:	46c0      	nop			; (mov r8, r8)
 800c480:	200001f4 	.word	0x200001f4

0800c484 <__cvt>:
 800c484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c486:	001e      	movs	r6, r3
 800c488:	2300      	movs	r3, #0
 800c48a:	0014      	movs	r4, r2
 800c48c:	b08b      	sub	sp, #44	; 0x2c
 800c48e:	429e      	cmp	r6, r3
 800c490:	da04      	bge.n	800c49c <__cvt+0x18>
 800c492:	2180      	movs	r1, #128	; 0x80
 800c494:	0609      	lsls	r1, r1, #24
 800c496:	1873      	adds	r3, r6, r1
 800c498:	001e      	movs	r6, r3
 800c49a:	232d      	movs	r3, #45	; 0x2d
 800c49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c49e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c4a0:	7013      	strb	r3, [r2, #0]
 800c4a2:	2320      	movs	r3, #32
 800c4a4:	2203      	movs	r2, #3
 800c4a6:	439f      	bics	r7, r3
 800c4a8:	2f46      	cmp	r7, #70	; 0x46
 800c4aa:	d007      	beq.n	800c4bc <__cvt+0x38>
 800c4ac:	003b      	movs	r3, r7
 800c4ae:	3b45      	subs	r3, #69	; 0x45
 800c4b0:	4259      	negs	r1, r3
 800c4b2:	414b      	adcs	r3, r1
 800c4b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c4b6:	3a01      	subs	r2, #1
 800c4b8:	18cb      	adds	r3, r1, r3
 800c4ba:	9310      	str	r3, [sp, #64]	; 0x40
 800c4bc:	ab09      	add	r3, sp, #36	; 0x24
 800c4be:	9304      	str	r3, [sp, #16]
 800c4c0:	ab08      	add	r3, sp, #32
 800c4c2:	9303      	str	r3, [sp, #12]
 800c4c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4c6:	9200      	str	r2, [sp, #0]
 800c4c8:	9302      	str	r3, [sp, #8]
 800c4ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4cc:	0022      	movs	r2, r4
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	0033      	movs	r3, r6
 800c4d2:	f001 fa17 	bl	800d904 <_dtoa_r>
 800c4d6:	0005      	movs	r5, r0
 800c4d8:	2f47      	cmp	r7, #71	; 0x47
 800c4da:	d102      	bne.n	800c4e2 <__cvt+0x5e>
 800c4dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4de:	07db      	lsls	r3, r3, #31
 800c4e0:	d528      	bpl.n	800c534 <__cvt+0xb0>
 800c4e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4e4:	18eb      	adds	r3, r5, r3
 800c4e6:	9307      	str	r3, [sp, #28]
 800c4e8:	2f46      	cmp	r7, #70	; 0x46
 800c4ea:	d114      	bne.n	800c516 <__cvt+0x92>
 800c4ec:	782b      	ldrb	r3, [r5, #0]
 800c4ee:	2b30      	cmp	r3, #48	; 0x30
 800c4f0:	d10c      	bne.n	800c50c <__cvt+0x88>
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	0020      	movs	r0, r4
 800c4f8:	0031      	movs	r1, r6
 800c4fa:	f7f3 ffa7 	bl	800044c <__aeabi_dcmpeq>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d104      	bne.n	800c50c <__cvt+0x88>
 800c502:	2301      	movs	r3, #1
 800c504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c506:	1a9b      	subs	r3, r3, r2
 800c508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c50e:	9a07      	ldr	r2, [sp, #28]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	18d3      	adds	r3, r2, r3
 800c514:	9307      	str	r3, [sp, #28]
 800c516:	2200      	movs	r2, #0
 800c518:	2300      	movs	r3, #0
 800c51a:	0020      	movs	r0, r4
 800c51c:	0031      	movs	r1, r6
 800c51e:	f7f3 ff95 	bl	800044c <__aeabi_dcmpeq>
 800c522:	2800      	cmp	r0, #0
 800c524:	d001      	beq.n	800c52a <__cvt+0xa6>
 800c526:	9b07      	ldr	r3, [sp, #28]
 800c528:	9309      	str	r3, [sp, #36]	; 0x24
 800c52a:	2230      	movs	r2, #48	; 0x30
 800c52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c52e:	9907      	ldr	r1, [sp, #28]
 800c530:	428b      	cmp	r3, r1
 800c532:	d306      	bcc.n	800c542 <__cvt+0xbe>
 800c534:	0028      	movs	r0, r5
 800c536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c538:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c53a:	1b5b      	subs	r3, r3, r5
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	b00b      	add	sp, #44	; 0x2c
 800c540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c542:	1c59      	adds	r1, r3, #1
 800c544:	9109      	str	r1, [sp, #36]	; 0x24
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	e7f0      	b.n	800c52c <__cvt+0xa8>

0800c54a <__exponent>:
 800c54a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c54c:	1c83      	adds	r3, r0, #2
 800c54e:	b087      	sub	sp, #28
 800c550:	9303      	str	r3, [sp, #12]
 800c552:	0005      	movs	r5, r0
 800c554:	000c      	movs	r4, r1
 800c556:	232b      	movs	r3, #43	; 0x2b
 800c558:	7002      	strb	r2, [r0, #0]
 800c55a:	2900      	cmp	r1, #0
 800c55c:	da01      	bge.n	800c562 <__exponent+0x18>
 800c55e:	424c      	negs	r4, r1
 800c560:	3302      	adds	r3, #2
 800c562:	706b      	strb	r3, [r5, #1]
 800c564:	2c09      	cmp	r4, #9
 800c566:	dd2f      	ble.n	800c5c8 <__exponent+0x7e>
 800c568:	270a      	movs	r7, #10
 800c56a:	ab04      	add	r3, sp, #16
 800c56c:	1dde      	adds	r6, r3, #7
 800c56e:	0020      	movs	r0, r4
 800c570:	0039      	movs	r1, r7
 800c572:	9601      	str	r6, [sp, #4]
 800c574:	f7f3 ff54 	bl	8000420 <__aeabi_idivmod>
 800c578:	3e01      	subs	r6, #1
 800c57a:	3130      	adds	r1, #48	; 0x30
 800c57c:	0020      	movs	r0, r4
 800c57e:	7031      	strb	r1, [r6, #0]
 800c580:	0039      	movs	r1, r7
 800c582:	9402      	str	r4, [sp, #8]
 800c584:	f7f3 fe66 	bl	8000254 <__divsi3>
 800c588:	9b02      	ldr	r3, [sp, #8]
 800c58a:	0004      	movs	r4, r0
 800c58c:	2b63      	cmp	r3, #99	; 0x63
 800c58e:	dcee      	bgt.n	800c56e <__exponent+0x24>
 800c590:	9b01      	ldr	r3, [sp, #4]
 800c592:	3430      	adds	r4, #48	; 0x30
 800c594:	1e9a      	subs	r2, r3, #2
 800c596:	0013      	movs	r3, r2
 800c598:	9903      	ldr	r1, [sp, #12]
 800c59a:	7014      	strb	r4, [r2, #0]
 800c59c:	a804      	add	r0, sp, #16
 800c59e:	3007      	adds	r0, #7
 800c5a0:	4298      	cmp	r0, r3
 800c5a2:	d80c      	bhi.n	800c5be <__exponent+0x74>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	4282      	cmp	r2, r0
 800c5a8:	d804      	bhi.n	800c5b4 <__exponent+0x6a>
 800c5aa:	aa04      	add	r2, sp, #16
 800c5ac:	3309      	adds	r3, #9
 800c5ae:	189b      	adds	r3, r3, r2
 800c5b0:	9a01      	ldr	r2, [sp, #4]
 800c5b2:	1a9b      	subs	r3, r3, r2
 800c5b4:	9a03      	ldr	r2, [sp, #12]
 800c5b6:	18d3      	adds	r3, r2, r3
 800c5b8:	1b58      	subs	r0, r3, r5
 800c5ba:	b007      	add	sp, #28
 800c5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5be:	7818      	ldrb	r0, [r3, #0]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	7008      	strb	r0, [r1, #0]
 800c5c4:	3101      	adds	r1, #1
 800c5c6:	e7e9      	b.n	800c59c <__exponent+0x52>
 800c5c8:	2330      	movs	r3, #48	; 0x30
 800c5ca:	3430      	adds	r4, #48	; 0x30
 800c5cc:	70ab      	strb	r3, [r5, #2]
 800c5ce:	70ec      	strb	r4, [r5, #3]
 800c5d0:	1d2b      	adds	r3, r5, #4
 800c5d2:	e7f1      	b.n	800c5b8 <__exponent+0x6e>

0800c5d4 <_printf_float>:
 800c5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5d6:	b095      	sub	sp, #84	; 0x54
 800c5d8:	000c      	movs	r4, r1
 800c5da:	9208      	str	r2, [sp, #32]
 800c5dc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c5de:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e0:	0007      	movs	r7, r0
 800c5e2:	f000 ffcb 	bl	800d57c <_localeconv_r>
 800c5e6:	6803      	ldr	r3, [r0, #0]
 800c5e8:	0018      	movs	r0, r3
 800c5ea:	930c      	str	r3, [sp, #48]	; 0x30
 800c5ec:	f7f3 fd8c 	bl	8000108 <strlen>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9312      	str	r3, [sp, #72]	; 0x48
 800c5f4:	7e23      	ldrb	r3, [r4, #24]
 800c5f6:	2207      	movs	r2, #7
 800c5f8:	930a      	str	r3, [sp, #40]	; 0x28
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	900d      	str	r0, [sp, #52]	; 0x34
 800c5fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800c600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c602:	682b      	ldr	r3, [r5, #0]
 800c604:	05c9      	lsls	r1, r1, #23
 800c606:	d547      	bpl.n	800c698 <_printf_float+0xc4>
 800c608:	189b      	adds	r3, r3, r2
 800c60a:	4393      	bics	r3, r2
 800c60c:	001a      	movs	r2, r3
 800c60e:	3208      	adds	r2, #8
 800c610:	602a      	str	r2, [r5, #0]
 800c612:	681e      	ldr	r6, [r3, #0]
 800c614:	685d      	ldr	r5, [r3, #4]
 800c616:	0032      	movs	r2, r6
 800c618:	002b      	movs	r3, r5
 800c61a:	64a2      	str	r2, [r4, #72]	; 0x48
 800c61c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c61e:	2201      	movs	r2, #1
 800c620:	006b      	lsls	r3, r5, #1
 800c622:	085b      	lsrs	r3, r3, #1
 800c624:	930e      	str	r3, [sp, #56]	; 0x38
 800c626:	0030      	movs	r0, r6
 800c628:	4bab      	ldr	r3, [pc, #684]	; (800c8d8 <_printf_float+0x304>)
 800c62a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c62c:	4252      	negs	r2, r2
 800c62e:	f7f6 fc95 	bl	8002f5c <__aeabi_dcmpun>
 800c632:	2800      	cmp	r0, #0
 800c634:	d132      	bne.n	800c69c <_printf_float+0xc8>
 800c636:	2201      	movs	r2, #1
 800c638:	0030      	movs	r0, r6
 800c63a:	4ba7      	ldr	r3, [pc, #668]	; (800c8d8 <_printf_float+0x304>)
 800c63c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c63e:	4252      	negs	r2, r2
 800c640:	f7f3 ff14 	bl	800046c <__aeabi_dcmple>
 800c644:	2800      	cmp	r0, #0
 800c646:	d129      	bne.n	800c69c <_printf_float+0xc8>
 800c648:	2200      	movs	r2, #0
 800c64a:	2300      	movs	r3, #0
 800c64c:	0030      	movs	r0, r6
 800c64e:	0029      	movs	r1, r5
 800c650:	f7f3 ff02 	bl	8000458 <__aeabi_dcmplt>
 800c654:	2800      	cmp	r0, #0
 800c656:	d003      	beq.n	800c660 <_printf_float+0x8c>
 800c658:	0023      	movs	r3, r4
 800c65a:	222d      	movs	r2, #45	; 0x2d
 800c65c:	3343      	adds	r3, #67	; 0x43
 800c65e:	701a      	strb	r2, [r3, #0]
 800c660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c662:	4d9e      	ldr	r5, [pc, #632]	; (800c8dc <_printf_float+0x308>)
 800c664:	2b47      	cmp	r3, #71	; 0x47
 800c666:	d900      	bls.n	800c66a <_printf_float+0x96>
 800c668:	4d9d      	ldr	r5, [pc, #628]	; (800c8e0 <_printf_float+0x30c>)
 800c66a:	2303      	movs	r3, #3
 800c66c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c66e:	6123      	str	r3, [r4, #16]
 800c670:	3301      	adds	r3, #1
 800c672:	439a      	bics	r2, r3
 800c674:	2300      	movs	r3, #0
 800c676:	6022      	str	r2, [r4, #0]
 800c678:	930b      	str	r3, [sp, #44]	; 0x2c
 800c67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67c:	0021      	movs	r1, r4
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	0038      	movs	r0, r7
 800c682:	9b08      	ldr	r3, [sp, #32]
 800c684:	aa13      	add	r2, sp, #76	; 0x4c
 800c686:	f000 f9fb 	bl	800ca80 <_printf_common>
 800c68a:	3001      	adds	r0, #1
 800c68c:	d000      	beq.n	800c690 <_printf_float+0xbc>
 800c68e:	e0a3      	b.n	800c7d8 <_printf_float+0x204>
 800c690:	2001      	movs	r0, #1
 800c692:	4240      	negs	r0, r0
 800c694:	b015      	add	sp, #84	; 0x54
 800c696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c698:	3307      	adds	r3, #7
 800c69a:	e7b6      	b.n	800c60a <_printf_float+0x36>
 800c69c:	0032      	movs	r2, r6
 800c69e:	002b      	movs	r3, r5
 800c6a0:	0030      	movs	r0, r6
 800c6a2:	0029      	movs	r1, r5
 800c6a4:	f7f6 fc5a 	bl	8002f5c <__aeabi_dcmpun>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d00b      	beq.n	800c6c4 <_printf_float+0xf0>
 800c6ac:	2d00      	cmp	r5, #0
 800c6ae:	da03      	bge.n	800c6b8 <_printf_float+0xe4>
 800c6b0:	0023      	movs	r3, r4
 800c6b2:	222d      	movs	r2, #45	; 0x2d
 800c6b4:	3343      	adds	r3, #67	; 0x43
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ba:	4d8a      	ldr	r5, [pc, #552]	; (800c8e4 <_printf_float+0x310>)
 800c6bc:	2b47      	cmp	r3, #71	; 0x47
 800c6be:	d9d4      	bls.n	800c66a <_printf_float+0x96>
 800c6c0:	4d89      	ldr	r5, [pc, #548]	; (800c8e8 <_printf_float+0x314>)
 800c6c2:	e7d2      	b.n	800c66a <_printf_float+0x96>
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c6c8:	6863      	ldr	r3, [r4, #4]
 800c6ca:	4391      	bics	r1, r2
 800c6cc:	910e      	str	r1, [sp, #56]	; 0x38
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	d14a      	bne.n	800c768 <_printf_float+0x194>
 800c6d2:	3307      	adds	r3, #7
 800c6d4:	6063      	str	r3, [r4, #4]
 800c6d6:	2380      	movs	r3, #128	; 0x80
 800c6d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	2200      	movs	r2, #0
 800c6e0:	9206      	str	r2, [sp, #24]
 800c6e2:	aa12      	add	r2, sp, #72	; 0x48
 800c6e4:	9205      	str	r2, [sp, #20]
 800c6e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	9204      	str	r2, [sp, #16]
 800c6ec:	aa11      	add	r2, sp, #68	; 0x44
 800c6ee:	9203      	str	r2, [sp, #12]
 800c6f0:	2223      	movs	r2, #35	; 0x23
 800c6f2:	a908      	add	r1, sp, #32
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	6863      	ldr	r3, [r4, #4]
 800c6f8:	1852      	adds	r2, r2, r1
 800c6fa:	9202      	str	r2, [sp, #8]
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	0032      	movs	r2, r6
 800c700:	002b      	movs	r3, r5
 800c702:	0038      	movs	r0, r7
 800c704:	f7ff febe 	bl	800c484 <__cvt>
 800c708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c70a:	0005      	movs	r5, r0
 800c70c:	2b47      	cmp	r3, #71	; 0x47
 800c70e:	d109      	bne.n	800c724 <_printf_float+0x150>
 800c710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c712:	1cda      	adds	r2, r3, #3
 800c714:	db02      	blt.n	800c71c <_printf_float+0x148>
 800c716:	6862      	ldr	r2, [r4, #4]
 800c718:	4293      	cmp	r3, r2
 800c71a:	dd49      	ble.n	800c7b0 <_printf_float+0x1dc>
 800c71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c71e:	3b02      	subs	r3, #2
 800c720:	b2db      	uxtb	r3, r3
 800c722:	930a      	str	r3, [sp, #40]	; 0x28
 800c724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c726:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c728:	2b65      	cmp	r3, #101	; 0x65
 800c72a:	d824      	bhi.n	800c776 <_printf_float+0x1a2>
 800c72c:	0020      	movs	r0, r4
 800c72e:	001a      	movs	r2, r3
 800c730:	3901      	subs	r1, #1
 800c732:	3050      	adds	r0, #80	; 0x50
 800c734:	9111      	str	r1, [sp, #68]	; 0x44
 800c736:	f7ff ff08 	bl	800c54a <__exponent>
 800c73a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c73c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c73e:	1813      	adds	r3, r2, r0
 800c740:	6123      	str	r3, [r4, #16]
 800c742:	2a01      	cmp	r2, #1
 800c744:	dc02      	bgt.n	800c74c <_printf_float+0x178>
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	07d2      	lsls	r2, r2, #31
 800c74a:	d501      	bpl.n	800c750 <_printf_float+0x17c>
 800c74c:	3301      	adds	r3, #1
 800c74e:	6123      	str	r3, [r4, #16]
 800c750:	2323      	movs	r3, #35	; 0x23
 800c752:	aa08      	add	r2, sp, #32
 800c754:	189b      	adds	r3, r3, r2
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d100      	bne.n	800c75e <_printf_float+0x18a>
 800c75c:	e78d      	b.n	800c67a <_printf_float+0xa6>
 800c75e:	0023      	movs	r3, r4
 800c760:	222d      	movs	r2, #45	; 0x2d
 800c762:	3343      	adds	r3, #67	; 0x43
 800c764:	701a      	strb	r2, [r3, #0]
 800c766:	e788      	b.n	800c67a <_printf_float+0xa6>
 800c768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c76a:	2a47      	cmp	r2, #71	; 0x47
 800c76c:	d1b3      	bne.n	800c6d6 <_printf_float+0x102>
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1b1      	bne.n	800c6d6 <_printf_float+0x102>
 800c772:	3301      	adds	r3, #1
 800c774:	e7ae      	b.n	800c6d4 <_printf_float+0x100>
 800c776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c778:	2b66      	cmp	r3, #102	; 0x66
 800c77a:	d11b      	bne.n	800c7b4 <_printf_float+0x1e0>
 800c77c:	6863      	ldr	r3, [r4, #4]
 800c77e:	2900      	cmp	r1, #0
 800c780:	dd09      	ble.n	800c796 <_printf_float+0x1c2>
 800c782:	6121      	str	r1, [r4, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <_printf_float+0x1ba>
 800c788:	6822      	ldr	r2, [r4, #0]
 800c78a:	07d2      	lsls	r2, r2, #31
 800c78c:	d50b      	bpl.n	800c7a6 <_printf_float+0x1d2>
 800c78e:	3301      	adds	r3, #1
 800c790:	185b      	adds	r3, r3, r1
 800c792:	6123      	str	r3, [r4, #16]
 800c794:	e007      	b.n	800c7a6 <_printf_float+0x1d2>
 800c796:	2b00      	cmp	r3, #0
 800c798:	d103      	bne.n	800c7a2 <_printf_float+0x1ce>
 800c79a:	2201      	movs	r2, #1
 800c79c:	6821      	ldr	r1, [r4, #0]
 800c79e:	4211      	tst	r1, r2
 800c7a0:	d000      	beq.n	800c7a4 <_printf_float+0x1d0>
 800c7a2:	1c9a      	adds	r2, r3, #2
 800c7a4:	6122      	str	r2, [r4, #16]
 800c7a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7a8:	65a3      	str	r3, [r4, #88]	; 0x58
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7ae:	e7cf      	b.n	800c750 <_printf_float+0x17c>
 800c7b0:	2367      	movs	r3, #103	; 0x67
 800c7b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c7b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7b8:	4299      	cmp	r1, r3
 800c7ba:	db06      	blt.n	800c7ca <_printf_float+0x1f6>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	6121      	str	r1, [r4, #16]
 800c7c0:	07db      	lsls	r3, r3, #31
 800c7c2:	d5f0      	bpl.n	800c7a6 <_printf_float+0x1d2>
 800c7c4:	3101      	adds	r1, #1
 800c7c6:	6121      	str	r1, [r4, #16]
 800c7c8:	e7ed      	b.n	800c7a6 <_printf_float+0x1d2>
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	2900      	cmp	r1, #0
 800c7ce:	dc01      	bgt.n	800c7d4 <_printf_float+0x200>
 800c7d0:	1892      	adds	r2, r2, r2
 800c7d2:	1a52      	subs	r2, r2, r1
 800c7d4:	189b      	adds	r3, r3, r2
 800c7d6:	e7dc      	b.n	800c792 <_printf_float+0x1be>
 800c7d8:	6822      	ldr	r2, [r4, #0]
 800c7da:	0553      	lsls	r3, r2, #21
 800c7dc:	d408      	bmi.n	800c7f0 <_printf_float+0x21c>
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	002a      	movs	r2, r5
 800c7e2:	0038      	movs	r0, r7
 800c7e4:	9908      	ldr	r1, [sp, #32]
 800c7e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c7e8:	47a8      	blx	r5
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	d12a      	bne.n	800c844 <_printf_float+0x270>
 800c7ee:	e74f      	b.n	800c690 <_printf_float+0xbc>
 800c7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f2:	2b65      	cmp	r3, #101	; 0x65
 800c7f4:	d800      	bhi.n	800c7f8 <_printf_float+0x224>
 800c7f6:	e0ec      	b.n	800c9d2 <_printf_float+0x3fe>
 800c7f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c7fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2300      	movs	r3, #0
 800c800:	f7f3 fe24 	bl	800044c <__aeabi_dcmpeq>
 800c804:	2800      	cmp	r0, #0
 800c806:	d034      	beq.n	800c872 <_printf_float+0x29e>
 800c808:	2301      	movs	r3, #1
 800c80a:	0038      	movs	r0, r7
 800c80c:	4a37      	ldr	r2, [pc, #220]	; (800c8ec <_printf_float+0x318>)
 800c80e:	9908      	ldr	r1, [sp, #32]
 800c810:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c812:	47a8      	blx	r5
 800c814:	3001      	adds	r0, #1
 800c816:	d100      	bne.n	800c81a <_printf_float+0x246>
 800c818:	e73a      	b.n	800c690 <_printf_float+0xbc>
 800c81a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c81c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c81e:	429a      	cmp	r2, r3
 800c820:	db02      	blt.n	800c828 <_printf_float+0x254>
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	07db      	lsls	r3, r3, #31
 800c826:	d50d      	bpl.n	800c844 <_printf_float+0x270>
 800c828:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c82a:	0038      	movs	r0, r7
 800c82c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c82e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c830:	9908      	ldr	r1, [sp, #32]
 800c832:	47a8      	blx	r5
 800c834:	2500      	movs	r5, #0
 800c836:	3001      	adds	r0, #1
 800c838:	d100      	bne.n	800c83c <_printf_float+0x268>
 800c83a:	e729      	b.n	800c690 <_printf_float+0xbc>
 800c83c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c83e:	3b01      	subs	r3, #1
 800c840:	42ab      	cmp	r3, r5
 800c842:	dc0a      	bgt.n	800c85a <_printf_float+0x286>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	079b      	lsls	r3, r3, #30
 800c848:	d500      	bpl.n	800c84c <_printf_float+0x278>
 800c84a:	e116      	b.n	800ca7a <_printf_float+0x4a6>
 800c84c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c84e:	68e0      	ldr	r0, [r4, #12]
 800c850:	4298      	cmp	r0, r3
 800c852:	db00      	blt.n	800c856 <_printf_float+0x282>
 800c854:	e71e      	b.n	800c694 <_printf_float+0xc0>
 800c856:	0018      	movs	r0, r3
 800c858:	e71c      	b.n	800c694 <_printf_float+0xc0>
 800c85a:	0022      	movs	r2, r4
 800c85c:	2301      	movs	r3, #1
 800c85e:	0038      	movs	r0, r7
 800c860:	9908      	ldr	r1, [sp, #32]
 800c862:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c864:	321a      	adds	r2, #26
 800c866:	47b0      	blx	r6
 800c868:	3001      	adds	r0, #1
 800c86a:	d100      	bne.n	800c86e <_printf_float+0x29a>
 800c86c:	e710      	b.n	800c690 <_printf_float+0xbc>
 800c86e:	3501      	adds	r5, #1
 800c870:	e7e4      	b.n	800c83c <_printf_float+0x268>
 800c872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c874:	2b00      	cmp	r3, #0
 800c876:	dc3b      	bgt.n	800c8f0 <_printf_float+0x31c>
 800c878:	2301      	movs	r3, #1
 800c87a:	0038      	movs	r0, r7
 800c87c:	4a1b      	ldr	r2, [pc, #108]	; (800c8ec <_printf_float+0x318>)
 800c87e:	9908      	ldr	r1, [sp, #32]
 800c880:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c882:	47b0      	blx	r6
 800c884:	3001      	adds	r0, #1
 800c886:	d100      	bne.n	800c88a <_printf_float+0x2b6>
 800c888:	e702      	b.n	800c690 <_printf_float+0xbc>
 800c88a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c88c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c88e:	4313      	orrs	r3, r2
 800c890:	d102      	bne.n	800c898 <_printf_float+0x2c4>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	07db      	lsls	r3, r3, #31
 800c896:	d5d5      	bpl.n	800c844 <_printf_float+0x270>
 800c898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c89a:	0038      	movs	r0, r7
 800c89c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c89e:	9908      	ldr	r1, [sp, #32]
 800c8a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c8a2:	47b0      	blx	r6
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	d100      	bne.n	800c8ac <_printf_float+0x2d8>
 800c8aa:	e6f1      	b.n	800c690 <_printf_float+0xbc>
 800c8ac:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b2:	425b      	negs	r3, r3
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	dc01      	bgt.n	800c8bc <_printf_float+0x2e8>
 800c8b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8ba:	e791      	b.n	800c7e0 <_printf_float+0x20c>
 800c8bc:	0022      	movs	r2, r4
 800c8be:	2301      	movs	r3, #1
 800c8c0:	0038      	movs	r0, r7
 800c8c2:	9908      	ldr	r1, [sp, #32]
 800c8c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c8c6:	321a      	adds	r2, #26
 800c8c8:	47b0      	blx	r6
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	d100      	bne.n	800c8d0 <_printf_float+0x2fc>
 800c8ce:	e6df      	b.n	800c690 <_printf_float+0xbc>
 800c8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	e7ea      	b.n	800c8ac <_printf_float+0x2d8>
 800c8d6:	46c0      	nop			; (mov r8, r8)
 800c8d8:	7fefffff 	.word	0x7fefffff
 800c8dc:	08012151 	.word	0x08012151
 800c8e0:	08012155 	.word	0x08012155
 800c8e4:	08012159 	.word	0x08012159
 800c8e8:	0801215d 	.word	0x0801215d
 800c8ec:	08012161 	.word	0x08012161
 800c8f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8f4:	920a      	str	r2, [sp, #40]	; 0x28
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	dd00      	ble.n	800c8fc <_printf_float+0x328>
 800c8fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	dc3d      	bgt.n	800c97e <_printf_float+0x3aa>
 800c902:	2300      	movs	r3, #0
 800c904:	930e      	str	r3, [sp, #56]	; 0x38
 800c906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c908:	43db      	mvns	r3, r3
 800c90a:	17db      	asrs	r3, r3, #31
 800c90c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c90e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c912:	930b      	str	r3, [sp, #44]	; 0x2c
 800c914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c916:	4013      	ands	r3, r2
 800c918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c91e:	4293      	cmp	r3, r2
 800c920:	dc36      	bgt.n	800c990 <_printf_float+0x3bc>
 800c922:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c924:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c926:	429a      	cmp	r2, r3
 800c928:	db40      	blt.n	800c9ac <_printf_float+0x3d8>
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	07db      	lsls	r3, r3, #31
 800c92e:	d43d      	bmi.n	800c9ac <_printf_float+0x3d8>
 800c930:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c932:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c936:	1af3      	subs	r3, r6, r3
 800c938:	1ab6      	subs	r6, r6, r2
 800c93a:	429e      	cmp	r6, r3
 800c93c:	dd00      	ble.n	800c940 <_printf_float+0x36c>
 800c93e:	001e      	movs	r6, r3
 800c940:	2e00      	cmp	r6, #0
 800c942:	dc3c      	bgt.n	800c9be <_printf_float+0x3ea>
 800c944:	2300      	movs	r3, #0
 800c946:	930a      	str	r3, [sp, #40]	; 0x28
 800c948:	43f3      	mvns	r3, r6
 800c94a:	17db      	asrs	r3, r3, #31
 800c94c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c94e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c950:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c952:	1a9b      	subs	r3, r3, r2
 800c954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c956:	4032      	ands	r2, r6
 800c958:	1a9b      	subs	r3, r3, r2
 800c95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c95c:	4293      	cmp	r3, r2
 800c95e:	dc00      	bgt.n	800c962 <_printf_float+0x38e>
 800c960:	e770      	b.n	800c844 <_printf_float+0x270>
 800c962:	0022      	movs	r2, r4
 800c964:	2301      	movs	r3, #1
 800c966:	0038      	movs	r0, r7
 800c968:	9908      	ldr	r1, [sp, #32]
 800c96a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c96c:	321a      	adds	r2, #26
 800c96e:	47a8      	blx	r5
 800c970:	3001      	adds	r0, #1
 800c972:	d100      	bne.n	800c976 <_printf_float+0x3a2>
 800c974:	e68c      	b.n	800c690 <_printf_float+0xbc>
 800c976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c978:	3301      	adds	r3, #1
 800c97a:	930a      	str	r3, [sp, #40]	; 0x28
 800c97c:	e7e7      	b.n	800c94e <_printf_float+0x37a>
 800c97e:	002a      	movs	r2, r5
 800c980:	0038      	movs	r0, r7
 800c982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c984:	9908      	ldr	r1, [sp, #32]
 800c986:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c988:	47b0      	blx	r6
 800c98a:	3001      	adds	r0, #1
 800c98c:	d1b9      	bne.n	800c902 <_printf_float+0x32e>
 800c98e:	e67f      	b.n	800c690 <_printf_float+0xbc>
 800c990:	0022      	movs	r2, r4
 800c992:	2301      	movs	r3, #1
 800c994:	0038      	movs	r0, r7
 800c996:	9908      	ldr	r1, [sp, #32]
 800c998:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c99a:	321a      	adds	r2, #26
 800c99c:	47b0      	blx	r6
 800c99e:	3001      	adds	r0, #1
 800c9a0:	d100      	bne.n	800c9a4 <_printf_float+0x3d0>
 800c9a2:	e675      	b.n	800c690 <_printf_float+0xbc>
 800c9a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	930e      	str	r3, [sp, #56]	; 0x38
 800c9aa:	e7b0      	b.n	800c90e <_printf_float+0x33a>
 800c9ac:	0038      	movs	r0, r7
 800c9ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9b2:	9908      	ldr	r1, [sp, #32]
 800c9b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9b6:	47b0      	blx	r6
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d1b9      	bne.n	800c930 <_printf_float+0x35c>
 800c9bc:	e668      	b.n	800c690 <_printf_float+0xbc>
 800c9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9c0:	0038      	movs	r0, r7
 800c9c2:	18ea      	adds	r2, r5, r3
 800c9c4:	9908      	ldr	r1, [sp, #32]
 800c9c6:	0033      	movs	r3, r6
 800c9c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c9ca:	47a8      	blx	r5
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	d1b9      	bne.n	800c944 <_printf_float+0x370>
 800c9d0:	e65e      	b.n	800c690 <_printf_float+0xbc>
 800c9d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	dc02      	bgt.n	800c9de <_printf_float+0x40a>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	421a      	tst	r2, r3
 800c9dc:	d03a      	beq.n	800ca54 <_printf_float+0x480>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	002a      	movs	r2, r5
 800c9e2:	0038      	movs	r0, r7
 800c9e4:	9908      	ldr	r1, [sp, #32]
 800c9e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9e8:	47b0      	blx	r6
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	d100      	bne.n	800c9f0 <_printf_float+0x41c>
 800c9ee:	e64f      	b.n	800c690 <_printf_float+0xbc>
 800c9f0:	0038      	movs	r0, r7
 800c9f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9f6:	9908      	ldr	r1, [sp, #32]
 800c9f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9fa:	47b0      	blx	r6
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	d100      	bne.n	800ca02 <_printf_float+0x42e>
 800ca00:	e646      	b.n	800c690 <_printf_float+0xbc>
 800ca02:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ca04:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ca06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca08:	2200      	movs	r2, #0
 800ca0a:	001e      	movs	r6, r3
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f7f3 fd1d 	bl	800044c <__aeabi_dcmpeq>
 800ca12:	2800      	cmp	r0, #0
 800ca14:	d11c      	bne.n	800ca50 <_printf_float+0x47c>
 800ca16:	0033      	movs	r3, r6
 800ca18:	1c6a      	adds	r2, r5, #1
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	0038      	movs	r0, r7
 800ca1e:	9908      	ldr	r1, [sp, #32]
 800ca20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ca22:	47a8      	blx	r5
 800ca24:	3001      	adds	r0, #1
 800ca26:	d10f      	bne.n	800ca48 <_printf_float+0x474>
 800ca28:	e632      	b.n	800c690 <_printf_float+0xbc>
 800ca2a:	0022      	movs	r2, r4
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	0038      	movs	r0, r7
 800ca30:	9908      	ldr	r1, [sp, #32]
 800ca32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca34:	321a      	adds	r2, #26
 800ca36:	47b0      	blx	r6
 800ca38:	3001      	adds	r0, #1
 800ca3a:	d100      	bne.n	800ca3e <_printf_float+0x46a>
 800ca3c:	e628      	b.n	800c690 <_printf_float+0xbc>
 800ca3e:	3501      	adds	r5, #1
 800ca40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca42:	3b01      	subs	r3, #1
 800ca44:	42ab      	cmp	r3, r5
 800ca46:	dcf0      	bgt.n	800ca2a <_printf_float+0x456>
 800ca48:	0022      	movs	r2, r4
 800ca4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca4c:	3250      	adds	r2, #80	; 0x50
 800ca4e:	e6c8      	b.n	800c7e2 <_printf_float+0x20e>
 800ca50:	2500      	movs	r5, #0
 800ca52:	e7f5      	b.n	800ca40 <_printf_float+0x46c>
 800ca54:	002a      	movs	r2, r5
 800ca56:	e7e1      	b.n	800ca1c <_printf_float+0x448>
 800ca58:	0022      	movs	r2, r4
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	0038      	movs	r0, r7
 800ca5e:	9908      	ldr	r1, [sp, #32]
 800ca60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca62:	3219      	adds	r2, #25
 800ca64:	47b0      	blx	r6
 800ca66:	3001      	adds	r0, #1
 800ca68:	d100      	bne.n	800ca6c <_printf_float+0x498>
 800ca6a:	e611      	b.n	800c690 <_printf_float+0xbc>
 800ca6c:	3501      	adds	r5, #1
 800ca6e:	68e3      	ldr	r3, [r4, #12]
 800ca70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca72:	1a9b      	subs	r3, r3, r2
 800ca74:	42ab      	cmp	r3, r5
 800ca76:	dcef      	bgt.n	800ca58 <_printf_float+0x484>
 800ca78:	e6e8      	b.n	800c84c <_printf_float+0x278>
 800ca7a:	2500      	movs	r5, #0
 800ca7c:	e7f7      	b.n	800ca6e <_printf_float+0x49a>
 800ca7e:	46c0      	nop			; (mov r8, r8)

0800ca80 <_printf_common>:
 800ca80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca82:	0016      	movs	r6, r2
 800ca84:	9301      	str	r3, [sp, #4]
 800ca86:	688a      	ldr	r2, [r1, #8]
 800ca88:	690b      	ldr	r3, [r1, #16]
 800ca8a:	000c      	movs	r4, r1
 800ca8c:	9000      	str	r0, [sp, #0]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	da00      	bge.n	800ca94 <_printf_common+0x14>
 800ca92:	0013      	movs	r3, r2
 800ca94:	0022      	movs	r2, r4
 800ca96:	6033      	str	r3, [r6, #0]
 800ca98:	3243      	adds	r2, #67	; 0x43
 800ca9a:	7812      	ldrb	r2, [r2, #0]
 800ca9c:	2a00      	cmp	r2, #0
 800ca9e:	d001      	beq.n	800caa4 <_printf_common+0x24>
 800caa0:	3301      	adds	r3, #1
 800caa2:	6033      	str	r3, [r6, #0]
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	069b      	lsls	r3, r3, #26
 800caa8:	d502      	bpl.n	800cab0 <_printf_common+0x30>
 800caaa:	6833      	ldr	r3, [r6, #0]
 800caac:	3302      	adds	r3, #2
 800caae:	6033      	str	r3, [r6, #0]
 800cab0:	6822      	ldr	r2, [r4, #0]
 800cab2:	2306      	movs	r3, #6
 800cab4:	0015      	movs	r5, r2
 800cab6:	401d      	ands	r5, r3
 800cab8:	421a      	tst	r2, r3
 800caba:	d027      	beq.n	800cb0c <_printf_common+0x8c>
 800cabc:	0023      	movs	r3, r4
 800cabe:	3343      	adds	r3, #67	; 0x43
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	1e5a      	subs	r2, r3, #1
 800cac4:	4193      	sbcs	r3, r2
 800cac6:	6822      	ldr	r2, [r4, #0]
 800cac8:	0692      	lsls	r2, r2, #26
 800caca:	d430      	bmi.n	800cb2e <_printf_common+0xae>
 800cacc:	0022      	movs	r2, r4
 800cace:	9901      	ldr	r1, [sp, #4]
 800cad0:	9800      	ldr	r0, [sp, #0]
 800cad2:	9d08      	ldr	r5, [sp, #32]
 800cad4:	3243      	adds	r2, #67	; 0x43
 800cad6:	47a8      	blx	r5
 800cad8:	3001      	adds	r0, #1
 800cada:	d025      	beq.n	800cb28 <_printf_common+0xa8>
 800cadc:	2206      	movs	r2, #6
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	2500      	movs	r5, #0
 800cae2:	4013      	ands	r3, r2
 800cae4:	2b04      	cmp	r3, #4
 800cae6:	d105      	bne.n	800caf4 <_printf_common+0x74>
 800cae8:	6833      	ldr	r3, [r6, #0]
 800caea:	68e5      	ldr	r5, [r4, #12]
 800caec:	1aed      	subs	r5, r5, r3
 800caee:	43eb      	mvns	r3, r5
 800caf0:	17db      	asrs	r3, r3, #31
 800caf2:	401d      	ands	r5, r3
 800caf4:	68a3      	ldr	r3, [r4, #8]
 800caf6:	6922      	ldr	r2, [r4, #16]
 800caf8:	4293      	cmp	r3, r2
 800cafa:	dd01      	ble.n	800cb00 <_printf_common+0x80>
 800cafc:	1a9b      	subs	r3, r3, r2
 800cafe:	18ed      	adds	r5, r5, r3
 800cb00:	2600      	movs	r6, #0
 800cb02:	42b5      	cmp	r5, r6
 800cb04:	d120      	bne.n	800cb48 <_printf_common+0xc8>
 800cb06:	2000      	movs	r0, #0
 800cb08:	e010      	b.n	800cb2c <_printf_common+0xac>
 800cb0a:	3501      	adds	r5, #1
 800cb0c:	68e3      	ldr	r3, [r4, #12]
 800cb0e:	6832      	ldr	r2, [r6, #0]
 800cb10:	1a9b      	subs	r3, r3, r2
 800cb12:	42ab      	cmp	r3, r5
 800cb14:	ddd2      	ble.n	800cabc <_printf_common+0x3c>
 800cb16:	0022      	movs	r2, r4
 800cb18:	2301      	movs	r3, #1
 800cb1a:	9901      	ldr	r1, [sp, #4]
 800cb1c:	9800      	ldr	r0, [sp, #0]
 800cb1e:	9f08      	ldr	r7, [sp, #32]
 800cb20:	3219      	adds	r2, #25
 800cb22:	47b8      	blx	r7
 800cb24:	3001      	adds	r0, #1
 800cb26:	d1f0      	bne.n	800cb0a <_printf_common+0x8a>
 800cb28:	2001      	movs	r0, #1
 800cb2a:	4240      	negs	r0, r0
 800cb2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb2e:	2030      	movs	r0, #48	; 0x30
 800cb30:	18e1      	adds	r1, r4, r3
 800cb32:	3143      	adds	r1, #67	; 0x43
 800cb34:	7008      	strb	r0, [r1, #0]
 800cb36:	0021      	movs	r1, r4
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	3145      	adds	r1, #69	; 0x45
 800cb3c:	7809      	ldrb	r1, [r1, #0]
 800cb3e:	18a2      	adds	r2, r4, r2
 800cb40:	3243      	adds	r2, #67	; 0x43
 800cb42:	3302      	adds	r3, #2
 800cb44:	7011      	strb	r1, [r2, #0]
 800cb46:	e7c1      	b.n	800cacc <_printf_common+0x4c>
 800cb48:	0022      	movs	r2, r4
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	9901      	ldr	r1, [sp, #4]
 800cb4e:	9800      	ldr	r0, [sp, #0]
 800cb50:	9f08      	ldr	r7, [sp, #32]
 800cb52:	321a      	adds	r2, #26
 800cb54:	47b8      	blx	r7
 800cb56:	3001      	adds	r0, #1
 800cb58:	d0e6      	beq.n	800cb28 <_printf_common+0xa8>
 800cb5a:	3601      	adds	r6, #1
 800cb5c:	e7d1      	b.n	800cb02 <_printf_common+0x82>
	...

0800cb60 <_printf_i>:
 800cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb62:	b08b      	sub	sp, #44	; 0x2c
 800cb64:	9206      	str	r2, [sp, #24]
 800cb66:	000a      	movs	r2, r1
 800cb68:	3243      	adds	r2, #67	; 0x43
 800cb6a:	9307      	str	r3, [sp, #28]
 800cb6c:	9005      	str	r0, [sp, #20]
 800cb6e:	9204      	str	r2, [sp, #16]
 800cb70:	7e0a      	ldrb	r2, [r1, #24]
 800cb72:	000c      	movs	r4, r1
 800cb74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb76:	2a78      	cmp	r2, #120	; 0x78
 800cb78:	d809      	bhi.n	800cb8e <_printf_i+0x2e>
 800cb7a:	2a62      	cmp	r2, #98	; 0x62
 800cb7c:	d80b      	bhi.n	800cb96 <_printf_i+0x36>
 800cb7e:	2a00      	cmp	r2, #0
 800cb80:	d100      	bne.n	800cb84 <_printf_i+0x24>
 800cb82:	e0be      	b.n	800cd02 <_printf_i+0x1a2>
 800cb84:	497c      	ldr	r1, [pc, #496]	; (800cd78 <_printf_i+0x218>)
 800cb86:	9103      	str	r1, [sp, #12]
 800cb88:	2a58      	cmp	r2, #88	; 0x58
 800cb8a:	d100      	bne.n	800cb8e <_printf_i+0x2e>
 800cb8c:	e093      	b.n	800ccb6 <_printf_i+0x156>
 800cb8e:	0026      	movs	r6, r4
 800cb90:	3642      	adds	r6, #66	; 0x42
 800cb92:	7032      	strb	r2, [r6, #0]
 800cb94:	e022      	b.n	800cbdc <_printf_i+0x7c>
 800cb96:	0010      	movs	r0, r2
 800cb98:	3863      	subs	r0, #99	; 0x63
 800cb9a:	2815      	cmp	r0, #21
 800cb9c:	d8f7      	bhi.n	800cb8e <_printf_i+0x2e>
 800cb9e:	f7f3 fac5 	bl	800012c <__gnu_thumb1_case_shi>
 800cba2:	0016      	.short	0x0016
 800cba4:	fff6001f 	.word	0xfff6001f
 800cba8:	fff6fff6 	.word	0xfff6fff6
 800cbac:	001ffff6 	.word	0x001ffff6
 800cbb0:	fff6fff6 	.word	0xfff6fff6
 800cbb4:	fff6fff6 	.word	0xfff6fff6
 800cbb8:	003600a3 	.word	0x003600a3
 800cbbc:	fff60083 	.word	0xfff60083
 800cbc0:	00b4fff6 	.word	0x00b4fff6
 800cbc4:	0036fff6 	.word	0x0036fff6
 800cbc8:	fff6fff6 	.word	0xfff6fff6
 800cbcc:	0087      	.short	0x0087
 800cbce:	0026      	movs	r6, r4
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	3642      	adds	r6, #66	; 0x42
 800cbd4:	1d11      	adds	r1, r2, #4
 800cbd6:	6019      	str	r1, [r3, #0]
 800cbd8:	6813      	ldr	r3, [r2, #0]
 800cbda:	7033      	strb	r3, [r6, #0]
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e0a2      	b.n	800cd26 <_printf_i+0x1c6>
 800cbe0:	6818      	ldr	r0, [r3, #0]
 800cbe2:	6809      	ldr	r1, [r1, #0]
 800cbe4:	1d02      	adds	r2, r0, #4
 800cbe6:	060d      	lsls	r5, r1, #24
 800cbe8:	d50b      	bpl.n	800cc02 <_printf_i+0xa2>
 800cbea:	6805      	ldr	r5, [r0, #0]
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	2d00      	cmp	r5, #0
 800cbf0:	da03      	bge.n	800cbfa <_printf_i+0x9a>
 800cbf2:	232d      	movs	r3, #45	; 0x2d
 800cbf4:	9a04      	ldr	r2, [sp, #16]
 800cbf6:	426d      	negs	r5, r5
 800cbf8:	7013      	strb	r3, [r2, #0]
 800cbfa:	4b5f      	ldr	r3, [pc, #380]	; (800cd78 <_printf_i+0x218>)
 800cbfc:	270a      	movs	r7, #10
 800cbfe:	9303      	str	r3, [sp, #12]
 800cc00:	e01b      	b.n	800cc3a <_printf_i+0xda>
 800cc02:	6805      	ldr	r5, [r0, #0]
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	0649      	lsls	r1, r1, #25
 800cc08:	d5f1      	bpl.n	800cbee <_printf_i+0x8e>
 800cc0a:	b22d      	sxth	r5, r5
 800cc0c:	e7ef      	b.n	800cbee <_printf_i+0x8e>
 800cc0e:	680d      	ldr	r5, [r1, #0]
 800cc10:	6819      	ldr	r1, [r3, #0]
 800cc12:	1d08      	adds	r0, r1, #4
 800cc14:	6018      	str	r0, [r3, #0]
 800cc16:	062e      	lsls	r6, r5, #24
 800cc18:	d501      	bpl.n	800cc1e <_printf_i+0xbe>
 800cc1a:	680d      	ldr	r5, [r1, #0]
 800cc1c:	e003      	b.n	800cc26 <_printf_i+0xc6>
 800cc1e:	066d      	lsls	r5, r5, #25
 800cc20:	d5fb      	bpl.n	800cc1a <_printf_i+0xba>
 800cc22:	680d      	ldr	r5, [r1, #0]
 800cc24:	b2ad      	uxth	r5, r5
 800cc26:	4b54      	ldr	r3, [pc, #336]	; (800cd78 <_printf_i+0x218>)
 800cc28:	2708      	movs	r7, #8
 800cc2a:	9303      	str	r3, [sp, #12]
 800cc2c:	2a6f      	cmp	r2, #111	; 0x6f
 800cc2e:	d000      	beq.n	800cc32 <_printf_i+0xd2>
 800cc30:	3702      	adds	r7, #2
 800cc32:	0023      	movs	r3, r4
 800cc34:	2200      	movs	r2, #0
 800cc36:	3343      	adds	r3, #67	; 0x43
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	6863      	ldr	r3, [r4, #4]
 800cc3c:	60a3      	str	r3, [r4, #8]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	db03      	blt.n	800cc4a <_printf_i+0xea>
 800cc42:	2104      	movs	r1, #4
 800cc44:	6822      	ldr	r2, [r4, #0]
 800cc46:	438a      	bics	r2, r1
 800cc48:	6022      	str	r2, [r4, #0]
 800cc4a:	2d00      	cmp	r5, #0
 800cc4c:	d102      	bne.n	800cc54 <_printf_i+0xf4>
 800cc4e:	9e04      	ldr	r6, [sp, #16]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00c      	beq.n	800cc6e <_printf_i+0x10e>
 800cc54:	9e04      	ldr	r6, [sp, #16]
 800cc56:	0028      	movs	r0, r5
 800cc58:	0039      	movs	r1, r7
 800cc5a:	f7f3 faf7 	bl	800024c <__aeabi_uidivmod>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	3e01      	subs	r6, #1
 800cc62:	5c5b      	ldrb	r3, [r3, r1]
 800cc64:	7033      	strb	r3, [r6, #0]
 800cc66:	002b      	movs	r3, r5
 800cc68:	0005      	movs	r5, r0
 800cc6a:	429f      	cmp	r7, r3
 800cc6c:	d9f3      	bls.n	800cc56 <_printf_i+0xf6>
 800cc6e:	2f08      	cmp	r7, #8
 800cc70:	d109      	bne.n	800cc86 <_printf_i+0x126>
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	07db      	lsls	r3, r3, #31
 800cc76:	d506      	bpl.n	800cc86 <_printf_i+0x126>
 800cc78:	6862      	ldr	r2, [r4, #4]
 800cc7a:	6923      	ldr	r3, [r4, #16]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	dc02      	bgt.n	800cc86 <_printf_i+0x126>
 800cc80:	2330      	movs	r3, #48	; 0x30
 800cc82:	3e01      	subs	r6, #1
 800cc84:	7033      	strb	r3, [r6, #0]
 800cc86:	9b04      	ldr	r3, [sp, #16]
 800cc88:	1b9b      	subs	r3, r3, r6
 800cc8a:	6123      	str	r3, [r4, #16]
 800cc8c:	9b07      	ldr	r3, [sp, #28]
 800cc8e:	0021      	movs	r1, r4
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	9805      	ldr	r0, [sp, #20]
 800cc94:	9b06      	ldr	r3, [sp, #24]
 800cc96:	aa09      	add	r2, sp, #36	; 0x24
 800cc98:	f7ff fef2 	bl	800ca80 <_printf_common>
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d147      	bne.n	800cd30 <_printf_i+0x1d0>
 800cca0:	2001      	movs	r0, #1
 800cca2:	4240      	negs	r0, r0
 800cca4:	b00b      	add	sp, #44	; 0x2c
 800cca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca8:	2220      	movs	r2, #32
 800ccaa:	6809      	ldr	r1, [r1, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	6022      	str	r2, [r4, #0]
 800ccb0:	2278      	movs	r2, #120	; 0x78
 800ccb2:	4932      	ldr	r1, [pc, #200]	; (800cd7c <_printf_i+0x21c>)
 800ccb4:	9103      	str	r1, [sp, #12]
 800ccb6:	0021      	movs	r1, r4
 800ccb8:	3145      	adds	r1, #69	; 0x45
 800ccba:	700a      	strb	r2, [r1, #0]
 800ccbc:	6819      	ldr	r1, [r3, #0]
 800ccbe:	6822      	ldr	r2, [r4, #0]
 800ccc0:	c920      	ldmia	r1!, {r5}
 800ccc2:	0610      	lsls	r0, r2, #24
 800ccc4:	d402      	bmi.n	800cccc <_printf_i+0x16c>
 800ccc6:	0650      	lsls	r0, r2, #25
 800ccc8:	d500      	bpl.n	800cccc <_printf_i+0x16c>
 800ccca:	b2ad      	uxth	r5, r5
 800cccc:	6019      	str	r1, [r3, #0]
 800ccce:	07d3      	lsls	r3, r2, #31
 800ccd0:	d502      	bpl.n	800ccd8 <_printf_i+0x178>
 800ccd2:	2320      	movs	r3, #32
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	2710      	movs	r7, #16
 800ccda:	2d00      	cmp	r5, #0
 800ccdc:	d1a9      	bne.n	800cc32 <_printf_i+0xd2>
 800ccde:	2220      	movs	r2, #32
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	4393      	bics	r3, r2
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	e7a4      	b.n	800cc32 <_printf_i+0xd2>
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	680d      	ldr	r5, [r1, #0]
 800ccec:	1d10      	adds	r0, r2, #4
 800ccee:	6949      	ldr	r1, [r1, #20]
 800ccf0:	6018      	str	r0, [r3, #0]
 800ccf2:	6813      	ldr	r3, [r2, #0]
 800ccf4:	062e      	lsls	r6, r5, #24
 800ccf6:	d501      	bpl.n	800ccfc <_printf_i+0x19c>
 800ccf8:	6019      	str	r1, [r3, #0]
 800ccfa:	e002      	b.n	800cd02 <_printf_i+0x1a2>
 800ccfc:	066d      	lsls	r5, r5, #25
 800ccfe:	d5fb      	bpl.n	800ccf8 <_printf_i+0x198>
 800cd00:	8019      	strh	r1, [r3, #0]
 800cd02:	2300      	movs	r3, #0
 800cd04:	9e04      	ldr	r6, [sp, #16]
 800cd06:	6123      	str	r3, [r4, #16]
 800cd08:	e7c0      	b.n	800cc8c <_printf_i+0x12c>
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	1d11      	adds	r1, r2, #4
 800cd0e:	6019      	str	r1, [r3, #0]
 800cd10:	6816      	ldr	r6, [r2, #0]
 800cd12:	2100      	movs	r1, #0
 800cd14:	0030      	movs	r0, r6
 800cd16:	6862      	ldr	r2, [r4, #4]
 800cd18:	f000 fd27 	bl	800d76a <memchr>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d001      	beq.n	800cd24 <_printf_i+0x1c4>
 800cd20:	1b80      	subs	r0, r0, r6
 800cd22:	6060      	str	r0, [r4, #4]
 800cd24:	6863      	ldr	r3, [r4, #4]
 800cd26:	6123      	str	r3, [r4, #16]
 800cd28:	2300      	movs	r3, #0
 800cd2a:	9a04      	ldr	r2, [sp, #16]
 800cd2c:	7013      	strb	r3, [r2, #0]
 800cd2e:	e7ad      	b.n	800cc8c <_printf_i+0x12c>
 800cd30:	0032      	movs	r2, r6
 800cd32:	6923      	ldr	r3, [r4, #16]
 800cd34:	9906      	ldr	r1, [sp, #24]
 800cd36:	9805      	ldr	r0, [sp, #20]
 800cd38:	9d07      	ldr	r5, [sp, #28]
 800cd3a:	47a8      	blx	r5
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d0af      	beq.n	800cca0 <_printf_i+0x140>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	079b      	lsls	r3, r3, #30
 800cd44:	d415      	bmi.n	800cd72 <_printf_i+0x212>
 800cd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd48:	68e0      	ldr	r0, [r4, #12]
 800cd4a:	4298      	cmp	r0, r3
 800cd4c:	daaa      	bge.n	800cca4 <_printf_i+0x144>
 800cd4e:	0018      	movs	r0, r3
 800cd50:	e7a8      	b.n	800cca4 <_printf_i+0x144>
 800cd52:	0022      	movs	r2, r4
 800cd54:	2301      	movs	r3, #1
 800cd56:	9906      	ldr	r1, [sp, #24]
 800cd58:	9805      	ldr	r0, [sp, #20]
 800cd5a:	9e07      	ldr	r6, [sp, #28]
 800cd5c:	3219      	adds	r2, #25
 800cd5e:	47b0      	blx	r6
 800cd60:	3001      	adds	r0, #1
 800cd62:	d09d      	beq.n	800cca0 <_printf_i+0x140>
 800cd64:	3501      	adds	r5, #1
 800cd66:	68e3      	ldr	r3, [r4, #12]
 800cd68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd6a:	1a9b      	subs	r3, r3, r2
 800cd6c:	42ab      	cmp	r3, r5
 800cd6e:	dcf0      	bgt.n	800cd52 <_printf_i+0x1f2>
 800cd70:	e7e9      	b.n	800cd46 <_printf_i+0x1e6>
 800cd72:	2500      	movs	r5, #0
 800cd74:	e7f7      	b.n	800cd66 <_printf_i+0x206>
 800cd76:	46c0      	nop			; (mov r8, r8)
 800cd78:	08012163 	.word	0x08012163
 800cd7c:	08012174 	.word	0x08012174

0800cd80 <_scanf_float>:
 800cd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd82:	b08b      	sub	sp, #44	; 0x2c
 800cd84:	0016      	movs	r6, r2
 800cd86:	9002      	str	r0, [sp, #8]
 800cd88:	22ae      	movs	r2, #174	; 0xae
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	9307      	str	r3, [sp, #28]
 800cd8e:	688b      	ldr	r3, [r1, #8]
 800cd90:	000f      	movs	r7, r1
 800cd92:	1e59      	subs	r1, r3, #1
 800cd94:	0052      	lsls	r2, r2, #1
 800cd96:	9006      	str	r0, [sp, #24]
 800cd98:	4291      	cmp	r1, r2
 800cd9a:	d905      	bls.n	800cda8 <_scanf_float+0x28>
 800cd9c:	3b5e      	subs	r3, #94	; 0x5e
 800cd9e:	3bff      	subs	r3, #255	; 0xff
 800cda0:	9306      	str	r3, [sp, #24]
 800cda2:	235e      	movs	r3, #94	; 0x5e
 800cda4:	33ff      	adds	r3, #255	; 0xff
 800cda6:	60bb      	str	r3, [r7, #8]
 800cda8:	23f0      	movs	r3, #240	; 0xf0
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	603b      	str	r3, [r7, #0]
 800cdb2:	003b      	movs	r3, r7
 800cdb4:	2400      	movs	r4, #0
 800cdb6:	331c      	adds	r3, #28
 800cdb8:	001d      	movs	r5, r3
 800cdba:	9304      	str	r3, [sp, #16]
 800cdbc:	9403      	str	r4, [sp, #12]
 800cdbe:	9409      	str	r4, [sp, #36]	; 0x24
 800cdc0:	9408      	str	r4, [sp, #32]
 800cdc2:	9401      	str	r4, [sp, #4]
 800cdc4:	9405      	str	r4, [sp, #20]
 800cdc6:	68ba      	ldr	r2, [r7, #8]
 800cdc8:	2a00      	cmp	r2, #0
 800cdca:	d00a      	beq.n	800cde2 <_scanf_float+0x62>
 800cdcc:	6833      	ldr	r3, [r6, #0]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2b4e      	cmp	r3, #78	; 0x4e
 800cdd2:	d844      	bhi.n	800ce5e <_scanf_float+0xde>
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	2b40      	cmp	r3, #64	; 0x40
 800cdd8:	d82c      	bhi.n	800ce34 <_scanf_float+0xb4>
 800cdda:	382b      	subs	r0, #43	; 0x2b
 800cddc:	b2c1      	uxtb	r1, r0
 800cdde:	290e      	cmp	r1, #14
 800cde0:	d92a      	bls.n	800ce38 <_scanf_float+0xb8>
 800cde2:	9b01      	ldr	r3, [sp, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d003      	beq.n	800cdf0 <_scanf_float+0x70>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	4aa3      	ldr	r2, [pc, #652]	; (800d078 <_scanf_float+0x2f8>)
 800cdec:	4013      	ands	r3, r2
 800cdee:	603b      	str	r3, [r7, #0]
 800cdf0:	9b03      	ldr	r3, [sp, #12]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d900      	bls.n	800cdfa <_scanf_float+0x7a>
 800cdf8:	e0f9      	b.n	800cfee <_scanf_float+0x26e>
 800cdfa:	24be      	movs	r4, #190	; 0xbe
 800cdfc:	0064      	lsls	r4, r4, #1
 800cdfe:	9b04      	ldr	r3, [sp, #16]
 800ce00:	429d      	cmp	r5, r3
 800ce02:	d900      	bls.n	800ce06 <_scanf_float+0x86>
 800ce04:	e0e9      	b.n	800cfda <_scanf_float+0x25a>
 800ce06:	2301      	movs	r3, #1
 800ce08:	9303      	str	r3, [sp, #12]
 800ce0a:	e183      	b.n	800d114 <_scanf_float+0x394>
 800ce0c:	0018      	movs	r0, r3
 800ce0e:	3861      	subs	r0, #97	; 0x61
 800ce10:	280d      	cmp	r0, #13
 800ce12:	d8e6      	bhi.n	800cde2 <_scanf_float+0x62>
 800ce14:	f7f3 f98a 	bl	800012c <__gnu_thumb1_case_shi>
 800ce18:	ffe50083 	.word	0xffe50083
 800ce1c:	ffe5ffe5 	.word	0xffe5ffe5
 800ce20:	00a200b6 	.word	0x00a200b6
 800ce24:	ffe5ffe5 	.word	0xffe5ffe5
 800ce28:	ffe50089 	.word	0xffe50089
 800ce2c:	ffe5ffe5 	.word	0xffe5ffe5
 800ce30:	0065ffe5 	.word	0x0065ffe5
 800ce34:	3841      	subs	r0, #65	; 0x41
 800ce36:	e7eb      	b.n	800ce10 <_scanf_float+0x90>
 800ce38:	280e      	cmp	r0, #14
 800ce3a:	d8d2      	bhi.n	800cde2 <_scanf_float+0x62>
 800ce3c:	f7f3 f976 	bl	800012c <__gnu_thumb1_case_shi>
 800ce40:	ffd1004b 	.word	0xffd1004b
 800ce44:	0098004b 	.word	0x0098004b
 800ce48:	0020ffd1 	.word	0x0020ffd1
 800ce4c:	00400040 	.word	0x00400040
 800ce50:	00400040 	.word	0x00400040
 800ce54:	00400040 	.word	0x00400040
 800ce58:	00400040 	.word	0x00400040
 800ce5c:	0040      	.short	0x0040
 800ce5e:	2b6e      	cmp	r3, #110	; 0x6e
 800ce60:	d809      	bhi.n	800ce76 <_scanf_float+0xf6>
 800ce62:	2b60      	cmp	r3, #96	; 0x60
 800ce64:	d8d2      	bhi.n	800ce0c <_scanf_float+0x8c>
 800ce66:	2b54      	cmp	r3, #84	; 0x54
 800ce68:	d07d      	beq.n	800cf66 <_scanf_float+0x1e6>
 800ce6a:	2b59      	cmp	r3, #89	; 0x59
 800ce6c:	d1b9      	bne.n	800cde2 <_scanf_float+0x62>
 800ce6e:	2c07      	cmp	r4, #7
 800ce70:	d1b7      	bne.n	800cde2 <_scanf_float+0x62>
 800ce72:	2408      	movs	r4, #8
 800ce74:	e02c      	b.n	800ced0 <_scanf_float+0x150>
 800ce76:	2b74      	cmp	r3, #116	; 0x74
 800ce78:	d075      	beq.n	800cf66 <_scanf_float+0x1e6>
 800ce7a:	2b79      	cmp	r3, #121	; 0x79
 800ce7c:	d0f7      	beq.n	800ce6e <_scanf_float+0xee>
 800ce7e:	e7b0      	b.n	800cde2 <_scanf_float+0x62>
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	05c8      	lsls	r0, r1, #23
 800ce84:	d51c      	bpl.n	800cec0 <_scanf_float+0x140>
 800ce86:	2380      	movs	r3, #128	; 0x80
 800ce88:	4399      	bics	r1, r3
 800ce8a:	9b01      	ldr	r3, [sp, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	9301      	str	r3, [sp, #4]
 800ce92:	9b06      	ldr	r3, [sp, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <_scanf_float+0x120>
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	3201      	adds	r2, #1
 800ce9c:	9306      	str	r3, [sp, #24]
 800ce9e:	60ba      	str	r2, [r7, #8]
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	60bb      	str	r3, [r7, #8]
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	613b      	str	r3, [r7, #16]
 800ceac:	6873      	ldr	r3, [r6, #4]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	6073      	str	r3, [r6, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dc00      	bgt.n	800ceb8 <_scanf_float+0x138>
 800ceb6:	e086      	b.n	800cfc6 <_scanf_float+0x246>
 800ceb8:	6833      	ldr	r3, [r6, #0]
 800ceba:	3301      	adds	r3, #1
 800cebc:	6033      	str	r3, [r6, #0]
 800cebe:	e782      	b.n	800cdc6 <_scanf_float+0x46>
 800cec0:	9a03      	ldr	r2, [sp, #12]
 800cec2:	1912      	adds	r2, r2, r4
 800cec4:	2a00      	cmp	r2, #0
 800cec6:	d18c      	bne.n	800cde2 <_scanf_float+0x62>
 800cec8:	683a      	ldr	r2, [r7, #0]
 800ceca:	496c      	ldr	r1, [pc, #432]	; (800d07c <_scanf_float+0x2fc>)
 800cecc:	400a      	ands	r2, r1
 800cece:	603a      	str	r2, [r7, #0]
 800ced0:	702b      	strb	r3, [r5, #0]
 800ced2:	3501      	adds	r5, #1
 800ced4:	e7e4      	b.n	800cea0 <_scanf_float+0x120>
 800ced6:	2180      	movs	r1, #128	; 0x80
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	420a      	tst	r2, r1
 800cedc:	d081      	beq.n	800cde2 <_scanf_float+0x62>
 800cede:	438a      	bics	r2, r1
 800cee0:	e7f5      	b.n	800cece <_scanf_float+0x14e>
 800cee2:	9a03      	ldr	r2, [sp, #12]
 800cee4:	2a00      	cmp	r2, #0
 800cee6:	d10f      	bne.n	800cf08 <_scanf_float+0x188>
 800cee8:	9a01      	ldr	r2, [sp, #4]
 800ceea:	2a00      	cmp	r2, #0
 800ceec:	d10f      	bne.n	800cf0e <_scanf_float+0x18e>
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	21e0      	movs	r1, #224	; 0xe0
 800cef2:	0010      	movs	r0, r2
 800cef4:	00c9      	lsls	r1, r1, #3
 800cef6:	4008      	ands	r0, r1
 800cef8:	4288      	cmp	r0, r1
 800cefa:	d108      	bne.n	800cf0e <_scanf_float+0x18e>
 800cefc:	4960      	ldr	r1, [pc, #384]	; (800d080 <_scanf_float+0x300>)
 800cefe:	400a      	ands	r2, r1
 800cf00:	603a      	str	r2, [r7, #0]
 800cf02:	2201      	movs	r2, #1
 800cf04:	9203      	str	r2, [sp, #12]
 800cf06:	e7e3      	b.n	800ced0 <_scanf_float+0x150>
 800cf08:	9a03      	ldr	r2, [sp, #12]
 800cf0a:	2a02      	cmp	r2, #2
 800cf0c:	d059      	beq.n	800cfc2 <_scanf_float+0x242>
 800cf0e:	2c01      	cmp	r4, #1
 800cf10:	d002      	beq.n	800cf18 <_scanf_float+0x198>
 800cf12:	2c04      	cmp	r4, #4
 800cf14:	d000      	beq.n	800cf18 <_scanf_float+0x198>
 800cf16:	e764      	b.n	800cde2 <_scanf_float+0x62>
 800cf18:	3401      	adds	r4, #1
 800cf1a:	b2e4      	uxtb	r4, r4
 800cf1c:	e7d8      	b.n	800ced0 <_scanf_float+0x150>
 800cf1e:	9a03      	ldr	r2, [sp, #12]
 800cf20:	2a01      	cmp	r2, #1
 800cf22:	d000      	beq.n	800cf26 <_scanf_float+0x1a6>
 800cf24:	e75d      	b.n	800cde2 <_scanf_float+0x62>
 800cf26:	2202      	movs	r2, #2
 800cf28:	e7ec      	b.n	800cf04 <_scanf_float+0x184>
 800cf2a:	2c00      	cmp	r4, #0
 800cf2c:	d110      	bne.n	800cf50 <_scanf_float+0x1d0>
 800cf2e:	9a01      	ldr	r2, [sp, #4]
 800cf30:	2a00      	cmp	r2, #0
 800cf32:	d000      	beq.n	800cf36 <_scanf_float+0x1b6>
 800cf34:	e758      	b.n	800cde8 <_scanf_float+0x68>
 800cf36:	683a      	ldr	r2, [r7, #0]
 800cf38:	21e0      	movs	r1, #224	; 0xe0
 800cf3a:	0010      	movs	r0, r2
 800cf3c:	00c9      	lsls	r1, r1, #3
 800cf3e:	4008      	ands	r0, r1
 800cf40:	4288      	cmp	r0, r1
 800cf42:	d000      	beq.n	800cf46 <_scanf_float+0x1c6>
 800cf44:	e754      	b.n	800cdf0 <_scanf_float+0x70>
 800cf46:	494e      	ldr	r1, [pc, #312]	; (800d080 <_scanf_float+0x300>)
 800cf48:	3401      	adds	r4, #1
 800cf4a:	400a      	ands	r2, r1
 800cf4c:	603a      	str	r2, [r7, #0]
 800cf4e:	e7bf      	b.n	800ced0 <_scanf_float+0x150>
 800cf50:	21fd      	movs	r1, #253	; 0xfd
 800cf52:	1ee2      	subs	r2, r4, #3
 800cf54:	420a      	tst	r2, r1
 800cf56:	d000      	beq.n	800cf5a <_scanf_float+0x1da>
 800cf58:	e743      	b.n	800cde2 <_scanf_float+0x62>
 800cf5a:	e7dd      	b.n	800cf18 <_scanf_float+0x198>
 800cf5c:	2c02      	cmp	r4, #2
 800cf5e:	d000      	beq.n	800cf62 <_scanf_float+0x1e2>
 800cf60:	e73f      	b.n	800cde2 <_scanf_float+0x62>
 800cf62:	2403      	movs	r4, #3
 800cf64:	e7b4      	b.n	800ced0 <_scanf_float+0x150>
 800cf66:	2c06      	cmp	r4, #6
 800cf68:	d000      	beq.n	800cf6c <_scanf_float+0x1ec>
 800cf6a:	e73a      	b.n	800cde2 <_scanf_float+0x62>
 800cf6c:	2407      	movs	r4, #7
 800cf6e:	e7af      	b.n	800ced0 <_scanf_float+0x150>
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	0591      	lsls	r1, r2, #22
 800cf74:	d400      	bmi.n	800cf78 <_scanf_float+0x1f8>
 800cf76:	e734      	b.n	800cde2 <_scanf_float+0x62>
 800cf78:	4942      	ldr	r1, [pc, #264]	; (800d084 <_scanf_float+0x304>)
 800cf7a:	400a      	ands	r2, r1
 800cf7c:	603a      	str	r2, [r7, #0]
 800cf7e:	9a01      	ldr	r2, [sp, #4]
 800cf80:	9205      	str	r2, [sp, #20]
 800cf82:	e7a5      	b.n	800ced0 <_scanf_float+0x150>
 800cf84:	21a0      	movs	r1, #160	; 0xa0
 800cf86:	2080      	movs	r0, #128	; 0x80
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	00c9      	lsls	r1, r1, #3
 800cf8c:	4011      	ands	r1, r2
 800cf8e:	00c0      	lsls	r0, r0, #3
 800cf90:	4281      	cmp	r1, r0
 800cf92:	d006      	beq.n	800cfa2 <_scanf_float+0x222>
 800cf94:	4202      	tst	r2, r0
 800cf96:	d100      	bne.n	800cf9a <_scanf_float+0x21a>
 800cf98:	e723      	b.n	800cde2 <_scanf_float+0x62>
 800cf9a:	9901      	ldr	r1, [sp, #4]
 800cf9c:	2900      	cmp	r1, #0
 800cf9e:	d100      	bne.n	800cfa2 <_scanf_float+0x222>
 800cfa0:	e726      	b.n	800cdf0 <_scanf_float+0x70>
 800cfa2:	0591      	lsls	r1, r2, #22
 800cfa4:	d404      	bmi.n	800cfb0 <_scanf_float+0x230>
 800cfa6:	9901      	ldr	r1, [sp, #4]
 800cfa8:	9805      	ldr	r0, [sp, #20]
 800cfaa:	9509      	str	r5, [sp, #36]	; 0x24
 800cfac:	1a09      	subs	r1, r1, r0
 800cfae:	9108      	str	r1, [sp, #32]
 800cfb0:	4933      	ldr	r1, [pc, #204]	; (800d080 <_scanf_float+0x300>)
 800cfb2:	400a      	ands	r2, r1
 800cfb4:	21c0      	movs	r1, #192	; 0xc0
 800cfb6:	0049      	lsls	r1, r1, #1
 800cfb8:	430a      	orrs	r2, r1
 800cfba:	603a      	str	r2, [r7, #0]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	9201      	str	r2, [sp, #4]
 800cfc0:	e786      	b.n	800ced0 <_scanf_float+0x150>
 800cfc2:	2203      	movs	r2, #3
 800cfc4:	e79e      	b.n	800cf04 <_scanf_float+0x184>
 800cfc6:	23c0      	movs	r3, #192	; 0xc0
 800cfc8:	005b      	lsls	r3, r3, #1
 800cfca:	0031      	movs	r1, r6
 800cfcc:	58fb      	ldr	r3, [r7, r3]
 800cfce:	9802      	ldr	r0, [sp, #8]
 800cfd0:	4798      	blx	r3
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	d100      	bne.n	800cfd8 <_scanf_float+0x258>
 800cfd6:	e6f6      	b.n	800cdc6 <_scanf_float+0x46>
 800cfd8:	e703      	b.n	800cde2 <_scanf_float+0x62>
 800cfda:	3d01      	subs	r5, #1
 800cfdc:	593b      	ldr	r3, [r7, r4]
 800cfde:	0032      	movs	r2, r6
 800cfe0:	7829      	ldrb	r1, [r5, #0]
 800cfe2:	9802      	ldr	r0, [sp, #8]
 800cfe4:	4798      	blx	r3
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	613b      	str	r3, [r7, #16]
 800cfec:	e707      	b.n	800cdfe <_scanf_float+0x7e>
 800cfee:	1e63      	subs	r3, r4, #1
 800cff0:	2b06      	cmp	r3, #6
 800cff2:	d80e      	bhi.n	800d012 <_scanf_float+0x292>
 800cff4:	9503      	str	r5, [sp, #12]
 800cff6:	2c02      	cmp	r4, #2
 800cff8:	d920      	bls.n	800d03c <_scanf_float+0x2bc>
 800cffa:	1b63      	subs	r3, r4, r5
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	9306      	str	r3, [sp, #24]
 800d000:	9b03      	ldr	r3, [sp, #12]
 800d002:	9a06      	ldr	r2, [sp, #24]
 800d004:	189b      	adds	r3, r3, r2
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b03      	cmp	r3, #3
 800d00a:	d827      	bhi.n	800d05c <_scanf_float+0x2dc>
 800d00c:	3c03      	subs	r4, #3
 800d00e:	b2e4      	uxtb	r4, r4
 800d010:	1b2d      	subs	r5, r5, r4
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	05da      	lsls	r2, r3, #23
 800d016:	d552      	bpl.n	800d0be <_scanf_float+0x33e>
 800d018:	055b      	lsls	r3, r3, #21
 800d01a:	d535      	bpl.n	800d088 <_scanf_float+0x308>
 800d01c:	24be      	movs	r4, #190	; 0xbe
 800d01e:	0064      	lsls	r4, r4, #1
 800d020:	9b04      	ldr	r3, [sp, #16]
 800d022:	429d      	cmp	r5, r3
 800d024:	d800      	bhi.n	800d028 <_scanf_float+0x2a8>
 800d026:	e6ee      	b.n	800ce06 <_scanf_float+0x86>
 800d028:	3d01      	subs	r5, #1
 800d02a:	593b      	ldr	r3, [r7, r4]
 800d02c:	0032      	movs	r2, r6
 800d02e:	7829      	ldrb	r1, [r5, #0]
 800d030:	9802      	ldr	r0, [sp, #8]
 800d032:	4798      	blx	r3
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	3b01      	subs	r3, #1
 800d038:	613b      	str	r3, [r7, #16]
 800d03a:	e7f1      	b.n	800d020 <_scanf_float+0x2a0>
 800d03c:	24be      	movs	r4, #190	; 0xbe
 800d03e:	0064      	lsls	r4, r4, #1
 800d040:	9b04      	ldr	r3, [sp, #16]
 800d042:	429d      	cmp	r5, r3
 800d044:	d800      	bhi.n	800d048 <_scanf_float+0x2c8>
 800d046:	e6de      	b.n	800ce06 <_scanf_float+0x86>
 800d048:	3d01      	subs	r5, #1
 800d04a:	593b      	ldr	r3, [r7, r4]
 800d04c:	0032      	movs	r2, r6
 800d04e:	7829      	ldrb	r1, [r5, #0]
 800d050:	9802      	ldr	r0, [sp, #8]
 800d052:	4798      	blx	r3
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	3b01      	subs	r3, #1
 800d058:	613b      	str	r3, [r7, #16]
 800d05a:	e7f1      	b.n	800d040 <_scanf_float+0x2c0>
 800d05c:	9b03      	ldr	r3, [sp, #12]
 800d05e:	0032      	movs	r2, r6
 800d060:	3b01      	subs	r3, #1
 800d062:	7819      	ldrb	r1, [r3, #0]
 800d064:	9303      	str	r3, [sp, #12]
 800d066:	23be      	movs	r3, #190	; 0xbe
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	58fb      	ldr	r3, [r7, r3]
 800d06c:	9802      	ldr	r0, [sp, #8]
 800d06e:	4798      	blx	r3
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	3b01      	subs	r3, #1
 800d074:	613b      	str	r3, [r7, #16]
 800d076:	e7c3      	b.n	800d000 <_scanf_float+0x280>
 800d078:	fffffeff 	.word	0xfffffeff
 800d07c:	fffffe7f 	.word	0xfffffe7f
 800d080:	fffff87f 	.word	0xfffff87f
 800d084:	fffffd7f 	.word	0xfffffd7f
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	1e6c      	subs	r4, r5, #1
 800d08c:	7821      	ldrb	r1, [r4, #0]
 800d08e:	3b01      	subs	r3, #1
 800d090:	613b      	str	r3, [r7, #16]
 800d092:	2965      	cmp	r1, #101	; 0x65
 800d094:	d00c      	beq.n	800d0b0 <_scanf_float+0x330>
 800d096:	2945      	cmp	r1, #69	; 0x45
 800d098:	d00a      	beq.n	800d0b0 <_scanf_float+0x330>
 800d09a:	23be      	movs	r3, #190	; 0xbe
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	58fb      	ldr	r3, [r7, r3]
 800d0a0:	0032      	movs	r2, r6
 800d0a2:	9802      	ldr	r0, [sp, #8]
 800d0a4:	4798      	blx	r3
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	1eac      	subs	r4, r5, #2
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	7821      	ldrb	r1, [r4, #0]
 800d0ae:	613b      	str	r3, [r7, #16]
 800d0b0:	23be      	movs	r3, #190	; 0xbe
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	0032      	movs	r2, r6
 800d0b6:	58fb      	ldr	r3, [r7, r3]
 800d0b8:	9802      	ldr	r0, [sp, #8]
 800d0ba:	4798      	blx	r3
 800d0bc:	0025      	movs	r5, r4
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	2310      	movs	r3, #16
 800d0c2:	0011      	movs	r1, r2
 800d0c4:	4019      	ands	r1, r3
 800d0c6:	9103      	str	r1, [sp, #12]
 800d0c8:	421a      	tst	r2, r3
 800d0ca:	d15b      	bne.n	800d184 <_scanf_float+0x404>
 800d0cc:	22c0      	movs	r2, #192	; 0xc0
 800d0ce:	7029      	strb	r1, [r5, #0]
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	00d2      	lsls	r2, r2, #3
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	2280      	movs	r2, #128	; 0x80
 800d0d8:	00d2      	lsls	r2, r2, #3
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d11d      	bne.n	800d11a <_scanf_float+0x39a>
 800d0de:	9b05      	ldr	r3, [sp, #20]
 800d0e0:	9a01      	ldr	r2, [sp, #4]
 800d0e2:	9901      	ldr	r1, [sp, #4]
 800d0e4:	1a9a      	subs	r2, r3, r2
 800d0e6:	428b      	cmp	r3, r1
 800d0e8:	d124      	bne.n	800d134 <_scanf_float+0x3b4>
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	9904      	ldr	r1, [sp, #16]
 800d0ee:	9802      	ldr	r0, [sp, #8]
 800d0f0:	f7ff f92a 	bl	800c348 <_strtod_r>
 800d0f4:	9b07      	ldr	r3, [sp, #28]
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	0004      	movs	r4, r0
 800d0fa:	000d      	movs	r5, r1
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	0791      	lsls	r1, r2, #30
 800d100:	d525      	bpl.n	800d14e <_scanf_float+0x3ce>
 800d102:	9907      	ldr	r1, [sp, #28]
 800d104:	1d1a      	adds	r2, r3, #4
 800d106:	600a      	str	r2, [r1, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	601c      	str	r4, [r3, #0]
 800d10c:	605d      	str	r5, [r3, #4]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3301      	adds	r3, #1
 800d112:	60fb      	str	r3, [r7, #12]
 800d114:	9803      	ldr	r0, [sp, #12]
 800d116:	b00b      	add	sp, #44	; 0x2c
 800d118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d11a:	9b08      	ldr	r3, [sp, #32]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0e4      	beq.n	800d0ea <_scanf_float+0x36a>
 800d120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d122:	9a03      	ldr	r2, [sp, #12]
 800d124:	1c59      	adds	r1, r3, #1
 800d126:	9802      	ldr	r0, [sp, #8]
 800d128:	230a      	movs	r3, #10
 800d12a:	f7ff f99b 	bl	800c464 <_strtol_r>
 800d12e:	9b08      	ldr	r3, [sp, #32]
 800d130:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d132:	1ac2      	subs	r2, r0, r3
 800d134:	003b      	movs	r3, r7
 800d136:	3370      	adds	r3, #112	; 0x70
 800d138:	33ff      	adds	r3, #255	; 0xff
 800d13a:	429d      	cmp	r5, r3
 800d13c:	d302      	bcc.n	800d144 <_scanf_float+0x3c4>
 800d13e:	003d      	movs	r5, r7
 800d140:	356f      	adds	r5, #111	; 0x6f
 800d142:	35ff      	adds	r5, #255	; 0xff
 800d144:	0028      	movs	r0, r5
 800d146:	4910      	ldr	r1, [pc, #64]	; (800d188 <_scanf_float+0x408>)
 800d148:	f000 f8e6 	bl	800d318 <siprintf>
 800d14c:	e7cd      	b.n	800d0ea <_scanf_float+0x36a>
 800d14e:	1d19      	adds	r1, r3, #4
 800d150:	0752      	lsls	r2, r2, #29
 800d152:	d502      	bpl.n	800d15a <_scanf_float+0x3da>
 800d154:	9a07      	ldr	r2, [sp, #28]
 800d156:	6011      	str	r1, [r2, #0]
 800d158:	e7d6      	b.n	800d108 <_scanf_float+0x388>
 800d15a:	9a07      	ldr	r2, [sp, #28]
 800d15c:	0020      	movs	r0, r4
 800d15e:	6011      	str	r1, [r2, #0]
 800d160:	681e      	ldr	r6, [r3, #0]
 800d162:	0022      	movs	r2, r4
 800d164:	002b      	movs	r3, r5
 800d166:	0029      	movs	r1, r5
 800d168:	f7f5 fef8 	bl	8002f5c <__aeabi_dcmpun>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d004      	beq.n	800d17a <_scanf_float+0x3fa>
 800d170:	4806      	ldr	r0, [pc, #24]	; (800d18c <_scanf_float+0x40c>)
 800d172:	f000 fb15 	bl	800d7a0 <nanf>
 800d176:	6030      	str	r0, [r6, #0]
 800d178:	e7c9      	b.n	800d10e <_scanf_float+0x38e>
 800d17a:	0020      	movs	r0, r4
 800d17c:	0029      	movs	r1, r5
 800d17e:	f7f5 ffdf 	bl	8003140 <__aeabi_d2f>
 800d182:	e7f8      	b.n	800d176 <_scanf_float+0x3f6>
 800d184:	2300      	movs	r3, #0
 800d186:	e63f      	b.n	800ce08 <_scanf_float+0x88>
 800d188:	08012185 	.word	0x08012185
 800d18c:	0801223e 	.word	0x0801223e

0800d190 <std>:
 800d190:	2300      	movs	r3, #0
 800d192:	b510      	push	{r4, lr}
 800d194:	0004      	movs	r4, r0
 800d196:	6003      	str	r3, [r0, #0]
 800d198:	6043      	str	r3, [r0, #4]
 800d19a:	6083      	str	r3, [r0, #8]
 800d19c:	8181      	strh	r1, [r0, #12]
 800d19e:	6643      	str	r3, [r0, #100]	; 0x64
 800d1a0:	81c2      	strh	r2, [r0, #14]
 800d1a2:	6103      	str	r3, [r0, #16]
 800d1a4:	6143      	str	r3, [r0, #20]
 800d1a6:	6183      	str	r3, [r0, #24]
 800d1a8:	0019      	movs	r1, r3
 800d1aa:	2208      	movs	r2, #8
 800d1ac:	305c      	adds	r0, #92	; 0x5c
 800d1ae:	f000 f91f 	bl	800d3f0 <memset>
 800d1b2:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <std+0x50>)
 800d1b4:	6224      	str	r4, [r4, #32]
 800d1b6:	6263      	str	r3, [r4, #36]	; 0x24
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <std+0x54>)
 800d1ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1bc:	4b0a      	ldr	r3, [pc, #40]	; (800d1e8 <std+0x58>)
 800d1be:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <std+0x5c>)
 800d1c2:	6323      	str	r3, [r4, #48]	; 0x30
 800d1c4:	4b0a      	ldr	r3, [pc, #40]	; (800d1f0 <std+0x60>)
 800d1c6:	429c      	cmp	r4, r3
 800d1c8:	d005      	beq.n	800d1d6 <std+0x46>
 800d1ca:	4b0a      	ldr	r3, [pc, #40]	; (800d1f4 <std+0x64>)
 800d1cc:	429c      	cmp	r4, r3
 800d1ce:	d002      	beq.n	800d1d6 <std+0x46>
 800d1d0:	4b09      	ldr	r3, [pc, #36]	; (800d1f8 <std+0x68>)
 800d1d2:	429c      	cmp	r4, r3
 800d1d4:	d103      	bne.n	800d1de <std+0x4e>
 800d1d6:	0020      	movs	r0, r4
 800d1d8:	3058      	adds	r0, #88	; 0x58
 800d1da:	f000 fabb 	bl	800d754 <__retarget_lock_init_recursive>
 800d1de:	bd10      	pop	{r4, pc}
 800d1e0:	0800d359 	.word	0x0800d359
 800d1e4:	0800d381 	.word	0x0800d381
 800d1e8:	0800d3b9 	.word	0x0800d3b9
 800d1ec:	0800d3e5 	.word	0x0800d3e5
 800d1f0:	2000602c 	.word	0x2000602c
 800d1f4:	20006094 	.word	0x20006094
 800d1f8:	200060fc 	.word	0x200060fc

0800d1fc <stdio_exit_handler>:
 800d1fc:	b510      	push	{r4, lr}
 800d1fe:	4a03      	ldr	r2, [pc, #12]	; (800d20c <stdio_exit_handler+0x10>)
 800d200:	4903      	ldr	r1, [pc, #12]	; (800d210 <stdio_exit_handler+0x14>)
 800d202:	4804      	ldr	r0, [pc, #16]	; (800d214 <stdio_exit_handler+0x18>)
 800d204:	f000 f86c 	bl	800d2e0 <_fwalk_sglue>
 800d208:	bd10      	pop	{r4, pc}
 800d20a:	46c0      	nop			; (mov r8, r8)
 800d20c:	20000030 	.word	0x20000030
 800d210:	0800f9f9 	.word	0x0800f9f9
 800d214:	200001a8 	.word	0x200001a8

0800d218 <cleanup_stdio>:
 800d218:	6841      	ldr	r1, [r0, #4]
 800d21a:	4b0b      	ldr	r3, [pc, #44]	; (800d248 <cleanup_stdio+0x30>)
 800d21c:	b510      	push	{r4, lr}
 800d21e:	0004      	movs	r4, r0
 800d220:	4299      	cmp	r1, r3
 800d222:	d001      	beq.n	800d228 <cleanup_stdio+0x10>
 800d224:	f002 fbe8 	bl	800f9f8 <_fflush_r>
 800d228:	68a1      	ldr	r1, [r4, #8]
 800d22a:	4b08      	ldr	r3, [pc, #32]	; (800d24c <cleanup_stdio+0x34>)
 800d22c:	4299      	cmp	r1, r3
 800d22e:	d002      	beq.n	800d236 <cleanup_stdio+0x1e>
 800d230:	0020      	movs	r0, r4
 800d232:	f002 fbe1 	bl	800f9f8 <_fflush_r>
 800d236:	68e1      	ldr	r1, [r4, #12]
 800d238:	4b05      	ldr	r3, [pc, #20]	; (800d250 <cleanup_stdio+0x38>)
 800d23a:	4299      	cmp	r1, r3
 800d23c:	d002      	beq.n	800d244 <cleanup_stdio+0x2c>
 800d23e:	0020      	movs	r0, r4
 800d240:	f002 fbda 	bl	800f9f8 <_fflush_r>
 800d244:	bd10      	pop	{r4, pc}
 800d246:	46c0      	nop			; (mov r8, r8)
 800d248:	2000602c 	.word	0x2000602c
 800d24c:	20006094 	.word	0x20006094
 800d250:	200060fc 	.word	0x200060fc

0800d254 <global_stdio_init.part.0>:
 800d254:	b510      	push	{r4, lr}
 800d256:	4b09      	ldr	r3, [pc, #36]	; (800d27c <global_stdio_init.part.0+0x28>)
 800d258:	4a09      	ldr	r2, [pc, #36]	; (800d280 <global_stdio_init.part.0+0x2c>)
 800d25a:	2104      	movs	r1, #4
 800d25c:	601a      	str	r2, [r3, #0]
 800d25e:	4809      	ldr	r0, [pc, #36]	; (800d284 <global_stdio_init.part.0+0x30>)
 800d260:	2200      	movs	r2, #0
 800d262:	f7ff ff95 	bl	800d190 <std>
 800d266:	2201      	movs	r2, #1
 800d268:	2109      	movs	r1, #9
 800d26a:	4807      	ldr	r0, [pc, #28]	; (800d288 <global_stdio_init.part.0+0x34>)
 800d26c:	f7ff ff90 	bl	800d190 <std>
 800d270:	2202      	movs	r2, #2
 800d272:	2112      	movs	r1, #18
 800d274:	4805      	ldr	r0, [pc, #20]	; (800d28c <global_stdio_init.part.0+0x38>)
 800d276:	f7ff ff8b 	bl	800d190 <std>
 800d27a:	bd10      	pop	{r4, pc}
 800d27c:	20006164 	.word	0x20006164
 800d280:	0800d1fd 	.word	0x0800d1fd
 800d284:	2000602c 	.word	0x2000602c
 800d288:	20006094 	.word	0x20006094
 800d28c:	200060fc 	.word	0x200060fc

0800d290 <__sfp_lock_acquire>:
 800d290:	b510      	push	{r4, lr}
 800d292:	4802      	ldr	r0, [pc, #8]	; (800d29c <__sfp_lock_acquire+0xc>)
 800d294:	f000 fa5f 	bl	800d756 <__retarget_lock_acquire_recursive>
 800d298:	bd10      	pop	{r4, pc}
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	2000616d 	.word	0x2000616d

0800d2a0 <__sfp_lock_release>:
 800d2a0:	b510      	push	{r4, lr}
 800d2a2:	4802      	ldr	r0, [pc, #8]	; (800d2ac <__sfp_lock_release+0xc>)
 800d2a4:	f000 fa58 	bl	800d758 <__retarget_lock_release_recursive>
 800d2a8:	bd10      	pop	{r4, pc}
 800d2aa:	46c0      	nop			; (mov r8, r8)
 800d2ac:	2000616d 	.word	0x2000616d

0800d2b0 <__sinit>:
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	0004      	movs	r4, r0
 800d2b4:	f7ff ffec 	bl	800d290 <__sfp_lock_acquire>
 800d2b8:	6a23      	ldr	r3, [r4, #32]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d002      	beq.n	800d2c4 <__sinit+0x14>
 800d2be:	f7ff ffef 	bl	800d2a0 <__sfp_lock_release>
 800d2c2:	bd10      	pop	{r4, pc}
 800d2c4:	4b04      	ldr	r3, [pc, #16]	; (800d2d8 <__sinit+0x28>)
 800d2c6:	6223      	str	r3, [r4, #32]
 800d2c8:	4b04      	ldr	r3, [pc, #16]	; (800d2dc <__sinit+0x2c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1f6      	bne.n	800d2be <__sinit+0xe>
 800d2d0:	f7ff ffc0 	bl	800d254 <global_stdio_init.part.0>
 800d2d4:	e7f3      	b.n	800d2be <__sinit+0xe>
 800d2d6:	46c0      	nop			; (mov r8, r8)
 800d2d8:	0800d219 	.word	0x0800d219
 800d2dc:	20006164 	.word	0x20006164

0800d2e0 <_fwalk_sglue>:
 800d2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2e2:	0014      	movs	r4, r2
 800d2e4:	2600      	movs	r6, #0
 800d2e6:	9000      	str	r0, [sp, #0]
 800d2e8:	9101      	str	r1, [sp, #4]
 800d2ea:	68a5      	ldr	r5, [r4, #8]
 800d2ec:	6867      	ldr	r7, [r4, #4]
 800d2ee:	3f01      	subs	r7, #1
 800d2f0:	d504      	bpl.n	800d2fc <_fwalk_sglue+0x1c>
 800d2f2:	6824      	ldr	r4, [r4, #0]
 800d2f4:	2c00      	cmp	r4, #0
 800d2f6:	d1f8      	bne.n	800d2ea <_fwalk_sglue+0xa>
 800d2f8:	0030      	movs	r0, r6
 800d2fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2fc:	89ab      	ldrh	r3, [r5, #12]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d908      	bls.n	800d314 <_fwalk_sglue+0x34>
 800d302:	220e      	movs	r2, #14
 800d304:	5eab      	ldrsh	r3, [r5, r2]
 800d306:	3301      	adds	r3, #1
 800d308:	d004      	beq.n	800d314 <_fwalk_sglue+0x34>
 800d30a:	0029      	movs	r1, r5
 800d30c:	9800      	ldr	r0, [sp, #0]
 800d30e:	9b01      	ldr	r3, [sp, #4]
 800d310:	4798      	blx	r3
 800d312:	4306      	orrs	r6, r0
 800d314:	3568      	adds	r5, #104	; 0x68
 800d316:	e7ea      	b.n	800d2ee <_fwalk_sglue+0xe>

0800d318 <siprintf>:
 800d318:	b40e      	push	{r1, r2, r3}
 800d31a:	b500      	push	{lr}
 800d31c:	490b      	ldr	r1, [pc, #44]	; (800d34c <siprintf+0x34>)
 800d31e:	b09c      	sub	sp, #112	; 0x70
 800d320:	ab1d      	add	r3, sp, #116	; 0x74
 800d322:	9002      	str	r0, [sp, #8]
 800d324:	9006      	str	r0, [sp, #24]
 800d326:	9107      	str	r1, [sp, #28]
 800d328:	9104      	str	r1, [sp, #16]
 800d32a:	4809      	ldr	r0, [pc, #36]	; (800d350 <siprintf+0x38>)
 800d32c:	4909      	ldr	r1, [pc, #36]	; (800d354 <siprintf+0x3c>)
 800d32e:	cb04      	ldmia	r3!, {r2}
 800d330:	9105      	str	r1, [sp, #20]
 800d332:	6800      	ldr	r0, [r0, #0]
 800d334:	a902      	add	r1, sp, #8
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	f002 f9d4 	bl	800f6e4 <_svfiprintf_r>
 800d33c:	2200      	movs	r2, #0
 800d33e:	9b02      	ldr	r3, [sp, #8]
 800d340:	701a      	strb	r2, [r3, #0]
 800d342:	b01c      	add	sp, #112	; 0x70
 800d344:	bc08      	pop	{r3}
 800d346:	b003      	add	sp, #12
 800d348:	4718      	bx	r3
 800d34a:	46c0      	nop			; (mov r8, r8)
 800d34c:	7fffffff 	.word	0x7fffffff
 800d350:	200001f4 	.word	0x200001f4
 800d354:	ffff0208 	.word	0xffff0208

0800d358 <__sread>:
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	000c      	movs	r4, r1
 800d35c:	250e      	movs	r5, #14
 800d35e:	5f49      	ldrsh	r1, [r1, r5]
 800d360:	f000 f994 	bl	800d68c <_read_r>
 800d364:	2800      	cmp	r0, #0
 800d366:	db03      	blt.n	800d370 <__sread+0x18>
 800d368:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d36a:	181b      	adds	r3, r3, r0
 800d36c:	6563      	str	r3, [r4, #84]	; 0x54
 800d36e:	bd70      	pop	{r4, r5, r6, pc}
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	4a02      	ldr	r2, [pc, #8]	; (800d37c <__sread+0x24>)
 800d374:	4013      	ands	r3, r2
 800d376:	81a3      	strh	r3, [r4, #12]
 800d378:	e7f9      	b.n	800d36e <__sread+0x16>
 800d37a:	46c0      	nop			; (mov r8, r8)
 800d37c:	ffffefff 	.word	0xffffefff

0800d380 <__swrite>:
 800d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d382:	001f      	movs	r7, r3
 800d384:	898b      	ldrh	r3, [r1, #12]
 800d386:	0005      	movs	r5, r0
 800d388:	000c      	movs	r4, r1
 800d38a:	0016      	movs	r6, r2
 800d38c:	05db      	lsls	r3, r3, #23
 800d38e:	d505      	bpl.n	800d39c <__swrite+0x1c>
 800d390:	230e      	movs	r3, #14
 800d392:	5ec9      	ldrsh	r1, [r1, r3]
 800d394:	2200      	movs	r2, #0
 800d396:	2302      	movs	r3, #2
 800d398:	f000 f964 	bl	800d664 <_lseek_r>
 800d39c:	89a3      	ldrh	r3, [r4, #12]
 800d39e:	4a05      	ldr	r2, [pc, #20]	; (800d3b4 <__swrite+0x34>)
 800d3a0:	0028      	movs	r0, r5
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	0032      	movs	r2, r6
 800d3a8:	230e      	movs	r3, #14
 800d3aa:	5ee1      	ldrsh	r1, [r4, r3]
 800d3ac:	003b      	movs	r3, r7
 800d3ae:	f000 f993 	bl	800d6d8 <_write_r>
 800d3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3b4:	ffffefff 	.word	0xffffefff

0800d3b8 <__sseek>:
 800d3b8:	b570      	push	{r4, r5, r6, lr}
 800d3ba:	000c      	movs	r4, r1
 800d3bc:	250e      	movs	r5, #14
 800d3be:	5f49      	ldrsh	r1, [r1, r5]
 800d3c0:	f000 f950 	bl	800d664 <_lseek_r>
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	1c42      	adds	r2, r0, #1
 800d3c8:	d103      	bne.n	800d3d2 <__sseek+0x1a>
 800d3ca:	4a05      	ldr	r2, [pc, #20]	; (800d3e0 <__sseek+0x28>)
 800d3cc:	4013      	ands	r3, r2
 800d3ce:	81a3      	strh	r3, [r4, #12]
 800d3d0:	bd70      	pop	{r4, r5, r6, pc}
 800d3d2:	2280      	movs	r2, #128	; 0x80
 800d3d4:	0152      	lsls	r2, r2, #5
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	81a3      	strh	r3, [r4, #12]
 800d3da:	6560      	str	r0, [r4, #84]	; 0x54
 800d3dc:	e7f8      	b.n	800d3d0 <__sseek+0x18>
 800d3de:	46c0      	nop			; (mov r8, r8)
 800d3e0:	ffffefff 	.word	0xffffefff

0800d3e4 <__sclose>:
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	230e      	movs	r3, #14
 800d3e8:	5ec9      	ldrsh	r1, [r1, r3]
 800d3ea:	f000 f8cb 	bl	800d584 <_close_r>
 800d3ee:	bd10      	pop	{r4, pc}

0800d3f0 <memset>:
 800d3f0:	0003      	movs	r3, r0
 800d3f2:	1882      	adds	r2, r0, r2
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d100      	bne.n	800d3fa <memset+0xa>
 800d3f8:	4770      	bx	lr
 800d3fa:	7019      	strb	r1, [r3, #0]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	e7f9      	b.n	800d3f4 <memset+0x4>

0800d400 <strcat>:
 800d400:	0002      	movs	r2, r0
 800d402:	b510      	push	{r4, lr}
 800d404:	7813      	ldrb	r3, [r2, #0]
 800d406:	0014      	movs	r4, r2
 800d408:	3201      	adds	r2, #1
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1fa      	bne.n	800d404 <strcat+0x4>
 800d40e:	5cca      	ldrb	r2, [r1, r3]
 800d410:	54e2      	strb	r2, [r4, r3]
 800d412:	3301      	adds	r3, #1
 800d414:	2a00      	cmp	r2, #0
 800d416:	d1fa      	bne.n	800d40e <strcat+0xe>
 800d418:	bd10      	pop	{r4, pc}

0800d41a <strchr>:
 800d41a:	b2c9      	uxtb	r1, r1
 800d41c:	7803      	ldrb	r3, [r0, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d004      	beq.n	800d42c <strchr+0x12>
 800d422:	428b      	cmp	r3, r1
 800d424:	d100      	bne.n	800d428 <strchr+0xe>
 800d426:	4770      	bx	lr
 800d428:	3001      	adds	r0, #1
 800d42a:	e7f7      	b.n	800d41c <strchr+0x2>
 800d42c:	424b      	negs	r3, r1
 800d42e:	4159      	adcs	r1, r3
 800d430:	4249      	negs	r1, r1
 800d432:	4008      	ands	r0, r1
 800d434:	e7f7      	b.n	800d426 <strchr+0xc>

0800d436 <strncmp>:
 800d436:	b530      	push	{r4, r5, lr}
 800d438:	0005      	movs	r5, r0
 800d43a:	1e10      	subs	r0, r2, #0
 800d43c:	d00b      	beq.n	800d456 <strncmp+0x20>
 800d43e:	2400      	movs	r4, #0
 800d440:	3a01      	subs	r2, #1
 800d442:	5d2b      	ldrb	r3, [r5, r4]
 800d444:	5d08      	ldrb	r0, [r1, r4]
 800d446:	4283      	cmp	r3, r0
 800d448:	d104      	bne.n	800d454 <strncmp+0x1e>
 800d44a:	42a2      	cmp	r2, r4
 800d44c:	d002      	beq.n	800d454 <strncmp+0x1e>
 800d44e:	3401      	adds	r4, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1f6      	bne.n	800d442 <strncmp+0xc>
 800d454:	1a18      	subs	r0, r3, r0
 800d456:	bd30      	pop	{r4, r5, pc}

0800d458 <strncpy>:
 800d458:	0003      	movs	r3, r0
 800d45a:	b530      	push	{r4, r5, lr}
 800d45c:	001d      	movs	r5, r3
 800d45e:	2a00      	cmp	r2, #0
 800d460:	d006      	beq.n	800d470 <strncpy+0x18>
 800d462:	780c      	ldrb	r4, [r1, #0]
 800d464:	3a01      	subs	r2, #1
 800d466:	3301      	adds	r3, #1
 800d468:	702c      	strb	r4, [r5, #0]
 800d46a:	3101      	adds	r1, #1
 800d46c:	2c00      	cmp	r4, #0
 800d46e:	d1f5      	bne.n	800d45c <strncpy+0x4>
 800d470:	2100      	movs	r1, #0
 800d472:	189a      	adds	r2, r3, r2
 800d474:	4293      	cmp	r3, r2
 800d476:	d100      	bne.n	800d47a <strncpy+0x22>
 800d478:	bd30      	pop	{r4, r5, pc}
 800d47a:	7019      	strb	r1, [r3, #0]
 800d47c:	3301      	adds	r3, #1
 800d47e:	e7f9      	b.n	800d474 <strncpy+0x1c>

0800d480 <strtok>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	4b16      	ldr	r3, [pc, #88]	; (800d4dc <strtok+0x5c>)
 800d484:	0005      	movs	r5, r0
 800d486:	681f      	ldr	r7, [r3, #0]
 800d488:	000e      	movs	r6, r1
 800d48a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800d48c:	2c00      	cmp	r4, #0
 800d48e:	d11d      	bne.n	800d4cc <strtok+0x4c>
 800d490:	2050      	movs	r0, #80	; 0x50
 800d492:	f7fe f879 	bl	800b588 <malloc>
 800d496:	1e02      	subs	r2, r0, #0
 800d498:	6478      	str	r0, [r7, #68]	; 0x44
 800d49a:	d104      	bne.n	800d4a6 <strtok+0x26>
 800d49c:	215b      	movs	r1, #91	; 0x5b
 800d49e:	4b10      	ldr	r3, [pc, #64]	; (800d4e0 <strtok+0x60>)
 800d4a0:	4810      	ldr	r0, [pc, #64]	; (800d4e4 <strtok+0x64>)
 800d4a2:	f000 f981 	bl	800d7a8 <__assert_func>
 800d4a6:	6004      	str	r4, [r0, #0]
 800d4a8:	6044      	str	r4, [r0, #4]
 800d4aa:	6084      	str	r4, [r0, #8]
 800d4ac:	60c4      	str	r4, [r0, #12]
 800d4ae:	6104      	str	r4, [r0, #16]
 800d4b0:	6144      	str	r4, [r0, #20]
 800d4b2:	6184      	str	r4, [r0, #24]
 800d4b4:	6284      	str	r4, [r0, #40]	; 0x28
 800d4b6:	62c4      	str	r4, [r0, #44]	; 0x2c
 800d4b8:	6304      	str	r4, [r0, #48]	; 0x30
 800d4ba:	6344      	str	r4, [r0, #52]	; 0x34
 800d4bc:	6384      	str	r4, [r0, #56]	; 0x38
 800d4be:	63c4      	str	r4, [r0, #60]	; 0x3c
 800d4c0:	6404      	str	r4, [r0, #64]	; 0x40
 800d4c2:	6444      	str	r4, [r0, #68]	; 0x44
 800d4c4:	6484      	str	r4, [r0, #72]	; 0x48
 800d4c6:	64c4      	str	r4, [r0, #76]	; 0x4c
 800d4c8:	7704      	strb	r4, [r0, #28]
 800d4ca:	6244      	str	r4, [r0, #36]	; 0x24
 800d4cc:	0031      	movs	r1, r6
 800d4ce:	0028      	movs	r0, r5
 800d4d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	f000 f808 	bl	800d4e8 <__strtok_r>
 800d4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4da:	46c0      	nop			; (mov r8, r8)
 800d4dc:	200001f4 	.word	0x200001f4
 800d4e0:	0801218a 	.word	0x0801218a
 800d4e4:	080121a1 	.word	0x080121a1

0800d4e8 <__strtok_r>:
 800d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d102      	bne.n	800d4f4 <__strtok_r+0xc>
 800d4ee:	6810      	ldr	r0, [r2, #0]
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d013      	beq.n	800d51c <__strtok_r+0x34>
 800d4f4:	0004      	movs	r4, r0
 800d4f6:	0020      	movs	r0, r4
 800d4f8:	000e      	movs	r6, r1
 800d4fa:	7805      	ldrb	r5, [r0, #0]
 800d4fc:	3401      	adds	r4, #1
 800d4fe:	7837      	ldrb	r7, [r6, #0]
 800d500:	2f00      	cmp	r7, #0
 800d502:	d104      	bne.n	800d50e <__strtok_r+0x26>
 800d504:	2d00      	cmp	r5, #0
 800d506:	d10f      	bne.n	800d528 <__strtok_r+0x40>
 800d508:	0028      	movs	r0, r5
 800d50a:	6015      	str	r5, [r2, #0]
 800d50c:	e006      	b.n	800d51c <__strtok_r+0x34>
 800d50e:	3601      	adds	r6, #1
 800d510:	42bd      	cmp	r5, r7
 800d512:	d1f4      	bne.n	800d4fe <__strtok_r+0x16>
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1ee      	bne.n	800d4f6 <__strtok_r+0xe>
 800d518:	6014      	str	r4, [r2, #0]
 800d51a:	7003      	strb	r3, [r0, #0]
 800d51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d51e:	002f      	movs	r7, r5
 800d520:	e00f      	b.n	800d542 <__strtok_r+0x5a>
 800d522:	3301      	adds	r3, #1
 800d524:	2e00      	cmp	r6, #0
 800d526:	d104      	bne.n	800d532 <__strtok_r+0x4a>
 800d528:	0023      	movs	r3, r4
 800d52a:	3401      	adds	r4, #1
 800d52c:	781d      	ldrb	r5, [r3, #0]
 800d52e:	0027      	movs	r7, r4
 800d530:	000b      	movs	r3, r1
 800d532:	781e      	ldrb	r6, [r3, #0]
 800d534:	42b5      	cmp	r5, r6
 800d536:	d1f4      	bne.n	800d522 <__strtok_r+0x3a>
 800d538:	2d00      	cmp	r5, #0
 800d53a:	d0f0      	beq.n	800d51e <__strtok_r+0x36>
 800d53c:	2300      	movs	r3, #0
 800d53e:	3c01      	subs	r4, #1
 800d540:	7023      	strb	r3, [r4, #0]
 800d542:	6017      	str	r7, [r2, #0]
 800d544:	e7ea      	b.n	800d51c <__strtok_r+0x34>

0800d546 <strtok_r>:
 800d546:	b510      	push	{r4, lr}
 800d548:	2301      	movs	r3, #1
 800d54a:	f7ff ffcd 	bl	800d4e8 <__strtok_r>
 800d54e:	bd10      	pop	{r4, pc}

0800d550 <strstr>:
 800d550:	780a      	ldrb	r2, [r1, #0]
 800d552:	b530      	push	{r4, r5, lr}
 800d554:	2a00      	cmp	r2, #0
 800d556:	d10c      	bne.n	800d572 <strstr+0x22>
 800d558:	bd30      	pop	{r4, r5, pc}
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d108      	bne.n	800d570 <strstr+0x20>
 800d55e:	2301      	movs	r3, #1
 800d560:	5ccc      	ldrb	r4, [r1, r3]
 800d562:	2c00      	cmp	r4, #0
 800d564:	d0f8      	beq.n	800d558 <strstr+0x8>
 800d566:	5cc5      	ldrb	r5, [r0, r3]
 800d568:	42a5      	cmp	r5, r4
 800d56a:	d101      	bne.n	800d570 <strstr+0x20>
 800d56c:	3301      	adds	r3, #1
 800d56e:	e7f7      	b.n	800d560 <strstr+0x10>
 800d570:	3001      	adds	r0, #1
 800d572:	7803      	ldrb	r3, [r0, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1f0      	bne.n	800d55a <strstr+0xa>
 800d578:	0018      	movs	r0, r3
 800d57a:	e7ed      	b.n	800d558 <strstr+0x8>

0800d57c <_localeconv_r>:
 800d57c:	4800      	ldr	r0, [pc, #0]	; (800d580 <_localeconv_r+0x4>)
 800d57e:	4770      	bx	lr
 800d580:	2000012c 	.word	0x2000012c

0800d584 <_close_r>:
 800d584:	2300      	movs	r3, #0
 800d586:	b570      	push	{r4, r5, r6, lr}
 800d588:	4d06      	ldr	r5, [pc, #24]	; (800d5a4 <_close_r+0x20>)
 800d58a:	0004      	movs	r4, r0
 800d58c:	0008      	movs	r0, r1
 800d58e:	602b      	str	r3, [r5, #0]
 800d590:	f7f8 fe56 	bl	8006240 <_close>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d103      	bne.n	800d5a0 <_close_r+0x1c>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d000      	beq.n	800d5a0 <_close_r+0x1c>
 800d59e:	6023      	str	r3, [r4, #0]
 800d5a0:	bd70      	pop	{r4, r5, r6, pc}
 800d5a2:	46c0      	nop			; (mov r8, r8)
 800d5a4:	20006168 	.word	0x20006168

0800d5a8 <_reclaim_reent>:
 800d5a8:	4b2d      	ldr	r3, [pc, #180]	; (800d660 <_reclaim_reent+0xb8>)
 800d5aa:	b570      	push	{r4, r5, r6, lr}
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	0004      	movs	r4, r0
 800d5b0:	4283      	cmp	r3, r0
 800d5b2:	d042      	beq.n	800d63a <_reclaim_reent+0x92>
 800d5b4:	69c3      	ldr	r3, [r0, #28]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <_reclaim_reent+0x28>
 800d5ba:	2500      	movs	r5, #0
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	42ab      	cmp	r3, r5
 800d5c0:	d140      	bne.n	800d644 <_reclaim_reent+0x9c>
 800d5c2:	69e3      	ldr	r3, [r4, #28]
 800d5c4:	6819      	ldr	r1, [r3, #0]
 800d5c6:	2900      	cmp	r1, #0
 800d5c8:	d002      	beq.n	800d5d0 <_reclaim_reent+0x28>
 800d5ca:	0020      	movs	r0, r4
 800d5cc:	f000 ffa8 	bl	800e520 <_free_r>
 800d5d0:	6961      	ldr	r1, [r4, #20]
 800d5d2:	2900      	cmp	r1, #0
 800d5d4:	d002      	beq.n	800d5dc <_reclaim_reent+0x34>
 800d5d6:	0020      	movs	r0, r4
 800d5d8:	f000 ffa2 	bl	800e520 <_free_r>
 800d5dc:	69e1      	ldr	r1, [r4, #28]
 800d5de:	2900      	cmp	r1, #0
 800d5e0:	d002      	beq.n	800d5e8 <_reclaim_reent+0x40>
 800d5e2:	0020      	movs	r0, r4
 800d5e4:	f000 ff9c 	bl	800e520 <_free_r>
 800d5e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d5ea:	2900      	cmp	r1, #0
 800d5ec:	d002      	beq.n	800d5f4 <_reclaim_reent+0x4c>
 800d5ee:	0020      	movs	r0, r4
 800d5f0:	f000 ff96 	bl	800e520 <_free_r>
 800d5f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5f6:	2900      	cmp	r1, #0
 800d5f8:	d002      	beq.n	800d600 <_reclaim_reent+0x58>
 800d5fa:	0020      	movs	r0, r4
 800d5fc:	f000 ff90 	bl	800e520 <_free_r>
 800d600:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d602:	2900      	cmp	r1, #0
 800d604:	d002      	beq.n	800d60c <_reclaim_reent+0x64>
 800d606:	0020      	movs	r0, r4
 800d608:	f000 ff8a 	bl	800e520 <_free_r>
 800d60c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d60e:	2900      	cmp	r1, #0
 800d610:	d002      	beq.n	800d618 <_reclaim_reent+0x70>
 800d612:	0020      	movs	r0, r4
 800d614:	f000 ff84 	bl	800e520 <_free_r>
 800d618:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d61a:	2900      	cmp	r1, #0
 800d61c:	d002      	beq.n	800d624 <_reclaim_reent+0x7c>
 800d61e:	0020      	movs	r0, r4
 800d620:	f000 ff7e 	bl	800e520 <_free_r>
 800d624:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d626:	2900      	cmp	r1, #0
 800d628:	d002      	beq.n	800d630 <_reclaim_reent+0x88>
 800d62a:	0020      	movs	r0, r4
 800d62c:	f000 ff78 	bl	800e520 <_free_r>
 800d630:	6a23      	ldr	r3, [r4, #32]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d001      	beq.n	800d63a <_reclaim_reent+0x92>
 800d636:	0020      	movs	r0, r4
 800d638:	4798      	blx	r3
 800d63a:	bd70      	pop	{r4, r5, r6, pc}
 800d63c:	5949      	ldr	r1, [r1, r5]
 800d63e:	2900      	cmp	r1, #0
 800d640:	d108      	bne.n	800d654 <_reclaim_reent+0xac>
 800d642:	3504      	adds	r5, #4
 800d644:	69e3      	ldr	r3, [r4, #28]
 800d646:	68d9      	ldr	r1, [r3, #12]
 800d648:	2d80      	cmp	r5, #128	; 0x80
 800d64a:	d1f7      	bne.n	800d63c <_reclaim_reent+0x94>
 800d64c:	0020      	movs	r0, r4
 800d64e:	f000 ff67 	bl	800e520 <_free_r>
 800d652:	e7b6      	b.n	800d5c2 <_reclaim_reent+0x1a>
 800d654:	680e      	ldr	r6, [r1, #0]
 800d656:	0020      	movs	r0, r4
 800d658:	f000 ff62 	bl	800e520 <_free_r>
 800d65c:	0031      	movs	r1, r6
 800d65e:	e7ee      	b.n	800d63e <_reclaim_reent+0x96>
 800d660:	200001f4 	.word	0x200001f4

0800d664 <_lseek_r>:
 800d664:	b570      	push	{r4, r5, r6, lr}
 800d666:	0004      	movs	r4, r0
 800d668:	0008      	movs	r0, r1
 800d66a:	0011      	movs	r1, r2
 800d66c:	001a      	movs	r2, r3
 800d66e:	2300      	movs	r3, #0
 800d670:	4d05      	ldr	r5, [pc, #20]	; (800d688 <_lseek_r+0x24>)
 800d672:	602b      	str	r3, [r5, #0]
 800d674:	f7f8 fdee 	bl	8006254 <_lseek>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	d103      	bne.n	800d684 <_lseek_r+0x20>
 800d67c:	682b      	ldr	r3, [r5, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d000      	beq.n	800d684 <_lseek_r+0x20>
 800d682:	6023      	str	r3, [r4, #0]
 800d684:	bd70      	pop	{r4, r5, r6, pc}
 800d686:	46c0      	nop			; (mov r8, r8)
 800d688:	20006168 	.word	0x20006168

0800d68c <_read_r>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	0004      	movs	r4, r0
 800d690:	0008      	movs	r0, r1
 800d692:	0011      	movs	r1, r2
 800d694:	001a      	movs	r2, r3
 800d696:	2300      	movs	r3, #0
 800d698:	4d05      	ldr	r5, [pc, #20]	; (800d6b0 <_read_r+0x24>)
 800d69a:	602b      	str	r3, [r5, #0]
 800d69c:	f7f8 fdb6 	bl	800620c <_read>
 800d6a0:	1c43      	adds	r3, r0, #1
 800d6a2:	d103      	bne.n	800d6ac <_read_r+0x20>
 800d6a4:	682b      	ldr	r3, [r5, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d000      	beq.n	800d6ac <_read_r+0x20>
 800d6aa:	6023      	str	r3, [r4, #0]
 800d6ac:	bd70      	pop	{r4, r5, r6, pc}
 800d6ae:	46c0      	nop			; (mov r8, r8)
 800d6b0:	20006168 	.word	0x20006168

0800d6b4 <_sbrk_r>:
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	b570      	push	{r4, r5, r6, lr}
 800d6b8:	4d06      	ldr	r5, [pc, #24]	; (800d6d4 <_sbrk_r+0x20>)
 800d6ba:	0004      	movs	r4, r0
 800d6bc:	0008      	movs	r0, r1
 800d6be:	602b      	str	r3, [r5, #0]
 800d6c0:	f7f8 fdca 	bl	8006258 <_sbrk>
 800d6c4:	1c43      	adds	r3, r0, #1
 800d6c6:	d103      	bne.n	800d6d0 <_sbrk_r+0x1c>
 800d6c8:	682b      	ldr	r3, [r5, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d000      	beq.n	800d6d0 <_sbrk_r+0x1c>
 800d6ce:	6023      	str	r3, [r4, #0]
 800d6d0:	bd70      	pop	{r4, r5, r6, pc}
 800d6d2:	46c0      	nop			; (mov r8, r8)
 800d6d4:	20006168 	.word	0x20006168

0800d6d8 <_write_r>:
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	0004      	movs	r4, r0
 800d6dc:	0008      	movs	r0, r1
 800d6de:	0011      	movs	r1, r2
 800d6e0:	001a      	movs	r2, r3
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	4d05      	ldr	r5, [pc, #20]	; (800d6fc <_write_r+0x24>)
 800d6e6:	602b      	str	r3, [r5, #0]
 800d6e8:	f7f8 fd9d 	bl	8006226 <_write>
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	d103      	bne.n	800d6f8 <_write_r+0x20>
 800d6f0:	682b      	ldr	r3, [r5, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d000      	beq.n	800d6f8 <_write_r+0x20>
 800d6f6:	6023      	str	r3, [r4, #0]
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	46c0      	nop			; (mov r8, r8)
 800d6fc:	20006168 	.word	0x20006168

0800d700 <__errno>:
 800d700:	4b01      	ldr	r3, [pc, #4]	; (800d708 <__errno+0x8>)
 800d702:	6818      	ldr	r0, [r3, #0]
 800d704:	4770      	bx	lr
 800d706:	46c0      	nop			; (mov r8, r8)
 800d708:	200001f4 	.word	0x200001f4

0800d70c <__libc_init_array>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	2600      	movs	r6, #0
 800d710:	4c0c      	ldr	r4, [pc, #48]	; (800d744 <__libc_init_array+0x38>)
 800d712:	4d0d      	ldr	r5, [pc, #52]	; (800d748 <__libc_init_array+0x3c>)
 800d714:	1b64      	subs	r4, r4, r5
 800d716:	10a4      	asrs	r4, r4, #2
 800d718:	42a6      	cmp	r6, r4
 800d71a:	d109      	bne.n	800d730 <__libc_init_array+0x24>
 800d71c:	2600      	movs	r6, #0
 800d71e:	f003 fbef 	bl	8010f00 <_init>
 800d722:	4c0a      	ldr	r4, [pc, #40]	; (800d74c <__libc_init_array+0x40>)
 800d724:	4d0a      	ldr	r5, [pc, #40]	; (800d750 <__libc_init_array+0x44>)
 800d726:	1b64      	subs	r4, r4, r5
 800d728:	10a4      	asrs	r4, r4, #2
 800d72a:	42a6      	cmp	r6, r4
 800d72c:	d105      	bne.n	800d73a <__libc_init_array+0x2e>
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	00b3      	lsls	r3, r6, #2
 800d732:	58eb      	ldr	r3, [r5, r3]
 800d734:	4798      	blx	r3
 800d736:	3601      	adds	r6, #1
 800d738:	e7ee      	b.n	800d718 <__libc_init_array+0xc>
 800d73a:	00b3      	lsls	r3, r6, #2
 800d73c:	58eb      	ldr	r3, [r5, r3]
 800d73e:	4798      	blx	r3
 800d740:	3601      	adds	r6, #1
 800d742:	e7f2      	b.n	800d72a <__libc_init_array+0x1e>
 800d744:	080124b0 	.word	0x080124b0
 800d748:	080124b0 	.word	0x080124b0
 800d74c:	080124b4 	.word	0x080124b4
 800d750:	080124b0 	.word	0x080124b0

0800d754 <__retarget_lock_init_recursive>:
 800d754:	4770      	bx	lr

0800d756 <__retarget_lock_acquire_recursive>:
 800d756:	4770      	bx	lr

0800d758 <__retarget_lock_release_recursive>:
 800d758:	4770      	bx	lr

0800d75a <strcpy>:
 800d75a:	0003      	movs	r3, r0
 800d75c:	780a      	ldrb	r2, [r1, #0]
 800d75e:	3101      	adds	r1, #1
 800d760:	701a      	strb	r2, [r3, #0]
 800d762:	3301      	adds	r3, #1
 800d764:	2a00      	cmp	r2, #0
 800d766:	d1f9      	bne.n	800d75c <strcpy+0x2>
 800d768:	4770      	bx	lr

0800d76a <memchr>:
 800d76a:	b2c9      	uxtb	r1, r1
 800d76c:	1882      	adds	r2, r0, r2
 800d76e:	4290      	cmp	r0, r2
 800d770:	d101      	bne.n	800d776 <memchr+0xc>
 800d772:	2000      	movs	r0, #0
 800d774:	4770      	bx	lr
 800d776:	7803      	ldrb	r3, [r0, #0]
 800d778:	428b      	cmp	r3, r1
 800d77a:	d0fb      	beq.n	800d774 <memchr+0xa>
 800d77c:	3001      	adds	r0, #1
 800d77e:	e7f6      	b.n	800d76e <memchr+0x4>

0800d780 <memcpy>:
 800d780:	2300      	movs	r3, #0
 800d782:	b510      	push	{r4, lr}
 800d784:	429a      	cmp	r2, r3
 800d786:	d100      	bne.n	800d78a <memcpy+0xa>
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	5ccc      	ldrb	r4, [r1, r3]
 800d78c:	54c4      	strb	r4, [r0, r3]
 800d78e:	3301      	adds	r3, #1
 800d790:	e7f8      	b.n	800d784 <memcpy+0x4>
	...

0800d794 <nan>:
 800d794:	2000      	movs	r0, #0
 800d796:	4901      	ldr	r1, [pc, #4]	; (800d79c <nan+0x8>)
 800d798:	4770      	bx	lr
 800d79a:	46c0      	nop			; (mov r8, r8)
 800d79c:	7ff80000 	.word	0x7ff80000

0800d7a0 <nanf>:
 800d7a0:	4800      	ldr	r0, [pc, #0]	; (800d7a4 <nanf+0x4>)
 800d7a2:	4770      	bx	lr
 800d7a4:	7fc00000 	.word	0x7fc00000

0800d7a8 <__assert_func>:
 800d7a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d7aa:	0014      	movs	r4, r2
 800d7ac:	001a      	movs	r2, r3
 800d7ae:	4b09      	ldr	r3, [pc, #36]	; (800d7d4 <__assert_func+0x2c>)
 800d7b0:	0005      	movs	r5, r0
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	000e      	movs	r6, r1
 800d7b6:	68d8      	ldr	r0, [r3, #12]
 800d7b8:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <__assert_func+0x30>)
 800d7ba:	2c00      	cmp	r4, #0
 800d7bc:	d101      	bne.n	800d7c2 <__assert_func+0x1a>
 800d7be:	4b07      	ldr	r3, [pc, #28]	; (800d7dc <__assert_func+0x34>)
 800d7c0:	001c      	movs	r4, r3
 800d7c2:	4907      	ldr	r1, [pc, #28]	; (800d7e0 <__assert_func+0x38>)
 800d7c4:	9301      	str	r3, [sp, #4]
 800d7c6:	9402      	str	r4, [sp, #8]
 800d7c8:	002b      	movs	r3, r5
 800d7ca:	9600      	str	r6, [sp, #0]
 800d7cc:	f002 f940 	bl	800fa50 <fiprintf>
 800d7d0:	f002 f961 	bl	800fa96 <abort>
 800d7d4:	200001f4 	.word	0x200001f4
 800d7d8:	08012203 	.word	0x08012203
 800d7dc:	0801223e 	.word	0x0801223e
 800d7e0:	08012210 	.word	0x08012210

0800d7e4 <quorem>:
 800d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e6:	6902      	ldr	r2, [r0, #16]
 800d7e8:	690b      	ldr	r3, [r1, #16]
 800d7ea:	b089      	sub	sp, #36	; 0x24
 800d7ec:	0007      	movs	r7, r0
 800d7ee:	9104      	str	r1, [sp, #16]
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	db69      	blt.n	800d8ca <quorem+0xe6>
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	009c      	lsls	r4, r3, #2
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	000b      	movs	r3, r1
 800d7fe:	3314      	adds	r3, #20
 800d800:	9306      	str	r3, [sp, #24]
 800d802:	191b      	adds	r3, r3, r4
 800d804:	9305      	str	r3, [sp, #20]
 800d806:	003b      	movs	r3, r7
 800d808:	3314      	adds	r3, #20
 800d80a:	9303      	str	r3, [sp, #12]
 800d80c:	191c      	adds	r4, r3, r4
 800d80e:	9b05      	ldr	r3, [sp, #20]
 800d810:	6826      	ldr	r6, [r4, #0]
 800d812:	681d      	ldr	r5, [r3, #0]
 800d814:	0030      	movs	r0, r6
 800d816:	3501      	adds	r5, #1
 800d818:	0029      	movs	r1, r5
 800d81a:	f7f2 fc91 	bl	8000140 <__udivsi3>
 800d81e:	9002      	str	r0, [sp, #8]
 800d820:	42ae      	cmp	r6, r5
 800d822:	d329      	bcc.n	800d878 <quorem+0x94>
 800d824:	9b06      	ldr	r3, [sp, #24]
 800d826:	2600      	movs	r6, #0
 800d828:	469c      	mov	ip, r3
 800d82a:	9d03      	ldr	r5, [sp, #12]
 800d82c:	9606      	str	r6, [sp, #24]
 800d82e:	4662      	mov	r2, ip
 800d830:	ca08      	ldmia	r2!, {r3}
 800d832:	6828      	ldr	r0, [r5, #0]
 800d834:	4694      	mov	ip, r2
 800d836:	9a02      	ldr	r2, [sp, #8]
 800d838:	b299      	uxth	r1, r3
 800d83a:	4351      	muls	r1, r2
 800d83c:	0c1b      	lsrs	r3, r3, #16
 800d83e:	4353      	muls	r3, r2
 800d840:	1989      	adds	r1, r1, r6
 800d842:	0c0a      	lsrs	r2, r1, #16
 800d844:	189b      	adds	r3, r3, r2
 800d846:	9307      	str	r3, [sp, #28]
 800d848:	0c1e      	lsrs	r6, r3, #16
 800d84a:	9b06      	ldr	r3, [sp, #24]
 800d84c:	b282      	uxth	r2, r0
 800d84e:	18d2      	adds	r2, r2, r3
 800d850:	466b      	mov	r3, sp
 800d852:	b289      	uxth	r1, r1
 800d854:	8b9b      	ldrh	r3, [r3, #28]
 800d856:	1a52      	subs	r2, r2, r1
 800d858:	0c01      	lsrs	r1, r0, #16
 800d85a:	1ac9      	subs	r1, r1, r3
 800d85c:	1413      	asrs	r3, r2, #16
 800d85e:	18cb      	adds	r3, r1, r3
 800d860:	1419      	asrs	r1, r3, #16
 800d862:	b292      	uxth	r2, r2
 800d864:	041b      	lsls	r3, r3, #16
 800d866:	4313      	orrs	r3, r2
 800d868:	c508      	stmia	r5!, {r3}
 800d86a:	9b05      	ldr	r3, [sp, #20]
 800d86c:	9106      	str	r1, [sp, #24]
 800d86e:	4563      	cmp	r3, ip
 800d870:	d2dd      	bcs.n	800d82e <quorem+0x4a>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d030      	beq.n	800d8da <quorem+0xf6>
 800d878:	0038      	movs	r0, r7
 800d87a:	9904      	ldr	r1, [sp, #16]
 800d87c:	f001 fcda 	bl	800f234 <__mcmp>
 800d880:	2800      	cmp	r0, #0
 800d882:	db21      	blt.n	800d8c8 <quorem+0xe4>
 800d884:	0038      	movs	r0, r7
 800d886:	2600      	movs	r6, #0
 800d888:	9b02      	ldr	r3, [sp, #8]
 800d88a:	9c04      	ldr	r4, [sp, #16]
 800d88c:	3301      	adds	r3, #1
 800d88e:	9302      	str	r3, [sp, #8]
 800d890:	3014      	adds	r0, #20
 800d892:	3414      	adds	r4, #20
 800d894:	6803      	ldr	r3, [r0, #0]
 800d896:	cc02      	ldmia	r4!, {r1}
 800d898:	b29d      	uxth	r5, r3
 800d89a:	19ad      	adds	r5, r5, r6
 800d89c:	b28a      	uxth	r2, r1
 800d89e:	1aaa      	subs	r2, r5, r2
 800d8a0:	0c09      	lsrs	r1, r1, #16
 800d8a2:	0c1b      	lsrs	r3, r3, #16
 800d8a4:	1a5b      	subs	r3, r3, r1
 800d8a6:	1411      	asrs	r1, r2, #16
 800d8a8:	185b      	adds	r3, r3, r1
 800d8aa:	141e      	asrs	r6, r3, #16
 800d8ac:	b292      	uxth	r2, r2
 800d8ae:	041b      	lsls	r3, r3, #16
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	c008      	stmia	r0!, {r3}
 800d8b4:	9b05      	ldr	r3, [sp, #20]
 800d8b6:	42a3      	cmp	r3, r4
 800d8b8:	d2ec      	bcs.n	800d894 <quorem+0xb0>
 800d8ba:	9b01      	ldr	r3, [sp, #4]
 800d8bc:	9a03      	ldr	r2, [sp, #12]
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	18d3      	adds	r3, r2, r3
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	2a00      	cmp	r2, #0
 800d8c6:	d015      	beq.n	800d8f4 <quorem+0x110>
 800d8c8:	9802      	ldr	r0, [sp, #8]
 800d8ca:	b009      	add	sp, #36	; 0x24
 800d8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d106      	bne.n	800d8e2 <quorem+0xfe>
 800d8d4:	9b01      	ldr	r3, [sp, #4]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	9b03      	ldr	r3, [sp, #12]
 800d8dc:	3c04      	subs	r4, #4
 800d8de:	42a3      	cmp	r3, r4
 800d8e0:	d3f5      	bcc.n	800d8ce <quorem+0xea>
 800d8e2:	9b01      	ldr	r3, [sp, #4]
 800d8e4:	613b      	str	r3, [r7, #16]
 800d8e6:	e7c7      	b.n	800d878 <quorem+0x94>
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	2a00      	cmp	r2, #0
 800d8ec:	d106      	bne.n	800d8fc <quorem+0x118>
 800d8ee:	9a01      	ldr	r2, [sp, #4]
 800d8f0:	3a01      	subs	r2, #1
 800d8f2:	9201      	str	r2, [sp, #4]
 800d8f4:	9a03      	ldr	r2, [sp, #12]
 800d8f6:	3b04      	subs	r3, #4
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d3f5      	bcc.n	800d8e8 <quorem+0x104>
 800d8fc:	9b01      	ldr	r3, [sp, #4]
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	e7e2      	b.n	800d8c8 <quorem+0xe4>
	...

0800d904 <_dtoa_r>:
 800d904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d906:	0014      	movs	r4, r2
 800d908:	001d      	movs	r5, r3
 800d90a:	69c6      	ldr	r6, [r0, #28]
 800d90c:	b09d      	sub	sp, #116	; 0x74
 800d90e:	9408      	str	r4, [sp, #32]
 800d910:	9509      	str	r5, [sp, #36]	; 0x24
 800d912:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800d914:	9004      	str	r0, [sp, #16]
 800d916:	2e00      	cmp	r6, #0
 800d918:	d10f      	bne.n	800d93a <_dtoa_r+0x36>
 800d91a:	2010      	movs	r0, #16
 800d91c:	f7fd fe34 	bl	800b588 <malloc>
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	1e02      	subs	r2, r0, #0
 800d924:	61d8      	str	r0, [r3, #28]
 800d926:	d104      	bne.n	800d932 <_dtoa_r+0x2e>
 800d928:	21ef      	movs	r1, #239	; 0xef
 800d92a:	4bc6      	ldr	r3, [pc, #792]	; (800dc44 <_dtoa_r+0x340>)
 800d92c:	48c6      	ldr	r0, [pc, #792]	; (800dc48 <_dtoa_r+0x344>)
 800d92e:	f7ff ff3b 	bl	800d7a8 <__assert_func>
 800d932:	6046      	str	r6, [r0, #4]
 800d934:	6086      	str	r6, [r0, #8]
 800d936:	6006      	str	r6, [r0, #0]
 800d938:	60c6      	str	r6, [r0, #12]
 800d93a:	9b04      	ldr	r3, [sp, #16]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	6819      	ldr	r1, [r3, #0]
 800d940:	2900      	cmp	r1, #0
 800d942:	d00b      	beq.n	800d95c <_dtoa_r+0x58>
 800d944:	685a      	ldr	r2, [r3, #4]
 800d946:	2301      	movs	r3, #1
 800d948:	4093      	lsls	r3, r2
 800d94a:	604a      	str	r2, [r1, #4]
 800d94c:	608b      	str	r3, [r1, #8]
 800d94e:	9804      	ldr	r0, [sp, #16]
 800d950:	f001 f9e2 	bl	800ed18 <_Bfree>
 800d954:	2200      	movs	r2, #0
 800d956:	9b04      	ldr	r3, [sp, #16]
 800d958:	69db      	ldr	r3, [r3, #28]
 800d95a:	601a      	str	r2, [r3, #0]
 800d95c:	2d00      	cmp	r5, #0
 800d95e:	da1e      	bge.n	800d99e <_dtoa_r+0x9a>
 800d960:	2301      	movs	r3, #1
 800d962:	603b      	str	r3, [r7, #0]
 800d964:	006b      	lsls	r3, r5, #1
 800d966:	085b      	lsrs	r3, r3, #1
 800d968:	9309      	str	r3, [sp, #36]	; 0x24
 800d96a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d96c:	4bb7      	ldr	r3, [pc, #732]	; (800dc4c <_dtoa_r+0x348>)
 800d96e:	4ab7      	ldr	r2, [pc, #732]	; (800dc4c <_dtoa_r+0x348>)
 800d970:	403b      	ands	r3, r7
 800d972:	4293      	cmp	r3, r2
 800d974:	d116      	bne.n	800d9a4 <_dtoa_r+0xa0>
 800d976:	4bb6      	ldr	r3, [pc, #728]	; (800dc50 <_dtoa_r+0x34c>)
 800d978:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	033b      	lsls	r3, r7, #12
 800d97e:	0b1b      	lsrs	r3, r3, #12
 800d980:	4323      	orrs	r3, r4
 800d982:	d101      	bne.n	800d988 <_dtoa_r+0x84>
 800d984:	f000 fdb5 	bl	800e4f2 <_dtoa_r+0xbee>
 800d988:	4bb2      	ldr	r3, [pc, #712]	; (800dc54 <_dtoa_r+0x350>)
 800d98a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d98c:	9306      	str	r3, [sp, #24]
 800d98e:	2a00      	cmp	r2, #0
 800d990:	d002      	beq.n	800d998 <_dtoa_r+0x94>
 800d992:	4bb1      	ldr	r3, [pc, #708]	; (800dc58 <_dtoa_r+0x354>)
 800d994:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d996:	6013      	str	r3, [r2, #0]
 800d998:	9806      	ldr	r0, [sp, #24]
 800d99a:	b01d      	add	sp, #116	; 0x74
 800d99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99e:	2300      	movs	r3, #0
 800d9a0:	603b      	str	r3, [r7, #0]
 800d9a2:	e7e2      	b.n	800d96a <_dtoa_r+0x66>
 800d9a4:	9a08      	ldr	r2, [sp, #32]
 800d9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a8:	9210      	str	r2, [sp, #64]	; 0x40
 800d9aa:	9311      	str	r3, [sp, #68]	; 0x44
 800d9ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	f7f2 fd4a 	bl	800044c <__aeabi_dcmpeq>
 800d9b8:	1e06      	subs	r6, r0, #0
 800d9ba:	d009      	beq.n	800d9d0 <_dtoa_r+0xcc>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	4ba6      	ldr	r3, [pc, #664]	; (800dc5c <_dtoa_r+0x358>)
 800d9c4:	9306      	str	r3, [sp, #24]
 800d9c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0e5      	beq.n	800d998 <_dtoa_r+0x94>
 800d9cc:	4ba4      	ldr	r3, [pc, #656]	; (800dc60 <_dtoa_r+0x35c>)
 800d9ce:	e7e1      	b.n	800d994 <_dtoa_r+0x90>
 800d9d0:	ab1a      	add	r3, sp, #104	; 0x68
 800d9d2:	9301      	str	r3, [sp, #4]
 800d9d4:	ab1b      	add	r3, sp, #108	; 0x6c
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	9804      	ldr	r0, [sp, #16]
 800d9da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d9dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9de:	f001 fd45 	bl	800f46c <__d2b>
 800d9e2:	007a      	lsls	r2, r7, #1
 800d9e4:	9005      	str	r0, [sp, #20]
 800d9e6:	0d52      	lsrs	r2, r2, #21
 800d9e8:	d100      	bne.n	800d9ec <_dtoa_r+0xe8>
 800d9ea:	e07b      	b.n	800dae4 <_dtoa_r+0x1e0>
 800d9ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9ee:	9617      	str	r6, [sp, #92]	; 0x5c
 800d9f0:	0319      	lsls	r1, r3, #12
 800d9f2:	4b9c      	ldr	r3, [pc, #624]	; (800dc64 <_dtoa_r+0x360>)
 800d9f4:	0b09      	lsrs	r1, r1, #12
 800d9f6:	430b      	orrs	r3, r1
 800d9f8:	499b      	ldr	r1, [pc, #620]	; (800dc68 <_dtoa_r+0x364>)
 800d9fa:	1857      	adds	r7, r2, r1
 800d9fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800da00:	0019      	movs	r1, r3
 800da02:	2200      	movs	r2, #0
 800da04:	4b99      	ldr	r3, [pc, #612]	; (800dc6c <_dtoa_r+0x368>)
 800da06:	f7f4 ff27 	bl	8002858 <__aeabi_dsub>
 800da0a:	4a99      	ldr	r2, [pc, #612]	; (800dc70 <_dtoa_r+0x36c>)
 800da0c:	4b99      	ldr	r3, [pc, #612]	; (800dc74 <_dtoa_r+0x370>)
 800da0e:	f7f4 fc61 	bl	80022d4 <__aeabi_dmul>
 800da12:	4a99      	ldr	r2, [pc, #612]	; (800dc78 <_dtoa_r+0x374>)
 800da14:	4b99      	ldr	r3, [pc, #612]	; (800dc7c <_dtoa_r+0x378>)
 800da16:	f7f3 fd03 	bl	8001420 <__aeabi_dadd>
 800da1a:	0004      	movs	r4, r0
 800da1c:	0038      	movs	r0, r7
 800da1e:	000d      	movs	r5, r1
 800da20:	f7f5 faf0 	bl	8003004 <__aeabi_i2d>
 800da24:	4a96      	ldr	r2, [pc, #600]	; (800dc80 <_dtoa_r+0x37c>)
 800da26:	4b97      	ldr	r3, [pc, #604]	; (800dc84 <_dtoa_r+0x380>)
 800da28:	f7f4 fc54 	bl	80022d4 <__aeabi_dmul>
 800da2c:	0002      	movs	r2, r0
 800da2e:	000b      	movs	r3, r1
 800da30:	0020      	movs	r0, r4
 800da32:	0029      	movs	r1, r5
 800da34:	f7f3 fcf4 	bl	8001420 <__aeabi_dadd>
 800da38:	0004      	movs	r4, r0
 800da3a:	000d      	movs	r5, r1
 800da3c:	f7f5 faac 	bl	8002f98 <__aeabi_d2iz>
 800da40:	2200      	movs	r2, #0
 800da42:	9003      	str	r0, [sp, #12]
 800da44:	2300      	movs	r3, #0
 800da46:	0020      	movs	r0, r4
 800da48:	0029      	movs	r1, r5
 800da4a:	f7f2 fd05 	bl	8000458 <__aeabi_dcmplt>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d00b      	beq.n	800da6a <_dtoa_r+0x166>
 800da52:	9803      	ldr	r0, [sp, #12]
 800da54:	f7f5 fad6 	bl	8003004 <__aeabi_i2d>
 800da58:	002b      	movs	r3, r5
 800da5a:	0022      	movs	r2, r4
 800da5c:	f7f2 fcf6 	bl	800044c <__aeabi_dcmpeq>
 800da60:	4243      	negs	r3, r0
 800da62:	4158      	adcs	r0, r3
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	1a1b      	subs	r3, r3, r0
 800da68:	9303      	str	r3, [sp, #12]
 800da6a:	2301      	movs	r3, #1
 800da6c:	9316      	str	r3, [sp, #88]	; 0x58
 800da6e:	9b03      	ldr	r3, [sp, #12]
 800da70:	2b16      	cmp	r3, #22
 800da72:	d810      	bhi.n	800da96 <_dtoa_r+0x192>
 800da74:	9810      	ldr	r0, [sp, #64]	; 0x40
 800da76:	9911      	ldr	r1, [sp, #68]	; 0x44
 800da78:	9a03      	ldr	r2, [sp, #12]
 800da7a:	4b83      	ldr	r3, [pc, #524]	; (800dc88 <_dtoa_r+0x384>)
 800da7c:	00d2      	lsls	r2, r2, #3
 800da7e:	189b      	adds	r3, r3, r2
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	f7f2 fce8 	bl	8000458 <__aeabi_dcmplt>
 800da88:	2800      	cmp	r0, #0
 800da8a:	d047      	beq.n	800db1c <_dtoa_r+0x218>
 800da8c:	9b03      	ldr	r3, [sp, #12]
 800da8e:	3b01      	subs	r3, #1
 800da90:	9303      	str	r3, [sp, #12]
 800da92:	2300      	movs	r3, #0
 800da94:	9316      	str	r3, [sp, #88]	; 0x58
 800da96:	2200      	movs	r2, #0
 800da98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800da9a:	920a      	str	r2, [sp, #40]	; 0x28
 800da9c:	1bdb      	subs	r3, r3, r7
 800da9e:	1e5a      	subs	r2, r3, #1
 800daa0:	d53e      	bpl.n	800db20 <_dtoa_r+0x21c>
 800daa2:	2201      	movs	r2, #1
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	930a      	str	r3, [sp, #40]	; 0x28
 800daa8:	2300      	movs	r3, #0
 800daaa:	930c      	str	r3, [sp, #48]	; 0x30
 800daac:	9b03      	ldr	r3, [sp, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	db38      	blt.n	800db24 <_dtoa_r+0x220>
 800dab2:	9a03      	ldr	r2, [sp, #12]
 800dab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dab6:	4694      	mov	ip, r2
 800dab8:	4463      	add	r3, ip
 800daba:	930c      	str	r3, [sp, #48]	; 0x30
 800dabc:	2300      	movs	r3, #0
 800dabe:	9213      	str	r2, [sp, #76]	; 0x4c
 800dac0:	930d      	str	r3, [sp, #52]	; 0x34
 800dac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dac4:	2401      	movs	r4, #1
 800dac6:	2b09      	cmp	r3, #9
 800dac8:	d867      	bhi.n	800db9a <_dtoa_r+0x296>
 800daca:	2b05      	cmp	r3, #5
 800dacc:	dd02      	ble.n	800dad4 <_dtoa_r+0x1d0>
 800dace:	2400      	movs	r4, #0
 800dad0:	3b04      	subs	r3, #4
 800dad2:	9322      	str	r3, [sp, #136]	; 0x88
 800dad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dad6:	1e98      	subs	r0, r3, #2
 800dad8:	2803      	cmp	r0, #3
 800dada:	d867      	bhi.n	800dbac <_dtoa_r+0x2a8>
 800dadc:	f7f2 fb1c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800dae0:	5b383a2b 	.word	0x5b383a2b
 800dae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dae6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800dae8:	18f6      	adds	r6, r6, r3
 800daea:	4b68      	ldr	r3, [pc, #416]	; (800dc8c <_dtoa_r+0x388>)
 800daec:	18f2      	adds	r2, r6, r3
 800daee:	2a20      	cmp	r2, #32
 800daf0:	dd0f      	ble.n	800db12 <_dtoa_r+0x20e>
 800daf2:	2340      	movs	r3, #64	; 0x40
 800daf4:	1a9b      	subs	r3, r3, r2
 800daf6:	409f      	lsls	r7, r3
 800daf8:	4b65      	ldr	r3, [pc, #404]	; (800dc90 <_dtoa_r+0x38c>)
 800dafa:	0038      	movs	r0, r7
 800dafc:	18f3      	adds	r3, r6, r3
 800dafe:	40dc      	lsrs	r4, r3
 800db00:	4320      	orrs	r0, r4
 800db02:	f7f5 faaf 	bl	8003064 <__aeabi_ui2d>
 800db06:	2201      	movs	r2, #1
 800db08:	4b62      	ldr	r3, [pc, #392]	; (800dc94 <_dtoa_r+0x390>)
 800db0a:	1e77      	subs	r7, r6, #1
 800db0c:	18cb      	adds	r3, r1, r3
 800db0e:	9217      	str	r2, [sp, #92]	; 0x5c
 800db10:	e776      	b.n	800da00 <_dtoa_r+0xfc>
 800db12:	2320      	movs	r3, #32
 800db14:	0020      	movs	r0, r4
 800db16:	1a9b      	subs	r3, r3, r2
 800db18:	4098      	lsls	r0, r3
 800db1a:	e7f2      	b.n	800db02 <_dtoa_r+0x1fe>
 800db1c:	9016      	str	r0, [sp, #88]	; 0x58
 800db1e:	e7ba      	b.n	800da96 <_dtoa_r+0x192>
 800db20:	920c      	str	r2, [sp, #48]	; 0x30
 800db22:	e7c3      	b.n	800daac <_dtoa_r+0x1a8>
 800db24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db26:	9a03      	ldr	r2, [sp, #12]
 800db28:	1a9b      	subs	r3, r3, r2
 800db2a:	930a      	str	r3, [sp, #40]	; 0x28
 800db2c:	4253      	negs	r3, r2
 800db2e:	930d      	str	r3, [sp, #52]	; 0x34
 800db30:	2300      	movs	r3, #0
 800db32:	9313      	str	r3, [sp, #76]	; 0x4c
 800db34:	e7c5      	b.n	800dac2 <_dtoa_r+0x1be>
 800db36:	2300      	movs	r3, #0
 800db38:	930f      	str	r3, [sp, #60]	; 0x3c
 800db3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800db3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800db3e:	9307      	str	r3, [sp, #28]
 800db40:	2b00      	cmp	r3, #0
 800db42:	dc13      	bgt.n	800db6c <_dtoa_r+0x268>
 800db44:	2301      	movs	r3, #1
 800db46:	001a      	movs	r2, r3
 800db48:	930b      	str	r3, [sp, #44]	; 0x2c
 800db4a:	9307      	str	r3, [sp, #28]
 800db4c:	9223      	str	r2, [sp, #140]	; 0x8c
 800db4e:	e00d      	b.n	800db6c <_dtoa_r+0x268>
 800db50:	2301      	movs	r3, #1
 800db52:	e7f1      	b.n	800db38 <_dtoa_r+0x234>
 800db54:	2300      	movs	r3, #0
 800db56:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800db58:	930f      	str	r3, [sp, #60]	; 0x3c
 800db5a:	4694      	mov	ip, r2
 800db5c:	9b03      	ldr	r3, [sp, #12]
 800db5e:	4463      	add	r3, ip
 800db60:	930b      	str	r3, [sp, #44]	; 0x2c
 800db62:	3301      	adds	r3, #1
 800db64:	9307      	str	r3, [sp, #28]
 800db66:	2b00      	cmp	r3, #0
 800db68:	dc00      	bgt.n	800db6c <_dtoa_r+0x268>
 800db6a:	2301      	movs	r3, #1
 800db6c:	9a04      	ldr	r2, [sp, #16]
 800db6e:	2100      	movs	r1, #0
 800db70:	69d0      	ldr	r0, [r2, #28]
 800db72:	2204      	movs	r2, #4
 800db74:	0015      	movs	r5, r2
 800db76:	3514      	adds	r5, #20
 800db78:	429d      	cmp	r5, r3
 800db7a:	d91b      	bls.n	800dbb4 <_dtoa_r+0x2b0>
 800db7c:	6041      	str	r1, [r0, #4]
 800db7e:	9804      	ldr	r0, [sp, #16]
 800db80:	f001 f886 	bl	800ec90 <_Balloc>
 800db84:	9006      	str	r0, [sp, #24]
 800db86:	2800      	cmp	r0, #0
 800db88:	d117      	bne.n	800dbba <_dtoa_r+0x2b6>
 800db8a:	21b0      	movs	r1, #176	; 0xb0
 800db8c:	4b42      	ldr	r3, [pc, #264]	; (800dc98 <_dtoa_r+0x394>)
 800db8e:	482e      	ldr	r0, [pc, #184]	; (800dc48 <_dtoa_r+0x344>)
 800db90:	9a06      	ldr	r2, [sp, #24]
 800db92:	31ff      	adds	r1, #255	; 0xff
 800db94:	e6cb      	b.n	800d92e <_dtoa_r+0x2a>
 800db96:	2301      	movs	r3, #1
 800db98:	e7dd      	b.n	800db56 <_dtoa_r+0x252>
 800db9a:	2300      	movs	r3, #0
 800db9c:	940f      	str	r4, [sp, #60]	; 0x3c
 800db9e:	9322      	str	r3, [sp, #136]	; 0x88
 800dba0:	3b01      	subs	r3, #1
 800dba2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dba4:	9307      	str	r3, [sp, #28]
 800dba6:	2200      	movs	r2, #0
 800dba8:	3313      	adds	r3, #19
 800dbaa:	e7cf      	b.n	800db4c <_dtoa_r+0x248>
 800dbac:	2301      	movs	r3, #1
 800dbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb0:	3b02      	subs	r3, #2
 800dbb2:	e7f6      	b.n	800dba2 <_dtoa_r+0x29e>
 800dbb4:	3101      	adds	r1, #1
 800dbb6:	0052      	lsls	r2, r2, #1
 800dbb8:	e7dc      	b.n	800db74 <_dtoa_r+0x270>
 800dbba:	9b04      	ldr	r3, [sp, #16]
 800dbbc:	9a06      	ldr	r2, [sp, #24]
 800dbbe:	69db      	ldr	r3, [r3, #28]
 800dbc0:	601a      	str	r2, [r3, #0]
 800dbc2:	9b07      	ldr	r3, [sp, #28]
 800dbc4:	2b0e      	cmp	r3, #14
 800dbc6:	d900      	bls.n	800dbca <_dtoa_r+0x2c6>
 800dbc8:	e0e5      	b.n	800dd96 <_dtoa_r+0x492>
 800dbca:	2c00      	cmp	r4, #0
 800dbcc:	d100      	bne.n	800dbd0 <_dtoa_r+0x2cc>
 800dbce:	e0e2      	b.n	800dd96 <_dtoa_r+0x492>
 800dbd0:	9b03      	ldr	r3, [sp, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	dd64      	ble.n	800dca0 <_dtoa_r+0x39c>
 800dbd6:	210f      	movs	r1, #15
 800dbd8:	9a03      	ldr	r2, [sp, #12]
 800dbda:	4b2b      	ldr	r3, [pc, #172]	; (800dc88 <_dtoa_r+0x384>)
 800dbdc:	400a      	ands	r2, r1
 800dbde:	00d2      	lsls	r2, r2, #3
 800dbe0:	189b      	adds	r3, r3, r2
 800dbe2:	681e      	ldr	r6, [r3, #0]
 800dbe4:	685f      	ldr	r7, [r3, #4]
 800dbe6:	9b03      	ldr	r3, [sp, #12]
 800dbe8:	2402      	movs	r4, #2
 800dbea:	111d      	asrs	r5, r3, #4
 800dbec:	05db      	lsls	r3, r3, #23
 800dbee:	d50a      	bpl.n	800dc06 <_dtoa_r+0x302>
 800dbf0:	4b2a      	ldr	r3, [pc, #168]	; (800dc9c <_dtoa_r+0x398>)
 800dbf2:	400d      	ands	r5, r1
 800dbf4:	6a1a      	ldr	r2, [r3, #32]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dbfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dbfc:	f7f3 ff70 	bl	8001ae0 <__aeabi_ddiv>
 800dc00:	9008      	str	r0, [sp, #32]
 800dc02:	9109      	str	r1, [sp, #36]	; 0x24
 800dc04:	3401      	adds	r4, #1
 800dc06:	4b25      	ldr	r3, [pc, #148]	; (800dc9c <_dtoa_r+0x398>)
 800dc08:	930e      	str	r3, [sp, #56]	; 0x38
 800dc0a:	2d00      	cmp	r5, #0
 800dc0c:	d108      	bne.n	800dc20 <_dtoa_r+0x31c>
 800dc0e:	9808      	ldr	r0, [sp, #32]
 800dc10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc12:	0032      	movs	r2, r6
 800dc14:	003b      	movs	r3, r7
 800dc16:	f7f3 ff63 	bl	8001ae0 <__aeabi_ddiv>
 800dc1a:	9008      	str	r0, [sp, #32]
 800dc1c:	9109      	str	r1, [sp, #36]	; 0x24
 800dc1e:	e05a      	b.n	800dcd6 <_dtoa_r+0x3d2>
 800dc20:	2301      	movs	r3, #1
 800dc22:	421d      	tst	r5, r3
 800dc24:	d009      	beq.n	800dc3a <_dtoa_r+0x336>
 800dc26:	18e4      	adds	r4, r4, r3
 800dc28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc2a:	0030      	movs	r0, r6
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	0039      	movs	r1, r7
 800dc32:	f7f4 fb4f 	bl	80022d4 <__aeabi_dmul>
 800dc36:	0006      	movs	r6, r0
 800dc38:	000f      	movs	r7, r1
 800dc3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc3c:	106d      	asrs	r5, r5, #1
 800dc3e:	3308      	adds	r3, #8
 800dc40:	e7e2      	b.n	800dc08 <_dtoa_r+0x304>
 800dc42:	46c0      	nop			; (mov r8, r8)
 800dc44:	0801218a 	.word	0x0801218a
 800dc48:	0801224c 	.word	0x0801224c
 800dc4c:	7ff00000 	.word	0x7ff00000
 800dc50:	0000270f 	.word	0x0000270f
 800dc54:	08012248 	.word	0x08012248
 800dc58:	0801224b 	.word	0x0801224b
 800dc5c:	08012161 	.word	0x08012161
 800dc60:	08012162 	.word	0x08012162
 800dc64:	3ff00000 	.word	0x3ff00000
 800dc68:	fffffc01 	.word	0xfffffc01
 800dc6c:	3ff80000 	.word	0x3ff80000
 800dc70:	636f4361 	.word	0x636f4361
 800dc74:	3fd287a7 	.word	0x3fd287a7
 800dc78:	8b60c8b3 	.word	0x8b60c8b3
 800dc7c:	3fc68a28 	.word	0x3fc68a28
 800dc80:	509f79fb 	.word	0x509f79fb
 800dc84:	3fd34413 	.word	0x3fd34413
 800dc88:	08012398 	.word	0x08012398
 800dc8c:	00000432 	.word	0x00000432
 800dc90:	00000412 	.word	0x00000412
 800dc94:	fe100000 	.word	0xfe100000
 800dc98:	080122a4 	.word	0x080122a4
 800dc9c:	08012370 	.word	0x08012370
 800dca0:	9b03      	ldr	r3, [sp, #12]
 800dca2:	2402      	movs	r4, #2
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d016      	beq.n	800dcd6 <_dtoa_r+0x3d2>
 800dca8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dcaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dcac:	220f      	movs	r2, #15
 800dcae:	425d      	negs	r5, r3
 800dcb0:	402a      	ands	r2, r5
 800dcb2:	4bdd      	ldr	r3, [pc, #884]	; (800e028 <_dtoa_r+0x724>)
 800dcb4:	00d2      	lsls	r2, r2, #3
 800dcb6:	189b      	adds	r3, r3, r2
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	f7f4 fb0a 	bl	80022d4 <__aeabi_dmul>
 800dcc0:	2701      	movs	r7, #1
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9008      	str	r0, [sp, #32]
 800dcc6:	9109      	str	r1, [sp, #36]	; 0x24
 800dcc8:	4ed8      	ldr	r6, [pc, #864]	; (800e02c <_dtoa_r+0x728>)
 800dcca:	112d      	asrs	r5, r5, #4
 800dccc:	2d00      	cmp	r5, #0
 800dcce:	d000      	beq.n	800dcd2 <_dtoa_r+0x3ce>
 800dcd0:	e091      	b.n	800ddf6 <_dtoa_r+0x4f2>
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1a1      	bne.n	800dc1a <_dtoa_r+0x316>
 800dcd6:	9e08      	ldr	r6, [sp, #32]
 800dcd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dcda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d100      	bne.n	800dce2 <_dtoa_r+0x3de>
 800dce0:	e094      	b.n	800de0c <_dtoa_r+0x508>
 800dce2:	2200      	movs	r2, #0
 800dce4:	0030      	movs	r0, r6
 800dce6:	0039      	movs	r1, r7
 800dce8:	4bd1      	ldr	r3, [pc, #836]	; (800e030 <_dtoa_r+0x72c>)
 800dcea:	f7f2 fbb5 	bl	8000458 <__aeabi_dcmplt>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d100      	bne.n	800dcf4 <_dtoa_r+0x3f0>
 800dcf2:	e08b      	b.n	800de0c <_dtoa_r+0x508>
 800dcf4:	9b07      	ldr	r3, [sp, #28]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d100      	bne.n	800dcfc <_dtoa_r+0x3f8>
 800dcfa:	e087      	b.n	800de0c <_dtoa_r+0x508>
 800dcfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	dd45      	ble.n	800dd8e <_dtoa_r+0x48a>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	3b01      	subs	r3, #1
 800dd08:	930e      	str	r3, [sp, #56]	; 0x38
 800dd0a:	0030      	movs	r0, r6
 800dd0c:	4bc9      	ldr	r3, [pc, #804]	; (800e034 <_dtoa_r+0x730>)
 800dd0e:	0039      	movs	r1, r7
 800dd10:	f7f4 fae0 	bl	80022d4 <__aeabi_dmul>
 800dd14:	9008      	str	r0, [sp, #32]
 800dd16:	9109      	str	r1, [sp, #36]	; 0x24
 800dd18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd1a:	3401      	adds	r4, #1
 800dd1c:	0020      	movs	r0, r4
 800dd1e:	9e08      	ldr	r6, [sp, #32]
 800dd20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dd22:	9312      	str	r3, [sp, #72]	; 0x48
 800dd24:	f7f5 f96e 	bl	8003004 <__aeabi_i2d>
 800dd28:	0032      	movs	r2, r6
 800dd2a:	003b      	movs	r3, r7
 800dd2c:	f7f4 fad2 	bl	80022d4 <__aeabi_dmul>
 800dd30:	2200      	movs	r2, #0
 800dd32:	4bc1      	ldr	r3, [pc, #772]	; (800e038 <_dtoa_r+0x734>)
 800dd34:	f7f3 fb74 	bl	8001420 <__aeabi_dadd>
 800dd38:	4ac0      	ldr	r2, [pc, #768]	; (800e03c <_dtoa_r+0x738>)
 800dd3a:	9014      	str	r0, [sp, #80]	; 0x50
 800dd3c:	9115      	str	r1, [sp, #84]	; 0x54
 800dd3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800dd42:	4694      	mov	ip, r2
 800dd44:	9308      	str	r3, [sp, #32]
 800dd46:	9409      	str	r4, [sp, #36]	; 0x24
 800dd48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd4a:	4463      	add	r3, ip
 800dd4c:	9318      	str	r3, [sp, #96]	; 0x60
 800dd4e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d15e      	bne.n	800de14 <_dtoa_r+0x510>
 800dd56:	2200      	movs	r2, #0
 800dd58:	4bb9      	ldr	r3, [pc, #740]	; (800e040 <_dtoa_r+0x73c>)
 800dd5a:	0030      	movs	r0, r6
 800dd5c:	0039      	movs	r1, r7
 800dd5e:	f7f4 fd7b 	bl	8002858 <__aeabi_dsub>
 800dd62:	9a08      	ldr	r2, [sp, #32]
 800dd64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd66:	0004      	movs	r4, r0
 800dd68:	000d      	movs	r5, r1
 800dd6a:	f7f2 fb89 	bl	8000480 <__aeabi_dcmpgt>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d000      	beq.n	800dd74 <_dtoa_r+0x470>
 800dd72:	e2b3      	b.n	800e2dc <_dtoa_r+0x9d8>
 800dd74:	48b3      	ldr	r0, [pc, #716]	; (800e044 <_dtoa_r+0x740>)
 800dd76:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dd78:	4684      	mov	ip, r0
 800dd7a:	4461      	add	r1, ip
 800dd7c:	000b      	movs	r3, r1
 800dd7e:	0020      	movs	r0, r4
 800dd80:	0029      	movs	r1, r5
 800dd82:	9a08      	ldr	r2, [sp, #32]
 800dd84:	f7f2 fb68 	bl	8000458 <__aeabi_dcmplt>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d000      	beq.n	800dd8e <_dtoa_r+0x48a>
 800dd8c:	e2a3      	b.n	800e2d6 <_dtoa_r+0x9d2>
 800dd8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800dd92:	9308      	str	r3, [sp, #32]
 800dd94:	9409      	str	r4, [sp, #36]	; 0x24
 800dd96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	da00      	bge.n	800dd9e <_dtoa_r+0x49a>
 800dd9c:	e179      	b.n	800e092 <_dtoa_r+0x78e>
 800dd9e:	9a03      	ldr	r2, [sp, #12]
 800dda0:	2a0e      	cmp	r2, #14
 800dda2:	dd00      	ble.n	800dda6 <_dtoa_r+0x4a2>
 800dda4:	e175      	b.n	800e092 <_dtoa_r+0x78e>
 800dda6:	4ba0      	ldr	r3, [pc, #640]	; (800e028 <_dtoa_r+0x724>)
 800dda8:	00d2      	lsls	r2, r2, #3
 800ddaa:	189b      	adds	r3, r3, r2
 800ddac:	681e      	ldr	r6, [r3, #0]
 800ddae:	685f      	ldr	r7, [r3, #4]
 800ddb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	db00      	blt.n	800ddb8 <_dtoa_r+0x4b4>
 800ddb6:	e0e5      	b.n	800df84 <_dtoa_r+0x680>
 800ddb8:	9b07      	ldr	r3, [sp, #28]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	dd00      	ble.n	800ddc0 <_dtoa_r+0x4bc>
 800ddbe:	e0e1      	b.n	800df84 <_dtoa_r+0x680>
 800ddc0:	d000      	beq.n	800ddc4 <_dtoa_r+0x4c0>
 800ddc2:	e288      	b.n	800e2d6 <_dtoa_r+0x9d2>
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	0030      	movs	r0, r6
 800ddc8:	0039      	movs	r1, r7
 800ddca:	4b9d      	ldr	r3, [pc, #628]	; (800e040 <_dtoa_r+0x73c>)
 800ddcc:	f7f4 fa82 	bl	80022d4 <__aeabi_dmul>
 800ddd0:	9a08      	ldr	r2, [sp, #32]
 800ddd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd4:	f7f2 fb5e 	bl	8000494 <__aeabi_dcmpge>
 800ddd8:	9e07      	ldr	r6, [sp, #28]
 800ddda:	0037      	movs	r7, r6
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d000      	beq.n	800dde2 <_dtoa_r+0x4de>
 800dde0:	e25f      	b.n	800e2a2 <_dtoa_r+0x99e>
 800dde2:	9b06      	ldr	r3, [sp, #24]
 800dde4:	9a06      	ldr	r2, [sp, #24]
 800dde6:	3301      	adds	r3, #1
 800dde8:	9308      	str	r3, [sp, #32]
 800ddea:	2331      	movs	r3, #49	; 0x31
 800ddec:	7013      	strb	r3, [r2, #0]
 800ddee:	9b03      	ldr	r3, [sp, #12]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	9303      	str	r3, [sp, #12]
 800ddf4:	e25a      	b.n	800e2ac <_dtoa_r+0x9a8>
 800ddf6:	423d      	tst	r5, r7
 800ddf8:	d005      	beq.n	800de06 <_dtoa_r+0x502>
 800ddfa:	6832      	ldr	r2, [r6, #0]
 800ddfc:	6873      	ldr	r3, [r6, #4]
 800ddfe:	f7f4 fa69 	bl	80022d4 <__aeabi_dmul>
 800de02:	003b      	movs	r3, r7
 800de04:	3401      	adds	r4, #1
 800de06:	106d      	asrs	r5, r5, #1
 800de08:	3608      	adds	r6, #8
 800de0a:	e75f      	b.n	800dccc <_dtoa_r+0x3c8>
 800de0c:	9b03      	ldr	r3, [sp, #12]
 800de0e:	930e      	str	r3, [sp, #56]	; 0x38
 800de10:	9b07      	ldr	r3, [sp, #28]
 800de12:	e783      	b.n	800dd1c <_dtoa_r+0x418>
 800de14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de16:	4b84      	ldr	r3, [pc, #528]	; (800e028 <_dtoa_r+0x724>)
 800de18:	3a01      	subs	r2, #1
 800de1a:	00d2      	lsls	r2, r2, #3
 800de1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800de1e:	189b      	adds	r3, r3, r2
 800de20:	9c08      	ldr	r4, [sp, #32]
 800de22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	2900      	cmp	r1, #0
 800de2a:	d051      	beq.n	800ded0 <_dtoa_r+0x5cc>
 800de2c:	2000      	movs	r0, #0
 800de2e:	4986      	ldr	r1, [pc, #536]	; (800e048 <_dtoa_r+0x744>)
 800de30:	f7f3 fe56 	bl	8001ae0 <__aeabi_ddiv>
 800de34:	0022      	movs	r2, r4
 800de36:	002b      	movs	r3, r5
 800de38:	f7f4 fd0e 	bl	8002858 <__aeabi_dsub>
 800de3c:	9a06      	ldr	r2, [sp, #24]
 800de3e:	0004      	movs	r4, r0
 800de40:	4694      	mov	ip, r2
 800de42:	000d      	movs	r5, r1
 800de44:	9b06      	ldr	r3, [sp, #24]
 800de46:	9314      	str	r3, [sp, #80]	; 0x50
 800de48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de4a:	4463      	add	r3, ip
 800de4c:	9318      	str	r3, [sp, #96]	; 0x60
 800de4e:	0039      	movs	r1, r7
 800de50:	0030      	movs	r0, r6
 800de52:	f7f5 f8a1 	bl	8002f98 <__aeabi_d2iz>
 800de56:	9012      	str	r0, [sp, #72]	; 0x48
 800de58:	f7f5 f8d4 	bl	8003004 <__aeabi_i2d>
 800de5c:	0002      	movs	r2, r0
 800de5e:	000b      	movs	r3, r1
 800de60:	0030      	movs	r0, r6
 800de62:	0039      	movs	r1, r7
 800de64:	f7f4 fcf8 	bl	8002858 <__aeabi_dsub>
 800de68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de6c:	3301      	adds	r3, #1
 800de6e:	9308      	str	r3, [sp, #32]
 800de70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de72:	0006      	movs	r6, r0
 800de74:	3330      	adds	r3, #48	; 0x30
 800de76:	7013      	strb	r3, [r2, #0]
 800de78:	0022      	movs	r2, r4
 800de7a:	002b      	movs	r3, r5
 800de7c:	000f      	movs	r7, r1
 800de7e:	f7f2 faeb 	bl	8000458 <__aeabi_dcmplt>
 800de82:	2800      	cmp	r0, #0
 800de84:	d174      	bne.n	800df70 <_dtoa_r+0x66c>
 800de86:	0032      	movs	r2, r6
 800de88:	003b      	movs	r3, r7
 800de8a:	2000      	movs	r0, #0
 800de8c:	4968      	ldr	r1, [pc, #416]	; (800e030 <_dtoa_r+0x72c>)
 800de8e:	f7f4 fce3 	bl	8002858 <__aeabi_dsub>
 800de92:	0022      	movs	r2, r4
 800de94:	002b      	movs	r3, r5
 800de96:	f7f2 fadf 	bl	8000458 <__aeabi_dcmplt>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d000      	beq.n	800dea0 <_dtoa_r+0x59c>
 800de9e:	e0d7      	b.n	800e050 <_dtoa_r+0x74c>
 800dea0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dea2:	9a08      	ldr	r2, [sp, #32]
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d100      	bne.n	800deaa <_dtoa_r+0x5a6>
 800dea8:	e771      	b.n	800dd8e <_dtoa_r+0x48a>
 800deaa:	2200      	movs	r2, #0
 800deac:	0020      	movs	r0, r4
 800deae:	0029      	movs	r1, r5
 800deb0:	4b60      	ldr	r3, [pc, #384]	; (800e034 <_dtoa_r+0x730>)
 800deb2:	f7f4 fa0f 	bl	80022d4 <__aeabi_dmul>
 800deb6:	4b5f      	ldr	r3, [pc, #380]	; (800e034 <_dtoa_r+0x730>)
 800deb8:	0004      	movs	r4, r0
 800deba:	000d      	movs	r5, r1
 800debc:	0030      	movs	r0, r6
 800debe:	0039      	movs	r1, r7
 800dec0:	2200      	movs	r2, #0
 800dec2:	f7f4 fa07 	bl	80022d4 <__aeabi_dmul>
 800dec6:	9b08      	ldr	r3, [sp, #32]
 800dec8:	0006      	movs	r6, r0
 800deca:	000f      	movs	r7, r1
 800decc:	9314      	str	r3, [sp, #80]	; 0x50
 800dece:	e7be      	b.n	800de4e <_dtoa_r+0x54a>
 800ded0:	0020      	movs	r0, r4
 800ded2:	0029      	movs	r1, r5
 800ded4:	f7f4 f9fe 	bl	80022d4 <__aeabi_dmul>
 800ded8:	9a06      	ldr	r2, [sp, #24]
 800deda:	9b06      	ldr	r3, [sp, #24]
 800dedc:	4694      	mov	ip, r2
 800dede:	9308      	str	r3, [sp, #32]
 800dee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dee2:	9014      	str	r0, [sp, #80]	; 0x50
 800dee4:	9115      	str	r1, [sp, #84]	; 0x54
 800dee6:	4463      	add	r3, ip
 800dee8:	9319      	str	r3, [sp, #100]	; 0x64
 800deea:	0030      	movs	r0, r6
 800deec:	0039      	movs	r1, r7
 800deee:	f7f5 f853 	bl	8002f98 <__aeabi_d2iz>
 800def2:	9018      	str	r0, [sp, #96]	; 0x60
 800def4:	f7f5 f886 	bl	8003004 <__aeabi_i2d>
 800def8:	0002      	movs	r2, r0
 800defa:	000b      	movs	r3, r1
 800defc:	0030      	movs	r0, r6
 800defe:	0039      	movs	r1, r7
 800df00:	f7f4 fcaa 	bl	8002858 <__aeabi_dsub>
 800df04:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800df06:	9b08      	ldr	r3, [sp, #32]
 800df08:	3630      	adds	r6, #48	; 0x30
 800df0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800df0c:	701e      	strb	r6, [r3, #0]
 800df0e:	3301      	adds	r3, #1
 800df10:	0004      	movs	r4, r0
 800df12:	000d      	movs	r5, r1
 800df14:	9308      	str	r3, [sp, #32]
 800df16:	4293      	cmp	r3, r2
 800df18:	d12d      	bne.n	800df76 <_dtoa_r+0x672>
 800df1a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800df1c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800df1e:	9a06      	ldr	r2, [sp, #24]
 800df20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df22:	4694      	mov	ip, r2
 800df24:	4463      	add	r3, ip
 800df26:	2200      	movs	r2, #0
 800df28:	9308      	str	r3, [sp, #32]
 800df2a:	4b47      	ldr	r3, [pc, #284]	; (800e048 <_dtoa_r+0x744>)
 800df2c:	f7f3 fa78 	bl	8001420 <__aeabi_dadd>
 800df30:	0002      	movs	r2, r0
 800df32:	000b      	movs	r3, r1
 800df34:	0020      	movs	r0, r4
 800df36:	0029      	movs	r1, r5
 800df38:	f7f2 faa2 	bl	8000480 <__aeabi_dcmpgt>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d000      	beq.n	800df42 <_dtoa_r+0x63e>
 800df40:	e086      	b.n	800e050 <_dtoa_r+0x74c>
 800df42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df46:	2000      	movs	r0, #0
 800df48:	493f      	ldr	r1, [pc, #252]	; (800e048 <_dtoa_r+0x744>)
 800df4a:	f7f4 fc85 	bl	8002858 <__aeabi_dsub>
 800df4e:	0002      	movs	r2, r0
 800df50:	000b      	movs	r3, r1
 800df52:	0020      	movs	r0, r4
 800df54:	0029      	movs	r1, r5
 800df56:	f7f2 fa7f 	bl	8000458 <__aeabi_dcmplt>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d100      	bne.n	800df60 <_dtoa_r+0x65c>
 800df5e:	e716      	b.n	800dd8e <_dtoa_r+0x48a>
 800df60:	9b08      	ldr	r3, [sp, #32]
 800df62:	001a      	movs	r2, r3
 800df64:	3a01      	subs	r2, #1
 800df66:	9208      	str	r2, [sp, #32]
 800df68:	7812      	ldrb	r2, [r2, #0]
 800df6a:	2a30      	cmp	r2, #48	; 0x30
 800df6c:	d0f8      	beq.n	800df60 <_dtoa_r+0x65c>
 800df6e:	9308      	str	r3, [sp, #32]
 800df70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df72:	9303      	str	r3, [sp, #12]
 800df74:	e046      	b.n	800e004 <_dtoa_r+0x700>
 800df76:	2200      	movs	r2, #0
 800df78:	4b2e      	ldr	r3, [pc, #184]	; (800e034 <_dtoa_r+0x730>)
 800df7a:	f7f4 f9ab 	bl	80022d4 <__aeabi_dmul>
 800df7e:	0006      	movs	r6, r0
 800df80:	000f      	movs	r7, r1
 800df82:	e7b2      	b.n	800deea <_dtoa_r+0x5e6>
 800df84:	9b06      	ldr	r3, [sp, #24]
 800df86:	9a06      	ldr	r2, [sp, #24]
 800df88:	930a      	str	r3, [sp, #40]	; 0x28
 800df8a:	9b07      	ldr	r3, [sp, #28]
 800df8c:	9c08      	ldr	r4, [sp, #32]
 800df8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df90:	3b01      	subs	r3, #1
 800df92:	189b      	adds	r3, r3, r2
 800df94:	930b      	str	r3, [sp, #44]	; 0x2c
 800df96:	0032      	movs	r2, r6
 800df98:	003b      	movs	r3, r7
 800df9a:	0020      	movs	r0, r4
 800df9c:	0029      	movs	r1, r5
 800df9e:	f7f3 fd9f 	bl	8001ae0 <__aeabi_ddiv>
 800dfa2:	f7f4 fff9 	bl	8002f98 <__aeabi_d2iz>
 800dfa6:	9007      	str	r0, [sp, #28]
 800dfa8:	f7f5 f82c 	bl	8003004 <__aeabi_i2d>
 800dfac:	0032      	movs	r2, r6
 800dfae:	003b      	movs	r3, r7
 800dfb0:	f7f4 f990 	bl	80022d4 <__aeabi_dmul>
 800dfb4:	0002      	movs	r2, r0
 800dfb6:	000b      	movs	r3, r1
 800dfb8:	0020      	movs	r0, r4
 800dfba:	0029      	movs	r1, r5
 800dfbc:	f7f4 fc4c 	bl	8002858 <__aeabi_dsub>
 800dfc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfc2:	001a      	movs	r2, r3
 800dfc4:	3201      	adds	r2, #1
 800dfc6:	920a      	str	r2, [sp, #40]	; 0x28
 800dfc8:	9208      	str	r2, [sp, #32]
 800dfca:	9a07      	ldr	r2, [sp, #28]
 800dfcc:	3230      	adds	r2, #48	; 0x30
 800dfce:	701a      	strb	r2, [r3, #0]
 800dfd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d14f      	bne.n	800e076 <_dtoa_r+0x772>
 800dfd6:	0002      	movs	r2, r0
 800dfd8:	000b      	movs	r3, r1
 800dfda:	f7f3 fa21 	bl	8001420 <__aeabi_dadd>
 800dfde:	0032      	movs	r2, r6
 800dfe0:	003b      	movs	r3, r7
 800dfe2:	0004      	movs	r4, r0
 800dfe4:	000d      	movs	r5, r1
 800dfe6:	f7f2 fa4b 	bl	8000480 <__aeabi_dcmpgt>
 800dfea:	2800      	cmp	r0, #0
 800dfec:	d12e      	bne.n	800e04c <_dtoa_r+0x748>
 800dfee:	0032      	movs	r2, r6
 800dff0:	003b      	movs	r3, r7
 800dff2:	0020      	movs	r0, r4
 800dff4:	0029      	movs	r1, r5
 800dff6:	f7f2 fa29 	bl	800044c <__aeabi_dcmpeq>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d002      	beq.n	800e004 <_dtoa_r+0x700>
 800dffe:	9b07      	ldr	r3, [sp, #28]
 800e000:	07de      	lsls	r6, r3, #31
 800e002:	d423      	bmi.n	800e04c <_dtoa_r+0x748>
 800e004:	9905      	ldr	r1, [sp, #20]
 800e006:	9804      	ldr	r0, [sp, #16]
 800e008:	f000 fe86 	bl	800ed18 <_Bfree>
 800e00c:	2300      	movs	r3, #0
 800e00e:	9a08      	ldr	r2, [sp, #32]
 800e010:	7013      	strb	r3, [r2, #0]
 800e012:	9b03      	ldr	r3, [sp, #12]
 800e014:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e016:	3301      	adds	r3, #1
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d100      	bne.n	800e022 <_dtoa_r+0x71e>
 800e020:	e4ba      	b.n	800d998 <_dtoa_r+0x94>
 800e022:	9a08      	ldr	r2, [sp, #32]
 800e024:	601a      	str	r2, [r3, #0]
 800e026:	e4b7      	b.n	800d998 <_dtoa_r+0x94>
 800e028:	08012398 	.word	0x08012398
 800e02c:	08012370 	.word	0x08012370
 800e030:	3ff00000 	.word	0x3ff00000
 800e034:	40240000 	.word	0x40240000
 800e038:	401c0000 	.word	0x401c0000
 800e03c:	fcc00000 	.word	0xfcc00000
 800e040:	40140000 	.word	0x40140000
 800e044:	7cc00000 	.word	0x7cc00000
 800e048:	3fe00000 	.word	0x3fe00000
 800e04c:	9b03      	ldr	r3, [sp, #12]
 800e04e:	930e      	str	r3, [sp, #56]	; 0x38
 800e050:	9b08      	ldr	r3, [sp, #32]
 800e052:	9308      	str	r3, [sp, #32]
 800e054:	3b01      	subs	r3, #1
 800e056:	781a      	ldrb	r2, [r3, #0]
 800e058:	2a39      	cmp	r2, #57	; 0x39
 800e05a:	d108      	bne.n	800e06e <_dtoa_r+0x76a>
 800e05c:	9a06      	ldr	r2, [sp, #24]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d1f7      	bne.n	800e052 <_dtoa_r+0x74e>
 800e062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e064:	9906      	ldr	r1, [sp, #24]
 800e066:	3201      	adds	r2, #1
 800e068:	920e      	str	r2, [sp, #56]	; 0x38
 800e06a:	2230      	movs	r2, #48	; 0x30
 800e06c:	700a      	strb	r2, [r1, #0]
 800e06e:	781a      	ldrb	r2, [r3, #0]
 800e070:	3201      	adds	r2, #1
 800e072:	701a      	strb	r2, [r3, #0]
 800e074:	e77c      	b.n	800df70 <_dtoa_r+0x66c>
 800e076:	2200      	movs	r2, #0
 800e078:	4ba9      	ldr	r3, [pc, #676]	; (800e320 <_dtoa_r+0xa1c>)
 800e07a:	f7f4 f92b 	bl	80022d4 <__aeabi_dmul>
 800e07e:	2200      	movs	r2, #0
 800e080:	2300      	movs	r3, #0
 800e082:	0004      	movs	r4, r0
 800e084:	000d      	movs	r5, r1
 800e086:	f7f2 f9e1 	bl	800044c <__aeabi_dcmpeq>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d100      	bne.n	800e090 <_dtoa_r+0x78c>
 800e08e:	e782      	b.n	800df96 <_dtoa_r+0x692>
 800e090:	e7b8      	b.n	800e004 <_dtoa_r+0x700>
 800e092:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800e094:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e096:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e098:	2f00      	cmp	r7, #0
 800e09a:	d012      	beq.n	800e0c2 <_dtoa_r+0x7be>
 800e09c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e09e:	2a01      	cmp	r2, #1
 800e0a0:	dc6e      	bgt.n	800e180 <_dtoa_r+0x87c>
 800e0a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0a4:	2a00      	cmp	r2, #0
 800e0a6:	d065      	beq.n	800e174 <_dtoa_r+0x870>
 800e0a8:	4a9e      	ldr	r2, [pc, #632]	; (800e324 <_dtoa_r+0xa20>)
 800e0aa:	189b      	adds	r3, r3, r2
 800e0ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0ae:	2101      	movs	r1, #1
 800e0b0:	18d2      	adds	r2, r2, r3
 800e0b2:	920a      	str	r2, [sp, #40]	; 0x28
 800e0b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0b6:	9804      	ldr	r0, [sp, #16]
 800e0b8:	18d3      	adds	r3, r2, r3
 800e0ba:	930c      	str	r3, [sp, #48]	; 0x30
 800e0bc:	f000 ff28 	bl	800ef10 <__i2b>
 800e0c0:	0007      	movs	r7, r0
 800e0c2:	2c00      	cmp	r4, #0
 800e0c4:	d00e      	beq.n	800e0e4 <_dtoa_r+0x7e0>
 800e0c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	dd0b      	ble.n	800e0e4 <_dtoa_r+0x7e0>
 800e0cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0ce:	0023      	movs	r3, r4
 800e0d0:	4294      	cmp	r4, r2
 800e0d2:	dd00      	ble.n	800e0d6 <_dtoa_r+0x7d2>
 800e0d4:	0013      	movs	r3, r2
 800e0d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0d8:	1ae4      	subs	r4, r4, r3
 800e0da:	1ad2      	subs	r2, r2, r3
 800e0dc:	920a      	str	r2, [sp, #40]	; 0x28
 800e0de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	930c      	str	r3, [sp, #48]	; 0x30
 800e0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d01e      	beq.n	800e128 <_dtoa_r+0x824>
 800e0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d05c      	beq.n	800e1aa <_dtoa_r+0x8a6>
 800e0f0:	2d00      	cmp	r5, #0
 800e0f2:	dd10      	ble.n	800e116 <_dtoa_r+0x812>
 800e0f4:	0039      	movs	r1, r7
 800e0f6:	002a      	movs	r2, r5
 800e0f8:	9804      	ldr	r0, [sp, #16]
 800e0fa:	f000 ffd1 	bl	800f0a0 <__pow5mult>
 800e0fe:	9a05      	ldr	r2, [sp, #20]
 800e100:	0001      	movs	r1, r0
 800e102:	0007      	movs	r7, r0
 800e104:	9804      	ldr	r0, [sp, #16]
 800e106:	f000 ff1b 	bl	800ef40 <__multiply>
 800e10a:	0006      	movs	r6, r0
 800e10c:	9905      	ldr	r1, [sp, #20]
 800e10e:	9804      	ldr	r0, [sp, #16]
 800e110:	f000 fe02 	bl	800ed18 <_Bfree>
 800e114:	9605      	str	r6, [sp, #20]
 800e116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e118:	1b5a      	subs	r2, r3, r5
 800e11a:	42ab      	cmp	r3, r5
 800e11c:	d004      	beq.n	800e128 <_dtoa_r+0x824>
 800e11e:	9905      	ldr	r1, [sp, #20]
 800e120:	9804      	ldr	r0, [sp, #16]
 800e122:	f000 ffbd 	bl	800f0a0 <__pow5mult>
 800e126:	9005      	str	r0, [sp, #20]
 800e128:	2101      	movs	r1, #1
 800e12a:	9804      	ldr	r0, [sp, #16]
 800e12c:	f000 fef0 	bl	800ef10 <__i2b>
 800e130:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e132:	0006      	movs	r6, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	dd3a      	ble.n	800e1ae <_dtoa_r+0x8aa>
 800e138:	001a      	movs	r2, r3
 800e13a:	0001      	movs	r1, r0
 800e13c:	9804      	ldr	r0, [sp, #16]
 800e13e:	f000 ffaf 	bl	800f0a0 <__pow5mult>
 800e142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e144:	0006      	movs	r6, r0
 800e146:	2500      	movs	r5, #0
 800e148:	2b01      	cmp	r3, #1
 800e14a:	dc38      	bgt.n	800e1be <_dtoa_r+0x8ba>
 800e14c:	2500      	movs	r5, #0
 800e14e:	9b08      	ldr	r3, [sp, #32]
 800e150:	42ab      	cmp	r3, r5
 800e152:	d130      	bne.n	800e1b6 <_dtoa_r+0x8b2>
 800e154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e156:	031b      	lsls	r3, r3, #12
 800e158:	42ab      	cmp	r3, r5
 800e15a:	d12c      	bne.n	800e1b6 <_dtoa_r+0x8b2>
 800e15c:	4b72      	ldr	r3, [pc, #456]	; (800e328 <_dtoa_r+0xa24>)
 800e15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e160:	4213      	tst	r3, r2
 800e162:	d028      	beq.n	800e1b6 <_dtoa_r+0x8b2>
 800e164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e166:	3501      	adds	r5, #1
 800e168:	3301      	adds	r3, #1
 800e16a:	930a      	str	r3, [sp, #40]	; 0x28
 800e16c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e16e:	3301      	adds	r3, #1
 800e170:	930c      	str	r3, [sp, #48]	; 0x30
 800e172:	e020      	b.n	800e1b6 <_dtoa_r+0x8b2>
 800e174:	2336      	movs	r3, #54	; 0x36
 800e176:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e178:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e17a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e17c:	1a9b      	subs	r3, r3, r2
 800e17e:	e795      	b.n	800e0ac <_dtoa_r+0x7a8>
 800e180:	9b07      	ldr	r3, [sp, #28]
 800e182:	1e5d      	subs	r5, r3, #1
 800e184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e186:	42ab      	cmp	r3, r5
 800e188:	db07      	blt.n	800e19a <_dtoa_r+0x896>
 800e18a:	1b5d      	subs	r5, r3, r5
 800e18c:	9b07      	ldr	r3, [sp, #28]
 800e18e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e190:	2b00      	cmp	r3, #0
 800e192:	da8b      	bge.n	800e0ac <_dtoa_r+0x7a8>
 800e194:	1ae4      	subs	r4, r4, r3
 800e196:	2300      	movs	r3, #0
 800e198:	e788      	b.n	800e0ac <_dtoa_r+0x7a8>
 800e19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e19c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e19e:	1aeb      	subs	r3, r5, r3
 800e1a0:	18d3      	adds	r3, r2, r3
 800e1a2:	950d      	str	r5, [sp, #52]	; 0x34
 800e1a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e1a6:	2500      	movs	r5, #0
 800e1a8:	e7f0      	b.n	800e18c <_dtoa_r+0x888>
 800e1aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1ac:	e7b7      	b.n	800e11e <_dtoa_r+0x81a>
 800e1ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e1b0:	2500      	movs	r5, #0
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	ddca      	ble.n	800e14c <_dtoa_r+0x848>
 800e1b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d008      	beq.n	800e1d0 <_dtoa_r+0x8cc>
 800e1be:	6933      	ldr	r3, [r6, #16]
 800e1c0:	3303      	adds	r3, #3
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	18f3      	adds	r3, r6, r3
 800e1c6:	6858      	ldr	r0, [r3, #4]
 800e1c8:	f000 fe5a 	bl	800ee80 <__hi0bits>
 800e1cc:	2320      	movs	r3, #32
 800e1ce:	1a18      	subs	r0, r3, r0
 800e1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1d2:	1818      	adds	r0, r3, r0
 800e1d4:	0002      	movs	r2, r0
 800e1d6:	231f      	movs	r3, #31
 800e1d8:	401a      	ands	r2, r3
 800e1da:	4218      	tst	r0, r3
 800e1dc:	d047      	beq.n	800e26e <_dtoa_r+0x96a>
 800e1de:	3301      	adds	r3, #1
 800e1e0:	1a9b      	subs	r3, r3, r2
 800e1e2:	2b04      	cmp	r3, #4
 800e1e4:	dd3f      	ble.n	800e266 <_dtoa_r+0x962>
 800e1e6:	231c      	movs	r3, #28
 800e1e8:	1a9b      	subs	r3, r3, r2
 800e1ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1ec:	18e4      	adds	r4, r4, r3
 800e1ee:	18d2      	adds	r2, r2, r3
 800e1f0:	920a      	str	r2, [sp, #40]	; 0x28
 800e1f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1f4:	18d3      	adds	r3, r2, r3
 800e1f6:	930c      	str	r3, [sp, #48]	; 0x30
 800e1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	dd05      	ble.n	800e20a <_dtoa_r+0x906>
 800e1fe:	001a      	movs	r2, r3
 800e200:	9905      	ldr	r1, [sp, #20]
 800e202:	9804      	ldr	r0, [sp, #16]
 800e204:	f000 ffa8 	bl	800f158 <__lshift>
 800e208:	9005      	str	r0, [sp, #20]
 800e20a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	dd05      	ble.n	800e21c <_dtoa_r+0x918>
 800e210:	0031      	movs	r1, r6
 800e212:	001a      	movs	r2, r3
 800e214:	9804      	ldr	r0, [sp, #16]
 800e216:	f000 ff9f 	bl	800f158 <__lshift>
 800e21a:	0006      	movs	r6, r0
 800e21c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d027      	beq.n	800e272 <_dtoa_r+0x96e>
 800e222:	0031      	movs	r1, r6
 800e224:	9805      	ldr	r0, [sp, #20]
 800e226:	f001 f805 	bl	800f234 <__mcmp>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	da21      	bge.n	800e272 <_dtoa_r+0x96e>
 800e22e:	9b03      	ldr	r3, [sp, #12]
 800e230:	220a      	movs	r2, #10
 800e232:	3b01      	subs	r3, #1
 800e234:	9303      	str	r3, [sp, #12]
 800e236:	9905      	ldr	r1, [sp, #20]
 800e238:	2300      	movs	r3, #0
 800e23a:	9804      	ldr	r0, [sp, #16]
 800e23c:	f000 fd90 	bl	800ed60 <__multadd>
 800e240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e242:	9005      	str	r0, [sp, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d100      	bne.n	800e24a <_dtoa_r+0x946>
 800e248:	e15d      	b.n	800e506 <_dtoa_r+0xc02>
 800e24a:	2300      	movs	r3, #0
 800e24c:	0039      	movs	r1, r7
 800e24e:	220a      	movs	r2, #10
 800e250:	9804      	ldr	r0, [sp, #16]
 800e252:	f000 fd85 	bl	800ed60 <__multadd>
 800e256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e258:	0007      	movs	r7, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	dc49      	bgt.n	800e2f2 <_dtoa_r+0x9ee>
 800e25e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e260:	2b02      	cmp	r3, #2
 800e262:	dc0e      	bgt.n	800e282 <_dtoa_r+0x97e>
 800e264:	e045      	b.n	800e2f2 <_dtoa_r+0x9ee>
 800e266:	2b04      	cmp	r3, #4
 800e268:	d0c6      	beq.n	800e1f8 <_dtoa_r+0x8f4>
 800e26a:	331c      	adds	r3, #28
 800e26c:	e7bd      	b.n	800e1ea <_dtoa_r+0x8e6>
 800e26e:	0013      	movs	r3, r2
 800e270:	e7fb      	b.n	800e26a <_dtoa_r+0x966>
 800e272:	9b07      	ldr	r3, [sp, #28]
 800e274:	2b00      	cmp	r3, #0
 800e276:	dc36      	bgt.n	800e2e6 <_dtoa_r+0x9e2>
 800e278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	dd33      	ble.n	800e2e6 <_dtoa_r+0x9e2>
 800e27e:	9b07      	ldr	r3, [sp, #28]
 800e280:	930b      	str	r3, [sp, #44]	; 0x2c
 800e282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10c      	bne.n	800e2a2 <_dtoa_r+0x99e>
 800e288:	0031      	movs	r1, r6
 800e28a:	2205      	movs	r2, #5
 800e28c:	9804      	ldr	r0, [sp, #16]
 800e28e:	f000 fd67 	bl	800ed60 <__multadd>
 800e292:	0006      	movs	r6, r0
 800e294:	0001      	movs	r1, r0
 800e296:	9805      	ldr	r0, [sp, #20]
 800e298:	f000 ffcc 	bl	800f234 <__mcmp>
 800e29c:	2800      	cmp	r0, #0
 800e29e:	dd00      	ble.n	800e2a2 <_dtoa_r+0x99e>
 800e2a0:	e59f      	b.n	800dde2 <_dtoa_r+0x4de>
 800e2a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e2a4:	43db      	mvns	r3, r3
 800e2a6:	9303      	str	r3, [sp, #12]
 800e2a8:	9b06      	ldr	r3, [sp, #24]
 800e2aa:	9308      	str	r3, [sp, #32]
 800e2ac:	2500      	movs	r5, #0
 800e2ae:	0031      	movs	r1, r6
 800e2b0:	9804      	ldr	r0, [sp, #16]
 800e2b2:	f000 fd31 	bl	800ed18 <_Bfree>
 800e2b6:	2f00      	cmp	r7, #0
 800e2b8:	d100      	bne.n	800e2bc <_dtoa_r+0x9b8>
 800e2ba:	e6a3      	b.n	800e004 <_dtoa_r+0x700>
 800e2bc:	2d00      	cmp	r5, #0
 800e2be:	d005      	beq.n	800e2cc <_dtoa_r+0x9c8>
 800e2c0:	42bd      	cmp	r5, r7
 800e2c2:	d003      	beq.n	800e2cc <_dtoa_r+0x9c8>
 800e2c4:	0029      	movs	r1, r5
 800e2c6:	9804      	ldr	r0, [sp, #16]
 800e2c8:	f000 fd26 	bl	800ed18 <_Bfree>
 800e2cc:	0039      	movs	r1, r7
 800e2ce:	9804      	ldr	r0, [sp, #16]
 800e2d0:	f000 fd22 	bl	800ed18 <_Bfree>
 800e2d4:	e696      	b.n	800e004 <_dtoa_r+0x700>
 800e2d6:	2600      	movs	r6, #0
 800e2d8:	0037      	movs	r7, r6
 800e2da:	e7e2      	b.n	800e2a2 <_dtoa_r+0x99e>
 800e2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2de:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800e2e0:	9303      	str	r3, [sp, #12]
 800e2e2:	0037      	movs	r7, r6
 800e2e4:	e57d      	b.n	800dde2 <_dtoa_r+0x4de>
 800e2e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d100      	bne.n	800e2ee <_dtoa_r+0x9ea>
 800e2ec:	e0c3      	b.n	800e476 <_dtoa_r+0xb72>
 800e2ee:	9b07      	ldr	r3, [sp, #28]
 800e2f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2f2:	2c00      	cmp	r4, #0
 800e2f4:	dd05      	ble.n	800e302 <_dtoa_r+0x9fe>
 800e2f6:	0039      	movs	r1, r7
 800e2f8:	0022      	movs	r2, r4
 800e2fa:	9804      	ldr	r0, [sp, #16]
 800e2fc:	f000 ff2c 	bl	800f158 <__lshift>
 800e300:	0007      	movs	r7, r0
 800e302:	0038      	movs	r0, r7
 800e304:	2d00      	cmp	r5, #0
 800e306:	d024      	beq.n	800e352 <_dtoa_r+0xa4e>
 800e308:	6879      	ldr	r1, [r7, #4]
 800e30a:	9804      	ldr	r0, [sp, #16]
 800e30c:	f000 fcc0 	bl	800ec90 <_Balloc>
 800e310:	1e04      	subs	r4, r0, #0
 800e312:	d111      	bne.n	800e338 <_dtoa_r+0xa34>
 800e314:	0022      	movs	r2, r4
 800e316:	4b05      	ldr	r3, [pc, #20]	; (800e32c <_dtoa_r+0xa28>)
 800e318:	4805      	ldr	r0, [pc, #20]	; (800e330 <_dtoa_r+0xa2c>)
 800e31a:	4906      	ldr	r1, [pc, #24]	; (800e334 <_dtoa_r+0xa30>)
 800e31c:	f7ff fb07 	bl	800d92e <_dtoa_r+0x2a>
 800e320:	40240000 	.word	0x40240000
 800e324:	00000433 	.word	0x00000433
 800e328:	7ff00000 	.word	0x7ff00000
 800e32c:	080122a4 	.word	0x080122a4
 800e330:	0801224c 	.word	0x0801224c
 800e334:	000002ef 	.word	0x000002ef
 800e338:	0039      	movs	r1, r7
 800e33a:	693a      	ldr	r2, [r7, #16]
 800e33c:	310c      	adds	r1, #12
 800e33e:	3202      	adds	r2, #2
 800e340:	0092      	lsls	r2, r2, #2
 800e342:	300c      	adds	r0, #12
 800e344:	f7ff fa1c 	bl	800d780 <memcpy>
 800e348:	2201      	movs	r2, #1
 800e34a:	0021      	movs	r1, r4
 800e34c:	9804      	ldr	r0, [sp, #16]
 800e34e:	f000 ff03 	bl	800f158 <__lshift>
 800e352:	9b06      	ldr	r3, [sp, #24]
 800e354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e356:	9307      	str	r3, [sp, #28]
 800e358:	3b01      	subs	r3, #1
 800e35a:	189b      	adds	r3, r3, r2
 800e35c:	2201      	movs	r2, #1
 800e35e:	003d      	movs	r5, r7
 800e360:	0007      	movs	r7, r0
 800e362:	930e      	str	r3, [sp, #56]	; 0x38
 800e364:	9b08      	ldr	r3, [sp, #32]
 800e366:	4013      	ands	r3, r2
 800e368:	930d      	str	r3, [sp, #52]	; 0x34
 800e36a:	0031      	movs	r1, r6
 800e36c:	9805      	ldr	r0, [sp, #20]
 800e36e:	f7ff fa39 	bl	800d7e4 <quorem>
 800e372:	0029      	movs	r1, r5
 800e374:	0004      	movs	r4, r0
 800e376:	900b      	str	r0, [sp, #44]	; 0x2c
 800e378:	9805      	ldr	r0, [sp, #20]
 800e37a:	f000 ff5b 	bl	800f234 <__mcmp>
 800e37e:	003a      	movs	r2, r7
 800e380:	900c      	str	r0, [sp, #48]	; 0x30
 800e382:	0031      	movs	r1, r6
 800e384:	9804      	ldr	r0, [sp, #16]
 800e386:	f000 ff71 	bl	800f26c <__mdiff>
 800e38a:	2201      	movs	r2, #1
 800e38c:	68c3      	ldr	r3, [r0, #12]
 800e38e:	3430      	adds	r4, #48	; 0x30
 800e390:	9008      	str	r0, [sp, #32]
 800e392:	920a      	str	r2, [sp, #40]	; 0x28
 800e394:	2b00      	cmp	r3, #0
 800e396:	d104      	bne.n	800e3a2 <_dtoa_r+0xa9e>
 800e398:	0001      	movs	r1, r0
 800e39a:	9805      	ldr	r0, [sp, #20]
 800e39c:	f000 ff4a 	bl	800f234 <__mcmp>
 800e3a0:	900a      	str	r0, [sp, #40]	; 0x28
 800e3a2:	9908      	ldr	r1, [sp, #32]
 800e3a4:	9804      	ldr	r0, [sp, #16]
 800e3a6:	f000 fcb7 	bl	800ed18 <_Bfree>
 800e3aa:	9b07      	ldr	r3, [sp, #28]
 800e3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	9308      	str	r3, [sp, #32]
 800e3b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	d109      	bne.n	800e3d0 <_dtoa_r+0xacc>
 800e3bc:	2c39      	cmp	r4, #57	; 0x39
 800e3be:	d022      	beq.n	800e406 <_dtoa_r+0xb02>
 800e3c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	dd01      	ble.n	800e3ca <_dtoa_r+0xac6>
 800e3c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e3c8:	3431      	adds	r4, #49	; 0x31
 800e3ca:	9b07      	ldr	r3, [sp, #28]
 800e3cc:	701c      	strb	r4, [r3, #0]
 800e3ce:	e76e      	b.n	800e2ae <_dtoa_r+0x9aa>
 800e3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	db04      	blt.n	800e3e0 <_dtoa_r+0xadc>
 800e3d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	d11e      	bne.n	800e41e <_dtoa_r+0xb1a>
 800e3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	ddf1      	ble.n	800e3ca <_dtoa_r+0xac6>
 800e3e6:	9905      	ldr	r1, [sp, #20]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	9804      	ldr	r0, [sp, #16]
 800e3ec:	f000 feb4 	bl	800f158 <__lshift>
 800e3f0:	0031      	movs	r1, r6
 800e3f2:	9005      	str	r0, [sp, #20]
 800e3f4:	f000 ff1e 	bl	800f234 <__mcmp>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	dc02      	bgt.n	800e402 <_dtoa_r+0xafe>
 800e3fc:	d1e5      	bne.n	800e3ca <_dtoa_r+0xac6>
 800e3fe:	07e3      	lsls	r3, r4, #31
 800e400:	d5e3      	bpl.n	800e3ca <_dtoa_r+0xac6>
 800e402:	2c39      	cmp	r4, #57	; 0x39
 800e404:	d1df      	bne.n	800e3c6 <_dtoa_r+0xac2>
 800e406:	2339      	movs	r3, #57	; 0x39
 800e408:	9a07      	ldr	r2, [sp, #28]
 800e40a:	7013      	strb	r3, [r2, #0]
 800e40c:	9b08      	ldr	r3, [sp, #32]
 800e40e:	9308      	str	r3, [sp, #32]
 800e410:	3b01      	subs	r3, #1
 800e412:	781a      	ldrb	r2, [r3, #0]
 800e414:	2a39      	cmp	r2, #57	; 0x39
 800e416:	d063      	beq.n	800e4e0 <_dtoa_r+0xbdc>
 800e418:	3201      	adds	r2, #1
 800e41a:	701a      	strb	r2, [r3, #0]
 800e41c:	e747      	b.n	800e2ae <_dtoa_r+0x9aa>
 800e41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e420:	2b00      	cmp	r3, #0
 800e422:	dd03      	ble.n	800e42c <_dtoa_r+0xb28>
 800e424:	2c39      	cmp	r4, #57	; 0x39
 800e426:	d0ee      	beq.n	800e406 <_dtoa_r+0xb02>
 800e428:	3401      	adds	r4, #1
 800e42a:	e7ce      	b.n	800e3ca <_dtoa_r+0xac6>
 800e42c:	9b07      	ldr	r3, [sp, #28]
 800e42e:	9a07      	ldr	r2, [sp, #28]
 800e430:	701c      	strb	r4, [r3, #0]
 800e432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e434:	4293      	cmp	r3, r2
 800e436:	d03e      	beq.n	800e4b6 <_dtoa_r+0xbb2>
 800e438:	2300      	movs	r3, #0
 800e43a:	220a      	movs	r2, #10
 800e43c:	9905      	ldr	r1, [sp, #20]
 800e43e:	9804      	ldr	r0, [sp, #16]
 800e440:	f000 fc8e 	bl	800ed60 <__multadd>
 800e444:	2300      	movs	r3, #0
 800e446:	9005      	str	r0, [sp, #20]
 800e448:	220a      	movs	r2, #10
 800e44a:	0029      	movs	r1, r5
 800e44c:	9804      	ldr	r0, [sp, #16]
 800e44e:	42bd      	cmp	r5, r7
 800e450:	d106      	bne.n	800e460 <_dtoa_r+0xb5c>
 800e452:	f000 fc85 	bl	800ed60 <__multadd>
 800e456:	0005      	movs	r5, r0
 800e458:	0007      	movs	r7, r0
 800e45a:	9b08      	ldr	r3, [sp, #32]
 800e45c:	9307      	str	r3, [sp, #28]
 800e45e:	e784      	b.n	800e36a <_dtoa_r+0xa66>
 800e460:	f000 fc7e 	bl	800ed60 <__multadd>
 800e464:	0039      	movs	r1, r7
 800e466:	0005      	movs	r5, r0
 800e468:	2300      	movs	r3, #0
 800e46a:	220a      	movs	r2, #10
 800e46c:	9804      	ldr	r0, [sp, #16]
 800e46e:	f000 fc77 	bl	800ed60 <__multadd>
 800e472:	0007      	movs	r7, r0
 800e474:	e7f1      	b.n	800e45a <_dtoa_r+0xb56>
 800e476:	9b07      	ldr	r3, [sp, #28]
 800e478:	930b      	str	r3, [sp, #44]	; 0x2c
 800e47a:	2500      	movs	r5, #0
 800e47c:	0031      	movs	r1, r6
 800e47e:	9805      	ldr	r0, [sp, #20]
 800e480:	f7ff f9b0 	bl	800d7e4 <quorem>
 800e484:	9b06      	ldr	r3, [sp, #24]
 800e486:	3030      	adds	r0, #48	; 0x30
 800e488:	5558      	strb	r0, [r3, r5]
 800e48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e48c:	3501      	adds	r5, #1
 800e48e:	0004      	movs	r4, r0
 800e490:	42ab      	cmp	r3, r5
 800e492:	dd07      	ble.n	800e4a4 <_dtoa_r+0xba0>
 800e494:	2300      	movs	r3, #0
 800e496:	220a      	movs	r2, #10
 800e498:	9905      	ldr	r1, [sp, #20]
 800e49a:	9804      	ldr	r0, [sp, #16]
 800e49c:	f000 fc60 	bl	800ed60 <__multadd>
 800e4a0:	9005      	str	r0, [sp, #20]
 800e4a2:	e7eb      	b.n	800e47c <_dtoa_r+0xb78>
 800e4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	2a00      	cmp	r2, #0
 800e4aa:	dd00      	ble.n	800e4ae <_dtoa_r+0xbaa>
 800e4ac:	0013      	movs	r3, r2
 800e4ae:	2500      	movs	r5, #0
 800e4b0:	9a06      	ldr	r2, [sp, #24]
 800e4b2:	18d3      	adds	r3, r2, r3
 800e4b4:	9308      	str	r3, [sp, #32]
 800e4b6:	9905      	ldr	r1, [sp, #20]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	9804      	ldr	r0, [sp, #16]
 800e4bc:	f000 fe4c 	bl	800f158 <__lshift>
 800e4c0:	0031      	movs	r1, r6
 800e4c2:	9005      	str	r0, [sp, #20]
 800e4c4:	f000 feb6 	bl	800f234 <__mcmp>
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	dc9f      	bgt.n	800e40c <_dtoa_r+0xb08>
 800e4cc:	d101      	bne.n	800e4d2 <_dtoa_r+0xbce>
 800e4ce:	07e4      	lsls	r4, r4, #31
 800e4d0:	d49c      	bmi.n	800e40c <_dtoa_r+0xb08>
 800e4d2:	9b08      	ldr	r3, [sp, #32]
 800e4d4:	9308      	str	r3, [sp, #32]
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	781a      	ldrb	r2, [r3, #0]
 800e4da:	2a30      	cmp	r2, #48	; 0x30
 800e4dc:	d0fa      	beq.n	800e4d4 <_dtoa_r+0xbd0>
 800e4de:	e6e6      	b.n	800e2ae <_dtoa_r+0x9aa>
 800e4e0:	9a06      	ldr	r2, [sp, #24]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d193      	bne.n	800e40e <_dtoa_r+0xb0a>
 800e4e6:	9b03      	ldr	r3, [sp, #12]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	9303      	str	r3, [sp, #12]
 800e4ec:	2331      	movs	r3, #49	; 0x31
 800e4ee:	7013      	strb	r3, [r2, #0]
 800e4f0:	e6dd      	b.n	800e2ae <_dtoa_r+0x9aa>
 800e4f2:	4b09      	ldr	r3, [pc, #36]	; (800e518 <_dtoa_r+0xc14>)
 800e4f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e4f6:	9306      	str	r3, [sp, #24]
 800e4f8:	4b08      	ldr	r3, [pc, #32]	; (800e51c <_dtoa_r+0xc18>)
 800e4fa:	2a00      	cmp	r2, #0
 800e4fc:	d001      	beq.n	800e502 <_dtoa_r+0xbfe>
 800e4fe:	f7ff fa49 	bl	800d994 <_dtoa_r+0x90>
 800e502:	f7ff fa49 	bl	800d998 <_dtoa_r+0x94>
 800e506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e508:	2b00      	cmp	r3, #0
 800e50a:	dcb6      	bgt.n	800e47a <_dtoa_r+0xb76>
 800e50c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e50e:	2b02      	cmp	r3, #2
 800e510:	dd00      	ble.n	800e514 <_dtoa_r+0xc10>
 800e512:	e6b6      	b.n	800e282 <_dtoa_r+0x97e>
 800e514:	e7b1      	b.n	800e47a <_dtoa_r+0xb76>
 800e516:	46c0      	nop			; (mov r8, r8)
 800e518:	0801223f 	.word	0x0801223f
 800e51c:	08012247 	.word	0x08012247

0800e520 <_free_r>:
 800e520:	b570      	push	{r4, r5, r6, lr}
 800e522:	0005      	movs	r5, r0
 800e524:	2900      	cmp	r1, #0
 800e526:	d010      	beq.n	800e54a <_free_r+0x2a>
 800e528:	1f0c      	subs	r4, r1, #4
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	da00      	bge.n	800e532 <_free_r+0x12>
 800e530:	18e4      	adds	r4, r4, r3
 800e532:	0028      	movs	r0, r5
 800e534:	f7fd f8d6 	bl	800b6e4 <__malloc_lock>
 800e538:	4a1d      	ldr	r2, [pc, #116]	; (800e5b0 <_free_r+0x90>)
 800e53a:	6813      	ldr	r3, [r2, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d105      	bne.n	800e54c <_free_r+0x2c>
 800e540:	6063      	str	r3, [r4, #4]
 800e542:	6014      	str	r4, [r2, #0]
 800e544:	0028      	movs	r0, r5
 800e546:	f7fd f8d5 	bl	800b6f4 <__malloc_unlock>
 800e54a:	bd70      	pop	{r4, r5, r6, pc}
 800e54c:	42a3      	cmp	r3, r4
 800e54e:	d908      	bls.n	800e562 <_free_r+0x42>
 800e550:	6820      	ldr	r0, [r4, #0]
 800e552:	1821      	adds	r1, r4, r0
 800e554:	428b      	cmp	r3, r1
 800e556:	d1f3      	bne.n	800e540 <_free_r+0x20>
 800e558:	6819      	ldr	r1, [r3, #0]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	1809      	adds	r1, r1, r0
 800e55e:	6021      	str	r1, [r4, #0]
 800e560:	e7ee      	b.n	800e540 <_free_r+0x20>
 800e562:	001a      	movs	r2, r3
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d001      	beq.n	800e56e <_free_r+0x4e>
 800e56a:	42a3      	cmp	r3, r4
 800e56c:	d9f9      	bls.n	800e562 <_free_r+0x42>
 800e56e:	6811      	ldr	r1, [r2, #0]
 800e570:	1850      	adds	r0, r2, r1
 800e572:	42a0      	cmp	r0, r4
 800e574:	d10b      	bne.n	800e58e <_free_r+0x6e>
 800e576:	6820      	ldr	r0, [r4, #0]
 800e578:	1809      	adds	r1, r1, r0
 800e57a:	1850      	adds	r0, r2, r1
 800e57c:	6011      	str	r1, [r2, #0]
 800e57e:	4283      	cmp	r3, r0
 800e580:	d1e0      	bne.n	800e544 <_free_r+0x24>
 800e582:	6818      	ldr	r0, [r3, #0]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	1841      	adds	r1, r0, r1
 800e588:	6011      	str	r1, [r2, #0]
 800e58a:	6053      	str	r3, [r2, #4]
 800e58c:	e7da      	b.n	800e544 <_free_r+0x24>
 800e58e:	42a0      	cmp	r0, r4
 800e590:	d902      	bls.n	800e598 <_free_r+0x78>
 800e592:	230c      	movs	r3, #12
 800e594:	602b      	str	r3, [r5, #0]
 800e596:	e7d5      	b.n	800e544 <_free_r+0x24>
 800e598:	6820      	ldr	r0, [r4, #0]
 800e59a:	1821      	adds	r1, r4, r0
 800e59c:	428b      	cmp	r3, r1
 800e59e:	d103      	bne.n	800e5a8 <_free_r+0x88>
 800e5a0:	6819      	ldr	r1, [r3, #0]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	1809      	adds	r1, r1, r0
 800e5a6:	6021      	str	r1, [r4, #0]
 800e5a8:	6063      	str	r3, [r4, #4]
 800e5aa:	6054      	str	r4, [r2, #4]
 800e5ac:	e7ca      	b.n	800e544 <_free_r+0x24>
 800e5ae:	46c0      	nop			; (mov r8, r8)
 800e5b0:	20006024 	.word	0x20006024

0800e5b4 <rshift>:
 800e5b4:	0002      	movs	r2, r0
 800e5b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5b8:	6904      	ldr	r4, [r0, #16]
 800e5ba:	114b      	asrs	r3, r1, #5
 800e5bc:	b085      	sub	sp, #20
 800e5be:	3214      	adds	r2, #20
 800e5c0:	9302      	str	r3, [sp, #8]
 800e5c2:	114d      	asrs	r5, r1, #5
 800e5c4:	0013      	movs	r3, r2
 800e5c6:	42ac      	cmp	r4, r5
 800e5c8:	dd32      	ble.n	800e630 <rshift+0x7c>
 800e5ca:	261f      	movs	r6, #31
 800e5cc:	000f      	movs	r7, r1
 800e5ce:	114b      	asrs	r3, r1, #5
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	00a5      	lsls	r5, r4, #2
 800e5d4:	18d3      	adds	r3, r2, r3
 800e5d6:	4037      	ands	r7, r6
 800e5d8:	1955      	adds	r5, r2, r5
 800e5da:	9300      	str	r3, [sp, #0]
 800e5dc:	9701      	str	r7, [sp, #4]
 800e5de:	4231      	tst	r1, r6
 800e5e0:	d10d      	bne.n	800e5fe <rshift+0x4a>
 800e5e2:	0016      	movs	r6, r2
 800e5e4:	0019      	movs	r1, r3
 800e5e6:	428d      	cmp	r5, r1
 800e5e8:	d836      	bhi.n	800e658 <rshift+0xa4>
 800e5ea:	9900      	ldr	r1, [sp, #0]
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	3903      	subs	r1, #3
 800e5f0:	428d      	cmp	r5, r1
 800e5f2:	d302      	bcc.n	800e5fa <rshift+0x46>
 800e5f4:	9b02      	ldr	r3, [sp, #8]
 800e5f6:	1ae4      	subs	r4, r4, r3
 800e5f8:	00a3      	lsls	r3, r4, #2
 800e5fa:	18d3      	adds	r3, r2, r3
 800e5fc:	e018      	b.n	800e630 <rshift+0x7c>
 800e5fe:	2120      	movs	r1, #32
 800e600:	9e01      	ldr	r6, [sp, #4]
 800e602:	9f01      	ldr	r7, [sp, #4]
 800e604:	1b89      	subs	r1, r1, r6
 800e606:	9e00      	ldr	r6, [sp, #0]
 800e608:	9103      	str	r1, [sp, #12]
 800e60a:	ce02      	ldmia	r6!, {r1}
 800e60c:	4694      	mov	ip, r2
 800e60e:	40f9      	lsrs	r1, r7
 800e610:	42b5      	cmp	r5, r6
 800e612:	d816      	bhi.n	800e642 <rshift+0x8e>
 800e614:	9e00      	ldr	r6, [sp, #0]
 800e616:	2300      	movs	r3, #0
 800e618:	3601      	adds	r6, #1
 800e61a:	42b5      	cmp	r5, r6
 800e61c:	d303      	bcc.n	800e626 <rshift+0x72>
 800e61e:	9b02      	ldr	r3, [sp, #8]
 800e620:	1ae3      	subs	r3, r4, r3
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	3b04      	subs	r3, #4
 800e626:	18d3      	adds	r3, r2, r3
 800e628:	6019      	str	r1, [r3, #0]
 800e62a:	2900      	cmp	r1, #0
 800e62c:	d000      	beq.n	800e630 <rshift+0x7c>
 800e62e:	3304      	adds	r3, #4
 800e630:	1a99      	subs	r1, r3, r2
 800e632:	1089      	asrs	r1, r1, #2
 800e634:	6101      	str	r1, [r0, #16]
 800e636:	4293      	cmp	r3, r2
 800e638:	d101      	bne.n	800e63e <rshift+0x8a>
 800e63a:	2300      	movs	r3, #0
 800e63c:	6143      	str	r3, [r0, #20]
 800e63e:	b005      	add	sp, #20
 800e640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e642:	6837      	ldr	r7, [r6, #0]
 800e644:	9b03      	ldr	r3, [sp, #12]
 800e646:	409f      	lsls	r7, r3
 800e648:	430f      	orrs	r7, r1
 800e64a:	4661      	mov	r1, ip
 800e64c:	c180      	stmia	r1!, {r7}
 800e64e:	468c      	mov	ip, r1
 800e650:	9b01      	ldr	r3, [sp, #4]
 800e652:	ce02      	ldmia	r6!, {r1}
 800e654:	40d9      	lsrs	r1, r3
 800e656:	e7db      	b.n	800e610 <rshift+0x5c>
 800e658:	c980      	ldmia	r1!, {r7}
 800e65a:	c680      	stmia	r6!, {r7}
 800e65c:	e7c3      	b.n	800e5e6 <rshift+0x32>

0800e65e <__hexdig_fun>:
 800e65e:	0002      	movs	r2, r0
 800e660:	3a30      	subs	r2, #48	; 0x30
 800e662:	0003      	movs	r3, r0
 800e664:	2a09      	cmp	r2, #9
 800e666:	d802      	bhi.n	800e66e <__hexdig_fun+0x10>
 800e668:	3b20      	subs	r3, #32
 800e66a:	b2d8      	uxtb	r0, r3
 800e66c:	4770      	bx	lr
 800e66e:	0002      	movs	r2, r0
 800e670:	3a61      	subs	r2, #97	; 0x61
 800e672:	2a05      	cmp	r2, #5
 800e674:	d801      	bhi.n	800e67a <__hexdig_fun+0x1c>
 800e676:	3b47      	subs	r3, #71	; 0x47
 800e678:	e7f7      	b.n	800e66a <__hexdig_fun+0xc>
 800e67a:	001a      	movs	r2, r3
 800e67c:	3a41      	subs	r2, #65	; 0x41
 800e67e:	2000      	movs	r0, #0
 800e680:	2a05      	cmp	r2, #5
 800e682:	d8f3      	bhi.n	800e66c <__hexdig_fun+0xe>
 800e684:	3b27      	subs	r3, #39	; 0x27
 800e686:	e7f0      	b.n	800e66a <__hexdig_fun+0xc>

0800e688 <__gethex>:
 800e688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e68a:	b089      	sub	sp, #36	; 0x24
 800e68c:	9307      	str	r3, [sp, #28]
 800e68e:	2302      	movs	r3, #2
 800e690:	9201      	str	r2, [sp, #4]
 800e692:	680a      	ldr	r2, [r1, #0]
 800e694:	425b      	negs	r3, r3
 800e696:	9003      	str	r0, [sp, #12]
 800e698:	9106      	str	r1, [sp, #24]
 800e69a:	1c96      	adds	r6, r2, #2
 800e69c:	1a9b      	subs	r3, r3, r2
 800e69e:	199a      	adds	r2, r3, r6
 800e6a0:	9600      	str	r6, [sp, #0]
 800e6a2:	9205      	str	r2, [sp, #20]
 800e6a4:	9a00      	ldr	r2, [sp, #0]
 800e6a6:	3601      	adds	r6, #1
 800e6a8:	7810      	ldrb	r0, [r2, #0]
 800e6aa:	2830      	cmp	r0, #48	; 0x30
 800e6ac:	d0f7      	beq.n	800e69e <__gethex+0x16>
 800e6ae:	f7ff ffd6 	bl	800e65e <__hexdig_fun>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	001d      	movs	r5, r3
 800e6b6:	9302      	str	r3, [sp, #8]
 800e6b8:	4298      	cmp	r0, r3
 800e6ba:	d11d      	bne.n	800e6f8 <__gethex+0x70>
 800e6bc:	2201      	movs	r2, #1
 800e6be:	49a6      	ldr	r1, [pc, #664]	; (800e958 <__gethex+0x2d0>)
 800e6c0:	9800      	ldr	r0, [sp, #0]
 800e6c2:	f7fe feb8 	bl	800d436 <strncmp>
 800e6c6:	0007      	movs	r7, r0
 800e6c8:	42a8      	cmp	r0, r5
 800e6ca:	d169      	bne.n	800e7a0 <__gethex+0x118>
 800e6cc:	9b00      	ldr	r3, [sp, #0]
 800e6ce:	0034      	movs	r4, r6
 800e6d0:	7858      	ldrb	r0, [r3, #1]
 800e6d2:	f7ff ffc4 	bl	800e65e <__hexdig_fun>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	9302      	str	r3, [sp, #8]
 800e6da:	42a8      	cmp	r0, r5
 800e6dc:	d02f      	beq.n	800e73e <__gethex+0xb6>
 800e6de:	9600      	str	r6, [sp, #0]
 800e6e0:	9b00      	ldr	r3, [sp, #0]
 800e6e2:	7818      	ldrb	r0, [r3, #0]
 800e6e4:	2830      	cmp	r0, #48	; 0x30
 800e6e6:	d009      	beq.n	800e6fc <__gethex+0x74>
 800e6e8:	f7ff ffb9 	bl	800e65e <__hexdig_fun>
 800e6ec:	4242      	negs	r2, r0
 800e6ee:	4142      	adcs	r2, r0
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	0035      	movs	r5, r6
 800e6f4:	9202      	str	r2, [sp, #8]
 800e6f6:	9305      	str	r3, [sp, #20]
 800e6f8:	9c00      	ldr	r4, [sp, #0]
 800e6fa:	e004      	b.n	800e706 <__gethex+0x7e>
 800e6fc:	9b00      	ldr	r3, [sp, #0]
 800e6fe:	3301      	adds	r3, #1
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	e7ed      	b.n	800e6e0 <__gethex+0x58>
 800e704:	3401      	adds	r4, #1
 800e706:	7820      	ldrb	r0, [r4, #0]
 800e708:	f7ff ffa9 	bl	800e65e <__hexdig_fun>
 800e70c:	1e07      	subs	r7, r0, #0
 800e70e:	d1f9      	bne.n	800e704 <__gethex+0x7c>
 800e710:	2201      	movs	r2, #1
 800e712:	0020      	movs	r0, r4
 800e714:	4990      	ldr	r1, [pc, #576]	; (800e958 <__gethex+0x2d0>)
 800e716:	f7fe fe8e 	bl	800d436 <strncmp>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d10d      	bne.n	800e73a <__gethex+0xb2>
 800e71e:	2d00      	cmp	r5, #0
 800e720:	d106      	bne.n	800e730 <__gethex+0xa8>
 800e722:	3401      	adds	r4, #1
 800e724:	0025      	movs	r5, r4
 800e726:	7820      	ldrb	r0, [r4, #0]
 800e728:	f7ff ff99 	bl	800e65e <__hexdig_fun>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d102      	bne.n	800e736 <__gethex+0xae>
 800e730:	1b2d      	subs	r5, r5, r4
 800e732:	00af      	lsls	r7, r5, #2
 800e734:	e003      	b.n	800e73e <__gethex+0xb6>
 800e736:	3401      	adds	r4, #1
 800e738:	e7f5      	b.n	800e726 <__gethex+0x9e>
 800e73a:	2d00      	cmp	r5, #0
 800e73c:	d1f8      	bne.n	800e730 <__gethex+0xa8>
 800e73e:	2220      	movs	r2, #32
 800e740:	7823      	ldrb	r3, [r4, #0]
 800e742:	0026      	movs	r6, r4
 800e744:	4393      	bics	r3, r2
 800e746:	2b50      	cmp	r3, #80	; 0x50
 800e748:	d11d      	bne.n	800e786 <__gethex+0xfe>
 800e74a:	7863      	ldrb	r3, [r4, #1]
 800e74c:	2b2b      	cmp	r3, #43	; 0x2b
 800e74e:	d02c      	beq.n	800e7aa <__gethex+0x122>
 800e750:	2b2d      	cmp	r3, #45	; 0x2d
 800e752:	d02e      	beq.n	800e7b2 <__gethex+0x12a>
 800e754:	2300      	movs	r3, #0
 800e756:	1c66      	adds	r6, r4, #1
 800e758:	9304      	str	r3, [sp, #16]
 800e75a:	7830      	ldrb	r0, [r6, #0]
 800e75c:	f7ff ff7f 	bl	800e65e <__hexdig_fun>
 800e760:	1e43      	subs	r3, r0, #1
 800e762:	b2db      	uxtb	r3, r3
 800e764:	2b18      	cmp	r3, #24
 800e766:	d82b      	bhi.n	800e7c0 <__gethex+0x138>
 800e768:	3810      	subs	r0, #16
 800e76a:	0005      	movs	r5, r0
 800e76c:	7870      	ldrb	r0, [r6, #1]
 800e76e:	f7ff ff76 	bl	800e65e <__hexdig_fun>
 800e772:	1e43      	subs	r3, r0, #1
 800e774:	b2db      	uxtb	r3, r3
 800e776:	3601      	adds	r6, #1
 800e778:	2b18      	cmp	r3, #24
 800e77a:	d91c      	bls.n	800e7b6 <__gethex+0x12e>
 800e77c:	9b04      	ldr	r3, [sp, #16]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d000      	beq.n	800e784 <__gethex+0xfc>
 800e782:	426d      	negs	r5, r5
 800e784:	197f      	adds	r7, r7, r5
 800e786:	9b06      	ldr	r3, [sp, #24]
 800e788:	601e      	str	r6, [r3, #0]
 800e78a:	9b02      	ldr	r3, [sp, #8]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d019      	beq.n	800e7c4 <__gethex+0x13c>
 800e790:	2600      	movs	r6, #0
 800e792:	9b05      	ldr	r3, [sp, #20]
 800e794:	42b3      	cmp	r3, r6
 800e796:	d100      	bne.n	800e79a <__gethex+0x112>
 800e798:	3606      	adds	r6, #6
 800e79a:	0030      	movs	r0, r6
 800e79c:	b009      	add	sp, #36	; 0x24
 800e79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	2700      	movs	r7, #0
 800e7a4:	9c00      	ldr	r4, [sp, #0]
 800e7a6:	9302      	str	r3, [sp, #8]
 800e7a8:	e7c9      	b.n	800e73e <__gethex+0xb6>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	9304      	str	r3, [sp, #16]
 800e7ae:	1ca6      	adds	r6, r4, #2
 800e7b0:	e7d3      	b.n	800e75a <__gethex+0xd2>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e7fa      	b.n	800e7ac <__gethex+0x124>
 800e7b6:	230a      	movs	r3, #10
 800e7b8:	435d      	muls	r5, r3
 800e7ba:	182d      	adds	r5, r5, r0
 800e7bc:	3d10      	subs	r5, #16
 800e7be:	e7d5      	b.n	800e76c <__gethex+0xe4>
 800e7c0:	0026      	movs	r6, r4
 800e7c2:	e7e0      	b.n	800e786 <__gethex+0xfe>
 800e7c4:	9b00      	ldr	r3, [sp, #0]
 800e7c6:	9902      	ldr	r1, [sp, #8]
 800e7c8:	1ae3      	subs	r3, r4, r3
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	2b07      	cmp	r3, #7
 800e7ce:	dc0a      	bgt.n	800e7e6 <__gethex+0x15e>
 800e7d0:	9803      	ldr	r0, [sp, #12]
 800e7d2:	f000 fa5d 	bl	800ec90 <_Balloc>
 800e7d6:	1e05      	subs	r5, r0, #0
 800e7d8:	d108      	bne.n	800e7ec <__gethex+0x164>
 800e7da:	002a      	movs	r2, r5
 800e7dc:	21e4      	movs	r1, #228	; 0xe4
 800e7de:	4b5f      	ldr	r3, [pc, #380]	; (800e95c <__gethex+0x2d4>)
 800e7e0:	485f      	ldr	r0, [pc, #380]	; (800e960 <__gethex+0x2d8>)
 800e7e2:	f7fe ffe1 	bl	800d7a8 <__assert_func>
 800e7e6:	3101      	adds	r1, #1
 800e7e8:	105b      	asrs	r3, r3, #1
 800e7ea:	e7ef      	b.n	800e7cc <__gethex+0x144>
 800e7ec:	0003      	movs	r3, r0
 800e7ee:	3314      	adds	r3, #20
 800e7f0:	9302      	str	r3, [sp, #8]
 800e7f2:	9305      	str	r3, [sp, #20]
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	001e      	movs	r6, r3
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	9b00      	ldr	r3, [sp, #0]
 800e7fc:	42a3      	cmp	r3, r4
 800e7fe:	d33f      	bcc.n	800e880 <__gethex+0x1f8>
 800e800:	9c05      	ldr	r4, [sp, #20]
 800e802:	9b02      	ldr	r3, [sp, #8]
 800e804:	c440      	stmia	r4!, {r6}
 800e806:	1ae4      	subs	r4, r4, r3
 800e808:	10a4      	asrs	r4, r4, #2
 800e80a:	0030      	movs	r0, r6
 800e80c:	612c      	str	r4, [r5, #16]
 800e80e:	f000 fb37 	bl	800ee80 <__hi0bits>
 800e812:	9b01      	ldr	r3, [sp, #4]
 800e814:	0164      	lsls	r4, r4, #5
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	1a26      	subs	r6, r4, r0
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	429e      	cmp	r6, r3
 800e81e:	dd51      	ble.n	800e8c4 <__gethex+0x23c>
 800e820:	1af6      	subs	r6, r6, r3
 800e822:	0031      	movs	r1, r6
 800e824:	0028      	movs	r0, r5
 800e826:	f000 fecb 	bl	800f5c0 <__any_on>
 800e82a:	1e04      	subs	r4, r0, #0
 800e82c:	d016      	beq.n	800e85c <__gethex+0x1d4>
 800e82e:	2401      	movs	r4, #1
 800e830:	231f      	movs	r3, #31
 800e832:	0020      	movs	r0, r4
 800e834:	1e72      	subs	r2, r6, #1
 800e836:	4013      	ands	r3, r2
 800e838:	4098      	lsls	r0, r3
 800e83a:	0003      	movs	r3, r0
 800e83c:	1151      	asrs	r1, r2, #5
 800e83e:	9802      	ldr	r0, [sp, #8]
 800e840:	0089      	lsls	r1, r1, #2
 800e842:	5809      	ldr	r1, [r1, r0]
 800e844:	4219      	tst	r1, r3
 800e846:	d009      	beq.n	800e85c <__gethex+0x1d4>
 800e848:	42a2      	cmp	r2, r4
 800e84a:	dd06      	ble.n	800e85a <__gethex+0x1d2>
 800e84c:	0028      	movs	r0, r5
 800e84e:	1eb1      	subs	r1, r6, #2
 800e850:	f000 feb6 	bl	800f5c0 <__any_on>
 800e854:	3402      	adds	r4, #2
 800e856:	2800      	cmp	r0, #0
 800e858:	d100      	bne.n	800e85c <__gethex+0x1d4>
 800e85a:	2402      	movs	r4, #2
 800e85c:	0031      	movs	r1, r6
 800e85e:	0028      	movs	r0, r5
 800e860:	f7ff fea8 	bl	800e5b4 <rshift>
 800e864:	19bf      	adds	r7, r7, r6
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	42bb      	cmp	r3, r7
 800e86c:	da3a      	bge.n	800e8e4 <__gethex+0x25c>
 800e86e:	0029      	movs	r1, r5
 800e870:	9803      	ldr	r0, [sp, #12]
 800e872:	f000 fa51 	bl	800ed18 <_Bfree>
 800e876:	2300      	movs	r3, #0
 800e878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e87a:	26a3      	movs	r6, #163	; 0xa3
 800e87c:	6013      	str	r3, [r2, #0]
 800e87e:	e78c      	b.n	800e79a <__gethex+0x112>
 800e880:	3c01      	subs	r4, #1
 800e882:	7823      	ldrb	r3, [r4, #0]
 800e884:	2b2e      	cmp	r3, #46	; 0x2e
 800e886:	d012      	beq.n	800e8ae <__gethex+0x226>
 800e888:	9b04      	ldr	r3, [sp, #16]
 800e88a:	2b20      	cmp	r3, #32
 800e88c:	d104      	bne.n	800e898 <__gethex+0x210>
 800e88e:	9b05      	ldr	r3, [sp, #20]
 800e890:	c340      	stmia	r3!, {r6}
 800e892:	2600      	movs	r6, #0
 800e894:	9305      	str	r3, [sp, #20]
 800e896:	9604      	str	r6, [sp, #16]
 800e898:	7820      	ldrb	r0, [r4, #0]
 800e89a:	f7ff fee0 	bl	800e65e <__hexdig_fun>
 800e89e:	230f      	movs	r3, #15
 800e8a0:	4018      	ands	r0, r3
 800e8a2:	9b04      	ldr	r3, [sp, #16]
 800e8a4:	4098      	lsls	r0, r3
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	4306      	orrs	r6, r0
 800e8aa:	9304      	str	r3, [sp, #16]
 800e8ac:	e7a5      	b.n	800e7fa <__gethex+0x172>
 800e8ae:	9b00      	ldr	r3, [sp, #0]
 800e8b0:	42a3      	cmp	r3, r4
 800e8b2:	d8e9      	bhi.n	800e888 <__gethex+0x200>
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	0020      	movs	r0, r4
 800e8b8:	4927      	ldr	r1, [pc, #156]	; (800e958 <__gethex+0x2d0>)
 800e8ba:	f7fe fdbc 	bl	800d436 <strncmp>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d1e2      	bne.n	800e888 <__gethex+0x200>
 800e8c2:	e79a      	b.n	800e7fa <__gethex+0x172>
 800e8c4:	9b00      	ldr	r3, [sp, #0]
 800e8c6:	2400      	movs	r4, #0
 800e8c8:	429e      	cmp	r6, r3
 800e8ca:	dacc      	bge.n	800e866 <__gethex+0x1de>
 800e8cc:	1b9e      	subs	r6, r3, r6
 800e8ce:	0029      	movs	r1, r5
 800e8d0:	0032      	movs	r2, r6
 800e8d2:	9803      	ldr	r0, [sp, #12]
 800e8d4:	f000 fc40 	bl	800f158 <__lshift>
 800e8d8:	0003      	movs	r3, r0
 800e8da:	3314      	adds	r3, #20
 800e8dc:	0005      	movs	r5, r0
 800e8de:	1bbf      	subs	r7, r7, r6
 800e8e0:	9302      	str	r3, [sp, #8]
 800e8e2:	e7c0      	b.n	800e866 <__gethex+0x1de>
 800e8e4:	9b01      	ldr	r3, [sp, #4]
 800e8e6:	685e      	ldr	r6, [r3, #4]
 800e8e8:	42be      	cmp	r6, r7
 800e8ea:	dd70      	ble.n	800e9ce <__gethex+0x346>
 800e8ec:	9b00      	ldr	r3, [sp, #0]
 800e8ee:	1bf6      	subs	r6, r6, r7
 800e8f0:	42b3      	cmp	r3, r6
 800e8f2:	dc37      	bgt.n	800e964 <__gethex+0x2dc>
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	d024      	beq.n	800e946 <__gethex+0x2be>
 800e8fc:	2b03      	cmp	r3, #3
 800e8fe:	d026      	beq.n	800e94e <__gethex+0x2c6>
 800e900:	2b01      	cmp	r3, #1
 800e902:	d117      	bne.n	800e934 <__gethex+0x2ac>
 800e904:	9b00      	ldr	r3, [sp, #0]
 800e906:	42b3      	cmp	r3, r6
 800e908:	d114      	bne.n	800e934 <__gethex+0x2ac>
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d10b      	bne.n	800e926 <__gethex+0x29e>
 800e90e:	9b01      	ldr	r3, [sp, #4]
 800e910:	9a07      	ldr	r2, [sp, #28]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	2662      	movs	r6, #98	; 0x62
 800e916:	6013      	str	r3, [r2, #0]
 800e918:	2301      	movs	r3, #1
 800e91a:	9a02      	ldr	r2, [sp, #8]
 800e91c:	612b      	str	r3, [r5, #16]
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e922:	601d      	str	r5, [r3, #0]
 800e924:	e739      	b.n	800e79a <__gethex+0x112>
 800e926:	9900      	ldr	r1, [sp, #0]
 800e928:	0028      	movs	r0, r5
 800e92a:	3901      	subs	r1, #1
 800e92c:	f000 fe48 	bl	800f5c0 <__any_on>
 800e930:	2800      	cmp	r0, #0
 800e932:	d1ec      	bne.n	800e90e <__gethex+0x286>
 800e934:	0029      	movs	r1, r5
 800e936:	9803      	ldr	r0, [sp, #12]
 800e938:	f000 f9ee 	bl	800ed18 <_Bfree>
 800e93c:	2300      	movs	r3, #0
 800e93e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e940:	2650      	movs	r6, #80	; 0x50
 800e942:	6013      	str	r3, [r2, #0]
 800e944:	e729      	b.n	800e79a <__gethex+0x112>
 800e946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1f3      	bne.n	800e934 <__gethex+0x2ac>
 800e94c:	e7df      	b.n	800e90e <__gethex+0x286>
 800e94e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e950:	2b00      	cmp	r3, #0
 800e952:	d1dc      	bne.n	800e90e <__gethex+0x286>
 800e954:	e7ee      	b.n	800e934 <__gethex+0x2ac>
 800e956:	46c0      	nop			; (mov r8, r8)
 800e958:	08011ff8 	.word	0x08011ff8
 800e95c:	080122a4 	.word	0x080122a4
 800e960:	080122b5 	.word	0x080122b5
 800e964:	1e77      	subs	r7, r6, #1
 800e966:	2c00      	cmp	r4, #0
 800e968:	d12f      	bne.n	800e9ca <__gethex+0x342>
 800e96a:	2f00      	cmp	r7, #0
 800e96c:	d004      	beq.n	800e978 <__gethex+0x2f0>
 800e96e:	0039      	movs	r1, r7
 800e970:	0028      	movs	r0, r5
 800e972:	f000 fe25 	bl	800f5c0 <__any_on>
 800e976:	0004      	movs	r4, r0
 800e978:	231f      	movs	r3, #31
 800e97a:	117a      	asrs	r2, r7, #5
 800e97c:	401f      	ands	r7, r3
 800e97e:	3b1e      	subs	r3, #30
 800e980:	40bb      	lsls	r3, r7
 800e982:	9902      	ldr	r1, [sp, #8]
 800e984:	0092      	lsls	r2, r2, #2
 800e986:	5852      	ldr	r2, [r2, r1]
 800e988:	421a      	tst	r2, r3
 800e98a:	d001      	beq.n	800e990 <__gethex+0x308>
 800e98c:	2302      	movs	r3, #2
 800e98e:	431c      	orrs	r4, r3
 800e990:	9b00      	ldr	r3, [sp, #0]
 800e992:	0031      	movs	r1, r6
 800e994:	1b9b      	subs	r3, r3, r6
 800e996:	2602      	movs	r6, #2
 800e998:	0028      	movs	r0, r5
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	f7ff fe0a 	bl	800e5b4 <rshift>
 800e9a0:	9b01      	ldr	r3, [sp, #4]
 800e9a2:	685f      	ldr	r7, [r3, #4]
 800e9a4:	2c00      	cmp	r4, #0
 800e9a6:	d041      	beq.n	800ea2c <__gethex+0x3a4>
 800e9a8:	9b01      	ldr	r3, [sp, #4]
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d010      	beq.n	800e9d2 <__gethex+0x34a>
 800e9b0:	2b03      	cmp	r3, #3
 800e9b2:	d012      	beq.n	800e9da <__gethex+0x352>
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d106      	bne.n	800e9c6 <__gethex+0x33e>
 800e9b8:	07a2      	lsls	r2, r4, #30
 800e9ba:	d504      	bpl.n	800e9c6 <__gethex+0x33e>
 800e9bc:	9a02      	ldr	r2, [sp, #8]
 800e9be:	6812      	ldr	r2, [r2, #0]
 800e9c0:	4314      	orrs	r4, r2
 800e9c2:	421c      	tst	r4, r3
 800e9c4:	d10c      	bne.n	800e9e0 <__gethex+0x358>
 800e9c6:	2310      	movs	r3, #16
 800e9c8:	e02f      	b.n	800ea2a <__gethex+0x3a2>
 800e9ca:	2401      	movs	r4, #1
 800e9cc:	e7d4      	b.n	800e978 <__gethex+0x2f0>
 800e9ce:	2601      	movs	r6, #1
 800e9d0:	e7e8      	b.n	800e9a4 <__gethex+0x31c>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9d6:	1a9b      	subs	r3, r3, r2
 800e9d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d0f2      	beq.n	800e9c6 <__gethex+0x33e>
 800e9e0:	692b      	ldr	r3, [r5, #16]
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	9302      	str	r3, [sp, #8]
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	9304      	str	r3, [sp, #16]
 800e9ea:	002b      	movs	r3, r5
 800e9ec:	9a04      	ldr	r2, [sp, #16]
 800e9ee:	3314      	adds	r3, #20
 800e9f0:	1899      	adds	r1, r3, r2
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	1c54      	adds	r4, r2, #1
 800e9f6:	d01e      	beq.n	800ea36 <__gethex+0x3ae>
 800e9f8:	3201      	adds	r2, #1
 800e9fa:	601a      	str	r2, [r3, #0]
 800e9fc:	002b      	movs	r3, r5
 800e9fe:	3314      	adds	r3, #20
 800ea00:	2e02      	cmp	r6, #2
 800ea02:	d141      	bne.n	800ea88 <__gethex+0x400>
 800ea04:	9a01      	ldr	r2, [sp, #4]
 800ea06:	9900      	ldr	r1, [sp, #0]
 800ea08:	6812      	ldr	r2, [r2, #0]
 800ea0a:	3a01      	subs	r2, #1
 800ea0c:	428a      	cmp	r2, r1
 800ea0e:	d10b      	bne.n	800ea28 <__gethex+0x3a0>
 800ea10:	221f      	movs	r2, #31
 800ea12:	9800      	ldr	r0, [sp, #0]
 800ea14:	1149      	asrs	r1, r1, #5
 800ea16:	4002      	ands	r2, r0
 800ea18:	2001      	movs	r0, #1
 800ea1a:	0004      	movs	r4, r0
 800ea1c:	4094      	lsls	r4, r2
 800ea1e:	0089      	lsls	r1, r1, #2
 800ea20:	58cb      	ldr	r3, [r1, r3]
 800ea22:	4223      	tst	r3, r4
 800ea24:	d000      	beq.n	800ea28 <__gethex+0x3a0>
 800ea26:	2601      	movs	r6, #1
 800ea28:	2320      	movs	r3, #32
 800ea2a:	431e      	orrs	r6, r3
 800ea2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea2e:	601d      	str	r5, [r3, #0]
 800ea30:	9b07      	ldr	r3, [sp, #28]
 800ea32:	601f      	str	r7, [r3, #0]
 800ea34:	e6b1      	b.n	800e79a <__gethex+0x112>
 800ea36:	c301      	stmia	r3!, {r0}
 800ea38:	4299      	cmp	r1, r3
 800ea3a:	d8da      	bhi.n	800e9f2 <__gethex+0x36a>
 800ea3c:	68ab      	ldr	r3, [r5, #8]
 800ea3e:	9a02      	ldr	r2, [sp, #8]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	db18      	blt.n	800ea76 <__gethex+0x3ee>
 800ea44:	6869      	ldr	r1, [r5, #4]
 800ea46:	9803      	ldr	r0, [sp, #12]
 800ea48:	3101      	adds	r1, #1
 800ea4a:	f000 f921 	bl	800ec90 <_Balloc>
 800ea4e:	1e04      	subs	r4, r0, #0
 800ea50:	d104      	bne.n	800ea5c <__gethex+0x3d4>
 800ea52:	0022      	movs	r2, r4
 800ea54:	2184      	movs	r1, #132	; 0x84
 800ea56:	4b1c      	ldr	r3, [pc, #112]	; (800eac8 <__gethex+0x440>)
 800ea58:	481c      	ldr	r0, [pc, #112]	; (800eacc <__gethex+0x444>)
 800ea5a:	e6c2      	b.n	800e7e2 <__gethex+0x15a>
 800ea5c:	0029      	movs	r1, r5
 800ea5e:	692a      	ldr	r2, [r5, #16]
 800ea60:	310c      	adds	r1, #12
 800ea62:	3202      	adds	r2, #2
 800ea64:	0092      	lsls	r2, r2, #2
 800ea66:	300c      	adds	r0, #12
 800ea68:	f7fe fe8a 	bl	800d780 <memcpy>
 800ea6c:	0029      	movs	r1, r5
 800ea6e:	9803      	ldr	r0, [sp, #12]
 800ea70:	f000 f952 	bl	800ed18 <_Bfree>
 800ea74:	0025      	movs	r5, r4
 800ea76:	692b      	ldr	r3, [r5, #16]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	612a      	str	r2, [r5, #16]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	3304      	adds	r3, #4
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	18eb      	adds	r3, r5, r3
 800ea84:	605a      	str	r2, [r3, #4]
 800ea86:	e7b9      	b.n	800e9fc <__gethex+0x374>
 800ea88:	692a      	ldr	r2, [r5, #16]
 800ea8a:	9902      	ldr	r1, [sp, #8]
 800ea8c:	428a      	cmp	r2, r1
 800ea8e:	dd09      	ble.n	800eaa4 <__gethex+0x41c>
 800ea90:	2101      	movs	r1, #1
 800ea92:	0028      	movs	r0, r5
 800ea94:	f7ff fd8e 	bl	800e5b4 <rshift>
 800ea98:	9b01      	ldr	r3, [sp, #4]
 800ea9a:	3701      	adds	r7, #1
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	42bb      	cmp	r3, r7
 800eaa0:	dac1      	bge.n	800ea26 <__gethex+0x39e>
 800eaa2:	e6e4      	b.n	800e86e <__gethex+0x1e6>
 800eaa4:	221f      	movs	r2, #31
 800eaa6:	9c00      	ldr	r4, [sp, #0]
 800eaa8:	9900      	ldr	r1, [sp, #0]
 800eaaa:	2601      	movs	r6, #1
 800eaac:	4014      	ands	r4, r2
 800eaae:	4211      	tst	r1, r2
 800eab0:	d0ba      	beq.n	800ea28 <__gethex+0x3a0>
 800eab2:	9a04      	ldr	r2, [sp, #16]
 800eab4:	189b      	adds	r3, r3, r2
 800eab6:	3b04      	subs	r3, #4
 800eab8:	6818      	ldr	r0, [r3, #0]
 800eaba:	f000 f9e1 	bl	800ee80 <__hi0bits>
 800eabe:	2320      	movs	r3, #32
 800eac0:	1b1b      	subs	r3, r3, r4
 800eac2:	4298      	cmp	r0, r3
 800eac4:	dbe4      	blt.n	800ea90 <__gethex+0x408>
 800eac6:	e7af      	b.n	800ea28 <__gethex+0x3a0>
 800eac8:	080122a4 	.word	0x080122a4
 800eacc:	080122b5 	.word	0x080122b5

0800ead0 <L_shift>:
 800ead0:	2308      	movs	r3, #8
 800ead2:	b570      	push	{r4, r5, r6, lr}
 800ead4:	2520      	movs	r5, #32
 800ead6:	1a9a      	subs	r2, r3, r2
 800ead8:	0092      	lsls	r2, r2, #2
 800eada:	1aad      	subs	r5, r5, r2
 800eadc:	6843      	ldr	r3, [r0, #4]
 800eade:	6804      	ldr	r4, [r0, #0]
 800eae0:	001e      	movs	r6, r3
 800eae2:	40ae      	lsls	r6, r5
 800eae4:	40d3      	lsrs	r3, r2
 800eae6:	4334      	orrs	r4, r6
 800eae8:	6004      	str	r4, [r0, #0]
 800eaea:	6043      	str	r3, [r0, #4]
 800eaec:	3004      	adds	r0, #4
 800eaee:	4288      	cmp	r0, r1
 800eaf0:	d3f4      	bcc.n	800eadc <L_shift+0xc>
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}

0800eaf4 <__match>:
 800eaf4:	b530      	push	{r4, r5, lr}
 800eaf6:	6803      	ldr	r3, [r0, #0]
 800eaf8:	780c      	ldrb	r4, [r1, #0]
 800eafa:	3301      	adds	r3, #1
 800eafc:	2c00      	cmp	r4, #0
 800eafe:	d102      	bne.n	800eb06 <__match+0x12>
 800eb00:	6003      	str	r3, [r0, #0]
 800eb02:	2001      	movs	r0, #1
 800eb04:	bd30      	pop	{r4, r5, pc}
 800eb06:	781a      	ldrb	r2, [r3, #0]
 800eb08:	0015      	movs	r5, r2
 800eb0a:	3d41      	subs	r5, #65	; 0x41
 800eb0c:	2d19      	cmp	r5, #25
 800eb0e:	d800      	bhi.n	800eb12 <__match+0x1e>
 800eb10:	3220      	adds	r2, #32
 800eb12:	3101      	adds	r1, #1
 800eb14:	42a2      	cmp	r2, r4
 800eb16:	d0ef      	beq.n	800eaf8 <__match+0x4>
 800eb18:	2000      	movs	r0, #0
 800eb1a:	e7f3      	b.n	800eb04 <__match+0x10>

0800eb1c <__hexnan>:
 800eb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1e:	680b      	ldr	r3, [r1, #0]
 800eb20:	b08b      	sub	sp, #44	; 0x2c
 800eb22:	9201      	str	r2, [sp, #4]
 800eb24:	9901      	ldr	r1, [sp, #4]
 800eb26:	115a      	asrs	r2, r3, #5
 800eb28:	0092      	lsls	r2, r2, #2
 800eb2a:	188a      	adds	r2, r1, r2
 800eb2c:	9202      	str	r2, [sp, #8]
 800eb2e:	0019      	movs	r1, r3
 800eb30:	221f      	movs	r2, #31
 800eb32:	4011      	ands	r1, r2
 800eb34:	9008      	str	r0, [sp, #32]
 800eb36:	9106      	str	r1, [sp, #24]
 800eb38:	4213      	tst	r3, r2
 800eb3a:	d002      	beq.n	800eb42 <__hexnan+0x26>
 800eb3c:	9b02      	ldr	r3, [sp, #8]
 800eb3e:	3304      	adds	r3, #4
 800eb40:	9302      	str	r3, [sp, #8]
 800eb42:	9b02      	ldr	r3, [sp, #8]
 800eb44:	2500      	movs	r5, #0
 800eb46:	1f1f      	subs	r7, r3, #4
 800eb48:	003e      	movs	r6, r7
 800eb4a:	003c      	movs	r4, r7
 800eb4c:	9b08      	ldr	r3, [sp, #32]
 800eb4e:	603d      	str	r5, [r7, #0]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	9507      	str	r5, [sp, #28]
 800eb54:	9305      	str	r3, [sp, #20]
 800eb56:	9503      	str	r5, [sp, #12]
 800eb58:	9b05      	ldr	r3, [sp, #20]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb5e:	9b05      	ldr	r3, [sp, #20]
 800eb60:	785b      	ldrb	r3, [r3, #1]
 800eb62:	9304      	str	r3, [sp, #16]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d028      	beq.n	800ebba <__hexnan+0x9e>
 800eb68:	9804      	ldr	r0, [sp, #16]
 800eb6a:	f7ff fd78 	bl	800e65e <__hexdig_fun>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d154      	bne.n	800ec1c <__hexnan+0x100>
 800eb72:	9b04      	ldr	r3, [sp, #16]
 800eb74:	2b20      	cmp	r3, #32
 800eb76:	d819      	bhi.n	800ebac <__hexnan+0x90>
 800eb78:	9b03      	ldr	r3, [sp, #12]
 800eb7a:	9a07      	ldr	r2, [sp, #28]
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	dd12      	ble.n	800eba6 <__hexnan+0x8a>
 800eb80:	42b4      	cmp	r4, r6
 800eb82:	d206      	bcs.n	800eb92 <__hexnan+0x76>
 800eb84:	2d07      	cmp	r5, #7
 800eb86:	dc04      	bgt.n	800eb92 <__hexnan+0x76>
 800eb88:	002a      	movs	r2, r5
 800eb8a:	0031      	movs	r1, r6
 800eb8c:	0020      	movs	r0, r4
 800eb8e:	f7ff ff9f 	bl	800ead0 <L_shift>
 800eb92:	9b01      	ldr	r3, [sp, #4]
 800eb94:	2508      	movs	r5, #8
 800eb96:	429c      	cmp	r4, r3
 800eb98:	d905      	bls.n	800eba6 <__hexnan+0x8a>
 800eb9a:	1f26      	subs	r6, r4, #4
 800eb9c:	2500      	movs	r5, #0
 800eb9e:	0034      	movs	r4, r6
 800eba0:	9b03      	ldr	r3, [sp, #12]
 800eba2:	6035      	str	r5, [r6, #0]
 800eba4:	9307      	str	r3, [sp, #28]
 800eba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba8:	9305      	str	r3, [sp, #20]
 800ebaa:	e7d5      	b.n	800eb58 <__hexnan+0x3c>
 800ebac:	9b04      	ldr	r3, [sp, #16]
 800ebae:	2b29      	cmp	r3, #41	; 0x29
 800ebb0:	d159      	bne.n	800ec66 <__hexnan+0x14a>
 800ebb2:	9b05      	ldr	r3, [sp, #20]
 800ebb4:	9a08      	ldr	r2, [sp, #32]
 800ebb6:	3302      	adds	r3, #2
 800ebb8:	6013      	str	r3, [r2, #0]
 800ebba:	9b03      	ldr	r3, [sp, #12]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d052      	beq.n	800ec66 <__hexnan+0x14a>
 800ebc0:	42b4      	cmp	r4, r6
 800ebc2:	d206      	bcs.n	800ebd2 <__hexnan+0xb6>
 800ebc4:	2d07      	cmp	r5, #7
 800ebc6:	dc04      	bgt.n	800ebd2 <__hexnan+0xb6>
 800ebc8:	002a      	movs	r2, r5
 800ebca:	0031      	movs	r1, r6
 800ebcc:	0020      	movs	r0, r4
 800ebce:	f7ff ff7f 	bl	800ead0 <L_shift>
 800ebd2:	9b01      	ldr	r3, [sp, #4]
 800ebd4:	429c      	cmp	r4, r3
 800ebd6:	d935      	bls.n	800ec44 <__hexnan+0x128>
 800ebd8:	001a      	movs	r2, r3
 800ebda:	0023      	movs	r3, r4
 800ebdc:	cb02      	ldmia	r3!, {r1}
 800ebde:	c202      	stmia	r2!, {r1}
 800ebe0:	429f      	cmp	r7, r3
 800ebe2:	d2fb      	bcs.n	800ebdc <__hexnan+0xc0>
 800ebe4:	9b02      	ldr	r3, [sp, #8]
 800ebe6:	1c62      	adds	r2, r4, #1
 800ebe8:	1ed9      	subs	r1, r3, #3
 800ebea:	2304      	movs	r3, #4
 800ebec:	4291      	cmp	r1, r2
 800ebee:	d305      	bcc.n	800ebfc <__hexnan+0xe0>
 800ebf0:	9b02      	ldr	r3, [sp, #8]
 800ebf2:	3b04      	subs	r3, #4
 800ebf4:	1b1b      	subs	r3, r3, r4
 800ebf6:	089b      	lsrs	r3, r3, #2
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	9a01      	ldr	r2, [sp, #4]
 800ebfe:	18d3      	adds	r3, r2, r3
 800ec00:	2200      	movs	r2, #0
 800ec02:	c304      	stmia	r3!, {r2}
 800ec04:	429f      	cmp	r7, r3
 800ec06:	d2fc      	bcs.n	800ec02 <__hexnan+0xe6>
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d104      	bne.n	800ec18 <__hexnan+0xfc>
 800ec0e:	9b01      	ldr	r3, [sp, #4]
 800ec10:	429f      	cmp	r7, r3
 800ec12:	d126      	bne.n	800ec62 <__hexnan+0x146>
 800ec14:	2301      	movs	r3, #1
 800ec16:	603b      	str	r3, [r7, #0]
 800ec18:	2005      	movs	r0, #5
 800ec1a:	e025      	b.n	800ec68 <__hexnan+0x14c>
 800ec1c:	9b03      	ldr	r3, [sp, #12]
 800ec1e:	3501      	adds	r5, #1
 800ec20:	3301      	adds	r3, #1
 800ec22:	9303      	str	r3, [sp, #12]
 800ec24:	2d08      	cmp	r5, #8
 800ec26:	dd06      	ble.n	800ec36 <__hexnan+0x11a>
 800ec28:	9b01      	ldr	r3, [sp, #4]
 800ec2a:	429c      	cmp	r4, r3
 800ec2c:	d9bb      	bls.n	800eba6 <__hexnan+0x8a>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	2501      	movs	r5, #1
 800ec32:	3c04      	subs	r4, #4
 800ec34:	6023      	str	r3, [r4, #0]
 800ec36:	220f      	movs	r2, #15
 800ec38:	6823      	ldr	r3, [r4, #0]
 800ec3a:	4010      	ands	r0, r2
 800ec3c:	011b      	lsls	r3, r3, #4
 800ec3e:	4303      	orrs	r3, r0
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	e7b0      	b.n	800eba6 <__hexnan+0x8a>
 800ec44:	9b06      	ldr	r3, [sp, #24]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d0de      	beq.n	800ec08 <__hexnan+0xec>
 800ec4a:	2320      	movs	r3, #32
 800ec4c:	9a06      	ldr	r2, [sp, #24]
 800ec4e:	9902      	ldr	r1, [sp, #8]
 800ec50:	1a9b      	subs	r3, r3, r2
 800ec52:	2201      	movs	r2, #1
 800ec54:	4252      	negs	r2, r2
 800ec56:	40da      	lsrs	r2, r3
 800ec58:	3904      	subs	r1, #4
 800ec5a:	680b      	ldr	r3, [r1, #0]
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	600b      	str	r3, [r1, #0]
 800ec60:	e7d2      	b.n	800ec08 <__hexnan+0xec>
 800ec62:	3f04      	subs	r7, #4
 800ec64:	e7d0      	b.n	800ec08 <__hexnan+0xec>
 800ec66:	2004      	movs	r0, #4
 800ec68:	b00b      	add	sp, #44	; 0x2c
 800ec6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec6c <__ascii_mbtowc>:
 800ec6c:	b082      	sub	sp, #8
 800ec6e:	2900      	cmp	r1, #0
 800ec70:	d100      	bne.n	800ec74 <__ascii_mbtowc+0x8>
 800ec72:	a901      	add	r1, sp, #4
 800ec74:	1e10      	subs	r0, r2, #0
 800ec76:	d006      	beq.n	800ec86 <__ascii_mbtowc+0x1a>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d006      	beq.n	800ec8a <__ascii_mbtowc+0x1e>
 800ec7c:	7813      	ldrb	r3, [r2, #0]
 800ec7e:	600b      	str	r3, [r1, #0]
 800ec80:	7810      	ldrb	r0, [r2, #0]
 800ec82:	1e43      	subs	r3, r0, #1
 800ec84:	4198      	sbcs	r0, r3
 800ec86:	b002      	add	sp, #8
 800ec88:	4770      	bx	lr
 800ec8a:	2002      	movs	r0, #2
 800ec8c:	4240      	negs	r0, r0
 800ec8e:	e7fa      	b.n	800ec86 <__ascii_mbtowc+0x1a>

0800ec90 <_Balloc>:
 800ec90:	b570      	push	{r4, r5, r6, lr}
 800ec92:	69c5      	ldr	r5, [r0, #28]
 800ec94:	0006      	movs	r6, r0
 800ec96:	000c      	movs	r4, r1
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	d10e      	bne.n	800ecba <_Balloc+0x2a>
 800ec9c:	2010      	movs	r0, #16
 800ec9e:	f7fc fc73 	bl	800b588 <malloc>
 800eca2:	1e02      	subs	r2, r0, #0
 800eca4:	61f0      	str	r0, [r6, #28]
 800eca6:	d104      	bne.n	800ecb2 <_Balloc+0x22>
 800eca8:	216b      	movs	r1, #107	; 0x6b
 800ecaa:	4b19      	ldr	r3, [pc, #100]	; (800ed10 <_Balloc+0x80>)
 800ecac:	4819      	ldr	r0, [pc, #100]	; (800ed14 <_Balloc+0x84>)
 800ecae:	f7fe fd7b 	bl	800d7a8 <__assert_func>
 800ecb2:	6045      	str	r5, [r0, #4]
 800ecb4:	6085      	str	r5, [r0, #8]
 800ecb6:	6005      	str	r5, [r0, #0]
 800ecb8:	60c5      	str	r5, [r0, #12]
 800ecba:	69f5      	ldr	r5, [r6, #28]
 800ecbc:	68eb      	ldr	r3, [r5, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d013      	beq.n	800ecea <_Balloc+0x5a>
 800ecc2:	69f3      	ldr	r3, [r6, #28]
 800ecc4:	00a2      	lsls	r2, r4, #2
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	189b      	adds	r3, r3, r2
 800ecca:	6818      	ldr	r0, [r3, #0]
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d118      	bne.n	800ed02 <_Balloc+0x72>
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	000d      	movs	r5, r1
 800ecd4:	40a5      	lsls	r5, r4
 800ecd6:	1d6a      	adds	r2, r5, #5
 800ecd8:	0030      	movs	r0, r6
 800ecda:	0092      	lsls	r2, r2, #2
 800ecdc:	f000 fee2 	bl	800faa4 <_calloc_r>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d00c      	beq.n	800ecfe <_Balloc+0x6e>
 800ece4:	6044      	str	r4, [r0, #4]
 800ece6:	6085      	str	r5, [r0, #8]
 800ece8:	e00d      	b.n	800ed06 <_Balloc+0x76>
 800ecea:	2221      	movs	r2, #33	; 0x21
 800ecec:	2104      	movs	r1, #4
 800ecee:	0030      	movs	r0, r6
 800ecf0:	f000 fed8 	bl	800faa4 <_calloc_r>
 800ecf4:	69f3      	ldr	r3, [r6, #28]
 800ecf6:	60e8      	str	r0, [r5, #12]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1e1      	bne.n	800ecc2 <_Balloc+0x32>
 800ecfe:	2000      	movs	r0, #0
 800ed00:	bd70      	pop	{r4, r5, r6, pc}
 800ed02:	6802      	ldr	r2, [r0, #0]
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	2300      	movs	r3, #0
 800ed08:	6103      	str	r3, [r0, #16]
 800ed0a:	60c3      	str	r3, [r0, #12]
 800ed0c:	e7f8      	b.n	800ed00 <_Balloc+0x70>
 800ed0e:	46c0      	nop			; (mov r8, r8)
 800ed10:	0801218a 	.word	0x0801218a
 800ed14:	08012315 	.word	0x08012315

0800ed18 <_Bfree>:
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	69c6      	ldr	r6, [r0, #28]
 800ed1c:	0005      	movs	r5, r0
 800ed1e:	000c      	movs	r4, r1
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	d10e      	bne.n	800ed42 <_Bfree+0x2a>
 800ed24:	2010      	movs	r0, #16
 800ed26:	f7fc fc2f 	bl	800b588 <malloc>
 800ed2a:	1e02      	subs	r2, r0, #0
 800ed2c:	61e8      	str	r0, [r5, #28]
 800ed2e:	d104      	bne.n	800ed3a <_Bfree+0x22>
 800ed30:	218f      	movs	r1, #143	; 0x8f
 800ed32:	4b09      	ldr	r3, [pc, #36]	; (800ed58 <_Bfree+0x40>)
 800ed34:	4809      	ldr	r0, [pc, #36]	; (800ed5c <_Bfree+0x44>)
 800ed36:	f7fe fd37 	bl	800d7a8 <__assert_func>
 800ed3a:	6046      	str	r6, [r0, #4]
 800ed3c:	6086      	str	r6, [r0, #8]
 800ed3e:	6006      	str	r6, [r0, #0]
 800ed40:	60c6      	str	r6, [r0, #12]
 800ed42:	2c00      	cmp	r4, #0
 800ed44:	d007      	beq.n	800ed56 <_Bfree+0x3e>
 800ed46:	69eb      	ldr	r3, [r5, #28]
 800ed48:	6862      	ldr	r2, [r4, #4]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	0092      	lsls	r2, r2, #2
 800ed4e:	189b      	adds	r3, r3, r2
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	6022      	str	r2, [r4, #0]
 800ed54:	601c      	str	r4, [r3, #0]
 800ed56:	bd70      	pop	{r4, r5, r6, pc}
 800ed58:	0801218a 	.word	0x0801218a
 800ed5c:	08012315 	.word	0x08012315

0800ed60 <__multadd>:
 800ed60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed62:	000e      	movs	r6, r1
 800ed64:	9001      	str	r0, [sp, #4]
 800ed66:	000c      	movs	r4, r1
 800ed68:	001d      	movs	r5, r3
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	690f      	ldr	r7, [r1, #16]
 800ed6e:	3614      	adds	r6, #20
 800ed70:	6833      	ldr	r3, [r6, #0]
 800ed72:	3001      	adds	r0, #1
 800ed74:	b299      	uxth	r1, r3
 800ed76:	4351      	muls	r1, r2
 800ed78:	0c1b      	lsrs	r3, r3, #16
 800ed7a:	4353      	muls	r3, r2
 800ed7c:	1949      	adds	r1, r1, r5
 800ed7e:	0c0d      	lsrs	r5, r1, #16
 800ed80:	195b      	adds	r3, r3, r5
 800ed82:	0c1d      	lsrs	r5, r3, #16
 800ed84:	b289      	uxth	r1, r1
 800ed86:	041b      	lsls	r3, r3, #16
 800ed88:	185b      	adds	r3, r3, r1
 800ed8a:	c608      	stmia	r6!, {r3}
 800ed8c:	4287      	cmp	r7, r0
 800ed8e:	dcef      	bgt.n	800ed70 <__multadd+0x10>
 800ed90:	2d00      	cmp	r5, #0
 800ed92:	d022      	beq.n	800edda <__multadd+0x7a>
 800ed94:	68a3      	ldr	r3, [r4, #8]
 800ed96:	42bb      	cmp	r3, r7
 800ed98:	dc19      	bgt.n	800edce <__multadd+0x6e>
 800ed9a:	6861      	ldr	r1, [r4, #4]
 800ed9c:	9801      	ldr	r0, [sp, #4]
 800ed9e:	3101      	adds	r1, #1
 800eda0:	f7ff ff76 	bl	800ec90 <_Balloc>
 800eda4:	1e06      	subs	r6, r0, #0
 800eda6:	d105      	bne.n	800edb4 <__multadd+0x54>
 800eda8:	0032      	movs	r2, r6
 800edaa:	21ba      	movs	r1, #186	; 0xba
 800edac:	4b0c      	ldr	r3, [pc, #48]	; (800ede0 <__multadd+0x80>)
 800edae:	480d      	ldr	r0, [pc, #52]	; (800ede4 <__multadd+0x84>)
 800edb0:	f7fe fcfa 	bl	800d7a8 <__assert_func>
 800edb4:	0021      	movs	r1, r4
 800edb6:	6922      	ldr	r2, [r4, #16]
 800edb8:	310c      	adds	r1, #12
 800edba:	3202      	adds	r2, #2
 800edbc:	0092      	lsls	r2, r2, #2
 800edbe:	300c      	adds	r0, #12
 800edc0:	f7fe fcde 	bl	800d780 <memcpy>
 800edc4:	0021      	movs	r1, r4
 800edc6:	9801      	ldr	r0, [sp, #4]
 800edc8:	f7ff ffa6 	bl	800ed18 <_Bfree>
 800edcc:	0034      	movs	r4, r6
 800edce:	1d3b      	adds	r3, r7, #4
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	18e3      	adds	r3, r4, r3
 800edd4:	605d      	str	r5, [r3, #4]
 800edd6:	1c7b      	adds	r3, r7, #1
 800edd8:	6123      	str	r3, [r4, #16]
 800edda:	0020      	movs	r0, r4
 800eddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800edde:	46c0      	nop			; (mov r8, r8)
 800ede0:	080122a4 	.word	0x080122a4
 800ede4:	08012315 	.word	0x08012315

0800ede8 <__s2b>:
 800ede8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edea:	0006      	movs	r6, r0
 800edec:	0018      	movs	r0, r3
 800edee:	000c      	movs	r4, r1
 800edf0:	3008      	adds	r0, #8
 800edf2:	2109      	movs	r1, #9
 800edf4:	9301      	str	r3, [sp, #4]
 800edf6:	0015      	movs	r5, r2
 800edf8:	f7f1 fa2c 	bl	8000254 <__divsi3>
 800edfc:	2301      	movs	r3, #1
 800edfe:	2100      	movs	r1, #0
 800ee00:	4283      	cmp	r3, r0
 800ee02:	db0a      	blt.n	800ee1a <__s2b+0x32>
 800ee04:	0030      	movs	r0, r6
 800ee06:	f7ff ff43 	bl	800ec90 <_Balloc>
 800ee0a:	1e01      	subs	r1, r0, #0
 800ee0c:	d108      	bne.n	800ee20 <__s2b+0x38>
 800ee0e:	000a      	movs	r2, r1
 800ee10:	4b19      	ldr	r3, [pc, #100]	; (800ee78 <__s2b+0x90>)
 800ee12:	481a      	ldr	r0, [pc, #104]	; (800ee7c <__s2b+0x94>)
 800ee14:	31d3      	adds	r1, #211	; 0xd3
 800ee16:	f7fe fcc7 	bl	800d7a8 <__assert_func>
 800ee1a:	005b      	lsls	r3, r3, #1
 800ee1c:	3101      	adds	r1, #1
 800ee1e:	e7ef      	b.n	800ee00 <__s2b+0x18>
 800ee20:	9b08      	ldr	r3, [sp, #32]
 800ee22:	6143      	str	r3, [r0, #20]
 800ee24:	2301      	movs	r3, #1
 800ee26:	6103      	str	r3, [r0, #16]
 800ee28:	2d09      	cmp	r5, #9
 800ee2a:	dd18      	ble.n	800ee5e <__s2b+0x76>
 800ee2c:	0023      	movs	r3, r4
 800ee2e:	3309      	adds	r3, #9
 800ee30:	001f      	movs	r7, r3
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	1964      	adds	r4, r4, r5
 800ee36:	783b      	ldrb	r3, [r7, #0]
 800ee38:	220a      	movs	r2, #10
 800ee3a:	0030      	movs	r0, r6
 800ee3c:	3b30      	subs	r3, #48	; 0x30
 800ee3e:	f7ff ff8f 	bl	800ed60 <__multadd>
 800ee42:	3701      	adds	r7, #1
 800ee44:	0001      	movs	r1, r0
 800ee46:	42a7      	cmp	r7, r4
 800ee48:	d1f5      	bne.n	800ee36 <__s2b+0x4e>
 800ee4a:	002c      	movs	r4, r5
 800ee4c:	9b00      	ldr	r3, [sp, #0]
 800ee4e:	3c08      	subs	r4, #8
 800ee50:	191c      	adds	r4, r3, r4
 800ee52:	002f      	movs	r7, r5
 800ee54:	9b01      	ldr	r3, [sp, #4]
 800ee56:	429f      	cmp	r7, r3
 800ee58:	db04      	blt.n	800ee64 <__s2b+0x7c>
 800ee5a:	0008      	movs	r0, r1
 800ee5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee5e:	2509      	movs	r5, #9
 800ee60:	340a      	adds	r4, #10
 800ee62:	e7f6      	b.n	800ee52 <__s2b+0x6a>
 800ee64:	1b63      	subs	r3, r4, r5
 800ee66:	5ddb      	ldrb	r3, [r3, r7]
 800ee68:	220a      	movs	r2, #10
 800ee6a:	0030      	movs	r0, r6
 800ee6c:	3b30      	subs	r3, #48	; 0x30
 800ee6e:	f7ff ff77 	bl	800ed60 <__multadd>
 800ee72:	3701      	adds	r7, #1
 800ee74:	0001      	movs	r1, r0
 800ee76:	e7ed      	b.n	800ee54 <__s2b+0x6c>
 800ee78:	080122a4 	.word	0x080122a4
 800ee7c:	08012315 	.word	0x08012315

0800ee80 <__hi0bits>:
 800ee80:	0003      	movs	r3, r0
 800ee82:	0c02      	lsrs	r2, r0, #16
 800ee84:	2000      	movs	r0, #0
 800ee86:	4282      	cmp	r2, r0
 800ee88:	d101      	bne.n	800ee8e <__hi0bits+0xe>
 800ee8a:	041b      	lsls	r3, r3, #16
 800ee8c:	3010      	adds	r0, #16
 800ee8e:	0e1a      	lsrs	r2, r3, #24
 800ee90:	d101      	bne.n	800ee96 <__hi0bits+0x16>
 800ee92:	3008      	adds	r0, #8
 800ee94:	021b      	lsls	r3, r3, #8
 800ee96:	0f1a      	lsrs	r2, r3, #28
 800ee98:	d101      	bne.n	800ee9e <__hi0bits+0x1e>
 800ee9a:	3004      	adds	r0, #4
 800ee9c:	011b      	lsls	r3, r3, #4
 800ee9e:	0f9a      	lsrs	r2, r3, #30
 800eea0:	d101      	bne.n	800eea6 <__hi0bits+0x26>
 800eea2:	3002      	adds	r0, #2
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	db03      	blt.n	800eeb2 <__hi0bits+0x32>
 800eeaa:	3001      	adds	r0, #1
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	d400      	bmi.n	800eeb2 <__hi0bits+0x32>
 800eeb0:	2020      	movs	r0, #32
 800eeb2:	4770      	bx	lr

0800eeb4 <__lo0bits>:
 800eeb4:	6803      	ldr	r3, [r0, #0]
 800eeb6:	0001      	movs	r1, r0
 800eeb8:	2207      	movs	r2, #7
 800eeba:	0018      	movs	r0, r3
 800eebc:	4010      	ands	r0, r2
 800eebe:	4213      	tst	r3, r2
 800eec0:	d00d      	beq.n	800eede <__lo0bits+0x2a>
 800eec2:	3a06      	subs	r2, #6
 800eec4:	2000      	movs	r0, #0
 800eec6:	4213      	tst	r3, r2
 800eec8:	d105      	bne.n	800eed6 <__lo0bits+0x22>
 800eeca:	3002      	adds	r0, #2
 800eecc:	4203      	tst	r3, r0
 800eece:	d003      	beq.n	800eed8 <__lo0bits+0x24>
 800eed0:	40d3      	lsrs	r3, r2
 800eed2:	0010      	movs	r0, r2
 800eed4:	600b      	str	r3, [r1, #0]
 800eed6:	4770      	bx	lr
 800eed8:	089b      	lsrs	r3, r3, #2
 800eeda:	600b      	str	r3, [r1, #0]
 800eedc:	e7fb      	b.n	800eed6 <__lo0bits+0x22>
 800eede:	b29a      	uxth	r2, r3
 800eee0:	2a00      	cmp	r2, #0
 800eee2:	d101      	bne.n	800eee8 <__lo0bits+0x34>
 800eee4:	2010      	movs	r0, #16
 800eee6:	0c1b      	lsrs	r3, r3, #16
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	2a00      	cmp	r2, #0
 800eeec:	d101      	bne.n	800eef2 <__lo0bits+0x3e>
 800eeee:	3008      	adds	r0, #8
 800eef0:	0a1b      	lsrs	r3, r3, #8
 800eef2:	071a      	lsls	r2, r3, #28
 800eef4:	d101      	bne.n	800eefa <__lo0bits+0x46>
 800eef6:	3004      	adds	r0, #4
 800eef8:	091b      	lsrs	r3, r3, #4
 800eefa:	079a      	lsls	r2, r3, #30
 800eefc:	d101      	bne.n	800ef02 <__lo0bits+0x4e>
 800eefe:	3002      	adds	r0, #2
 800ef00:	089b      	lsrs	r3, r3, #2
 800ef02:	07da      	lsls	r2, r3, #31
 800ef04:	d4e9      	bmi.n	800eeda <__lo0bits+0x26>
 800ef06:	3001      	adds	r0, #1
 800ef08:	085b      	lsrs	r3, r3, #1
 800ef0a:	d1e6      	bne.n	800eeda <__lo0bits+0x26>
 800ef0c:	2020      	movs	r0, #32
 800ef0e:	e7e2      	b.n	800eed6 <__lo0bits+0x22>

0800ef10 <__i2b>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	000c      	movs	r4, r1
 800ef14:	2101      	movs	r1, #1
 800ef16:	f7ff febb 	bl	800ec90 <_Balloc>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d107      	bne.n	800ef2e <__i2b+0x1e>
 800ef1e:	2146      	movs	r1, #70	; 0x46
 800ef20:	4c05      	ldr	r4, [pc, #20]	; (800ef38 <__i2b+0x28>)
 800ef22:	0002      	movs	r2, r0
 800ef24:	4b05      	ldr	r3, [pc, #20]	; (800ef3c <__i2b+0x2c>)
 800ef26:	0020      	movs	r0, r4
 800ef28:	31ff      	adds	r1, #255	; 0xff
 800ef2a:	f7fe fc3d 	bl	800d7a8 <__assert_func>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	6144      	str	r4, [r0, #20]
 800ef32:	6103      	str	r3, [r0, #16]
 800ef34:	bd10      	pop	{r4, pc}
 800ef36:	46c0      	nop			; (mov r8, r8)
 800ef38:	08012315 	.word	0x08012315
 800ef3c:	080122a4 	.word	0x080122a4

0800ef40 <__multiply>:
 800ef40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef42:	0015      	movs	r5, r2
 800ef44:	690a      	ldr	r2, [r1, #16]
 800ef46:	692b      	ldr	r3, [r5, #16]
 800ef48:	000c      	movs	r4, r1
 800ef4a:	b08b      	sub	sp, #44	; 0x2c
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	da01      	bge.n	800ef54 <__multiply+0x14>
 800ef50:	002c      	movs	r4, r5
 800ef52:	000d      	movs	r5, r1
 800ef54:	6927      	ldr	r7, [r4, #16]
 800ef56:	692e      	ldr	r6, [r5, #16]
 800ef58:	6861      	ldr	r1, [r4, #4]
 800ef5a:	19bb      	adds	r3, r7, r6
 800ef5c:	9303      	str	r3, [sp, #12]
 800ef5e:	68a3      	ldr	r3, [r4, #8]
 800ef60:	19ba      	adds	r2, r7, r6
 800ef62:	4293      	cmp	r3, r2
 800ef64:	da00      	bge.n	800ef68 <__multiply+0x28>
 800ef66:	3101      	adds	r1, #1
 800ef68:	f7ff fe92 	bl	800ec90 <_Balloc>
 800ef6c:	9002      	str	r0, [sp, #8]
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	d106      	bne.n	800ef80 <__multiply+0x40>
 800ef72:	21b1      	movs	r1, #177	; 0xb1
 800ef74:	4b48      	ldr	r3, [pc, #288]	; (800f098 <__multiply+0x158>)
 800ef76:	4849      	ldr	r0, [pc, #292]	; (800f09c <__multiply+0x15c>)
 800ef78:	9a02      	ldr	r2, [sp, #8]
 800ef7a:	0049      	lsls	r1, r1, #1
 800ef7c:	f7fe fc14 	bl	800d7a8 <__assert_func>
 800ef80:	9b02      	ldr	r3, [sp, #8]
 800ef82:	2200      	movs	r2, #0
 800ef84:	3314      	adds	r3, #20
 800ef86:	469c      	mov	ip, r3
 800ef88:	19bb      	adds	r3, r7, r6
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4463      	add	r3, ip
 800ef8e:	9304      	str	r3, [sp, #16]
 800ef90:	4663      	mov	r3, ip
 800ef92:	9904      	ldr	r1, [sp, #16]
 800ef94:	428b      	cmp	r3, r1
 800ef96:	d32a      	bcc.n	800efee <__multiply+0xae>
 800ef98:	0023      	movs	r3, r4
 800ef9a:	00bf      	lsls	r7, r7, #2
 800ef9c:	3314      	adds	r3, #20
 800ef9e:	3514      	adds	r5, #20
 800efa0:	9308      	str	r3, [sp, #32]
 800efa2:	00b6      	lsls	r6, r6, #2
 800efa4:	19db      	adds	r3, r3, r7
 800efa6:	9305      	str	r3, [sp, #20]
 800efa8:	19ab      	adds	r3, r5, r6
 800efaa:	9309      	str	r3, [sp, #36]	; 0x24
 800efac:	2304      	movs	r3, #4
 800efae:	9306      	str	r3, [sp, #24]
 800efb0:	0023      	movs	r3, r4
 800efb2:	9a05      	ldr	r2, [sp, #20]
 800efb4:	3315      	adds	r3, #21
 800efb6:	9501      	str	r5, [sp, #4]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d305      	bcc.n	800efc8 <__multiply+0x88>
 800efbc:	1b13      	subs	r3, r2, r4
 800efbe:	3b15      	subs	r3, #21
 800efc0:	089b      	lsrs	r3, r3, #2
 800efc2:	3301      	adds	r3, #1
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	9306      	str	r3, [sp, #24]
 800efc8:	9b01      	ldr	r3, [sp, #4]
 800efca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efcc:	4293      	cmp	r3, r2
 800efce:	d310      	bcc.n	800eff2 <__multiply+0xb2>
 800efd0:	9b03      	ldr	r3, [sp, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	dd05      	ble.n	800efe2 <__multiply+0xa2>
 800efd6:	9b04      	ldr	r3, [sp, #16]
 800efd8:	3b04      	subs	r3, #4
 800efda:	9304      	str	r3, [sp, #16]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d056      	beq.n	800f090 <__multiply+0x150>
 800efe2:	9b02      	ldr	r3, [sp, #8]
 800efe4:	9a03      	ldr	r2, [sp, #12]
 800efe6:	0018      	movs	r0, r3
 800efe8:	611a      	str	r2, [r3, #16]
 800efea:	b00b      	add	sp, #44	; 0x2c
 800efec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efee:	c304      	stmia	r3!, {r2}
 800eff0:	e7cf      	b.n	800ef92 <__multiply+0x52>
 800eff2:	9b01      	ldr	r3, [sp, #4]
 800eff4:	6818      	ldr	r0, [r3, #0]
 800eff6:	b280      	uxth	r0, r0
 800eff8:	2800      	cmp	r0, #0
 800effa:	d01e      	beq.n	800f03a <__multiply+0xfa>
 800effc:	4667      	mov	r7, ip
 800effe:	2500      	movs	r5, #0
 800f000:	9e08      	ldr	r6, [sp, #32]
 800f002:	ce02      	ldmia	r6!, {r1}
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	9307      	str	r3, [sp, #28]
 800f008:	b28b      	uxth	r3, r1
 800f00a:	4343      	muls	r3, r0
 800f00c:	001a      	movs	r2, r3
 800f00e:	466b      	mov	r3, sp
 800f010:	8b9b      	ldrh	r3, [r3, #28]
 800f012:	18d3      	adds	r3, r2, r3
 800f014:	195b      	adds	r3, r3, r5
 800f016:	0c0d      	lsrs	r5, r1, #16
 800f018:	4345      	muls	r5, r0
 800f01a:	9a07      	ldr	r2, [sp, #28]
 800f01c:	0c11      	lsrs	r1, r2, #16
 800f01e:	1869      	adds	r1, r5, r1
 800f020:	0c1a      	lsrs	r2, r3, #16
 800f022:	188a      	adds	r2, r1, r2
 800f024:	b29b      	uxth	r3, r3
 800f026:	0c15      	lsrs	r5, r2, #16
 800f028:	0412      	lsls	r2, r2, #16
 800f02a:	431a      	orrs	r2, r3
 800f02c:	9b05      	ldr	r3, [sp, #20]
 800f02e:	c704      	stmia	r7!, {r2}
 800f030:	42b3      	cmp	r3, r6
 800f032:	d8e6      	bhi.n	800f002 <__multiply+0xc2>
 800f034:	4663      	mov	r3, ip
 800f036:	9a06      	ldr	r2, [sp, #24]
 800f038:	509d      	str	r5, [r3, r2]
 800f03a:	9b01      	ldr	r3, [sp, #4]
 800f03c:	6818      	ldr	r0, [r3, #0]
 800f03e:	0c00      	lsrs	r0, r0, #16
 800f040:	d020      	beq.n	800f084 <__multiply+0x144>
 800f042:	4663      	mov	r3, ip
 800f044:	0025      	movs	r5, r4
 800f046:	4661      	mov	r1, ip
 800f048:	2700      	movs	r7, #0
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	3514      	adds	r5, #20
 800f04e:	682a      	ldr	r2, [r5, #0]
 800f050:	680e      	ldr	r6, [r1, #0]
 800f052:	b292      	uxth	r2, r2
 800f054:	4342      	muls	r2, r0
 800f056:	0c36      	lsrs	r6, r6, #16
 800f058:	1992      	adds	r2, r2, r6
 800f05a:	19d2      	adds	r2, r2, r7
 800f05c:	0416      	lsls	r6, r2, #16
 800f05e:	b29b      	uxth	r3, r3
 800f060:	431e      	orrs	r6, r3
 800f062:	600e      	str	r6, [r1, #0]
 800f064:	cd40      	ldmia	r5!, {r6}
 800f066:	684b      	ldr	r3, [r1, #4]
 800f068:	0c36      	lsrs	r6, r6, #16
 800f06a:	4346      	muls	r6, r0
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	0c12      	lsrs	r2, r2, #16
 800f070:	18f3      	adds	r3, r6, r3
 800f072:	189b      	adds	r3, r3, r2
 800f074:	9a05      	ldr	r2, [sp, #20]
 800f076:	0c1f      	lsrs	r7, r3, #16
 800f078:	3104      	adds	r1, #4
 800f07a:	42aa      	cmp	r2, r5
 800f07c:	d8e7      	bhi.n	800f04e <__multiply+0x10e>
 800f07e:	4662      	mov	r2, ip
 800f080:	9906      	ldr	r1, [sp, #24]
 800f082:	5053      	str	r3, [r2, r1]
 800f084:	9b01      	ldr	r3, [sp, #4]
 800f086:	3304      	adds	r3, #4
 800f088:	9301      	str	r3, [sp, #4]
 800f08a:	2304      	movs	r3, #4
 800f08c:	449c      	add	ip, r3
 800f08e:	e79b      	b.n	800efc8 <__multiply+0x88>
 800f090:	9b03      	ldr	r3, [sp, #12]
 800f092:	3b01      	subs	r3, #1
 800f094:	9303      	str	r3, [sp, #12]
 800f096:	e79b      	b.n	800efd0 <__multiply+0x90>
 800f098:	080122a4 	.word	0x080122a4
 800f09c:	08012315 	.word	0x08012315

0800f0a0 <__pow5mult>:
 800f0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0a2:	2303      	movs	r3, #3
 800f0a4:	0015      	movs	r5, r2
 800f0a6:	0007      	movs	r7, r0
 800f0a8:	000e      	movs	r6, r1
 800f0aa:	401a      	ands	r2, r3
 800f0ac:	421d      	tst	r5, r3
 800f0ae:	d008      	beq.n	800f0c2 <__pow5mult+0x22>
 800f0b0:	4925      	ldr	r1, [pc, #148]	; (800f148 <__pow5mult+0xa8>)
 800f0b2:	3a01      	subs	r2, #1
 800f0b4:	0092      	lsls	r2, r2, #2
 800f0b6:	5852      	ldr	r2, [r2, r1]
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	0031      	movs	r1, r6
 800f0bc:	f7ff fe50 	bl	800ed60 <__multadd>
 800f0c0:	0006      	movs	r6, r0
 800f0c2:	10ad      	asrs	r5, r5, #2
 800f0c4:	d03d      	beq.n	800f142 <__pow5mult+0xa2>
 800f0c6:	69fc      	ldr	r4, [r7, #28]
 800f0c8:	2c00      	cmp	r4, #0
 800f0ca:	d10f      	bne.n	800f0ec <__pow5mult+0x4c>
 800f0cc:	2010      	movs	r0, #16
 800f0ce:	f7fc fa5b 	bl	800b588 <malloc>
 800f0d2:	1e02      	subs	r2, r0, #0
 800f0d4:	61f8      	str	r0, [r7, #28]
 800f0d6:	d105      	bne.n	800f0e4 <__pow5mult+0x44>
 800f0d8:	21b4      	movs	r1, #180	; 0xb4
 800f0da:	4b1c      	ldr	r3, [pc, #112]	; (800f14c <__pow5mult+0xac>)
 800f0dc:	481c      	ldr	r0, [pc, #112]	; (800f150 <__pow5mult+0xb0>)
 800f0de:	31ff      	adds	r1, #255	; 0xff
 800f0e0:	f7fe fb62 	bl	800d7a8 <__assert_func>
 800f0e4:	6044      	str	r4, [r0, #4]
 800f0e6:	6084      	str	r4, [r0, #8]
 800f0e8:	6004      	str	r4, [r0, #0]
 800f0ea:	60c4      	str	r4, [r0, #12]
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	689c      	ldr	r4, [r3, #8]
 800f0f0:	9301      	str	r3, [sp, #4]
 800f0f2:	2c00      	cmp	r4, #0
 800f0f4:	d108      	bne.n	800f108 <__pow5mult+0x68>
 800f0f6:	0038      	movs	r0, r7
 800f0f8:	4916      	ldr	r1, [pc, #88]	; (800f154 <__pow5mult+0xb4>)
 800f0fa:	f7ff ff09 	bl	800ef10 <__i2b>
 800f0fe:	9b01      	ldr	r3, [sp, #4]
 800f100:	0004      	movs	r4, r0
 800f102:	6098      	str	r0, [r3, #8]
 800f104:	2300      	movs	r3, #0
 800f106:	6003      	str	r3, [r0, #0]
 800f108:	2301      	movs	r3, #1
 800f10a:	421d      	tst	r5, r3
 800f10c:	d00a      	beq.n	800f124 <__pow5mult+0x84>
 800f10e:	0031      	movs	r1, r6
 800f110:	0022      	movs	r2, r4
 800f112:	0038      	movs	r0, r7
 800f114:	f7ff ff14 	bl	800ef40 <__multiply>
 800f118:	0031      	movs	r1, r6
 800f11a:	9001      	str	r0, [sp, #4]
 800f11c:	0038      	movs	r0, r7
 800f11e:	f7ff fdfb 	bl	800ed18 <_Bfree>
 800f122:	9e01      	ldr	r6, [sp, #4]
 800f124:	106d      	asrs	r5, r5, #1
 800f126:	d00c      	beq.n	800f142 <__pow5mult+0xa2>
 800f128:	6820      	ldr	r0, [r4, #0]
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d107      	bne.n	800f13e <__pow5mult+0x9e>
 800f12e:	0022      	movs	r2, r4
 800f130:	0021      	movs	r1, r4
 800f132:	0038      	movs	r0, r7
 800f134:	f7ff ff04 	bl	800ef40 <__multiply>
 800f138:	2300      	movs	r3, #0
 800f13a:	6020      	str	r0, [r4, #0]
 800f13c:	6003      	str	r3, [r0, #0]
 800f13e:	0004      	movs	r4, r0
 800f140:	e7e2      	b.n	800f108 <__pow5mult+0x68>
 800f142:	0030      	movs	r0, r6
 800f144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f146:	46c0      	nop			; (mov r8, r8)
 800f148:	08012460 	.word	0x08012460
 800f14c:	0801218a 	.word	0x0801218a
 800f150:	08012315 	.word	0x08012315
 800f154:	00000271 	.word	0x00000271

0800f158 <__lshift>:
 800f158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f15a:	000c      	movs	r4, r1
 800f15c:	0017      	movs	r7, r2
 800f15e:	6923      	ldr	r3, [r4, #16]
 800f160:	1155      	asrs	r5, r2, #5
 800f162:	b087      	sub	sp, #28
 800f164:	18eb      	adds	r3, r5, r3
 800f166:	9302      	str	r3, [sp, #8]
 800f168:	3301      	adds	r3, #1
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	6849      	ldr	r1, [r1, #4]
 800f16e:	68a3      	ldr	r3, [r4, #8]
 800f170:	9004      	str	r0, [sp, #16]
 800f172:	9a01      	ldr	r2, [sp, #4]
 800f174:	4293      	cmp	r3, r2
 800f176:	db10      	blt.n	800f19a <__lshift+0x42>
 800f178:	9804      	ldr	r0, [sp, #16]
 800f17a:	f7ff fd89 	bl	800ec90 <_Balloc>
 800f17e:	2300      	movs	r3, #0
 800f180:	0002      	movs	r2, r0
 800f182:	0006      	movs	r6, r0
 800f184:	0019      	movs	r1, r3
 800f186:	3214      	adds	r2, #20
 800f188:	4298      	cmp	r0, r3
 800f18a:	d10c      	bne.n	800f1a6 <__lshift+0x4e>
 800f18c:	31df      	adds	r1, #223	; 0xdf
 800f18e:	0032      	movs	r2, r6
 800f190:	4b26      	ldr	r3, [pc, #152]	; (800f22c <__lshift+0xd4>)
 800f192:	4827      	ldr	r0, [pc, #156]	; (800f230 <__lshift+0xd8>)
 800f194:	31ff      	adds	r1, #255	; 0xff
 800f196:	f7fe fb07 	bl	800d7a8 <__assert_func>
 800f19a:	3101      	adds	r1, #1
 800f19c:	005b      	lsls	r3, r3, #1
 800f19e:	e7e8      	b.n	800f172 <__lshift+0x1a>
 800f1a0:	0098      	lsls	r0, r3, #2
 800f1a2:	5011      	str	r1, [r2, r0]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	42ab      	cmp	r3, r5
 800f1a8:	dbfa      	blt.n	800f1a0 <__lshift+0x48>
 800f1aa:	43eb      	mvns	r3, r5
 800f1ac:	17db      	asrs	r3, r3, #31
 800f1ae:	401d      	ands	r5, r3
 800f1b0:	211f      	movs	r1, #31
 800f1b2:	0023      	movs	r3, r4
 800f1b4:	0038      	movs	r0, r7
 800f1b6:	00ad      	lsls	r5, r5, #2
 800f1b8:	1955      	adds	r5, r2, r5
 800f1ba:	6922      	ldr	r2, [r4, #16]
 800f1bc:	3314      	adds	r3, #20
 800f1be:	0092      	lsls	r2, r2, #2
 800f1c0:	4008      	ands	r0, r1
 800f1c2:	4684      	mov	ip, r0
 800f1c4:	189a      	adds	r2, r3, r2
 800f1c6:	420f      	tst	r7, r1
 800f1c8:	d02a      	beq.n	800f220 <__lshift+0xc8>
 800f1ca:	3101      	adds	r1, #1
 800f1cc:	1a09      	subs	r1, r1, r0
 800f1ce:	9105      	str	r1, [sp, #20]
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	9503      	str	r5, [sp, #12]
 800f1d4:	4667      	mov	r7, ip
 800f1d6:	6818      	ldr	r0, [r3, #0]
 800f1d8:	40b8      	lsls	r0, r7
 800f1da:	4308      	orrs	r0, r1
 800f1dc:	9903      	ldr	r1, [sp, #12]
 800f1de:	c101      	stmia	r1!, {r0}
 800f1e0:	9103      	str	r1, [sp, #12]
 800f1e2:	9805      	ldr	r0, [sp, #20]
 800f1e4:	cb02      	ldmia	r3!, {r1}
 800f1e6:	40c1      	lsrs	r1, r0
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d8f3      	bhi.n	800f1d4 <__lshift+0x7c>
 800f1ec:	0020      	movs	r0, r4
 800f1ee:	3015      	adds	r0, #21
 800f1f0:	2304      	movs	r3, #4
 800f1f2:	4282      	cmp	r2, r0
 800f1f4:	d304      	bcc.n	800f200 <__lshift+0xa8>
 800f1f6:	1b13      	subs	r3, r2, r4
 800f1f8:	3b15      	subs	r3, #21
 800f1fa:	089b      	lsrs	r3, r3, #2
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	50e9      	str	r1, [r5, r3]
 800f202:	2900      	cmp	r1, #0
 800f204:	d002      	beq.n	800f20c <__lshift+0xb4>
 800f206:	9b02      	ldr	r3, [sp, #8]
 800f208:	3302      	adds	r3, #2
 800f20a:	9301      	str	r3, [sp, #4]
 800f20c:	9b01      	ldr	r3, [sp, #4]
 800f20e:	9804      	ldr	r0, [sp, #16]
 800f210:	3b01      	subs	r3, #1
 800f212:	0021      	movs	r1, r4
 800f214:	6133      	str	r3, [r6, #16]
 800f216:	f7ff fd7f 	bl	800ed18 <_Bfree>
 800f21a:	0030      	movs	r0, r6
 800f21c:	b007      	add	sp, #28
 800f21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f220:	cb02      	ldmia	r3!, {r1}
 800f222:	c502      	stmia	r5!, {r1}
 800f224:	429a      	cmp	r2, r3
 800f226:	d8fb      	bhi.n	800f220 <__lshift+0xc8>
 800f228:	e7f0      	b.n	800f20c <__lshift+0xb4>
 800f22a:	46c0      	nop			; (mov r8, r8)
 800f22c:	080122a4 	.word	0x080122a4
 800f230:	08012315 	.word	0x08012315

0800f234 <__mcmp>:
 800f234:	b530      	push	{r4, r5, lr}
 800f236:	690b      	ldr	r3, [r1, #16]
 800f238:	6904      	ldr	r4, [r0, #16]
 800f23a:	0002      	movs	r2, r0
 800f23c:	1ae0      	subs	r0, r4, r3
 800f23e:	429c      	cmp	r4, r3
 800f240:	d10e      	bne.n	800f260 <__mcmp+0x2c>
 800f242:	3214      	adds	r2, #20
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	3114      	adds	r1, #20
 800f248:	0014      	movs	r4, r2
 800f24a:	18c9      	adds	r1, r1, r3
 800f24c:	18d2      	adds	r2, r2, r3
 800f24e:	3a04      	subs	r2, #4
 800f250:	3904      	subs	r1, #4
 800f252:	6815      	ldr	r5, [r2, #0]
 800f254:	680b      	ldr	r3, [r1, #0]
 800f256:	429d      	cmp	r5, r3
 800f258:	d003      	beq.n	800f262 <__mcmp+0x2e>
 800f25a:	2001      	movs	r0, #1
 800f25c:	429d      	cmp	r5, r3
 800f25e:	d303      	bcc.n	800f268 <__mcmp+0x34>
 800f260:	bd30      	pop	{r4, r5, pc}
 800f262:	4294      	cmp	r4, r2
 800f264:	d3f3      	bcc.n	800f24e <__mcmp+0x1a>
 800f266:	e7fb      	b.n	800f260 <__mcmp+0x2c>
 800f268:	4240      	negs	r0, r0
 800f26a:	e7f9      	b.n	800f260 <__mcmp+0x2c>

0800f26c <__mdiff>:
 800f26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f26e:	000e      	movs	r6, r1
 800f270:	0007      	movs	r7, r0
 800f272:	0011      	movs	r1, r2
 800f274:	0030      	movs	r0, r6
 800f276:	b087      	sub	sp, #28
 800f278:	0014      	movs	r4, r2
 800f27a:	f7ff ffdb 	bl	800f234 <__mcmp>
 800f27e:	1e05      	subs	r5, r0, #0
 800f280:	d110      	bne.n	800f2a4 <__mdiff+0x38>
 800f282:	0001      	movs	r1, r0
 800f284:	0038      	movs	r0, r7
 800f286:	f7ff fd03 	bl	800ec90 <_Balloc>
 800f28a:	1e02      	subs	r2, r0, #0
 800f28c:	d104      	bne.n	800f298 <__mdiff+0x2c>
 800f28e:	4b3f      	ldr	r3, [pc, #252]	; (800f38c <__mdiff+0x120>)
 800f290:	483f      	ldr	r0, [pc, #252]	; (800f390 <__mdiff+0x124>)
 800f292:	4940      	ldr	r1, [pc, #256]	; (800f394 <__mdiff+0x128>)
 800f294:	f7fe fa88 	bl	800d7a8 <__assert_func>
 800f298:	2301      	movs	r3, #1
 800f29a:	6145      	str	r5, [r0, #20]
 800f29c:	6103      	str	r3, [r0, #16]
 800f29e:	0010      	movs	r0, r2
 800f2a0:	b007      	add	sp, #28
 800f2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	9301      	str	r3, [sp, #4]
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	db04      	blt.n	800f2b6 <__mdiff+0x4a>
 800f2ac:	0023      	movs	r3, r4
 800f2ae:	0034      	movs	r4, r6
 800f2b0:	001e      	movs	r6, r3
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	9301      	str	r3, [sp, #4]
 800f2b6:	0038      	movs	r0, r7
 800f2b8:	6861      	ldr	r1, [r4, #4]
 800f2ba:	f7ff fce9 	bl	800ec90 <_Balloc>
 800f2be:	1e02      	subs	r2, r0, #0
 800f2c0:	d103      	bne.n	800f2ca <__mdiff+0x5e>
 800f2c2:	4b32      	ldr	r3, [pc, #200]	; (800f38c <__mdiff+0x120>)
 800f2c4:	4832      	ldr	r0, [pc, #200]	; (800f390 <__mdiff+0x124>)
 800f2c6:	4934      	ldr	r1, [pc, #208]	; (800f398 <__mdiff+0x12c>)
 800f2c8:	e7e4      	b.n	800f294 <__mdiff+0x28>
 800f2ca:	9b01      	ldr	r3, [sp, #4]
 800f2cc:	2700      	movs	r7, #0
 800f2ce:	60c3      	str	r3, [r0, #12]
 800f2d0:	6920      	ldr	r0, [r4, #16]
 800f2d2:	3414      	adds	r4, #20
 800f2d4:	0083      	lsls	r3, r0, #2
 800f2d6:	18e3      	adds	r3, r4, r3
 800f2d8:	0021      	movs	r1, r4
 800f2da:	9401      	str	r4, [sp, #4]
 800f2dc:	0034      	movs	r4, r6
 800f2de:	9302      	str	r3, [sp, #8]
 800f2e0:	6933      	ldr	r3, [r6, #16]
 800f2e2:	3414      	adds	r4, #20
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	18e3      	adds	r3, r4, r3
 800f2e8:	9303      	str	r3, [sp, #12]
 800f2ea:	0013      	movs	r3, r2
 800f2ec:	3314      	adds	r3, #20
 800f2ee:	469c      	mov	ip, r3
 800f2f0:	9305      	str	r3, [sp, #20]
 800f2f2:	9104      	str	r1, [sp, #16]
 800f2f4:	9b04      	ldr	r3, [sp, #16]
 800f2f6:	cc02      	ldmia	r4!, {r1}
 800f2f8:	cb20      	ldmia	r3!, {r5}
 800f2fa:	9304      	str	r3, [sp, #16]
 800f2fc:	b2ab      	uxth	r3, r5
 800f2fe:	19df      	adds	r7, r3, r7
 800f300:	b28b      	uxth	r3, r1
 800f302:	1afb      	subs	r3, r7, r3
 800f304:	0c09      	lsrs	r1, r1, #16
 800f306:	0c2d      	lsrs	r5, r5, #16
 800f308:	1a6d      	subs	r5, r5, r1
 800f30a:	1419      	asrs	r1, r3, #16
 800f30c:	1869      	adds	r1, r5, r1
 800f30e:	b29b      	uxth	r3, r3
 800f310:	140f      	asrs	r7, r1, #16
 800f312:	0409      	lsls	r1, r1, #16
 800f314:	4319      	orrs	r1, r3
 800f316:	4663      	mov	r3, ip
 800f318:	c302      	stmia	r3!, {r1}
 800f31a:	469c      	mov	ip, r3
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	42a3      	cmp	r3, r4
 800f320:	d8e8      	bhi.n	800f2f4 <__mdiff+0x88>
 800f322:	0031      	movs	r1, r6
 800f324:	9c03      	ldr	r4, [sp, #12]
 800f326:	3115      	adds	r1, #21
 800f328:	2304      	movs	r3, #4
 800f32a:	428c      	cmp	r4, r1
 800f32c:	d304      	bcc.n	800f338 <__mdiff+0xcc>
 800f32e:	1ba3      	subs	r3, r4, r6
 800f330:	3b15      	subs	r3, #21
 800f332:	089b      	lsrs	r3, r3, #2
 800f334:	3301      	adds	r3, #1
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	9901      	ldr	r1, [sp, #4]
 800f33a:	18cd      	adds	r5, r1, r3
 800f33c:	9905      	ldr	r1, [sp, #20]
 800f33e:	002e      	movs	r6, r5
 800f340:	18cb      	adds	r3, r1, r3
 800f342:	469c      	mov	ip, r3
 800f344:	9902      	ldr	r1, [sp, #8]
 800f346:	428e      	cmp	r6, r1
 800f348:	d310      	bcc.n	800f36c <__mdiff+0x100>
 800f34a:	9e02      	ldr	r6, [sp, #8]
 800f34c:	1ee9      	subs	r1, r5, #3
 800f34e:	2400      	movs	r4, #0
 800f350:	428e      	cmp	r6, r1
 800f352:	d304      	bcc.n	800f35e <__mdiff+0xf2>
 800f354:	0031      	movs	r1, r6
 800f356:	3103      	adds	r1, #3
 800f358:	1b49      	subs	r1, r1, r5
 800f35a:	0889      	lsrs	r1, r1, #2
 800f35c:	008c      	lsls	r4, r1, #2
 800f35e:	191b      	adds	r3, r3, r4
 800f360:	3b04      	subs	r3, #4
 800f362:	6819      	ldr	r1, [r3, #0]
 800f364:	2900      	cmp	r1, #0
 800f366:	d00f      	beq.n	800f388 <__mdiff+0x11c>
 800f368:	6110      	str	r0, [r2, #16]
 800f36a:	e798      	b.n	800f29e <__mdiff+0x32>
 800f36c:	ce02      	ldmia	r6!, {r1}
 800f36e:	b28c      	uxth	r4, r1
 800f370:	19e4      	adds	r4, r4, r7
 800f372:	0c0f      	lsrs	r7, r1, #16
 800f374:	1421      	asrs	r1, r4, #16
 800f376:	1879      	adds	r1, r7, r1
 800f378:	b2a4      	uxth	r4, r4
 800f37a:	140f      	asrs	r7, r1, #16
 800f37c:	0409      	lsls	r1, r1, #16
 800f37e:	4321      	orrs	r1, r4
 800f380:	4664      	mov	r4, ip
 800f382:	c402      	stmia	r4!, {r1}
 800f384:	46a4      	mov	ip, r4
 800f386:	e7dd      	b.n	800f344 <__mdiff+0xd8>
 800f388:	3801      	subs	r0, #1
 800f38a:	e7e9      	b.n	800f360 <__mdiff+0xf4>
 800f38c:	080122a4 	.word	0x080122a4
 800f390:	08012315 	.word	0x08012315
 800f394:	00000237 	.word	0x00000237
 800f398:	00000245 	.word	0x00000245

0800f39c <__ulp>:
 800f39c:	2000      	movs	r0, #0
 800f39e:	4b0b      	ldr	r3, [pc, #44]	; (800f3cc <__ulp+0x30>)
 800f3a0:	4019      	ands	r1, r3
 800f3a2:	4b0b      	ldr	r3, [pc, #44]	; (800f3d0 <__ulp+0x34>)
 800f3a4:	18c9      	adds	r1, r1, r3
 800f3a6:	4281      	cmp	r1, r0
 800f3a8:	dc06      	bgt.n	800f3b8 <__ulp+0x1c>
 800f3aa:	4249      	negs	r1, r1
 800f3ac:	150b      	asrs	r3, r1, #20
 800f3ae:	2b13      	cmp	r3, #19
 800f3b0:	dc03      	bgt.n	800f3ba <__ulp+0x1e>
 800f3b2:	2180      	movs	r1, #128	; 0x80
 800f3b4:	0309      	lsls	r1, r1, #12
 800f3b6:	4119      	asrs	r1, r3
 800f3b8:	4770      	bx	lr
 800f3ba:	3b14      	subs	r3, #20
 800f3bc:	2001      	movs	r0, #1
 800f3be:	2b1e      	cmp	r3, #30
 800f3c0:	dc02      	bgt.n	800f3c8 <__ulp+0x2c>
 800f3c2:	2080      	movs	r0, #128	; 0x80
 800f3c4:	0600      	lsls	r0, r0, #24
 800f3c6:	40d8      	lsrs	r0, r3
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	e7f5      	b.n	800f3b8 <__ulp+0x1c>
 800f3cc:	7ff00000 	.word	0x7ff00000
 800f3d0:	fcc00000 	.word	0xfcc00000

0800f3d4 <__b2d>:
 800f3d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3d6:	0006      	movs	r6, r0
 800f3d8:	6903      	ldr	r3, [r0, #16]
 800f3da:	3614      	adds	r6, #20
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	18f3      	adds	r3, r6, r3
 800f3e0:	1f1d      	subs	r5, r3, #4
 800f3e2:	682c      	ldr	r4, [r5, #0]
 800f3e4:	000f      	movs	r7, r1
 800f3e6:	0020      	movs	r0, r4
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	f7ff fd49 	bl	800ee80 <__hi0bits>
 800f3ee:	2220      	movs	r2, #32
 800f3f0:	1a12      	subs	r2, r2, r0
 800f3f2:	603a      	str	r2, [r7, #0]
 800f3f4:	0003      	movs	r3, r0
 800f3f6:	4a1c      	ldr	r2, [pc, #112]	; (800f468 <__b2d+0x94>)
 800f3f8:	280a      	cmp	r0, #10
 800f3fa:	dc15      	bgt.n	800f428 <__b2d+0x54>
 800f3fc:	210b      	movs	r1, #11
 800f3fe:	0027      	movs	r7, r4
 800f400:	1a09      	subs	r1, r1, r0
 800f402:	40cf      	lsrs	r7, r1
 800f404:	433a      	orrs	r2, r7
 800f406:	468c      	mov	ip, r1
 800f408:	0011      	movs	r1, r2
 800f40a:	2200      	movs	r2, #0
 800f40c:	42ae      	cmp	r6, r5
 800f40e:	d202      	bcs.n	800f416 <__b2d+0x42>
 800f410:	9a01      	ldr	r2, [sp, #4]
 800f412:	3a08      	subs	r2, #8
 800f414:	6812      	ldr	r2, [r2, #0]
 800f416:	3315      	adds	r3, #21
 800f418:	409c      	lsls	r4, r3
 800f41a:	4663      	mov	r3, ip
 800f41c:	0027      	movs	r7, r4
 800f41e:	40da      	lsrs	r2, r3
 800f420:	4317      	orrs	r7, r2
 800f422:	0038      	movs	r0, r7
 800f424:	b003      	add	sp, #12
 800f426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f428:	2700      	movs	r7, #0
 800f42a:	42ae      	cmp	r6, r5
 800f42c:	d202      	bcs.n	800f434 <__b2d+0x60>
 800f42e:	9d01      	ldr	r5, [sp, #4]
 800f430:	3d08      	subs	r5, #8
 800f432:	682f      	ldr	r7, [r5, #0]
 800f434:	210b      	movs	r1, #11
 800f436:	4249      	negs	r1, r1
 800f438:	468c      	mov	ip, r1
 800f43a:	449c      	add	ip, r3
 800f43c:	2b0b      	cmp	r3, #11
 800f43e:	d010      	beq.n	800f462 <__b2d+0x8e>
 800f440:	4661      	mov	r1, ip
 800f442:	2320      	movs	r3, #32
 800f444:	408c      	lsls	r4, r1
 800f446:	1a5b      	subs	r3, r3, r1
 800f448:	0039      	movs	r1, r7
 800f44a:	40d9      	lsrs	r1, r3
 800f44c:	430c      	orrs	r4, r1
 800f44e:	4322      	orrs	r2, r4
 800f450:	0011      	movs	r1, r2
 800f452:	2200      	movs	r2, #0
 800f454:	42b5      	cmp	r5, r6
 800f456:	d901      	bls.n	800f45c <__b2d+0x88>
 800f458:	3d04      	subs	r5, #4
 800f45a:	682a      	ldr	r2, [r5, #0]
 800f45c:	4664      	mov	r4, ip
 800f45e:	40a7      	lsls	r7, r4
 800f460:	e7dd      	b.n	800f41e <__b2d+0x4a>
 800f462:	4322      	orrs	r2, r4
 800f464:	0011      	movs	r1, r2
 800f466:	e7dc      	b.n	800f422 <__b2d+0x4e>
 800f468:	3ff00000 	.word	0x3ff00000

0800f46c <__d2b>:
 800f46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f46e:	2101      	movs	r1, #1
 800f470:	0014      	movs	r4, r2
 800f472:	001d      	movs	r5, r3
 800f474:	9f08      	ldr	r7, [sp, #32]
 800f476:	f7ff fc0b 	bl	800ec90 <_Balloc>
 800f47a:	1e06      	subs	r6, r0, #0
 800f47c:	d105      	bne.n	800f48a <__d2b+0x1e>
 800f47e:	0032      	movs	r2, r6
 800f480:	4b24      	ldr	r3, [pc, #144]	; (800f514 <__d2b+0xa8>)
 800f482:	4825      	ldr	r0, [pc, #148]	; (800f518 <__d2b+0xac>)
 800f484:	4925      	ldr	r1, [pc, #148]	; (800f51c <__d2b+0xb0>)
 800f486:	f7fe f98f 	bl	800d7a8 <__assert_func>
 800f48a:	032b      	lsls	r3, r5, #12
 800f48c:	006d      	lsls	r5, r5, #1
 800f48e:	0b1b      	lsrs	r3, r3, #12
 800f490:	0d6d      	lsrs	r5, r5, #21
 800f492:	d125      	bne.n	800f4e0 <__d2b+0x74>
 800f494:	9301      	str	r3, [sp, #4]
 800f496:	2c00      	cmp	r4, #0
 800f498:	d028      	beq.n	800f4ec <__d2b+0x80>
 800f49a:	4668      	mov	r0, sp
 800f49c:	9400      	str	r4, [sp, #0]
 800f49e:	f7ff fd09 	bl	800eeb4 <__lo0bits>
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	9900      	ldr	r1, [sp, #0]
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d01e      	beq.n	800f4e8 <__d2b+0x7c>
 800f4aa:	2220      	movs	r2, #32
 800f4ac:	001c      	movs	r4, r3
 800f4ae:	1a12      	subs	r2, r2, r0
 800f4b0:	4094      	lsls	r4, r2
 800f4b2:	0022      	movs	r2, r4
 800f4b4:	40c3      	lsrs	r3, r0
 800f4b6:	430a      	orrs	r2, r1
 800f4b8:	6172      	str	r2, [r6, #20]
 800f4ba:	9301      	str	r3, [sp, #4]
 800f4bc:	9c01      	ldr	r4, [sp, #4]
 800f4be:	61b4      	str	r4, [r6, #24]
 800f4c0:	1e63      	subs	r3, r4, #1
 800f4c2:	419c      	sbcs	r4, r3
 800f4c4:	3401      	adds	r4, #1
 800f4c6:	6134      	str	r4, [r6, #16]
 800f4c8:	2d00      	cmp	r5, #0
 800f4ca:	d017      	beq.n	800f4fc <__d2b+0x90>
 800f4cc:	2435      	movs	r4, #53	; 0x35
 800f4ce:	4b14      	ldr	r3, [pc, #80]	; (800f520 <__d2b+0xb4>)
 800f4d0:	18ed      	adds	r5, r5, r3
 800f4d2:	182d      	adds	r5, r5, r0
 800f4d4:	603d      	str	r5, [r7, #0]
 800f4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4d8:	1a24      	subs	r4, r4, r0
 800f4da:	601c      	str	r4, [r3, #0]
 800f4dc:	0030      	movs	r0, r6
 800f4de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4e0:	2280      	movs	r2, #128	; 0x80
 800f4e2:	0352      	lsls	r2, r2, #13
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	e7d5      	b.n	800f494 <__d2b+0x28>
 800f4e8:	6171      	str	r1, [r6, #20]
 800f4ea:	e7e7      	b.n	800f4bc <__d2b+0x50>
 800f4ec:	a801      	add	r0, sp, #4
 800f4ee:	f7ff fce1 	bl	800eeb4 <__lo0bits>
 800f4f2:	9b01      	ldr	r3, [sp, #4]
 800f4f4:	2401      	movs	r4, #1
 800f4f6:	6173      	str	r3, [r6, #20]
 800f4f8:	3020      	adds	r0, #32
 800f4fa:	e7e4      	b.n	800f4c6 <__d2b+0x5a>
 800f4fc:	4b09      	ldr	r3, [pc, #36]	; (800f524 <__d2b+0xb8>)
 800f4fe:	18c0      	adds	r0, r0, r3
 800f500:	4b09      	ldr	r3, [pc, #36]	; (800f528 <__d2b+0xbc>)
 800f502:	6038      	str	r0, [r7, #0]
 800f504:	18e3      	adds	r3, r4, r3
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	18f3      	adds	r3, r6, r3
 800f50a:	6958      	ldr	r0, [r3, #20]
 800f50c:	f7ff fcb8 	bl	800ee80 <__hi0bits>
 800f510:	0164      	lsls	r4, r4, #5
 800f512:	e7e0      	b.n	800f4d6 <__d2b+0x6a>
 800f514:	080122a4 	.word	0x080122a4
 800f518:	08012315 	.word	0x08012315
 800f51c:	0000030f 	.word	0x0000030f
 800f520:	fffffbcd 	.word	0xfffffbcd
 800f524:	fffffbce 	.word	0xfffffbce
 800f528:	3fffffff 	.word	0x3fffffff

0800f52c <__ratio>:
 800f52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f52e:	b087      	sub	sp, #28
 800f530:	000f      	movs	r7, r1
 800f532:	a904      	add	r1, sp, #16
 800f534:	0006      	movs	r6, r0
 800f536:	f7ff ff4d 	bl	800f3d4 <__b2d>
 800f53a:	9000      	str	r0, [sp, #0]
 800f53c:	9101      	str	r1, [sp, #4]
 800f53e:	9c00      	ldr	r4, [sp, #0]
 800f540:	9d01      	ldr	r5, [sp, #4]
 800f542:	0038      	movs	r0, r7
 800f544:	a905      	add	r1, sp, #20
 800f546:	f7ff ff45 	bl	800f3d4 <__b2d>
 800f54a:	9002      	str	r0, [sp, #8]
 800f54c:	9103      	str	r1, [sp, #12]
 800f54e:	9a02      	ldr	r2, [sp, #8]
 800f550:	9b03      	ldr	r3, [sp, #12]
 800f552:	6930      	ldr	r0, [r6, #16]
 800f554:	6939      	ldr	r1, [r7, #16]
 800f556:	9e04      	ldr	r6, [sp, #16]
 800f558:	1a40      	subs	r0, r0, r1
 800f55a:	9905      	ldr	r1, [sp, #20]
 800f55c:	0140      	lsls	r0, r0, #5
 800f55e:	1a71      	subs	r1, r6, r1
 800f560:	1841      	adds	r1, r0, r1
 800f562:	0508      	lsls	r0, r1, #20
 800f564:	2900      	cmp	r1, #0
 800f566:	dd07      	ble.n	800f578 <__ratio+0x4c>
 800f568:	9901      	ldr	r1, [sp, #4]
 800f56a:	1845      	adds	r5, r0, r1
 800f56c:	0020      	movs	r0, r4
 800f56e:	0029      	movs	r1, r5
 800f570:	f7f2 fab6 	bl	8001ae0 <__aeabi_ddiv>
 800f574:	b007      	add	sp, #28
 800f576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f578:	9903      	ldr	r1, [sp, #12]
 800f57a:	1a0b      	subs	r3, r1, r0
 800f57c:	e7f6      	b.n	800f56c <__ratio+0x40>

0800f57e <__copybits>:
 800f57e:	b570      	push	{r4, r5, r6, lr}
 800f580:	0014      	movs	r4, r2
 800f582:	0005      	movs	r5, r0
 800f584:	3901      	subs	r1, #1
 800f586:	6913      	ldr	r3, [r2, #16]
 800f588:	1149      	asrs	r1, r1, #5
 800f58a:	3101      	adds	r1, #1
 800f58c:	0089      	lsls	r1, r1, #2
 800f58e:	3414      	adds	r4, #20
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	1841      	adds	r1, r0, r1
 800f594:	18e3      	adds	r3, r4, r3
 800f596:	42a3      	cmp	r3, r4
 800f598:	d80d      	bhi.n	800f5b6 <__copybits+0x38>
 800f59a:	0014      	movs	r4, r2
 800f59c:	3411      	adds	r4, #17
 800f59e:	2500      	movs	r5, #0
 800f5a0:	429c      	cmp	r4, r3
 800f5a2:	d803      	bhi.n	800f5ac <__copybits+0x2e>
 800f5a4:	1a9b      	subs	r3, r3, r2
 800f5a6:	3b11      	subs	r3, #17
 800f5a8:	089b      	lsrs	r3, r3, #2
 800f5aa:	009d      	lsls	r5, r3, #2
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	1940      	adds	r0, r0, r5
 800f5b0:	4281      	cmp	r1, r0
 800f5b2:	d803      	bhi.n	800f5bc <__copybits+0x3e>
 800f5b4:	bd70      	pop	{r4, r5, r6, pc}
 800f5b6:	cc40      	ldmia	r4!, {r6}
 800f5b8:	c540      	stmia	r5!, {r6}
 800f5ba:	e7ec      	b.n	800f596 <__copybits+0x18>
 800f5bc:	c008      	stmia	r0!, {r3}
 800f5be:	e7f7      	b.n	800f5b0 <__copybits+0x32>

0800f5c0 <__any_on>:
 800f5c0:	0002      	movs	r2, r0
 800f5c2:	6900      	ldr	r0, [r0, #16]
 800f5c4:	b510      	push	{r4, lr}
 800f5c6:	3214      	adds	r2, #20
 800f5c8:	114b      	asrs	r3, r1, #5
 800f5ca:	4298      	cmp	r0, r3
 800f5cc:	db13      	blt.n	800f5f6 <__any_on+0x36>
 800f5ce:	dd0c      	ble.n	800f5ea <__any_on+0x2a>
 800f5d0:	241f      	movs	r4, #31
 800f5d2:	0008      	movs	r0, r1
 800f5d4:	4020      	ands	r0, r4
 800f5d6:	4221      	tst	r1, r4
 800f5d8:	d007      	beq.n	800f5ea <__any_on+0x2a>
 800f5da:	0099      	lsls	r1, r3, #2
 800f5dc:	588c      	ldr	r4, [r1, r2]
 800f5de:	0021      	movs	r1, r4
 800f5e0:	40c1      	lsrs	r1, r0
 800f5e2:	4081      	lsls	r1, r0
 800f5e4:	2001      	movs	r0, #1
 800f5e6:	428c      	cmp	r4, r1
 800f5e8:	d104      	bne.n	800f5f4 <__any_on+0x34>
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	18d3      	adds	r3, r2, r3
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d803      	bhi.n	800f5fa <__any_on+0x3a>
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	bd10      	pop	{r4, pc}
 800f5f6:	0003      	movs	r3, r0
 800f5f8:	e7f7      	b.n	800f5ea <__any_on+0x2a>
 800f5fa:	3b04      	subs	r3, #4
 800f5fc:	6819      	ldr	r1, [r3, #0]
 800f5fe:	2900      	cmp	r1, #0
 800f600:	d0f5      	beq.n	800f5ee <__any_on+0x2e>
 800f602:	2001      	movs	r0, #1
 800f604:	e7f6      	b.n	800f5f4 <__any_on+0x34>

0800f606 <__ascii_wctomb>:
 800f606:	0003      	movs	r3, r0
 800f608:	1e08      	subs	r0, r1, #0
 800f60a:	d005      	beq.n	800f618 <__ascii_wctomb+0x12>
 800f60c:	2aff      	cmp	r2, #255	; 0xff
 800f60e:	d904      	bls.n	800f61a <__ascii_wctomb+0x14>
 800f610:	228a      	movs	r2, #138	; 0x8a
 800f612:	2001      	movs	r0, #1
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	4240      	negs	r0, r0
 800f618:	4770      	bx	lr
 800f61a:	2001      	movs	r0, #1
 800f61c:	700a      	strb	r2, [r1, #0]
 800f61e:	e7fb      	b.n	800f618 <__ascii_wctomb+0x12>

0800f620 <__ssputs_r>:
 800f620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f622:	b085      	sub	sp, #20
 800f624:	9301      	str	r3, [sp, #4]
 800f626:	9203      	str	r2, [sp, #12]
 800f628:	688e      	ldr	r6, [r1, #8]
 800f62a:	9a01      	ldr	r2, [sp, #4]
 800f62c:	0007      	movs	r7, r0
 800f62e:	000c      	movs	r4, r1
 800f630:	680b      	ldr	r3, [r1, #0]
 800f632:	4296      	cmp	r6, r2
 800f634:	d831      	bhi.n	800f69a <__ssputs_r+0x7a>
 800f636:	898a      	ldrh	r2, [r1, #12]
 800f638:	2190      	movs	r1, #144	; 0x90
 800f63a:	00c9      	lsls	r1, r1, #3
 800f63c:	420a      	tst	r2, r1
 800f63e:	d029      	beq.n	800f694 <__ssputs_r+0x74>
 800f640:	2003      	movs	r0, #3
 800f642:	6921      	ldr	r1, [r4, #16]
 800f644:	1a5b      	subs	r3, r3, r1
 800f646:	9302      	str	r3, [sp, #8]
 800f648:	6963      	ldr	r3, [r4, #20]
 800f64a:	4343      	muls	r3, r0
 800f64c:	0fdd      	lsrs	r5, r3, #31
 800f64e:	18ed      	adds	r5, r5, r3
 800f650:	9b01      	ldr	r3, [sp, #4]
 800f652:	9802      	ldr	r0, [sp, #8]
 800f654:	3301      	adds	r3, #1
 800f656:	181b      	adds	r3, r3, r0
 800f658:	106d      	asrs	r5, r5, #1
 800f65a:	42ab      	cmp	r3, r5
 800f65c:	d900      	bls.n	800f660 <__ssputs_r+0x40>
 800f65e:	001d      	movs	r5, r3
 800f660:	0552      	lsls	r2, r2, #21
 800f662:	d529      	bpl.n	800f6b8 <__ssputs_r+0x98>
 800f664:	0029      	movs	r1, r5
 800f666:	0038      	movs	r0, r7
 800f668:	f7fb ffba 	bl	800b5e0 <_malloc_r>
 800f66c:	1e06      	subs	r6, r0, #0
 800f66e:	d02d      	beq.n	800f6cc <__ssputs_r+0xac>
 800f670:	9a02      	ldr	r2, [sp, #8]
 800f672:	6921      	ldr	r1, [r4, #16]
 800f674:	f7fe f884 	bl	800d780 <memcpy>
 800f678:	89a2      	ldrh	r2, [r4, #12]
 800f67a:	4b19      	ldr	r3, [pc, #100]	; (800f6e0 <__ssputs_r+0xc0>)
 800f67c:	401a      	ands	r2, r3
 800f67e:	2380      	movs	r3, #128	; 0x80
 800f680:	4313      	orrs	r3, r2
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	9b02      	ldr	r3, [sp, #8]
 800f686:	6126      	str	r6, [r4, #16]
 800f688:	18f6      	adds	r6, r6, r3
 800f68a:	6026      	str	r6, [r4, #0]
 800f68c:	6165      	str	r5, [r4, #20]
 800f68e:	9e01      	ldr	r6, [sp, #4]
 800f690:	1aed      	subs	r5, r5, r3
 800f692:	60a5      	str	r5, [r4, #8]
 800f694:	9b01      	ldr	r3, [sp, #4]
 800f696:	429e      	cmp	r6, r3
 800f698:	d900      	bls.n	800f69c <__ssputs_r+0x7c>
 800f69a:	9e01      	ldr	r6, [sp, #4]
 800f69c:	0032      	movs	r2, r6
 800f69e:	9903      	ldr	r1, [sp, #12]
 800f6a0:	6820      	ldr	r0, [r4, #0]
 800f6a2:	f000 f9e5 	bl	800fa70 <memmove>
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	68a3      	ldr	r3, [r4, #8]
 800f6aa:	1b9b      	subs	r3, r3, r6
 800f6ac:	60a3      	str	r3, [r4, #8]
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	199b      	adds	r3, r3, r6
 800f6b2:	6023      	str	r3, [r4, #0]
 800f6b4:	b005      	add	sp, #20
 800f6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b8:	002a      	movs	r2, r5
 800f6ba:	0038      	movs	r0, r7
 800f6bc:	f000 fa1f 	bl	800fafe <_realloc_r>
 800f6c0:	1e06      	subs	r6, r0, #0
 800f6c2:	d1df      	bne.n	800f684 <__ssputs_r+0x64>
 800f6c4:	0038      	movs	r0, r7
 800f6c6:	6921      	ldr	r1, [r4, #16]
 800f6c8:	f7fe ff2a 	bl	800e520 <_free_r>
 800f6cc:	230c      	movs	r3, #12
 800f6ce:	2001      	movs	r0, #1
 800f6d0:	603b      	str	r3, [r7, #0]
 800f6d2:	89a2      	ldrh	r2, [r4, #12]
 800f6d4:	3334      	adds	r3, #52	; 0x34
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	81a3      	strh	r3, [r4, #12]
 800f6da:	4240      	negs	r0, r0
 800f6dc:	e7ea      	b.n	800f6b4 <__ssputs_r+0x94>
 800f6de:	46c0      	nop			; (mov r8, r8)
 800f6e0:	fffffb7f 	.word	0xfffffb7f

0800f6e4 <_svfiprintf_r>:
 800f6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6e6:	b0a1      	sub	sp, #132	; 0x84
 800f6e8:	9003      	str	r0, [sp, #12]
 800f6ea:	001d      	movs	r5, r3
 800f6ec:	898b      	ldrh	r3, [r1, #12]
 800f6ee:	000f      	movs	r7, r1
 800f6f0:	0016      	movs	r6, r2
 800f6f2:	061b      	lsls	r3, r3, #24
 800f6f4:	d511      	bpl.n	800f71a <_svfiprintf_r+0x36>
 800f6f6:	690b      	ldr	r3, [r1, #16]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d10e      	bne.n	800f71a <_svfiprintf_r+0x36>
 800f6fc:	2140      	movs	r1, #64	; 0x40
 800f6fe:	f7fb ff6f 	bl	800b5e0 <_malloc_r>
 800f702:	6038      	str	r0, [r7, #0]
 800f704:	6138      	str	r0, [r7, #16]
 800f706:	2800      	cmp	r0, #0
 800f708:	d105      	bne.n	800f716 <_svfiprintf_r+0x32>
 800f70a:	230c      	movs	r3, #12
 800f70c:	9a03      	ldr	r2, [sp, #12]
 800f70e:	3801      	subs	r0, #1
 800f710:	6013      	str	r3, [r2, #0]
 800f712:	b021      	add	sp, #132	; 0x84
 800f714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f716:	2340      	movs	r3, #64	; 0x40
 800f718:	617b      	str	r3, [r7, #20]
 800f71a:	2300      	movs	r3, #0
 800f71c:	ac08      	add	r4, sp, #32
 800f71e:	6163      	str	r3, [r4, #20]
 800f720:	3320      	adds	r3, #32
 800f722:	7663      	strb	r3, [r4, #25]
 800f724:	3310      	adds	r3, #16
 800f726:	76a3      	strb	r3, [r4, #26]
 800f728:	9507      	str	r5, [sp, #28]
 800f72a:	0035      	movs	r5, r6
 800f72c:	782b      	ldrb	r3, [r5, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d001      	beq.n	800f736 <_svfiprintf_r+0x52>
 800f732:	2b25      	cmp	r3, #37	; 0x25
 800f734:	d148      	bne.n	800f7c8 <_svfiprintf_r+0xe4>
 800f736:	1bab      	subs	r3, r5, r6
 800f738:	9305      	str	r3, [sp, #20]
 800f73a:	42b5      	cmp	r5, r6
 800f73c:	d00b      	beq.n	800f756 <_svfiprintf_r+0x72>
 800f73e:	0032      	movs	r2, r6
 800f740:	0039      	movs	r1, r7
 800f742:	9803      	ldr	r0, [sp, #12]
 800f744:	f7ff ff6c 	bl	800f620 <__ssputs_r>
 800f748:	3001      	adds	r0, #1
 800f74a:	d100      	bne.n	800f74e <_svfiprintf_r+0x6a>
 800f74c:	e0af      	b.n	800f8ae <_svfiprintf_r+0x1ca>
 800f74e:	6963      	ldr	r3, [r4, #20]
 800f750:	9a05      	ldr	r2, [sp, #20]
 800f752:	189b      	adds	r3, r3, r2
 800f754:	6163      	str	r3, [r4, #20]
 800f756:	782b      	ldrb	r3, [r5, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d100      	bne.n	800f75e <_svfiprintf_r+0x7a>
 800f75c:	e0a7      	b.n	800f8ae <_svfiprintf_r+0x1ca>
 800f75e:	2201      	movs	r2, #1
 800f760:	2300      	movs	r3, #0
 800f762:	4252      	negs	r2, r2
 800f764:	6062      	str	r2, [r4, #4]
 800f766:	a904      	add	r1, sp, #16
 800f768:	3254      	adds	r2, #84	; 0x54
 800f76a:	1852      	adds	r2, r2, r1
 800f76c:	1c6e      	adds	r6, r5, #1
 800f76e:	6023      	str	r3, [r4, #0]
 800f770:	60e3      	str	r3, [r4, #12]
 800f772:	60a3      	str	r3, [r4, #8]
 800f774:	7013      	strb	r3, [r2, #0]
 800f776:	65a3      	str	r3, [r4, #88]	; 0x58
 800f778:	4b55      	ldr	r3, [pc, #340]	; (800f8d0 <_svfiprintf_r+0x1ec>)
 800f77a:	2205      	movs	r2, #5
 800f77c:	0018      	movs	r0, r3
 800f77e:	7831      	ldrb	r1, [r6, #0]
 800f780:	9305      	str	r3, [sp, #20]
 800f782:	f7fd fff2 	bl	800d76a <memchr>
 800f786:	1c75      	adds	r5, r6, #1
 800f788:	2800      	cmp	r0, #0
 800f78a:	d11f      	bne.n	800f7cc <_svfiprintf_r+0xe8>
 800f78c:	6822      	ldr	r2, [r4, #0]
 800f78e:	06d3      	lsls	r3, r2, #27
 800f790:	d504      	bpl.n	800f79c <_svfiprintf_r+0xb8>
 800f792:	2353      	movs	r3, #83	; 0x53
 800f794:	a904      	add	r1, sp, #16
 800f796:	185b      	adds	r3, r3, r1
 800f798:	2120      	movs	r1, #32
 800f79a:	7019      	strb	r1, [r3, #0]
 800f79c:	0713      	lsls	r3, r2, #28
 800f79e:	d504      	bpl.n	800f7aa <_svfiprintf_r+0xc6>
 800f7a0:	2353      	movs	r3, #83	; 0x53
 800f7a2:	a904      	add	r1, sp, #16
 800f7a4:	185b      	adds	r3, r3, r1
 800f7a6:	212b      	movs	r1, #43	; 0x2b
 800f7a8:	7019      	strb	r1, [r3, #0]
 800f7aa:	7833      	ldrb	r3, [r6, #0]
 800f7ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ae:	d016      	beq.n	800f7de <_svfiprintf_r+0xfa>
 800f7b0:	0035      	movs	r5, r6
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	200a      	movs	r0, #10
 800f7b6:	68e3      	ldr	r3, [r4, #12]
 800f7b8:	782a      	ldrb	r2, [r5, #0]
 800f7ba:	1c6e      	adds	r6, r5, #1
 800f7bc:	3a30      	subs	r2, #48	; 0x30
 800f7be:	2a09      	cmp	r2, #9
 800f7c0:	d94e      	bls.n	800f860 <_svfiprintf_r+0x17c>
 800f7c2:	2900      	cmp	r1, #0
 800f7c4:	d111      	bne.n	800f7ea <_svfiprintf_r+0x106>
 800f7c6:	e017      	b.n	800f7f8 <_svfiprintf_r+0x114>
 800f7c8:	3501      	adds	r5, #1
 800f7ca:	e7af      	b.n	800f72c <_svfiprintf_r+0x48>
 800f7cc:	9b05      	ldr	r3, [sp, #20]
 800f7ce:	6822      	ldr	r2, [r4, #0]
 800f7d0:	1ac0      	subs	r0, r0, r3
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	4083      	lsls	r3, r0
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	002e      	movs	r6, r5
 800f7da:	6023      	str	r3, [r4, #0]
 800f7dc:	e7cc      	b.n	800f778 <_svfiprintf_r+0x94>
 800f7de:	9b07      	ldr	r3, [sp, #28]
 800f7e0:	1d19      	adds	r1, r3, #4
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	9107      	str	r1, [sp, #28]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	db01      	blt.n	800f7ee <_svfiprintf_r+0x10a>
 800f7ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7ec:	e004      	b.n	800f7f8 <_svfiprintf_r+0x114>
 800f7ee:	425b      	negs	r3, r3
 800f7f0:	60e3      	str	r3, [r4, #12]
 800f7f2:	2302      	movs	r3, #2
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	6023      	str	r3, [r4, #0]
 800f7f8:	782b      	ldrb	r3, [r5, #0]
 800f7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800f7fc:	d10a      	bne.n	800f814 <_svfiprintf_r+0x130>
 800f7fe:	786b      	ldrb	r3, [r5, #1]
 800f800:	2b2a      	cmp	r3, #42	; 0x2a
 800f802:	d135      	bne.n	800f870 <_svfiprintf_r+0x18c>
 800f804:	9b07      	ldr	r3, [sp, #28]
 800f806:	3502      	adds	r5, #2
 800f808:	1d1a      	adds	r2, r3, #4
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	9207      	str	r2, [sp, #28]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	db2b      	blt.n	800f86a <_svfiprintf_r+0x186>
 800f812:	9309      	str	r3, [sp, #36]	; 0x24
 800f814:	4e2f      	ldr	r6, [pc, #188]	; (800f8d4 <_svfiprintf_r+0x1f0>)
 800f816:	2203      	movs	r2, #3
 800f818:	0030      	movs	r0, r6
 800f81a:	7829      	ldrb	r1, [r5, #0]
 800f81c:	f7fd ffa5 	bl	800d76a <memchr>
 800f820:	2800      	cmp	r0, #0
 800f822:	d006      	beq.n	800f832 <_svfiprintf_r+0x14e>
 800f824:	2340      	movs	r3, #64	; 0x40
 800f826:	1b80      	subs	r0, r0, r6
 800f828:	4083      	lsls	r3, r0
 800f82a:	6822      	ldr	r2, [r4, #0]
 800f82c:	3501      	adds	r5, #1
 800f82e:	4313      	orrs	r3, r2
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	7829      	ldrb	r1, [r5, #0]
 800f834:	2206      	movs	r2, #6
 800f836:	4828      	ldr	r0, [pc, #160]	; (800f8d8 <_svfiprintf_r+0x1f4>)
 800f838:	1c6e      	adds	r6, r5, #1
 800f83a:	7621      	strb	r1, [r4, #24]
 800f83c:	f7fd ff95 	bl	800d76a <memchr>
 800f840:	2800      	cmp	r0, #0
 800f842:	d03c      	beq.n	800f8be <_svfiprintf_r+0x1da>
 800f844:	4b25      	ldr	r3, [pc, #148]	; (800f8dc <_svfiprintf_r+0x1f8>)
 800f846:	2b00      	cmp	r3, #0
 800f848:	d125      	bne.n	800f896 <_svfiprintf_r+0x1b2>
 800f84a:	2207      	movs	r2, #7
 800f84c:	9b07      	ldr	r3, [sp, #28]
 800f84e:	3307      	adds	r3, #7
 800f850:	4393      	bics	r3, r2
 800f852:	3308      	adds	r3, #8
 800f854:	9307      	str	r3, [sp, #28]
 800f856:	6963      	ldr	r3, [r4, #20]
 800f858:	9a04      	ldr	r2, [sp, #16]
 800f85a:	189b      	adds	r3, r3, r2
 800f85c:	6163      	str	r3, [r4, #20]
 800f85e:	e764      	b.n	800f72a <_svfiprintf_r+0x46>
 800f860:	4343      	muls	r3, r0
 800f862:	0035      	movs	r5, r6
 800f864:	2101      	movs	r1, #1
 800f866:	189b      	adds	r3, r3, r2
 800f868:	e7a6      	b.n	800f7b8 <_svfiprintf_r+0xd4>
 800f86a:	2301      	movs	r3, #1
 800f86c:	425b      	negs	r3, r3
 800f86e:	e7d0      	b.n	800f812 <_svfiprintf_r+0x12e>
 800f870:	2300      	movs	r3, #0
 800f872:	200a      	movs	r0, #10
 800f874:	001a      	movs	r2, r3
 800f876:	3501      	adds	r5, #1
 800f878:	6063      	str	r3, [r4, #4]
 800f87a:	7829      	ldrb	r1, [r5, #0]
 800f87c:	1c6e      	adds	r6, r5, #1
 800f87e:	3930      	subs	r1, #48	; 0x30
 800f880:	2909      	cmp	r1, #9
 800f882:	d903      	bls.n	800f88c <_svfiprintf_r+0x1a8>
 800f884:	2b00      	cmp	r3, #0
 800f886:	d0c5      	beq.n	800f814 <_svfiprintf_r+0x130>
 800f888:	9209      	str	r2, [sp, #36]	; 0x24
 800f88a:	e7c3      	b.n	800f814 <_svfiprintf_r+0x130>
 800f88c:	4342      	muls	r2, r0
 800f88e:	0035      	movs	r5, r6
 800f890:	2301      	movs	r3, #1
 800f892:	1852      	adds	r2, r2, r1
 800f894:	e7f1      	b.n	800f87a <_svfiprintf_r+0x196>
 800f896:	aa07      	add	r2, sp, #28
 800f898:	9200      	str	r2, [sp, #0]
 800f89a:	0021      	movs	r1, r4
 800f89c:	003a      	movs	r2, r7
 800f89e:	4b10      	ldr	r3, [pc, #64]	; (800f8e0 <_svfiprintf_r+0x1fc>)
 800f8a0:	9803      	ldr	r0, [sp, #12]
 800f8a2:	f7fc fe97 	bl	800c5d4 <_printf_float>
 800f8a6:	9004      	str	r0, [sp, #16]
 800f8a8:	9b04      	ldr	r3, [sp, #16]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	d1d3      	bne.n	800f856 <_svfiprintf_r+0x172>
 800f8ae:	89bb      	ldrh	r3, [r7, #12]
 800f8b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f8b2:	065b      	lsls	r3, r3, #25
 800f8b4:	d400      	bmi.n	800f8b8 <_svfiprintf_r+0x1d4>
 800f8b6:	e72c      	b.n	800f712 <_svfiprintf_r+0x2e>
 800f8b8:	2001      	movs	r0, #1
 800f8ba:	4240      	negs	r0, r0
 800f8bc:	e729      	b.n	800f712 <_svfiprintf_r+0x2e>
 800f8be:	aa07      	add	r2, sp, #28
 800f8c0:	9200      	str	r2, [sp, #0]
 800f8c2:	0021      	movs	r1, r4
 800f8c4:	003a      	movs	r2, r7
 800f8c6:	4b06      	ldr	r3, [pc, #24]	; (800f8e0 <_svfiprintf_r+0x1fc>)
 800f8c8:	9803      	ldr	r0, [sp, #12]
 800f8ca:	f7fd f949 	bl	800cb60 <_printf_i>
 800f8ce:	e7ea      	b.n	800f8a6 <_svfiprintf_r+0x1c2>
 800f8d0:	0801246c 	.word	0x0801246c
 800f8d4:	08012472 	.word	0x08012472
 800f8d8:	08012476 	.word	0x08012476
 800f8dc:	0800c5d5 	.word	0x0800c5d5
 800f8e0:	0800f621 	.word	0x0800f621

0800f8e4 <__sflush_r>:
 800f8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8e6:	898b      	ldrh	r3, [r1, #12]
 800f8e8:	0005      	movs	r5, r0
 800f8ea:	000c      	movs	r4, r1
 800f8ec:	071a      	lsls	r2, r3, #28
 800f8ee:	d45c      	bmi.n	800f9aa <__sflush_r+0xc6>
 800f8f0:	684a      	ldr	r2, [r1, #4]
 800f8f2:	2a00      	cmp	r2, #0
 800f8f4:	dc04      	bgt.n	800f900 <__sflush_r+0x1c>
 800f8f6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f8f8:	2a00      	cmp	r2, #0
 800f8fa:	dc01      	bgt.n	800f900 <__sflush_r+0x1c>
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f900:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f902:	2f00      	cmp	r7, #0
 800f904:	d0fa      	beq.n	800f8fc <__sflush_r+0x18>
 800f906:	2200      	movs	r2, #0
 800f908:	2080      	movs	r0, #128	; 0x80
 800f90a:	682e      	ldr	r6, [r5, #0]
 800f90c:	602a      	str	r2, [r5, #0]
 800f90e:	001a      	movs	r2, r3
 800f910:	0140      	lsls	r0, r0, #5
 800f912:	6a21      	ldr	r1, [r4, #32]
 800f914:	4002      	ands	r2, r0
 800f916:	4203      	tst	r3, r0
 800f918:	d034      	beq.n	800f984 <__sflush_r+0xa0>
 800f91a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	075b      	lsls	r3, r3, #29
 800f920:	d506      	bpl.n	800f930 <__sflush_r+0x4c>
 800f922:	6863      	ldr	r3, [r4, #4]
 800f924:	1ac0      	subs	r0, r0, r3
 800f926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d001      	beq.n	800f930 <__sflush_r+0x4c>
 800f92c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f92e:	1ac0      	subs	r0, r0, r3
 800f930:	0002      	movs	r2, r0
 800f932:	2300      	movs	r3, #0
 800f934:	0028      	movs	r0, r5
 800f936:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f938:	6a21      	ldr	r1, [r4, #32]
 800f93a:	47b8      	blx	r7
 800f93c:	89a2      	ldrh	r2, [r4, #12]
 800f93e:	1c43      	adds	r3, r0, #1
 800f940:	d106      	bne.n	800f950 <__sflush_r+0x6c>
 800f942:	6829      	ldr	r1, [r5, #0]
 800f944:	291d      	cmp	r1, #29
 800f946:	d82c      	bhi.n	800f9a2 <__sflush_r+0xbe>
 800f948:	4b2a      	ldr	r3, [pc, #168]	; (800f9f4 <__sflush_r+0x110>)
 800f94a:	410b      	asrs	r3, r1
 800f94c:	07db      	lsls	r3, r3, #31
 800f94e:	d428      	bmi.n	800f9a2 <__sflush_r+0xbe>
 800f950:	2300      	movs	r3, #0
 800f952:	6063      	str	r3, [r4, #4]
 800f954:	6923      	ldr	r3, [r4, #16]
 800f956:	6023      	str	r3, [r4, #0]
 800f958:	04d2      	lsls	r2, r2, #19
 800f95a:	d505      	bpl.n	800f968 <__sflush_r+0x84>
 800f95c:	1c43      	adds	r3, r0, #1
 800f95e:	d102      	bne.n	800f966 <__sflush_r+0x82>
 800f960:	682b      	ldr	r3, [r5, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d100      	bne.n	800f968 <__sflush_r+0x84>
 800f966:	6560      	str	r0, [r4, #84]	; 0x54
 800f968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f96a:	602e      	str	r6, [r5, #0]
 800f96c:	2900      	cmp	r1, #0
 800f96e:	d0c5      	beq.n	800f8fc <__sflush_r+0x18>
 800f970:	0023      	movs	r3, r4
 800f972:	3344      	adds	r3, #68	; 0x44
 800f974:	4299      	cmp	r1, r3
 800f976:	d002      	beq.n	800f97e <__sflush_r+0x9a>
 800f978:	0028      	movs	r0, r5
 800f97a:	f7fe fdd1 	bl	800e520 <_free_r>
 800f97e:	2000      	movs	r0, #0
 800f980:	6360      	str	r0, [r4, #52]	; 0x34
 800f982:	e7bc      	b.n	800f8fe <__sflush_r+0x1a>
 800f984:	2301      	movs	r3, #1
 800f986:	0028      	movs	r0, r5
 800f988:	47b8      	blx	r7
 800f98a:	1c43      	adds	r3, r0, #1
 800f98c:	d1c6      	bne.n	800f91c <__sflush_r+0x38>
 800f98e:	682b      	ldr	r3, [r5, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0c3      	beq.n	800f91c <__sflush_r+0x38>
 800f994:	2b1d      	cmp	r3, #29
 800f996:	d001      	beq.n	800f99c <__sflush_r+0xb8>
 800f998:	2b16      	cmp	r3, #22
 800f99a:	d101      	bne.n	800f9a0 <__sflush_r+0xbc>
 800f99c:	602e      	str	r6, [r5, #0]
 800f99e:	e7ad      	b.n	800f8fc <__sflush_r+0x18>
 800f9a0:	89a2      	ldrh	r2, [r4, #12]
 800f9a2:	2340      	movs	r3, #64	; 0x40
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	81a3      	strh	r3, [r4, #12]
 800f9a8:	e7a9      	b.n	800f8fe <__sflush_r+0x1a>
 800f9aa:	690e      	ldr	r6, [r1, #16]
 800f9ac:	2e00      	cmp	r6, #0
 800f9ae:	d0a5      	beq.n	800f8fc <__sflush_r+0x18>
 800f9b0:	680f      	ldr	r7, [r1, #0]
 800f9b2:	600e      	str	r6, [r1, #0]
 800f9b4:	1bba      	subs	r2, r7, r6
 800f9b6:	9201      	str	r2, [sp, #4]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	079b      	lsls	r3, r3, #30
 800f9bc:	d100      	bne.n	800f9c0 <__sflush_r+0xdc>
 800f9be:	694a      	ldr	r2, [r1, #20]
 800f9c0:	60a2      	str	r2, [r4, #8]
 800f9c2:	9b01      	ldr	r3, [sp, #4]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	dd99      	ble.n	800f8fc <__sflush_r+0x18>
 800f9c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f9ca:	0032      	movs	r2, r6
 800f9cc:	001f      	movs	r7, r3
 800f9ce:	0028      	movs	r0, r5
 800f9d0:	9b01      	ldr	r3, [sp, #4]
 800f9d2:	6a21      	ldr	r1, [r4, #32]
 800f9d4:	47b8      	blx	r7
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	dc06      	bgt.n	800f9e8 <__sflush_r+0x104>
 800f9da:	2340      	movs	r3, #64	; 0x40
 800f9dc:	2001      	movs	r0, #1
 800f9de:	89a2      	ldrh	r2, [r4, #12]
 800f9e0:	4240      	negs	r0, r0
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	81a3      	strh	r3, [r4, #12]
 800f9e6:	e78a      	b.n	800f8fe <__sflush_r+0x1a>
 800f9e8:	9b01      	ldr	r3, [sp, #4]
 800f9ea:	1836      	adds	r6, r6, r0
 800f9ec:	1a1b      	subs	r3, r3, r0
 800f9ee:	9301      	str	r3, [sp, #4]
 800f9f0:	e7e7      	b.n	800f9c2 <__sflush_r+0xde>
 800f9f2:	46c0      	nop			; (mov r8, r8)
 800f9f4:	dfbffffe 	.word	0xdfbffffe

0800f9f8 <_fflush_r>:
 800f9f8:	690b      	ldr	r3, [r1, #16]
 800f9fa:	b570      	push	{r4, r5, r6, lr}
 800f9fc:	0005      	movs	r5, r0
 800f9fe:	000c      	movs	r4, r1
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d102      	bne.n	800fa0a <_fflush_r+0x12>
 800fa04:	2500      	movs	r5, #0
 800fa06:	0028      	movs	r0, r5
 800fa08:	bd70      	pop	{r4, r5, r6, pc}
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d004      	beq.n	800fa18 <_fflush_r+0x20>
 800fa0e:	6a03      	ldr	r3, [r0, #32]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d101      	bne.n	800fa18 <_fflush_r+0x20>
 800fa14:	f7fd fc4c 	bl	800d2b0 <__sinit>
 800fa18:	220c      	movs	r2, #12
 800fa1a:	5ea3      	ldrsh	r3, [r4, r2]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d0f1      	beq.n	800fa04 <_fflush_r+0xc>
 800fa20:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa22:	07d2      	lsls	r2, r2, #31
 800fa24:	d404      	bmi.n	800fa30 <_fflush_r+0x38>
 800fa26:	059b      	lsls	r3, r3, #22
 800fa28:	d402      	bmi.n	800fa30 <_fflush_r+0x38>
 800fa2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa2c:	f7fd fe93 	bl	800d756 <__retarget_lock_acquire_recursive>
 800fa30:	0028      	movs	r0, r5
 800fa32:	0021      	movs	r1, r4
 800fa34:	f7ff ff56 	bl	800f8e4 <__sflush_r>
 800fa38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa3a:	0005      	movs	r5, r0
 800fa3c:	07db      	lsls	r3, r3, #31
 800fa3e:	d4e2      	bmi.n	800fa06 <_fflush_r+0xe>
 800fa40:	89a3      	ldrh	r3, [r4, #12]
 800fa42:	059b      	lsls	r3, r3, #22
 800fa44:	d4df      	bmi.n	800fa06 <_fflush_r+0xe>
 800fa46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa48:	f7fd fe86 	bl	800d758 <__retarget_lock_release_recursive>
 800fa4c:	e7db      	b.n	800fa06 <_fflush_r+0xe>
	...

0800fa50 <fiprintf>:
 800fa50:	b40e      	push	{r1, r2, r3}
 800fa52:	b517      	push	{r0, r1, r2, r4, lr}
 800fa54:	4c05      	ldr	r4, [pc, #20]	; (800fa6c <fiprintf+0x1c>)
 800fa56:	ab05      	add	r3, sp, #20
 800fa58:	cb04      	ldmia	r3!, {r2}
 800fa5a:	0001      	movs	r1, r0
 800fa5c:	6820      	ldr	r0, [r4, #0]
 800fa5e:	9301      	str	r3, [sp, #4]
 800fa60:	f000 f8a4 	bl	800fbac <_vfiprintf_r>
 800fa64:	bc1e      	pop	{r1, r2, r3, r4}
 800fa66:	bc08      	pop	{r3}
 800fa68:	b003      	add	sp, #12
 800fa6a:	4718      	bx	r3
 800fa6c:	200001f4 	.word	0x200001f4

0800fa70 <memmove>:
 800fa70:	b510      	push	{r4, lr}
 800fa72:	4288      	cmp	r0, r1
 800fa74:	d902      	bls.n	800fa7c <memmove+0xc>
 800fa76:	188b      	adds	r3, r1, r2
 800fa78:	4298      	cmp	r0, r3
 800fa7a:	d303      	bcc.n	800fa84 <memmove+0x14>
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	e007      	b.n	800fa90 <memmove+0x20>
 800fa80:	5c8b      	ldrb	r3, [r1, r2]
 800fa82:	5483      	strb	r3, [r0, r2]
 800fa84:	3a01      	subs	r2, #1
 800fa86:	d2fb      	bcs.n	800fa80 <memmove+0x10>
 800fa88:	bd10      	pop	{r4, pc}
 800fa8a:	5ccc      	ldrb	r4, [r1, r3]
 800fa8c:	54c4      	strb	r4, [r0, r3]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d1fa      	bne.n	800fa8a <memmove+0x1a>
 800fa94:	e7f8      	b.n	800fa88 <memmove+0x18>

0800fa96 <abort>:
 800fa96:	2006      	movs	r0, #6
 800fa98:	b510      	push	{r4, lr}
 800fa9a:	f000 fa73 	bl	800ff84 <raise>
 800fa9e:	2001      	movs	r0, #1
 800faa0:	f7f6 fbae 	bl	8006200 <_exit>

0800faa4 <_calloc_r>:
 800faa4:	b570      	push	{r4, r5, r6, lr}
 800faa6:	0c0b      	lsrs	r3, r1, #16
 800faa8:	0c15      	lsrs	r5, r2, #16
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d11e      	bne.n	800faec <_calloc_r+0x48>
 800faae:	2d00      	cmp	r5, #0
 800fab0:	d10c      	bne.n	800facc <_calloc_r+0x28>
 800fab2:	b289      	uxth	r1, r1
 800fab4:	b294      	uxth	r4, r2
 800fab6:	434c      	muls	r4, r1
 800fab8:	0021      	movs	r1, r4
 800faba:	f7fb fd91 	bl	800b5e0 <_malloc_r>
 800fabe:	1e05      	subs	r5, r0, #0
 800fac0:	d01b      	beq.n	800fafa <_calloc_r+0x56>
 800fac2:	0022      	movs	r2, r4
 800fac4:	2100      	movs	r1, #0
 800fac6:	f7fd fc93 	bl	800d3f0 <memset>
 800faca:	e016      	b.n	800fafa <_calloc_r+0x56>
 800facc:	1c2b      	adds	r3, r5, #0
 800face:	1c0c      	adds	r4, r1, #0
 800fad0:	b289      	uxth	r1, r1
 800fad2:	b292      	uxth	r2, r2
 800fad4:	434a      	muls	r2, r1
 800fad6:	b2a1      	uxth	r1, r4
 800fad8:	b29c      	uxth	r4, r3
 800fada:	434c      	muls	r4, r1
 800fadc:	0c13      	lsrs	r3, r2, #16
 800fade:	18e4      	adds	r4, r4, r3
 800fae0:	0c23      	lsrs	r3, r4, #16
 800fae2:	d107      	bne.n	800faf4 <_calloc_r+0x50>
 800fae4:	0424      	lsls	r4, r4, #16
 800fae6:	b292      	uxth	r2, r2
 800fae8:	4314      	orrs	r4, r2
 800faea:	e7e5      	b.n	800fab8 <_calloc_r+0x14>
 800faec:	2d00      	cmp	r5, #0
 800faee:	d101      	bne.n	800faf4 <_calloc_r+0x50>
 800faf0:	1c14      	adds	r4, r2, #0
 800faf2:	e7ed      	b.n	800fad0 <_calloc_r+0x2c>
 800faf4:	230c      	movs	r3, #12
 800faf6:	2500      	movs	r5, #0
 800faf8:	6003      	str	r3, [r0, #0]
 800fafa:	0028      	movs	r0, r5
 800fafc:	bd70      	pop	{r4, r5, r6, pc}

0800fafe <_realloc_r>:
 800fafe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb00:	0007      	movs	r7, r0
 800fb02:	000e      	movs	r6, r1
 800fb04:	0014      	movs	r4, r2
 800fb06:	2900      	cmp	r1, #0
 800fb08:	d105      	bne.n	800fb16 <_realloc_r+0x18>
 800fb0a:	0011      	movs	r1, r2
 800fb0c:	f7fb fd68 	bl	800b5e0 <_malloc_r>
 800fb10:	0005      	movs	r5, r0
 800fb12:	0028      	movs	r0, r5
 800fb14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb16:	2a00      	cmp	r2, #0
 800fb18:	d103      	bne.n	800fb22 <_realloc_r+0x24>
 800fb1a:	f7fe fd01 	bl	800e520 <_free_r>
 800fb1e:	0025      	movs	r5, r4
 800fb20:	e7f7      	b.n	800fb12 <_realloc_r+0x14>
 800fb22:	f000 fa4f 	bl	800ffc4 <_malloc_usable_size_r>
 800fb26:	9001      	str	r0, [sp, #4]
 800fb28:	4284      	cmp	r4, r0
 800fb2a:	d803      	bhi.n	800fb34 <_realloc_r+0x36>
 800fb2c:	0035      	movs	r5, r6
 800fb2e:	0843      	lsrs	r3, r0, #1
 800fb30:	42a3      	cmp	r3, r4
 800fb32:	d3ee      	bcc.n	800fb12 <_realloc_r+0x14>
 800fb34:	0021      	movs	r1, r4
 800fb36:	0038      	movs	r0, r7
 800fb38:	f7fb fd52 	bl	800b5e0 <_malloc_r>
 800fb3c:	1e05      	subs	r5, r0, #0
 800fb3e:	d0e8      	beq.n	800fb12 <_realloc_r+0x14>
 800fb40:	9b01      	ldr	r3, [sp, #4]
 800fb42:	0022      	movs	r2, r4
 800fb44:	429c      	cmp	r4, r3
 800fb46:	d900      	bls.n	800fb4a <_realloc_r+0x4c>
 800fb48:	001a      	movs	r2, r3
 800fb4a:	0031      	movs	r1, r6
 800fb4c:	0028      	movs	r0, r5
 800fb4e:	f7fd fe17 	bl	800d780 <memcpy>
 800fb52:	0031      	movs	r1, r6
 800fb54:	0038      	movs	r0, r7
 800fb56:	f7fe fce3 	bl	800e520 <_free_r>
 800fb5a:	e7da      	b.n	800fb12 <_realloc_r+0x14>

0800fb5c <__sfputc_r>:
 800fb5c:	6893      	ldr	r3, [r2, #8]
 800fb5e:	b510      	push	{r4, lr}
 800fb60:	3b01      	subs	r3, #1
 800fb62:	6093      	str	r3, [r2, #8]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	da04      	bge.n	800fb72 <__sfputc_r+0x16>
 800fb68:	6994      	ldr	r4, [r2, #24]
 800fb6a:	42a3      	cmp	r3, r4
 800fb6c:	db07      	blt.n	800fb7e <__sfputc_r+0x22>
 800fb6e:	290a      	cmp	r1, #10
 800fb70:	d005      	beq.n	800fb7e <__sfputc_r+0x22>
 800fb72:	6813      	ldr	r3, [r2, #0]
 800fb74:	1c58      	adds	r0, r3, #1
 800fb76:	6010      	str	r0, [r2, #0]
 800fb78:	7019      	strb	r1, [r3, #0]
 800fb7a:	0008      	movs	r0, r1
 800fb7c:	bd10      	pop	{r4, pc}
 800fb7e:	f000 f931 	bl	800fde4 <__swbuf_r>
 800fb82:	0001      	movs	r1, r0
 800fb84:	e7f9      	b.n	800fb7a <__sfputc_r+0x1e>

0800fb86 <__sfputs_r>:
 800fb86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb88:	0006      	movs	r6, r0
 800fb8a:	000f      	movs	r7, r1
 800fb8c:	0014      	movs	r4, r2
 800fb8e:	18d5      	adds	r5, r2, r3
 800fb90:	42ac      	cmp	r4, r5
 800fb92:	d101      	bne.n	800fb98 <__sfputs_r+0x12>
 800fb94:	2000      	movs	r0, #0
 800fb96:	e007      	b.n	800fba8 <__sfputs_r+0x22>
 800fb98:	7821      	ldrb	r1, [r4, #0]
 800fb9a:	003a      	movs	r2, r7
 800fb9c:	0030      	movs	r0, r6
 800fb9e:	f7ff ffdd 	bl	800fb5c <__sfputc_r>
 800fba2:	3401      	adds	r4, #1
 800fba4:	1c43      	adds	r3, r0, #1
 800fba6:	d1f3      	bne.n	800fb90 <__sfputs_r+0xa>
 800fba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbac <_vfiprintf_r>:
 800fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbae:	b0a1      	sub	sp, #132	; 0x84
 800fbb0:	000f      	movs	r7, r1
 800fbb2:	0015      	movs	r5, r2
 800fbb4:	001e      	movs	r6, r3
 800fbb6:	9003      	str	r0, [sp, #12]
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d004      	beq.n	800fbc6 <_vfiprintf_r+0x1a>
 800fbbc:	6a03      	ldr	r3, [r0, #32]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d101      	bne.n	800fbc6 <_vfiprintf_r+0x1a>
 800fbc2:	f7fd fb75 	bl	800d2b0 <__sinit>
 800fbc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbc8:	07db      	lsls	r3, r3, #31
 800fbca:	d405      	bmi.n	800fbd8 <_vfiprintf_r+0x2c>
 800fbcc:	89bb      	ldrh	r3, [r7, #12]
 800fbce:	059b      	lsls	r3, r3, #22
 800fbd0:	d402      	bmi.n	800fbd8 <_vfiprintf_r+0x2c>
 800fbd2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fbd4:	f7fd fdbf 	bl	800d756 <__retarget_lock_acquire_recursive>
 800fbd8:	89bb      	ldrh	r3, [r7, #12]
 800fbda:	071b      	lsls	r3, r3, #28
 800fbdc:	d502      	bpl.n	800fbe4 <_vfiprintf_r+0x38>
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d113      	bne.n	800fc0c <_vfiprintf_r+0x60>
 800fbe4:	0039      	movs	r1, r7
 800fbe6:	9803      	ldr	r0, [sp, #12]
 800fbe8:	f000 f93e 	bl	800fe68 <__swsetup_r>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d00d      	beq.n	800fc0c <_vfiprintf_r+0x60>
 800fbf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbf2:	07db      	lsls	r3, r3, #31
 800fbf4:	d503      	bpl.n	800fbfe <_vfiprintf_r+0x52>
 800fbf6:	2001      	movs	r0, #1
 800fbf8:	4240      	negs	r0, r0
 800fbfa:	b021      	add	sp, #132	; 0x84
 800fbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbfe:	89bb      	ldrh	r3, [r7, #12]
 800fc00:	059b      	lsls	r3, r3, #22
 800fc02:	d4f8      	bmi.n	800fbf6 <_vfiprintf_r+0x4a>
 800fc04:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fc06:	f7fd fda7 	bl	800d758 <__retarget_lock_release_recursive>
 800fc0a:	e7f4      	b.n	800fbf6 <_vfiprintf_r+0x4a>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	ac08      	add	r4, sp, #32
 800fc10:	6163      	str	r3, [r4, #20]
 800fc12:	3320      	adds	r3, #32
 800fc14:	7663      	strb	r3, [r4, #25]
 800fc16:	3310      	adds	r3, #16
 800fc18:	76a3      	strb	r3, [r4, #26]
 800fc1a:	9607      	str	r6, [sp, #28]
 800fc1c:	002e      	movs	r6, r5
 800fc1e:	7833      	ldrb	r3, [r6, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d001      	beq.n	800fc28 <_vfiprintf_r+0x7c>
 800fc24:	2b25      	cmp	r3, #37	; 0x25
 800fc26:	d148      	bne.n	800fcba <_vfiprintf_r+0x10e>
 800fc28:	1b73      	subs	r3, r6, r5
 800fc2a:	9305      	str	r3, [sp, #20]
 800fc2c:	42ae      	cmp	r6, r5
 800fc2e:	d00b      	beq.n	800fc48 <_vfiprintf_r+0x9c>
 800fc30:	002a      	movs	r2, r5
 800fc32:	0039      	movs	r1, r7
 800fc34:	9803      	ldr	r0, [sp, #12]
 800fc36:	f7ff ffa6 	bl	800fb86 <__sfputs_r>
 800fc3a:	3001      	adds	r0, #1
 800fc3c:	d100      	bne.n	800fc40 <_vfiprintf_r+0x94>
 800fc3e:	e0af      	b.n	800fda0 <_vfiprintf_r+0x1f4>
 800fc40:	6963      	ldr	r3, [r4, #20]
 800fc42:	9a05      	ldr	r2, [sp, #20]
 800fc44:	189b      	adds	r3, r3, r2
 800fc46:	6163      	str	r3, [r4, #20]
 800fc48:	7833      	ldrb	r3, [r6, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d100      	bne.n	800fc50 <_vfiprintf_r+0xa4>
 800fc4e:	e0a7      	b.n	800fda0 <_vfiprintf_r+0x1f4>
 800fc50:	2201      	movs	r2, #1
 800fc52:	2300      	movs	r3, #0
 800fc54:	4252      	negs	r2, r2
 800fc56:	6062      	str	r2, [r4, #4]
 800fc58:	a904      	add	r1, sp, #16
 800fc5a:	3254      	adds	r2, #84	; 0x54
 800fc5c:	1852      	adds	r2, r2, r1
 800fc5e:	1c75      	adds	r5, r6, #1
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	60e3      	str	r3, [r4, #12]
 800fc64:	60a3      	str	r3, [r4, #8]
 800fc66:	7013      	strb	r3, [r2, #0]
 800fc68:	65a3      	str	r3, [r4, #88]	; 0x58
 800fc6a:	4b59      	ldr	r3, [pc, #356]	; (800fdd0 <_vfiprintf_r+0x224>)
 800fc6c:	2205      	movs	r2, #5
 800fc6e:	0018      	movs	r0, r3
 800fc70:	7829      	ldrb	r1, [r5, #0]
 800fc72:	9305      	str	r3, [sp, #20]
 800fc74:	f7fd fd79 	bl	800d76a <memchr>
 800fc78:	1c6e      	adds	r6, r5, #1
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	d11f      	bne.n	800fcbe <_vfiprintf_r+0x112>
 800fc7e:	6822      	ldr	r2, [r4, #0]
 800fc80:	06d3      	lsls	r3, r2, #27
 800fc82:	d504      	bpl.n	800fc8e <_vfiprintf_r+0xe2>
 800fc84:	2353      	movs	r3, #83	; 0x53
 800fc86:	a904      	add	r1, sp, #16
 800fc88:	185b      	adds	r3, r3, r1
 800fc8a:	2120      	movs	r1, #32
 800fc8c:	7019      	strb	r1, [r3, #0]
 800fc8e:	0713      	lsls	r3, r2, #28
 800fc90:	d504      	bpl.n	800fc9c <_vfiprintf_r+0xf0>
 800fc92:	2353      	movs	r3, #83	; 0x53
 800fc94:	a904      	add	r1, sp, #16
 800fc96:	185b      	adds	r3, r3, r1
 800fc98:	212b      	movs	r1, #43	; 0x2b
 800fc9a:	7019      	strb	r1, [r3, #0]
 800fc9c:	782b      	ldrb	r3, [r5, #0]
 800fc9e:	2b2a      	cmp	r3, #42	; 0x2a
 800fca0:	d016      	beq.n	800fcd0 <_vfiprintf_r+0x124>
 800fca2:	002e      	movs	r6, r5
 800fca4:	2100      	movs	r1, #0
 800fca6:	200a      	movs	r0, #10
 800fca8:	68e3      	ldr	r3, [r4, #12]
 800fcaa:	7832      	ldrb	r2, [r6, #0]
 800fcac:	1c75      	adds	r5, r6, #1
 800fcae:	3a30      	subs	r2, #48	; 0x30
 800fcb0:	2a09      	cmp	r2, #9
 800fcb2:	d94e      	bls.n	800fd52 <_vfiprintf_r+0x1a6>
 800fcb4:	2900      	cmp	r1, #0
 800fcb6:	d111      	bne.n	800fcdc <_vfiprintf_r+0x130>
 800fcb8:	e017      	b.n	800fcea <_vfiprintf_r+0x13e>
 800fcba:	3601      	adds	r6, #1
 800fcbc:	e7af      	b.n	800fc1e <_vfiprintf_r+0x72>
 800fcbe:	9b05      	ldr	r3, [sp, #20]
 800fcc0:	6822      	ldr	r2, [r4, #0]
 800fcc2:	1ac0      	subs	r0, r0, r3
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	4083      	lsls	r3, r0
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	0035      	movs	r5, r6
 800fccc:	6023      	str	r3, [r4, #0]
 800fcce:	e7cc      	b.n	800fc6a <_vfiprintf_r+0xbe>
 800fcd0:	9b07      	ldr	r3, [sp, #28]
 800fcd2:	1d19      	adds	r1, r3, #4
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	9107      	str	r1, [sp, #28]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	db01      	blt.n	800fce0 <_vfiprintf_r+0x134>
 800fcdc:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcde:	e004      	b.n	800fcea <_vfiprintf_r+0x13e>
 800fce0:	425b      	negs	r3, r3
 800fce2:	60e3      	str	r3, [r4, #12]
 800fce4:	2302      	movs	r3, #2
 800fce6:	4313      	orrs	r3, r2
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	7833      	ldrb	r3, [r6, #0]
 800fcec:	2b2e      	cmp	r3, #46	; 0x2e
 800fcee:	d10a      	bne.n	800fd06 <_vfiprintf_r+0x15a>
 800fcf0:	7873      	ldrb	r3, [r6, #1]
 800fcf2:	2b2a      	cmp	r3, #42	; 0x2a
 800fcf4:	d135      	bne.n	800fd62 <_vfiprintf_r+0x1b6>
 800fcf6:	9b07      	ldr	r3, [sp, #28]
 800fcf8:	3602      	adds	r6, #2
 800fcfa:	1d1a      	adds	r2, r3, #4
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	9207      	str	r2, [sp, #28]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	db2b      	blt.n	800fd5c <_vfiprintf_r+0x1b0>
 800fd04:	9309      	str	r3, [sp, #36]	; 0x24
 800fd06:	4d33      	ldr	r5, [pc, #204]	; (800fdd4 <_vfiprintf_r+0x228>)
 800fd08:	2203      	movs	r2, #3
 800fd0a:	0028      	movs	r0, r5
 800fd0c:	7831      	ldrb	r1, [r6, #0]
 800fd0e:	f7fd fd2c 	bl	800d76a <memchr>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d006      	beq.n	800fd24 <_vfiprintf_r+0x178>
 800fd16:	2340      	movs	r3, #64	; 0x40
 800fd18:	1b40      	subs	r0, r0, r5
 800fd1a:	4083      	lsls	r3, r0
 800fd1c:	6822      	ldr	r2, [r4, #0]
 800fd1e:	3601      	adds	r6, #1
 800fd20:	4313      	orrs	r3, r2
 800fd22:	6023      	str	r3, [r4, #0]
 800fd24:	7831      	ldrb	r1, [r6, #0]
 800fd26:	2206      	movs	r2, #6
 800fd28:	482b      	ldr	r0, [pc, #172]	; (800fdd8 <_vfiprintf_r+0x22c>)
 800fd2a:	1c75      	adds	r5, r6, #1
 800fd2c:	7621      	strb	r1, [r4, #24]
 800fd2e:	f7fd fd1c 	bl	800d76a <memchr>
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d043      	beq.n	800fdbe <_vfiprintf_r+0x212>
 800fd36:	4b29      	ldr	r3, [pc, #164]	; (800fddc <_vfiprintf_r+0x230>)
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d125      	bne.n	800fd88 <_vfiprintf_r+0x1dc>
 800fd3c:	2207      	movs	r2, #7
 800fd3e:	9b07      	ldr	r3, [sp, #28]
 800fd40:	3307      	adds	r3, #7
 800fd42:	4393      	bics	r3, r2
 800fd44:	3308      	adds	r3, #8
 800fd46:	9307      	str	r3, [sp, #28]
 800fd48:	6963      	ldr	r3, [r4, #20]
 800fd4a:	9a04      	ldr	r2, [sp, #16]
 800fd4c:	189b      	adds	r3, r3, r2
 800fd4e:	6163      	str	r3, [r4, #20]
 800fd50:	e764      	b.n	800fc1c <_vfiprintf_r+0x70>
 800fd52:	4343      	muls	r3, r0
 800fd54:	002e      	movs	r6, r5
 800fd56:	2101      	movs	r1, #1
 800fd58:	189b      	adds	r3, r3, r2
 800fd5a:	e7a6      	b.n	800fcaa <_vfiprintf_r+0xfe>
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	425b      	negs	r3, r3
 800fd60:	e7d0      	b.n	800fd04 <_vfiprintf_r+0x158>
 800fd62:	2300      	movs	r3, #0
 800fd64:	200a      	movs	r0, #10
 800fd66:	001a      	movs	r2, r3
 800fd68:	3601      	adds	r6, #1
 800fd6a:	6063      	str	r3, [r4, #4]
 800fd6c:	7831      	ldrb	r1, [r6, #0]
 800fd6e:	1c75      	adds	r5, r6, #1
 800fd70:	3930      	subs	r1, #48	; 0x30
 800fd72:	2909      	cmp	r1, #9
 800fd74:	d903      	bls.n	800fd7e <_vfiprintf_r+0x1d2>
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d0c5      	beq.n	800fd06 <_vfiprintf_r+0x15a>
 800fd7a:	9209      	str	r2, [sp, #36]	; 0x24
 800fd7c:	e7c3      	b.n	800fd06 <_vfiprintf_r+0x15a>
 800fd7e:	4342      	muls	r2, r0
 800fd80:	002e      	movs	r6, r5
 800fd82:	2301      	movs	r3, #1
 800fd84:	1852      	adds	r2, r2, r1
 800fd86:	e7f1      	b.n	800fd6c <_vfiprintf_r+0x1c0>
 800fd88:	aa07      	add	r2, sp, #28
 800fd8a:	9200      	str	r2, [sp, #0]
 800fd8c:	0021      	movs	r1, r4
 800fd8e:	003a      	movs	r2, r7
 800fd90:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <_vfiprintf_r+0x234>)
 800fd92:	9803      	ldr	r0, [sp, #12]
 800fd94:	f7fc fc1e 	bl	800c5d4 <_printf_float>
 800fd98:	9004      	str	r0, [sp, #16]
 800fd9a:	9b04      	ldr	r3, [sp, #16]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	d1d3      	bne.n	800fd48 <_vfiprintf_r+0x19c>
 800fda0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fda2:	07db      	lsls	r3, r3, #31
 800fda4:	d405      	bmi.n	800fdb2 <_vfiprintf_r+0x206>
 800fda6:	89bb      	ldrh	r3, [r7, #12]
 800fda8:	059b      	lsls	r3, r3, #22
 800fdaa:	d402      	bmi.n	800fdb2 <_vfiprintf_r+0x206>
 800fdac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fdae:	f7fd fcd3 	bl	800d758 <__retarget_lock_release_recursive>
 800fdb2:	89bb      	ldrh	r3, [r7, #12]
 800fdb4:	065b      	lsls	r3, r3, #25
 800fdb6:	d500      	bpl.n	800fdba <_vfiprintf_r+0x20e>
 800fdb8:	e71d      	b.n	800fbf6 <_vfiprintf_r+0x4a>
 800fdba:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fdbc:	e71d      	b.n	800fbfa <_vfiprintf_r+0x4e>
 800fdbe:	aa07      	add	r2, sp, #28
 800fdc0:	9200      	str	r2, [sp, #0]
 800fdc2:	0021      	movs	r1, r4
 800fdc4:	003a      	movs	r2, r7
 800fdc6:	4b06      	ldr	r3, [pc, #24]	; (800fde0 <_vfiprintf_r+0x234>)
 800fdc8:	9803      	ldr	r0, [sp, #12]
 800fdca:	f7fc fec9 	bl	800cb60 <_printf_i>
 800fdce:	e7e3      	b.n	800fd98 <_vfiprintf_r+0x1ec>
 800fdd0:	0801246c 	.word	0x0801246c
 800fdd4:	08012472 	.word	0x08012472
 800fdd8:	08012476 	.word	0x08012476
 800fddc:	0800c5d5 	.word	0x0800c5d5
 800fde0:	0800fb87 	.word	0x0800fb87

0800fde4 <__swbuf_r>:
 800fde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde6:	0006      	movs	r6, r0
 800fde8:	000d      	movs	r5, r1
 800fdea:	0014      	movs	r4, r2
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d004      	beq.n	800fdfa <__swbuf_r+0x16>
 800fdf0:	6a03      	ldr	r3, [r0, #32]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d101      	bne.n	800fdfa <__swbuf_r+0x16>
 800fdf6:	f7fd fa5b 	bl	800d2b0 <__sinit>
 800fdfa:	69a3      	ldr	r3, [r4, #24]
 800fdfc:	60a3      	str	r3, [r4, #8]
 800fdfe:	89a3      	ldrh	r3, [r4, #12]
 800fe00:	071b      	lsls	r3, r3, #28
 800fe02:	d528      	bpl.n	800fe56 <__swbuf_r+0x72>
 800fe04:	6923      	ldr	r3, [r4, #16]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d025      	beq.n	800fe56 <__swbuf_r+0x72>
 800fe0a:	6923      	ldr	r3, [r4, #16]
 800fe0c:	6820      	ldr	r0, [r4, #0]
 800fe0e:	b2ef      	uxtb	r7, r5
 800fe10:	1ac0      	subs	r0, r0, r3
 800fe12:	6963      	ldr	r3, [r4, #20]
 800fe14:	b2ed      	uxtb	r5, r5
 800fe16:	4283      	cmp	r3, r0
 800fe18:	dc05      	bgt.n	800fe26 <__swbuf_r+0x42>
 800fe1a:	0021      	movs	r1, r4
 800fe1c:	0030      	movs	r0, r6
 800fe1e:	f7ff fdeb 	bl	800f9f8 <_fflush_r>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d11d      	bne.n	800fe62 <__swbuf_r+0x7e>
 800fe26:	68a3      	ldr	r3, [r4, #8]
 800fe28:	3001      	adds	r0, #1
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	60a3      	str	r3, [r4, #8]
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	1c5a      	adds	r2, r3, #1
 800fe32:	6022      	str	r2, [r4, #0]
 800fe34:	701f      	strb	r7, [r3, #0]
 800fe36:	6963      	ldr	r3, [r4, #20]
 800fe38:	4283      	cmp	r3, r0
 800fe3a:	d004      	beq.n	800fe46 <__swbuf_r+0x62>
 800fe3c:	89a3      	ldrh	r3, [r4, #12]
 800fe3e:	07db      	lsls	r3, r3, #31
 800fe40:	d507      	bpl.n	800fe52 <__swbuf_r+0x6e>
 800fe42:	2d0a      	cmp	r5, #10
 800fe44:	d105      	bne.n	800fe52 <__swbuf_r+0x6e>
 800fe46:	0021      	movs	r1, r4
 800fe48:	0030      	movs	r0, r6
 800fe4a:	f7ff fdd5 	bl	800f9f8 <_fflush_r>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d107      	bne.n	800fe62 <__swbuf_r+0x7e>
 800fe52:	0028      	movs	r0, r5
 800fe54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe56:	0021      	movs	r1, r4
 800fe58:	0030      	movs	r0, r6
 800fe5a:	f000 f805 	bl	800fe68 <__swsetup_r>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d0d3      	beq.n	800fe0a <__swbuf_r+0x26>
 800fe62:	2501      	movs	r5, #1
 800fe64:	426d      	negs	r5, r5
 800fe66:	e7f4      	b.n	800fe52 <__swbuf_r+0x6e>

0800fe68 <__swsetup_r>:
 800fe68:	4b30      	ldr	r3, [pc, #192]	; (800ff2c <__swsetup_r+0xc4>)
 800fe6a:	b570      	push	{r4, r5, r6, lr}
 800fe6c:	0005      	movs	r5, r0
 800fe6e:	6818      	ldr	r0, [r3, #0]
 800fe70:	000c      	movs	r4, r1
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d004      	beq.n	800fe80 <__swsetup_r+0x18>
 800fe76:	6a03      	ldr	r3, [r0, #32]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d101      	bne.n	800fe80 <__swsetup_r+0x18>
 800fe7c:	f7fd fa18 	bl	800d2b0 <__sinit>
 800fe80:	230c      	movs	r3, #12
 800fe82:	5ee2      	ldrsh	r2, [r4, r3]
 800fe84:	b293      	uxth	r3, r2
 800fe86:	0711      	lsls	r1, r2, #28
 800fe88:	d423      	bmi.n	800fed2 <__swsetup_r+0x6a>
 800fe8a:	06d9      	lsls	r1, r3, #27
 800fe8c:	d407      	bmi.n	800fe9e <__swsetup_r+0x36>
 800fe8e:	2309      	movs	r3, #9
 800fe90:	2001      	movs	r0, #1
 800fe92:	602b      	str	r3, [r5, #0]
 800fe94:	3337      	adds	r3, #55	; 0x37
 800fe96:	4313      	orrs	r3, r2
 800fe98:	81a3      	strh	r3, [r4, #12]
 800fe9a:	4240      	negs	r0, r0
 800fe9c:	bd70      	pop	{r4, r5, r6, pc}
 800fe9e:	075b      	lsls	r3, r3, #29
 800fea0:	d513      	bpl.n	800feca <__swsetup_r+0x62>
 800fea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fea4:	2900      	cmp	r1, #0
 800fea6:	d008      	beq.n	800feba <__swsetup_r+0x52>
 800fea8:	0023      	movs	r3, r4
 800feaa:	3344      	adds	r3, #68	; 0x44
 800feac:	4299      	cmp	r1, r3
 800feae:	d002      	beq.n	800feb6 <__swsetup_r+0x4e>
 800feb0:	0028      	movs	r0, r5
 800feb2:	f7fe fb35 	bl	800e520 <_free_r>
 800feb6:	2300      	movs	r3, #0
 800feb8:	6363      	str	r3, [r4, #52]	; 0x34
 800feba:	2224      	movs	r2, #36	; 0x24
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	4393      	bics	r3, r2
 800fec0:	81a3      	strh	r3, [r4, #12]
 800fec2:	2300      	movs	r3, #0
 800fec4:	6063      	str	r3, [r4, #4]
 800fec6:	6923      	ldr	r3, [r4, #16]
 800fec8:	6023      	str	r3, [r4, #0]
 800feca:	2308      	movs	r3, #8
 800fecc:	89a2      	ldrh	r2, [r4, #12]
 800fece:	4313      	orrs	r3, r2
 800fed0:	81a3      	strh	r3, [r4, #12]
 800fed2:	6923      	ldr	r3, [r4, #16]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10b      	bne.n	800fef0 <__swsetup_r+0x88>
 800fed8:	21a0      	movs	r1, #160	; 0xa0
 800feda:	2280      	movs	r2, #128	; 0x80
 800fedc:	89a3      	ldrh	r3, [r4, #12]
 800fede:	0089      	lsls	r1, r1, #2
 800fee0:	0092      	lsls	r2, r2, #2
 800fee2:	400b      	ands	r3, r1
 800fee4:	4293      	cmp	r3, r2
 800fee6:	d003      	beq.n	800fef0 <__swsetup_r+0x88>
 800fee8:	0021      	movs	r1, r4
 800feea:	0028      	movs	r0, r5
 800feec:	f000 f89a 	bl	8010024 <__smakebuf_r>
 800fef0:	220c      	movs	r2, #12
 800fef2:	5ea3      	ldrsh	r3, [r4, r2]
 800fef4:	2001      	movs	r0, #1
 800fef6:	001a      	movs	r2, r3
 800fef8:	b299      	uxth	r1, r3
 800fefa:	4002      	ands	r2, r0
 800fefc:	4203      	tst	r3, r0
 800fefe:	d00f      	beq.n	800ff20 <__swsetup_r+0xb8>
 800ff00:	2200      	movs	r2, #0
 800ff02:	60a2      	str	r2, [r4, #8]
 800ff04:	6962      	ldr	r2, [r4, #20]
 800ff06:	4252      	negs	r2, r2
 800ff08:	61a2      	str	r2, [r4, #24]
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	6922      	ldr	r2, [r4, #16]
 800ff0e:	4282      	cmp	r2, r0
 800ff10:	d1c4      	bne.n	800fe9c <__swsetup_r+0x34>
 800ff12:	0609      	lsls	r1, r1, #24
 800ff14:	d5c2      	bpl.n	800fe9c <__swsetup_r+0x34>
 800ff16:	2240      	movs	r2, #64	; 0x40
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	81a3      	strh	r3, [r4, #12]
 800ff1c:	3801      	subs	r0, #1
 800ff1e:	e7bd      	b.n	800fe9c <__swsetup_r+0x34>
 800ff20:	0788      	lsls	r0, r1, #30
 800ff22:	d400      	bmi.n	800ff26 <__swsetup_r+0xbe>
 800ff24:	6962      	ldr	r2, [r4, #20]
 800ff26:	60a2      	str	r2, [r4, #8]
 800ff28:	e7ef      	b.n	800ff0a <__swsetup_r+0xa2>
 800ff2a:	46c0      	nop			; (mov r8, r8)
 800ff2c:	200001f4 	.word	0x200001f4

0800ff30 <_raise_r>:
 800ff30:	b570      	push	{r4, r5, r6, lr}
 800ff32:	0004      	movs	r4, r0
 800ff34:	000d      	movs	r5, r1
 800ff36:	291f      	cmp	r1, #31
 800ff38:	d904      	bls.n	800ff44 <_raise_r+0x14>
 800ff3a:	2316      	movs	r3, #22
 800ff3c:	6003      	str	r3, [r0, #0]
 800ff3e:	2001      	movs	r0, #1
 800ff40:	4240      	negs	r0, r0
 800ff42:	bd70      	pop	{r4, r5, r6, pc}
 800ff44:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d004      	beq.n	800ff54 <_raise_r+0x24>
 800ff4a:	008a      	lsls	r2, r1, #2
 800ff4c:	189b      	adds	r3, r3, r2
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	2a00      	cmp	r2, #0
 800ff52:	d108      	bne.n	800ff66 <_raise_r+0x36>
 800ff54:	0020      	movs	r0, r4
 800ff56:	f000 f831 	bl	800ffbc <_getpid_r>
 800ff5a:	002a      	movs	r2, r5
 800ff5c:	0001      	movs	r1, r0
 800ff5e:	0020      	movs	r0, r4
 800ff60:	f000 f81a 	bl	800ff98 <_kill_r>
 800ff64:	e7ed      	b.n	800ff42 <_raise_r+0x12>
 800ff66:	2000      	movs	r0, #0
 800ff68:	2a01      	cmp	r2, #1
 800ff6a:	d0ea      	beq.n	800ff42 <_raise_r+0x12>
 800ff6c:	1c51      	adds	r1, r2, #1
 800ff6e:	d103      	bne.n	800ff78 <_raise_r+0x48>
 800ff70:	2316      	movs	r3, #22
 800ff72:	3001      	adds	r0, #1
 800ff74:	6023      	str	r3, [r4, #0]
 800ff76:	e7e4      	b.n	800ff42 <_raise_r+0x12>
 800ff78:	2400      	movs	r4, #0
 800ff7a:	0028      	movs	r0, r5
 800ff7c:	601c      	str	r4, [r3, #0]
 800ff7e:	4790      	blx	r2
 800ff80:	0020      	movs	r0, r4
 800ff82:	e7de      	b.n	800ff42 <_raise_r+0x12>

0800ff84 <raise>:
 800ff84:	b510      	push	{r4, lr}
 800ff86:	4b03      	ldr	r3, [pc, #12]	; (800ff94 <raise+0x10>)
 800ff88:	0001      	movs	r1, r0
 800ff8a:	6818      	ldr	r0, [r3, #0]
 800ff8c:	f7ff ffd0 	bl	800ff30 <_raise_r>
 800ff90:	bd10      	pop	{r4, pc}
 800ff92:	46c0      	nop			; (mov r8, r8)
 800ff94:	200001f4 	.word	0x200001f4

0800ff98 <_kill_r>:
 800ff98:	2300      	movs	r3, #0
 800ff9a:	b570      	push	{r4, r5, r6, lr}
 800ff9c:	4d06      	ldr	r5, [pc, #24]	; (800ffb8 <_kill_r+0x20>)
 800ff9e:	0004      	movs	r4, r0
 800ffa0:	0008      	movs	r0, r1
 800ffa2:	0011      	movs	r1, r2
 800ffa4:	602b      	str	r3, [r5, #0]
 800ffa6:	f7f6 f923 	bl	80061f0 <_kill>
 800ffaa:	1c43      	adds	r3, r0, #1
 800ffac:	d103      	bne.n	800ffb6 <_kill_r+0x1e>
 800ffae:	682b      	ldr	r3, [r5, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d000      	beq.n	800ffb6 <_kill_r+0x1e>
 800ffb4:	6023      	str	r3, [r4, #0]
 800ffb6:	bd70      	pop	{r4, r5, r6, pc}
 800ffb8:	20006168 	.word	0x20006168

0800ffbc <_getpid_r>:
 800ffbc:	b510      	push	{r4, lr}
 800ffbe:	f7f6 f915 	bl	80061ec <_getpid>
 800ffc2:	bd10      	pop	{r4, pc}

0800ffc4 <_malloc_usable_size_r>:
 800ffc4:	1f0b      	subs	r3, r1, #4
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	1f18      	subs	r0, r3, #4
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	da01      	bge.n	800ffd2 <_malloc_usable_size_r+0xe>
 800ffce:	580b      	ldr	r3, [r1, r0]
 800ffd0:	18c0      	adds	r0, r0, r3
 800ffd2:	4770      	bx	lr

0800ffd4 <__swhatbuf_r>:
 800ffd4:	b570      	push	{r4, r5, r6, lr}
 800ffd6:	000e      	movs	r6, r1
 800ffd8:	001d      	movs	r5, r3
 800ffda:	230e      	movs	r3, #14
 800ffdc:	5ec9      	ldrsh	r1, [r1, r3]
 800ffde:	0014      	movs	r4, r2
 800ffe0:	b096      	sub	sp, #88	; 0x58
 800ffe2:	2900      	cmp	r1, #0
 800ffe4:	da0c      	bge.n	8010000 <__swhatbuf_r+0x2c>
 800ffe6:	89b2      	ldrh	r2, [r6, #12]
 800ffe8:	2380      	movs	r3, #128	; 0x80
 800ffea:	0011      	movs	r1, r2
 800ffec:	4019      	ands	r1, r3
 800ffee:	421a      	tst	r2, r3
 800fff0:	d013      	beq.n	801001a <__swhatbuf_r+0x46>
 800fff2:	2100      	movs	r1, #0
 800fff4:	3b40      	subs	r3, #64	; 0x40
 800fff6:	2000      	movs	r0, #0
 800fff8:	6029      	str	r1, [r5, #0]
 800fffa:	6023      	str	r3, [r4, #0]
 800fffc:	b016      	add	sp, #88	; 0x58
 800fffe:	bd70      	pop	{r4, r5, r6, pc}
 8010000:	466a      	mov	r2, sp
 8010002:	f000 f84d 	bl	80100a0 <_fstat_r>
 8010006:	2800      	cmp	r0, #0
 8010008:	dbed      	blt.n	800ffe6 <__swhatbuf_r+0x12>
 801000a:	23f0      	movs	r3, #240	; 0xf0
 801000c:	9901      	ldr	r1, [sp, #4]
 801000e:	021b      	lsls	r3, r3, #8
 8010010:	4019      	ands	r1, r3
 8010012:	4b03      	ldr	r3, [pc, #12]	; (8010020 <__swhatbuf_r+0x4c>)
 8010014:	18c9      	adds	r1, r1, r3
 8010016:	424b      	negs	r3, r1
 8010018:	4159      	adcs	r1, r3
 801001a:	2380      	movs	r3, #128	; 0x80
 801001c:	00db      	lsls	r3, r3, #3
 801001e:	e7ea      	b.n	800fff6 <__swhatbuf_r+0x22>
 8010020:	ffffe000 	.word	0xffffe000

08010024 <__smakebuf_r>:
 8010024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010026:	2602      	movs	r6, #2
 8010028:	898b      	ldrh	r3, [r1, #12]
 801002a:	0005      	movs	r5, r0
 801002c:	000c      	movs	r4, r1
 801002e:	4233      	tst	r3, r6
 8010030:	d006      	beq.n	8010040 <__smakebuf_r+0x1c>
 8010032:	0023      	movs	r3, r4
 8010034:	3347      	adds	r3, #71	; 0x47
 8010036:	6023      	str	r3, [r4, #0]
 8010038:	6123      	str	r3, [r4, #16]
 801003a:	2301      	movs	r3, #1
 801003c:	6163      	str	r3, [r4, #20]
 801003e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010040:	466a      	mov	r2, sp
 8010042:	ab01      	add	r3, sp, #4
 8010044:	f7ff ffc6 	bl	800ffd4 <__swhatbuf_r>
 8010048:	9900      	ldr	r1, [sp, #0]
 801004a:	0007      	movs	r7, r0
 801004c:	0028      	movs	r0, r5
 801004e:	f7fb fac7 	bl	800b5e0 <_malloc_r>
 8010052:	2800      	cmp	r0, #0
 8010054:	d108      	bne.n	8010068 <__smakebuf_r+0x44>
 8010056:	220c      	movs	r2, #12
 8010058:	5ea3      	ldrsh	r3, [r4, r2]
 801005a:	059a      	lsls	r2, r3, #22
 801005c:	d4ef      	bmi.n	801003e <__smakebuf_r+0x1a>
 801005e:	2203      	movs	r2, #3
 8010060:	4393      	bics	r3, r2
 8010062:	431e      	orrs	r6, r3
 8010064:	81a6      	strh	r6, [r4, #12]
 8010066:	e7e4      	b.n	8010032 <__smakebuf_r+0xe>
 8010068:	2380      	movs	r3, #128	; 0x80
 801006a:	89a2      	ldrh	r2, [r4, #12]
 801006c:	6020      	str	r0, [r4, #0]
 801006e:	4313      	orrs	r3, r2
 8010070:	81a3      	strh	r3, [r4, #12]
 8010072:	9b00      	ldr	r3, [sp, #0]
 8010074:	6120      	str	r0, [r4, #16]
 8010076:	6163      	str	r3, [r4, #20]
 8010078:	9b01      	ldr	r3, [sp, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00c      	beq.n	8010098 <__smakebuf_r+0x74>
 801007e:	0028      	movs	r0, r5
 8010080:	230e      	movs	r3, #14
 8010082:	5ee1      	ldrsh	r1, [r4, r3]
 8010084:	f000 f81e 	bl	80100c4 <_isatty_r>
 8010088:	2800      	cmp	r0, #0
 801008a:	d005      	beq.n	8010098 <__smakebuf_r+0x74>
 801008c:	2303      	movs	r3, #3
 801008e:	89a2      	ldrh	r2, [r4, #12]
 8010090:	439a      	bics	r2, r3
 8010092:	3b02      	subs	r3, #2
 8010094:	4313      	orrs	r3, r2
 8010096:	81a3      	strh	r3, [r4, #12]
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	433b      	orrs	r3, r7
 801009c:	81a3      	strh	r3, [r4, #12]
 801009e:	e7ce      	b.n	801003e <__smakebuf_r+0x1a>

080100a0 <_fstat_r>:
 80100a0:	2300      	movs	r3, #0
 80100a2:	b570      	push	{r4, r5, r6, lr}
 80100a4:	4d06      	ldr	r5, [pc, #24]	; (80100c0 <_fstat_r+0x20>)
 80100a6:	0004      	movs	r4, r0
 80100a8:	0008      	movs	r0, r1
 80100aa:	0011      	movs	r1, r2
 80100ac:	602b      	str	r3, [r5, #0]
 80100ae:	f7f6 f8ca 	bl	8006246 <_fstat>
 80100b2:	1c43      	adds	r3, r0, #1
 80100b4:	d103      	bne.n	80100be <_fstat_r+0x1e>
 80100b6:	682b      	ldr	r3, [r5, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d000      	beq.n	80100be <_fstat_r+0x1e>
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	bd70      	pop	{r4, r5, r6, pc}
 80100c0:	20006168 	.word	0x20006168

080100c4 <_isatty_r>:
 80100c4:	2300      	movs	r3, #0
 80100c6:	b570      	push	{r4, r5, r6, lr}
 80100c8:	4d06      	ldr	r5, [pc, #24]	; (80100e4 <_isatty_r+0x20>)
 80100ca:	0004      	movs	r4, r0
 80100cc:	0008      	movs	r0, r1
 80100ce:	602b      	str	r3, [r5, #0]
 80100d0:	f7f6 f8be 	bl	8006250 <_isatty>
 80100d4:	1c43      	adds	r3, r0, #1
 80100d6:	d103      	bne.n	80100e0 <_isatty_r+0x1c>
 80100d8:	682b      	ldr	r3, [r5, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d000      	beq.n	80100e0 <_isatty_r+0x1c>
 80100de:	6023      	str	r3, [r4, #0]
 80100e0:	bd70      	pop	{r4, r5, r6, pc}
 80100e2:	46c0      	nop			; (mov r8, r8)
 80100e4:	20006168 	.word	0x20006168

080100e8 <pow>:
 80100e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100ea:	0014      	movs	r4, r2
 80100ec:	001d      	movs	r5, r3
 80100ee:	9000      	str	r0, [sp, #0]
 80100f0:	9101      	str	r1, [sp, #4]
 80100f2:	f000 f86f 	bl	80101d4 <__ieee754_pow>
 80100f6:	0022      	movs	r2, r4
 80100f8:	0006      	movs	r6, r0
 80100fa:	000f      	movs	r7, r1
 80100fc:	002b      	movs	r3, r5
 80100fe:	0020      	movs	r0, r4
 8010100:	0029      	movs	r1, r5
 8010102:	f7f2 ff2b 	bl	8002f5c <__aeabi_dcmpun>
 8010106:	2800      	cmp	r0, #0
 8010108:	d13f      	bne.n	801018a <pow+0xa2>
 801010a:	9800      	ldr	r0, [sp, #0]
 801010c:	9901      	ldr	r1, [sp, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	2300      	movs	r3, #0
 8010112:	f7f0 f99b 	bl	800044c <__aeabi_dcmpeq>
 8010116:	2800      	cmp	r0, #0
 8010118:	d019      	beq.n	801014e <pow+0x66>
 801011a:	2200      	movs	r2, #0
 801011c:	2300      	movs	r3, #0
 801011e:	0020      	movs	r0, r4
 8010120:	0029      	movs	r1, r5
 8010122:	f7f0 f993 	bl	800044c <__aeabi_dcmpeq>
 8010126:	2800      	cmp	r0, #0
 8010128:	d146      	bne.n	80101b8 <pow+0xd0>
 801012a:	0020      	movs	r0, r4
 801012c:	0029      	movs	r1, r5
 801012e:	f000 f849 	bl	80101c4 <finite>
 8010132:	2800      	cmp	r0, #0
 8010134:	d029      	beq.n	801018a <pow+0xa2>
 8010136:	2200      	movs	r2, #0
 8010138:	2300      	movs	r3, #0
 801013a:	0020      	movs	r0, r4
 801013c:	0029      	movs	r1, r5
 801013e:	f7f0 f98b 	bl	8000458 <__aeabi_dcmplt>
 8010142:	2800      	cmp	r0, #0
 8010144:	d021      	beq.n	801018a <pow+0xa2>
 8010146:	f7fd fadb 	bl	800d700 <__errno>
 801014a:	2322      	movs	r3, #34	; 0x22
 801014c:	e01c      	b.n	8010188 <pow+0xa0>
 801014e:	0030      	movs	r0, r6
 8010150:	0039      	movs	r1, r7
 8010152:	f000 f837 	bl	80101c4 <finite>
 8010156:	2800      	cmp	r0, #0
 8010158:	d11b      	bne.n	8010192 <pow+0xaa>
 801015a:	9800      	ldr	r0, [sp, #0]
 801015c:	9901      	ldr	r1, [sp, #4]
 801015e:	f000 f831 	bl	80101c4 <finite>
 8010162:	2800      	cmp	r0, #0
 8010164:	d015      	beq.n	8010192 <pow+0xaa>
 8010166:	0020      	movs	r0, r4
 8010168:	0029      	movs	r1, r5
 801016a:	f000 f82b 	bl	80101c4 <finite>
 801016e:	2800      	cmp	r0, #0
 8010170:	d00f      	beq.n	8010192 <pow+0xaa>
 8010172:	0032      	movs	r2, r6
 8010174:	003b      	movs	r3, r7
 8010176:	0030      	movs	r0, r6
 8010178:	0039      	movs	r1, r7
 801017a:	f7f2 feef 	bl	8002f5c <__aeabi_dcmpun>
 801017e:	2800      	cmp	r0, #0
 8010180:	d0e1      	beq.n	8010146 <pow+0x5e>
 8010182:	f7fd fabd 	bl	800d700 <__errno>
 8010186:	2321      	movs	r3, #33	; 0x21
 8010188:	6003      	str	r3, [r0, #0]
 801018a:	0030      	movs	r0, r6
 801018c:	0039      	movs	r1, r7
 801018e:	b003      	add	sp, #12
 8010190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010192:	2200      	movs	r2, #0
 8010194:	2300      	movs	r3, #0
 8010196:	0030      	movs	r0, r6
 8010198:	0039      	movs	r1, r7
 801019a:	f7f0 f957 	bl	800044c <__aeabi_dcmpeq>
 801019e:	2800      	cmp	r0, #0
 80101a0:	d0f3      	beq.n	801018a <pow+0xa2>
 80101a2:	9800      	ldr	r0, [sp, #0]
 80101a4:	9901      	ldr	r1, [sp, #4]
 80101a6:	f000 f80d 	bl	80101c4 <finite>
 80101aa:	2800      	cmp	r0, #0
 80101ac:	d0ed      	beq.n	801018a <pow+0xa2>
 80101ae:	0020      	movs	r0, r4
 80101b0:	0029      	movs	r1, r5
 80101b2:	f000 f807 	bl	80101c4 <finite>
 80101b6:	e7c4      	b.n	8010142 <pow+0x5a>
 80101b8:	2600      	movs	r6, #0
 80101ba:	4f01      	ldr	r7, [pc, #4]	; (80101c0 <pow+0xd8>)
 80101bc:	e7e5      	b.n	801018a <pow+0xa2>
 80101be:	46c0      	nop			; (mov r8, r8)
 80101c0:	3ff00000 	.word	0x3ff00000

080101c4 <finite>:
 80101c4:	4b02      	ldr	r3, [pc, #8]	; (80101d0 <finite+0xc>)
 80101c6:	0048      	lsls	r0, r1, #1
 80101c8:	0840      	lsrs	r0, r0, #1
 80101ca:	18c0      	adds	r0, r0, r3
 80101cc:	0fc0      	lsrs	r0, r0, #31
 80101ce:	4770      	bx	lr
 80101d0:	80100000 	.word	0x80100000

080101d4 <__ieee754_pow>:
 80101d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101d6:	b095      	sub	sp, #84	; 0x54
 80101d8:	9202      	str	r2, [sp, #8]
 80101da:	9303      	str	r3, [sp, #12]
 80101dc:	9b03      	ldr	r3, [sp, #12]
 80101de:	9a03      	ldr	r2, [sp, #12]
 80101e0:	9304      	str	r3, [sp, #16]
 80101e2:	9b02      	ldr	r3, [sp, #8]
 80101e4:	0056      	lsls	r6, r2, #1
 80101e6:	001a      	movs	r2, r3
 80101e8:	0876      	lsrs	r6, r6, #1
 80101ea:	0007      	movs	r7, r0
 80101ec:	000d      	movs	r5, r1
 80101ee:	4332      	orrs	r2, r6
 80101f0:	d119      	bne.n	8010226 <__ieee754_pow+0x52>
 80101f2:	2180      	movs	r1, #128	; 0x80
 80101f4:	0309      	lsls	r1, r1, #12
 80101f6:	4069      	eors	r1, r5
 80101f8:	0002      	movs	r2, r0
 80101fa:	000b      	movs	r3, r1
 80101fc:	1892      	adds	r2, r2, r2
 80101fe:	415b      	adcs	r3, r3
 8010200:	4989      	ldr	r1, [pc, #548]	; (8010428 <__ieee754_pow+0x254>)
 8010202:	428b      	cmp	r3, r1
 8010204:	d806      	bhi.n	8010214 <__ieee754_pow+0x40>
 8010206:	d001      	beq.n	801020c <__ieee754_pow+0x38>
 8010208:	f000 fcb6 	bl	8010b78 <__ieee754_pow+0x9a4>
 801020c:	2a00      	cmp	r2, #0
 801020e:	d101      	bne.n	8010214 <__ieee754_pow+0x40>
 8010210:	f000 fcb2 	bl	8010b78 <__ieee754_pow+0x9a4>
 8010214:	9a02      	ldr	r2, [sp, #8]
 8010216:	9b03      	ldr	r3, [sp, #12]
 8010218:	0038      	movs	r0, r7
 801021a:	0029      	movs	r1, r5
 801021c:	f7f1 f900 	bl	8001420 <__aeabi_dadd>
 8010220:	9000      	str	r0, [sp, #0]
 8010222:	9101      	str	r1, [sp, #4]
 8010224:	e0ad      	b.n	8010382 <__ieee754_pow+0x1ae>
 8010226:	4a81      	ldr	r2, [pc, #516]	; (801042c <__ieee754_pow+0x258>)
 8010228:	004c      	lsls	r4, r1, #1
 801022a:	9108      	str	r1, [sp, #32]
 801022c:	9000      	str	r0, [sp, #0]
 801022e:	0864      	lsrs	r4, r4, #1
 8010230:	4294      	cmp	r4, r2
 8010232:	dc08      	bgt.n	8010246 <__ieee754_pow+0x72>
 8010234:	d101      	bne.n	801023a <__ieee754_pow+0x66>
 8010236:	2800      	cmp	r0, #0
 8010238:	d1ec      	bne.n	8010214 <__ieee754_pow+0x40>
 801023a:	4a7c      	ldr	r2, [pc, #496]	; (801042c <__ieee754_pow+0x258>)
 801023c:	4296      	cmp	r6, r2
 801023e:	dc02      	bgt.n	8010246 <__ieee754_pow+0x72>
 8010240:	d10c      	bne.n	801025c <__ieee754_pow+0x88>
 8010242:	2b00      	cmp	r3, #0
 8010244:	d00a      	beq.n	801025c <__ieee754_pow+0x88>
 8010246:	4b7a      	ldr	r3, [pc, #488]	; (8010430 <__ieee754_pow+0x25c>)
 8010248:	18eb      	adds	r3, r5, r3
 801024a:	433b      	orrs	r3, r7
 801024c:	d1e2      	bne.n	8010214 <__ieee754_pow+0x40>
 801024e:	2180      	movs	r1, #128	; 0x80
 8010250:	9803      	ldr	r0, [sp, #12]
 8010252:	0309      	lsls	r1, r1, #12
 8010254:	4048      	eors	r0, r1
 8010256:	0003      	movs	r3, r0
 8010258:	9a02      	ldr	r2, [sp, #8]
 801025a:	e7cf      	b.n	80101fc <__ieee754_pow+0x28>
 801025c:	2200      	movs	r2, #0
 801025e:	9206      	str	r2, [sp, #24]
 8010260:	2d00      	cmp	r5, #0
 8010262:	da69      	bge.n	8010338 <__ieee754_pow+0x164>
 8010264:	4a73      	ldr	r2, [pc, #460]	; (8010434 <__ieee754_pow+0x260>)
 8010266:	4296      	cmp	r6, r2
 8010268:	dc64      	bgt.n	8010334 <__ieee754_pow+0x160>
 801026a:	4a73      	ldr	r2, [pc, #460]	; (8010438 <__ieee754_pow+0x264>)
 801026c:	4296      	cmp	r6, r2
 801026e:	dd11      	ble.n	8010294 <__ieee754_pow+0xc0>
 8010270:	4972      	ldr	r1, [pc, #456]	; (801043c <__ieee754_pow+0x268>)
 8010272:	1532      	asrs	r2, r6, #20
 8010274:	1852      	adds	r2, r2, r1
 8010276:	2a14      	cmp	r2, #20
 8010278:	dd3c      	ble.n	80102f4 <__ieee754_pow+0x120>
 801027a:	2134      	movs	r1, #52	; 0x34
 801027c:	1a89      	subs	r1, r1, r2
 801027e:	9a02      	ldr	r2, [sp, #8]
 8010280:	40ca      	lsrs	r2, r1
 8010282:	0010      	movs	r0, r2
 8010284:	4088      	lsls	r0, r1
 8010286:	4298      	cmp	r0, r3
 8010288:	d104      	bne.n	8010294 <__ieee754_pow+0xc0>
 801028a:	2101      	movs	r1, #1
 801028c:	400a      	ands	r2, r1
 801028e:	1849      	adds	r1, r1, r1
 8010290:	1a8a      	subs	r2, r1, r2
 8010292:	9206      	str	r2, [sp, #24]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d03c      	beq.n	8010312 <__ieee754_pow+0x13e>
 8010298:	0038      	movs	r0, r7
 801029a:	0029      	movs	r1, r5
 801029c:	f000 fca4 	bl	8010be8 <fabs>
 80102a0:	9000      	str	r0, [sp, #0]
 80102a2:	9101      	str	r1, [sp, #4]
 80102a4:	2f00      	cmp	r7, #0
 80102a6:	d000      	beq.n	80102aa <__ieee754_pow+0xd6>
 80102a8:	e094      	b.n	80103d4 <__ieee754_pow+0x200>
 80102aa:	2c00      	cmp	r4, #0
 80102ac:	d005      	beq.n	80102ba <__ieee754_pow+0xe6>
 80102ae:	4a64      	ldr	r2, [pc, #400]	; (8010440 <__ieee754_pow+0x26c>)
 80102b0:	00ab      	lsls	r3, r5, #2
 80102b2:	089b      	lsrs	r3, r3, #2
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d000      	beq.n	80102ba <__ieee754_pow+0xe6>
 80102b8:	e08c      	b.n	80103d4 <__ieee754_pow+0x200>
 80102ba:	9b04      	ldr	r3, [sp, #16]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	da07      	bge.n	80102d0 <__ieee754_pow+0xfc>
 80102c0:	9a00      	ldr	r2, [sp, #0]
 80102c2:	9b01      	ldr	r3, [sp, #4]
 80102c4:	2000      	movs	r0, #0
 80102c6:	495e      	ldr	r1, [pc, #376]	; (8010440 <__ieee754_pow+0x26c>)
 80102c8:	f7f1 fc0a 	bl	8001ae0 <__aeabi_ddiv>
 80102cc:	9000      	str	r0, [sp, #0]
 80102ce:	9101      	str	r1, [sp, #4]
 80102d0:	9b08      	ldr	r3, [sp, #32]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	da55      	bge.n	8010382 <__ieee754_pow+0x1ae>
 80102d6:	4b56      	ldr	r3, [pc, #344]	; (8010430 <__ieee754_pow+0x25c>)
 80102d8:	18e4      	adds	r4, r4, r3
 80102da:	9b06      	ldr	r3, [sp, #24]
 80102dc:	431c      	orrs	r4, r3
 80102de:	d000      	beq.n	80102e2 <__ieee754_pow+0x10e>
 80102e0:	e06c      	b.n	80103bc <__ieee754_pow+0x1e8>
 80102e2:	9a00      	ldr	r2, [sp, #0]
 80102e4:	9b01      	ldr	r3, [sp, #4]
 80102e6:	0010      	movs	r0, r2
 80102e8:	0019      	movs	r1, r3
 80102ea:	f7f2 fab5 	bl	8002858 <__aeabi_dsub>
 80102ee:	0002      	movs	r2, r0
 80102f0:	000b      	movs	r3, r1
 80102f2:	e01c      	b.n	801032e <__ieee754_pow+0x15a>
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1cf      	bne.n	8010298 <__ieee754_pow+0xc4>
 80102f8:	3314      	adds	r3, #20
 80102fa:	1a9a      	subs	r2, r3, r2
 80102fc:	0033      	movs	r3, r6
 80102fe:	4113      	asrs	r3, r2
 8010300:	0019      	movs	r1, r3
 8010302:	4091      	lsls	r1, r2
 8010304:	42b1      	cmp	r1, r6
 8010306:	d104      	bne.n	8010312 <__ieee754_pow+0x13e>
 8010308:	2201      	movs	r2, #1
 801030a:	4013      	ands	r3, r2
 801030c:	1892      	adds	r2, r2, r2
 801030e:	1ad3      	subs	r3, r2, r3
 8010310:	9306      	str	r3, [sp, #24]
 8010312:	4b4b      	ldr	r3, [pc, #300]	; (8010440 <__ieee754_pow+0x26c>)
 8010314:	429e      	cmp	r6, r3
 8010316:	d138      	bne.n	801038a <__ieee754_pow+0x1b6>
 8010318:	0038      	movs	r0, r7
 801031a:	0029      	movs	r1, r5
 801031c:	9b04      	ldr	r3, [sp, #16]
 801031e:	9000      	str	r0, [sp, #0]
 8010320:	9101      	str	r1, [sp, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	da2d      	bge.n	8010382 <__ieee754_pow+0x1ae>
 8010326:	003a      	movs	r2, r7
 8010328:	002b      	movs	r3, r5
 801032a:	2000      	movs	r0, #0
 801032c:	4944      	ldr	r1, [pc, #272]	; (8010440 <__ieee754_pow+0x26c>)
 801032e:	f7f1 fbd7 	bl	8001ae0 <__aeabi_ddiv>
 8010332:	e775      	b.n	8010220 <__ieee754_pow+0x4c>
 8010334:	2202      	movs	r2, #2
 8010336:	9206      	str	r2, [sp, #24]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1ad      	bne.n	8010298 <__ieee754_pow+0xc4>
 801033c:	4b3b      	ldr	r3, [pc, #236]	; (801042c <__ieee754_pow+0x258>)
 801033e:	429e      	cmp	r6, r3
 8010340:	d1e7      	bne.n	8010312 <__ieee754_pow+0x13e>
 8010342:	4b3b      	ldr	r3, [pc, #236]	; (8010430 <__ieee754_pow+0x25c>)
 8010344:	18e3      	adds	r3, r4, r3
 8010346:	433b      	orrs	r3, r7
 8010348:	d101      	bne.n	801034e <__ieee754_pow+0x17a>
 801034a:	f000 fc15 	bl	8010b78 <__ieee754_pow+0x9a4>
 801034e:	4b3a      	ldr	r3, [pc, #232]	; (8010438 <__ieee754_pow+0x264>)
 8010350:	429c      	cmp	r4, r3
 8010352:	dd09      	ble.n	8010368 <__ieee754_pow+0x194>
 8010354:	9b04      	ldr	r3, [sp, #16]
 8010356:	2b00      	cmp	r3, #0
 8010358:	da01      	bge.n	801035e <__ieee754_pow+0x18a>
 801035a:	f000 fc11 	bl	8010b80 <__ieee754_pow+0x9ac>
 801035e:	9b02      	ldr	r3, [sp, #8]
 8010360:	9c03      	ldr	r4, [sp, #12]
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	9401      	str	r4, [sp, #4]
 8010366:	e00c      	b.n	8010382 <__ieee754_pow+0x1ae>
 8010368:	9b04      	ldr	r3, [sp, #16]
 801036a:	2b00      	cmp	r3, #0
 801036c:	db01      	blt.n	8010372 <__ieee754_pow+0x19e>
 801036e:	f000 fc07 	bl	8010b80 <__ieee754_pow+0x9ac>
 8010372:	2280      	movs	r2, #128	; 0x80
 8010374:	0612      	lsls	r2, r2, #24
 8010376:	4694      	mov	ip, r2
 8010378:	9b02      	ldr	r3, [sp, #8]
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	9b03      	ldr	r3, [sp, #12]
 801037e:	4463      	add	r3, ip
 8010380:	9301      	str	r3, [sp, #4]
 8010382:	9800      	ldr	r0, [sp, #0]
 8010384:	9901      	ldr	r1, [sp, #4]
 8010386:	b015      	add	sp, #84	; 0x54
 8010388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801038a:	2380      	movs	r3, #128	; 0x80
 801038c:	9a04      	ldr	r2, [sp, #16]
 801038e:	05db      	lsls	r3, r3, #23
 8010390:	429a      	cmp	r2, r3
 8010392:	d106      	bne.n	80103a2 <__ieee754_pow+0x1ce>
 8010394:	003a      	movs	r2, r7
 8010396:	002b      	movs	r3, r5
 8010398:	0038      	movs	r0, r7
 801039a:	0029      	movs	r1, r5
 801039c:	f7f1 ff9a 	bl	80022d4 <__aeabi_dmul>
 80103a0:	e73e      	b.n	8010220 <__ieee754_pow+0x4c>
 80103a2:	4b28      	ldr	r3, [pc, #160]	; (8010444 <__ieee754_pow+0x270>)
 80103a4:	9a04      	ldr	r2, [sp, #16]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d000      	beq.n	80103ac <__ieee754_pow+0x1d8>
 80103aa:	e775      	b.n	8010298 <__ieee754_pow+0xc4>
 80103ac:	2d00      	cmp	r5, #0
 80103ae:	da00      	bge.n	80103b2 <__ieee754_pow+0x1de>
 80103b0:	e772      	b.n	8010298 <__ieee754_pow+0xc4>
 80103b2:	0038      	movs	r0, r7
 80103b4:	0029      	movs	r1, r5
 80103b6:	f000 fcb7 	bl	8010d28 <__ieee754_sqrt>
 80103ba:	e731      	b.n	8010220 <__ieee754_pow+0x4c>
 80103bc:	9b06      	ldr	r3, [sp, #24]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d1df      	bne.n	8010382 <__ieee754_pow+0x1ae>
 80103c2:	9800      	ldr	r0, [sp, #0]
 80103c4:	2180      	movs	r1, #128	; 0x80
 80103c6:	0002      	movs	r2, r0
 80103c8:	9801      	ldr	r0, [sp, #4]
 80103ca:	0609      	lsls	r1, r1, #24
 80103cc:	1843      	adds	r3, r0, r1
 80103ce:	9200      	str	r2, [sp, #0]
 80103d0:	9301      	str	r3, [sp, #4]
 80103d2:	e7d6      	b.n	8010382 <__ieee754_pow+0x1ae>
 80103d4:	0feb      	lsrs	r3, r5, #31
 80103d6:	3b01      	subs	r3, #1
 80103d8:	930e      	str	r3, [sp, #56]	; 0x38
 80103da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103dc:	9b06      	ldr	r3, [sp, #24]
 80103de:	4313      	orrs	r3, r2
 80103e0:	d104      	bne.n	80103ec <__ieee754_pow+0x218>
 80103e2:	003a      	movs	r2, r7
 80103e4:	002b      	movs	r3, r5
 80103e6:	0038      	movs	r0, r7
 80103e8:	0029      	movs	r1, r5
 80103ea:	e77e      	b.n	80102ea <__ieee754_pow+0x116>
 80103ec:	4b16      	ldr	r3, [pc, #88]	; (8010448 <__ieee754_pow+0x274>)
 80103ee:	429e      	cmp	r6, r3
 80103f0:	dc00      	bgt.n	80103f4 <__ieee754_pow+0x220>
 80103f2:	e0f1      	b.n	80105d8 <__ieee754_pow+0x404>
 80103f4:	4b15      	ldr	r3, [pc, #84]	; (801044c <__ieee754_pow+0x278>)
 80103f6:	429e      	cmp	r6, r3
 80103f8:	dd09      	ble.n	801040e <__ieee754_pow+0x23a>
 80103fa:	4b0f      	ldr	r3, [pc, #60]	; (8010438 <__ieee754_pow+0x264>)
 80103fc:	429c      	cmp	r4, r3
 80103fe:	dc0c      	bgt.n	801041a <__ieee754_pow+0x246>
 8010400:	9b04      	ldr	r3, [sp, #16]
 8010402:	2b00      	cmp	r3, #0
 8010404:	da0c      	bge.n	8010420 <__ieee754_pow+0x24c>
 8010406:	2000      	movs	r0, #0
 8010408:	f000 fc86 	bl	8010d18 <__math_oflow>
 801040c:	e708      	b.n	8010220 <__ieee754_pow+0x4c>
 801040e:	4b10      	ldr	r3, [pc, #64]	; (8010450 <__ieee754_pow+0x27c>)
 8010410:	429c      	cmp	r4, r3
 8010412:	ddf5      	ble.n	8010400 <__ieee754_pow+0x22c>
 8010414:	4b0a      	ldr	r3, [pc, #40]	; (8010440 <__ieee754_pow+0x26c>)
 8010416:	429c      	cmp	r4, r3
 8010418:	dd1c      	ble.n	8010454 <__ieee754_pow+0x280>
 801041a:	9b04      	ldr	r3, [sp, #16]
 801041c:	2b00      	cmp	r3, #0
 801041e:	dcf2      	bgt.n	8010406 <__ieee754_pow+0x232>
 8010420:	2000      	movs	r0, #0
 8010422:	f000 fc72 	bl	8010d0a <__math_uflow>
 8010426:	e6fb      	b.n	8010220 <__ieee754_pow+0x4c>
 8010428:	fff00000 	.word	0xfff00000
 801042c:	7ff00000 	.word	0x7ff00000
 8010430:	c0100000 	.word	0xc0100000
 8010434:	433fffff 	.word	0x433fffff
 8010438:	3fefffff 	.word	0x3fefffff
 801043c:	fffffc01 	.word	0xfffffc01
 8010440:	3ff00000 	.word	0x3ff00000
 8010444:	3fe00000 	.word	0x3fe00000
 8010448:	41e00000 	.word	0x41e00000
 801044c:	43f00000 	.word	0x43f00000
 8010450:	3feffffe 	.word	0x3feffffe
 8010454:	2200      	movs	r2, #0
 8010456:	9800      	ldr	r0, [sp, #0]
 8010458:	9901      	ldr	r1, [sp, #4]
 801045a:	4b53      	ldr	r3, [pc, #332]	; (80105a8 <__ieee754_pow+0x3d4>)
 801045c:	f7f2 f9fc 	bl	8002858 <__aeabi_dsub>
 8010460:	22c0      	movs	r2, #192	; 0xc0
 8010462:	4b52      	ldr	r3, [pc, #328]	; (80105ac <__ieee754_pow+0x3d8>)
 8010464:	05d2      	lsls	r2, r2, #23
 8010466:	0004      	movs	r4, r0
 8010468:	000d      	movs	r5, r1
 801046a:	f7f1 ff33 	bl	80022d4 <__aeabi_dmul>
 801046e:	4a50      	ldr	r2, [pc, #320]	; (80105b0 <__ieee754_pow+0x3dc>)
 8010470:	0006      	movs	r6, r0
 8010472:	000f      	movs	r7, r1
 8010474:	0020      	movs	r0, r4
 8010476:	0029      	movs	r1, r5
 8010478:	4b4e      	ldr	r3, [pc, #312]	; (80105b4 <__ieee754_pow+0x3e0>)
 801047a:	f7f1 ff2b 	bl	80022d4 <__aeabi_dmul>
 801047e:	2200      	movs	r2, #0
 8010480:	9000      	str	r0, [sp, #0]
 8010482:	9101      	str	r1, [sp, #4]
 8010484:	4b4c      	ldr	r3, [pc, #304]	; (80105b8 <__ieee754_pow+0x3e4>)
 8010486:	0020      	movs	r0, r4
 8010488:	0029      	movs	r1, r5
 801048a:	f7f1 ff23 	bl	80022d4 <__aeabi_dmul>
 801048e:	0002      	movs	r2, r0
 8010490:	000b      	movs	r3, r1
 8010492:	484a      	ldr	r0, [pc, #296]	; (80105bc <__ieee754_pow+0x3e8>)
 8010494:	494a      	ldr	r1, [pc, #296]	; (80105c0 <__ieee754_pow+0x3ec>)
 8010496:	f7f2 f9df 	bl	8002858 <__aeabi_dsub>
 801049a:	0022      	movs	r2, r4
 801049c:	002b      	movs	r3, r5
 801049e:	f7f1 ff19 	bl	80022d4 <__aeabi_dmul>
 80104a2:	0002      	movs	r2, r0
 80104a4:	000b      	movs	r3, r1
 80104a6:	2000      	movs	r0, #0
 80104a8:	4946      	ldr	r1, [pc, #280]	; (80105c4 <__ieee754_pow+0x3f0>)
 80104aa:	f7f2 f9d5 	bl	8002858 <__aeabi_dsub>
 80104ae:	0022      	movs	r2, r4
 80104b0:	002b      	movs	r3, r5
 80104b2:	9004      	str	r0, [sp, #16]
 80104b4:	9105      	str	r1, [sp, #20]
 80104b6:	0020      	movs	r0, r4
 80104b8:	0029      	movs	r1, r5
 80104ba:	f7f1 ff0b 	bl	80022d4 <__aeabi_dmul>
 80104be:	0002      	movs	r2, r0
 80104c0:	000b      	movs	r3, r1
 80104c2:	9804      	ldr	r0, [sp, #16]
 80104c4:	9905      	ldr	r1, [sp, #20]
 80104c6:	f7f1 ff05 	bl	80022d4 <__aeabi_dmul>
 80104ca:	4a3f      	ldr	r2, [pc, #252]	; (80105c8 <__ieee754_pow+0x3f4>)
 80104cc:	4b37      	ldr	r3, [pc, #220]	; (80105ac <__ieee754_pow+0x3d8>)
 80104ce:	f7f1 ff01 	bl	80022d4 <__aeabi_dmul>
 80104d2:	0002      	movs	r2, r0
 80104d4:	000b      	movs	r3, r1
 80104d6:	9800      	ldr	r0, [sp, #0]
 80104d8:	9901      	ldr	r1, [sp, #4]
 80104da:	f7f2 f9bd 	bl	8002858 <__aeabi_dsub>
 80104de:	0002      	movs	r2, r0
 80104e0:	000b      	movs	r3, r1
 80104e2:	0004      	movs	r4, r0
 80104e4:	000d      	movs	r5, r1
 80104e6:	0030      	movs	r0, r6
 80104e8:	0039      	movs	r1, r7
 80104ea:	f7f0 ff99 	bl	8001420 <__aeabi_dadd>
 80104ee:	2000      	movs	r0, #0
 80104f0:	0032      	movs	r2, r6
 80104f2:	003b      	movs	r3, r7
 80104f4:	9004      	str	r0, [sp, #16]
 80104f6:	9105      	str	r1, [sp, #20]
 80104f8:	f7f2 f9ae 	bl	8002858 <__aeabi_dsub>
 80104fc:	0002      	movs	r2, r0
 80104fe:	000b      	movs	r3, r1
 8010500:	0020      	movs	r0, r4
 8010502:	0029      	movs	r1, r5
 8010504:	f7f2 f9a8 	bl	8002858 <__aeabi_dsub>
 8010508:	9b06      	ldr	r3, [sp, #24]
 801050a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801050c:	3b01      	subs	r3, #1
 801050e:	0006      	movs	r6, r0
 8010510:	000f      	movs	r7, r1
 8010512:	4313      	orrs	r3, r2
 8010514:	d000      	beq.n	8010518 <__ieee754_pow+0x344>
 8010516:	e1dc      	b.n	80108d2 <__ieee754_pow+0x6fe>
 8010518:	2300      	movs	r3, #0
 801051a:	4c2c      	ldr	r4, [pc, #176]	; (80105cc <__ieee754_pow+0x3f8>)
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	9401      	str	r4, [sp, #4]
 8010520:	9c02      	ldr	r4, [sp, #8]
 8010522:	9d03      	ldr	r5, [sp, #12]
 8010524:	9802      	ldr	r0, [sp, #8]
 8010526:	9903      	ldr	r1, [sp, #12]
 8010528:	2400      	movs	r4, #0
 801052a:	002b      	movs	r3, r5
 801052c:	0022      	movs	r2, r4
 801052e:	f7f2 f993 	bl	8002858 <__aeabi_dsub>
 8010532:	9a04      	ldr	r2, [sp, #16]
 8010534:	9b05      	ldr	r3, [sp, #20]
 8010536:	f7f1 fecd 	bl	80022d4 <__aeabi_dmul>
 801053a:	9a02      	ldr	r2, [sp, #8]
 801053c:	9b03      	ldr	r3, [sp, #12]
 801053e:	9006      	str	r0, [sp, #24]
 8010540:	9107      	str	r1, [sp, #28]
 8010542:	0030      	movs	r0, r6
 8010544:	0039      	movs	r1, r7
 8010546:	f7f1 fec5 	bl	80022d4 <__aeabi_dmul>
 801054a:	0002      	movs	r2, r0
 801054c:	000b      	movs	r3, r1
 801054e:	9806      	ldr	r0, [sp, #24]
 8010550:	9907      	ldr	r1, [sp, #28]
 8010552:	f7f0 ff65 	bl	8001420 <__aeabi_dadd>
 8010556:	0022      	movs	r2, r4
 8010558:	002b      	movs	r3, r5
 801055a:	0006      	movs	r6, r0
 801055c:	000f      	movs	r7, r1
 801055e:	9804      	ldr	r0, [sp, #16]
 8010560:	9905      	ldr	r1, [sp, #20]
 8010562:	f7f1 feb7 	bl	80022d4 <__aeabi_dmul>
 8010566:	0003      	movs	r3, r0
 8010568:	000c      	movs	r4, r1
 801056a:	9004      	str	r0, [sp, #16]
 801056c:	9105      	str	r1, [sp, #20]
 801056e:	9306      	str	r3, [sp, #24]
 8010570:	9407      	str	r4, [sp, #28]
 8010572:	0002      	movs	r2, r0
 8010574:	000b      	movs	r3, r1
 8010576:	0030      	movs	r0, r6
 8010578:	0039      	movs	r1, r7
 801057a:	f7f0 ff51 	bl	8001420 <__aeabi_dadd>
 801057e:	4b14      	ldr	r3, [pc, #80]	; (80105d0 <__ieee754_pow+0x3fc>)
 8010580:	0005      	movs	r5, r0
 8010582:	000c      	movs	r4, r1
 8010584:	9108      	str	r1, [sp, #32]
 8010586:	4299      	cmp	r1, r3
 8010588:	dc00      	bgt.n	801058c <__ieee754_pow+0x3b8>
 801058a:	e2d4      	b.n	8010b36 <__ieee754_pow+0x962>
 801058c:	4b11      	ldr	r3, [pc, #68]	; (80105d4 <__ieee754_pow+0x400>)
 801058e:	18cb      	adds	r3, r1, r3
 8010590:	4303      	orrs	r3, r0
 8010592:	d100      	bne.n	8010596 <__ieee754_pow+0x3c2>
 8010594:	e1d6      	b.n	8010944 <__ieee754_pow+0x770>
 8010596:	9800      	ldr	r0, [sp, #0]
 8010598:	9901      	ldr	r1, [sp, #4]
 801059a:	2300      	movs	r3, #0
 801059c:	2200      	movs	r2, #0
 801059e:	f7ef ff5b 	bl	8000458 <__aeabi_dcmplt>
 80105a2:	1e43      	subs	r3, r0, #1
 80105a4:	4198      	sbcs	r0, r3
 80105a6:	e72f      	b.n	8010408 <__ieee754_pow+0x234>
 80105a8:	3ff00000 	.word	0x3ff00000
 80105ac:	3ff71547 	.word	0x3ff71547
 80105b0:	f85ddf44 	.word	0xf85ddf44
 80105b4:	3e54ae0b 	.word	0x3e54ae0b
 80105b8:	3fd00000 	.word	0x3fd00000
 80105bc:	55555555 	.word	0x55555555
 80105c0:	3fd55555 	.word	0x3fd55555
 80105c4:	3fe00000 	.word	0x3fe00000
 80105c8:	652b82fe 	.word	0x652b82fe
 80105cc:	bff00000 	.word	0xbff00000
 80105d0:	408fffff 	.word	0x408fffff
 80105d4:	bf700000 	.word	0xbf700000
 80105d8:	4bbf      	ldr	r3, [pc, #764]	; (80108d8 <__ieee754_pow+0x704>)
 80105da:	2200      	movs	r2, #0
 80105dc:	422b      	tst	r3, r5
 80105de:	d10a      	bne.n	80105f6 <__ieee754_pow+0x422>
 80105e0:	9800      	ldr	r0, [sp, #0]
 80105e2:	9901      	ldr	r1, [sp, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	4bbd      	ldr	r3, [pc, #756]	; (80108dc <__ieee754_pow+0x708>)
 80105e8:	f7f1 fe74 	bl	80022d4 <__aeabi_dmul>
 80105ec:	2235      	movs	r2, #53	; 0x35
 80105ee:	9000      	str	r0, [sp, #0]
 80105f0:	9101      	str	r1, [sp, #4]
 80105f2:	9c01      	ldr	r4, [sp, #4]
 80105f4:	4252      	negs	r2, r2
 80105f6:	49ba      	ldr	r1, [pc, #744]	; (80108e0 <__ieee754_pow+0x70c>)
 80105f8:	1523      	asrs	r3, r4, #20
 80105fa:	185b      	adds	r3, r3, r1
 80105fc:	189b      	adds	r3, r3, r2
 80105fe:	0324      	lsls	r4, r4, #12
 8010600:	4db8      	ldr	r5, [pc, #736]	; (80108e4 <__ieee754_pow+0x710>)
 8010602:	930d      	str	r3, [sp, #52]	; 0x34
 8010604:	4bb8      	ldr	r3, [pc, #736]	; (80108e8 <__ieee754_pow+0x714>)
 8010606:	0b22      	lsrs	r2, r4, #12
 8010608:	4315      	orrs	r5, r2
 801060a:	2400      	movs	r4, #0
 801060c:	429a      	cmp	r2, r3
 801060e:	dd09      	ble.n	8010624 <__ieee754_pow+0x450>
 8010610:	4bb6      	ldr	r3, [pc, #728]	; (80108ec <__ieee754_pow+0x718>)
 8010612:	3401      	adds	r4, #1
 8010614:	429a      	cmp	r2, r3
 8010616:	dd05      	ble.n	8010624 <__ieee754_pow+0x450>
 8010618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801061a:	191b      	adds	r3, r3, r4
 801061c:	2400      	movs	r4, #0
 801061e:	930d      	str	r3, [sp, #52]	; 0x34
 8010620:	4bb3      	ldr	r3, [pc, #716]	; (80108f0 <__ieee754_pow+0x71c>)
 8010622:	18ed      	adds	r5, r5, r3
 8010624:	4bb3      	ldr	r3, [pc, #716]	; (80108f4 <__ieee754_pow+0x720>)
 8010626:	00e2      	lsls	r2, r4, #3
 8010628:	189b      	adds	r3, r3, r2
 801062a:	9800      	ldr	r0, [sp, #0]
 801062c:	9901      	ldr	r1, [sp, #4]
 801062e:	920f      	str	r2, [sp, #60]	; 0x3c
 8010630:	0029      	movs	r1, r5
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	0006      	movs	r6, r0
 8010638:	920a      	str	r2, [sp, #40]	; 0x28
 801063a:	930b      	str	r3, [sp, #44]	; 0x2c
 801063c:	f7f2 f90c 	bl	8002858 <__aeabi_dsub>
 8010640:	0032      	movs	r2, r6
 8010642:	002b      	movs	r3, r5
 8010644:	9010      	str	r0, [sp, #64]	; 0x40
 8010646:	9111      	str	r1, [sp, #68]	; 0x44
 8010648:	980a      	ldr	r0, [sp, #40]	; 0x28
 801064a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801064c:	f7f0 fee8 	bl	8001420 <__aeabi_dadd>
 8010650:	0002      	movs	r2, r0
 8010652:	000b      	movs	r3, r1
 8010654:	2000      	movs	r0, #0
 8010656:	49a3      	ldr	r1, [pc, #652]	; (80108e4 <__ieee754_pow+0x710>)
 8010658:	f7f1 fa42 	bl	8001ae0 <__aeabi_ddiv>
 801065c:	0002      	movs	r2, r0
 801065e:	000b      	movs	r3, r1
 8010660:	9012      	str	r0, [sp, #72]	; 0x48
 8010662:	9113      	str	r1, [sp, #76]	; 0x4c
 8010664:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010666:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010668:	f7f1 fe34 	bl	80022d4 <__aeabi_dmul>
 801066c:	9008      	str	r0, [sp, #32]
 801066e:	9109      	str	r1, [sp, #36]	; 0x24
 8010670:	9a08      	ldr	r2, [sp, #32]
 8010672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010674:	9204      	str	r2, [sp, #16]
 8010676:	9305      	str	r3, [sp, #20]
 8010678:	2300      	movs	r3, #0
 801067a:	2180      	movs	r1, #128	; 0x80
 801067c:	2080      	movs	r0, #128	; 0x80
 801067e:	9304      	str	r3, [sp, #16]
 8010680:	9a04      	ldr	r2, [sp, #16]
 8010682:	9b05      	ldr	r3, [sp, #20]
 8010684:	9200      	str	r2, [sp, #0]
 8010686:	9301      	str	r3, [sp, #4]
 8010688:	2200      	movs	r2, #0
 801068a:	002f      	movs	r7, r5
 801068c:	0589      	lsls	r1, r1, #22
 801068e:	106d      	asrs	r5, r5, #1
 8010690:	4329      	orrs	r1, r5
 8010692:	0300      	lsls	r0, r0, #12
 8010694:	1809      	adds	r1, r1, r0
 8010696:	04a0      	lsls	r0, r4, #18
 8010698:	180b      	adds	r3, r1, r0
 801069a:	9800      	ldr	r0, [sp, #0]
 801069c:	9901      	ldr	r1, [sp, #4]
 801069e:	0014      	movs	r4, r2
 80106a0:	001d      	movs	r5, r3
 80106a2:	f7f1 fe17 	bl	80022d4 <__aeabi_dmul>
 80106a6:	0002      	movs	r2, r0
 80106a8:	000b      	movs	r3, r1
 80106aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80106ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106ae:	f7f2 f8d3 	bl	8002858 <__aeabi_dsub>
 80106b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106b6:	9010      	str	r0, [sp, #64]	; 0x40
 80106b8:	9111      	str	r1, [sp, #68]	; 0x44
 80106ba:	0020      	movs	r0, r4
 80106bc:	0029      	movs	r1, r5
 80106be:	f7f2 f8cb 	bl	8002858 <__aeabi_dsub>
 80106c2:	0002      	movs	r2, r0
 80106c4:	000b      	movs	r3, r1
 80106c6:	0030      	movs	r0, r6
 80106c8:	0039      	movs	r1, r7
 80106ca:	f7f2 f8c5 	bl	8002858 <__aeabi_dsub>
 80106ce:	9a00      	ldr	r2, [sp, #0]
 80106d0:	9b01      	ldr	r3, [sp, #4]
 80106d2:	f7f1 fdff 	bl	80022d4 <__aeabi_dmul>
 80106d6:	0002      	movs	r2, r0
 80106d8:	000b      	movs	r3, r1
 80106da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80106dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106de:	f7f2 f8bb 	bl	8002858 <__aeabi_dsub>
 80106e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80106e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80106e6:	f7f1 fdf5 	bl	80022d4 <__aeabi_dmul>
 80106ea:	9a08      	ldr	r2, [sp, #32]
 80106ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ee:	900a      	str	r0, [sp, #40]	; 0x28
 80106f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80106f2:	0010      	movs	r0, r2
 80106f4:	0019      	movs	r1, r3
 80106f6:	f7f1 fded 	bl	80022d4 <__aeabi_dmul>
 80106fa:	0006      	movs	r6, r0
 80106fc:	000f      	movs	r7, r1
 80106fe:	4a7e      	ldr	r2, [pc, #504]	; (80108f8 <__ieee754_pow+0x724>)
 8010700:	4b7e      	ldr	r3, [pc, #504]	; (80108fc <__ieee754_pow+0x728>)
 8010702:	f7f1 fde7 	bl	80022d4 <__aeabi_dmul>
 8010706:	4a7e      	ldr	r2, [pc, #504]	; (8010900 <__ieee754_pow+0x72c>)
 8010708:	4b7e      	ldr	r3, [pc, #504]	; (8010904 <__ieee754_pow+0x730>)
 801070a:	f7f0 fe89 	bl	8001420 <__aeabi_dadd>
 801070e:	0032      	movs	r2, r6
 8010710:	003b      	movs	r3, r7
 8010712:	f7f1 fddf 	bl	80022d4 <__aeabi_dmul>
 8010716:	4a7c      	ldr	r2, [pc, #496]	; (8010908 <__ieee754_pow+0x734>)
 8010718:	4b7c      	ldr	r3, [pc, #496]	; (801090c <__ieee754_pow+0x738>)
 801071a:	f7f0 fe81 	bl	8001420 <__aeabi_dadd>
 801071e:	0032      	movs	r2, r6
 8010720:	003b      	movs	r3, r7
 8010722:	f7f1 fdd7 	bl	80022d4 <__aeabi_dmul>
 8010726:	4a7a      	ldr	r2, [pc, #488]	; (8010910 <__ieee754_pow+0x73c>)
 8010728:	4b7a      	ldr	r3, [pc, #488]	; (8010914 <__ieee754_pow+0x740>)
 801072a:	f7f0 fe79 	bl	8001420 <__aeabi_dadd>
 801072e:	0032      	movs	r2, r6
 8010730:	003b      	movs	r3, r7
 8010732:	f7f1 fdcf 	bl	80022d4 <__aeabi_dmul>
 8010736:	4a78      	ldr	r2, [pc, #480]	; (8010918 <__ieee754_pow+0x744>)
 8010738:	4b78      	ldr	r3, [pc, #480]	; (801091c <__ieee754_pow+0x748>)
 801073a:	f7f0 fe71 	bl	8001420 <__aeabi_dadd>
 801073e:	0032      	movs	r2, r6
 8010740:	003b      	movs	r3, r7
 8010742:	f7f1 fdc7 	bl	80022d4 <__aeabi_dmul>
 8010746:	4a76      	ldr	r2, [pc, #472]	; (8010920 <__ieee754_pow+0x74c>)
 8010748:	4b76      	ldr	r3, [pc, #472]	; (8010924 <__ieee754_pow+0x750>)
 801074a:	f7f0 fe69 	bl	8001420 <__aeabi_dadd>
 801074e:	0032      	movs	r2, r6
 8010750:	0004      	movs	r4, r0
 8010752:	000d      	movs	r5, r1
 8010754:	003b      	movs	r3, r7
 8010756:	0030      	movs	r0, r6
 8010758:	0039      	movs	r1, r7
 801075a:	f7f1 fdbb 	bl	80022d4 <__aeabi_dmul>
 801075e:	0002      	movs	r2, r0
 8010760:	000b      	movs	r3, r1
 8010762:	0020      	movs	r0, r4
 8010764:	0029      	movs	r1, r5
 8010766:	f7f1 fdb5 	bl	80022d4 <__aeabi_dmul>
 801076a:	9a00      	ldr	r2, [sp, #0]
 801076c:	9b01      	ldr	r3, [sp, #4]
 801076e:	0004      	movs	r4, r0
 8010770:	000d      	movs	r5, r1
 8010772:	9808      	ldr	r0, [sp, #32]
 8010774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010776:	f7f0 fe53 	bl	8001420 <__aeabi_dadd>
 801077a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801077c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801077e:	f7f1 fda9 	bl	80022d4 <__aeabi_dmul>
 8010782:	0022      	movs	r2, r4
 8010784:	002b      	movs	r3, r5
 8010786:	f7f0 fe4b 	bl	8001420 <__aeabi_dadd>
 801078a:	9a00      	ldr	r2, [sp, #0]
 801078c:	9b01      	ldr	r3, [sp, #4]
 801078e:	9010      	str	r0, [sp, #64]	; 0x40
 8010790:	9111      	str	r1, [sp, #68]	; 0x44
 8010792:	0010      	movs	r0, r2
 8010794:	0019      	movs	r1, r3
 8010796:	f7f1 fd9d 	bl	80022d4 <__aeabi_dmul>
 801079a:	2200      	movs	r2, #0
 801079c:	4b62      	ldr	r3, [pc, #392]	; (8010928 <__ieee754_pow+0x754>)
 801079e:	0004      	movs	r4, r0
 80107a0:	000d      	movs	r5, r1
 80107a2:	f7f0 fe3d 	bl	8001420 <__aeabi_dadd>
 80107a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80107a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80107aa:	f7f0 fe39 	bl	8001420 <__aeabi_dadd>
 80107ae:	2000      	movs	r0, #0
 80107b0:	000f      	movs	r7, r1
 80107b2:	0006      	movs	r6, r0
 80107b4:	0002      	movs	r2, r0
 80107b6:	000b      	movs	r3, r1
 80107b8:	9800      	ldr	r0, [sp, #0]
 80107ba:	9901      	ldr	r1, [sp, #4]
 80107bc:	f7f1 fd8a 	bl	80022d4 <__aeabi_dmul>
 80107c0:	2200      	movs	r2, #0
 80107c2:	9000      	str	r0, [sp, #0]
 80107c4:	9101      	str	r1, [sp, #4]
 80107c6:	4b58      	ldr	r3, [pc, #352]	; (8010928 <__ieee754_pow+0x754>)
 80107c8:	0030      	movs	r0, r6
 80107ca:	0039      	movs	r1, r7
 80107cc:	f7f2 f844 	bl	8002858 <__aeabi_dsub>
 80107d0:	0022      	movs	r2, r4
 80107d2:	002b      	movs	r3, r5
 80107d4:	f7f2 f840 	bl	8002858 <__aeabi_dsub>
 80107d8:	0002      	movs	r2, r0
 80107da:	000b      	movs	r3, r1
 80107dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80107de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80107e0:	f7f2 f83a 	bl	8002858 <__aeabi_dsub>
 80107e4:	9a08      	ldr	r2, [sp, #32]
 80107e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e8:	f7f1 fd74 	bl	80022d4 <__aeabi_dmul>
 80107ec:	0032      	movs	r2, r6
 80107ee:	0004      	movs	r4, r0
 80107f0:	000d      	movs	r5, r1
 80107f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80107f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80107f6:	003b      	movs	r3, r7
 80107f8:	f7f1 fd6c 	bl	80022d4 <__aeabi_dmul>
 80107fc:	0002      	movs	r2, r0
 80107fe:	000b      	movs	r3, r1
 8010800:	0020      	movs	r0, r4
 8010802:	0029      	movs	r1, r5
 8010804:	f7f0 fe0c 	bl	8001420 <__aeabi_dadd>
 8010808:	0004      	movs	r4, r0
 801080a:	000d      	movs	r5, r1
 801080c:	0002      	movs	r2, r0
 801080e:	000b      	movs	r3, r1
 8010810:	9800      	ldr	r0, [sp, #0]
 8010812:	9901      	ldr	r1, [sp, #4]
 8010814:	f7f0 fe04 	bl	8001420 <__aeabi_dadd>
 8010818:	22e0      	movs	r2, #224	; 0xe0
 801081a:	2000      	movs	r0, #0
 801081c:	4b43      	ldr	r3, [pc, #268]	; (801092c <__ieee754_pow+0x758>)
 801081e:	0612      	lsls	r2, r2, #24
 8010820:	0006      	movs	r6, r0
 8010822:	000f      	movs	r7, r1
 8010824:	f7f1 fd56 	bl	80022d4 <__aeabi_dmul>
 8010828:	9008      	str	r0, [sp, #32]
 801082a:	9109      	str	r1, [sp, #36]	; 0x24
 801082c:	9a00      	ldr	r2, [sp, #0]
 801082e:	9b01      	ldr	r3, [sp, #4]
 8010830:	0030      	movs	r0, r6
 8010832:	0039      	movs	r1, r7
 8010834:	f7f2 f810 	bl	8002858 <__aeabi_dsub>
 8010838:	0002      	movs	r2, r0
 801083a:	000b      	movs	r3, r1
 801083c:	0020      	movs	r0, r4
 801083e:	0029      	movs	r1, r5
 8010840:	f7f2 f80a 	bl	8002858 <__aeabi_dsub>
 8010844:	4a3a      	ldr	r2, [pc, #232]	; (8010930 <__ieee754_pow+0x75c>)
 8010846:	4b39      	ldr	r3, [pc, #228]	; (801092c <__ieee754_pow+0x758>)
 8010848:	f7f1 fd44 	bl	80022d4 <__aeabi_dmul>
 801084c:	4a39      	ldr	r2, [pc, #228]	; (8010934 <__ieee754_pow+0x760>)
 801084e:	0004      	movs	r4, r0
 8010850:	000d      	movs	r5, r1
 8010852:	0030      	movs	r0, r6
 8010854:	0039      	movs	r1, r7
 8010856:	4b38      	ldr	r3, [pc, #224]	; (8010938 <__ieee754_pow+0x764>)
 8010858:	f7f1 fd3c 	bl	80022d4 <__aeabi_dmul>
 801085c:	0002      	movs	r2, r0
 801085e:	000b      	movs	r3, r1
 8010860:	0020      	movs	r0, r4
 8010862:	0029      	movs	r1, r5
 8010864:	f7f0 fddc 	bl	8001420 <__aeabi_dadd>
 8010868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801086a:	4b34      	ldr	r3, [pc, #208]	; (801093c <__ieee754_pow+0x768>)
 801086c:	189b      	adds	r3, r3, r2
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	f7f0 fdd5 	bl	8001420 <__aeabi_dadd>
 8010876:	9000      	str	r0, [sp, #0]
 8010878:	9101      	str	r1, [sp, #4]
 801087a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801087c:	f7f2 fbc2 	bl	8003004 <__aeabi_i2d>
 8010880:	0004      	movs	r4, r0
 8010882:	000d      	movs	r5, r1
 8010884:	9808      	ldr	r0, [sp, #32]
 8010886:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010888:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801088a:	4b2d      	ldr	r3, [pc, #180]	; (8010940 <__ieee754_pow+0x76c>)
 801088c:	189b      	adds	r3, r3, r2
 801088e:	681e      	ldr	r6, [r3, #0]
 8010890:	685f      	ldr	r7, [r3, #4]
 8010892:	9a00      	ldr	r2, [sp, #0]
 8010894:	9b01      	ldr	r3, [sp, #4]
 8010896:	f7f0 fdc3 	bl	8001420 <__aeabi_dadd>
 801089a:	0032      	movs	r2, r6
 801089c:	003b      	movs	r3, r7
 801089e:	f7f0 fdbf 	bl	8001420 <__aeabi_dadd>
 80108a2:	0022      	movs	r2, r4
 80108a4:	002b      	movs	r3, r5
 80108a6:	f7f0 fdbb 	bl	8001420 <__aeabi_dadd>
 80108aa:	2000      	movs	r0, #0
 80108ac:	0022      	movs	r2, r4
 80108ae:	002b      	movs	r3, r5
 80108b0:	9004      	str	r0, [sp, #16]
 80108b2:	9105      	str	r1, [sp, #20]
 80108b4:	f7f1 ffd0 	bl	8002858 <__aeabi_dsub>
 80108b8:	0032      	movs	r2, r6
 80108ba:	003b      	movs	r3, r7
 80108bc:	f7f1 ffcc 	bl	8002858 <__aeabi_dsub>
 80108c0:	9a08      	ldr	r2, [sp, #32]
 80108c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108c4:	f7f1 ffc8 	bl	8002858 <__aeabi_dsub>
 80108c8:	0002      	movs	r2, r0
 80108ca:	000b      	movs	r3, r1
 80108cc:	9800      	ldr	r0, [sp, #0]
 80108ce:	9901      	ldr	r1, [sp, #4]
 80108d0:	e618      	b.n	8010504 <__ieee754_pow+0x330>
 80108d2:	2300      	movs	r3, #0
 80108d4:	4c03      	ldr	r4, [pc, #12]	; (80108e4 <__ieee754_pow+0x710>)
 80108d6:	e621      	b.n	801051c <__ieee754_pow+0x348>
 80108d8:	7ff00000 	.word	0x7ff00000
 80108dc:	43400000 	.word	0x43400000
 80108e0:	fffffc01 	.word	0xfffffc01
 80108e4:	3ff00000 	.word	0x3ff00000
 80108e8:	0003988e 	.word	0x0003988e
 80108ec:	000bb679 	.word	0x000bb679
 80108f0:	fff00000 	.word	0xfff00000
 80108f4:	08012480 	.word	0x08012480
 80108f8:	4a454eef 	.word	0x4a454eef
 80108fc:	3fca7e28 	.word	0x3fca7e28
 8010900:	93c9db65 	.word	0x93c9db65
 8010904:	3fcd864a 	.word	0x3fcd864a
 8010908:	a91d4101 	.word	0xa91d4101
 801090c:	3fd17460 	.word	0x3fd17460
 8010910:	518f264d 	.word	0x518f264d
 8010914:	3fd55555 	.word	0x3fd55555
 8010918:	db6fabff 	.word	0xdb6fabff
 801091c:	3fdb6db6 	.word	0x3fdb6db6
 8010920:	33333303 	.word	0x33333303
 8010924:	3fe33333 	.word	0x3fe33333
 8010928:	40080000 	.word	0x40080000
 801092c:	3feec709 	.word	0x3feec709
 8010930:	dc3a03fd 	.word	0xdc3a03fd
 8010934:	145b01f5 	.word	0x145b01f5
 8010938:	be3e2fe0 	.word	0xbe3e2fe0
 801093c:	080124a0 	.word	0x080124a0
 8010940:	08012490 	.word	0x08012490
 8010944:	4a90      	ldr	r2, [pc, #576]	; (8010b88 <__ieee754_pow+0x9b4>)
 8010946:	4b91      	ldr	r3, [pc, #580]	; (8010b8c <__ieee754_pow+0x9b8>)
 8010948:	0030      	movs	r0, r6
 801094a:	0039      	movs	r1, r7
 801094c:	f7f0 fd68 	bl	8001420 <__aeabi_dadd>
 8010950:	9a04      	ldr	r2, [sp, #16]
 8010952:	9b05      	ldr	r3, [sp, #20]
 8010954:	9002      	str	r0, [sp, #8]
 8010956:	9103      	str	r1, [sp, #12]
 8010958:	0028      	movs	r0, r5
 801095a:	0021      	movs	r1, r4
 801095c:	f7f1 ff7c 	bl	8002858 <__aeabi_dsub>
 8010960:	0002      	movs	r2, r0
 8010962:	000b      	movs	r3, r1
 8010964:	9802      	ldr	r0, [sp, #8]
 8010966:	9903      	ldr	r1, [sp, #12]
 8010968:	f7ef fd8a 	bl	8000480 <__aeabi_dcmpgt>
 801096c:	2800      	cmp	r0, #0
 801096e:	d000      	beq.n	8010972 <__ieee754_pow+0x79e>
 8010970:	e611      	b.n	8010596 <__ieee754_pow+0x3c2>
 8010972:	2100      	movs	r1, #0
 8010974:	4a86      	ldr	r2, [pc, #536]	; (8010b90 <__ieee754_pow+0x9bc>)
 8010976:	0063      	lsls	r3, r4, #1
 8010978:	085b      	lsrs	r3, r3, #1
 801097a:	9102      	str	r1, [sp, #8]
 801097c:	4293      	cmp	r3, r2
 801097e:	dd25      	ble.n	80109cc <__ieee754_pow+0x7f8>
 8010980:	4a84      	ldr	r2, [pc, #528]	; (8010b94 <__ieee754_pow+0x9c0>)
 8010982:	151b      	asrs	r3, r3, #20
 8010984:	189b      	adds	r3, r3, r2
 8010986:	2280      	movs	r2, #128	; 0x80
 8010988:	0352      	lsls	r2, r2, #13
 801098a:	0011      	movs	r1, r2
 801098c:	4119      	asrs	r1, r3
 801098e:	190b      	adds	r3, r1, r4
 8010990:	005c      	lsls	r4, r3, #1
 8010992:	4981      	ldr	r1, [pc, #516]	; (8010b98 <__ieee754_pow+0x9c4>)
 8010994:	4d81      	ldr	r5, [pc, #516]	; (8010b9c <__ieee754_pow+0x9c8>)
 8010996:	0d64      	lsrs	r4, r4, #21
 8010998:	1864      	adds	r4, r4, r1
 801099a:	4125      	asrs	r5, r4
 801099c:	401d      	ands	r5, r3
 801099e:	031b      	lsls	r3, r3, #12
 80109a0:	0b1b      	lsrs	r3, r3, #12
 80109a2:	4313      	orrs	r3, r2
 80109a4:	2214      	movs	r2, #20
 80109a6:	1b12      	subs	r2, r2, r4
 80109a8:	4113      	asrs	r3, r2
 80109aa:	9302      	str	r3, [sp, #8]
 80109ac:	9b08      	ldr	r3, [sp, #32]
 80109ae:	2000      	movs	r0, #0
 80109b0:	0029      	movs	r1, r5
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	da02      	bge.n	80109bc <__ieee754_pow+0x7e8>
 80109b6:	9b02      	ldr	r3, [sp, #8]
 80109b8:	425b      	negs	r3, r3
 80109ba:	9302      	str	r3, [sp, #8]
 80109bc:	0002      	movs	r2, r0
 80109be:	000b      	movs	r3, r1
 80109c0:	9804      	ldr	r0, [sp, #16]
 80109c2:	9905      	ldr	r1, [sp, #20]
 80109c4:	f7f1 ff48 	bl	8002858 <__aeabi_dsub>
 80109c8:	9006      	str	r0, [sp, #24]
 80109ca:	9107      	str	r1, [sp, #28]
 80109cc:	9806      	ldr	r0, [sp, #24]
 80109ce:	9907      	ldr	r1, [sp, #28]
 80109d0:	0032      	movs	r2, r6
 80109d2:	003b      	movs	r3, r7
 80109d4:	f7f0 fd24 	bl	8001420 <__aeabi_dadd>
 80109d8:	2000      	movs	r0, #0
 80109da:	2200      	movs	r2, #0
 80109dc:	4b70      	ldr	r3, [pc, #448]	; (8010ba0 <__ieee754_pow+0x9cc>)
 80109de:	9004      	str	r0, [sp, #16]
 80109e0:	9105      	str	r1, [sp, #20]
 80109e2:	f7f1 fc77 	bl	80022d4 <__aeabi_dmul>
 80109e6:	9a06      	ldr	r2, [sp, #24]
 80109e8:	9b07      	ldr	r3, [sp, #28]
 80109ea:	9008      	str	r0, [sp, #32]
 80109ec:	9109      	str	r1, [sp, #36]	; 0x24
 80109ee:	9804      	ldr	r0, [sp, #16]
 80109f0:	9905      	ldr	r1, [sp, #20]
 80109f2:	f7f1 ff31 	bl	8002858 <__aeabi_dsub>
 80109f6:	0002      	movs	r2, r0
 80109f8:	000b      	movs	r3, r1
 80109fa:	0030      	movs	r0, r6
 80109fc:	0039      	movs	r1, r7
 80109fe:	f7f1 ff2b 	bl	8002858 <__aeabi_dsub>
 8010a02:	4a68      	ldr	r2, [pc, #416]	; (8010ba4 <__ieee754_pow+0x9d0>)
 8010a04:	4b68      	ldr	r3, [pc, #416]	; (8010ba8 <__ieee754_pow+0x9d4>)
 8010a06:	f7f1 fc65 	bl	80022d4 <__aeabi_dmul>
 8010a0a:	4a68      	ldr	r2, [pc, #416]	; (8010bac <__ieee754_pow+0x9d8>)
 8010a0c:	0004      	movs	r4, r0
 8010a0e:	000d      	movs	r5, r1
 8010a10:	9804      	ldr	r0, [sp, #16]
 8010a12:	9905      	ldr	r1, [sp, #20]
 8010a14:	4b66      	ldr	r3, [pc, #408]	; (8010bb0 <__ieee754_pow+0x9dc>)
 8010a16:	f7f1 fc5d 	bl	80022d4 <__aeabi_dmul>
 8010a1a:	0002      	movs	r2, r0
 8010a1c:	000b      	movs	r3, r1
 8010a1e:	0020      	movs	r0, r4
 8010a20:	0029      	movs	r1, r5
 8010a22:	f7f0 fcfd 	bl	8001420 <__aeabi_dadd>
 8010a26:	0004      	movs	r4, r0
 8010a28:	000d      	movs	r5, r1
 8010a2a:	0002      	movs	r2, r0
 8010a2c:	000b      	movs	r3, r1
 8010a2e:	9808      	ldr	r0, [sp, #32]
 8010a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a32:	f7f0 fcf5 	bl	8001420 <__aeabi_dadd>
 8010a36:	9a08      	ldr	r2, [sp, #32]
 8010a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a3a:	0006      	movs	r6, r0
 8010a3c:	000f      	movs	r7, r1
 8010a3e:	f7f1 ff0b 	bl	8002858 <__aeabi_dsub>
 8010a42:	0002      	movs	r2, r0
 8010a44:	000b      	movs	r3, r1
 8010a46:	0020      	movs	r0, r4
 8010a48:	0029      	movs	r1, r5
 8010a4a:	f7f1 ff05 	bl	8002858 <__aeabi_dsub>
 8010a4e:	0032      	movs	r2, r6
 8010a50:	9004      	str	r0, [sp, #16]
 8010a52:	9105      	str	r1, [sp, #20]
 8010a54:	003b      	movs	r3, r7
 8010a56:	0030      	movs	r0, r6
 8010a58:	0039      	movs	r1, r7
 8010a5a:	f7f1 fc3b 	bl	80022d4 <__aeabi_dmul>
 8010a5e:	0004      	movs	r4, r0
 8010a60:	000d      	movs	r5, r1
 8010a62:	4a54      	ldr	r2, [pc, #336]	; (8010bb4 <__ieee754_pow+0x9e0>)
 8010a64:	4b54      	ldr	r3, [pc, #336]	; (8010bb8 <__ieee754_pow+0x9e4>)
 8010a66:	f7f1 fc35 	bl	80022d4 <__aeabi_dmul>
 8010a6a:	4a54      	ldr	r2, [pc, #336]	; (8010bbc <__ieee754_pow+0x9e8>)
 8010a6c:	4b54      	ldr	r3, [pc, #336]	; (8010bc0 <__ieee754_pow+0x9ec>)
 8010a6e:	f7f1 fef3 	bl	8002858 <__aeabi_dsub>
 8010a72:	0022      	movs	r2, r4
 8010a74:	002b      	movs	r3, r5
 8010a76:	f7f1 fc2d 	bl	80022d4 <__aeabi_dmul>
 8010a7a:	4a52      	ldr	r2, [pc, #328]	; (8010bc4 <__ieee754_pow+0x9f0>)
 8010a7c:	4b52      	ldr	r3, [pc, #328]	; (8010bc8 <__ieee754_pow+0x9f4>)
 8010a7e:	f7f0 fccf 	bl	8001420 <__aeabi_dadd>
 8010a82:	0022      	movs	r2, r4
 8010a84:	002b      	movs	r3, r5
 8010a86:	f7f1 fc25 	bl	80022d4 <__aeabi_dmul>
 8010a8a:	4a50      	ldr	r2, [pc, #320]	; (8010bcc <__ieee754_pow+0x9f8>)
 8010a8c:	4b50      	ldr	r3, [pc, #320]	; (8010bd0 <__ieee754_pow+0x9fc>)
 8010a8e:	f7f1 fee3 	bl	8002858 <__aeabi_dsub>
 8010a92:	0022      	movs	r2, r4
 8010a94:	002b      	movs	r3, r5
 8010a96:	f7f1 fc1d 	bl	80022d4 <__aeabi_dmul>
 8010a9a:	4a4e      	ldr	r2, [pc, #312]	; (8010bd4 <__ieee754_pow+0xa00>)
 8010a9c:	4b4e      	ldr	r3, [pc, #312]	; (8010bd8 <__ieee754_pow+0xa04>)
 8010a9e:	f7f0 fcbf 	bl	8001420 <__aeabi_dadd>
 8010aa2:	0022      	movs	r2, r4
 8010aa4:	002b      	movs	r3, r5
 8010aa6:	f7f1 fc15 	bl	80022d4 <__aeabi_dmul>
 8010aaa:	0002      	movs	r2, r0
 8010aac:	000b      	movs	r3, r1
 8010aae:	0030      	movs	r0, r6
 8010ab0:	0039      	movs	r1, r7
 8010ab2:	f7f1 fed1 	bl	8002858 <__aeabi_dsub>
 8010ab6:	0004      	movs	r4, r0
 8010ab8:	000d      	movs	r5, r1
 8010aba:	0002      	movs	r2, r0
 8010abc:	000b      	movs	r3, r1
 8010abe:	0030      	movs	r0, r6
 8010ac0:	0039      	movs	r1, r7
 8010ac2:	f7f1 fc07 	bl	80022d4 <__aeabi_dmul>
 8010ac6:	2380      	movs	r3, #128	; 0x80
 8010ac8:	9006      	str	r0, [sp, #24]
 8010aca:	9107      	str	r1, [sp, #28]
 8010acc:	2200      	movs	r2, #0
 8010ace:	0020      	movs	r0, r4
 8010ad0:	0029      	movs	r1, r5
 8010ad2:	05db      	lsls	r3, r3, #23
 8010ad4:	f7f1 fec0 	bl	8002858 <__aeabi_dsub>
 8010ad8:	0002      	movs	r2, r0
 8010ada:	000b      	movs	r3, r1
 8010adc:	9806      	ldr	r0, [sp, #24]
 8010ade:	9907      	ldr	r1, [sp, #28]
 8010ae0:	f7f0 fffe 	bl	8001ae0 <__aeabi_ddiv>
 8010ae4:	9a04      	ldr	r2, [sp, #16]
 8010ae6:	9b05      	ldr	r3, [sp, #20]
 8010ae8:	0004      	movs	r4, r0
 8010aea:	000d      	movs	r5, r1
 8010aec:	0030      	movs	r0, r6
 8010aee:	0039      	movs	r1, r7
 8010af0:	f7f1 fbf0 	bl	80022d4 <__aeabi_dmul>
 8010af4:	9a04      	ldr	r2, [sp, #16]
 8010af6:	9b05      	ldr	r3, [sp, #20]
 8010af8:	f7f0 fc92 	bl	8001420 <__aeabi_dadd>
 8010afc:	0002      	movs	r2, r0
 8010afe:	000b      	movs	r3, r1
 8010b00:	0020      	movs	r0, r4
 8010b02:	0029      	movs	r1, r5
 8010b04:	f7f1 fea8 	bl	8002858 <__aeabi_dsub>
 8010b08:	0032      	movs	r2, r6
 8010b0a:	003b      	movs	r3, r7
 8010b0c:	f7f1 fea4 	bl	8002858 <__aeabi_dsub>
 8010b10:	0002      	movs	r2, r0
 8010b12:	000b      	movs	r3, r1
 8010b14:	2000      	movs	r0, #0
 8010b16:	4931      	ldr	r1, [pc, #196]	; (8010bdc <__ieee754_pow+0xa08>)
 8010b18:	f7f1 fe9e 	bl	8002858 <__aeabi_dsub>
 8010b1c:	9b02      	ldr	r3, [sp, #8]
 8010b1e:	051b      	lsls	r3, r3, #20
 8010b20:	185b      	adds	r3, r3, r1
 8010b22:	151a      	asrs	r2, r3, #20
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	dc25      	bgt.n	8010b74 <__ieee754_pow+0x9a0>
 8010b28:	9a02      	ldr	r2, [sp, #8]
 8010b2a:	f000 f861 	bl	8010bf0 <scalbn>
 8010b2e:	9a00      	ldr	r2, [sp, #0]
 8010b30:	9b01      	ldr	r3, [sp, #4]
 8010b32:	f7ff fc33 	bl	801039c <__ieee754_pow+0x1c8>
 8010b36:	4a2a      	ldr	r2, [pc, #168]	; (8010be0 <__ieee754_pow+0xa0c>)
 8010b38:	004b      	lsls	r3, r1, #1
 8010b3a:	085b      	lsrs	r3, r3, #1
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	dc00      	bgt.n	8010b42 <__ieee754_pow+0x96e>
 8010b40:	e717      	b.n	8010972 <__ieee754_pow+0x79e>
 8010b42:	4b28      	ldr	r3, [pc, #160]	; (8010be4 <__ieee754_pow+0xa10>)
 8010b44:	18cb      	adds	r3, r1, r3
 8010b46:	4303      	orrs	r3, r0
 8010b48:	d008      	beq.n	8010b5c <__ieee754_pow+0x988>
 8010b4a:	9800      	ldr	r0, [sp, #0]
 8010b4c:	9901      	ldr	r1, [sp, #4]
 8010b4e:	2300      	movs	r3, #0
 8010b50:	2200      	movs	r2, #0
 8010b52:	f7ef fc81 	bl	8000458 <__aeabi_dcmplt>
 8010b56:	1e43      	subs	r3, r0, #1
 8010b58:	4198      	sbcs	r0, r3
 8010b5a:	e462      	b.n	8010422 <__ieee754_pow+0x24e>
 8010b5c:	9a04      	ldr	r2, [sp, #16]
 8010b5e:	9b05      	ldr	r3, [sp, #20]
 8010b60:	f7f1 fe7a 	bl	8002858 <__aeabi_dsub>
 8010b64:	0032      	movs	r2, r6
 8010b66:	003b      	movs	r3, r7
 8010b68:	f7ef fc94 	bl	8000494 <__aeabi_dcmpge>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d100      	bne.n	8010b72 <__ieee754_pow+0x99e>
 8010b70:	e6ff      	b.n	8010972 <__ieee754_pow+0x79e>
 8010b72:	e7ea      	b.n	8010b4a <__ieee754_pow+0x976>
 8010b74:	0019      	movs	r1, r3
 8010b76:	e7da      	b.n	8010b2e <__ieee754_pow+0x95a>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	4c18      	ldr	r4, [pc, #96]	; (8010bdc <__ieee754_pow+0xa08>)
 8010b7c:	f7ff fbf1 	bl	8010362 <__ieee754_pow+0x18e>
 8010b80:	2300      	movs	r3, #0
 8010b82:	2400      	movs	r4, #0
 8010b84:	f7ff fbed 	bl	8010362 <__ieee754_pow+0x18e>
 8010b88:	652b82fe 	.word	0x652b82fe
 8010b8c:	3c971547 	.word	0x3c971547
 8010b90:	3fe00000 	.word	0x3fe00000
 8010b94:	fffffc02 	.word	0xfffffc02
 8010b98:	fffffc01 	.word	0xfffffc01
 8010b9c:	fff00000 	.word	0xfff00000
 8010ba0:	3fe62e43 	.word	0x3fe62e43
 8010ba4:	fefa39ef 	.word	0xfefa39ef
 8010ba8:	3fe62e42 	.word	0x3fe62e42
 8010bac:	0ca86c39 	.word	0x0ca86c39
 8010bb0:	be205c61 	.word	0xbe205c61
 8010bb4:	72bea4d0 	.word	0x72bea4d0
 8010bb8:	3e663769 	.word	0x3e663769
 8010bbc:	c5d26bf1 	.word	0xc5d26bf1
 8010bc0:	3ebbbd41 	.word	0x3ebbbd41
 8010bc4:	af25de2c 	.word	0xaf25de2c
 8010bc8:	3f11566a 	.word	0x3f11566a
 8010bcc:	16bebd93 	.word	0x16bebd93
 8010bd0:	3f66c16c 	.word	0x3f66c16c
 8010bd4:	5555553e 	.word	0x5555553e
 8010bd8:	3fc55555 	.word	0x3fc55555
 8010bdc:	3ff00000 	.word	0x3ff00000
 8010be0:	4090cbff 	.word	0x4090cbff
 8010be4:	3f6f3400 	.word	0x3f6f3400

08010be8 <fabs>:
 8010be8:	0049      	lsls	r1, r1, #1
 8010bea:	084b      	lsrs	r3, r1, #1
 8010bec:	0019      	movs	r1, r3
 8010bee:	4770      	bx	lr

08010bf0 <scalbn>:
 8010bf0:	b570      	push	{r4, r5, r6, lr}
 8010bf2:	0014      	movs	r4, r2
 8010bf4:	004a      	lsls	r2, r1, #1
 8010bf6:	000b      	movs	r3, r1
 8010bf8:	0d52      	lsrs	r2, r2, #21
 8010bfa:	d10f      	bne.n	8010c1c <scalbn+0x2c>
 8010bfc:	004b      	lsls	r3, r1, #1
 8010bfe:	085b      	lsrs	r3, r3, #1
 8010c00:	4303      	orrs	r3, r0
 8010c02:	d011      	beq.n	8010c28 <scalbn+0x38>
 8010c04:	4b22      	ldr	r3, [pc, #136]	; (8010c90 <scalbn+0xa0>)
 8010c06:	2200      	movs	r2, #0
 8010c08:	f7f1 fb64 	bl	80022d4 <__aeabi_dmul>
 8010c0c:	4b21      	ldr	r3, [pc, #132]	; (8010c94 <scalbn+0xa4>)
 8010c0e:	429c      	cmp	r4, r3
 8010c10:	da0b      	bge.n	8010c2a <scalbn+0x3a>
 8010c12:	4a21      	ldr	r2, [pc, #132]	; (8010c98 <scalbn+0xa8>)
 8010c14:	4b21      	ldr	r3, [pc, #132]	; (8010c9c <scalbn+0xac>)
 8010c16:	f7f1 fb5d 	bl	80022d4 <__aeabi_dmul>
 8010c1a:	e005      	b.n	8010c28 <scalbn+0x38>
 8010c1c:	4d20      	ldr	r5, [pc, #128]	; (8010ca0 <scalbn+0xb0>)
 8010c1e:	42aa      	cmp	r2, r5
 8010c20:	d107      	bne.n	8010c32 <scalbn+0x42>
 8010c22:	0002      	movs	r2, r0
 8010c24:	f7f0 fbfc 	bl	8001420 <__aeabi_dadd>
 8010c28:	bd70      	pop	{r4, r5, r6, pc}
 8010c2a:	000b      	movs	r3, r1
 8010c2c:	004a      	lsls	r2, r1, #1
 8010c2e:	0d52      	lsrs	r2, r2, #21
 8010c30:	3a36      	subs	r2, #54	; 0x36
 8010c32:	4d1c      	ldr	r5, [pc, #112]	; (8010ca4 <scalbn+0xb4>)
 8010c34:	42ac      	cmp	r4, r5
 8010c36:	dd0a      	ble.n	8010c4e <scalbn+0x5e>
 8010c38:	4c1b      	ldr	r4, [pc, #108]	; (8010ca8 <scalbn+0xb8>)
 8010c3a:	4d1c      	ldr	r5, [pc, #112]	; (8010cac <scalbn+0xbc>)
 8010c3c:	2900      	cmp	r1, #0
 8010c3e:	da01      	bge.n	8010c44 <scalbn+0x54>
 8010c40:	4c19      	ldr	r4, [pc, #100]	; (8010ca8 <scalbn+0xb8>)
 8010c42:	4d1b      	ldr	r5, [pc, #108]	; (8010cb0 <scalbn+0xc0>)
 8010c44:	4a18      	ldr	r2, [pc, #96]	; (8010ca8 <scalbn+0xb8>)
 8010c46:	4b19      	ldr	r3, [pc, #100]	; (8010cac <scalbn+0xbc>)
 8010c48:	0020      	movs	r0, r4
 8010c4a:	0029      	movs	r1, r5
 8010c4c:	e7e3      	b.n	8010c16 <scalbn+0x26>
 8010c4e:	18a2      	adds	r2, r4, r2
 8010c50:	4c18      	ldr	r4, [pc, #96]	; (8010cb4 <scalbn+0xc4>)
 8010c52:	42a2      	cmp	r2, r4
 8010c54:	dcf0      	bgt.n	8010c38 <scalbn+0x48>
 8010c56:	2a00      	cmp	r2, #0
 8010c58:	dd05      	ble.n	8010c66 <scalbn+0x76>
 8010c5a:	4c17      	ldr	r4, [pc, #92]	; (8010cb8 <scalbn+0xc8>)
 8010c5c:	0512      	lsls	r2, r2, #20
 8010c5e:	4023      	ands	r3, r4
 8010c60:	4313      	orrs	r3, r2
 8010c62:	0019      	movs	r1, r3
 8010c64:	e7e0      	b.n	8010c28 <scalbn+0x38>
 8010c66:	0014      	movs	r4, r2
 8010c68:	3435      	adds	r4, #53	; 0x35
 8010c6a:	da08      	bge.n	8010c7e <scalbn+0x8e>
 8010c6c:	4c0a      	ldr	r4, [pc, #40]	; (8010c98 <scalbn+0xa8>)
 8010c6e:	4d0b      	ldr	r5, [pc, #44]	; (8010c9c <scalbn+0xac>)
 8010c70:	2900      	cmp	r1, #0
 8010c72:	da01      	bge.n	8010c78 <scalbn+0x88>
 8010c74:	4c08      	ldr	r4, [pc, #32]	; (8010c98 <scalbn+0xa8>)
 8010c76:	4d11      	ldr	r5, [pc, #68]	; (8010cbc <scalbn+0xcc>)
 8010c78:	4a07      	ldr	r2, [pc, #28]	; (8010c98 <scalbn+0xa8>)
 8010c7a:	4b08      	ldr	r3, [pc, #32]	; (8010c9c <scalbn+0xac>)
 8010c7c:	e7e4      	b.n	8010c48 <scalbn+0x58>
 8010c7e:	4c0e      	ldr	r4, [pc, #56]	; (8010cb8 <scalbn+0xc8>)
 8010c80:	3236      	adds	r2, #54	; 0x36
 8010c82:	4023      	ands	r3, r4
 8010c84:	0512      	lsls	r2, r2, #20
 8010c86:	431a      	orrs	r2, r3
 8010c88:	0011      	movs	r1, r2
 8010c8a:	4b0d      	ldr	r3, [pc, #52]	; (8010cc0 <scalbn+0xd0>)
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	e7c2      	b.n	8010c16 <scalbn+0x26>
 8010c90:	43500000 	.word	0x43500000
 8010c94:	ffff3cb0 	.word	0xffff3cb0
 8010c98:	c2f8f359 	.word	0xc2f8f359
 8010c9c:	01a56e1f 	.word	0x01a56e1f
 8010ca0:	000007ff 	.word	0x000007ff
 8010ca4:	0000c350 	.word	0x0000c350
 8010ca8:	8800759c 	.word	0x8800759c
 8010cac:	7e37e43c 	.word	0x7e37e43c
 8010cb0:	fe37e43c 	.word	0xfe37e43c
 8010cb4:	000007fe 	.word	0x000007fe
 8010cb8:	800fffff 	.word	0x800fffff
 8010cbc:	81a56e1f 	.word	0x81a56e1f
 8010cc0:	3c900000 	.word	0x3c900000

08010cc4 <with_errno>:
 8010cc4:	b570      	push	{r4, r5, r6, lr}
 8010cc6:	000d      	movs	r5, r1
 8010cc8:	0016      	movs	r6, r2
 8010cca:	0004      	movs	r4, r0
 8010ccc:	f7fc fd18 	bl	800d700 <__errno>
 8010cd0:	0029      	movs	r1, r5
 8010cd2:	6006      	str	r6, [r0, #0]
 8010cd4:	0020      	movs	r0, r4
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}

08010cd8 <xflow>:
 8010cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010cda:	0015      	movs	r5, r2
 8010cdc:	001c      	movs	r4, r3
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d010      	beq.n	8010d04 <xflow+0x2c>
 8010ce2:	2380      	movs	r3, #128	; 0x80
 8010ce4:	0010      	movs	r0, r2
 8010ce6:	061b      	lsls	r3, r3, #24
 8010ce8:	18e1      	adds	r1, r4, r3
 8010cea:	9000      	str	r0, [sp, #0]
 8010cec:	9101      	str	r1, [sp, #4]
 8010cee:	9a00      	ldr	r2, [sp, #0]
 8010cf0:	9b01      	ldr	r3, [sp, #4]
 8010cf2:	0028      	movs	r0, r5
 8010cf4:	0021      	movs	r1, r4
 8010cf6:	f7f1 faed 	bl	80022d4 <__aeabi_dmul>
 8010cfa:	2222      	movs	r2, #34	; 0x22
 8010cfc:	f7ff ffe2 	bl	8010cc4 <with_errno>
 8010d00:	b003      	add	sp, #12
 8010d02:	bd30      	pop	{r4, r5, pc}
 8010d04:	0010      	movs	r0, r2
 8010d06:	0019      	movs	r1, r3
 8010d08:	e7ef      	b.n	8010cea <xflow+0x12>

08010d0a <__math_uflow>:
 8010d0a:	2380      	movs	r3, #128	; 0x80
 8010d0c:	b510      	push	{r4, lr}
 8010d0e:	2200      	movs	r2, #0
 8010d10:	055b      	lsls	r3, r3, #21
 8010d12:	f7ff ffe1 	bl	8010cd8 <xflow>
 8010d16:	bd10      	pop	{r4, pc}

08010d18 <__math_oflow>:
 8010d18:	23e0      	movs	r3, #224	; 0xe0
 8010d1a:	b510      	push	{r4, lr}
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	05db      	lsls	r3, r3, #23
 8010d20:	f7ff ffda 	bl	8010cd8 <xflow>
 8010d24:	bd10      	pop	{r4, pc}
	...

08010d28 <__ieee754_sqrt>:
 8010d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d2a:	000a      	movs	r2, r1
 8010d2c:	000c      	movs	r4, r1
 8010d2e:	496f      	ldr	r1, [pc, #444]	; (8010eec <__ieee754_sqrt+0x1c4>)
 8010d30:	0005      	movs	r5, r0
 8010d32:	0003      	movs	r3, r0
 8010d34:	0008      	movs	r0, r1
 8010d36:	b087      	sub	sp, #28
 8010d38:	4020      	ands	r0, r4
 8010d3a:	4288      	cmp	r0, r1
 8010d3c:	d111      	bne.n	8010d62 <__ieee754_sqrt+0x3a>
 8010d3e:	002a      	movs	r2, r5
 8010d40:	0023      	movs	r3, r4
 8010d42:	0028      	movs	r0, r5
 8010d44:	0021      	movs	r1, r4
 8010d46:	f7f1 fac5 	bl	80022d4 <__aeabi_dmul>
 8010d4a:	0002      	movs	r2, r0
 8010d4c:	000b      	movs	r3, r1
 8010d4e:	0028      	movs	r0, r5
 8010d50:	0021      	movs	r1, r4
 8010d52:	f7f0 fb65 	bl	8001420 <__aeabi_dadd>
 8010d56:	0005      	movs	r5, r0
 8010d58:	000c      	movs	r4, r1
 8010d5a:	0028      	movs	r0, r5
 8010d5c:	0021      	movs	r1, r4
 8010d5e:	b007      	add	sp, #28
 8010d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d62:	2c00      	cmp	r4, #0
 8010d64:	dc12      	bgt.n	8010d8c <__ieee754_sqrt+0x64>
 8010d66:	0061      	lsls	r1, r4, #1
 8010d68:	0849      	lsrs	r1, r1, #1
 8010d6a:	4329      	orrs	r1, r5
 8010d6c:	d0f5      	beq.n	8010d5a <__ieee754_sqrt+0x32>
 8010d6e:	2100      	movs	r1, #0
 8010d70:	428c      	cmp	r4, r1
 8010d72:	d100      	bne.n	8010d76 <__ieee754_sqrt+0x4e>
 8010d74:	e09f      	b.n	8010eb6 <__ieee754_sqrt+0x18e>
 8010d76:	002a      	movs	r2, r5
 8010d78:	0023      	movs	r3, r4
 8010d7a:	0028      	movs	r0, r5
 8010d7c:	0021      	movs	r1, r4
 8010d7e:	f7f1 fd6b 	bl	8002858 <__aeabi_dsub>
 8010d82:	0002      	movs	r2, r0
 8010d84:	000b      	movs	r3, r1
 8010d86:	f7f0 feab 	bl	8001ae0 <__aeabi_ddiv>
 8010d8a:	e7e4      	b.n	8010d56 <__ieee754_sqrt+0x2e>
 8010d8c:	1521      	asrs	r1, r4, #20
 8010d8e:	d100      	bne.n	8010d92 <__ieee754_sqrt+0x6a>
 8010d90:	e091      	b.n	8010eb6 <__ieee754_sqrt+0x18e>
 8010d92:	4857      	ldr	r0, [pc, #348]	; (8010ef0 <__ieee754_sqrt+0x1c8>)
 8010d94:	0312      	lsls	r2, r2, #12
 8010d96:	180c      	adds	r4, r1, r0
 8010d98:	2080      	movs	r0, #128	; 0x80
 8010d9a:	0b12      	lsrs	r2, r2, #12
 8010d9c:	0340      	lsls	r0, r0, #13
 8010d9e:	4310      	orrs	r0, r2
 8010da0:	07c9      	lsls	r1, r1, #31
 8010da2:	d403      	bmi.n	8010dac <__ieee754_sqrt+0x84>
 8010da4:	0fda      	lsrs	r2, r3, #31
 8010da6:	0040      	lsls	r0, r0, #1
 8010da8:	1810      	adds	r0, r2, r0
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	2500      	movs	r5, #0
 8010dae:	1062      	asrs	r2, r4, #1
 8010db0:	0040      	lsls	r0, r0, #1
 8010db2:	2480      	movs	r4, #128	; 0x80
 8010db4:	9205      	str	r2, [sp, #20]
 8010db6:	0fda      	lsrs	r2, r3, #31
 8010db8:	1812      	adds	r2, r2, r0
 8010dba:	0029      	movs	r1, r5
 8010dbc:	2016      	movs	r0, #22
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	03a4      	lsls	r4, r4, #14
 8010dc2:	190e      	adds	r6, r1, r4
 8010dc4:	4296      	cmp	r6, r2
 8010dc6:	dc02      	bgt.n	8010dce <__ieee754_sqrt+0xa6>
 8010dc8:	1931      	adds	r1, r6, r4
 8010dca:	1b92      	subs	r2, r2, r6
 8010dcc:	192d      	adds	r5, r5, r4
 8010dce:	0fde      	lsrs	r6, r3, #31
 8010dd0:	0052      	lsls	r2, r2, #1
 8010dd2:	3801      	subs	r0, #1
 8010dd4:	18b2      	adds	r2, r6, r2
 8010dd6:	005b      	lsls	r3, r3, #1
 8010dd8:	0864      	lsrs	r4, r4, #1
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d1f1      	bne.n	8010dc2 <__ieee754_sqrt+0x9a>
 8010dde:	2620      	movs	r6, #32
 8010de0:	2780      	movs	r7, #128	; 0x80
 8010de2:	0004      	movs	r4, r0
 8010de4:	9604      	str	r6, [sp, #16]
 8010de6:	063f      	lsls	r7, r7, #24
 8010de8:	183e      	adds	r6, r7, r0
 8010dea:	46b4      	mov	ip, r6
 8010dec:	428a      	cmp	r2, r1
 8010dee:	dc02      	bgt.n	8010df6 <__ieee754_sqrt+0xce>
 8010df0:	d114      	bne.n	8010e1c <__ieee754_sqrt+0xf4>
 8010df2:	429e      	cmp	r6, r3
 8010df4:	d812      	bhi.n	8010e1c <__ieee754_sqrt+0xf4>
 8010df6:	4660      	mov	r0, ip
 8010df8:	4666      	mov	r6, ip
 8010dfa:	19c0      	adds	r0, r0, r7
 8010dfc:	9100      	str	r1, [sp, #0]
 8010dfe:	2e00      	cmp	r6, #0
 8010e00:	da03      	bge.n	8010e0a <__ieee754_sqrt+0xe2>
 8010e02:	43c6      	mvns	r6, r0
 8010e04:	0ff6      	lsrs	r6, r6, #31
 8010e06:	198e      	adds	r6, r1, r6
 8010e08:	9600      	str	r6, [sp, #0]
 8010e0a:	1a52      	subs	r2, r2, r1
 8010e0c:	4563      	cmp	r3, ip
 8010e0e:	4189      	sbcs	r1, r1
 8010e10:	4249      	negs	r1, r1
 8010e12:	1a52      	subs	r2, r2, r1
 8010e14:	4661      	mov	r1, ip
 8010e16:	1a5b      	subs	r3, r3, r1
 8010e18:	9900      	ldr	r1, [sp, #0]
 8010e1a:	19e4      	adds	r4, r4, r7
 8010e1c:	0fde      	lsrs	r6, r3, #31
 8010e1e:	0052      	lsls	r2, r2, #1
 8010e20:	18b2      	adds	r2, r6, r2
 8010e22:	9e04      	ldr	r6, [sp, #16]
 8010e24:	005b      	lsls	r3, r3, #1
 8010e26:	3e01      	subs	r6, #1
 8010e28:	087f      	lsrs	r7, r7, #1
 8010e2a:	9604      	str	r6, [sp, #16]
 8010e2c:	2e00      	cmp	r6, #0
 8010e2e:	d1db      	bne.n	8010de8 <__ieee754_sqrt+0xc0>
 8010e30:	431a      	orrs	r2, r3
 8010e32:	d01f      	beq.n	8010e74 <__ieee754_sqrt+0x14c>
 8010e34:	4e2f      	ldr	r6, [pc, #188]	; (8010ef4 <__ieee754_sqrt+0x1cc>)
 8010e36:	4f30      	ldr	r7, [pc, #192]	; (8010ef8 <__ieee754_sqrt+0x1d0>)
 8010e38:	6830      	ldr	r0, [r6, #0]
 8010e3a:	6871      	ldr	r1, [r6, #4]
 8010e3c:	683a      	ldr	r2, [r7, #0]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	9200      	str	r2, [sp, #0]
 8010e42:	9301      	str	r3, [sp, #4]
 8010e44:	6832      	ldr	r2, [r6, #0]
 8010e46:	6873      	ldr	r3, [r6, #4]
 8010e48:	9202      	str	r2, [sp, #8]
 8010e4a:	9303      	str	r3, [sp, #12]
 8010e4c:	9a00      	ldr	r2, [sp, #0]
 8010e4e:	9b01      	ldr	r3, [sp, #4]
 8010e50:	f7f1 fd02 	bl	8002858 <__aeabi_dsub>
 8010e54:	0002      	movs	r2, r0
 8010e56:	000b      	movs	r3, r1
 8010e58:	9802      	ldr	r0, [sp, #8]
 8010e5a:	9903      	ldr	r1, [sp, #12]
 8010e5c:	f7ef fb06 	bl	800046c <__aeabi_dcmple>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	d007      	beq.n	8010e74 <__ieee754_sqrt+0x14c>
 8010e64:	6830      	ldr	r0, [r6, #0]
 8010e66:	6871      	ldr	r1, [r6, #4]
 8010e68:	683a      	ldr	r2, [r7, #0]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	1c67      	adds	r7, r4, #1
 8010e6e:	d127      	bne.n	8010ec0 <__ieee754_sqrt+0x198>
 8010e70:	9c04      	ldr	r4, [sp, #16]
 8010e72:	3501      	adds	r5, #1
 8010e74:	4b21      	ldr	r3, [pc, #132]	; (8010efc <__ieee754_sqrt+0x1d4>)
 8010e76:	1069      	asrs	r1, r5, #1
 8010e78:	18c9      	adds	r1, r1, r3
 8010e7a:	0864      	lsrs	r4, r4, #1
 8010e7c:	07ed      	lsls	r5, r5, #31
 8010e7e:	d502      	bpl.n	8010e86 <__ieee754_sqrt+0x15e>
 8010e80:	2380      	movs	r3, #128	; 0x80
 8010e82:	061b      	lsls	r3, r3, #24
 8010e84:	431c      	orrs	r4, r3
 8010e86:	9b05      	ldr	r3, [sp, #20]
 8010e88:	0025      	movs	r5, r4
 8010e8a:	0518      	lsls	r0, r3, #20
 8010e8c:	1843      	adds	r3, r0, r1
 8010e8e:	001c      	movs	r4, r3
 8010e90:	e763      	b.n	8010d5a <__ieee754_sqrt+0x32>
 8010e92:	0ada      	lsrs	r2, r3, #11
 8010e94:	3815      	subs	r0, #21
 8010e96:	055b      	lsls	r3, r3, #21
 8010e98:	2a00      	cmp	r2, #0
 8010e9a:	d0fa      	beq.n	8010e92 <__ieee754_sqrt+0x16a>
 8010e9c:	2480      	movs	r4, #128	; 0x80
 8010e9e:	0364      	lsls	r4, r4, #13
 8010ea0:	4222      	tst	r2, r4
 8010ea2:	d00a      	beq.n	8010eba <__ieee754_sqrt+0x192>
 8010ea4:	2420      	movs	r4, #32
 8010ea6:	001e      	movs	r6, r3
 8010ea8:	1a64      	subs	r4, r4, r1
 8010eaa:	40e6      	lsrs	r6, r4
 8010eac:	1e4d      	subs	r5, r1, #1
 8010eae:	408b      	lsls	r3, r1
 8010eb0:	4332      	orrs	r2, r6
 8010eb2:	1b41      	subs	r1, r0, r5
 8010eb4:	e76d      	b.n	8010d92 <__ieee754_sqrt+0x6a>
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	e7ee      	b.n	8010e98 <__ieee754_sqrt+0x170>
 8010eba:	0052      	lsls	r2, r2, #1
 8010ebc:	3101      	adds	r1, #1
 8010ebe:	e7ef      	b.n	8010ea0 <__ieee754_sqrt+0x178>
 8010ec0:	f7f0 faae 	bl	8001420 <__aeabi_dadd>
 8010ec4:	6877      	ldr	r7, [r6, #4]
 8010ec6:	6836      	ldr	r6, [r6, #0]
 8010ec8:	0002      	movs	r2, r0
 8010eca:	000b      	movs	r3, r1
 8010ecc:	0030      	movs	r0, r6
 8010ece:	0039      	movs	r1, r7
 8010ed0:	f7ef fac2 	bl	8000458 <__aeabi_dcmplt>
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	d004      	beq.n	8010ee2 <__ieee754_sqrt+0x1ba>
 8010ed8:	3402      	adds	r4, #2
 8010eda:	4263      	negs	r3, r4
 8010edc:	4163      	adcs	r3, r4
 8010ede:	18ed      	adds	r5, r5, r3
 8010ee0:	e7c8      	b.n	8010e74 <__ieee754_sqrt+0x14c>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	3401      	adds	r4, #1
 8010ee6:	439c      	bics	r4, r3
 8010ee8:	e7c4      	b.n	8010e74 <__ieee754_sqrt+0x14c>
 8010eea:	46c0      	nop			; (mov r8, r8)
 8010eec:	7ff00000 	.word	0x7ff00000
 8010ef0:	fffffc01 	.word	0xfffffc01
 8010ef4:	200001f8 	.word	0x200001f8
 8010ef8:	20000200 	.word	0x20000200
 8010efc:	3fe00000 	.word	0x3fe00000

08010f00 <_init>:
 8010f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f02:	46c0      	nop			; (mov r8, r8)
 8010f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f06:	bc08      	pop	{r3}
 8010f08:	469e      	mov	lr, r3
 8010f0a:	4770      	bx	lr

08010f0c <_fini>:
 8010f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f0e:	46c0      	nop			; (mov r8, r8)
 8010f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f12:	bc08      	pop	{r3}
 8010f14:	469e      	mov	lr, r3
 8010f16:	4770      	bx	lr
