
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c84  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001630  08010d48  08010d48  00020d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012378  08012378  000302d0  2**0
                  CONTENTS
  4 .ARM          00000000  08012378  08012378  000302d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012378  08012378  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012378  08012378  00022378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801237c  0801237c  0002237c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  08012380  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057b4  200002d0  08012650  000302d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005a84  08012650  00035a84  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003818b  00000000  00000000  0003033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005bbb  00000000  00000000  000684c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00015194  00000000  00000000  0006e081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cc8  00000000  00000000  00083218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002326  00000000  00000000  00084ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000621f  00000000  00000000  00087206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033003  00000000  00000000  0008d425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000abf30  00000000  00000000  000c0428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000768c  00000000  00000000  0016c358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001739e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002d0 	.word	0x200002d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010d2c 	.word	0x08010d2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002d4 	.word	0x200002d4
 8000104:	08010d2c 	.word	0x08010d2c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fee5 	bl	8002220 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fe35 	bl	80020d0 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fed7 	bl	8002220 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fecd 	bl	8002220 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe5d 	bl	8002154 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fe53 	bl	8002154 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fbc9 	bl	8000c5c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fb55 	bl	8000b84 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbbb 	bl	8000c5c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbb1 	bl	8000c5c <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb61 	bl	8000bd0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fb57 	bl	8000bd0 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_d2uiz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <__aeabi_d2uiz+0x38>)
 8000536:	0004      	movs	r4, r0
 8000538:	000d      	movs	r5, r1
 800053a:	f7ff ffb5 	bl	80004a8 <__aeabi_dcmpge>
 800053e:	2800      	cmp	r0, #0
 8000540:	d104      	bne.n	800054c <__aeabi_d2uiz+0x1c>
 8000542:	0020      	movs	r0, r4
 8000544:	0029      	movs	r1, r5
 8000546:	f002 fd31 	bl	8002fac <__aeabi_d2iz>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <__aeabi_d2uiz+0x38>)
 800054e:	2200      	movs	r2, #0
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f002 f98a 	bl	800286c <__aeabi_dsub>
 8000558:	f002 fd28 	bl	8002fac <__aeabi_d2iz>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	061b      	lsls	r3, r3, #24
 8000560:	469c      	mov	ip, r3
 8000562:	4460      	add	r0, ip
 8000564:	e7f1      	b.n	800054a <__aeabi_d2uiz+0x1a>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	41e00000 	.word	0x41e00000

0800056c <__aeabi_d2lz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	0005      	movs	r5, r0
 8000570:	000c      	movs	r4, r1
 8000572:	2200      	movs	r2, #0
 8000574:	2300      	movs	r3, #0
 8000576:	0028      	movs	r0, r5
 8000578:	0021      	movs	r1, r4
 800057a:	f7ff ff77 	bl	800046c <__aeabi_dcmplt>
 800057e:	2800      	cmp	r0, #0
 8000580:	d108      	bne.n	8000594 <__aeabi_d2lz+0x28>
 8000582:	0028      	movs	r0, r5
 8000584:	0021      	movs	r1, r4
 8000586:	f000 f80f 	bl	80005a8 <__aeabi_d2ulz>
 800058a:	0002      	movs	r2, r0
 800058c:	000b      	movs	r3, r1
 800058e:	0010      	movs	r0, r2
 8000590:	0019      	movs	r1, r3
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	061b      	lsls	r3, r3, #24
 8000598:	18e1      	adds	r1, r4, r3
 800059a:	0028      	movs	r0, r5
 800059c:	f000 f804 	bl	80005a8 <__aeabi_d2ulz>
 80005a0:	2300      	movs	r3, #0
 80005a2:	4242      	negs	r2, r0
 80005a4:	418b      	sbcs	r3, r1
 80005a6:	e7f2      	b.n	800058e <__aeabi_d2lz+0x22>

080005a8 <__aeabi_d2ulz>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	2200      	movs	r2, #0
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <__aeabi_d2ulz+0x34>)
 80005ae:	000d      	movs	r5, r1
 80005b0:	0004      	movs	r4, r0
 80005b2:	f001 fe99 	bl	80022e8 <__aeabi_dmul>
 80005b6:	f7ff ffbb 	bl	8000530 <__aeabi_d2uiz>
 80005ba:	0006      	movs	r6, r0
 80005bc:	f002 fd5c 	bl	8003078 <__aeabi_ui2d>
 80005c0:	2200      	movs	r2, #0
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <__aeabi_d2ulz+0x38>)
 80005c4:	f001 fe90 	bl	80022e8 <__aeabi_dmul>
 80005c8:	0002      	movs	r2, r0
 80005ca:	000b      	movs	r3, r1
 80005cc:	0020      	movs	r0, r4
 80005ce:	0029      	movs	r1, r5
 80005d0:	f002 f94c 	bl	800286c <__aeabi_dsub>
 80005d4:	f7ff ffac 	bl	8000530 <__aeabi_d2uiz>
 80005d8:	0031      	movs	r1, r6
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	3df00000 	.word	0x3df00000
 80005e0:	41f00000 	.word	0x41f00000

080005e4 <__aeabi_l2d>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	0006      	movs	r6, r0
 80005e8:	0008      	movs	r0, r1
 80005ea:	f002 fd15 	bl	8003018 <__aeabi_i2d>
 80005ee:	2200      	movs	r2, #0
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <__aeabi_l2d+0x28>)
 80005f2:	f001 fe79 	bl	80022e8 <__aeabi_dmul>
 80005f6:	000d      	movs	r5, r1
 80005f8:	0004      	movs	r4, r0
 80005fa:	0030      	movs	r0, r6
 80005fc:	f002 fd3c 	bl	8003078 <__aeabi_ui2d>
 8000600:	002b      	movs	r3, r5
 8000602:	0022      	movs	r2, r4
 8000604:	f000 ff16 	bl	8001434 <__aeabi_dadd>
 8000608:	bd70      	pop	{r4, r5, r6, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	41f00000 	.word	0x41f00000

08000610 <__aeabi_fadd>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	4647      	mov	r7, r8
 8000614:	46ce      	mov	lr, r9
 8000616:	024a      	lsls	r2, r1, #9
 8000618:	0243      	lsls	r3, r0, #9
 800061a:	0045      	lsls	r5, r0, #1
 800061c:	0fc4      	lsrs	r4, r0, #31
 800061e:	0a50      	lsrs	r0, r2, #9
 8000620:	4680      	mov	r8, r0
 8000622:	0048      	lsls	r0, r1, #1
 8000624:	0a5b      	lsrs	r3, r3, #9
 8000626:	0e00      	lsrs	r0, r0, #24
 8000628:	0992      	lsrs	r2, r2, #6
 800062a:	4694      	mov	ip, r2
 800062c:	b580      	push	{r7, lr}
 800062e:	001e      	movs	r6, r3
 8000630:	4681      	mov	r9, r0
 8000632:	0002      	movs	r2, r0
 8000634:	0e2d      	lsrs	r5, r5, #24
 8000636:	00df      	lsls	r7, r3, #3
 8000638:	0fc9      	lsrs	r1, r1, #31
 800063a:	428c      	cmp	r4, r1
 800063c:	d024      	beq.n	8000688 <__aeabi_fadd+0x78>
 800063e:	1a28      	subs	r0, r5, r0
 8000640:	2800      	cmp	r0, #0
 8000642:	dd0e      	ble.n	8000662 <__aeabi_fadd+0x52>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d13e      	bne.n	80006c6 <__aeabi_fadd+0xb6>
 8000648:	4662      	mov	r2, ip
 800064a:	2a00      	cmp	r2, #0
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x40>
 800064e:	e0fd      	b.n	800084c <__aeabi_fadd+0x23c>
 8000650:	1e42      	subs	r2, r0, #1
 8000652:	2801      	cmp	r0, #1
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x48>
 8000656:	e137      	b.n	80008c8 <__aeabi_fadd+0x2b8>
 8000658:	28ff      	cmp	r0, #255	; 0xff
 800065a:	d100      	bne.n	800065e <__aeabi_fadd+0x4e>
 800065c:	e0a9      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 800065e:	0010      	movs	r0, r2
 8000660:	e039      	b.n	80006d6 <__aeabi_fadd+0xc6>
 8000662:	2800      	cmp	r0, #0
 8000664:	d063      	beq.n	800072e <__aeabi_fadd+0x11e>
 8000666:	464b      	mov	r3, r9
 8000668:	1b52      	subs	r2, r2, r5
 800066a:	2d00      	cmp	r5, #0
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x60>
 800066e:	e0e0      	b.n	8000832 <__aeabi_fadd+0x222>
 8000670:	2f00      	cmp	r7, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x66>
 8000674:	e0ce      	b.n	8000814 <__aeabi_fadd+0x204>
 8000676:	1e53      	subs	r3, r2, #1
 8000678:	2a01      	cmp	r2, #1
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0x6e>
 800067c:	e155      	b.n	800092a <__aeabi_fadd+0x31a>
 800067e:	2aff      	cmp	r2, #255	; 0xff
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x74>
 8000682:	e094      	b.n	80007ae <__aeabi_fadd+0x19e>
 8000684:	001a      	movs	r2, r3
 8000686:	e0d9      	b.n	800083c <__aeabi_fadd+0x22c>
 8000688:	1a2a      	subs	r2, r5, r0
 800068a:	2a00      	cmp	r2, #0
 800068c:	dc00      	bgt.n	8000690 <__aeabi_fadd+0x80>
 800068e:	e099      	b.n	80007c4 <__aeabi_fadd+0x1b4>
 8000690:	2800      	cmp	r0, #0
 8000692:	d062      	beq.n	800075a <__aeabi_fadd+0x14a>
 8000694:	2dff      	cmp	r5, #255	; 0xff
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x8a>
 8000698:	e08b      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	4661      	mov	r1, ip
 800069e:	04db      	lsls	r3, r3, #19
 80006a0:	4319      	orrs	r1, r3
 80006a2:	468c      	mov	ip, r1
 80006a4:	2a1b      	cmp	r2, #27
 80006a6:	dc00      	bgt.n	80006aa <__aeabi_fadd+0x9a>
 80006a8:	e0d2      	b.n	8000850 <__aeabi_fadd+0x240>
 80006aa:	2301      	movs	r3, #1
 80006ac:	19db      	adds	r3, r3, r7
 80006ae:	015a      	lsls	r2, r3, #5
 80006b0:	d56a      	bpl.n	8000788 <__aeabi_fadd+0x178>
 80006b2:	3501      	adds	r5, #1
 80006b4:	2dff      	cmp	r5, #255	; 0xff
 80006b6:	d05b      	beq.n	8000770 <__aeabi_fadd+0x160>
 80006b8:	2201      	movs	r2, #1
 80006ba:	49a3      	ldr	r1, [pc, #652]	; (8000948 <__aeabi_fadd+0x338>)
 80006bc:	401a      	ands	r2, r3
 80006be:	085b      	lsrs	r3, r3, #1
 80006c0:	400b      	ands	r3, r1
 80006c2:	4313      	orrs	r3, r2
 80006c4:	e01c      	b.n	8000700 <__aeabi_fadd+0xf0>
 80006c6:	2dff      	cmp	r5, #255	; 0xff
 80006c8:	d100      	bne.n	80006cc <__aeabi_fadd+0xbc>
 80006ca:	e072      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	4662      	mov	r2, ip
 80006d0:	04db      	lsls	r3, r3, #19
 80006d2:	431a      	orrs	r2, r3
 80006d4:	4694      	mov	ip, r2
 80006d6:	281b      	cmp	r0, #27
 80006d8:	dc00      	bgt.n	80006dc <__aeabi_fadd+0xcc>
 80006da:	e090      	b.n	80007fe <__aeabi_fadd+0x1ee>
 80006dc:	2301      	movs	r3, #1
 80006de:	1afb      	subs	r3, r7, r3
 80006e0:	015a      	lsls	r2, r3, #5
 80006e2:	d551      	bpl.n	8000788 <__aeabi_fadd+0x178>
 80006e4:	019b      	lsls	r3, r3, #6
 80006e6:	099e      	lsrs	r6, r3, #6
 80006e8:	0030      	movs	r0, r6
 80006ea:	f002 fdb9 	bl	8003260 <__clzsi2>
 80006ee:	0033      	movs	r3, r6
 80006f0:	3805      	subs	r0, #5
 80006f2:	4083      	lsls	r3, r0
 80006f4:	4285      	cmp	r5, r0
 80006f6:	dc00      	bgt.n	80006fa <__aeabi_fadd+0xea>
 80006f8:	e075      	b.n	80007e6 <__aeabi_fadd+0x1d6>
 80006fa:	4a94      	ldr	r2, [pc, #592]	; (800094c <__aeabi_fadd+0x33c>)
 80006fc:	1a2d      	subs	r5, r5, r0
 80006fe:	4013      	ands	r3, r2
 8000700:	075a      	lsls	r2, r3, #29
 8000702:	d004      	beq.n	800070e <__aeabi_fadd+0xfe>
 8000704:	220f      	movs	r2, #15
 8000706:	401a      	ands	r2, r3
 8000708:	2a04      	cmp	r2, #4
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xfe>
 800070c:	3304      	adds	r3, #4
 800070e:	015a      	lsls	r2, r3, #5
 8000710:	d53c      	bpl.n	800078c <__aeabi_fadd+0x17c>
 8000712:	1c68      	adds	r0, r5, #1
 8000714:	2dfe      	cmp	r5, #254	; 0xfe
 8000716:	d02b      	beq.n	8000770 <__aeabi_fadd+0x160>
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	0a5e      	lsrs	r6, r3, #9
 800071c:	b2c0      	uxtb	r0, r0
 800071e:	05c0      	lsls	r0, r0, #23
 8000720:	4330      	orrs	r0, r6
 8000722:	07e4      	lsls	r4, r4, #31
 8000724:	4320      	orrs	r0, r4
 8000726:	bcc0      	pop	{r6, r7}
 8000728:	46b9      	mov	r9, r7
 800072a:	46b0      	mov	r8, r6
 800072c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800072e:	20fe      	movs	r0, #254	; 0xfe
 8000730:	1c6a      	adds	r2, r5, #1
 8000732:	4210      	tst	r0, r2
 8000734:	d172      	bne.n	800081c <__aeabi_fadd+0x20c>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d000      	beq.n	800073c <__aeabi_fadd+0x12c>
 800073a:	e0ae      	b.n	800089a <__aeabi_fadd+0x28a>
 800073c:	2f00      	cmp	r7, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x132>
 8000740:	e0ec      	b.n	800091c <__aeabi_fadd+0x30c>
 8000742:	4663      	mov	r3, ip
 8000744:	2000      	movs	r0, #0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0e9      	beq.n	800071e <__aeabi_fadd+0x10e>
 800074a:	1afb      	subs	r3, r7, r3
 800074c:	015a      	lsls	r2, r3, #5
 800074e:	d400      	bmi.n	8000752 <__aeabi_fadd+0x142>
 8000750:	e0f3      	b.n	800093a <__aeabi_fadd+0x32a>
 8000752:	4663      	mov	r3, ip
 8000754:	000c      	movs	r4, r1
 8000756:	1bdb      	subs	r3, r3, r7
 8000758:	e7d2      	b.n	8000700 <__aeabi_fadd+0xf0>
 800075a:	4661      	mov	r1, ip
 800075c:	2900      	cmp	r1, #0
 800075e:	d05b      	beq.n	8000818 <__aeabi_fadd+0x208>
 8000760:	1e51      	subs	r1, r2, #1
 8000762:	2a01      	cmp	r2, #1
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x158>
 8000766:	e0a7      	b.n	80008b8 <__aeabi_fadd+0x2a8>
 8000768:	2aff      	cmp	r2, #255	; 0xff
 800076a:	d022      	beq.n	80007b2 <__aeabi_fadd+0x1a2>
 800076c:	000a      	movs	r2, r1
 800076e:	e799      	b.n	80006a4 <__aeabi_fadd+0x94>
 8000770:	20ff      	movs	r0, #255	; 0xff
 8000772:	2600      	movs	r6, #0
 8000774:	e7d3      	b.n	800071e <__aeabi_fadd+0x10e>
 8000776:	21fe      	movs	r1, #254	; 0xfe
 8000778:	1c6a      	adds	r2, r5, #1
 800077a:	4211      	tst	r1, r2
 800077c:	d073      	beq.n	8000866 <__aeabi_fadd+0x256>
 800077e:	2aff      	cmp	r2, #255	; 0xff
 8000780:	d0f6      	beq.n	8000770 <__aeabi_fadd+0x160>
 8000782:	0015      	movs	r5, r2
 8000784:	4467      	add	r7, ip
 8000786:	087b      	lsrs	r3, r7, #1
 8000788:	075a      	lsls	r2, r3, #29
 800078a:	d1bb      	bne.n	8000704 <__aeabi_fadd+0xf4>
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	2dff      	cmp	r5, #255	; 0xff
 8000790:	d00f      	beq.n	80007b2 <__aeabi_fadd+0x1a2>
 8000792:	025b      	lsls	r3, r3, #9
 8000794:	0a5e      	lsrs	r6, r3, #9
 8000796:	b2e8      	uxtb	r0, r5
 8000798:	e7c1      	b.n	800071e <__aeabi_fadd+0x10e>
 800079a:	4662      	mov	r2, ip
 800079c:	2a00      	cmp	r2, #0
 800079e:	d008      	beq.n	80007b2 <__aeabi_fadd+0x1a2>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	03d2      	lsls	r2, r2, #15
 80007a4:	4213      	tst	r3, r2
 80007a6:	d004      	beq.n	80007b2 <__aeabi_fadd+0x1a2>
 80007a8:	4640      	mov	r0, r8
 80007aa:	4210      	tst	r0, r2
 80007ac:	d101      	bne.n	80007b2 <__aeabi_fadd+0x1a2>
 80007ae:	000c      	movs	r4, r1
 80007b0:	4643      	mov	r3, r8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0dc      	beq.n	8000770 <__aeabi_fadd+0x160>
 80007b6:	2680      	movs	r6, #128	; 0x80
 80007b8:	03f6      	lsls	r6, r6, #15
 80007ba:	431e      	orrs	r6, r3
 80007bc:	0276      	lsls	r6, r6, #9
 80007be:	20ff      	movs	r0, #255	; 0xff
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	e7ac      	b.n	800071e <__aeabi_fadd+0x10e>
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	d0d6      	beq.n	8000776 <__aeabi_fadd+0x166>
 80007c8:	1b42      	subs	r2, r0, r5
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d05c      	beq.n	8000888 <__aeabi_fadd+0x278>
 80007ce:	28ff      	cmp	r0, #255	; 0xff
 80007d0:	d0ee      	beq.n	80007b0 <__aeabi_fadd+0x1a0>
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	04db      	lsls	r3, r3, #19
 80007d6:	431f      	orrs	r7, r3
 80007d8:	2a1b      	cmp	r2, #27
 80007da:	dc00      	bgt.n	80007de <__aeabi_fadd+0x1ce>
 80007dc:	e082      	b.n	80008e4 <__aeabi_fadd+0x2d4>
 80007de:	2301      	movs	r3, #1
 80007e0:	464d      	mov	r5, r9
 80007e2:	4463      	add	r3, ip
 80007e4:	e763      	b.n	80006ae <__aeabi_fadd+0x9e>
 80007e6:	2220      	movs	r2, #32
 80007e8:	1b40      	subs	r0, r0, r5
 80007ea:	3001      	adds	r0, #1
 80007ec:	1a12      	subs	r2, r2, r0
 80007ee:	0019      	movs	r1, r3
 80007f0:	4093      	lsls	r3, r2
 80007f2:	40c1      	lsrs	r1, r0
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	4193      	sbcs	r3, r2
 80007f8:	2500      	movs	r5, #0
 80007fa:	430b      	orrs	r3, r1
 80007fc:	e780      	b.n	8000700 <__aeabi_fadd+0xf0>
 80007fe:	2320      	movs	r3, #32
 8000800:	4661      	mov	r1, ip
 8000802:	1a1b      	subs	r3, r3, r0
 8000804:	4099      	lsls	r1, r3
 8000806:	4662      	mov	r2, ip
 8000808:	000b      	movs	r3, r1
 800080a:	40c2      	lsrs	r2, r0
 800080c:	1e59      	subs	r1, r3, #1
 800080e:	418b      	sbcs	r3, r1
 8000810:	4313      	orrs	r3, r2
 8000812:	e764      	b.n	80006de <__aeabi_fadd+0xce>
 8000814:	000c      	movs	r4, r1
 8000816:	4643      	mov	r3, r8
 8000818:	0015      	movs	r5, r2
 800081a:	e7b8      	b.n	800078e <__aeabi_fadd+0x17e>
 800081c:	4663      	mov	r3, ip
 800081e:	1afe      	subs	r6, r7, r3
 8000820:	0173      	lsls	r3, r6, #5
 8000822:	d445      	bmi.n	80008b0 <__aeabi_fadd+0x2a0>
 8000824:	2e00      	cmp	r6, #0
 8000826:	d000      	beq.n	800082a <__aeabi_fadd+0x21a>
 8000828:	e75e      	b.n	80006e8 <__aeabi_fadd+0xd8>
 800082a:	2400      	movs	r4, #0
 800082c:	2000      	movs	r0, #0
 800082e:	2600      	movs	r6, #0
 8000830:	e775      	b.n	800071e <__aeabi_fadd+0x10e>
 8000832:	2bff      	cmp	r3, #255	; 0xff
 8000834:	d0bb      	beq.n	80007ae <__aeabi_fadd+0x19e>
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	04db      	lsls	r3, r3, #19
 800083a:	431f      	orrs	r7, r3
 800083c:	2a1b      	cmp	r2, #27
 800083e:	dd47      	ble.n	80008d0 <__aeabi_fadd+0x2c0>
 8000840:	2301      	movs	r3, #1
 8000842:	4662      	mov	r2, ip
 8000844:	000c      	movs	r4, r1
 8000846:	464d      	mov	r5, r9
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	e749      	b.n	80006e0 <__aeabi_fadd+0xd0>
 800084c:	0005      	movs	r5, r0
 800084e:	e79e      	b.n	800078e <__aeabi_fadd+0x17e>
 8000850:	4661      	mov	r1, ip
 8000852:	2320      	movs	r3, #32
 8000854:	40d1      	lsrs	r1, r2
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	4662      	mov	r2, ip
 800085a:	409a      	lsls	r2, r3
 800085c:	0013      	movs	r3, r2
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	4193      	sbcs	r3, r2
 8000862:	430b      	orrs	r3, r1
 8000864:	e722      	b.n	80006ac <__aeabi_fadd+0x9c>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d146      	bne.n	80008f8 <__aeabi_fadd+0x2e8>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d062      	beq.n	8000934 <__aeabi_fadd+0x324>
 800086e:	4663      	mov	r3, ip
 8000870:	2000      	movs	r0, #0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x268>
 8000876:	e752      	b.n	800071e <__aeabi_fadd+0x10e>
 8000878:	003b      	movs	r3, r7
 800087a:	4463      	add	r3, ip
 800087c:	015a      	lsls	r2, r3, #5
 800087e:	d583      	bpl.n	8000788 <__aeabi_fadd+0x178>
 8000880:	4a32      	ldr	r2, [pc, #200]	; (800094c <__aeabi_fadd+0x33c>)
 8000882:	3501      	adds	r5, #1
 8000884:	4013      	ands	r3, r2
 8000886:	e77f      	b.n	8000788 <__aeabi_fadd+0x178>
 8000888:	2f00      	cmp	r7, #0
 800088a:	d0c4      	beq.n	8000816 <__aeabi_fadd+0x206>
 800088c:	1e53      	subs	r3, r2, #1
 800088e:	2a01      	cmp	r2, #1
 8000890:	d012      	beq.n	80008b8 <__aeabi_fadd+0x2a8>
 8000892:	2aff      	cmp	r2, #255	; 0xff
 8000894:	d08c      	beq.n	80007b0 <__aeabi_fadd+0x1a0>
 8000896:	001a      	movs	r2, r3
 8000898:	e79e      	b.n	80007d8 <__aeabi_fadd+0x1c8>
 800089a:	2f00      	cmp	r7, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x290>
 800089e:	e77c      	b.n	800079a <__aeabi_fadd+0x18a>
 80008a0:	4663      	mov	r3, ip
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d183      	bne.n	80007ae <__aeabi_fadd+0x19e>
 80008a6:	2680      	movs	r6, #128	; 0x80
 80008a8:	2400      	movs	r4, #0
 80008aa:	20ff      	movs	r0, #255	; 0xff
 80008ac:	03f6      	lsls	r6, r6, #15
 80008ae:	e736      	b.n	800071e <__aeabi_fadd+0x10e>
 80008b0:	4663      	mov	r3, ip
 80008b2:	000c      	movs	r4, r1
 80008b4:	1bde      	subs	r6, r3, r7
 80008b6:	e717      	b.n	80006e8 <__aeabi_fadd+0xd8>
 80008b8:	003b      	movs	r3, r7
 80008ba:	4463      	add	r3, ip
 80008bc:	2501      	movs	r5, #1
 80008be:	015a      	lsls	r2, r3, #5
 80008c0:	d400      	bmi.n	80008c4 <__aeabi_fadd+0x2b4>
 80008c2:	e761      	b.n	8000788 <__aeabi_fadd+0x178>
 80008c4:	2502      	movs	r5, #2
 80008c6:	e6f7      	b.n	80006b8 <__aeabi_fadd+0xa8>
 80008c8:	4663      	mov	r3, ip
 80008ca:	2501      	movs	r5, #1
 80008cc:	1afb      	subs	r3, r7, r3
 80008ce:	e707      	b.n	80006e0 <__aeabi_fadd+0xd0>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0038      	movs	r0, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d0      	lsrs	r0, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	4303      	orrs	r3, r0
 80008e2:	e7ae      	b.n	8000842 <__aeabi_fadd+0x232>
 80008e4:	2320      	movs	r3, #32
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	0039      	movs	r1, r7
 80008ea:	409f      	lsls	r7, r3
 80008ec:	003b      	movs	r3, r7
 80008ee:	40d1      	lsrs	r1, r2
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	4193      	sbcs	r3, r2
 80008f4:	430b      	orrs	r3, r1
 80008f6:	e773      	b.n	80007e0 <__aeabi_fadd+0x1d0>
 80008f8:	2f00      	cmp	r7, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2ee>
 80008fc:	e758      	b.n	80007b0 <__aeabi_fadd+0x1a0>
 80008fe:	4662      	mov	r2, ip
 8000900:	2a00      	cmp	r2, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x2f6>
 8000904:	e755      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	4213      	tst	r3, r2
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x300>
 800090e:	e750      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 8000910:	4641      	mov	r1, r8
 8000912:	4211      	tst	r1, r2
 8000914:	d000      	beq.n	8000918 <__aeabi_fadd+0x308>
 8000916:	e74c      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 8000918:	4643      	mov	r3, r8
 800091a:	e74a      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 800091c:	4663      	mov	r3, ip
 800091e:	2b00      	cmp	r3, #0
 8000920:	d083      	beq.n	800082a <__aeabi_fadd+0x21a>
 8000922:	000c      	movs	r4, r1
 8000924:	4646      	mov	r6, r8
 8000926:	2000      	movs	r0, #0
 8000928:	e6f9      	b.n	800071e <__aeabi_fadd+0x10e>
 800092a:	4663      	mov	r3, ip
 800092c:	000c      	movs	r4, r1
 800092e:	1bdb      	subs	r3, r3, r7
 8000930:	3501      	adds	r5, #1
 8000932:	e6d5      	b.n	80006e0 <__aeabi_fadd+0xd0>
 8000934:	4646      	mov	r6, r8
 8000936:	2000      	movs	r0, #0
 8000938:	e6f1      	b.n	800071e <__aeabi_fadd+0x10e>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x330>
 800093e:	e723      	b.n	8000788 <__aeabi_fadd+0x178>
 8000940:	2400      	movs	r4, #0
 8000942:	2600      	movs	r6, #0
 8000944:	e6eb      	b.n	800071e <__aeabi_fadd+0x10e>
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	7dffffff 	.word	0x7dffffff
 800094c:	fbffffff 	.word	0xfbffffff

08000950 <__aeabi_fdiv>:
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	464f      	mov	r7, r9
 8000954:	4646      	mov	r6, r8
 8000956:	46d6      	mov	lr, sl
 8000958:	0245      	lsls	r5, r0, #9
 800095a:	b5c0      	push	{r6, r7, lr}
 800095c:	0047      	lsls	r7, r0, #1
 800095e:	1c0c      	adds	r4, r1, #0
 8000960:	0a6d      	lsrs	r5, r5, #9
 8000962:	0e3f      	lsrs	r7, r7, #24
 8000964:	0fc6      	lsrs	r6, r0, #31
 8000966:	2f00      	cmp	r7, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fdiv+0x1c>
 800096a:	e06f      	b.n	8000a4c <__aeabi_fdiv+0xfc>
 800096c:	2fff      	cmp	r7, #255	; 0xff
 800096e:	d100      	bne.n	8000972 <__aeabi_fdiv+0x22>
 8000970:	e074      	b.n	8000a5c <__aeabi_fdiv+0x10c>
 8000972:	2300      	movs	r3, #0
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	4699      	mov	r9, r3
 8000978:	469a      	mov	sl, r3
 800097a:	00ed      	lsls	r5, r5, #3
 800097c:	04d2      	lsls	r2, r2, #19
 800097e:	4315      	orrs	r5, r2
 8000980:	3f7f      	subs	r7, #127	; 0x7f
 8000982:	0263      	lsls	r3, r4, #9
 8000984:	0a5b      	lsrs	r3, r3, #9
 8000986:	4698      	mov	r8, r3
 8000988:	0063      	lsls	r3, r4, #1
 800098a:	0e1b      	lsrs	r3, r3, #24
 800098c:	0fe4      	lsrs	r4, r4, #31
 800098e:	2b00      	cmp	r3, #0
 8000990:	d04d      	beq.n	8000a2e <__aeabi_fdiv+0xde>
 8000992:	2bff      	cmp	r3, #255	; 0xff
 8000994:	d045      	beq.n	8000a22 <__aeabi_fdiv+0xd2>
 8000996:	4642      	mov	r2, r8
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	00d2      	lsls	r2, r2, #3
 800099c:	04c9      	lsls	r1, r1, #19
 800099e:	4311      	orrs	r1, r2
 80009a0:	4688      	mov	r8, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	3b7f      	subs	r3, #127	; 0x7f
 80009a6:	0031      	movs	r1, r6
 80009a8:	1aff      	subs	r7, r7, r3
 80009aa:	464b      	mov	r3, r9
 80009ac:	4061      	eors	r1, r4
 80009ae:	b2c9      	uxtb	r1, r1
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d900      	bls.n	80009b6 <__aeabi_fdiv+0x66>
 80009b4:	e0b8      	b.n	8000b28 <__aeabi_fdiv+0x1d8>
 80009b6:	4870      	ldr	r0, [pc, #448]	; (8000b78 <__aeabi_fdiv+0x228>)
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	58c3      	ldr	r3, [r0, r3]
 80009bc:	469f      	mov	pc, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	4698      	mov	r8, r3
 80009c2:	0026      	movs	r6, r4
 80009c4:	4645      	mov	r5, r8
 80009c6:	4692      	mov	sl, r2
 80009c8:	4653      	mov	r3, sl
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fdiv+0x80>
 80009ce:	e08d      	b.n	8000aec <__aeabi_fdiv+0x19c>
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fdiv+0x86>
 80009d4:	e0a1      	b.n	8000b1a <__aeabi_fdiv+0x1ca>
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d018      	beq.n	8000a0c <__aeabi_fdiv+0xbc>
 80009da:	003b      	movs	r3, r7
 80009dc:	337f      	adds	r3, #127	; 0x7f
 80009de:	2b00      	cmp	r3, #0
 80009e0:	dd6d      	ble.n	8000abe <__aeabi_fdiv+0x16e>
 80009e2:	076a      	lsls	r2, r5, #29
 80009e4:	d004      	beq.n	80009f0 <__aeabi_fdiv+0xa0>
 80009e6:	220f      	movs	r2, #15
 80009e8:	402a      	ands	r2, r5
 80009ea:	2a04      	cmp	r2, #4
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fdiv+0xa0>
 80009ee:	3504      	adds	r5, #4
 80009f0:	012a      	lsls	r2, r5, #4
 80009f2:	d503      	bpl.n	80009fc <__aeabi_fdiv+0xac>
 80009f4:	4b61      	ldr	r3, [pc, #388]	; (8000b7c <__aeabi_fdiv+0x22c>)
 80009f6:	401d      	ands	r5, r3
 80009f8:	003b      	movs	r3, r7
 80009fa:	3380      	adds	r3, #128	; 0x80
 80009fc:	2bfe      	cmp	r3, #254	; 0xfe
 80009fe:	dd00      	ble.n	8000a02 <__aeabi_fdiv+0xb2>
 8000a00:	e074      	b.n	8000aec <__aeabi_fdiv+0x19c>
 8000a02:	01aa      	lsls	r2, r5, #6
 8000a04:	0a52      	lsrs	r2, r2, #9
 8000a06:	b2d8      	uxtb	r0, r3
 8000a08:	e002      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	2200      	movs	r2, #0
 8000a10:	05c0      	lsls	r0, r0, #23
 8000a12:	07f6      	lsls	r6, r6, #31
 8000a14:	4310      	orrs	r0, r2
 8000a16:	4330      	orrs	r0, r6
 8000a18:	bce0      	pop	{r5, r6, r7}
 8000a1a:	46ba      	mov	sl, r7
 8000a1c:	46b1      	mov	r9, r6
 8000a1e:	46a8      	mov	r8, r5
 8000a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a22:	4643      	mov	r3, r8
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d13f      	bne.n	8000aa8 <__aeabi_fdiv+0x158>
 8000a28:	2202      	movs	r2, #2
 8000a2a:	3fff      	subs	r7, #255	; 0xff
 8000a2c:	e003      	b.n	8000a36 <__aeabi_fdiv+0xe6>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12d      	bne.n	8000a90 <__aeabi_fdiv+0x140>
 8000a34:	2201      	movs	r2, #1
 8000a36:	0031      	movs	r1, r6
 8000a38:	464b      	mov	r3, r9
 8000a3a:	4061      	eors	r1, r4
 8000a3c:	b2c9      	uxtb	r1, r1
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d838      	bhi.n	8000ab6 <__aeabi_fdiv+0x166>
 8000a44:	484e      	ldr	r0, [pc, #312]	; (8000b80 <__aeabi_fdiv+0x230>)
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	58c3      	ldr	r3, [r0, r3]
 8000a4a:	469f      	mov	pc, r3
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d113      	bne.n	8000a78 <__aeabi_fdiv+0x128>
 8000a50:	2304      	movs	r3, #4
 8000a52:	4699      	mov	r9, r3
 8000a54:	3b03      	subs	r3, #3
 8000a56:	2700      	movs	r7, #0
 8000a58:	469a      	mov	sl, r3
 8000a5a:	e792      	b.n	8000982 <__aeabi_fdiv+0x32>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_fdiv+0x11c>
 8000a60:	2308      	movs	r3, #8
 8000a62:	4699      	mov	r9, r3
 8000a64:	3b06      	subs	r3, #6
 8000a66:	27ff      	movs	r7, #255	; 0xff
 8000a68:	469a      	mov	sl, r3
 8000a6a:	e78a      	b.n	8000982 <__aeabi_fdiv+0x32>
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	4699      	mov	r9, r3
 8000a70:	3b09      	subs	r3, #9
 8000a72:	27ff      	movs	r7, #255	; 0xff
 8000a74:	469a      	mov	sl, r3
 8000a76:	e784      	b.n	8000982 <__aeabi_fdiv+0x32>
 8000a78:	0028      	movs	r0, r5
 8000a7a:	f002 fbf1 	bl	8003260 <__clzsi2>
 8000a7e:	2776      	movs	r7, #118	; 0x76
 8000a80:	1f43      	subs	r3, r0, #5
 8000a82:	409d      	lsls	r5, r3
 8000a84:	2300      	movs	r3, #0
 8000a86:	427f      	negs	r7, r7
 8000a88:	4699      	mov	r9, r3
 8000a8a:	469a      	mov	sl, r3
 8000a8c:	1a3f      	subs	r7, r7, r0
 8000a8e:	e778      	b.n	8000982 <__aeabi_fdiv+0x32>
 8000a90:	4640      	mov	r0, r8
 8000a92:	f002 fbe5 	bl	8003260 <__clzsi2>
 8000a96:	4642      	mov	r2, r8
 8000a98:	1f43      	subs	r3, r0, #5
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	2376      	movs	r3, #118	; 0x76
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	4690      	mov	r8, r2
 8000aa2:	1a1b      	subs	r3, r3, r0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	e77e      	b.n	80009a6 <__aeabi_fdiv+0x56>
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	464a      	mov	r2, r9
 8000aac:	431a      	orrs	r2, r3
 8000aae:	4691      	mov	r9, r2
 8000ab0:	33fc      	adds	r3, #252	; 0xfc
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	e777      	b.n	80009a6 <__aeabi_fdiv+0x56>
 8000ab6:	000e      	movs	r6, r1
 8000ab8:	20ff      	movs	r0, #255	; 0xff
 8000aba:	2200      	movs	r2, #0
 8000abc:	e7a8      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000abe:	2201      	movs	r2, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b1b      	cmp	r3, #27
 8000ac4:	dca2      	bgt.n	8000a0c <__aeabi_fdiv+0xbc>
 8000ac6:	379e      	adds	r7, #158	; 0x9e
 8000ac8:	002a      	movs	r2, r5
 8000aca:	40bd      	lsls	r5, r7
 8000acc:	40da      	lsrs	r2, r3
 8000ace:	1e6b      	subs	r3, r5, #1
 8000ad0:	419d      	sbcs	r5, r3
 8000ad2:	4315      	orrs	r5, r2
 8000ad4:	076a      	lsls	r2, r5, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fdiv+0x192>
 8000ad8:	220f      	movs	r2, #15
 8000ada:	402a      	ands	r2, r5
 8000adc:	2a04      	cmp	r2, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fdiv+0x192>
 8000ae0:	3504      	adds	r5, #4
 8000ae2:	016a      	lsls	r2, r5, #5
 8000ae4:	d544      	bpl.n	8000b70 <__aeabi_fdiv+0x220>
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	e791      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000aec:	20ff      	movs	r0, #255	; 0xff
 8000aee:	2200      	movs	r2, #0
 8000af0:	e78e      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	2600      	movs	r6, #0
 8000af6:	20ff      	movs	r0, #255	; 0xff
 8000af8:	03d2      	lsls	r2, r2, #15
 8000afa:	e789      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000afc:	2300      	movs	r3, #0
 8000afe:	4698      	mov	r8, r3
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	03d2      	lsls	r2, r2, #15
 8000b04:	4215      	tst	r5, r2
 8000b06:	d008      	beq.n	8000b1a <__aeabi_fdiv+0x1ca>
 8000b08:	4643      	mov	r3, r8
 8000b0a:	4213      	tst	r3, r2
 8000b0c:	d105      	bne.n	8000b1a <__aeabi_fdiv+0x1ca>
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	0252      	lsls	r2, r2, #9
 8000b12:	0026      	movs	r6, r4
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	0a52      	lsrs	r2, r2, #9
 8000b18:	e77a      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	03d2      	lsls	r2, r2, #15
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	0252      	lsls	r2, r2, #9
 8000b22:	20ff      	movs	r0, #255	; 0xff
 8000b24:	0a52      	lsrs	r2, r2, #9
 8000b26:	e773      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000b28:	4642      	mov	r2, r8
 8000b2a:	016b      	lsls	r3, r5, #5
 8000b2c:	0155      	lsls	r5, r2, #5
 8000b2e:	42ab      	cmp	r3, r5
 8000b30:	d21a      	bcs.n	8000b68 <__aeabi_fdiv+0x218>
 8000b32:	201b      	movs	r0, #27
 8000b34:	2200      	movs	r2, #0
 8000b36:	3f01      	subs	r7, #1
 8000b38:	2601      	movs	r6, #1
 8000b3a:	001c      	movs	r4, r3
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	db01      	blt.n	8000b48 <__aeabi_fdiv+0x1f8>
 8000b44:	429d      	cmp	r5, r3
 8000b46:	d801      	bhi.n	8000b4c <__aeabi_fdiv+0x1fc>
 8000b48:	1b5b      	subs	r3, r3, r5
 8000b4a:	4332      	orrs	r2, r6
 8000b4c:	3801      	subs	r0, #1
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	d1f3      	bne.n	8000b3a <__aeabi_fdiv+0x1ea>
 8000b52:	1e58      	subs	r0, r3, #1
 8000b54:	4183      	sbcs	r3, r0
 8000b56:	4313      	orrs	r3, r2
 8000b58:	001d      	movs	r5, r3
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	337f      	adds	r3, #127	; 0x7f
 8000b5e:	000e      	movs	r6, r1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dd00      	ble.n	8000b66 <__aeabi_fdiv+0x216>
 8000b64:	e73d      	b.n	80009e2 <__aeabi_fdiv+0x92>
 8000b66:	e7aa      	b.n	8000abe <__aeabi_fdiv+0x16e>
 8000b68:	201a      	movs	r0, #26
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	1b5b      	subs	r3, r3, r5
 8000b6e:	e7e3      	b.n	8000b38 <__aeabi_fdiv+0x1e8>
 8000b70:	01aa      	lsls	r2, r5, #6
 8000b72:	2000      	movs	r0, #0
 8000b74:	0a52      	lsrs	r2, r2, #9
 8000b76:	e74b      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000b78:	08010e00 	.word	0x08010e00
 8000b7c:	f7ffffff 	.word	0xf7ffffff
 8000b80:	08010e40 	.word	0x08010e40

08000b84 <__eqsf2>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	0042      	lsls	r2, r0, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	024e      	lsls	r6, r1, #9
 8000b8c:	004c      	lsls	r4, r1, #1
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	2001      	movs	r0, #1
 8000b94:	0e12      	lsrs	r2, r2, #24
 8000b96:	0a76      	lsrs	r6, r6, #9
 8000b98:	0e24      	lsrs	r4, r4, #24
 8000b9a:	0fc9      	lsrs	r1, r1, #31
 8000b9c:	2aff      	cmp	r2, #255	; 0xff
 8000b9e:	d006      	beq.n	8000bae <__eqsf2+0x2a>
 8000ba0:	2cff      	cmp	r4, #255	; 0xff
 8000ba2:	d003      	beq.n	8000bac <__eqsf2+0x28>
 8000ba4:	42a2      	cmp	r2, r4
 8000ba6:	d101      	bne.n	8000bac <__eqsf2+0x28>
 8000ba8:	42b5      	cmp	r5, r6
 8000baa:	d006      	beq.n	8000bba <__eqsf2+0x36>
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d1fc      	bne.n	8000bac <__eqsf2+0x28>
 8000bb2:	2cff      	cmp	r4, #255	; 0xff
 8000bb4:	d1fa      	bne.n	8000bac <__eqsf2+0x28>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d1f8      	bne.n	8000bac <__eqsf2+0x28>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d006      	beq.n	8000bcc <__eqsf2+0x48>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	d1f3      	bne.n	8000bac <__eqsf2+0x28>
 8000bc4:	0028      	movs	r0, r5
 8000bc6:	1e43      	subs	r3, r0, #1
 8000bc8:	4198      	sbcs	r0, r3
 8000bca:	e7ef      	b.n	8000bac <__eqsf2+0x28>
 8000bcc:	2000      	movs	r0, #0
 8000bce:	e7ed      	b.n	8000bac <__eqsf2+0x28>

08000bd0 <__gesf2>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0245      	lsls	r5, r0, #9
 8000bd6:	024e      	lsls	r6, r1, #9
 8000bd8:	004c      	lsls	r4, r1, #1
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a6d      	lsrs	r5, r5, #9
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	0a76      	lsrs	r6, r6, #9
 8000be2:	0e24      	lsrs	r4, r4, #24
 8000be4:	0fc8      	lsrs	r0, r1, #31
 8000be6:	2aff      	cmp	r2, #255	; 0xff
 8000be8:	d01b      	beq.n	8000c22 <__gesf2+0x52>
 8000bea:	2cff      	cmp	r4, #255	; 0xff
 8000bec:	d00e      	beq.n	8000c0c <__gesf2+0x3c>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d11b      	bne.n	8000c2a <__gesf2+0x5a>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d101      	bne.n	8000bfa <__gesf2+0x2a>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d01c      	beq.n	8000c34 <__gesf2+0x64>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d00c      	beq.n	8000c18 <__gesf2+0x48>
 8000bfe:	4283      	cmp	r3, r0
 8000c00:	d01c      	beq.n	8000c3c <__gesf2+0x6c>
 8000c02:	2102      	movs	r1, #2
 8000c04:	1e58      	subs	r0, r3, #1
 8000c06:	4008      	ands	r0, r1
 8000c08:	3801      	subs	r0, #1
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d122      	bne.n	8000c56 <__gesf2+0x86>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d1f4      	bne.n	8000bfe <__gesf2+0x2e>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d1f2      	bne.n	8000bfe <__gesf2+0x2e>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d1f6      	bne.n	8000c0a <__gesf2+0x3a>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	4240      	negs	r0, r0
 8000c20:	e7f3      	b.n	8000c0a <__gesf2+0x3a>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d117      	bne.n	8000c56 <__gesf2+0x86>
 8000c26:	2cff      	cmp	r4, #255	; 0xff
 8000c28:	d0f0      	beq.n	8000c0c <__gesf2+0x3c>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d1e7      	bne.n	8000bfe <__gesf2+0x2e>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d1e5      	bne.n	8000bfe <__gesf2+0x2e>
 8000c32:	e7e6      	b.n	8000c02 <__gesf2+0x32>
 8000c34:	2000      	movs	r0, #0
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0e7      	beq.n	8000c0a <__gesf2+0x3a>
 8000c3a:	e7e2      	b.n	8000c02 <__gesf2+0x32>
 8000c3c:	42a2      	cmp	r2, r4
 8000c3e:	dc05      	bgt.n	8000c4c <__gesf2+0x7c>
 8000c40:	dbea      	blt.n	8000c18 <__gesf2+0x48>
 8000c42:	42b5      	cmp	r5, r6
 8000c44:	d802      	bhi.n	8000c4c <__gesf2+0x7c>
 8000c46:	d3e7      	bcc.n	8000c18 <__gesf2+0x48>
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e7de      	b.n	8000c0a <__gesf2+0x3a>
 8000c4c:	4243      	negs	r3, r0
 8000c4e:	4158      	adcs	r0, r3
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	3801      	subs	r0, #1
 8000c54:	e7d9      	b.n	8000c0a <__gesf2+0x3a>
 8000c56:	2002      	movs	r0, #2
 8000c58:	4240      	negs	r0, r0
 8000c5a:	e7d6      	b.n	8000c0a <__gesf2+0x3a>

08000c5c <__lesf2>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	0042      	lsls	r2, r0, #1
 8000c60:	0245      	lsls	r5, r0, #9
 8000c62:	024e      	lsls	r6, r1, #9
 8000c64:	004c      	lsls	r4, r1, #1
 8000c66:	0fc3      	lsrs	r3, r0, #31
 8000c68:	0a6d      	lsrs	r5, r5, #9
 8000c6a:	0e12      	lsrs	r2, r2, #24
 8000c6c:	0a76      	lsrs	r6, r6, #9
 8000c6e:	0e24      	lsrs	r4, r4, #24
 8000c70:	0fc8      	lsrs	r0, r1, #31
 8000c72:	2aff      	cmp	r2, #255	; 0xff
 8000c74:	d00b      	beq.n	8000c8e <__lesf2+0x32>
 8000c76:	2cff      	cmp	r4, #255	; 0xff
 8000c78:	d00d      	beq.n	8000c96 <__lesf2+0x3a>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d11f      	bne.n	8000cbe <__lesf2+0x62>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d116      	bne.n	8000cb0 <__lesf2+0x54>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d114      	bne.n	8000cb0 <__lesf2+0x54>
 8000c86:	2000      	movs	r0, #0
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d010      	beq.n	8000cae <__lesf2+0x52>
 8000c8c:	e009      	b.n	8000ca2 <__lesf2+0x46>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d10c      	bne.n	8000cac <__lesf2+0x50>
 8000c92:	2cff      	cmp	r4, #255	; 0xff
 8000c94:	d113      	bne.n	8000cbe <__lesf2+0x62>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d108      	bne.n	8000cac <__lesf2+0x50>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d008      	beq.n	8000cb0 <__lesf2+0x54>
 8000c9e:	4283      	cmp	r3, r0
 8000ca0:	d012      	beq.n	8000cc8 <__lesf2+0x6c>
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	1e58      	subs	r0, r3, #1
 8000ca6:	4008      	ands	r0, r1
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e000      	b.n	8000cae <__lesf2+0x52>
 8000cac:	2002      	movs	r0, #2
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d1f4      	bne.n	8000c9e <__lesf2+0x42>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d1fa      	bne.n	8000cae <__lesf2+0x52>
 8000cb8:	2001      	movs	r0, #1
 8000cba:	4240      	negs	r0, r0
 8000cbc:	e7f7      	b.n	8000cae <__lesf2+0x52>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d1ed      	bne.n	8000c9e <__lesf2+0x42>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d1eb      	bne.n	8000c9e <__lesf2+0x42>
 8000cc6:	e7ec      	b.n	8000ca2 <__lesf2+0x46>
 8000cc8:	42a2      	cmp	r2, r4
 8000cca:	dc05      	bgt.n	8000cd8 <__lesf2+0x7c>
 8000ccc:	dbf2      	blt.n	8000cb4 <__lesf2+0x58>
 8000cce:	42b5      	cmp	r5, r6
 8000cd0:	d802      	bhi.n	8000cd8 <__lesf2+0x7c>
 8000cd2:	d3ef      	bcc.n	8000cb4 <__lesf2+0x58>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	e7ea      	b.n	8000cae <__lesf2+0x52>
 8000cd8:	4243      	negs	r3, r0
 8000cda:	4158      	adcs	r0, r3
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	3801      	subs	r0, #1
 8000ce0:	e7e5      	b.n	8000cae <__lesf2+0x52>
 8000ce2:	46c0      	nop			; (mov r8, r8)

08000ce4 <__aeabi_fmul>:
 8000ce4:	0243      	lsls	r3, r0, #9
 8000ce6:	0a5b      	lsrs	r3, r3, #9
 8000ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cea:	464f      	mov	r7, r9
 8000cec:	4646      	mov	r6, r8
 8000cee:	4699      	mov	r9, r3
 8000cf0:	46d6      	mov	lr, sl
 8000cf2:	0fc3      	lsrs	r3, r0, #31
 8000cf4:	0045      	lsls	r5, r0, #1
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	b5c0      	push	{r6, r7, lr}
 8000cfa:	464b      	mov	r3, r9
 8000cfc:	1c0f      	adds	r7, r1, #0
 8000cfe:	0e2d      	lsrs	r5, r5, #24
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fmul+0x20>
 8000d02:	e0cb      	b.n	8000e9c <__aeabi_fmul+0x1b8>
 8000d04:	2dff      	cmp	r5, #255	; 0xff
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fmul+0x26>
 8000d08:	e0cf      	b.n	8000eaa <__aeabi_fmul+0x1c6>
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	04d2      	lsls	r2, r2, #19
 8000d10:	431a      	orrs	r2, r3
 8000d12:	2300      	movs	r3, #0
 8000d14:	4691      	mov	r9, r2
 8000d16:	2600      	movs	r6, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	3d7f      	subs	r5, #127	; 0x7f
 8000d1c:	027c      	lsls	r4, r7, #9
 8000d1e:	007b      	lsls	r3, r7, #1
 8000d20:	0a64      	lsrs	r4, r4, #9
 8000d22:	0e1b      	lsrs	r3, r3, #24
 8000d24:	0fff      	lsrs	r7, r7, #31
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fmul+0x48>
 8000d2a:	e0a9      	b.n	8000e80 <__aeabi_fmul+0x19c>
 8000d2c:	2bff      	cmp	r3, #255	; 0xff
 8000d2e:	d011      	beq.n	8000d54 <__aeabi_fmul+0x70>
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	00e4      	lsls	r4, r4, #3
 8000d34:	04d2      	lsls	r2, r2, #19
 8000d36:	4314      	orrs	r4, r2
 8000d38:	4642      	mov	r2, r8
 8000d3a:	3b7f      	subs	r3, #127	; 0x7f
 8000d3c:	195b      	adds	r3, r3, r5
 8000d3e:	407a      	eors	r2, r7
 8000d40:	2000      	movs	r0, #0
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	1c5d      	adds	r5, r3, #1
 8000d46:	2e0a      	cmp	r6, #10
 8000d48:	dd13      	ble.n	8000d72 <__aeabi_fmul+0x8e>
 8000d4a:	003a      	movs	r2, r7
 8000d4c:	2e0b      	cmp	r6, #11
 8000d4e:	d047      	beq.n	8000de0 <__aeabi_fmul+0xfc>
 8000d50:	4647      	mov	r7, r8
 8000d52:	e03f      	b.n	8000dd4 <__aeabi_fmul+0xf0>
 8000d54:	002b      	movs	r3, r5
 8000d56:	33ff      	adds	r3, #255	; 0xff
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	d11e      	bne.n	8000d9a <__aeabi_fmul+0xb6>
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4316      	orrs	r6, r2
 8000d60:	4642      	mov	r2, r8
 8000d62:	3501      	adds	r5, #1
 8000d64:	407a      	eors	r2, r7
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	35ff      	adds	r5, #255	; 0xff
 8000d6a:	2e0a      	cmp	r6, #10
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_fmul+0x8c>
 8000d6e:	e0e4      	b.n	8000f3a <__aeabi_fmul+0x256>
 8000d70:	2002      	movs	r0, #2
 8000d72:	2e02      	cmp	r6, #2
 8000d74:	dc1c      	bgt.n	8000db0 <__aeabi_fmul+0xcc>
 8000d76:	3e01      	subs	r6, #1
 8000d78:	2e01      	cmp	r6, #1
 8000d7a:	d842      	bhi.n	8000e02 <__aeabi_fmul+0x11e>
 8000d7c:	2802      	cmp	r0, #2
 8000d7e:	d03d      	beq.n	8000dfc <__aeabi_fmul+0x118>
 8000d80:	2801      	cmp	r0, #1
 8000d82:	d166      	bne.n	8000e52 <__aeabi_fmul+0x16e>
 8000d84:	2000      	movs	r0, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	05c0      	lsls	r0, r0, #23
 8000d8a:	4308      	orrs	r0, r1
 8000d8c:	07d2      	lsls	r2, r2, #31
 8000d8e:	4310      	orrs	r0, r2
 8000d90:	bce0      	pop	{r5, r6, r7}
 8000d92:	46ba      	mov	sl, r7
 8000d94:	46b1      	mov	r9, r6
 8000d96:	46a8      	mov	r8, r5
 8000d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4316      	orrs	r6, r2
 8000d9e:	4642      	mov	r2, r8
 8000da0:	3501      	adds	r5, #1
 8000da2:	407a      	eors	r2, r7
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	35ff      	adds	r5, #255	; 0xff
 8000da8:	2e0a      	cmp	r6, #10
 8000daa:	dd00      	ble.n	8000dae <__aeabi_fmul+0xca>
 8000dac:	e0e4      	b.n	8000f78 <__aeabi_fmul+0x294>
 8000dae:	2003      	movs	r0, #3
 8000db0:	2101      	movs	r1, #1
 8000db2:	40b1      	lsls	r1, r6
 8000db4:	26a6      	movs	r6, #166	; 0xa6
 8000db6:	00f6      	lsls	r6, r6, #3
 8000db8:	4231      	tst	r1, r6
 8000dba:	d10a      	bne.n	8000dd2 <__aeabi_fmul+0xee>
 8000dbc:	2690      	movs	r6, #144	; 0x90
 8000dbe:	00b6      	lsls	r6, r6, #2
 8000dc0:	4231      	tst	r1, r6
 8000dc2:	d116      	bne.n	8000df2 <__aeabi_fmul+0x10e>
 8000dc4:	3eb9      	subs	r6, #185	; 0xb9
 8000dc6:	3eff      	subs	r6, #255	; 0xff
 8000dc8:	420e      	tst	r6, r1
 8000dca:	d01a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dcc:	46a1      	mov	r9, r4
 8000dce:	4682      	mov	sl, r0
 8000dd0:	e000      	b.n	8000dd4 <__aeabi_fmul+0xf0>
 8000dd2:	0017      	movs	r7, r2
 8000dd4:	4653      	mov	r3, sl
 8000dd6:	003a      	movs	r2, r7
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d00f      	beq.n	8000dfc <__aeabi_fmul+0x118>
 8000ddc:	464c      	mov	r4, r9
 8000dde:	4650      	mov	r0, sl
 8000de0:	2803      	cmp	r0, #3
 8000de2:	d1cd      	bne.n	8000d80 <__aeabi_fmul+0x9c>
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	03c9      	lsls	r1, r1, #15
 8000de8:	4321      	orrs	r1, r4
 8000dea:	0249      	lsls	r1, r1, #9
 8000dec:	20ff      	movs	r0, #255	; 0xff
 8000dee:	0a49      	lsrs	r1, r1, #9
 8000df0:	e7ca      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	2200      	movs	r2, #0
 8000df6:	20ff      	movs	r0, #255	; 0xff
 8000df8:	03c9      	lsls	r1, r1, #15
 8000dfa:	e7c5      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000dfc:	20ff      	movs	r0, #255	; 0xff
 8000dfe:	2100      	movs	r1, #0
 8000e00:	e7c2      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000e02:	0c20      	lsrs	r0, r4, #16
 8000e04:	4649      	mov	r1, r9
 8000e06:	0424      	lsls	r4, r4, #16
 8000e08:	0c24      	lsrs	r4, r4, #16
 8000e0a:	0027      	movs	r7, r4
 8000e0c:	0c0e      	lsrs	r6, r1, #16
 8000e0e:	0409      	lsls	r1, r1, #16
 8000e10:	0c09      	lsrs	r1, r1, #16
 8000e12:	4374      	muls	r4, r6
 8000e14:	434f      	muls	r7, r1
 8000e16:	4346      	muls	r6, r0
 8000e18:	4348      	muls	r0, r1
 8000e1a:	0c39      	lsrs	r1, r7, #16
 8000e1c:	1900      	adds	r0, r0, r4
 8000e1e:	1809      	adds	r1, r1, r0
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d903      	bls.n	8000e2c <__aeabi_fmul+0x148>
 8000e24:	2080      	movs	r0, #128	; 0x80
 8000e26:	0240      	lsls	r0, r0, #9
 8000e28:	4684      	mov	ip, r0
 8000e2a:	4466      	add	r6, ip
 8000e2c:	043f      	lsls	r7, r7, #16
 8000e2e:	0408      	lsls	r0, r1, #16
 8000e30:	0c3f      	lsrs	r7, r7, #16
 8000e32:	19c0      	adds	r0, r0, r7
 8000e34:	0184      	lsls	r4, r0, #6
 8000e36:	1e67      	subs	r7, r4, #1
 8000e38:	41bc      	sbcs	r4, r7
 8000e3a:	0c09      	lsrs	r1, r1, #16
 8000e3c:	0e80      	lsrs	r0, r0, #26
 8000e3e:	1989      	adds	r1, r1, r6
 8000e40:	4304      	orrs	r4, r0
 8000e42:	0189      	lsls	r1, r1, #6
 8000e44:	430c      	orrs	r4, r1
 8000e46:	0109      	lsls	r1, r1, #4
 8000e48:	d571      	bpl.n	8000f2e <__aeabi_fmul+0x24a>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	0861      	lsrs	r1, r4, #1
 8000e4e:	401c      	ands	r4, r3
 8000e50:	430c      	orrs	r4, r1
 8000e52:	002b      	movs	r3, r5
 8000e54:	337f      	adds	r3, #127	; 0x7f
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	dd51      	ble.n	8000efe <__aeabi_fmul+0x21a>
 8000e5a:	0761      	lsls	r1, r4, #29
 8000e5c:	d004      	beq.n	8000e68 <__aeabi_fmul+0x184>
 8000e5e:	210f      	movs	r1, #15
 8000e60:	4021      	ands	r1, r4
 8000e62:	2904      	cmp	r1, #4
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fmul+0x184>
 8000e66:	3404      	adds	r4, #4
 8000e68:	0121      	lsls	r1, r4, #4
 8000e6a:	d503      	bpl.n	8000e74 <__aeabi_fmul+0x190>
 8000e6c:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <__aeabi_fmul+0x298>)
 8000e6e:	401c      	ands	r4, r3
 8000e70:	002b      	movs	r3, r5
 8000e72:	3380      	adds	r3, #128	; 0x80
 8000e74:	2bfe      	cmp	r3, #254	; 0xfe
 8000e76:	dcc1      	bgt.n	8000dfc <__aeabi_fmul+0x118>
 8000e78:	01a1      	lsls	r1, r4, #6
 8000e7a:	0a49      	lsrs	r1, r1, #9
 8000e7c:	b2d8      	uxtb	r0, r3
 8000e7e:	e783      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d12c      	bne.n	8000ede <__aeabi_fmul+0x1fa>
 8000e84:	2301      	movs	r3, #1
 8000e86:	4642      	mov	r2, r8
 8000e88:	431e      	orrs	r6, r3
 8000e8a:	002b      	movs	r3, r5
 8000e8c:	407a      	eors	r2, r7
 8000e8e:	2001      	movs	r0, #1
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	1c5d      	adds	r5, r3, #1
 8000e94:	2e0a      	cmp	r6, #10
 8000e96:	dd00      	ble.n	8000e9a <__aeabi_fmul+0x1b6>
 8000e98:	e757      	b.n	8000d4a <__aeabi_fmul+0x66>
 8000e9a:	e76a      	b.n	8000d72 <__aeabi_fmul+0x8e>
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d110      	bne.n	8000ec2 <__aeabi_fmul+0x1de>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2604      	movs	r6, #4
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	e738      	b.n	8000d1c <__aeabi_fmul+0x38>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fmul+0x1d4>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	2608      	movs	r6, #8
 8000eb2:	25ff      	movs	r5, #255	; 0xff
 8000eb4:	469a      	mov	sl, r3
 8000eb6:	e731      	b.n	8000d1c <__aeabi_fmul+0x38>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	260c      	movs	r6, #12
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	469a      	mov	sl, r3
 8000ec0:	e72c      	b.n	8000d1c <__aeabi_fmul+0x38>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	f002 f9cc 	bl	8003260 <__clzsi2>
 8000ec8:	464a      	mov	r2, r9
 8000eca:	1f43      	subs	r3, r0, #5
 8000ecc:	2576      	movs	r5, #118	; 0x76
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	426d      	negs	r5, r5
 8000ed4:	4691      	mov	r9, r2
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	469a      	mov	sl, r3
 8000eda:	1a2d      	subs	r5, r5, r0
 8000edc:	e71e      	b.n	8000d1c <__aeabi_fmul+0x38>
 8000ede:	0020      	movs	r0, r4
 8000ee0:	f002 f9be 	bl	8003260 <__clzsi2>
 8000ee4:	4642      	mov	r2, r8
 8000ee6:	1f43      	subs	r3, r0, #5
 8000ee8:	409c      	lsls	r4, r3
 8000eea:	1a2b      	subs	r3, r5, r0
 8000eec:	3b76      	subs	r3, #118	; 0x76
 8000eee:	407a      	eors	r2, r7
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2e0a      	cmp	r6, #10
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_fmul+0x218>
 8000efa:	e726      	b.n	8000d4a <__aeabi_fmul+0x66>
 8000efc:	e739      	b.n	8000d72 <__aeabi_fmul+0x8e>
 8000efe:	2101      	movs	r1, #1
 8000f00:	1acb      	subs	r3, r1, r3
 8000f02:	2b1b      	cmp	r3, #27
 8000f04:	dd00      	ble.n	8000f08 <__aeabi_fmul+0x224>
 8000f06:	e73d      	b.n	8000d84 <__aeabi_fmul+0xa0>
 8000f08:	359e      	adds	r5, #158	; 0x9e
 8000f0a:	0021      	movs	r1, r4
 8000f0c:	40ac      	lsls	r4, r5
 8000f0e:	40d9      	lsrs	r1, r3
 8000f10:	1e63      	subs	r3, r4, #1
 8000f12:	419c      	sbcs	r4, r3
 8000f14:	4321      	orrs	r1, r4
 8000f16:	074b      	lsls	r3, r1, #29
 8000f18:	d004      	beq.n	8000f24 <__aeabi_fmul+0x240>
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fmul+0x240>
 8000f22:	3104      	adds	r1, #4
 8000f24:	014b      	lsls	r3, r1, #5
 8000f26:	d504      	bpl.n	8000f32 <__aeabi_fmul+0x24e>
 8000f28:	2001      	movs	r0, #1
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	e72c      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000f2e:	001d      	movs	r5, r3
 8000f30:	e78f      	b.n	8000e52 <__aeabi_fmul+0x16e>
 8000f32:	0189      	lsls	r1, r1, #6
 8000f34:	2000      	movs	r0, #0
 8000f36:	0a49      	lsrs	r1, r1, #9
 8000f38:	e726      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	2e0f      	cmp	r6, #15
 8000f3e:	d10c      	bne.n	8000f5a <__aeabi_fmul+0x276>
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	464b      	mov	r3, r9
 8000f44:	03c9      	lsls	r1, r1, #15
 8000f46:	420b      	tst	r3, r1
 8000f48:	d00d      	beq.n	8000f66 <__aeabi_fmul+0x282>
 8000f4a:	420c      	tst	r4, r1
 8000f4c:	d10b      	bne.n	8000f66 <__aeabi_fmul+0x282>
 8000f4e:	4321      	orrs	r1, r4
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	003a      	movs	r2, r7
 8000f54:	20ff      	movs	r0, #255	; 0xff
 8000f56:	0a49      	lsrs	r1, r1, #9
 8000f58:	e716      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000f5a:	2e0b      	cmp	r6, #11
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fmul+0x27c>
 8000f5e:	e6f7      	b.n	8000d50 <__aeabi_fmul+0x6c>
 8000f60:	46a1      	mov	r9, r4
 8000f62:	469a      	mov	sl, r3
 8000f64:	e736      	b.n	8000dd4 <__aeabi_fmul+0xf0>
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	464b      	mov	r3, r9
 8000f6a:	03c9      	lsls	r1, r1, #15
 8000f6c:	4319      	orrs	r1, r3
 8000f6e:	0249      	lsls	r1, r1, #9
 8000f70:	4642      	mov	r2, r8
 8000f72:	20ff      	movs	r0, #255	; 0xff
 8000f74:	0a49      	lsrs	r1, r1, #9
 8000f76:	e707      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e7df      	b.n	8000f3c <__aeabi_fmul+0x258>
 8000f7c:	f7ffffff 	.word	0xf7ffffff

08000f80 <__aeabi_fsub>:
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f82:	46c6      	mov	lr, r8
 8000f84:	0243      	lsls	r3, r0, #9
 8000f86:	0a5b      	lsrs	r3, r3, #9
 8000f88:	0045      	lsls	r5, r0, #1
 8000f8a:	00da      	lsls	r2, r3, #3
 8000f8c:	0fc4      	lsrs	r4, r0, #31
 8000f8e:	0248      	lsls	r0, r1, #9
 8000f90:	004f      	lsls	r7, r1, #1
 8000f92:	4694      	mov	ip, r2
 8000f94:	0a42      	lsrs	r2, r0, #9
 8000f96:	001e      	movs	r6, r3
 8000f98:	4690      	mov	r8, r2
 8000f9a:	b500      	push	{lr}
 8000f9c:	0e2d      	lsrs	r5, r5, #24
 8000f9e:	0e3f      	lsrs	r7, r7, #24
 8000fa0:	0fc9      	lsrs	r1, r1, #31
 8000fa2:	0980      	lsrs	r0, r0, #6
 8000fa4:	2fff      	cmp	r7, #255	; 0xff
 8000fa6:	d059      	beq.n	800105c <__aeabi_fsub+0xdc>
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4051      	eors	r1, r2
 8000fac:	428c      	cmp	r4, r1
 8000fae:	d039      	beq.n	8001024 <__aeabi_fsub+0xa4>
 8000fb0:	1bea      	subs	r2, r5, r7
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	dd58      	ble.n	8001068 <__aeabi_fsub+0xe8>
 8000fb6:	2f00      	cmp	r7, #0
 8000fb8:	d068      	beq.n	800108c <__aeabi_fsub+0x10c>
 8000fba:	2dff      	cmp	r5, #255	; 0xff
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x40>
 8000fbe:	e0d1      	b.n	8001164 <__aeabi_fsub+0x1e4>
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	04db      	lsls	r3, r3, #19
 8000fc4:	4318      	orrs	r0, r3
 8000fc6:	2a1b      	cmp	r2, #27
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_fsub+0x4c>
 8000fca:	e0e3      	b.n	8001194 <__aeabi_fsub+0x214>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	4662      	mov	r2, ip
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	015a      	lsls	r2, r3, #5
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_fsub+0x58>
 8000fd6:	e0ac      	b.n	8001132 <__aeabi_fsub+0x1b2>
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	099e      	lsrs	r6, r3, #6
 8000fdc:	0030      	movs	r0, r6
 8000fde:	f002 f93f 	bl	8003260 <__clzsi2>
 8000fe2:	0033      	movs	r3, r6
 8000fe4:	3805      	subs	r0, #5
 8000fe6:	4083      	lsls	r3, r0
 8000fe8:	4285      	cmp	r5, r0
 8000fea:	dc00      	bgt.n	8000fee <__aeabi_fsub+0x6e>
 8000fec:	e0c6      	b.n	800117c <__aeabi_fsub+0x1fc>
 8000fee:	4ab2      	ldr	r2, [pc, #712]	; (80012b8 <__aeabi_fsub+0x338>)
 8000ff0:	1a2d      	subs	r5, r5, r0
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	075a      	lsls	r2, r3, #29
 8000ff6:	d004      	beq.n	8001002 <__aeabi_fsub+0x82>
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	2a04      	cmp	r2, #4
 8000ffe:	d000      	beq.n	8001002 <__aeabi_fsub+0x82>
 8001000:	3304      	adds	r3, #4
 8001002:	015a      	lsls	r2, r3, #5
 8001004:	d400      	bmi.n	8001008 <__aeabi_fsub+0x88>
 8001006:	e097      	b.n	8001138 <__aeabi_fsub+0x1b8>
 8001008:	1c6a      	adds	r2, r5, #1
 800100a:	2dfe      	cmp	r5, #254	; 0xfe
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x90>
 800100e:	e084      	b.n	800111a <__aeabi_fsub+0x19a>
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	0a5e      	lsrs	r6, r3, #9
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	05d0      	lsls	r0, r2, #23
 8001018:	4330      	orrs	r0, r6
 800101a:	07e4      	lsls	r4, r4, #31
 800101c:	4320      	orrs	r0, r4
 800101e:	bc80      	pop	{r7}
 8001020:	46b8      	mov	r8, r7
 8001022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001024:	1bea      	subs	r2, r5, r7
 8001026:	2a00      	cmp	r2, #0
 8001028:	dd41      	ble.n	80010ae <__aeabi_fsub+0x12e>
 800102a:	2f00      	cmp	r7, #0
 800102c:	d06b      	beq.n	8001106 <__aeabi_fsub+0x186>
 800102e:	2dff      	cmp	r5, #255	; 0xff
 8001030:	d100      	bne.n	8001034 <__aeabi_fsub+0xb4>
 8001032:	e097      	b.n	8001164 <__aeabi_fsub+0x1e4>
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	04db      	lsls	r3, r3, #19
 8001038:	4318      	orrs	r0, r3
 800103a:	2a1b      	cmp	r2, #27
 800103c:	dc00      	bgt.n	8001040 <__aeabi_fsub+0xc0>
 800103e:	e0cc      	b.n	80011da <__aeabi_fsub+0x25a>
 8001040:	2301      	movs	r3, #1
 8001042:	4463      	add	r3, ip
 8001044:	015a      	lsls	r2, r3, #5
 8001046:	d574      	bpl.n	8001132 <__aeabi_fsub+0x1b2>
 8001048:	3501      	adds	r5, #1
 800104a:	2dff      	cmp	r5, #255	; 0xff
 800104c:	d065      	beq.n	800111a <__aeabi_fsub+0x19a>
 800104e:	2201      	movs	r2, #1
 8001050:	499a      	ldr	r1, [pc, #616]	; (80012bc <__aeabi_fsub+0x33c>)
 8001052:	401a      	ands	r2, r3
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	400b      	ands	r3, r1
 8001058:	4313      	orrs	r3, r2
 800105a:	e7cb      	b.n	8000ff4 <__aeabi_fsub+0x74>
 800105c:	2800      	cmp	r0, #0
 800105e:	d01f      	beq.n	80010a0 <__aeabi_fsub+0x120>
 8001060:	428c      	cmp	r4, r1
 8001062:	d022      	beq.n	80010aa <__aeabi_fsub+0x12a>
 8001064:	002a      	movs	r2, r5
 8001066:	3aff      	subs	r2, #255	; 0xff
 8001068:	2a00      	cmp	r2, #0
 800106a:	d035      	beq.n	80010d8 <__aeabi_fsub+0x158>
 800106c:	1b7a      	subs	r2, r7, r5
 800106e:	2d00      	cmp	r5, #0
 8001070:	d000      	beq.n	8001074 <__aeabi_fsub+0xf4>
 8001072:	e099      	b.n	80011a8 <__aeabi_fsub+0x228>
 8001074:	4663      	mov	r3, ip
 8001076:	2b00      	cmp	r3, #0
 8001078:	d100      	bne.n	800107c <__aeabi_fsub+0xfc>
 800107a:	e0dd      	b.n	8001238 <__aeabi_fsub+0x2b8>
 800107c:	1e53      	subs	r3, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x104>
 8001082:	e105      	b.n	8001290 <__aeabi_fsub+0x310>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d06b      	beq.n	8001160 <__aeabi_fsub+0x1e0>
 8001088:	001a      	movs	r2, r3
 800108a:	e094      	b.n	80011b6 <__aeabi_fsub+0x236>
 800108c:	2800      	cmp	r0, #0
 800108e:	d073      	beq.n	8001178 <__aeabi_fsub+0x1f8>
 8001090:	1e51      	subs	r1, r2, #1
 8001092:	2a01      	cmp	r2, #1
 8001094:	d100      	bne.n	8001098 <__aeabi_fsub+0x118>
 8001096:	e0df      	b.n	8001258 <__aeabi_fsub+0x2d8>
 8001098:	2aff      	cmp	r2, #255	; 0xff
 800109a:	d063      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 800109c:	000a      	movs	r2, r1
 800109e:	e792      	b.n	8000fc6 <__aeabi_fsub+0x46>
 80010a0:	2201      	movs	r2, #1
 80010a2:	4051      	eors	r1, r2
 80010a4:	42a1      	cmp	r1, r4
 80010a6:	d000      	beq.n	80010aa <__aeabi_fsub+0x12a>
 80010a8:	e782      	b.n	8000fb0 <__aeabi_fsub+0x30>
 80010aa:	002a      	movs	r2, r5
 80010ac:	3aff      	subs	r2, #255	; 0xff
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d036      	beq.n	8001120 <__aeabi_fsub+0x1a0>
 80010b2:	1b7a      	subs	r2, r7, r5
 80010b4:	2d00      	cmp	r5, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x13a>
 80010b8:	e0aa      	b.n	8001210 <__aeabi_fsub+0x290>
 80010ba:	2fff      	cmp	r7, #255	; 0xff
 80010bc:	d100      	bne.n	80010c0 <__aeabi_fsub+0x140>
 80010be:	e0da      	b.n	8001276 <__aeabi_fsub+0x2f6>
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	4661      	mov	r1, ip
 80010c4:	04db      	lsls	r3, r3, #19
 80010c6:	4319      	orrs	r1, r3
 80010c8:	468c      	mov	ip, r1
 80010ca:	2a1b      	cmp	r2, #27
 80010cc:	dc00      	bgt.n	80010d0 <__aeabi_fsub+0x150>
 80010ce:	e0d4      	b.n	800127a <__aeabi_fsub+0x2fa>
 80010d0:	2301      	movs	r3, #1
 80010d2:	003d      	movs	r5, r7
 80010d4:	181b      	adds	r3, r3, r0
 80010d6:	e7b5      	b.n	8001044 <__aeabi_fsub+0xc4>
 80010d8:	27fe      	movs	r7, #254	; 0xfe
 80010da:	1c6a      	adds	r2, r5, #1
 80010dc:	4217      	tst	r7, r2
 80010de:	d171      	bne.n	80011c4 <__aeabi_fsub+0x244>
 80010e0:	2d00      	cmp	r5, #0
 80010e2:	d000      	beq.n	80010e6 <__aeabi_fsub+0x166>
 80010e4:	e09e      	b.n	8001224 <__aeabi_fsub+0x2a4>
 80010e6:	4663      	mov	r3, ip
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x16e>
 80010ec:	e0d5      	b.n	800129a <__aeabi_fsub+0x31a>
 80010ee:	2200      	movs	r2, #0
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_fsub+0x176>
 80010f4:	e78f      	b.n	8001016 <__aeabi_fsub+0x96>
 80010f6:	1a1b      	subs	r3, r3, r0
 80010f8:	015e      	lsls	r6, r3, #5
 80010fa:	d400      	bmi.n	80010fe <__aeabi_fsub+0x17e>
 80010fc:	e0d6      	b.n	80012ac <__aeabi_fsub+0x32c>
 80010fe:	4663      	mov	r3, ip
 8001100:	000c      	movs	r4, r1
 8001102:	1ac3      	subs	r3, r0, r3
 8001104:	e776      	b.n	8000ff4 <__aeabi_fsub+0x74>
 8001106:	2800      	cmp	r0, #0
 8001108:	d036      	beq.n	8001178 <__aeabi_fsub+0x1f8>
 800110a:	1e51      	subs	r1, r2, #1
 800110c:	2a01      	cmp	r2, #1
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x192>
 8001110:	e09a      	b.n	8001248 <__aeabi_fsub+0x2c8>
 8001112:	2aff      	cmp	r2, #255	; 0xff
 8001114:	d026      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 8001116:	000a      	movs	r2, r1
 8001118:	e78f      	b.n	800103a <__aeabi_fsub+0xba>
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	2600      	movs	r6, #0
 800111e:	e77a      	b.n	8001016 <__aeabi_fsub+0x96>
 8001120:	27fe      	movs	r7, #254	; 0xfe
 8001122:	1c6a      	adds	r2, r5, #1
 8001124:	4217      	tst	r7, r2
 8001126:	d062      	beq.n	80011ee <__aeabi_fsub+0x26e>
 8001128:	2aff      	cmp	r2, #255	; 0xff
 800112a:	d0f6      	beq.n	800111a <__aeabi_fsub+0x19a>
 800112c:	0015      	movs	r5, r2
 800112e:	4460      	add	r0, ip
 8001130:	0843      	lsrs	r3, r0, #1
 8001132:	075a      	lsls	r2, r3, #29
 8001134:	d000      	beq.n	8001138 <__aeabi_fsub+0x1b8>
 8001136:	e75f      	b.n	8000ff8 <__aeabi_fsub+0x78>
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	2dff      	cmp	r5, #255	; 0xff
 800113c:	d012      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 800113e:	025b      	lsls	r3, r3, #9
 8001140:	0a5e      	lsrs	r6, r3, #9
 8001142:	b2ea      	uxtb	r2, r5
 8001144:	e767      	b.n	8001016 <__aeabi_fsub+0x96>
 8001146:	4662      	mov	r2, ip
 8001148:	2a00      	cmp	r2, #0
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x1ce>
 800114c:	e093      	b.n	8001276 <__aeabi_fsub+0x2f6>
 800114e:	2800      	cmp	r0, #0
 8001150:	d008      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	03d2      	lsls	r2, r2, #15
 8001156:	4213      	tst	r3, r2
 8001158:	d004      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 800115a:	4640      	mov	r0, r8
 800115c:	4210      	tst	r0, r2
 800115e:	d101      	bne.n	8001164 <__aeabi_fsub+0x1e4>
 8001160:	000c      	movs	r4, r1
 8001162:	4643      	mov	r3, r8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0d8      	beq.n	800111a <__aeabi_fsub+0x19a>
 8001168:	2680      	movs	r6, #128	; 0x80
 800116a:	03f6      	lsls	r6, r6, #15
 800116c:	431e      	orrs	r6, r3
 800116e:	0276      	lsls	r6, r6, #9
 8001170:	22ff      	movs	r2, #255	; 0xff
 8001172:	0a76      	lsrs	r6, r6, #9
 8001174:	e74f      	b.n	8001016 <__aeabi_fsub+0x96>
 8001176:	4643      	mov	r3, r8
 8001178:	0015      	movs	r5, r2
 800117a:	e7de      	b.n	800113a <__aeabi_fsub+0x1ba>
 800117c:	2220      	movs	r2, #32
 800117e:	1b40      	subs	r0, r0, r5
 8001180:	3001      	adds	r0, #1
 8001182:	1a12      	subs	r2, r2, r0
 8001184:	0019      	movs	r1, r3
 8001186:	4093      	lsls	r3, r2
 8001188:	40c1      	lsrs	r1, r0
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	4193      	sbcs	r3, r2
 800118e:	2500      	movs	r5, #0
 8001190:	430b      	orrs	r3, r1
 8001192:	e72f      	b.n	8000ff4 <__aeabi_fsub+0x74>
 8001194:	2320      	movs	r3, #32
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	0001      	movs	r1, r0
 800119a:	4098      	lsls	r0, r3
 800119c:	0003      	movs	r3, r0
 800119e:	40d1      	lsrs	r1, r2
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	4193      	sbcs	r3, r2
 80011a4:	430b      	orrs	r3, r1
 80011a6:	e712      	b.n	8000fce <__aeabi_fsub+0x4e>
 80011a8:	2fff      	cmp	r7, #255	; 0xff
 80011aa:	d0d9      	beq.n	8001160 <__aeabi_fsub+0x1e0>
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	4664      	mov	r4, ip
 80011b0:	04db      	lsls	r3, r3, #19
 80011b2:	431c      	orrs	r4, r3
 80011b4:	46a4      	mov	ip, r4
 80011b6:	2a1b      	cmp	r2, #27
 80011b8:	dd52      	ble.n	8001260 <__aeabi_fsub+0x2e0>
 80011ba:	2301      	movs	r3, #1
 80011bc:	000c      	movs	r4, r1
 80011be:	003d      	movs	r5, r7
 80011c0:	1ac3      	subs	r3, r0, r3
 80011c2:	e706      	b.n	8000fd2 <__aeabi_fsub+0x52>
 80011c4:	4663      	mov	r3, ip
 80011c6:	1a1e      	subs	r6, r3, r0
 80011c8:	0173      	lsls	r3, r6, #5
 80011ca:	d439      	bmi.n	8001240 <__aeabi_fsub+0x2c0>
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	d000      	beq.n	80011d2 <__aeabi_fsub+0x252>
 80011d0:	e704      	b.n	8000fdc <__aeabi_fsub+0x5c>
 80011d2:	2400      	movs	r4, #0
 80011d4:	2200      	movs	r2, #0
 80011d6:	2600      	movs	r6, #0
 80011d8:	e71d      	b.n	8001016 <__aeabi_fsub+0x96>
 80011da:	2320      	movs	r3, #32
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	0001      	movs	r1, r0
 80011e0:	4098      	lsls	r0, r3
 80011e2:	0003      	movs	r3, r0
 80011e4:	40d1      	lsrs	r1, r2
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	4193      	sbcs	r3, r2
 80011ea:	430b      	orrs	r3, r1
 80011ec:	e729      	b.n	8001042 <__aeabi_fsub+0xc2>
 80011ee:	2d00      	cmp	r5, #0
 80011f0:	d1a9      	bne.n	8001146 <__aeabi_fsub+0x1c6>
 80011f2:	4663      	mov	r3, ip
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d056      	beq.n	80012a6 <__aeabi_fsub+0x326>
 80011f8:	2200      	movs	r2, #0
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d100      	bne.n	8001200 <__aeabi_fsub+0x280>
 80011fe:	e70a      	b.n	8001016 <__aeabi_fsub+0x96>
 8001200:	0003      	movs	r3, r0
 8001202:	4463      	add	r3, ip
 8001204:	015a      	lsls	r2, r3, #5
 8001206:	d594      	bpl.n	8001132 <__aeabi_fsub+0x1b2>
 8001208:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <__aeabi_fsub+0x338>)
 800120a:	3501      	adds	r5, #1
 800120c:	4013      	ands	r3, r2
 800120e:	e790      	b.n	8001132 <__aeabi_fsub+0x1b2>
 8001210:	4663      	mov	r3, ip
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0af      	beq.n	8001176 <__aeabi_fsub+0x1f6>
 8001216:	1e53      	subs	r3, r2, #1
 8001218:	2a01      	cmp	r2, #1
 800121a:	d015      	beq.n	8001248 <__aeabi_fsub+0x2c8>
 800121c:	2aff      	cmp	r2, #255	; 0xff
 800121e:	d02a      	beq.n	8001276 <__aeabi_fsub+0x2f6>
 8001220:	001a      	movs	r2, r3
 8001222:	e752      	b.n	80010ca <__aeabi_fsub+0x14a>
 8001224:	4662      	mov	r2, ip
 8001226:	2a00      	cmp	r2, #0
 8001228:	d191      	bne.n	800114e <__aeabi_fsub+0x1ce>
 800122a:	2800      	cmp	r0, #0
 800122c:	d198      	bne.n	8001160 <__aeabi_fsub+0x1e0>
 800122e:	2680      	movs	r6, #128	; 0x80
 8001230:	2400      	movs	r4, #0
 8001232:	22ff      	movs	r2, #255	; 0xff
 8001234:	03f6      	lsls	r6, r6, #15
 8001236:	e6ee      	b.n	8001016 <__aeabi_fsub+0x96>
 8001238:	000c      	movs	r4, r1
 800123a:	4643      	mov	r3, r8
 800123c:	0015      	movs	r5, r2
 800123e:	e77c      	b.n	800113a <__aeabi_fsub+0x1ba>
 8001240:	4663      	mov	r3, ip
 8001242:	000c      	movs	r4, r1
 8001244:	1ac6      	subs	r6, r0, r3
 8001246:	e6c9      	b.n	8000fdc <__aeabi_fsub+0x5c>
 8001248:	0003      	movs	r3, r0
 800124a:	4463      	add	r3, ip
 800124c:	2501      	movs	r5, #1
 800124e:	015a      	lsls	r2, r3, #5
 8001250:	d400      	bmi.n	8001254 <__aeabi_fsub+0x2d4>
 8001252:	e76e      	b.n	8001132 <__aeabi_fsub+0x1b2>
 8001254:	2502      	movs	r5, #2
 8001256:	e6fa      	b.n	800104e <__aeabi_fsub+0xce>
 8001258:	4663      	mov	r3, ip
 800125a:	2501      	movs	r5, #1
 800125c:	1a1b      	subs	r3, r3, r0
 800125e:	e6b8      	b.n	8000fd2 <__aeabi_fsub+0x52>
 8001260:	4664      	mov	r4, ip
 8001262:	2320      	movs	r3, #32
 8001264:	40d4      	lsrs	r4, r2
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	4662      	mov	r2, ip
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	1e5a      	subs	r2, r3, #1
 8001270:	4193      	sbcs	r3, r2
 8001272:	4323      	orrs	r3, r4
 8001274:	e7a2      	b.n	80011bc <__aeabi_fsub+0x23c>
 8001276:	4643      	mov	r3, r8
 8001278:	e774      	b.n	8001164 <__aeabi_fsub+0x1e4>
 800127a:	4661      	mov	r1, ip
 800127c:	2320      	movs	r3, #32
 800127e:	40d1      	lsrs	r1, r2
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	4662      	mov	r2, ip
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	4193      	sbcs	r3, r2
 800128c:	430b      	orrs	r3, r1
 800128e:	e720      	b.n	80010d2 <__aeabi_fsub+0x152>
 8001290:	4663      	mov	r3, ip
 8001292:	000c      	movs	r4, r1
 8001294:	2501      	movs	r5, #1
 8001296:	1ac3      	subs	r3, r0, r3
 8001298:	e69b      	b.n	8000fd2 <__aeabi_fsub+0x52>
 800129a:	2800      	cmp	r0, #0
 800129c:	d099      	beq.n	80011d2 <__aeabi_fsub+0x252>
 800129e:	000c      	movs	r4, r1
 80012a0:	4646      	mov	r6, r8
 80012a2:	2200      	movs	r2, #0
 80012a4:	e6b7      	b.n	8001016 <__aeabi_fsub+0x96>
 80012a6:	4646      	mov	r6, r8
 80012a8:	2200      	movs	r2, #0
 80012aa:	e6b4      	b.n	8001016 <__aeabi_fsub+0x96>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d000      	beq.n	80012b2 <__aeabi_fsub+0x332>
 80012b0:	e73f      	b.n	8001132 <__aeabi_fsub+0x1b2>
 80012b2:	2400      	movs	r4, #0
 80012b4:	2600      	movs	r6, #0
 80012b6:	e6ae      	b.n	8001016 <__aeabi_fsub+0x96>
 80012b8:	fbffffff 	.word	0xfbffffff
 80012bc:	7dffffff 	.word	0x7dffffff

080012c0 <__aeabi_f2iz>:
 80012c0:	0241      	lsls	r1, r0, #9
 80012c2:	0042      	lsls	r2, r0, #1
 80012c4:	0fc3      	lsrs	r3, r0, #31
 80012c6:	0a49      	lsrs	r1, r1, #9
 80012c8:	2000      	movs	r0, #0
 80012ca:	0e12      	lsrs	r2, r2, #24
 80012cc:	2a7e      	cmp	r2, #126	; 0x7e
 80012ce:	dd03      	ble.n	80012d8 <__aeabi_f2iz+0x18>
 80012d0:	2a9d      	cmp	r2, #157	; 0x9d
 80012d2:	dd02      	ble.n	80012da <__aeabi_f2iz+0x1a>
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <__aeabi_f2iz+0x3c>)
 80012d6:	1898      	adds	r0, r3, r2
 80012d8:	4770      	bx	lr
 80012da:	2080      	movs	r0, #128	; 0x80
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	4301      	orrs	r1, r0
 80012e0:	2a95      	cmp	r2, #149	; 0x95
 80012e2:	dc07      	bgt.n	80012f4 <__aeabi_f2iz+0x34>
 80012e4:	2096      	movs	r0, #150	; 0x96
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	40d1      	lsrs	r1, r2
 80012ea:	4248      	negs	r0, r1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f3      	bne.n	80012d8 <__aeabi_f2iz+0x18>
 80012f0:	0008      	movs	r0, r1
 80012f2:	e7f1      	b.n	80012d8 <__aeabi_f2iz+0x18>
 80012f4:	3a96      	subs	r2, #150	; 0x96
 80012f6:	4091      	lsls	r1, r2
 80012f8:	e7f7      	b.n	80012ea <__aeabi_f2iz+0x2a>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	7fffffff 	.word	0x7fffffff

08001300 <__aeabi_i2f>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	2800      	cmp	r0, #0
 8001304:	d013      	beq.n	800132e <__aeabi_i2f+0x2e>
 8001306:	17c3      	asrs	r3, r0, #31
 8001308:	18c5      	adds	r5, r0, r3
 800130a:	405d      	eors	r5, r3
 800130c:	0fc4      	lsrs	r4, r0, #31
 800130e:	0028      	movs	r0, r5
 8001310:	f001 ffa6 	bl	8003260 <__clzsi2>
 8001314:	239e      	movs	r3, #158	; 0x9e
 8001316:	0001      	movs	r1, r0
 8001318:	1a1b      	subs	r3, r3, r0
 800131a:	2b96      	cmp	r3, #150	; 0x96
 800131c:	dc0f      	bgt.n	800133e <__aeabi_i2f+0x3e>
 800131e:	2808      	cmp	r0, #8
 8001320:	d031      	beq.n	8001386 <__aeabi_i2f+0x86>
 8001322:	3908      	subs	r1, #8
 8001324:	408d      	lsls	r5, r1
 8001326:	026d      	lsls	r5, r5, #9
 8001328:	0a6d      	lsrs	r5, r5, #9
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	e002      	b.n	8001334 <__aeabi_i2f+0x34>
 800132e:	2400      	movs	r4, #0
 8001330:	2000      	movs	r0, #0
 8001332:	2500      	movs	r5, #0
 8001334:	05c0      	lsls	r0, r0, #23
 8001336:	4328      	orrs	r0, r5
 8001338:	07e4      	lsls	r4, r4, #31
 800133a:	4320      	orrs	r0, r4
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	2b99      	cmp	r3, #153	; 0x99
 8001340:	dd0c      	ble.n	800135c <__aeabi_i2f+0x5c>
 8001342:	2205      	movs	r2, #5
 8001344:	1a12      	subs	r2, r2, r0
 8001346:	0028      	movs	r0, r5
 8001348:	40d0      	lsrs	r0, r2
 800134a:	0002      	movs	r2, r0
 800134c:	0008      	movs	r0, r1
 800134e:	301b      	adds	r0, #27
 8001350:	4085      	lsls	r5, r0
 8001352:	0028      	movs	r0, r5
 8001354:	1e45      	subs	r5, r0, #1
 8001356:	41a8      	sbcs	r0, r5
 8001358:	4302      	orrs	r2, r0
 800135a:	0015      	movs	r5, r2
 800135c:	2905      	cmp	r1, #5
 800135e:	dc16      	bgt.n	800138e <__aeabi_i2f+0x8e>
 8001360:	002a      	movs	r2, r5
 8001362:	480f      	ldr	r0, [pc, #60]	; (80013a0 <__aeabi_i2f+0xa0>)
 8001364:	4002      	ands	r2, r0
 8001366:	076e      	lsls	r6, r5, #29
 8001368:	d009      	beq.n	800137e <__aeabi_i2f+0x7e>
 800136a:	260f      	movs	r6, #15
 800136c:	4035      	ands	r5, r6
 800136e:	2d04      	cmp	r5, #4
 8001370:	d005      	beq.n	800137e <__aeabi_i2f+0x7e>
 8001372:	3204      	adds	r2, #4
 8001374:	0155      	lsls	r5, r2, #5
 8001376:	d502      	bpl.n	800137e <__aeabi_i2f+0x7e>
 8001378:	239f      	movs	r3, #159	; 0x9f
 800137a:	4002      	ands	r2, r0
 800137c:	1a5b      	subs	r3, r3, r1
 800137e:	0192      	lsls	r2, r2, #6
 8001380:	0a55      	lsrs	r5, r2, #9
 8001382:	b2d8      	uxtb	r0, r3
 8001384:	e7d6      	b.n	8001334 <__aeabi_i2f+0x34>
 8001386:	026d      	lsls	r5, r5, #9
 8001388:	2096      	movs	r0, #150	; 0x96
 800138a:	0a6d      	lsrs	r5, r5, #9
 800138c:	e7d2      	b.n	8001334 <__aeabi_i2f+0x34>
 800138e:	1f4a      	subs	r2, r1, #5
 8001390:	4095      	lsls	r5, r2
 8001392:	002a      	movs	r2, r5
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <__aeabi_i2f+0xa0>)
 8001396:	4002      	ands	r2, r0
 8001398:	076e      	lsls	r6, r5, #29
 800139a:	d0f0      	beq.n	800137e <__aeabi_i2f+0x7e>
 800139c:	e7e5      	b.n	800136a <__aeabi_i2f+0x6a>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	fbffffff 	.word	0xfbffffff

080013a4 <__aeabi_ui2f>:
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	1e04      	subs	r4, r0, #0
 80013a8:	d00e      	beq.n	80013c8 <__aeabi_ui2f+0x24>
 80013aa:	f001 ff59 	bl	8003260 <__clzsi2>
 80013ae:	239e      	movs	r3, #158	; 0x9e
 80013b0:	0001      	movs	r1, r0
 80013b2:	1a1b      	subs	r3, r3, r0
 80013b4:	2b96      	cmp	r3, #150	; 0x96
 80013b6:	dc0c      	bgt.n	80013d2 <__aeabi_ui2f+0x2e>
 80013b8:	2808      	cmp	r0, #8
 80013ba:	d02c      	beq.n	8001416 <__aeabi_ui2f+0x72>
 80013bc:	3908      	subs	r1, #8
 80013be:	408c      	lsls	r4, r1
 80013c0:	0264      	lsls	r4, r4, #9
 80013c2:	0a64      	lsrs	r4, r4, #9
 80013c4:	b2d8      	uxtb	r0, r3
 80013c6:	e001      	b.n	80013cc <__aeabi_ui2f+0x28>
 80013c8:	2000      	movs	r0, #0
 80013ca:	2400      	movs	r4, #0
 80013cc:	05c0      	lsls	r0, r0, #23
 80013ce:	4320      	orrs	r0, r4
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
 80013d2:	2b99      	cmp	r3, #153	; 0x99
 80013d4:	dd0a      	ble.n	80013ec <__aeabi_ui2f+0x48>
 80013d6:	0002      	movs	r2, r0
 80013d8:	0020      	movs	r0, r4
 80013da:	321b      	adds	r2, #27
 80013dc:	4090      	lsls	r0, r2
 80013de:	0002      	movs	r2, r0
 80013e0:	1e50      	subs	r0, r2, #1
 80013e2:	4182      	sbcs	r2, r0
 80013e4:	2005      	movs	r0, #5
 80013e6:	1a40      	subs	r0, r0, r1
 80013e8:	40c4      	lsrs	r4, r0
 80013ea:	4314      	orrs	r4, r2
 80013ec:	2905      	cmp	r1, #5
 80013ee:	dc16      	bgt.n	800141e <__aeabi_ui2f+0x7a>
 80013f0:	0022      	movs	r2, r4
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <__aeabi_ui2f+0x8c>)
 80013f4:	4002      	ands	r2, r0
 80013f6:	0765      	lsls	r5, r4, #29
 80013f8:	d009      	beq.n	800140e <__aeabi_ui2f+0x6a>
 80013fa:	250f      	movs	r5, #15
 80013fc:	402c      	ands	r4, r5
 80013fe:	2c04      	cmp	r4, #4
 8001400:	d005      	beq.n	800140e <__aeabi_ui2f+0x6a>
 8001402:	3204      	adds	r2, #4
 8001404:	0154      	lsls	r4, r2, #5
 8001406:	d502      	bpl.n	800140e <__aeabi_ui2f+0x6a>
 8001408:	239f      	movs	r3, #159	; 0x9f
 800140a:	4002      	ands	r2, r0
 800140c:	1a5b      	subs	r3, r3, r1
 800140e:	0192      	lsls	r2, r2, #6
 8001410:	0a54      	lsrs	r4, r2, #9
 8001412:	b2d8      	uxtb	r0, r3
 8001414:	e7da      	b.n	80013cc <__aeabi_ui2f+0x28>
 8001416:	0264      	lsls	r4, r4, #9
 8001418:	2096      	movs	r0, #150	; 0x96
 800141a:	0a64      	lsrs	r4, r4, #9
 800141c:	e7d6      	b.n	80013cc <__aeabi_ui2f+0x28>
 800141e:	1f4a      	subs	r2, r1, #5
 8001420:	4094      	lsls	r4, r2
 8001422:	0022      	movs	r2, r4
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <__aeabi_ui2f+0x8c>)
 8001426:	4002      	ands	r2, r0
 8001428:	0765      	lsls	r5, r4, #29
 800142a:	d0f0      	beq.n	800140e <__aeabi_ui2f+0x6a>
 800142c:	e7e5      	b.n	80013fa <__aeabi_ui2f+0x56>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	fbffffff 	.word	0xfbffffff

08001434 <__aeabi_dadd>:
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	464f      	mov	r7, r9
 8001438:	4646      	mov	r6, r8
 800143a:	46d6      	mov	lr, sl
 800143c:	0004      	movs	r4, r0
 800143e:	b5c0      	push	{r6, r7, lr}
 8001440:	001f      	movs	r7, r3
 8001442:	030b      	lsls	r3, r1, #12
 8001444:	0010      	movs	r0, r2
 8001446:	004e      	lsls	r6, r1, #1
 8001448:	0a5b      	lsrs	r3, r3, #9
 800144a:	0fcd      	lsrs	r5, r1, #31
 800144c:	0f61      	lsrs	r1, r4, #29
 800144e:	007a      	lsls	r2, r7, #1
 8001450:	4319      	orrs	r1, r3
 8001452:	00e3      	lsls	r3, r4, #3
 8001454:	033c      	lsls	r4, r7, #12
 8001456:	0fff      	lsrs	r7, r7, #31
 8001458:	46bc      	mov	ip, r7
 800145a:	0a64      	lsrs	r4, r4, #9
 800145c:	0f47      	lsrs	r7, r0, #29
 800145e:	4327      	orrs	r7, r4
 8001460:	0d76      	lsrs	r6, r6, #21
 8001462:	0d52      	lsrs	r2, r2, #21
 8001464:	00c0      	lsls	r0, r0, #3
 8001466:	46b9      	mov	r9, r7
 8001468:	4680      	mov	r8, r0
 800146a:	1ab7      	subs	r7, r6, r2
 800146c:	4565      	cmp	r5, ip
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x3e>
 8001470:	e09b      	b.n	80015aa <__aeabi_dadd+0x176>
 8001472:	2f00      	cmp	r7, #0
 8001474:	dc00      	bgt.n	8001478 <__aeabi_dadd+0x44>
 8001476:	e084      	b.n	8001582 <__aeabi_dadd+0x14e>
 8001478:	2a00      	cmp	r2, #0
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x4a>
 800147c:	e0be      	b.n	80015fc <__aeabi_dadd+0x1c8>
 800147e:	4ac8      	ldr	r2, [pc, #800]	; (80017a0 <__aeabi_dadd+0x36c>)
 8001480:	4296      	cmp	r6, r2
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x52>
 8001484:	e124      	b.n	80016d0 <__aeabi_dadd+0x29c>
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	464c      	mov	r4, r9
 800148a:	0412      	lsls	r2, r2, #16
 800148c:	4314      	orrs	r4, r2
 800148e:	46a1      	mov	r9, r4
 8001490:	2f38      	cmp	r7, #56	; 0x38
 8001492:	dd00      	ble.n	8001496 <__aeabi_dadd+0x62>
 8001494:	e167      	b.n	8001766 <__aeabi_dadd+0x332>
 8001496:	2f1f      	cmp	r7, #31
 8001498:	dd00      	ble.n	800149c <__aeabi_dadd+0x68>
 800149a:	e1d6      	b.n	800184a <__aeabi_dadd+0x416>
 800149c:	2220      	movs	r2, #32
 800149e:	464c      	mov	r4, r9
 80014a0:	1bd2      	subs	r2, r2, r7
 80014a2:	4094      	lsls	r4, r2
 80014a4:	46a2      	mov	sl, r4
 80014a6:	4644      	mov	r4, r8
 80014a8:	40fc      	lsrs	r4, r7
 80014aa:	0020      	movs	r0, r4
 80014ac:	4654      	mov	r4, sl
 80014ae:	4304      	orrs	r4, r0
 80014b0:	4640      	mov	r0, r8
 80014b2:	4090      	lsls	r0, r2
 80014b4:	1e42      	subs	r2, r0, #1
 80014b6:	4190      	sbcs	r0, r2
 80014b8:	464a      	mov	r2, r9
 80014ba:	40fa      	lsrs	r2, r7
 80014bc:	4304      	orrs	r4, r0
 80014be:	1a89      	subs	r1, r1, r2
 80014c0:	1b1c      	subs	r4, r3, r4
 80014c2:	42a3      	cmp	r3, r4
 80014c4:	4192      	sbcs	r2, r2
 80014c6:	4252      	negs	r2, r2
 80014c8:	1a8b      	subs	r3, r1, r2
 80014ca:	469a      	mov	sl, r3
 80014cc:	4653      	mov	r3, sl
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	d400      	bmi.n	80014d4 <__aeabi_dadd+0xa0>
 80014d2:	e0d4      	b.n	800167e <__aeabi_dadd+0x24a>
 80014d4:	4653      	mov	r3, sl
 80014d6:	025a      	lsls	r2, r3, #9
 80014d8:	0a53      	lsrs	r3, r2, #9
 80014da:	469a      	mov	sl, r3
 80014dc:	4653      	mov	r3, sl
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dadd+0xb0>
 80014e2:	e104      	b.n	80016ee <__aeabi_dadd+0x2ba>
 80014e4:	4650      	mov	r0, sl
 80014e6:	f001 febb 	bl	8003260 <__clzsi2>
 80014ea:	0003      	movs	r3, r0
 80014ec:	3b08      	subs	r3, #8
 80014ee:	2220      	movs	r2, #32
 80014f0:	0020      	movs	r0, r4
 80014f2:	1ad2      	subs	r2, r2, r3
 80014f4:	4651      	mov	r1, sl
 80014f6:	40d0      	lsrs	r0, r2
 80014f8:	4099      	lsls	r1, r3
 80014fa:	0002      	movs	r2, r0
 80014fc:	409c      	lsls	r4, r3
 80014fe:	430a      	orrs	r2, r1
 8001500:	42b3      	cmp	r3, r6
 8001502:	da00      	bge.n	8001506 <__aeabi_dadd+0xd2>
 8001504:	e102      	b.n	800170c <__aeabi_dadd+0x2d8>
 8001506:	1b9b      	subs	r3, r3, r6
 8001508:	1c59      	adds	r1, r3, #1
 800150a:	291f      	cmp	r1, #31
 800150c:	dd00      	ble.n	8001510 <__aeabi_dadd+0xdc>
 800150e:	e0a7      	b.n	8001660 <__aeabi_dadd+0x22c>
 8001510:	2320      	movs	r3, #32
 8001512:	0010      	movs	r0, r2
 8001514:	0026      	movs	r6, r4
 8001516:	1a5b      	subs	r3, r3, r1
 8001518:	409c      	lsls	r4, r3
 800151a:	4098      	lsls	r0, r3
 800151c:	40ce      	lsrs	r6, r1
 800151e:	40ca      	lsrs	r2, r1
 8001520:	1e63      	subs	r3, r4, #1
 8001522:	419c      	sbcs	r4, r3
 8001524:	4330      	orrs	r0, r6
 8001526:	4692      	mov	sl, r2
 8001528:	2600      	movs	r6, #0
 800152a:	4304      	orrs	r4, r0
 800152c:	0763      	lsls	r3, r4, #29
 800152e:	d009      	beq.n	8001544 <__aeabi_dadd+0x110>
 8001530:	230f      	movs	r3, #15
 8001532:	4023      	ands	r3, r4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d005      	beq.n	8001544 <__aeabi_dadd+0x110>
 8001538:	1d23      	adds	r3, r4, #4
 800153a:	42a3      	cmp	r3, r4
 800153c:	41a4      	sbcs	r4, r4
 800153e:	4264      	negs	r4, r4
 8001540:	44a2      	add	sl, r4
 8001542:	001c      	movs	r4, r3
 8001544:	4653      	mov	r3, sl
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	d400      	bmi.n	800154c <__aeabi_dadd+0x118>
 800154a:	e09b      	b.n	8001684 <__aeabi_dadd+0x250>
 800154c:	4b94      	ldr	r3, [pc, #592]	; (80017a0 <__aeabi_dadd+0x36c>)
 800154e:	3601      	adds	r6, #1
 8001550:	429e      	cmp	r6, r3
 8001552:	d100      	bne.n	8001556 <__aeabi_dadd+0x122>
 8001554:	e0b8      	b.n	80016c8 <__aeabi_dadd+0x294>
 8001556:	4653      	mov	r3, sl
 8001558:	4992      	ldr	r1, [pc, #584]	; (80017a4 <__aeabi_dadd+0x370>)
 800155a:	08e4      	lsrs	r4, r4, #3
 800155c:	400b      	ands	r3, r1
 800155e:	0019      	movs	r1, r3
 8001560:	075b      	lsls	r3, r3, #29
 8001562:	4323      	orrs	r3, r4
 8001564:	0572      	lsls	r2, r6, #21
 8001566:	024c      	lsls	r4, r1, #9
 8001568:	0b24      	lsrs	r4, r4, #12
 800156a:	0d52      	lsrs	r2, r2, #21
 800156c:	0512      	lsls	r2, r2, #20
 800156e:	07ed      	lsls	r5, r5, #31
 8001570:	4322      	orrs	r2, r4
 8001572:	432a      	orrs	r2, r5
 8001574:	0018      	movs	r0, r3
 8001576:	0011      	movs	r1, r2
 8001578:	bce0      	pop	{r5, r6, r7}
 800157a:	46ba      	mov	sl, r7
 800157c:	46b1      	mov	r9, r6
 800157e:	46a8      	mov	r8, r5
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001582:	2f00      	cmp	r7, #0
 8001584:	d048      	beq.n	8001618 <__aeabi_dadd+0x1e4>
 8001586:	1b97      	subs	r7, r2, r6
 8001588:	2e00      	cmp	r6, #0
 800158a:	d000      	beq.n	800158e <__aeabi_dadd+0x15a>
 800158c:	e10e      	b.n	80017ac <__aeabi_dadd+0x378>
 800158e:	000c      	movs	r4, r1
 8001590:	431c      	orrs	r4, r3
 8001592:	d100      	bne.n	8001596 <__aeabi_dadd+0x162>
 8001594:	e1b7      	b.n	8001906 <__aeabi_dadd+0x4d2>
 8001596:	1e7c      	subs	r4, r7, #1
 8001598:	2f01      	cmp	r7, #1
 800159a:	d100      	bne.n	800159e <__aeabi_dadd+0x16a>
 800159c:	e226      	b.n	80019ec <__aeabi_dadd+0x5b8>
 800159e:	4d80      	ldr	r5, [pc, #512]	; (80017a0 <__aeabi_dadd+0x36c>)
 80015a0:	42af      	cmp	r7, r5
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x172>
 80015a4:	e1d5      	b.n	8001952 <__aeabi_dadd+0x51e>
 80015a6:	0027      	movs	r7, r4
 80015a8:	e107      	b.n	80017ba <__aeabi_dadd+0x386>
 80015aa:	2f00      	cmp	r7, #0
 80015ac:	dc00      	bgt.n	80015b0 <__aeabi_dadd+0x17c>
 80015ae:	e0b2      	b.n	8001716 <__aeabi_dadd+0x2e2>
 80015b0:	2a00      	cmp	r2, #0
 80015b2:	d047      	beq.n	8001644 <__aeabi_dadd+0x210>
 80015b4:	4a7a      	ldr	r2, [pc, #488]	; (80017a0 <__aeabi_dadd+0x36c>)
 80015b6:	4296      	cmp	r6, r2
 80015b8:	d100      	bne.n	80015bc <__aeabi_dadd+0x188>
 80015ba:	e089      	b.n	80016d0 <__aeabi_dadd+0x29c>
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	464c      	mov	r4, r9
 80015c0:	0412      	lsls	r2, r2, #16
 80015c2:	4314      	orrs	r4, r2
 80015c4:	46a1      	mov	r9, r4
 80015c6:	2f38      	cmp	r7, #56	; 0x38
 80015c8:	dc6b      	bgt.n	80016a2 <__aeabi_dadd+0x26e>
 80015ca:	2f1f      	cmp	r7, #31
 80015cc:	dc00      	bgt.n	80015d0 <__aeabi_dadd+0x19c>
 80015ce:	e16e      	b.n	80018ae <__aeabi_dadd+0x47a>
 80015d0:	003a      	movs	r2, r7
 80015d2:	4648      	mov	r0, r9
 80015d4:	3a20      	subs	r2, #32
 80015d6:	40d0      	lsrs	r0, r2
 80015d8:	4684      	mov	ip, r0
 80015da:	2f20      	cmp	r7, #32
 80015dc:	d007      	beq.n	80015ee <__aeabi_dadd+0x1ba>
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	4648      	mov	r0, r9
 80015e2:	1bd2      	subs	r2, r2, r7
 80015e4:	4090      	lsls	r0, r2
 80015e6:	0002      	movs	r2, r0
 80015e8:	4640      	mov	r0, r8
 80015ea:	4310      	orrs	r0, r2
 80015ec:	4680      	mov	r8, r0
 80015ee:	4640      	mov	r0, r8
 80015f0:	1e42      	subs	r2, r0, #1
 80015f2:	4190      	sbcs	r0, r2
 80015f4:	4662      	mov	r2, ip
 80015f6:	0004      	movs	r4, r0
 80015f8:	4314      	orrs	r4, r2
 80015fa:	e057      	b.n	80016ac <__aeabi_dadd+0x278>
 80015fc:	464a      	mov	r2, r9
 80015fe:	4302      	orrs	r2, r0
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x1d0>
 8001602:	e103      	b.n	800180c <__aeabi_dadd+0x3d8>
 8001604:	1e7a      	subs	r2, r7, #1
 8001606:	2f01      	cmp	r7, #1
 8001608:	d100      	bne.n	800160c <__aeabi_dadd+0x1d8>
 800160a:	e193      	b.n	8001934 <__aeabi_dadd+0x500>
 800160c:	4c64      	ldr	r4, [pc, #400]	; (80017a0 <__aeabi_dadd+0x36c>)
 800160e:	42a7      	cmp	r7, r4
 8001610:	d100      	bne.n	8001614 <__aeabi_dadd+0x1e0>
 8001612:	e18a      	b.n	800192a <__aeabi_dadd+0x4f6>
 8001614:	0017      	movs	r7, r2
 8001616:	e73b      	b.n	8001490 <__aeabi_dadd+0x5c>
 8001618:	4c63      	ldr	r4, [pc, #396]	; (80017a8 <__aeabi_dadd+0x374>)
 800161a:	1c72      	adds	r2, r6, #1
 800161c:	4222      	tst	r2, r4
 800161e:	d000      	beq.n	8001622 <__aeabi_dadd+0x1ee>
 8001620:	e0e0      	b.n	80017e4 <__aeabi_dadd+0x3b0>
 8001622:	000a      	movs	r2, r1
 8001624:	431a      	orrs	r2, r3
 8001626:	2e00      	cmp	r6, #0
 8001628:	d000      	beq.n	800162c <__aeabi_dadd+0x1f8>
 800162a:	e174      	b.n	8001916 <__aeabi_dadd+0x4e2>
 800162c:	2a00      	cmp	r2, #0
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x1fe>
 8001630:	e1d0      	b.n	80019d4 <__aeabi_dadd+0x5a0>
 8001632:	464a      	mov	r2, r9
 8001634:	4302      	orrs	r2, r0
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x206>
 8001638:	e1e3      	b.n	8001a02 <__aeabi_dadd+0x5ce>
 800163a:	074a      	lsls	r2, r1, #29
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	4313      	orrs	r3, r2
 8001640:	08c9      	lsrs	r1, r1, #3
 8001642:	e029      	b.n	8001698 <__aeabi_dadd+0x264>
 8001644:	464a      	mov	r2, r9
 8001646:	4302      	orrs	r2, r0
 8001648:	d100      	bne.n	800164c <__aeabi_dadd+0x218>
 800164a:	e17d      	b.n	8001948 <__aeabi_dadd+0x514>
 800164c:	1e7a      	subs	r2, r7, #1
 800164e:	2f01      	cmp	r7, #1
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x220>
 8001652:	e0e0      	b.n	8001816 <__aeabi_dadd+0x3e2>
 8001654:	4c52      	ldr	r4, [pc, #328]	; (80017a0 <__aeabi_dadd+0x36c>)
 8001656:	42a7      	cmp	r7, r4
 8001658:	d100      	bne.n	800165c <__aeabi_dadd+0x228>
 800165a:	e166      	b.n	800192a <__aeabi_dadd+0x4f6>
 800165c:	0017      	movs	r7, r2
 800165e:	e7b2      	b.n	80015c6 <__aeabi_dadd+0x192>
 8001660:	0010      	movs	r0, r2
 8001662:	3b1f      	subs	r3, #31
 8001664:	40d8      	lsrs	r0, r3
 8001666:	2920      	cmp	r1, #32
 8001668:	d003      	beq.n	8001672 <__aeabi_dadd+0x23e>
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	1a5b      	subs	r3, r3, r1
 800166e:	409a      	lsls	r2, r3
 8001670:	4314      	orrs	r4, r2
 8001672:	1e63      	subs	r3, r4, #1
 8001674:	419c      	sbcs	r4, r3
 8001676:	2300      	movs	r3, #0
 8001678:	2600      	movs	r6, #0
 800167a:	469a      	mov	sl, r3
 800167c:	4304      	orrs	r4, r0
 800167e:	0763      	lsls	r3, r4, #29
 8001680:	d000      	beq.n	8001684 <__aeabi_dadd+0x250>
 8001682:	e755      	b.n	8001530 <__aeabi_dadd+0xfc>
 8001684:	4652      	mov	r2, sl
 8001686:	08e3      	lsrs	r3, r4, #3
 8001688:	0752      	lsls	r2, r2, #29
 800168a:	4313      	orrs	r3, r2
 800168c:	4652      	mov	r2, sl
 800168e:	0037      	movs	r7, r6
 8001690:	08d1      	lsrs	r1, r2, #3
 8001692:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <__aeabi_dadd+0x36c>)
 8001694:	4297      	cmp	r7, r2
 8001696:	d01f      	beq.n	80016d8 <__aeabi_dadd+0x2a4>
 8001698:	0309      	lsls	r1, r1, #12
 800169a:	057a      	lsls	r2, r7, #21
 800169c:	0b0c      	lsrs	r4, r1, #12
 800169e:	0d52      	lsrs	r2, r2, #21
 80016a0:	e764      	b.n	800156c <__aeabi_dadd+0x138>
 80016a2:	4642      	mov	r2, r8
 80016a4:	464c      	mov	r4, r9
 80016a6:	4314      	orrs	r4, r2
 80016a8:	1e62      	subs	r2, r4, #1
 80016aa:	4194      	sbcs	r4, r2
 80016ac:	18e4      	adds	r4, r4, r3
 80016ae:	429c      	cmp	r4, r3
 80016b0:	4192      	sbcs	r2, r2
 80016b2:	4252      	negs	r2, r2
 80016b4:	4692      	mov	sl, r2
 80016b6:	448a      	add	sl, r1
 80016b8:	4653      	mov	r3, sl
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	d5df      	bpl.n	800167e <__aeabi_dadd+0x24a>
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <__aeabi_dadd+0x36c>)
 80016c0:	3601      	adds	r6, #1
 80016c2:	429e      	cmp	r6, r3
 80016c4:	d000      	beq.n	80016c8 <__aeabi_dadd+0x294>
 80016c6:	e0b3      	b.n	8001830 <__aeabi_dadd+0x3fc>
 80016c8:	0032      	movs	r2, r6
 80016ca:	2400      	movs	r4, #0
 80016cc:	2300      	movs	r3, #0
 80016ce:	e74d      	b.n	800156c <__aeabi_dadd+0x138>
 80016d0:	074a      	lsls	r2, r1, #29
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	08c9      	lsrs	r1, r1, #3
 80016d8:	001a      	movs	r2, r3
 80016da:	430a      	orrs	r2, r1
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x2ac>
 80016de:	e200      	b.n	8001ae2 <__aeabi_dadd+0x6ae>
 80016e0:	2480      	movs	r4, #128	; 0x80
 80016e2:	0324      	lsls	r4, r4, #12
 80016e4:	430c      	orrs	r4, r1
 80016e6:	0324      	lsls	r4, r4, #12
 80016e8:	4a2d      	ldr	r2, [pc, #180]	; (80017a0 <__aeabi_dadd+0x36c>)
 80016ea:	0b24      	lsrs	r4, r4, #12
 80016ec:	e73e      	b.n	800156c <__aeabi_dadd+0x138>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f001 fdb6 	bl	8003260 <__clzsi2>
 80016f4:	0003      	movs	r3, r0
 80016f6:	3318      	adds	r3, #24
 80016f8:	2b1f      	cmp	r3, #31
 80016fa:	dc00      	bgt.n	80016fe <__aeabi_dadd+0x2ca>
 80016fc:	e6f7      	b.n	80014ee <__aeabi_dadd+0xba>
 80016fe:	0022      	movs	r2, r4
 8001700:	3808      	subs	r0, #8
 8001702:	4082      	lsls	r2, r0
 8001704:	2400      	movs	r4, #0
 8001706:	42b3      	cmp	r3, r6
 8001708:	db00      	blt.n	800170c <__aeabi_dadd+0x2d8>
 800170a:	e6fc      	b.n	8001506 <__aeabi_dadd+0xd2>
 800170c:	1af6      	subs	r6, r6, r3
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <__aeabi_dadd+0x370>)
 8001710:	401a      	ands	r2, r3
 8001712:	4692      	mov	sl, r2
 8001714:	e70a      	b.n	800152c <__aeabi_dadd+0xf8>
 8001716:	2f00      	cmp	r7, #0
 8001718:	d02b      	beq.n	8001772 <__aeabi_dadd+0x33e>
 800171a:	1b97      	subs	r7, r2, r6
 800171c:	2e00      	cmp	r6, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x2ee>
 8001720:	e0b8      	b.n	8001894 <__aeabi_dadd+0x460>
 8001722:	4c1f      	ldr	r4, [pc, #124]	; (80017a0 <__aeabi_dadd+0x36c>)
 8001724:	42a2      	cmp	r2, r4
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x2f6>
 8001728:	e11c      	b.n	8001964 <__aeabi_dadd+0x530>
 800172a:	2480      	movs	r4, #128	; 0x80
 800172c:	0424      	lsls	r4, r4, #16
 800172e:	4321      	orrs	r1, r4
 8001730:	2f38      	cmp	r7, #56	; 0x38
 8001732:	dd00      	ble.n	8001736 <__aeabi_dadd+0x302>
 8001734:	e11e      	b.n	8001974 <__aeabi_dadd+0x540>
 8001736:	2f1f      	cmp	r7, #31
 8001738:	dd00      	ble.n	800173c <__aeabi_dadd+0x308>
 800173a:	e19e      	b.n	8001a7a <__aeabi_dadd+0x646>
 800173c:	2620      	movs	r6, #32
 800173e:	000c      	movs	r4, r1
 8001740:	1bf6      	subs	r6, r6, r7
 8001742:	0018      	movs	r0, r3
 8001744:	40b3      	lsls	r3, r6
 8001746:	40b4      	lsls	r4, r6
 8001748:	40f8      	lsrs	r0, r7
 800174a:	1e5e      	subs	r6, r3, #1
 800174c:	41b3      	sbcs	r3, r6
 800174e:	40f9      	lsrs	r1, r7
 8001750:	4304      	orrs	r4, r0
 8001752:	431c      	orrs	r4, r3
 8001754:	4489      	add	r9, r1
 8001756:	4444      	add	r4, r8
 8001758:	4544      	cmp	r4, r8
 800175a:	419b      	sbcs	r3, r3
 800175c:	425b      	negs	r3, r3
 800175e:	444b      	add	r3, r9
 8001760:	469a      	mov	sl, r3
 8001762:	0016      	movs	r6, r2
 8001764:	e7a8      	b.n	80016b8 <__aeabi_dadd+0x284>
 8001766:	4642      	mov	r2, r8
 8001768:	464c      	mov	r4, r9
 800176a:	4314      	orrs	r4, r2
 800176c:	1e62      	subs	r2, r4, #1
 800176e:	4194      	sbcs	r4, r2
 8001770:	e6a6      	b.n	80014c0 <__aeabi_dadd+0x8c>
 8001772:	4c0d      	ldr	r4, [pc, #52]	; (80017a8 <__aeabi_dadd+0x374>)
 8001774:	1c72      	adds	r2, r6, #1
 8001776:	4222      	tst	r2, r4
 8001778:	d000      	beq.n	800177c <__aeabi_dadd+0x348>
 800177a:	e0a8      	b.n	80018ce <__aeabi_dadd+0x49a>
 800177c:	000a      	movs	r2, r1
 800177e:	431a      	orrs	r2, r3
 8001780:	2e00      	cmp	r6, #0
 8001782:	d000      	beq.n	8001786 <__aeabi_dadd+0x352>
 8001784:	e10a      	b.n	800199c <__aeabi_dadd+0x568>
 8001786:	2a00      	cmp	r2, #0
 8001788:	d100      	bne.n	800178c <__aeabi_dadd+0x358>
 800178a:	e15e      	b.n	8001a4a <__aeabi_dadd+0x616>
 800178c:	464a      	mov	r2, r9
 800178e:	4302      	orrs	r2, r0
 8001790:	d000      	beq.n	8001794 <__aeabi_dadd+0x360>
 8001792:	e161      	b.n	8001a58 <__aeabi_dadd+0x624>
 8001794:	074a      	lsls	r2, r1, #29
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	4313      	orrs	r3, r2
 800179a:	08c9      	lsrs	r1, r1, #3
 800179c:	e77c      	b.n	8001698 <__aeabi_dadd+0x264>
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	000007ff 	.word	0x000007ff
 80017a4:	ff7fffff 	.word	0xff7fffff
 80017a8:	000007fe 	.word	0x000007fe
 80017ac:	4ccf      	ldr	r4, [pc, #828]	; (8001aec <__aeabi_dadd+0x6b8>)
 80017ae:	42a2      	cmp	r2, r4
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dadd+0x380>
 80017b2:	e0ce      	b.n	8001952 <__aeabi_dadd+0x51e>
 80017b4:	2480      	movs	r4, #128	; 0x80
 80017b6:	0424      	lsls	r4, r4, #16
 80017b8:	4321      	orrs	r1, r4
 80017ba:	2f38      	cmp	r7, #56	; 0x38
 80017bc:	dc5b      	bgt.n	8001876 <__aeabi_dadd+0x442>
 80017be:	2f1f      	cmp	r7, #31
 80017c0:	dd00      	ble.n	80017c4 <__aeabi_dadd+0x390>
 80017c2:	e0dc      	b.n	800197e <__aeabi_dadd+0x54a>
 80017c4:	2520      	movs	r5, #32
 80017c6:	000c      	movs	r4, r1
 80017c8:	1bed      	subs	r5, r5, r7
 80017ca:	001e      	movs	r6, r3
 80017cc:	40ab      	lsls	r3, r5
 80017ce:	40ac      	lsls	r4, r5
 80017d0:	40fe      	lsrs	r6, r7
 80017d2:	1e5d      	subs	r5, r3, #1
 80017d4:	41ab      	sbcs	r3, r5
 80017d6:	4334      	orrs	r4, r6
 80017d8:	40f9      	lsrs	r1, r7
 80017da:	431c      	orrs	r4, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	1a5b      	subs	r3, r3, r1
 80017e0:	4699      	mov	r9, r3
 80017e2:	e04c      	b.n	800187e <__aeabi_dadd+0x44a>
 80017e4:	464a      	mov	r2, r9
 80017e6:	1a1c      	subs	r4, r3, r0
 80017e8:	1a88      	subs	r0, r1, r2
 80017ea:	42a3      	cmp	r3, r4
 80017ec:	4192      	sbcs	r2, r2
 80017ee:	4252      	negs	r2, r2
 80017f0:	4692      	mov	sl, r2
 80017f2:	0002      	movs	r2, r0
 80017f4:	4650      	mov	r0, sl
 80017f6:	1a12      	subs	r2, r2, r0
 80017f8:	4692      	mov	sl, r2
 80017fa:	0212      	lsls	r2, r2, #8
 80017fc:	d478      	bmi.n	80018f0 <__aeabi_dadd+0x4bc>
 80017fe:	4653      	mov	r3, sl
 8001800:	4323      	orrs	r3, r4
 8001802:	d000      	beq.n	8001806 <__aeabi_dadd+0x3d2>
 8001804:	e66a      	b.n	80014dc <__aeabi_dadd+0xa8>
 8001806:	2100      	movs	r1, #0
 8001808:	2500      	movs	r5, #0
 800180a:	e745      	b.n	8001698 <__aeabi_dadd+0x264>
 800180c:	074a      	lsls	r2, r1, #29
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	4313      	orrs	r3, r2
 8001812:	08c9      	lsrs	r1, r1, #3
 8001814:	e73d      	b.n	8001692 <__aeabi_dadd+0x25e>
 8001816:	181c      	adds	r4, r3, r0
 8001818:	429c      	cmp	r4, r3
 800181a:	419b      	sbcs	r3, r3
 800181c:	4449      	add	r1, r9
 800181e:	468a      	mov	sl, r1
 8001820:	425b      	negs	r3, r3
 8001822:	449a      	add	sl, r3
 8001824:	4653      	mov	r3, sl
 8001826:	2601      	movs	r6, #1
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	d400      	bmi.n	800182e <__aeabi_dadd+0x3fa>
 800182c:	e727      	b.n	800167e <__aeabi_dadd+0x24a>
 800182e:	2602      	movs	r6, #2
 8001830:	4652      	mov	r2, sl
 8001832:	4baf      	ldr	r3, [pc, #700]	; (8001af0 <__aeabi_dadd+0x6bc>)
 8001834:	2101      	movs	r1, #1
 8001836:	401a      	ands	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	4021      	ands	r1, r4
 800183c:	0862      	lsrs	r2, r4, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	07dc      	lsls	r4, r3, #31
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	469a      	mov	sl, r3
 8001846:	4314      	orrs	r4, r2
 8001848:	e670      	b.n	800152c <__aeabi_dadd+0xf8>
 800184a:	003a      	movs	r2, r7
 800184c:	464c      	mov	r4, r9
 800184e:	3a20      	subs	r2, #32
 8001850:	40d4      	lsrs	r4, r2
 8001852:	46a4      	mov	ip, r4
 8001854:	2f20      	cmp	r7, #32
 8001856:	d007      	beq.n	8001868 <__aeabi_dadd+0x434>
 8001858:	2240      	movs	r2, #64	; 0x40
 800185a:	4648      	mov	r0, r9
 800185c:	1bd2      	subs	r2, r2, r7
 800185e:	4090      	lsls	r0, r2
 8001860:	0002      	movs	r2, r0
 8001862:	4640      	mov	r0, r8
 8001864:	4310      	orrs	r0, r2
 8001866:	4680      	mov	r8, r0
 8001868:	4640      	mov	r0, r8
 800186a:	1e42      	subs	r2, r0, #1
 800186c:	4190      	sbcs	r0, r2
 800186e:	4662      	mov	r2, ip
 8001870:	0004      	movs	r4, r0
 8001872:	4314      	orrs	r4, r2
 8001874:	e624      	b.n	80014c0 <__aeabi_dadd+0x8c>
 8001876:	4319      	orrs	r1, r3
 8001878:	000c      	movs	r4, r1
 800187a:	1e63      	subs	r3, r4, #1
 800187c:	419c      	sbcs	r4, r3
 800187e:	4643      	mov	r3, r8
 8001880:	1b1c      	subs	r4, r3, r4
 8001882:	45a0      	cmp	r8, r4
 8001884:	419b      	sbcs	r3, r3
 8001886:	4649      	mov	r1, r9
 8001888:	425b      	negs	r3, r3
 800188a:	1acb      	subs	r3, r1, r3
 800188c:	469a      	mov	sl, r3
 800188e:	4665      	mov	r5, ip
 8001890:	0016      	movs	r6, r2
 8001892:	e61b      	b.n	80014cc <__aeabi_dadd+0x98>
 8001894:	000c      	movs	r4, r1
 8001896:	431c      	orrs	r4, r3
 8001898:	d100      	bne.n	800189c <__aeabi_dadd+0x468>
 800189a:	e0c7      	b.n	8001a2c <__aeabi_dadd+0x5f8>
 800189c:	1e7c      	subs	r4, r7, #1
 800189e:	2f01      	cmp	r7, #1
 80018a0:	d100      	bne.n	80018a4 <__aeabi_dadd+0x470>
 80018a2:	e0f9      	b.n	8001a98 <__aeabi_dadd+0x664>
 80018a4:	4e91      	ldr	r6, [pc, #580]	; (8001aec <__aeabi_dadd+0x6b8>)
 80018a6:	42b7      	cmp	r7, r6
 80018a8:	d05c      	beq.n	8001964 <__aeabi_dadd+0x530>
 80018aa:	0027      	movs	r7, r4
 80018ac:	e740      	b.n	8001730 <__aeabi_dadd+0x2fc>
 80018ae:	2220      	movs	r2, #32
 80018b0:	464c      	mov	r4, r9
 80018b2:	4640      	mov	r0, r8
 80018b4:	1bd2      	subs	r2, r2, r7
 80018b6:	4094      	lsls	r4, r2
 80018b8:	40f8      	lsrs	r0, r7
 80018ba:	4304      	orrs	r4, r0
 80018bc:	4640      	mov	r0, r8
 80018be:	4090      	lsls	r0, r2
 80018c0:	1e42      	subs	r2, r0, #1
 80018c2:	4190      	sbcs	r0, r2
 80018c4:	464a      	mov	r2, r9
 80018c6:	40fa      	lsrs	r2, r7
 80018c8:	4304      	orrs	r4, r0
 80018ca:	1889      	adds	r1, r1, r2
 80018cc:	e6ee      	b.n	80016ac <__aeabi_dadd+0x278>
 80018ce:	4c87      	ldr	r4, [pc, #540]	; (8001aec <__aeabi_dadd+0x6b8>)
 80018d0:	42a2      	cmp	r2, r4
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x4a2>
 80018d4:	e6f9      	b.n	80016ca <__aeabi_dadd+0x296>
 80018d6:	1818      	adds	r0, r3, r0
 80018d8:	4298      	cmp	r0, r3
 80018da:	419b      	sbcs	r3, r3
 80018dc:	4449      	add	r1, r9
 80018de:	425b      	negs	r3, r3
 80018e0:	18cb      	adds	r3, r1, r3
 80018e2:	07dc      	lsls	r4, r3, #31
 80018e4:	0840      	lsrs	r0, r0, #1
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	469a      	mov	sl, r3
 80018ea:	0016      	movs	r6, r2
 80018ec:	4304      	orrs	r4, r0
 80018ee:	e6c6      	b.n	800167e <__aeabi_dadd+0x24a>
 80018f0:	4642      	mov	r2, r8
 80018f2:	1ad4      	subs	r4, r2, r3
 80018f4:	45a0      	cmp	r8, r4
 80018f6:	4180      	sbcs	r0, r0
 80018f8:	464b      	mov	r3, r9
 80018fa:	4240      	negs	r0, r0
 80018fc:	1a59      	subs	r1, r3, r1
 80018fe:	1a0b      	subs	r3, r1, r0
 8001900:	469a      	mov	sl, r3
 8001902:	4665      	mov	r5, ip
 8001904:	e5ea      	b.n	80014dc <__aeabi_dadd+0xa8>
 8001906:	464b      	mov	r3, r9
 8001908:	464a      	mov	r2, r9
 800190a:	08c0      	lsrs	r0, r0, #3
 800190c:	075b      	lsls	r3, r3, #29
 800190e:	4665      	mov	r5, ip
 8001910:	4303      	orrs	r3, r0
 8001912:	08d1      	lsrs	r1, r2, #3
 8001914:	e6bd      	b.n	8001692 <__aeabi_dadd+0x25e>
 8001916:	2a00      	cmp	r2, #0
 8001918:	d000      	beq.n	800191c <__aeabi_dadd+0x4e8>
 800191a:	e08e      	b.n	8001a3a <__aeabi_dadd+0x606>
 800191c:	464b      	mov	r3, r9
 800191e:	4303      	orrs	r3, r0
 8001920:	d117      	bne.n	8001952 <__aeabi_dadd+0x51e>
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	2500      	movs	r5, #0
 8001926:	0309      	lsls	r1, r1, #12
 8001928:	e6da      	b.n	80016e0 <__aeabi_dadd+0x2ac>
 800192a:	074a      	lsls	r2, r1, #29
 800192c:	08db      	lsrs	r3, r3, #3
 800192e:	4313      	orrs	r3, r2
 8001930:	08c9      	lsrs	r1, r1, #3
 8001932:	e6d1      	b.n	80016d8 <__aeabi_dadd+0x2a4>
 8001934:	1a1c      	subs	r4, r3, r0
 8001936:	464a      	mov	r2, r9
 8001938:	42a3      	cmp	r3, r4
 800193a:	419b      	sbcs	r3, r3
 800193c:	1a89      	subs	r1, r1, r2
 800193e:	425b      	negs	r3, r3
 8001940:	1acb      	subs	r3, r1, r3
 8001942:	469a      	mov	sl, r3
 8001944:	2601      	movs	r6, #1
 8001946:	e5c1      	b.n	80014cc <__aeabi_dadd+0x98>
 8001948:	074a      	lsls	r2, r1, #29
 800194a:	08db      	lsrs	r3, r3, #3
 800194c:	4313      	orrs	r3, r2
 800194e:	08c9      	lsrs	r1, r1, #3
 8001950:	e69f      	b.n	8001692 <__aeabi_dadd+0x25e>
 8001952:	4643      	mov	r3, r8
 8001954:	08d8      	lsrs	r0, r3, #3
 8001956:	464b      	mov	r3, r9
 8001958:	464a      	mov	r2, r9
 800195a:	075b      	lsls	r3, r3, #29
 800195c:	4665      	mov	r5, ip
 800195e:	4303      	orrs	r3, r0
 8001960:	08d1      	lsrs	r1, r2, #3
 8001962:	e6b9      	b.n	80016d8 <__aeabi_dadd+0x2a4>
 8001964:	4643      	mov	r3, r8
 8001966:	08d8      	lsrs	r0, r3, #3
 8001968:	464b      	mov	r3, r9
 800196a:	464a      	mov	r2, r9
 800196c:	075b      	lsls	r3, r3, #29
 800196e:	4303      	orrs	r3, r0
 8001970:	08d1      	lsrs	r1, r2, #3
 8001972:	e6b1      	b.n	80016d8 <__aeabi_dadd+0x2a4>
 8001974:	4319      	orrs	r1, r3
 8001976:	000c      	movs	r4, r1
 8001978:	1e63      	subs	r3, r4, #1
 800197a:	419c      	sbcs	r4, r3
 800197c:	e6eb      	b.n	8001756 <__aeabi_dadd+0x322>
 800197e:	003c      	movs	r4, r7
 8001980:	000d      	movs	r5, r1
 8001982:	3c20      	subs	r4, #32
 8001984:	40e5      	lsrs	r5, r4
 8001986:	2f20      	cmp	r7, #32
 8001988:	d003      	beq.n	8001992 <__aeabi_dadd+0x55e>
 800198a:	2440      	movs	r4, #64	; 0x40
 800198c:	1be4      	subs	r4, r4, r7
 800198e:	40a1      	lsls	r1, r4
 8001990:	430b      	orrs	r3, r1
 8001992:	001c      	movs	r4, r3
 8001994:	1e63      	subs	r3, r4, #1
 8001996:	419c      	sbcs	r4, r3
 8001998:	432c      	orrs	r4, r5
 800199a:	e770      	b.n	800187e <__aeabi_dadd+0x44a>
 800199c:	2a00      	cmp	r2, #0
 800199e:	d0e1      	beq.n	8001964 <__aeabi_dadd+0x530>
 80019a0:	464a      	mov	r2, r9
 80019a2:	4302      	orrs	r2, r0
 80019a4:	d0c1      	beq.n	800192a <__aeabi_dadd+0x4f6>
 80019a6:	074a      	lsls	r2, r1, #29
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	08c9      	lsrs	r1, r1, #3
 80019b0:	0312      	lsls	r2, r2, #12
 80019b2:	4211      	tst	r1, r2
 80019b4:	d008      	beq.n	80019c8 <__aeabi_dadd+0x594>
 80019b6:	4648      	mov	r0, r9
 80019b8:	08c4      	lsrs	r4, r0, #3
 80019ba:	4214      	tst	r4, r2
 80019bc:	d104      	bne.n	80019c8 <__aeabi_dadd+0x594>
 80019be:	4643      	mov	r3, r8
 80019c0:	0021      	movs	r1, r4
 80019c2:	08db      	lsrs	r3, r3, #3
 80019c4:	0742      	lsls	r2, r0, #29
 80019c6:	4313      	orrs	r3, r2
 80019c8:	0f5a      	lsrs	r2, r3, #29
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	0752      	lsls	r2, r2, #29
 80019ce:	08db      	lsrs	r3, r3, #3
 80019d0:	4313      	orrs	r3, r2
 80019d2:	e681      	b.n	80016d8 <__aeabi_dadd+0x2a4>
 80019d4:	464b      	mov	r3, r9
 80019d6:	4303      	orrs	r3, r0
 80019d8:	d100      	bne.n	80019dc <__aeabi_dadd+0x5a8>
 80019da:	e714      	b.n	8001806 <__aeabi_dadd+0x3d2>
 80019dc:	464b      	mov	r3, r9
 80019de:	464a      	mov	r2, r9
 80019e0:	08c0      	lsrs	r0, r0, #3
 80019e2:	075b      	lsls	r3, r3, #29
 80019e4:	4665      	mov	r5, ip
 80019e6:	4303      	orrs	r3, r0
 80019e8:	08d1      	lsrs	r1, r2, #3
 80019ea:	e655      	b.n	8001698 <__aeabi_dadd+0x264>
 80019ec:	1ac4      	subs	r4, r0, r3
 80019ee:	45a0      	cmp	r8, r4
 80019f0:	4180      	sbcs	r0, r0
 80019f2:	464b      	mov	r3, r9
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a59      	subs	r1, r3, r1
 80019f8:	1a0b      	subs	r3, r1, r0
 80019fa:	469a      	mov	sl, r3
 80019fc:	4665      	mov	r5, ip
 80019fe:	2601      	movs	r6, #1
 8001a00:	e564      	b.n	80014cc <__aeabi_dadd+0x98>
 8001a02:	1a1c      	subs	r4, r3, r0
 8001a04:	464a      	mov	r2, r9
 8001a06:	42a3      	cmp	r3, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	1a8a      	subs	r2, r1, r2
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a12      	subs	r2, r2, r0
 8001a10:	4692      	mov	sl, r2
 8001a12:	0212      	lsls	r2, r2, #8
 8001a14:	d549      	bpl.n	8001aaa <__aeabi_dadd+0x676>
 8001a16:	4642      	mov	r2, r8
 8001a18:	1ad4      	subs	r4, r2, r3
 8001a1a:	45a0      	cmp	r8, r4
 8001a1c:	4180      	sbcs	r0, r0
 8001a1e:	464b      	mov	r3, r9
 8001a20:	4240      	negs	r0, r0
 8001a22:	1a59      	subs	r1, r3, r1
 8001a24:	1a0b      	subs	r3, r1, r0
 8001a26:	469a      	mov	sl, r3
 8001a28:	4665      	mov	r5, ip
 8001a2a:	e57f      	b.n	800152c <__aeabi_dadd+0xf8>
 8001a2c:	464b      	mov	r3, r9
 8001a2e:	464a      	mov	r2, r9
 8001a30:	08c0      	lsrs	r0, r0, #3
 8001a32:	075b      	lsls	r3, r3, #29
 8001a34:	4303      	orrs	r3, r0
 8001a36:	08d1      	lsrs	r1, r2, #3
 8001a38:	e62b      	b.n	8001692 <__aeabi_dadd+0x25e>
 8001a3a:	464a      	mov	r2, r9
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	4302      	orrs	r2, r0
 8001a40:	d138      	bne.n	8001ab4 <__aeabi_dadd+0x680>
 8001a42:	074a      	lsls	r2, r1, #29
 8001a44:	4313      	orrs	r3, r2
 8001a46:	08c9      	lsrs	r1, r1, #3
 8001a48:	e646      	b.n	80016d8 <__aeabi_dadd+0x2a4>
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	08c0      	lsrs	r0, r0, #3
 8001a50:	075b      	lsls	r3, r3, #29
 8001a52:	4303      	orrs	r3, r0
 8001a54:	08d1      	lsrs	r1, r2, #3
 8001a56:	e61f      	b.n	8001698 <__aeabi_dadd+0x264>
 8001a58:	181c      	adds	r4, r3, r0
 8001a5a:	429c      	cmp	r4, r3
 8001a5c:	419b      	sbcs	r3, r3
 8001a5e:	4449      	add	r1, r9
 8001a60:	468a      	mov	sl, r1
 8001a62:	425b      	negs	r3, r3
 8001a64:	449a      	add	sl, r3
 8001a66:	4653      	mov	r3, sl
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x63a>
 8001a6c:	e607      	b.n	800167e <__aeabi_dadd+0x24a>
 8001a6e:	4652      	mov	r2, sl
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <__aeabi_dadd+0x6bc>)
 8001a72:	2601      	movs	r6, #1
 8001a74:	401a      	ands	r2, r3
 8001a76:	4692      	mov	sl, r2
 8001a78:	e601      	b.n	800167e <__aeabi_dadd+0x24a>
 8001a7a:	003c      	movs	r4, r7
 8001a7c:	000e      	movs	r6, r1
 8001a7e:	3c20      	subs	r4, #32
 8001a80:	40e6      	lsrs	r6, r4
 8001a82:	2f20      	cmp	r7, #32
 8001a84:	d003      	beq.n	8001a8e <__aeabi_dadd+0x65a>
 8001a86:	2440      	movs	r4, #64	; 0x40
 8001a88:	1be4      	subs	r4, r4, r7
 8001a8a:	40a1      	lsls	r1, r4
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	001c      	movs	r4, r3
 8001a90:	1e63      	subs	r3, r4, #1
 8001a92:	419c      	sbcs	r4, r3
 8001a94:	4334      	orrs	r4, r6
 8001a96:	e65e      	b.n	8001756 <__aeabi_dadd+0x322>
 8001a98:	4443      	add	r3, r8
 8001a9a:	4283      	cmp	r3, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	4449      	add	r1, r9
 8001aa0:	468a      	mov	sl, r1
 8001aa2:	4240      	negs	r0, r0
 8001aa4:	001c      	movs	r4, r3
 8001aa6:	4482      	add	sl, r0
 8001aa8:	e6bc      	b.n	8001824 <__aeabi_dadd+0x3f0>
 8001aaa:	4653      	mov	r3, sl
 8001aac:	4323      	orrs	r3, r4
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dadd+0x67e>
 8001ab0:	e6a9      	b.n	8001806 <__aeabi_dadd+0x3d2>
 8001ab2:	e5e4      	b.n	800167e <__aeabi_dadd+0x24a>
 8001ab4:	074a      	lsls	r2, r1, #29
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	08c9      	lsrs	r1, r1, #3
 8001abc:	0312      	lsls	r2, r2, #12
 8001abe:	4211      	tst	r1, r2
 8001ac0:	d009      	beq.n	8001ad6 <__aeabi_dadd+0x6a2>
 8001ac2:	4648      	mov	r0, r9
 8001ac4:	08c4      	lsrs	r4, r0, #3
 8001ac6:	4214      	tst	r4, r2
 8001ac8:	d105      	bne.n	8001ad6 <__aeabi_dadd+0x6a2>
 8001aca:	4643      	mov	r3, r8
 8001acc:	4665      	mov	r5, ip
 8001ace:	0021      	movs	r1, r4
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	0742      	lsls	r2, r0, #29
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	0f5a      	lsrs	r2, r3, #29
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	0752      	lsls	r2, r2, #29
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	e5fa      	b.n	80016d8 <__aeabi_dadd+0x2a4>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	4a01      	ldr	r2, [pc, #4]	; (8001aec <__aeabi_dadd+0x6b8>)
 8001ae6:	001c      	movs	r4, r3
 8001ae8:	e540      	b.n	800156c <__aeabi_dadd+0x138>
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	000007ff 	.word	0x000007ff
 8001af0:	ff7fffff 	.word	0xff7fffff

08001af4 <__aeabi_ddiv>:
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	4657      	mov	r7, sl
 8001af8:	464e      	mov	r6, r9
 8001afa:	4645      	mov	r5, r8
 8001afc:	46de      	mov	lr, fp
 8001afe:	b5e0      	push	{r5, r6, r7, lr}
 8001b00:	030c      	lsls	r4, r1, #12
 8001b02:	001f      	movs	r7, r3
 8001b04:	004b      	lsls	r3, r1, #1
 8001b06:	4681      	mov	r9, r0
 8001b08:	4692      	mov	sl, r2
 8001b0a:	0005      	movs	r5, r0
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	0b24      	lsrs	r4, r4, #12
 8001b10:	0d5b      	lsrs	r3, r3, #21
 8001b12:	0fce      	lsrs	r6, r1, #31
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d100      	bne.n	8001b1a <__aeabi_ddiv+0x26>
 8001b18:	e152      	b.n	8001dc0 <__aeabi_ddiv+0x2cc>
 8001b1a:	4ad2      	ldr	r2, [pc, #840]	; (8001e64 <__aeabi_ddiv+0x370>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_ddiv+0x2e>
 8001b20:	e16e      	b.n	8001e00 <__aeabi_ddiv+0x30c>
 8001b22:	0f42      	lsrs	r2, r0, #29
 8001b24:	00e4      	lsls	r4, r4, #3
 8001b26:	4314      	orrs	r4, r2
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0412      	lsls	r2, r2, #16
 8001b2c:	4322      	orrs	r2, r4
 8001b2e:	4690      	mov	r8, r2
 8001b30:	4acd      	ldr	r2, [pc, #820]	; (8001e68 <__aeabi_ddiv+0x374>)
 8001b32:	00c5      	lsls	r5, r0, #3
 8001b34:	4693      	mov	fp, r2
 8001b36:	449b      	add	fp, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	033c      	lsls	r4, r7, #12
 8001b40:	007b      	lsls	r3, r7, #1
 8001b42:	4650      	mov	r0, sl
 8001b44:	0b24      	lsrs	r4, r4, #12
 8001b46:	0d5b      	lsrs	r3, r3, #21
 8001b48:	0fff      	lsrs	r7, r7, #31
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_ddiv+0x5c>
 8001b4e:	e11a      	b.n	8001d86 <__aeabi_ddiv+0x292>
 8001b50:	4ac4      	ldr	r2, [pc, #784]	; (8001e64 <__aeabi_ddiv+0x370>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d100      	bne.n	8001b58 <__aeabi_ddiv+0x64>
 8001b56:	e15e      	b.n	8001e16 <__aeabi_ddiv+0x322>
 8001b58:	0f42      	lsrs	r2, r0, #29
 8001b5a:	00e4      	lsls	r4, r4, #3
 8001b5c:	4322      	orrs	r2, r4
 8001b5e:	2480      	movs	r4, #128	; 0x80
 8001b60:	0424      	lsls	r4, r4, #16
 8001b62:	4314      	orrs	r4, r2
 8001b64:	4ac0      	ldr	r2, [pc, #768]	; (8001e68 <__aeabi_ddiv+0x374>)
 8001b66:	00c1      	lsls	r1, r0, #3
 8001b68:	4694      	mov	ip, r2
 8001b6a:	465a      	mov	r2, fp
 8001b6c:	4463      	add	r3, ip
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	469b      	mov	fp, r3
 8001b72:	2000      	movs	r0, #0
 8001b74:	0033      	movs	r3, r6
 8001b76:	407b      	eors	r3, r7
 8001b78:	469a      	mov	sl, r3
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d827      	bhi.n	8001bd0 <__aeabi_ddiv+0xdc>
 8001b80:	4aba      	ldr	r2, [pc, #744]	; (8001e6c <__aeabi_ddiv+0x378>)
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	58d3      	ldr	r3, [r2, r3]
 8001b86:	469f      	mov	pc, r3
 8001b88:	46b2      	mov	sl, r6
 8001b8a:	9b00      	ldr	r3, [sp, #0]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d016      	beq.n	8001bbe <__aeabi_ddiv+0xca>
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0xa2>
 8001b94:	e287      	b.n	80020a6 <__aeabi_ddiv+0x5b2>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d000      	beq.n	8001b9c <__aeabi_ddiv+0xa8>
 8001b9a:	e0d5      	b.n	8001d48 <__aeabi_ddiv+0x254>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2500      	movs	r5, #0
 8001ba2:	051b      	lsls	r3, r3, #20
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	4652      	mov	r2, sl
 8001ba8:	07d2      	lsls	r2, r2, #31
 8001baa:	4313      	orrs	r3, r2
 8001bac:	0028      	movs	r0, r5
 8001bae:	0019      	movs	r1, r3
 8001bb0:	b005      	add	sp, #20
 8001bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001bb4:	46bb      	mov	fp, r7
 8001bb6:	46b2      	mov	sl, r6
 8001bb8:	46a9      	mov	r9, r5
 8001bba:	46a0      	mov	r8, r4
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	4ba8      	ldr	r3, [pc, #672]	; (8001e64 <__aeabi_ddiv+0x370>)
 8001bc4:	e7ed      	b.n	8001ba2 <__aeabi_ddiv+0xae>
 8001bc6:	46ba      	mov	sl, r7
 8001bc8:	46a0      	mov	r8, r4
 8001bca:	000d      	movs	r5, r1
 8001bcc:	9000      	str	r0, [sp, #0]
 8001bce:	e7dc      	b.n	8001b8a <__aeabi_ddiv+0x96>
 8001bd0:	4544      	cmp	r4, r8
 8001bd2:	d200      	bcs.n	8001bd6 <__aeabi_ddiv+0xe2>
 8001bd4:	e1c4      	b.n	8001f60 <__aeabi_ddiv+0x46c>
 8001bd6:	d100      	bne.n	8001bda <__aeabi_ddiv+0xe6>
 8001bd8:	e1bf      	b.n	8001f5a <__aeabi_ddiv+0x466>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	425b      	negs	r3, r3
 8001bde:	469c      	mov	ip, r3
 8001be0:	002e      	movs	r6, r5
 8001be2:	4640      	mov	r0, r8
 8001be4:	2500      	movs	r5, #0
 8001be6:	44e3      	add	fp, ip
 8001be8:	0223      	lsls	r3, r4, #8
 8001bea:	0e0c      	lsrs	r4, r1, #24
 8001bec:	431c      	orrs	r4, r3
 8001bee:	0c1b      	lsrs	r3, r3, #16
 8001bf0:	4699      	mov	r9, r3
 8001bf2:	0423      	lsls	r3, r4, #16
 8001bf4:	020a      	lsls	r2, r1, #8
 8001bf6:	0c1f      	lsrs	r7, r3, #16
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	9701      	str	r7, [sp, #4]
 8001bfe:	f7fe fb2f 	bl	8000260 <__aeabi_uidivmod>
 8001c02:	0002      	movs	r2, r0
 8001c04:	437a      	muls	r2, r7
 8001c06:	040b      	lsls	r3, r1, #16
 8001c08:	0c31      	lsrs	r1, r6, #16
 8001c0a:	4680      	mov	r8, r0
 8001c0c:	4319      	orrs	r1, r3
 8001c0e:	428a      	cmp	r2, r1
 8001c10:	d907      	bls.n	8001c22 <__aeabi_ddiv+0x12e>
 8001c12:	2301      	movs	r3, #1
 8001c14:	425b      	negs	r3, r3
 8001c16:	469c      	mov	ip, r3
 8001c18:	1909      	adds	r1, r1, r4
 8001c1a:	44e0      	add	r8, ip
 8001c1c:	428c      	cmp	r4, r1
 8001c1e:	d800      	bhi.n	8001c22 <__aeabi_ddiv+0x12e>
 8001c20:	e201      	b.n	8002026 <__aeabi_ddiv+0x532>
 8001c22:	1a88      	subs	r0, r1, r2
 8001c24:	4649      	mov	r1, r9
 8001c26:	f7fe fb1b 	bl	8000260 <__aeabi_uidivmod>
 8001c2a:	9a01      	ldr	r2, [sp, #4]
 8001c2c:	0436      	lsls	r6, r6, #16
 8001c2e:	4342      	muls	r2, r0
 8001c30:	0409      	lsls	r1, r1, #16
 8001c32:	0c36      	lsrs	r6, r6, #16
 8001c34:	0003      	movs	r3, r0
 8001c36:	430e      	orrs	r6, r1
 8001c38:	42b2      	cmp	r2, r6
 8001c3a:	d904      	bls.n	8001c46 <__aeabi_ddiv+0x152>
 8001c3c:	1936      	adds	r6, r6, r4
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	42b4      	cmp	r4, r6
 8001c42:	d800      	bhi.n	8001c46 <__aeabi_ddiv+0x152>
 8001c44:	e1e9      	b.n	800201a <__aeabi_ddiv+0x526>
 8001c46:	1ab0      	subs	r0, r6, r2
 8001c48:	4642      	mov	r2, r8
 8001c4a:	9e00      	ldr	r6, [sp, #0]
 8001c4c:	0412      	lsls	r2, r2, #16
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	0c33      	lsrs	r3, r6, #16
 8001c52:	001f      	movs	r7, r3
 8001c54:	0c11      	lsrs	r1, r2, #16
 8001c56:	4690      	mov	r8, r2
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	0413      	lsls	r3, r2, #16
 8001c5c:	0432      	lsls	r2, r6, #16
 8001c5e:	0c16      	lsrs	r6, r2, #16
 8001c60:	0032      	movs	r2, r6
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	435a      	muls	r2, r3
 8001c66:	9603      	str	r6, [sp, #12]
 8001c68:	437b      	muls	r3, r7
 8001c6a:	434e      	muls	r6, r1
 8001c6c:	4379      	muls	r1, r7
 8001c6e:	0c17      	lsrs	r7, r2, #16
 8001c70:	46bc      	mov	ip, r7
 8001c72:	199b      	adds	r3, r3, r6
 8001c74:	4463      	add	r3, ip
 8001c76:	429e      	cmp	r6, r3
 8001c78:	d903      	bls.n	8001c82 <__aeabi_ddiv+0x18e>
 8001c7a:	2680      	movs	r6, #128	; 0x80
 8001c7c:	0276      	lsls	r6, r6, #9
 8001c7e:	46b4      	mov	ip, r6
 8001c80:	4461      	add	r1, ip
 8001c82:	0c1e      	lsrs	r6, r3, #16
 8001c84:	1871      	adds	r1, r6, r1
 8001c86:	0416      	lsls	r6, r2, #16
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	0c36      	lsrs	r6, r6, #16
 8001c8c:	199e      	adds	r6, r3, r6
 8001c8e:	4288      	cmp	r0, r1
 8001c90:	d302      	bcc.n	8001c98 <__aeabi_ddiv+0x1a4>
 8001c92:	d112      	bne.n	8001cba <__aeabi_ddiv+0x1c6>
 8001c94:	42b5      	cmp	r5, r6
 8001c96:	d210      	bcs.n	8001cba <__aeabi_ddiv+0x1c6>
 8001c98:	4643      	mov	r3, r8
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	9b00      	ldr	r3, [sp, #0]
 8001c9e:	469c      	mov	ip, r3
 8001ca0:	4465      	add	r5, ip
 8001ca2:	001f      	movs	r7, r3
 8001ca4:	429d      	cmp	r5, r3
 8001ca6:	419b      	sbcs	r3, r3
 8001ca8:	425b      	negs	r3, r3
 8001caa:	191b      	adds	r3, r3, r4
 8001cac:	18c0      	adds	r0, r0, r3
 8001cae:	4284      	cmp	r4, r0
 8001cb0:	d200      	bcs.n	8001cb4 <__aeabi_ddiv+0x1c0>
 8001cb2:	e19e      	b.n	8001ff2 <__aeabi_ddiv+0x4fe>
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1c4>
 8001cb6:	e199      	b.n	8001fec <__aeabi_ddiv+0x4f8>
 8001cb8:	4690      	mov	r8, r2
 8001cba:	1bae      	subs	r6, r5, r6
 8001cbc:	42b5      	cmp	r5, r6
 8001cbe:	41ad      	sbcs	r5, r5
 8001cc0:	1a40      	subs	r0, r0, r1
 8001cc2:	426d      	negs	r5, r5
 8001cc4:	1b40      	subs	r0, r0, r5
 8001cc6:	4284      	cmp	r4, r0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_ddiv+0x1d8>
 8001cca:	e1d2      	b.n	8002072 <__aeabi_ddiv+0x57e>
 8001ccc:	4649      	mov	r1, r9
 8001cce:	f7fe fac7 	bl	8000260 <__aeabi_uidivmod>
 8001cd2:	9a01      	ldr	r2, [sp, #4]
 8001cd4:	040b      	lsls	r3, r1, #16
 8001cd6:	4342      	muls	r2, r0
 8001cd8:	0c31      	lsrs	r1, r6, #16
 8001cda:	0005      	movs	r5, r0
 8001cdc:	4319      	orrs	r1, r3
 8001cde:	428a      	cmp	r2, r1
 8001ce0:	d900      	bls.n	8001ce4 <__aeabi_ddiv+0x1f0>
 8001ce2:	e16c      	b.n	8001fbe <__aeabi_ddiv+0x4ca>
 8001ce4:	1a88      	subs	r0, r1, r2
 8001ce6:	4649      	mov	r1, r9
 8001ce8:	f7fe faba 	bl	8000260 <__aeabi_uidivmod>
 8001cec:	9a01      	ldr	r2, [sp, #4]
 8001cee:	0436      	lsls	r6, r6, #16
 8001cf0:	4342      	muls	r2, r0
 8001cf2:	0409      	lsls	r1, r1, #16
 8001cf4:	0c36      	lsrs	r6, r6, #16
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	430e      	orrs	r6, r1
 8001cfa:	42b2      	cmp	r2, r6
 8001cfc:	d900      	bls.n	8001d00 <__aeabi_ddiv+0x20c>
 8001cfe:	e153      	b.n	8001fa8 <__aeabi_ddiv+0x4b4>
 8001d00:	9803      	ldr	r0, [sp, #12]
 8001d02:	1ab6      	subs	r6, r6, r2
 8001d04:	0002      	movs	r2, r0
 8001d06:	042d      	lsls	r5, r5, #16
 8001d08:	431d      	orrs	r5, r3
 8001d0a:	9f02      	ldr	r7, [sp, #8]
 8001d0c:	042b      	lsls	r3, r5, #16
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	435a      	muls	r2, r3
 8001d12:	437b      	muls	r3, r7
 8001d14:	469c      	mov	ip, r3
 8001d16:	0c29      	lsrs	r1, r5, #16
 8001d18:	4348      	muls	r0, r1
 8001d1a:	0c13      	lsrs	r3, r2, #16
 8001d1c:	4484      	add	ip, r0
 8001d1e:	4463      	add	r3, ip
 8001d20:	4379      	muls	r1, r7
 8001d22:	4298      	cmp	r0, r3
 8001d24:	d903      	bls.n	8001d2e <__aeabi_ddiv+0x23a>
 8001d26:	2080      	movs	r0, #128	; 0x80
 8001d28:	0240      	lsls	r0, r0, #9
 8001d2a:	4684      	mov	ip, r0
 8001d2c:	4461      	add	r1, ip
 8001d2e:	0c18      	lsrs	r0, r3, #16
 8001d30:	0412      	lsls	r2, r2, #16
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	0c12      	lsrs	r2, r2, #16
 8001d36:	1840      	adds	r0, r0, r1
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	4286      	cmp	r6, r0
 8001d3c:	d200      	bcs.n	8001d40 <__aeabi_ddiv+0x24c>
 8001d3e:	e100      	b.n	8001f42 <__aeabi_ddiv+0x44e>
 8001d40:	d100      	bne.n	8001d44 <__aeabi_ddiv+0x250>
 8001d42:	e0fb      	b.n	8001f3c <__aeabi_ddiv+0x448>
 8001d44:	2301      	movs	r3, #1
 8001d46:	431d      	orrs	r5, r3
 8001d48:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <__aeabi_ddiv+0x37c>)
 8001d4a:	445b      	add	r3, fp
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	dc00      	bgt.n	8001d52 <__aeabi_ddiv+0x25e>
 8001d50:	e0aa      	b.n	8001ea8 <__aeabi_ddiv+0x3b4>
 8001d52:	076a      	lsls	r2, r5, #29
 8001d54:	d000      	beq.n	8001d58 <__aeabi_ddiv+0x264>
 8001d56:	e13d      	b.n	8001fd4 <__aeabi_ddiv+0x4e0>
 8001d58:	08e9      	lsrs	r1, r5, #3
 8001d5a:	4642      	mov	r2, r8
 8001d5c:	01d2      	lsls	r2, r2, #7
 8001d5e:	d506      	bpl.n	8001d6e <__aeabi_ddiv+0x27a>
 8001d60:	4642      	mov	r2, r8
 8001d62:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <__aeabi_ddiv+0x380>)
 8001d64:	401a      	ands	r2, r3
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	4690      	mov	r8, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	445b      	add	r3, fp
 8001d6e:	4a42      	ldr	r2, [pc, #264]	; (8001e78 <__aeabi_ddiv+0x384>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_ddiv+0x282>
 8001d74:	e723      	b.n	8001bbe <__aeabi_ddiv+0xca>
 8001d76:	4642      	mov	r2, r8
 8001d78:	055b      	lsls	r3, r3, #21
 8001d7a:	0755      	lsls	r5, r2, #29
 8001d7c:	0252      	lsls	r2, r2, #9
 8001d7e:	430d      	orrs	r5, r1
 8001d80:	0b12      	lsrs	r2, r2, #12
 8001d82:	0d5b      	lsrs	r3, r3, #21
 8001d84:	e70d      	b.n	8001ba2 <__aeabi_ddiv+0xae>
 8001d86:	4651      	mov	r1, sl
 8001d88:	4321      	orrs	r1, r4
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_ddiv+0x29a>
 8001d8c:	e07c      	b.n	8001e88 <__aeabi_ddiv+0x394>
 8001d8e:	2c00      	cmp	r4, #0
 8001d90:	d100      	bne.n	8001d94 <__aeabi_ddiv+0x2a0>
 8001d92:	e0fb      	b.n	8001f8c <__aeabi_ddiv+0x498>
 8001d94:	0020      	movs	r0, r4
 8001d96:	f001 fa63 	bl	8003260 <__clzsi2>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	3a0b      	subs	r2, #11
 8001d9e:	231d      	movs	r3, #29
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	4652      	mov	r2, sl
 8001da4:	0001      	movs	r1, r0
 8001da6:	40da      	lsrs	r2, r3
 8001da8:	4653      	mov	r3, sl
 8001daa:	3908      	subs	r1, #8
 8001dac:	408b      	lsls	r3, r1
 8001dae:	408c      	lsls	r4, r1
 8001db0:	0019      	movs	r1, r3
 8001db2:	4314      	orrs	r4, r2
 8001db4:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <__aeabi_ddiv+0x388>)
 8001db6:	4458      	add	r0, fp
 8001db8:	469b      	mov	fp, r3
 8001dba:	4483      	add	fp, r0
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	e6d9      	b.n	8001b74 <__aeabi_ddiv+0x80>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	4323      	orrs	r3, r4
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	d044      	beq.n	8001e52 <__aeabi_ddiv+0x35e>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d100      	bne.n	8001dce <__aeabi_ddiv+0x2da>
 8001dcc:	e0cf      	b.n	8001f6e <__aeabi_ddiv+0x47a>
 8001dce:	0020      	movs	r0, r4
 8001dd0:	f001 fa46 	bl	8003260 <__clzsi2>
 8001dd4:	0001      	movs	r1, r0
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	390b      	subs	r1, #11
 8001dda:	231d      	movs	r3, #29
 8001ddc:	1a5b      	subs	r3, r3, r1
 8001dde:	4649      	mov	r1, r9
 8001de0:	0010      	movs	r0, r2
 8001de2:	40d9      	lsrs	r1, r3
 8001de4:	3808      	subs	r0, #8
 8001de6:	4084      	lsls	r4, r0
 8001de8:	000b      	movs	r3, r1
 8001dea:	464d      	mov	r5, r9
 8001dec:	4323      	orrs	r3, r4
 8001dee:	4698      	mov	r8, r3
 8001df0:	4085      	lsls	r5, r0
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <__aeabi_ddiv+0x38c>)
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	469b      	mov	fp, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	4699      	mov	r9, r3
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	e69e      	b.n	8001b3e <__aeabi_ddiv+0x4a>
 8001e00:	0002      	movs	r2, r0
 8001e02:	4322      	orrs	r2, r4
 8001e04:	4690      	mov	r8, r2
 8001e06:	d11d      	bne.n	8001e44 <__aeabi_ddiv+0x350>
 8001e08:	2208      	movs	r2, #8
 8001e0a:	469b      	mov	fp, r3
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	2500      	movs	r5, #0
 8001e10:	4691      	mov	r9, r2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	e693      	b.n	8001b3e <__aeabi_ddiv+0x4a>
 8001e16:	4651      	mov	r1, sl
 8001e18:	4321      	orrs	r1, r4
 8001e1a:	d109      	bne.n	8001e30 <__aeabi_ddiv+0x33c>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	2400      	movs	r4, #0
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e6a1      	b.n	8001b74 <__aeabi_ddiv+0x80>
 8001e30:	2303      	movs	r3, #3
 8001e32:	464a      	mov	r2, r9
 8001e34:	431a      	orrs	r2, r3
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <__aeabi_ddiv+0x390>)
 8001e38:	4691      	mov	r9, r2
 8001e3a:	469c      	mov	ip, r3
 8001e3c:	4651      	mov	r1, sl
 8001e3e:	2003      	movs	r0, #3
 8001e40:	44e3      	add	fp, ip
 8001e42:	e697      	b.n	8001b74 <__aeabi_ddiv+0x80>
 8001e44:	220c      	movs	r2, #12
 8001e46:	469b      	mov	fp, r3
 8001e48:	2303      	movs	r3, #3
 8001e4a:	46a0      	mov	r8, r4
 8001e4c:	4691      	mov	r9, r2
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	e675      	b.n	8001b3e <__aeabi_ddiv+0x4a>
 8001e52:	2304      	movs	r3, #4
 8001e54:	4699      	mov	r9, r3
 8001e56:	2300      	movs	r3, #0
 8001e58:	469b      	mov	fp, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	2500      	movs	r5, #0
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	e66d      	b.n	8001b3e <__aeabi_ddiv+0x4a>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff
 8001e68:	fffffc01 	.word	0xfffffc01
 8001e6c:	08010e80 	.word	0x08010e80
 8001e70:	000003ff 	.word	0x000003ff
 8001e74:	feffffff 	.word	0xfeffffff
 8001e78:	000007fe 	.word	0x000007fe
 8001e7c:	000003f3 	.word	0x000003f3
 8001e80:	fffffc0d 	.word	0xfffffc0d
 8001e84:	fffff801 	.word	0xfffff801
 8001e88:	464a      	mov	r2, r9
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	4691      	mov	r9, r2
 8001e90:	2400      	movs	r4, #0
 8001e92:	2001      	movs	r0, #1
 8001e94:	e66e      	b.n	8001b74 <__aeabi_ddiv+0x80>
 8001e96:	2300      	movs	r3, #0
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	2500      	movs	r5, #0
 8001e9e:	4b88      	ldr	r3, [pc, #544]	; (80020c0 <__aeabi_ddiv+0x5cc>)
 8001ea0:	0312      	lsls	r2, r2, #12
 8001ea2:	e67e      	b.n	8001ba2 <__aeabi_ddiv+0xae>
 8001ea4:	2501      	movs	r5, #1
 8001ea6:	426d      	negs	r5, r5
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	1ad2      	subs	r2, r2, r3
 8001eac:	2a38      	cmp	r2, #56	; 0x38
 8001eae:	dd00      	ble.n	8001eb2 <__aeabi_ddiv+0x3be>
 8001eb0:	e674      	b.n	8001b9c <__aeabi_ddiv+0xa8>
 8001eb2:	2a1f      	cmp	r2, #31
 8001eb4:	dc00      	bgt.n	8001eb8 <__aeabi_ddiv+0x3c4>
 8001eb6:	e0bd      	b.n	8002034 <__aeabi_ddiv+0x540>
 8001eb8:	211f      	movs	r1, #31
 8001eba:	4249      	negs	r1, r1
 8001ebc:	1acb      	subs	r3, r1, r3
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	40d9      	lsrs	r1, r3
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	2a20      	cmp	r2, #32
 8001ec6:	d004      	beq.n	8001ed2 <__aeabi_ddiv+0x3de>
 8001ec8:	4641      	mov	r1, r8
 8001eca:	4a7e      	ldr	r2, [pc, #504]	; (80020c4 <__aeabi_ddiv+0x5d0>)
 8001ecc:	445a      	add	r2, fp
 8001ece:	4091      	lsls	r1, r2
 8001ed0:	430d      	orrs	r5, r1
 8001ed2:	0029      	movs	r1, r5
 8001ed4:	1e4a      	subs	r2, r1, #1
 8001ed6:	4191      	sbcs	r1, r2
 8001ed8:	4319      	orrs	r1, r3
 8001eda:	2307      	movs	r3, #7
 8001edc:	001d      	movs	r5, r3
 8001ede:	2200      	movs	r2, #0
 8001ee0:	400d      	ands	r5, r1
 8001ee2:	420b      	tst	r3, r1
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_ddiv+0x3f4>
 8001ee6:	e0d0      	b.n	800208a <__aeabi_ddiv+0x596>
 8001ee8:	220f      	movs	r2, #15
 8001eea:	2300      	movs	r3, #0
 8001eec:	400a      	ands	r2, r1
 8001eee:	2a04      	cmp	r2, #4
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_ddiv+0x400>
 8001ef2:	e0c7      	b.n	8002084 <__aeabi_ddiv+0x590>
 8001ef4:	1d0a      	adds	r2, r1, #4
 8001ef6:	428a      	cmp	r2, r1
 8001ef8:	4189      	sbcs	r1, r1
 8001efa:	4249      	negs	r1, r1
 8001efc:	185b      	adds	r3, r3, r1
 8001efe:	0011      	movs	r1, r2
 8001f00:	021a      	lsls	r2, r3, #8
 8001f02:	d400      	bmi.n	8001f06 <__aeabi_ddiv+0x412>
 8001f04:	e0be      	b.n	8002084 <__aeabi_ddiv+0x590>
 8001f06:	2301      	movs	r3, #1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	e649      	b.n	8001ba2 <__aeabi_ddiv+0xae>
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	4643      	mov	r3, r8
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4213      	tst	r3, r2
 8001f16:	d008      	beq.n	8001f2a <__aeabi_ddiv+0x436>
 8001f18:	4214      	tst	r4, r2
 8001f1a:	d106      	bne.n	8001f2a <__aeabi_ddiv+0x436>
 8001f1c:	4322      	orrs	r2, r4
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46ba      	mov	sl, r7
 8001f22:	000d      	movs	r5, r1
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <__aeabi_ddiv+0x5cc>)
 8001f26:	0b12      	lsrs	r2, r2, #12
 8001f28:	e63b      	b.n	8001ba2 <__aeabi_ddiv+0xae>
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	4643      	mov	r3, r8
 8001f2e:	0312      	lsls	r2, r2, #12
 8001f30:	431a      	orrs	r2, r3
 8001f32:	0312      	lsls	r2, r2, #12
 8001f34:	46b2      	mov	sl, r6
 8001f36:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <__aeabi_ddiv+0x5cc>)
 8001f38:	0b12      	lsrs	r2, r2, #12
 8001f3a:	e632      	b.n	8001ba2 <__aeabi_ddiv+0xae>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x44e>
 8001f40:	e702      	b.n	8001d48 <__aeabi_ddiv+0x254>
 8001f42:	19a6      	adds	r6, r4, r6
 8001f44:	1e6a      	subs	r2, r5, #1
 8001f46:	42a6      	cmp	r6, r4
 8001f48:	d200      	bcs.n	8001f4c <__aeabi_ddiv+0x458>
 8001f4a:	e089      	b.n	8002060 <__aeabi_ddiv+0x56c>
 8001f4c:	4286      	cmp	r6, r0
 8001f4e:	d200      	bcs.n	8001f52 <__aeabi_ddiv+0x45e>
 8001f50:	e09f      	b.n	8002092 <__aeabi_ddiv+0x59e>
 8001f52:	d100      	bne.n	8001f56 <__aeabi_ddiv+0x462>
 8001f54:	e0af      	b.n	80020b6 <__aeabi_ddiv+0x5c2>
 8001f56:	0015      	movs	r5, r2
 8001f58:	e6f4      	b.n	8001d44 <__aeabi_ddiv+0x250>
 8001f5a:	42a9      	cmp	r1, r5
 8001f5c:	d900      	bls.n	8001f60 <__aeabi_ddiv+0x46c>
 8001f5e:	e63c      	b.n	8001bda <__aeabi_ddiv+0xe6>
 8001f60:	4643      	mov	r3, r8
 8001f62:	07de      	lsls	r6, r3, #31
 8001f64:	0858      	lsrs	r0, r3, #1
 8001f66:	086b      	lsrs	r3, r5, #1
 8001f68:	431e      	orrs	r6, r3
 8001f6a:	07ed      	lsls	r5, r5, #31
 8001f6c:	e63c      	b.n	8001be8 <__aeabi_ddiv+0xf4>
 8001f6e:	f001 f977 	bl	8003260 <__clzsi2>
 8001f72:	0001      	movs	r1, r0
 8001f74:	0002      	movs	r2, r0
 8001f76:	3115      	adds	r1, #21
 8001f78:	3220      	adds	r2, #32
 8001f7a:	291c      	cmp	r1, #28
 8001f7c:	dc00      	bgt.n	8001f80 <__aeabi_ddiv+0x48c>
 8001f7e:	e72c      	b.n	8001dda <__aeabi_ddiv+0x2e6>
 8001f80:	464b      	mov	r3, r9
 8001f82:	3808      	subs	r0, #8
 8001f84:	4083      	lsls	r3, r0
 8001f86:	2500      	movs	r5, #0
 8001f88:	4698      	mov	r8, r3
 8001f8a:	e732      	b.n	8001df2 <__aeabi_ddiv+0x2fe>
 8001f8c:	f001 f968 	bl	8003260 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	001a      	movs	r2, r3
 8001f94:	3215      	adds	r2, #21
 8001f96:	3020      	adds	r0, #32
 8001f98:	2a1c      	cmp	r2, #28
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_ddiv+0x4aa>
 8001f9c:	e6ff      	b.n	8001d9e <__aeabi_ddiv+0x2aa>
 8001f9e:	4654      	mov	r4, sl
 8001fa0:	3b08      	subs	r3, #8
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	409c      	lsls	r4, r3
 8001fa6:	e705      	b.n	8001db4 <__aeabi_ddiv+0x2c0>
 8001fa8:	1936      	adds	r6, r6, r4
 8001faa:	3b01      	subs	r3, #1
 8001fac:	42b4      	cmp	r4, r6
 8001fae:	d900      	bls.n	8001fb2 <__aeabi_ddiv+0x4be>
 8001fb0:	e6a6      	b.n	8001d00 <__aeabi_ddiv+0x20c>
 8001fb2:	42b2      	cmp	r2, r6
 8001fb4:	d800      	bhi.n	8001fb8 <__aeabi_ddiv+0x4c4>
 8001fb6:	e6a3      	b.n	8001d00 <__aeabi_ddiv+0x20c>
 8001fb8:	1e83      	subs	r3, r0, #2
 8001fba:	1936      	adds	r6, r6, r4
 8001fbc:	e6a0      	b.n	8001d00 <__aeabi_ddiv+0x20c>
 8001fbe:	1909      	adds	r1, r1, r4
 8001fc0:	3d01      	subs	r5, #1
 8001fc2:	428c      	cmp	r4, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x4d4>
 8001fc6:	e68d      	b.n	8001ce4 <__aeabi_ddiv+0x1f0>
 8001fc8:	428a      	cmp	r2, r1
 8001fca:	d800      	bhi.n	8001fce <__aeabi_ddiv+0x4da>
 8001fcc:	e68a      	b.n	8001ce4 <__aeabi_ddiv+0x1f0>
 8001fce:	1e85      	subs	r5, r0, #2
 8001fd0:	1909      	adds	r1, r1, r4
 8001fd2:	e687      	b.n	8001ce4 <__aeabi_ddiv+0x1f0>
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	402a      	ands	r2, r5
 8001fd8:	2a04      	cmp	r2, #4
 8001fda:	d100      	bne.n	8001fde <__aeabi_ddiv+0x4ea>
 8001fdc:	e6bc      	b.n	8001d58 <__aeabi_ddiv+0x264>
 8001fde:	1d29      	adds	r1, r5, #4
 8001fe0:	42a9      	cmp	r1, r5
 8001fe2:	41ad      	sbcs	r5, r5
 8001fe4:	426d      	negs	r5, r5
 8001fe6:	08c9      	lsrs	r1, r1, #3
 8001fe8:	44a8      	add	r8, r5
 8001fea:	e6b6      	b.n	8001d5a <__aeabi_ddiv+0x266>
 8001fec:	42af      	cmp	r7, r5
 8001fee:	d900      	bls.n	8001ff2 <__aeabi_ddiv+0x4fe>
 8001ff0:	e662      	b.n	8001cb8 <__aeabi_ddiv+0x1c4>
 8001ff2:	4281      	cmp	r1, r0
 8001ff4:	d804      	bhi.n	8002000 <__aeabi_ddiv+0x50c>
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_ddiv+0x506>
 8001ff8:	e65e      	b.n	8001cb8 <__aeabi_ddiv+0x1c4>
 8001ffa:	42ae      	cmp	r6, r5
 8001ffc:	d800      	bhi.n	8002000 <__aeabi_ddiv+0x50c>
 8001ffe:	e65b      	b.n	8001cb8 <__aeabi_ddiv+0x1c4>
 8002000:	2302      	movs	r3, #2
 8002002:	425b      	negs	r3, r3
 8002004:	469c      	mov	ip, r3
 8002006:	9b00      	ldr	r3, [sp, #0]
 8002008:	44e0      	add	r8, ip
 800200a:	469c      	mov	ip, r3
 800200c:	4465      	add	r5, ip
 800200e:	429d      	cmp	r5, r3
 8002010:	419b      	sbcs	r3, r3
 8002012:	425b      	negs	r3, r3
 8002014:	191b      	adds	r3, r3, r4
 8002016:	18c0      	adds	r0, r0, r3
 8002018:	e64f      	b.n	8001cba <__aeabi_ddiv+0x1c6>
 800201a:	42b2      	cmp	r2, r6
 800201c:	d800      	bhi.n	8002020 <__aeabi_ddiv+0x52c>
 800201e:	e612      	b.n	8001c46 <__aeabi_ddiv+0x152>
 8002020:	1e83      	subs	r3, r0, #2
 8002022:	1936      	adds	r6, r6, r4
 8002024:	e60f      	b.n	8001c46 <__aeabi_ddiv+0x152>
 8002026:	428a      	cmp	r2, r1
 8002028:	d800      	bhi.n	800202c <__aeabi_ddiv+0x538>
 800202a:	e5fa      	b.n	8001c22 <__aeabi_ddiv+0x12e>
 800202c:	1e83      	subs	r3, r0, #2
 800202e:	4698      	mov	r8, r3
 8002030:	1909      	adds	r1, r1, r4
 8002032:	e5f6      	b.n	8001c22 <__aeabi_ddiv+0x12e>
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <__aeabi_ddiv+0x5d4>)
 8002036:	0028      	movs	r0, r5
 8002038:	445b      	add	r3, fp
 800203a:	4641      	mov	r1, r8
 800203c:	409d      	lsls	r5, r3
 800203e:	4099      	lsls	r1, r3
 8002040:	40d0      	lsrs	r0, r2
 8002042:	1e6b      	subs	r3, r5, #1
 8002044:	419d      	sbcs	r5, r3
 8002046:	4643      	mov	r3, r8
 8002048:	4301      	orrs	r1, r0
 800204a:	4329      	orrs	r1, r5
 800204c:	40d3      	lsrs	r3, r2
 800204e:	074a      	lsls	r2, r1, #29
 8002050:	d100      	bne.n	8002054 <__aeabi_ddiv+0x560>
 8002052:	e755      	b.n	8001f00 <__aeabi_ddiv+0x40c>
 8002054:	220f      	movs	r2, #15
 8002056:	400a      	ands	r2, r1
 8002058:	2a04      	cmp	r2, #4
 800205a:	d000      	beq.n	800205e <__aeabi_ddiv+0x56a>
 800205c:	e74a      	b.n	8001ef4 <__aeabi_ddiv+0x400>
 800205e:	e74f      	b.n	8001f00 <__aeabi_ddiv+0x40c>
 8002060:	0015      	movs	r5, r2
 8002062:	4286      	cmp	r6, r0
 8002064:	d000      	beq.n	8002068 <__aeabi_ddiv+0x574>
 8002066:	e66d      	b.n	8001d44 <__aeabi_ddiv+0x250>
 8002068:	9a00      	ldr	r2, [sp, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d000      	beq.n	8002070 <__aeabi_ddiv+0x57c>
 800206e:	e669      	b.n	8001d44 <__aeabi_ddiv+0x250>
 8002070:	e66a      	b.n	8001d48 <__aeabi_ddiv+0x254>
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <__aeabi_ddiv+0x5d8>)
 8002074:	445b      	add	r3, fp
 8002076:	2b00      	cmp	r3, #0
 8002078:	dc00      	bgt.n	800207c <__aeabi_ddiv+0x588>
 800207a:	e713      	b.n	8001ea4 <__aeabi_ddiv+0x3b0>
 800207c:	2501      	movs	r5, #1
 800207e:	2100      	movs	r1, #0
 8002080:	44a8      	add	r8, r5
 8002082:	e66a      	b.n	8001d5a <__aeabi_ddiv+0x266>
 8002084:	075d      	lsls	r5, r3, #29
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	0b1a      	lsrs	r2, r3, #12
 800208a:	08c9      	lsrs	r1, r1, #3
 800208c:	2300      	movs	r3, #0
 800208e:	430d      	orrs	r5, r1
 8002090:	e587      	b.n	8001ba2 <__aeabi_ddiv+0xae>
 8002092:	9900      	ldr	r1, [sp, #0]
 8002094:	3d02      	subs	r5, #2
 8002096:	004a      	lsls	r2, r1, #1
 8002098:	428a      	cmp	r2, r1
 800209a:	41bf      	sbcs	r7, r7
 800209c:	427f      	negs	r7, r7
 800209e:	193f      	adds	r7, r7, r4
 80020a0:	19f6      	adds	r6, r6, r7
 80020a2:	9200      	str	r2, [sp, #0]
 80020a4:	e7dd      	b.n	8002062 <__aeabi_ddiv+0x56e>
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	4643      	mov	r3, r8
 80020aa:	0312      	lsls	r2, r2, #12
 80020ac:	431a      	orrs	r2, r3
 80020ae:	0312      	lsls	r2, r2, #12
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <__aeabi_ddiv+0x5cc>)
 80020b2:	0b12      	lsrs	r2, r2, #12
 80020b4:	e575      	b.n	8001ba2 <__aeabi_ddiv+0xae>
 80020b6:	9900      	ldr	r1, [sp, #0]
 80020b8:	4299      	cmp	r1, r3
 80020ba:	d3ea      	bcc.n	8002092 <__aeabi_ddiv+0x59e>
 80020bc:	0015      	movs	r5, r2
 80020be:	e7d3      	b.n	8002068 <__aeabi_ddiv+0x574>
 80020c0:	000007ff 	.word	0x000007ff
 80020c4:	0000043e 	.word	0x0000043e
 80020c8:	0000041e 	.word	0x0000041e
 80020cc:	000003ff 	.word	0x000003ff

080020d0 <__eqdf2>:
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	464e      	mov	r6, r9
 80020d4:	4645      	mov	r5, r8
 80020d6:	46de      	mov	lr, fp
 80020d8:	4657      	mov	r7, sl
 80020da:	4690      	mov	r8, r2
 80020dc:	b5e0      	push	{r5, r6, r7, lr}
 80020de:	0017      	movs	r7, r2
 80020e0:	031a      	lsls	r2, r3, #12
 80020e2:	0b12      	lsrs	r2, r2, #12
 80020e4:	0005      	movs	r5, r0
 80020e6:	4684      	mov	ip, r0
 80020e8:	4819      	ldr	r0, [pc, #100]	; (8002150 <__eqdf2+0x80>)
 80020ea:	030e      	lsls	r6, r1, #12
 80020ec:	004c      	lsls	r4, r1, #1
 80020ee:	4691      	mov	r9, r2
 80020f0:	005a      	lsls	r2, r3, #1
 80020f2:	0fdb      	lsrs	r3, r3, #31
 80020f4:	469b      	mov	fp, r3
 80020f6:	0b36      	lsrs	r6, r6, #12
 80020f8:	0d64      	lsrs	r4, r4, #21
 80020fa:	0fc9      	lsrs	r1, r1, #31
 80020fc:	0d52      	lsrs	r2, r2, #21
 80020fe:	4284      	cmp	r4, r0
 8002100:	d019      	beq.n	8002136 <__eqdf2+0x66>
 8002102:	4282      	cmp	r2, r0
 8002104:	d010      	beq.n	8002128 <__eqdf2+0x58>
 8002106:	2001      	movs	r0, #1
 8002108:	4294      	cmp	r4, r2
 800210a:	d10e      	bne.n	800212a <__eqdf2+0x5a>
 800210c:	454e      	cmp	r6, r9
 800210e:	d10c      	bne.n	800212a <__eqdf2+0x5a>
 8002110:	2001      	movs	r0, #1
 8002112:	45c4      	cmp	ip, r8
 8002114:	d109      	bne.n	800212a <__eqdf2+0x5a>
 8002116:	4559      	cmp	r1, fp
 8002118:	d017      	beq.n	800214a <__eqdf2+0x7a>
 800211a:	2c00      	cmp	r4, #0
 800211c:	d105      	bne.n	800212a <__eqdf2+0x5a>
 800211e:	0030      	movs	r0, r6
 8002120:	4328      	orrs	r0, r5
 8002122:	1e43      	subs	r3, r0, #1
 8002124:	4198      	sbcs	r0, r3
 8002126:	e000      	b.n	800212a <__eqdf2+0x5a>
 8002128:	2001      	movs	r0, #1
 800212a:	bcf0      	pop	{r4, r5, r6, r7}
 800212c:	46bb      	mov	fp, r7
 800212e:	46b2      	mov	sl, r6
 8002130:	46a9      	mov	r9, r5
 8002132:	46a0      	mov	r8, r4
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002136:	0033      	movs	r3, r6
 8002138:	2001      	movs	r0, #1
 800213a:	432b      	orrs	r3, r5
 800213c:	d1f5      	bne.n	800212a <__eqdf2+0x5a>
 800213e:	42a2      	cmp	r2, r4
 8002140:	d1f3      	bne.n	800212a <__eqdf2+0x5a>
 8002142:	464b      	mov	r3, r9
 8002144:	433b      	orrs	r3, r7
 8002146:	d1f0      	bne.n	800212a <__eqdf2+0x5a>
 8002148:	e7e2      	b.n	8002110 <__eqdf2+0x40>
 800214a:	2000      	movs	r0, #0
 800214c:	e7ed      	b.n	800212a <__eqdf2+0x5a>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff

08002154 <__gedf2>:
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	4647      	mov	r7, r8
 8002158:	46ce      	mov	lr, r9
 800215a:	0004      	movs	r4, r0
 800215c:	0018      	movs	r0, r3
 800215e:	0016      	movs	r6, r2
 8002160:	031b      	lsls	r3, r3, #12
 8002162:	0b1b      	lsrs	r3, r3, #12
 8002164:	4d2d      	ldr	r5, [pc, #180]	; (800221c <__gedf2+0xc8>)
 8002166:	004a      	lsls	r2, r1, #1
 8002168:	4699      	mov	r9, r3
 800216a:	b580      	push	{r7, lr}
 800216c:	0043      	lsls	r3, r0, #1
 800216e:	030f      	lsls	r7, r1, #12
 8002170:	46a4      	mov	ip, r4
 8002172:	46b0      	mov	r8, r6
 8002174:	0b3f      	lsrs	r7, r7, #12
 8002176:	0d52      	lsrs	r2, r2, #21
 8002178:	0fc9      	lsrs	r1, r1, #31
 800217a:	0d5b      	lsrs	r3, r3, #21
 800217c:	0fc0      	lsrs	r0, r0, #31
 800217e:	42aa      	cmp	r2, r5
 8002180:	d021      	beq.n	80021c6 <__gedf2+0x72>
 8002182:	42ab      	cmp	r3, r5
 8002184:	d013      	beq.n	80021ae <__gedf2+0x5a>
 8002186:	2a00      	cmp	r2, #0
 8002188:	d122      	bne.n	80021d0 <__gedf2+0x7c>
 800218a:	433c      	orrs	r4, r7
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <__gedf2+0x42>
 8002190:	464d      	mov	r5, r9
 8002192:	432e      	orrs	r6, r5
 8002194:	d022      	beq.n	80021dc <__gedf2+0x88>
 8002196:	2c00      	cmp	r4, #0
 8002198:	d010      	beq.n	80021bc <__gedf2+0x68>
 800219a:	4281      	cmp	r1, r0
 800219c:	d022      	beq.n	80021e4 <__gedf2+0x90>
 800219e:	2002      	movs	r0, #2
 80021a0:	3901      	subs	r1, #1
 80021a2:	4008      	ands	r0, r1
 80021a4:	3801      	subs	r0, #1
 80021a6:	bcc0      	pop	{r6, r7}
 80021a8:	46b9      	mov	r9, r7
 80021aa:	46b0      	mov	r8, r6
 80021ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ae:	464d      	mov	r5, r9
 80021b0:	432e      	orrs	r6, r5
 80021b2:	d129      	bne.n	8002208 <__gedf2+0xb4>
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d1f0      	bne.n	800219a <__gedf2+0x46>
 80021b8:	433c      	orrs	r4, r7
 80021ba:	d1ee      	bne.n	800219a <__gedf2+0x46>
 80021bc:	2800      	cmp	r0, #0
 80021be:	d1f2      	bne.n	80021a6 <__gedf2+0x52>
 80021c0:	2001      	movs	r0, #1
 80021c2:	4240      	negs	r0, r0
 80021c4:	e7ef      	b.n	80021a6 <__gedf2+0x52>
 80021c6:	003d      	movs	r5, r7
 80021c8:	4325      	orrs	r5, r4
 80021ca:	d11d      	bne.n	8002208 <__gedf2+0xb4>
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d0ee      	beq.n	80021ae <__gedf2+0x5a>
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e2      	bne.n	800219a <__gedf2+0x46>
 80021d4:	464c      	mov	r4, r9
 80021d6:	4326      	orrs	r6, r4
 80021d8:	d1df      	bne.n	800219a <__gedf2+0x46>
 80021da:	e7e0      	b.n	800219e <__gedf2+0x4a>
 80021dc:	2000      	movs	r0, #0
 80021de:	2c00      	cmp	r4, #0
 80021e0:	d0e1      	beq.n	80021a6 <__gedf2+0x52>
 80021e2:	e7dc      	b.n	800219e <__gedf2+0x4a>
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dc0a      	bgt.n	80021fe <__gedf2+0xaa>
 80021e8:	dbe8      	blt.n	80021bc <__gedf2+0x68>
 80021ea:	454f      	cmp	r7, r9
 80021ec:	d8d7      	bhi.n	800219e <__gedf2+0x4a>
 80021ee:	d00e      	beq.n	800220e <__gedf2+0xba>
 80021f0:	2000      	movs	r0, #0
 80021f2:	454f      	cmp	r7, r9
 80021f4:	d2d7      	bcs.n	80021a6 <__gedf2+0x52>
 80021f6:	2900      	cmp	r1, #0
 80021f8:	d0e2      	beq.n	80021c0 <__gedf2+0x6c>
 80021fa:	0008      	movs	r0, r1
 80021fc:	e7d3      	b.n	80021a6 <__gedf2+0x52>
 80021fe:	4243      	negs	r3, r0
 8002200:	4158      	adcs	r0, r3
 8002202:	0040      	lsls	r0, r0, #1
 8002204:	3801      	subs	r0, #1
 8002206:	e7ce      	b.n	80021a6 <__gedf2+0x52>
 8002208:	2002      	movs	r0, #2
 800220a:	4240      	negs	r0, r0
 800220c:	e7cb      	b.n	80021a6 <__gedf2+0x52>
 800220e:	45c4      	cmp	ip, r8
 8002210:	d8c5      	bhi.n	800219e <__gedf2+0x4a>
 8002212:	2000      	movs	r0, #0
 8002214:	45c4      	cmp	ip, r8
 8002216:	d2c6      	bcs.n	80021a6 <__gedf2+0x52>
 8002218:	e7ed      	b.n	80021f6 <__gedf2+0xa2>
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	000007ff 	.word	0x000007ff

08002220 <__ledf2>:
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	4647      	mov	r7, r8
 8002224:	46ce      	mov	lr, r9
 8002226:	0004      	movs	r4, r0
 8002228:	0018      	movs	r0, r3
 800222a:	0016      	movs	r6, r2
 800222c:	031b      	lsls	r3, r3, #12
 800222e:	0b1b      	lsrs	r3, r3, #12
 8002230:	4d2c      	ldr	r5, [pc, #176]	; (80022e4 <__ledf2+0xc4>)
 8002232:	004a      	lsls	r2, r1, #1
 8002234:	4699      	mov	r9, r3
 8002236:	b580      	push	{r7, lr}
 8002238:	0043      	lsls	r3, r0, #1
 800223a:	030f      	lsls	r7, r1, #12
 800223c:	46a4      	mov	ip, r4
 800223e:	46b0      	mov	r8, r6
 8002240:	0b3f      	lsrs	r7, r7, #12
 8002242:	0d52      	lsrs	r2, r2, #21
 8002244:	0fc9      	lsrs	r1, r1, #31
 8002246:	0d5b      	lsrs	r3, r3, #21
 8002248:	0fc0      	lsrs	r0, r0, #31
 800224a:	42aa      	cmp	r2, r5
 800224c:	d00d      	beq.n	800226a <__ledf2+0x4a>
 800224e:	42ab      	cmp	r3, r5
 8002250:	d010      	beq.n	8002274 <__ledf2+0x54>
 8002252:	2a00      	cmp	r2, #0
 8002254:	d127      	bne.n	80022a6 <__ledf2+0x86>
 8002256:	433c      	orrs	r4, r7
 8002258:	2b00      	cmp	r3, #0
 800225a:	d111      	bne.n	8002280 <__ledf2+0x60>
 800225c:	464d      	mov	r5, r9
 800225e:	432e      	orrs	r6, r5
 8002260:	d10e      	bne.n	8002280 <__ledf2+0x60>
 8002262:	2000      	movs	r0, #0
 8002264:	2c00      	cmp	r4, #0
 8002266:	d015      	beq.n	8002294 <__ledf2+0x74>
 8002268:	e00e      	b.n	8002288 <__ledf2+0x68>
 800226a:	003d      	movs	r5, r7
 800226c:	4325      	orrs	r5, r4
 800226e:	d110      	bne.n	8002292 <__ledf2+0x72>
 8002270:	4293      	cmp	r3, r2
 8002272:	d118      	bne.n	80022a6 <__ledf2+0x86>
 8002274:	464d      	mov	r5, r9
 8002276:	432e      	orrs	r6, r5
 8002278:	d10b      	bne.n	8002292 <__ledf2+0x72>
 800227a:	2a00      	cmp	r2, #0
 800227c:	d102      	bne.n	8002284 <__ledf2+0x64>
 800227e:	433c      	orrs	r4, r7
 8002280:	2c00      	cmp	r4, #0
 8002282:	d00b      	beq.n	800229c <__ledf2+0x7c>
 8002284:	4281      	cmp	r1, r0
 8002286:	d014      	beq.n	80022b2 <__ledf2+0x92>
 8002288:	2002      	movs	r0, #2
 800228a:	3901      	subs	r1, #1
 800228c:	4008      	ands	r0, r1
 800228e:	3801      	subs	r0, #1
 8002290:	e000      	b.n	8002294 <__ledf2+0x74>
 8002292:	2002      	movs	r0, #2
 8002294:	bcc0      	pop	{r6, r7}
 8002296:	46b9      	mov	r9, r7
 8002298:	46b0      	mov	r8, r6
 800229a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229c:	2800      	cmp	r0, #0
 800229e:	d1f9      	bne.n	8002294 <__ledf2+0x74>
 80022a0:	2001      	movs	r0, #1
 80022a2:	4240      	negs	r0, r0
 80022a4:	e7f6      	b.n	8002294 <__ledf2+0x74>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ec      	bne.n	8002284 <__ledf2+0x64>
 80022aa:	464c      	mov	r4, r9
 80022ac:	4326      	orrs	r6, r4
 80022ae:	d1e9      	bne.n	8002284 <__ledf2+0x64>
 80022b0:	e7ea      	b.n	8002288 <__ledf2+0x68>
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dd04      	ble.n	80022c0 <__ledf2+0xa0>
 80022b6:	4243      	negs	r3, r0
 80022b8:	4158      	adcs	r0, r3
 80022ba:	0040      	lsls	r0, r0, #1
 80022bc:	3801      	subs	r0, #1
 80022be:	e7e9      	b.n	8002294 <__ledf2+0x74>
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbeb      	blt.n	800229c <__ledf2+0x7c>
 80022c4:	454f      	cmp	r7, r9
 80022c6:	d8df      	bhi.n	8002288 <__ledf2+0x68>
 80022c8:	d006      	beq.n	80022d8 <__ledf2+0xb8>
 80022ca:	2000      	movs	r0, #0
 80022cc:	454f      	cmp	r7, r9
 80022ce:	d2e1      	bcs.n	8002294 <__ledf2+0x74>
 80022d0:	2900      	cmp	r1, #0
 80022d2:	d0e5      	beq.n	80022a0 <__ledf2+0x80>
 80022d4:	0008      	movs	r0, r1
 80022d6:	e7dd      	b.n	8002294 <__ledf2+0x74>
 80022d8:	45c4      	cmp	ip, r8
 80022da:	d8d5      	bhi.n	8002288 <__ledf2+0x68>
 80022dc:	2000      	movs	r0, #0
 80022de:	45c4      	cmp	ip, r8
 80022e0:	d2d8      	bcs.n	8002294 <__ledf2+0x74>
 80022e2:	e7f5      	b.n	80022d0 <__ledf2+0xb0>
 80022e4:	000007ff 	.word	0x000007ff

080022e8 <__aeabi_dmul>:
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	4645      	mov	r5, r8
 80022ec:	46de      	mov	lr, fp
 80022ee:	4657      	mov	r7, sl
 80022f0:	464e      	mov	r6, r9
 80022f2:	b5e0      	push	{r5, r6, r7, lr}
 80022f4:	001f      	movs	r7, r3
 80022f6:	030b      	lsls	r3, r1, #12
 80022f8:	0b1b      	lsrs	r3, r3, #12
 80022fa:	469b      	mov	fp, r3
 80022fc:	004d      	lsls	r5, r1, #1
 80022fe:	0fcb      	lsrs	r3, r1, #31
 8002300:	0004      	movs	r4, r0
 8002302:	4691      	mov	r9, r2
 8002304:	4698      	mov	r8, r3
 8002306:	b087      	sub	sp, #28
 8002308:	0d6d      	lsrs	r5, r5, #21
 800230a:	d100      	bne.n	800230e <__aeabi_dmul+0x26>
 800230c:	e1cd      	b.n	80026aa <__aeabi_dmul+0x3c2>
 800230e:	4bce      	ldr	r3, [pc, #824]	; (8002648 <__aeabi_dmul+0x360>)
 8002310:	429d      	cmp	r5, r3
 8002312:	d100      	bne.n	8002316 <__aeabi_dmul+0x2e>
 8002314:	e1e9      	b.n	80026ea <__aeabi_dmul+0x402>
 8002316:	465a      	mov	r2, fp
 8002318:	0f43      	lsrs	r3, r0, #29
 800231a:	00d2      	lsls	r2, r2, #3
 800231c:	4313      	orrs	r3, r2
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	0412      	lsls	r2, r2, #16
 8002322:	431a      	orrs	r2, r3
 8002324:	00c3      	lsls	r3, r0, #3
 8002326:	469a      	mov	sl, r3
 8002328:	4bc8      	ldr	r3, [pc, #800]	; (800264c <__aeabi_dmul+0x364>)
 800232a:	4693      	mov	fp, r2
 800232c:	469c      	mov	ip, r3
 800232e:	2300      	movs	r3, #0
 8002330:	2600      	movs	r6, #0
 8002332:	4465      	add	r5, ip
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	033c      	lsls	r4, r7, #12
 8002338:	007b      	lsls	r3, r7, #1
 800233a:	4648      	mov	r0, r9
 800233c:	0b24      	lsrs	r4, r4, #12
 800233e:	0d5b      	lsrs	r3, r3, #21
 8002340:	0fff      	lsrs	r7, r7, #31
 8002342:	2b00      	cmp	r3, #0
 8002344:	d100      	bne.n	8002348 <__aeabi_dmul+0x60>
 8002346:	e189      	b.n	800265c <__aeabi_dmul+0x374>
 8002348:	4abf      	ldr	r2, [pc, #764]	; (8002648 <__aeabi_dmul+0x360>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d019      	beq.n	8002382 <__aeabi_dmul+0x9a>
 800234e:	0f42      	lsrs	r2, r0, #29
 8002350:	00e4      	lsls	r4, r4, #3
 8002352:	4322      	orrs	r2, r4
 8002354:	2480      	movs	r4, #128	; 0x80
 8002356:	0424      	lsls	r4, r4, #16
 8002358:	4314      	orrs	r4, r2
 800235a:	4abc      	ldr	r2, [pc, #752]	; (800264c <__aeabi_dmul+0x364>)
 800235c:	2100      	movs	r1, #0
 800235e:	4694      	mov	ip, r2
 8002360:	4642      	mov	r2, r8
 8002362:	4463      	add	r3, ip
 8002364:	195b      	adds	r3, r3, r5
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	9b01      	ldr	r3, [sp, #4]
 800236a:	407a      	eors	r2, r7
 800236c:	3301      	adds	r3, #1
 800236e:	00c0      	lsls	r0, r0, #3
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	9302      	str	r3, [sp, #8]
 8002374:	2e0a      	cmp	r6, #10
 8002376:	dd1c      	ble.n	80023b2 <__aeabi_dmul+0xca>
 8002378:	003a      	movs	r2, r7
 800237a:	2e0b      	cmp	r6, #11
 800237c:	d05e      	beq.n	800243c <__aeabi_dmul+0x154>
 800237e:	4647      	mov	r7, r8
 8002380:	e056      	b.n	8002430 <__aeabi_dmul+0x148>
 8002382:	4649      	mov	r1, r9
 8002384:	4bb0      	ldr	r3, [pc, #704]	; (8002648 <__aeabi_dmul+0x360>)
 8002386:	4321      	orrs	r1, r4
 8002388:	18eb      	adds	r3, r5, r3
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	2900      	cmp	r1, #0
 800238e:	d12a      	bne.n	80023e6 <__aeabi_dmul+0xfe>
 8002390:	2080      	movs	r0, #128	; 0x80
 8002392:	2202      	movs	r2, #2
 8002394:	0100      	lsls	r0, r0, #4
 8002396:	002b      	movs	r3, r5
 8002398:	4684      	mov	ip, r0
 800239a:	4316      	orrs	r6, r2
 800239c:	4642      	mov	r2, r8
 800239e:	4463      	add	r3, ip
 80023a0:	407a      	eors	r2, r7
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2e0a      	cmp	r6, #10
 80023a8:	dd00      	ble.n	80023ac <__aeabi_dmul+0xc4>
 80023aa:	e231      	b.n	8002810 <__aeabi_dmul+0x528>
 80023ac:	2000      	movs	r0, #0
 80023ae:	2400      	movs	r4, #0
 80023b0:	2102      	movs	r1, #2
 80023b2:	2e02      	cmp	r6, #2
 80023b4:	dc26      	bgt.n	8002404 <__aeabi_dmul+0x11c>
 80023b6:	3e01      	subs	r6, #1
 80023b8:	2e01      	cmp	r6, #1
 80023ba:	d852      	bhi.n	8002462 <__aeabi_dmul+0x17a>
 80023bc:	2902      	cmp	r1, #2
 80023be:	d04c      	beq.n	800245a <__aeabi_dmul+0x172>
 80023c0:	2901      	cmp	r1, #1
 80023c2:	d000      	beq.n	80023c6 <__aeabi_dmul+0xde>
 80023c4:	e118      	b.n	80025f8 <__aeabi_dmul+0x310>
 80023c6:	2300      	movs	r3, #0
 80023c8:	2400      	movs	r4, #0
 80023ca:	2500      	movs	r5, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4323      	orrs	r3, r4
 80023d0:	07d2      	lsls	r2, r2, #31
 80023d2:	4313      	orrs	r3, r2
 80023d4:	0028      	movs	r0, r5
 80023d6:	0019      	movs	r1, r3
 80023d8:	b007      	add	sp, #28
 80023da:	bcf0      	pop	{r4, r5, r6, r7}
 80023dc:	46bb      	mov	fp, r7
 80023de:	46b2      	mov	sl, r6
 80023e0:	46a9      	mov	r9, r5
 80023e2:	46a0      	mov	r8, r4
 80023e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	2203      	movs	r2, #3
 80023ea:	0109      	lsls	r1, r1, #4
 80023ec:	002b      	movs	r3, r5
 80023ee:	468c      	mov	ip, r1
 80023f0:	4316      	orrs	r6, r2
 80023f2:	4642      	mov	r2, r8
 80023f4:	4463      	add	r3, ip
 80023f6:	407a      	eors	r2, r7
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	9302      	str	r3, [sp, #8]
 80023fc:	2e0a      	cmp	r6, #10
 80023fe:	dd00      	ble.n	8002402 <__aeabi_dmul+0x11a>
 8002400:	e228      	b.n	8002854 <__aeabi_dmul+0x56c>
 8002402:	2103      	movs	r1, #3
 8002404:	2501      	movs	r5, #1
 8002406:	40b5      	lsls	r5, r6
 8002408:	46ac      	mov	ip, r5
 800240a:	26a6      	movs	r6, #166	; 0xa6
 800240c:	4663      	mov	r3, ip
 800240e:	00f6      	lsls	r6, r6, #3
 8002410:	4035      	ands	r5, r6
 8002412:	4233      	tst	r3, r6
 8002414:	d10b      	bne.n	800242e <__aeabi_dmul+0x146>
 8002416:	2690      	movs	r6, #144	; 0x90
 8002418:	00b6      	lsls	r6, r6, #2
 800241a:	4233      	tst	r3, r6
 800241c:	d118      	bne.n	8002450 <__aeabi_dmul+0x168>
 800241e:	3eb9      	subs	r6, #185	; 0xb9
 8002420:	3eff      	subs	r6, #255	; 0xff
 8002422:	421e      	tst	r6, r3
 8002424:	d01d      	beq.n	8002462 <__aeabi_dmul+0x17a>
 8002426:	46a3      	mov	fp, r4
 8002428:	4682      	mov	sl, r0
 800242a:	9100      	str	r1, [sp, #0]
 800242c:	e000      	b.n	8002430 <__aeabi_dmul+0x148>
 800242e:	0017      	movs	r7, r2
 8002430:	9900      	ldr	r1, [sp, #0]
 8002432:	003a      	movs	r2, r7
 8002434:	2902      	cmp	r1, #2
 8002436:	d010      	beq.n	800245a <__aeabi_dmul+0x172>
 8002438:	465c      	mov	r4, fp
 800243a:	4650      	mov	r0, sl
 800243c:	2903      	cmp	r1, #3
 800243e:	d1bf      	bne.n	80023c0 <__aeabi_dmul+0xd8>
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	031b      	lsls	r3, r3, #12
 8002444:	431c      	orrs	r4, r3
 8002446:	0324      	lsls	r4, r4, #12
 8002448:	0005      	movs	r5, r0
 800244a:	4b7f      	ldr	r3, [pc, #508]	; (8002648 <__aeabi_dmul+0x360>)
 800244c:	0b24      	lsrs	r4, r4, #12
 800244e:	e7bd      	b.n	80023cc <__aeabi_dmul+0xe4>
 8002450:	2480      	movs	r4, #128	; 0x80
 8002452:	2200      	movs	r2, #0
 8002454:	4b7c      	ldr	r3, [pc, #496]	; (8002648 <__aeabi_dmul+0x360>)
 8002456:	0324      	lsls	r4, r4, #12
 8002458:	e7b8      	b.n	80023cc <__aeabi_dmul+0xe4>
 800245a:	2400      	movs	r4, #0
 800245c:	2500      	movs	r5, #0
 800245e:	4b7a      	ldr	r3, [pc, #488]	; (8002648 <__aeabi_dmul+0x360>)
 8002460:	e7b4      	b.n	80023cc <__aeabi_dmul+0xe4>
 8002462:	4653      	mov	r3, sl
 8002464:	041e      	lsls	r6, r3, #16
 8002466:	0c36      	lsrs	r6, r6, #16
 8002468:	0c1f      	lsrs	r7, r3, #16
 800246a:	0033      	movs	r3, r6
 800246c:	0c01      	lsrs	r1, r0, #16
 800246e:	0400      	lsls	r0, r0, #16
 8002470:	0c00      	lsrs	r0, r0, #16
 8002472:	4343      	muls	r3, r0
 8002474:	4698      	mov	r8, r3
 8002476:	0003      	movs	r3, r0
 8002478:	437b      	muls	r3, r7
 800247a:	4699      	mov	r9, r3
 800247c:	0033      	movs	r3, r6
 800247e:	434b      	muls	r3, r1
 8002480:	469c      	mov	ip, r3
 8002482:	4643      	mov	r3, r8
 8002484:	000d      	movs	r5, r1
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	469a      	mov	sl, r3
 800248a:	437d      	muls	r5, r7
 800248c:	44cc      	add	ip, r9
 800248e:	44d4      	add	ip, sl
 8002490:	9500      	str	r5, [sp, #0]
 8002492:	45e1      	cmp	r9, ip
 8002494:	d904      	bls.n	80024a0 <__aeabi_dmul+0x1b8>
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	025b      	lsls	r3, r3, #9
 800249a:	4699      	mov	r9, r3
 800249c:	444d      	add	r5, r9
 800249e:	9500      	str	r5, [sp, #0]
 80024a0:	4663      	mov	r3, ip
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	001d      	movs	r5, r3
 80024a6:	4663      	mov	r3, ip
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	469c      	mov	ip, r3
 80024ac:	4643      	mov	r3, r8
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	4698      	mov	r8, r3
 80024b4:	4663      	mov	r3, ip
 80024b6:	4443      	add	r3, r8
 80024b8:	9303      	str	r3, [sp, #12]
 80024ba:	0c23      	lsrs	r3, r4, #16
 80024bc:	4698      	mov	r8, r3
 80024be:	0033      	movs	r3, r6
 80024c0:	0424      	lsls	r4, r4, #16
 80024c2:	0c24      	lsrs	r4, r4, #16
 80024c4:	4363      	muls	r3, r4
 80024c6:	469c      	mov	ip, r3
 80024c8:	0023      	movs	r3, r4
 80024ca:	437b      	muls	r3, r7
 80024cc:	4699      	mov	r9, r3
 80024ce:	4643      	mov	r3, r8
 80024d0:	435e      	muls	r6, r3
 80024d2:	435f      	muls	r7, r3
 80024d4:	444e      	add	r6, r9
 80024d6:	4663      	mov	r3, ip
 80024d8:	46b2      	mov	sl, r6
 80024da:	0c1e      	lsrs	r6, r3, #16
 80024dc:	4456      	add	r6, sl
 80024de:	45b1      	cmp	r9, r6
 80024e0:	d903      	bls.n	80024ea <__aeabi_dmul+0x202>
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	4699      	mov	r9, r3
 80024e8:	444f      	add	r7, r9
 80024ea:	0c33      	lsrs	r3, r6, #16
 80024ec:	4699      	mov	r9, r3
 80024ee:	003b      	movs	r3, r7
 80024f0:	444b      	add	r3, r9
 80024f2:	9305      	str	r3, [sp, #20]
 80024f4:	4663      	mov	r3, ip
 80024f6:	46ac      	mov	ip, r5
 80024f8:	041f      	lsls	r7, r3, #16
 80024fa:	0c3f      	lsrs	r7, r7, #16
 80024fc:	0436      	lsls	r6, r6, #16
 80024fe:	19f6      	adds	r6, r6, r7
 8002500:	44b4      	add	ip, r6
 8002502:	4663      	mov	r3, ip
 8002504:	9304      	str	r3, [sp, #16]
 8002506:	465b      	mov	r3, fp
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	469c      	mov	ip, r3
 800250c:	465b      	mov	r3, fp
 800250e:	041f      	lsls	r7, r3, #16
 8002510:	0c3f      	lsrs	r7, r7, #16
 8002512:	003b      	movs	r3, r7
 8002514:	4343      	muls	r3, r0
 8002516:	4699      	mov	r9, r3
 8002518:	4663      	mov	r3, ip
 800251a:	4343      	muls	r3, r0
 800251c:	469a      	mov	sl, r3
 800251e:	464b      	mov	r3, r9
 8002520:	4660      	mov	r0, ip
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	469b      	mov	fp, r3
 8002526:	4348      	muls	r0, r1
 8002528:	4379      	muls	r1, r7
 800252a:	4451      	add	r1, sl
 800252c:	4459      	add	r1, fp
 800252e:	458a      	cmp	sl, r1
 8002530:	d903      	bls.n	800253a <__aeabi_dmul+0x252>
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	469a      	mov	sl, r3
 8002538:	4450      	add	r0, sl
 800253a:	0c0b      	lsrs	r3, r1, #16
 800253c:	469a      	mov	sl, r3
 800253e:	464b      	mov	r3, r9
 8002540:	041b      	lsls	r3, r3, #16
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	4699      	mov	r9, r3
 8002546:	003b      	movs	r3, r7
 8002548:	4363      	muls	r3, r4
 800254a:	0409      	lsls	r1, r1, #16
 800254c:	4645      	mov	r5, r8
 800254e:	4449      	add	r1, r9
 8002550:	4699      	mov	r9, r3
 8002552:	4663      	mov	r3, ip
 8002554:	435c      	muls	r4, r3
 8002556:	436b      	muls	r3, r5
 8002558:	469c      	mov	ip, r3
 800255a:	464b      	mov	r3, r9
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	4698      	mov	r8, r3
 8002560:	436f      	muls	r7, r5
 8002562:	193f      	adds	r7, r7, r4
 8002564:	4447      	add	r7, r8
 8002566:	4450      	add	r0, sl
 8002568:	42bc      	cmp	r4, r7
 800256a:	d903      	bls.n	8002574 <__aeabi_dmul+0x28c>
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	025b      	lsls	r3, r3, #9
 8002570:	4698      	mov	r8, r3
 8002572:	44c4      	add	ip, r8
 8002574:	9b04      	ldr	r3, [sp, #16]
 8002576:	9d00      	ldr	r5, [sp, #0]
 8002578:	4698      	mov	r8, r3
 800257a:	4445      	add	r5, r8
 800257c:	42b5      	cmp	r5, r6
 800257e:	41b6      	sbcs	r6, r6
 8002580:	4273      	negs	r3, r6
 8002582:	4698      	mov	r8, r3
 8002584:	464b      	mov	r3, r9
 8002586:	041e      	lsls	r6, r3, #16
 8002588:	9b05      	ldr	r3, [sp, #20]
 800258a:	043c      	lsls	r4, r7, #16
 800258c:	4699      	mov	r9, r3
 800258e:	0c36      	lsrs	r6, r6, #16
 8002590:	19a4      	adds	r4, r4, r6
 8002592:	444c      	add	r4, r9
 8002594:	46a1      	mov	r9, r4
 8002596:	4683      	mov	fp, r0
 8002598:	186e      	adds	r6, r5, r1
 800259a:	44c1      	add	r9, r8
 800259c:	428e      	cmp	r6, r1
 800259e:	4189      	sbcs	r1, r1
 80025a0:	44cb      	add	fp, r9
 80025a2:	465d      	mov	r5, fp
 80025a4:	4249      	negs	r1, r1
 80025a6:	186d      	adds	r5, r5, r1
 80025a8:	429c      	cmp	r4, r3
 80025aa:	41a4      	sbcs	r4, r4
 80025ac:	45c1      	cmp	r9, r8
 80025ae:	419b      	sbcs	r3, r3
 80025b0:	4583      	cmp	fp, r0
 80025b2:	4180      	sbcs	r0, r0
 80025b4:	428d      	cmp	r5, r1
 80025b6:	4189      	sbcs	r1, r1
 80025b8:	425b      	negs	r3, r3
 80025ba:	4264      	negs	r4, r4
 80025bc:	431c      	orrs	r4, r3
 80025be:	4240      	negs	r0, r0
 80025c0:	9b03      	ldr	r3, [sp, #12]
 80025c2:	4249      	negs	r1, r1
 80025c4:	4301      	orrs	r1, r0
 80025c6:	0270      	lsls	r0, r6, #9
 80025c8:	0c3f      	lsrs	r7, r7, #16
 80025ca:	4318      	orrs	r0, r3
 80025cc:	19e4      	adds	r4, r4, r7
 80025ce:	1e47      	subs	r7, r0, #1
 80025d0:	41b8      	sbcs	r0, r7
 80025d2:	1864      	adds	r4, r4, r1
 80025d4:	4464      	add	r4, ip
 80025d6:	0df6      	lsrs	r6, r6, #23
 80025d8:	0261      	lsls	r1, r4, #9
 80025da:	4330      	orrs	r0, r6
 80025dc:	0dec      	lsrs	r4, r5, #23
 80025de:	026e      	lsls	r6, r5, #9
 80025e0:	430c      	orrs	r4, r1
 80025e2:	4330      	orrs	r0, r6
 80025e4:	01c9      	lsls	r1, r1, #7
 80025e6:	d400      	bmi.n	80025ea <__aeabi_dmul+0x302>
 80025e8:	e0f1      	b.n	80027ce <__aeabi_dmul+0x4e6>
 80025ea:	2101      	movs	r1, #1
 80025ec:	0843      	lsrs	r3, r0, #1
 80025ee:	4001      	ands	r1, r0
 80025f0:	430b      	orrs	r3, r1
 80025f2:	07e0      	lsls	r0, r4, #31
 80025f4:	4318      	orrs	r0, r3
 80025f6:	0864      	lsrs	r4, r4, #1
 80025f8:	4915      	ldr	r1, [pc, #84]	; (8002650 <__aeabi_dmul+0x368>)
 80025fa:	9b02      	ldr	r3, [sp, #8]
 80025fc:	468c      	mov	ip, r1
 80025fe:	4463      	add	r3, ip
 8002600:	2b00      	cmp	r3, #0
 8002602:	dc00      	bgt.n	8002606 <__aeabi_dmul+0x31e>
 8002604:	e097      	b.n	8002736 <__aeabi_dmul+0x44e>
 8002606:	0741      	lsls	r1, r0, #29
 8002608:	d009      	beq.n	800261e <__aeabi_dmul+0x336>
 800260a:	210f      	movs	r1, #15
 800260c:	4001      	ands	r1, r0
 800260e:	2904      	cmp	r1, #4
 8002610:	d005      	beq.n	800261e <__aeabi_dmul+0x336>
 8002612:	1d01      	adds	r1, r0, #4
 8002614:	4281      	cmp	r1, r0
 8002616:	4180      	sbcs	r0, r0
 8002618:	4240      	negs	r0, r0
 800261a:	1824      	adds	r4, r4, r0
 800261c:	0008      	movs	r0, r1
 800261e:	01e1      	lsls	r1, r4, #7
 8002620:	d506      	bpl.n	8002630 <__aeabi_dmul+0x348>
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	00c9      	lsls	r1, r1, #3
 8002626:	468c      	mov	ip, r1
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <__aeabi_dmul+0x36c>)
 800262a:	401c      	ands	r4, r3
 800262c:	9b02      	ldr	r3, [sp, #8]
 800262e:	4463      	add	r3, ip
 8002630:	4909      	ldr	r1, [pc, #36]	; (8002658 <__aeabi_dmul+0x370>)
 8002632:	428b      	cmp	r3, r1
 8002634:	dd00      	ble.n	8002638 <__aeabi_dmul+0x350>
 8002636:	e710      	b.n	800245a <__aeabi_dmul+0x172>
 8002638:	0761      	lsls	r1, r4, #29
 800263a:	08c5      	lsrs	r5, r0, #3
 800263c:	0264      	lsls	r4, r4, #9
 800263e:	055b      	lsls	r3, r3, #21
 8002640:	430d      	orrs	r5, r1
 8002642:	0b24      	lsrs	r4, r4, #12
 8002644:	0d5b      	lsrs	r3, r3, #21
 8002646:	e6c1      	b.n	80023cc <__aeabi_dmul+0xe4>
 8002648:	000007ff 	.word	0x000007ff
 800264c:	fffffc01 	.word	0xfffffc01
 8002650:	000003ff 	.word	0x000003ff
 8002654:	feffffff 	.word	0xfeffffff
 8002658:	000007fe 	.word	0x000007fe
 800265c:	464b      	mov	r3, r9
 800265e:	4323      	orrs	r3, r4
 8002660:	d059      	beq.n	8002716 <__aeabi_dmul+0x42e>
 8002662:	2c00      	cmp	r4, #0
 8002664:	d100      	bne.n	8002668 <__aeabi_dmul+0x380>
 8002666:	e0a3      	b.n	80027b0 <__aeabi_dmul+0x4c8>
 8002668:	0020      	movs	r0, r4
 800266a:	f000 fdf9 	bl	8003260 <__clzsi2>
 800266e:	0001      	movs	r1, r0
 8002670:	0003      	movs	r3, r0
 8002672:	390b      	subs	r1, #11
 8002674:	221d      	movs	r2, #29
 8002676:	1a52      	subs	r2, r2, r1
 8002678:	4649      	mov	r1, r9
 800267a:	0018      	movs	r0, r3
 800267c:	40d1      	lsrs	r1, r2
 800267e:	464a      	mov	r2, r9
 8002680:	3808      	subs	r0, #8
 8002682:	4082      	lsls	r2, r0
 8002684:	4084      	lsls	r4, r0
 8002686:	0010      	movs	r0, r2
 8002688:	430c      	orrs	r4, r1
 800268a:	4a74      	ldr	r2, [pc, #464]	; (800285c <__aeabi_dmul+0x574>)
 800268c:	1aeb      	subs	r3, r5, r3
 800268e:	4694      	mov	ip, r2
 8002690:	4642      	mov	r2, r8
 8002692:	4463      	add	r3, ip
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	9b01      	ldr	r3, [sp, #4]
 8002698:	407a      	eors	r2, r7
 800269a:	3301      	adds	r3, #1
 800269c:	2100      	movs	r1, #0
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	2e0a      	cmp	r6, #10
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dmul+0x3c0>
 80026a6:	e667      	b.n	8002378 <__aeabi_dmul+0x90>
 80026a8:	e683      	b.n	80023b2 <__aeabi_dmul+0xca>
 80026aa:	465b      	mov	r3, fp
 80026ac:	4303      	orrs	r3, r0
 80026ae:	469a      	mov	sl, r3
 80026b0:	d02a      	beq.n	8002708 <__aeabi_dmul+0x420>
 80026b2:	465b      	mov	r3, fp
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d06d      	beq.n	8002794 <__aeabi_dmul+0x4ac>
 80026b8:	4658      	mov	r0, fp
 80026ba:	f000 fdd1 	bl	8003260 <__clzsi2>
 80026be:	0001      	movs	r1, r0
 80026c0:	0003      	movs	r3, r0
 80026c2:	390b      	subs	r1, #11
 80026c4:	221d      	movs	r2, #29
 80026c6:	1a52      	subs	r2, r2, r1
 80026c8:	0021      	movs	r1, r4
 80026ca:	0018      	movs	r0, r3
 80026cc:	465d      	mov	r5, fp
 80026ce:	40d1      	lsrs	r1, r2
 80026d0:	3808      	subs	r0, #8
 80026d2:	4085      	lsls	r5, r0
 80026d4:	000a      	movs	r2, r1
 80026d6:	4084      	lsls	r4, r0
 80026d8:	432a      	orrs	r2, r5
 80026da:	4693      	mov	fp, r2
 80026dc:	46a2      	mov	sl, r4
 80026de:	4d5f      	ldr	r5, [pc, #380]	; (800285c <__aeabi_dmul+0x574>)
 80026e0:	2600      	movs	r6, #0
 80026e2:	1aed      	subs	r5, r5, r3
 80026e4:	2300      	movs	r3, #0
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e625      	b.n	8002336 <__aeabi_dmul+0x4e>
 80026ea:	465b      	mov	r3, fp
 80026ec:	4303      	orrs	r3, r0
 80026ee:	469a      	mov	sl, r3
 80026f0:	d105      	bne.n	80026fe <__aeabi_dmul+0x416>
 80026f2:	2300      	movs	r3, #0
 80026f4:	469b      	mov	fp, r3
 80026f6:	3302      	adds	r3, #2
 80026f8:	2608      	movs	r6, #8
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	e61b      	b.n	8002336 <__aeabi_dmul+0x4e>
 80026fe:	2303      	movs	r3, #3
 8002700:	4682      	mov	sl, r0
 8002702:	260c      	movs	r6, #12
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	e616      	b.n	8002336 <__aeabi_dmul+0x4e>
 8002708:	2300      	movs	r3, #0
 800270a:	469b      	mov	fp, r3
 800270c:	3301      	adds	r3, #1
 800270e:	2604      	movs	r6, #4
 8002710:	2500      	movs	r5, #0
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	e60f      	b.n	8002336 <__aeabi_dmul+0x4e>
 8002716:	4642      	mov	r2, r8
 8002718:	3301      	adds	r3, #1
 800271a:	9501      	str	r5, [sp, #4]
 800271c:	431e      	orrs	r6, r3
 800271e:	9b01      	ldr	r3, [sp, #4]
 8002720:	407a      	eors	r2, r7
 8002722:	3301      	adds	r3, #1
 8002724:	2400      	movs	r4, #0
 8002726:	2000      	movs	r0, #0
 8002728:	2101      	movs	r1, #1
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	2e0a      	cmp	r6, #10
 8002730:	dd00      	ble.n	8002734 <__aeabi_dmul+0x44c>
 8002732:	e621      	b.n	8002378 <__aeabi_dmul+0x90>
 8002734:	e63d      	b.n	80023b2 <__aeabi_dmul+0xca>
 8002736:	2101      	movs	r1, #1
 8002738:	1ac9      	subs	r1, r1, r3
 800273a:	2938      	cmp	r1, #56	; 0x38
 800273c:	dd00      	ble.n	8002740 <__aeabi_dmul+0x458>
 800273e:	e642      	b.n	80023c6 <__aeabi_dmul+0xde>
 8002740:	291f      	cmp	r1, #31
 8002742:	dd47      	ble.n	80027d4 <__aeabi_dmul+0x4ec>
 8002744:	261f      	movs	r6, #31
 8002746:	0025      	movs	r5, r4
 8002748:	4276      	negs	r6, r6
 800274a:	1af3      	subs	r3, r6, r3
 800274c:	40dd      	lsrs	r5, r3
 800274e:	002b      	movs	r3, r5
 8002750:	2920      	cmp	r1, #32
 8002752:	d005      	beq.n	8002760 <__aeabi_dmul+0x478>
 8002754:	4942      	ldr	r1, [pc, #264]	; (8002860 <__aeabi_dmul+0x578>)
 8002756:	9d02      	ldr	r5, [sp, #8]
 8002758:	468c      	mov	ip, r1
 800275a:	4465      	add	r5, ip
 800275c:	40ac      	lsls	r4, r5
 800275e:	4320      	orrs	r0, r4
 8002760:	1e41      	subs	r1, r0, #1
 8002762:	4188      	sbcs	r0, r1
 8002764:	4318      	orrs	r0, r3
 8002766:	2307      	movs	r3, #7
 8002768:	001d      	movs	r5, r3
 800276a:	2400      	movs	r4, #0
 800276c:	4005      	ands	r5, r0
 800276e:	4203      	tst	r3, r0
 8002770:	d04a      	beq.n	8002808 <__aeabi_dmul+0x520>
 8002772:	230f      	movs	r3, #15
 8002774:	2400      	movs	r4, #0
 8002776:	4003      	ands	r3, r0
 8002778:	2b04      	cmp	r3, #4
 800277a:	d042      	beq.n	8002802 <__aeabi_dmul+0x51a>
 800277c:	1d03      	adds	r3, r0, #4
 800277e:	4283      	cmp	r3, r0
 8002780:	4180      	sbcs	r0, r0
 8002782:	4240      	negs	r0, r0
 8002784:	1824      	adds	r4, r4, r0
 8002786:	0018      	movs	r0, r3
 8002788:	0223      	lsls	r3, r4, #8
 800278a:	d53a      	bpl.n	8002802 <__aeabi_dmul+0x51a>
 800278c:	2301      	movs	r3, #1
 800278e:	2400      	movs	r4, #0
 8002790:	2500      	movs	r5, #0
 8002792:	e61b      	b.n	80023cc <__aeabi_dmul+0xe4>
 8002794:	f000 fd64 	bl	8003260 <__clzsi2>
 8002798:	0001      	movs	r1, r0
 800279a:	0003      	movs	r3, r0
 800279c:	3115      	adds	r1, #21
 800279e:	3320      	adds	r3, #32
 80027a0:	291c      	cmp	r1, #28
 80027a2:	dd8f      	ble.n	80026c4 <__aeabi_dmul+0x3dc>
 80027a4:	3808      	subs	r0, #8
 80027a6:	2200      	movs	r2, #0
 80027a8:	4084      	lsls	r4, r0
 80027aa:	4692      	mov	sl, r2
 80027ac:	46a3      	mov	fp, r4
 80027ae:	e796      	b.n	80026de <__aeabi_dmul+0x3f6>
 80027b0:	f000 fd56 	bl	8003260 <__clzsi2>
 80027b4:	0001      	movs	r1, r0
 80027b6:	0003      	movs	r3, r0
 80027b8:	3115      	adds	r1, #21
 80027ba:	3320      	adds	r3, #32
 80027bc:	291c      	cmp	r1, #28
 80027be:	dc00      	bgt.n	80027c2 <__aeabi_dmul+0x4da>
 80027c0:	e758      	b.n	8002674 <__aeabi_dmul+0x38c>
 80027c2:	0002      	movs	r2, r0
 80027c4:	464c      	mov	r4, r9
 80027c6:	3a08      	subs	r2, #8
 80027c8:	2000      	movs	r0, #0
 80027ca:	4094      	lsls	r4, r2
 80027cc:	e75d      	b.n	800268a <__aeabi_dmul+0x3a2>
 80027ce:	9b01      	ldr	r3, [sp, #4]
 80027d0:	9302      	str	r3, [sp, #8]
 80027d2:	e711      	b.n	80025f8 <__aeabi_dmul+0x310>
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <__aeabi_dmul+0x57c>)
 80027d6:	0026      	movs	r6, r4
 80027d8:	469c      	mov	ip, r3
 80027da:	0003      	movs	r3, r0
 80027dc:	9d02      	ldr	r5, [sp, #8]
 80027de:	40cb      	lsrs	r3, r1
 80027e0:	4465      	add	r5, ip
 80027e2:	40ae      	lsls	r6, r5
 80027e4:	431e      	orrs	r6, r3
 80027e6:	0003      	movs	r3, r0
 80027e8:	40ab      	lsls	r3, r5
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	4183      	sbcs	r3, r0
 80027ee:	0030      	movs	r0, r6
 80027f0:	4318      	orrs	r0, r3
 80027f2:	40cc      	lsrs	r4, r1
 80027f4:	0743      	lsls	r3, r0, #29
 80027f6:	d0c7      	beq.n	8002788 <__aeabi_dmul+0x4a0>
 80027f8:	230f      	movs	r3, #15
 80027fa:	4003      	ands	r3, r0
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d1bd      	bne.n	800277c <__aeabi_dmul+0x494>
 8002800:	e7c2      	b.n	8002788 <__aeabi_dmul+0x4a0>
 8002802:	0765      	lsls	r5, r4, #29
 8002804:	0264      	lsls	r4, r4, #9
 8002806:	0b24      	lsrs	r4, r4, #12
 8002808:	08c0      	lsrs	r0, r0, #3
 800280a:	2300      	movs	r3, #0
 800280c:	4305      	orrs	r5, r0
 800280e:	e5dd      	b.n	80023cc <__aeabi_dmul+0xe4>
 8002810:	2500      	movs	r5, #0
 8002812:	2302      	movs	r3, #2
 8002814:	2e0f      	cmp	r6, #15
 8002816:	d10c      	bne.n	8002832 <__aeabi_dmul+0x54a>
 8002818:	2480      	movs	r4, #128	; 0x80
 800281a:	465b      	mov	r3, fp
 800281c:	0324      	lsls	r4, r4, #12
 800281e:	4223      	tst	r3, r4
 8002820:	d00e      	beq.n	8002840 <__aeabi_dmul+0x558>
 8002822:	4221      	tst	r1, r4
 8002824:	d10c      	bne.n	8002840 <__aeabi_dmul+0x558>
 8002826:	430c      	orrs	r4, r1
 8002828:	0324      	lsls	r4, r4, #12
 800282a:	003a      	movs	r2, r7
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <__aeabi_dmul+0x580>)
 800282e:	0b24      	lsrs	r4, r4, #12
 8002830:	e5cc      	b.n	80023cc <__aeabi_dmul+0xe4>
 8002832:	2e0b      	cmp	r6, #11
 8002834:	d000      	beq.n	8002838 <__aeabi_dmul+0x550>
 8002836:	e5a2      	b.n	800237e <__aeabi_dmul+0x96>
 8002838:	468b      	mov	fp, r1
 800283a:	46aa      	mov	sl, r5
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	e5f7      	b.n	8002430 <__aeabi_dmul+0x148>
 8002840:	2480      	movs	r4, #128	; 0x80
 8002842:	465b      	mov	r3, fp
 8002844:	0324      	lsls	r4, r4, #12
 8002846:	431c      	orrs	r4, r3
 8002848:	0324      	lsls	r4, r4, #12
 800284a:	4642      	mov	r2, r8
 800284c:	4655      	mov	r5, sl
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <__aeabi_dmul+0x580>)
 8002850:	0b24      	lsrs	r4, r4, #12
 8002852:	e5bb      	b.n	80023cc <__aeabi_dmul+0xe4>
 8002854:	464d      	mov	r5, r9
 8002856:	0021      	movs	r1, r4
 8002858:	2303      	movs	r3, #3
 800285a:	e7db      	b.n	8002814 <__aeabi_dmul+0x52c>
 800285c:	fffffc0d 	.word	0xfffffc0d
 8002860:	0000043e 	.word	0x0000043e
 8002864:	0000041e 	.word	0x0000041e
 8002868:	000007ff 	.word	0x000007ff

0800286c <__aeabi_dsub>:
 800286c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286e:	4657      	mov	r7, sl
 8002870:	464e      	mov	r6, r9
 8002872:	4645      	mov	r5, r8
 8002874:	46de      	mov	lr, fp
 8002876:	b5e0      	push	{r5, r6, r7, lr}
 8002878:	000d      	movs	r5, r1
 800287a:	0004      	movs	r4, r0
 800287c:	0019      	movs	r1, r3
 800287e:	0010      	movs	r0, r2
 8002880:	032b      	lsls	r3, r5, #12
 8002882:	0a5b      	lsrs	r3, r3, #9
 8002884:	0f62      	lsrs	r2, r4, #29
 8002886:	431a      	orrs	r2, r3
 8002888:	00e3      	lsls	r3, r4, #3
 800288a:	030c      	lsls	r4, r1, #12
 800288c:	0a64      	lsrs	r4, r4, #9
 800288e:	0f47      	lsrs	r7, r0, #29
 8002890:	4327      	orrs	r7, r4
 8002892:	4cd0      	ldr	r4, [pc, #832]	; (8002bd4 <__aeabi_dsub+0x368>)
 8002894:	006e      	lsls	r6, r5, #1
 8002896:	4691      	mov	r9, r2
 8002898:	b083      	sub	sp, #12
 800289a:	004a      	lsls	r2, r1, #1
 800289c:	00c0      	lsls	r0, r0, #3
 800289e:	4698      	mov	r8, r3
 80028a0:	46a2      	mov	sl, r4
 80028a2:	0d76      	lsrs	r6, r6, #21
 80028a4:	0fed      	lsrs	r5, r5, #31
 80028a6:	0d52      	lsrs	r2, r2, #21
 80028a8:	0fc9      	lsrs	r1, r1, #31
 80028aa:	9001      	str	r0, [sp, #4]
 80028ac:	42a2      	cmp	r2, r4
 80028ae:	d100      	bne.n	80028b2 <__aeabi_dsub+0x46>
 80028b0:	e0b9      	b.n	8002a26 <__aeabi_dsub+0x1ba>
 80028b2:	2401      	movs	r4, #1
 80028b4:	4061      	eors	r1, r4
 80028b6:	468b      	mov	fp, r1
 80028b8:	428d      	cmp	r5, r1
 80028ba:	d100      	bne.n	80028be <__aeabi_dsub+0x52>
 80028bc:	e08d      	b.n	80029da <__aeabi_dsub+0x16e>
 80028be:	1ab4      	subs	r4, r6, r2
 80028c0:	46a4      	mov	ip, r4
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	dc00      	bgt.n	80028c8 <__aeabi_dsub+0x5c>
 80028c6:	e0b7      	b.n	8002a38 <__aeabi_dsub+0x1cc>
 80028c8:	2a00      	cmp	r2, #0
 80028ca:	d100      	bne.n	80028ce <__aeabi_dsub+0x62>
 80028cc:	e0cb      	b.n	8002a66 <__aeabi_dsub+0x1fa>
 80028ce:	4ac1      	ldr	r2, [pc, #772]	; (8002bd4 <__aeabi_dsub+0x368>)
 80028d0:	4296      	cmp	r6, r2
 80028d2:	d100      	bne.n	80028d6 <__aeabi_dsub+0x6a>
 80028d4:	e186      	b.n	8002be4 <__aeabi_dsub+0x378>
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	0412      	lsls	r2, r2, #16
 80028da:	4317      	orrs	r7, r2
 80028dc:	4662      	mov	r2, ip
 80028de:	2a38      	cmp	r2, #56	; 0x38
 80028e0:	dd00      	ble.n	80028e4 <__aeabi_dsub+0x78>
 80028e2:	e1a4      	b.n	8002c2e <__aeabi_dsub+0x3c2>
 80028e4:	2a1f      	cmp	r2, #31
 80028e6:	dd00      	ble.n	80028ea <__aeabi_dsub+0x7e>
 80028e8:	e21d      	b.n	8002d26 <__aeabi_dsub+0x4ba>
 80028ea:	4661      	mov	r1, ip
 80028ec:	2220      	movs	r2, #32
 80028ee:	003c      	movs	r4, r7
 80028f0:	1a52      	subs	r2, r2, r1
 80028f2:	0001      	movs	r1, r0
 80028f4:	4090      	lsls	r0, r2
 80028f6:	4094      	lsls	r4, r2
 80028f8:	1e42      	subs	r2, r0, #1
 80028fa:	4190      	sbcs	r0, r2
 80028fc:	4662      	mov	r2, ip
 80028fe:	46a0      	mov	r8, r4
 8002900:	4664      	mov	r4, ip
 8002902:	40d7      	lsrs	r7, r2
 8002904:	464a      	mov	r2, r9
 8002906:	40e1      	lsrs	r1, r4
 8002908:	4644      	mov	r4, r8
 800290a:	1bd2      	subs	r2, r2, r7
 800290c:	4691      	mov	r9, r2
 800290e:	430c      	orrs	r4, r1
 8002910:	4304      	orrs	r4, r0
 8002912:	1b1c      	subs	r4, r3, r4
 8002914:	42a3      	cmp	r3, r4
 8002916:	4192      	sbcs	r2, r2
 8002918:	464b      	mov	r3, r9
 800291a:	4252      	negs	r2, r2
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	469a      	mov	sl, r3
 8002920:	4653      	mov	r3, sl
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	d400      	bmi.n	8002928 <__aeabi_dsub+0xbc>
 8002926:	e12b      	b.n	8002b80 <__aeabi_dsub+0x314>
 8002928:	4653      	mov	r3, sl
 800292a:	025a      	lsls	r2, r3, #9
 800292c:	0a53      	lsrs	r3, r2, #9
 800292e:	469a      	mov	sl, r3
 8002930:	4653      	mov	r3, sl
 8002932:	2b00      	cmp	r3, #0
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0xcc>
 8002936:	e166      	b.n	8002c06 <__aeabi_dsub+0x39a>
 8002938:	4650      	mov	r0, sl
 800293a:	f000 fc91 	bl	8003260 <__clzsi2>
 800293e:	0003      	movs	r3, r0
 8002940:	3b08      	subs	r3, #8
 8002942:	2220      	movs	r2, #32
 8002944:	0020      	movs	r0, r4
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	4651      	mov	r1, sl
 800294a:	40d0      	lsrs	r0, r2
 800294c:	4099      	lsls	r1, r3
 800294e:	0002      	movs	r2, r0
 8002950:	409c      	lsls	r4, r3
 8002952:	430a      	orrs	r2, r1
 8002954:	429e      	cmp	r6, r3
 8002956:	dd00      	ble.n	800295a <__aeabi_dsub+0xee>
 8002958:	e164      	b.n	8002c24 <__aeabi_dsub+0x3b8>
 800295a:	1b9b      	subs	r3, r3, r6
 800295c:	1c59      	adds	r1, r3, #1
 800295e:	291f      	cmp	r1, #31
 8002960:	dd00      	ble.n	8002964 <__aeabi_dsub+0xf8>
 8002962:	e0fe      	b.n	8002b62 <__aeabi_dsub+0x2f6>
 8002964:	2320      	movs	r3, #32
 8002966:	0010      	movs	r0, r2
 8002968:	0026      	movs	r6, r4
 800296a:	1a5b      	subs	r3, r3, r1
 800296c:	409c      	lsls	r4, r3
 800296e:	4098      	lsls	r0, r3
 8002970:	40ce      	lsrs	r6, r1
 8002972:	40ca      	lsrs	r2, r1
 8002974:	1e63      	subs	r3, r4, #1
 8002976:	419c      	sbcs	r4, r3
 8002978:	4330      	orrs	r0, r6
 800297a:	4692      	mov	sl, r2
 800297c:	2600      	movs	r6, #0
 800297e:	4304      	orrs	r4, r0
 8002980:	0763      	lsls	r3, r4, #29
 8002982:	d009      	beq.n	8002998 <__aeabi_dsub+0x12c>
 8002984:	230f      	movs	r3, #15
 8002986:	4023      	ands	r3, r4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d005      	beq.n	8002998 <__aeabi_dsub+0x12c>
 800298c:	1d23      	adds	r3, r4, #4
 800298e:	42a3      	cmp	r3, r4
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4264      	negs	r4, r4
 8002994:	44a2      	add	sl, r4
 8002996:	001c      	movs	r4, r3
 8002998:	4653      	mov	r3, sl
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	d400      	bmi.n	80029a0 <__aeabi_dsub+0x134>
 800299e:	e0f2      	b.n	8002b86 <__aeabi_dsub+0x31a>
 80029a0:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <__aeabi_dsub+0x368>)
 80029a2:	3601      	adds	r6, #1
 80029a4:	429e      	cmp	r6, r3
 80029a6:	d100      	bne.n	80029aa <__aeabi_dsub+0x13e>
 80029a8:	e10f      	b.n	8002bca <__aeabi_dsub+0x35e>
 80029aa:	4653      	mov	r3, sl
 80029ac:	498a      	ldr	r1, [pc, #552]	; (8002bd8 <__aeabi_dsub+0x36c>)
 80029ae:	08e4      	lsrs	r4, r4, #3
 80029b0:	400b      	ands	r3, r1
 80029b2:	0019      	movs	r1, r3
 80029b4:	075b      	lsls	r3, r3, #29
 80029b6:	4323      	orrs	r3, r4
 80029b8:	0572      	lsls	r2, r6, #21
 80029ba:	024c      	lsls	r4, r1, #9
 80029bc:	0b24      	lsrs	r4, r4, #12
 80029be:	0d52      	lsrs	r2, r2, #21
 80029c0:	0512      	lsls	r2, r2, #20
 80029c2:	4322      	orrs	r2, r4
 80029c4:	07ed      	lsls	r5, r5, #31
 80029c6:	432a      	orrs	r2, r5
 80029c8:	0018      	movs	r0, r3
 80029ca:	0011      	movs	r1, r2
 80029cc:	b003      	add	sp, #12
 80029ce:	bcf0      	pop	{r4, r5, r6, r7}
 80029d0:	46bb      	mov	fp, r7
 80029d2:	46b2      	mov	sl, r6
 80029d4:	46a9      	mov	r9, r5
 80029d6:	46a0      	mov	r8, r4
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029da:	1ab4      	subs	r4, r6, r2
 80029dc:	46a4      	mov	ip, r4
 80029de:	2c00      	cmp	r4, #0
 80029e0:	dd59      	ble.n	8002a96 <__aeabi_dsub+0x22a>
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x17c>
 80029e6:	e0b0      	b.n	8002b4a <__aeabi_dsub+0x2de>
 80029e8:	4556      	cmp	r6, sl
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x182>
 80029ec:	e0fa      	b.n	8002be4 <__aeabi_dsub+0x378>
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	0412      	lsls	r2, r2, #16
 80029f2:	4317      	orrs	r7, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a38      	cmp	r2, #56	; 0x38
 80029f8:	dd00      	ble.n	80029fc <__aeabi_dsub+0x190>
 80029fa:	e0d4      	b.n	8002ba6 <__aeabi_dsub+0x33a>
 80029fc:	2a1f      	cmp	r2, #31
 80029fe:	dc00      	bgt.n	8002a02 <__aeabi_dsub+0x196>
 8002a00:	e1c0      	b.n	8002d84 <__aeabi_dsub+0x518>
 8002a02:	0039      	movs	r1, r7
 8002a04:	3a20      	subs	r2, #32
 8002a06:	40d1      	lsrs	r1, r2
 8002a08:	4662      	mov	r2, ip
 8002a0a:	2a20      	cmp	r2, #32
 8002a0c:	d006      	beq.n	8002a1c <__aeabi_dsub+0x1b0>
 8002a0e:	4664      	mov	r4, ip
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	1b12      	subs	r2, r2, r4
 8002a14:	003c      	movs	r4, r7
 8002a16:	4094      	lsls	r4, r2
 8002a18:	4304      	orrs	r4, r0
 8002a1a:	9401      	str	r4, [sp, #4]
 8002a1c:	9c01      	ldr	r4, [sp, #4]
 8002a1e:	1e62      	subs	r2, r4, #1
 8002a20:	4194      	sbcs	r4, r2
 8002a22:	430c      	orrs	r4, r1
 8002a24:	e0c3      	b.n	8002bae <__aeabi_dsub+0x342>
 8002a26:	003c      	movs	r4, r7
 8002a28:	4304      	orrs	r4, r0
 8002a2a:	d02b      	beq.n	8002a84 <__aeabi_dsub+0x218>
 8002a2c:	468b      	mov	fp, r1
 8002a2e:	428d      	cmp	r5, r1
 8002a30:	d02e      	beq.n	8002a90 <__aeabi_dsub+0x224>
 8002a32:	4c6a      	ldr	r4, [pc, #424]	; (8002bdc <__aeabi_dsub+0x370>)
 8002a34:	46a4      	mov	ip, r4
 8002a36:	44b4      	add	ip, r6
 8002a38:	4664      	mov	r4, ip
 8002a3a:	2c00      	cmp	r4, #0
 8002a3c:	d05f      	beq.n	8002afe <__aeabi_dsub+0x292>
 8002a3e:	1b94      	subs	r4, r2, r6
 8002a40:	46a4      	mov	ip, r4
 8002a42:	2e00      	cmp	r6, #0
 8002a44:	d000      	beq.n	8002a48 <__aeabi_dsub+0x1dc>
 8002a46:	e120      	b.n	8002c8a <__aeabi_dsub+0x41e>
 8002a48:	464c      	mov	r4, r9
 8002a4a:	431c      	orrs	r4, r3
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x1e4>
 8002a4e:	e1c7      	b.n	8002de0 <__aeabi_dsub+0x574>
 8002a50:	4661      	mov	r1, ip
 8002a52:	1e4c      	subs	r4, r1, #1
 8002a54:	2901      	cmp	r1, #1
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x1ee>
 8002a58:	e223      	b.n	8002ea2 <__aeabi_dsub+0x636>
 8002a5a:	4d5e      	ldr	r5, [pc, #376]	; (8002bd4 <__aeabi_dsub+0x368>)
 8002a5c:	45ac      	cmp	ip, r5
 8002a5e:	d100      	bne.n	8002a62 <__aeabi_dsub+0x1f6>
 8002a60:	e1d8      	b.n	8002e14 <__aeabi_dsub+0x5a8>
 8002a62:	46a4      	mov	ip, r4
 8002a64:	e11a      	b.n	8002c9c <__aeabi_dsub+0x430>
 8002a66:	003a      	movs	r2, r7
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x202>
 8002a6c:	e0e4      	b.n	8002c38 <__aeabi_dsub+0x3cc>
 8002a6e:	0022      	movs	r2, r4
 8002a70:	3a01      	subs	r2, #1
 8002a72:	2c01      	cmp	r4, #1
 8002a74:	d100      	bne.n	8002a78 <__aeabi_dsub+0x20c>
 8002a76:	e1c3      	b.n	8002e00 <__aeabi_dsub+0x594>
 8002a78:	4956      	ldr	r1, [pc, #344]	; (8002bd4 <__aeabi_dsub+0x368>)
 8002a7a:	428c      	cmp	r4, r1
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x214>
 8002a7e:	e0b1      	b.n	8002be4 <__aeabi_dsub+0x378>
 8002a80:	4694      	mov	ip, r2
 8002a82:	e72b      	b.n	80028dc <__aeabi_dsub+0x70>
 8002a84:	2401      	movs	r4, #1
 8002a86:	4061      	eors	r1, r4
 8002a88:	468b      	mov	fp, r1
 8002a8a:	428d      	cmp	r5, r1
 8002a8c:	d000      	beq.n	8002a90 <__aeabi_dsub+0x224>
 8002a8e:	e716      	b.n	80028be <__aeabi_dsub+0x52>
 8002a90:	4952      	ldr	r1, [pc, #328]	; (8002bdc <__aeabi_dsub+0x370>)
 8002a92:	468c      	mov	ip, r1
 8002a94:	44b4      	add	ip, r6
 8002a96:	4664      	mov	r4, ip
 8002a98:	2c00      	cmp	r4, #0
 8002a9a:	d100      	bne.n	8002a9e <__aeabi_dsub+0x232>
 8002a9c:	e0d3      	b.n	8002c46 <__aeabi_dsub+0x3da>
 8002a9e:	1b91      	subs	r1, r2, r6
 8002aa0:	468c      	mov	ip, r1
 8002aa2:	2e00      	cmp	r6, #0
 8002aa4:	d100      	bne.n	8002aa8 <__aeabi_dsub+0x23c>
 8002aa6:	e15e      	b.n	8002d66 <__aeabi_dsub+0x4fa>
 8002aa8:	494a      	ldr	r1, [pc, #296]	; (8002bd4 <__aeabi_dsub+0x368>)
 8002aaa:	428a      	cmp	r2, r1
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x244>
 8002aae:	e1be      	b.n	8002e2e <__aeabi_dsub+0x5c2>
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	464c      	mov	r4, r9
 8002ab4:	0409      	lsls	r1, r1, #16
 8002ab6:	430c      	orrs	r4, r1
 8002ab8:	46a1      	mov	r9, r4
 8002aba:	4661      	mov	r1, ip
 8002abc:	2938      	cmp	r1, #56	; 0x38
 8002abe:	dd00      	ble.n	8002ac2 <__aeabi_dsub+0x256>
 8002ac0:	e1ba      	b.n	8002e38 <__aeabi_dsub+0x5cc>
 8002ac2:	291f      	cmp	r1, #31
 8002ac4:	dd00      	ble.n	8002ac8 <__aeabi_dsub+0x25c>
 8002ac6:	e227      	b.n	8002f18 <__aeabi_dsub+0x6ac>
 8002ac8:	2420      	movs	r4, #32
 8002aca:	1a64      	subs	r4, r4, r1
 8002acc:	4649      	mov	r1, r9
 8002ace:	40a1      	lsls	r1, r4
 8002ad0:	001e      	movs	r6, r3
 8002ad2:	4688      	mov	r8, r1
 8002ad4:	4661      	mov	r1, ip
 8002ad6:	40a3      	lsls	r3, r4
 8002ad8:	40ce      	lsrs	r6, r1
 8002ada:	4641      	mov	r1, r8
 8002adc:	1e5c      	subs	r4, r3, #1
 8002ade:	41a3      	sbcs	r3, r4
 8002ae0:	4331      	orrs	r1, r6
 8002ae2:	4319      	orrs	r1, r3
 8002ae4:	000c      	movs	r4, r1
 8002ae6:	4663      	mov	r3, ip
 8002ae8:	4649      	mov	r1, r9
 8002aea:	40d9      	lsrs	r1, r3
 8002aec:	187f      	adds	r7, r7, r1
 8002aee:	1824      	adds	r4, r4, r0
 8002af0:	4284      	cmp	r4, r0
 8002af2:	419b      	sbcs	r3, r3
 8002af4:	425b      	negs	r3, r3
 8002af6:	469a      	mov	sl, r3
 8002af8:	0016      	movs	r6, r2
 8002afa:	44ba      	add	sl, r7
 8002afc:	e05d      	b.n	8002bba <__aeabi_dsub+0x34e>
 8002afe:	4c38      	ldr	r4, [pc, #224]	; (8002be0 <__aeabi_dsub+0x374>)
 8002b00:	1c72      	adds	r2, r6, #1
 8002b02:	4222      	tst	r2, r4
 8002b04:	d000      	beq.n	8002b08 <__aeabi_dsub+0x29c>
 8002b06:	e0df      	b.n	8002cc8 <__aeabi_dsub+0x45c>
 8002b08:	464a      	mov	r2, r9
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	2e00      	cmp	r6, #0
 8002b0e:	d000      	beq.n	8002b12 <__aeabi_dsub+0x2a6>
 8002b10:	e15c      	b.n	8002dcc <__aeabi_dsub+0x560>
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	d100      	bne.n	8002b18 <__aeabi_dsub+0x2ac>
 8002b16:	e1cf      	b.n	8002eb8 <__aeabi_dsub+0x64c>
 8002b18:	003a      	movs	r2, r7
 8002b1a:	4302      	orrs	r2, r0
 8002b1c:	d100      	bne.n	8002b20 <__aeabi_dsub+0x2b4>
 8002b1e:	e17f      	b.n	8002e20 <__aeabi_dsub+0x5b4>
 8002b20:	1a1c      	subs	r4, r3, r0
 8002b22:	464a      	mov	r2, r9
 8002b24:	42a3      	cmp	r3, r4
 8002b26:	4189      	sbcs	r1, r1
 8002b28:	1bd2      	subs	r2, r2, r7
 8002b2a:	4249      	negs	r1, r1
 8002b2c:	1a52      	subs	r2, r2, r1
 8002b2e:	4692      	mov	sl, r2
 8002b30:	0212      	lsls	r2, r2, #8
 8002b32:	d400      	bmi.n	8002b36 <__aeabi_dsub+0x2ca>
 8002b34:	e20a      	b.n	8002f4c <__aeabi_dsub+0x6e0>
 8002b36:	1ac4      	subs	r4, r0, r3
 8002b38:	42a0      	cmp	r0, r4
 8002b3a:	4180      	sbcs	r0, r0
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	4240      	negs	r0, r0
 8002b40:	1aff      	subs	r7, r7, r3
 8002b42:	1a3b      	subs	r3, r7, r0
 8002b44:	469a      	mov	sl, r3
 8002b46:	465d      	mov	r5, fp
 8002b48:	e71a      	b.n	8002980 <__aeabi_dsub+0x114>
 8002b4a:	003a      	movs	r2, r7
 8002b4c:	4302      	orrs	r2, r0
 8002b4e:	d073      	beq.n	8002c38 <__aeabi_dsub+0x3cc>
 8002b50:	0022      	movs	r2, r4
 8002b52:	3a01      	subs	r2, #1
 8002b54:	2c01      	cmp	r4, #1
 8002b56:	d100      	bne.n	8002b5a <__aeabi_dsub+0x2ee>
 8002b58:	e0cb      	b.n	8002cf2 <__aeabi_dsub+0x486>
 8002b5a:	4554      	cmp	r4, sl
 8002b5c:	d042      	beq.n	8002be4 <__aeabi_dsub+0x378>
 8002b5e:	4694      	mov	ip, r2
 8002b60:	e748      	b.n	80029f4 <__aeabi_dsub+0x188>
 8002b62:	0010      	movs	r0, r2
 8002b64:	3b1f      	subs	r3, #31
 8002b66:	40d8      	lsrs	r0, r3
 8002b68:	2920      	cmp	r1, #32
 8002b6a:	d003      	beq.n	8002b74 <__aeabi_dsub+0x308>
 8002b6c:	2340      	movs	r3, #64	; 0x40
 8002b6e:	1a5b      	subs	r3, r3, r1
 8002b70:	409a      	lsls	r2, r3
 8002b72:	4314      	orrs	r4, r2
 8002b74:	1e63      	subs	r3, r4, #1
 8002b76:	419c      	sbcs	r4, r3
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	469a      	mov	sl, r3
 8002b7e:	4304      	orrs	r4, r0
 8002b80:	0763      	lsls	r3, r4, #29
 8002b82:	d000      	beq.n	8002b86 <__aeabi_dsub+0x31a>
 8002b84:	e6fe      	b.n	8002984 <__aeabi_dsub+0x118>
 8002b86:	4652      	mov	r2, sl
 8002b88:	08e3      	lsrs	r3, r4, #3
 8002b8a:	0752      	lsls	r2, r2, #29
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	4652      	mov	r2, sl
 8002b90:	46b4      	mov	ip, r6
 8002b92:	08d2      	lsrs	r2, r2, #3
 8002b94:	490f      	ldr	r1, [pc, #60]	; (8002bd4 <__aeabi_dsub+0x368>)
 8002b96:	458c      	cmp	ip, r1
 8002b98:	d02a      	beq.n	8002bf0 <__aeabi_dsub+0x384>
 8002b9a:	0312      	lsls	r2, r2, #12
 8002b9c:	0b14      	lsrs	r4, r2, #12
 8002b9e:	4662      	mov	r2, ip
 8002ba0:	0552      	lsls	r2, r2, #21
 8002ba2:	0d52      	lsrs	r2, r2, #21
 8002ba4:	e70c      	b.n	80029c0 <__aeabi_dsub+0x154>
 8002ba6:	003c      	movs	r4, r7
 8002ba8:	4304      	orrs	r4, r0
 8002baa:	1e62      	subs	r2, r4, #1
 8002bac:	4194      	sbcs	r4, r2
 8002bae:	18e4      	adds	r4, r4, r3
 8002bb0:	429c      	cmp	r4, r3
 8002bb2:	4192      	sbcs	r2, r2
 8002bb4:	4252      	negs	r2, r2
 8002bb6:	444a      	add	r2, r9
 8002bb8:	4692      	mov	sl, r2
 8002bba:	4653      	mov	r3, sl
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	d5df      	bpl.n	8002b80 <__aeabi_dsub+0x314>
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__aeabi_dsub+0x368>)
 8002bc2:	3601      	adds	r6, #1
 8002bc4:	429e      	cmp	r6, r3
 8002bc6:	d000      	beq.n	8002bca <__aeabi_dsub+0x35e>
 8002bc8:	e0a0      	b.n	8002d0c <__aeabi_dsub+0x4a0>
 8002bca:	0032      	movs	r2, r6
 8002bcc:	2400      	movs	r4, #0
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e6f6      	b.n	80029c0 <__aeabi_dsub+0x154>
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	000007ff 	.word	0x000007ff
 8002bd8:	ff7fffff 	.word	0xff7fffff
 8002bdc:	fffff801 	.word	0xfffff801
 8002be0:	000007fe 	.word	0x000007fe
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	464a      	mov	r2, r9
 8002be8:	0752      	lsls	r2, r2, #29
 8002bea:	4313      	orrs	r3, r2
 8002bec:	464a      	mov	r2, r9
 8002bee:	08d2      	lsrs	r2, r2, #3
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	d100      	bne.n	8002bf8 <__aeabi_dsub+0x38c>
 8002bf6:	e1b5      	b.n	8002f64 <__aeabi_dsub+0x6f8>
 8002bf8:	2480      	movs	r4, #128	; 0x80
 8002bfa:	0324      	lsls	r4, r4, #12
 8002bfc:	4314      	orrs	r4, r2
 8002bfe:	0324      	lsls	r4, r4, #12
 8002c00:	4ad5      	ldr	r2, [pc, #852]	; (8002f58 <__aeabi_dsub+0x6ec>)
 8002c02:	0b24      	lsrs	r4, r4, #12
 8002c04:	e6dc      	b.n	80029c0 <__aeabi_dsub+0x154>
 8002c06:	0020      	movs	r0, r4
 8002c08:	f000 fb2a 	bl	8003260 <__clzsi2>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	3318      	adds	r3, #24
 8002c10:	2b1f      	cmp	r3, #31
 8002c12:	dc00      	bgt.n	8002c16 <__aeabi_dsub+0x3aa>
 8002c14:	e695      	b.n	8002942 <__aeabi_dsub+0xd6>
 8002c16:	0022      	movs	r2, r4
 8002c18:	3808      	subs	r0, #8
 8002c1a:	4082      	lsls	r2, r0
 8002c1c:	2400      	movs	r4, #0
 8002c1e:	429e      	cmp	r6, r3
 8002c20:	dc00      	bgt.n	8002c24 <__aeabi_dsub+0x3b8>
 8002c22:	e69a      	b.n	800295a <__aeabi_dsub+0xee>
 8002c24:	1af6      	subs	r6, r6, r3
 8002c26:	4bcd      	ldr	r3, [pc, #820]	; (8002f5c <__aeabi_dsub+0x6f0>)
 8002c28:	401a      	ands	r2, r3
 8002c2a:	4692      	mov	sl, r2
 8002c2c:	e6a8      	b.n	8002980 <__aeabi_dsub+0x114>
 8002c2e:	003c      	movs	r4, r7
 8002c30:	4304      	orrs	r4, r0
 8002c32:	1e62      	subs	r2, r4, #1
 8002c34:	4194      	sbcs	r4, r2
 8002c36:	e66c      	b.n	8002912 <__aeabi_dsub+0xa6>
 8002c38:	464a      	mov	r2, r9
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	0752      	lsls	r2, r2, #29
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	464a      	mov	r2, r9
 8002c42:	08d2      	lsrs	r2, r2, #3
 8002c44:	e7a6      	b.n	8002b94 <__aeabi_dsub+0x328>
 8002c46:	4cc6      	ldr	r4, [pc, #792]	; (8002f60 <__aeabi_dsub+0x6f4>)
 8002c48:	1c72      	adds	r2, r6, #1
 8002c4a:	4222      	tst	r2, r4
 8002c4c:	d000      	beq.n	8002c50 <__aeabi_dsub+0x3e4>
 8002c4e:	e0ac      	b.n	8002daa <__aeabi_dsub+0x53e>
 8002c50:	464a      	mov	r2, r9
 8002c52:	431a      	orrs	r2, r3
 8002c54:	2e00      	cmp	r6, #0
 8002c56:	d000      	beq.n	8002c5a <__aeabi_dsub+0x3ee>
 8002c58:	e105      	b.n	8002e66 <__aeabi_dsub+0x5fa>
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	d100      	bne.n	8002c60 <__aeabi_dsub+0x3f4>
 8002c5e:	e156      	b.n	8002f0e <__aeabi_dsub+0x6a2>
 8002c60:	003a      	movs	r2, r7
 8002c62:	4302      	orrs	r2, r0
 8002c64:	d100      	bne.n	8002c68 <__aeabi_dsub+0x3fc>
 8002c66:	e0db      	b.n	8002e20 <__aeabi_dsub+0x5b4>
 8002c68:	181c      	adds	r4, r3, r0
 8002c6a:	429c      	cmp	r4, r3
 8002c6c:	419b      	sbcs	r3, r3
 8002c6e:	444f      	add	r7, r9
 8002c70:	46ba      	mov	sl, r7
 8002c72:	425b      	negs	r3, r3
 8002c74:	449a      	add	sl, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	d400      	bmi.n	8002c7e <__aeabi_dsub+0x412>
 8002c7c:	e780      	b.n	8002b80 <__aeabi_dsub+0x314>
 8002c7e:	4652      	mov	r2, sl
 8002c80:	4bb6      	ldr	r3, [pc, #728]	; (8002f5c <__aeabi_dsub+0x6f0>)
 8002c82:	2601      	movs	r6, #1
 8002c84:	401a      	ands	r2, r3
 8002c86:	4692      	mov	sl, r2
 8002c88:	e77a      	b.n	8002b80 <__aeabi_dsub+0x314>
 8002c8a:	4cb3      	ldr	r4, [pc, #716]	; (8002f58 <__aeabi_dsub+0x6ec>)
 8002c8c:	42a2      	cmp	r2, r4
 8002c8e:	d100      	bne.n	8002c92 <__aeabi_dsub+0x426>
 8002c90:	e0c0      	b.n	8002e14 <__aeabi_dsub+0x5a8>
 8002c92:	2480      	movs	r4, #128	; 0x80
 8002c94:	464d      	mov	r5, r9
 8002c96:	0424      	lsls	r4, r4, #16
 8002c98:	4325      	orrs	r5, r4
 8002c9a:	46a9      	mov	r9, r5
 8002c9c:	4664      	mov	r4, ip
 8002c9e:	2c38      	cmp	r4, #56	; 0x38
 8002ca0:	dc53      	bgt.n	8002d4a <__aeabi_dsub+0x4de>
 8002ca2:	4661      	mov	r1, ip
 8002ca4:	2c1f      	cmp	r4, #31
 8002ca6:	dd00      	ble.n	8002caa <__aeabi_dsub+0x43e>
 8002ca8:	e0cd      	b.n	8002e46 <__aeabi_dsub+0x5da>
 8002caa:	2520      	movs	r5, #32
 8002cac:	001e      	movs	r6, r3
 8002cae:	1b2d      	subs	r5, r5, r4
 8002cb0:	464c      	mov	r4, r9
 8002cb2:	40ab      	lsls	r3, r5
 8002cb4:	40ac      	lsls	r4, r5
 8002cb6:	40ce      	lsrs	r6, r1
 8002cb8:	1e5d      	subs	r5, r3, #1
 8002cba:	41ab      	sbcs	r3, r5
 8002cbc:	4334      	orrs	r4, r6
 8002cbe:	4323      	orrs	r3, r4
 8002cc0:	464c      	mov	r4, r9
 8002cc2:	40cc      	lsrs	r4, r1
 8002cc4:	1b3f      	subs	r7, r7, r4
 8002cc6:	e045      	b.n	8002d54 <__aeabi_dsub+0x4e8>
 8002cc8:	464a      	mov	r2, r9
 8002cca:	1a1c      	subs	r4, r3, r0
 8002ccc:	1bd1      	subs	r1, r2, r7
 8002cce:	42a3      	cmp	r3, r4
 8002cd0:	4192      	sbcs	r2, r2
 8002cd2:	4252      	negs	r2, r2
 8002cd4:	4692      	mov	sl, r2
 8002cd6:	000a      	movs	r2, r1
 8002cd8:	4651      	mov	r1, sl
 8002cda:	1a52      	subs	r2, r2, r1
 8002cdc:	4692      	mov	sl, r2
 8002cde:	0212      	lsls	r2, r2, #8
 8002ce0:	d500      	bpl.n	8002ce4 <__aeabi_dsub+0x478>
 8002ce2:	e083      	b.n	8002dec <__aeabi_dsub+0x580>
 8002ce4:	4653      	mov	r3, sl
 8002ce6:	4323      	orrs	r3, r4
 8002ce8:	d000      	beq.n	8002cec <__aeabi_dsub+0x480>
 8002cea:	e621      	b.n	8002930 <__aeabi_dsub+0xc4>
 8002cec:	2200      	movs	r2, #0
 8002cee:	2500      	movs	r5, #0
 8002cf0:	e753      	b.n	8002b9a <__aeabi_dsub+0x32e>
 8002cf2:	181c      	adds	r4, r3, r0
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	419b      	sbcs	r3, r3
 8002cf8:	444f      	add	r7, r9
 8002cfa:	46ba      	mov	sl, r7
 8002cfc:	425b      	negs	r3, r3
 8002cfe:	449a      	add	sl, r3
 8002d00:	4653      	mov	r3, sl
 8002d02:	2601      	movs	r6, #1
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	d400      	bmi.n	8002d0a <__aeabi_dsub+0x49e>
 8002d08:	e73a      	b.n	8002b80 <__aeabi_dsub+0x314>
 8002d0a:	2602      	movs	r6, #2
 8002d0c:	4652      	mov	r2, sl
 8002d0e:	4b93      	ldr	r3, [pc, #588]	; (8002f5c <__aeabi_dsub+0x6f0>)
 8002d10:	2101      	movs	r1, #1
 8002d12:	401a      	ands	r2, r3
 8002d14:	0013      	movs	r3, r2
 8002d16:	4021      	ands	r1, r4
 8002d18:	0862      	lsrs	r2, r4, #1
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	07dc      	lsls	r4, r3, #31
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	469a      	mov	sl, r3
 8002d22:	4314      	orrs	r4, r2
 8002d24:	e62c      	b.n	8002980 <__aeabi_dsub+0x114>
 8002d26:	0039      	movs	r1, r7
 8002d28:	3a20      	subs	r2, #32
 8002d2a:	40d1      	lsrs	r1, r2
 8002d2c:	4662      	mov	r2, ip
 8002d2e:	2a20      	cmp	r2, #32
 8002d30:	d006      	beq.n	8002d40 <__aeabi_dsub+0x4d4>
 8002d32:	4664      	mov	r4, ip
 8002d34:	2240      	movs	r2, #64	; 0x40
 8002d36:	1b12      	subs	r2, r2, r4
 8002d38:	003c      	movs	r4, r7
 8002d3a:	4094      	lsls	r4, r2
 8002d3c:	4304      	orrs	r4, r0
 8002d3e:	9401      	str	r4, [sp, #4]
 8002d40:	9c01      	ldr	r4, [sp, #4]
 8002d42:	1e62      	subs	r2, r4, #1
 8002d44:	4194      	sbcs	r4, r2
 8002d46:	430c      	orrs	r4, r1
 8002d48:	e5e3      	b.n	8002912 <__aeabi_dsub+0xa6>
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	4319      	orrs	r1, r3
 8002d4e:	000b      	movs	r3, r1
 8002d50:	1e5c      	subs	r4, r3, #1
 8002d52:	41a3      	sbcs	r3, r4
 8002d54:	1ac4      	subs	r4, r0, r3
 8002d56:	42a0      	cmp	r0, r4
 8002d58:	419b      	sbcs	r3, r3
 8002d5a:	425b      	negs	r3, r3
 8002d5c:	1afb      	subs	r3, r7, r3
 8002d5e:	469a      	mov	sl, r3
 8002d60:	465d      	mov	r5, fp
 8002d62:	0016      	movs	r6, r2
 8002d64:	e5dc      	b.n	8002920 <__aeabi_dsub+0xb4>
 8002d66:	4649      	mov	r1, r9
 8002d68:	4319      	orrs	r1, r3
 8002d6a:	d100      	bne.n	8002d6e <__aeabi_dsub+0x502>
 8002d6c:	e0ae      	b.n	8002ecc <__aeabi_dsub+0x660>
 8002d6e:	4661      	mov	r1, ip
 8002d70:	4664      	mov	r4, ip
 8002d72:	3901      	subs	r1, #1
 8002d74:	2c01      	cmp	r4, #1
 8002d76:	d100      	bne.n	8002d7a <__aeabi_dsub+0x50e>
 8002d78:	e0e0      	b.n	8002f3c <__aeabi_dsub+0x6d0>
 8002d7a:	4c77      	ldr	r4, [pc, #476]	; (8002f58 <__aeabi_dsub+0x6ec>)
 8002d7c:	45a4      	cmp	ip, r4
 8002d7e:	d056      	beq.n	8002e2e <__aeabi_dsub+0x5c2>
 8002d80:	468c      	mov	ip, r1
 8002d82:	e69a      	b.n	8002aba <__aeabi_dsub+0x24e>
 8002d84:	4661      	mov	r1, ip
 8002d86:	2220      	movs	r2, #32
 8002d88:	003c      	movs	r4, r7
 8002d8a:	1a52      	subs	r2, r2, r1
 8002d8c:	4094      	lsls	r4, r2
 8002d8e:	0001      	movs	r1, r0
 8002d90:	4090      	lsls	r0, r2
 8002d92:	46a0      	mov	r8, r4
 8002d94:	4664      	mov	r4, ip
 8002d96:	1e42      	subs	r2, r0, #1
 8002d98:	4190      	sbcs	r0, r2
 8002d9a:	4662      	mov	r2, ip
 8002d9c:	40e1      	lsrs	r1, r4
 8002d9e:	4644      	mov	r4, r8
 8002da0:	40d7      	lsrs	r7, r2
 8002da2:	430c      	orrs	r4, r1
 8002da4:	4304      	orrs	r4, r0
 8002da6:	44b9      	add	r9, r7
 8002da8:	e701      	b.n	8002bae <__aeabi_dsub+0x342>
 8002daa:	496b      	ldr	r1, [pc, #428]	; (8002f58 <__aeabi_dsub+0x6ec>)
 8002dac:	428a      	cmp	r2, r1
 8002dae:	d100      	bne.n	8002db2 <__aeabi_dsub+0x546>
 8002db0:	e70c      	b.n	8002bcc <__aeabi_dsub+0x360>
 8002db2:	1818      	adds	r0, r3, r0
 8002db4:	4298      	cmp	r0, r3
 8002db6:	419b      	sbcs	r3, r3
 8002db8:	444f      	add	r7, r9
 8002dba:	425b      	negs	r3, r3
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	07dc      	lsls	r4, r3, #31
 8002dc0:	0840      	lsrs	r0, r0, #1
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	469a      	mov	sl, r3
 8002dc6:	0016      	movs	r6, r2
 8002dc8:	4304      	orrs	r4, r0
 8002dca:	e6d9      	b.n	8002b80 <__aeabi_dsub+0x314>
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d000      	beq.n	8002dd2 <__aeabi_dsub+0x566>
 8002dd0:	e081      	b.n	8002ed6 <__aeabi_dsub+0x66a>
 8002dd2:	003b      	movs	r3, r7
 8002dd4:	4303      	orrs	r3, r0
 8002dd6:	d11d      	bne.n	8002e14 <__aeabi_dsub+0x5a8>
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	2500      	movs	r5, #0
 8002ddc:	0312      	lsls	r2, r2, #12
 8002dde:	e70b      	b.n	8002bf8 <__aeabi_dsub+0x38c>
 8002de0:	08c0      	lsrs	r0, r0, #3
 8002de2:	077b      	lsls	r3, r7, #29
 8002de4:	465d      	mov	r5, fp
 8002de6:	4303      	orrs	r3, r0
 8002de8:	08fa      	lsrs	r2, r7, #3
 8002dea:	e6d3      	b.n	8002b94 <__aeabi_dsub+0x328>
 8002dec:	1ac4      	subs	r4, r0, r3
 8002dee:	42a0      	cmp	r0, r4
 8002df0:	4180      	sbcs	r0, r0
 8002df2:	464b      	mov	r3, r9
 8002df4:	4240      	negs	r0, r0
 8002df6:	1aff      	subs	r7, r7, r3
 8002df8:	1a3b      	subs	r3, r7, r0
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	465d      	mov	r5, fp
 8002dfe:	e597      	b.n	8002930 <__aeabi_dsub+0xc4>
 8002e00:	1a1c      	subs	r4, r3, r0
 8002e02:	464a      	mov	r2, r9
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	419b      	sbcs	r3, r3
 8002e08:	1bd7      	subs	r7, r2, r7
 8002e0a:	425b      	negs	r3, r3
 8002e0c:	1afb      	subs	r3, r7, r3
 8002e0e:	469a      	mov	sl, r3
 8002e10:	2601      	movs	r6, #1
 8002e12:	e585      	b.n	8002920 <__aeabi_dsub+0xb4>
 8002e14:	08c0      	lsrs	r0, r0, #3
 8002e16:	077b      	lsls	r3, r7, #29
 8002e18:	465d      	mov	r5, fp
 8002e1a:	4303      	orrs	r3, r0
 8002e1c:	08fa      	lsrs	r2, r7, #3
 8002e1e:	e6e7      	b.n	8002bf0 <__aeabi_dsub+0x384>
 8002e20:	464a      	mov	r2, r9
 8002e22:	08db      	lsrs	r3, r3, #3
 8002e24:	0752      	lsls	r2, r2, #29
 8002e26:	4313      	orrs	r3, r2
 8002e28:	464a      	mov	r2, r9
 8002e2a:	08d2      	lsrs	r2, r2, #3
 8002e2c:	e6b5      	b.n	8002b9a <__aeabi_dsub+0x32e>
 8002e2e:	08c0      	lsrs	r0, r0, #3
 8002e30:	077b      	lsls	r3, r7, #29
 8002e32:	4303      	orrs	r3, r0
 8002e34:	08fa      	lsrs	r2, r7, #3
 8002e36:	e6db      	b.n	8002bf0 <__aeabi_dsub+0x384>
 8002e38:	4649      	mov	r1, r9
 8002e3a:	4319      	orrs	r1, r3
 8002e3c:	000b      	movs	r3, r1
 8002e3e:	1e59      	subs	r1, r3, #1
 8002e40:	418b      	sbcs	r3, r1
 8002e42:	001c      	movs	r4, r3
 8002e44:	e653      	b.n	8002aee <__aeabi_dsub+0x282>
 8002e46:	464d      	mov	r5, r9
 8002e48:	3c20      	subs	r4, #32
 8002e4a:	40e5      	lsrs	r5, r4
 8002e4c:	2920      	cmp	r1, #32
 8002e4e:	d005      	beq.n	8002e5c <__aeabi_dsub+0x5f0>
 8002e50:	2440      	movs	r4, #64	; 0x40
 8002e52:	1a64      	subs	r4, r4, r1
 8002e54:	4649      	mov	r1, r9
 8002e56:	40a1      	lsls	r1, r4
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	4698      	mov	r8, r3
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	1e5c      	subs	r4, r3, #1
 8002e60:	41a3      	sbcs	r3, r4
 8002e62:	432b      	orrs	r3, r5
 8002e64:	e776      	b.n	8002d54 <__aeabi_dsub+0x4e8>
 8002e66:	2a00      	cmp	r2, #0
 8002e68:	d0e1      	beq.n	8002e2e <__aeabi_dsub+0x5c2>
 8002e6a:	003a      	movs	r2, r7
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	4302      	orrs	r2, r0
 8002e70:	d100      	bne.n	8002e74 <__aeabi_dsub+0x608>
 8002e72:	e6b8      	b.n	8002be6 <__aeabi_dsub+0x37a>
 8002e74:	464a      	mov	r2, r9
 8002e76:	0752      	lsls	r2, r2, #29
 8002e78:	2480      	movs	r4, #128	; 0x80
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	464a      	mov	r2, r9
 8002e7e:	0324      	lsls	r4, r4, #12
 8002e80:	08d2      	lsrs	r2, r2, #3
 8002e82:	4222      	tst	r2, r4
 8002e84:	d007      	beq.n	8002e96 <__aeabi_dsub+0x62a>
 8002e86:	08fe      	lsrs	r6, r7, #3
 8002e88:	4226      	tst	r6, r4
 8002e8a:	d104      	bne.n	8002e96 <__aeabi_dsub+0x62a>
 8002e8c:	465d      	mov	r5, fp
 8002e8e:	0032      	movs	r2, r6
 8002e90:	08c3      	lsrs	r3, r0, #3
 8002e92:	077f      	lsls	r7, r7, #29
 8002e94:	433b      	orrs	r3, r7
 8002e96:	0f59      	lsrs	r1, r3, #29
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	0749      	lsls	r1, r1, #29
 8002e9c:	08db      	lsrs	r3, r3, #3
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	e6a6      	b.n	8002bf0 <__aeabi_dsub+0x384>
 8002ea2:	1ac4      	subs	r4, r0, r3
 8002ea4:	42a0      	cmp	r0, r4
 8002ea6:	4180      	sbcs	r0, r0
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	4240      	negs	r0, r0
 8002eac:	1aff      	subs	r7, r7, r3
 8002eae:	1a3b      	subs	r3, r7, r0
 8002eb0:	469a      	mov	sl, r3
 8002eb2:	465d      	mov	r5, fp
 8002eb4:	2601      	movs	r6, #1
 8002eb6:	e533      	b.n	8002920 <__aeabi_dsub+0xb4>
 8002eb8:	003b      	movs	r3, r7
 8002eba:	4303      	orrs	r3, r0
 8002ebc:	d100      	bne.n	8002ec0 <__aeabi_dsub+0x654>
 8002ebe:	e715      	b.n	8002cec <__aeabi_dsub+0x480>
 8002ec0:	08c0      	lsrs	r0, r0, #3
 8002ec2:	077b      	lsls	r3, r7, #29
 8002ec4:	465d      	mov	r5, fp
 8002ec6:	4303      	orrs	r3, r0
 8002ec8:	08fa      	lsrs	r2, r7, #3
 8002eca:	e666      	b.n	8002b9a <__aeabi_dsub+0x32e>
 8002ecc:	08c0      	lsrs	r0, r0, #3
 8002ece:	077b      	lsls	r3, r7, #29
 8002ed0:	4303      	orrs	r3, r0
 8002ed2:	08fa      	lsrs	r2, r7, #3
 8002ed4:	e65e      	b.n	8002b94 <__aeabi_dsub+0x328>
 8002ed6:	003a      	movs	r2, r7
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	4302      	orrs	r2, r0
 8002edc:	d100      	bne.n	8002ee0 <__aeabi_dsub+0x674>
 8002ede:	e682      	b.n	8002be6 <__aeabi_dsub+0x37a>
 8002ee0:	464a      	mov	r2, r9
 8002ee2:	0752      	lsls	r2, r2, #29
 8002ee4:	2480      	movs	r4, #128	; 0x80
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	464a      	mov	r2, r9
 8002eea:	0324      	lsls	r4, r4, #12
 8002eec:	08d2      	lsrs	r2, r2, #3
 8002eee:	4222      	tst	r2, r4
 8002ef0:	d007      	beq.n	8002f02 <__aeabi_dsub+0x696>
 8002ef2:	08fe      	lsrs	r6, r7, #3
 8002ef4:	4226      	tst	r6, r4
 8002ef6:	d104      	bne.n	8002f02 <__aeabi_dsub+0x696>
 8002ef8:	465d      	mov	r5, fp
 8002efa:	0032      	movs	r2, r6
 8002efc:	08c3      	lsrs	r3, r0, #3
 8002efe:	077f      	lsls	r7, r7, #29
 8002f00:	433b      	orrs	r3, r7
 8002f02:	0f59      	lsrs	r1, r3, #29
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	08db      	lsrs	r3, r3, #3
 8002f08:	0749      	lsls	r1, r1, #29
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	e670      	b.n	8002bf0 <__aeabi_dsub+0x384>
 8002f0e:	08c0      	lsrs	r0, r0, #3
 8002f10:	077b      	lsls	r3, r7, #29
 8002f12:	4303      	orrs	r3, r0
 8002f14:	08fa      	lsrs	r2, r7, #3
 8002f16:	e640      	b.n	8002b9a <__aeabi_dsub+0x32e>
 8002f18:	464c      	mov	r4, r9
 8002f1a:	3920      	subs	r1, #32
 8002f1c:	40cc      	lsrs	r4, r1
 8002f1e:	4661      	mov	r1, ip
 8002f20:	2920      	cmp	r1, #32
 8002f22:	d006      	beq.n	8002f32 <__aeabi_dsub+0x6c6>
 8002f24:	4666      	mov	r6, ip
 8002f26:	2140      	movs	r1, #64	; 0x40
 8002f28:	1b89      	subs	r1, r1, r6
 8002f2a:	464e      	mov	r6, r9
 8002f2c:	408e      	lsls	r6, r1
 8002f2e:	4333      	orrs	r3, r6
 8002f30:	4698      	mov	r8, r3
 8002f32:	4643      	mov	r3, r8
 8002f34:	1e59      	subs	r1, r3, #1
 8002f36:	418b      	sbcs	r3, r1
 8002f38:	431c      	orrs	r4, r3
 8002f3a:	e5d8      	b.n	8002aee <__aeabi_dsub+0x282>
 8002f3c:	181c      	adds	r4, r3, r0
 8002f3e:	4284      	cmp	r4, r0
 8002f40:	4180      	sbcs	r0, r0
 8002f42:	444f      	add	r7, r9
 8002f44:	46ba      	mov	sl, r7
 8002f46:	4240      	negs	r0, r0
 8002f48:	4482      	add	sl, r0
 8002f4a:	e6d9      	b.n	8002d00 <__aeabi_dsub+0x494>
 8002f4c:	4653      	mov	r3, sl
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	d100      	bne.n	8002f54 <__aeabi_dsub+0x6e8>
 8002f52:	e6cb      	b.n	8002cec <__aeabi_dsub+0x480>
 8002f54:	e614      	b.n	8002b80 <__aeabi_dsub+0x314>
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	000007ff 	.word	0x000007ff
 8002f5c:	ff7fffff 	.word	0xff7fffff
 8002f60:	000007fe 	.word	0x000007fe
 8002f64:	2300      	movs	r3, #0
 8002f66:	4a01      	ldr	r2, [pc, #4]	; (8002f6c <__aeabi_dsub+0x700>)
 8002f68:	001c      	movs	r4, r3
 8002f6a:	e529      	b.n	80029c0 <__aeabi_dsub+0x154>
 8002f6c:	000007ff 	.word	0x000007ff

08002f70 <__aeabi_dcmpun>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	0005      	movs	r5, r0
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <__aeabi_dcmpun+0x38>)
 8002f76:	031c      	lsls	r4, r3, #12
 8002f78:	0016      	movs	r6, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	030a      	lsls	r2, r1, #12
 8002f7e:	0049      	lsls	r1, r1, #1
 8002f80:	0b12      	lsrs	r2, r2, #12
 8002f82:	0d49      	lsrs	r1, r1, #21
 8002f84:	0b24      	lsrs	r4, r4, #12
 8002f86:	0d5b      	lsrs	r3, r3, #21
 8002f88:	4281      	cmp	r1, r0
 8002f8a:	d008      	beq.n	8002f9e <__aeabi_dcmpun+0x2e>
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <__aeabi_dcmpun+0x38>)
 8002f8e:	2000      	movs	r0, #0
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d103      	bne.n	8002f9c <__aeabi_dcmpun+0x2c>
 8002f94:	0020      	movs	r0, r4
 8002f96:	4330      	orrs	r0, r6
 8002f98:	1e43      	subs	r3, r0, #1
 8002f9a:	4198      	sbcs	r0, r3
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	432a      	orrs	r2, r5
 8002fa2:	d1fb      	bne.n	8002f9c <__aeabi_dcmpun+0x2c>
 8002fa4:	e7f2      	b.n	8002f8c <__aeabi_dcmpun+0x1c>
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	000007ff 	.word	0x000007ff

08002fac <__aeabi_d2iz>:
 8002fac:	000a      	movs	r2, r1
 8002fae:	b530      	push	{r4, r5, lr}
 8002fb0:	4c13      	ldr	r4, [pc, #76]	; (8003000 <__aeabi_d2iz+0x54>)
 8002fb2:	0053      	lsls	r3, r2, #1
 8002fb4:	0309      	lsls	r1, r1, #12
 8002fb6:	0005      	movs	r5, r0
 8002fb8:	0b09      	lsrs	r1, r1, #12
 8002fba:	2000      	movs	r0, #0
 8002fbc:	0d5b      	lsrs	r3, r3, #21
 8002fbe:	0fd2      	lsrs	r2, r2, #31
 8002fc0:	42a3      	cmp	r3, r4
 8002fc2:	dd04      	ble.n	8002fce <__aeabi_d2iz+0x22>
 8002fc4:	480f      	ldr	r0, [pc, #60]	; (8003004 <__aeabi_d2iz+0x58>)
 8002fc6:	4283      	cmp	r3, r0
 8002fc8:	dd02      	ble.n	8002fd0 <__aeabi_d2iz+0x24>
 8002fca:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <__aeabi_d2iz+0x5c>)
 8002fcc:	18d0      	adds	r0, r2, r3
 8002fce:	bd30      	pop	{r4, r5, pc}
 8002fd0:	2080      	movs	r0, #128	; 0x80
 8002fd2:	0340      	lsls	r0, r0, #13
 8002fd4:	4301      	orrs	r1, r0
 8002fd6:	480d      	ldr	r0, [pc, #52]	; (800300c <__aeabi_d2iz+0x60>)
 8002fd8:	1ac0      	subs	r0, r0, r3
 8002fda:	281f      	cmp	r0, #31
 8002fdc:	dd08      	ble.n	8002ff0 <__aeabi_d2iz+0x44>
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <__aeabi_d2iz+0x64>)
 8002fe0:	1ac3      	subs	r3, r0, r3
 8002fe2:	40d9      	lsrs	r1, r3
 8002fe4:	000b      	movs	r3, r1
 8002fe6:	4258      	negs	r0, r3
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d1f0      	bne.n	8002fce <__aeabi_d2iz+0x22>
 8002fec:	0018      	movs	r0, r3
 8002fee:	e7ee      	b.n	8002fce <__aeabi_d2iz+0x22>
 8002ff0:	4c08      	ldr	r4, [pc, #32]	; (8003014 <__aeabi_d2iz+0x68>)
 8002ff2:	40c5      	lsrs	r5, r0
 8002ff4:	46a4      	mov	ip, r4
 8002ff6:	4463      	add	r3, ip
 8002ff8:	4099      	lsls	r1, r3
 8002ffa:	000b      	movs	r3, r1
 8002ffc:	432b      	orrs	r3, r5
 8002ffe:	e7f2      	b.n	8002fe6 <__aeabi_d2iz+0x3a>
 8003000:	000003fe 	.word	0x000003fe
 8003004:	0000041d 	.word	0x0000041d
 8003008:	7fffffff 	.word	0x7fffffff
 800300c:	00000433 	.word	0x00000433
 8003010:	00000413 	.word	0x00000413
 8003014:	fffffbed 	.word	0xfffffbed

08003018 <__aeabi_i2d>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	2800      	cmp	r0, #0
 800301c:	d016      	beq.n	800304c <__aeabi_i2d+0x34>
 800301e:	17c3      	asrs	r3, r0, #31
 8003020:	18c5      	adds	r5, r0, r3
 8003022:	405d      	eors	r5, r3
 8003024:	0fc4      	lsrs	r4, r0, #31
 8003026:	0028      	movs	r0, r5
 8003028:	f000 f91a 	bl	8003260 <__clzsi2>
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <__aeabi_i2d+0x5c>)
 800302e:	1a1b      	subs	r3, r3, r0
 8003030:	280a      	cmp	r0, #10
 8003032:	dc16      	bgt.n	8003062 <__aeabi_i2d+0x4a>
 8003034:	0002      	movs	r2, r0
 8003036:	002e      	movs	r6, r5
 8003038:	3215      	adds	r2, #21
 800303a:	4096      	lsls	r6, r2
 800303c:	220b      	movs	r2, #11
 800303e:	1a12      	subs	r2, r2, r0
 8003040:	40d5      	lsrs	r5, r2
 8003042:	055b      	lsls	r3, r3, #21
 8003044:	032d      	lsls	r5, r5, #12
 8003046:	0b2d      	lsrs	r5, r5, #12
 8003048:	0d5b      	lsrs	r3, r3, #21
 800304a:	e003      	b.n	8003054 <__aeabi_i2d+0x3c>
 800304c:	2400      	movs	r4, #0
 800304e:	2300      	movs	r3, #0
 8003050:	2500      	movs	r5, #0
 8003052:	2600      	movs	r6, #0
 8003054:	051b      	lsls	r3, r3, #20
 8003056:	432b      	orrs	r3, r5
 8003058:	07e4      	lsls	r4, r4, #31
 800305a:	4323      	orrs	r3, r4
 800305c:	0030      	movs	r0, r6
 800305e:	0019      	movs	r1, r3
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	380b      	subs	r0, #11
 8003064:	4085      	lsls	r5, r0
 8003066:	055b      	lsls	r3, r3, #21
 8003068:	032d      	lsls	r5, r5, #12
 800306a:	2600      	movs	r6, #0
 800306c:	0b2d      	lsrs	r5, r5, #12
 800306e:	0d5b      	lsrs	r3, r3, #21
 8003070:	e7f0      	b.n	8003054 <__aeabi_i2d+0x3c>
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	0000041e 	.word	0x0000041e

08003078 <__aeabi_ui2d>:
 8003078:	b510      	push	{r4, lr}
 800307a:	1e04      	subs	r4, r0, #0
 800307c:	d010      	beq.n	80030a0 <__aeabi_ui2d+0x28>
 800307e:	f000 f8ef 	bl	8003260 <__clzsi2>
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <__aeabi_ui2d+0x48>)
 8003084:	1a1b      	subs	r3, r3, r0
 8003086:	280a      	cmp	r0, #10
 8003088:	dc11      	bgt.n	80030ae <__aeabi_ui2d+0x36>
 800308a:	220b      	movs	r2, #11
 800308c:	0021      	movs	r1, r4
 800308e:	1a12      	subs	r2, r2, r0
 8003090:	40d1      	lsrs	r1, r2
 8003092:	3015      	adds	r0, #21
 8003094:	030a      	lsls	r2, r1, #12
 8003096:	055b      	lsls	r3, r3, #21
 8003098:	4084      	lsls	r4, r0
 800309a:	0b12      	lsrs	r2, r2, #12
 800309c:	0d5b      	lsrs	r3, r3, #21
 800309e:	e001      	b.n	80030a4 <__aeabi_ui2d+0x2c>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2200      	movs	r2, #0
 80030a4:	051b      	lsls	r3, r3, #20
 80030a6:	4313      	orrs	r3, r2
 80030a8:	0020      	movs	r0, r4
 80030aa:	0019      	movs	r1, r3
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	0022      	movs	r2, r4
 80030b0:	380b      	subs	r0, #11
 80030b2:	4082      	lsls	r2, r0
 80030b4:	055b      	lsls	r3, r3, #21
 80030b6:	0312      	lsls	r2, r2, #12
 80030b8:	2400      	movs	r4, #0
 80030ba:	0b12      	lsrs	r2, r2, #12
 80030bc:	0d5b      	lsrs	r3, r3, #21
 80030be:	e7f1      	b.n	80030a4 <__aeabi_ui2d+0x2c>
 80030c0:	0000041e 	.word	0x0000041e

080030c4 <__aeabi_f2d>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	0242      	lsls	r2, r0, #9
 80030c8:	0043      	lsls	r3, r0, #1
 80030ca:	0fc4      	lsrs	r4, r0, #31
 80030cc:	20fe      	movs	r0, #254	; 0xfe
 80030ce:	0e1b      	lsrs	r3, r3, #24
 80030d0:	1c59      	adds	r1, r3, #1
 80030d2:	0a55      	lsrs	r5, r2, #9
 80030d4:	4208      	tst	r0, r1
 80030d6:	d00c      	beq.n	80030f2 <__aeabi_f2d+0x2e>
 80030d8:	21e0      	movs	r1, #224	; 0xe0
 80030da:	0089      	lsls	r1, r1, #2
 80030dc:	468c      	mov	ip, r1
 80030de:	076d      	lsls	r5, r5, #29
 80030e0:	0b12      	lsrs	r2, r2, #12
 80030e2:	4463      	add	r3, ip
 80030e4:	051b      	lsls	r3, r3, #20
 80030e6:	4313      	orrs	r3, r2
 80030e8:	07e4      	lsls	r4, r4, #31
 80030ea:	4323      	orrs	r3, r4
 80030ec:	0028      	movs	r0, r5
 80030ee:	0019      	movs	r1, r3
 80030f0:	bd70      	pop	{r4, r5, r6, pc}
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d114      	bne.n	8003120 <__aeabi_f2d+0x5c>
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	d01b      	beq.n	8003132 <__aeabi_f2d+0x6e>
 80030fa:	0028      	movs	r0, r5
 80030fc:	f000 f8b0 	bl	8003260 <__clzsi2>
 8003100:	280a      	cmp	r0, #10
 8003102:	dc1c      	bgt.n	800313e <__aeabi_f2d+0x7a>
 8003104:	230b      	movs	r3, #11
 8003106:	002a      	movs	r2, r5
 8003108:	1a1b      	subs	r3, r3, r0
 800310a:	40da      	lsrs	r2, r3
 800310c:	0003      	movs	r3, r0
 800310e:	3315      	adds	r3, #21
 8003110:	409d      	lsls	r5, r3
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <__aeabi_f2d+0x88>)
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	1a1b      	subs	r3, r3, r0
 8003118:	055b      	lsls	r3, r3, #21
 800311a:	0b12      	lsrs	r2, r2, #12
 800311c:	0d5b      	lsrs	r3, r3, #21
 800311e:	e7e1      	b.n	80030e4 <__aeabi_f2d+0x20>
 8003120:	2d00      	cmp	r5, #0
 8003122:	d009      	beq.n	8003138 <__aeabi_f2d+0x74>
 8003124:	0b13      	lsrs	r3, r2, #12
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	0312      	lsls	r2, r2, #12
 800312a:	431a      	orrs	r2, r3
 800312c:	076d      	lsls	r5, r5, #29
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <__aeabi_f2d+0x8c>)
 8003130:	e7d8      	b.n	80030e4 <__aeabi_f2d+0x20>
 8003132:	2300      	movs	r3, #0
 8003134:	2200      	movs	r2, #0
 8003136:	e7d5      	b.n	80030e4 <__aeabi_f2d+0x20>
 8003138:	2200      	movs	r2, #0
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <__aeabi_f2d+0x8c>)
 800313c:	e7d2      	b.n	80030e4 <__aeabi_f2d+0x20>
 800313e:	0003      	movs	r3, r0
 8003140:	002a      	movs	r2, r5
 8003142:	3b0b      	subs	r3, #11
 8003144:	409a      	lsls	r2, r3
 8003146:	2500      	movs	r5, #0
 8003148:	e7e3      	b.n	8003112 <__aeabi_f2d+0x4e>
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	00000389 	.word	0x00000389
 8003150:	000007ff 	.word	0x000007ff

08003154 <__aeabi_d2f>:
 8003154:	0002      	movs	r2, r0
 8003156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003158:	004b      	lsls	r3, r1, #1
 800315a:	030d      	lsls	r5, r1, #12
 800315c:	0f40      	lsrs	r0, r0, #29
 800315e:	0d5b      	lsrs	r3, r3, #21
 8003160:	0fcc      	lsrs	r4, r1, #31
 8003162:	0a6d      	lsrs	r5, r5, #9
 8003164:	493a      	ldr	r1, [pc, #232]	; (8003250 <__aeabi_d2f+0xfc>)
 8003166:	4305      	orrs	r5, r0
 8003168:	1c58      	adds	r0, r3, #1
 800316a:	00d7      	lsls	r7, r2, #3
 800316c:	4208      	tst	r0, r1
 800316e:	d00a      	beq.n	8003186 <__aeabi_d2f+0x32>
 8003170:	4938      	ldr	r1, [pc, #224]	; (8003254 <__aeabi_d2f+0x100>)
 8003172:	1859      	adds	r1, r3, r1
 8003174:	29fe      	cmp	r1, #254	; 0xfe
 8003176:	dd16      	ble.n	80031a6 <__aeabi_d2f+0x52>
 8003178:	20ff      	movs	r0, #255	; 0xff
 800317a:	2200      	movs	r2, #0
 800317c:	05c0      	lsls	r0, r0, #23
 800317e:	4310      	orrs	r0, r2
 8003180:	07e4      	lsls	r4, r4, #31
 8003182:	4320      	orrs	r0, r4
 8003184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <__aeabi_d2f+0x44>
 800318a:	433d      	orrs	r5, r7
 800318c:	d026      	beq.n	80031dc <__aeabi_d2f+0x88>
 800318e:	2205      	movs	r2, #5
 8003190:	0192      	lsls	r2, r2, #6
 8003192:	0a52      	lsrs	r2, r2, #9
 8003194:	b2d8      	uxtb	r0, r3
 8003196:	e7f1      	b.n	800317c <__aeabi_d2f+0x28>
 8003198:	432f      	orrs	r7, r5
 800319a:	d0ed      	beq.n	8003178 <__aeabi_d2f+0x24>
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	03d2      	lsls	r2, r2, #15
 80031a0:	20ff      	movs	r0, #255	; 0xff
 80031a2:	432a      	orrs	r2, r5
 80031a4:	e7ea      	b.n	800317c <__aeabi_d2f+0x28>
 80031a6:	2900      	cmp	r1, #0
 80031a8:	dd1b      	ble.n	80031e2 <__aeabi_d2f+0x8e>
 80031aa:	0192      	lsls	r2, r2, #6
 80031ac:	1e50      	subs	r0, r2, #1
 80031ae:	4182      	sbcs	r2, r0
 80031b0:	00ed      	lsls	r5, r5, #3
 80031b2:	0f7f      	lsrs	r7, r7, #29
 80031b4:	432a      	orrs	r2, r5
 80031b6:	433a      	orrs	r2, r7
 80031b8:	0753      	lsls	r3, r2, #29
 80031ba:	d047      	beq.n	800324c <__aeabi_d2f+0xf8>
 80031bc:	230f      	movs	r3, #15
 80031be:	4013      	ands	r3, r2
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d000      	beq.n	80031c6 <__aeabi_d2f+0x72>
 80031c4:	3204      	adds	r2, #4
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	04db      	lsls	r3, r3, #19
 80031ca:	4013      	ands	r3, r2
 80031cc:	d03e      	beq.n	800324c <__aeabi_d2f+0xf8>
 80031ce:	1c48      	adds	r0, r1, #1
 80031d0:	29fe      	cmp	r1, #254	; 0xfe
 80031d2:	d0d1      	beq.n	8003178 <__aeabi_d2f+0x24>
 80031d4:	0192      	lsls	r2, r2, #6
 80031d6:	0a52      	lsrs	r2, r2, #9
 80031d8:	b2c0      	uxtb	r0, r0
 80031da:	e7cf      	b.n	800317c <__aeabi_d2f+0x28>
 80031dc:	2000      	movs	r0, #0
 80031de:	2200      	movs	r2, #0
 80031e0:	e7cc      	b.n	800317c <__aeabi_d2f+0x28>
 80031e2:	000a      	movs	r2, r1
 80031e4:	3217      	adds	r2, #23
 80031e6:	db2f      	blt.n	8003248 <__aeabi_d2f+0xf4>
 80031e8:	2680      	movs	r6, #128	; 0x80
 80031ea:	0436      	lsls	r6, r6, #16
 80031ec:	432e      	orrs	r6, r5
 80031ee:	251e      	movs	r5, #30
 80031f0:	1a6d      	subs	r5, r5, r1
 80031f2:	2d1f      	cmp	r5, #31
 80031f4:	dd11      	ble.n	800321a <__aeabi_d2f+0xc6>
 80031f6:	2202      	movs	r2, #2
 80031f8:	4252      	negs	r2, r2
 80031fa:	1a52      	subs	r2, r2, r1
 80031fc:	0031      	movs	r1, r6
 80031fe:	40d1      	lsrs	r1, r2
 8003200:	2d20      	cmp	r5, #32
 8003202:	d004      	beq.n	800320e <__aeabi_d2f+0xba>
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <__aeabi_d2f+0x104>)
 8003206:	4694      	mov	ip, r2
 8003208:	4463      	add	r3, ip
 800320a:	409e      	lsls	r6, r3
 800320c:	4337      	orrs	r7, r6
 800320e:	003a      	movs	r2, r7
 8003210:	1e53      	subs	r3, r2, #1
 8003212:	419a      	sbcs	r2, r3
 8003214:	430a      	orrs	r2, r1
 8003216:	2100      	movs	r1, #0
 8003218:	e7ce      	b.n	80031b8 <__aeabi_d2f+0x64>
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <__aeabi_d2f+0x108>)
 800321c:	0038      	movs	r0, r7
 800321e:	4694      	mov	ip, r2
 8003220:	4463      	add	r3, ip
 8003222:	4098      	lsls	r0, r3
 8003224:	003a      	movs	r2, r7
 8003226:	1e41      	subs	r1, r0, #1
 8003228:	4188      	sbcs	r0, r1
 800322a:	409e      	lsls	r6, r3
 800322c:	40ea      	lsrs	r2, r5
 800322e:	4330      	orrs	r0, r6
 8003230:	4302      	orrs	r2, r0
 8003232:	2100      	movs	r1, #0
 8003234:	0753      	lsls	r3, r2, #29
 8003236:	d1c1      	bne.n	80031bc <__aeabi_d2f+0x68>
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	0013      	movs	r3, r2
 800323c:	04c9      	lsls	r1, r1, #19
 800323e:	2001      	movs	r0, #1
 8003240:	400b      	ands	r3, r1
 8003242:	420a      	tst	r2, r1
 8003244:	d1c6      	bne.n	80031d4 <__aeabi_d2f+0x80>
 8003246:	e7a3      	b.n	8003190 <__aeabi_d2f+0x3c>
 8003248:	2300      	movs	r3, #0
 800324a:	e7a0      	b.n	800318e <__aeabi_d2f+0x3a>
 800324c:	000b      	movs	r3, r1
 800324e:	e79f      	b.n	8003190 <__aeabi_d2f+0x3c>
 8003250:	000007fe 	.word	0x000007fe
 8003254:	fffffc80 	.word	0xfffffc80
 8003258:	fffffca2 	.word	0xfffffca2
 800325c:	fffffc82 	.word	0xfffffc82

08003260 <__clzsi2>:
 8003260:	211c      	movs	r1, #28
 8003262:	2301      	movs	r3, #1
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0xe>
 800326a:	0c00      	lsrs	r0, r0, #16
 800326c:	3910      	subs	r1, #16
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	4298      	cmp	r0, r3
 8003272:	d301      	bcc.n	8003278 <__clzsi2+0x18>
 8003274:	0a00      	lsrs	r0, r0, #8
 8003276:	3908      	subs	r1, #8
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	4298      	cmp	r0, r3
 800327c:	d301      	bcc.n	8003282 <__clzsi2+0x22>
 800327e:	0900      	lsrs	r0, r0, #4
 8003280:	3904      	subs	r1, #4
 8003282:	a202      	add	r2, pc, #8	; (adr r2, 800328c <__clzsi2+0x2c>)
 8003284:	5c10      	ldrb	r0, [r2, r0]
 8003286:	1840      	adds	r0, r0, r1
 8003288:	4770      	bx	lr
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	02020304 	.word	0x02020304
 8003290:	01010101 	.word	0x01010101
	...

0800329c <Read_ADC1>:
static void Init_ADC(){
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
}

static float Read_ADC1(){
	float val=(float)ADCvalue[0];
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <Read_ADC1+0x1c>)
static float Read_ADC1(){
 800329e:	b510      	push	{r4, lr}
	float val=(float)ADCvalue[0];
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	f7fe f87f 	bl	80013a4 <__aeabi_ui2f>

	return ((float)(val*VSENSE*11));
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <Read_ADC1+0x20>)
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	f7fd fd1b 	bl	8000ce4 <__aeabi_fmul>
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <Read_ADC1+0x24>)
 80032b0:	f7fd fd18 	bl	8000ce4 <__aeabi_fmul>
    	//HAL_Delay(1);
}
 80032b4:	bd10      	pop	{r4, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	20000308 	.word	0x20000308
 80032bc:	200000b4 	.word	0x200000b4
 80032c0:	41300000 	.word	0x41300000

080032c4 <Read_ADC2>:

static float Read_ADC2(){
	return (ADCvalue[1]*VSENSE*11);
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <Read_ADC2+0x1c>)
static float Read_ADC2(){
 80032c6:	b510      	push	{r4, lr}
	return (ADCvalue[1]*VSENSE*11);
 80032c8:	6858      	ldr	r0, [r3, #4]
 80032ca:	f7fe f86b 	bl	80013a4 <__aeabi_ui2f>
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <Read_ADC2+0x20>)
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	f7fd fd07 	bl	8000ce4 <__aeabi_fmul>
 80032d6:	4904      	ldr	r1, [pc, #16]	; (80032e8 <Read_ADC2+0x24>)
 80032d8:	f7fd fd04 	bl	8000ce4 <__aeabi_fmul>
	    	//HAL_Delay(1);
}
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	20000308 	.word	0x20000308
 80032e4:	200000b4 	.word	0x200000b4
 80032e8:	41300000 	.word	0x41300000

080032ec <Read_EXT_B_SENSE>:
static float Read_EXT_B_SENSE(){
	return (ADCvalue[2]*VSENSE*16);
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <Read_EXT_B_SENSE+0x1c>)
static float Read_EXT_B_SENSE(){
 80032ee:	b510      	push	{r4, lr}
	return (ADCvalue[2]*VSENSE*16);
 80032f0:	6898      	ldr	r0, [r3, #8]
 80032f2:	f7fe f857 	bl	80013a4 <__aeabi_ui2f>
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <Read_EXT_B_SENSE+0x20>)
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	f7fd fcf3 	bl	8000ce4 <__aeabi_fmul>
 80032fe:	2183      	movs	r1, #131	; 0x83
 8003300:	05c9      	lsls	r1, r1, #23
 8003302:	f7fd fcef 	bl	8000ce4 <__aeabi_fmul>
	    	//HAL_Delay(1);
}
 8003306:	bd10      	pop	{r4, pc}
 8003308:	20000308 	.word	0x20000308
 800330c:	200000b4 	.word	0x200000b4

08003310 <Read_INT_B_SENSE>:
static float Read_INT_B_SENSE(){
	return (ADCvalue[3]*VSENSE*2);
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <Read_INT_B_SENSE+0x1c>)
static float Read_INT_B_SENSE(){
 8003312:	b510      	push	{r4, lr}
	return (ADCvalue[3]*VSENSE*2);
 8003314:	68d8      	ldr	r0, [r3, #12]
 8003316:	f7fe f845 	bl	80013a4 <__aeabi_ui2f>
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <Read_INT_B_SENSE+0x20>)
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	f7fd fce1 	bl	8000ce4 <__aeabi_fmul>
 8003322:	1c01      	adds	r1, r0, #0
 8003324:	f7fd f974 	bl	8000610 <__aeabi_fadd>
	    	//HAL_Delay(1);
}
 8003328:	bd10      	pop	{r4, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	20000308 	.word	0x20000308
 8003330:	200000b4 	.word	0x200000b4

08003334 <Debug_Tx>:
}




static void Debug_Tx(char _out[]){
 8003334:	b537      	push	{r0, r1, r2, r4, r5, lr}

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003336:	220c      	movs	r2, #12
 8003338:	4d0a      	ldr	r5, [pc, #40]	; (8003364 <Debug_Tx+0x30>)
static void Debug_Tx(char _out[]){
 800333a:	0004      	movs	r4, r0
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003340:	f7fc fee2 	bl	8000108 <strlen>
 8003344:	0021      	movs	r1, r4
 8003346:	b282      	uxth	r2, r0
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <Debug_Tx+0x34>)
 800334a:	0028      	movs	r0, r5
 800334c:	f006 fa20 	bl	8009790 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <Debug_Tx+0x38>)
 8003352:	a901      	add	r1, sp, #4
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003354:	0028      	movs	r0, r5
	char newline[2] = "\r\n";
 8003356:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003358:	2202      	movs	r2, #2
 800335a:	230a      	movs	r3, #10
 800335c:	f006 fa18 	bl	8009790 <HAL_UART_Transmit>


}
 8003360:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	20003e18 	.word	0x20003e18
 8003368:	00001388 	.word	0x00001388
 800336c:	00000a0d 	.word	0x00000a0d

08003370 <GSM_Tx>:




static void GSM_Tx(const char _out[]){
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003370:	220c      	movs	r2, #12
static void GSM_Tx(const char _out[]){
 8003372:	b570      	push	{r4, r5, r6, lr}
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003374:	4d06      	ldr	r5, [pc, #24]	; (8003390 <GSM_Tx+0x20>)
static void GSM_Tx(const char _out[]){
 8003376:	0004      	movs	r4, r0
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800337c:	f7fc fec4 	bl	8000108 <strlen>
 8003380:	2396      	movs	r3, #150	; 0x96
 8003382:	b282      	uxth	r2, r0
 8003384:	0021      	movs	r1, r4
 8003386:	0028      	movs	r0, r5
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	f006 fa01 	bl	8009790 <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	20003cf0 	.word	0x20003cf0

08003394 <Read_DI_MAINS_STATE>:
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8003394:	2180      	movs	r1, #128	; 0x80
static int Read_DI_MAINS_STATE(){
 8003396:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8003398:	4802      	ldr	r0, [pc, #8]	; (80033a4 <Read_DI_MAINS_STATE+0x10>)
 800339a:	0189      	lsls	r1, r1, #6
 800339c:	f004 f96a 	bl	8007674 <HAL_GPIO_ReadPin>
}
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	50000400 	.word	0x50000400

080033a8 <Read_DI_ACC_STATE>:
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80033a8:	2180      	movs	r1, #128	; 0x80
static int Read_DI_ACC_STATE(){
 80033aa:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <Read_DI_ACC_STATE+0x10>)
 80033ae:	01c9      	lsls	r1, r1, #7
 80033b0:	f004 f960 	bl	8007674 <HAL_GPIO_ReadPin>
}
 80033b4:	bd10      	pop	{r4, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	50000400 	.word	0x50000400

080033bc <Read_DI_BOX_STATE>:
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80033bc:	2180      	movs	r1, #128	; 0x80
static char Read_DI_BOX_STATE(){
 80033be:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80033c0:	4804      	ldr	r0, [pc, #16]	; (80033d4 <Read_DI_BOX_STATE+0x18>)
 80033c2:	0209      	lsls	r1, r1, #8
 80033c4:	f004 f956 	bl	8007674 <HAL_GPIO_ReadPin>
	if(val==1)box='O';
 80033c8:	234f      	movs	r3, #79	; 0x4f
 80033ca:	2801      	cmp	r0, #1
 80033cc:	d000      	beq.n	80033d0 <Read_DI_BOX_STATE+0x14>
		else box='C';
 80033ce:	3b0c      	subs	r3, #12
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	bd10      	pop	{r4, pc}
 80033d4:	50000400 	.word	0x50000400

080033d8 <Read_DI_SOS_STATE>:
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	20a0      	movs	r0, #160	; 0xa0
static int Read_DI_SOS_STATE(){
 80033dc:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80033de:	0049      	lsls	r1, r1, #1
 80033e0:	05c0      	lsls	r0, r0, #23
 80033e2:	f004 f947 	bl	8007674 <HAL_GPIO_ReadPin>
}
 80033e6:	bd10      	pop	{r4, pc}

080033e8 <StartTask02>:
{
 80033e8:	b510      	push	{r4, lr}
while(1){osDelay(1);
 80033ea:	2001      	movs	r0, #1
 80033ec:	f006 fcc0 	bl	8009d70 <osDelay>
 80033f0:	e7fb      	b.n	80033ea <StartTask02+0x2>
	...

080033f4 <SET_GSM_VCC_EN.part.0>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
	}
}

static void SET_GSM_VCC_EN(int val){
 80033f4:	b510      	push	{r4, lr}
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80033f6:	2201      	movs	r2, #1
 80033f8:	2140      	movs	r1, #64	; 0x40
 80033fa:	4802      	ldr	r0, [pc, #8]	; (8003404 <SET_GSM_VCC_EN.part.0+0x10>)
 80033fc:	f004 f940 	bl	8007680 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
	}
}
 8003400:	bd10      	pop	{r4, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	50000800 	.word	0x50000800

08003408 <SET_PWRKEY.part.0>:
static void SET_PWRKEY(int val){
 8003408:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800340a:	2201      	movs	r2, #1
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	4802      	ldr	r0, [pc, #8]	; (8003418 <SET_PWRKEY.part.0+0x10>)
 8003410:	f004 f936 	bl	8007680 <HAL_GPIO_WritePin>
}
 8003414:	bd10      	pop	{r4, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	50000800 	.word	0x50000800

0800341c <SET_LED_PWR.part.0>:
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 800341c:	2201      	movs	r2, #1
static void SET_LED_PWR(int val){
 800341e:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 8003420:	0011      	movs	r1, r2
 8003422:	4802      	ldr	r0, [pc, #8]	; (800342c <SET_LED_PWR.part.0+0x10>)
 8003424:	f004 f92c 	bl	8007680 <HAL_GPIO_WritePin>
}
 8003428:	bd10      	pop	{r4, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	50000c00 	.word	0x50000c00

08003430 <Debug_Rx.isra.0>:
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003430:	220c      	movs	r2, #12
 8003432:	4806      	ldr	r0, [pc, #24]	; (800344c <Debug_Rx.isra.0+0x1c>)
static char* Debug_Rx(){
 8003434:	b510      	push	{r4, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003436:	6803      	ldr	r3, [r0, #0]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8003438:	4905      	ldr	r1, [pc, #20]	; (8003450 <Debug_Rx.isra.0+0x20>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800343a:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 800343c:	2396      	movs	r3, #150	; 0x96
 800343e:	32ee      	adds	r2, #238	; 0xee
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	f006 fa0c 	bl	8009860 <HAL_UART_Receive>
}
 8003448:	bd10      	pop	{r4, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20003e18 	.word	0x20003e18
 8003450:	20003eac 	.word	0x20003eac

08003454 <readAcc.isra.0>:



static float* readAcc(){

	ACC_GYRO_data[0]=0;
 8003454:	2300      	movs	r3, #0
static float* readAcc(){
 8003456:	b5f0      	push	{r4, r5, r6, r7, lr}
	ACC_GYRO_data[0]=0;
 8003458:	4c4b      	ldr	r4, [pc, #300]	; (8003588 <readAcc.isra.0+0x134>)
	ACC_GYRO_data[5]=0;
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800345a:	2206      	movs	r2, #6
	ACC_GYRO_data[0]=0;
 800345c:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=0;
 800345e:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=0;
 8003460:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=0;
 8003462:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=0;
 8003464:	6123      	str	r3, [r4, #16]
	ACC_GYRO_data[5]=0;
 8003466:	6163      	str	r3, [r4, #20]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8003468:	23fa      	movs	r3, #250	; 0xfa
static float* readAcc(){
 800346a:	b08b      	sub	sp, #44	; 0x2c
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800346c:	4d47      	ldr	r5, [pc, #284]	; (800358c <readAcc.isra.0+0x138>)
 800346e:	ae08      	add	r6, sp, #32
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	9201      	str	r2, [sp, #4]
 8003476:	9600      	str	r6, [sp, #0]
 8003478:	2301      	movs	r3, #1
 800347a:	21d0      	movs	r1, #208	; 0xd0
 800347c:	0028      	movs	r0, r5
 800347e:	3235      	adds	r2, #53	; 0x35
 8003480:	f004 fb64 	bl	8007b4c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003484:	8830      	ldrh	r0, [r6, #0]
 8003486:	4b42      	ldr	r3, [pc, #264]	; (8003590 <readAcc.isra.0+0x13c>)
 8003488:	8877      	ldrh	r7, [r6, #2]
 800348a:	ba42      	rev16	r2, r0
 800348c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <readAcc.isra.0+0x140>)
 8003490:	ba7a      	rev16	r2, r7
 8003492:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003494:	88b3      	ldrh	r3, [r6, #4]
 8003496:	bac0      	revsh	r0, r0
 8003498:	ba5a      	rev16	r2, r3
 800349a:	bad9      	revsh	r1, r3
 800349c:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <readAcc.isra.0+0x144>)
 800349e:	9107      	str	r1, [sp, #28]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 80034a0:	493e      	ldr	r1, [pc, #248]	; (800359c <readAcc.isra.0+0x148>)
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80034a2:	801a      	strh	r2, [r3, #0]
	Ax = Accel_X_RAW/16384.0;
 80034a4:	9104      	str	r1, [sp, #16]
 80034a6:	f7ff fdb7 	bl	8003018 <__aeabi_i2d>
 80034aa:	2200      	movs	r2, #0
 80034ac:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <readAcc.isra.0+0x14c>)
 80034ae:	f7fe ff1b 	bl	80022e8 <__aeabi_dmul>
 80034b2:	f7ff fe4f 	bl	8003154 <__aeabi_d2f>
 80034b6:	9904      	ldr	r1, [sp, #16]
 80034b8:	baff      	revsh	r7, r7
 80034ba:	6008      	str	r0, [r1, #0]
	Ay = Accel_Y_RAW/16384.0;
 80034bc:	4939      	ldr	r1, [pc, #228]	; (80035a4 <readAcc.isra.0+0x150>)
 80034be:	0038      	movs	r0, r7
 80034c0:	9105      	str	r1, [sp, #20]
 80034c2:	f7ff fda9 	bl	8003018 <__aeabi_i2d>
 80034c6:	2200      	movs	r2, #0
 80034c8:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <readAcc.isra.0+0x14c>)
 80034ca:	f7fe ff0d 	bl	80022e8 <__aeabi_dmul>
 80034ce:	f7ff fe41 	bl	8003154 <__aeabi_d2f>
 80034d2:	9905      	ldr	r1, [sp, #20]
 80034d4:	6008      	str	r0, [r1, #0]
	Az = Accel_Z_RAW/16384.0;
 80034d6:	4934      	ldr	r1, [pc, #208]	; (80035a8 <readAcc.isra.0+0x154>)
 80034d8:	9807      	ldr	r0, [sp, #28]
 80034da:	9106      	str	r1, [sp, #24]
 80034dc:	f7ff fd9c 	bl	8003018 <__aeabi_i2d>
 80034e0:	2200      	movs	r2, #0
 80034e2:	4b2f      	ldr	r3, [pc, #188]	; (80035a0 <readAcc.isra.0+0x14c>)
 80034e4:	f7fe ff00 	bl	80022e8 <__aeabi_dmul>
 80034e8:	f7ff fe34 	bl	8003154 <__aeabi_d2f>


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80034ec:	23fa      	movs	r3, #250	; 0xfa
 80034ee:	2206      	movs	r2, #6
	Az = Accel_Z_RAW/16384.0;
 80034f0:	9906      	ldr	r1, [sp, #24]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80034f2:	009b      	lsls	r3, r3, #2
	Az = Accel_Z_RAW/16384.0;
 80034f4:	6008      	str	r0, [r1, #0]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80034f6:	9302      	str	r3, [sp, #8]
 80034f8:	9201      	str	r2, [sp, #4]
 80034fa:	9600      	str	r6, [sp, #0]
 80034fc:	2301      	movs	r3, #1
 80034fe:	21d0      	movs	r1, #208	; 0xd0
 8003500:	0028      	movs	r0, r5
 8003502:	323d      	adds	r2, #61	; 0x3d
 8003504:	f004 fb22 	bl	8007b4c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003508:	8830      	ldrh	r0, [r6, #0]
 800350a:	4b28      	ldr	r3, [pc, #160]	; (80035ac <readAcc.isra.0+0x158>)
 800350c:	8875      	ldrh	r5, [r6, #2]
 800350e:	ba42      	rev16	r2, r0
 8003510:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003512:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <readAcc.isra.0+0x15c>)
 8003514:	88b7      	ldrh	r7, [r6, #4]
 8003516:	ba6a      	rev16	r2, r5
 8003518:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <readAcc.isra.0+0x160>)
 800351c:	ba7a      	rev16	r2, r7
 800351e:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8003520:	bac0      	revsh	r0, r0
 8003522:	f7ff fd79 	bl	8003018 <__aeabi_i2d>
 8003526:	2200      	movs	r2, #0
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <readAcc.isra.0+0x164>)
 800352a:	f7fe fae3 	bl	8001af4 <__aeabi_ddiv>
 800352e:	f7ff fe11 	bl	8003154 <__aeabi_d2f>
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <readAcc.isra.0+0x168>)
 8003534:	baed      	revsh	r5, r5
 8003536:	1c06      	adds	r6, r0, #0
 8003538:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 800353a:	0028      	movs	r0, r5
 800353c:	f7ff fd6c 	bl	8003018 <__aeabi_i2d>
 8003540:	2200      	movs	r2, #0
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <readAcc.isra.0+0x164>)
 8003544:	f7fe fad6 	bl	8001af4 <__aeabi_ddiv>
 8003548:	f7ff fe04 	bl	8003154 <__aeabi_d2f>
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <readAcc.isra.0+0x16c>)
 800354e:	baff      	revsh	r7, r7
 8003550:	1c05      	adds	r5, r0, #0
 8003552:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8003554:	0038      	movs	r0, r7
 8003556:	f7ff fd5f 	bl	8003018 <__aeabi_i2d>
 800355a:	2200      	movs	r2, #0
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <readAcc.isra.0+0x164>)
 800355e:	f7fe fac9 	bl	8001af4 <__aeabi_ddiv>
 8003562:	f7ff fdf7 	bl	8003154 <__aeabi_d2f>
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <readAcc.isra.0+0x170>)
	ACC_GYRO_data[0]=Ax;
	ACC_GYRO_data[1]=Ay;
	ACC_GYRO_data[2]=Az;
	ACC_GYRO_data[3]=Gx;
 8003568:	60e6      	str	r6, [r4, #12]
	Gz = Gyro_Z_RAW/131.0;
 800356a:	6018      	str	r0, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 800356c:	9b04      	ldr	r3, [sp, #16]
	ACC_GYRO_data[4]=Gy;
 800356e:	6125      	str	r5, [r4, #16]
	ACC_GYRO_data[0]=Ax;
 8003570:	681b      	ldr	r3, [r3, #0]
	ACC_GYRO_data[5]=Gz;
 8003572:	6160      	str	r0, [r4, #20]
	ACC_GYRO_data[0]=Ax;
 8003574:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=Ay;
 8003576:	9b05      	ldr	r3, [sp, #20]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=Az;
 800357c:	9b06      	ldr	r3, [sp, #24]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60a3      	str	r3, [r4, #8]
	return(ACC_GYRO_data);

	//sprintf (buf, "%.2f", Ax);
}
 8003582:	b00b      	add	sp, #44	; 0x2c
 8003584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	200002ec 	.word	0x200002ec
 800358c:	20003bec 	.word	0x20003bec
 8003590:	20000320 	.word	0x20000320
 8003594:	20000322 	.word	0x20000322
 8003598:	20000324 	.word	0x20000324
 800359c:	20000328 	.word	0x20000328
 80035a0:	3f100000 	.word	0x3f100000
 80035a4:	2000032c 	.word	0x2000032c
 80035a8:	20000330 	.word	0x20000330
 80035ac:	20001238 	.word	0x20001238
 80035b0:	2000123a 	.word	0x2000123a
 80035b4:	2000123c 	.word	0x2000123c
 80035b8:	40606000 	.word	0x40606000
 80035bc:	20001230 	.word	0x20001230
 80035c0:	20001234 	.word	0x20001234
 80035c4:	20001240 	.word	0x20001240

080035c8 <StartTask03>:
 80035c8:	b510      	push	{r4, lr}
 80035ca:	2001      	movs	r0, #1
 80035cc:	f006 fbd0 	bl	8009d70 <osDelay>
 80035d0:	e7fb      	b.n	80035ca <StartTask03+0x2>
	...

080035d4 <RestartGSM>:
	}
	return 1;
}

void RestartGSM()
{
 80035d4:	b570      	push	{r4, r5, r6, lr}
	SET_GSM_VCC_EN(1);
	SET_PWRKEY(0);
	HAL_Delay(700);
 80035d6:	25af      	movs	r5, #175	; 0xaf
	SET_PWRKEY(1);
	HAL_Delay(500);
 80035d8:	26fa      	movs	r6, #250	; 0xfa
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80035da:	4c19      	ldr	r4, [pc, #100]	; (8003640 <RestartGSM+0x6c>)
 80035dc:	f7ff ff0a 	bl	80033f4 <SET_GSM_VCC_EN.part.0>
	HAL_Delay(700);
 80035e0:	00ad      	lsls	r5, r5, #2
 80035e2:	2200      	movs	r2, #0
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0020      	movs	r0, r4
 80035e8:	f004 f84a 	bl	8007680 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80035ec:	0076      	lsls	r6, r6, #1
	HAL_Delay(700);
 80035ee:	0028      	movs	r0, r5
 80035f0:	f003 fa24 	bl	8006a3c <HAL_Delay>
	if(val==1){
 80035f4:	f7ff ff08 	bl	8003408 <SET_PWRKEY.part.0>
	HAL_Delay(500);
 80035f8:	0030      	movs	r0, r6
 80035fa:	f003 fa1f 	bl	8006a3c <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80035fe:	2200      	movs	r2, #0
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	0020      	movs	r0, r4
 8003604:	f004 f83c 	bl	8007680 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
	HAL_Delay(700);
 8003608:	0028      	movs	r0, r5
 800360a:	f003 fa17 	bl	8006a3c <HAL_Delay>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 800360e:	2200      	movs	r2, #0
 8003610:	2140      	movs	r1, #64	; 0x40
 8003612:	0020      	movs	r0, r4
 8003614:	f004 f834 	bl	8007680 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(0);
	HAL_Delay(700);
 8003618:	0028      	movs	r0, r5
 800361a:	f003 fa0f 	bl	8006a3c <HAL_Delay>
	if(val==1){
 800361e:	f7ff fef3 	bl	8003408 <SET_PWRKEY.part.0>
	SET_PWRKEY(1);
	HAL_Delay(500);
 8003622:	0030      	movs	r0, r6
 8003624:	f003 fa0a 	bl	8006a3c <HAL_Delay>
	if(val==1){
 8003628:	f7ff fee4 	bl	80033f4 <SET_GSM_VCC_EN.part.0>
	SET_GSM_VCC_EN(1);
	HAL_Delay(200);
 800362c:	20c8      	movs	r0, #200	; 0xc8
 800362e:	f003 fa05 	bl	8006a3c <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8003632:	2200      	movs	r2, #0
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	0020      	movs	r0, r4
 8003638:	f004 f822 	bl	8007680 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
}
 800363c:	bd70      	pop	{r4, r5, r6, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	50000800 	.word	0x50000800

08003644 <SendGSMCode>:

void SendGSMCode(const char cmd[])
{
 8003644:	b570      	push	{r4, r5, r6, lr}

	memset(GSMData, 0, 990);
 8003646:	2100      	movs	r1, #0
{
 8003648:	0005      	movs	r5, r0
	memset(GSMData, 0, 990);
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <SendGSMCode+0x5c>)
 800364c:	4815      	ldr	r0, [pc, #84]	; (80036a4 <SendGSMCode+0x60>)
 800364e:	f009 fde5 	bl	800d21c <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003652:	220c      	movs	r2, #12
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <SendGSMCode+0x64>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003656:	4915      	ldr	r1, [pc, #84]	; (80036ac <SendGSMCode+0x68>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003658:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800365a:	4815      	ldr	r0, [pc, #84]	; (80036b0 <SendGSMCode+0x6c>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800365c:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800365e:	3a0b      	subs	r2, #11
 8003660:	f006 fa3e 	bl	8009ae0 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 100);
 8003664:	4c13      	ldr	r4, [pc, #76]	; (80036b4 <SendGSMCode+0x70>)
 8003666:	2264      	movs	r2, #100	; 0x64
 8003668:	2100      	movs	r1, #0
 800366a:	0020      	movs	r0, r4
 800366c:	f009 fdd6 	bl	800d21c <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 8003670:	0028      	movs	r0, r5
 8003672:	f7fc fd49 	bl	8000108 <strlen>
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <SendGSMCode+0x74>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d104      	bne.n	8003688 <SendGSMCode+0x44>
 800367e:	285a      	cmp	r0, #90	; 0x5a
 8003680:	d902      	bls.n	8003688 <SendGSMCode+0x44>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
 8003682:	480e      	ldr	r0, [pc, #56]	; (80036bc <SendGSMCode+0x78>)
 8003684:	f7ff fe56 	bl	8003334 <Debug_Tx>
	}
	strcpy(GSMTXC, cmd);
 8003688:	0029      	movs	r1, r5
 800368a:	0020      	movs	r0, r4
 800368c:	f009 ff7b 	bl	800d586 <strcpy>
	strcat(GSMTXC, "\r\n");
 8003690:	490b      	ldr	r1, [pc, #44]	; (80036c0 <SendGSMCode+0x7c>)
 8003692:	0020      	movs	r0, r4
 8003694:	f009 fdca 	bl	800d22c <strcat>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 8003698:	0020      	movs	r0, r4
 800369a:	f7ff fe69 	bl	8003370 <GSM_Tx>
	// return GSM_Rx();
}
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	000003de 	.word	0x000003de
 80036a4:	20000545 	.word	0x20000545
 80036a8:	20003d84 	.word	0x20003d84
 80036ac:	20000544 	.word	0x20000544
 80036b0:	20003cf0 	.word	0x20003cf0
 80036b4:	200011cc 	.word	0x200011cc
 80036b8:	200000c4 	.word	0x200000c4
 80036bc:	08010ec0 	.word	0x08010ec0
 80036c0:	08010fe9 	.word	0x08010fe9

080036c4 <SendGSMCodeL>:
	// return GSM_Rx();
}

void SendGSMCodeL(const char cmd[])
{
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80036c4:	220c      	movs	r2, #12
{
 80036c6:	b570      	push	{r4, r5, r6, lr}
 80036c8:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <SendGSMCodeL+0x5c>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80036cc:	4915      	ldr	r1, [pc, #84]	; (8003724 <SendGSMCodeL+0x60>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80036ce:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80036d0:	4815      	ldr	r0, [pc, #84]	; (8003728 <SendGSMCodeL+0x64>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80036d2:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80036d4:	3a0b      	subs	r2, #11
 80036d6:	f006 fa03 	bl	8009ae0 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 80036da:	2100      	movs	r1, #0
 80036dc:	4a13      	ldr	r2, [pc, #76]	; (800372c <SendGSMCodeL+0x68>)
 80036de:	4814      	ldr	r0, [pc, #80]	; (8003730 <SendGSMCodeL+0x6c>)
 80036e0:	f009 fd9c 	bl	800d21c <memset>
	memset(GSMTXC, 0, 100);
 80036e4:	4c13      	ldr	r4, [pc, #76]	; (8003734 <SendGSMCodeL+0x70>)
 80036e6:	2264      	movs	r2, #100	; 0x64
 80036e8:	2100      	movs	r1, #0
 80036ea:	0020      	movs	r0, r4
 80036ec:	f009 fd96 	bl	800d21c <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 80036f0:	0028      	movs	r0, r5
 80036f2:	f7fc fd09 	bl	8000108 <strlen>
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <SendGSMCodeL+0x74>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d104      	bne.n	8003708 <SendGSMCodeL+0x44>
 80036fe:	285a      	cmp	r0, #90	; 0x5a
 8003700:	d902      	bls.n	8003708 <SendGSMCodeL+0x44>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
 8003702:	480e      	ldr	r0, [pc, #56]	; (800373c <SendGSMCodeL+0x78>)
 8003704:	f7ff fe16 	bl	8003334 <Debug_Tx>
	}
	strcpy(GSMTXC, cmd);
 8003708:	0029      	movs	r1, r5
 800370a:	0020      	movs	r0, r4
 800370c:	f009 ff3b 	bl	800d586 <strcpy>
	strcat(GSMTXC, "\r\n");
 8003710:	490b      	ldr	r1, [pc, #44]	; (8003740 <SendGSMCodeL+0x7c>)
 8003712:	0020      	movs	r0, r4
 8003714:	f009 fd8a 	bl	800d22c <strcat>
	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 8003718:	0020      	movs	r0, r4
 800371a:	f7ff fe29 	bl	8003370 <GSM_Tx>

	// return GSM_RxL();
}
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	20003d84 	.word	0x20003d84
 8003724:	20000544 	.word	0x20000544
 8003728:	20003cf0 	.word	0x20003cf0
 800372c:	000003de 	.word	0x000003de
 8003730:	20000545 	.word	0x20000545
 8003734:	200011cc 	.word	0x200011cc
 8003738:	200000c4 	.word	0x200000c4
 800373c:	08010ec0 	.word	0x08010ec0
 8003740:	08010fe9 	.word	0x08010fe9

08003744 <SendGSMData>:

void SendGSMData(const char data[])
{
 8003744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003746:	270c      	movs	r7, #12
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <SendGSMData+0x54>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800374a:	4c14      	ldr	r4, [pc, #80]	; (800379c <SendGSMData+0x58>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800374c:	681b      	ldr	r3, [r3, #0]
{
 800374e:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003750:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003752:	2201      	movs	r2, #1
 8003754:	0020      	movs	r0, r4
 8003756:	4912      	ldr	r1, [pc, #72]	; (80037a0 <SendGSMData+0x5c>)
 8003758:	f006 f9c2 	bl	8009ae0 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 800375c:	2100      	movs	r1, #0
 800375e:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <SendGSMData+0x60>)
 8003760:	4811      	ldr	r0, [pc, #68]	; (80037a8 <SendGSMData+0x64>)
 8003762:	f009 fd5b 	bl	800d21c <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 8003766:	466b      	mov	r3, sp
 8003768:	2202      	movs	r2, #2
 800376a:	2100      	movs	r1, #0
 800376c:	1d58      	adds	r0, r3, #5
 800376e:	f009 fd55 	bl	800d21c <memset>
	end[0] = 0x1A;
 8003772:	231a      	movs	r3, #26
	memset(end, 0, 3);
 8003774:	ae01      	add	r6, sp, #4
	end[0] = 0x1A;
 8003776:	7033      	strb	r3, [r6, #0]

static void GSM_TxL(const char _out[]){

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003778:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 800377a:	0028      	movs	r0, r5
	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800377c:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 800377e:	f7fc fcc3 	bl	8000108 <strlen>
 8003782:	0029      	movs	r1, r5
 8003784:	b282      	uxth	r2, r0
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <SendGSMData+0x68>)
 8003788:	0020      	movs	r0, r4
 800378a:	f006 f801 	bl	8009790 <HAL_UART_Transmit>
	// memset(GSMTXD,0,300);
	// if((strlen(data)>) &(debug==1)){Debug_Tx("Error:GSM Data Length Exceed");}
	// strcpy(GSMTXD,data);
	// strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
	GSM_Tx((char *)end);
 800378e:	0030      	movs	r0, r6
 8003790:	f7ff fdee 	bl	8003370 <GSM_Tx>

	// return GSM_Rx();
}
 8003794:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	20003d84 	.word	0x20003d84
 800379c:	20003cf0 	.word	0x20003cf0
 80037a0:	20000544 	.word	0x20000544
 80037a4:	000003de 	.word	0x000003de
 80037a8:	20000545 	.word	0x20000545
 80037ac:	00001388 	.word	0x00001388

080037b0 <EndTransfer>:

void EndTransfer()
{

	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80037b0:	220c      	movs	r2, #12
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <EndTransfer+0x38>)
{
 80037b4:	b513      	push	{r0, r1, r4, lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80037b6:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80037b8:	490c      	ldr	r1, [pc, #48]	; (80037ec <EndTransfer+0x3c>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80037ba:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80037bc:	480c      	ldr	r0, [pc, #48]	; (80037f0 <EndTransfer+0x40>)
 80037be:	3a0b      	subs	r2, #11
 80037c0:	f006 f98e 	bl	8009ae0 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 990);
 80037c4:	2100      	movs	r1, #0
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <EndTransfer+0x44>)
 80037c8:	480b      	ldr	r0, [pc, #44]	; (80037f8 <EndTransfer+0x48>)
 80037ca:	f009 fd27 	bl	800d21c <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 80037ce:	466b      	mov	r3, sp
 80037d0:	2202      	movs	r2, #2
 80037d2:	2100      	movs	r1, #0
 80037d4:	1d58      	adds	r0, r3, #5
 80037d6:	f009 fd21 	bl	800d21c <memset>
	end[0] = 0x1A;
 80037da:	231a      	movs	r3, #26
	memset(end, 0, 3);
 80037dc:	ac01      	add	r4, sp, #4
	GSM_Tx((char *)end);
 80037de:	0020      	movs	r0, r4
	end[0] = 0x1A;
 80037e0:	7023      	strb	r3, [r4, #0]
	GSM_Tx((char *)end);
 80037e2:	f7ff fdc5 	bl	8003370 <GSM_Tx>
	// return GSM_Rx();
}
 80037e6:	bd13      	pop	{r0, r1, r4, pc}
 80037e8:	20003d84 	.word	0x20003d84
 80037ec:	20000544 	.word	0x20000544
 80037f0:	20003cf0 	.word	0x20003cf0
 80037f4:	000003de 	.word	0x000003de
 80037f8:	20000545 	.word	0x20000545

080037fc <waitForResponse>:
int waitForResponse(const char* expectedResponse, int timeout) {
	memset(GSMReply3, 0, 500);
 80037fc:	22fa      	movs	r2, #250	; 0xfa
int waitForResponse(const char* expectedResponse, int timeout) {
 80037fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(GSMReply3, 0, 500);
 8003800:	0052      	lsls	r2, r2, #1
int waitForResponse(const char* expectedResponse, int timeout) {
 8003802:	0006      	movs	r6, r0
 8003804:	000c      	movs	r4, r1
	memset(GSMReply3, 0, 500);
 8003806:	480e      	ldr	r0, [pc, #56]	; (8003840 <waitForResponse+0x44>)
 8003808:	2100      	movs	r1, #0
 800380a:	f009 fd07 	bl	800d21c <memset>
    uint16_t rxBufferIndex = 0;
    int ret=0;

	int stT = HAL_GetTick();
 800380e:	f003 f90f 	bl	8006a30 <HAL_GetTick>
 8003812:	0005      	movs	r5, r0
	while (((HAL_GetTick() - stT) <= timeout)){
 8003814:	f003 f90c 	bl	8006a30 <HAL_GetTick>
 8003818:	4f0a      	ldr	r7, [pc, #40]	; (8003844 <waitForResponse+0x48>)
 800381a:	1b40      	subs	r0, r0, r5
 800381c:	42a0      	cmp	r0, r4
 800381e:	d907      	bls.n	8003830 <waitForResponse+0x34>
        if (strstr(GSMData, expectedResponse) != NULL) {
        	ret=1;
            break;
        }
    }
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
 8003820:	4809      	ldr	r0, [pc, #36]	; (8003848 <waitForResponse+0x4c>)
 8003822:	f7ff fd87 	bl	8003334 <Debug_Tx>
 8003826:	0038      	movs	r0, r7
 8003828:	f7ff fd84 	bl	8003334 <Debug_Tx>
    int ret=0;
 800382c:	2000      	movs	r0, #0
 800382e:	e006      	b.n	800383e <waitForResponse+0x42>
        if (strstr(GSMData, expectedResponse) != NULL) {
 8003830:	0031      	movs	r1, r6
 8003832:	0038      	movs	r0, r7
 8003834:	f009 fda2 	bl	800d37c <strstr>
 8003838:	2800      	cmp	r0, #0
 800383a:	d0eb      	beq.n	8003814 <waitForResponse+0x18>
        	ret=1;
 800383c:	2001      	movs	r0, #1
	return ret;

}
 800383e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003840:	20000fd1 	.word	0x20000fd1
 8003844:	20000545 	.word	0x20000545
 8003848:	08010f4f 	.word	0x08010f4f

0800384c <GSMCellInfo>:
		ResetTCP();
	}
}

char *GSMCellInfo()
{
 800384c:	b5f0      	push	{r4, r5, r6, r7, lr}

	memset(SS0, 0, 4);
 800384e:	4bba      	ldr	r3, [pc, #744]	; (8003b38 <GSMCellInfo+0x2ec>)
{
 8003850:	b0a1      	sub	sp, #132	; 0x84
	memset(SS0, 0, 4);
 8003852:	0018      	movs	r0, r3
 8003854:	2204      	movs	r2, #4
 8003856:	2100      	movs	r1, #0
 8003858:	9312      	str	r3, [sp, #72]	; 0x48
 800385a:	f009 fcdf 	bl	800d21c <memset>
	memset(SS1, 0, 4);
 800385e:	4eb7      	ldr	r6, [pc, #732]	; (8003b3c <GSMCellInfo+0x2f0>)
 8003860:	2204      	movs	r2, #4
 8003862:	2100      	movs	r1, #0
 8003864:	0030      	movs	r0, r6
 8003866:	f009 fcd9 	bl	800d21c <memset>
	memset(SS2, 0, 4);
 800386a:	4fb5      	ldr	r7, [pc, #724]	; (8003b40 <GSMCellInfo+0x2f4>)
 800386c:	2204      	movs	r2, #4
 800386e:	2100      	movs	r1, #0
 8003870:	0038      	movs	r0, r7
 8003872:	f009 fcd3 	bl	800d21c <memset>
	memset(SS3, 0, 4);
 8003876:	4bb3      	ldr	r3, [pc, #716]	; (8003b44 <GSMCellInfo+0x2f8>)
 8003878:	2204      	movs	r2, #4
 800387a:	2100      	movs	r1, #0
 800387c:	0018      	movs	r0, r3
 800387e:	9310      	str	r3, [sp, #64]	; 0x40
 8003880:	f009 fccc 	bl	800d21c <memset>
	memset(SS4, 0, 4);
 8003884:	4bb0      	ldr	r3, [pc, #704]	; (8003b48 <GSMCellInfo+0x2fc>)
 8003886:	2204      	movs	r2, #4
 8003888:	2100      	movs	r1, #0
 800388a:	0018      	movs	r0, r3
 800388c:	9311      	str	r3, [sp, #68]	; 0x44
 800388e:	f009 fcc5 	bl	800d21c <memset>
	memset(MCC0, 0, 5);
 8003892:	4bae      	ldr	r3, [pc, #696]	; (8003b4c <GSMCellInfo+0x300>)
 8003894:	2205      	movs	r2, #5
 8003896:	2100      	movs	r1, #0
 8003898:	0018      	movs	r0, r3
 800389a:	9313      	str	r3, [sp, #76]	; 0x4c
 800389c:	f009 fcbe 	bl	800d21c <memset>
	memset(MNC0, 0, 5);
 80038a0:	4bab      	ldr	r3, [pc, #684]	; (8003b50 <GSMCellInfo+0x304>)
 80038a2:	2205      	movs	r2, #5
 80038a4:	2100      	movs	r1, #0
 80038a6:	0018      	movs	r0, r3
 80038a8:	9314      	str	r3, [sp, #80]	; 0x50
 80038aa:	f009 fcb7 	bl	800d21c <memset>
	memset(LAC0, 0, 6);
 80038ae:	4ba9      	ldr	r3, [pc, #676]	; (8003b54 <GSMCellInfo+0x308>)
 80038b0:	2206      	movs	r2, #6
 80038b2:	2100      	movs	r1, #0
 80038b4:	0018      	movs	r0, r3
 80038b6:	9315      	str	r3, [sp, #84]	; 0x54
 80038b8:	f009 fcb0 	bl	800d21c <memset>
	memset(LAC1, 0, 6);
 80038bc:	4ba6      	ldr	r3, [pc, #664]	; (8003b58 <GSMCellInfo+0x30c>)
 80038be:	2206      	movs	r2, #6
 80038c0:	2100      	movs	r1, #0
 80038c2:	0018      	movs	r0, r3
 80038c4:	9316      	str	r3, [sp, #88]	; 0x58
 80038c6:	f009 fca9 	bl	800d21c <memset>
	memset(LAC2, 0, 6);
 80038ca:	4ba4      	ldr	r3, [pc, #656]	; (8003b5c <GSMCellInfo+0x310>)
 80038cc:	2206      	movs	r2, #6
 80038ce:	2100      	movs	r1, #0
 80038d0:	0018      	movs	r0, r3
 80038d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80038d4:	f009 fca2 	bl	800d21c <memset>
	memset(LAC3, 0, 6);
 80038d8:	4ba1      	ldr	r3, [pc, #644]	; (8003b60 <GSMCellInfo+0x314>)
 80038da:	2206      	movs	r2, #6
 80038dc:	2100      	movs	r1, #0
 80038de:	0018      	movs	r0, r3
 80038e0:	9318      	str	r3, [sp, #96]	; 0x60
 80038e2:	f009 fc9b 	bl	800d21c <memset>
	memset(LAC4, 0, 6);
 80038e6:	4b9f      	ldr	r3, [pc, #636]	; (8003b64 <GSMCellInfo+0x318>)
 80038e8:	2206      	movs	r2, #6
 80038ea:	2100      	movs	r1, #0
 80038ec:	0018      	movs	r0, r3
 80038ee:	9319      	str	r3, [sp, #100]	; 0x64
 80038f0:	f009 fc94 	bl	800d21c <memset>
	memset(CID4, 0, 6);
 80038f4:	4b9c      	ldr	r3, [pc, #624]	; (8003b68 <GSMCellInfo+0x31c>)
 80038f6:	2206      	movs	r2, #6
 80038f8:	2100      	movs	r1, #0
 80038fa:	0018      	movs	r0, r3
 80038fc:	931a      	str	r3, [sp, #104]	; 0x68
 80038fe:	f009 fc8d 	bl	800d21c <memset>
	memset(CID3, 0, 6);
 8003902:	4b9a      	ldr	r3, [pc, #616]	; (8003b6c <GSMCellInfo+0x320>)
 8003904:	2206      	movs	r2, #6
 8003906:	0018      	movs	r0, r3
 8003908:	2100      	movs	r1, #0
 800390a:	931b      	str	r3, [sp, #108]	; 0x6c
 800390c:	f009 fc86 	bl	800d21c <memset>
	memset(CID2, 0, 6);
 8003910:	4d97      	ldr	r5, [pc, #604]	; (8003b70 <GSMCellInfo+0x324>)
 8003912:	2206      	movs	r2, #6
 8003914:	2100      	movs	r1, #0
 8003916:	0028      	movs	r0, r5
 8003918:	f009 fc80 	bl	800d21c <memset>
	memset(CID1, 0, 6);
 800391c:	4b95      	ldr	r3, [pc, #596]	; (8003b74 <GSMCellInfo+0x328>)
 800391e:	2206      	movs	r2, #6
 8003920:	2100      	movs	r1, #0
 8003922:	0018      	movs	r0, r3
 8003924:	931c      	str	r3, [sp, #112]	; 0x70
 8003926:	f009 fc79 	bl	800d21c <memset>
	memset(CID0, 0, 6);
 800392a:	4b93      	ldr	r3, [pc, #588]	; (8003b78 <GSMCellInfo+0x32c>)
 800392c:	2206      	movs	r2, #6
 800392e:	0018      	movs	r0, r3
 8003930:	2100      	movs	r1, #0
 8003932:	931d      	str	r3, [sp, #116]	; 0x74
 8003934:	f009 fc72 	bl	800d21c <memset>
	strcpy(MCC0, "x\0");
 8003938:	4c90      	ldr	r4, [pc, #576]	; (8003b7c <GSMCellInfo+0x330>)
 800393a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800393c:	0021      	movs	r1, r4
 800393e:	f009 fe22 	bl	800d586 <strcpy>
	strcpy(MNC0, "x\0");
 8003942:	0021      	movs	r1, r4
 8003944:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003946:	f009 fe1e 	bl	800d586 <strcpy>
	strcpy(LAC0, "x\0");
 800394a:	0021      	movs	r1, r4
 800394c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800394e:	f009 fe1a 	bl	800d586 <strcpy>
	strcpy(CID0, "x\0");
 8003952:	0021      	movs	r1, r4
 8003954:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003956:	f009 fe16 	bl	800d586 <strcpy>
	strcpy(SS0, "x\0");
 800395a:	0021      	movs	r1, r4
 800395c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800395e:	f009 fe12 	bl	800d586 <strcpy>
	strcpy(SS1, "x\0");
 8003962:	0021      	movs	r1, r4
 8003964:	0030      	movs	r0, r6
 8003966:	f009 fe0e 	bl	800d586 <strcpy>
	strcpy(CID1, "x\0");
 800396a:	0021      	movs	r1, r4
 800396c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800396e:	f009 fe0a 	bl	800d586 <strcpy>
	strcpy(LAC1, "x\0");
 8003972:	0021      	movs	r1, r4
 8003974:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003976:	f009 fe06 	bl	800d586 <strcpy>

	strcpy(SS2, "x\0");
 800397a:	0021      	movs	r1, r4
 800397c:	0038      	movs	r0, r7
 800397e:	f009 fe02 	bl	800d586 <strcpy>
	strcpy(CID2, "x\0");
 8003982:	0021      	movs	r1, r4
 8003984:	0028      	movs	r0, r5
 8003986:	f009 fdfe 	bl	800d586 <strcpy>
	strcpy(LAC2, "x\0");
 800398a:	0021      	movs	r1, r4
 800398c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800398e:	f009 fdfa 	bl	800d586 <strcpy>

	strcpy(SS3, "x\0");
 8003992:	0021      	movs	r1, r4
 8003994:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003996:	f009 fdf6 	bl	800d586 <strcpy>
	strcpy(CID3, "x\0");
 800399a:	0021      	movs	r1, r4
 800399c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800399e:	f009 fdf2 	bl	800d586 <strcpy>
	strcpy(LAC3, "x\0");
 80039a2:	0021      	movs	r1, r4
 80039a4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80039a6:	f009 fdee 	bl	800d586 <strcpy>

	strcpy(SS4, "x\0");
 80039aa:	0021      	movs	r1, r4
 80039ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 80039ae:	f009 fdea 	bl	800d586 <strcpy>
	strcpy(CID4, "x\0");
 80039b2:	0021      	movs	r1, r4
 80039b4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80039b6:	f009 fde6 	bl	800d586 <strcpy>
	strcpy(LAC4, "x\0");
 80039ba:	0021      	movs	r1, r4
 80039bc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80039be:	f009 fde2 	bl	800d586 <strcpy>

	memset(GSMData, 0, 800);
 80039c2:	22c8      	movs	r2, #200	; 0xc8
 80039c4:	4d6e      	ldr	r5, [pc, #440]	; (8003b80 <GSMCellInfo+0x334>)
 80039c6:	2100      	movs	r1, #0
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	0028      	movs	r0, r5
 80039cc:	f009 fc26 	bl	800d21c <memset>

	SendGSMCodeL(" AT+QENG?");
 80039d0:	486c      	ldr	r0, [pc, #432]	; (8003b84 <GSMCellInfo+0x338>)
 80039d2:	f7ff fe77 	bl	80036c4 <SendGSMCodeL>
	// Debug_Tx(GSMData);

	HAL_Delay(500);
 80039d6:	20fa      	movs	r0, #250	; 0xfa
 80039d8:	0040      	lsls	r0, r0, #1
 80039da:	f003 f82f 	bl	8006a3c <HAL_Delay>

	char *m0 = strstr(GSMData, "+QENG: 0");
 80039de:	0028      	movs	r0, r5
 80039e0:	4969      	ldr	r1, [pc, #420]	; (8003b88 <GSMCellInfo+0x33c>)
 80039e2:	f009 fccb 	bl	800d37c <strstr>
 80039e6:	0004      	movs	r4, r0
 80039e8:	901e      	str	r0, [sp, #120]	; 0x78
	if ((m0 != NULL) & (strlen(m0) > 1))
 80039ea:	f7fc fb8d 	bl	8000108 <strlen>
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	d002      	beq.n	80039f8 <GSMCellInfo+0x1ac>
	{

		// Debug_Tx(m0);
		int k = 0;
 80039f2:	2400      	movs	r4, #0
	if ((m0 != NULL) & (strlen(m0) > 1))
 80039f4:	2801      	cmp	r0, #1
 80039f6:	d810      	bhi.n	8003a1a <GSMCellInfo+0x1ce>
			k++;
		}
	}
	else
	{
		Debug_Tx("GSM tower data  Signal");
 80039f8:	4864      	ldr	r0, [pc, #400]	; (8003b8c <GSMCellInfo+0x340>)
 80039fa:	f7ff fc9b 	bl	8003334 <Debug_Tx>
 80039fe:	e013      	b.n	8003a28 <GSMCellInfo+0x1dc>
			if (k == 1)
 8003a00:	1e60      	subs	r0, r4, #1
 8003a02:	2806      	cmp	r0, #6
 8003a04:	d808      	bhi.n	8003a18 <GSMCellInfo+0x1cc>
 8003a06:	f7fc fb91 	bl	800012c <__gnu_thumb1_case_uqi>
 8003a0a:	4c04      	.short	0x4c04
 8003a0c:	0707504e 	.word	0x0707504e
 8003a10:	52          	.byte	0x52
 8003a11:	00          	.byte	0x00
				strcpy(MCC0, part);
 8003a12:	484e      	ldr	r0, [pc, #312]	; (8003b4c <GSMCellInfo+0x300>)
				strcpy(SS0, part);
 8003a14:	f009 fdb7 	bl	800d586 <strcpy>
			k++;
 8003a18:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 8003a1a:	495d      	ldr	r1, [pc, #372]	; (8003b90 <GSMCellInfo+0x344>)
 8003a1c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003a1e:	aa1e      	add	r2, sp, #120	; 0x78
 8003a20:	f009 fca7 	bl	800d372 <strtok_r>
 8003a24:	1e01      	subs	r1, r0, #0
 8003a26:	d1eb      	bne.n	8003a00 <GSMCellInfo+0x1b4>
	}
	char *m1 = strstr(GSMData, "+QENG: 1");
 8003a28:	0028      	movs	r0, r5
 8003a2a:	495a      	ldr	r1, [pc, #360]	; (8003b94 <GSMCellInfo+0x348>)
 8003a2c:	f009 fca6 	bl	800d37c <strstr>
 8003a30:	0004      	movs	r4, r0
 8003a32:	901f      	str	r0, [sp, #124]	; 0x7c
	if ((m1 != NULL) & (strlen(m1) > 1))
 8003a34:	f7fc fb68 	bl	8000108 <strlen>
 8003a38:	2c00      	cmp	r4, #0
 8003a3a:	d002      	beq.n	8003a42 <GSMCellInfo+0x1f6>
	{
		// Debug_Tx(m1);
		int k = 0;
 8003a3c:	2400      	movs	r4, #0
	if ((m1 != NULL) & (strlen(m1) > 1))
 8003a3e:	2801      	cmp	r0, #1
 8003a40:	d849      	bhi.n	8003ad6 <GSMCellInfo+0x28a>
		}
	}

	//

	memset(gsminfo, 0, 80);
 8003a42:	4c55      	ldr	r4, [pc, #340]	; (8003b98 <GSMCellInfo+0x34c>)
 8003a44:	2250      	movs	r2, #80	; 0x50
 8003a46:	2100      	movs	r1, #0
 8003a48:	0020      	movs	r0, r4
 8003a4a:	f009 fbe7 	bl	800d21c <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
 8003a4e:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <GSMCellInfo+0x350>)
 8003a50:	4d3e      	ldr	r5, [pc, #248]	; (8003b4c <GSMCellInfo+0x300>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	f7fd fc34 	bl	80012c0 <__aeabi_f2iz>
 8003a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	930e      	str	r3, [sp, #56]	; 0x38
 8003a5e:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <GSMCellInfo+0x318>)
 8003a60:	494f      	ldr	r1, [pc, #316]	; (8003ba0 <GSMCellInfo+0x354>)
 8003a62:	930d      	str	r3, [sp, #52]	; 0x34
 8003a64:	4b40      	ldr	r3, [pc, #256]	; (8003b68 <GSMCellInfo+0x31c>)
 8003a66:	0020      	movs	r0, r4
 8003a68:	930c      	str	r3, [sp, #48]	; 0x30
 8003a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a6c:	9708      	str	r7, [sp, #32]
 8003a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <GSMCellInfo+0x314>)
 8003a72:	9605      	str	r6, [sp, #20]
 8003a74:	930a      	str	r3, [sp, #40]	; 0x28
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <GSMCellInfo+0x320>)
 8003a78:	9309      	str	r3, [sp, #36]	; 0x24
 8003a7a:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <GSMCellInfo+0x310>)
 8003a7c:	9307      	str	r3, [sp, #28]
 8003a7e:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <GSMCellInfo+0x324>)
 8003a80:	9306      	str	r3, [sp, #24]
 8003a82:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <GSMCellInfo+0x30c>)
 8003a84:	9304      	str	r3, [sp, #16]
 8003a86:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <GSMCellInfo+0x328>)
 8003a88:	9303      	str	r3, [sp, #12]
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <GSMCellInfo+0x32c>)
 8003a8c:	9302      	str	r3, [sp, #8]
 8003a8e:	4b31      	ldr	r3, [pc, #196]	; (8003b54 <GSMCellInfo+0x308>)
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <GSMCellInfo+0x304>)
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	002b      	movs	r3, r5
 8003a98:	f009 fb54 	bl	800d144 <siprintf>
			(int)GSMSignal, MCC0, MNC0, LAC0, CID0, CID1, LAC1, SS1, CID2, LAC2, SS2, CID3, LAC3, SS3, CID4, LAC4, SS4);
	// Debug_Tx(gsminfo);

	return (gsminfo);
}
 8003a9c:	0020      	movs	r0, r4
 8003a9e:	b021      	add	sp, #132	; 0x84
 8003aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(MNC0, part);
 8003aa2:	482b      	ldr	r0, [pc, #172]	; (8003b50 <GSMCellInfo+0x304>)
 8003aa4:	e7b6      	b.n	8003a14 <GSMCellInfo+0x1c8>
				strcpy(LAC0, part);
 8003aa6:	482b      	ldr	r0, [pc, #172]	; (8003b54 <GSMCellInfo+0x308>)
 8003aa8:	e7b4      	b.n	8003a14 <GSMCellInfo+0x1c8>
				strcpy(CID0, part);
 8003aaa:	4833      	ldr	r0, [pc, #204]	; (8003b78 <GSMCellInfo+0x32c>)
 8003aac:	e7b2      	b.n	8003a14 <GSMCellInfo+0x1c8>
				strcpy(SS0, part);
 8003aae:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003ab0:	e7b0      	b.n	8003a14 <GSMCellInfo+0x1c8>
 8003ab2:	f7fc fb3b 	bl	800012c <__gnu_thumb1_case_uqi>
 8003ab6:	3032      	.short	0x3032
 8003ab8:	0f340f0f 	.word	0x0f340f0f
 8003abc:	0f0f0f0f 	.word	0x0f0f0f0f
 8003ac0:	0f0f3638 	.word	0x0f0f3638
 8003ac4:	0f0f0f3a 	.word	0x0f0f0f3a
 8003ac8:	3c3e0f0f 	.word	0x3c3e0f0f
 8003acc:	0020      	movs	r0, r4
 8003ace:	3813      	subs	r0, #19
 8003ad0:	2815      	cmp	r0, #21
 8003ad2:	d9ee      	bls.n	8003ab2 <GSMCellInfo+0x266>
			k++;
 8003ad4:	3401      	adds	r4, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8003ad6:	492e      	ldr	r1, [pc, #184]	; (8003b90 <GSMCellInfo+0x344>)
 8003ad8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8003ada:	aa1f      	add	r2, sp, #124	; 0x7c
 8003adc:	f009 fc49 	bl	800d372 <strtok_r>
 8003ae0:	1e01      	subs	r1, r0, #0
 8003ae2:	d0ae      	beq.n	8003a42 <GSMCellInfo+0x1f6>
			if (k == 3)
 8003ae4:	2c0d      	cmp	r4, #13
 8003ae6:	dcf1      	bgt.n	8003acc <GSMCellInfo+0x280>
 8003ae8:	2c02      	cmp	r4, #2
 8003aea:	ddf3      	ble.n	8003ad4 <GSMCellInfo+0x288>
 8003aec:	1ee0      	subs	r0, r4, #3
 8003aee:	280a      	cmp	r0, #10
 8003af0:	d8f0      	bhi.n	8003ad4 <GSMCellInfo+0x288>
 8003af2:	f7fc fb11 	bl	8000118 <__gnu_thumb1_case_sqi>
 8003af6:	ef06      	.short	0xef06
 8003af8:	efefefef 	.word	0xefefefef
 8003afc:	efef0a0c 	.word	0xefef0a0c
 8003b00:	0e          	.byte	0x0e
 8003b01:	00          	.byte	0x00
				strcpy(SS1, part);
 8003b02:	0030      	movs	r0, r6
				strcpy(LAC4, part);
 8003b04:	f009 fd3f 	bl	800d586 <strcpy>
 8003b08:	e7e4      	b.n	8003ad4 <GSMCellInfo+0x288>
				strcpy(CID1, part);
 8003b0a:	481a      	ldr	r0, [pc, #104]	; (8003b74 <GSMCellInfo+0x328>)
 8003b0c:	e7fa      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(LAC1, part);
 8003b0e:	4812      	ldr	r0, [pc, #72]	; (8003b58 <GSMCellInfo+0x30c>)
 8003b10:	e7f8      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(SS2, part);
 8003b12:	0038      	movs	r0, r7
 8003b14:	e7f6      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(CID2, part);
 8003b16:	4816      	ldr	r0, [pc, #88]	; (8003b70 <GSMCellInfo+0x324>)
 8003b18:	e7f4      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(LAC2, part);
 8003b1a:	4810      	ldr	r0, [pc, #64]	; (8003b5c <GSMCellInfo+0x310>)
 8003b1c:	e7f2      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(SS3, part);
 8003b1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003b20:	e7f0      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(CID3, part);
 8003b22:	4812      	ldr	r0, [pc, #72]	; (8003b6c <GSMCellInfo+0x320>)
 8003b24:	e7ee      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(LAC3, part);
 8003b26:	480e      	ldr	r0, [pc, #56]	; (8003b60 <GSMCellInfo+0x314>)
 8003b28:	e7ec      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(SS4, part);
 8003b2a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003b2c:	e7ea      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(CID4, part);
 8003b2e:	480e      	ldr	r0, [pc, #56]	; (8003b68 <GSMCellInfo+0x31c>)
 8003b30:	e7e8      	b.n	8003b04 <GSMCellInfo+0x2b8>
				strcpy(LAC4, part);
 8003b32:	480c      	ldr	r0, [pc, #48]	; (8003b64 <GSMCellInfo+0x318>)
 8003b34:	e7e6      	b.n	8003b04 <GSMCellInfo+0x2b8>
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	200033a0 	.word	0x200033a0
 8003b3c:	200033a4 	.word	0x200033a4
 8003b40:	200033a8 	.word	0x200033a8
 8003b44:	200033ac 	.word	0x200033ac
 8003b48:	200033b0 	.word	0x200033b0
 8003b4c:	2000131c 	.word	0x2000131c
 8003b50:	20001321 	.word	0x20001321
 8003b54:	200012f8 	.word	0x200012f8
 8003b58:	200012fe 	.word	0x200012fe
 8003b5c:	20001304 	.word	0x20001304
 8003b60:	2000130a 	.word	0x2000130a
 8003b64:	20001310 	.word	0x20001310
 8003b68:	2000034c 	.word	0x2000034c
 8003b6c:	20000346 	.word	0x20000346
 8003b70:	20000340 	.word	0x20000340
 8003b74:	2000033a 	.word	0x2000033a
 8003b78:	20000334 	.word	0x20000334
 8003b7c:	08010d48 	.word	0x08010d48
 8003b80:	20000545 	.word	0x20000545
 8003b84:	08010f66 	.word	0x08010f66
 8003b88:	08010f70 	.word	0x08010f70
 8003b8c:	08010f79 	.word	0x08010f79
 8003b90:	08011c93 	.word	0x08011c93
 8003b94:	08010f90 	.word	0x08010f90
 8003b98:	200039c8 	.word	0x200039c8
 8003b9c:	200011c8 	.word	0x200011c8
 8003ba0:	08010f99 	.word	0x08010f99

08003ba4 <SPI_flash_sent_byte>:
uint8_t buffer_SPI_Recive[30];
//The data you want to receive

//This is the definition of an array

void SPI_flash_sent_byte(uint8_t data){
 8003ba4:	b507      	push	{r0, r1, r2, lr}
 8003ba6:	466b      	mov	r3, sp
 8003ba8:	1dd9      	adds	r1, r3, #7
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8003baa:	23fa      	movs	r3, #250	; 0xfa
void SPI_flash_sent_byte(uint8_t data){
 8003bac:	7008      	strb	r0, [r1, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <SPI_flash_sent_byte+0x18>)
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	f004 fe78 	bl	80088a8 <HAL_SPI_Transmit>
}
 8003bb8:	bd07      	pop	{r0, r1, r2, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20003c40 	.word	0x20003c40

08003bc0 <SPI_flash_Write_Enable>:

void SPI_flash_Write_Enable() {
 8003bc0:	b510      	push	{r4, lr}
    SPI_flash_cs_low;
 8003bc2:	24a0      	movs	r4, #160	; 0xa0
 8003bc4:	05e4      	lsls	r4, r4, #23
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2110      	movs	r1, #16
 8003bca:	0020      	movs	r0, r4
 8003bcc:	f003 fd58 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8003bd0:	2006      	movs	r0, #6
 8003bd2:	f7ff ffe7 	bl	8003ba4 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	2110      	movs	r1, #16
 8003bda:	0020      	movs	r0, r4
 8003bdc:	f003 fd50 	bl	8007680 <HAL_GPIO_WritePin>
}
 8003be0:	bd10      	pop	{r4, pc}

08003be2 <SPI_flash_Write_Disable>:

void SPI_flash_Write_Disable() {
 8003be2:	b510      	push	{r4, lr}
    SPI_flash_cs_low;
 8003be4:	24a0      	movs	r4, #160	; 0xa0
 8003be6:	05e4      	lsls	r4, r4, #23
 8003be8:	2200      	movs	r2, #0
 8003bea:	2110      	movs	r1, #16
 8003bec:	0020      	movs	r0, r4
 8003bee:	f003 fd47 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8003bf2:	2004      	movs	r0, #4
 8003bf4:	f7ff ffd6 	bl	8003ba4 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2110      	movs	r1, #16
 8003bfc:	0020      	movs	r0, r4
 8003bfe:	f003 fd3f 	bl	8007680 <HAL_GPIO_WritePin>
}
 8003c02:	bd10      	pop	{r4, pc}

08003c04 <SPI_flash_sent_address>:

void SPI_flash_sent_address(uint8_t* Sent){
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8003c04:	23fa      	movs	r3, #250	; 0xfa
void SPI_flash_sent_address(uint8_t* Sent){
 8003c06:	b510      	push	{r4, lr}
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8003c08:	4c03      	ldr	r4, [pc, #12]	; (8003c18 <SPI_flash_sent_address+0x14>)
void SPI_flash_sent_address(uint8_t* Sent){
 8003c0a:	0001      	movs	r1, r0
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	0020      	movs	r0, r4
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	f004 fe49 	bl	80088a8 <HAL_SPI_Transmit>
}
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	20003c40 	.word	0x20003c40

08003c1c <SPI_flash_TransmitReceive>:



void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
 8003c1c:	b507      	push	{r0, r1, r2, lr}
 8003c1e:	000b      	movs	r3, r1
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8003c20:	21fa      	movs	r1, #250	; 0xfa
void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
 8003c22:	0002      	movs	r2, r0
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8003c24:	0089      	lsls	r1, r1, #2
 8003c26:	9100      	str	r1, [sp, #0]
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <SPI_flash_TransmitReceive+0x18>)
 8003c2a:	0011      	movs	r1, r2
 8003c2c:	f004 fefa 	bl	8008a24 <HAL_SPI_TransmitReceive>
}
 8003c30:	bd07      	pop	{r0, r1, r2, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	20003c40 	.word	0x20003c40

08003c38 <SPI_flash_get_device_ID>:

void SPI_flash_get_device_ID( ) {
 8003c38:	b570      	push	{r4, r5, r6, lr}
    SPI_flash_cs_low;
 8003c3a:	26a0      	movs	r6, #160	; 0xa0
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8003c3c:	2500      	movs	r5, #0
    SPI_flash_cs_low;
 8003c3e:	05f6      	lsls	r6, r6, #23
void SPI_flash_get_device_ID( ) {
 8003c40:	b0a0      	sub	sp, #128	; 0x80
    SPI_flash_cs_low;
 8003c42:	2200      	movs	r2, #0
 8003c44:	2110      	movs	r1, #16
 8003c46:	0030      	movs	r0, r6
    aa[1]=0;
    aa[2]=0;
    aa[3]=0;
    aa[4]=0;
 8003c48:	ac04      	add	r4, sp, #16
    SPI_flash_cs_low;
 8003c4a:	f003 fd19 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8003c4e:	2090      	movs	r0, #144	; 0x90
 8003c50:	f7ff ffa8 	bl	8003ba4 <SPI_flash_sent_byte>
    aa[5]=0;
    SPI_flash_sent_address (aa);
 8003c54:	0020      	movs	r0, r4
    aa[0]=0;
 8003c56:	9504      	str	r5, [sp, #16]
    aa[4]=0;
 8003c58:	80a5      	strh	r5, [r4, #4]
    SPI_flash_sent_address (aa);
 8003c5a:	f7ff ffd3 	bl	8003c04 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(aa, 2);
 8003c5e:	0020      	movs	r0, r4
 8003c60:	2102      	movs	r1, #2
 8003c62:	f7ff ffdb 	bl	8003c1c <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003c66:	0030      	movs	r0, r6
 8003c68:	2201      	movs	r2, #1
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	f003 fd08 	bl	8007680 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8003c70:	7863      	ldrb	r3, [r4, #1]
 8003c72:	7822      	ldrb	r2, [r4, #0]
 8003c74:	4928      	ldr	r1, [pc, #160]	; (8003d18 <SPI_flash_get_device_ID+0xe0>)
 8003c76:	a807      	add	r0, sp, #28
 8003c78:	f009 fa64 	bl	800d144 <siprintf>
    Debug_Tx((char*)bufd);
 8003c7c:	a807      	add	r0, sp, #28
 8003c7e:	f7ff fb59 	bl	8003334 <Debug_Tx>

    SPI_flash_cs_low;
 8003c82:	002a      	movs	r2, r5
 8003c84:	2110      	movs	r1, #16
 8003c86:	0030      	movs	r0, r6
 8003c88:	f003 fcfa 	bl	8007680 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8003c8c:	209f      	movs	r0, #159	; 0x9f
 8003c8e:	f7ff ff89 	bl	8003ba4 <SPI_flash_sent_byte>
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
       aa[5]=0;
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
 8003c92:	0020      	movs	r0, r4
 8003c94:	2103      	movs	r1, #3
       aa[0]=0;
 8003c96:	9504      	str	r5, [sp, #16]
       aa[4]=0;
 8003c98:	80a5      	strh	r5, [r4, #4]
       SPI_flash_TransmitReceive(aa, 3);
 8003c9a:	f7ff ffbf 	bl	8003c1c <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8003c9e:	0030      	movs	r0, r6
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	f003 fcec 	bl	8007680 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8003ca8:	78a0      	ldrb	r0, [r4, #2]
 8003caa:	7863      	ldrb	r3, [r4, #1]
 8003cac:	7822      	ldrb	r2, [r4, #0]
 8003cae:	491b      	ldr	r1, [pc, #108]	; (8003d1c <SPI_flash_get_device_ID+0xe4>)
 8003cb0:	9000      	str	r0, [sp, #0]
 8003cb2:	a807      	add	r0, sp, #28
 8003cb4:	f009 fa46 	bl	800d144 <siprintf>
       Debug_Tx((char*)bufd);
 8003cb8:	a807      	add	r0, sp, #28
 8003cba:	f7ff fb3b 	bl	8003334 <Debug_Tx>



       SPI_flash_cs_low;
 8003cbe:	002a      	movs	r2, r5
 8003cc0:	2110      	movs	r1, #16
 8003cc2:	0030      	movs	r0, r6
 8003cc4:	f003 fcdc 	bl	8007680 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8003cc8:	204b      	movs	r0, #75	; 0x4b
 8003cca:	f7ff ff6b 	bl	8003ba4 <SPI_flash_sent_byte>
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
       aa[5]=0;
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8003cce:	23fa      	movs	r3, #250	; 0xfa
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	0021      	movs	r1, r4
 8003cd6:	4812      	ldr	r0, [pc, #72]	; (8003d20 <SPI_flash_get_device_ID+0xe8>)
       aa[0]=0;
 8003cd8:	9504      	str	r5, [sp, #16]
       aa[4]=0;
 8003cda:	80a5      	strh	r5, [r4, #4]
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8003cdc:	f004 fde4 	bl	80088a8 <HAL_SPI_Transmit>
       SPI_flash_TransmitReceive(aa, 6);
 8003ce0:	0020      	movs	r0, r4
 8003ce2:	2106      	movs	r1, #6
 8003ce4:	f7ff ff9a 	bl	8003c1c <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8003ce8:	0030      	movs	r0, r6
 8003cea:	2201      	movs	r2, #1
 8003cec:	2110      	movs	r1, #16
 8003cee:	f003 fcc7 	bl	8007680 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 8003cf2:	7960      	ldrb	r0, [r4, #5]
 8003cf4:	7863      	ldrb	r3, [r4, #1]
 8003cf6:	7822      	ldrb	r2, [r4, #0]
 8003cf8:	9003      	str	r0, [sp, #12]
 8003cfa:	7920      	ldrb	r0, [r4, #4]
 8003cfc:	4909      	ldr	r1, [pc, #36]	; (8003d24 <SPI_flash_get_device_ID+0xec>)
 8003cfe:	9002      	str	r0, [sp, #8]
 8003d00:	78e0      	ldrb	r0, [r4, #3]
 8003d02:	9001      	str	r0, [sp, #4]
 8003d04:	78a0      	ldrb	r0, [r4, #2]
 8003d06:	9000      	str	r0, [sp, #0]
 8003d08:	a807      	add	r0, sp, #28
 8003d0a:	f009 fa1b 	bl	800d144 <siprintf>
       Debug_Tx((char*)bufd);
 8003d0e:	a807      	add	r0, sp, #28
 8003d10:	f7ff fb10 	bl	8003334 <Debug_Tx>
}
 8003d14:	b020      	add	sp, #128	; 0x80
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	08010fcc 	.word	0x08010fcc
 8003d1c:	08010fec 	.word	0x08010fec
 8003d20:	20003c40 	.word	0x20003c40
 8003d24:	08011008 	.word	0x08011008

08003d28 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8003d28:	b570      	push	{r4, r5, r6, lr}
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8003d2a:	25a0      	movs	r5, #160	; 0xa0
void SPI_flash_Sector_Erase(uint8_t* address) {
 8003d2c:	0004      	movs	r4, r0
    SPI_flash_cs_low;
 8003d2e:	05ed      	lsls	r5, r5, #23
    SPI_flash_Write_Enable();
 8003d30:	f7ff ff46 	bl	8003bc0 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003d34:	2200      	movs	r2, #0
 8003d36:	2110      	movs	r1, #16
 8003d38:	0028      	movs	r0, r5
 8003d3a:	f003 fca1 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8003d3e:	2020      	movs	r0, #32
 8003d40:	f7ff ff30 	bl	8003ba4 <SPI_flash_sent_byte>
    SPI_flash_sent_address (address);
 8003d44:	0020      	movs	r0, r4
 8003d46:	f7ff ff5d 	bl	8003c04 <SPI_flash_sent_address>
    SPI_flash_cs_high;
 8003d4a:	0028      	movs	r0, r5
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	2110      	movs	r1, #16
 8003d50:	f003 fc96 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003d54:	f7ff ff45 	bl	8003be2 <SPI_flash_Write_Disable>
    //HAL_Delay(100);
	Debug_Rx();
 8003d58:	f7ff fb6a 	bl	8003430 <Debug_Rx.isra.0>
}
 8003d5c:	bd70      	pop	{r4, r5, r6, pc}

08003d5e <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 8003d5e:	b510      	push	{r4, lr}
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8003d60:	24a0      	movs	r4, #160	; 0xa0
 8003d62:	05e4      	lsls	r4, r4, #23
    SPI_flash_Write_Enable();
 8003d64:	f7ff ff2c 	bl	8003bc0 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2110      	movs	r1, #16
 8003d6c:	0020      	movs	r0, r4
 8003d6e:	f003 fc87 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 8003d72:	20c7      	movs	r0, #199	; 0xc7
 8003d74:	f7ff ff16 	bl	8003ba4 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003d78:	2201      	movs	r2, #1
 8003d7a:	2110      	movs	r1, #16
 8003d7c:	0020      	movs	r0, r4
 8003d7e:	f003 fc7f 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003d82:	f7ff ff2e 	bl	8003be2 <SPI_flash_Write_Disable>
}
 8003d86:	bd10      	pop	{r4, pc}

08003d88 <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8003d8a:	27a0      	movs	r7, #160	; 0xa0
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8003d8c:	0006      	movs	r6, r0
 8003d8e:	0015      	movs	r5, r2
 8003d90:	000c      	movs	r4, r1
    SPI_flash_cs_low;
 8003d92:	05ff      	lsls	r7, r7, #23
    SPI_flash_Write_Enable();
 8003d94:	f7ff ff14 	bl	8003bc0 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2110      	movs	r1, #16
 8003d9c:	0038      	movs	r0, r7
 8003d9e:	f003 fc6f 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 8003da2:	2002      	movs	r0, #2
 8003da4:	f7ff fefe 	bl	8003ba4 <SPI_flash_sent_byte>
    SPI_flash_sent_address (data_address);
 8003da8:	0030      	movs	r0, r6
 8003daa:	f7ff ff2b 	bl	8003c04 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8003dae:	0029      	movs	r1, r5
 8003db0:	0020      	movs	r0, r4
 8003db2:	f7ff ff33 	bl	8003c1c <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003db6:	0038      	movs	r0, r7
 8003db8:	2201      	movs	r2, #1
 8003dba:	2110      	movs	r1, #16
 8003dbc:	f003 fc60 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003dc0:	f7ff ff0f 	bl	8003be2 <SPI_flash_Write_Disable>

	Debug_Rx();
 8003dc4:	f7ff fb34 	bl	8003430 <Debug_Rx.isra.0>
    //HAL_Delay(1);
}
 8003dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dca <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8003dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 8003dcc:	27a0      	movs	r7, #160	; 0xa0
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8003dce:	0006      	movs	r6, r0
 8003dd0:	0015      	movs	r5, r2
 8003dd2:	000c      	movs	r4, r1
    SPI_flash_cs_low;
 8003dd4:	05ff      	lsls	r7, r7, #23
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2110      	movs	r1, #16
 8003dda:	0038      	movs	r0, r7
 8003ddc:	f003 fc50 	bl	8007680 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 8003de0:	2003      	movs	r0, #3
 8003de2:	f7ff fedf 	bl	8003ba4 <SPI_flash_sent_byte>
    SPI_flash_sent_address(data_address);
 8003de6:	0030      	movs	r0, r6
 8003de8:	f7ff ff0c 	bl	8003c04 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8003dec:	0029      	movs	r1, r5
 8003dee:	0020      	movs	r0, r4
 8003df0:	f7ff ff14 	bl	8003c1c <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003df4:	0038      	movs	r0, r7
 8003df6:	2201      	movs	r2, #1
 8003df8:	2110      	movs	r1, #16
 8003dfa:	f003 fc41 	bl	8007680 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8003dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e00 <incrimentAddress2>:


	return add;
}

void incrimentAddress2(int inc){
 8003e00:	0001      	movs	r1, r0
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8003e02:	4a11      	ldr	r2, [pc, #68]	; (8003e48 <incrimentAddress2+0x48>)
 8003e04:	7813      	ldrb	r3, [r2, #0]
 8003e06:	7850      	ldrb	r0, [r2, #1]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	1818      	adds	r0, r3, r0
 8003e0c:	7893      	ldrb	r3, [r2, #2]
 8003e0e:	0200      	lsls	r0, r0, #8
 8003e10:	18c0      	adds	r0, r0, r3
 8003e12:	1840      	adds	r0, r0, r1
	WrtAdd[0]=addi/(256*256);
 8003e14:	17c3      	asrs	r3, r0, #31
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	181b      	adds	r3, r3, r0
 8003e1a:	141b      	asrs	r3, r3, #16
 8003e1c:	7013      	strb	r3, [r2, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <incrimentAddress2+0x4c>)
 8003e20:	4003      	ands	r3, r0
 8003e22:	d503      	bpl.n	8003e2c <incrimentAddress2+0x2c>
 8003e24:	490a      	ldr	r1, [pc, #40]	; (8003e50 <incrimentAddress2+0x50>)
 8003e26:	3b01      	subs	r3, #1
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	17d9      	asrs	r1, r3, #31
 8003e2e:	b2c9      	uxtb	r1, r1
 8003e30:	18cb      	adds	r3, r1, r3
 8003e32:	121b      	asrs	r3, r3, #8
 8003e34:	7053      	strb	r3, [r2, #1]
	WrtAdd[2]=(addi)%256;
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <incrimentAddress2+0x54>)
 8003e38:	4018      	ands	r0, r3
 8003e3a:	d503      	bpl.n	8003e44 <incrimentAddress2+0x44>
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <incrimentAddress2+0x58>)
 8003e3e:	3801      	subs	r0, #1
 8003e40:	4318      	orrs	r0, r3
 8003e42:	3001      	adds	r0, #1
 8003e44:	7090      	strb	r0, [r2, #2]


}
 8003e46:	4770      	bx	lr
 8003e48:	200000bf 	.word	0x200000bf
 8003e4c:	8000ffff 	.word	0x8000ffff
 8003e50:	ffff0000 	.word	0xffff0000
 8003e54:	800000ff 	.word	0x800000ff
 8003e58:	ffffff00 	.word	0xffffff00

08003e5c <WriteQdata>:
	memset(str,0,20);
	sprintf(str, "MemoryAdd:%X-%X-%X",WrtAdd[0],WrtAdd[1],WrtAdd[2]);
	Debug_Tx(str);
}

void WriteQdata(uint8_t* data, uint16_t len) {
 8003e5c:	000a      	movs	r2, r1
 8003e5e:	b510      	push	{r4, lr}
	//Writes data at the end of queue
	if (len<255){
 8003e60:	29fe      	cmp	r1, #254	; 0xfe
 8003e62:	d808      	bhi.n	8003e76 <WriteQdata+0x1a>
		//Debug_Tx("---------------------\nWriting  Data");
		//printAdd();
		SPI_flash_Page_Program(WrtAdd, data,len);
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <WriteQdata+0x1c>)
 8003e66:	0001      	movs	r1, r0
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7ff ff8d 	bl	8003d88 <SPI_flash_Page_Program>
		incrimentAddress2(256);
 8003e6e:	2080      	movs	r0, #128	; 0x80
 8003e70:	0040      	lsls	r0, r0, #1
 8003e72:	f7ff ffc5 	bl	8003e00 <incrimentAddress2>
	}
}
 8003e76:	bd10      	pop	{r4, pc}
 8003e78:	200000bf 	.word	0x200000bf

08003e7c <isQempty>:

int isQempty() {
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
	if(addi<(256*256*3)+256){
 8003e7c:	2000      	movs	r0, #0
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8003e7e:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <isQempty+0x18>)
 8003e80:	7813      	ldrb	r3, [r2, #0]
 8003e82:	7852      	ldrb	r2, [r2, #1]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 8003e88:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <isQempty+0x1c>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8003e8a:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	4140      	adcs	r0, r0
		return 1;
	}
	return 0;

}
 8003e90:	4770      	bx	lr
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	200000bf 	.word	0x200000bf
 8003e98:	000300ff 	.word	0x000300ff

08003e9c <ReadQdata>:


int ReadQdata() {
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 8003e9c:	2280      	movs	r2, #128	; 0x80
int ReadQdata() {
 8003e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(ReadMData,0,4096);
 8003ea0:	4f2b      	ldr	r7, [pc, #172]	; (8003f50 <ReadQdata+0xb4>)
int ReadQdata() {
 8003ea2:	b0c1      	sub	sp, #260	; 0x104
	memset(ReadMData,0,4096);
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	0152      	lsls	r2, r2, #5
 8003ea8:	0038      	movs	r0, r7
 8003eaa:	f009 f9b7 	bl	800d21c <memset>
	memset(ReadMDataS,0,4096);
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	4e28      	ldr	r6, [pc, #160]	; (8003f54 <ReadQdata+0xb8>)
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	0152      	lsls	r2, r2, #5
 8003eb6:	0030      	movs	r0, r6
 8003eb8:	f009 f9b0 	bl	800d21c <memset>
	if(isQempty()==1){
 8003ebc:	f7ff ffde 	bl	8003e7c <isQempty>
 8003ec0:	2801      	cmp	r0, #1
 8003ec2:	d105      	bne.n	8003ed0 <ReadQdata+0x34>
		Debug_Tx("Memory Empty");
 8003ec4:	4824      	ldr	r0, [pc, #144]	; (8003f58 <ReadQdata+0xbc>)
 8003ec6:	f7ff fa35 	bl	8003334 <Debug_Tx>
		return 0;
 8003eca:	2000      	movs	r0, #0
		strcat(ReadMDataS,temp);
		strcat(ReadMDataS,"\r\n");
	}
	SPI_flash_Sector_Erase(WrtAdd);
	return 1;
}
 8003ecc:	b041      	add	sp, #260	; 0x104
 8003ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	incrimentAddress2(-1);
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	240f      	movs	r4, #15
 8003ed4:	4240      	negs	r0, r0
 8003ed6:	f7ff ff93 	bl	8003e00 <incrimentAddress2>
	int len=WrtAdd[1]%16;
 8003eda:	4d20      	ldr	r5, [pc, #128]	; (8003f5c <ReadQdata+0xc0>)
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8003edc:	0039      	movs	r1, r7
	int len=WrtAdd[1]%16;
 8003ede:	786b      	ldrb	r3, [r5, #1]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8003ee0:	0028      	movs	r0, r5
 8003ee2:	401c      	ands	r4, r3
	WrtAdd[1]=WrtAdd[1]/16;
 8003ee4:	091b      	lsrs	r3, r3, #4
	WrtAdd[1]=WrtAdd[1]*16;
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	706b      	strb	r3, [r5, #1]
	WrtAdd[2]=0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	3401      	adds	r4, #1
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8003eee:	0222      	lsls	r2, r4, #8
	WrtAdd[2]=0;
 8003ef0:	70ab      	strb	r3, [r5, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8003ef2:	f7ff ff6a 	bl	8003dca <SPI_flash_Read_Data>
	for (int i=1;i<=len;i++){
 8003ef6:	3c01      	subs	r4, #1
 8003ef8:	0224      	lsls	r4, r4, #8
		memset(temp,0,256);
 8003efa:	2100      	movs	r1, #0
 8003efc:	22ff      	movs	r2, #255	; 0xff
 8003efe:	4668      	mov	r0, sp
 8003f00:	f009 f98c 	bl	800d21c <memset>
		for (int j=0;j<256;j++){
 8003f04:	2300      	movs	r3, #0
			temp[j]=ReadMData[(len-i)*256+j];
 8003f06:	1939      	adds	r1, r7, r4
 8003f08:	4668      	mov	r0, sp
 8003f0a:	5cca      	ldrb	r2, [r1, r3]
 8003f0c:	54c2      	strb	r2, [r0, r3]
			if (temp[j]==255){
 8003f0e:	2aff      	cmp	r2, #255	; 0xff
 8003f10:	d117      	bne.n	8003f42 <ReadQdata+0xa6>
				temp[j]=0;
 8003f12:	2100      	movs	r1, #0
 8003f14:	54c1      	strb	r1, [r0, r3]
		temp[255]=0;
 8003f16:	23ff      	movs	r3, #255	; 0xff
 8003f18:	2200      	movs	r2, #0
 8003f1a:	446b      	add	r3, sp
 8003f1c:	701a      	strb	r2, [r3, #0]
		strcat(ReadMDataS,temp);
 8003f1e:	4669      	mov	r1, sp
 8003f20:	0030      	movs	r0, r6
 8003f22:	f009 f983 	bl	800d22c <strcat>
		strcat(ReadMDataS,"\r\n");
 8003f26:	0030      	movs	r0, r6
 8003f28:	490d      	ldr	r1, [pc, #52]	; (8003f60 <ReadQdata+0xc4>)
 8003f2a:	f009 f97f 	bl	800d22c <strcat>
	for (int i=1;i<=len;i++){
 8003f2e:	3c01      	subs	r4, #1
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <ReadQdata+0xc8>)
 8003f32:	3cff      	subs	r4, #255	; 0xff
 8003f34:	429c      	cmp	r4, r3
 8003f36:	d1e0      	bne.n	8003efa <ReadQdata+0x5e>
	SPI_flash_Sector_Erase(WrtAdd);
 8003f38:	0028      	movs	r0, r5
 8003f3a:	f7ff fef5 	bl	8003d28 <SPI_flash_Sector_Erase>
	return 1;
 8003f3e:	2001      	movs	r0, #1
 8003f40:	e7c4      	b.n	8003ecc <ReadQdata+0x30>
		for (int j=0;j<256;j++){
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	3301      	adds	r3, #1
 8003f46:	0052      	lsls	r2, r2, #1
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d1dd      	bne.n	8003f08 <ReadQdata+0x6c>
 8003f4c:	e7e3      	b.n	8003f16 <ReadQdata+0x7a>
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	20001352 	.word	0x20001352
 8003f54:	20002352 	.word	0x20002352
 8003f58:	0801102a 	.word	0x0801102a
 8003f5c:	200000bf 	.word	0x200000bf
 8003f60:	08010fe9 	.word	0x08010fe9
 8003f64:	ffffff00 	.word	0xffffff00

08003f68 <InitMEMQ>:

void InitMEMQ(){
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	b0c0      	sub	sp, #256	; 0x100
	if(isQempty()==1){
 8003f6c:	f7ff ff86 	bl	8003e7c <isQempty>
 8003f70:	2801      	cmp	r0, #1
 8003f72:	d118      	bne.n	8003fa6 <InitMEMQ+0x3e>
		int i=0;
		Debug_Tx("------------------Init Mem:");
 8003f74:	480d      	ldr	r0, [pc, #52]	; (8003fac <InitMEMQ+0x44>)
 8003f76:	f7ff f9dd 	bl	8003334 <Debug_Tx>
		char str[256];
		for(i=0;i<5;i++){
 8003f7a:	2400      	movs	r4, #0
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 8003f7c:	0023      	movs	r3, r4
 8003f7e:	0022      	movs	r2, r4
 8003f80:	490b      	ldr	r1, [pc, #44]	; (8003fb0 <InitMEMQ+0x48>)
 8003f82:	4668      	mov	r0, sp
 8003f84:	f009 f8de 	bl	800d144 <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 8003f88:	4668      	mov	r0, sp
 8003f8a:	f7fc f8bd 	bl	8000108 <strlen>
 8003f8e:	3001      	adds	r0, #1
 8003f90:	b281      	uxth	r1, r0
		for(i=0;i<5;i++){
 8003f92:	3401      	adds	r4, #1
			WriteQdata((uint8_t*)str, strlen(str)+1);
 8003f94:	4668      	mov	r0, sp
 8003f96:	f7ff ff61 	bl	8003e5c <WriteQdata>
		for(i=0;i<5;i++){
 8003f9a:	2c05      	cmp	r4, #5
 8003f9c:	d1ee      	bne.n	8003f7c <InitMEMQ+0x14>
		}
		for(i=0;i<2;i++){
			ReadQdata();
 8003f9e:	f7ff ff7d 	bl	8003e9c <ReadQdata>
 8003fa2:	f7ff ff7b 	bl	8003e9c <ReadQdata>
		}
	}

}
 8003fa6:	b040      	add	sp, #256	; 0x100
 8003fa8:	bd10      	pop	{r4, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	08011037 	.word	0x08011037
 8003fb0:	08011053 	.word	0x08011053

08003fb4 <ClearQueue>:





void ClearQueue(){
 8003fb4:	b510      	push	{r4, lr}
	//uint8_t dat[]={0x01, 0x00,0x00,0x01, 0x00,0x00,0x00,0x00,0x00,0x00,0x01};
	//uint8_t add[]={0x00,0x10,0x00};

	//SPI_flash_Sector_Erase(add);
	SPI_flash_Chip_Erase();
 8003fb6:	f7ff fed2 	bl	8003d5e <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 8003fba:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <ClearQueue+0x10>)
 8003fbc:	f002 fd3e 	bl	8006a3c <HAL_Delay>

	//SPI_flash_Page_Program(add,dat,11);
}
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	00007530 	.word	0x00007530

08003fc8 <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8003fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fca:	4c55      	ldr	r4, [pc, #340]	; (8004120 <writeConfig+0x158>)
 8003fcc:	0007      	movs	r7, r0
 8003fce:	44a5      	add	sp, r4
 8003fd0:	9101      	str	r1, [sp, #4]
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 8003fd2:	4954      	ldr	r1, [pc, #336]	; (8004124 <writeConfig+0x15c>)
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8003fd4:	9202      	str	r2, [sp, #8]
	uint8_t add[]={0x00,0x00,0x00};
 8003fd6:	3103      	adds	r1, #3
 8003fd8:	2203      	movs	r2, #3
 8003fda:	a805      	add	r0, sp, #20
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8003fdc:	9303      	str	r3, [sp, #12]
	uint8_t add[]={0x00,0x00,0x00};
 8003fde:	f009 fae5 	bl	800d5ac <memcpy>

	SPI_flash_Read_Data(add , data1 , 256);
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	ad06      	add	r5, sp, #24
 8003fe6:	0029      	movs	r1, r5
 8003fe8:	0052      	lsls	r2, r2, #1
 8003fea:	a805      	add	r0, sp, #20
 8003fec:	f7ff feed 	bl	8003dca <SPI_flash_Read_Data>
	add[1]=0x01;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	aa04      	add	r2, sp, #16
 8003ff4:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data2 , 256);
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	ae46      	add	r6, sp, #280	; 0x118
 8003ffa:	0031      	movs	r1, r6
 8003ffc:	0052      	lsls	r2, r2, #1
 8003ffe:	a805      	add	r0, sp, #20
 8004000:	f7ff fee3 	bl	8003dca <SPI_flash_Read_Data>
	add[1]=0x02;
 8004004:	2302      	movs	r3, #2
 8004006:	aa04      	add	r2, sp, #16
 8004008:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data3 , 256);
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	a986      	add	r1, sp, #536	; 0x218
 800400e:	0052      	lsls	r2, r2, #1
 8004010:	a805      	add	r0, sp, #20
 8004012:	f7ff feda 	bl	8003dca <SPI_flash_Read_Data>



	int i=0;
	int j=0;
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8004016:	2400      	movs	r4, #0
 8004018:	0038      	movs	r0, r7
 800401a:	f7fc f875 	bl	8000108 <strlen>
 800401e:	42a0      	cmp	r0, r4
 8004020:	d301      	bcc.n	8004026 <writeConfig+0x5e>
 8004022:	2c10      	cmp	r4, #16
 8004024:	d101      	bne.n	800402a <writeConfig+0x62>
 8004026:	2400      	movs	r4, #0
 8004028:	e008      	b.n	800403c <writeConfig+0x74>
		data1[j+i]=RegNo[i];
 800402a:	5d3b      	ldrb	r3, [r7, r4]
 800402c:	552b      	strb	r3, [r5, r4]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 800402e:	3401      	adds	r4, #1
 8004030:	e7f2      	b.n	8004018 <writeConfig+0x50>
	}
	j=j+RegNoLen;

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
		data1[j+i]=INSMS[i];
 8004032:	9a01      	ldr	r2, [sp, #4]
 8004034:	192b      	adds	r3, r5, r4
 8004036:	5d12      	ldrb	r2, [r2, r4]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8004038:	3401      	adds	r4, #1
		data1[j+i]=INSMS[i];
 800403a:	741a      	strb	r2, [r3, #16]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 800403c:	9801      	ldr	r0, [sp, #4]
 800403e:	f7fc f863 	bl	8000108 <strlen>
 8004042:	42a0      	cmp	r0, r4
 8004044:	d301      	bcc.n	800404a <writeConfig+0x82>
 8004046:	2c64      	cmp	r4, #100	; 0x64
 8004048:	d1f3      	bne.n	8004032 <writeConfig+0x6a>
 800404a:	2400      	movs	r4, #0
	}
	j=j+INSMSLen;

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
		data1[j+i]=OUTSMS[i];
 800404c:	af23      	add	r7, sp, #140	; 0x8c
 800404e:	e003      	b.n	8004058 <writeConfig+0x90>
 8004050:	9b02      	ldr	r3, [sp, #8]
 8004052:	5d1b      	ldrb	r3, [r3, r4]
 8004054:	553b      	strb	r3, [r7, r4]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8004056:	3401      	adds	r4, #1
 8004058:	9802      	ldr	r0, [sp, #8]
 800405a:	f7fc f855 	bl	8000108 <strlen>
 800405e:	42a0      	cmp	r0, r4
 8004060:	d301      	bcc.n	8004066 <writeConfig+0x9e>
 8004062:	2c3c      	cmp	r4, #60	; 0x3c
 8004064:	d1f4      	bne.n	8004050 <writeConfig+0x88>
 8004066:	2400      	movs	r4, #0
 8004068:	e003      	b.n	8004072 <writeConfig+0xaa>
	}
	j=0;
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
		data2[j+i]=EmgIP[i];
 800406a:	9b03      	ldr	r3, [sp, #12]
 800406c:	5d1b      	ldrb	r3, [r3, r4]
 800406e:	5533      	strb	r3, [r6, r4]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8004070:	3401      	adds	r4, #1
 8004072:	9803      	ldr	r0, [sp, #12]
 8004074:	f7fc f848 	bl	8000108 <strlen>
 8004078:	42a0      	cmp	r0, r4
 800407a:	d301      	bcc.n	8004080 <writeConfig+0xb8>
 800407c:	2c28      	cmp	r4, #40	; 0x28
 800407e:	d1f4      	bne.n	800406a <writeConfig+0xa2>
 8004080:	2400      	movs	r4, #0
	}
	j=j+EmgIPLen;

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
		data2[j+i]=RegIP[i];
 8004082:	af50      	add	r7, sp, #320	; 0x140
 8004084:	e003      	b.n	800408e <writeConfig+0xc6>
 8004086:	9bcc      	ldr	r3, [sp, #816]	; 0x330
 8004088:	5d1b      	ldrb	r3, [r3, r4]
 800408a:	553b      	strb	r3, [r7, r4]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 800408c:	3401      	adds	r4, #1
 800408e:	98cc      	ldr	r0, [sp, #816]	; 0x330
 8004090:	f7fc f83a 	bl	8000108 <strlen>
 8004094:	42a0      	cmp	r0, r4
 8004096:	d301      	bcc.n	800409c <writeConfig+0xd4>
 8004098:	2c28      	cmp	r4, #40	; 0x28
 800409a:	d1f4      	bne.n	8004086 <writeConfig+0xbe>
 800409c:	2400      	movs	r4, #0
	}
	j=j+RegIPLen;


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
		data2[j+i]=TrackIP[i];
 800409e:	af5a      	add	r7, sp, #360	; 0x168
 80040a0:	e003      	b.n	80040aa <writeConfig+0xe2>
 80040a2:	9bcd      	ldr	r3, [sp, #820]	; 0x334
 80040a4:	5d1b      	ldrb	r3, [r3, r4]
 80040a6:	553b      	strb	r3, [r7, r4]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 80040a8:	3401      	adds	r4, #1
 80040aa:	98cd      	ldr	r0, [sp, #820]	; 0x334
 80040ac:	f7fc f82c 	bl	8000108 <strlen>
 80040b0:	42a0      	cmp	r0, r4
 80040b2:	d301      	bcc.n	80040b8 <writeConfig+0xf0>
 80040b4:	2c28      	cmp	r4, #40	; 0x28
 80040b6:	d1f4      	bne.n	80040a2 <writeConfig+0xda>
 80040b8:	2400      	movs	r4, #0
	}
	j=0;


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
		data3[j+i]=OtherData[i];
 80040ba:	af86      	add	r7, sp, #536	; 0x218
 80040bc:	e003      	b.n	80040c6 <writeConfig+0xfe>
 80040be:	9bce      	ldr	r3, [sp, #824]	; 0x338
 80040c0:	5d1b      	ldrb	r3, [r3, r4]
 80040c2:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80040c4:	3401      	adds	r4, #1
 80040c6:	98ce      	ldr	r0, [sp, #824]	; 0x338
 80040c8:	f7fc f81e 	bl	8000108 <strlen>
 80040cc:	42a0      	cmp	r0, r4
 80040ce:	d303      	bcc.n	80040d8 <writeConfig+0x110>
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	429c      	cmp	r4, r3
 80040d6:	d1f2      	bne.n	80040be <writeConfig+0xf6>
	}
	j=j+OtherDataLen;


	add[1]=0x00;
 80040d8:	2300      	movs	r3, #0
 80040da:	aa04      	add	r2, sp, #16
 80040dc:	7153      	strb	r3, [r2, #5]

	SPI_flash_Sector_Erase(add);
 80040de:	a805      	add	r0, sp, #20
 80040e0:	f7ff fe22 	bl	8003d28 <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	0029      	movs	r1, r5
 80040e8:	a805      	add	r0, sp, #20
 80040ea:	0052      	lsls	r2, r2, #1
 80040ec:	f7ff fe4c 	bl	8003d88 <SPI_flash_Page_Program>
	add[1]=0x01;
 80040f0:	2401      	movs	r4, #1
	SPI_flash_Page_Program(add, data2,256);
 80040f2:	2280      	movs	r2, #128	; 0x80
	add[1]=0x01;
 80040f4:	ab04      	add	r3, sp, #16
	SPI_flash_Page_Program(add, data2,256);
 80040f6:	0031      	movs	r1, r6
	add[1]=0x01;
 80040f8:	715c      	strb	r4, [r3, #5]
	SPI_flash_Page_Program(add, data2,256);
 80040fa:	a805      	add	r0, sp, #20
 80040fc:	0052      	lsls	r2, r2, #1
 80040fe:	f7ff fe43 	bl	8003d88 <SPI_flash_Page_Program>
	add[1]=0x02;
 8004102:	2302      	movs	r3, #2
 8004104:	aa04      	add	r2, sp, #16
 8004106:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data3,256);
 8004108:	2280      	movs	r2, #128	; 0x80
 800410a:	a805      	add	r0, sp, #20
 800410c:	0052      	lsls	r2, r2, #1
 800410e:	a986      	add	r1, sp, #536	; 0x218
 8004110:	f7ff fe3a 	bl	8003d88 <SPI_flash_Page_Program>
	return 1;

}
 8004114:	0020      	movs	r0, r4
 8004116:	23c7      	movs	r3, #199	; 0xc7
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	449d      	add	sp, r3
 800411c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	fffffce4 	.word	0xfffffce4
 8004124:	08010d48 	.word	0x08010d48

08004128 <readRegNo>:



char* readRegNo(){
 8004128:	b513      	push	{r0, r1, r4, lr}
	uint8_t add4[]={0x00, 0x00,0x00};
 800412a:	490d      	ldr	r1, [pc, #52]	; (8004160 <readRegNo+0x38>)
 800412c:	2203      	movs	r2, #3
 800412e:	3103      	adds	r1, #3
 8004130:	a801      	add	r0, sp, #4
 8004132:	f009 fa3b 	bl	800d5ac <memcpy>

    memset(dataR,0,256);
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	4c0a      	ldr	r4, [pc, #40]	; (8004164 <readRegNo+0x3c>)
 800413a:	2100      	movs	r1, #0
 800413c:	0052      	lsls	r2, r2, #1
 800413e:	0020      	movs	r0, r4
 8004140:	f009 f86c 	bl	800d21c <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 8004144:	a801      	add	r0, sp, #4
 8004146:	2210      	movs	r2, #16
 8004148:	0021      	movs	r1, r4
 800414a:	f7ff fe3e 	bl	8003dca <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 800414e:	0020      	movs	r0, r4
 8004150:	f7fb ffda 	bl	8000108 <strlen>
 8004154:	2801      	cmp	r0, #1
 8004156:	d800      	bhi.n	800415a <readRegNo+0x32>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
	}
	else{
		return "--Err RegNo--";
 8004158:	4c03      	ldr	r4, [pc, #12]	; (8004168 <readRegNo+0x40>)
	}

}
 800415a:	0020      	movs	r0, r4
 800415c:	bd16      	pop	{r1, r2, r4, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	08010d48 	.word	0x08010d48
 8004164:	20003413 	.word	0x20003413
 8004168:	0801112b 	.word	0x0801112b

0800416c <readINSMSno>:

char* readINSMSno(){
 800416c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t add4[]={0x00, 0x00,0x00};
 800416e:	4908      	ldr	r1, [pc, #32]	; (8004190 <readINSMSno+0x24>)
 8004170:	ad01      	add	r5, sp, #4
 8004172:	0028      	movs	r0, r5
 8004174:	2203      	movs	r2, #3
 8004176:	3103      	adds	r1, #3
 8004178:	f009 fa18 	bl	800d5ac <memcpy>
	add4[2]=RegNoLen;
 800417c:	2310      	movs	r3, #16
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 800417e:	4c05      	ldr	r4, [pc, #20]	; (8004194 <readINSMSno+0x28>)
 8004180:	0028      	movs	r0, r5
 8004182:	2264      	movs	r2, #100	; 0x64
 8004184:	0021      	movs	r1, r4
	add4[2]=RegNoLen;
 8004186:	70ab      	strb	r3, [r5, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8004188:	f7ff fe1f 	bl	8003dca <SPI_flash_Read_Data>
	return (char*) dataR;
}
 800418c:	0020      	movs	r0, r4
 800418e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8004190:	08010d48 	.word	0x08010d48
 8004194:	20003413 	.word	0x20003413

08004198 <readOUTSMSno>:

char* readOUTSMSno(){
 8004198:	b537      	push	{r0, r1, r2, r4, r5, lr}

	uint8_t  add4[]={0x00, 0x00,0x00};
 800419a:	4908      	ldr	r1, [pc, #32]	; (80041bc <readOUTSMSno+0x24>)
 800419c:	ad01      	add	r5, sp, #4
 800419e:	0028      	movs	r0, r5
 80041a0:	2203      	movs	r2, #3
 80041a2:	3103      	adds	r1, #3
 80041a4:	f009 fa02 	bl	800d5ac <memcpy>
	add4[2]=RegNoLen+INSMSLen;
 80041a8:	2374      	movs	r3, #116	; 0x74
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 80041aa:	4c05      	ldr	r4, [pc, #20]	; (80041c0 <readOUTSMSno+0x28>)
 80041ac:	0028      	movs	r0, r5
 80041ae:	223c      	movs	r2, #60	; 0x3c
 80041b0:	0021      	movs	r1, r4
	add4[2]=RegNoLen+INSMSLen;
 80041b2:	70ab      	strb	r3, [r5, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 80041b4:	f7ff fe09 	bl	8003dca <SPI_flash_Read_Data>
	return (char*) dataR;
}
 80041b8:	0020      	movs	r0, r4
 80041ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80041bc:	08010d48 	.word	0x08010d48
 80041c0:	20003413 	.word	0x20003413

080041c4 <readEmgIP>:

char* readEmgIP(){
 80041c4:	b513      	push	{r0, r1, r4, lr}
	uint8_t  add4[]={0x00, 0x01,0x00};
 80041c6:	4907      	ldr	r1, [pc, #28]	; (80041e4 <readEmgIP+0x20>)
 80041c8:	2203      	movs	r2, #3
 80041ca:	3106      	adds	r1, #6
 80041cc:	a801      	add	r0, sp, #4
 80041ce:	f009 f9ed 	bl	800d5ac <memcpy>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 80041d2:	4c05      	ldr	r4, [pc, #20]	; (80041e8 <readEmgIP+0x24>)
 80041d4:	a801      	add	r0, sp, #4
 80041d6:	2228      	movs	r2, #40	; 0x28
 80041d8:	0021      	movs	r1, r4
 80041da:	f7ff fdf6 	bl	8003dca <SPI_flash_Read_Data>
	return (char*) dataR;
}
 80041de:	0020      	movs	r0, r4
 80041e0:	bd16      	pop	{r1, r2, r4, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	08010d48 	.word	0x08010d48
 80041e8:	20003413 	.word	0x20003413

080041ec <readRegIP>:

char* readRegIP(){
 80041ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t  add4[]={0x00, 0x01,0x00};
 80041ee:	4908      	ldr	r1, [pc, #32]	; (8004210 <readRegIP+0x24>)
 80041f0:	ad01      	add	r5, sp, #4
 80041f2:	0028      	movs	r0, r5
 80041f4:	2203      	movs	r2, #3
 80041f6:	3106      	adds	r1, #6
 80041f8:	f009 f9d8 	bl	800d5ac <memcpy>
	add4[2]=EmgIPLen;
 80041fc:	2228      	movs	r2, #40	; 0x28
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 80041fe:	4c05      	ldr	r4, [pc, #20]	; (8004214 <readRegIP+0x28>)
 8004200:	0028      	movs	r0, r5
 8004202:	0021      	movs	r1, r4
	add4[2]=EmgIPLen;
 8004204:	70aa      	strb	r2, [r5, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8004206:	f7ff fde0 	bl	8003dca <SPI_flash_Read_Data>
	return (char*) dataR;
}
 800420a:	0020      	movs	r0, r4
 800420c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	08010d48 	.word	0x08010d48
 8004214:	20003413 	.word	0x20003413

08004218 <readTracIP>:

char* readTracIP(){
 8004218:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t  add4[]={0x00, 0x01,0x00};
 800421a:	4908      	ldr	r1, [pc, #32]	; (800423c <readTracIP+0x24>)
 800421c:	ad01      	add	r5, sp, #4
 800421e:	0028      	movs	r0, r5
 8004220:	2203      	movs	r2, #3
 8004222:	3106      	adds	r1, #6
 8004224:	f009 f9c2 	bl	800d5ac <memcpy>
	add4[2]=EmgIPLen+RegIPLen;
 8004228:	2350      	movs	r3, #80	; 0x50
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 800422a:	4c05      	ldr	r4, [pc, #20]	; (8004240 <readTracIP+0x28>)
 800422c:	0028      	movs	r0, r5
 800422e:	2228      	movs	r2, #40	; 0x28
 8004230:	0021      	movs	r1, r4
	add4[2]=EmgIPLen+RegIPLen;
 8004232:	70ab      	strb	r3, [r5, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8004234:	f7ff fdc9 	bl	8003dca <SPI_flash_Read_Data>
	return (char*) dataR;
}
 8004238:	0020      	movs	r0, r4
 800423a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800423c:	08010d48 	.word	0x08010d48
 8004240:	20003413 	.word	0x20003413

08004244 <detectAcc>:


int detectAcc(){
 8004244:	b570      	push	{r4, r5, r6, lr}
	readAcc();
 8004246:	f7ff f905 	bl	8003454 <readAcc.isra.0>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 800424a:	4c13      	ldr	r4, [pc, #76]	; (8004298 <detectAcc+0x54>)
 800424c:	6861      	ldr	r1, [r4, #4]
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	f7fc f9de 	bl	8000610 <__aeabi_fadd>
 8004254:	68a1      	ldr	r1, [r4, #8]
 8004256:	f7fc f9db 	bl	8000610 <__aeabi_fadd>
 800425a:	4910      	ldr	r1, [pc, #64]	; (800429c <detectAcc+0x58>)
 800425c:	1c05      	adds	r5, r0, #0
 800425e:	f7fc f953 	bl	8000508 <__aeabi_fcmpgt>
 8004262:	2301      	movs	r3, #1
 8004264:	2800      	cmp	r0, #0
 8004266:	d114      	bne.n	8004292 <detectAcc+0x4e>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 8004268:	490d      	ldr	r1, [pc, #52]	; (80042a0 <detectAcc+0x5c>)
 800426a:	1c28      	adds	r0, r5, #0
 800426c:	f7fc f938 	bl	80004e0 <__aeabi_fcmplt>
 8004270:	2302      	movs	r3, #2
 8004272:	2800      	cmp	r0, #0
 8004274:	d10d      	bne.n	8004292 <detectAcc+0x4e>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 8004276:	6921      	ldr	r1, [r4, #16]
 8004278:	68e0      	ldr	r0, [r4, #12]
 800427a:	f7fc f9c9 	bl	8000610 <__aeabi_fadd>
 800427e:	6961      	ldr	r1, [r4, #20]
 8004280:	f7fc f9c6 	bl	8000610 <__aeabi_fadd>
 8004284:	4905      	ldr	r1, [pc, #20]	; (800429c <detectAcc+0x58>)
 8004286:	f7fc f93f 	bl	8000508 <__aeabi_fcmpgt>
 800428a:	2303      	movs	r3, #3
 800428c:	2800      	cmp	r0, #0
 800428e:	d100      	bne.n	8004292 <detectAcc+0x4e>


	return 0;
 8004290:	0003      	movs	r3, r0
}
 8004292:	0018      	movs	r0, r3
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	200002ec 	.word	0x200002ec
 800429c:	44fa0000 	.word	0x44fa0000
 80042a0:	c4fa0000 	.word	0xc4fa0000

080042a4 <initGPS>:
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 80042a4:	2300      	movs	r3, #0
void initGPS(){
 80042a6:	b570      	push	{r4, r5, r6, lr}
	GPSInfo.lat=0.0;
 80042a8:	4c10      	ldr	r4, [pc, #64]	; (80042ec <initGPS+0x48>)
	GPSInfo.pdop=0.0;
	GPSInfo.head=0.0;
	GPSInfo.speed=0.0;
	GPSInfo.fix=0;
	GPSInfo.sat=0;
	strcpy(GPSInfo.latD,"x");
 80042aa:	4d11      	ldr	r5, [pc, #68]	; (80042f0 <initGPS+0x4c>)
 80042ac:	0020      	movs	r0, r4
	GPSInfo.lat=0.0;
 80042ae:	6023      	str	r3, [r4, #0]
	GPSInfo.lon=0.0;
 80042b0:	6063      	str	r3, [r4, #4]
	GPSInfo.alt=0.0;
 80042b2:	60a3      	str	r3, [r4, #8]
	GPSInfo.hdop=0.0;
 80042b4:	60e3      	str	r3, [r4, #12]
	GPSInfo.pdop=0.0;
 80042b6:	6123      	str	r3, [r4, #16]
	GPSInfo.head=0.0;
 80042b8:	6163      	str	r3, [r4, #20]
	GPSInfo.speed=0.0;
 80042ba:	61a3      	str	r3, [r4, #24]
	GPSInfo.fix=0;
 80042bc:	2300      	movs	r3, #0
	strcpy(GPSInfo.latD,"x");
 80042be:	0029      	movs	r1, r5
 80042c0:	3028      	adds	r0, #40	; 0x28
	GPSInfo.fix=0;
 80042c2:	61e3      	str	r3, [r4, #28]
	GPSInfo.sat=0;
 80042c4:	6223      	str	r3, [r4, #32]
	strcpy(GPSInfo.latD,"x");
 80042c6:	f009 f95e 	bl	800d586 <strcpy>
	strcpy(GPSInfo.lonD,"x");
 80042ca:	0020      	movs	r0, r4
 80042cc:	0029      	movs	r1, r5
 80042ce:	302b      	adds	r0, #43	; 0x2b
 80042d0:	f009 f959 	bl	800d586 <strcpy>
	strcpy(GPSInfo.time,"x");
 80042d4:	0020      	movs	r0, r4
 80042d6:	0029      	movs	r1, r5
 80042d8:	302e      	adds	r0, #46	; 0x2e
 80042da:	f009 f954 	bl	800d586 <strcpy>
	strcpy(GPSInfo.date,"x");
 80042de:	0020      	movs	r0, r4
 80042e0:	0029      	movs	r1, r5
 80042e2:	303d      	adds	r0, #61	; 0x3d
 80042e4:	f009 f94f 	bl	800d586 <strcpy>
}
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	200004f4 	.word	0x200004f4
 80042f0:	08011d22 	.word	0x08011d22

080042f4 <getGPSString>:
void getGPSString(){
 80042f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(gpsDataRet,0,70);
 80042f6:	4e25      	ldr	r6, [pc, #148]	; (800438c <getGPSString+0x98>)
 80042f8:	2246      	movs	r2, #70	; 0x46
 80042fa:	2100      	movs	r1, #0
 80042fc:	0030      	movs	r0, r6
void getGPSString(){
 80042fe:	b097      	sub	sp, #92	; 0x5c
	memset(gpsDataRet,0,70);
 8004300:	f008 ff8c 	bl	800d21c <memset>

	if(GPSInfo.fix==1){
 8004304:	4c22      	ldr	r4, [pc, #136]	; (8004390 <getGPSString+0x9c>)
 8004306:	69e2      	ldr	r2, [r4, #28]
 8004308:	2a01      	cmp	r2, #1
 800430a:	d13c      	bne.n	8004386 <getGPSString+0x92>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 800430c:	2104      	movs	r1, #4
 800430e:	4821      	ldr	r0, [pc, #132]	; (8004394 <getGPSString+0xa0>)
 8004310:	f003 f9b6 	bl	8007680 <HAL_GPIO_WritePin>
	}




	sprintf(gpsDataRet, "%1d,%s,%s,%0.6f,%1s,%0.6f,%s,%0.1f,%0.2f,%d,%0.1f,%0.1f,%0.1f",
 8004314:	68e0      	ldr	r0, [r4, #12]
 8004316:	f7fe fed5 	bl	80030c4 <__aeabi_f2d>
 800431a:	9014      	str	r0, [sp, #80]	; 0x50
 800431c:	9115      	str	r1, [sp, #84]	; 0x54
 800431e:	6920      	ldr	r0, [r4, #16]
 8004320:	f7fe fed0 	bl	80030c4 <__aeabi_f2d>
 8004324:	9012      	str	r0, [sp, #72]	; 0x48
 8004326:	9113      	str	r1, [sp, #76]	; 0x4c
 8004328:	68a0      	ldr	r0, [r4, #8]
 800432a:	f7fe fecb 	bl	80030c4 <__aeabi_f2d>
 800432e:	9010      	str	r0, [sp, #64]	; 0x40
 8004330:	9111      	str	r1, [sp, #68]	; 0x44
 8004332:	6a23      	ldr	r3, [r4, #32]
 8004334:	0027      	movs	r7, r4
 8004336:	930e      	str	r3, [sp, #56]	; 0x38
 8004338:	6960      	ldr	r0, [r4, #20]
 800433a:	f7fe fec3 	bl	80030c4 <__aeabi_f2d>
 800433e:	900c      	str	r0, [sp, #48]	; 0x30
 8004340:	910d      	str	r1, [sp, #52]	; 0x34
 8004342:	69a0      	ldr	r0, [r4, #24]
 8004344:	f7fe febe 	bl	80030c4 <__aeabi_f2d>
 8004348:	0023      	movs	r3, r4
 800434a:	900a      	str	r0, [sp, #40]	; 0x28
 800434c:	910b      	str	r1, [sp, #44]	; 0x2c
 800434e:	332b      	adds	r3, #43	; 0x2b
 8004350:	9308      	str	r3, [sp, #32]
 8004352:	6860      	ldr	r0, [r4, #4]
 8004354:	f7fe feb6 	bl	80030c4 <__aeabi_f2d>
 8004358:	0023      	movs	r3, r4
 800435a:	9006      	str	r0, [sp, #24]
 800435c:	9107      	str	r1, [sp, #28]
 800435e:	3328      	adds	r3, #40	; 0x28
 8004360:	9304      	str	r3, [sp, #16]
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	f7fe feae 	bl	80030c4 <__aeabi_f2d>
 8004368:	0023      	movs	r3, r4
 800436a:	9002      	str	r0, [sp, #8]
 800436c:	9103      	str	r1, [sp, #12]
 800436e:	4d0a      	ldr	r5, [pc, #40]	; (8004398 <getGPSString+0xa4>)
 8004370:	332e      	adds	r3, #46	; 0x2e
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	373d      	adds	r7, #61	; 0x3d
 8004376:	003b      	movs	r3, r7
 8004378:	0029      	movs	r1, r5
 800437a:	0030      	movs	r0, r6
 800437c:	69e2      	ldr	r2, [r4, #28]
 800437e:	f008 fee1 	bl	800d144 <siprintf>
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
}
 8004382:	b017      	add	sp, #92	; 0x5c
 8004384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004386:	2200      	movs	r2, #0
 8004388:	e7c0      	b.n	800430c <getGPSString+0x18>
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	2000397c 	.word	0x2000397c
 8004390:	200004f4 	.word	0x200004f4
 8004394:	50000c00 	.word	0x50000c00
 8004398:	08011139 	.word	0x08011139

0800439c <DegreeDecimalConvert>:



float DegreeDecimalConvert(float ddmmmm){
 800439c:	b570      	push	{r4, r5, r6, lr}
    // printf("insfunction2 %f",ddmmmm);
    int dd1= ddmmmm/100;
 800439e:	490d      	ldr	r1, [pc, #52]	; (80043d4 <DegreeDecimalConvert+0x38>)
float DegreeDecimalConvert(float ddmmmm){
 80043a0:	1c05      	adds	r5, r0, #0
    int dd1= ddmmmm/100;
 80043a2:	f7fc fad5 	bl	8000950 <__aeabi_fdiv>
 80043a6:	f7fc ff8b 	bl	80012c0 <__aeabi_f2iz>
 80043aa:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 80043ac:	2064      	movs	r0, #100	; 0x64
 80043ae:	4360      	muls	r0, r4
 80043b0:	f7fc ffa6 	bl	8001300 <__aeabi_i2f>
 80043b4:	1c01      	adds	r1, r0, #0
 80043b6:	1c28      	adds	r0, r5, #0
 80043b8:	f7fc fde2 	bl	8000f80 <__aeabi_fsub>
    mm=mm/60;
 80043bc:	4906      	ldr	r1, [pc, #24]	; (80043d8 <DegreeDecimalConvert+0x3c>)
 80043be:	f7fc fac7 	bl	8000950 <__aeabi_fdiv>
 80043c2:	1c05      	adds	r5, r0, #0
    mm=(float)dd1+mm;
 80043c4:	0020      	movs	r0, r4
 80043c6:	f7fc ff9b 	bl	8001300 <__aeabi_i2f>
 80043ca:	1c29      	adds	r1, r5, #0
 80043cc:	f7fc f920 	bl	8000610 <__aeabi_fadd>
    return(mm);
}
 80043d0:	bd70      	pop	{r4, r5, r6, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	42c80000 	.word	0x42c80000
 80043d8:	42700000 	.word	0x42700000

080043dc <printInt>:
	snprintf(printBuf, 6, "%5.0f", x);
	//gcvt(x, 6, buf);
	Debug_Tx(printBuf);

}
void printInt(int x){
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	0005      	movs	r5, r0
	memset(printBuf,0,50);
 80043e0:	4c07      	ldr	r4, [pc, #28]	; (8004400 <printInt+0x24>)
 80043e2:	2232      	movs	r2, #50	; 0x32
 80043e4:	2100      	movs	r1, #0
 80043e6:	0020      	movs	r0, r4
 80043e8:	f008 ff18 	bl	800d21c <memset>
	snprintf(printBuf, 6, "%d", x);
 80043ec:	002b      	movs	r3, r5
 80043ee:	2106      	movs	r1, #6
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <printInt+0x28>)
 80043f2:	0020      	movs	r0, r4
 80043f4:	f008 fe72 	bl	800d0dc <sniprintf>
	//gcvt(x, 6, buf);
	Debug_Tx(printBuf);
 80043f8:	0020      	movs	r0, r4
 80043fa:	f7fe ff9b 	bl	8003334 <Debug_Tx>

}
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	20003eaf 	.word	0x20003eaf
 8004404:	08011128 	.word	0x08011128

08004408 <nmea0183_checksum>:
int nmea0183_checksum(char *s){//one extra blank char was found so last 4 char had to remove
 8004408:	0003      	movs	r3, r0
    int c = 0;
 800440a:	2000      	movs	r0, #0
    while (*s)
 800440c:	781a      	ldrb	r2, [r3, #0]
 800440e:	2a00      	cmp	r2, #0
 8004410:	d100      	bne.n	8004414 <nmea0183_checksum+0xc>
        c ^= *s++;

    return c;

}
 8004412:	4770      	bx	lr
        c ^= *s++;
 8004414:	3301      	adds	r3, #1
 8004416:	4050      	eors	r0, r2
 8004418:	e7f8      	b.n	800440c <nmea0183_checksum+0x4>

0800441a <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 800441a:	b510      	push	{r4, lr}
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 800441c:	212a      	movs	r1, #42	; 0x2a
uint8_t nmea_valid_checksum(const char *message) {
 800441e:	0004      	movs	r4, r0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8004420:	f008 ff11 	bl	800d246 <strchr>
 8004424:	2210      	movs	r2, #16
 8004426:	2100      	movs	r1, #0
 8004428:	3001      	adds	r0, #1
 800442a:	f007 ff01 	bl	800c230 <strtol>

    char p;
    uint8_t sum = 0;
 800442e:	2300      	movs	r3, #0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8004430:	b2c2      	uxtb	r2, r0
    ++message;
 8004432:	3401      	adds	r4, #1
    while ((p = *message++) != '*') {
 8004434:	3401      	adds	r4, #1
 8004436:	1e61      	subs	r1, r4, #1
 8004438:	7809      	ldrb	r1, [r1, #0]
 800443a:	292a      	cmp	r1, #42	; 0x2a
 800443c:	d104      	bne.n	8004448 <nmea_valid_checksum+0x2e>
        sum ^= p;
    }

    if (sum != checksum) {
 800443e:	1a98      	subs	r0, r3, r2
 8004440:	4242      	negs	r2, r0
 8004442:	4150      	adcs	r0, r2
        return 0;
    }

    return 1;
}
 8004444:	b2c0      	uxtb	r0, r0
 8004446:	bd10      	pop	{r4, pc}
        sum ^= p;
 8004448:	404b      	eors	r3, r1
 800444a:	e7f3      	b.n	8004434 <nmea_valid_checksum+0x1a>

0800444c <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 800444c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int i=0;
	Debug_Tx("------------------Testing Memory:");
 800444e:	480f      	ldr	r0, [pc, #60]	; (800448c <TestMEM+0x40>)
 8004450:	f7fe ff70 	bl	8003334 <Debug_Tx>
	for(i=0;i<1;i++){
		SPI_flash_get_device_ID( );
 8004454:	f7ff fbf0 	bl	8003c38 <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8004458:	4c0d      	ldr	r4, [pc, #52]	; (8004490 <TestMEM+0x44>)
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <TestMEM+0x48>)
 800445c:	0022      	movs	r2, r4
 800445e:	0021      	movs	r1, r4
 8004460:	0020      	movs	r0, r4
 8004462:	3461      	adds	r4, #97	; 0x61
 8004464:	320c      	adds	r2, #12
 8004466:	3132      	adds	r1, #50	; 0x32
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	9402      	str	r4, [sp, #8]
 800446e:	3053      	adds	r0, #83	; 0x53
 8004470:	f7ff fdaa 	bl	8003fc8 <writeConfig>
		 	  				  "216.10.243.86","216.10.243.86","216.10.243.86",
			  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");


		Debug_Tx("Reading RegNo--");
 8004474:	4808      	ldr	r0, [pc, #32]	; (8004498 <TestMEM+0x4c>)
 8004476:	f7fe ff5d 	bl	8003334 <Debug_Tx>
		Debug_Tx(readRegNo());
 800447a:	f7ff fe55 	bl	8004128 <readRegNo>
 800447e:	f7fe ff59 	bl	8003334 <Debug_Tx>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 8004482:	20fa      	movs	r0, #250	; 0xfa
 8004484:	00c0      	lsls	r0, r0, #3
 8004486:	f002 fad9 	bl	8006a3c <HAL_Delay>

	}


}
 800448a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800448c:	08011177 	.word	0x08011177
 8004490:	08010d48 	.word	0x08010d48
 8004494:	08011199 	.word	0x08011199
 8004498:	080111a7 	.word	0x080111a7

0800449c <SystemClock_Config>:
{
 800449c:	b500      	push	{lr}
 800449e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044a0:	2234      	movs	r2, #52	; 0x34
 80044a2:	2100      	movs	r1, #0
 80044a4:	a805      	add	r0, sp, #20
 80044a6:	f008 feb9 	bl	800d21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044aa:	2100      	movs	r1, #0
 80044ac:	2210      	movs	r2, #16
 80044ae:	a801      	add	r0, sp, #4
 80044b0:	f008 feb4 	bl	800d21c <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044b4:	2080      	movs	r0, #128	; 0x80
 80044b6:	0080      	lsls	r0, r0, #2
 80044b8:	f003 fc78 	bl	8007dac <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044bc:	2302      	movs	r3, #2
 80044be:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044c0:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044c2:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044c4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80044c6:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044c8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80044ca:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044cc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80044ce:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044d0:	f003 fc98 	bl	8007e04 <HAL_RCC_OscConfig>
 80044d4:	1e01      	subs	r1, r0, #0
 80044d6:	d001      	beq.n	80044dc <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044da:	e7fe      	b.n	80044da <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044dc:	2307      	movs	r3, #7
 80044de:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044e0:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80044e2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044e4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044e6:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80044e8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044ea:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80044ec:	f003 fee8 	bl	80082c0 <HAL_RCC_ClockConfig>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d001      	beq.n	80044f8 <SystemClock_Config+0x5c>
 80044f4:	b672      	cpsid	i
  while (1)
 80044f6:	e7fe      	b.n	80044f6 <SystemClock_Config+0x5a>
}
 80044f8:	b013      	add	sp, #76	; 0x4c
 80044fa:	bd00      	pop	{pc}

080044fc <main>:
{
 80044fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fe:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8004500:	f002 fa76 	bl	80069f0 <HAL_Init>
  SystemClock_Config();
 8004504:	f7ff ffca 	bl	800449c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004508:	2214      	movs	r2, #20
 800450a:	2100      	movs	r1, #0
 800450c:	a807      	add	r0, sp, #28
 800450e:	f008 fe85 	bl	800d21c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004512:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004514:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004516:	4dd3      	ldr	r5, [pc, #844]	; (8004864 <main+0x368>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004518:	2108      	movs	r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800451a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 800451c:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800451e:	4313      	orrs	r3, r2
 8004520:	636b      	str	r3, [r5, #52]	; 0x34
 8004522:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8004524:	278e      	movs	r7, #142	; 0x8e
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004526:	4013      	ands	r3, r2
 8004528:	9302      	str	r3, [sp, #8]
 800452a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800452c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800452e:	321c      	adds	r2, #28
 8004530:	4313      	orrs	r3, r2
 8004532:	636b      	str	r3, [r5, #52]	; 0x34
 8004534:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8004536:	4ccc      	ldr	r4, [pc, #816]	; (8004868 <main+0x36c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004538:	4013      	ands	r3, r2
 800453a:	9303      	str	r3, [sp, #12]
 800453c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800453e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004540:	3a1e      	subs	r2, #30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004542:	4333      	orrs	r3, r6
 8004544:	636b      	str	r3, [r5, #52]	; 0x34
 8004546:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8004548:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800454a:	4033      	ands	r3, r6
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004550:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8004552:	00bf      	lsls	r7, r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004554:	4313      	orrs	r3, r2
 8004556:	636b      	str	r3, [r5, #52]	; 0x34
 8004558:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800455a:	4013      	ands	r3, r2
 800455c:	9305      	str	r3, [sp, #20]
 800455e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004560:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8004562:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004564:	430b      	orrs	r3, r1
 8004566:	636b      	str	r3, [r5, #52]	; 0x34
 8004568:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800456a:	400b      	ands	r3, r1
 800456c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 800456e:	0021      	movs	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004570:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8004572:	f003 f885 	bl	8007680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8004576:	2200      	movs	r2, #0
 8004578:	21c0      	movs	r1, #192	; 0xc0
 800457a:	48bc      	ldr	r0, [pc, #752]	; (800486c <main+0x370>)
 800457c:	f003 f880 	bl	8007680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8004580:	2200      	movs	r2, #0
 8004582:	2107      	movs	r1, #7
 8004584:	48ba      	ldr	r0, [pc, #744]	; (8004870 <main+0x374>)
 8004586:	f003 f87b 	bl	8007680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 800458a:	2200      	movs	r2, #0
 800458c:	0039      	movs	r1, r7
 800458e:	48b9      	ldr	r0, [pc, #740]	; (8004874 <main+0x378>)
 8004590:	f003 f876 	bl	8007680 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004594:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 8004596:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459a:	a907      	add	r1, sp, #28
 800459c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800459e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a4:	f002 ffb4 	bl	8007510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80045a8:	23f2      	movs	r3, #242	; 0xf2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045aa:	48b2      	ldr	r0, [pc, #712]	; (8004874 <main+0x378>)
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80045ac:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ae:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80045b0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045b2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b6:	f002 ffab 	bl	8007510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80045ba:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045bc:	48ad      	ldr	r0, [pc, #692]	; (8004874 <main+0x378>)
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80045be:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80045c2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045c4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 80045c6:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c8:	f002 ffa2 	bl	8007510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80045cc:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ce:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80045d0:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d2:	a907      	add	r1, sp, #28
 80045d4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80045d6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045d8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 80045da:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045dc:	f002 ff98 	bl	8007510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80045e0:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80045e4:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e6:	a907      	add	r1, sp, #28
 80045e8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80045ea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045ec:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f0:	f002 ff8e 	bl	8007510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 80045f4:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045f6:	489d      	ldr	r0, [pc, #628]	; (800486c <main+0x370>)
 80045f8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 80045fa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045fc:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fe:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004600:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004602:	f002 ff85 	bl	8007510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8004606:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004608:	4899      	ldr	r0, [pc, #612]	; (8004870 <main+0x374>)
 800460a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 800460c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800460e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004612:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004614:	f002 ff7c 	bl	8007510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8004618:	9707      	str	r7, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 800461a:	270c      	movs	r7, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800461c:	4895      	ldr	r0, [pc, #596]	; (8004874 <main+0x378>)
 800461e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004620:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004624:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004626:	f002 ff73 	bl	8007510 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800462a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800462c:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800462e:	4333      	orrs	r3, r6
 8004630:	63ab      	str	r3, [r5, #56]	; 0x38
 8004632:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8004634:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004636:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8004638:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800463e:	f002 fd55 	bl	80070ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004642:	2009      	movs	r0, #9
 8004644:	f002 fd7c 	bl	8007140 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8004648:	0022      	movs	r2, r4
 800464a:	2103      	movs	r1, #3
 800464c:	200a      	movs	r0, #10
 800464e:	f002 fd4d 	bl	80070ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004652:	200a      	movs	r0, #10
 8004654:	f002 fd74 	bl	8007140 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 8004658:	0022      	movs	r2, r4
 800465a:	2103      	movs	r1, #3
 800465c:	200b      	movs	r0, #11
 800465e:	f002 fd45 	bl	80070ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8004662:	200b      	movs	r0, #11
 8004664:	f002 fd6c 	bl	8007140 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8004668:	003a      	movs	r2, r7
 800466a:	0021      	movs	r1, r4
 800466c:	a807      	add	r0, sp, #28
 800466e:	f008 fdd5 	bl	800d21c <memset>
  hadc1.Instance = ADC1;
 8004672:	4d81      	ldr	r5, [pc, #516]	; (8004878 <main+0x37c>)
 8004674:	4b81      	ldr	r3, [pc, #516]	; (800487c <main+0x380>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004676:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 8004678:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	05db      	lsls	r3, r3, #23
 800467e:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	039b      	lsls	r3, r3, #14
 8004684:	612b      	str	r3, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004686:	19ab      	adds	r3, r5, r6
 8004688:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800468a:	002b      	movs	r3, r5
 800468c:	332c      	adds	r3, #44	; 0x2c
 800468e:	701c      	strb	r4, [r3, #0]
  hadc1.Init.OversamplingMode = DISABLE;
 8004690:	002b      	movs	r3, r5
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004692:	0028      	movs	r0, r5
  hadc1.Init.OversamplingMode = DISABLE;
 8004694:	333c      	adds	r3, #60	; 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004696:	832c      	strh	r4, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004698:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800469a:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800469c:	616a      	str	r2, [r5, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800469e:	76ac      	strb	r4, [r5, #26]
  hadc1.Init.NbrOfConversion = 4;
 80046a0:	61ea      	str	r2, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046a2:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046a4:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80046a6:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80046a8:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80046aa:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80046ac:	701c      	strb	r4, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80046ae:	64ec      	str	r4, [r5, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046b0:	f002 f9e6 	bl	8006a80 <HAL_ADC_Init>
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d001      	beq.n	80046bc <main+0x1c0>
 80046b8:	b672      	cpsid	i
  while (1)
 80046ba:	e7fe      	b.n	80046ba <main+0x1be>
  sConfig.Channel = ADC_CHANNEL_1;
 80046bc:	4b70      	ldr	r3, [pc, #448]	; (8004880 <main+0x384>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80046be:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.Channel = ADC_CHANNEL_1;
 80046c0:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80046c2:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046c4:	0028      	movs	r0, r5
 80046c6:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80046c8:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046ca:	f002 fb43 	bl	8006d54 <HAL_ADC_ConfigChannel>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d001      	beq.n	80046d6 <main+0x1da>
 80046d2:	b672      	cpsid	i
  while (1)
 80046d4:	e7fe      	b.n	80046d4 <main+0x1d8>
  sConfig.Channel = ADC_CHANNEL_9;
 80046d6:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <main+0x388>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046d8:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 80046da:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80046dc:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046de:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80046e0:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046e2:	f002 fb37 	bl	8006d54 <HAL_ADC_ConfigChannel>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d001      	beq.n	80046ee <main+0x1f2>
 80046ea:	b672      	cpsid	i
  while (1)
 80046ec:	e7fe      	b.n	80046ec <main+0x1f0>
  sConfig.Channel = ADC_CHANNEL_11;
 80046ee:	4b66      	ldr	r3, [pc, #408]	; (8004888 <main+0x38c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046f0:	0028      	movs	r0, r5
 80046f2:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_11;
 80046f4:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80046f6:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046f8:	f002 fb2c 	bl	8006d54 <HAL_ADC_ConfigChannel>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d001      	beq.n	8004704 <main+0x208>
 8004700:	b672      	cpsid	i
  while (1)
 8004702:	e7fe      	b.n	8004702 <main+0x206>
  hi2c1.Instance = I2C1;
 8004704:	4c61      	ldr	r4, [pc, #388]	; (800488c <main+0x390>)
 8004706:	4b62      	ldr	r3, [pc, #392]	; (8004890 <main+0x394>)
  hi2c1.Init.OwnAddress1 = 0;
 8004708:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 800470a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800470c:	4b61      	ldr	r3, [pc, #388]	; (8004894 <main+0x398>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800470e:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004710:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004712:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004714:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004716:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004718:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000E14;
 800471a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800471c:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800471e:	f003 f8dd 	bl	80078dc <HAL_I2C_Init>
 8004722:	1e01      	subs	r1, r0, #0
 8004724:	d001      	beq.n	800472a <main+0x22e>
 8004726:	b672      	cpsid	i
  while (1)
 8004728:	e7fe      	b.n	8004728 <main+0x22c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800472a:	0020      	movs	r0, r4
 800472c:	f003 faf4 	bl	8007d18 <HAL_I2CEx_ConfigAnalogFilter>
 8004730:	1e01      	subs	r1, r0, #0
 8004732:	d001      	beq.n	8004738 <main+0x23c>
 8004734:	b672      	cpsid	i
  while (1)
 8004736:	e7fe      	b.n	8004736 <main+0x23a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004738:	0020      	movs	r0, r4
 800473a:	f003 fb13 	bl	8007d64 <HAL_I2CEx_ConfigDigitalFilter>
 800473e:	1e03      	subs	r3, r0, #0
 8004740:	d001      	beq.n	8004746 <main+0x24a>
 8004742:	b672      	cpsid	i
  while (1)
 8004744:	e7fe      	b.n	8004744 <main+0x248>
  hspi1.Instance = SPI1;
 8004746:	4854      	ldr	r0, [pc, #336]	; (8004898 <main+0x39c>)
 8004748:	4a54      	ldr	r2, [pc, #336]	; (800489c <main+0x3a0>)
  hspi1.Init.CRCPolynomial = 7;
 800474a:	2107      	movs	r1, #7
  hspi1.Instance = SPI1;
 800474c:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800474e:	2282      	movs	r2, #130	; 0x82
 8004750:	0052      	lsls	r2, r2, #1
 8004752:	6042      	str	r2, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004754:	22e0      	movs	r2, #224	; 0xe0
 8004756:	00d2      	lsls	r2, r2, #3
 8004758:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	0092      	lsls	r2, r2, #2
 800475e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004760:	3af9      	subs	r2, #249	; 0xf9
 8004762:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004764:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004766:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004768:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800476a:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800476c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800476e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004770:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004772:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004774:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004776:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004778:	f004 f81e 	bl	80087b8 <HAL_SPI_Init>
 800477c:	1e05      	subs	r5, r0, #0
 800477e:	d001      	beq.n	8004784 <main+0x288>
 8004780:	b672      	cpsid	i
  while (1)
 8004782:	e7fe      	b.n	8004782 <main+0x286>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004784:	0001      	movs	r1, r0
 8004786:	003a      	movs	r2, r7
 8004788:	a807      	add	r0, sp, #28
 800478a:	f008 fd47 	bl	800d21c <memset>
  htim6.Instance = TIM6;
 800478e:	4c44      	ldr	r4, [pc, #272]	; (80048a0 <main+0x3a4>)
 8004790:	4b44      	ldr	r3, [pc, #272]	; (80048a4 <main+0x3a8>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004792:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 8004794:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 8000-1;
 8004796:	4b44      	ldr	r3, [pc, #272]	; (80048a8 <main+0x3ac>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004798:	60a5      	str	r5, [r4, #8]
  htim6.Init.Prescaler = 8000-1;
 800479a:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 500-1;
 800479c:	23f4      	movs	r3, #244	; 0xf4
 800479e:	33ff      	adds	r3, #255	; 0xff
 80047a0:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047a2:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80047a4:	f004 fb76 	bl	8008e94 <HAL_TIM_Base_Init>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d001      	beq.n	80047b0 <main+0x2b4>
 80047ac:	b672      	cpsid	i
  while (1)
 80047ae:	e7fe      	b.n	80047ae <main+0x2b2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b0:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047b2:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80047b4:	a907      	add	r1, sp, #28
 80047b6:	0020      	movs	r0, r4
 80047b8:	f004 fb96 	bl	8008ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d001      	beq.n	80047c4 <main+0x2c8>
 80047c0:	b672      	cpsid	i
  while (1)
 80047c2:	e7fe      	b.n	80047c2 <main+0x2c6>
  huart1.Instance = USART1;
 80047c4:	4c39      	ldr	r4, [pc, #228]	; (80048ac <main+0x3b0>)
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <main+0x3b4>)
  huart1.Init.BaudRate = 9600;
 80047c8:	2696      	movs	r6, #150	; 0x96
  huart1.Instance = USART1;
 80047ca:	6023      	str	r3, [r4, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047cc:	250c      	movs	r5, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047ce:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047d0:	0020      	movs	r0, r4
  huart1.Init.BaudRate = 9600;
 80047d2:	01b6      	lsls	r6, r6, #6
 80047d4:	6066      	str	r6, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047d6:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047d8:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047da:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047dc:	6165      	str	r5, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047de:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047e0:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047e2:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047e4:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047e6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047e8:	f005 f8f0 	bl	80099cc <HAL_UART_Init>
 80047ec:	1e01      	subs	r1, r0, #0
 80047ee:	d001      	beq.n	80047f4 <main+0x2f8>
 80047f0:	b672      	cpsid	i
  while (1)
 80047f2:	e7fe      	b.n	80047f2 <main+0x2f6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047f4:	0020      	movs	r0, r4
 80047f6:	f005 f9eb 	bl	8009bd0 <HAL_UARTEx_SetTxFifoThreshold>
 80047fa:	1e01      	subs	r1, r0, #0
 80047fc:	d001      	beq.n	8004802 <main+0x306>
 80047fe:	b672      	cpsid	i
  while (1)
 8004800:	e7fe      	b.n	8004800 <main+0x304>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004802:	0020      	movs	r0, r4
 8004804:	f005 fa04 	bl	8009c10 <HAL_UARTEx_SetRxFifoThreshold>
 8004808:	2800      	cmp	r0, #0
 800480a:	d001      	beq.n	8004810 <main+0x314>
 800480c:	b672      	cpsid	i
  while (1)
 800480e:	e7fe      	b.n	800480e <main+0x312>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004810:	0020      	movs	r0, r4
 8004812:	f005 f9bf 	bl	8009b94 <HAL_UARTEx_DisableFifoMode>
 8004816:	2800      	cmp	r0, #0
 8004818:	d001      	beq.n	800481e <main+0x322>
 800481a:	b672      	cpsid	i
  while (1)
 800481c:	e7fe      	b.n	800481c <main+0x320>
  huart2.Instance = USART2;
 800481e:	4c25      	ldr	r4, [pc, #148]	; (80048b4 <main+0x3b8>)
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <main+0x3bc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004822:	60a0      	str	r0, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004824:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004826:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004828:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800482a:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800482c:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800482e:	6260      	str	r0, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004830:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004832:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 8004834:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 8004836:	6066      	str	r6, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004838:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800483a:	f005 f8c7 	bl	80099cc <HAL_UART_Init>
 800483e:	1e01      	subs	r1, r0, #0
 8004840:	d001      	beq.n	8004846 <main+0x34a>
 8004842:	b672      	cpsid	i
  while (1)
 8004844:	e7fe      	b.n	8004844 <main+0x348>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004846:	0020      	movs	r0, r4
 8004848:	f005 f9c2 	bl	8009bd0 <HAL_UARTEx_SetTxFifoThreshold>
 800484c:	1e01      	subs	r1, r0, #0
 800484e:	d001      	beq.n	8004854 <main+0x358>
 8004850:	b672      	cpsid	i
  while (1)
 8004852:	e7fe      	b.n	8004852 <main+0x356>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004854:	0020      	movs	r0, r4
 8004856:	f005 f9db 	bl	8009c10 <HAL_UARTEx_SetRxFifoThreshold>
 800485a:	2800      	cmp	r0, #0
 800485c:	d02e      	beq.n	80048bc <main+0x3c0>
 800485e:	b672      	cpsid	i
  while (1)
 8004860:	e7fe      	b.n	8004860 <main+0x364>
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	40021000 	.word	0x40021000
 8004868:	00008010 	.word	0x00008010
 800486c:	50000800 	.word	0x50000800
 8004870:	50000c00 	.word	0x50000c00
 8004874:	50000400 	.word	0x50000400
 8004878:	20003a18 	.word	0x20003a18
 800487c:	40012400 	.word	0x40012400
 8004880:	04000002 	.word	0x04000002
 8004884:	24000200 	.word	0x24000200
 8004888:	2c000800 	.word	0x2c000800
 800488c:	20003bec 	.word	0x20003bec
 8004890:	40005400 	.word	0x40005400
 8004894:	00000e14 	.word	0x00000e14
 8004898:	20003c40 	.word	0x20003c40
 800489c:	40013000 	.word	0x40013000
 80048a0:	20003ca4 	.word	0x20003ca4
 80048a4:	40001000 	.word	0x40001000
 80048a8:	00001f3f 	.word	0x00001f3f
 80048ac:	20003cf0 	.word	0x20003cf0
 80048b0:	40013800 	.word	0x40013800
 80048b4:	20003d84 	.word	0x20003d84
 80048b8:	40004400 	.word	0x40004400
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80048bc:	0020      	movs	r0, r4
 80048be:	f005 f969 	bl	8009b94 <HAL_UARTEx_DisableFifoMode>
 80048c2:	1e03      	subs	r3, r0, #0
 80048c4:	d001      	beq.n	80048ca <main+0x3ce>
 80048c6:	b672      	cpsid	i
  while (1)
 80048c8:	e7fe      	b.n	80048c8 <main+0x3cc>
  huart3.Instance = USART3;
 80048ca:	481a      	ldr	r0, [pc, #104]	; (8004934 <main+0x438>)
 80048cc:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <main+0x43c>)
  huart3.Init.BaudRate = 9600;
 80048ce:	6046      	str	r6, [r0, #4]
  huart3.Instance = USART3;
 80048d0:	6002      	str	r2, [r0, #0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048d2:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048d4:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048d6:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048d8:	6145      	str	r5, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048da:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048dc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048de:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048e0:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048e2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048e4:	f005 f872 	bl	80099cc <HAL_UART_Init>
 80048e8:	1e04      	subs	r4, r0, #0
 80048ea:	d001      	beq.n	80048f0 <main+0x3f4>
 80048ec:	b672      	cpsid	i
  while (1)
 80048ee:	e7fe      	b.n	80048ee <main+0x3f2>
  osKernelInitialize();
 80048f0:	f005 f9bc 	bl	8009c6c <osKernelInitialize>
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 80048f4:	2102      	movs	r1, #2
 80048f6:	4a11      	ldr	r2, [pc, #68]	; (800493c <main+0x440>)
 80048f8:	2010      	movs	r0, #16
 80048fa:	f005 fa47 	bl	8009d8c <osMessageQueueNew>
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <main+0x444>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004900:	0021      	movs	r1, r4
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8004902:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004904:	4a0f      	ldr	r2, [pc, #60]	; (8004944 <main+0x448>)
 8004906:	4810      	ldr	r0, [pc, #64]	; (8004948 <main+0x44c>)
 8004908:	f005 f9e0 	bl	8009ccc <osThreadNew>
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <main+0x450>)
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 800490e:	0021      	movs	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004910:	6018      	str	r0, [r3, #0]
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8004912:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <main+0x454>)
 8004914:	480f      	ldr	r0, [pc, #60]	; (8004954 <main+0x458>)
 8004916:	f005 f9d9 	bl	8009ccc <osThreadNew>
 800491a:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <main+0x45c>)
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 800491c:	0021      	movs	r1, r4
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 800491e:	6018      	str	r0, [r3, #0]
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8004920:	4a0e      	ldr	r2, [pc, #56]	; (800495c <main+0x460>)
 8004922:	480f      	ldr	r0, [pc, #60]	; (8004960 <main+0x464>)
 8004924:	f005 f9d2 	bl	8009ccc <osThreadNew>
 8004928:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <main+0x468>)
 800492a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800492c:	f005 f9b0 	bl	8009c90 <osKernelStart>
  while (1)
 8004930:	e7fe      	b.n	8004930 <main+0x434>
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	20003e18 	.word	0x20003e18
 8004938:	40004800 	.word	0x40004800
 800493c:	08011e04 	.word	0x08011e04
 8004940:	20003f04 	.word	0x20003f04
 8004944:	08011de0 	.word	0x08011de0
 8004948:	080061b1 	.word	0x080061b1
 800494c:	20003584 	.word	0x20003584
 8004950:	08011d94 	.word	0x08011d94
 8004954:	080033e9 	.word	0x080033e9
 8004958:	20000540 	.word	0x20000540
 800495c:	08011dbc 	.word	0x08011dbc
 8004960:	080035c9 	.word	0x080035c9
 8004964:	200033b8 	.word	0x200033b8

08004968 <timedWork>:
void timedWork(){
 8004968:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 800496a:	2104      	movs	r1, #4
 800496c:	4807      	ldr	r0, [pc, #28]	; (800498c <timedWork+0x24>)
 800496e:	f002 fe8d 	bl	800768c <HAL_GPIO_TogglePin>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8004972:	4c07      	ldr	r4, [pc, #28]	; (8004990 <timedWork+0x28>)
 8004974:	4d07      	ldr	r5, [pc, #28]	; (8004994 <timedWork+0x2c>)
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <timedWork+0x1a>
 800497c:	f7ff fc62 	bl	8004244 <detectAcc>
 8004980:	6028      	str	r0, [r5, #0]
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 8004982:	682b      	ldr	r3, [r5, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	dd00      	ble.n	800498a <timedWork+0x22>
 8004988:	6023      	str	r3, [r4, #0]
}
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	50000c00 	.word	0x50000c00
 8004990:	2000031c 	.word	0x2000031c
 8004994:	20000318 	.word	0x20000318

08004998 <stor>:
float stor(const char* str) {
 8004998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    float sign = *str == '-' ? str++, -1 : 1;
 800499a:	7803      	ldrb	r3, [r0, #0]
float stor(const char* str) {
 800499c:	0006      	movs	r6, r0
    float sign = *str == '-' ? str++, -1 : 1;
 800499e:	2b2d      	cmp	r3, #45	; 0x2d
 80049a0:	d141      	bne.n	8004a26 <stor+0x8e>
 80049a2:	4f39      	ldr	r7, [pc, #228]	; (8004a88 <stor+0xf0>)
 80049a4:	3601      	adds	r6, #1
    float result = 0;
 80049a6:	2400      	movs	r4, #0
    while (*str >= '0' && *str <= '9') {
 80049a8:	7833      	ldrb	r3, [r6, #0]
 80049aa:	001d      	movs	r5, r3
 80049ac:	3d30      	subs	r5, #48	; 0x30
 80049ae:	b2ea      	uxtb	r2, r5
 80049b0:	2a09      	cmp	r2, #9
 80049b2:	d93b      	bls.n	8004a2c <stor+0x94>
    if (*str == ',' || *str == '.') {
 80049b4:	2202      	movs	r2, #2
 80049b6:	4393      	bics	r3, r2
 80049b8:	2b2c      	cmp	r3, #44	; 0x2c
 80049ba:	d106      	bne.n	80049ca <stor+0x32>
        float multiplier = 0.1;
 80049bc:	4d33      	ldr	r5, [pc, #204]	; (8004a8c <stor+0xf4>)
        str++;
 80049be:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 80049c0:	7830      	ldrb	r0, [r6, #0]
 80049c2:	3830      	subs	r0, #48	; 0x30
 80049c4:	b2c3      	uxtb	r3, r0
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	d93e      	bls.n	8004a48 <stor+0xb0>
    result *= sign;
 80049ca:	1c20      	adds	r0, r4, #0
 80049cc:	1c39      	adds	r1, r7, #0
 80049ce:	f7fc f989 	bl	8000ce4 <__aeabi_fmul>
    if (*str == 'e' || *str == 'E') {
 80049d2:	2220      	movs	r2, #32
 80049d4:	7833      	ldrb	r3, [r6, #0]
    result *= sign;
 80049d6:	1c04      	adds	r4, r0, #0
    if (*str == 'e' || *str == 'E') {
 80049d8:	4393      	bics	r3, r2
 80049da:	2b45      	cmp	r3, #69	; 0x45
 80049dc:	d121      	bne.n	8004a22 <stor+0x8a>
        float powerer = *str == '-'? str++, 0.1 : 10;
 80049de:	7873      	ldrb	r3, [r6, #1]
 80049e0:	2b2d      	cmp	r3, #45	; 0x2d
 80049e2:	d042      	beq.n	8004a6a <stor+0xd2>
 80049e4:	4d2a      	ldr	r5, [pc, #168]	; (8004a90 <stor+0xf8>)
        str++;
 80049e6:	3601      	adds	r6, #1
        float power = 0;
 80049e8:	2000      	movs	r0, #0
        while (*str >= '0' && *str <= '9') {
 80049ea:	7837      	ldrb	r7, [r6, #0]
 80049ec:	3f30      	subs	r7, #48	; 0x30
 80049ee:	b2fb      	uxtb	r3, r7
 80049f0:	2b09      	cmp	r3, #9
 80049f2:	d93d      	bls.n	8004a70 <stor+0xd8>
        result *= pow(powerer, power);
 80049f4:	f7fe fb66 	bl	80030c4 <__aeabi_f2d>
 80049f8:	0006      	movs	r6, r0
 80049fa:	000f      	movs	r7, r1
 80049fc:	1c28      	adds	r0, r5, #0
 80049fe:	f7fe fb61 	bl	80030c4 <__aeabi_f2d>
 8004a02:	0032      	movs	r2, r6
 8004a04:	003b      	movs	r3, r7
 8004a06:	f00b fa85 	bl	800ff14 <pow>
 8004a0a:	0006      	movs	r6, r0
 8004a0c:	000f      	movs	r7, r1
 8004a0e:	1c20      	adds	r0, r4, #0
 8004a10:	f7fe fb58 	bl	80030c4 <__aeabi_f2d>
 8004a14:	0032      	movs	r2, r6
 8004a16:	003b      	movs	r3, r7
 8004a18:	f7fd fc66 	bl	80022e8 <__aeabi_dmul>
 8004a1c:	f7fe fb9a 	bl	8003154 <__aeabi_d2f>
 8004a20:	1c04      	adds	r4, r0, #0
}
 8004a22:	1c20      	adds	r0, r4, #0
 8004a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    float sign = *str == '-' ? str++, -1 : 1;
 8004a26:	27fe      	movs	r7, #254	; 0xfe
 8004a28:	05bf      	lsls	r7, r7, #22
 8004a2a:	e7bc      	b.n	80049a6 <stor+0xe>
        result *= 10;
 8004a2c:	4918      	ldr	r1, [pc, #96]	; (8004a90 <stor+0xf8>)
 8004a2e:	1c20      	adds	r0, r4, #0
 8004a30:	f7fc f958 	bl	8000ce4 <__aeabi_fmul>
 8004a34:	1c04      	adds	r4, r0, #0
        result += *str - '0';
 8004a36:	0028      	movs	r0, r5
 8004a38:	f7fc fc62 	bl	8001300 <__aeabi_i2f>
 8004a3c:	1c21      	adds	r1, r4, #0
 8004a3e:	f7fb fde7 	bl	8000610 <__aeabi_fadd>
        str++;
 8004a42:	3601      	adds	r6, #1
        result += *str - '0';
 8004a44:	1c04      	adds	r4, r0, #0
        str++;
 8004a46:	e7af      	b.n	80049a8 <stor+0x10>
            result += (*str - '0') * multiplier;
 8004a48:	f7fc fc5a 	bl	8001300 <__aeabi_i2f>
 8004a4c:	1c29      	adds	r1, r5, #0
 8004a4e:	f7fc f949 	bl	8000ce4 <__aeabi_fmul>
 8004a52:	1c01      	adds	r1, r0, #0
 8004a54:	1c20      	adds	r0, r4, #0
 8004a56:	f7fb fddb 	bl	8000610 <__aeabi_fadd>
            multiplier /= 10;
 8004a5a:	490d      	ldr	r1, [pc, #52]	; (8004a90 <stor+0xf8>)
            result += (*str - '0') * multiplier;
 8004a5c:	1c04      	adds	r4, r0, #0
            multiplier /= 10;
 8004a5e:	1c28      	adds	r0, r5, #0
 8004a60:	f7fb ff76 	bl	8000950 <__aeabi_fdiv>
            str++;
 8004a64:	3601      	adds	r6, #1
            multiplier /= 10;
 8004a66:	1c05      	adds	r5, r0, #0
            str++;
 8004a68:	e7aa      	b.n	80049c0 <stor+0x28>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8004a6a:	4d08      	ldr	r5, [pc, #32]	; (8004a8c <stor+0xf4>)
 8004a6c:	3602      	adds	r6, #2
 8004a6e:	e7bb      	b.n	80049e8 <stor+0x50>
            power *= 10;
 8004a70:	4907      	ldr	r1, [pc, #28]	; (8004a90 <stor+0xf8>)
 8004a72:	f7fc f937 	bl	8000ce4 <__aeabi_fmul>
 8004a76:	9001      	str	r0, [sp, #4]
            power += *str - '0';
 8004a78:	0038      	movs	r0, r7
 8004a7a:	f7fc fc41 	bl	8001300 <__aeabi_i2f>
 8004a7e:	9901      	ldr	r1, [sp, #4]
 8004a80:	f7fb fdc6 	bl	8000610 <__aeabi_fadd>
            str++;
 8004a84:	3601      	adds	r6, #1
 8004a86:	e7b0      	b.n	80049ea <stor+0x52>
 8004a88:	bf800000 	.word	0xbf800000
 8004a8c:	3dcccccd 	.word	0x3dcccccd
 8004a90:	41200000 	.word	0x41200000

08004a94 <getGNRMC>:
void getGNRMC(const char * ptra){
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8004a96:	4f37      	ldr	r7, [pc, #220]	; (8004b74 <getGNRMC+0xe0>)
	int i=0;
 8004a98:	2500      	movs	r5, #0
    char *token = strtok((char *)ptra, ",");
 8004a9a:	0039      	movs	r1, r7
 8004a9c:	f008 fc06 	bl	800d2ac <strtok>
 8004aa0:	0004      	movs	r4, r0
    while( token != NULL ) {
 8004aa2:	2c00      	cmp	r4, #0
 8004aa4:	d100      	bne.n	8004aa8 <getGNRMC+0x14>
}
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  	    if(i==1){ //Getting time
 8004aa8:	2d01      	cmp	r5, #1
 8004aaa:	d10c      	bne.n	8004ac6 <getGNRMC+0x32>
  	    	strncpy(GPSInfo.time,token,6);
 8004aac:	4832      	ldr	r0, [pc, #200]	; (8004b78 <getGNRMC+0xe4>)
 8004aae:	2206      	movs	r2, #6
 8004ab0:	0021      	movs	r1, r4
 8004ab2:	302e      	adds	r0, #46	; 0x2e
 8004ab4:	f008 fbe6 	bl	800d284 <strncpy>
  	    token = strtok(NULL,",");
 8004ab8:	0039      	movs	r1, r7
 8004aba:	2000      	movs	r0, #0
 8004abc:	f008 fbf6 	bl	800d2ac <strtok>
        i++;
 8004ac0:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8004ac2:	0004      	movs	r4, r0
        i++;
 8004ac4:	e7ed      	b.n	8004aa2 <getGNRMC+0xe>
  	    if(i==10){ //Getting GPS status
 8004ac6:	2d0a      	cmp	r5, #10
 8004ac8:	d009      	beq.n	8004ade <getGNRMC+0x4a>
  	    if(i==3){ //Getting Latitude
 8004aca:	2d03      	cmp	r5, #3
 8004acc:	d110      	bne.n	8004af0 <getGNRMC+0x5c>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8004ace:	0020      	movs	r0, r4
 8004ad0:	f7ff ff62 	bl	8004998 <stor>
 8004ad4:	f7ff fc62 	bl	800439c <DegreeDecimalConvert>
 8004ad8:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <getGNRMC+0xe4>)
 8004ada:	6018      	str	r0, [r3, #0]
  	    if(i==6){ //Getting Longitude ind
 8004adc:	e7ec      	b.n	8004ab8 <getGNRMC+0x24>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8004ade:	214e      	movs	r1, #78	; 0x4e
 8004ae0:	0020      	movs	r0, r4
 8004ae2:	f008 fbb0 	bl	800d246 <strchr>
 8004ae6:	4242      	negs	r2, r0
 8004ae8:	4150      	adcs	r0, r2
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <getGNRMC+0xe4>)
 8004aec:	61d8      	str	r0, [r3, #28]
  	    if(i==5){ //Getting Longitude
 8004aee:	e7e3      	b.n	8004ab8 <getGNRMC+0x24>
  	    if(i==4){ //Getting Latitude ind
 8004af0:	2d04      	cmp	r5, #4
 8004af2:	d01d      	beq.n	8004b30 <getGNRMC+0x9c>
  	    if(i==5){ //Getting Longitude
 8004af4:	2d05      	cmp	r5, #5
 8004af6:	d021      	beq.n	8004b3c <getGNRMC+0xa8>
  	    if(i==6){ //Getting Longitude ind
 8004af8:	2d06      	cmp	r5, #6
 8004afa:	d027      	beq.n	8004b4c <getGNRMC+0xb8>
  	    if(i==9){ //Getting Date
 8004afc:	2d09      	cmp	r5, #9
 8004afe:	d128      	bne.n	8004b52 <getGNRMC+0xbe>
  			memset(dd,0,10);
 8004b00:	4e1e      	ldr	r6, [pc, #120]	; (8004b7c <getGNRMC+0xe8>)
 8004b02:	220a      	movs	r2, #10
 8004b04:	2100      	movs	r1, #0
 8004b06:	0030      	movs	r0, r6
 8004b08:	f008 fb88 	bl	800d21c <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	5ce2      	ldrb	r2, [r4, r3]
 8004b10:	54f2      	strb	r2, [r6, r3]
 8004b12:	3301      	adds	r3, #1
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d1fa      	bne.n	8004b0e <getGNRMC+0x7a>
  	        dd[4]='2';
 8004b18:	332e      	adds	r3, #46	; 0x2e
 8004b1a:	7133      	strb	r3, [r6, #4]
  	        dd[5]='0';
 8004b1c:	3b02      	subs	r3, #2
 8004b1e:	7173      	strb	r3, [r6, #5]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8004b20:	7923      	ldrb	r3, [r4, #4]
  	        strcpy(GPSInfo.date,dd);
 8004b22:	4815      	ldr	r0, [pc, #84]	; (8004b78 <getGNRMC+0xe4>)
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8004b24:	71b3      	strb	r3, [r6, #6]
 8004b26:	7963      	ldrb	r3, [r4, #5]
  	        strcpy(GPSInfo.date,dd);
 8004b28:	0031      	movs	r1, r6
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8004b2a:	71f3      	strb	r3, [r6, #7]
  	        strcpy(GPSInfo.date,dd);
 8004b2c:	303d      	adds	r0, #61	; 0x3d
 8004b2e:	e002      	b.n	8004b36 <getGNRMC+0xa2>
  	        strcpy(GPSInfo.latD,token);
 8004b30:	4811      	ldr	r0, [pc, #68]	; (8004b78 <getGNRMC+0xe4>)
 8004b32:	3028      	adds	r0, #40	; 0x28
  	    	strcpy(GPSInfo.lonD,token);
 8004b34:	0021      	movs	r1, r4
  	        strcpy(GPSInfo.date,dd);
 8004b36:	f008 fd26 	bl	800d586 <strcpy>
  	    if(i==8){ //Getting Course
 8004b3a:	e7bd      	b.n	8004ab8 <getGNRMC+0x24>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8004b3c:	0020      	movs	r0, r4
 8004b3e:	f7ff ff2b 	bl	8004998 <stor>
 8004b42:	f7ff fc2b 	bl	800439c <DegreeDecimalConvert>
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <getGNRMC+0xe4>)
 8004b48:	6058      	str	r0, [r3, #4]
  	    if(i==8){ //Getting Course
 8004b4a:	e7b5      	b.n	8004ab8 <getGNRMC+0x24>
  	    	strcpy(GPSInfo.lonD,token);
 8004b4c:	480a      	ldr	r0, [pc, #40]	; (8004b78 <getGNRMC+0xe4>)
 8004b4e:	302b      	adds	r0, #43	; 0x2b
 8004b50:	e7f0      	b.n	8004b34 <getGNRMC+0xa0>
  	    if(i==7){ //Getting Speed
 8004b52:	2d07      	cmp	r5, #7
 8004b54:	d105      	bne.n	8004b62 <getGNRMC+0xce>
  	        GPSInfo.speed=stor(token);
 8004b56:	0020      	movs	r0, r4
 8004b58:	f7ff ff1e 	bl	8004998 <stor>
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <getGNRMC+0xe4>)
 8004b5e:	6198      	str	r0, [r3, #24]
  	    if(i==8){ //Getting Course
 8004b60:	e7aa      	b.n	8004ab8 <getGNRMC+0x24>
 8004b62:	2d08      	cmp	r5, #8
 8004b64:	d1a8      	bne.n	8004ab8 <getGNRMC+0x24>
  	        GPSInfo.head=stor(token);
 8004b66:	0020      	movs	r0, r4
 8004b68:	f7ff ff16 	bl	8004998 <stor>
 8004b6c:	4b02      	ldr	r3, [pc, #8]	; (8004b78 <getGNRMC+0xe4>)
 8004b6e:	6158      	str	r0, [r3, #20]
 8004b70:	e7a2      	b.n	8004ab8 <getGNRMC+0x24>
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	08011c93 	.word	0x08011c93
 8004b78:	200004f4 	.word	0x200004f4
 8004b7c:	20003577 	.word	0x20003577

08004b80 <getGNGSA>:
void getGNGSA(const  char * ptra){
 8004b80:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8004b82:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <getGNGSA+0x38>)
	int i=0;
 8004b84:	2500      	movs	r5, #0
    char *token = strtok((char *)ptra, ",");
 8004b86:	0021      	movs	r1, r4
 8004b88:	f008 fb90 	bl	800d2ac <strtok>
    while( token != NULL ) {
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d100      	bne.n	8004b92 <getGNGSA+0x12>
}
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
        if(i==15){ //Getting PDOP
 8004b92:	2d0f      	cmp	r5, #15
 8004b94:	d109      	bne.n	8004baa <getGNGSA+0x2a>
    	    GPSInfo.pdop=stor(token);
 8004b96:	f7ff feff 	bl	8004998 <stor>
 8004b9a:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <getGNGSA+0x3c>)
 8004b9c:	6118      	str	r0, [r3, #16]
  	    token = strtok(NULL,",");
 8004b9e:	0021      	movs	r1, r4
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f008 fb83 	bl	800d2ac <strtok>
        i++;
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7f0      	b.n	8004b8c <getGNGSA+0xc>
    	if(i==16){ //Getting HDOP
 8004baa:	2d10      	cmp	r5, #16
 8004bac:	d1f7      	bne.n	8004b9e <getGNGSA+0x1e>
    	    GPSInfo.hdop=stor(token);
 8004bae:	f7ff fef3 	bl	8004998 <stor>
 8004bb2:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <getGNGSA+0x3c>)
 8004bb4:	60d8      	str	r0, [r3, #12]
 8004bb6:	e7f2      	b.n	8004b9e <getGNGSA+0x1e>
 8004bb8:	08011c93 	.word	0x08011c93
 8004bbc:	200004f4 	.word	0x200004f4

08004bc0 <getGNGGA>:
void getGNGGA(const  char * ptra){
 8004bc0:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8004bc2:	4c0d      	ldr	r4, [pc, #52]	; (8004bf8 <getGNGGA+0x38>)
	int i=0;
 8004bc4:	2500      	movs	r5, #0
    char *token = strtok((char *)ptra, ",");
 8004bc6:	0021      	movs	r1, r4
 8004bc8:	f008 fb70 	bl	800d2ac <strtok>
    while( token != NULL ) {
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d100      	bne.n	8004bd2 <getGNGGA+0x12>
}
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
    	if(i==7){ //Getting Satellites no
 8004bd2:	2d07      	cmp	r5, #7
 8004bd4:	d109      	bne.n	8004bea <getGNGGA+0x2a>
            GPSInfo.sat = atoi(token);
 8004bd6:	f006 fba5 	bl	800b324 <atoi>
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <getGNGGA+0x3c>)
 8004bdc:	6218      	str	r0, [r3, #32]
  	    token = strtok(NULL,",");
 8004bde:	0021      	movs	r1, r4
 8004be0:	2000      	movs	r0, #0
 8004be2:	f008 fb63 	bl	800d2ac <strtok>
        i++;
 8004be6:	3501      	adds	r5, #1
 8004be8:	e7f0      	b.n	8004bcc <getGNGGA+0xc>
    	if(i==9){ //Getting Saltitute
 8004bea:	2d09      	cmp	r5, #9
 8004bec:	d1f7      	bne.n	8004bde <getGNGGA+0x1e>
            GPSInfo.alt = stor(token);
 8004bee:	f7ff fed3 	bl	8004998 <stor>
 8004bf2:	4b02      	ldr	r3, [pc, #8]	; (8004bfc <getGNGGA+0x3c>)
 8004bf4:	6098      	str	r0, [r3, #8]
 8004bf6:	e7f2      	b.n	8004bde <getGNGGA+0x1e>
 8004bf8:	08011c93 	.word	0x08011c93
 8004bfc:	200004f4 	.word	0x200004f4

08004c00 <validateGPS>:
int validateGPS(const char * str){
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	0004      	movs	r4, r0
	int GPStyp=0;

	uint8_t checksum = 0;
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8004c04:	f7ff fc09 	bl	800441a <nmea_valid_checksum>
	        return 0;
 8004c08:	2500      	movs	r5, #0
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8004c0a:	0006      	movs	r6, r0
 8004c0c:	2801      	cmp	r0, #1
 8004c0e:	d10e      	bne.n	8004c2e <validateGPS+0x2e>
	    }
	    if(strlen(str)<4){return 0;}
 8004c10:	0020      	movs	r0, r4
 8004c12:	f7fb fa79 	bl	8000108 <strlen>
 8004c16:	2803      	cmp	r0, #3
 8004c18:	d909      	bls.n	8004c2e <validateGPS+0x2e>

	    if (strstr(str, "GNRMC") != NULL) {
 8004c1a:	0020      	movs	r0, r4
 8004c1c:	491b      	ldr	r1, [pc, #108]	; (8004c8c <validateGPS+0x8c>)
 8004c1e:	f008 fbad 	bl	800d37c <strstr>
 8004c22:	42a8      	cmp	r0, r5
 8004c24:	d005      	beq.n	8004c32 <validateGPS+0x32>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8004c26:	0020      	movs	r0, r4
 8004c28:	f7ff ff34 	bl	8004a94 <getGNRMC>
 8004c2c:	0035      	movs	r5, r6
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
	    	GPStyp=6;
	    }
    return(GPStyp);
}
 8004c2e:	0028      	movs	r0, r5
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
	    else if (strstr(str, "GNGGA") != NULL) {
 8004c32:	0020      	movs	r0, r4
 8004c34:	4916      	ldr	r1, [pc, #88]	; (8004c90 <validateGPS+0x90>)
 8004c36:	f008 fba1 	bl	800d37c <strstr>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d004      	beq.n	8004c48 <validateGPS+0x48>
	    	GPStyp=2; getGNGGA(str);
 8004c3e:	0020      	movs	r0, r4
 8004c40:	f7ff ffbe 	bl	8004bc0 <getGNGGA>
 8004c44:	2502      	movs	r5, #2
 8004c46:	e7f2      	b.n	8004c2e <validateGPS+0x2e>
	    else if (strstr(str, "GNGSA") != NULL) {
 8004c48:	0020      	movs	r0, r4
 8004c4a:	4912      	ldr	r1, [pc, #72]	; (8004c94 <validateGPS+0x94>)
 8004c4c:	f008 fb96 	bl	800d37c <strstr>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d004      	beq.n	8004c5e <validateGPS+0x5e>
	    	GPStyp=3;getGNGSA(str);
 8004c54:	0020      	movs	r0, r4
 8004c56:	f7ff ff93 	bl	8004b80 <getGNGSA>
 8004c5a:	2503      	movs	r5, #3
 8004c5c:	e7e7      	b.n	8004c2e <validateGPS+0x2e>
	    else if (strstr(str, "GNGSV") != NULL) {
 8004c5e:	0020      	movs	r0, r4
 8004c60:	490d      	ldr	r1, [pc, #52]	; (8004c98 <validateGPS+0x98>)
 8004c62:	f008 fb8b 	bl	800d37c <strstr>
	    	GPStyp=4;
 8004c66:	2504      	movs	r5, #4
	    else if (strstr(str, "GNGSV") != NULL) {
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d1e0      	bne.n	8004c2e <validateGPS+0x2e>
	    else if (strstr(str, "GNGLL") != NULL) {
 8004c6c:	0020      	movs	r0, r4
 8004c6e:	490b      	ldr	r1, [pc, #44]	; (8004c9c <validateGPS+0x9c>)
 8004c70:	f008 fb84 	bl	800d37c <strstr>
	    	GPStyp=5;
 8004c74:	3501      	adds	r5, #1
	    else if (strstr(str, "GNGLL") != NULL) {
 8004c76:	1e06      	subs	r6, r0, #0
 8004c78:	d1d9      	bne.n	8004c2e <validateGPS+0x2e>
	    else if (strstr(str, "GNVTG") != NULL) {
 8004c7a:	0020      	movs	r0, r4
 8004c7c:	4908      	ldr	r1, [pc, #32]	; (8004ca0 <validateGPS+0xa0>)
 8004c7e:	f008 fb7d 	bl	800d37c <strstr>
	        return 0;
 8004c82:	0035      	movs	r5, r6
	    else if (strstr(str, "GNVTG") != NULL) {
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d0d2      	beq.n	8004c2e <validateGPS+0x2e>
	    	GPStyp=6;
 8004c88:	3506      	adds	r5, #6
 8004c8a:	e7d0      	b.n	8004c2e <validateGPS+0x2e>
 8004c8c:	080111b7 	.word	0x080111b7
 8004c90:	080111bd 	.word	0x080111bd
 8004c94:	080111c3 	.word	0x080111c3
 8004c98:	080111c9 	.word	0x080111c9
 8004c9c:	080111cf 	.word	0x080111cf
 8004ca0:	080111d5 	.word	0x080111d5

08004ca4 <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8004ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	    //Debug_Tx(gpsData);
		int valid=0 ;
		if(strlen((char*)gpsData)>5){
 8004ca6:	4d0b      	ldr	r5, [pc, #44]	; (8004cd4 <ProcessGPS+0x30>)
 8004ca8:	0028      	movs	r0, r5
 8004caa:	f7fb fa2d 	bl	8000108 <strlen>
 8004cae:	2805      	cmp	r0, #5
 8004cb0:	d909      	bls.n	8004cc6 <ProcessGPS+0x22>

			char *tk= NULL;
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8004cb2:	4c09      	ldr	r4, [pc, #36]	; (8004cd8 <ProcessGPS+0x34>)
			char *tk= NULL;
 8004cb4:	2300      	movs	r3, #0
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8004cb6:	0021      	movs	r1, r4
 8004cb8:	0028      	movs	r0, r5
			char *tk= NULL;
 8004cba:	9301      	str	r3, [sp, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8004cbc:	aa01      	add	r2, sp, #4
			while( token != NULL ) {
				valid=valid+validateGPS(token);
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8004cbe:	f008 fb58 	bl	800d372 <strtok_r>
			while( token != NULL ) {
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d100      	bne.n	8004cc8 <ProcessGPS+0x24>
			}
			//free(token);
		}
}
 8004cc6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
				valid=valid+validateGPS(token);
 8004cc8:	f7ff ff9a 	bl	8004c00 <validateGPS>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8004ccc:	0021      	movs	r1, r4
 8004cce:	2000      	movs	r0, #0
 8004cd0:	aa01      	add	r2, sp, #4
 8004cd2:	e7f4      	b.n	8004cbe <ProcessGPS+0x1a>
 8004cd4:	20003594 	.word	0x20003594
 8004cd8:	08010fe9 	.word	0x08010fe9

08004cdc <HAL_UART_TxCpltCallback>:
}
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8004ce0:	b570      	push	{r4, r5, r6, lr}
	if(huart==&huart2){
 8004ce2:	4c16      	ldr	r4, [pc, #88]	; (8004d3c <HAL_UART_ErrorCallback+0x5c>)
 8004ce4:	42a0      	cmp	r0, r4
 8004ce6:	d119      	bne.n	8004d1c <HAL_UART_ErrorCallback+0x3c>
		if(dnlfile==0){
 8004ce8:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_UART_ErrorCallback+0x60>)
 8004cea:	6819      	ldr	r1, [r3, #0]
 8004cec:	2900      	cmp	r1, #0
 8004cee:	d114      	bne.n	8004d1a <HAL_UART_ErrorCallback+0x3a>
		if(DMAon==1){
 8004cf0:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <HAL_UART_ErrorCallback+0x64>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d110      	bne.n	8004d1a <HAL_UART_ErrorCallback+0x3a>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8004cf8:	4d13      	ldr	r5, [pc, #76]	; (8004d48 <HAL_UART_ErrorCallback+0x68>)
 8004cfa:	782b      	ldrb	r3, [r5, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_UART_ErrorCallback+0x28>
 8004d00:	0028      	movs	r0, r5
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <HAL_UART_ErrorCallback+0x6c>)
 8004d04:	f008 fa8a 	bl	800d21c <memset>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d08:	220c      	movs	r2, #12
 8004d0a:	6823      	ldr	r3, [r4, #0]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8004d0c:	0029      	movs	r1, r5
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d0e:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8004d10:	22e1      	movs	r2, #225	; 0xe1
 8004d12:	0020      	movs	r0, r4
 8004d14:	0092      	lsls	r2, r2, #2
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8004d16:	f004 fee3 	bl	8009ae0 <HAL_UART_Receive_DMA>
}
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
	if(huart==&huart1){
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <HAL_UART_ErrorCallback+0x70>)
 8004d1e:	4298      	cmp	r0, r3
 8004d20:	d1fb      	bne.n	8004d1a <HAL_UART_ErrorCallback+0x3a>
		if(DMAon==1){
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <HAL_UART_ErrorCallback+0x64>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	2a01      	cmp	r2, #1
 8004d28:	d1f7      	bne.n	8004d1a <HAL_UART_ErrorCallback+0x3a>
		GSMBuff[0]=0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	4909      	ldr	r1, [pc, #36]	; (8004d54 <HAL_UART_ErrorCallback+0x74>)
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d2e:	6805      	ldr	r5, [r0, #0]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d30:	6824      	ldr	r4, [r4, #0]
		GSMBuff[0]=0;
 8004d32:	700b      	strb	r3, [r1, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d34:	330c      	adds	r3, #12
 8004d36:	622b      	str	r3, [r5, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d38:	6223      	str	r3, [r4, #32]
 8004d3a:	e7ec      	b.n	8004d16 <HAL_UART_ErrorCallback+0x36>
 8004d3c:	20003d84 	.word	0x20003d84
 8004d40:	20003588 	.word	0x20003588
 8004d44:	20000094 	.word	0x20000094
 8004d48:	20003594 	.word	0x20003594
 8004d4c:	000003e7 	.word	0x000003e7
 8004d50:	20003cf0 	.word	0x20003cf0
 8004d54:	20000544 	.word	0x20000544

08004d58 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8004d58:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004d5a:	6802      	ldr	r2, [r0, #0]
{
 8004d5c:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8004d62:	f001 fe59 	bl	8006a18 <HAL_IncTick>
}
 8004d66:	bd10      	pop	{r4, pc}
 8004d68:	40012c00 	.word	0x40012c00

08004d6c <restartGSMuart>:
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4907      	ldr	r1, [pc, #28]	; (8004d8c <restartGSMuart+0x20>)
 8004d70:	b510      	push	{r4, lr}
 8004d72:	700b      	strb	r3, [r1, #0]
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <restartGSMuart+0x24>)
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d76:	4807      	ldr	r0, [pc, #28]	; (8004d94 <restartGSMuart+0x28>)
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	6213      	str	r3, [r2, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d7e:	6802      	ldr	r2, [r0, #0]
 8004d80:	6213      	str	r3, [r2, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8004d82:	2201      	movs	r2, #1
 8004d84:	f004 feac 	bl	8009ae0 <HAL_UART_Receive_DMA>
}
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	20000544 	.word	0x20000544
 8004d90:	20003d84 	.word	0x20003d84
 8004d94:	20003cf0 	.word	0x20003cf0

08004d98 <GetGSMReply>:
{
 8004d98:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(GSMReply, 0, 100);
 8004d9a:	4e46      	ldr	r6, [pc, #280]	; (8004eb4 <GetGSMReply+0x11c>)
{
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	9100      	str	r1, [sp, #0]
 8004da0:	9203      	str	r2, [sp, #12]
	memset(GSMReply, 0, 100);
 8004da2:	2100      	movs	r1, #0
 8004da4:	2264      	movs	r2, #100	; 0x64
 8004da6:	0030      	movs	r0, r6
{
 8004da8:	001f      	movs	r7, r3
	memset(GSMReply, 0, 100);
 8004daa:	f008 fa37 	bl	800d21c <memset>
	memset(GSMInData, 0, 1000);
 8004dae:	22fa      	movs	r2, #250	; 0xfa
 8004db0:	4c41      	ldr	r4, [pc, #260]	; (8004eb8 <GetGSMReply+0x120>)
 8004db2:	2100      	movs	r1, #0
 8004db4:	0092      	lsls	r2, r2, #2
 8004db6:	0020      	movs	r0, r4
 8004db8:	f008 fa30 	bl	800d21c <memset>
	int stT = HAL_GetTick();
 8004dbc:	f001 fe38 	bl	8006a30 <HAL_GetTick>
 8004dc0:	9002      	str	r0, [sp, #8]
	while (((HAL_GetTick() - stT) <= timeout))
 8004dc2:	f001 fe35 	bl	8006a30 <HAL_GetTick>
 8004dc6:	9b02      	ldr	r3, [sp, #8]
 8004dc8:	1ac0      	subs	r0, r0, r3
 8004dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dcc:	4298      	cmp	r0, r3
 8004dce:	d817      	bhi.n	8004e00 <GetGSMReply+0x68>
		HAL_Delay(70);
 8004dd0:	2046      	movs	r0, #70	; 0x46
 8004dd2:	f001 fe33 	bl	8006a3c <HAL_Delay>
		if (strlen(GSMData) > 0)
 8004dd6:	4939      	ldr	r1, [pc, #228]	; (8004ebc <GetGSMReply+0x124>)
 8004dd8:	780b      	ldrb	r3, [r1, #0]
 8004dda:	9301      	str	r3, [sp, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d05b      	beq.n	8004e98 <GetGSMReply+0x100>
			strcpy(GSMInData, GSMData);
 8004de0:	0020      	movs	r0, r4
 8004de2:	f008 fbd0 	bl	800d586 <strcpy>
			char *pq = strstr(GSMInData, finChar);
 8004de6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004de8:	0020      	movs	r0, r4
 8004dea:	f008 fac7 	bl	800d37c <strstr>
 8004dee:	1e01      	subs	r1, r0, #0
			if ((pq != NULL))
 8004df0:	d042      	beq.n	8004e78 <GetGSMReply+0xe0>
				if ((strlen(find) < 1))
 8004df2:	9b00      	ldr	r3, [sp, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d114      	bne.n	8004e24 <GetGSMReply+0x8c>
					strcpy(GSMReply, p);
 8004dfa:	0030      	movs	r0, r6
 8004dfc:	f008 fbc3 	bl	800d586 <strcpy>
	if (strlen(GSMReply) < 1)
 8004e00:	7833      	ldrb	r3, [r6, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d108      	bne.n	8004e18 <GetGSMReply+0x80>
		Debug_Tx("****");
 8004e06:	482e      	ldr	r0, [pc, #184]	; (8004ec0 <GetGSMReply+0x128>)
 8004e08:	f7fe fa94 	bl	8003334 <Debug_Tx>
		Debug_Tx(GSMInData);
 8004e0c:	0020      	movs	r0, r4
 8004e0e:	f7fe fa91 	bl	8003334 <Debug_Tx>
		Debug_Tx((char *)ErrorMsg);
 8004e12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e14:	f7fe fa8e 	bl	8003334 <Debug_Tx>
	HAL_Delay(100);
 8004e18:	2064      	movs	r0, #100	; 0x64
 8004e1a:	f001 fe0f 	bl	8006a3c <HAL_Delay>
}
 8004e1e:	0030      	movs	r0, r6
 8004e20:	b005      	add	sp, #20
 8004e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char *p = strstr(GSMInData, find);
 8004e24:	0020      	movs	r0, r4
 8004e26:	9900      	ldr	r1, [sp, #0]
 8004e28:	f008 faa8 	bl	800d37c <strstr>
				if ((strlen(LineEnd) < 1))
 8004e2c:	783b      	ldrb	r3, [r7, #0]
				char *p = strstr(GSMInData, find);
 8004e2e:	0005      	movs	r5, r0
				if ((strlen(LineEnd) < 1))
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <GetGSMReply+0xa0>
					strcpy(GSMReply, p);
 8004e34:	0029      	movs	r1, r5
 8004e36:	e7e0      	b.n	8004dfa <GetGSMReply+0x62>
					if ((strstr(GSMInData, LineEnd) != NULL))
 8004e38:	0039      	movs	r1, r7
 8004e3a:	0020      	movs	r0, r4
 8004e3c:	f008 fa9e 	bl	800d37c <strstr>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d015      	beq.n	8004e70 <GetGSMReply+0xd8>
						if ((strlen(p + gap) > strlen(LineEnd)))
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	18ed      	adds	r5, r5, r3
 8004e48:	0028      	movs	r0, r5
 8004e4a:	f7fb f95d 	bl	8000108 <strlen>
 8004e4e:	9001      	str	r0, [sp, #4]
 8004e50:	0038      	movs	r0, r7
 8004e52:	f7fb f959 	bl	8000108 <strlen>
 8004e56:	9b01      	ldr	r3, [sp, #4]
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	d909      	bls.n	8004e70 <GetGSMReply+0xd8>
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 8004e5c:	0028      	movs	r0, r5
 8004e5e:	2200      	movs	r2, #0
 8004e60:	0039      	movs	r1, r7
 8004e62:	f008 fa86 	bl	800d372 <strtok_r>
 8004e66:	0005      	movs	r5, r0
							if (strlen(p1) < 88)
 8004e68:	f7fb f94e 	bl	8000108 <strlen>
 8004e6c:	2857      	cmp	r0, #87	; 0x57
 8004e6e:	d9e1      	bls.n	8004e34 <GetGSMReply+0x9c>
			gsmER = 0;
 8004e70:	2200      	movs	r2, #0
 8004e72:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <GetGSMReply+0x12c>)
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e7a4      	b.n	8004dc2 <GetGSMReply+0x2a>
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 8004e78:	0020      	movs	r0, r4
 8004e7a:	4913      	ldr	r1, [pc, #76]	; (8004ec8 <GetGSMReply+0x130>)
 8004e7c:	f008 fa7e 	bl	800d37c <strstr>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d105      	bne.n	8004e90 <GetGSMReply+0xf8>
 8004e84:	0020      	movs	r0, r4
 8004e86:	4911      	ldr	r1, [pc, #68]	; (8004ecc <GetGSMReply+0x134>)
 8004e88:	f008 fa78 	bl	800d37c <strstr>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d0ef      	beq.n	8004e70 <GetGSMReply+0xd8>
					Debug_Tx("Err Found");
 8004e90:	480f      	ldr	r0, [pc, #60]	; (8004ed0 <GetGSMReply+0x138>)
 8004e92:	f7fe fa4f 	bl	8003334 <Debug_Tx>
					break;
 8004e96:	e7b3      	b.n	8004e00 <GetGSMReply+0x68>
			gsmER++;
 8004e98:	4d0a      	ldr	r5, [pc, #40]	; (8004ec4 <GetGSMReply+0x12c>)
 8004e9a:	682b      	ldr	r3, [r5, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	602b      	str	r3, [r5, #0]
			if (gsmER > 9)
 8004ea0:	2b09      	cmp	r3, #9
 8004ea2:	dc00      	bgt.n	8004ea6 <GetGSMReply+0x10e>
 8004ea4:	e78d      	b.n	8004dc2 <GetGSMReply+0x2a>
				RestartGSM();
 8004ea6:	f7fe fb95 	bl	80035d4 <RestartGSM>
				restartGSMuart();
 8004eaa:	f7ff ff5f 	bl	8004d6c <restartGSMuart>
				gsmER = 0;
 8004eae:	9b01      	ldr	r3, [sp, #4]
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	e786      	b.n	8004dc2 <GetGSMReply+0x2a>
 8004eb4:	20000f6d 	.word	0x20000f6d
 8004eb8:	20000b85 	.word	0x20000b85
 8004ebc:	20000545 	.word	0x20000545
 8004ec0:	080111f0 	.word	0x080111f0
 8004ec4:	200039c4 	.word	0x200039c4
 8004ec8:	080111db 	.word	0x080111db
 8004ecc:	080111e1 	.word	0x080111e1
 8004ed0:	080111e6 	.word	0x080111e6

08004ed4 <GSMSimOperator>:
{
 8004ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	SendGSMCode("  AT+COPS?");
 8004ed6:	4808      	ldr	r0, [pc, #32]	; (8004ef8 <GSMSimOperator+0x24>)
 8004ed8:	f7fe fbb4 	bl	8003644 <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8004edc:	4a07      	ldr	r2, [pc, #28]	; (8004efc <GSMSimOperator+0x28>)
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <GSMSimOperator+0x2c>)
 8004ee0:	9202      	str	r2, [sp, #8]
 8004ee2:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <GSMSimOperator+0x30>)
 8004ee4:	4908      	ldr	r1, [pc, #32]	; (8004f08 <GSMSimOperator+0x34>)
 8004ee6:	9201      	str	r2, [sp, #4]
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <GSMSimOperator+0x38>)
 8004eea:	2000      	movs	r0, #0
 8004eec:	9200      	str	r2, [sp, #0]
 8004eee:	220c      	movs	r2, #12
 8004ef0:	f7ff ff52 	bl	8004d98 <GetGSMReply>
}
 8004ef4:	b005      	add	sp, #20
 8004ef6:	bd00      	pop	{pc}
 8004ef8:	080111f5 	.word	0x080111f5
 8004efc:	08011541 	.word	0x08011541
 8004f00:	080114eb 	.word	0x080114eb
 8004f04:	00001388 	.word	0x00001388
 8004f08:	08011200 	.word	0x08011200
 8004f0c:	08011207 	.word	0x08011207

08004f10 <GSMIMEI>:
{
 8004f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	SendGSMCode(" AT+QGSN");
 8004f12:	4809      	ldr	r0, [pc, #36]	; (8004f38 <GSMIMEI+0x28>)
 8004f14:	f7fe fb96 	bl	8003644 <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <GSMIMEI+0x2c>)
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <GSMIMEI+0x30>)
 8004f1c:	9202      	str	r2, [sp, #8]
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <GSMIMEI+0x34>)
 8004f20:	4909      	ldr	r1, [pc, #36]	; (8004f48 <GSMIMEI+0x38>)
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	2000      	movs	r0, #0
 8004f26:	9201      	str	r2, [sp, #4]
 8004f28:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <GSMIMEI+0x3c>)
 8004f2a:	9200      	str	r2, [sp, #0]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	f7ff ff33 	bl	8004d98 <GetGSMReply>
}
 8004f32:	b005      	add	sp, #20
 8004f34:	bd00      	pop	{pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	0801122a 	.word	0x0801122a
 8004f3c:	08011541 	.word	0x08011541
 8004f40:	080114eb 	.word	0x080114eb
 8004f44:	200000c8 	.word	0x200000c8
 8004f48:	08011233 	.word	0x08011233
 8004f4c:	0801123a 	.word	0x0801123a

08004f50 <StopTCPConnection>:
{
 8004f50:	b530      	push	{r4, r5, lr}
	gprsok = 0;
 8004f52:	2500      	movs	r5, #0
 8004f54:	4c0f      	ldr	r4, [pc, #60]	; (8004f94 <StopTCPConnection+0x44>)
{
 8004f56:	b085      	sub	sp, #20
		if (strlen(ip) > 4)
 8004f58:	480f      	ldr	r0, [pc, #60]	; (8004f98 <StopTCPConnection+0x48>)
	gprsok = 0;
 8004f5a:	6025      	str	r5, [r4, #0]
		if (strlen(ip) > 4)
 8004f5c:	f7fb f8d4 	bl	8000108 <strlen>
 8004f60:	2804      	cmp	r0, #4
 8004f62:	d912      	bls.n	8004f8a <StopTCPConnection+0x3a>
			SendGSMCode(" AT+QICLOSE=0");
 8004f64:	480d      	ldr	r0, [pc, #52]	; (8004f9c <StopTCPConnection+0x4c>)
 8004f66:	f7fe fb6d 	bl	8003644 <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <StopTCPConnection+0x50>)
 8004f6c:	490d      	ldr	r1, [pc, #52]	; (8004fa4 <StopTCPConnection+0x54>)
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <StopTCPConnection+0x58>)
 8004f72:	002a      	movs	r2, r5
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2005      	movs	r0, #5
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <StopTCPConnection+0x5c>)
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	000b      	movs	r3, r1
 8004f80:	f7ff ff0a 	bl	8004d98 <GetGSMReply>
 8004f84:	f7fb f8c0 	bl	8000108 <strlen>
 8004f88:	6020      	str	r0, [r4, #0]
	ServerConnected = 0;
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <StopTCPConnection+0x60>)
 8004f8e:	601a      	str	r2, [r3, #0]
}
 8004f90:	b005      	add	sp, #20
 8004f92:	bd30      	pop	{r4, r5, pc}
 8004f94:	20003590 	.word	0x20003590
 8004f98:	200000d0 	.word	0x200000d0
 8004f9c:	080114a0 	.word	0x080114a0
 8004fa0:	080114ae 	.word	0x080114ae
 8004fa4:	08010feb 	.word	0x08010feb
 8004fa8:	200000c8 	.word	0x200000c8
 8004fac:	080114b7 	.word	0x080114b7
 8004fb0:	200033b4 	.word	0x200033b4

08004fb4 <StartTCPConnection>:
{
 8004fb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (strlen(ip) > 4)
 8004fb6:	4e20      	ldr	r6, [pc, #128]	; (8005038 <StartTCPConnection+0x84>)
 8004fb8:	0030      	movs	r0, r6
 8004fba:	f7fb f8a5 	bl	8000108 <strlen>
 8004fbe:	4d1f      	ldr	r5, [pc, #124]	; (800503c <StartTCPConnection+0x88>)
 8004fc0:	2804      	cmp	r0, #4
 8004fc2:	d922      	bls.n	800500a <StartTCPConnection+0x56>
		memset(GSMDataC, 0, 100);
 8004fc4:	4c1e      	ldr	r4, [pc, #120]	; (8005040 <StartTCPConnection+0x8c>)
 8004fc6:	2264      	movs	r2, #100	; 0x64
 8004fc8:	2100      	movs	r1, #0
 8004fca:	0020      	movs	r0, r4
 8004fcc:	f008 f926 	bl	800d21c <memset>
		strcpy(GSMDataC, (char *)" AT+QIOPEN=0,\"TCP\",\"");
 8004fd0:	491c      	ldr	r1, [pc, #112]	; (8005044 <StartTCPConnection+0x90>)
 8004fd2:	0020      	movs	r0, r4
 8004fd4:	f008 fad7 	bl	800d586 <strcpy>
		strcat(GSMDataC, ip);
 8004fd8:	0031      	movs	r1, r6
		gprsok = 0;
 8004fda:	2600      	movs	r6, #0
		strcat(GSMDataC, ip);
 8004fdc:	0020      	movs	r0, r4
 8004fde:	f008 f925 	bl	800d22c <strcat>
			SendGSMCode(GSMDataC);
 8004fe2:	0020      	movs	r0, r4
		gprsok = 0;
 8004fe4:	602e      	str	r6, [r5, #0]
			SendGSMCode(GSMDataC);
 8004fe6:	f7fe fb2d 	bl	8003644 <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN 0 TCP Connection open ", gpsto_net, "CONNECT OK"));
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <StartTCPConnection+0x94>)
 8004fec:	4917      	ldr	r1, [pc, #92]	; (800504c <StartTCPConnection+0x98>)
 8004fee:	9302      	str	r3, [sp, #8]
 8004ff0:	4b17      	ldr	r3, [pc, #92]	; (8005050 <StartTCPConnection+0x9c>)
 8004ff2:	0032      	movs	r2, r6
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	0030      	movs	r0, r6
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	4b16      	ldr	r3, [pc, #88]	; (8005054 <StartTCPConnection+0xa0>)
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	000b      	movs	r3, r1
 8005000:	f7ff feca 	bl	8004d98 <GetGSMReply>
 8005004:	f7fb f880 	bl	8000108 <strlen>
 8005008:	6028      	str	r0, [r5, #0]
	HAL_Delay(1500);
 800500a:	4813      	ldr	r0, [pc, #76]	; (8005058 <StartTCPConnection+0xa4>)
 800500c:	f001 fd16 	bl	8006a3c <HAL_Delay>
	if (gprsok)
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <StartTCPConnection+0x6a>
		Debug_Tx("connected ip2 ");
 8005016:	4811      	ldr	r0, [pc, #68]	; (800505c <StartTCPConnection+0xa8>)
 8005018:	f7fe f98c 	bl	8003334 <Debug_Tx>
		ServerConnected = 1;
 800501c:	2301      	movs	r3, #1
 800501e:	4a10      	ldr	r2, [pc, #64]	; (8005060 <StartTCPConnection+0xac>)
	HAL_Delay(1500);
 8005020:	480d      	ldr	r0, [pc, #52]	; (8005058 <StartTCPConnection+0xa4>)
		ServerConnected = 1;
 8005022:	6013      	str	r3, [r2, #0]
	HAL_Delay(1500);
 8005024:	f001 fd0a 	bl	8006a3c <HAL_Delay>
	SendTCPdata(data_LOGIN);
 8005028:	480e      	ldr	r0, [pc, #56]	; (8005064 <StartTCPConnection+0xb0>)
 800502a:	f000 f823 	bl	8005074 <SendTCPdata>
	HAL_Delay(500);
 800502e:	20fa      	movs	r0, #250	; 0xfa
 8005030:	0040      	lsls	r0, r0, #1
 8005032:	f001 fd03 	bl	8006a3c <HAL_Delay>
}
 8005036:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8005038:	200000d0 	.word	0x200000d0
 800503c:	20003590 	.word	0x20003590
 8005040:	20000b21 	.word	0x20000b21
 8005044:	080114d8 	.word	0x080114d8
 8005048:	080114ed 	.word	0x080114ed
 800504c:	08010feb 	.word	0x08010feb
 8005050:	200000cc 	.word	0x200000cc
 8005054:	080114f8 	.word	0x080114f8
 8005058:	000005dc 	.word	0x000005dc
 800505c:	08011520 	.word	0x08011520
 8005060:	200033b4 	.word	0x200033b4
 8005064:	20003513 	.word	0x20003513

08005068 <ResetTCP>:
	SendGSMCode(" AT+QIMUX=1");
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
}

void ResetTCP()
{
 8005068:	b510      	push	{r4, lr}
	//EndTransfer();
	StopTCPConnection();
 800506a:	f7ff ff71 	bl	8004f50 <StopTCPConnection>
	StartTCPConnection();
 800506e:	f7ff ffa1 	bl	8004fb4 <StartTCPConnection>
}
 8005072:	bd10      	pop	{r4, pc}

08005074 <SendTCPdata>:
{
 8005074:	b570      	push	{r4, r5, r6, lr}
	if (gprsok > 0)
 8005076:	4d1f      	ldr	r5, [pc, #124]	; (80050f4 <SendTCPdata+0x80>)
{
 8005078:	0004      	movs	r4, r0
	if (gprsok > 0)
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	dd32      	ble.n	80050e6 <SendTCPdata+0x72>
		if (strlen(ip) > 4)
 8005080:	481d      	ldr	r0, [pc, #116]	; (80050f8 <SendTCPdata+0x84>)
 8005082:	f7fb f841 	bl	8000108 <strlen>
 8005086:	2804      	cmp	r0, #4
 8005088:	d924      	bls.n	80050d4 <SendTCPdata+0x60>
			gprsok = 0;
 800508a:	2600      	movs	r6, #0
				SendGSMCode(" AT+QISEND=0");
 800508c:	481b      	ldr	r0, [pc, #108]	; (80050fc <SendTCPdata+0x88>)
			gprsok = 0;
 800508e:	602e      	str	r6, [r5, #0]
				SendGSMCode(" AT+QISEND=0");
 8005090:	f7fe fad8 	bl	8003644 <SendGSMCode>
				gprsok = waitForResponse(">",1000);
 8005094:	21fa      	movs	r1, #250	; 0xfa
 8005096:	481a      	ldr	r0, [pc, #104]	; (8005100 <SendTCPdata+0x8c>)
 8005098:	0089      	lsls	r1, r1, #2
 800509a:	f7fe fbaf 	bl	80037fc <waitForResponse>
 800509e:	6028      	str	r0, [r5, #0]
			if (gprsok > 0)
 80050a0:	42b0      	cmp	r0, r6
 80050a2:	dd18      	ble.n	80050d6 <SendTCPdata+0x62>
					SendGSMData(data); // Debug_Tx(GSMData);
 80050a4:	0020      	movs	r0, r4
				gprsok = 0;
 80050a6:	602e      	str	r6, [r5, #0]
					SendGSMData(data); // Debug_Tx(GSMData);
 80050a8:	f7fe fb4c 	bl	8003744 <SendGSMData>
					gprsok = waitForResponse("SEND OK",1000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 80050ac:	21fa      	movs	r1, #250	; 0xfa
 80050ae:	4815      	ldr	r0, [pc, #84]	; (8005104 <SendTCPdata+0x90>)
 80050b0:	0089      	lsls	r1, r1, #2
 80050b2:	f7fe fba3 	bl	80037fc <waitForResponse>
 80050b6:	6028      	str	r0, [r5, #0]
				if (gprsok<1){//SendGSMData("    ");
 80050b8:	42b0      	cmp	r0, r6
 80050ba:	dc05      	bgt.n	80050c8 <SendTCPdata+0x54>
				Debug_Tx("UNABLE TO11 SEND DATA STOPED CONNECTion");EndTransfer();
 80050bc:	4812      	ldr	r0, [pc, #72]	; (8005108 <SendTCPdata+0x94>)
				Debug_Tx(data);
 80050be:	f7fe f939 	bl	8003334 <Debug_Tx>
				EndTransfer();
 80050c2:	f7fe fb75 	bl	80037b0 <EndTransfer>
 80050c6:	e005      	b.n	80050d4 <SendTCPdata+0x60>
				else{Debug_Tx("DATASENT");Debug_Tx(data);}
 80050c8:	4810      	ldr	r0, [pc, #64]	; (800510c <SendTCPdata+0x98>)
 80050ca:	f7fe f933 	bl	8003334 <Debug_Tx>
 80050ce:	0020      	movs	r0, r4
 80050d0:	f7fe f930 	bl	8003334 <Debug_Tx>
}
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
				SendGSMData("    ");
 80050d6:	480e      	ldr	r0, [pc, #56]	; (8005110 <SendTCPdata+0x9c>)
 80050d8:	f7fe fb34 	bl	8003744 <SendGSMData>
				Debug_Tx("UNABLE TO SEND11 DATA STOPED CONNECTion");
 80050dc:	480d      	ldr	r0, [pc, #52]	; (8005114 <SendTCPdata+0xa0>)
 80050de:	f7fe f929 	bl	8003334 <Debug_Tx>
				Debug_Tx(data);
 80050e2:	0020      	movs	r0, r4
 80050e4:	e7eb      	b.n	80050be <SendTCPdata+0x4a>
		Debug_Tx("DISCONNECTED FROM SERVER .resetting connection ");
 80050e6:	480c      	ldr	r0, [pc, #48]	; (8005118 <SendTCPdata+0xa4>)
 80050e8:	f7fe f924 	bl	8003334 <Debug_Tx>
		ResetTCP();
 80050ec:	f7ff ffbc 	bl	8005068 <ResetTCP>
}
 80050f0:	e7f0      	b.n	80050d4 <SendTCPdata+0x60>
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	20003590 	.word	0x20003590
 80050f8:	200000d0 	.word	0x200000d0
 80050fc:	0801152f 	.word	0x0801152f
 8005100:	08010f64 	.word	0x08010f64
 8005104:	0801153c 	.word	0x0801153c
 8005108:	08011544 	.word	0x08011544
 800510c:	0801156c 	.word	0x0801156c
 8005110:	08011575 	.word	0x08011575
 8005114:	0801157a 	.word	0x0801157a
 8005118:	080115a2 	.word	0x080115a2

0800511c <ProcessTCPAll>:

void ProcessTCPAll(char *data)
{
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	0004      	movs	r4, r0
	return HAL_GetTick();
 8005120:	f001 fc86 	bl	8006a30 <HAL_GetTick>
	int tcpSENDDATA = tic();

	if (ServerConnected > 0)
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <ProcessTCPAll+0x44>)
 8005126:	4d0f      	ldr	r5, [pc, #60]	; (8005164 <ProcessTCPAll+0x48>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	dd0c      	ble.n	8005148 <ProcessTCPAll+0x2c>
	{
		//$AS01FFA0138,$123456789012345,$1.0.4,$1.0.0,28.609803N077.103198E,F7,*

		Debug_Tx("sending data to ip ");
 800512e:	480e      	ldr	r0, [pc, #56]	; (8005168 <ProcessTCPAll+0x4c>)
 8005130:	f7fe f900 	bl	8003334 <Debug_Tx>
		Debug_Tx(ip2);
 8005134:	0028      	movs	r0, r5
 8005136:	f7fe f8fd 	bl	8003334 <Debug_Tx>
		// SendTCPdata(data_LOGIN);
		SendTCPdata(data);
 800513a:	0020      	movs	r0, r4
 800513c:	f7ff ff9a 	bl	8005074 <SendTCPdata>
		Debug_Tx("dat send done  ");
 8005140:	480a      	ldr	r0, [pc, #40]	; (800516c <ProcessTCPAll+0x50>)
		{
			Debug_Tx("Error: ServerSession disconnected ");
		}

		Debug_Tx("error insending data to ip ");
		Debug_Tx(ip2);
 8005142:	f7fe f8f7 	bl	8003334 <Debug_Tx>
		//ResetTCP();
	}

	toc(tcpSENDDATA, "_________________________TCP SEND DATA");
}
 8005146:	bd70      	pop	{r4, r5, r6, pc}
		if (debug == 1)
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <ProcessTCPAll+0x54>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d102      	bne.n	8005156 <ProcessTCPAll+0x3a>
			Debug_Tx("Error: ServerSession disconnected ");
 8005150:	4808      	ldr	r0, [pc, #32]	; (8005174 <ProcessTCPAll+0x58>)
 8005152:	f7fe f8ef 	bl	8003334 <Debug_Tx>
		Debug_Tx("error insending data to ip ");
 8005156:	4808      	ldr	r0, [pc, #32]	; (8005178 <ProcessTCPAll+0x5c>)
 8005158:	f7fe f8ec 	bl	8003334 <Debug_Tx>
		Debug_Tx(ip2);
 800515c:	0028      	movs	r0, r5
 800515e:	e7f0      	b.n	8005142 <ProcessTCPAll+0x26>
 8005160:	200033b4 	.word	0x200033b4
 8005164:	20003eae 	.word	0x20003eae
 8005168:	0801160d 	.word	0x0801160d
 800516c:	080115d2 	.word	0x080115d2
 8005170:	200000c4 	.word	0x200000c4
 8005174:	080115e2 	.word	0x080115e2
 8005178:	08011605 	.word	0x08011605

0800517c <SetTCPMux>:
{
 800517c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	SendGSMCode(" AT+QIMUX=1");
 800517e:	4809      	ldr	r0, [pc, #36]	; (80051a4 <SetTCPMux+0x28>)
 8005180:	f7fe fa60 	bl	8003644 <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8005184:	2200      	movs	r2, #0
 8005186:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <SetTCPMux+0x2c>)
 8005188:	4908      	ldr	r1, [pc, #32]	; (80051ac <SetTCPMux+0x30>)
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <SetTCPMux+0x34>)
 800518e:	0010      	movs	r0, r2
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <SetTCPMux+0x38>)
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	000b      	movs	r3, r1
 800519a:	f7ff fdfd 	bl	8004d98 <GetGSMReply>
}
 800519e:	b005      	add	sp, #20
 80051a0:	bd00      	pop	{pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	08011621 	.word	0x08011621
 80051a8:	08011541 	.word	0x08011541
 80051ac:	08010feb 	.word	0x08010feb
 80051b0:	200000c8 	.word	0x200000c8
 80051b4:	0801162d 	.word	0x0801162d

080051b8 <SetupGPRS>:
void SetupGPRS(char *apn)
{

	int ck = 5;

	gprsok = 0;
 80051b8:	2200      	movs	r2, #0
{
 80051ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	gprsok = 0;
 80051bc:	2605      	movs	r6, #5
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <SetupGPRS+0xa0>)
{
 80051c0:	b087      	sub	sp, #28
 80051c2:	9005      	str	r0, [sp, #20]
	gprsok = 0;
 80051c4:	601a      	str	r2, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
	{
		HAL_Delay(2000);
 80051c6:	20fa      	movs	r0, #250	; 0xfa
 80051c8:	00c0      	lsls	r0, r0, #3
 80051ca:	f001 fc37 	bl	8006a3c <HAL_Delay>
		ck = ck - 1;
		// SendGSMCode(" AT+CGACT=0,1");
		// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",500));
		memset(GSMDataC, 0, 100);
 80051ce:	4c23      	ldr	r4, [pc, #140]	; (800525c <SetupGPRS+0xa4>)
 80051d0:	2264      	movs	r2, #100	; 0x64
 80051d2:	2100      	movs	r1, #0
 80051d4:	0020      	movs	r0, r4
 80051d6:	f008 f821 	bl	800d21c <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80051da:	0020      	movs	r0, r4
 80051dc:	4920      	ldr	r1, [pc, #128]	; (8005260 <SetupGPRS+0xa8>)
 80051de:	f008 f9d2 	bl	800d586 <strcpy>
		strcat(GSMDataC, apn);
 80051e2:	0020      	movs	r0, r4
 80051e4:	9905      	ldr	r1, [sp, #20]
 80051e6:	f008 f821 	bl	800d22c <strcat>
		strcat(GSMDataC, "\",\"\",\"\",0");
 80051ea:	491e      	ldr	r1, [pc, #120]	; (8005264 <SetupGPRS+0xac>)
 80051ec:	0020      	movs	r0, r4
 80051ee:	f008 f81d 	bl	800d22c <strcat>
		SendGSMCode(GSMDataC);
 80051f2:	0020      	movs	r0, r4
 80051f4:	f7fe fa26 	bl	8003644 <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 80051f8:	2200      	movs	r2, #0
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <SetupGPRS+0xb0>)
 80051fc:	4f1b      	ldr	r7, [pc, #108]	; (800526c <SetupGPRS+0xb4>)
 80051fe:	9302      	str	r3, [sp, #8]
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	4c1a      	ldr	r4, [pc, #104]	; (8005270 <SetupGPRS+0xb8>)
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <SetupGPRS+0xbc>)
 800520a:	0021      	movs	r1, r4
 800520c:	0010      	movs	r0, r2
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	0023      	movs	r3, r4
 8005212:	f7ff fdc1 	bl	8004d98 <GetGSMReply>
 8005216:	f7fa ff77 	bl	8000108 <strlen>
 800521a:	4d0f      	ldr	r5, [pc, #60]	; (8005258 <SetupGPRS+0xa0>)
 800521c:	6028      	str	r0, [r5, #0]

		// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",10));
		if (gprsok > 0)
 800521e:	2800      	cmp	r0, #0
 8005220:	d011      	beq.n	8005246 <SetupGPRS+0x8e>
		{
			// gprsok=0;
			// HAL_Delay(4000);

			SendGSMCode(" AT+QIMODE=0");
 8005222:	4815      	ldr	r0, [pc, #84]	; (8005278 <SetupGPRS+0xc0>)
 8005224:	f7fe fa0e 	bl	8003644 <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8005228:	2200      	movs	r2, #0
 800522a:	9b04      	ldr	r3, [sp, #16]
 800522c:	0021      	movs	r1, r4
 800522e:	9302      	str	r3, [sp, #8]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	0010      	movs	r0, r2
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <SetupGPRS+0xc4>)
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	0023      	movs	r3, r4
 800523c:	f7ff fdac 	bl	8004d98 <GetGSMReply>
 8005240:	f7fa ff62 	bl	8000108 <strlen>
 8005244:	6028      	str	r0, [r5, #0]
	while ((ck > 0) && (gprsok < 1))
 8005246:	3e01      	subs	r6, #1
 8005248:	2e00      	cmp	r6, #0
 800524a:	d002      	beq.n	8005252 <SetupGPRS+0x9a>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	ddb9      	ble.n	80051c6 <SetupGPRS+0xe>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 8005252:	b007      	add	sp, #28
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	20003590 	.word	0x20003590
 800525c:	20000b21 	.word	0x20000b21
 8005260:	0801164a 	.word	0x0801164a
 8005264:	08011659 	.word	0x08011659
 8005268:	08011541 	.word	0x08011541
 800526c:	200000c8 	.word	0x200000c8
 8005270:	08010feb 	.word	0x08010feb
 8005274:	08011663 	.word	0x08011663
 8005278:	08011680 	.word	0x08011680
 800527c:	0801168d 	.word	0x0801168d

08005280 <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
	// RestartGSM();
	int ook;
	Debug_Tx("______________Begin_____________________________");
 8005282:	4867      	ldr	r0, [pc, #412]	; (8005420 <ShiftGSMProfile+0x1a0>)
{
 8005284:	b087      	sub	sp, #28
	Debug_Tx("______________Begin_____________________________");
 8005286:	f7fe f855 	bl	8003334 <Debug_Tx>
 800528a:	230a      	movs	r3, #10
 800528c:	9304      	str	r3, [sp, #16]
	// Debug_Tx("______________setup stk_____________________________");
	int ck = 10;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		HAL_Delay(3000);
 800528e:	4865      	ldr	r0, [pc, #404]	; (8005424 <ShiftGSMProfile+0x1a4>)
 8005290:	f001 fbd4 	bl	8006a3c <HAL_Delay>
		ck = ck - 1;
		SendGSMCode(" AT+QSTK=1");
 8005294:	4864      	ldr	r0, [pc, #400]	; (8005428 <ShiftGSMProfile+0x1a8>)
 8005296:	f7fe f9d5 	bl	8003644 <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 800529a:	2200      	movs	r2, #0
 800529c:	4e63      	ldr	r6, [pc, #396]	; (800542c <ShiftGSMProfile+0x1ac>)
 800529e:	4d64      	ldr	r5, [pc, #400]	; (8005430 <ShiftGSMProfile+0x1b0>)
 80052a0:	9602      	str	r6, [sp, #8]
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	4c63      	ldr	r4, [pc, #396]	; (8005434 <ShiftGSMProfile+0x1b4>)
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	4b63      	ldr	r3, [pc, #396]	; (8005438 <ShiftGSMProfile+0x1b8>)
 80052aa:	0021      	movs	r1, r4
 80052ac:	0010      	movs	r0, r2
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	0023      	movs	r3, r4
 80052b2:	f7ff fd71 	bl	8004d98 <GetGSMReply>
 80052b6:	f7fa ff27 	bl	8000108 <strlen>
		if (ook > 0)
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d136      	bne.n	800532c <ShiftGSMProfile+0xac>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 80052be:	2000      	movs	r0, #0
	while ((ck > 0) && (ook < 1))
 80052c0:	9b04      	ldr	r3, [sp, #16]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <ShiftGSMProfile+0x4e>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d0df      	beq.n	800528e <ShiftGSMProfile+0xe>
				}
			}
		}
	}

	Debug_Tx("_____________Restart_____________________________");
 80052ce:	485b      	ldr	r0, [pc, #364]	; (800543c <ShiftGSMProfile+0x1bc>)
 80052d0:	f7fe f830 	bl	8003334 <Debug_Tx>
	ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+QPOWD=1");
 80052d4:	4f5a      	ldr	r7, [pc, #360]	; (8005440 <ShiftGSMProfile+0x1c0>)
 80052d6:	0038      	movs	r0, r7
 80052d8:	f7fe f9b4 	bl	8003644 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 80052dc:	4b59      	ldr	r3, [pc, #356]	; (8005444 <ShiftGSMProfile+0x1c4>)
 80052de:	4e5a      	ldr	r6, [pc, #360]	; (8005448 <ShiftGSMProfile+0x1c8>)
 80052e0:	9302      	str	r3, [sp, #8]
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	6833      	ldr	r3, [r6, #0]
 80052e6:	4c53      	ldr	r4, [pc, #332]	; (8005434 <ShiftGSMProfile+0x1b4>)
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	4b58      	ldr	r3, [pc, #352]	; (800544c <ShiftGSMProfile+0x1cc>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	0021      	movs	r1, r4
 80052f0:	9305      	str	r3, [sp, #20]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	200f      	movs	r0, #15
 80052f6:	0023      	movs	r3, r4
 80052f8:	f7ff fd4e 	bl	8004d98 <GetGSMReply>
 80052fc:	f7fa ff04 	bl	8000108 <strlen>
 8005300:	1e05      	subs	r5, r0, #0
	while ((ck > 0) && (ook < 1))
 8005302:	d10e      	bne.n	8005322 <ShiftGSMProfile+0xa2>
		SendGSMCode(" AT+QPOWD=1");
 8005304:	0038      	movs	r0, r7
 8005306:	f7fe f99d 	bl	8003644 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 800530a:	9b04      	ldr	r3, [sp, #16]
 800530c:	002a      	movs	r2, r5
 800530e:	9302      	str	r3, [sp, #8]
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	0021      	movs	r1, r4
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	9b05      	ldr	r3, [sp, #20]
 8005318:	200f      	movs	r0, #15
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	0023      	movs	r3, r4
 800531e:	f7ff fd3b 	bl	8004d98 <GetGSMReply>
	}
	HAL_Delay(6000);
 8005322:	484b      	ldr	r0, [pc, #300]	; (8005450 <ShiftGSMProfile+0x1d0>)
 8005324:	f001 fb8a 	bl	8006a3c <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 8005328:	b007      	add	sp, #28
 800532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Debug_Tx("______________Setup Menu_____________________________");
 800532c:	4849      	ldr	r0, [pc, #292]	; (8005454 <ShiftGSMProfile+0x1d4>)
 800532e:	f7fe f801 	bl	8003334 <Debug_Tx>
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 8005332:	4849      	ldr	r0, [pc, #292]	; (8005458 <ShiftGSMProfile+0x1d8>)
 8005334:	f7fe f986 	bl	8003644 <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", gpsto_net, "OK"));
 8005338:	2200      	movs	r2, #0
 800533a:	9602      	str	r6, [sp, #8]
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	0021      	movs	r1, r4
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	4b46      	ldr	r3, [pc, #280]	; (800545c <ShiftGSMProfile+0x1dc>)
 8005344:	0010      	movs	r0, r2
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	0023      	movs	r3, r4
 800534a:	f7ff fd25 	bl	8004d98 <GetGSMReply>
 800534e:	f7fa fedb 	bl	8000108 <strlen>
 8005352:	0007      	movs	r7, r0
			HAL_Delay(3000);
 8005354:	4833      	ldr	r0, [pc, #204]	; (8005424 <ShiftGSMProfile+0x1a4>)
 8005356:	f001 fb71 	bl	8006a3c <HAL_Delay>
			if (ook > 0)
 800535a:	2f00      	cmp	r7, #0
 800535c:	d0af      	beq.n	80052be <ShiftGSMProfile+0x3e>
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
 800535e:	4840      	ldr	r0, [pc, #256]	; (8005460 <ShiftGSMProfile+0x1e0>)
 8005360:	f7fd ffe8 	bl	8003334 <Debug_Tx>
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 8005364:	483f      	ldr	r0, [pc, #252]	; (8005464 <ShiftGSMProfile+0x1e4>)
 8005366:	f7fe f96d 	bl	8003644 <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 800536a:	2200      	movs	r2, #0
 800536c:	9602      	str	r6, [sp, #8]
 800536e:	682b      	ldr	r3, [r5, #0]
 8005370:	0021      	movs	r1, r4
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <ShiftGSMProfile+0x1e8>)
 8005376:	0010      	movs	r0, r2
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	0023      	movs	r3, r4
 800537c:	f7ff fd0c 	bl	8004d98 <GetGSMReply>
 8005380:	f7fa fec2 	bl	8000108 <strlen>
				if (ook > 0)
 8005384:	2800      	cmp	r0, #0
 8005386:	d09a      	beq.n	80052be <ShiftGSMProfile+0x3e>
					if (GSMProf == 0)
 8005388:	4b38      	ldr	r3, [pc, #224]	; (800546c <ShiftGSMProfile+0x1ec>)
 800538a:	681f      	ldr	r7, [r3, #0]
 800538c:	9305      	str	r3, [sp, #20]
 800538e:	2f00      	cmp	r7, #0
 8005390:	d119      	bne.n	80053c6 <ShiftGSMProfile+0x146>
						Debug_Tx("_____________BSNL profile Selection_____________________________");
 8005392:	4837      	ldr	r0, [pc, #220]	; (8005470 <ShiftGSMProfile+0x1f0>)
 8005394:	f7fd ffce 	bl	8003334 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 8005398:	4836      	ldr	r0, [pc, #216]	; (8005474 <ShiftGSMProfile+0x1f4>)
 800539a:	f7fe f953 	bl	8003644 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
 800539e:	9602      	str	r6, [sp, #8]
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	003a      	movs	r2, r7
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	4b34      	ldr	r3, [pc, #208]	; (8005478 <ShiftGSMProfile+0x1f8>)
 80053a8:	0021      	movs	r1, r4
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	0038      	movs	r0, r7
 80053ae:	0023      	movs	r3, r4
 80053b0:	f7ff fcf2 	bl	8004d98 <GetGSMReply>
 80053b4:	f7fa fea8 	bl	8000108 <strlen>
						GSMProf = 1;
 80053b8:	2301      	movs	r3, #1
 80053ba:	9a05      	ldr	r2, [sp, #20]
 80053bc:	6013      	str	r3, [r2, #0]
					if (ook > 0)
 80053be:	2800      	cmp	r0, #0
 80053c0:	d100      	bne.n	80053c4 <ShiftGSMProfile+0x144>
 80053c2:	e77c      	b.n	80052be <ShiftGSMProfile+0x3e>
 80053c4:	e001      	b.n	80053ca <ShiftGSMProfile+0x14a>
					else if (GSMProf == 1)
 80053c6:	2f01      	cmp	r7, #1
 80053c8:	d015      	beq.n	80053f6 <ShiftGSMProfile+0x176>
						Debug_Tx("_____________Refresh_____________________________");
 80053ca:	482c      	ldr	r0, [pc, #176]	; (800547c <ShiftGSMProfile+0x1fc>)
 80053cc:	f7fd ffb2 	bl	8003334 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 80053d0:	482b      	ldr	r0, [pc, #172]	; (8005480 <ShiftGSMProfile+0x200>)
 80053d2:	f7fe f937 	bl	8003644 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh", gpsto_net, "OK"));
 80053d6:	2200      	movs	r2, #0
 80053d8:	4b14      	ldr	r3, [pc, #80]	; (800542c <ShiftGSMProfile+0x1ac>)
 80053da:	0021      	movs	r1, r4
 80053dc:	9302      	str	r3, [sp, #8]
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <ShiftGSMProfile+0x1b0>)
 80053e0:	0010      	movs	r0, r2
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	4b27      	ldr	r3, [pc, #156]	; (8005484 <ShiftGSMProfile+0x204>)
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	0023      	movs	r3, r4
 80053ec:	f7ff fcd4 	bl	8004d98 <GetGSMReply>
 80053f0:	f7fa fe8a 	bl	8000108 <strlen>
 80053f4:	e764      	b.n	80052c0 <ShiftGSMProfile+0x40>
						Debug_Tx("_____________Airtel profile Selection_____________________________");
 80053f6:	4824      	ldr	r0, [pc, #144]	; (8005488 <ShiftGSMProfile+0x208>)
 80053f8:	f7fd ff9c 	bl	8003334 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 80053fc:	4823      	ldr	r0, [pc, #140]	; (800548c <ShiftGSMProfile+0x20c>)
 80053fe:	f7fe f921 	bl	8003644 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", gpsto_net, "OK"));
 8005402:	2200      	movs	r2, #0
 8005404:	9602      	str	r6, [sp, #8]
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	0021      	movs	r1, r4
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	4b20      	ldr	r3, [pc, #128]	; (8005490 <ShiftGSMProfile+0x210>)
 800540e:	0010      	movs	r0, r2
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	0023      	movs	r3, r4
 8005414:	f7ff fcc0 	bl	8004d98 <GetGSMReply>
 8005418:	f7fa fe76 	bl	8000108 <strlen>
 800541c:	2300      	movs	r3, #0
 800541e:	e7cc      	b.n	80053ba <ShiftGSMProfile+0x13a>
 8005420:	080116b0 	.word	0x080116b0
 8005424:	00000bb8 	.word	0x00000bb8
 8005428:	080116e1 	.word	0x080116e1
 800542c:	08011541 	.word	0x08011541
 8005430:	200000cc 	.word	0x200000cc
 8005434:	08010feb 	.word	0x08010feb
 8005438:	080116ec 	.word	0x080116ec
 800543c:	08011984 	.word	0x08011984
 8005440:	080119b6 	.word	0x080119b6
 8005444:	080119c2 	.word	0x080119c2
 8005448:	200000c8 	.word	0x200000c8
 800544c:	080119d4 	.word	0x080119d4
 8005450:	00001770 	.word	0x00001770
 8005454:	08011707 	.word	0x08011707
 8005458:	0801173d 	.word	0x0801173d
 800545c:	08011762 	.word	0x08011762
 8005460:	0801177f 	.word	0x0801177f
 8005464:	080117bd 	.word	0x080117bd
 8005468:	080117dd 	.word	0x080117dd
 800546c:	2000009c 	.word	0x2000009c
 8005470:	080117fe 	.word	0x080117fe
 8005474:	0801183f 	.word	0x0801183f
 8005478:	0801186a 	.word	0x0801186a
 800547c:	08011887 	.word	0x08011887
 8005480:	080118b9 	.word	0x080118b9
 8005484:	080118de 	.word	0x080118de
 8005488:	080118f7 	.word	0x080118f7
 800548c:	0801193a 	.word	0x0801193a
 8005490:	08011965 	.word	0x08011965

08005494 <InitGSM>:

void InitGSM()
{
 8005494:	b5f0      	push	{r4, r5, r6, r7, lr}
	// RestartGSM();
	HAL_Delay(5000);
 8005496:	4897      	ldr	r0, [pc, #604]	; (80056f4 <InitGSM+0x260>)
{
 8005498:	b089      	sub	sp, #36	; 0x24
	HAL_Delay(5000);
 800549a:	f001 facf 	bl	8006a3c <HAL_Delay>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 800549e:	4d96      	ldr	r5, [pc, #600]	; (80056f8 <InitGSM+0x264>)
 80054a0:	0028      	movs	r0, r5
 80054a2:	f7fe f8cf 	bl	8003644 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 80054a6:	4b95      	ldr	r3, [pc, #596]	; (80056fc <InitGSM+0x268>)
 80054a8:	4f95      	ldr	r7, [pc, #596]	; (8005700 <InitGSM+0x26c>)
 80054aa:	9302      	str	r3, [sp, #8]
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	4c94      	ldr	r4, [pc, #592]	; (8005704 <InitGSM+0x270>)
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	4b94      	ldr	r3, [pc, #592]	; (8005708 <InitGSM+0x274>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	0021      	movs	r1, r4
 80054ba:	9306      	str	r3, [sp, #24]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	200f      	movs	r0, #15
 80054c0:	0023      	movs	r3, r4
 80054c2:	f7ff fc69 	bl	8004d98 <GetGSMReply>
 80054c6:	f7fa fe1f 	bl	8000108 <strlen>
 80054ca:	1e06      	subs	r6, r0, #0
	while ((ck > 0) && (i < 1))
 80054cc:	d10e      	bne.n	80054ec <InitGSM+0x58>
		SendGSMCode(" ATE0");
 80054ce:	0028      	movs	r0, r5
 80054d0:	f7fe f8b8 	bl	8003644 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 80054d4:	9b05      	ldr	r3, [sp, #20]
 80054d6:	0032      	movs	r2, r6
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	0021      	movs	r1, r4
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	9b06      	ldr	r3, [sp, #24]
 80054e2:	200f      	movs	r0, #15
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	0023      	movs	r3, r4
 80054e8:	f7ff fc56 	bl	8004d98 <GetGSMReply>
{
 80054ec:	2602      	movs	r6, #2
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 80054ee:	4887      	ldr	r0, [pc, #540]	; (800570c <InitGSM+0x278>)
 80054f0:	f7fe f8a8 	bl	8003644 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 80054f4:	9b05      	ldr	r3, [sp, #20]
 80054f6:	2200      	movs	r2, #0
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	0021      	movs	r1, r4
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	4b83      	ldr	r3, [pc, #524]	; (8005710 <InitGSM+0x27c>)
 8005502:	200f      	movs	r0, #15
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	0023      	movs	r3, r4
 8005508:	f7ff fc46 	bl	8004d98 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 800550c:	2e01      	cmp	r6, #1
 800550e:	d004      	beq.n	800551a <InitGSM+0x86>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8005510:	f7fa fdfa 	bl	8000108 <strlen>
		ck = ck - 1;
 8005514:	2601      	movs	r6, #1
	while ((ck > 0) && (i < 1))
 8005516:	2800      	cmp	r0, #0
 8005518:	d0e9      	beq.n	80054ee <InitGSM+0x5a>
	}

	HAL_Delay(2000);
 800551a:	20fa      	movs	r0, #250	; 0xfa
 800551c:	00c0      	lsls	r0, r0, #3
 800551e:	f001 fa8d 	bl	8006a3c <HAL_Delay>
	ShiftGSMProfile();
 8005522:	f7ff fead 	bl	8005280 <ShiftGSMProfile>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 8005526:	0028      	movs	r0, r5
 8005528:	f7fe f88c 	bl	8003644 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 800552c:	4b73      	ldr	r3, [pc, #460]	; (80056fc <InitGSM+0x268>)
 800552e:	4f74      	ldr	r7, [pc, #464]	; (8005700 <InitGSM+0x26c>)
 8005530:	9302      	str	r3, [sp, #8]
 8005532:	9305      	str	r3, [sp, #20]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4e73      	ldr	r6, [pc, #460]	; (8005704 <InitGSM+0x270>)
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	4b76      	ldr	r3, [pc, #472]	; (8005714 <InitGSM+0x280>)
 800553c:	2200      	movs	r2, #0
 800553e:	0031      	movs	r1, r6
 8005540:	9306      	str	r3, [sp, #24]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	200a      	movs	r0, #10
 8005546:	0033      	movs	r3, r6
 8005548:	f7ff fc26 	bl	8004d98 <GetGSMReply>
 800554c:	f7fa fddc 	bl	8000108 <strlen>
 8005550:	9007      	str	r0, [sp, #28]
	while ((ck > 0) && (i < 1))
 8005552:	2800      	cmp	r0, #0
 8005554:	d10e      	bne.n	8005574 <InitGSM+0xe0>
		SendGSMCode(" ATE0");
 8005556:	0028      	movs	r0, r5
 8005558:	f7fe f874 	bl	8003644 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 800555c:	9b05      	ldr	r3, [sp, #20]
 800555e:	0031      	movs	r1, r6
 8005560:	9302      	str	r3, [sp, #8]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	200a      	movs	r0, #10
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	9b06      	ldr	r3, [sp, #24]
 800556a:	9a07      	ldr	r2, [sp, #28]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	0033      	movs	r3, r6
 8005570:	f7ff fc12 	bl	8004d98 <GetGSMReply>
{
 8005574:	2502      	movs	r5, #2
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8005576:	4865      	ldr	r0, [pc, #404]	; (800570c <InitGSM+0x278>)
 8005578:	f7fe f864 	bl	8003644 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 800557c:	9b05      	ldr	r3, [sp, #20]
 800557e:	2200      	movs	r2, #0
 8005580:	9302      	str	r3, [sp, #8]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	0031      	movs	r1, r6
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	4b61      	ldr	r3, [pc, #388]	; (8005710 <InitGSM+0x27c>)
 800558a:	200a      	movs	r0, #10
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	0033      	movs	r3, r6
 8005590:	f7ff fc02 	bl	8004d98 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 8005594:	2d01      	cmp	r5, #1
 8005596:	d004      	beq.n	80055a2 <InitGSM+0x10e>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8005598:	f7fa fdb6 	bl	8000108 <strlen>
		ck = ck - 1;
 800559c:	2501      	movs	r5, #1
	while ((ck > 0) && (i < 1))
 800559e:	2800      	cmp	r0, #0
 80055a0:	d0e9      	beq.n	8005576 <InitGSM+0xe2>
 80055a2:	230a      	movs	r3, #10
	{
		ck = ck - 1;
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
		// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
 80055a4:	26fa      	movs	r6, #250	; 0xfa
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	00b6      	lsls	r6, r6, #2
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 80055aa:	485b      	ldr	r0, [pc, #364]	; (8005718 <InitGSM+0x284>)
 80055ac:	f7fe f84a 	bl	8003644 <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 80055b0:	4f52      	ldr	r7, [pc, #328]	; (80056fc <InitGSM+0x268>)
 80055b2:	4d53      	ldr	r5, [pc, #332]	; (8005700 <InitGSM+0x26c>)
 80055b4:	9702      	str	r7, [sp, #8]
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	4b57      	ldr	r3, [pc, #348]	; (800571c <InitGSM+0x288>)
 80055be:	0021      	movs	r1, r4
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	2005      	movs	r0, #5
 80055c4:	0023      	movs	r3, r4
 80055c6:	f7ff fbe7 	bl	8004d98 <GetGSMReply>
 80055ca:	f7fa fd9d 	bl	8000108 <strlen>
 80055ce:	9006      	str	r0, [sp, #24]
		HAL_Delay(1000);
 80055d0:	0030      	movs	r0, r6
 80055d2:	f001 fa33 	bl	8006a3c <HAL_Delay>
		if (i > 0)
 80055d6:	9b06      	ldr	r3, [sp, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <InitGSM+0x15c>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 80055dc:	2500      	movs	r5, #0
	while ((ck > 0) && (i < 1))
 80055de:	9b05      	ldr	r3, [sp, #20]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <InitGSM+0x158>
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	d0de      	beq.n	80055aa <InitGSM+0x116>
					}
				}
			}
		}
	}
}
 80055ec:	b009      	add	sp, #36	; 0x24
 80055ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 80055f0:	484b      	ldr	r0, [pc, #300]	; (8005720 <InitGSM+0x28c>)
 80055f2:	f7fe f827 	bl	8003644 <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 80055f6:	2200      	movs	r2, #0
 80055f8:	9702      	str	r7, [sp, #8]
 80055fa:	682b      	ldr	r3, [r5, #0]
 80055fc:	0021      	movs	r1, r4
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	4b48      	ldr	r3, [pc, #288]	; (8005724 <InitGSM+0x290>)
 8005602:	0010      	movs	r0, r2
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	0023      	movs	r3, r4
 8005608:	f7ff fbc6 	bl	8004d98 <GetGSMReply>
 800560c:	f7fa fd7c 	bl	8000108 <strlen>
			if (i > 0)
 8005610:	2800      	cmp	r0, #0
 8005612:	d0e3      	beq.n	80055dc <InitGSM+0x148>
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 8005614:	4844      	ldr	r0, [pc, #272]	; (8005728 <InitGSM+0x294>)
 8005616:	f7fe f815 	bl	8003644 <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 800561a:	2200      	movs	r2, #0
 800561c:	9702      	str	r7, [sp, #8]
 800561e:	682b      	ldr	r3, [r5, #0]
 8005620:	0021      	movs	r1, r4
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	4b41      	ldr	r3, [pc, #260]	; (800572c <InitGSM+0x298>)
 8005626:	0010      	movs	r0, r2
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	0023      	movs	r3, r4
 800562c:	f7ff fbb4 	bl	8004d98 <GetGSMReply>
 8005630:	f7fa fd6a 	bl	8000108 <strlen>
				if (i > 0)
 8005634:	2800      	cmp	r0, #0
 8005636:	d0d1      	beq.n	80055dc <InitGSM+0x148>
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 8005638:	483d      	ldr	r0, [pc, #244]	; (8005730 <InitGSM+0x29c>)
 800563a:	f7fe f803 	bl	8003644 <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 800563e:	2200      	movs	r2, #0
 8005640:	9702      	str	r7, [sp, #8]
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	0021      	movs	r1, r4
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <InitGSM+0x2a0>)
 800564a:	0010      	movs	r0, r2
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	0023      	movs	r3, r4
 8005650:	f7ff fba2 	bl	8004d98 <GetGSMReply>
 8005654:	f7fa fd58 	bl	8000108 <strlen>
					if (i > 0)
 8005658:	2800      	cmp	r0, #0
 800565a:	d0bf      	beq.n	80055dc <InitGSM+0x148>
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 800565c:	4836      	ldr	r0, [pc, #216]	; (8005738 <InitGSM+0x2a4>)
 800565e:	f7fd fff1 	bl	8003644 <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 8005662:	2200      	movs	r2, #0
 8005664:	9702      	str	r7, [sp, #8]
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	0021      	movs	r1, r4
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	4b33      	ldr	r3, [pc, #204]	; (800573c <InitGSM+0x2a8>)
 800566e:	0010      	movs	r0, r2
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	0023      	movs	r3, r4
 8005674:	f7ff fb90 	bl	8004d98 <GetGSMReply>
 8005678:	f7fa fd46 	bl	8000108 <strlen>
						if (i > 0)
 800567c:	2800      	cmp	r0, #0
 800567e:	d0ad      	beq.n	80055dc <InitGSM+0x148>
							HAL_Delay(3000);
 8005680:	482f      	ldr	r0, [pc, #188]	; (8005740 <InitGSM+0x2ac>)
 8005682:	f001 f9db 	bl	8006a3c <HAL_Delay>
								SendGSMCode(" AT+QENG=1,4");
 8005686:	482f      	ldr	r0, [pc, #188]	; (8005744 <InitGSM+0x2b0>)
 8005688:	f7fd ffdc 	bl	8003644 <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 800568c:	2200      	movs	r2, #0
 800568e:	9702      	str	r7, [sp, #8]
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	0021      	movs	r1, r4
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <InitGSM+0x2b4>)
 8005698:	0010      	movs	r0, r2
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	0023      	movs	r3, r4
 800569e:	f7ff fb7b 	bl	8004d98 <GetGSMReply>
 80056a2:	f7fa fd31 	bl	8000108 <strlen>
 80056a6:	1e05      	subs	r5, r0, #0
								if (i > 0)
 80056a8:	d098      	beq.n	80055dc <InitGSM+0x148>
									HAL_Delay(1000);
 80056aa:	0030      	movs	r0, r6
 80056ac:	f001 f9c6 	bl	8006a3c <HAL_Delay>
									if (GSMProf == 0)
 80056b0:	4b26      	ldr	r3, [pc, #152]	; (800574c <InitGSM+0x2b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d116      	bne.n	80056e6 <InitGSM+0x252>
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
 80056b8:	4825      	ldr	r0, [pc, #148]	; (8005750 <InitGSM+0x2bc>)
 80056ba:	f7fd fe3b 	bl	8003334 <Debug_Tx>
										SetupGPRS("taisysnet"); // taisysnet");
 80056be:	4825      	ldr	r0, [pc, #148]	; (8005754 <InitGSM+0x2c0>)
										SetupGPRS("bsnlnet"); // taisysnet");
 80056c0:	f7ff fd7a 	bl	80051b8 <SetupGPRS>
									HAL_Delay(1000);
 80056c4:	0030      	movs	r0, r6
 80056c6:	f001 f9b9 	bl	8006a3c <HAL_Delay>
									Debug_Tx("_____________Operator again_____________________________");
 80056ca:	4823      	ldr	r0, [pc, #140]	; (8005758 <InitGSM+0x2c4>)
 80056cc:	f7fd fe32 	bl	8003334 <Debug_Tx>
									HAL_Delay(1000);
 80056d0:	0030      	movs	r0, r6
 80056d2:	f001 f9b3 	bl	8006a3c <HAL_Delay>
									SetTCPMux();
 80056d6:	f7ff fd51 	bl	800517c <SetTCPMux>
									HAL_Delay(1000);
 80056da:	0030      	movs	r0, r6
 80056dc:	f001 f9ae 	bl	8006a3c <HAL_Delay>
									SetTCPMux();
 80056e0:	f7ff fd4c 	bl	800517c <SetTCPMux>
 80056e4:	e77b      	b.n	80055de <InitGSM+0x14a>
									else if (GSMProf == 1)
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d1ec      	bne.n	80056c4 <InitGSM+0x230>
										Debug_Tx("_____________BSNL APN SET_____________________________");
 80056ea:	481c      	ldr	r0, [pc, #112]	; (800575c <InitGSM+0x2c8>)
 80056ec:	f7fd fe22 	bl	8003334 <Debug_Tx>
										SetupGPRS("bsnlnet"); // taisysnet");
 80056f0:	481b      	ldr	r0, [pc, #108]	; (8005760 <InitGSM+0x2cc>)
 80056f2:	e7e5      	b.n	80056c0 <InitGSM+0x22c>
 80056f4:	00001388 	.word	0x00001388
 80056f8:	080119ef 	.word	0x080119ef
 80056fc:	08011541 	.word	0x08011541
 8005700:	200000c8 	.word	0x200000c8
 8005704:	08010feb 	.word	0x08010feb
 8005708:	080119f5 	.word	0x080119f5
 800570c:	08010f28 	.word	0x08010f28
 8005710:	08011a08 	.word	0x08011a08
 8005714:	08011a1a 	.word	0x08011a1a
 8005718:	08011a2d 	.word	0x08011a2d
 800571c:	08011a39 	.word	0x08011a39
 8005720:	08011a61 	.word	0x08011a61
 8005724:	08011a6c 	.word	0x08011a6c
 8005728:	08011a93 	.word	0x08011a93
 800572c:	08011a9e 	.word	0x08011a9e
 8005730:	08011ab8 	.word	0x08011ab8
 8005734:	08011ac3 	.word	0x08011ac3
 8005738:	08011af0 	.word	0x08011af0
 800573c:	08011aff 	.word	0x08011aff
 8005740:	00000bb8 	.word	0x00000bb8
 8005744:	08011b2b 	.word	0x08011b2b
 8005748:	08011b38 	.word	0x08011b38
 800574c:	2000009c 	.word	0x2000009c
 8005750:	08011b5f 	.word	0x08011b5f
 8005754:	08011b98 	.word	0x08011b98
 8005758:	08011be1 	.word	0x08011be1
 800575c:	08011ba2 	.word	0x08011ba2
 8005760:	08011bd9 	.word	0x08011bd9

08005764 <GSMSigQuality>:
{
 8005764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GSMSignal = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	4d21      	ldr	r5, [pc, #132]	; (80057f0 <GSMSigQuality+0x8c>)
	SendGSMCode(" AT+CSQ");
 800576a:	4822      	ldr	r0, [pc, #136]	; (80057f4 <GSMSigQuality+0x90>)
	GSMSignal = 0;
 800576c:	602b      	str	r3, [r5, #0]
	SendGSMCode(" AT+CSQ");
 800576e:	f7fd ff69 	bl	8003644 <SendGSMCode>
	HAL_Delay(100);
 8005772:	2064      	movs	r0, #100	; 0x64
 8005774:	f001 f962 	bl	8006a3c <HAL_Delay>
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8005778:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <GSMSigQuality+0x94>)
 800577a:	4b20      	ldr	r3, [pc, #128]	; (80057fc <GSMSigQuality+0x98>)
 800577c:	9202      	str	r2, [sp, #8]
 800577e:	4a20      	ldr	r2, [pc, #128]	; (8005800 <GSMSigQuality+0x9c>)
 8005780:	4920      	ldr	r1, [pc, #128]	; (8005804 <GSMSigQuality+0xa0>)
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	2000      	movs	r0, #0
 8005786:	9201      	str	r2, [sp, #4]
 8005788:	4a1f      	ldr	r2, [pc, #124]	; (8005808 <GSMSigQuality+0xa4>)
 800578a:	9200      	str	r2, [sp, #0]
 800578c:	2205      	movs	r2, #5
 800578e:	f7ff fb03 	bl	8004d98 <GetGSMReply>
 8005792:	2100      	movs	r1, #0
 8005794:	f006 fcb4 	bl	800c100 <strtod>
 8005798:	f7fd fcdc 	bl	8003154 <__aeabi_d2f>
	if (GSMSignal > 5)
 800579c:	491b      	ldr	r1, [pc, #108]	; (800580c <GSMSigQuality+0xa8>)
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 800579e:	6028      	str	r0, [r5, #0]
	if (GSMSignal > 5)
 80057a0:	f7fa feb2 	bl	8000508 <__aeabi_fcmpgt>
 80057a4:	4e1a      	ldr	r6, [pc, #104]	; (8005810 <GSMSigQuality+0xac>)
 80057a6:	1e04      	subs	r4, r0, #0
 80057a8:	d00e      	beq.n	80057c8 <GSMSigQuality+0x64>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 80057aa:	481a      	ldr	r0, [pc, #104]	; (8005814 <GSMSigQuality+0xb0>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	2102      	movs	r1, #2
 80057b0:	f001 ff66 	bl	8007680 <HAL_GPIO_WritePin>
		ServerConnected = 1;
 80057b4:	2301      	movs	r3, #1
		Debug_Tx("GSM HIGH");
 80057b6:	4818      	ldr	r0, [pc, #96]	; (8005818 <GSMSigQuality+0xb4>)
		ServerConnected = 1;
 80057b8:	6033      	str	r3, [r6, #0]
		Debug_Tx("GSM HIGH");
 80057ba:	f7fd fdbb 	bl	8003334 <Debug_Tx>
	return (GSMSignal); // must be higher than 5 ,range 0-33
 80057be:	6828      	ldr	r0, [r5, #0]
 80057c0:	f7fb fd7e 	bl	80012c0 <__aeabi_f2iz>
}
 80057c4:	b004      	add	sp, #16
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
		Debug_Tx("GSM low");
 80057c8:	4814      	ldr	r0, [pc, #80]	; (800581c <GSMSigQuality+0xb8>)
 80057ca:	f7fd fdb3 	bl	8003334 <Debug_Tx>
		Debug_Tx("GSM No Signal");
 80057ce:	4814      	ldr	r0, [pc, #80]	; (8005820 <GSMSigQuality+0xbc>)
 80057d0:	f7fd fdb0 	bl	8003334 <Debug_Tx>
		gprsok = 0;
 80057d4:	4b13      	ldr	r3, [pc, #76]	; (8005824 <GSMSigQuality+0xc0>)
		ServerConnected = 0;
 80057d6:	6034      	str	r4, [r6, #0]
		gprsok = 0;
 80057d8:	601c      	str	r4, [r3, #0]
		restartGSMuart();
 80057da:	f7ff fac7 	bl	8004d6c <restartGSMuart>
		Debug_Tx("GSMTRstarted");
 80057de:	4812      	ldr	r0, [pc, #72]	; (8005828 <GSMSigQuality+0xc4>)
 80057e0:	f7fd fda8 	bl	8003334 <Debug_Tx>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 80057e4:	0022      	movs	r2, r4
 80057e6:	2102      	movs	r1, #2
 80057e8:	480a      	ldr	r0, [pc, #40]	; (8005814 <GSMSigQuality+0xb0>)
 80057ea:	f001 ff49 	bl	8007680 <HAL_GPIO_WritePin>
 80057ee:	e7e6      	b.n	80057be <GSMSigQuality+0x5a>
 80057f0:	200011c8 	.word	0x200011c8
 80057f4:	08011c1a 	.word	0x08011c1a
 80057f8:	08011660 	.word	0x08011660
 80057fc:	08011c93 	.word	0x08011c93
 8005800:	200000c8 	.word	0x200000c8
 8005804:	08011c22 	.word	0x08011c22
 8005808:	08011c28 	.word	0x08011c28
 800580c:	40a00000 	.word	0x40a00000
 8005810:	200033b4 	.word	0x200033b4
 8005814:	50000c00 	.word	0x50000c00
 8005818:	08011c46 	.word	0x08011c46
 800581c:	08011c4f 	.word	0x08011c4f
 8005820:	08011c57 	.word	0x08011c57
 8005824:	20003590 	.word	0x20003590
 8005828:	08011c65 	.word	0x08011c65

0800582c <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 800582c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ClearQueue();
 800582e:	f7fe fbc1 	bl	8003fb4 <ClearQueue>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8005832:	4c07      	ldr	r4, [pc, #28]	; (8005850 <initFirstRun+0x24>)
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <initFirstRun+0x28>)
 8005836:	0022      	movs	r2, r4
 8005838:	0021      	movs	r1, r4
 800583a:	4807      	ldr	r0, [pc, #28]	; (8005858 <initFirstRun+0x2c>)
 800583c:	3461      	adds	r4, #97	; 0x61
 800583e:	320c      	adds	r2, #12
 8005840:	3132      	adds	r1, #50	; 0x32
 8005842:	9402      	str	r4, [sp, #8]
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	301d      	adds	r0, #29
 800584a:	f7fe fbbd 	bl	8003fc8 <writeConfig>
}
 800584e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8005850:	08010d48 	.word	0x08010d48
 8005854:	08011c72 	.word	0x08011c72
 8005858:	08010dc8 	.word	0x08010dc8

0800585c <ReadAllGPIO>:
void ReadAllGPIO(){
 800585c:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(StatusStrng,0,20);
 800585e:	4b3f      	ldr	r3, [pc, #252]	; (800595c <ReadAllGPIO+0x100>)
void ReadAllGPIO(){
 8005860:	b08d      	sub	sp, #52	; 0x34
	memset(StatusStrng,0,20);
 8005862:	2214      	movs	r2, #20
 8005864:	2100      	movs	r1, #0
 8005866:	0018      	movs	r0, r3
 8005868:	001d      	movs	r5, r3
 800586a:	f007 fcd7 	bl	800d21c <memset>
	memset(Dig_io,0,30);
 800586e:	4b3c      	ldr	r3, [pc, #240]	; (8005960 <ReadAllGPIO+0x104>)
 8005870:	221e      	movs	r2, #30
 8005872:	0018      	movs	r0, r3
 8005874:	2100      	movs	r1, #0
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 8005876:	2780      	movs	r7, #128	; 0x80
 8005878:	9306      	str	r3, [sp, #24]
 800587a:	f007 fccf 	bl	800d21c <memset>
 800587e:	20a0      	movs	r0, #160	; 0xa0
 8005880:	017f      	lsls	r7, r7, #5
 8005882:	0039      	movs	r1, r7
 8005884:	05c0      	lsls	r0, r0, #23
 8005886:	f001 fef5 	bl	8007674 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 800588a:	2180      	movs	r1, #128	; 0x80
	Dig_in[0]=Read_DI_IN1();
 800588c:	4c35      	ldr	r4, [pc, #212]	; (8005964 <ReadAllGPIO+0x108>)
 800588e:	4e36      	ldr	r6, [pc, #216]	; (8005968 <ReadAllGPIO+0x10c>)
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 8005890:	6020      	str	r0, [r4, #0]
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 8005892:	0109      	lsls	r1, r1, #4
 8005894:	0030      	movs	r0, r6
 8005896:	f001 feed 	bl	8007674 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 800589a:	0039      	movs	r1, r7
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 800589c:	6060      	str	r0, [r4, #4]
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 800589e:	0030      	movs	r0, r6
 80058a0:	f001 fee8 	bl	8007674 <HAL_GPIO_ReadPin>
 80058a4:	60a0      	str	r0, [r4, #8]
	MAINS_STATE=Read_DI_MAINS_STATE();
 80058a6:	f7fd fd75 	bl	8003394 <Read_DI_MAINS_STATE>
 80058aa:	4b30      	ldr	r3, [pc, #192]	; (800596c <ReadAllGPIO+0x110>)
 80058ac:	9307      	str	r3, [sp, #28]
 80058ae:	6018      	str	r0, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 80058b0:	f7fd fd7a 	bl	80033a8 <Read_DI_ACC_STATE>
 80058b4:	4b2e      	ldr	r3, [pc, #184]	; (8005970 <ReadAllGPIO+0x114>)
 80058b6:	9308      	str	r3, [sp, #32]
 80058b8:	6018      	str	r0, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 80058ba:	f7fd fd7f 	bl	80033bc <Read_DI_BOX_STATE>
 80058be:	4b2d      	ldr	r3, [pc, #180]	; (8005974 <ReadAllGPIO+0x118>)
 80058c0:	9309      	str	r3, [sp, #36]	; 0x24
 80058c2:	7018      	strb	r0, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 80058c4:	f7fd fd88 	bl	80033d8 <Read_DI_SOS_STATE>
 80058c8:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <ReadAllGPIO+0x11c>)
 80058ca:	930a      	str	r3, [sp, #40]	; 0x28
 80058cc:	6018      	str	r0, [r3, #0]
	EXT_B=Read_EXT_B_SENSE();
 80058ce:	f7fd fd0d 	bl	80032ec <Read_EXT_B_SENSE>
 80058d2:	4b2a      	ldr	r3, [pc, #168]	; (800597c <ReadAllGPIO+0x120>)
 80058d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d6:	6018      	str	r0, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 80058d8:	f7fd fd1a 	bl	8003310 <Read_INT_B_SENSE>
 80058dc:	4f28      	ldr	r7, [pc, #160]	; (8005980 <ReadAllGPIO+0x124>)
 80058de:	6038      	str	r0, [r7, #0]
	adc[0]=Read_ADC1();
 80058e0:	f7fd fcdc 	bl	800329c <Read_ADC1>
 80058e4:	4e27      	ldr	r6, [pc, #156]	; (8005984 <ReadAllGPIO+0x128>)
 80058e6:	6030      	str	r0, [r6, #0]
	adc[1]=Read_ADC2();
 80058e8:	f7fd fcec 	bl	80032c4 <Read_ADC2>
	memset(StatusStrng,0,20);
 80058ec:	2214      	movs	r2, #20
	adc[1]=Read_ADC2();
 80058ee:	6070      	str	r0, [r6, #4]
	memset(StatusStrng,0,20);
 80058f0:	2100      	movs	r1, #0
 80058f2:	0028      	movs	r0, r5
 80058f4:	f007 fc92 	bl	800d21c <memset>
	memset(Dig_io,0,30);
 80058f8:	221e      	movs	r2, #30
 80058fa:	2100      	movs	r1, #0
 80058fc:	9806      	ldr	r0, [sp, #24]
 80058fe:	f007 fc8d 	bl	800d21c <memset>
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 8005902:	4b21      	ldr	r3, [pc, #132]	; (8005988 <ReadAllGPIO+0x12c>)
 8005904:	4921      	ldr	r1, [pc, #132]	; (800598c <ReadAllGPIO+0x130>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	9806      	ldr	r0, [sp, #24]
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	4b20      	ldr	r3, [pc, #128]	; (8005990 <ReadAllGPIO+0x134>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	9302      	str	r3, [sp, #8]
 8005912:	4b20      	ldr	r3, [pc, #128]	; (8005994 <ReadAllGPIO+0x138>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	cc0c      	ldmia	r4!, {r2, r3}
 800591e:	f007 fc11 	bl	800d144 <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 8005922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005924:	4c1c      	ldr	r4, [pc, #112]	; (8005998 <ReadAllGPIO+0x13c>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	9305      	str	r3, [sp, #20]
 800592a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	6838      	ldr	r0, [r7, #0]
 8005932:	f7fd fbc7 	bl	80030c4 <__aeabi_f2d>
 8005936:	9002      	str	r0, [sp, #8]
 8005938:	9103      	str	r1, [sp, #12]
 800593a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	f7fd fbc1 	bl	80030c4 <__aeabi_f2d>
 8005942:	9000      	str	r0, [sp, #0]
 8005944:	9101      	str	r1, [sp, #4]
 8005946:	9b07      	ldr	r3, [sp, #28]
 8005948:	9a08      	ldr	r2, [sp, #32]
 800594a:	0021      	movs	r1, r4
 800594c:	0028      	movs	r0, r5
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	f007 fbf7 	bl	800d144 <siprintf>
}
 8005956:	b00d      	add	sp, #52	; 0x34
 8005958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	200033bc 	.word	0x200033bc
 8005960:	2000048c 	.word	0x2000048c
 8005964:	20000480 	.word	0x20000480
 8005968:	50000400 	.word	0x50000400
 800596c:	20001318 	.word	0x20001318
 8005970:	20000304 	.word	0x20000304
 8005974:	20000090 	.word	0x20000090
 8005978:	2000339c 	.word	0x2000339c
 800597c:	200004b4 	.word	0x200004b4
 8005980:	200012e4 	.word	0x200012e4
 8005984:	20003408 	.word	0x20003408
 8005988:	20003ee4 	.word	0x20003ee4
 800598c:	08011c80 	.word	0x08011c80
 8005990:	200004b0 	.word	0x200004b0
 8005994:	200004ac 	.word	0x200004ac
 8005998:	08011c95 	.word	0x08011c95

0800599c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800599c:	b570      	push	{r4, r5, r6, lr}
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 800599e:	2104      	movs	r1, #4
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80059a0:	0004      	movs	r4, r0
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 80059a2:	4823      	ldr	r0, [pc, #140]	; (8005a30 <HAL_UART_RxCpltCallback+0x94>)
 80059a4:	f001 fe72 	bl	800768c <HAL_GPIO_TogglePin>
	if(huart==&huart2){
 80059a8:	4d22      	ldr	r5, [pc, #136]	; (8005a34 <HAL_UART_RxCpltCallback+0x98>)
 80059aa:	42ac      	cmp	r4, r5
 80059ac:	d125      	bne.n	80059fa <HAL_UART_RxCpltCallback+0x5e>
		if(dnlfile==0){
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <HAL_UART_RxCpltCallback+0x9c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d120      	bne.n	80059f8 <HAL_UART_RxCpltCallback+0x5c>
		if(strlen((char*)gpsData)>10){
 80059b6:	4c21      	ldr	r4, [pc, #132]	; (8005a3c <HAL_UART_RxCpltCallback+0xa0>)
 80059b8:	0020      	movs	r0, r4
 80059ba:	f7fa fba5 	bl	8000108 <strlen>
 80059be:	280a      	cmp	r0, #10
 80059c0:	d908      	bls.n	80059d4 <HAL_UART_RxCpltCallback+0x38>
			ProcessGPS((char*)gpsData);
 80059c2:	0020      	movs	r0, r4
 80059c4:	f7ff f96e 	bl	8004ca4 <ProcessGPS>
			getGPSString();
 80059c8:	f7fe fc94 	bl	80042f4 <getGPSString>
			timedWork();
 80059cc:	f7fe ffcc 	bl	8004968 <timedWork>
			ReadAllGPIO();
 80059d0:	f7ff ff44 	bl	800585c <ReadAllGPIO>
		if(DMAon==1){
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_UART_RxCpltCallback+0xa4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10d      	bne.n	80059f8 <HAL_UART_RxCpltCallback+0x5c>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80059dc:	7823      	ldrb	r3, [r4, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <HAL_UART_RxCpltCallback+0x50>
 80059e2:	2100      	movs	r1, #0
 80059e4:	0020      	movs	r0, r4
 80059e6:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <HAL_UART_RxCpltCallback+0xa8>)
 80059e8:	f007 fc18 	bl	800d21c <memset>
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 80059ec:	22e1      	movs	r2, #225	; 0xe1
 80059ee:	0021      	movs	r1, r4
 80059f0:	0092      	lsls	r2, r2, #2
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80059f2:	0028      	movs	r0, r5
 80059f4:	f004 f874 	bl	8009ae0 <HAL_UART_Receive_DMA>
}
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
	if(huart==&huart1){
 80059fa:	4d13      	ldr	r5, [pc, #76]	; (8005a48 <HAL_UART_RxCpltCallback+0xac>)
 80059fc:	42ac      	cmp	r4, r5
 80059fe:	d1fb      	bne.n	80059f8 <HAL_UART_RxCpltCallback+0x5c>
		if(strlen((char*)GSMData)<900){
 8005a00:	4c12      	ldr	r4, [pc, #72]	; (8005a4c <HAL_UART_RxCpltCallback+0xb0>)
 8005a02:	0020      	movs	r0, r4
 8005a04:	f7fa fb80 	bl	8000108 <strlen>
 8005a08:	23e1      	movs	r3, #225	; 0xe1
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4298      	cmp	r0, r3
 8005a0e:	d206      	bcs.n	8005a1e <HAL_UART_RxCpltCallback+0x82>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8005a10:	490f      	ldr	r1, [pc, #60]	; (8005a50 <HAL_UART_RxCpltCallback+0xb4>)
 8005a12:	780b      	ldrb	r3, [r1, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_UART_RxCpltCallback+0x82>
 8005a18:	0020      	movs	r0, r4
 8005a1a:	f007 fc07 	bl	800d22c <strcat>
		if(DMAon==1){
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <HAL_UART_RxCpltCallback+0xa4>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	2a01      	cmp	r2, #1
 8005a24:	d1e8      	bne.n	80059f8 <HAL_UART_RxCpltCallback+0x5c>
		GSMBuff[0]=0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	4909      	ldr	r1, [pc, #36]	; (8005a50 <HAL_UART_RxCpltCallback+0xb4>)
 8005a2a:	700b      	strb	r3, [r1, #0]
 8005a2c:	e7e1      	b.n	80059f2 <HAL_UART_RxCpltCallback+0x56>
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	50000c00 	.word	0x50000c00
 8005a34:	20003d84 	.word	0x20003d84
 8005a38:	20003588 	.word	0x20003588
 8005a3c:	20003594 	.word	0x20003594
 8005a40:	20000094 	.word	0x20000094
 8005a44:	000003e7 	.word	0x000003e7
 8005a48:	20003cf0 	.word	0x20003cf0
 8005a4c:	20000545 	.word	0x20000545
 8005a50:	20000544 	.word	0x20000544

08005a54 <GetHead>:
void GetHead(){
 8005a54:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(Head,0,100);
 8005a56:	4c91      	ldr	r4, [pc, #580]	; (8005c9c <GetHead+0x248>)
 8005a58:	2264      	movs	r2, #100	; 0x64
void GetHead(){
 8005a5a:	b087      	sub	sp, #28
	memset(Head,0,100);
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	0020      	movs	r0, r4
 8005a60:	f007 fbdc 	bl	800d21c <memset>
	strcpy(Head,InitStr);
 8005a64:	498e      	ldr	r1, [pc, #568]	; (8005ca0 <GetHead+0x24c>)
 8005a66:	0020      	movs	r0, r4
 8005a68:	f007 fd8d 	bl	800d586 <strcpy>
	strcat(Head,",");
 8005a6c:	498d      	ldr	r1, [pc, #564]	; (8005ca4 <GetHead+0x250>)
 8005a6e:	0020      	movs	r0, r4
 8005a70:	f007 fbdc 	bl	800d22c <strcat>
	strcat(Head,VerStr);
 8005a74:	498c      	ldr	r1, [pc, #560]	; (8005ca8 <GetHead+0x254>)
 8005a76:	0020      	movs	r0, r4
 8005a78:	f007 fbd8 	bl	800d22c <strcat>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 8005a7c:	4d8b      	ldr	r5, [pc, #556]	; (8005cac <GetHead+0x258>)
 8005a7e:	4b8c      	ldr	r3, [pc, #560]	; (8005cb0 <GetHead+0x25c>)
 8005a80:	498c      	ldr	r1, [pc, #560]	; (8005cb4 <GetHead+0x260>)
 8005a82:	682a      	ldr	r2, [r5, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	9103      	str	r1, [sp, #12]
 8005a88:	3201      	adds	r2, #1
 8005a8a:	d166      	bne.n	8005b5a <GetHead+0x106>
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d164      	bne.n	8005b5a <GetHead+0x106>
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	3b02      	subs	r3, #2
 8005a94:	600b      	str	r3, [r1, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 8005a96:	4a88      	ldr	r2, [pc, #544]	; (8005cb8 <GetHead+0x264>)
 8005a98:	4b88      	ldr	r3, [pc, #544]	; (8005cbc <GetHead+0x268>)
 8005a9a:	4989      	ldr	r1, [pc, #548]	; (8005cc0 <GetHead+0x26c>)
 8005a9c:	9201      	str	r2, [sp, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	9104      	str	r1, [sp, #16]
 8005aa4:	3201      	adds	r2, #1
 8005aa6:	d164      	bne.n	8005b72 <GetHead+0x11e>
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d162      	bne.n	8005b72 <GetHead+0x11e>
 8005aac:	9a01      	ldr	r2, [sp, #4]
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	000a      	movs	r2, r1
 8005ab2:	3b02      	subs	r3, #2
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 8005ab4:	6013      	str	r3, [r2, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8005ab6:	4b83      	ldr	r3, [pc, #524]	; (8005cc4 <GetHead+0x270>)
 8005ab8:	4983      	ldr	r1, [pc, #524]	; (8005cc8 <GetHead+0x274>)
 8005aba:	681f      	ldr	r7, [r3, #0]
 8005abc:	1c38      	adds	r0, r7, #0
 8005abe:	f7fa fd0f 	bl	80004e0 <__aeabi_fcmplt>
 8005ac2:	1e43      	subs	r3, r0, #1
 8005ac4:	4198      	sbcs	r0, r3
 8005ac6:	4b81      	ldr	r3, [pc, #516]	; (8005ccc <GetHead+0x278>)
 8005ac8:	0006      	movs	r6, r0
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	3201      	adds	r2, #1
 8005ace:	d106      	bne.n	8005ade <GetHead+0x8a>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d004      	beq.n	8005ade <GetHead+0x8a>
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	4b7d      	ldr	r3, [pc, #500]	; (8005cd0 <GetHead+0x27c>)
 8005ada:	3a02      	subs	r2, #2
 8005adc:	601a      	str	r2, [r3, #0]
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 8005ade:	497a      	ldr	r1, [pc, #488]	; (8005cc8 <GetHead+0x274>)
 8005ae0:	1c38      	adds	r0, r7, #0
 8005ae2:	f7fa fd1b 	bl	800051c <__aeabi_fcmpge>
 8005ae6:	1e43      	subs	r3, r0, #1
 8005ae8:	4198      	sbcs	r0, r3
 8005aea:	4b79      	ldr	r3, [pc, #484]	; (8005cd0 <GetHead+0x27c>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	3201      	adds	r2, #1
 8005af0:	d106      	bne.n	8005b00 <GetHead+0xac>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d004      	beq.n	8005b00 <GetHead+0xac>
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	4b74      	ldr	r3, [pc, #464]	; (8005ccc <GetHead+0x278>)
 8005afc:	3a02      	subs	r2, #2
 8005afe:	601a      	str	r2, [r3, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 8005b00:	4f74      	ldr	r7, [pc, #464]	; (8005cd4 <GetHead+0x280>)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	d107      	bne.n	8005b18 <GetHead+0xc4>
 8005b08:	2e00      	cmp	r6, #0
 8005b0a:	d005      	beq.n	8005b18 <GetHead+0xc4>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	2201      	movs	r2, #1
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	4b71      	ldr	r3, [pc, #452]	; (8005cd8 <GetHead+0x284>)
 8005b14:	4252      	negs	r2, r2
 8005b16:	601a      	str	r2, [r3, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 8005b18:	4e6f      	ldr	r6, [pc, #444]	; (8005cd8 <GetHead+0x284>)
 8005b1a:	6833      	ldr	r3, [r6, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	d105      	bne.n	8005b2c <GetHead+0xd8>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d003      	beq.n	8005b2c <GetHead+0xd8>
 8005b24:	2301      	movs	r3, #1
 8005b26:	6033      	str	r3, [r6, #0]
 8005b28:	3b02      	subs	r3, #2
 8005b2a:	603b      	str	r3, [r7, #0]
	if(GSMSignal<=10){
 8005b2c:	4b6b      	ldr	r3, [pc, #428]	; (8005cdc <GetHead+0x288>)
 8005b2e:	496c      	ldr	r1, [pc, #432]	; (8005ce0 <GetHead+0x28c>)
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	f7fa fcdf 	bl	80004f4 <__aeabi_fcmple>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d027      	beq.n	8005b8a <GetHead+0x136>
		strcat(Head,AlartStr_HistoryPVTData);
 8005b3a:	496a      	ldr	r1, [pc, #424]	; (8005ce4 <GetHead+0x290>)
 8005b3c:	0020      	movs	r0, r4
 8005b3e:	f007 fb75 	bl	800d22c <strcat>
			strcat(Head,PacketStatusStrHist);
 8005b42:	4969      	ldr	r1, [pc, #420]	; (8005ce8 <GetHead+0x294>)
		strcat(Head,PacketStatusStrLive);
 8005b44:	0020      	movs	r0, r4
 8005b46:	f007 fb71 	bl	800d22c <strcat>
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 8005b4a:	4b68      	ldr	r3, [pc, #416]	; (8005cec <GetHead+0x298>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	2a00      	cmp	r2, #0
 8005b50:	dd01      	ble.n	8005b56 <GetHead+0x102>
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
}
 8005b56:	b007      	add	sp, #28
 8005b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 8005b5a:	9a03      	ldr	r2, [sp, #12]
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	3201      	adds	r2, #1
 8005b60:	d199      	bne.n	8005a96 <GetHead+0x42>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d197      	bne.n	8005a96 <GetHead+0x42>
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	3b02      	subs	r3, #2
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	e791      	b.n	8005a96 <GetHead+0x42>
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 8005b72:	9a04      	ldr	r2, [sp, #16]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	3201      	adds	r2, #1
 8005b78:	d19d      	bne.n	8005ab6 <GetHead+0x62>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d19b      	bne.n	8005ab6 <GetHead+0x62>
 8005b7e:	9a04      	ldr	r2, [sp, #16]
 8005b80:	3301      	adds	r3, #1
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	9a01      	ldr	r2, [sp, #4]
 8005b86:	3b02      	subs	r3, #2
 8005b88:	e794      	b.n	8005ab4 <GetHead+0x60>
	else if(getSpeed()>SpeedThr){
 8005b8a:	4b59      	ldr	r3, [pc, #356]	; (8005cf0 <GetHead+0x29c>)
	return GPSInfo.speed;
 8005b8c:	4a59      	ldr	r2, [pc, #356]	; (8005cf4 <GetHead+0x2a0>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	6991      	ldr	r1, [r2, #24]
 8005b92:	f7fa fca5 	bl	80004e0 <__aeabi_fcmplt>
		strcat(Head,AlartStr_OverSpeed);
 8005b96:	4958      	ldr	r1, [pc, #352]	; (8005cf8 <GetHead+0x2a4>)
	else if(getSpeed()>SpeedThr){
 8005b98:	9002      	str	r0, [sp, #8]
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d17a      	bne.n	8005c94 <GetHead+0x240>
	else if(EmergencyWireBreak>0){
 8005b9e:	4b57      	ldr	r3, [pc, #348]	; (8005cfc <GetHead+0x2a8>)
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dd08      	ble.n	8005bba <GetHead+0x166>
		strcat(Head,AlartStr_EmergencyWireBreak);
 8005ba8:	0020      	movs	r0, r4
 8005baa:	4955      	ldr	r1, [pc, #340]	; (8005d00 <GetHead+0x2ac>)
 8005bac:	f007 fb3e 	bl	800d22c <strcat>
		EmergencyWireBreak=0;
 8005bb0:	9b05      	ldr	r3, [sp, #20]
		EmergencyStateOFF=0;
 8005bb2:	9a02      	ldr	r2, [sp, #8]
 8005bb4:	601a      	str	r2, [r3, #0]
		strcat(Head,PacketStatusStrLive);
 8005bb6:	4953      	ldr	r1, [pc, #332]	; (8005d04 <GetHead+0x2b0>)
 8005bb8:	e7c4      	b.n	8005b44 <GetHead+0xf0>
	else if(AccGyroStatus==1){
 8005bba:	4b53      	ldr	r3, [pc, #332]	; (8005d08 <GetHead+0x2b4>)
		strcat(Head,AlartStr_HarshAcceleration);
 8005bbc:	4953      	ldr	r1, [pc, #332]	; (8005d0c <GetHead+0x2b8>)
	else if(AccGyroStatus==1){
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d067      	beq.n	8005c94 <GetHead+0x240>
		strcat(Head,AlartStr_HarshBreaking);
 8005bc4:	4952      	ldr	r1, [pc, #328]	; (8005d10 <GetHead+0x2bc>)
	else if(AccGyroStatus==2){
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d064      	beq.n	8005c94 <GetHead+0x240>
		strcat(Head,AlartStr_RashTurning);
 8005bca:	4952      	ldr	r1, [pc, #328]	; (8005d14 <GetHead+0x2c0>)
	else if(AccGyroStatus==3){
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d061      	beq.n	8005c94 <GetHead+0x240>
	else if(EmergencyStateON>0){
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd06      	ble.n	8005be4 <GetHead+0x190>
		strcat(Head,AlartStr_EmergencyStateON);
 8005bd6:	0020      	movs	r0, r4
 8005bd8:	494f      	ldr	r1, [pc, #316]	; (8005d18 <GetHead+0x2c4>)
 8005bda:	f007 fb27 	bl	800d22c <strcat>
		EmergencyStateON=0;
 8005bde:	9b02      	ldr	r3, [sp, #8]
		OTAParameterChange=0;
 8005be0:	602b      	str	r3, [r5, #0]
 8005be2:	e7e8      	b.n	8005bb6 <GetHead+0x162>
	else if(EmergencyStateOFF>0){
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dd05      	ble.n	8005bf8 <GetHead+0x1a4>
		strcat(Head,AlartStr_EmergencyStateOFF);
 8005bec:	0020      	movs	r0, r4
 8005bee:	494b      	ldr	r1, [pc, #300]	; (8005d1c <GetHead+0x2c8>)
 8005bf0:	f007 fb1c 	bl	800d22c <strcat>
		EmergencyStateOFF=0;
 8005bf4:	9b03      	ldr	r3, [sp, #12]
 8005bf6:	e7dc      	b.n	8005bb2 <GetHead+0x15e>
	else if(IgnitionTurnedON>0){
 8005bf8:	9b01      	ldr	r3, [sp, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	dd05      	ble.n	8005c0c <GetHead+0x1b8>
		strcat(Head,AlartStr_IgnitionTurnedON);
 8005c00:	0020      	movs	r0, r4
 8005c02:	4947      	ldr	r1, [pc, #284]	; (8005d20 <GetHead+0x2cc>)
 8005c04:	f007 fb12 	bl	800d22c <strcat>
		IgnitionTurnedON=0;
 8005c08:	9b01      	ldr	r3, [sp, #4]
 8005c0a:	e7d2      	b.n	8005bb2 <GetHead+0x15e>
	else if(IgnitionTurnedOFF>0){
 8005c0c:	9b04      	ldr	r3, [sp, #16]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	dd07      	ble.n	8005c24 <GetHead+0x1d0>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 8005c14:	0020      	movs	r0, r4
 8005c16:	4943      	ldr	r1, [pc, #268]	; (8005d24 <GetHead+0x2d0>)
 8005c18:	f007 fb08 	bl	800d22c <strcat>
		IgnitionTurnedOFF=0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9a04      	ldr	r2, [sp, #16]
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e7c8      	b.n	8005bb6 <GetHead+0x162>
	else if(BOX_STATE=='C'){
 8005c24:	4b40      	ldr	r3, [pc, #256]	; (8005d28 <GetHead+0x2d4>)
		strcat(Head,AlartStr_BoxTemper);
 8005c26:	4941      	ldr	r1, [pc, #260]	; (8005d2c <GetHead+0x2d8>)
	else if(BOX_STATE=='C'){
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b43      	cmp	r3, #67	; 0x43
 8005c2c:	d032      	beq.n	8005c94 <GetHead+0x240>
	else if(InternalBatterLow>0){
 8005c2e:	4d27      	ldr	r5, [pc, #156]	; (8005ccc <GetHead+0x278>)
		strcat(Head,AlartStr_InternalBatterLow);
 8005c30:	493f      	ldr	r1, [pc, #252]	; (8005d30 <GetHead+0x2dc>)
	else if(InternalBatterLow>0){
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	dc27      	bgt.n	8005c88 <GetHead+0x234>
	else if(InternalBatteryChargedAgain>0){
 8005c38:	4d25      	ldr	r5, [pc, #148]	; (8005cd0 <GetHead+0x27c>)
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 8005c3a:	493e      	ldr	r1, [pc, #248]	; (8005d34 <GetHead+0x2e0>)
	else if(InternalBatteryChargedAgain>0){
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dc22      	bgt.n	8005c88 <GetHead+0x234>
	else if(MainBatteryDisconnect>0){
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	dd06      	ble.n	8005c56 <GetHead+0x202>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 8005c48:	0020      	movs	r0, r4
 8005c4a:	493b      	ldr	r1, [pc, #236]	; (8005d38 <GetHead+0x2e4>)
 8005c4c:	f007 faee 	bl	800d22c <strcat>
		MainBatteryDisconnect=0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	e7af      	b.n	8005bb6 <GetHead+0x162>
	else if(MainBatteryReconnect>0){
 8005c56:	6833      	ldr	r3, [r6, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dd06      	ble.n	8005c6a <GetHead+0x216>
		strcat(Head,AlartStr_MainBatteryReconnect);
 8005c5c:	0020      	movs	r0, r4
 8005c5e:	4937      	ldr	r1, [pc, #220]	; (8005d3c <GetHead+0x2e8>)
 8005c60:	f007 fae4 	bl	800d22c <strcat>
		MainBatteryReconnect=0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	e7a5      	b.n	8005bb6 <GetHead+0x162>
	else if(HistoryPVTData>0){
 8005c6a:	4d35      	ldr	r5, [pc, #212]	; (8005d40 <GetHead+0x2ec>)
		strcat(Head,AlartStr_HistoryPVTData);
 8005c6c:	491d      	ldr	r1, [pc, #116]	; (8005ce4 <GetHead+0x290>)
	else if(HistoryPVTData>0){
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dc09      	bgt.n	8005c88 <GetHead+0x234>
	else if(HealthPacket>0){
 8005c74:	4d33      	ldr	r5, [pc, #204]	; (8005d44 <GetHead+0x2f0>)
		strcat(Head,AlartStr_HealthPacket);
 8005c76:	4934      	ldr	r1, [pc, #208]	; (8005d48 <GetHead+0x2f4>)
	else if(HealthPacket>0){
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dc04      	bgt.n	8005c88 <GetHead+0x234>
	else if(OTAParameterChange>0){
 8005c7e:	4d33      	ldr	r5, [pc, #204]	; (8005d4c <GetHead+0x2f8>)
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dd05      	ble.n	8005c92 <GetHead+0x23e>
		strcat(Head,AlartStr_OTAParameterChange);
 8005c86:	4932      	ldr	r1, [pc, #200]	; (8005d50 <GetHead+0x2fc>)
 8005c88:	0020      	movs	r0, r4
 8005c8a:	f007 facf 	bl	800d22c <strcat>
		OTAParameterChange=0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e7a6      	b.n	8005be0 <GetHead+0x18c>
		strcat(Head,AlartStr_NormalPkt);
 8005c92:	4930      	ldr	r1, [pc, #192]	; (8005d54 <GetHead+0x300>)
 8005c94:	0020      	movs	r0, r4
 8005c96:	f007 fac9 	bl	800d22c <strcat>
 8005c9a:	e78c      	b.n	8005bb6 <GetHead+0x162>
 8005c9c:	20001244 	.word	0x20001244
 8005ca0:	200000a0 	.word	0x200000a0
 8005ca4:	08011c93 	.word	0x08011c93
 8005ca8:	200000b8 	.word	0x200000b8
 8005cac:	20000098 	.word	0x20000098
 8005cb0:	2000339c 	.word	0x2000339c
 8005cb4:	200004b8 	.word	0x200004b8
 8005cb8:	200012ec 	.word	0x200012ec
 8005cbc:	20001318 	.word	0x20001318
 8005cc0:	200012e8 	.word	0x200012e8
 8005cc4:	200012e4 	.word	0x200012e4
 8005cc8:	40400000 	.word	0x40400000
 8005ccc:	200012f0 	.word	0x200012f0
 8005cd0:	200012f4 	.word	0x200012f4
 8005cd4:	20001328 	.word	0x20001328
 8005cd8:	2000132c 	.word	0x2000132c
 8005cdc:	200011c8 	.word	0x200011c8
 8005ce0:	41200000 	.word	0x41200000
 8005ce4:	20000038 	.word	0x20000038
 8005ce8:	08011db8 	.word	0x08011db8
 8005cec:	2000031c 	.word	0x2000031c
 8005cf0:	200000b0 	.word	0x200000b0
 8005cf4:	200004f4 	.word	0x200004f4
 8005cf8:	20000080 	.word	0x20000080
 8005cfc:	200004bc 	.word	0x200004bc
 8005d00:	20000018 	.word	0x20000018
 8005d04:	200000aa 	.word	0x200000aa
 8005d08:	20000318 	.word	0x20000318
 8005d0c:	20000020 	.word	0x20000020
 8005d10:	20000028 	.word	0x20000028
 8005d14:	20000088 	.word	0x20000088
 8005d18:	20000010 	.word	0x20000010
 8005d1c:	20000008 	.word	0x20000008
 8005d20:	20000048 	.word	0x20000048
 8005d24:	20000040 	.word	0x20000040
 8005d28:	20000090 	.word	0x20000090
 8005d2c:	20000000 	.word	0x20000000
 8005d30:	20000050 	.word	0x20000050
 8005d34:	20000058 	.word	0x20000058
 8005d38:	20000060 	.word	0x20000060
 8005d3c:	20000068 	.word	0x20000068
 8005d40:	200012ac 	.word	0x200012ac
 8005d44:	200012a8 	.word	0x200012a8
 8005d48:	20000030 	.word	0x20000030
 8005d4c:	20001330 	.word	0x20001330
 8005d50:	20000078 	.word	0x20000078
 8005d54:	20000070 	.word	0x20000070

08005d58 <TestRun>:
void TestRun(){
 8005d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(errorlen>10){
 8005d5a:	4be3      	ldr	r3, [pc, #908]	; (80060e8 <TestRun+0x390>)
void TestRun(){
 8005d5c:	b085      	sub	sp, #20
	if(errorlen>10){
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b0a      	cmp	r3, #10
 8005d62:	dd0b      	ble.n	8005d7c <TestRun+0x24>
		Debug_Tx("GSMUART error rebooting device");
 8005d64:	48e1      	ldr	r0, [pc, #900]	; (80060ec <TestRun+0x394>)
 8005d66:	f7fd fae5 	bl	8003334 <Debug_Tx>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d6a:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d6e:	4be0      	ldr	r3, [pc, #896]	; (80060f0 <TestRun+0x398>)
 8005d70:	4ae0      	ldr	r2, [pc, #896]	; (80060f4 <TestRun+0x39c>)
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005d78:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8005d7a:	e7fd      	b.n	8005d78 <TestRun+0x20>
	printInt(seqNo);
 8005d7c:	4bde      	ldr	r3, [pc, #888]	; (80060f8 <TestRun+0x3a0>)
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	f7fe fb2c 	bl	80043dc <printInt>
	MAINS_STATE=Read_DI_MAINS_STATE();
 8005d84:	f7fd fb06 	bl	8003394 <Read_DI_MAINS_STATE>
 8005d88:	4bdc      	ldr	r3, [pc, #880]	; (80060fc <TestRun+0x3a4>)
 8005d8a:	6018      	str	r0, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 8005d8c:	f7fd fb0c 	bl	80033a8 <Read_DI_ACC_STATE>
 8005d90:	4bdb      	ldr	r3, [pc, #876]	; (8006100 <TestRun+0x3a8>)
 8005d92:	6018      	str	r0, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 8005d94:	f7fd fb12 	bl	80033bc <Read_DI_BOX_STATE>
 8005d98:	4bda      	ldr	r3, [pc, #872]	; (8006104 <TestRun+0x3ac>)
 8005d9a:	7018      	strb	r0, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 8005d9c:	f7fd fb1c 	bl	80033d8 <Read_DI_SOS_STATE>
 8005da0:	4bd9      	ldr	r3, [pc, #868]	; (8006108 <TestRun+0x3b0>)
 8005da2:	6018      	str	r0, [r3, #0]
	EXT_B=Read_EXT_B_SENSE();
 8005da4:	f7fd faa2 	bl	80032ec <Read_EXT_B_SENSE>
 8005da8:	4bd8      	ldr	r3, [pc, #864]	; (800610c <TestRun+0x3b4>)
 8005daa:	1c04      	adds	r4, r0, #0
 8005dac:	6018      	str	r0, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 8005dae:	f7fd faaf 	bl	8003310 <Read_INT_B_SENSE>
 8005db2:	4bd7      	ldr	r3, [pc, #860]	; (8006110 <TestRun+0x3b8>)
 8005db4:	6018      	str	r0, [r3, #0]
	adc[0]=Read_ADC1();
 8005db6:	f7fd fa71 	bl	800329c <Read_ADC1>
 8005dba:	4dd6      	ldr	r5, [pc, #856]	; (8006114 <TestRun+0x3bc>)
 8005dbc:	6028      	str	r0, [r5, #0]
	adc[1]=Read_ADC2();
 8005dbe:	f7fd fa81 	bl	80032c4 <Read_ADC2>
	if(EXT_B>7){
 8005dc2:	49d5      	ldr	r1, [pc, #852]	; (8006118 <TestRun+0x3c0>)
	adc[1]=Read_ADC2();
 8005dc4:	6068      	str	r0, [r5, #4]
	if(EXT_B>7){
 8005dc6:	1c20      	adds	r0, r4, #0
 8005dc8:	f7fa fb9e 	bl	8000508 <__aeabi_fcmpgt>
 8005dcc:	1e02      	subs	r2, r0, #0
 8005dce:	d100      	bne.n	8005dd2 <TestRun+0x7a>
 8005dd0:	e16a      	b.n	80060a8 <TestRun+0x350>
	if(val==1){
 8005dd2:	f7fd fb23 	bl	800341c <SET_LED_PWR.part.0>
memset(INSMSno,0,30);
 8005dd6:	4ed1      	ldr	r6, [pc, #836]	; (800611c <TestRun+0x3c4>)
 8005dd8:	221e      	movs	r2, #30
 8005dda:	2100      	movs	r1, #0
 8005ddc:	0030      	movs	r0, r6
 8005dde:	f007 fa1d 	bl	800d21c <memset>
memset(OUTSMSno,0,30);
 8005de2:	4dcf      	ldr	r5, [pc, #828]	; (8006120 <TestRun+0x3c8>)
 8005de4:	221e      	movs	r2, #30
 8005de6:	2100      	movs	r1, #0
 8005de8:	0028      	movs	r0, r5
 8005dea:	f007 fa17 	bl	800d21c <memset>
memset(EmgIP,0,50);
 8005dee:	4ccd      	ldr	r4, [pc, #820]	; (8006124 <TestRun+0x3cc>)
 8005df0:	2232      	movs	r2, #50	; 0x32
 8005df2:	2100      	movs	r1, #0
 8005df4:	0020      	movs	r0, r4
 8005df6:	f007 fa11 	bl	800d21c <memset>
memset(RegIP,0,50);
 8005dfa:	4bcb      	ldr	r3, [pc, #812]	; (8006128 <TestRun+0x3d0>)
 8005dfc:	2232      	movs	r2, #50	; 0x32
 8005dfe:	2100      	movs	r1, #0
 8005e00:	0018      	movs	r0, r3
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	f007 fa0a 	bl	800d21c <memset>
memset(TracIP,0,50);
 8005e08:	4bc8      	ldr	r3, [pc, #800]	; (800612c <TestRun+0x3d4>)
 8005e0a:	2232      	movs	r2, #50	; 0x32
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	2100      	movs	r1, #0
 8005e10:	9302      	str	r3, [sp, #8]
 8005e12:	f007 fa03 	bl	800d21c <memset>
memset(simop,0,25);
 8005e16:	4fc6      	ldr	r7, [pc, #792]	; (8006130 <TestRun+0x3d8>)
 8005e18:	2219      	movs	r2, #25
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	0038      	movs	r0, r7
 8005e1e:	f007 f9fd 	bl	800d21c <memset>
strcpy(INSMSno,readINSMSno());
 8005e22:	f7fe f9a3 	bl	800416c <readINSMSno>
 8005e26:	0001      	movs	r1, r0
 8005e28:	0030      	movs	r0, r6
 8005e2a:	f007 fbac 	bl	800d586 <strcpy>
strcpy(OUTSMSno,readOUTSMSno());
 8005e2e:	f7fe f9b3 	bl	8004198 <readOUTSMSno>
 8005e32:	0001      	movs	r1, r0
 8005e34:	0028      	movs	r0, r5
 8005e36:	f007 fba6 	bl	800d586 <strcpy>
strcpy(EmgIP,readEmgIP());
 8005e3a:	f7fe f9c3 	bl	80041c4 <readEmgIP>
 8005e3e:	0001      	movs	r1, r0
 8005e40:	0020      	movs	r0, r4
 8005e42:	f007 fba0 	bl	800d586 <strcpy>
strcpy(RegIP,readRegIP());
 8005e46:	f7fe f9d1 	bl	80041ec <readRegIP>
 8005e4a:	0001      	movs	r1, r0
 8005e4c:	9801      	ldr	r0, [sp, #4]
 8005e4e:	f007 fb9a 	bl	800d586 <strcpy>
strcpy(TracIP,readTracIP());
 8005e52:	f7fe f9e1 	bl	8004218 <readTracIP>
 8005e56:	0001      	movs	r1, r0
 8005e58:	9802      	ldr	r0, [sp, #8]
 8005e5a:	f007 fb94 	bl	800d586 <strcpy>
strcpy(simop, GSMSimOperator());
 8005e5e:	f7ff f839 	bl	8004ed4 <GSMSimOperator>
 8005e62:	0001      	movs	r1, r0
 8005e64:	0038      	movs	r0, r7
 8005e66:	f007 fb8e 	bl	800d586 <strcpy>
 8005e6a:	f000 fde1 	bl	8006a30 <HAL_GetTick>
	GSMCellInfo();
 8005e6e:	f7fd fced 	bl	800384c <GSMCellInfo>
	GetHead();
 8005e72:	f7ff fdef 	bl	8005a54 <GetHead>
	if (debug==122){
 8005e76:	4baf      	ldr	r3, [pc, #700]	; (8006134 <TestRun+0x3dc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b7a      	cmp	r3, #122	; 0x7a
 8005e7c:	d14e      	bne.n	8005f1c <TestRun+0x1c4>
		memset(DataString,0,300);
 8005e7e:	2296      	movs	r2, #150	; 0x96
 8005e80:	4cad      	ldr	r4, [pc, #692]	; (8006138 <TestRun+0x3e0>)
 8005e82:	0052      	lsls	r2, r2, #1
 8005e84:	2100      	movs	r1, #0
 8005e86:	0020      	movs	r0, r4
 8005e88:	f007 f9c8 	bl	800d21c <memset>
		strcat(DataString,"Head:");
 8005e8c:	49ab      	ldr	r1, [pc, #684]	; (800613c <TestRun+0x3e4>)
 8005e8e:	0020      	movs	r0, r4
 8005e90:	f007 f9cc 	bl	800d22c <strcat>
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 8005e94:	49aa      	ldr	r1, [pc, #680]	; (8006140 <TestRun+0x3e8>)
 8005e96:	0020      	movs	r0, r4
 8005e98:	f007 f9c8 	bl	800d22c <strcat>
 8005e9c:	49a9      	ldr	r1, [pc, #676]	; (8006144 <TestRun+0x3ec>)
 8005e9e:	0020      	movs	r0, r4
 8005ea0:	f007 f9c4 	bl	800d22c <strcat>
		strcat(DataString,Regno);strcat(DataString,"\nGPSDS:");
 8005ea4:	49a8      	ldr	r1, [pc, #672]	; (8006148 <TestRun+0x3f0>)
 8005ea6:	0020      	movs	r0, r4
 8005ea8:	f007 f9c0 	bl	800d22c <strcat>
 8005eac:	49a7      	ldr	r1, [pc, #668]	; (800614c <TestRun+0x3f4>)
 8005eae:	0020      	movs	r0, r4
 8005eb0:	f007 f9bc 	bl	800d22c <strcat>
		strcat(DataString,gpsDataRet);strcat(DataString,"\nIMEI:");
 8005eb4:	49a6      	ldr	r1, [pc, #664]	; (8006150 <TestRun+0x3f8>)
 8005eb6:	0020      	movs	r0, r4
 8005eb8:	f007 f9b8 	bl	800d22c <strcat>
 8005ebc:	49a5      	ldr	r1, [pc, #660]	; (8006154 <TestRun+0x3fc>)
 8005ebe:	0020      	movs	r0, r4
 8005ec0:	f007 f9b4 	bl	800d22c <strcat>
		strcat(DataString,IMEI);strcat(DataString,"\nSIMOP:");
 8005ec4:	49a4      	ldr	r1, [pc, #656]	; (8006158 <TestRun+0x400>)
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	f007 f9b0 	bl	800d22c <strcat>
 8005ecc:	49a3      	ldr	r1, [pc, #652]	; (800615c <TestRun+0x404>)
 8005ece:	0020      	movs	r0, r4
 8005ed0:	f007 f9ac 	bl	800d22c <strcat>
		strcat(DataString,simop);strcat(DataString,"\nStratusString:");
 8005ed4:	0039      	movs	r1, r7
 8005ed6:	0020      	movs	r0, r4
 8005ed8:	f007 f9a8 	bl	800d22c <strcat>
 8005edc:	49a0      	ldr	r1, [pc, #640]	; (8006160 <TestRun+0x408>)
 8005ede:	0020      	movs	r0, r4
 8005ee0:	f007 f9a4 	bl	800d22c <strcat>
		strcat(DataString,StatusStrng);strcat(DataString,"\nGsminfo:");
 8005ee4:	499f      	ldr	r1, [pc, #636]	; (8006164 <TestRun+0x40c>)
 8005ee6:	0020      	movs	r0, r4
 8005ee8:	f007 f9a0 	bl	800d22c <strcat>
 8005eec:	499e      	ldr	r1, [pc, #632]	; (8006168 <TestRun+0x410>)
 8005eee:	0020      	movs	r0, r4
 8005ef0:	f007 f99c 	bl	800d22c <strcat>
		strcat(DataString,gsminfo);strcat(DataString,"\nDig_io:");
 8005ef4:	499d      	ldr	r1, [pc, #628]	; (800616c <TestRun+0x414>)
 8005ef6:	0020      	movs	r0, r4
 8005ef8:	f007 f998 	bl	800d22c <strcat>
 8005efc:	499c      	ldr	r1, [pc, #624]	; (8006170 <TestRun+0x418>)
 8005efe:	0020      	movs	r0, r4
 8005f00:	f007 f994 	bl	800d22c <strcat>
		strcat(DataString,Dig_io);strcat(DataString,",\n\0");
 8005f04:	499b      	ldr	r1, [pc, #620]	; (8006174 <TestRun+0x41c>)
 8005f06:	0020      	movs	r0, r4
 8005f08:	f007 f990 	bl	800d22c <strcat>
 8005f0c:	499a      	ldr	r1, [pc, #616]	; (8006178 <TestRun+0x420>)
 8005f0e:	0020      	movs	r0, r4
 8005f10:	312b      	adds	r1, #43	; 0x2b
 8005f12:	f007 f98b 	bl	800d22c <strcat>
		Debug_Tx(DataString);
 8005f16:	0020      	movs	r0, r4
 8005f18:	f7fd fa0c 	bl	8003334 <Debug_Tx>
	memset(data_LOGIN,0,100);
 8005f1c:	4c97      	ldr	r4, [pc, #604]	; (800617c <TestRun+0x424>)
 8005f1e:	2264      	movs	r2, #100	; 0x64
 8005f20:	2100      	movs	r1, #0
 8005f22:	0020      	movs	r0, r4
 8005f24:	f007 f97a 	bl	800d21c <memset>
	strcat(data_LOGIN,"$");
 8005f28:	4e95      	ldr	r6, [pc, #596]	; (8006180 <TestRun+0x428>)
 8005f2a:	0020      	movs	r0, r4
 8005f2c:	0031      	movs	r1, r6
 8005f2e:	f007 f97d 	bl	800d22c <strcat>
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8005f32:	4b85      	ldr	r3, [pc, #532]	; (8006148 <TestRun+0x3f0>)
 8005f34:	0020      	movs	r0, r4
 8005f36:	0019      	movs	r1, r3
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	f007 f977 	bl	800d22c <strcat>
 8005f3e:	4d91      	ldr	r5, [pc, #580]	; (8006184 <TestRun+0x42c>)
 8005f40:	0020      	movs	r0, r4
 8005f42:	0029      	movs	r1, r5
 8005f44:	f007 f972 	bl	800d22c <strcat>
	strcat(data_LOGIN,"$");
 8005f48:	0031      	movs	r1, r6
 8005f4a:	0020      	movs	r0, r4
 8005f4c:	f007 f96e 	bl	800d22c <strcat>
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8005f50:	4b81      	ldr	r3, [pc, #516]	; (8006158 <TestRun+0x400>)
 8005f52:	0020      	movs	r0, r4
 8005f54:	0019      	movs	r1, r3
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	f007 f968 	bl	800d22c <strcat>
 8005f5c:	0029      	movs	r1, r5
 8005f5e:	0020      	movs	r0, r4
 8005f60:	f007 f964 	bl	800d22c <strcat>
	strcat(data_LOGIN,"$");
 8005f64:	0031      	movs	r1, r6
 8005f66:	0020      	movs	r0, r4
 8005f68:	f007 f960 	bl	800d22c <strcat>
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8005f6c:	4f86      	ldr	r7, [pc, #536]	; (8006188 <TestRun+0x430>)
 8005f6e:	0020      	movs	r0, r4
 8005f70:	0039      	movs	r1, r7
 8005f72:	f007 f95b 	bl	800d22c <strcat>
 8005f76:	0029      	movs	r1, r5
 8005f78:	0020      	movs	r0, r4
 8005f7a:	f007 f957 	bl	800d22c <strcat>
	strcat(data_LOGIN,"$");
 8005f7e:	0031      	movs	r1, r6
 8005f80:	0020      	movs	r0, r4
 8005f82:	f007 f953 	bl	800d22c <strcat>
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",0.0E0.0N,");
 8005f86:	0039      	movs	r1, r7
 8005f88:	0020      	movs	r0, r4
 8005f8a:	f007 f94f 	bl	800d22c <strcat>
 8005f8e:	497f      	ldr	r1, [pc, #508]	; (800618c <TestRun+0x434>)
 8005f90:	0020      	movs	r0, r4
 8005f92:	f007 f94b 	bl	800d22c <strcat>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 8005f96:	0020      	movs	r0, r4
 8005f98:	f7fe fa36 	bl	8004408 <nmea0183_checksum>
 8005f9c:	4b7c      	ldr	r3, [pc, #496]	; (8006190 <TestRun+0x438>)
 8005f9e:	4e7d      	ldr	r6, [pc, #500]	; (8006194 <TestRun+0x43c>)
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	0002      	movs	r2, r0
 8005fa4:	0030      	movs	r0, r6
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	f007 f8cc 	bl	800d144 <siprintf>
	strcat(data_LOGIN,checksum);
 8005fac:	0031      	movs	r1, r6
 8005fae:	0020      	movs	r0, r4
 8005fb0:	f007 f93c 	bl	800d22c <strcat>
	strcat(data_LOGIN,",*\0");
 8005fb4:	4f70      	ldr	r7, [pc, #448]	; (8006178 <TestRun+0x420>)
 8005fb6:	0020      	movs	r0, r4
 8005fb8:	372f      	adds	r7, #47	; 0x2f
 8005fba:	0039      	movs	r1, r7
 8005fbc:	f007 f936 	bl	800d22c <strcat>
    memset(checksum,0,3);
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	0030      	movs	r0, r6
 8005fc6:	f007 f929 	bl	800d21c <memset>
    memset(DataString,0,300);
 8005fca:	2296      	movs	r2, #150	; 0x96
 8005fcc:	4c5a      	ldr	r4, [pc, #360]	; (8006138 <TestRun+0x3e0>)
 8005fce:	0052      	lsls	r2, r2, #1
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	0020      	movs	r0, r4
 8005fd4:	f007 f922 	bl	800d21c <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8005fd8:	4959      	ldr	r1, [pc, #356]	; (8006140 <TestRun+0x3e8>)
 8005fda:	0020      	movs	r0, r4
 8005fdc:	f007 f926 	bl	800d22c <strcat>
 8005fe0:	0029      	movs	r1, r5
 8005fe2:	0020      	movs	r0, r4
 8005fe4:	f007 f922 	bl	800d22c <strcat>
	strcat(DataString,IMEI);strcat(DataString,",");
 8005fe8:	9902      	ldr	r1, [sp, #8]
 8005fea:	0020      	movs	r0, r4
 8005fec:	f007 f91e 	bl	800d22c <strcat>
 8005ff0:	0029      	movs	r1, r5
 8005ff2:	0020      	movs	r0, r4
 8005ff4:	f007 f91a 	bl	800d22c <strcat>
	strcat(DataString,Regno);strcat(DataString,",");
 8005ff8:	9901      	ldr	r1, [sp, #4]
 8005ffa:	0020      	movs	r0, r4
 8005ffc:	f007 f916 	bl	800d22c <strcat>
 8006000:	0029      	movs	r1, r5
 8006002:	0020      	movs	r0, r4
 8006004:	f007 f912 	bl	800d22c <strcat>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006008:	4951      	ldr	r1, [pc, #324]	; (8006150 <TestRun+0x3f8>)
 800600a:	0020      	movs	r0, r4
 800600c:	f007 f90e 	bl	800d22c <strcat>
 8006010:	0029      	movs	r1, r5
 8006012:	0020      	movs	r0, r4
 8006014:	f007 f90a 	bl	800d22c <strcat>
	strcat(DataString,simop);strcat(DataString,",");
 8006018:	4945      	ldr	r1, [pc, #276]	; (8006130 <TestRun+0x3d8>)
 800601a:	0020      	movs	r0, r4
 800601c:	f007 f906 	bl	800d22c <strcat>
 8006020:	0029      	movs	r1, r5
 8006022:	0020      	movs	r0, r4
 8006024:	f007 f902 	bl	800d22c <strcat>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006028:	494e      	ldr	r1, [pc, #312]	; (8006164 <TestRun+0x40c>)
 800602a:	0020      	movs	r0, r4
 800602c:	f007 f8fe 	bl	800d22c <strcat>
 8006030:	0029      	movs	r1, r5
 8006032:	0020      	movs	r0, r4
 8006034:	f007 f8fa 	bl	800d22c <strcat>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006038:	494c      	ldr	r1, [pc, #304]	; (800616c <TestRun+0x414>)
 800603a:	0020      	movs	r0, r4
 800603c:	f007 f8f6 	bl	800d22c <strcat>
 8006040:	0029      	movs	r1, r5
 8006042:	0020      	movs	r0, r4
 8006044:	f007 f8f2 	bl	800d22c <strcat>
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8006048:	494a      	ldr	r1, [pc, #296]	; (8006174 <TestRun+0x41c>)
 800604a:	0020      	movs	r0, r4
 800604c:	f007 f8ee 	bl	800d22c <strcat>
    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 8006050:	0020      	movs	r0, r4
 8006052:	f7fe f9d9 	bl	8004408 <nmea0183_checksum>
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	0002      	movs	r2, r0
 800605a:	0030      	movs	r0, r6
 800605c:	f007 f872 	bl	800d144 <siprintf>
    strcat(DataString,checksum);
 8006060:	0031      	movs	r1, r6
 8006062:	0020      	movs	r0, r4
 8006064:	f007 f8e2 	bl	800d22c <strcat>
    strcat(DataString,",*\0");
 8006068:	0039      	movs	r1, r7
 800606a:	0020      	movs	r0, r4
 800606c:	f007 f8de 	bl	800d22c <strcat>
    if(ServerConnected==1){
 8006070:	4a49      	ldr	r2, [pc, #292]	; (8006198 <TestRun+0x440>)
    if (debug==1){
 8006072:	4b30      	ldr	r3, [pc, #192]	; (8006134 <TestRun+0x3dc>)
    if(ServerConnected==1){
 8006074:	6812      	ldr	r2, [r2, #0]
    if (debug==1){
 8006076:	681b      	ldr	r3, [r3, #0]
    if(ServerConnected==1){
 8006078:	2a01      	cmp	r2, #1
 800607a:	d11e      	bne.n	80060ba <TestRun+0x362>
    	while(ReadQdata()>0){
 800607c:	f7fd ff0e 	bl	8003e9c <ReadQdata>
 8006080:	2800      	cmp	r0, #0
 8006082:	dc16      	bgt.n	80060b2 <TestRun+0x35a>
 8006084:	f000 fcd4 	bl	8006a30 <HAL_GetTick>
     	ProcessTCPAll(DataString);
 8006088:	0020      	movs	r0, r4
 800608a:	f7ff f847 	bl	800511c <ProcessTCPAll>
     	RunCnt=0;
 800608e:	2200      	movs	r2, #0
 8006090:	4b42      	ldr	r3, [pc, #264]	; (800619c <TestRun+0x444>)
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	f000 fccc 	bl	8006a30 <HAL_GetTick>
	TimeCount=tic();
 8006098:	4b41      	ldr	r3, [pc, #260]	; (80061a0 <TestRun+0x448>)
 	seqNo=seqNo+1;
 800609a:	4a17      	ldr	r2, [pc, #92]	; (80060f8 <TestRun+0x3a0>)
	TimeCount=tic();
 800609c:	6018      	str	r0, [r3, #0]
 	seqNo=seqNo+1;
 800609e:	6813      	ldr	r3, [r2, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	6013      	str	r3, [r2, #0]
}
 80060a4:	b005      	add	sp, #20
 80060a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
 80060a8:	2101      	movs	r1, #1
 80060aa:	483e      	ldr	r0, [pc, #248]	; (80061a4 <TestRun+0x44c>)
 80060ac:	f001 fae8 	bl	8007680 <HAL_GPIO_WritePin>
}
 80060b0:	e691      	b.n	8005dd6 <TestRun+0x7e>
    		ProcessTCPAll( ReadMDataS);
 80060b2:	483d      	ldr	r0, [pc, #244]	; (80061a8 <TestRun+0x450>)
 80060b4:	f7ff f832 	bl	800511c <ProcessTCPAll>
 80060b8:	e7e0      	b.n	800607c <TestRun+0x324>
    	if (debug==1){
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d102      	bne.n	80060c4 <TestRun+0x36c>
    		Debug_Tx("No GSM Signal Saving Data to Memory----");
 80060be:	483b      	ldr	r0, [pc, #236]	; (80061ac <TestRun+0x454>)
 80060c0:	f7fd f938 	bl	8003334 <Debug_Tx>
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 80060c4:	0020      	movs	r0, r4
 80060c6:	f7fa f81f 	bl	8000108 <strlen>
 80060ca:	3001      	adds	r0, #1
 80060cc:	b281      	uxth	r1, r0
 80060ce:	0020      	movs	r0, r4
 80060d0:	f7fd fec4 	bl	8003e5c <WriteQdata>
    	RunCnt++;
 80060d4:	4a31      	ldr	r2, [pc, #196]	; (800619c <TestRun+0x444>)
 80060d6:	6813      	ldr	r3, [r2, #0]
 80060d8:	3301      	adds	r3, #1
    	if(RunCnt>10){
 80060da:	2b0a      	cmp	r3, #10
 80060dc:	dc01      	bgt.n	80060e2 <TestRun+0x38a>
    		RunCnt=0;
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	e7d8      	b.n	8006094 <TestRun+0x33c>
 80060e2:	2300      	movs	r3, #0
 80060e4:	e7fb      	b.n	80060de <TestRun+0x386>
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	2000358c 	.word	0x2000358c
 80060ec:	08011cab 	.word	0x08011cab
 80060f0:	e000ed00 	.word	0xe000ed00
 80060f4:	05fa0004 	.word	0x05fa0004
 80060f8:	20003ee4 	.word	0x20003ee4
 80060fc:	20001318 	.word	0x20001318
 8006100:	20000304 	.word	0x20000304
 8006104:	20000090 	.word	0x20000090
 8006108:	2000339c 	.word	0x2000339c
 800610c:	200004b4 	.word	0x200004b4
 8006110:	200012e4 	.word	0x200012e4
 8006114:	20003408 	.word	0x20003408
 8006118:	40e00000 	.word	0x40e00000
 800611c:	200012c4 	.word	0x200012c4
 8006120:	20001334 	.word	0x20001334
 8006124:	200004c0 	.word	0x200004c0
 8006128:	20003352 	.word	0x20003352
 800612c:	200033d4 	.word	0x200033d4
 8006130:	20003ee8 	.word	0x20003ee8
 8006134:	200000c4 	.word	0x200000c4
 8006138:	20000352 	.word	0x20000352
 800613c:	08011cca 	.word	0x08011cca
 8006140:	20001244 	.word	0x20001244
 8006144:	08011cd0 	.word	0x08011cd0
 8006148:	20003384 	.word	0x20003384
 800614c:	08011cd8 	.word	0x08011cd8
 8006150:	2000397c 	.word	0x2000397c
 8006154:	08011ce0 	.word	0x08011ce0
 8006158:	200012b0 	.word	0x200012b0
 800615c:	08011ce7 	.word	0x08011ce7
 8006160:	08011cef 	.word	0x08011cef
 8006164:	200033bc 	.word	0x200033bc
 8006168:	08011cff 	.word	0x08011cff
 800616c:	200039c8 	.word	0x200039c8
 8006170:	08011d09 	.word	0x08011d09
 8006174:	2000048c 	.word	0x2000048c
 8006178:	08010dc8 	.word	0x08010dc8
 800617c:	20003513 	.word	0x20003513
 8006180:	08011d12 	.word	0x08011d12
 8006184:	08011c93 	.word	0x08011c93
 8006188:	200000b8 	.word	0x200000b8
 800618c:	08011d14 	.word	0x08011d14
 8006190:	08011d1f 	.word	0x08011d1f
 8006194:	20003410 	.word	0x20003410
 8006198:	200033b4 	.word	0x200033b4
 800619c:	20003398 	.word	0x20003398
 80061a0:	200033d0 	.word	0x200033d0
 80061a4:	50000c00 	.word	0x50000c00
 80061a8:	20002352 	.word	0x20002352
 80061ac:	08011d24 	.word	0x08011d24

080061b0 <StartDefaultTask>:
{
 80061b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80061b2:	27fa      	movs	r7, #250	; 0xfa
 80061b4:	2516      	movs	r5, #22
 80061b6:	2401      	movs	r4, #1
 80061b8:	b087      	sub	sp, #28
 80061ba:	4e6e      	ldr	r6, [pc, #440]	; (8006374 <StartDefaultTask+0x1c4>)
 80061bc:	446d      	add	r5, sp
 80061be:	00bf      	lsls	r7, r7, #2
 80061c0:	0023      	movs	r3, r4
 80061c2:	9500      	str	r5, [sp, #0]
 80061c4:	2275      	movs	r2, #117	; 0x75
 80061c6:	21d0      	movs	r1, #208	; 0xd0
 80061c8:	0030      	movs	r0, r6
 80061ca:	9702      	str	r7, [sp, #8]
 80061cc:	9401      	str	r4, [sp, #4]
 80061ce:	f001 fcbd 	bl	8007b4c <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80061d2:	782b      	ldrb	r3, [r5, #0]
 80061d4:	2517      	movs	r5, #23
 80061d6:	446d      	add	r5, sp
 80061d8:	2b68      	cmp	r3, #104	; 0x68
 80061da:	d000      	beq.n	80061de <StartDefaultTask+0x2e>
 80061dc:	e09c      	b.n	8006318 <StartDefaultTask+0x168>
		Data = 0;
 80061de:	2300      	movs	r3, #0
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80061e0:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 80061e2:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80061e4:	21d0      	movs	r1, #208	; 0xd0
 80061e6:	0023      	movs	r3, r4
 80061e8:	0030      	movs	r0, r6
 80061ea:	9702      	str	r7, [sp, #8]
 80061ec:	9401      	str	r4, [sp, #4]
 80061ee:	9500      	str	r5, [sp, #0]
 80061f0:	f001 fbca 	bl	8007988 <HAL_I2C_Mem_Write>
		Data = 0x07;
 80061f4:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80061f6:	2219      	movs	r2, #25
		Data = 0x07;
 80061f8:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80061fa:	21d0      	movs	r1, #208	; 0xd0
 80061fc:	0023      	movs	r3, r4
 80061fe:	0030      	movs	r0, r6
 8006200:	9702      	str	r7, [sp, #8]
 8006202:	9401      	str	r4, [sp, #4]
 8006204:	9500      	str	r5, [sp, #0]
 8006206:	f001 fbbf 	bl	8007988 <HAL_I2C_Mem_Write>
		Data = 0x00;
 800620a:	2300      	movs	r3, #0
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800620c:	221c      	movs	r2, #28
		Data = 0x00;
 800620e:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8006210:	21d0      	movs	r1, #208	; 0xd0
 8006212:	0023      	movs	r3, r4
 8006214:	0030      	movs	r0, r6
 8006216:	9702      	str	r7, [sp, #8]
 8006218:	9401      	str	r4, [sp, #4]
 800621a:	9500      	str	r5, [sp, #0]
 800621c:	f001 fbb4 	bl	8007988 <HAL_I2C_Mem_Write>
		Data = 0x00;
 8006220:	2300      	movs	r3, #0
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8006222:	221b      	movs	r2, #27
		Data = 0x00;
 8006224:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8006226:	21d0      	movs	r1, #208	; 0xd0
 8006228:	0023      	movs	r3, r4
 800622a:	0030      	movs	r0, r6
 800622c:	9702      	str	r7, [sp, #8]
 800622e:	9401      	str	r4, [sp, #4]
 8006230:	9500      	str	r5, [sp, #0]
 8006232:	f001 fba9 	bl	8007988 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 8006236:	4850      	ldr	r0, [pc, #320]	; (8006378 <StartDefaultTask+0x1c8>)
		Debug_Tx("ACC Interface ");
 8006238:	f7fd f87c 	bl	8003334 <Debug_Tx>
	ACC_GYRO_data[0]=0;
 800623c:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 800623e:	2180      	movs	r1, #128	; 0x80
 8006240:	20a0      	movs	r0, #160	; 0xa0
 8006242:	4b4e      	ldr	r3, [pc, #312]	; (800637c <StartDefaultTask+0x1cc>)
 8006244:	0209      	lsls	r1, r1, #8
 8006246:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 8006248:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 800624a:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 800624c:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 800624e:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8006250:	615a      	str	r2, [r3, #20]
 8006252:	05c0      	lsls	r0, r0, #23
 8006254:	2201      	movs	r2, #1
 8006256:	f001 fa13 	bl	8007680 <HAL_GPIO_WritePin>
	if(val==1){
 800625a:	f7fd f8cb 	bl	80033f4 <SET_GSM_VCC_EN.part.0>
	if(val==1){
 800625e:	f7fd f8d3 	bl	8003408 <SET_PWRKEY.part.0>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 8006262:	2204      	movs	r2, #4
 8006264:	4946      	ldr	r1, [pc, #280]	; (8006380 <StartDefaultTask+0x1d0>)
 8006266:	4847      	ldr	r0, [pc, #284]	; (8006384 <StartDefaultTask+0x1d4>)
 8006268:	f000 fee8 	bl	800703c <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 800626c:	2201      	movs	r2, #1
 800626e:	2120      	movs	r1, #32
 8006270:	4845      	ldr	r0, [pc, #276]	; (8006388 <StartDefaultTask+0x1d8>)
 8006272:	f001 fa05 	bl	8007680 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8006276:	2180      	movs	r1, #128	; 0x80
 8006278:	20a0      	movs	r0, #160	; 0xa0
 800627a:	2201      	movs	r2, #1
 800627c:	0209      	lsls	r1, r1, #8
 800627e:	05c0      	lsls	r0, r0, #23
 8006280:	f001 f9fe 	bl	8007680 <HAL_GPIO_WritePin>
GSMBuff[0]=0;
 8006284:	2600      	movs	r6, #0
 8006286:	f7fd f8b5 	bl	80033f4 <SET_GSM_VCC_EN.part.0>
	if(val==1){
 800628a:	f7fd f8bd 	bl	8003408 <SET_PWRKEY.part.0>
 memset((char*)gpsData,0,1000);
 800628e:	22fa      	movs	r2, #250	; 0xfa
GSMBuff[0]=0;
 8006290:	4c3e      	ldr	r4, [pc, #248]	; (800638c <StartDefaultTask+0x1dc>)
 memset((char*)gpsData,0,1000);
 8006292:	4d3f      	ldr	r5, [pc, #252]	; (8006390 <StartDefaultTask+0x1e0>)
 8006294:	0031      	movs	r1, r6
 8006296:	0028      	movs	r0, r5
GSMBuff[0]=0;
 8006298:	7026      	strb	r6, [r4, #0]
 memset((char*)gpsData,0,1000);
 800629a:	0092      	lsls	r2, r2, #2
 800629c:	f006 ffbe 	bl	800d21c <memset>
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80062a0:	270c      	movs	r7, #12
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80062a2:	22e1      	movs	r2, #225	; 0xe1
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80062a4:	483b      	ldr	r0, [pc, #236]	; (8006394 <StartDefaultTask+0x1e4>)
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80062a6:	0029      	movs	r1, r5
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80062a8:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80062aa:	0092      	lsls	r2, r2, #2
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80062ac:	621f      	str	r7, [r3, #32]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80062ae:	f003 fc17 	bl	8009ae0 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80062b2:	4839      	ldr	r0, [pc, #228]	; (8006398 <StartDefaultTask+0x1e8>)
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80062b4:	0021      	movs	r1, r4
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80062b6:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80062b8:	2201      	movs	r2, #1
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80062ba:	621f      	str	r7, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80062bc:	f003 fc10 	bl	8009ae0 <HAL_UART_Receive_DMA>
initGPS();
 80062c0:	f7fd fff0 	bl	80042a4 <initGPS>
initFirstRun();
 80062c4:	f7ff fab2 	bl	800582c <initFirstRun>
InitMEMQ();
 80062c8:	f7fd fe4e 	bl	8003f68 <InitMEMQ>
HAL_Delay(10000);
 80062cc:	4833      	ldr	r0, [pc, #204]	; (800639c <StartDefaultTask+0x1ec>)
 80062ce:	f000 fbb5 	bl	8006a3c <HAL_Delay>
InitGSM();
 80062d2:	f7ff f8df 	bl	8005494 <InitGSM>
TestMEM();
 80062d6:	f7fe f8b9 	bl	800444c <TestMEM>
 memset(IMEI,0,20);
 80062da:	4d31      	ldr	r5, [pc, #196]	; (80063a0 <StartDefaultTask+0x1f0>)
 80062dc:	2214      	movs	r2, #20
 80062de:	0031      	movs	r1, r6
 80062e0:	0028      	movs	r0, r5
 80062e2:	f006 ff9b 	bl	800d21c <memset>
 memset(Regno,0,20);
 80062e6:	4c2f      	ldr	r4, [pc, #188]	; (80063a4 <StartDefaultTask+0x1f4>)
 80062e8:	2214      	movs	r2, #20
 80062ea:	0031      	movs	r1, r6
 80062ec:	0020      	movs	r0, r4
 80062ee:	f006 ff95 	bl	800d21c <memset>
strcpy(IMEI,GSMIMEI());
 80062f2:	f7fe fe0d 	bl	8004f10 <GSMIMEI>
 80062f6:	0001      	movs	r1, r0
 80062f8:	0028      	movs	r0, r5
 80062fa:	f007 f944 	bl	800d586 <strcpy>
 strcpy(Regno,readRegNo());
 80062fe:	f7fd ff13 	bl	8004128 <readRegNo>
 8006302:	0001      	movs	r1, r0
 8006304:	0020      	movs	r0, r4
 8006306:	f007 f93e 	bl	800d586 <strcpy>
StartTCPConnection();
 800630a:	f7fe fe53 	bl	8004fb4 <StartTCPConnection>
    GSMSigQuality();
 800630e:	f7ff fa29 	bl	8005764 <GSMSigQuality>
	TestRun();
 8006312:	f7ff fd21 	bl	8005d58 <TestRun>
while (1){
 8006316:	e7fa      	b.n	800630e <StartDefaultTask+0x15e>
		Data = 0;
 8006318:	2300      	movs	r3, #0
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800631a:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 800631c:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800631e:	21d0      	movs	r1, #208	; 0xd0
 8006320:	0023      	movs	r3, r4
 8006322:	0030      	movs	r0, r6
 8006324:	9702      	str	r7, [sp, #8]
 8006326:	9401      	str	r4, [sp, #4]
 8006328:	9500      	str	r5, [sp, #0]
 800632a:	f001 fb2d 	bl	8007988 <HAL_I2C_Mem_Write>
				Data = 0x07;
 800632e:	2307      	movs	r3, #7
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8006330:	2219      	movs	r2, #25
				Data = 0x07;
 8006332:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8006334:	21d0      	movs	r1, #208	; 0xd0
 8006336:	0023      	movs	r3, r4
 8006338:	0030      	movs	r0, r6
 800633a:	9702      	str	r7, [sp, #8]
 800633c:	9401      	str	r4, [sp, #4]
 800633e:	9500      	str	r5, [sp, #0]
 8006340:	f001 fb22 	bl	8007988 <HAL_I2C_Mem_Write>
				Data = 0x00;
 8006344:	2300      	movs	r3, #0
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8006346:	221c      	movs	r2, #28
				Data = 0x00;
 8006348:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800634a:	21d0      	movs	r1, #208	; 0xd0
 800634c:	0023      	movs	r3, r4
 800634e:	0030      	movs	r0, r6
 8006350:	9702      	str	r7, [sp, #8]
 8006352:	9401      	str	r4, [sp, #4]
 8006354:	9500      	str	r5, [sp, #0]
 8006356:	f001 fb17 	bl	8007988 <HAL_I2C_Mem_Write>
				Data = 0x00;
 800635a:	2300      	movs	r3, #0
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800635c:	221b      	movs	r2, #27
				Data = 0x00;
 800635e:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8006360:	21d0      	movs	r1, #208	; 0xd0
 8006362:	0023      	movs	r3, r4
 8006364:	0030      	movs	r0, r6
 8006366:	9702      	str	r7, [sp, #8]
 8006368:	9401      	str	r4, [sp, #4]
 800636a:	9500      	str	r5, [sp, #0]
 800636c:	f001 fb0c 	bl	8007988 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 8006370:	480d      	ldr	r0, [pc, #52]	; (80063a8 <StartDefaultTask+0x1f8>)
 8006372:	e761      	b.n	8006238 <StartDefaultTask+0x88>
 8006374:	20003bec 	.word	0x20003bec
 8006378:	08011d4c 	.word	0x08011d4c
 800637c:	200002ec 	.word	0x200002ec
 8006380:	20000308 	.word	0x20000308
 8006384:	20003a18 	.word	0x20003a18
 8006388:	50000400 	.word	0x50000400
 800638c:	20000544 	.word	0x20000544
 8006390:	20003594 	.word	0x20003594
 8006394:	20003d84 	.word	0x20003d84
 8006398:	20003cf0 	.word	0x20003cf0
 800639c:	00002710 	.word	0x00002710
 80063a0:	200012b0 	.word	0x200012b0
 80063a4:	20003384 	.word	0x20003384
 80063a8:	08011d5d 	.word	0x08011d5d

080063ac <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80063ac:	b672      	cpsid	i
  while (1)
 80063ae:	e7fe      	b.n	80063ae <Error_Handler+0x2>

080063b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063b0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b2:	2101      	movs	r1, #1
 80063b4:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <HAL_MspInit+0x3c>)
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80063b6:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80063ba:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063bc:	430a      	orrs	r2, r1
 80063be:	641a      	str	r2, [r3, #64]	; 0x40
 80063c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80063c4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063c6:	9200      	str	r2, [sp, #0]
 80063c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063cc:	0549      	lsls	r1, r1, #21
 80063ce:	430a      	orrs	r2, r1
 80063d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80063d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80063d4:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80063d6:	400b      	ands	r3, r1
 80063d8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80063da:	2103      	movs	r1, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80063dc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80063de:	f000 fe85 	bl	80070ec <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80063e2:	20c0      	movs	r0, #192	; 0xc0
 80063e4:	00c0      	lsls	r0, r0, #3
 80063e6:	f000 fb3b 	bl	8006a60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063ea:	bd07      	pop	{r0, r1, r2, pc}
 80063ec:	40021000 	.word	0x40021000

080063f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	0005      	movs	r5, r0
 80063f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f6:	2214      	movs	r2, #20
 80063f8:	2100      	movs	r1, #0
 80063fa:	a803      	add	r0, sp, #12
 80063fc:	f006 ff0e 	bl	800d21c <memset>
  if(hadc->Instance==ADC1)
 8006400:	4b25      	ldr	r3, [pc, #148]	; (8006498 <HAL_ADC_MspInit+0xa8>)
 8006402:	682a      	ldr	r2, [r5, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d145      	bne.n	8006494 <HAL_ADC_MspInit+0xa4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006408:	2180      	movs	r1, #128	; 0x80
 800640a:	4b24      	ldr	r3, [pc, #144]	; (800649c <HAL_ADC_MspInit+0xac>)
 800640c:	0349      	lsls	r1, r1, #13
 800640e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PB10     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006410:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 8006412:	430a      	orrs	r2, r1
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
 8006416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 8006418:	2403      	movs	r4, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 800641a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800641c:	2101      	movs	r1, #1

    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641e:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8006420:	9200      	str	r2, [sp, #0]
 8006422:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006426:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006428:	430a      	orrs	r2, r1
 800642a:	635a      	str	r2, [r3, #52]	; 0x34
 800642c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800642e:	400a      	ands	r2, r1
 8006430:	9201      	str	r2, [sp, #4]
 8006432:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006436:	1849      	adds	r1, r1, r1
 8006438:	430a      	orrs	r2, r1
 800643a:	635a      	str	r2, [r3, #52]	; 0x34
 800643c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 800643e:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006440:	400b      	ands	r3, r1
 8006442:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006444:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006446:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006448:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800644a:	f001 f861 	bl	8007510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <HAL_ADC_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006450:	4814      	ldr	r0, [pc, #80]	; (80064a4 <HAL_ADC_MspInit+0xb4>)
 8006452:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8006454:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006456:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006458:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800645a:	f001 f859 	bl	8007510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800645e:	4c12      	ldr	r4, [pc, #72]	; (80064a8 <HAL_ADC_MspInit+0xb8>)
 8006460:	4b12      	ldr	r3, [pc, #72]	; (80064ac <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006462:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8006464:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006466:	2305      	movs	r3, #5
 8006468:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800646a:	337b      	adds	r3, #123	; 0x7b
 800646c:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800646e:	3381      	adds	r3, #129	; 0x81
 8006470:	33ff      	adds	r3, #255	; 0xff
 8006472:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800647a:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800647c:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800647e:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006480:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006482:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006484:	f000 fea2 	bl	80071cc <HAL_DMA_Init>
 8006488:	42b0      	cmp	r0, r6
 800648a:	d001      	beq.n	8006490 <HAL_ADC_MspInit+0xa0>
    {
      Error_Handler();
 800648c:	f7ff ff8e 	bl	80063ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006490:	652c      	str	r4, [r5, #80]	; 0x50
 8006492:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006494:	b008      	add	sp, #32
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	40012400 	.word	0x40012400
 800649c:	40021000 	.word	0x40021000
 80064a0:	00000402 	.word	0x00000402
 80064a4:	50000400 	.word	0x50000400
 80064a8:	20003a7c 	.word	0x20003a7c
 80064ac:	40020008 	.word	0x40020008

080064b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80064b0:	b510      	push	{r4, lr}
 80064b2:	0004      	movs	r4, r0
 80064b4:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b6:	2214      	movs	r2, #20
 80064b8:	2100      	movs	r1, #0
 80064ba:	a802      	add	r0, sp, #8
 80064bc:	f006 feae 	bl	800d21c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80064c0:	221c      	movs	r2, #28
 80064c2:	2100      	movs	r1, #0
 80064c4:	a807      	add	r0, sp, #28
 80064c6:	f006 fea9 	bl	800d21c <memset>
  if(hi2c->Instance==I2C1)
 80064ca:	4b17      	ldr	r3, [pc, #92]	; (8006528 <HAL_I2C_MspInit+0x78>)
 80064cc:	6822      	ldr	r2, [r4, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d128      	bne.n	8006524 <HAL_I2C_MspInit+0x74>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80064d2:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064d4:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80064d6:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064d8:	f001 ffce 	bl	8008478 <HAL_RCCEx_PeriphCLKConfig>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 80064e0:	f7ff ff64 	bl	80063ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064e4:	2202      	movs	r2, #2
 80064e6:	4c11      	ldr	r4, [pc, #68]	; (800652c <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064e8:	4811      	ldr	r0, [pc, #68]	; (8006530 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064ec:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ee:	4313      	orrs	r3, r2
 80064f0:	6363      	str	r3, [r4, #52]	; 0x34
 80064f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064f4:	4013      	ands	r3, r2
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80064fa:	23c0      	movs	r3, #192	; 0xc0
 80064fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064fe:	3bae      	subs	r3, #174	; 0xae
 8006500:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006502:	3b11      	subs	r3, #17
 8006504:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006506:	2300      	movs	r3, #0
 8006508:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800650a:	3306      	adds	r3, #6
 800650c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800650e:	f000 ffff 	bl	8007510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006512:	2280      	movs	r2, #128	; 0x80
 8006514:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006516:	0392      	lsls	r2, r2, #14
 8006518:	4313      	orrs	r3, r2
 800651a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800651c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800651e:	4013      	ands	r3, r2
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006524:	b00e      	add	sp, #56	; 0x38
 8006526:	bd10      	pop	{r4, pc}
 8006528:	40005400 	.word	0x40005400
 800652c:	40021000 	.word	0x40021000
 8006530:	50000400 	.word	0x50000400

08006534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006534:	b510      	push	{r4, lr}
 8006536:	0004      	movs	r4, r0
 8006538:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800653a:	2214      	movs	r2, #20
 800653c:	2100      	movs	r1, #0
 800653e:	a803      	add	r0, sp, #12
 8006540:	f006 fe6c 	bl	800d21c <memset>
  if(hspi->Instance==SPI1)
 8006544:	4b10      	ldr	r3, [pc, #64]	; (8006588 <HAL_SPI_MspInit+0x54>)
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d11a      	bne.n	8006582 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800654c:	2180      	movs	r1, #128	; 0x80
 800654e:	4b0f      	ldr	r3, [pc, #60]	; (800658c <HAL_SPI_MspInit+0x58>)
 8006550:	0149      	lsls	r1, r1, #5
 8006552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006554:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006556:	430a      	orrs	r2, r1
 8006558:	641a      	str	r2, [r3, #64]	; 0x40
 800655a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800655c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 800655e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006560:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006562:	9201      	str	r2, [sp, #4]
 8006564:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006568:	430a      	orrs	r2, r1
 800656a:	635a      	str	r2, [r3, #52]	; 0x34
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	400b      	ands	r3, r1
 8006570:	9302      	str	r3, [sp, #8]
 8006572:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8006574:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006576:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8006578:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657a:	3bde      	subs	r3, #222	; 0xde
 800657c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800657e:	f000 ffc7 	bl	8007510 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006582:	b008      	add	sp, #32
 8006584:	bd10      	pop	{r4, pc}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	40013000 	.word	0x40013000
 800658c:	40021000 	.word	0x40021000

08006590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006590:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 8006592:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <HAL_TIM_Base_MspInit+0x30>)
 8006594:	6802      	ldr	r2, [r0, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d110      	bne.n	80065bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800659a:	2110      	movs	r1, #16
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <HAL_TIM_Base_MspInit+0x34>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 800659e:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 80065a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a2:	430a      	orrs	r2, r1
 80065a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80065a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80065a8:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80065aa:	400b      	ands	r3, r1
 80065ac:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80065ae:	390d      	subs	r1, #13
    __HAL_RCC_TIM6_CLK_ENABLE();
 80065b0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80065b2:	f000 fd9b 	bl	80070ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80065b6:	2011      	movs	r0, #17
 80065b8:	f000 fdc2 	bl	8007140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80065bc:	bd07      	pop	{r0, r1, r2, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	40001000 	.word	0x40001000
 80065c4:	40021000 	.word	0x40021000

080065c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	0005      	movs	r5, r0
 80065cc:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065ce:	2214      	movs	r2, #20
 80065d0:	2100      	movs	r1, #0
 80065d2:	a806      	add	r0, sp, #24
 80065d4:	f006 fe22 	bl	800d21c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065d8:	221c      	movs	r2, #28
 80065da:	2100      	movs	r1, #0
 80065dc:	a80b      	add	r0, sp, #44	; 0x2c
 80065de:	f006 fe1d 	bl	800d21c <memset>
  if(huart->Instance==USART1)
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	4a69      	ldr	r2, [pc, #420]	; (800678c <HAL_UART_MspInit+0x1c4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d149      	bne.n	800667e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80065ea:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065ec:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80065ee:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065f0:	f001 ff42 	bl	8008478 <HAL_RCCEx_PeriphCLKConfig>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d001      	beq.n	80065fc <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 80065f8:	f7ff fed8 	bl	80063ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80065fc:	2180      	movs	r1, #128	; 0x80
 80065fe:	4b64      	ldr	r3, [pc, #400]	; (8006790 <HAL_UART_MspInit+0x1c8>)
 8006600:	01c9      	lsls	r1, r1, #7
 8006602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006604:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8006606:	430a      	orrs	r2, r1
 8006608:	641a      	str	r2, [r3, #64]	; 0x40
 800660a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660c:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800660e:	400a      	ands	r2, r1
 8006610:	9200      	str	r2, [sp, #0]
 8006612:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006614:	2201      	movs	r2, #1
 8006616:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006618:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800661a:	4311      	orrs	r1, r2
 800661c:	6359      	str	r1, [r3, #52]	; 0x34
 800661e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006620:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006622:	4013      	ands	r3, r2
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 8006628:	23c0      	movs	r3, #192	; 0xc0
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800662e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006630:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006632:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006634:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006636:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006638:	f000 ff6a 	bl	8007510 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800663c:	4c55      	ldr	r4, [pc, #340]	; (8006794 <HAL_UART_MspInit+0x1cc>)
 800663e:	4b56      	ldr	r3, [pc, #344]	; (8006798 <HAL_UART_MspInit+0x1d0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006640:	0020      	movs	r0, r4
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8006642:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006644:	2332      	movs	r3, #50	; 0x32
 8006646:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006648:	334e      	adds	r3, #78	; 0x4e
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800664a:	60a6      	str	r6, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800664c:	60e6      	str	r6, [r4, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800664e:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006650:	6166      	str	r6, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006652:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006654:	61e6      	str	r6, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006656:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006658:	f000 fdb8 	bl	80071cc <HAL_DMA_Init>
 800665c:	42b0      	cmp	r0, r6
 800665e:	d001      	beq.n	8006664 <HAL_UART_MspInit+0x9c>
    {
      Error_Handler();
 8006660:	f7ff fea4 	bl	80063ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006664:	1d2b      	adds	r3, r5, #4

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8006666:	201b      	movs	r0, #27
 8006668:	2200      	movs	r2, #0
 800666a:	2103      	movs	r1, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800666c:	67dc      	str	r4, [r3, #124]	; 0x7c
 800666e:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8006670:	f000 fd3c 	bl	80070ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006674:	201b      	movs	r0, #27

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8006676:	f000 fd63 	bl	8007140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800667a:	b012      	add	sp, #72	; 0x48
 800667c:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 800667e:	4a47      	ldr	r2, [pc, #284]	; (800679c <HAL_UART_MspInit+0x1d4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d145      	bne.n	8006710 <HAL_UART_MspInit+0x148>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006684:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006686:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006688:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800668a:	f001 fef5 	bl	8008478 <HAL_RCCEx_PeriphCLKConfig>
 800668e:	2800      	cmp	r0, #0
 8006690:	d001      	beq.n	8006696 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8006692:	f7ff fe8b 	bl	80063ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006696:	2180      	movs	r1, #128	; 0x80
 8006698:	4b3d      	ldr	r3, [pc, #244]	; (8006790 <HAL_UART_MspInit+0x1c8>)
 800669a:	0289      	lsls	r1, r1, #10
 800669c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800669e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80066a0:	430a      	orrs	r2, r1
 80066a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80066a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a6:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80066a8:	400a      	ands	r2, r1
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ae:	2201      	movs	r2, #1
 80066b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066b4:	4311      	orrs	r1, r2
 80066b6:	6359      	str	r1, [r3, #52]	; 0x34
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ba:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066bc:	4013      	ands	r3, r2
 80066be:	9303      	str	r3, [sp, #12]
 80066c0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 80066c2:	230c      	movs	r3, #12
 80066c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c6:	3b0a      	subs	r3, #10
 80066c8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ca:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066cc:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80066ce:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066d0:	f000 ff1e 	bl	8007510 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80066d4:	4c32      	ldr	r4, [pc, #200]	; (80067a0 <HAL_UART_MspInit+0x1d8>)
 80066d6:	4b33      	ldr	r3, [pc, #204]	; (80067a4 <HAL_UART_MspInit+0x1dc>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80066d8:	0020      	movs	r0, r4
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80066da:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80066dc:	2334      	movs	r3, #52	; 0x34
 80066de:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066e0:	334c      	adds	r3, #76	; 0x4c
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066e2:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066e4:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066e6:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066e8:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066ea:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80066ec:	61e6      	str	r6, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80066ee:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80066f0:	f000 fd6c 	bl	80071cc <HAL_DMA_Init>
 80066f4:	42b0      	cmp	r0, r6
 80066f6:	d001      	beq.n	80066fc <HAL_UART_MspInit+0x134>
      Error_Handler();
 80066f8:	f7ff fe58 	bl	80063ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80066fc:	1d2b      	adds	r3, r5, #4
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80066fe:	201c      	movs	r0, #28
 8006700:	2200      	movs	r2, #0
 8006702:	2103      	movs	r1, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006704:	67dc      	str	r4, [r3, #124]	; 0x7c
 8006706:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8006708:	f000 fcf0 	bl	80070ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800670c:	201c      	movs	r0, #28
 800670e:	e7b2      	b.n	8006676 <HAL_UART_MspInit+0xae>
  else if(huart->Instance==USART3)
 8006710:	4a25      	ldr	r2, [pc, #148]	; (80067a8 <HAL_UART_MspInit+0x1e0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d1b1      	bne.n	800667a <HAL_UART_MspInit+0xb2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <HAL_UART_MspInit+0x1c8>)
 800671a:	02c9      	lsls	r1, r1, #11
 800671c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800671e:	4823      	ldr	r0, [pc, #140]	; (80067ac <HAL_UART_MspInit+0x1e4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8006720:	430a      	orrs	r2, r1
 8006722:	63da      	str	r2, [r3, #60]	; 0x3c
 8006724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006726:	400a      	ands	r2, r1
 8006728:	9204      	str	r2, [sp, #16]
 800672a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800672c:	2202      	movs	r2, #2
 800672e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006730:	4311      	orrs	r1, r2
 8006732:	6359      	str	r1, [r3, #52]	; 0x34
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006736:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006738:	4013      	ands	r3, r2
 800673a:	9305      	str	r3, [sp, #20]
 800673c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 800673e:	2305      	movs	r3, #5
 8006740:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8006742:	3b01      	subs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006744:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8006746:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006748:	f000 fee2 	bl	8007510 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 800674c:	4c18      	ldr	r4, [pc, #96]	; (80067b0 <HAL_UART_MspInit+0x1e8>)
 800674e:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <HAL_UART_MspInit+0x1ec>)
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006750:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8006752:	6023      	str	r3, [r4, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006754:	2337      	movs	r3, #55	; 0x37
 8006756:	6063      	str	r3, [r4, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006758:	3b27      	subs	r3, #39	; 0x27
 800675a:	60a3      	str	r3, [r4, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800675c:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800675e:	0020      	movs	r0, r4
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006760:	60e3      	str	r3, [r4, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006762:	6122      	str	r2, [r4, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006764:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006766:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006768:	61e3      	str	r3, [r4, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800676a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800676c:	f000 fd2e 	bl	80071cc <HAL_DMA_Init>
 8006770:	2800      	cmp	r0, #0
 8006772:	d001      	beq.n	8006778 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8006774:	f7ff fe1a 	bl	80063ac <Error_Handler>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8006778:	201d      	movs	r0, #29
 800677a:	2200      	movs	r2, #0
 800677c:	2103      	movs	r1, #3
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800677e:	67ec      	str	r4, [r5, #124]	; 0x7c
 8006780:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8006782:	f000 fcb3 	bl	80070ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8006786:	201d      	movs	r0, #29
 8006788:	e775      	b.n	8006676 <HAL_UART_MspInit+0xae>
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	40013800 	.word	0x40013800
 8006790:	40021000 	.word	0x40021000
 8006794:	20003ad8 	.word	0x20003ad8
 8006798:	4002001c 	.word	0x4002001c
 800679c:	40004400 	.word	0x40004400
 80067a0:	20003b34 	.word	0x20003b34
 80067a4:	40020030 	.word	0x40020030
 80067a8:	40004800 	.word	0x40004800
 80067ac:	50000400 	.word	0x50000400
 80067b0:	20003b90 	.word	0x20003b90
 80067b4:	40020044 	.word	0x40020044

080067b8 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	4b21      	ldr	r3, [pc, #132]	; (8006840 <HAL_InitTick+0x88>)
{
 80067bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 80067be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c0:	0109      	lsls	r1, r1, #4
 80067c2:	430a      	orrs	r2, r1
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 80067c8:	b086      	sub	sp, #24
  __HAL_RCC_TIM1_CLK_ENABLE();
 80067ca:	400b      	ands	r3, r1
 80067cc:	9301      	str	r3, [sp, #4]
{
 80067ce:	0005      	movs	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80067d0:	4669      	mov	r1, sp
 80067d2:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 80067d4:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80067d6:	f001 fe35 	bl	8008444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80067da:	9b05      	ldr	r3, [sp, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d128      	bne.n	8006832 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80067e0:	f001 fe1c 	bl	800841c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80067e4:	4e17      	ldr	r6, [pc, #92]	; (8006844 <HAL_InitTick+0x8c>)
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <HAL_InitTick+0x90>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80067e8:	4918      	ldr	r1, [pc, #96]	; (800684c <HAL_InitTick+0x94>)
  htim1.Instance = TIM1;
 80067ea:	6033      	str	r3, [r6, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80067ec:	4b18      	ldr	r3, [pc, #96]	; (8006850 <HAL_InitTick+0x98>)
 80067ee:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80067f0:	f7f9 fcb0 	bl	8000154 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80067f4:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80067f6:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80067f8:	6070      	str	r0, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 80067fa:	0030      	movs	r0, r6
  htim1.Init.ClockDivision = 0;
 80067fc:	6133      	str	r3, [r6, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067fe:	60b3      	str	r3, [r6, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006800:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8006802:	f002 fb47 	bl	8008e94 <HAL_TIM_Base_Init>
 8006806:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 8006808:	d110      	bne.n	800682c <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800680a:	0030      	movs	r0, r6
 800680c:	f002 fa10 	bl	8008c30 <HAL_TIM_Base_Start_IT>
 8006810:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 8006812:	d10b      	bne.n	800682c <HAL_InitTick+0x74>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8006814:	200d      	movs	r0, #13
 8006816:	f000 fc93 	bl	8007140 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800681a:	2d03      	cmp	r5, #3
 800681c:	d80d      	bhi.n	800683a <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 800681e:	0022      	movs	r2, r4
 8006820:	0029      	movs	r1, r5
 8006822:	200d      	movs	r0, #13
 8006824:	f000 fc62 	bl	80070ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006828:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <HAL_InitTick+0x9c>)
 800682a:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800682c:	0020      	movs	r0, r4
 800682e:	b006      	add	sp, #24
 8006830:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006832:	f001 fdf3 	bl	800841c <HAL_RCC_GetPCLK1Freq>
 8006836:	0040      	lsls	r0, r0, #1
 8006838:	e7d4      	b.n	80067e4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800683a:	2401      	movs	r4, #1
 800683c:	e7f6      	b.n	800682c <HAL_InitTick+0x74>
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	40021000 	.word	0x40021000
 8006844:	20003f08 	.word	0x20003f08
 8006848:	40012c00 	.word	0x40012c00
 800684c:	000f4240 	.word	0x000f4240
 8006850:	000003e7 	.word	0x000003e7
 8006854:	200000ec 	.word	0x200000ec

08006858 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006858:	e7fe      	b.n	8006858 <NMI_Handler>

0800685a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800685a:	e7fe      	b.n	800685a <HardFault_Handler>

0800685c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800685c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800685e:	4802      	ldr	r0, [pc, #8]	; (8006868 <DMA1_Channel1_IRQHandler+0xc>)
 8006860:	f000 fdd0 	bl	8007404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006864:	bd10      	pop	{r4, pc}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	20003a7c 	.word	0x20003a7c

0800686c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800686c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800686e:	4803      	ldr	r0, [pc, #12]	; (800687c <DMA1_Channel2_3_IRQHandler+0x10>)
 8006870:	f000 fdc8 	bl	8007404 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006874:	4802      	ldr	r0, [pc, #8]	; (8006880 <DMA1_Channel2_3_IRQHandler+0x14>)
 8006876:	f000 fdc5 	bl	8007404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800687a:	bd10      	pop	{r4, pc}
 800687c:	20003ad8 	.word	0x20003ad8
 8006880:	20003b34 	.word	0x20003b34

08006884 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8006884:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006886:	4803      	ldr	r0, [pc, #12]	; (8006894 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8006888:	f000 fdbc 	bl	8007404 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 800688c:	4802      	ldr	r0, [pc, #8]	; (8006898 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800688e:	f000 fe0d 	bl	80074ac <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8006892:	bd10      	pop	{r4, pc}
 8006894:	20003b90 	.word	0x20003b90
 8006898:	20003a7c 	.word	0x20003a7c

0800689c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800689c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800689e:	4802      	ldr	r0, [pc, #8]	; (80068a8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80068a0:	f002 f9fc 	bl	8008c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	20003f08 	.word	0x20003f08

080068ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80068ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80068ae:	4802      	ldr	r0, [pc, #8]	; (80068b8 <TIM6_IRQHandler+0xc>)
 80068b0:	f002 f9f4 	bl	8008c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	20003ca4 	.word	0x20003ca4

080068bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80068bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80068be:	4802      	ldr	r0, [pc, #8]	; (80068c8 <USART1_IRQHandler+0xc>)
 80068c0:	f002 fbd4 	bl	800906c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	20003cf0 	.word	0x20003cf0

080068cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80068cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80068ce:	4802      	ldr	r0, [pc, #8]	; (80068d8 <USART2_IRQHandler+0xc>)
 80068d0:	f002 fbcc 	bl	800906c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80068d4:	bd10      	pop	{r4, pc}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	20003d84 	.word	0x20003d84

080068dc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80068dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80068de:	4802      	ldr	r0, [pc, #8]	; (80068e8 <USART3_4_IRQHandler+0xc>)
 80068e0:	f002 fbc4 	bl	800906c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	20003e18 	.word	0x20003e18

080068ec <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80068ec:	2001      	movs	r0, #1
 80068ee:	4770      	bx	lr

080068f0 <_kill>:

int _kill(int pid, int sig)
{
 80068f0:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80068f2:	f006 fe1b 	bl	800d52c <__errno>
 80068f6:	2316      	movs	r3, #22
 80068f8:	6003      	str	r3, [r0, #0]
  return -1;
 80068fa:	2001      	movs	r0, #1
}
 80068fc:	4240      	negs	r0, r0
 80068fe:	bd10      	pop	{r4, pc}

08006900 <_exit>:

void _exit (int status)
{
 8006900:	b510      	push	{r4, lr}
  errno = EINVAL;
 8006902:	f006 fe13 	bl	800d52c <__errno>
 8006906:	2316      	movs	r3, #22
 8006908:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800690a:	e7fe      	b.n	800690a <_exit+0xa>

0800690c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	000e      	movs	r6, r1
 8006910:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006912:	2500      	movs	r5, #0
 8006914:	42a5      	cmp	r5, r4
 8006916:	db01      	blt.n	800691c <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8006918:	0020      	movs	r0, r4
 800691a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800691c:	e000      	b.n	8006920 <_read+0x14>
 800691e:	bf00      	nop
 8006920:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006922:	3501      	adds	r5, #1
 8006924:	e7f6      	b.n	8006914 <_read+0x8>

08006926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006926:	b570      	push	{r4, r5, r6, lr}
 8006928:	000e      	movs	r6, r1
 800692a:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800692c:	2500      	movs	r5, #0
 800692e:	42a5      	cmp	r5, r4
 8006930:	db01      	blt.n	8006936 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8006932:	0020      	movs	r0, r4
 8006934:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8006936:	5d70      	ldrb	r0, [r6, r5]
 8006938:	e000      	b.n	800693c <_write+0x16>
 800693a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800693c:	3501      	adds	r5, #1
 800693e:	e7f6      	b.n	800692e <_write+0x8>

08006940 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8006940:	2001      	movs	r0, #1
}
 8006942:	4240      	negs	r0, r0
 8006944:	4770      	bx	lr

08006946 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	019b      	lsls	r3, r3, #6
  return 0;
}
 800694a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800694c:	604b      	str	r3, [r1, #4]
}
 800694e:	4770      	bx	lr

08006950 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006950:	2001      	movs	r0, #1
 8006952:	4770      	bx	lr

08006954 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006954:	2000      	movs	r0, #0
 8006956:	4770      	bx	lr

08006958 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006958:	490b      	ldr	r1, [pc, #44]	; (8006988 <_sbrk+0x30>)
 800695a:	4a0c      	ldr	r2, [pc, #48]	; (800698c <_sbrk+0x34>)
{
 800695c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800695e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006960:	490b      	ldr	r1, [pc, #44]	; (8006990 <_sbrk+0x38>)
{
 8006962:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8006964:	6808      	ldr	r0, [r1, #0]
 8006966:	2800      	cmp	r0, #0
 8006968:	d101      	bne.n	800696e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800696a:	480a      	ldr	r0, [pc, #40]	; (8006994 <_sbrk+0x3c>)
 800696c:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800696e:	6808      	ldr	r0, [r1, #0]
 8006970:	18c3      	adds	r3, r0, r3
 8006972:	4293      	cmp	r3, r2
 8006974:	d906      	bls.n	8006984 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8006976:	f006 fdd9 	bl	800d52c <__errno>
 800697a:	230c      	movs	r3, #12
 800697c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800697e:	2001      	movs	r0, #1
 8006980:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8006982:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8006984:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8006986:	e7fc      	b.n	8006982 <_sbrk+0x2a>
 8006988:	00000400 	.word	0x00000400
 800698c:	20009000 	.word	0x20009000
 8006990:	20003f54 	.word	0x20003f54
 8006994:	20005a88 	.word	0x20005a88

08006998 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006998:	4770      	bx	lr
	...

0800699c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800699c:	480d      	ldr	r0, [pc, #52]	; (80069d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800699e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80069a0:	f7ff fffa 	bl	8006998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069a4:	480c      	ldr	r0, [pc, #48]	; (80069d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80069a6:	490d      	ldr	r1, [pc, #52]	; (80069dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80069a8:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <LoopForever+0xe>)
  movs r3, #0
 80069aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069ac:	e002      	b.n	80069b4 <LoopCopyDataInit>

080069ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069b2:	3304      	adds	r3, #4

080069b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069b8:	d3f9      	bcc.n	80069ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069ba:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80069bc:	4c0a      	ldr	r4, [pc, #40]	; (80069e8 <LoopForever+0x16>)
  movs r3, #0
 80069be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069c0:	e001      	b.n	80069c6 <LoopFillZerobss>

080069c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069c4:	3204      	adds	r2, #4

080069c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069c8:	d3fb      	bcc.n	80069c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80069ca:	f006 fdb5 	bl	800d538 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80069ce:	f7fd fd95 	bl	80044fc <main>

080069d2 <LoopForever>:

LoopForever:
  b LoopForever
 80069d2:	e7fe      	b.n	80069d2 <LoopForever>
  ldr   r0, =_estack
 80069d4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80069d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80069dc:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80069e0:	08012380 	.word	0x08012380
  ldr r2, =_sbss
 80069e4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80069e8:	20005a84 	.word	0x20005a84

080069ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80069ec:	e7fe      	b.n	80069ec <ADC1_IRQHandler>
	...

080069f0 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069f0:	2380      	movs	r3, #128	; 0x80
 80069f2:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <HAL_Init+0x24>)
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	6811      	ldr	r1, [r2, #0]
{
 80069f8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069fa:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069fc:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069fe:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a00:	f7ff feda 	bl	80067b8 <HAL_InitTick>
 8006a04:	1e04      	subs	r4, r0, #0
 8006a06:	d103      	bne.n	8006a10 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006a08:	f7ff fcd2 	bl	80063b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8006a0c:	0020      	movs	r0, r4
 8006a0e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8006a10:	2401      	movs	r4, #1
 8006a12:	e7fb      	b.n	8006a0c <HAL_Init+0x1c>
 8006a14:	40022000 	.word	0x40022000

08006a18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006a18:	4a03      	ldr	r2, [pc, #12]	; (8006a28 <HAL_IncTick+0x10>)
 8006a1a:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <HAL_IncTick+0x14>)
 8006a1c:	6811      	ldr	r1, [r2, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	185b      	adds	r3, r3, r1
 8006a22:	6013      	str	r3, [r2, #0]
}
 8006a24:	4770      	bx	lr
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	20003f58 	.word	0x20003f58
 8006a2c:	200000e8 	.word	0x200000e8

08006a30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006a30:	4b01      	ldr	r3, [pc, #4]	; (8006a38 <HAL_GetTick+0x8>)
 8006a32:	6818      	ldr	r0, [r3, #0]
}
 8006a34:	4770      	bx	lr
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	20003f58 	.word	0x20003f58

08006a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006a40:	f7ff fff6 	bl	8006a30 <HAL_GetTick>
 8006a44:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a46:	1c63      	adds	r3, r4, #1
 8006a48:	d002      	beq.n	8006a50 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a4a:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <HAL_Delay+0x20>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a50:	f7ff ffee 	bl	8006a30 <HAL_GetTick>
 8006a54:	1b40      	subs	r0, r0, r5
 8006a56:	42a0      	cmp	r0, r4
 8006a58:	d3fa      	bcc.n	8006a50 <HAL_Delay+0x14>
  {
  }
}
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	200000e8 	.word	0x200000e8

08006a60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006a60:	4a03      	ldr	r2, [pc, #12]	; (8006a70 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8006a62:	4904      	ldr	r1, [pc, #16]	; (8006a74 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8006a64:	6813      	ldr	r3, [r2, #0]
 8006a66:	400b      	ands	r3, r1
 8006a68:	4303      	orrs	r3, r0
 8006a6a:	6013      	str	r3, [r2, #0]
}
 8006a6c:	4770      	bx	lr
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	40010000 	.word	0x40010000
 8006a74:	fffff9ff 	.word	0xfffff9ff

08006a78 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a78:	6880      	ldr	r0, [r0, #8]
 8006a7a:	0740      	lsls	r0, r0, #29
 8006a7c:	0fc0      	lsrs	r0, r0, #31
}
 8006a7e:	4770      	bx	lr

08006a80 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006a80:	2300      	movs	r3, #0
{
 8006a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a84:	b085      	sub	sp, #20
 8006a86:	0004      	movs	r4, r0

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8006a88:	2601      	movs	r6, #1
  __IO uint32_t wait_loop_index = 0UL;
 8006a8a:	9303      	str	r3, [sp, #12]
  if (hadc == NULL)
 8006a8c:	4298      	cmp	r0, r3
 8006a8e:	d100      	bne.n	8006a92 <HAL_ADC_Init+0x12>
 8006a90:	e0b4      	b.n	8006bfc <HAL_ADC_Init+0x17c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a92:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8006a94:	429d      	cmp	r5, r3
 8006a96:	d105      	bne.n	8006aa4 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a98:	f7ff fcaa 	bl	80063f0 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006a9c:	0023      	movs	r3, r4
 8006a9e:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8006aa0:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8006aa2:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006aa4:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006aa6:	6825      	ldr	r5, [r4, #0]
 8006aa8:	055b      	lsls	r3, r3, #21
 8006aaa:	68aa      	ldr	r2, [r5, #8]
 8006aac:	421a      	tst	r2, r3
 8006aae:	d100      	bne.n	8006ab2 <HAL_ADC_Init+0x32>
 8006ab0:	e0a7      	b.n	8006c02 <HAL_ADC_Init+0x182>
 8006ab2:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ab4:	2600      	movs	r6, #0
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	d407      	bmi.n	8006aca <HAL_ADC_Init+0x4a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aba:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006abc:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006abe:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ac4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ac6:	4333      	orrs	r3, r6
 8006ac8:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006aca:	0028      	movs	r0, r5
 8006acc:	f7ff ffd4 	bl	8006a78 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ad0:	2210      	movs	r2, #16
 8006ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	4303      	orrs	r3, r0
 8006ad8:	d000      	beq.n	8006adc <HAL_ADC_Init+0x5c>
 8006ada:	e0cd      	b.n	8006c78 <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006adc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006ade:	4b69      	ldr	r3, [pc, #420]	; (8006c84 <HAL_ADC_Init+0x204>)
 8006ae0:	401a      	ands	r2, r3
 8006ae2:	3306      	adds	r3, #6
 8006ae4:	33ff      	adds	r3, #255	; 0xff
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	65a3      	str	r3, [r4, #88]	; 0x58
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006aea:	6922      	ldr	r2, [r4, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006aec:	68ab      	ldr	r3, [r5, #8]
 8006aee:	9201      	str	r2, [sp, #4]
 8006af0:	07db      	lsls	r3, r3, #31
 8006af2:	d462      	bmi.n	8006bba <HAL_ADC_Init+0x13a>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006af4:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8006af6:	68e1      	ldr	r1, [r4, #12]
 8006af8:	1e7b      	subs	r3, r7, #1
 8006afa:	419f      	sbcs	r7, r3
 8006afc:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006afe:	7ea2      	ldrb	r2, [r4, #26]
 8006b00:	430b      	orrs	r3, r1
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006b02:	7e21      	ldrb	r1, [r4, #24]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006b04:	033f      	lsls	r7, r7, #12
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006b06:	0389      	lsls	r1, r1, #14
 8006b08:	430b      	orrs	r3, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006b0a:	7e61      	ldrb	r1, [r4, #25]
 8006b0c:	03c9      	lsls	r1, r1, #15
 8006b0e:	430b      	orrs	r3, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006b10:	0351      	lsls	r1, r2, #13
 8006b12:	430b      	orrs	r3, r1
 8006b14:	469c      	mov	ip, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	db00      	blt.n	8006b1e <HAL_ADC_Init+0x9e>
 8006b1c:	e086      	b.n	8006c2c <HAL_ADC_Init+0x1ac>
 8006b1e:	0059      	lsls	r1, r3, #1
 8006b20:	0849      	lsrs	r1, r1, #1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006b22:	0023      	movs	r3, r4
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006b24:	4660      	mov	r0, ip
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006b26:	332c      	adds	r3, #44	; 0x2c
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006b2c:	4303      	orrs	r3, r0
 8006b2e:	433b      	orrs	r3, r7
 8006b30:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b32:	1c61      	adds	r1, r4, #1
 8006b34:	7fc9      	ldrb	r1, [r1, #31]
 8006b36:	2901      	cmp	r1, #1
 8006b38:	d105      	bne.n	8006b46 <HAL_ADC_Init+0xc6>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d000      	beq.n	8006b40 <HAL_ADC_Init+0xc0>
 8006b3e:	e078      	b.n	8006c32 <HAL_ADC_Init+0x1b2>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006b40:	2280      	movs	r2, #128	; 0x80
 8006b42:	0252      	lsls	r2, r2, #9
 8006b44:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_ADC_Init+0xd8>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006b4c:	21e0      	movs	r1, #224	; 0xe0
 8006b4e:	0049      	lsls	r1, r1, #1
 8006b50:	400a      	ands	r2, r1
 8006b52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006b54:	430a      	orrs	r2, r1
 8006b56:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006b58:	68ea      	ldr	r2, [r5, #12]
 8006b5a:	494b      	ldr	r1, [pc, #300]	; (8006c88 <HAL_ADC_Init+0x208>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60eb      	str	r3, [r5, #12]

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006b62:	0023      	movs	r3, r4
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006b64:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006b66:	333c      	adds	r3, #60	; 0x3c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006b68:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006b6c:	0f97      	lsrs	r7, r2, #30
 8006b6e:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 8006b70:	469c      	mov	ip, r3
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006b72:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d108      	bne.n	8006b8a <HAL_ADC_Init+0x10a>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8006b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b7a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006b7c:	4303      	orrs	r3, r0
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b82:	430b      	orrs	r3, r1
 8006b84:	4661      	mov	r1, ip
 8006b86:	433b      	orrs	r3, r7
 8006b88:	4319      	orrs	r1, r3
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006b8a:	692b      	ldr	r3, [r5, #16]
 8006b8c:	4f3f      	ldr	r7, [pc, #252]	; (8006c8c <HAL_ADC_Init+0x20c>)
 8006b8e:	403b      	ands	r3, r7
 8006b90:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006b92:	2180      	movs	r1, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8006b94:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006b96:	0053      	lsls	r3, r2, #1
 8006b98:	085b      	lsrs	r3, r3, #1
 8006b9a:	05c9      	lsls	r1, r1, #23
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	d00c      	beq.n	8006bba <HAL_ADC_Init+0x13a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	061b      	lsls	r3, r3, #24
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d008      	beq.n	8006bba <HAL_ADC_Init+0x13a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006ba8:	4939      	ldr	r1, [pc, #228]	; (8006c90 <HAL_ADC_Init+0x210>)
 8006baa:	4f3a      	ldr	r7, [pc, #232]	; (8006c94 <HAL_ADC_Init+0x214>)
 8006bac:	680b      	ldr	r3, [r1, #0]
 8006bae:	403b      	ands	r3, r7
 8006bb0:	27f0      	movs	r7, #240	; 0xf0
 8006bb2:	03bf      	lsls	r7, r7, #14
 8006bb4:	403a      	ands	r2, r7
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 8006bba:	2107      	movs	r1, #7
 8006bbc:	2770      	movs	r7, #112	; 0x70
 8006bbe:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8006bc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006bc2:	438b      	bics	r3, r1
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	616b      	str	r3, [r5, #20]
 8006bc8:	6969      	ldr	r1, [r5, #20]
 8006bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bcc:	43b9      	bics	r1, r7
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8006bd4:	9b01      	ldr	r3, [sp, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d133      	bne.n	8006c42 <HAL_ADC_Init+0x1c2>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8006bda:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006bdc:	3b10      	subs	r3, #16
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006bde:	430b      	orrs	r3, r1
 8006be0:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006be2:	2107      	movs	r1, #7
 8006be4:	696b      	ldr	r3, [r5, #20]
 8006be6:	400b      	ands	r3, r1
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d13a      	bne.n	8006c62 <HAL_ADC_Init+0x1e2>
      == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006bec:	2300      	movs	r3, #0
 8006bee:	65e3      	str	r3, [r4, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006bf0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006bf2:	3303      	adds	r3, #3
 8006bf4:	439a      	bics	r2, r3
 8006bf6:	3b02      	subs	r3, #2
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8006bfc:	0030      	movs	r0, r6
 8006bfe:	b005      	add	sp, #20
 8006c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8006c02:	68aa      	ldr	r2, [r5, #8]
 8006c04:	4924      	ldr	r1, [pc, #144]	; (8006c98 <HAL_ADC_Init+0x218>)
 8006c06:	400a      	ands	r2, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c0c:	4b23      	ldr	r3, [pc, #140]	; (8006c9c <HAL_ADC_Init+0x21c>)
 8006c0e:	4924      	ldr	r1, [pc, #144]	; (8006ca0 <HAL_ADC_Init+0x220>)
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	f7f9 fa9f 	bl	8000154 <__udivsi3>
 8006c16:	3001      	adds	r0, #1
 8006c18:	0040      	lsls	r0, r0, #1
 8006c1a:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d100      	bne.n	8006c24 <HAL_ADC_Init+0x1a4>
 8006c22:	e746      	b.n	8006ab2 <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	e7f7      	b.n	8006c1c <HAL_ADC_Init+0x19c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006c2c:	2180      	movs	r1, #128	; 0x80
 8006c2e:	0389      	lsls	r1, r1, #14
 8006c30:	e777      	b.n	8006b22 <HAL_ADC_Init+0xa2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c32:	2220      	movs	r2, #32
 8006c34:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8006c36:	433a      	orrs	r2, r7
 8006c38:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006c3c:	4311      	orrs	r1, r2
 8006c3e:	65e1      	str	r1, [r4, #92]	; 0x5c
 8006c40:	e781      	b.n	8006b46 <HAL_ADC_Init+0xc6>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	9901      	ldr	r1, [sp, #4]
 8006c46:	039b      	lsls	r3, r3, #14
 8006c48:	4299      	cmp	r1, r3
 8006c4a:	d1ca      	bne.n	8006be2 <HAL_ADC_Init+0x162>
      MODIFY_REG(hadc->Instance->CHSELR,
 8006c4c:	211c      	movs	r1, #28
 8006c4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006c50:	69e3      	ldr	r3, [r4, #28]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	400b      	ands	r3, r1
 8006c58:	392c      	subs	r1, #44	; 0x2c
 8006c5a:	4099      	lsls	r1, r3
 8006c5c:	000b      	movs	r3, r1
 8006c5e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006c60:	e7bd      	b.n	8006bde <HAL_ADC_Init+0x15e>
      ADC_STATE_CLR_SET(hadc->State,
 8006c62:	2312      	movs	r3, #18
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c64:	2601      	movs	r6, #1
      ADC_STATE_CLR_SET(hadc->State,
 8006c66:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006c68:	439a      	bics	r2, r3
 8006c6a:	3b02      	subs	r3, #2
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006c72:	4333      	orrs	r3, r6
 8006c74:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8006c76:	e7c1      	b.n	8006bfc <HAL_ADC_Init+0x17c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8006c7a:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8006c80:	e7bc      	b.n	8006bfc <HAL_ADC_Init+0x17c>
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	fffffefd 	.word	0xfffffefd
 8006c88:	fffe0201 	.word	0xfffe0201
 8006c8c:	1ffffc02 	.word	0x1ffffc02
 8006c90:	40012708 	.word	0x40012708
 8006c94:	ffc3ffff 	.word	0xffc3ffff
 8006c98:	6fffffe8 	.word	0x6fffffe8
 8006c9c:	200000e4 	.word	0x200000e4
 8006ca0:	00030d40 	.word	0x00030d40

08006ca4 <HAL_ADC_ConvCpltCallback>:
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_ADC_ConvHalfCpltCallback>:
 8006ca6:	4770      	bx	lr

08006ca8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006caa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006cac:	f7ff fffb 	bl	8006ca6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006cb0:	bd10      	pop	{r4, pc}

08006cb2 <HAL_ADC_ErrorCallback>:
 8006cb2:	4770      	bx	lr

08006cb4 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006cb4:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8006cb8:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006cba:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006cc8:	f7ff fff3 	bl	8006cb2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ccc:	bd10      	pop	{r4, pc}
	...

08006cd0 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006cd0:	2350      	movs	r3, #80	; 0x50
{
 8006cd2:	b570      	push	{r4, r5, r6, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006cd6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006cd8:	421a      	tst	r2, r3
 8006cda:	d12d      	bne.n	8006d38 <ADC_DMAConvCplt+0x68>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006cdc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006cde:	33b1      	adds	r3, #177	; 0xb1
 8006ce0:	33ff      	adds	r3, #255	; 0xff
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006ce6:	23c0      	movs	r3, #192	; 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ce8:	6825      	ldr	r5, [r4, #0]
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	68ea      	ldr	r2, [r5, #12]
 8006cee:	421a      	tst	r2, r3
 8006cf0:	d115      	bne.n	8006d1e <ADC_DMAConvCplt+0x4e>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006cf2:	7ea3      	ldrb	r3, [r4, #26]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d112      	bne.n	8006d1e <ADC_DMAConvCplt+0x4e>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	071b      	lsls	r3, r3, #28
 8006cfc:	d50f      	bpl.n	8006d1e <ADC_DMAConvCplt+0x4e>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cfe:	0028      	movs	r0, r5
 8006d00:	f7ff feba 	bl	8006a78 <LL_ADC_REG_IsConversionOngoing>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d10e      	bne.n	8006d26 <ADC_DMAConvCplt+0x56>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006d08:	220c      	movs	r2, #12
 8006d0a:	686b      	ldr	r3, [r5, #4]
 8006d0c:	4393      	bics	r3, r2
 8006d0e:	606b      	str	r3, [r5, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8006d10:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006d12:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <ADC_DMAConvCplt+0x80>)
 8006d14:	401a      	ands	r2, r3
 8006d16:	3304      	adds	r3, #4
 8006d18:	33ff      	adds	r3, #255	; 0xff
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8006d1e:	0020      	movs	r0, r4
 8006d20:	f7ff ffc0 	bl	8006ca4 <HAL_ADC_ConvCpltCallback>
}
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d26:	2320      	movs	r3, #32
 8006d28:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d2e:	2301      	movs	r3, #1
 8006d30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006d32:	4313      	orrs	r3, r2
 8006d34:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006d36:	e7f2      	b.n	8006d1e <ADC_DMAConvCplt+0x4e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d3a:	06db      	lsls	r3, r3, #27
 8006d3c:	d503      	bpl.n	8006d46 <ADC_DMAConvCplt+0x76>
      HAL_ADC_ErrorCallback(hadc);
 8006d3e:	0020      	movs	r0, r4
 8006d40:	f7ff ffb7 	bl	8006cb2 <HAL_ADC_ErrorCallback>
 8006d44:	e7ee      	b.n	8006d24 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d46:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4a:	4798      	blx	r3
}
 8006d4c:	e7ea      	b.n	8006d24 <ADC_DMAConvCplt+0x54>
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	fffffefe 	.word	0xfffffefe

08006d54 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0UL;
 8006d54:	2300      	movs	r3, #0
{
 8006d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d58:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8006d5a:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8006d5c:	0003      	movs	r3, r0
{
 8006d5e:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hadc);
 8006d60:	3354      	adds	r3, #84	; 0x54
 8006d62:	781a      	ldrb	r2, [r3, #0]
{
 8006d64:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8006d66:	2002      	movs	r0, #2
 8006d68:	2a01      	cmp	r2, #1
 8006d6a:	d100      	bne.n	8006d6e <HAL_ADC_ConfigChannel+0x1a>
 8006d6c:	e0bf      	b.n	8006eee <HAL_ADC_ConfigChannel+0x19a>
 8006d6e:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006d70:	692f      	ldr	r7, [r5, #16]
  __HAL_LOCK(hadc);
 8006d72:	701a      	strb	r2, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d74:	682e      	ldr	r6, [r5, #0]
 8006d76:	0030      	movs	r0, r6
 8006d78:	f7ff fe7e 	bl	8006a78 <LL_ADC_REG_IsConversionOngoing>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d000      	beq.n	8006d82 <HAL_ADC_ConfigChannel+0x2e>
 8006d80:	e0ea      	b.n	8006f58 <HAL_ADC_ConfigChannel+0x204>
    if (pConfig->Rank != ADC_RANK_NONE)
 8006d82:	9b00      	ldr	r3, [sp, #0]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006d84:	2204      	movs	r2, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2180      	movs	r1, #128	; 0x80
 8006d8a:	469c      	mov	ip, r3
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006d8c:	4397      	bics	r7, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8006d8e:	4662      	mov	r2, ip
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006d90:	9b00      	ldr	r3, [sp, #0]
 8006d92:	0609      	lsls	r1, r1, #24
 8006d94:	681b      	ldr	r3, [r3, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8006d96:	2a02      	cmp	r2, #2
 8006d98:	d100      	bne.n	8006d9c <HAL_ADC_ConfigChannel+0x48>
 8006d9a:	e0b1      	b.n	8006f00 <HAL_ADC_ConfigChannel+0x1ac>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006d9c:	035a      	lsls	r2, r3, #13
 8006d9e:	0b52      	lsrs	r2, r2, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006da0:	428f      	cmp	r7, r1
 8006da2:	d110      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x72>
 8006da4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 8006da6:	430a      	orrs	r2, r1
 8006da8:	62b2      	str	r2, [r6, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8006daa:	9a00      	ldr	r2, [sp, #0]
 8006dac:	6970      	ldr	r0, [r6, #20]
 8006dae:	6892      	ldr	r2, [r2, #8]
 8006db0:	0219      	lsls	r1, r3, #8
 8006db2:	4c6c      	ldr	r4, [pc, #432]	; (8006f64 <HAL_ADC_ConfigChannel+0x210>)
 8006db4:	400a      	ands	r2, r1
 8006db6:	4022      	ands	r2, r4
 8006db8:	4388      	bics	r0, r1
 8006dba:	4302      	orrs	r2, r0
 8006dbc:	6172      	str	r2, [r6, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	db60      	blt.n	8006e84 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dc2:	2000      	movs	r0, #0
}
 8006dc4:	e090      	b.n	8006ee8 <HAL_ADC_ConfigChannel+0x194>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006dc6:	211f      	movs	r1, #31
 8006dc8:	4667      	mov	r7, ip
 8006dca:	400f      	ands	r7, r1
 8006dcc:	3910      	subs	r1, #16
 8006dce:	40b9      	lsls	r1, r7
 8006dd0:	43cc      	mvns	r4, r1
 8006dd2:	9401      	str	r4, [sp, #4]
 8006dd4:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8006dd6:	438c      	bics	r4, r1
 8006dd8:	0021      	movs	r1, r4
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	d112      	bne.n	8006e04 <HAL_ADC_ConfigChannel+0xb0>
 8006dde:	0e98      	lsrs	r0, r3, #26
 8006de0:	321f      	adds	r2, #31
 8006de2:	4010      	ands	r0, r2
 8006de4:	40b8      	lsls	r0, r7
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006de6:	4662      	mov	r2, ip
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006de8:	4308      	orrs	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006dea:	0892      	lsrs	r2, r2, #2
 8006dec:	69e9      	ldr	r1, [r5, #28]
 8006dee:	3201      	adds	r2, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006df0:	6628      	str	r0, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006df2:	428a      	cmp	r2, r1
 8006df4:	d8d9      	bhi.n	8006daa <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8006df6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8006df8:	9801      	ldr	r0, [sp, #4]
 8006dfa:	009a      	lsls	r2, r3, #2
 8006dfc:	0f12      	lsrs	r2, r2, #28
 8006dfe:	40ba      	lsls	r2, r7
 8006e00:	4001      	ands	r1, r0
 8006e02:	e7d0      	b.n	8006da6 <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006e04:	2201      	movs	r2, #1
 8006e06:	4213      	tst	r3, r2
 8006e08:	d1ec      	bne.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e0a:	1892      	adds	r2, r2, r2
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	4213      	tst	r3, r2
 8006e10:	d1e8      	bne.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e12:	0010      	movs	r0, r2
 8006e14:	3202      	adds	r2, #2
 8006e16:	4213      	tst	r3, r2
 8006e18:	d1e4      	bne.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	071a      	lsls	r2, r3, #28
 8006e1e:	d4e1      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e20:	3001      	adds	r0, #1
 8006e22:	06da      	lsls	r2, r3, #27
 8006e24:	d4de      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e26:	3001      	adds	r0, #1
 8006e28:	069a      	lsls	r2, r3, #26
 8006e2a:	d4db      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	065a      	lsls	r2, r3, #25
 8006e30:	d4d8      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e32:	3001      	adds	r0, #1
 8006e34:	061a      	lsls	r2, r3, #24
 8006e36:	d4d5      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	05da      	lsls	r2, r3, #23
 8006e3c:	d4d2      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e3e:	3001      	adds	r0, #1
 8006e40:	059a      	lsls	r2, r3, #22
 8006e42:	d4cf      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e44:	3001      	adds	r0, #1
 8006e46:	055a      	lsls	r2, r3, #21
 8006e48:	d4cc      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	051a      	lsls	r2, r3, #20
 8006e4e:	d4c9      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e50:	3001      	adds	r0, #1
 8006e52:	04da      	lsls	r2, r3, #19
 8006e54:	d4c6      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e56:	3001      	adds	r0, #1
 8006e58:	049a      	lsls	r2, r3, #18
 8006e5a:	d4c3      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	045a      	lsls	r2, r3, #17
 8006e60:	d4c0      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e62:	3001      	adds	r0, #1
 8006e64:	041a      	lsls	r2, r3, #16
 8006e66:	d4bd      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e68:	3001      	adds	r0, #1
 8006e6a:	03da      	lsls	r2, r3, #15
 8006e6c:	d4ba      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e6e:	3001      	adds	r0, #1
 8006e70:	039a      	lsls	r2, r3, #14
 8006e72:	d4b7      	bmi.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e74:	2280      	movs	r2, #128	; 0x80
 8006e76:	0018      	movs	r0, r3
 8006e78:	02d2      	lsls	r2, r2, #11
 8006e7a:	4010      	ands	r0, r2
 8006e7c:	4213      	tst	r3, r2
 8006e7e:	d0b1      	beq.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
 8006e80:	2012      	movs	r0, #18
 8006e82:	e7af      	b.n	8006de4 <HAL_ADC_ConfigChannel+0x90>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006e84:	24e0      	movs	r4, #224	; 0xe0
 8006e86:	4a38      	ldr	r2, [pc, #224]	; (8006f68 <HAL_ADC_ConfigChannel+0x214>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006e88:	4838      	ldr	r0, [pc, #224]	; (8006f6c <HAL_ADC_ConfigChannel+0x218>)
 8006e8a:	6811      	ldr	r1, [r2, #0]
 8006e8c:	0464      	lsls	r4, r4, #17
 8006e8e:	400c      	ands	r4, r1
 8006e90:	4283      	cmp	r3, r0
 8006e92:	d119      	bne.n	8006ec8 <HAL_ADC_ConfigChannel+0x174>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006e94:	2080      	movs	r0, #128	; 0x80
 8006e96:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006e98:	4201      	tst	r1, r0
 8006e9a:	d192      	bne.n	8006dc2 <HAL_ADC_ConfigChannel+0x6e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006e9c:	6813      	ldr	r3, [r2, #0]
 8006e9e:	4934      	ldr	r1, [pc, #208]	; (8006f70 <HAL_ADC_ConfigChannel+0x21c>)
 8006ea0:	400b      	ands	r3, r1
 8006ea2:	4323      	orrs	r3, r4
 8006ea4:	4318      	orrs	r0, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ea6:	4b33      	ldr	r3, [pc, #204]	; (8006f74 <HAL_ADC_ConfigChannel+0x220>)
 8006ea8:	6010      	str	r0, [r2, #0]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	4932      	ldr	r1, [pc, #200]	; (8006f78 <HAL_ADC_ConfigChannel+0x224>)
 8006eae:	f7f9 f951 	bl	8000154 <__udivsi3>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	200c      	movs	r0, #12
 8006eb6:	4358      	muls	r0, r3
 8006eb8:	9003      	str	r0, [sp, #12]
          while (wait_loop_index != 0UL)
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d080      	beq.n	8006dc2 <HAL_ADC_ConfigChannel+0x6e>
            wait_loop_index--;
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	9303      	str	r3, [sp, #12]
 8006ec6:	e7f8      	b.n	8006eba <HAL_ADC_ConfigChannel+0x166>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006ec8:	482c      	ldr	r0, [pc, #176]	; (8006f7c <HAL_ADC_ConfigChannel+0x228>)
 8006eca:	4283      	cmp	r3, r0
 8006ecc:	d111      	bne.n	8006ef2 <HAL_ADC_ConfigChannel+0x19e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006ece:	2380      	movs	r3, #128	; 0x80
 8006ed0:	045b      	lsls	r3, r3, #17
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006ed2:	0008      	movs	r0, r1
 8006ed4:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006ed6:	4219      	tst	r1, r3
 8006ed8:	d000      	beq.n	8006edc <HAL_ADC_ConfigChannel+0x188>
 8006eda:	e772      	b.n	8006dc2 <HAL_ADC_ConfigChannel+0x6e>
 8006edc:	6811      	ldr	r1, [r2, #0]
 8006ede:	4e24      	ldr	r6, [pc, #144]	; (8006f70 <HAL_ADC_ConfigChannel+0x21c>)
 8006ee0:	4031      	ands	r1, r6
 8006ee2:	4321      	orrs	r1, r4
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8006ee8:	2300      	movs	r3, #0
 8006eea:	3554      	adds	r5, #84	; 0x54
 8006eec:	702b      	strb	r3, [r5, #0]
}
 8006eee:	b005      	add	sp, #20
 8006ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006ef2:	4823      	ldr	r0, [pc, #140]	; (8006f80 <HAL_ADC_ConfigChannel+0x22c>)
 8006ef4:	4283      	cmp	r3, r0
 8006ef6:	d000      	beq.n	8006efa <HAL_ADC_ConfigChannel+0x1a6>
 8006ef8:	e763      	b.n	8006dc2 <HAL_ADC_ConfigChannel+0x6e>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	03db      	lsls	r3, r3, #15
 8006efe:	e7e8      	b.n	8006ed2 <HAL_ADC_ConfigChannel+0x17e>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006f00:	428f      	cmp	r7, r1
 8006f02:	d104      	bne.n	8006f0e <HAL_ADC_ConfigChannel+0x1ba>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006f04:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8006f06:	0359      	lsls	r1, r3, #13
 8006f08:	0b49      	lsrs	r1, r1, #13
 8006f0a:	438a      	bics	r2, r1
 8006f0c:	62b2      	str	r2, [r6, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	db00      	blt.n	8006f14 <HAL_ADC_ConfigChannel+0x1c0>
 8006f12:	e756      	b.n	8006dc2 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006f14:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <HAL_ADC_ConfigChannel+0x214>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f16:	4815      	ldr	r0, [pc, #84]	; (8006f6c <HAL_ADC_ConfigChannel+0x218>)
 8006f18:	6811      	ldr	r1, [r2, #0]
 8006f1a:	4283      	cmp	r3, r0
 8006f1c:	d108      	bne.n	8006f30 <HAL_ADC_ConfigChannel+0x1dc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f1e:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006f20:	6810      	ldr	r0, [r2, #0]
 8006f22:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f24:	400b      	ands	r3, r1
 8006f26:	4912      	ldr	r1, [pc, #72]	; (8006f70 <HAL_ADC_ConfigChannel+0x21c>)
 8006f28:	4001      	ands	r1, r0
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e748      	b.n	8006dc2 <HAL_ADC_ConfigChannel+0x6e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006f30:	4812      	ldr	r0, [pc, #72]	; (8006f7c <HAL_ADC_ConfigChannel+0x228>)
 8006f32:	4283      	cmp	r3, r0
 8006f34:	d103      	bne.n	8006f3e <HAL_ADC_ConfigChannel+0x1ea>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f36:	23c0      	movs	r3, #192	; 0xc0
 8006f38:	6810      	ldr	r0, [r2, #0]
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	e7f2      	b.n	8006f24 <HAL_ADC_ConfigChannel+0x1d0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006f3e:	4810      	ldr	r0, [pc, #64]	; (8006f80 <HAL_ADC_ConfigChannel+0x22c>)
 8006f40:	4283      	cmp	r3, r0
 8006f42:	d000      	beq.n	8006f46 <HAL_ADC_ConfigChannel+0x1f2>
 8006f44:	e73d      	b.n	8006dc2 <HAL_ADC_ConfigChannel+0x6e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f46:	20c0      	movs	r0, #192	; 0xc0
 8006f48:	0440      	lsls	r0, r0, #17
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	4001      	ands	r1, r0
 8006f4e:	4808      	ldr	r0, [pc, #32]	; (8006f70 <HAL_ADC_ConfigChannel+0x21c>)
 8006f50:	4003      	ands	r3, r0
 8006f52:	4319      	orrs	r1, r3
 8006f54:	6011      	str	r1, [r2, #0]
 8006f56:	e734      	b.n	8006dc2 <HAL_ADC_ConfigChannel+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f58:	2320      	movs	r3, #32
 8006f5a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8006f5c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8006f62:	e7c1      	b.n	8006ee8 <HAL_ADC_ConfigChannel+0x194>
 8006f64:	07ffff00 	.word	0x07ffff00
 8006f68:	40012708 	.word	0x40012708
 8006f6c:	b0001000 	.word	0xb0001000
 8006f70:	fe3fffff 	.word	0xfe3fffff
 8006f74:	200000e4 	.word	0x200000e4
 8006f78:	00030d40 	.word	0x00030d40
 8006f7c:	b8004000 	.word	0xb8004000
 8006f80:	b4002000 	.word	0xb4002000

08006f84 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8006f84:	2300      	movs	r3, #0
{
 8006f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f88:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8006f8a:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f8c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f8e:	2001      	movs	r0, #1
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	4202      	tst	r2, r0
 8006f94:	d001      	beq.n	8006f9a <ADC_Enable+0x16>
  return HAL_OK;
 8006f96:	2000      	movs	r0, #0
}
 8006f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006f9a:	6899      	ldr	r1, [r3, #8]
 8006f9c:	4a22      	ldr	r2, [pc, #136]	; (8007028 <ADC_Enable+0xa4>)
 8006f9e:	4211      	tst	r1, r2
 8006fa0:	d007      	beq.n	8006fb2 <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006faa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006fac:	4303      	orrs	r3, r0
 8006fae:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006fb0:	e7f2      	b.n	8006f98 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	4d1d      	ldr	r5, [pc, #116]	; (800702c <ADC_Enable+0xa8>)
 8006fb6:	402a      	ands	r2, r5
 8006fb8:	4310      	orrs	r0, r2
 8006fba:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006fbc:	4b1c      	ldr	r3, [pc, #112]	; (8007030 <ADC_Enable+0xac>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	d423      	bmi.n	800700c <ADC_Enable+0x88>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006fc4:	7e63      	ldrb	r3, [r4, #25]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d0e5      	beq.n	8006f96 <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 8006fca:	f7ff fd31 	bl	8006a30 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fce:	2601      	movs	r6, #1
      tickstart = HAL_GetTick();
 8006fd0:	0007      	movs	r7, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fd2:	6822      	ldr	r2, [r4, #0]
 8006fd4:	6813      	ldr	r3, [r2, #0]
 8006fd6:	4233      	tst	r3, r6
 8006fd8:	d1dd      	bne.n	8006f96 <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006fda:	6893      	ldr	r3, [r2, #8]
 8006fdc:	4233      	tst	r3, r6
 8006fde:	d103      	bne.n	8006fe8 <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8006fe0:	6893      	ldr	r3, [r2, #8]
 8006fe2:	402b      	ands	r3, r5
 8006fe4:	4333      	orrs	r3, r6
 8006fe6:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006fe8:	f7ff fd22 	bl	8006a30 <HAL_GetTick>
 8006fec:	1bc0      	subs	r0, r0, r7
 8006fee:	2802      	cmp	r0, #2
 8006ff0:	d9ef      	bls.n	8006fd2 <ADC_Enable+0x4e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4233      	tst	r3, r6
 8006ff8:	d1eb      	bne.n	8006fd2 <ADC_Enable+0x4e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ffa:	2310      	movs	r3, #16
 8006ffc:	6da2      	ldr	r2, [r4, #88]	; 0x58
            return HAL_ERROR;
 8006ffe:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007000:	4313      	orrs	r3, r2
 8007002:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007004:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007006:	4333      	orrs	r3, r6
 8007008:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800700a:	e7c5      	b.n	8006f98 <ADC_Enable+0x14>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <ADC_Enable+0xb0>)
 800700e:	490a      	ldr	r1, [pc, #40]	; (8007038 <ADC_Enable+0xb4>)
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f7f9 f89f 	bl	8000154 <__udivsi3>
 8007016:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8007018:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0d1      	beq.n	8006fc4 <ADC_Enable+0x40>
        wait_loop_index--;
 8007020:	9b01      	ldr	r3, [sp, #4]
 8007022:	3b01      	subs	r3, #1
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	e7f8      	b.n	800701a <ADC_Enable+0x96>
 8007028:	80000017 	.word	0x80000017
 800702c:	7fffffe8 	.word	0x7fffffe8
 8007030:	40012708 	.word	0x40012708
 8007034:	200000e4 	.word	0x200000e4
 8007038:	00030d40 	.word	0x00030d40

0800703c <HAL_ADC_Start_DMA>:
{
 800703c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800703e:	6805      	ldr	r5, [r0, #0]
{
 8007040:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007042:	0028      	movs	r0, r5
{
 8007044:	000e      	movs	r6, r1
 8007046:	9201      	str	r2, [sp, #4]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007048:	f7ff fd16 	bl	8006a78 <LL_ADC_REG_IsConversionOngoing>
    tmp_hal_status = HAL_BUSY;
 800704c:	2302      	movs	r3, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800704e:	2800      	cmp	r0, #0
 8007050:	d13f      	bne.n	80070d2 <HAL_ADC_Start_DMA+0x96>
    __HAL_LOCK(hadc);
 8007052:	0027      	movs	r7, r4
 8007054:	3754      	adds	r7, #84	; 0x54
 8007056:	783a      	ldrb	r2, [r7, #0]
 8007058:	2a01      	cmp	r2, #1
 800705a:	d03a      	beq.n	80070d2 <HAL_ADC_Start_DMA+0x96>
 800705c:	3b01      	subs	r3, #1
 800705e:	703b      	strb	r3, [r7, #0]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8007060:	68ea      	ldr	r2, [r5, #12]
 8007062:	421a      	tst	r2, r3
 8007064:	d10c      	bne.n	8007080 <HAL_ADC_Start_DMA+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007066:	68aa      	ldr	r2, [r5, #8]
 8007068:	421a      	tst	r2, r3
 800706a:	d005      	beq.n	8007078 <HAL_ADC_Start_DMA+0x3c>
  MODIFY_REG(ADCx->CR,
 800706c:	68aa      	ldr	r2, [r5, #8]
 800706e:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <HAL_ADC_Start_DMA+0x9c>)
 8007070:	401a      	ands	r2, r3
 8007072:	2302      	movs	r3, #2
 8007074:	4313      	orrs	r3, r2
 8007076:	60ab      	str	r3, [r5, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8007078:	2301      	movs	r3, #1
 800707a:	68ea      	ldr	r2, [r5, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8007080:	0020      	movs	r0, r4
 8007082:	f7ff ff7f 	bl	8006f84 <ADC_Enable>
 8007086:	1e03      	subs	r3, r0, #0
    if (tmp_hal_status == HAL_OK)
 8007088:	d123      	bne.n	80070d2 <HAL_ADC_Start_DMA+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 800708a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800708c:	4a13      	ldr	r2, [pc, #76]	; (80070dc <HAL_ADC_Start_DMA+0xa0>)
 800708e:	4011      	ands	r1, r2
 8007090:	2280      	movs	r2, #128	; 0x80
 8007092:	0052      	lsls	r2, r2, #1
 8007094:	430a      	orrs	r2, r1
 8007096:	65a2      	str	r2, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8007098:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800709a:	4a11      	ldr	r2, [pc, #68]	; (80070e0 <HAL_ADC_Start_DMA+0xa4>)
 800709c:	6d20      	ldr	r0, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800709e:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80070a0:	62c2      	str	r2, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80070a2:	4a10      	ldr	r2, [pc, #64]	; (80070e4 <HAL_ADC_Start_DMA+0xa8>)
 80070a4:	6302      	str	r2, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80070a6:	4a10      	ldr	r2, [pc, #64]	; (80070e8 <HAL_ADC_Start_DMA+0xac>)
 80070a8:	6342      	str	r2, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80070aa:	221c      	movs	r2, #28
 80070ac:	600a      	str	r2, [r1, #0]
      __HAL_UNLOCK(hadc);
 80070ae:	703b      	strb	r3, [r7, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80070b0:	684a      	ldr	r2, [r1, #4]
 80070b2:	3310      	adds	r3, #16
 80070b4:	4313      	orrs	r3, r2
 80070b6:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80070b8:	0032      	movs	r2, r6
 80070ba:	9b01      	ldr	r3, [sp, #4]
 80070bc:	3140      	adds	r1, #64	; 0x40
 80070be:	f000 f8e1 	bl	8007284 <HAL_DMA_Start_IT>
 80070c2:	0003      	movs	r3, r0
      LL_ADC_REG_StartConversion(hadc->Instance);
 80070c4:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80070c6:	4a04      	ldr	r2, [pc, #16]	; (80070d8 <HAL_ADC_Start_DMA+0x9c>)
 80070c8:	6881      	ldr	r1, [r0, #8]
 80070ca:	4011      	ands	r1, r2
 80070cc:	2204      	movs	r2, #4
 80070ce:	430a      	orrs	r2, r1
 80070d0:	6082      	str	r2, [r0, #8]
}
 80070d2:	0018      	movs	r0, r3
 80070d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	7fffffe8 	.word	0x7fffffe8
 80070dc:	fffff0fe 	.word	0xfffff0fe
 80070e0:	08006cd1 	.word	0x08006cd1
 80070e4:	08006ca9 	.word	0x08006ca9
 80070e8:	08006cb5 	.word	0x08006cb5

080070ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070ec:	b530      	push	{r4, r5, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070ee:	25ff      	movs	r5, #255	; 0xff
 80070f0:	2403      	movs	r4, #3
 80070f2:	002a      	movs	r2, r5
 80070f4:	4004      	ands	r4, r0
 80070f6:	00e4      	lsls	r4, r4, #3
 80070f8:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070fa:	0189      	lsls	r1, r1, #6
 80070fc:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070fe:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007100:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007102:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8007104:	2800      	cmp	r0, #0
 8007106:	db0a      	blt.n	800711e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007108:	24c0      	movs	r4, #192	; 0xc0
 800710a:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <HAL_NVIC_SetPriority+0x4c>)
 800710c:	0880      	lsrs	r0, r0, #2
 800710e:	0080      	lsls	r0, r0, #2
 8007110:	18c0      	adds	r0, r0, r3
 8007112:	00a4      	lsls	r4, r4, #2
 8007114:	5903      	ldr	r3, [r0, r4]
 8007116:	4013      	ands	r3, r2
 8007118:	430b      	orrs	r3, r1
 800711a:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800711c:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800711e:	200f      	movs	r0, #15
 8007120:	4003      	ands	r3, r0
 8007122:	3b08      	subs	r3, #8
 8007124:	4805      	ldr	r0, [pc, #20]	; (800713c <HAL_NVIC_SetPriority+0x50>)
 8007126:	089b      	lsrs	r3, r3, #2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	181b      	adds	r3, r3, r0
 800712c:	69d8      	ldr	r0, [r3, #28]
 800712e:	4002      	ands	r2, r0
 8007130:	430a      	orrs	r2, r1
 8007132:	61da      	str	r2, [r3, #28]
 8007134:	e7f2      	b.n	800711c <HAL_NVIC_SetPriority+0x30>
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	e000e100 	.word	0xe000e100
 800713c:	e000ed00 	.word	0xe000ed00

08007140 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007140:	2800      	cmp	r0, #0
 8007142:	db05      	blt.n	8007150 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007144:	231f      	movs	r3, #31
 8007146:	4018      	ands	r0, r3
 8007148:	3b1e      	subs	r3, #30
 800714a:	4083      	lsls	r3, r0
 800714c:	4a01      	ldr	r2, [pc, #4]	; (8007154 <HAL_NVIC_EnableIRQ+0x14>)
 800714e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007150:	4770      	bx	lr
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	e000e100 	.word	0xe000e100

08007158 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007158:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800715a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800715c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800715e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007160:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8007162:	2c00      	cmp	r4, #0
 8007164:	d002      	beq.n	800716c <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007166:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8007168:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800716a:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800716c:	241c      	movs	r4, #28
 800716e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007170:	4e08      	ldr	r6, [pc, #32]	; (8007194 <DMA_SetConfig+0x3c>)
 8007172:	4025      	ands	r5, r4
 8007174:	3c1b      	subs	r4, #27
 8007176:	40ac      	lsls	r4, r5
 8007178:	6877      	ldr	r7, [r6, #4]
 800717a:	433c      	orrs	r4, r7
 800717c:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800717e:	6804      	ldr	r4, [r0, #0]
 8007180:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007182:	6883      	ldr	r3, [r0, #8]
 8007184:	2b10      	cmp	r3, #16
 8007186:	d102      	bne.n	800718e <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007188:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800718a:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800718c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800718e:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8007190:	60e2      	str	r2, [r4, #12]
}
 8007192:	e7fb      	b.n	800718c <DMA_SetConfig+0x34>
 8007194:	40020000 	.word	0x40020000

08007198 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007198:	b510      	push	{r4, lr}
 800719a:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800719c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80071a0:	089b      	lsrs	r3, r3, #2
 80071a2:	189b      	adds	r3, r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80071a8:	6800      	ldr	r0, [r0, #0]
 80071aa:	2114      	movs	r1, #20
 80071ac:	b2c0      	uxtb	r0, r0
 80071ae:	3808      	subs	r0, #8
 80071b0:	f7f8 ffd0 	bl	8000154 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80071b6:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80071b8:	231f      	movs	r3, #31
 80071ba:	4018      	ands	r0, r3
 80071bc:	3b1e      	subs	r3, #30
 80071be:	4083      	lsls	r3, r0
 80071c0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80071c2:	bd10      	pop	{r4, pc}
 80071c4:	10008200 	.word	0x10008200
 80071c8:	40020880 	.word	0x40020880

080071cc <HAL_DMA_Init>:
{
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	0004      	movs	r4, r0
    return HAL_ERROR;
 80071d0:	2001      	movs	r0, #1
  if (hdma == NULL)
 80071d2:	2c00      	cmp	r4, #0
 80071d4:	d048      	beq.n	8007268 <HAL_DMA_Init+0x9c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80071d6:	6825      	ldr	r5, [r4, #0]
 80071d8:	4b26      	ldr	r3, [pc, #152]	; (8007274 <HAL_DMA_Init+0xa8>)
 80071da:	2114      	movs	r1, #20
 80071dc:	18e8      	adds	r0, r5, r3
 80071de:	f7f8 ffb9 	bl	8000154 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80071e2:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80071e4:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80071e6:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80071e8:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80071ea:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	4a22      	ldr	r2, [pc, #136]	; (8007278 <HAL_DMA_Init+0xac>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80071f0:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80071f2:	4013      	ands	r3, r2
 80071f4:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	6921      	ldr	r1, [r4, #16]
 80071fa:	433b      	orrs	r3, r7
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6961      	ldr	r1, [r4, #20]
 8007200:	682a      	ldr	r2, [r5, #0]
 8007202:	430b      	orrs	r3, r1
 8007204:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007206:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007208:	430b      	orrs	r3, r1
 800720a:	69e1      	ldr	r1, [r4, #28]
 800720c:	430b      	orrs	r3, r1
 800720e:	6a21      	ldr	r1, [r4, #32]
 8007210:	430b      	orrs	r3, r1
 8007212:	4313      	orrs	r3, r2
 8007214:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007216:	f7ff ffbf 	bl	8007198 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	01db      	lsls	r3, r3, #7
 800721e:	429f      	cmp	r7, r3
 8007220:	d101      	bne.n	8007226 <HAL_DMA_Init+0x5a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007222:	2300      	movs	r3, #0
 8007224:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007226:	233f      	movs	r3, #63	; 0x3f
 8007228:	6862      	ldr	r2, [r4, #4]
 800722a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800722c:	4013      	ands	r3, r2
 800722e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007230:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007232:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007234:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007236:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007238:	2a03      	cmp	r2, #3
 800723a:	d816      	bhi.n	800726a <HAL_DMA_Init+0x9e>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800723c:	4a0f      	ldr	r2, [pc, #60]	; (800727c <HAL_DMA_Init+0xb0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800723e:	4810      	ldr	r0, [pc, #64]	; (8007280 <HAL_DMA_Init+0xb4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007240:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007242:	2203      	movs	r2, #3
 8007244:	3b01      	subs	r3, #1
 8007246:	4013      	ands	r3, r2
 8007248:	3a02      	subs	r2, #2
 800724a:	409a      	lsls	r2, r3
 800724c:	65a2      	str	r2, [r4, #88]	; 0x58
 800724e:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007250:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007252:	0089      	lsls	r1, r1, #2
 8007254:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007256:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007258:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800725a:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800725c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800725e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007260:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8007262:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 8007264:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8007266:	77e0      	strb	r0, [r4, #31]
}
 8007268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->DMAmuxRequestGen = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800726e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007270:	65a3      	str	r3, [r4, #88]	; 0x58
 8007272:	e7f3      	b.n	800725c <HAL_DMA_Init+0x90>
 8007274:	bffdfff8 	.word	0xbffdfff8
 8007278:	ffff800f 	.word	0xffff800f
 800727c:	1000823f 	.word	0x1000823f
 8007280:	40020940 	.word	0x40020940

08007284 <HAL_DMA_Start_IT>:
{
 8007284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8007286:	1d45      	adds	r5, r0, #5
{
 8007288:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800728a:	7fee      	ldrb	r6, [r5, #31]
{
 800728c:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800728e:	2002      	movs	r0, #2
 8007290:	2e01      	cmp	r6, #1
 8007292:	d033      	beq.n	80072fc <HAL_DMA_Start_IT+0x78>
 8007294:	3801      	subs	r0, #1
 8007296:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8007298:	1da7      	adds	r7, r4, #6
 800729a:	7ffe      	ldrb	r6, [r7, #31]
 800729c:	46b4      	mov	ip, r6
 800729e:	4663      	mov	r3, ip
 80072a0:	b2f6      	uxtb	r6, r6
 80072a2:	9600      	str	r6, [sp, #0]
 80072a4:	2600      	movs	r6, #0
 80072a6:	4283      	cmp	r3, r0
 80072a8:	d130      	bne.n	800730c <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 80072aa:	3001      	adds	r0, #1
 80072ac:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 80072ae:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072b0:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80072b2:	6828      	ldr	r0, [r5, #0]
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	4398      	bics	r0, r3
 80072b8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072ba:	9b01      	ldr	r3, [sp, #4]
 80072bc:	0020      	movs	r0, r4
 80072be:	f7ff ff4b 	bl	8007158 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80072c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80072c4:	42b3      	cmp	r3, r6
 80072c6:	d01a      	beq.n	80072fe <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072c8:	230e      	movs	r3, #14
 80072ca:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80072cc:	4313      	orrs	r3, r2
 80072ce:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80072d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	03d2      	lsls	r2, r2, #15
 80072d6:	d504      	bpl.n	80072e2 <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80072d8:	2280      	movs	r2, #128	; 0x80
 80072da:	6819      	ldr	r1, [r3, #0]
 80072dc:	0052      	lsls	r2, r2, #1
 80072de:	430a      	orrs	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80072e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80072e8:	2280      	movs	r2, #128	; 0x80
 80072ea:	6819      	ldr	r1, [r3, #0]
 80072ec:	0052      	lsls	r2, r2, #1
 80072ee:	430a      	orrs	r2, r1
 80072f0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80072f2:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80072f4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80072f6:	682a      	ldr	r2, [r5, #0]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	602b      	str	r3, [r5, #0]
}
 80072fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072fe:	2204      	movs	r2, #4
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	4393      	bics	r3, r2
 8007304:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007306:	682a      	ldr	r2, [r5, #0]
 8007308:	230a      	movs	r3, #10
 800730a:	e7df      	b.n	80072cc <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8007310:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 8007312:	e7f3      	b.n	80072fc <HAL_DMA_Start_IT+0x78>

08007314 <HAL_DMA_Abort>:
{
 8007314:	0003      	movs	r3, r0
 8007316:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 8007318:	2001      	movs	r0, #1
  if (NULL == hdma)
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800731e:	1d98      	adds	r0, r3, #6
 8007320:	7fc2      	ldrb	r2, [r0, #31]
 8007322:	1d5c      	adds	r4, r3, #5
 8007324:	2a02      	cmp	r2, #2
 8007326:	d005      	beq.n	8007334 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007328:	2204      	movs	r2, #4
 800732a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800732c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800732e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8007330:	77e3      	strb	r3, [r4, #31]
}
 8007332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007334:	250e      	movs	r5, #14
 8007336:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007338:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800733a:	680a      	ldr	r2, [r1, #0]
 800733c:	43aa      	bics	r2, r5
 800733e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007340:	6832      	ldr	r2, [r6, #0]
 8007342:	4d10      	ldr	r5, [pc, #64]	; (8007384 <HAL_DMA_Abort+0x70>)
 8007344:	402a      	ands	r2, r5
 8007346:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8007348:	2201      	movs	r2, #1
 800734a:	680e      	ldr	r6, [r1, #0]
 800734c:	4396      	bics	r6, r2
 800734e:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007350:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007352:	321b      	adds	r2, #27
 8007354:	4011      	ands	r1, r2
 8007356:	3a1b      	subs	r2, #27
 8007358:	408a      	lsls	r2, r1
 800735a:	4e0b      	ldr	r6, [pc, #44]	; (8007388 <HAL_DMA_Abort+0x74>)
 800735c:	6877      	ldr	r7, [r6, #4]
 800735e:	433a      	orrs	r2, r7
 8007360:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007362:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007366:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8007368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800736a:	2a00      	cmp	r2, #0
 800736c:	d005      	beq.n	800737a <HAL_DMA_Abort+0x66>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800736e:	6811      	ldr	r1, [r2, #0]
 8007370:	4029      	ands	r1, r5
 8007372:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007378:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800737a:	2301      	movs	r3, #1
 800737c:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 800737e:	2000      	movs	r0, #0
 8007380:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8007382:	e7d6      	b.n	8007332 <HAL_DMA_Abort+0x1e>
 8007384:	fffffeff 	.word	0xfffffeff
 8007388:	40020000 	.word	0x40020000

0800738c <HAL_DMA_Abort_IT>:
{
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800738e:	1d81      	adds	r1, r0, #6
 8007390:	7fcb      	ldrb	r3, [r1, #31]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d004      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007396:	2304      	movs	r3, #4
 8007398:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800739a:	3b03      	subs	r3, #3
}
 800739c:	0018      	movs	r0, r3
 800739e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073a0:	240e      	movs	r4, #14
 80073a2:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80073a4:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073a6:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073a8:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073aa:	43a3      	bics	r3, r4
 80073ac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80073ae:	2301      	movs	r3, #1
 80073b0:	6814      	ldr	r4, [r2, #0]
 80073b2:	439c      	bics	r4, r3
 80073b4:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073b6:	682a      	ldr	r2, [r5, #0]
 80073b8:	4c10      	ldr	r4, [pc, #64]	; (80073fc <HAL_DMA_Abort_IT+0x70>)
 80073ba:	4022      	ands	r2, r4
 80073bc:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80073be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80073c0:	4d0f      	ldr	r5, [pc, #60]	; (8007400 <HAL_DMA_Abort_IT+0x74>)
 80073c2:	403a      	ands	r2, r7
 80073c4:	4093      	lsls	r3, r2
 80073c6:	686e      	ldr	r6, [r5, #4]
 80073c8:	4333      	orrs	r3, r6
 80073ca:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073cc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80073ce:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80073d0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80073d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4022      	ands	r2, r4
 80073dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80073e0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80073e2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80073e4:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80073e6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80073e8:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 80073ea:	1d43      	adds	r3, r0, #5
 80073ec:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 80073ee:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 80073f2:	42a2      	cmp	r2, r4
 80073f4:	d0d2      	beq.n	800739c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80073f6:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80073f8:	0023      	movs	r3, r4
 80073fa:	e7cf      	b.n	800739c <HAL_DMA_Abort_IT+0x10>
 80073fc:	fffffeff 	.word	0xfffffeff
 8007400:	40020000 	.word	0x40020000

08007404 <HAL_DMA_IRQHandler>:
{
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007406:	241c      	movs	r4, #28
 8007408:	2704      	movs	r7, #4
 800740a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 800740c:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800740e:	4021      	ands	r1, r4
 8007410:	003c      	movs	r4, r7
 8007412:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8007414:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007416:	6803      	ldr	r3, [r0, #0]
 8007418:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800741a:	4226      	tst	r6, r4
 800741c:	d00f      	beq.n	800743e <HAL_DMA_IRQHandler+0x3a>
 800741e:	423d      	tst	r5, r7
 8007420:	d00d      	beq.n	800743e <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007422:	6819      	ldr	r1, [r3, #0]
 8007424:	0689      	lsls	r1, r1, #26
 8007426:	d402      	bmi.n	800742e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007428:	6819      	ldr	r1, [r3, #0]
 800742a:	43b9      	bics	r1, r7
 800742c:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800742e:	6853      	ldr	r3, [r2, #4]
 8007430:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007432:	6b03      	ldr	r3, [r0, #48]	; 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007434:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01b      	beq.n	8007472 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800743a:	4798      	blx	r3
  return;
 800743c:	e019      	b.n	8007472 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800743e:	2702      	movs	r7, #2
 8007440:	003c      	movs	r4, r7
 8007442:	408c      	lsls	r4, r1
 8007444:	4226      	tst	r6, r4
 8007446:	d015      	beq.n	8007474 <HAL_DMA_IRQHandler+0x70>
 8007448:	423d      	tst	r5, r7
 800744a:	d013      	beq.n	8007474 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800744c:	6819      	ldr	r1, [r3, #0]
 800744e:	0689      	lsls	r1, r1, #26
 8007450:	d406      	bmi.n	8007460 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007452:	250a      	movs	r5, #10
 8007454:	6819      	ldr	r1, [r3, #0]
 8007456:	43a9      	bics	r1, r5
 8007458:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800745a:	2101      	movs	r1, #1
 800745c:	1d83      	adds	r3, r0, #6
 800745e:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007460:	6853      	ldr	r3, [r2, #4]
 8007462:	431c      	orrs	r4, r3
 8007464:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 8007466:	2200      	movs	r2, #0
 8007468:	1d43      	adds	r3, r0, #5
 800746a:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 800746c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800746e:	4293      	cmp	r3, r2
 8007470:	d1e3      	bne.n	800743a <HAL_DMA_IRQHandler+0x36>
}
 8007472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007474:	2408      	movs	r4, #8
 8007476:	0027      	movs	r7, r4
 8007478:	408f      	lsls	r7, r1
 800747a:	423e      	tst	r6, r7
 800747c:	d0f9      	beq.n	8007472 <HAL_DMA_IRQHandler+0x6e>
 800747e:	4225      	tst	r5, r4
 8007480:	d0f7      	beq.n	8007472 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007482:	250e      	movs	r5, #14
 8007484:	681c      	ldr	r4, [r3, #0]
 8007486:	43ac      	bics	r4, r5
 8007488:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800748a:	2301      	movs	r3, #1
 800748c:	001d      	movs	r5, r3
 800748e:	408d      	lsls	r5, r1
 8007490:	0029      	movs	r1, r5
 8007492:	6854      	ldr	r4, [r2, #4]
 8007494:	4321      	orrs	r1, r4
 8007496:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007498:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800749a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800749c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800749e:	2200      	movs	r2, #0
 80074a0:	1d43      	adds	r3, r0, #5
 80074a2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80074a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80074a6:	e7e2      	b.n	800746e <HAL_DMA_IRQHandler+0x6a>
 80074a8:	40020000 	.word	0x40020000

080074ac <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80074ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80074ae:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80074b0:	6813      	ldr	r3, [r2, #0]
{
 80074b2:	b570      	push	{r4, r5, r6, lr}
 80074b4:	0004      	movs	r4, r0
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80074b6:	4219      	tst	r1, r3
 80074b8:	d00f      	beq.n	80074da <HAL_DMAEx_MUX_IRQHandler+0x2e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074ba:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80074bc:	4d13      	ldr	r5, [pc, #76]	; (800750c <HAL_DMAEx_MUX_IRQHandler+0x60>)
 80074be:	6803      	ldr	r3, [r0, #0]
 80074c0:	402b      	ands	r3, r5
 80074c2:	6003      	str	r3, [r0, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80074c4:	2380      	movs	r3, #128	; 0x80
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074c6:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80074c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4313      	orrs	r3, r2
 80074ce:	63e3      	str	r3, [r4, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80074d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_DMAEx_MUX_IRQHandler+0x2e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074d6:	0020      	movs	r0, r4
 80074d8:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80074da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d013      	beq.n	8007508 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80074e0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80074e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e4:	680a      	ldr	r2, [r1, #0]
 80074e6:	4210      	tst	r0, r2
 80074e8:	d00e      	beq.n	8007508 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	4d07      	ldr	r5, [pc, #28]	; (800750c <HAL_DMAEx_MUX_IRQHandler+0x60>)
 80074ee:	402a      	ands	r2, r5
 80074f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80074f2:	2380      	movs	r3, #128	; 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074f4:	6048      	str	r0, [r1, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80074f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80074fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007504:	0020      	movs	r0, r4
 8007506:	4798      	blx	r3
      }
    }
  }
}
 8007508:	bd70      	pop	{r4, r5, r6, pc}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	fffffeff 	.word	0xfffffeff

08007510 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8007510:	2300      	movs	r3, #0
{
 8007512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007514:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007516:	680a      	ldr	r2, [r1, #0]
 8007518:	0014      	movs	r4, r2
 800751a:	40dc      	lsrs	r4, r3
 800751c:	d101      	bne.n	8007522 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800751e:	b005      	add	sp, #20
 8007520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007522:	2501      	movs	r5, #1
 8007524:	0014      	movs	r4, r2
 8007526:	409d      	lsls	r5, r3
 8007528:	402c      	ands	r4, r5
 800752a:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 800752c:	422a      	tst	r2, r5
 800752e:	d100      	bne.n	8007532 <HAL_GPIO_Init+0x22>
 8007530:	e091      	b.n	8007656 <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007532:	684a      	ldr	r2, [r1, #4]
 8007534:	005f      	lsls	r7, r3, #1
 8007536:	4694      	mov	ip, r2
 8007538:	2203      	movs	r2, #3
 800753a:	4664      	mov	r4, ip
 800753c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800753e:	2403      	movs	r4, #3
 8007540:	40bc      	lsls	r4, r7
 8007542:	43e4      	mvns	r4, r4
 8007544:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007546:	1e54      	subs	r4, r2, #1
 8007548:	2c01      	cmp	r4, #1
 800754a:	d82e      	bhi.n	80075aa <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 800754c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800754e:	9c01      	ldr	r4, [sp, #4]
 8007550:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007552:	68cc      	ldr	r4, [r1, #12]
 8007554:	40bc      	lsls	r4, r7
 8007556:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8007558:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800755a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800755c:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800755e:	43ac      	bics	r4, r5
 8007560:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007562:	4664      	mov	r4, ip
 8007564:	0924      	lsrs	r4, r4, #4
 8007566:	4034      	ands	r4, r6
 8007568:	409c      	lsls	r4, r3
 800756a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800756c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800756e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007570:	9c01      	ldr	r4, [sp, #4]
 8007572:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007574:	688c      	ldr	r4, [r1, #8]
 8007576:	40bc      	lsls	r4, r7
 8007578:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800757a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800757c:	2a02      	cmp	r2, #2
 800757e:	d116      	bne.n	80075ae <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007580:	2507      	movs	r5, #7
 8007582:	260f      	movs	r6, #15
 8007584:	401d      	ands	r5, r3
 8007586:	00ad      	lsls	r5, r5, #2
 8007588:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800758a:	08dc      	lsrs	r4, r3, #3
 800758c:	00a4      	lsls	r4, r4, #2
 800758e:	1904      	adds	r4, r0, r4
 8007590:	9402      	str	r4, [sp, #8]
 8007592:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007594:	9603      	str	r6, [sp, #12]
 8007596:	0026      	movs	r6, r4
 8007598:	9c03      	ldr	r4, [sp, #12]
 800759a:	43a6      	bics	r6, r4
 800759c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800759e:	690e      	ldr	r6, [r1, #16]
 80075a0:	40ae      	lsls	r6, r5
 80075a2:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80075a4:	9c02      	ldr	r4, [sp, #8]
 80075a6:	6226      	str	r6, [r4, #32]
 80075a8:	e001      	b.n	80075ae <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075aa:	2a03      	cmp	r2, #3
 80075ac:	d1df      	bne.n	800756e <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80075ae:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80075b0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80075b2:	9d01      	ldr	r5, [sp, #4]
 80075b4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80075b6:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075b8:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 80075ba:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075bc:	4662      	mov	r2, ip
 80075be:	02a4      	lsls	r4, r4, #10
 80075c0:	4222      	tst	r2, r4
 80075c2:	d048      	beq.n	8007656 <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 80075c4:	4a25      	ldr	r2, [pc, #148]	; (800765c <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80075c6:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 80075c8:	089c      	lsrs	r4, r3, #2
 80075ca:	00a4      	lsls	r4, r4, #2
 80075cc:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80075ce:	220f      	movs	r2, #15
 80075d0:	401d      	ands	r5, r3
 80075d2:	00ed      	lsls	r5, r5, #3
 80075d4:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80075d6:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80075d8:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80075da:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80075dc:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80075de:	2200      	movs	r2, #0
 80075e0:	42b8      	cmp	r0, r7
 80075e2:	d00c      	beq.n	80075fe <HAL_GPIO_Init+0xee>
 80075e4:	4f1e      	ldr	r7, [pc, #120]	; (8007660 <HAL_GPIO_Init+0x150>)
 80075e6:	3201      	adds	r2, #1
 80075e8:	42b8      	cmp	r0, r7
 80075ea:	d008      	beq.n	80075fe <HAL_GPIO_Init+0xee>
 80075ec:	4f1d      	ldr	r7, [pc, #116]	; (8007664 <HAL_GPIO_Init+0x154>)
 80075ee:	3201      	adds	r2, #1
 80075f0:	42b8      	cmp	r0, r7
 80075f2:	d004      	beq.n	80075fe <HAL_GPIO_Init+0xee>
 80075f4:	4f1c      	ldr	r7, [pc, #112]	; (8007668 <HAL_GPIO_Init+0x158>)
 80075f6:	3201      	adds	r2, #1
 80075f8:	42b8      	cmp	r0, r7
 80075fa:	d000      	beq.n	80075fe <HAL_GPIO_Init+0xee>
 80075fc:	3202      	adds	r2, #2
 80075fe:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007600:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007602:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8007604:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 8007606:	4c15      	ldr	r4, [pc, #84]	; (800765c <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8007608:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 800760a:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 800760c:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800760e:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8007610:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007612:	02ff      	lsls	r7, r7, #11
 8007614:	d401      	bmi.n	800761a <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 8007616:	0035      	movs	r5, r6
 8007618:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800761a:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 800761c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800761e:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8007620:	9d00      	ldr	r5, [sp, #0]
 8007622:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007624:	02bf      	lsls	r7, r7, #10
 8007626:	d401      	bmi.n	800762c <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8007628:	0035      	movs	r5, r6
 800762a:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800762c:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 800762e:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8007630:	4c0e      	ldr	r4, [pc, #56]	; (800766c <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8007632:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8007634:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8007636:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007638:	03bf      	lsls	r7, r7, #14
 800763a:	d401      	bmi.n	8007640 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 800763c:	0035      	movs	r5, r6
 800763e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007640:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8007642:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 8007644:	4c0a      	ldr	r4, [pc, #40]	; (8007670 <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 8007646:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8007648:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 800764a:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800764c:	03ff      	lsls	r7, r7, #15
 800764e:	d401      	bmi.n	8007654 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8007650:	4015      	ands	r5, r2
 8007652:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8007654:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 8007656:	3301      	adds	r3, #1
 8007658:	e75d      	b.n	8007516 <HAL_GPIO_Init+0x6>
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	40021800 	.word	0x40021800
 8007660:	50000400 	.word	0x50000400
 8007664:	50000800 	.word	0x50000800
 8007668:	50000c00 	.word	0x50000c00
 800766c:	40021808 	.word	0x40021808
 8007670:	40021804 	.word	0x40021804

08007674 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007674:	6900      	ldr	r0, [r0, #16]
 8007676:	4008      	ands	r0, r1
 8007678:	1e43      	subs	r3, r0, #1
 800767a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800767c:	b2c0      	uxtb	r0, r0
}
 800767e:	4770      	bx	lr

08007680 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007680:	2a00      	cmp	r2, #0
 8007682:	d001      	beq.n	8007688 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007684:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007686:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007688:	6281      	str	r1, [r0, #40]	; 0x28
}
 800768a:	e7fc      	b.n	8007686 <HAL_GPIO_WritePin+0x6>

0800768c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800768c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800768e:	0013      	movs	r3, r2
 8007690:	400b      	ands	r3, r1
 8007692:	041b      	lsls	r3, r3, #16
 8007694:	4391      	bics	r1, r2
 8007696:	430b      	orrs	r3, r1
 8007698:	6183      	str	r3, [r0, #24]
}
 800769a:	4770      	bx	lr

0800769c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800769c:	6803      	ldr	r3, [r0, #0]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	0792      	lsls	r2, r2, #30
 80076a2:	d501      	bpl.n	80076a8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076a4:	2200      	movs	r2, #0
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076a8:	2201      	movs	r2, #1
 80076aa:	6999      	ldr	r1, [r3, #24]
 80076ac:	4211      	tst	r1, r2
 80076ae:	d102      	bne.n	80076b6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076b0:	6999      	ldr	r1, [r3, #24]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	619a      	str	r2, [r3, #24]
  }
}
 80076b6:	4770      	bx	lr

080076b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80076b8:	b530      	push	{r4, r5, lr}
 80076ba:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80076bc:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076be:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076c0:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076c2:	0589      	lsls	r1, r1, #22
 80076c4:	431a      	orrs	r2, r3
 80076c6:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <I2C_TransferConfig+0x28>)
 80076ca:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076cc:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80076ce:	0d64      	lsrs	r4, r4, #21
 80076d0:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076d2:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80076d4:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076d6:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80076d8:	432a      	orrs	r2, r5
 80076da:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80076dc:	bd30      	pop	{r4, r5, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	03ff63ff 	.word	0x03ff63ff

080076e4 <I2C_IsErrorOccurred>:
{
 80076e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076e6:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80076e8:	6802      	ldr	r2, [r0, #0]
{
 80076ea:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 80076ec:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80076ee:	2310      	movs	r3, #16
 80076f0:	000f      	movs	r7, r1
{
 80076f2:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80076f4:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 80076f6:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80076f8:	4219      	tst	r1, r3
 80076fa:	d00e      	beq.n	800771a <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80076fc:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076fe:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8007700:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007702:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	699a      	ldr	r2, [r3, #24]
 8007708:	423a      	tst	r2, r7
 800770a:	d163      	bne.n	80077d4 <I2C_IsErrorOccurred+0xf0>
 800770c:	9a01      	ldr	r2, [sp, #4]
 800770e:	2a00      	cmp	r2, #0
 8007710:	d031      	beq.n	8007776 <I2C_IsErrorOccurred+0x92>
    error_code |= HAL_I2C_ERROR_AF;
 8007712:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8007714:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8007716:	9b00      	ldr	r3, [sp, #0]
 8007718:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800771a:	2280      	movs	r2, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 800771c:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800771e:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8007720:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007722:	4213      	tst	r3, r2
 8007724:	d002      	beq.n	800772c <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8007726:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007728:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800772a:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800772c:	2280      	movs	r2, #128	; 0x80
 800772e:	00d2      	lsls	r2, r2, #3
 8007730:	4213      	tst	r3, r2
 8007732:	d003      	beq.n	800773c <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8007734:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8007736:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8007738:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800773a:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800773c:	2280      	movs	r2, #128	; 0x80
 800773e:	0092      	lsls	r2, r2, #2
 8007740:	4213      	tst	r3, r2
 8007742:	d04c      	beq.n	80077de <I2C_IsErrorOccurred+0xfa>
    error_code |= HAL_I2C_ERROR_ARLO;
 8007744:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007746:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8007748:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 800774a:	0020      	movs	r0, r4
 800774c:	f7ff ffa6 	bl	800769c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007750:	686b      	ldr	r3, [r5, #4]
 8007752:	4a24      	ldr	r2, [pc, #144]	; (80077e4 <I2C_IsErrorOccurred+0x100>)
    __HAL_UNLOCK(hi2c);
 8007754:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007756:	4013      	ands	r3, r2
 8007758:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 800775a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800775c:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800775e:	433b      	orrs	r3, r7
 8007760:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007762:	0023      	movs	r3, r4
 8007764:	3341      	adds	r3, #65	; 0x41
 8007766:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007768:	0022      	movs	r2, r4
 800776a:	2300      	movs	r3, #0
 800776c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800776e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007770:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007772:	7023      	strb	r3, [r4, #0]
 8007774:	e035      	b.n	80077e2 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8007776:	1c72      	adds	r2, r6, #1
 8007778:	d0c5      	beq.n	8007706 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800777a:	f7ff f959 	bl	8006a30 <HAL_GetTick>
 800777e:	1b40      	subs	r0, r0, r5
 8007780:	42b0      	cmp	r0, r6
 8007782:	d801      	bhi.n	8007788 <I2C_IsErrorOccurred+0xa4>
 8007784:	2e00      	cmp	r6, #0
 8007786:	d1bd      	bne.n	8007704 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8007788:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800778a:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 800778c:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800778e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8007790:	7811      	ldrb	r1, [r2, #0]
 8007792:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007794:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8007796:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	0209      	lsls	r1, r1, #8
 800779c:	420a      	tst	r2, r1
 800779e:	d00c      	beq.n	80077ba <I2C_IsErrorOccurred+0xd6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80077a0:	2280      	movs	r2, #128	; 0x80
 80077a2:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80077a4:	4210      	tst	r0, r2
 80077a6:	d108      	bne.n	80077ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80077a8:	4661      	mov	r1, ip
 80077aa:	2920      	cmp	r1, #32
 80077ac:	d005      	beq.n	80077ba <I2C_IsErrorOccurred+0xd6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077ae:	6859      	ldr	r1, [r3, #4]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80077b4:	f7ff f93c 	bl	8006a30 <HAL_GetTick>
 80077b8:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	423b      	tst	r3, r7
 80077c0:	d1a0      	bne.n	8007704 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077c2:	f7ff f935 	bl	8006a30 <HAL_GetTick>
 80077c6:	1b40      	subs	r0, r0, r5
 80077c8:	2819      	cmp	r0, #25
 80077ca:	d9f6      	bls.n	80077ba <I2C_IsErrorOccurred+0xd6>
              status = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80077ce:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	e797      	b.n	8007704 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 80077d4:	9a01      	ldr	r2, [sp, #4]
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	d19b      	bne.n	8007712 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077da:	61df      	str	r7, [r3, #28]
 80077dc:	e799      	b.n	8007712 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 80077de:	2800      	cmp	r0, #0
 80077e0:	d1b3      	bne.n	800774a <I2C_IsErrorOccurred+0x66>
}
 80077e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077e4:	fe00e800 	.word	0xfe00e800

080077e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	0004      	movs	r4, r0
 80077ec:	000d      	movs	r5, r1
 80077ee:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077f0:	2702      	movs	r7, #2
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	423b      	tst	r3, r7
 80077f8:	d001      	beq.n	80077fe <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80077fa:	2000      	movs	r0, #0
}
 80077fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077fe:	0032      	movs	r2, r6
 8007800:	0029      	movs	r1, r5
 8007802:	0020      	movs	r0, r4
 8007804:	f7ff ff6e 	bl	80076e4 <I2C_IsErrorOccurred>
 8007808:	2800      	cmp	r0, #0
 800780a:	d115      	bne.n	8007838 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800780c:	1c6b      	adds	r3, r5, #1
 800780e:	d0f0      	beq.n	80077f2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007810:	f7ff f90e 	bl	8006a30 <HAL_GetTick>
 8007814:	1b80      	subs	r0, r0, r6
 8007816:	42a8      	cmp	r0, r5
 8007818:	d801      	bhi.n	800781e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800781a:	2d00      	cmp	r5, #0
 800781c:	d1e9      	bne.n	80077f2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800781e:	2220      	movs	r2, #32
 8007820:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007822:	4313      	orrs	r3, r2
 8007824:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007826:	0023      	movs	r3, r4
 8007828:	3341      	adds	r3, #65	; 0x41
 800782a:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800782c:	0022      	movs	r2, r4
 800782e:	2300      	movs	r3, #0
 8007830:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8007832:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007834:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8007836:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8007838:	2001      	movs	r0, #1
 800783a:	e7df      	b.n	80077fc <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800783c <I2C_WaitOnFlagUntilTimeout>:
{
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	0004      	movs	r4, r0
 8007840:	000e      	movs	r6, r1
 8007842:	0017      	movs	r7, r2
 8007844:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007846:	6822      	ldr	r2, [r4, #0]
 8007848:	6993      	ldr	r3, [r2, #24]
 800784a:	4033      	ands	r3, r6
 800784c:	1b9b      	subs	r3, r3, r6
 800784e:	4259      	negs	r1, r3
 8007850:	414b      	adcs	r3, r1
 8007852:	42bb      	cmp	r3, r7
 8007854:	d001      	beq.n	800785a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8007856:	2000      	movs	r0, #0
 8007858:	e017      	b.n	800788a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800785a:	1c6b      	adds	r3, r5, #1
 800785c:	d0f4      	beq.n	8007848 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800785e:	f7ff f8e7 	bl	8006a30 <HAL_GetTick>
 8007862:	9b06      	ldr	r3, [sp, #24]
 8007864:	1ac0      	subs	r0, r0, r3
 8007866:	42a8      	cmp	r0, r5
 8007868:	d801      	bhi.n	800786e <I2C_WaitOnFlagUntilTimeout+0x32>
 800786a:	2d00      	cmp	r5, #0
 800786c:	d1eb      	bne.n	8007846 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800786e:	2220      	movs	r2, #32
 8007870:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007872:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007874:	4313      	orrs	r3, r2
 8007876:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007878:	0023      	movs	r3, r4
 800787a:	3341      	adds	r3, #65	; 0x41
 800787c:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800787e:	0022      	movs	r2, r4
 8007880:	2300      	movs	r3, #0
 8007882:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8007884:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007886:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8007888:	7023      	strb	r3, [r4, #0]
}
 800788a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800788c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	0004      	movs	r4, r0
 8007890:	000d      	movs	r5, r1
 8007892:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007894:	2720      	movs	r7, #32
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	423b      	tst	r3, r7
 800789c:	d001      	beq.n	80078a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800789e:	2000      	movs	r0, #0
}
 80078a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a2:	0032      	movs	r2, r6
 80078a4:	0029      	movs	r1, r5
 80078a6:	0020      	movs	r0, r4
 80078a8:	f7ff ff1c 	bl	80076e4 <I2C_IsErrorOccurred>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d113      	bne.n	80078d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b0:	f7ff f8be 	bl	8006a30 <HAL_GetTick>
 80078b4:	1b80      	subs	r0, r0, r6
 80078b6:	42a8      	cmp	r0, r5
 80078b8:	d801      	bhi.n	80078be <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80078ba:	2d00      	cmp	r5, #0
 80078bc:	d1eb      	bne.n	8007896 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078be:	2220      	movs	r2, #32
 80078c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80078c2:	4313      	orrs	r3, r2
 80078c4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078c6:	0023      	movs	r3, r4
 80078c8:	3341      	adds	r3, #65	; 0x41
 80078ca:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078cc:	0022      	movs	r2, r4
 80078ce:	2300      	movs	r3, #0
 80078d0:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80078d2:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d4:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80078d6:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80078d8:	2001      	movs	r0, #1
 80078da:	e7e1      	b.n	80078a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080078dc <HAL_I2C_Init>:
{
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	0004      	movs	r4, r0
    return HAL_ERROR;
 80078e0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80078e2:	2c00      	cmp	r4, #0
 80078e4:	d03f      	beq.n	8007966 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078e6:	0025      	movs	r5, r4
 80078e8:	3541      	adds	r5, #65	; 0x41
 80078ea:	782b      	ldrb	r3, [r5, #0]
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80078f2:	0023      	movs	r3, r4
 80078f4:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80078f6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80078f8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80078fa:	f7fe fdd9 	bl	80064b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80078fe:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8007900:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007902:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8007904:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007906:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8007908:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800790a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800790c:	438a      	bics	r2, r1
 800790e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007910:	491a      	ldr	r1, [pc, #104]	; (800797c <HAL_I2C_Init+0xa0>)
 8007912:	6862      	ldr	r2, [r4, #4]
 8007914:	400a      	ands	r2, r1
 8007916:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	4919      	ldr	r1, [pc, #100]	; (8007980 <HAL_I2C_Init+0xa4>)
 800791c:	400a      	ands	r2, r1
 800791e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007920:	2801      	cmp	r0, #1
 8007922:	d121      	bne.n	8007968 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007924:	2280      	movs	r2, #128	; 0x80
 8007926:	0212      	lsls	r2, r2, #8
 8007928:	4332      	orrs	r2, r6
 800792a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800792c:	6858      	ldr	r0, [r3, #4]
 800792e:	4a15      	ldr	r2, [pc, #84]	; (8007984 <HAL_I2C_Init+0xa8>)
 8007930:	4302      	orrs	r2, r0
 8007932:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007934:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007936:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007938:	400a      	ands	r2, r1
 800793a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800793c:	6961      	ldr	r1, [r4, #20]
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007942:	69a1      	ldr	r1, [r4, #24]
 8007944:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007946:	430a      	orrs	r2, r1
 8007948:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800794a:	6a21      	ldr	r1, [r4, #32]
 800794c:	69e2      	ldr	r2, [r4, #28]
 800794e:	430a      	orrs	r2, r1
 8007950:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007952:	2201      	movs	r2, #1
 8007954:	6819      	ldr	r1, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800795a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800795c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800795e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007960:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007962:	3442      	adds	r4, #66	; 0x42
 8007964:	7020      	strb	r0, [r4, #0]
}
 8007966:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007968:	2284      	movs	r2, #132	; 0x84
 800796a:	0212      	lsls	r2, r2, #8
 800796c:	4332      	orrs	r2, r6
 800796e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007970:	2802      	cmp	r0, #2
 8007972:	d1db      	bne.n	800792c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007974:	2280      	movs	r2, #128	; 0x80
 8007976:	0112      	lsls	r2, r2, #4
 8007978:	605a      	str	r2, [r3, #4]
 800797a:	e7d7      	b.n	800792c <HAL_I2C_Init+0x50>
 800797c:	f0ffffff 	.word	0xf0ffffff
 8007980:	ffff7fff 	.word	0xffff7fff
 8007984:	02008000 	.word	0x02008000

08007988 <HAL_I2C_Mem_Write>:
{
 8007988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800798a:	b089      	sub	sp, #36	; 0x24
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	ab0e      	add	r3, sp, #56	; 0x38
 8007990:	9203      	str	r2, [sp, #12]
 8007992:	cb04      	ldmia	r3!, {r2}
 8007994:	0004      	movs	r4, r0
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	9205      	str	r2, [sp, #20]
 800799a:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800799c:	0003      	movs	r3, r0
 800799e:	3341      	adds	r3, #65	; 0x41
 80079a0:	9307      	str	r3, [sp, #28]
 80079a2:	781b      	ldrb	r3, [r3, #0]
{
 80079a4:	000f      	movs	r7, r1
    return HAL_BUSY;
 80079a6:	2002      	movs	r0, #2
{
 80079a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d108      	bne.n	80079c0 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_I2C_Mem_Write+0x30>
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80079b8:	2380      	movs	r3, #128	; 0x80
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80079be:	2001      	movs	r0, #1
}
 80079c0:	b009      	add	sp, #36	; 0x24
 80079c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80079c4:	0023      	movs	r3, r4
 80079c6:	3340      	adds	r3, #64	; 0x40
 80079c8:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80079ca:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80079cc:	2a01      	cmp	r2, #1
 80079ce:	d0f7      	beq.n	80079c0 <HAL_I2C_Mem_Write+0x38>
 80079d0:	2201      	movs	r2, #1
 80079d2:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80079d4:	f7ff f82c 	bl	8006a30 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079d8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80079da:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079dc:	9000      	str	r0, [sp, #0]
 80079de:	2319      	movs	r3, #25
 80079e0:	2201      	movs	r2, #1
 80079e2:	0020      	movs	r0, r4
 80079e4:	0209      	lsls	r1, r1, #8
 80079e6:	f7ff ff29 	bl	800783c <I2C_WaitOnFlagUntilTimeout>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d1e7      	bne.n	80079be <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079ee:	2321      	movs	r3, #33	; 0x21
 80079f0:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80079f2:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079f4:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079f6:	0023      	movs	r3, r4
 80079f8:	3342      	adds	r3, #66	; 0x42
 80079fa:	9307      	str	r3, [sp, #28]
 80079fc:	2340      	movs	r3, #64	; 0x40
 80079fe:	9a07      	ldr	r2, [sp, #28]
 8007a00:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8007a02:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a04:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007a06:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a08:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8007a0a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8007a0c:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a0e:	466b      	mov	r3, sp
 8007a10:	7c1a      	ldrb	r2, [r3, #16]
 8007a12:	4b4c      	ldr	r3, [pc, #304]	; (8007b44 <HAL_I2C_Mem_Write+0x1bc>)
 8007a14:	0020      	movs	r0, r4
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	2380      	movs	r3, #128	; 0x80
 8007a1a:	045b      	lsls	r3, r3, #17
 8007a1c:	f7ff fe4c 	bl	80076b8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a20:	002a      	movs	r2, r5
 8007a22:	0031      	movs	r1, r6
 8007a24:	0020      	movs	r0, r4
 8007a26:	f7ff fedf 	bl	80077e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d129      	bne.n	8007a82 <HAL_I2C_Mem_Write+0xfa>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a2e:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a30:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a32:	2a01      	cmp	r2, #1
 8007a34:	d116      	bne.n	8007a64 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a36:	466a      	mov	r2, sp
 8007a38:	7b12      	ldrb	r2, [r2, #12]
 8007a3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a3c:	0033      	movs	r3, r6
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2180      	movs	r1, #128	; 0x80
 8007a42:	0020      	movs	r0, r4
 8007a44:	9500      	str	r5, [sp, #0]
 8007a46:	f7ff fef9 	bl	800783c <I2C_WaitOnFlagUntilTimeout>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d119      	bne.n	8007a82 <HAL_I2C_Mem_Write+0xfa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007a50:	2bff      	cmp	r3, #255	; 0xff
 8007a52:	d81a      	bhi.n	8007a8a <HAL_I2C_Mem_Write+0x102>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a54:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8007a56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a58:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8007a5a:	b292      	uxth	r2, r2
 8007a5c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	9000      	str	r0, [sp, #0]
 8007a62:	e017      	b.n	8007a94 <HAL_I2C_Mem_Write+0x10c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a64:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a66:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a68:	0a12      	lsrs	r2, r2, #8
 8007a6a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a6c:	0020      	movs	r0, r4
 8007a6e:	002a      	movs	r2, r5
 8007a70:	f7ff feba 	bl	80077e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d104      	bne.n	8007a82 <HAL_I2C_Mem_Write+0xfa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a78:	466b      	mov	r3, sp
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	7b1b      	ldrb	r3, [r3, #12]
 8007a7e:	6293      	str	r3, [r2, #40]	; 0x28
 8007a80:	e7dc      	b.n	8007a3c <HAL_I2C_Mem_Write+0xb4>
      __HAL_UNLOCK(hi2c);
 8007a82:	2300      	movs	r3, #0
 8007a84:	3440      	adds	r4, #64	; 0x40
 8007a86:	7023      	strb	r3, [r4, #0]
 8007a88:	e799      	b.n	80079be <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a8a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a8c:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a8e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a90:	045b      	lsls	r3, r3, #17
 8007a92:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a94:	0039      	movs	r1, r7
 8007a96:	0020      	movs	r0, r4
 8007a98:	f7ff fe0e 	bl	80076b8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a9c:	002a      	movs	r2, r5
 8007a9e:	0031      	movs	r1, r6
 8007aa0:	0020      	movs	r0, r4
 8007aa2:	f7ff fea1 	bl	80077e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d000      	beq.n	8007aac <HAL_I2C_Mem_Write+0x124>
 8007aaa:	e788      	b.n	80079be <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8007ab2:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ab4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007ab6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007ab8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007aba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007ac2:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ac4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007ac6:	b292      	uxth	r2, r2
 8007ac8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d017      	beq.n	8007afe <HAL_I2C_Mem_Write+0x176>
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	d115      	bne.n	8007afe <HAL_I2C_Mem_Write+0x176>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ad2:	0033      	movs	r3, r6
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	0020      	movs	r0, r4
 8007ad8:	9500      	str	r5, [sp, #0]
 8007ada:	f7ff feaf 	bl	800783c <I2C_WaitOnFlagUntilTimeout>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d000      	beq.n	8007ae4 <HAL_I2C_Mem_Write+0x15c>
 8007ae2:	e76c      	b.n	80079be <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ae4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ae6:	2bff      	cmp	r3, #255	; 0xff
 8007ae8:	d923      	bls.n	8007b32 <HAL_I2C_Mem_Write+0x1aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aea:	23ff      	movs	r3, #255	; 0xff
 8007aec:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007aee:	2380      	movs	r3, #128	; 0x80
 8007af0:	22ff      	movs	r2, #255	; 0xff
 8007af2:	9000      	str	r0, [sp, #0]
 8007af4:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007af6:	0039      	movs	r1, r7
 8007af8:	0020      	movs	r0, r4
 8007afa:	f7ff fddd 	bl	80076b8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007afe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1cb      	bne.n	8007a9c <HAL_I2C_Mem_Write+0x114>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b04:	002a      	movs	r2, r5
 8007b06:	0031      	movs	r1, r6
 8007b08:	0020      	movs	r0, r4
 8007b0a:	f7ff febf 	bl	800788c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d000      	beq.n	8007b14 <HAL_I2C_Mem_Write+0x18c>
 8007b12:	e754      	b.n	80079be <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b14:	2120      	movs	r1, #32
 8007b16:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8007b18:	4d0b      	ldr	r5, [pc, #44]	; (8007b48 <HAL_I2C_Mem_Write+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b1a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	402a      	ands	r2, r5
 8007b20:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b22:	0023      	movs	r3, r4
 8007b24:	3341      	adds	r3, #65	; 0x41
 8007b26:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b28:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8007b2a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b2c:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8007b2e:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8007b30:	e746      	b.n	80079c0 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b32:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8007b34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b36:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8007b38:	b292      	uxth	r2, r2
 8007b3a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	9000      	str	r0, [sp, #0]
 8007b40:	e7d9      	b.n	8007af6 <HAL_I2C_Mem_Write+0x16e>
 8007b42:	46c0      	nop			; (mov r8, r8)
 8007b44:	80002000 	.word	0x80002000
 8007b48:	fe00e800 	.word	0xfe00e800

08007b4c <HAL_I2C_Mem_Read>:
{
 8007b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4e:	b089      	sub	sp, #36	; 0x24
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	ab0e      	add	r3, sp, #56	; 0x38
 8007b54:	9203      	str	r2, [sp, #12]
 8007b56:	cb04      	ldmia	r3!, {r2}
 8007b58:	0004      	movs	r4, r0
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	9205      	str	r2, [sp, #20]
 8007b5e:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b60:	0003      	movs	r3, r0
 8007b62:	3341      	adds	r3, #65	; 0x41
 8007b64:	9307      	str	r3, [sp, #28]
 8007b66:	781b      	ldrb	r3, [r3, #0]
{
 8007b68:	000f      	movs	r7, r1
    return HAL_BUSY;
 8007b6a:	2002      	movs	r0, #2
{
 8007b6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d108      	bne.n	8007b84 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	d002      	beq.n	8007b7c <HAL_I2C_Mem_Read+0x30>
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8007b82:	2001      	movs	r0, #1
}
 8007b84:	b009      	add	sp, #36	; 0x24
 8007b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8007b88:	0023      	movs	r3, r4
 8007b8a:	3340      	adds	r3, #64	; 0x40
 8007b8c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8007b8e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8007b90:	2a01      	cmp	r2, #1
 8007b92:	d0f7      	beq.n	8007b84 <HAL_I2C_Mem_Read+0x38>
 8007b94:	2201      	movs	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007b98:	f7fe ff4a 	bl	8006a30 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b9c:	2180      	movs	r1, #128	; 0x80
 8007b9e:	2319      	movs	r3, #25
 8007ba0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007ba2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	0020      	movs	r0, r4
 8007ba8:	0209      	lsls	r1, r1, #8
 8007baa:	f7ff fe47 	bl	800783c <I2C_WaitOnFlagUntilTimeout>
 8007bae:	1e03      	subs	r3, r0, #0
 8007bb0:	d1e7      	bne.n	8007b82 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bb2:	2222      	movs	r2, #34	; 0x22
 8007bb4:	9907      	ldr	r1, [sp, #28]
 8007bb6:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bb8:	0022      	movs	r2, r4
 8007bba:	3242      	adds	r2, #66	; 0x42
 8007bbc:	9207      	str	r2, [sp, #28]
 8007bbe:	2240      	movs	r2, #64	; 0x40
 8007bc0:	9907      	ldr	r1, [sp, #28]
 8007bc2:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8007bc4:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc6:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007bc8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bca:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007bcc:	494f      	ldr	r1, [pc, #316]	; (8007d0c <HAL_I2C_Mem_Read+0x1c0>)
    hi2c->XferCount = Size;
 8007bce:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007bd0:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8007bd2:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007bd4:	7c12      	ldrb	r2, [r2, #16]
 8007bd6:	0020      	movs	r0, r4
 8007bd8:	9100      	str	r1, [sp, #0]
 8007bda:	0039      	movs	r1, r7
 8007bdc:	f7ff fd6c 	bl	80076b8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007be0:	002a      	movs	r2, r5
 8007be2:	0031      	movs	r1, r6
 8007be4:	0020      	movs	r0, r4
 8007be6:	f7ff fdff 	bl	80077e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d12a      	bne.n	8007c44 <HAL_I2C_Mem_Read+0xf8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bee:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bf2:	2a01      	cmp	r2, #1
 8007bf4:	d117      	bne.n	8007c26 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf6:	466a      	mov	r2, sp
 8007bf8:	7b12      	ldrb	r2, [r2, #12]
 8007bfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007bfc:	0033      	movs	r3, r6
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2140      	movs	r1, #64	; 0x40
 8007c02:	0020      	movs	r0, r4
 8007c04:	9500      	str	r5, [sp, #0]
 8007c06:	f7ff fe19 	bl	800783c <I2C_WaitOnFlagUntilTimeout>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d11a      	bne.n	8007c44 <HAL_I2C_Mem_Read+0xf8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c0e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007c10:	4b3f      	ldr	r3, [pc, #252]	; (8007d10 <HAL_I2C_Mem_Read+0x1c4>)
 8007c12:	2aff      	cmp	r2, #255	; 0xff
 8007c14:	d81a      	bhi.n	8007c4c <HAL_I2C_Mem_Read+0x100>
      hi2c->XferSize = hi2c->XferCount;
 8007c16:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007c18:	b292      	uxth	r2, r2
 8007c1a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	2380      	movs	r3, #128	; 0x80
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	049b      	lsls	r3, r3, #18
 8007c24:	e017      	b.n	8007c56 <HAL_I2C_Mem_Read+0x10a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c26:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c28:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c2a:	0a12      	lsrs	r2, r2, #8
 8007c2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c2e:	0020      	movs	r0, r4
 8007c30:	002a      	movs	r2, r5
 8007c32:	f7ff fdd9 	bl	80077e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d104      	bne.n	8007c44 <HAL_I2C_Mem_Read+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c3a:	466b      	mov	r3, sp
 8007c3c:	6822      	ldr	r2, [r4, #0]
 8007c3e:	7b1b      	ldrb	r3, [r3, #12]
 8007c40:	6293      	str	r3, [r2, #40]	; 0x28
 8007c42:	e7db      	b.n	8007bfc <HAL_I2C_Mem_Read+0xb0>
      __HAL_UNLOCK(hi2c);
 8007c44:	2300      	movs	r3, #0
 8007c46:	3440      	adds	r4, #64	; 0x40
 8007c48:	7023      	strb	r3, [r4, #0]
 8007c4a:	e79a      	b.n	8007b82 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c4c:	22ff      	movs	r2, #255	; 0xff
 8007c4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	2380      	movs	r3, #128	; 0x80
 8007c54:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c56:	0039      	movs	r1, r7
 8007c58:	0020      	movs	r0, r4
 8007c5a:	f7ff fd2d 	bl	80076b8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007c5e:	0033      	movs	r3, r6
 8007c60:	2200      	movs	r2, #0
 8007c62:	2104      	movs	r1, #4
 8007c64:	0020      	movs	r0, r4
 8007c66:	9500      	str	r5, [sp, #0]
 8007c68:	f7ff fde8 	bl	800783c <I2C_WaitOnFlagUntilTimeout>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d000      	beq.n	8007c72 <HAL_I2C_Mem_Read+0x126>
 8007c70:	e787      	b.n	8007b82 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c78:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007c7c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007c7e:	3301      	adds	r3, #1
 8007c80:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007c82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007c84:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d017      	beq.n	8007cc6 <HAL_I2C_Mem_Read+0x17a>
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d115      	bne.n	8007cc6 <HAL_I2C_Mem_Read+0x17a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c9a:	0033      	movs	r3, r6
 8007c9c:	2180      	movs	r1, #128	; 0x80
 8007c9e:	0020      	movs	r0, r4
 8007ca0:	9500      	str	r5, [sp, #0]
 8007ca2:	f7ff fdcb 	bl	800783c <I2C_WaitOnFlagUntilTimeout>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d000      	beq.n	8007cac <HAL_I2C_Mem_Read+0x160>
 8007caa:	e76a      	b.n	8007b82 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cae:	2bff      	cmp	r3, #255	; 0xff
 8007cb0:	d923      	bls.n	8007cfa <HAL_I2C_Mem_Read+0x1ae>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cb2:	23ff      	movs	r3, #255	; 0xff
 8007cb4:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007cb6:	2380      	movs	r3, #128	; 0x80
 8007cb8:	22ff      	movs	r2, #255	; 0xff
 8007cba:	9000      	str	r0, [sp, #0]
 8007cbc:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cbe:	0039      	movs	r1, r7
 8007cc0:	0020      	movs	r0, r4
 8007cc2:	f7ff fcf9 	bl	80076b8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007cc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1c8      	bne.n	8007c5e <HAL_I2C_Mem_Read+0x112>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ccc:	002a      	movs	r2, r5
 8007cce:	0031      	movs	r1, r6
 8007cd0:	0020      	movs	r0, r4
 8007cd2:	f7ff fddb 	bl	800788c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d000      	beq.n	8007cdc <HAL_I2C_Mem_Read+0x190>
 8007cda:	e752      	b.n	8007b82 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cdc:	2120      	movs	r1, #32
 8007cde:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8007ce0:	4d0c      	ldr	r5, [pc, #48]	; (8007d14 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ce2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	402a      	ands	r2, r5
 8007ce8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007cea:	0023      	movs	r3, r4
 8007cec:	3341      	adds	r3, #65	; 0x41
 8007cee:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cf0:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8007cf2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cf4:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8007cf6:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8007cf8:	e744      	b.n	8007b84 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cfa:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8007cfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cfe:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8007d00:	b292      	uxth	r2, r2
 8007d02:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	9000      	str	r0, [sp, #0]
 8007d08:	e7d9      	b.n	8007cbe <HAL_I2C_Mem_Read+0x172>
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	80002000 	.word	0x80002000
 8007d10:	80002400 	.word	0x80002400
 8007d14:	fe00e800 	.word	0xfe00e800

08007d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d18:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d1a:	0004      	movs	r4, r0
 8007d1c:	3441      	adds	r4, #65	; 0x41
 8007d1e:	7822      	ldrb	r2, [r4, #0]
{
 8007d20:	0003      	movs	r3, r0
 8007d22:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8007d24:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d26:	b2d6      	uxtb	r6, r2
 8007d28:	2a20      	cmp	r2, #32
 8007d2a:	d118      	bne.n	8007d5e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8007d2c:	001d      	movs	r5, r3
 8007d2e:	3540      	adds	r5, #64	; 0x40
 8007d30:	782a      	ldrb	r2, [r5, #0]
 8007d32:	2a01      	cmp	r2, #1
 8007d34:	d013      	beq.n	8007d5e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d36:	2224      	movs	r2, #36	; 0x24
 8007d38:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3a23      	subs	r2, #35	; 0x23
 8007d3e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d40:	4807      	ldr	r0, [pc, #28]	; (8007d60 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8007d42:	4391      	bics	r1, r2
 8007d44:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8007d4a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d4c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d4e:	6819      	ldr	r1, [r3, #0]
 8007d50:	4339      	orrs	r1, r7
 8007d52:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d5a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8007d5c:	7028      	strb	r0, [r5, #0]
  }
}
 8007d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d60:	ffffefff 	.word	0xffffefff

08007d64 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d64:	0002      	movs	r2, r0
{
 8007d66:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d68:	3241      	adds	r2, #65	; 0x41
 8007d6a:	7814      	ldrb	r4, [r2, #0]
{
 8007d6c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d6e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8007d70:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d72:	2c20      	cmp	r4, #32
 8007d74:	d117      	bne.n	8007da6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8007d76:	001c      	movs	r4, r3
 8007d78:	3440      	adds	r4, #64	; 0x40
 8007d7a:	7826      	ldrb	r6, [r4, #0]
 8007d7c:	2e01      	cmp	r6, #1
 8007d7e:	d012      	beq.n	8007da6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d80:	3022      	adds	r0, #34	; 0x22
 8007d82:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3823      	subs	r0, #35	; 0x23
 8007d88:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8007d8a:	4f07      	ldr	r7, [pc, #28]	; (8007da8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8007d8c:	4386      	bics	r6, r0
 8007d8e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8007d90:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8007d92:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8007d94:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8007d96:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8007d98:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007d9a:	6819      	ldr	r1, [r3, #0]
 8007d9c:	4308      	orrs	r0, r1
 8007d9e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8007da0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007da2:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007da4:	7020      	strb	r0, [r4, #0]
  }
}
 8007da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da8:	fffff0ff 	.word	0xfffff0ff

08007dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007dac:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007dae:	4c11      	ldr	r4, [pc, #68]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8007db0:	4911      	ldr	r1, [pc, #68]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8007db2:	6823      	ldr	r3, [r4, #0]
{
 8007db4:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007db6:	400b      	ands	r3, r1
 8007db8:	4303      	orrs	r3, r0
 8007dba:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dbc:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8007dbe:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d10e      	bne.n	8007de4 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8007dc8:	490d      	ldr	r1, [pc, #52]	; (8007e00 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	2306      	movs	r3, #6
 8007dce:	4358      	muls	r0, r3
 8007dd0:	f7f8 f9c0 	bl	8000154 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dd4:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007dd6:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dd8:	00d2      	lsls	r2, r2, #3
 8007dda:	6961      	ldr	r1, [r4, #20]
 8007ddc:	0008      	movs	r0, r1
 8007dde:	4010      	ands	r0, r2
 8007de0:	4211      	tst	r1, r2
 8007de2:	d100      	bne.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8007de4:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8007dea:	3b01      	subs	r3, #1
 8007dec:	e7f5      	b.n	8007dda <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8007dee:	2003      	movs	r0, #3
 8007df0:	e7f8      	b.n	8007de4 <HAL_PWREx_ControlVoltageScaling+0x38>
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	40007000 	.word	0x40007000
 8007df8:	fffff9ff 	.word	0xfffff9ff
 8007dfc:	200000e4 	.word	0x200000e4
 8007e00:	000f4240 	.word	0x000f4240

08007e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e06:	0004      	movs	r4, r0
 8007e08:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d023      	beq.n	8007e56 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e0e:	6803      	ldr	r3, [r0, #0]
 8007e10:	07db      	lsls	r3, r3, #31
 8007e12:	d410      	bmi.n	8007e36 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	079b      	lsls	r3, r3, #30
 8007e18:	d45e      	bmi.n	8007ed8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	071b      	lsls	r3, r3, #28
 8007e1e:	d500      	bpl.n	8007e22 <HAL_RCC_OscConfig+0x1e>
 8007e20:	e0c2      	b.n	8007fa8 <HAL_RCC_OscConfig+0x1a4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	075b      	lsls	r3, r3, #29
 8007e26:	d500      	bpl.n	8007e2a <HAL_RCC_OscConfig+0x26>
 8007e28:	e0f3      	b.n	8008012 <HAL_RCC_OscConfig+0x20e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e2a:	69e3      	ldr	r3, [r4, #28]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d000      	beq.n	8007e32 <HAL_RCC_OscConfig+0x2e>
 8007e30:	e17a      	b.n	8008128 <HAL_RCC_OscConfig+0x324>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8007e32:	2000      	movs	r0, #0
 8007e34:	e029      	b.n	8007e8a <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e36:	2238      	movs	r2, #56	; 0x38
 8007e38:	4daf      	ldr	r5, [pc, #700]	; (80080f8 <HAL_RCC_OscConfig+0x2f4>)
 8007e3a:	68ab      	ldr	r3, [r5, #8]
 8007e3c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e3e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d10a      	bne.n	8007e5a <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e44:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007e46:	079b      	lsls	r3, r3, #30
 8007e48:	d109      	bne.n	8007e5e <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e4a:	682b      	ldr	r3, [r5, #0]
 8007e4c:	039b      	lsls	r3, r3, #14
 8007e4e:	d5e1      	bpl.n	8007e14 <HAL_RCC_OscConfig+0x10>
 8007e50:	6863      	ldr	r3, [r4, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1de      	bne.n	8007e14 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8007e56:	2001      	movs	r0, #1
 8007e58:	e017      	b.n	8007e8a <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007e5a:	2b08      	cmp	r3, #8
 8007e5c:	d0f5      	beq.n	8007e4a <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e5e:	2280      	movs	r2, #128	; 0x80
 8007e60:	6863      	ldr	r3, [r4, #4]
 8007e62:	0252      	lsls	r2, r2, #9
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d112      	bne.n	8007e8e <HAL_RCC_OscConfig+0x8a>
 8007e68:	682a      	ldr	r2, [r5, #0]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007e6e:	f7fe fddf 	bl	8006a30 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e72:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8007e74:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e76:	02bf      	lsls	r7, r7, #10
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	423b      	tst	r3, r7
 8007e7c:	d1ca      	bne.n	8007e14 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e7e:	f7fe fdd7 	bl	8006a30 <HAL_GetTick>
 8007e82:	1b80      	subs	r0, r0, r6
 8007e84:	2864      	cmp	r0, #100	; 0x64
 8007e86:	d9f7      	bls.n	8007e78 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8007e88:	2003      	movs	r0, #3
}
 8007e8a:	b005      	add	sp, #20
 8007e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e8e:	21a0      	movs	r1, #160	; 0xa0
 8007e90:	02c9      	lsls	r1, r1, #11
 8007e92:	428b      	cmp	r3, r1
 8007e94:	d108      	bne.n	8007ea8 <HAL_RCC_OscConfig+0xa4>
 8007e96:	2380      	movs	r3, #128	; 0x80
 8007e98:	6829      	ldr	r1, [r5, #0]
 8007e9a:	02db      	lsls	r3, r3, #11
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	602b      	str	r3, [r5, #0]
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ea6:	e7e2      	b.n	8007e6e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ea8:	682a      	ldr	r2, [r5, #0]
 8007eaa:	4994      	ldr	r1, [pc, #592]	; (80080fc <HAL_RCC_OscConfig+0x2f8>)
 8007eac:	400a      	ands	r2, r1
 8007eae:	602a      	str	r2, [r5, #0]
 8007eb0:	682a      	ldr	r2, [r5, #0]
 8007eb2:	4993      	ldr	r1, [pc, #588]	; (8008100 <HAL_RCC_OscConfig+0x2fc>)
 8007eb4:	400a      	ands	r2, r1
 8007eb6:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1d8      	bne.n	8007e6e <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 8007ebc:	f7fe fdb8 	bl	8006a30 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ec0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8007ec2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ec4:	02bf      	lsls	r7, r7, #10
 8007ec6:	682b      	ldr	r3, [r5, #0]
 8007ec8:	423b      	tst	r3, r7
 8007eca:	d0a3      	beq.n	8007e14 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ecc:	f7fe fdb0 	bl	8006a30 <HAL_GetTick>
 8007ed0:	1b80      	subs	r0, r0, r6
 8007ed2:	2864      	cmp	r0, #100	; 0x64
 8007ed4:	d9f7      	bls.n	8007ec6 <HAL_RCC_OscConfig+0xc2>
 8007ed6:	e7d7      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ed8:	2238      	movs	r2, #56	; 0x38
 8007eda:	4d87      	ldr	r5, [pc, #540]	; (80080f8 <HAL_RCC_OscConfig+0x2f4>)
 8007edc:	68ab      	ldr	r3, [r5, #8]
 8007ede:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ee0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007ee2:	2b10      	cmp	r3, #16
 8007ee4:	d127      	bne.n	8007f36 <HAL_RCC_OscConfig+0x132>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ee6:	2103      	movs	r1, #3
 8007ee8:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007eea:	2a02      	cmp	r2, #2
 8007eec:	d125      	bne.n	8007f3a <HAL_RCC_OscConfig+0x136>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eee:	682a      	ldr	r2, [r5, #0]
 8007ef0:	0552      	lsls	r2, r2, #21
 8007ef2:	d502      	bpl.n	8007efa <HAL_RCC_OscConfig+0xf6>
 8007ef4:	68e2      	ldr	r2, [r4, #12]
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	d0ad      	beq.n	8007e56 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007efa:	6869      	ldr	r1, [r5, #4]
 8007efc:	6962      	ldr	r2, [r4, #20]
 8007efe:	4881      	ldr	r0, [pc, #516]	; (8008104 <HAL_RCC_OscConfig+0x300>)
 8007f00:	0212      	lsls	r2, r2, #8
 8007f02:	4001      	ands	r1, r0
 8007f04:	430a      	orrs	r2, r1
 8007f06:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10c      	bne.n	8007f26 <HAL_RCC_OscConfig+0x122>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	4a7e      	ldr	r2, [pc, #504]	; (8008108 <HAL_RCC_OscConfig+0x304>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007f10:	497e      	ldr	r1, [pc, #504]	; (800810c <HAL_RCC_OscConfig+0x308>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f12:	4013      	ands	r3, r2
 8007f14:	6922      	ldr	r2, [r4, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007f1a:	682b      	ldr	r3, [r5, #0]
 8007f1c:	4a7c      	ldr	r2, [pc, #496]	; (8008110 <HAL_RCC_OscConfig+0x30c>)
 8007f1e:	049b      	lsls	r3, r3, #18
 8007f20:	0f5b      	lsrs	r3, r3, #29
 8007f22:	40da      	lsrs	r2, r3
 8007f24:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f26:	4b7b      	ldr	r3, [pc, #492]	; (8008114 <HAL_RCC_OscConfig+0x310>)
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f7fe fc45 	bl	80067b8 <HAL_InitTick>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d100      	bne.n	8007f34 <HAL_RCC_OscConfig+0x130>
 8007f32:	e772      	b.n	8007e1a <HAL_RCC_OscConfig+0x16>
 8007f34:	e78f      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0d9      	beq.n	8007eee <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d020      	beq.n	8007f82 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	4a71      	ldr	r2, [pc, #452]	; (8008108 <HAL_RCC_OscConfig+0x304>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f44:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f46:	4013      	ands	r3, r2
 8007f48:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f4a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8007f50:	2380      	movs	r3, #128	; 0x80
 8007f52:	682a      	ldr	r2, [r5, #0]
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	4313      	orrs	r3, r2
 8007f58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f5a:	f7fe fd69 	bl	8006a30 <HAL_GetTick>
 8007f5e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	423b      	tst	r3, r7
 8007f64:	d007      	beq.n	8007f76 <HAL_RCC_OscConfig+0x172>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f66:	686a      	ldr	r2, [r5, #4]
 8007f68:	6963      	ldr	r3, [r4, #20]
 8007f6a:	4966      	ldr	r1, [pc, #408]	; (8008104 <HAL_RCC_OscConfig+0x300>)
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	400a      	ands	r2, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	606b      	str	r3, [r5, #4]
 8007f74:	e751      	b.n	8007e1a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f76:	f7fe fd5b 	bl	8006a30 <HAL_GetTick>
 8007f7a:	1b80      	subs	r0, r0, r6
 8007f7c:	2802      	cmp	r0, #2
 8007f7e:	d9ef      	bls.n	8007f60 <HAL_RCC_OscConfig+0x15c>
 8007f80:	e782      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	4a64      	ldr	r2, [pc, #400]	; (8008118 <HAL_RCC_OscConfig+0x314>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f86:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8007f88:	4013      	ands	r3, r2
 8007f8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f8c:	f7fe fd50 	bl	8006a30 <HAL_GetTick>
 8007f90:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f92:	00ff      	lsls	r7, r7, #3
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	423b      	tst	r3, r7
 8007f98:	d100      	bne.n	8007f9c <HAL_RCC_OscConfig+0x198>
 8007f9a:	e73e      	b.n	8007e1a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f9c:	f7fe fd48 	bl	8006a30 <HAL_GetTick>
 8007fa0:	1b80      	subs	r0, r0, r6
 8007fa2:	2802      	cmp	r0, #2
 8007fa4:	d9f6      	bls.n	8007f94 <HAL_RCC_OscConfig+0x190>
 8007fa6:	e76f      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007fa8:	2238      	movs	r2, #56	; 0x38
 8007faa:	4d53      	ldr	r5, [pc, #332]	; (80080f8 <HAL_RCC_OscConfig+0x2f4>)
 8007fac:	68ab      	ldr	r3, [r5, #8]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b18      	cmp	r3, #24
 8007fb2:	d108      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x1c2>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007fb4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007fb6:	079b      	lsls	r3, r3, #30
 8007fb8:	d400      	bmi.n	8007fbc <HAL_RCC_OscConfig+0x1b8>
 8007fba:	e732      	b.n	8007e22 <HAL_RCC_OscConfig+0x1e>
 8007fbc:	69a3      	ldr	r3, [r4, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d000      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x1c0>
 8007fc2:	e72e      	b.n	8007e22 <HAL_RCC_OscConfig+0x1e>
 8007fc4:	e747      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fc6:	69a2      	ldr	r2, [r4, #24]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	2a00      	cmp	r2, #0
 8007fcc:	d010      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_LSI_ENABLE();
 8007fce:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fd0:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007fd6:	f7fe fd2b 	bl	8006a30 <HAL_GetTick>
 8007fda:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fdc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007fde:	423b      	tst	r3, r7
 8007fe0:	d000      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x1e0>
 8007fe2:	e71e      	b.n	8007e22 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fe4:	f7fe fd24 	bl	8006a30 <HAL_GetTick>
 8007fe8:	1b80      	subs	r0, r0, r6
 8007fea:	2802      	cmp	r0, #2
 8007fec:	d9f6      	bls.n	8007fdc <HAL_RCC_OscConfig+0x1d8>
 8007fee:	e74b      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8007ff0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ff2:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8007ff4:	439a      	bics	r2, r3
 8007ff6:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007ff8:	f7fe fd1a 	bl	8006a30 <HAL_GetTick>
 8007ffc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ffe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8008000:	423b      	tst	r3, r7
 8008002:	d100      	bne.n	8008006 <HAL_RCC_OscConfig+0x202>
 8008004:	e70d      	b.n	8007e22 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008006:	f7fe fd13 	bl	8006a30 <HAL_GetTick>
 800800a:	1b80      	subs	r0, r0, r6
 800800c:	2802      	cmp	r0, #2
 800800e:	d9f6      	bls.n	8007ffe <HAL_RCC_OscConfig+0x1fa>
 8008010:	e73a      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008012:	2238      	movs	r2, #56	; 0x38
 8008014:	4d38      	ldr	r5, [pc, #224]	; (80080f8 <HAL_RCC_OscConfig+0x2f4>)
 8008016:	68ab      	ldr	r3, [r5, #8]
 8008018:	4013      	ands	r3, r2
 800801a:	2b20      	cmp	r3, #32
 800801c:	d108      	bne.n	8008030 <HAL_RCC_OscConfig+0x22c>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800801e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8008020:	079b      	lsls	r3, r3, #30
 8008022:	d400      	bmi.n	8008026 <HAL_RCC_OscConfig+0x222>
 8008024:	e701      	b.n	8007e2a <HAL_RCC_OscConfig+0x26>
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d000      	beq.n	800802e <HAL_RCC_OscConfig+0x22a>
 800802c:	e6fd      	b.n	8007e2a <HAL_RCC_OscConfig+0x26>
 800802e:	e712      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008030:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8008032:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008034:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008036:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8008038:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800803a:	4213      	tst	r3, r2
 800803c:	d108      	bne.n	8008050 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_PWR_CLK_ENABLE();
 800803e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008040:	4313      	orrs	r3, r2
 8008042:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008044:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008046:	4013      	ands	r3, r2
 8008048:	9303      	str	r3, [sp, #12]
 800804a:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 800804c:	2301      	movs	r3, #1
 800804e:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008050:	2780      	movs	r7, #128	; 0x80
 8008052:	4e32      	ldr	r6, [pc, #200]	; (800811c <HAL_RCC_OscConfig+0x318>)
 8008054:	007f      	lsls	r7, r7, #1
 8008056:	6833      	ldr	r3, [r6, #0]
 8008058:	423b      	tst	r3, r7
 800805a:	d015      	beq.n	8008088 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d122      	bne.n	80080a8 <HAL_RCC_OscConfig+0x2a4>
 8008062:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8008064:	4313      	orrs	r3, r2
 8008066:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8008068:	f7fe fce2 	bl	8006a30 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800806c:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800806e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008070:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8008072:	423b      	tst	r3, r7
 8008074:	d038      	beq.n	80080e8 <HAL_RCC_OscConfig+0x2e4>
      if (pwrclkchanged == SET)
 8008076:	9b00      	ldr	r3, [sp, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d000      	beq.n	800807e <HAL_RCC_OscConfig+0x27a>
 800807c:	e6d5      	b.n	8007e2a <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 800807e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008080:	4a27      	ldr	r2, [pc, #156]	; (8008120 <HAL_RCC_OscConfig+0x31c>)
 8008082:	4013      	ands	r3, r2
 8008084:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008086:	e6d0      	b.n	8007e2a <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008088:	6833      	ldr	r3, [r6, #0]
 800808a:	433b      	orrs	r3, r7
 800808c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800808e:	f7fe fccf 	bl	8006a30 <HAL_GetTick>
 8008092:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008094:	6833      	ldr	r3, [r6, #0]
 8008096:	423b      	tst	r3, r7
 8008098:	d1e0      	bne.n	800805c <HAL_RCC_OscConfig+0x258>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800809a:	f7fe fcc9 	bl	8006a30 <HAL_GetTick>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	1ac0      	subs	r0, r0, r3
 80080a2:	2802      	cmp	r0, #2
 80080a4:	d9f6      	bls.n	8008094 <HAL_RCC_OscConfig+0x290>
 80080a6:	e6ef      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	d105      	bne.n	80080ba <HAL_RCC_OscConfig+0x2b6>
 80080ae:	3b01      	subs	r3, #1
 80080b0:	4313      	orrs	r3, r2
 80080b2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80080b4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80080b6:	2301      	movs	r3, #1
 80080b8:	e7d4      	b.n	8008064 <HAL_RCC_OscConfig+0x260>
 80080ba:	2101      	movs	r1, #1
 80080bc:	438a      	bics	r2, r1
 80080be:	65ea      	str	r2, [r5, #92]	; 0x5c
 80080c0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80080c2:	3103      	adds	r1, #3
 80080c4:	438a      	bics	r2, r1
 80080c6:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1cd      	bne.n	8008068 <HAL_RCC_OscConfig+0x264>
        tickstart = HAL_GetTick();
 80080cc:	f7fe fcb0 	bl	8006a30 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080d0:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80080d2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080d4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80080d6:	423b      	tst	r3, r7
 80080d8:	d0cd      	beq.n	8008076 <HAL_RCC_OscConfig+0x272>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080da:	f7fe fca9 	bl	8006a30 <HAL_GetTick>
 80080de:	4b11      	ldr	r3, [pc, #68]	; (8008124 <HAL_RCC_OscConfig+0x320>)
 80080e0:	1b80      	subs	r0, r0, r6
 80080e2:	4298      	cmp	r0, r3
 80080e4:	d9f6      	bls.n	80080d4 <HAL_RCC_OscConfig+0x2d0>
 80080e6:	e6cf      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080e8:	f7fe fca2 	bl	8006a30 <HAL_GetTick>
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <HAL_RCC_OscConfig+0x320>)
 80080ee:	1b80      	subs	r0, r0, r6
 80080f0:	4298      	cmp	r0, r3
 80080f2:	d9bd      	bls.n	8008070 <HAL_RCC_OscConfig+0x26c>
 80080f4:	e6c8      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	40021000 	.word	0x40021000
 80080fc:	fffeffff 	.word	0xfffeffff
 8008100:	fffbffff 	.word	0xfffbffff
 8008104:	ffff80ff 	.word	0xffff80ff
 8008108:	ffffc7ff 	.word	0xffffc7ff
 800810c:	200000e4 	.word	0x200000e4
 8008110:	00f42400 	.word	0x00f42400
 8008114:	200000ec 	.word	0x200000ec
 8008118:	fffffeff 	.word	0xfffffeff
 800811c:	40007000 	.word	0x40007000
 8008120:	efffffff 	.word	0xefffffff
 8008124:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008128:	2138      	movs	r1, #56	; 0x38
 800812a:	4d3f      	ldr	r5, [pc, #252]	; (8008228 <HAL_RCC_OscConfig+0x424>)
 800812c:	68aa      	ldr	r2, [r5, #8]
 800812e:	400a      	ands	r2, r1
 8008130:	2a10      	cmp	r2, #16
 8008132:	d053      	beq.n	80081dc <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008134:	4a3d      	ldr	r2, [pc, #244]	; (800822c <HAL_RCC_OscConfig+0x428>)
 8008136:	2b02      	cmp	r3, #2
 8008138:	d138      	bne.n	80081ac <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 800813a:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800813c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800813e:	4013      	ands	r3, r2
 8008140:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008142:	f7fe fc75 	bl	8006a30 <HAL_GetTick>
 8008146:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008148:	04bf      	lsls	r7, r7, #18
 800814a:	682b      	ldr	r3, [r5, #0]
 800814c:	423b      	tst	r3, r7
 800814e:	d127      	bne.n	80081a0 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008150:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008152:	6a23      	ldr	r3, [r4, #32]
 8008154:	68ea      	ldr	r2, [r5, #12]
 8008156:	430b      	orrs	r3, r1
 8008158:	4935      	ldr	r1, [pc, #212]	; (8008230 <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800815a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800815c:	400a      	ands	r2, r1
 800815e:	4313      	orrs	r3, r2
 8008160:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008162:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008164:	4313      	orrs	r3, r2
 8008166:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008168:	4313      	orrs	r3, r2
 800816a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800816c:	0212      	lsls	r2, r2, #8
 800816e:	4313      	orrs	r3, r2
 8008170:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8008172:	2380      	movs	r3, #128	; 0x80
 8008174:	682a      	ldr	r2, [r5, #0]
 8008176:	045b      	lsls	r3, r3, #17
 8008178:	4313      	orrs	r3, r2
 800817a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800817c:	2380      	movs	r3, #128	; 0x80
 800817e:	68ea      	ldr	r2, [r5, #12]
 8008180:	055b      	lsls	r3, r3, #21
 8008182:	4313      	orrs	r3, r2
 8008184:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8008186:	f7fe fc53 	bl	8006a30 <HAL_GetTick>
 800818a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	4233      	tst	r3, r6
 8008190:	d000      	beq.n	8008194 <HAL_RCC_OscConfig+0x390>
 8008192:	e64e      	b.n	8007e32 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008194:	f7fe fc4c 	bl	8006a30 <HAL_GetTick>
 8008198:	1b00      	subs	r0, r0, r4
 800819a:	2802      	cmp	r0, #2
 800819c:	d9f6      	bls.n	800818c <HAL_RCC_OscConfig+0x388>
 800819e:	e673      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081a0:	f7fe fc46 	bl	8006a30 <HAL_GetTick>
 80081a4:	1b80      	subs	r0, r0, r6
 80081a6:	2802      	cmp	r0, #2
 80081a8:	d9cf      	bls.n	800814a <HAL_RCC_OscConfig+0x346>
 80081aa:	e66d      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_PLL_DISABLE();
 80081ac:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081ae:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80081b0:	4013      	ands	r3, r2
 80081b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80081b4:	f7fe fc3c 	bl	8006a30 <HAL_GetTick>
 80081b8:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081ba:	04b6      	lsls	r6, r6, #18
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	0018      	movs	r0, r3
 80081c0:	4030      	ands	r0, r6
 80081c2:	4233      	tst	r3, r6
 80081c4:	d104      	bne.n	80081d0 <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80081c6:	68eb      	ldr	r3, [r5, #12]
 80081c8:	4a1a      	ldr	r2, [pc, #104]	; (8008234 <HAL_RCC_OscConfig+0x430>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	60eb      	str	r3, [r5, #12]
 80081ce:	e65c      	b.n	8007e8a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081d0:	f7fe fc2e 	bl	8006a30 <HAL_GetTick>
 80081d4:	1b00      	subs	r0, r0, r4
 80081d6:	2802      	cmp	r0, #2
 80081d8:	d9f0      	bls.n	80081bc <HAL_RCC_OscConfig+0x3b8>
 80081da:	e655      	b.n	8007e88 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d100      	bne.n	80081e2 <HAL_RCC_OscConfig+0x3de>
 80081e0:	e639      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e2:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80081e4:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e6:	6a21      	ldr	r1, [r4, #32]
 80081e8:	401a      	ands	r2, r3
 80081ea:	428a      	cmp	r2, r1
 80081ec:	d000      	beq.n	80081f0 <HAL_RCC_OscConfig+0x3ec>
 80081ee:	e632      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081f0:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081f4:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f6:	428a      	cmp	r2, r1
 80081f8:	d000      	beq.n	80081fc <HAL_RCC_OscConfig+0x3f8>
 80081fa:	e62c      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081fc:	21fe      	movs	r1, #254	; 0xfe
 80081fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008200:	01c9      	lsls	r1, r1, #7
 8008202:	4019      	ands	r1, r3
 8008204:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008206:	4291      	cmp	r1, r2
 8008208:	d000      	beq.n	800820c <HAL_RCC_OscConfig+0x408>
 800820a:	e624      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800820c:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800820e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008210:	0392      	lsls	r2, r2, #14
 8008212:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008214:	428a      	cmp	r2, r1
 8008216:	d000      	beq.n	800821a <HAL_RCC_OscConfig+0x416>
 8008218:	e61d      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800821a:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800821c:	0f5b      	lsrs	r3, r3, #29
 800821e:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008220:	4293      	cmp	r3, r2
 8008222:	d100      	bne.n	8008226 <HAL_RCC_OscConfig+0x422>
 8008224:	e605      	b.n	8007e32 <HAL_RCC_OscConfig+0x2e>
 8008226:	e616      	b.n	8007e56 <HAL_RCC_OscConfig+0x52>
 8008228:	40021000 	.word	0x40021000
 800822c:	feffffff 	.word	0xfeffffff
 8008230:	1fc1808c 	.word	0x1fc1808c
 8008234:	effefffc 	.word	0xeffefffc

08008238 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008238:	2338      	movs	r3, #56	; 0x38
{
 800823a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800823c:	4c1d      	ldr	r4, [pc, #116]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800823e:	68a2      	ldr	r2, [r4, #8]
 8008240:	421a      	tst	r2, r3
 8008242:	d105      	bne.n	8008250 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008244:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008246:	481c      	ldr	r0, [pc, #112]	; (80082b8 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008248:	049b      	lsls	r3, r3, #18
 800824a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800824c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800824e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008250:	68a2      	ldr	r2, [r4, #8]
 8008252:	401a      	ands	r2, r3
 8008254:	2a08      	cmp	r2, #8
 8008256:	d027      	beq.n	80082a8 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008258:	68a2      	ldr	r2, [r4, #8]
 800825a:	401a      	ands	r2, r3
 800825c:	2a10      	cmp	r2, #16
 800825e:	d117      	bne.n	8008290 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008260:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008262:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008264:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008266:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008268:	0649      	lsls	r1, r1, #25
 800826a:	0f49      	lsrs	r1, r1, #29
 800826c:	326f      	adds	r2, #111	; 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800826e:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008270:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008272:	4015      	ands	r5, r2
    switch (pllsource)
 8008274:	079b      	lsls	r3, r3, #30
 8008276:	d109      	bne.n	800828c <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008278:	4810      	ldr	r0, [pc, #64]	; (80082bc <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800827a:	f7f7 ff6b 	bl	8000154 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800827e:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008280:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008282:	0f49      	lsrs	r1, r1, #29
 8008284:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8008286:	f7f7 ff65 	bl	8000154 <__udivsi3>
 800828a:	e7e0      	b.n	800824e <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800828c:	480a      	ldr	r0, [pc, #40]	; (80082b8 <HAL_RCC_GetSysClockFreq+0x80>)
 800828e:	e7f4      	b.n	800827a <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008290:	68a2      	ldr	r2, [r4, #8]
 8008292:	401a      	ands	r2, r3
 8008294:	2a20      	cmp	r2, #32
 8008296:	d009      	beq.n	80082ac <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008298:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800829a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800829c:	4013      	ands	r3, r2
 800829e:	2b18      	cmp	r3, #24
 80082a0:	d1d5      	bne.n	800824e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 80082a2:	20fa      	movs	r0, #250	; 0xfa
 80082a4:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 80082a6:	e7d2      	b.n	800824e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80082a8:	4804      	ldr	r0, [pc, #16]	; (80082bc <HAL_RCC_GetSysClockFreq+0x84>)
 80082aa:	e7d0      	b.n	800824e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80082ac:	2080      	movs	r0, #128	; 0x80
 80082ae:	0200      	lsls	r0, r0, #8
 80082b0:	e7cd      	b.n	800824e <HAL_RCC_GetSysClockFreq+0x16>
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	40021000 	.word	0x40021000
 80082b8:	00f42400 	.word	0x00f42400
 80082bc:	007a1200 	.word	0x007a1200

080082c0 <HAL_RCC_ClockConfig>:
{
 80082c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c2:	0004      	movs	r4, r0
 80082c4:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d101      	bne.n	80082ce <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80082ca:	2001      	movs	r0, #1
}
 80082cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082ce:	2707      	movs	r7, #7
 80082d0:	4e4a      	ldr	r6, [pc, #296]	; (80083fc <HAL_RCC_ClockConfig+0x13c>)
 80082d2:	6833      	ldr	r3, [r6, #0]
 80082d4:	403b      	ands	r3, r7
 80082d6:	428b      	cmp	r3, r1
 80082d8:	d32a      	bcc.n	8008330 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	0793      	lsls	r3, r2, #30
 80082de:	d43b      	bmi.n	8008358 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082e0:	07d2      	lsls	r2, r2, #31
 80082e2:	d448      	bmi.n	8008376 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082e4:	2707      	movs	r7, #7
 80082e6:	6833      	ldr	r3, [r6, #0]
 80082e8:	403b      	ands	r3, r7
 80082ea:	42ab      	cmp	r3, r5
 80082ec:	d90a      	bls.n	8008304 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ee:	6833      	ldr	r3, [r6, #0]
 80082f0:	43bb      	bics	r3, r7
 80082f2:	432b      	orrs	r3, r5
 80082f4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80082f6:	f7fe fb9b 	bl	8006a30 <HAL_GetTick>
 80082fa:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	403b      	ands	r3, r7
 8008300:	42ab      	cmp	r3, r5
 8008302:	d16b      	bne.n	80083dc <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	4d3e      	ldr	r5, [pc, #248]	; (8008400 <HAL_RCC_ClockConfig+0x140>)
 8008308:	075b      	lsls	r3, r3, #29
 800830a:	d46f      	bmi.n	80083ec <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800830c:	f7ff ff94 	bl	8008238 <HAL_RCC_GetSysClockFreq>
 8008310:	68ab      	ldr	r3, [r5, #8]
 8008312:	493c      	ldr	r1, [pc, #240]	; (8008404 <HAL_RCC_ClockConfig+0x144>)
 8008314:	051b      	lsls	r3, r3, #20
 8008316:	0f1b      	lsrs	r3, r3, #28
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	585b      	ldr	r3, [r3, r1]
 800831c:	211f      	movs	r1, #31
 800831e:	400b      	ands	r3, r1
 8008320:	40d8      	lsrs	r0, r3
 8008322:	4a39      	ldr	r2, [pc, #228]	; (8008408 <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 8008324:	4b39      	ldr	r3, [pc, #228]	; (800840c <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008326:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	f7fe fa45 	bl	80067b8 <HAL_InitTick>
 800832e:	e7cd      	b.n	80082cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008330:	6833      	ldr	r3, [r6, #0]
 8008332:	43bb      	bics	r3, r7
 8008334:	430b      	orrs	r3, r1
 8008336:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008338:	f7fe fb7a 	bl	8006a30 <HAL_GetTick>
 800833c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800833e:	6833      	ldr	r3, [r6, #0]
 8008340:	403b      	ands	r3, r7
 8008342:	42ab      	cmp	r3, r5
 8008344:	d0c9      	beq.n	80082da <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008346:	f7fe fb73 	bl	8006a30 <HAL_GetTick>
 800834a:	9b01      	ldr	r3, [sp, #4]
 800834c:	1ac0      	subs	r0, r0, r3
 800834e:	4b30      	ldr	r3, [pc, #192]	; (8008410 <HAL_RCC_ClockConfig+0x150>)
 8008350:	4298      	cmp	r0, r3
 8008352:	d9f4      	bls.n	800833e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8008354:	2003      	movs	r0, #3
 8008356:	e7b9      	b.n	80082cc <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008358:	4929      	ldr	r1, [pc, #164]	; (8008400 <HAL_RCC_ClockConfig+0x140>)
 800835a:	0753      	lsls	r3, r2, #29
 800835c:	d504      	bpl.n	8008368 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800835e:	23e0      	movs	r3, #224	; 0xe0
 8008360:	6888      	ldr	r0, [r1, #8]
 8008362:	01db      	lsls	r3, r3, #7
 8008364:	4303      	orrs	r3, r0
 8008366:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008368:	688b      	ldr	r3, [r1, #8]
 800836a:	482a      	ldr	r0, [pc, #168]	; (8008414 <HAL_RCC_ClockConfig+0x154>)
 800836c:	4003      	ands	r3, r0
 800836e:	68a0      	ldr	r0, [r4, #8]
 8008370:	4303      	orrs	r3, r0
 8008372:	608b      	str	r3, [r1, #8]
 8008374:	e7b4      	b.n	80082e0 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008376:	6862      	ldr	r2, [r4, #4]
 8008378:	4f21      	ldr	r7, [pc, #132]	; (8008400 <HAL_RCC_ClockConfig+0x140>)
 800837a:	2a01      	cmp	r2, #1
 800837c:	d119      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	039b      	lsls	r3, r3, #14
 8008382:	d5a2      	bpl.n	80082ca <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008384:	2107      	movs	r1, #7
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	438b      	bics	r3, r1
 800838a:	4313      	orrs	r3, r2
 800838c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800838e:	f7fe fb4f 	bl	8006a30 <HAL_GetTick>
 8008392:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008394:	2338      	movs	r3, #56	; 0x38
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	401a      	ands	r2, r3
 800839a:	6863      	ldr	r3, [r4, #4]
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	429a      	cmp	r2, r3
 80083a0:	d0a0      	beq.n	80082e4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083a2:	f7fe fb45 	bl	8006a30 <HAL_GetTick>
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	1ac0      	subs	r0, r0, r3
 80083aa:	4b19      	ldr	r3, [pc, #100]	; (8008410 <HAL_RCC_ClockConfig+0x150>)
 80083ac:	4298      	cmp	r0, r3
 80083ae:	d9f1      	bls.n	8008394 <HAL_RCC_ClockConfig+0xd4>
 80083b0:	e7d0      	b.n	8008354 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083b2:	2a02      	cmp	r2, #2
 80083b4:	d103      	bne.n	80083be <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	019b      	lsls	r3, r3, #6
 80083ba:	d4e3      	bmi.n	8008384 <HAL_RCC_ClockConfig+0xc4>
 80083bc:	e785      	b.n	80082ca <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80083be:	2a00      	cmp	r2, #0
 80083c0:	d103      	bne.n	80083ca <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	055b      	lsls	r3, r3, #21
 80083c6:	d4dd      	bmi.n	8008384 <HAL_RCC_ClockConfig+0xc4>
 80083c8:	e77f      	b.n	80082ca <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80083ca:	2302      	movs	r3, #2
 80083cc:	2a03      	cmp	r2, #3
 80083ce:	d103      	bne.n	80083d8 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083d2:	4219      	tst	r1, r3
 80083d4:	d1d6      	bne.n	8008384 <HAL_RCC_ClockConfig+0xc4>
 80083d6:	e778      	b.n	80082ca <HAL_RCC_ClockConfig+0xa>
 80083d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80083da:	e7fa      	b.n	80083d2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083dc:	f7fe fb28 	bl	8006a30 <HAL_GetTick>
 80083e0:	9b01      	ldr	r3, [sp, #4]
 80083e2:	1ac0      	subs	r0, r0, r3
 80083e4:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <HAL_RCC_ClockConfig+0x150>)
 80083e6:	4298      	cmp	r0, r3
 80083e8:	d988      	bls.n	80082fc <HAL_RCC_ClockConfig+0x3c>
 80083ea:	e7b3      	b.n	8008354 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80083ec:	68ab      	ldr	r3, [r5, #8]
 80083ee:	4a0a      	ldr	r2, [pc, #40]	; (8008418 <HAL_RCC_ClockConfig+0x158>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	68e2      	ldr	r2, [r4, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60ab      	str	r3, [r5, #8]
 80083f8:	e788      	b.n	800830c <HAL_RCC_ClockConfig+0x4c>
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	40022000 	.word	0x40022000
 8008400:	40021000 	.word	0x40021000
 8008404:	08011e1c 	.word	0x08011e1c
 8008408:	200000e4 	.word	0x200000e4
 800840c:	200000ec 	.word	0x200000ec
 8008410:	00001388 	.word	0x00001388
 8008414:	fffff0ff 	.word	0xfffff0ff
 8008418:	ffff8fff 	.word	0xffff8fff

0800841c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800841e:	4907      	ldr	r1, [pc, #28]	; (800843c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008420:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8008422:	4a07      	ldr	r2, [pc, #28]	; (8008440 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008424:	045b      	lsls	r3, r3, #17
 8008426:	0f5b      	lsrs	r3, r3, #29
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	585b      	ldr	r3, [r3, r1]
 800842c:	211f      	movs	r1, #31
 800842e:	6810      	ldr	r0, [r2, #0]
 8008430:	400b      	ands	r3, r1
 8008432:	40d8      	lsrs	r0, r3
}
 8008434:	4770      	bx	lr
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	40021000 	.word	0x40021000
 800843c:	08011e5c 	.word	0x08011e5c
 8008440:	200000e4 	.word	0x200000e4

08008444 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8008444:	2207      	movs	r2, #7
{
 8008446:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008448:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800844a:	4b09      	ldr	r3, [pc, #36]	; (8008470 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800844c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800844e:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008450:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008452:	4014      	ands	r4, r2
 8008454:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008456:	689c      	ldr	r4, [r3, #8]
 8008458:	402c      	ands	r4, r5
 800845a:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800845c:	24e0      	movs	r4, #224	; 0xe0
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	01e4      	lsls	r4, r4, #7
 8008462:	4023      	ands	r3, r4
 8008464:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008466:	4b03      	ldr	r3, [pc, #12]	; (8008474 <HAL_RCC_GetClockConfig+0x30>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4013      	ands	r3, r2
 800846c:	600b      	str	r3, [r1, #0]
}
 800846e:	bd30      	pop	{r4, r5, pc}
 8008470:	40021000 	.word	0x40021000
 8008474:	40022000 	.word	0x40022000

08008478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008478:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800847a:	6803      	ldr	r3, [r0, #0]
{
 800847c:	0005      	movs	r5, r0
 800847e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008480:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008482:	039b      	lsls	r3, r3, #14
 8008484:	d53b      	bpl.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008486:	2280      	movs	r2, #128	; 0x80
 8008488:	4c4d      	ldr	r4, [pc, #308]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800848a:	0552      	lsls	r2, r2, #21
 800848c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800848e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008490:	4213      	tst	r3, r2
 8008492:	d108      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008496:	4313      	orrs	r3, r2
 8008498:	63e3      	str	r3, [r4, #60]	; 0x3c
 800849a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800849c:	4013      	ands	r3, r2
 800849e:	9303      	str	r3, [sp, #12]
 80084a0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80084a2:	2301      	movs	r3, #1
 80084a4:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084a6:	2780      	movs	r7, #128	; 0x80
 80084a8:	4e46      	ldr	r6, [pc, #280]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80084aa:	007f      	lsls	r7, r7, #1
 80084ac:	6833      	ldr	r3, [r6, #0]
 80084ae:	433b      	orrs	r3, r7
 80084b0:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084b2:	f7fe fabd 	bl	8006a30 <HAL_GetTick>
 80084b6:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084b8:	6833      	ldr	r3, [r6, #0]
 80084ba:	423b      	tst	r3, r7
 80084bc:	d011      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80084c0:	23c0      	movs	r3, #192	; 0xc0
 80084c2:	0010      	movs	r0, r2
 80084c4:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80084c6:	69a9      	ldr	r1, [r5, #24]
 80084c8:	4e3f      	ldr	r6, [pc, #252]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084ca:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80084cc:	421a      	tst	r2, r3
 80084ce:	d001      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80084d0:	4288      	cmp	r0, r1
 80084d2:	d156      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80084d6:	69aa      	ldr	r2, [r5, #24]
 80084d8:	4033      	ands	r3, r6
 80084da:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084dc:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084de:	65e3      	str	r3, [r4, #92]	; 0x5c
 80084e0:	e006      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084e2:	f7fe faa5 	bl	8006a30 <HAL_GetTick>
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	1ac0      	subs	r0, r0, r3
 80084ea:	2802      	cmp	r0, #2
 80084ec:	d9e4      	bls.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ee:	2003      	movs	r0, #3
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084f0:	9b00      	ldr	r3, [sp, #0]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d103      	bne.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084f8:	4a34      	ldr	r2, [pc, #208]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80084fa:	4013      	ands	r3, r2
 80084fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084fe:	682a      	ldr	r2, [r5, #0]
 8008500:	07d3      	lsls	r3, r2, #31
 8008502:	d506      	bpl.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008504:	2403      	movs	r4, #3
 8008506:	492e      	ldr	r1, [pc, #184]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8008508:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800850a:	43a3      	bics	r3, r4
 800850c:	686c      	ldr	r4, [r5, #4]
 800850e:	4323      	orrs	r3, r4
 8008510:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008512:	0793      	lsls	r3, r2, #30
 8008514:	d506      	bpl.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008516:	240c      	movs	r4, #12
 8008518:	4929      	ldr	r1, [pc, #164]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800851a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800851c:	43a3      	bics	r3, r4
 800851e:	68ac      	ldr	r4, [r5, #8]
 8008520:	4323      	orrs	r3, r4
 8008522:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008524:	0693      	lsls	r3, r2, #26
 8008526:	d506      	bpl.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008528:	4925      	ldr	r1, [pc, #148]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800852a:	4c29      	ldr	r4, [pc, #164]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800852c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800852e:	4023      	ands	r3, r4
 8008530:	68ec      	ldr	r4, [r5, #12]
 8008532:	4323      	orrs	r3, r4
 8008534:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008536:	0453      	lsls	r3, r2, #17
 8008538:	d50f      	bpl.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800853a:	4921      	ldr	r1, [pc, #132]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800853c:	696c      	ldr	r4, [r5, #20]
 800853e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	089b      	lsrs	r3, r3, #2
 8008544:	4323      	orrs	r3, r4
 8008546:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	05db      	lsls	r3, r3, #23
 800854c:	429c      	cmp	r4, r3
 800854e:	d104      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008550:	2380      	movs	r3, #128	; 0x80
 8008552:	68cc      	ldr	r4, [r1, #12]
 8008554:	025b      	lsls	r3, r3, #9
 8008556:	4323      	orrs	r3, r4
 8008558:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800855a:	0512      	lsls	r2, r2, #20
 800855c:	d50f      	bpl.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800855e:	4a18      	ldr	r2, [pc, #96]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8008560:	4c1c      	ldr	r4, [pc, #112]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008562:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008564:	6929      	ldr	r1, [r5, #16]
 8008566:	4023      	ands	r3, r4
 8008568:	430b      	orrs	r3, r1
 800856a:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	01db      	lsls	r3, r3, #7
 8008570:	4299      	cmp	r1, r3
 8008572:	d104      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	68d1      	ldr	r1, [r2, #12]
 8008578:	025b      	lsls	r3, r3, #9
 800857a:	430b      	orrs	r3, r1
 800857c:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800857e:	b005      	add	sp, #20
 8008580:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8008582:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008584:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8008586:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008588:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 800858a:	0252      	lsls	r2, r2, #9
 800858c:	4302      	orrs	r2, r0
 800858e:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008590:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008592:	4811      	ldr	r0, [pc, #68]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008594:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008596:	4002      	ands	r2, r0
 8008598:	65e2      	str	r2, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 800859a:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800859c:	07db      	lsls	r3, r3, #31
 800859e:	d599      	bpl.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 80085a0:	f7fe fa46 	bl	8006a30 <HAL_GetTick>
 80085a4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085a6:	2202      	movs	r2, #2
 80085a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80085aa:	4213      	tst	r3, r2
 80085ac:	d000      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80085ae:	e791      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085b0:	f7fe fa3e 	bl	8006a30 <HAL_GetTick>
 80085b4:	4b09      	ldr	r3, [pc, #36]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80085b6:	1bc0      	subs	r0, r0, r7
 80085b8:	4298      	cmp	r0, r3
 80085ba:	d9f4      	bls.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80085bc:	e797      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	40021000 	.word	0x40021000
 80085c4:	40007000 	.word	0x40007000
 80085c8:	fffffcff 	.word	0xfffffcff
 80085cc:	efffffff 	.word	0xefffffff
 80085d0:	ffffcfff 	.word	0xffffcfff
 80085d4:	ffff3fff 	.word	0xffff3fff
 80085d8:	fffeffff 	.word	0xfffeffff
 80085dc:	00001388 	.word	0x00001388

080085e0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80085e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e2:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80085e4:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80085e6:	b085      	sub	sp, #20
 80085e8:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 80085ea:	ab02      	add	r3, sp, #8
 80085ec:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80085ee:	0004      	movs	r4, r0
 80085f0:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80085f2:	f7fe fa1d 	bl	8006a30 <HAL_GetTick>
 80085f6:	19ed      	adds	r5, r5, r7
 80085f8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80085fa:	f7fe fa19 	bl	8006a30 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80085fe:	2223      	movs	r2, #35	; 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008600:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8008602:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008604:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008606:	4b2a      	ldr	r3, [pc, #168]	; (80086b0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4353      	muls	r3, r2
 800860c:	0d1b      	lsrs	r3, r3, #20
 800860e:	436b      	muls	r3, r5
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8008610:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8008612:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8008614:	ab02      	add	r3, sp, #8
 8008616:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8008618:	688b      	ldr	r3, [r1, #8]
 800861a:	0018      	movs	r0, r3
 800861c:	4030      	ands	r0, r6
 800861e:	4233      	tst	r3, r6
 8008620:	d03b      	beq.n	800869a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008622:	23c0      	movs	r3, #192	; 0xc0
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	429e      	cmp	r6, r3
 8008628:	d104      	bne.n	8008634 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	7b1b      	ldrb	r3, [r3, #12]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg8);
 8008632:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8008634:	1c7b      	adds	r3, r7, #1
 8008636:	d0ef      	beq.n	8008618 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008638:	f7fe f9fa 	bl	8006a30 <HAL_GetTick>
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	1ac0      	subs	r0, r0, r3
 8008640:	42a8      	cmp	r0, r5
 8008642:	d32c      	bcc.n	800869e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008644:	21e0      	movs	r1, #224	; 0xe0
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	438a      	bics	r2, r1
 800864c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800864e:	2282      	movs	r2, #130	; 0x82
 8008650:	6861      	ldr	r1, [r4, #4]
 8008652:	0052      	lsls	r2, r2, #1
 8008654:	4291      	cmp	r1, r2
 8008656:	d10c      	bne.n	8008672 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8008658:	2180      	movs	r1, #128	; 0x80
 800865a:	68a2      	ldr	r2, [r4, #8]
 800865c:	0209      	lsls	r1, r1, #8
 800865e:	428a      	cmp	r2, r1
 8008660:	d003      	beq.n	800866a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008662:	2180      	movs	r1, #128	; 0x80
 8008664:	00c9      	lsls	r1, r1, #3
 8008666:	428a      	cmp	r2, r1
 8008668:	d103      	bne.n	8008672 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 800866a:	2140      	movs	r1, #64	; 0x40
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	438a      	bics	r2, r1
 8008670:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008672:	2180      	movs	r1, #128	; 0x80
 8008674:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008676:	0189      	lsls	r1, r1, #6
 8008678:	428a      	cmp	r2, r1
 800867a:	d106      	bne.n	800868a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 800867c:	6819      	ldr	r1, [r3, #0]
 800867e:	480d      	ldr	r0, [pc, #52]	; (80086b4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8008680:	4001      	ands	r1, r0
 8008682:	6019      	str	r1, [r3, #0]
 8008684:	6819      	ldr	r1, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800868a:	0023      	movs	r3, r4
 800868c:	2201      	movs	r2, #1
 800868e:	335d      	adds	r3, #93	; 0x5d
 8008690:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8008692:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8008694:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008696:	345c      	adds	r4, #92	; 0x5c
 8008698:	7023      	strb	r3, [r4, #0]
    }
  }

  return HAL_OK;
}
 800869a:	b005      	add	sp, #20
 800869c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800869e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80086a0:	1e5a      	subs	r2, r3, #1
 80086a2:	4193      	sbcs	r3, r2
 80086a4:	425b      	negs	r3, r3
 80086a6:	401d      	ands	r5, r3
      count--;
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	e7b0      	b.n	8008610 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	200000e4 	.word	0x200000e4
 80086b4:	ffffdfff 	.word	0xffffdfff

080086b8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80086b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ba:	000e      	movs	r6, r1
 80086bc:	b085      	sub	sp, #20
 80086be:	0015      	movs	r5, r2
 80086c0:	0004      	movs	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086c2:	f7fe f9b5 	bl	8006a30 <HAL_GetTick>
 80086c6:	19ad      	adds	r5, r5, r6
 80086c8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80086ca:	f7fe f9b1 	bl	8006a30 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ce:	2780      	movs	r7, #128	; 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086d0:	4b25      	ldr	r3, [pc, #148]	; (8008768 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80086d2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	015b      	lsls	r3, r3, #5
 80086d8:	0d1b      	lsrs	r3, r3, #20
 80086da:	436b      	muls	r3, r5
 80086dc:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	6893      	ldr	r3, [r2, #8]
 80086e2:	0018      	movs	r0, r3
 80086e4:	4038      	ands	r0, r7
 80086e6:	423b      	tst	r3, r7
 80086e8:	d032      	beq.n	8008750 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
    if (Timeout != HAL_MAX_DELAY)
 80086ea:	1c73      	adds	r3, r6, #1
 80086ec:	d0f8      	beq.n	80086e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086ee:	f7fe f99f 	bl	8006a30 <HAL_GetTick>
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	1ac0      	subs	r0, r0, r3
 80086f6:	42a8      	cmp	r0, r5
 80086f8:	d32c      	bcc.n	8008754 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086fa:	21e0      	movs	r1, #224	; 0xe0
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	438a      	bics	r2, r1
 8008702:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008704:	2282      	movs	r2, #130	; 0x82
 8008706:	6861      	ldr	r1, [r4, #4]
 8008708:	0052      	lsls	r2, r2, #1
 800870a:	4291      	cmp	r1, r2
 800870c:	d10c      	bne.n	8008728 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 800870e:	2180      	movs	r1, #128	; 0x80
 8008710:	68a2      	ldr	r2, [r4, #8]
 8008712:	0209      	lsls	r1, r1, #8
 8008714:	428a      	cmp	r2, r1
 8008716:	d003      	beq.n	8008720 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008718:	2180      	movs	r1, #128	; 0x80
 800871a:	00c9      	lsls	r1, r1, #3
 800871c:	428a      	cmp	r2, r1
 800871e:	d103      	bne.n	8008728 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 8008720:	2140      	movs	r1, #64	; 0x40
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	438a      	bics	r2, r1
 8008726:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008728:	2180      	movs	r1, #128	; 0x80
 800872a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800872c:	0189      	lsls	r1, r1, #6
 800872e:	428a      	cmp	r2, r1
 8008730:	d106      	bne.n	8008740 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	480d      	ldr	r0, [pc, #52]	; (800876c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8008736:	4001      	ands	r1, r0
 8008738:	6019      	str	r1, [r3, #0]
 800873a:	6819      	ldr	r1, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008740:	0023      	movs	r3, r4
 8008742:	2201      	movs	r2, #1
 8008744:	335d      	adds	r3, #93	; 0x5d
 8008746:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8008748:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800874a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800874c:	345c      	adds	r4, #92	; 0x5c
 800874e:	7023      	strb	r3, [r4, #0]
}
 8008750:	b005      	add	sp, #20
 8008752:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8008754:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8008756:	1e5a      	subs	r2, r3, #1
 8008758:	4193      	sbcs	r3, r2
 800875a:	425b      	negs	r3, r3
 800875c:	401d      	ands	r5, r3
      count--;
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	3b01      	subs	r3, #1
 8008762:	9303      	str	r3, [sp, #12]
 8008764:	e7bb      	b.n	80086de <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	200000e4 	.word	0x200000e4
 800876c:	ffffdfff 	.word	0xffffdfff

08008770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008770:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008772:	0013      	movs	r3, r2
{
 8008774:	000d      	movs	r5, r1
 8008776:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008778:	000a      	movs	r2, r1
 800877a:	21c0      	movs	r1, #192	; 0xc0
 800877c:	0149      	lsls	r1, r1, #5
{
 800877e:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008780:	f7ff ff2e 	bl	80085e0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008784:	2800      	cmp	r0, #0
 8008786:	d005      	beq.n	8008794 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008788:	2320      	movs	r3, #32
 800878a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800878c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800878e:	4313      	orrs	r3, r2
 8008790:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008792:	e00f      	b.n	80087b4 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008794:	0032      	movs	r2, r6
 8008796:	0029      	movs	r1, r5
 8008798:	0020      	movs	r0, r4
 800879a:	f7ff ff8d 	bl	80086b8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d1f2      	bne.n	8008788 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087a2:	21c0      	movs	r1, #192	; 0xc0
 80087a4:	0033      	movs	r3, r6
 80087a6:	002a      	movs	r2, r5
 80087a8:	0020      	movs	r0, r4
 80087aa:	00c9      	lsls	r1, r1, #3
 80087ac:	f7ff ff18 	bl	80085e0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d1e9      	bne.n	8008788 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080087b8 <HAL_SPI_Init>:
{
 80087b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ba:	0004      	movs	r4, r0
    return HAL_ERROR;
 80087bc:	2001      	movs	r0, #1
  if (hspi == NULL)
 80087be:	2c00      	cmp	r4, #0
 80087c0:	d066      	beq.n	8008890 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d164      	bne.n	8008892 <HAL_SPI_Init+0xda>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087c8:	2282      	movs	r2, #130	; 0x82
 80087ca:	6861      	ldr	r1, [r4, #4]
 80087cc:	0052      	lsls	r2, r2, #1
 80087ce:	4291      	cmp	r1, r2
 80087d0:	d000      	beq.n	80087d4 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087d2:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087d4:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80087d6:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087d8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80087da:	355d      	adds	r5, #93	; 0x5d
 80087dc:	782b      	ldrb	r3, [r5, #0]
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80087e4:	0023      	movs	r3, r4
 80087e6:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 80087e8:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80087ea:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80087ec:	f7fd fea2 	bl	8006534 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80087f0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80087f2:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80087f4:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80087f6:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087f8:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80087fa:	6813      	ldr	r3, [r2, #0]
 80087fc:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087fe:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 8008800:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008802:	00c9      	lsls	r1, r1, #3
 8008804:	2300      	movs	r3, #0
 8008806:	428e      	cmp	r6, r1
 8008808:	d847      	bhi.n	800889a <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800880a:	2080      	movs	r0, #128	; 0x80
 800880c:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800880e:	428e      	cmp	r6, r1
 8008810:	d000      	beq.n	8008814 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008812:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008814:	2182      	movs	r1, #130	; 0x82
 8008816:	2784      	movs	r7, #132	; 0x84
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	0049      	lsls	r1, r1, #1
 800881c:	400b      	ands	r3, r1
 800881e:	68a1      	ldr	r1, [r4, #8]
 8008820:	023f      	lsls	r7, r7, #8
 8008822:	4039      	ands	r1, r7
 8008824:	2702      	movs	r7, #2
 8008826:	430b      	orrs	r3, r1
 8008828:	6921      	ldr	r1, [r4, #16]
 800882a:	69a5      	ldr	r5, [r4, #24]
 800882c:	4039      	ands	r1, r7
 800882e:	430b      	orrs	r3, r1
 8008830:	2101      	movs	r1, #1
 8008832:	6967      	ldr	r7, [r4, #20]
 8008834:	400f      	ands	r7, r1
 8008836:	433b      	orrs	r3, r7
 8008838:	2780      	movs	r7, #128	; 0x80
 800883a:	00bf      	lsls	r7, r7, #2
 800883c:	402f      	ands	r7, r5
 800883e:	433b      	orrs	r3, r7
 8008840:	69e7      	ldr	r7, [r4, #28]
 8008842:	3137      	adds	r1, #55	; 0x37
 8008844:	400f      	ands	r7, r1
 8008846:	433b      	orrs	r3, r7
 8008848:	6a27      	ldr	r7, [r4, #32]
 800884a:	3148      	adds	r1, #72	; 0x48
 800884c:	400f      	ands	r7, r1
 800884e:	2180      	movs	r1, #128	; 0x80
 8008850:	433b      	orrs	r3, r7
 8008852:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8008854:	0189      	lsls	r1, r1, #6
 8008856:	400f      	ands	r7, r1
 8008858:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800885a:	2710      	movs	r7, #16
 800885c:	2108      	movs	r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800885e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008862:	0c2d      	lsrs	r5, r5, #16
 8008864:	403b      	ands	r3, r7
 8008866:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8008868:	400f      	ands	r7, r1
 800886a:	433b      	orrs	r3, r7
 800886c:	27f0      	movs	r7, #240	; 0xf0
 800886e:	013f      	lsls	r7, r7, #4
 8008870:	403e      	ands	r6, r7
 8008872:	4333      	orrs	r3, r6
 8008874:	2604      	movs	r6, #4
 8008876:	4035      	ands	r5, r6
 8008878:	432b      	orrs	r3, r5
 800887a:	4303      	orrs	r3, r0
 800887c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800887e:	69d3      	ldr	r3, [r2, #28]
 8008880:	4808      	ldr	r0, [pc, #32]	; (80088a4 <HAL_SPI_Init+0xec>)
 8008882:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008884:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008886:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8008888:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800888a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800888c:	345d      	adds	r4, #93	; 0x5d
 800888e:	7023      	strb	r3, [r4, #0]
}
 8008890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008892:	2300      	movs	r3, #0
 8008894:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008896:	6163      	str	r3, [r4, #20]
 8008898:	e79c      	b.n	80087d4 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800889a:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800889c:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800889e:	0109      	lsls	r1, r1, #4
 80088a0:	e7b5      	b.n	800880e <HAL_SPI_Init+0x56>
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	fffff7ff 	.word	0xfffff7ff

080088a8 <HAL_SPI_Transmit>:
{
 80088a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088aa:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80088ac:	0003      	movs	r3, r0
{
 80088ae:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80088b0:	335c      	adds	r3, #92	; 0x5c
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	781b      	ldrb	r3, [r3, #0]
{
 80088b6:	0004      	movs	r4, r0
 80088b8:	000d      	movs	r5, r1
 80088ba:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80088bc:	2002      	movs	r0, #2
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d100      	bne.n	80088c4 <HAL_SPI_Transmit+0x1c>
 80088c2:	e07d      	b.n	80089c0 <HAL_SPI_Transmit+0x118>
 80088c4:	2301      	movs	r3, #1
 80088c6:	9a01      	ldr	r2, [sp, #4]
 80088c8:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80088ca:	f7fe f8b1 	bl	8006a30 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80088ce:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80088d0:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80088d2:	335d      	adds	r3, #93	; 0x5d
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	b2d0      	uxtb	r0, r2
 80088d8:	2a01      	cmp	r2, #1
 80088da:	d000      	beq.n	80088de <HAL_SPI_Transmit+0x36>
 80088dc:	e09f      	b.n	8008a1e <HAL_SPI_Transmit+0x176>
  if ((pData == NULL) || (Size == 0U))
 80088de:	2d00      	cmp	r5, #0
 80088e0:	d068      	beq.n	80089b4 <HAL_SPI_Transmit+0x10c>
 80088e2:	2f00      	cmp	r7, #0
 80088e4:	d066      	beq.n	80089b4 <HAL_SPI_Transmit+0x10c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088e6:	3202      	adds	r2, #2
 80088e8:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ea:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 80088ec:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ee:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088f0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088f2:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80088f4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80088f6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 80088f8:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80088fa:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80088fc:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80088fe:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008900:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008902:	2380      	movs	r3, #128	; 0x80
 8008904:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8008906:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	4299      	cmp	r1, r3
 800890c:	d108      	bne.n	8008920 <HAL_SPI_Transmit+0x78>
    __HAL_SPI_DISABLE(hspi);
 800890e:	2140      	movs	r1, #64	; 0x40
 8008910:	6813      	ldr	r3, [r2, #0]
 8008912:	438b      	bics	r3, r1
 8008914:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8008916:	2380      	movs	r3, #128	; 0x80
 8008918:	6811      	ldr	r1, [r2, #0]
 800891a:	01db      	lsls	r3, r3, #7
 800891c:	430b      	orrs	r3, r1
 800891e:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008920:	2340      	movs	r3, #64	; 0x40
 8008922:	6811      	ldr	r1, [r2, #0]
 8008924:	4219      	tst	r1, r3
 8008926:	d102      	bne.n	800892e <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8008928:	6811      	ldr	r1, [r2, #0]
 800892a:	430b      	orrs	r3, r1
 800892c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800892e:	21e0      	movs	r1, #224	; 0xe0
 8008930:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008932:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008934:	00c9      	lsls	r1, r1, #3
 8008936:	4288      	cmp	r0, r1
 8008938:	d944      	bls.n	80089c4 <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <HAL_SPI_Transmit+0x9a>
 800893e:	2f01      	cmp	r7, #1
 8008940:	d107      	bne.n	8008952 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008942:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008944:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008946:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8008948:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800894a:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800894c:	3b01      	subs	r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008952:	2502      	movs	r5, #2
 8008954:	e00c      	b.n	8008970 <HAL_SPI_Transmit+0xc8>
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	6893      	ldr	r3, [r2, #8]
 800895a:	422b      	tst	r3, r5
 800895c:	d021      	beq.n	80089a2 <HAL_SPI_Transmit+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800895e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008960:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008962:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008964:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008966:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008968:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800896a:	3b01      	subs	r3, #1
 800896c:	b29b      	uxth	r3, r3
 800896e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8008970:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1ef      	bne.n	8008956 <HAL_SPI_Transmit+0xae>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008976:	0031      	movs	r1, r6
 8008978:	0020      	movs	r0, r4
 800897a:	9a00      	ldr	r2, [sp, #0]
 800897c:	f7ff fef8 	bl	8008770 <SPI_EndRxTxTransaction>
 8008980:	2800      	cmp	r0, #0
 8008982:	d149      	bne.n	8008a18 <HAL_SPI_Transmit+0x170>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_SPI_Transmit+0xf0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	9203      	str	r2, [sp, #12]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	9303      	str	r3, [sp, #12]
 8008996:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008998:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800899a:	1e43      	subs	r3, r0, #1
 800899c:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 800899e:	b2c0      	uxtb	r0, r0
error:
 80089a0:	e008      	b.n	80089b4 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089a2:	f7fe f845 	bl	8006a30 <HAL_GetTick>
 80089a6:	9b00      	ldr	r3, [sp, #0]
 80089a8:	1ac0      	subs	r0, r0, r3
 80089aa:	42b0      	cmp	r0, r6
 80089ac:	d3e0      	bcc.n	8008970 <HAL_SPI_Transmit+0xc8>
 80089ae:	1c73      	adds	r3, r6, #1
 80089b0:	d0de      	beq.n	8008970 <HAL_SPI_Transmit+0xc8>
          errorcode = HAL_TIMEOUT;
 80089b2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80089b4:	2301      	movs	r3, #1
 80089b6:	345d      	adds	r4, #93	; 0x5d
 80089b8:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80089ba:	2300      	movs	r3, #0
 80089bc:	9a01      	ldr	r2, [sp, #4]
 80089be:	7013      	strb	r3, [r2, #0]
}
 80089c0:	b005      	add	sp, #20
 80089c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <HAL_SPI_Transmit+0x124>
 80089c8:	2f01      	cmp	r7, #1
 80089ca:	d108      	bne.n	80089de <HAL_SPI_Transmit+0x136>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089cc:	782b      	ldrb	r3, [r5, #0]
 80089ce:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089d2:	3301      	adds	r3, #1
 80089d4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80089d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80089d8:	3b01      	subs	r3, #1
 80089da:	b29b      	uxth	r3, r3
 80089dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089de:	2502      	movs	r5, #2
 80089e0:	e00d      	b.n	80089fe <HAL_SPI_Transmit+0x156>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	422a      	tst	r2, r5
 80089e8:	d00d      	beq.n	8008a06 <HAL_SPI_Transmit+0x15e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80089ec:	7812      	ldrb	r2, [r2, #0]
 80089ee:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80089f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089f2:	3301      	adds	r3, #1
 80089f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80089f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80089f8:	3b01      	subs	r3, #1
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80089fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1ee      	bne.n	80089e2 <HAL_SPI_Transmit+0x13a>
 8008a04:	e7b7      	b.n	8008976 <HAL_SPI_Transmit+0xce>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a06:	f7fe f813 	bl	8006a30 <HAL_GetTick>
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	1ac0      	subs	r0, r0, r3
 8008a0e:	42b0      	cmp	r0, r6
 8008a10:	d3f5      	bcc.n	80089fe <HAL_SPI_Transmit+0x156>
 8008a12:	1c73      	adds	r3, r6, #1
 8008a14:	d0f3      	beq.n	80089fe <HAL_SPI_Transmit+0x156>
 8008a16:	e7cc      	b.n	80089b2 <HAL_SPI_Transmit+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a18:	2320      	movs	r3, #32
 8008a1a:	6623      	str	r3, [r4, #96]	; 0x60
 8008a1c:	e7b2      	b.n	8008984 <HAL_SPI_Transmit+0xdc>
    errorcode = HAL_BUSY;
 8008a1e:	2002      	movs	r0, #2
 8008a20:	e7c8      	b.n	80089b4 <HAL_SPI_Transmit+0x10c>
	...

08008a24 <HAL_SPI_TransmitReceive>:
{
 8008a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a26:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8008a28:	0003      	movs	r3, r0
 8008a2a:	335c      	adds	r3, #92	; 0x5c
{
 8008a2c:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8008a2e:	781a      	ldrb	r2, [r3, #0]
{
 8008a30:	0004      	movs	r4, r0
 8008a32:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8008a34:	2002      	movs	r0, #2
 8008a36:	2a01      	cmp	r2, #1
 8008a38:	d100      	bne.n	8008a3c <HAL_SPI_TransmitReceive+0x18>
 8008a3a:	e0aa      	b.n	8008b92 <HAL_SPI_TransmitReceive+0x16e>
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8008a40:	f7fd fff6 	bl	8006a30 <HAL_GetTick>
  tmp_state           = hspi->State;
 8008a44:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8008a46:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8008a48:	335d      	adds	r3, #93	; 0x5d
 8008a4a:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008a4c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8008a4e:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d00c      	beq.n	8008a6e <HAL_SPI_TransmitReceive+0x4a>
 8008a54:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8008a56:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	d000      	beq.n	8008a60 <HAL_SPI_TransmitReceive+0x3c>
 8008a5e:	e091      	b.n	8008b84 <HAL_SPI_TransmitReceive+0x160>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a60:	68a3      	ldr	r3, [r4, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d000      	beq.n	8008a68 <HAL_SPI_TransmitReceive+0x44>
 8008a66:	e08d      	b.n	8008b84 <HAL_SPI_TransmitReceive+0x160>
 8008a68:	2a04      	cmp	r2, #4
 8008a6a:	d000      	beq.n	8008a6e <HAL_SPI_TransmitReceive+0x4a>
 8008a6c:	e08a      	b.n	8008b84 <HAL_SPI_TransmitReceive+0x160>
    errorcode = HAL_ERROR;
 8008a6e:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a70:	2d00      	cmp	r5, #0
 8008a72:	d100      	bne.n	8008a76 <HAL_SPI_TransmitReceive+0x52>
 8008a74:	e086      	b.n	8008b84 <HAL_SPI_TransmitReceive+0x160>
 8008a76:	2f00      	cmp	r7, #0
 8008a78:	d100      	bne.n	8008a7c <HAL_SPI_TransmitReceive+0x58>
 8008a7a:	e083      	b.n	8008b84 <HAL_SPI_TransmitReceive+0x160>
 8008a7c:	2e00      	cmp	r6, #0
 8008a7e:	d100      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x5e>
 8008a80:	e080      	b.n	8008b84 <HAL_SPI_TransmitReceive+0x160>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a82:	0023      	movs	r3, r4
 8008a84:	335d      	adds	r3, #93	; 0x5d
 8008a86:	781a      	ldrb	r2, [r3, #0]
 8008a88:	2a04      	cmp	r2, #4
 8008a8a:	d001      	beq.n	8008a90 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a8c:	2205      	movs	r2, #5
 8008a8e:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8008a90:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a92:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8008a94:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a96:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a98:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008a9a:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a9c:	1da2      	adds	r2, r4, #6
 8008a9e:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aa0:	22e0      	movs	r2, #224	; 0xe0
 8008aa2:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8008aa4:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008aa6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008aa8:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008aaa:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 8008aac:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008aae:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ab0:	00d2      	lsls	r2, r2, #3
 8008ab2:	4290      	cmp	r0, r2
 8008ab4:	d930      	bls.n	8008b18 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	4f5c      	ldr	r7, [pc, #368]	; (8008c2c <HAL_SPI_TransmitReceive+0x208>)
 8008aba:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008abc:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008abe:	2240      	movs	r2, #64	; 0x40
 8008ac0:	681f      	ldr	r7, [r3, #0]
 8008ac2:	4217      	tst	r7, r2
 8008ac4:	d102      	bne.n	8008acc <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8008ac6:	681f      	ldr	r7, [r3, #0]
 8008ac8:	433a      	orrs	r2, r7
 8008aca:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008acc:	22e0      	movs	r2, #224	; 0xe0
 8008ace:	00d2      	lsls	r2, r2, #3
 8008ad0:	4290      	cmp	r0, r2
 8008ad2:	d95f      	bls.n	8008b94 <HAL_SPI_TransmitReceive+0x170>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ad4:	2900      	cmp	r1, #0
 8008ad6:	d001      	beq.n	8008adc <HAL_SPI_TransmitReceive+0xb8>
 8008ad8:	2e01      	cmp	r6, #1
 8008ada:	d107      	bne.n	8008aec <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008adc:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ade:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ae0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8008ae2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ae4:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008aec:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008aee:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008af0:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008af2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d114      	bne.n	8008b22 <HAL_SPI_TransmitReceive+0xfe>
 8008af8:	0023      	movs	r3, r4
 8008afa:	3308      	adds	r3, #8
 8008afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10f      	bne.n	8008b22 <HAL_SPI_TransmitReceive+0xfe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b02:	0020      	movs	r0, r4
 8008b04:	9a01      	ldr	r2, [sp, #4]
 8008b06:	9908      	ldr	r1, [sp, #32]
 8008b08:	f7ff fe32 	bl	8008770 <SPI_EndRxTxTransaction>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d039      	beq.n	8008b84 <HAL_SPI_TransmitReceive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b10:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8008b12:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b14:	6623      	str	r3, [r4, #96]	; 0x60
 8008b16:	e035      	b.n	8008b84 <HAL_SPI_TransmitReceive+0x160>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b18:	2280      	movs	r2, #128	; 0x80
 8008b1a:	685f      	ldr	r7, [r3, #4]
 8008b1c:	0152      	lsls	r2, r2, #5
 8008b1e:	433a      	orrs	r2, r7
 8008b20:	e7cc      	b.n	8008abc <HAL_SPI_TransmitReceive+0x98>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b22:	6820      	ldr	r0, [r4, #0]
 8008b24:	6883      	ldr	r3, [r0, #8]
 8008b26:	423b      	tst	r3, r7
 8008b28:	d00e      	beq.n	8008b48 <HAL_SPI_TransmitReceive+0x124>
 8008b2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <HAL_SPI_TransmitReceive+0x124>
 8008b30:	2d01      	cmp	r5, #1
 8008b32:	d109      	bne.n	8008b48 <HAL_SPI_TransmitReceive+0x124>
        txallowed = 0U;
 8008b34:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b38:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b3a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b3c:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b3e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008b40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b48:	6883      	ldr	r3, [r0, #8]
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	4031      	ands	r1, r6
 8008b4e:	4233      	tst	r3, r6
 8008b50:	d00e      	beq.n	8008b70 <HAL_SPI_TransmitReceive+0x14c>
 8008b52:	0022      	movs	r2, r4
 8008b54:	3208      	adds	r2, #8
 8008b56:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <HAL_SPI_TransmitReceive+0x14c>
        txallowed = 1U;
 8008b5c:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b5e:	68c0      	ldr	r0, [r0, #12]
 8008b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b62:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b64:	3302      	adds	r3, #2
 8008b66:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008b68:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b70:	f7fd ff5e 	bl	8006a30 <HAL_GetTick>
 8008b74:	9b01      	ldr	r3, [sp, #4]
 8008b76:	1ac0      	subs	r0, r0, r3
 8008b78:	9b08      	ldr	r3, [sp, #32]
 8008b7a:	4298      	cmp	r0, r3
 8008b7c:	d3b9      	bcc.n	8008af2 <HAL_SPI_TransmitReceive+0xce>
 8008b7e:	3301      	adds	r3, #1
 8008b80:	d0b7      	beq.n	8008af2 <HAL_SPI_TransmitReceive+0xce>
        errorcode = HAL_TIMEOUT;
 8008b82:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8008b84:	0023      	movs	r3, r4
 8008b86:	2201      	movs	r2, #1
 8008b88:	335d      	adds	r3, #93	; 0x5d
 8008b8a:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	345c      	adds	r4, #92	; 0x5c
 8008b90:	7023      	strb	r3, [r4, #0]
}
 8008b92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b94:	2900      	cmp	r1, #0
 8008b96:	d001      	beq.n	8008b9c <HAL_SPI_TransmitReceive+0x178>
 8008b98:	2e01      	cmp	r6, #1
 8008b9a:	d108      	bne.n	8008bae <HAL_SPI_TransmitReceive+0x18a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b9c:	782a      	ldrb	r2, [r5, #0]
 8008b9e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ba0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008ba6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008bae:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bb0:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bb2:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <HAL_SPI_TransmitReceive+0x1a0>
 8008bba:	0023      	movs	r3, r4
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d09e      	beq.n	8008b02 <HAL_SPI_TransmitReceive+0xde>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	423a      	tst	r2, r7
 8008bca:	d00f      	beq.n	8008bec <HAL_SPI_TransmitReceive+0x1c8>
 8008bcc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	d00c      	beq.n	8008bec <HAL_SPI_TransmitReceive+0x1c8>
 8008bd2:	2d01      	cmp	r5, #1
 8008bd4:	d10a      	bne.n	8008bec <HAL_SPI_TransmitReceive+0x1c8>
        txallowed = 0U;
 8008bd6:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8008bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008be0:	3301      	adds	r3, #1
 8008be2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008be4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	0011      	movs	r1, r2
 8008bf2:	4031      	ands	r1, r6
 8008bf4:	4232      	tst	r2, r6
 8008bf6:	d00f      	beq.n	8008c18 <HAL_SPI_TransmitReceive+0x1f4>
 8008bf8:	0022      	movs	r2, r4
 8008bfa:	3208      	adds	r2, #8
 8008bfc:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d00a      	beq.n	8008c18 <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 8008c02:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c04:	7b1b      	ldrb	r3, [r3, #12]
 8008c06:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008c08:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8008c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008c10:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8008c12:	3b01      	subs	r3, #1
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c18:	f7fd ff0a 	bl	8006a30 <HAL_GetTick>
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	1ac0      	subs	r0, r0, r3
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	4298      	cmp	r0, r3
 8008c24:	d3c6      	bcc.n	8008bb4 <HAL_SPI_TransmitReceive+0x190>
 8008c26:	3301      	adds	r3, #1
 8008c28:	d0c4      	beq.n	8008bb4 <HAL_SPI_TransmitReceive+0x190>
 8008c2a:	e7aa      	b.n	8008b82 <HAL_SPI_TransmitReceive+0x15e>
 8008c2c:	ffffefff 	.word	0xffffefff

08008c30 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c30:	0002      	movs	r2, r0
{
 8008c32:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8008c34:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8008c36:	323d      	adds	r2, #61	; 0x3d
 8008c38:	7811      	ldrb	r1, [r2, #0]
 8008c3a:	4281      	cmp	r1, r0
 8008c3c:	d11b      	bne.n	8008c76 <HAL_TIM_Base_Start_IT+0x46>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3e:	2102      	movs	r1, #2
 8008c40:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	4302      	orrs	r2, r0
 8008c48:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c4a:	4a0e      	ldr	r2, [pc, #56]	; (8008c84 <HAL_TIM_Base_Start_IT+0x54>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d005      	beq.n	8008c5c <HAL_TIM_Base_Start_IT+0x2c>
 8008c50:	4a0d      	ldr	r2, [pc, #52]	; (8008c88 <HAL_TIM_Base_Start_IT+0x58>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d002      	beq.n	8008c5c <HAL_TIM_Base_Start_IT+0x2c>
 8008c56:	4a0d      	ldr	r2, [pc, #52]	; (8008c8c <HAL_TIM_Base_Start_IT+0x5c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d10d      	bne.n	8008c78 <HAL_TIM_Base_Start_IT+0x48>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c5c:	689a      	ldr	r2, [r3, #8]
 8008c5e:	490c      	ldr	r1, [pc, #48]	; (8008c90 <HAL_TIM_Base_Start_IT+0x60>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8008c60:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c62:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c64:	2a06      	cmp	r2, #6
 8008c66:	d006      	beq.n	8008c76 <HAL_TIM_Base_Start_IT+0x46>
 8008c68:	3907      	subs	r1, #7
 8008c6a:	428a      	cmp	r2, r1
 8008c6c:	d003      	beq.n	8008c76 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 8008c6e:	2201      	movs	r2, #1
 8008c70:	6819      	ldr	r1, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	601a      	str	r2, [r3, #0]
}
 8008c76:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	4302      	orrs	r2, r0
 8008c7c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e7f9      	b.n	8008c76 <HAL_TIM_Base_Start_IT+0x46>
 8008c82:	46c0      	nop			; (mov r8, r8)
 8008c84:	40012c00 	.word	0x40012c00
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40014000 	.word	0x40014000
 8008c90:	00010007 	.word	0x00010007

08008c94 <HAL_TIM_OC_DelayElapsedCallback>:
 8008c94:	4770      	bx	lr

08008c96 <HAL_TIM_IC_CaptureCallback>:
 8008c96:	4770      	bx	lr

08008c98 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008c98:	4770      	bx	lr

08008c9a <HAL_TIM_TriggerCallback>:
 8008c9a:	4770      	bx	lr

08008c9c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	6803      	ldr	r3, [r0, #0]
{
 8008ca0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ca2:	6919      	ldr	r1, [r3, #16]
{
 8008ca4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ca6:	4211      	tst	r1, r2
 8008ca8:	d00e      	beq.n	8008cc8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008caa:	68d9      	ldr	r1, [r3, #12]
 8008cac:	4211      	tst	r1, r2
 8008cae:	d00b      	beq.n	8008cc8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cb0:	3a05      	subs	r2, #5
 8008cb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cb4:	3204      	adds	r2, #4
 8008cb6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	079b      	lsls	r3, r3, #30
 8008cbc:	d100      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x24>
 8008cbe:	e086      	b.n	8008dce <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cc0:	f7ff ffe9 	bl	8008c96 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cc8:	2204      	movs	r2, #4
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	6919      	ldr	r1, [r3, #16]
 8008cce:	4211      	tst	r1, r2
 8008cd0:	d011      	beq.n	8008cf6 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cd2:	68d9      	ldr	r1, [r3, #12]
 8008cd4:	4211      	tst	r1, r2
 8008cd6:	d00e      	beq.n	8008cf6 <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cd8:	3a09      	subs	r2, #9
 8008cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cdc:	3207      	adds	r2, #7
 8008cde:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ce0:	699a      	ldr	r2, [r3, #24]
 8008ce2:	23c0      	movs	r3, #192	; 0xc0
 8008ce4:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ce8:	421a      	tst	r2, r3
 8008cea:	d100      	bne.n	8008cee <HAL_TIM_IRQHandler+0x52>
 8008cec:	e075      	b.n	8008dda <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8008cee:	f7ff ffd2 	bl	8008c96 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cf6:	2208      	movs	r2, #8
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	6919      	ldr	r1, [r3, #16]
 8008cfc:	4211      	tst	r1, r2
 8008cfe:	d00e      	beq.n	8008d1e <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d00:	68d9      	ldr	r1, [r3, #12]
 8008d02:	4211      	tst	r1, r2
 8008d04:	d00b      	beq.n	8008d1e <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d06:	3a11      	subs	r2, #17
 8008d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d0a:	320d      	adds	r2, #13
 8008d0c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d0e:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d10:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d12:	079b      	lsls	r3, r3, #30
 8008d14:	d067      	beq.n	8008de6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d16:	f7ff ffbe 	bl	8008c96 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d1e:	2210      	movs	r2, #16
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	6919      	ldr	r1, [r3, #16]
 8008d24:	4211      	tst	r1, r2
 8008d26:	d010      	beq.n	8008d4a <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d28:	68d9      	ldr	r1, [r3, #12]
 8008d2a:	4211      	tst	r1, r2
 8008d2c:	d00d      	beq.n	8008d4a <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d2e:	3a21      	subs	r2, #33	; 0x21
 8008d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d32:	3219      	adds	r2, #25
 8008d34:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d36:	69da      	ldr	r2, [r3, #28]
 8008d38:	23c0      	movs	r3, #192	; 0xc0
 8008d3a:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d3c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d3e:	421a      	tst	r2, r3
 8008d40:	d057      	beq.n	8008df2 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d42:	f7ff ffa8 	bl	8008c96 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d46:	2300      	movs	r3, #0
 8008d48:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	6919      	ldr	r1, [r3, #16]
 8008d50:	4211      	tst	r1, r2
 8008d52:	d007      	beq.n	8008d64 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d54:	68d9      	ldr	r1, [r3, #12]
 8008d56:	4211      	tst	r1, r2
 8008d58:	d004      	beq.n	8008d64 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d5a:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d5c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d60:	f7fb fffa 	bl	8004d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d64:	2280      	movs	r2, #128	; 0x80
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	6919      	ldr	r1, [r3, #16]
 8008d6a:	4211      	tst	r1, r2
 8008d6c:	d008      	beq.n	8008d80 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d6e:	68d9      	ldr	r1, [r3, #12]
 8008d70:	4211      	tst	r1, r2
 8008d72:	d005      	beq.n	8008d80 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d74:	3a02      	subs	r2, #2
 8008d76:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d78:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008d7c:	f000 f8eb 	bl	8008f56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	05d2      	lsls	r2, r2, #23
 8008d86:	d507      	bpl.n	8008d98 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	0612      	lsls	r2, r2, #24
 8008d8c:	d504      	bpl.n	8008d98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d8e:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d90:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008d94:	f000 f8e0 	bl	8008f58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d98:	2240      	movs	r2, #64	; 0x40
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	6919      	ldr	r1, [r3, #16]
 8008d9e:	4211      	tst	r1, r2
 8008da0:	d007      	beq.n	8008db2 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008da2:	68d9      	ldr	r1, [r3, #12]
 8008da4:	4211      	tst	r1, r2
 8008da6:	d004      	beq.n	8008db2 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008da8:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008daa:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008dae:	f7ff ff74 	bl	8008c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008db2:	2220      	movs	r2, #32
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	6919      	ldr	r1, [r3, #16]
 8008db8:	4211      	tst	r1, r2
 8008dba:	d007      	beq.n	8008dcc <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dbc:	68d9      	ldr	r1, [r3, #12]
 8008dbe:	4211      	tst	r1, r2
 8008dc0:	d004      	beq.n	8008dcc <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dc2:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dc4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008dc8:	f000 f8c4 	bl	8008f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dcc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dce:	f7ff ff61 	bl	8008c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd2:	0020      	movs	r0, r4
 8008dd4:	f7ff ff60 	bl	8008c98 <HAL_TIM_PWM_PulseFinishedCallback>
 8008dd8:	e774      	b.n	8008cc4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dda:	f7ff ff5b 	bl	8008c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dde:	0020      	movs	r0, r4
 8008de0:	f7ff ff5a 	bl	8008c98 <HAL_TIM_PWM_PulseFinishedCallback>
 8008de4:	e785      	b.n	8008cf2 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de6:	f7ff ff55 	bl	8008c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dea:	0020      	movs	r0, r4
 8008dec:	f7ff ff54 	bl	8008c98 <HAL_TIM_PWM_PulseFinishedCallback>
 8008df0:	e793      	b.n	8008d1a <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df2:	f7ff ff4f 	bl	8008c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df6:	0020      	movs	r0, r4
 8008df8:	f7ff ff4e 	bl	8008c98 <HAL_TIM_PWM_PulseFinishedCallback>
 8008dfc:	e7a3      	b.n	8008d46 <HAL_TIM_IRQHandler+0xaa>
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	fffffeff 	.word	0xfffffeff

08008e04 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e04:	4a1c      	ldr	r2, [pc, #112]	; (8008e78 <TIM_Base_SetConfig+0x74>)
{
 8008e06:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8008e08:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e0a:	4290      	cmp	r0, r2
 8008e0c:	d002      	beq.n	8008e14 <TIM_Base_SetConfig+0x10>
 8008e0e:	4c1b      	ldr	r4, [pc, #108]	; (8008e7c <TIM_Base_SetConfig+0x78>)
 8008e10:	42a0      	cmp	r0, r4
 8008e12:	d108      	bne.n	8008e26 <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e14:	2470      	movs	r4, #112	; 0x70
 8008e16:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8008e18:	684c      	ldr	r4, [r1, #4]
 8008e1a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e1c:	4290      	cmp	r0, r2
 8008e1e:	d00e      	beq.n	8008e3e <TIM_Base_SetConfig+0x3a>
 8008e20:	4c16      	ldr	r4, [pc, #88]	; (8008e7c <TIM_Base_SetConfig+0x78>)
 8008e22:	42a0      	cmp	r0, r4
 8008e24:	d00b      	beq.n	8008e3e <TIM_Base_SetConfig+0x3a>
 8008e26:	4c16      	ldr	r4, [pc, #88]	; (8008e80 <TIM_Base_SetConfig+0x7c>)
 8008e28:	42a0      	cmp	r0, r4
 8008e2a:	d008      	beq.n	8008e3e <TIM_Base_SetConfig+0x3a>
 8008e2c:	4c15      	ldr	r4, [pc, #84]	; (8008e84 <TIM_Base_SetConfig+0x80>)
 8008e2e:	42a0      	cmp	r0, r4
 8008e30:	d005      	beq.n	8008e3e <TIM_Base_SetConfig+0x3a>
 8008e32:	4c15      	ldr	r4, [pc, #84]	; (8008e88 <TIM_Base_SetConfig+0x84>)
 8008e34:	42a0      	cmp	r0, r4
 8008e36:	d002      	beq.n	8008e3e <TIM_Base_SetConfig+0x3a>
 8008e38:	4c14      	ldr	r4, [pc, #80]	; (8008e8c <TIM_Base_SetConfig+0x88>)
 8008e3a:	42a0      	cmp	r0, r4
 8008e3c:	d103      	bne.n	8008e46 <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e3e:	4c14      	ldr	r4, [pc, #80]	; (8008e90 <TIM_Base_SetConfig+0x8c>)
 8008e40:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e42:	68cb      	ldr	r3, [r1, #12]
 8008e44:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e46:	2480      	movs	r4, #128	; 0x80
 8008e48:	43a3      	bics	r3, r4
 8008e4a:	694c      	ldr	r4, [r1, #20]
 8008e4c:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8008e4e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e50:	688b      	ldr	r3, [r1, #8]
 8008e52:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e54:	680b      	ldr	r3, [r1, #0]
 8008e56:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e58:	4290      	cmp	r0, r2
 8008e5a:	d008      	beq.n	8008e6e <TIM_Base_SetConfig+0x6a>
 8008e5c:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <TIM_Base_SetConfig+0x80>)
 8008e5e:	4298      	cmp	r0, r3
 8008e60:	d005      	beq.n	8008e6e <TIM_Base_SetConfig+0x6a>
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <TIM_Base_SetConfig+0x84>)
 8008e64:	4298      	cmp	r0, r3
 8008e66:	d002      	beq.n	8008e6e <TIM_Base_SetConfig+0x6a>
 8008e68:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <TIM_Base_SetConfig+0x88>)
 8008e6a:	4298      	cmp	r0, r3
 8008e6c:	d101      	bne.n	8008e72 <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e6e:	690b      	ldr	r3, [r1, #16]
 8008e70:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e72:	2301      	movs	r3, #1
 8008e74:	6143      	str	r3, [r0, #20]
}
 8008e76:	bd10      	pop	{r4, pc}
 8008e78:	40012c00 	.word	0x40012c00
 8008e7c:	40000400 	.word	0x40000400
 8008e80:	40002000 	.word	0x40002000
 8008e84:	40014000 	.word	0x40014000
 8008e88:	40014400 	.word	0x40014400
 8008e8c:	40014800 	.word	0x40014800
 8008e90:	fffffcff 	.word	0xfffffcff

08008e94 <HAL_TIM_Base_Init>:
{
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	0004      	movs	r4, r0
    return HAL_ERROR;
 8008e98:	2001      	movs	r0, #1
  if (htim == NULL)
 8008e9a:	2c00      	cmp	r4, #0
 8008e9c:	d023      	beq.n	8008ee6 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008e9e:	0025      	movs	r5, r4
 8008ea0:	353d      	adds	r5, #61	; 0x3d
 8008ea2:	782b      	ldrb	r3, [r5, #0]
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8008eaa:	0023      	movs	r3, r4
 8008eac:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008eae:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8008eb0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8008eb2:	f7fd fb6d 	bl	8006590 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eba:	6820      	ldr	r0, [r4, #0]
 8008ebc:	1d21      	adds	r1, r4, #4
 8008ebe:	f7ff ffa1 	bl	8008e04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ec2:	0022      	movs	r2, r4
 8008ec4:	2301      	movs	r3, #1
  return HAL_OK;
 8008ec6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ec8:	3248      	adds	r2, #72	; 0x48
 8008eca:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ecc:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ece:	3a0a      	subs	r2, #10
 8008ed0:	7013      	strb	r3, [r2, #0]
 8008ed2:	7053      	strb	r3, [r2, #1]
 8008ed4:	7093      	strb	r3, [r2, #2]
 8008ed6:	70d3      	strb	r3, [r2, #3]
 8008ed8:	7113      	strb	r3, [r2, #4]
 8008eda:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008edc:	7193      	strb	r3, [r2, #6]
 8008ede:	71d3      	strb	r3, [r2, #7]
 8008ee0:	7213      	strb	r3, [r2, #8]
 8008ee2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008ee4:	702b      	strb	r3, [r5, #0]
}
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}

08008ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eea:	0004      	movs	r4, r0
 8008eec:	2202      	movs	r2, #2
 8008eee:	343c      	adds	r4, #60	; 0x3c
 8008ef0:	7825      	ldrb	r5, [r4, #0]
{
 8008ef2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8008ef4:	0010      	movs	r0, r2
 8008ef6:	2d01      	cmp	r5, #1
 8008ef8:	d022      	beq.n	8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008efa:	001d      	movs	r5, r3
 8008efc:	353d      	adds	r5, #61	; 0x3d
 8008efe:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f00:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f02:	4e10      	ldr	r6, [pc, #64]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8008f04:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008f06:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f08:	42b2      	cmp	r2, r6
 8008f0a:	d103      	bne.n	8008f14 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f0c:	4f0e      	ldr	r7, [pc, #56]	; (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8008f0e:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f10:	684f      	ldr	r7, [r1, #4]
 8008f12:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f14:	2770      	movs	r7, #112	; 0x70
 8008f16:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f18:	680f      	ldr	r7, [r1, #0]
 8008f1a:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f1c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f1e:	42b2      	cmp	r2, r6
 8008f20:	d005      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f22:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d002      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f28:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d104      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f2e:	2380      	movs	r3, #128	; 0x80
 8008f30:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f32:	688b      	ldr	r3, [r1, #8]
 8008f34:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f36:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8008f3a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008f3c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8008f3e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8008f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	40012c00 	.word	0x40012c00
 8008f48:	ff0fffff 	.word	0xff0fffff
 8008f4c:	40000400 	.word	0x40000400
 8008f50:	40014000 	.word	0x40014000

08008f54 <HAL_TIMEx_CommutCallback>:
 8008f54:	4770      	bx	lr

08008f56 <HAL_TIMEx_BreakCallback>:
 8008f56:	4770      	bx	lr

08008f58 <HAL_TIMEx_Break2Callback>:
 8008f58:	4770      	bx	lr
	...

08008f5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f5c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f5e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f62:	2201      	movs	r2, #1
 8008f64:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f68:	25c0      	movs	r5, #192	; 0xc0
 8008f6a:	6801      	ldr	r1, [r0, #0]
 8008f6c:	680b      	ldr	r3, [r1, #0]
 8008f6e:	43ab      	bics	r3, r5
 8008f70:	600b      	str	r3, [r1, #0]
 8008f72:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f76:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f7a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f7e:	6802      	ldr	r2, [r0, #0]
 8008f80:	4c04      	ldr	r4, [pc, #16]	; (8008f94 <UART_EndTxTransfer+0x38>)
 8008f82:	6893      	ldr	r3, [r2, #8]
 8008f84:	4023      	ands	r3, r4
 8008f86:	6093      	str	r3, [r2, #8]
 8008f88:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f8c:	2320      	movs	r3, #32
 8008f8e:	3088      	adds	r0, #136	; 0x88
 8008f90:	6003      	str	r3, [r0, #0]
}
 8008f92:	bd30      	pop	{r4, r5, pc}
 8008f94:	ff7fffff 	.word	0xff7fffff

08008f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f98:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f9a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fa4:	6801      	ldr	r1, [r0, #0]
 8008fa6:	4d13      	ldr	r5, [pc, #76]	; (8008ff4 <UART_EndRxTransfer+0x5c>)
 8008fa8:	680b      	ldr	r3, [r1, #0]
 8008faa:	402b      	ands	r3, r5
 8008fac:	600b      	str	r3, [r1, #0]
 8008fae:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fba:	6802      	ldr	r2, [r0, #0]
 8008fbc:	4c0e      	ldr	r4, [pc, #56]	; (8008ff8 <UART_EndRxTransfer+0x60>)
 8008fbe:	6893      	ldr	r3, [r2, #8]
 8008fc0:	4023      	ands	r3, r4
 8008fc2:	6093      	str	r3, [r2, #8]
 8008fc4:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d10a      	bne.n	8008fe4 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd2:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd6:	2410      	movs	r4, #16
 8008fd8:	6802      	ldr	r2, [r0, #0]
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	43a3      	bics	r3, r4
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	0003      	movs	r3, r0
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	338c      	adds	r3, #140	; 0x8c
 8008fea:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fec:	2300      	movs	r3, #0
 8008fee:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ff0:	6743      	str	r3, [r0, #116]	; 0x74
}
 8008ff2:	bd30      	pop	{r4, r5, pc}
 8008ff4:	fffffedf 	.word	0xfffffedf
 8008ff8:	effffffe 	.word	0xeffffffe

08008ffc <HAL_UART_RxHalfCpltCallback>:
 8008ffc:	4770      	bx	lr

08008ffe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ffe:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009000:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009002:	0023      	movs	r3, r4
 8009004:	3388      	adds	r3, #136	; 0x88
 8009006:	681a      	ldr	r2, [r3, #0]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009008:	685d      	ldr	r5, [r3, #4]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	061b      	lsls	r3, r3, #24
 8009010:	d508      	bpl.n	8009024 <UART_DMAError+0x26>
 8009012:	2a21      	cmp	r2, #33	; 0x21
 8009014:	d106      	bne.n	8009024 <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009016:	0023      	movs	r3, r4
 8009018:	2200      	movs	r2, #0
 800901a:	3356      	adds	r3, #86	; 0x56
    UART_EndTxTransfer(huart);
 800901c:	0020      	movs	r0, r4
    huart->TxXferCount = 0U;
 800901e:	801a      	strh	r2, [r3, #0]
    UART_EndTxTransfer(huart);
 8009020:	f7ff ff9c 	bl	8008f5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	065b      	lsls	r3, r3, #25
 800902a:	d508      	bpl.n	800903e <UART_DMAError+0x40>
 800902c:	2d22      	cmp	r5, #34	; 0x22
 800902e:	d106      	bne.n	800903e <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009030:	0023      	movs	r3, r4
 8009032:	2200      	movs	r2, #0
 8009034:	335e      	adds	r3, #94	; 0x5e
    UART_EndRxTransfer(huart);
 8009036:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8009038:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800903a:	f7ff ffad 	bl	8008f98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800903e:	0022      	movs	r2, r4
 8009040:	2310      	movs	r3, #16
 8009042:	3290      	adds	r2, #144	; 0x90
 8009044:	6811      	ldr	r1, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009046:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009048:	430b      	orrs	r3, r1
 800904a:	6013      	str	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800904c:	f7fb fe48 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009050:	bd70      	pop	{r4, r5, r6, pc}

08009052 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009052:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	0002      	movs	r2, r0
{
 8009058:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800905a:	325e      	adds	r2, #94	; 0x5e
 800905c:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800905e:	3a08      	subs	r2, #8
 8009060:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009062:	f7fb fe3d 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009066:	bd10      	pop	{r4, pc}

08009068 <HAL_UARTEx_RxEventCallback>:
}
 8009068:	4770      	bx	lr
	...

0800906c <HAL_UART_IRQHandler>:
{
 800906c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800906e:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009070:	4dc1      	ldr	r5, [pc, #772]	; (8009378 <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009072:	69cb      	ldr	r3, [r1, #28]
{
 8009074:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009076:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009078:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 800907a:	422b      	tst	r3, r5
 800907c:	d110      	bne.n	80090a0 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800907e:	2520      	movs	r5, #32
 8009080:	422b      	tst	r3, r5
 8009082:	d100      	bne.n	8009086 <HAL_UART_IRQHandler+0x1a>
 8009084:	e09b      	b.n	80091be <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009086:	2680      	movs	r6, #128	; 0x80
 8009088:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800908a:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800908c:	4006      	ands	r6, r0
 800908e:	4335      	orrs	r5, r6
 8009090:	d100      	bne.n	8009094 <HAL_UART_IRQHandler+0x28>
 8009092:	e094      	b.n	80091be <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 8009094:	6f63      	ldr	r3, [r4, #116]	; 0x74
      huart->TxISR(huart);
 8009096:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8009098:	2b00      	cmp	r3, #0
 800909a:	d000      	beq.n	800909e <HAL_UART_IRQHandler+0x32>
 800909c:	e085      	b.n	80091aa <HAL_UART_IRQHandler+0x13e>
 800909e:	e085      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090a0:	4db6      	ldr	r5, [pc, #728]	; (800937c <HAL_UART_IRQHandler+0x310>)
 80090a2:	4005      	ands	r5, r0
 80090a4:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090a6:	4db6      	ldr	r5, [pc, #728]	; (8009380 <HAL_UART_IRQHandler+0x314>)
 80090a8:	9e00      	ldr	r6, [sp, #0]
 80090aa:	4015      	ands	r5, r2
 80090ac:	4335      	orrs	r5, r6
 80090ae:	d100      	bne.n	80090b2 <HAL_UART_IRQHandler+0x46>
 80090b0:	e085      	b.n	80091be <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090b2:	0025      	movs	r5, r4
 80090b4:	2601      	movs	r6, #1
 80090b6:	3590      	adds	r5, #144	; 0x90
 80090b8:	4233      	tst	r3, r6
 80090ba:	d005      	beq.n	80090c8 <HAL_UART_IRQHandler+0x5c>
 80090bc:	05d7      	lsls	r7, r2, #23
 80090be:	d503      	bpl.n	80090c8 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090c0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090c2:	682f      	ldr	r7, [r5, #0]
 80090c4:	433e      	orrs	r6, r7
 80090c6:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090c8:	2602      	movs	r6, #2
 80090ca:	4233      	tst	r3, r6
 80090cc:	d00c      	beq.n	80090e8 <HAL_UART_IRQHandler+0x7c>
 80090ce:	07c7      	lsls	r7, r0, #31
 80090d0:	d50a      	bpl.n	80090e8 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090d2:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090d4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090d6:	3790      	adds	r7, #144	; 0x90
 80090d8:	683e      	ldr	r6, [r7, #0]
 80090da:	9701      	str	r7, [sp, #4]
 80090dc:	46b4      	mov	ip, r6
 80090de:	2604      	movs	r6, #4
 80090e0:	4667      	mov	r7, ip
 80090e2:	433e      	orrs	r6, r7
 80090e4:	9f01      	ldr	r7, [sp, #4]
 80090e6:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090e8:	2604      	movs	r6, #4
 80090ea:	4233      	tst	r3, r6
 80090ec:	d00c      	beq.n	8009108 <HAL_UART_IRQHandler+0x9c>
 80090ee:	07c7      	lsls	r7, r0, #31
 80090f0:	d50a      	bpl.n	8009108 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090f2:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090f4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090f6:	3790      	adds	r7, #144	; 0x90
 80090f8:	683e      	ldr	r6, [r7, #0]
 80090fa:	9701      	str	r7, [sp, #4]
 80090fc:	46b4      	mov	ip, r6
 80090fe:	2602      	movs	r6, #2
 8009100:	4667      	mov	r7, ip
 8009102:	433e      	orrs	r6, r7
 8009104:	9f01      	ldr	r7, [sp, #4]
 8009106:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009108:	2608      	movs	r6, #8
 800910a:	46b4      	mov	ip, r6
 800910c:	4233      	tst	r3, r6
 800910e:	d009      	beq.n	8009124 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009110:	2720      	movs	r7, #32
 8009112:	9e00      	ldr	r6, [sp, #0]
 8009114:	4017      	ands	r7, r2
 8009116:	4337      	orrs	r7, r6
 8009118:	d004      	beq.n	8009124 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800911a:	4666      	mov	r6, ip
 800911c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800911e:	682f      	ldr	r7, [r5, #0]
 8009120:	433e      	orrs	r6, r7
 8009122:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009124:	2680      	movs	r6, #128	; 0x80
 8009126:	0136      	lsls	r6, r6, #4
 8009128:	4233      	tst	r3, r6
 800912a:	d006      	beq.n	800913a <HAL_UART_IRQHandler+0xce>
 800912c:	0157      	lsls	r7, r2, #5
 800912e:	d504      	bpl.n	800913a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009130:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009132:	2120      	movs	r1, #32
 8009134:	682e      	ldr	r6, [r5, #0]
 8009136:	4331      	orrs	r1, r6
 8009138:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800913a:	6829      	ldr	r1, [r5, #0]
 800913c:	2900      	cmp	r1, #0
 800913e:	d035      	beq.n	80091ac <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009140:	2120      	movs	r1, #32
 8009142:	420b      	tst	r3, r1
 8009144:	d00a      	beq.n	800915c <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009146:	2380      	movs	r3, #128	; 0x80
 8009148:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800914a:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800914c:	4003      	ands	r3, r0
 800914e:	4319      	orrs	r1, r3
 8009150:	d004      	beq.n	800915c <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 8009152:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 8009158:	0020      	movs	r0, r4
 800915a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800915c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800915e:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009160:	2740      	movs	r7, #64	; 0x40
 8009162:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009164:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009166:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009168:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800916a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800916c:	431e      	orrs	r6, r3
 800916e:	d022      	beq.n	80091b6 <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 8009170:	f7ff ff12 	bl	8008f98 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	423b      	tst	r3, r7
 800917a:	d018      	beq.n	80091ae <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009180:	2301      	movs	r3, #1
 8009182:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009186:	0025      	movs	r5, r4
 8009188:	cd04      	ldmia	r5!, {r2}
 800918a:	6893      	ldr	r3, [r2, #8]
 800918c:	43bb      	bics	r3, r7
 800918e:	6093      	str	r3, [r2, #8]
 8009190:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8009194:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8009196:	2800      	cmp	r0, #0
 8009198:	d009      	beq.n	80091ae <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800919a:	4b7a      	ldr	r3, [pc, #488]	; (8009384 <HAL_UART_IRQHandler+0x318>)
 800919c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800919e:	f7fe f8f5 	bl	800738c <HAL_DMA_Abort_IT>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d002      	beq.n	80091ac <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091a6:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80091a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80091aa:	4798      	blx	r3
}
 80091ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80091ae:	0020      	movs	r0, r4
 80091b0:	f7fb fd96 	bl	8004ce0 <HAL_UART_ErrorCallback>
 80091b4:	e7fa      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 80091b6:	f7fb fd93 	bl	8004ce0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ba:	602e      	str	r6, [r5, #0]
 80091bc:	e7f6      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091be:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80091c0:	2d01      	cmp	r5, #1
 80091c2:	d000      	beq.n	80091c6 <HAL_UART_IRQHandler+0x15a>
 80091c4:	e09f      	b.n	8009306 <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091c6:	2610      	movs	r6, #16
 80091c8:	4233      	tst	r3, r6
 80091ca:	d100      	bne.n	80091ce <HAL_UART_IRQHandler+0x162>
 80091cc:	e09b      	b.n	8009306 <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091ce:	4232      	tst	r2, r6
 80091d0:	d100      	bne.n	80091d4 <HAL_UART_IRQHandler+0x168>
 80091d2:	e098      	b.n	8009306 <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091d4:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d6:	6889      	ldr	r1, [r1, #8]
 80091d8:	2340      	movs	r3, #64	; 0x40
 80091da:	000a      	movs	r2, r1
 80091dc:	401a      	ands	r2, r3
 80091de:	4219      	tst	r1, r3
 80091e0:	d057      	beq.n	8009292 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091e2:	1d21      	adds	r1, r4, #4
 80091e4:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80091e6:	6810      	ldr	r0, [r2, #0]
 80091e8:	6842      	ldr	r2, [r0, #4]
 80091ea:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80091ec:	2a00      	cmp	r2, #0
 80091ee:	d0dd      	beq.n	80091ac <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091f0:	0027      	movs	r7, r4
 80091f2:	375c      	adds	r7, #92	; 0x5c
 80091f4:	883f      	ldrh	r7, [r7, #0]
 80091f6:	4297      	cmp	r7, r2
 80091f8:	d9d8      	bls.n	80091ac <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 80091fa:	0027      	movs	r7, r4
 80091fc:	375e      	adds	r7, #94	; 0x5e
 80091fe:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009200:	6802      	ldr	r2, [r0, #0]
 8009202:	2020      	movs	r0, #32
 8009204:	4684      	mov	ip, r0
 8009206:	4010      	ands	r0, r2
 8009208:	9000      	str	r0, [sp, #0]
 800920a:	4660      	mov	r0, ip
 800920c:	4202      	tst	r2, r0
 800920e:	d132      	bne.n	8009276 <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009210:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009214:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009218:	6820      	ldr	r0, [r4, #0]
 800921a:	4e5b      	ldr	r6, [pc, #364]	; (8009388 <HAL_UART_IRQHandler+0x31c>)
 800921c:	6802      	ldr	r2, [r0, #0]
 800921e:	4032      	ands	r2, r6
 8009220:	6002      	str	r2, [r0, #0]
 8009222:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009226:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800922a:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	6820      	ldr	r0, [r4, #0]
 8009230:	6882      	ldr	r2, [r0, #8]
 8009232:	43aa      	bics	r2, r5
 8009234:	6082      	str	r2, [r0, #8]
 8009236:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800923a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009242:	6820      	ldr	r0, [r4, #0]
 8009244:	6882      	ldr	r2, [r0, #8]
 8009246:	439a      	bics	r2, r3
 8009248:	6082      	str	r2, [r0, #8]
 800924a:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 800924e:	0023      	movs	r3, r4
 8009250:	4662      	mov	r2, ip
 8009252:	338c      	adds	r3, #140	; 0x8c
 8009254:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009256:	9b00      	ldr	r3, [sp, #0]
 8009258:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800925a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	350f      	adds	r5, #15
 8009266:	6813      	ldr	r3, [r2, #0]
 8009268:	43ab      	bics	r3, r5
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009270:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
 8009272:	f7fe f84f 	bl	8007314 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009276:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009278:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800927a:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800927c:	0023      	movs	r3, r4
 800927e:	325c      	adds	r2, #92	; 0x5c
 8009280:	335e      	adds	r3, #94	; 0x5e
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	8811      	ldrh	r1, [r2, #0]
 8009286:	1ac9      	subs	r1, r1, r3
 8009288:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800928a:	0020      	movs	r0, r4
 800928c:	f7ff feec 	bl	8009068 <HAL_UARTEx_RxEventCallback>
 8009290:	e78c      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009292:	0023      	movs	r3, r4
 8009294:	0020      	movs	r0, r4
 8009296:	335c      	adds	r3, #92	; 0x5c
 8009298:	305e      	adds	r0, #94	; 0x5e
 800929a:	8819      	ldrh	r1, [r3, #0]
 800929c:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 800929e:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092a0:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d100      	bne.n	80092a8 <HAL_UART_IRQHandler+0x23c>
 80092a6:	e781      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092a8:	1ac9      	subs	r1, r1, r3
 80092aa:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d100      	bne.n	80092b2 <HAL_UART_IRQHandler+0x246>
 80092b0:	e77c      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092b2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b6:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092ba:	6820      	ldr	r0, [r4, #0]
 80092bc:	4e33      	ldr	r6, [pc, #204]	; (800938c <HAL_UART_IRQHandler+0x320>)
 80092be:	6803      	ldr	r3, [r0, #0]
 80092c0:	4033      	ands	r3, r6
 80092c2:	6003      	str	r3, [r0, #0]
 80092c4:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092cc:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	4e2f      	ldr	r6, [pc, #188]	; (8009390 <HAL_UART_IRQHandler+0x324>)
 80092d4:	6883      	ldr	r3, [r0, #8]
 80092d6:	4033      	ands	r3, r6
 80092d8:	6083      	str	r3, [r0, #8]
 80092da:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 80092de:	0023      	movs	r3, r4
 80092e0:	2020      	movs	r0, #32
 80092e2:	338c      	adds	r3, #140	; 0x8c
 80092e4:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e6:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80092e8:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ee:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f2:	2510      	movs	r5, #16
 80092f4:	6822      	ldr	r2, [r4, #0]
 80092f6:	6813      	ldr	r3, [r2, #0]
 80092f8:	43ab      	bics	r3, r5
 80092fa:	6013      	str	r3, [r2, #0]
 80092fc:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009300:	2302      	movs	r3, #2
 8009302:	6723      	str	r3, [r4, #112]	; 0x70
 8009304:	e7c1      	b.n	800928a <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009306:	2580      	movs	r5, #128	; 0x80
 8009308:	036d      	lsls	r5, r5, #13
 800930a:	422b      	tst	r3, r5
 800930c:	d006      	beq.n	800931c <HAL_UART_IRQHandler+0x2b0>
 800930e:	0246      	lsls	r6, r0, #9
 8009310:	d504      	bpl.n	800931c <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 8009312:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009314:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8009316:	f000 fc39 	bl	8009b8c <HAL_UARTEx_WakeupCallback>
    return;
 800931a:	e747      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800931c:	2180      	movs	r1, #128	; 0x80
 800931e:	420b      	tst	r3, r1
 8009320:	d007      	beq.n	8009332 <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009322:	2580      	movs	r5, #128	; 0x80
 8009324:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009326:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009328:	4028      	ands	r0, r5
 800932a:	4301      	orrs	r1, r0
 800932c:	d001      	beq.n	8009332 <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 800932e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009330:	e6b1      	b.n	8009096 <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009332:	2140      	movs	r1, #64	; 0x40
 8009334:	420b      	tst	r3, r1
 8009336:	d016      	beq.n	8009366 <HAL_UART_IRQHandler+0x2fa>
 8009338:	420a      	tst	r2, r1
 800933a:	d014      	beq.n	8009366 <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800933c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009340:	2301      	movs	r3, #1
 8009342:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009346:	6822      	ldr	r2, [r4, #0]
 8009348:	6813      	ldr	r3, [r2, #0]
 800934a:	438b      	bics	r3, r1
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009352:	0023      	movs	r3, r4
 8009354:	2220      	movs	r2, #32
 8009356:	3388      	adds	r3, #136	; 0x88
 8009358:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800935a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800935c:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800935e:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8009360:	f7fb fcbc 	bl	8004cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009364:	e722      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009366:	0219      	lsls	r1, r3, #8
 8009368:	d514      	bpl.n	8009394 <HAL_UART_IRQHandler+0x328>
 800936a:	0051      	lsls	r1, r2, #1
 800936c:	d512      	bpl.n	8009394 <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800936e:	0020      	movs	r0, r4
 8009370:	f000 fc0e 	bl	8009b90 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8009374:	e71a      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	0000080f 	.word	0x0000080f
 800937c:	10000001 	.word	0x10000001
 8009380:	04000120 	.word	0x04000120
 8009384:	08009053 	.word	0x08009053
 8009388:	fffffeff 	.word	0xfffffeff
 800938c:	fffffedf 	.word	0xfffffedf
 8009390:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009394:	01db      	lsls	r3, r3, #7
 8009396:	d400      	bmi.n	800939a <HAL_UART_IRQHandler+0x32e>
 8009398:	e708      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
 800939a:	2a00      	cmp	r2, #0
 800939c:	db00      	blt.n	80093a0 <HAL_UART_IRQHandler+0x334>
 800939e:	e705      	b.n	80091ac <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093a0:	0020      	movs	r0, r4
 80093a2:	f000 fbf4 	bl	8009b8e <HAL_UARTEx_RxFifoFullCallback>
    return;
 80093a6:	e701      	b.n	80091ac <HAL_UART_IRQHandler+0x140>

080093a8 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80093a8:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80093ac:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80093ae:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d106      	bne.n	80093c4 <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093b6:	0003      	movs	r3, r0
 80093b8:	335c      	adds	r3, #92	; 0x5c
 80093ba:	8819      	ldrh	r1, [r3, #0]
 80093bc:	0849      	lsrs	r1, r1, #1
 80093be:	f7ff fe53 	bl	8009068 <HAL_UARTEx_RxEventCallback>
}
 80093c2:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80093c4:	f7ff fe1a 	bl	8008ffc <HAL_UART_RxHalfCpltCallback>
}
 80093c8:	e7fb      	b.n	80093c2 <UART_DMARxHalfCplt+0x1a>
	...

080093cc <UART_DMAReceiveCplt>:
{
 80093cc:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2220      	movs	r2, #32
 80093d2:	681b      	ldr	r3, [r3, #0]
{
 80093d4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80093d6:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80093da:	4011      	ands	r1, r2
 80093dc:	4213      	tst	r3, r2
 80093de:	d134      	bne.n	800944a <UART_DMAReceiveCplt+0x7e>
    huart->RxXferCount = 0U;
 80093e0:	0003      	movs	r3, r0
 80093e2:	335e      	adds	r3, #94	; 0x5e
 80093e4:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093e6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ea:	2301      	movs	r3, #1
 80093ec:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f0:	6804      	ldr	r4, [r0, #0]
 80093f2:	4e1d      	ldr	r6, [pc, #116]	; (8009468 <UART_DMAReceiveCplt+0x9c>)
 80093f4:	6821      	ldr	r1, [r4, #0]
 80093f6:	4031      	ands	r1, r6
 80093f8:	6021      	str	r1, [r4, #0]
 80093fa:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093fe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009402:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009406:	6804      	ldr	r4, [r0, #0]
 8009408:	68a1      	ldr	r1, [r4, #8]
 800940a:	4399      	bics	r1, r3
 800940c:	60a1      	str	r1, [r4, #8]
 800940e:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009412:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009416:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800941a:	2540      	movs	r5, #64	; 0x40
 800941c:	6801      	ldr	r1, [r0, #0]
 800941e:	688b      	ldr	r3, [r1, #8]
 8009420:	43ab      	bics	r3, r5
 8009422:	608b      	str	r3, [r1, #8]
 8009424:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 8009428:	0003      	movs	r3, r0
 800942a:	338c      	adds	r3, #140	; 0x8c
 800942c:	601a      	str	r2, [r3, #0]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009430:	2b01      	cmp	r3, #1
 8009432:	d10a      	bne.n	800944a <UART_DMAReceiveCplt+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009434:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009438:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800943c:	2410      	movs	r4, #16
 800943e:	6802      	ldr	r2, [r0, #0]
 8009440:	6813      	ldr	r3, [r2, #0]
 8009442:	43a3      	bics	r3, r4
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800944a:	2300      	movs	r3, #0
 800944c:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009450:	2b01      	cmp	r3, #1
 8009452:	d105      	bne.n	8009460 <UART_DMAReceiveCplt+0x94>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009454:	0003      	movs	r3, r0
 8009456:	335c      	adds	r3, #92	; 0x5c
 8009458:	8819      	ldrh	r1, [r3, #0]
 800945a:	f7ff fe05 	bl	8009068 <HAL_UARTEx_RxEventCallback>
}
 800945e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 8009460:	f7fc fa9c 	bl	800599c <HAL_UART_RxCpltCallback>
}
 8009464:	e7fb      	b.n	800945e <UART_DMAReceiveCplt+0x92>
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	fffffeff 	.word	0xfffffeff

0800946c <UART_SetConfig>:
{
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009470:	6925      	ldr	r5, [r4, #16]
 8009472:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009474:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009476:	4329      	orrs	r1, r5
 8009478:	6965      	ldr	r5, [r4, #20]
 800947a:	69c3      	ldr	r3, [r0, #28]
 800947c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800947e:	6810      	ldr	r0, [r2, #0]
 8009480:	4d4e      	ldr	r5, [pc, #312]	; (80095bc <UART_SetConfig+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009482:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009484:	4028      	ands	r0, r5
 8009486:	4301      	orrs	r1, r0
 8009488:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800948a:	6851      	ldr	r1, [r2, #4]
 800948c:	484c      	ldr	r0, [pc, #304]	; (80095c0 <UART_SetConfig+0x154>)
    tmpreg |= huart->Init.OneBitSampling;
 800948e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009490:	4001      	ands	r1, r0
 8009492:	68e0      	ldr	r0, [r4, #12]
 8009494:	4301      	orrs	r1, r0
 8009496:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009498:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800949a:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800949c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800949e:	4d49      	ldr	r5, [pc, #292]	; (80095c4 <UART_SetConfig+0x158>)
 80094a0:	4028      	ands	r0, r5
 80094a2:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094a4:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094a6:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80094aa:	4381      	bics	r1, r0
 80094ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094ae:	4301      	orrs	r1, r0
 80094b0:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094b2:	4945      	ldr	r1, [pc, #276]	; (80095c8 <UART_SetConfig+0x15c>)
 80094b4:	428a      	cmp	r2, r1
 80094b6:	d117      	bne.n	80094e8 <UART_SetConfig+0x7c>
 80094b8:	2103      	movs	r1, #3
 80094ba:	4a44      	ldr	r2, [pc, #272]	; (80095cc <UART_SetConfig+0x160>)
 80094bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80094be:	400a      	ands	r2, r1
 80094c0:	3a01      	subs	r2, #1
 80094c2:	4943      	ldr	r1, [pc, #268]	; (80095d0 <UART_SetConfig+0x164>)
 80094c4:	2a02      	cmp	r2, #2
 80094c6:	d917      	bls.n	80094f8 <UART_SetConfig+0x8c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094c8:	2280      	movs	r2, #128	; 0x80
 80094ca:	0212      	lsls	r2, r2, #8
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d000      	beq.n	80094d2 <UART_SetConfig+0x66>
 80094d0:	e068      	b.n	80095a4 <UART_SetConfig+0x138>
        pclk = HAL_RCC_GetPCLK1Freq();
 80094d2:	f7fe ffa3 	bl	800841c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80094d6:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80094d8:	d128      	bne.n	800952c <UART_SetConfig+0xc0>
 80094da:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80094dc:	4b3d      	ldr	r3, [pc, #244]	; (80095d4 <UART_SetConfig+0x168>)
 80094de:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80094e4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094e8:	493b      	ldr	r1, [pc, #236]	; (80095d8 <UART_SetConfig+0x16c>)
 80094ea:	428a      	cmp	r2, r1
 80094ec:	d112      	bne.n	8009514 <UART_SetConfig+0xa8>
 80094ee:	200c      	movs	r0, #12
 80094f0:	4a36      	ldr	r2, [pc, #216]	; (80095cc <UART_SetConfig+0x160>)
 80094f2:	493a      	ldr	r1, [pc, #232]	; (80095dc <UART_SetConfig+0x170>)
 80094f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80094f6:	4002      	ands	r2, r0
 80094f8:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094fa:	2280      	movs	r2, #128	; 0x80
 80094fc:	0212      	lsls	r2, r2, #8
 80094fe:	4293      	cmp	r3, r2
 8009500:	d131      	bne.n	8009566 <UART_SetConfig+0xfa>
    switch (clocksource)
 8009502:	2808      	cmp	r0, #8
 8009504:	d80c      	bhi.n	8009520 <UART_SetConfig+0xb4>
 8009506:	f7f6 fe07 	bl	8000118 <__gnu_thumb1_case_sqi>
 800950a:	0be4      	.short	0x0be4
 800950c:	0b0d0b10 	.word	0x0b0d0b10
 8009510:	0b0b      	.short	0x0b0b
 8009512:	11          	.byte	0x11
 8009513:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009514:	4932      	ldr	r1, [pc, #200]	; (80095e0 <UART_SetConfig+0x174>)
 8009516:	428a      	cmp	r2, r1
 8009518:	d0d6      	beq.n	80094c8 <UART_SetConfig+0x5c>
 800951a:	4932      	ldr	r1, [pc, #200]	; (80095e4 <UART_SetConfig+0x178>)
 800951c:	428a      	cmp	r2, r1
 800951e:	d0d3      	beq.n	80094c8 <UART_SetConfig+0x5c>
    switch (clocksource)
 8009520:	2001      	movs	r0, #1
 8009522:	e7db      	b.n	80094dc <UART_SetConfig+0x70>
        pclk = HAL_RCC_GetSysClockFreq();
 8009524:	f7fe fe88 	bl	8008238 <HAL_RCC_GetSysClockFreq>
 8009528:	e7d5      	b.n	80094d6 <UART_SetConfig+0x6a>
    switch (clocksource)
 800952a:	4b2f      	ldr	r3, [pc, #188]	; (80095e8 <UART_SetConfig+0x17c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800952c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800952e:	4a2f      	ldr	r2, [pc, #188]	; (80095ec <UART_SetConfig+0x180>)
 8009530:	0049      	lsls	r1, r1, #1
 8009532:	5a89      	ldrh	r1, [r1, r2]
 8009534:	0018      	movs	r0, r3
 8009536:	f7f6 fe0d 	bl	8000154 <__udivsi3>
 800953a:	6865      	ldr	r5, [r4, #4]
 800953c:	0040      	lsls	r0, r0, #1
 800953e:	086b      	lsrs	r3, r5, #1
 8009540:	18c0      	adds	r0, r0, r3
 8009542:	0029      	movs	r1, r5
 8009544:	f7f6 fe06 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009548:	0002      	movs	r2, r0
 800954a:	4b29      	ldr	r3, [pc, #164]	; (80095f0 <UART_SetConfig+0x184>)
 800954c:	3a10      	subs	r2, #16
 800954e:	429a      	cmp	r2, r3
 8009550:	d8e6      	bhi.n	8009520 <UART_SetConfig+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009552:	230f      	movs	r3, #15
 8009554:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009556:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009558:	439a      	bics	r2, r3
 800955a:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800955c:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	4303      	orrs	r3, r0
 8009562:	60d3      	str	r3, [r2, #12]
 8009564:	e7b9      	b.n	80094da <UART_SetConfig+0x6e>
    switch (clocksource)
 8009566:	2808      	cmp	r0, #8
 8009568:	d8da      	bhi.n	8009520 <UART_SetConfig+0xb4>
 800956a:	f7f6 fdd5 	bl	8000118 <__gnu_thumb1_case_sqi>
 800956e:	d91b      	.short	0xd91b
 8009570:	d921d924 	.word	0xd921d924
 8009574:	d9d9      	.short	0xd9d9
 8009576:	05          	.byte	0x05
 8009577:	00          	.byte	0x00
 8009578:	2080      	movs	r0, #128	; 0x80
 800957a:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800957c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800957e:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <UART_SetConfig+0x180>)
 8009580:	0052      	lsls	r2, r2, #1
 8009582:	5ad1      	ldrh	r1, [r2, r3]
 8009584:	f7f6 fde6 	bl	8000154 <__udivsi3>
 8009588:	6865      	ldr	r5, [r4, #4]
 800958a:	086b      	lsrs	r3, r5, #1
 800958c:	18c0      	adds	r0, r0, r3
 800958e:	0029      	movs	r1, r5
 8009590:	f7f6 fde0 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009594:	0002      	movs	r2, r0
 8009596:	4b16      	ldr	r3, [pc, #88]	; (80095f0 <UART_SetConfig+0x184>)
 8009598:	3a10      	subs	r2, #16
 800959a:	429a      	cmp	r2, r3
 800959c:	d8c0      	bhi.n	8009520 <UART_SetConfig+0xb4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	60d8      	str	r0, [r3, #12]
 80095a2:	e79a      	b.n	80094da <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80095a4:	f7fe ff3a 	bl	800841c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d100      	bne.n	80095ae <UART_SetConfig+0x142>
 80095ac:	e795      	b.n	80094da <UART_SetConfig+0x6e>
 80095ae:	e7e5      	b.n	800957c <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetSysClockFreq();
 80095b0:	f7fe fe42 	bl	8008238 <HAL_RCC_GetSysClockFreq>
        break;
 80095b4:	e7f8      	b.n	80095a8 <UART_SetConfig+0x13c>
        pclk = (uint32_t) HSI_VALUE;
 80095b6:	480c      	ldr	r0, [pc, #48]	; (80095e8 <UART_SetConfig+0x17c>)
 80095b8:	e7e0      	b.n	800957c <UART_SetConfig+0x110>
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	cfff69f3 	.word	0xcfff69f3
 80095c0:	ffffcfff 	.word	0xffffcfff
 80095c4:	11fff4ff 	.word	0x11fff4ff
 80095c8:	40013800 	.word	0x40013800
 80095cc:	40021000 	.word	0x40021000
 80095d0:	08011e7c 	.word	0x08011e7c
 80095d4:	00010001 	.word	0x00010001
 80095d8:	40004400 	.word	0x40004400
 80095dc:	08011e7f 	.word	0x08011e7f
 80095e0:	40004800 	.word	0x40004800
 80095e4:	40004c00 	.word	0x40004c00
 80095e8:	00f42400 	.word	0x00f42400
 80095ec:	08011e8c 	.word	0x08011e8c
 80095f0:	0000ffef 	.word	0x0000ffef

080095f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80095f6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095f8:	07da      	lsls	r2, r3, #31
 80095fa:	d506      	bpl.n	800960a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095fc:	6801      	ldr	r1, [r0, #0]
 80095fe:	4c28      	ldr	r4, [pc, #160]	; (80096a0 <UART_AdvFeatureConfig+0xac>)
 8009600:	684a      	ldr	r2, [r1, #4]
 8009602:	4022      	ands	r2, r4
 8009604:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009606:	4322      	orrs	r2, r4
 8009608:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800960a:	079a      	lsls	r2, r3, #30
 800960c:	d506      	bpl.n	800961c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800960e:	6801      	ldr	r1, [r0, #0]
 8009610:	4c24      	ldr	r4, [pc, #144]	; (80096a4 <UART_AdvFeatureConfig+0xb0>)
 8009612:	684a      	ldr	r2, [r1, #4]
 8009614:	4022      	ands	r2, r4
 8009616:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009618:	4322      	orrs	r2, r4
 800961a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800961c:	075a      	lsls	r2, r3, #29
 800961e:	d506      	bpl.n	800962e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009620:	6801      	ldr	r1, [r0, #0]
 8009622:	4c21      	ldr	r4, [pc, #132]	; (80096a8 <UART_AdvFeatureConfig+0xb4>)
 8009624:	684a      	ldr	r2, [r1, #4]
 8009626:	4022      	ands	r2, r4
 8009628:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800962a:	4322      	orrs	r2, r4
 800962c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800962e:	071a      	lsls	r2, r3, #28
 8009630:	d506      	bpl.n	8009640 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009632:	6801      	ldr	r1, [r0, #0]
 8009634:	4c1d      	ldr	r4, [pc, #116]	; (80096ac <UART_AdvFeatureConfig+0xb8>)
 8009636:	684a      	ldr	r2, [r1, #4]
 8009638:	4022      	ands	r2, r4
 800963a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800963c:	4322      	orrs	r2, r4
 800963e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009640:	06da      	lsls	r2, r3, #27
 8009642:	d506      	bpl.n	8009652 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009644:	6801      	ldr	r1, [r0, #0]
 8009646:	4c1a      	ldr	r4, [pc, #104]	; (80096b0 <UART_AdvFeatureConfig+0xbc>)
 8009648:	688a      	ldr	r2, [r1, #8]
 800964a:	4022      	ands	r2, r4
 800964c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800964e:	4322      	orrs	r2, r4
 8009650:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009652:	069a      	lsls	r2, r3, #26
 8009654:	d506      	bpl.n	8009664 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009656:	6801      	ldr	r1, [r0, #0]
 8009658:	4c16      	ldr	r4, [pc, #88]	; (80096b4 <UART_AdvFeatureConfig+0xc0>)
 800965a:	688a      	ldr	r2, [r1, #8]
 800965c:	4022      	ands	r2, r4
 800965e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009660:	4322      	orrs	r2, r4
 8009662:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009664:	065a      	lsls	r2, r3, #25
 8009666:	d510      	bpl.n	800968a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009668:	6801      	ldr	r1, [r0, #0]
 800966a:	4d13      	ldr	r5, [pc, #76]	; (80096b8 <UART_AdvFeatureConfig+0xc4>)
 800966c:	684a      	ldr	r2, [r1, #4]
 800966e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009670:	402a      	ands	r2, r5
 8009672:	4322      	orrs	r2, r4
 8009674:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009676:	2280      	movs	r2, #128	; 0x80
 8009678:	0352      	lsls	r2, r2, #13
 800967a:	4294      	cmp	r4, r2
 800967c:	d105      	bne.n	800968a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800967e:	684a      	ldr	r2, [r1, #4]
 8009680:	4c0e      	ldr	r4, [pc, #56]	; (80096bc <UART_AdvFeatureConfig+0xc8>)
 8009682:	4022      	ands	r2, r4
 8009684:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009686:	4322      	orrs	r2, r4
 8009688:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800968a:	061b      	lsls	r3, r3, #24
 800968c:	d506      	bpl.n	800969c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800968e:	6802      	ldr	r2, [r0, #0]
 8009690:	490b      	ldr	r1, [pc, #44]	; (80096c0 <UART_AdvFeatureConfig+0xcc>)
 8009692:	6853      	ldr	r3, [r2, #4]
 8009694:	400b      	ands	r3, r1
 8009696:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009698:	430b      	orrs	r3, r1
 800969a:	6053      	str	r3, [r2, #4]
}
 800969c:	bd30      	pop	{r4, r5, pc}
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	fffdffff 	.word	0xfffdffff
 80096a4:	fffeffff 	.word	0xfffeffff
 80096a8:	fffbffff 	.word	0xfffbffff
 80096ac:	ffff7fff 	.word	0xffff7fff
 80096b0:	ffffefff 	.word	0xffffefff
 80096b4:	ffffdfff 	.word	0xffffdfff
 80096b8:	ffefffff 	.word	0xffefffff
 80096bc:	ff9fffff 	.word	0xff9fffff
 80096c0:	fff7ffff 	.word	0xfff7ffff

080096c4 <UART_WaitOnFlagUntilTimeout>:
{
 80096c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096c6:	2780      	movs	r7, #128	; 0x80
{
 80096c8:	0004      	movs	r4, r0
 80096ca:	000d      	movs	r5, r1
 80096cc:	0016      	movs	r6, r2
 80096ce:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096d0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d2:	6822      	ldr	r2, [r4, #0]
 80096d4:	69d3      	ldr	r3, [r2, #28]
 80096d6:	402b      	ands	r3, r5
 80096d8:	1b5b      	subs	r3, r3, r5
 80096da:	4259      	negs	r1, r3
 80096dc:	414b      	adcs	r3, r1
 80096de:	42b3      	cmp	r3, r6
 80096e0:	d001      	beq.n	80096e6 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80096e2:	2000      	movs	r0, #0
 80096e4:	e02a      	b.n	800973c <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 80096e6:	9b08      	ldr	r3, [sp, #32]
 80096e8:	3301      	adds	r3, #1
 80096ea:	d0f3      	beq.n	80096d4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ec:	f7fd f9a0 	bl	8006a30 <HAL_GetTick>
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	1ac0      	subs	r0, r0, r3
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	4298      	cmp	r0, r3
 80096f8:	d801      	bhi.n	80096fe <UART_WaitOnFlagUntilTimeout+0x3a>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d11f      	bne.n	800973e <UART_WaitOnFlagUntilTimeout+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096fe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009702:	2201      	movs	r2, #1
 8009704:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009708:	6821      	ldr	r1, [r4, #0]
 800970a:	4d20      	ldr	r5, [pc, #128]	; (800978c <UART_WaitOnFlagUntilTimeout+0xc8>)
 800970c:	680b      	ldr	r3, [r1, #0]
 800970e:	402b      	ands	r3, r5
 8009710:	600b      	str	r3, [r1, #0]
 8009712:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009716:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800971a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971e:	6821      	ldr	r1, [r4, #0]
 8009720:	688b      	ldr	r3, [r1, #8]
 8009722:	4393      	bics	r3, r2
 8009724:	608b      	str	r3, [r1, #8]
 8009726:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800972a:	0022      	movs	r2, r4
 800972c:	2320      	movs	r3, #32
 800972e:	3288      	adds	r2, #136	; 0x88
 8009730:	6013      	str	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8009732:	6053      	str	r3, [r2, #4]
          __HAL_UNLOCK(huart);
 8009734:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8009736:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8009738:	3484      	adds	r4, #132	; 0x84
 800973a:	7023      	strb	r3, [r4, #0]
}
 800973c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800973e:	2104      	movs	r1, #4
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	420a      	tst	r2, r1
 8009746:	d0c4      	beq.n	80096d2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009748:	69da      	ldr	r2, [r3, #28]
 800974a:	423a      	tst	r2, r7
 800974c:	d0c1      	beq.n	80096d2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800974e:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009750:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009754:	2201      	movs	r2, #1
 8009756:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800975a:	6821      	ldr	r1, [r4, #0]
 800975c:	4d0b      	ldr	r5, [pc, #44]	; (800978c <UART_WaitOnFlagUntilTimeout+0xc8>)
 800975e:	680b      	ldr	r3, [r1, #0]
 8009760:	402b      	ands	r3, r5
 8009762:	600b      	str	r3, [r1, #0]
 8009764:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009768:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800976c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009770:	6821      	ldr	r1, [r4, #0]
 8009772:	688b      	ldr	r3, [r1, #8]
 8009774:	4393      	bics	r3, r2
 8009776:	608b      	str	r3, [r1, #8]
 8009778:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800977c:	0022      	movs	r2, r4
 800977e:	2320      	movs	r3, #32
 8009780:	3288      	adds	r2, #136	; 0x88
 8009782:	6013      	str	r3, [r2, #0]
          huart->RxState = HAL_UART_STATE_READY;
 8009784:	6053      	str	r3, [r2, #4]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009786:	6093      	str	r3, [r2, #8]
 8009788:	e7d4      	b.n	8009734 <UART_WaitOnFlagUntilTimeout+0x70>
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	fffffe5f 	.word	0xfffffe5f

08009790 <HAL_UART_Transmit>:
{
 8009790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009792:	0016      	movs	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009794:	0002      	movs	r2, r0
{
 8009796:	b085      	sub	sp, #20
  if (huart->gState == HAL_UART_STATE_READY)
 8009798:	3288      	adds	r2, #136	; 0x88
{
 800979a:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 800979c:	6813      	ldr	r3, [r2, #0]
{
 800979e:	0004      	movs	r4, r0
 80097a0:	000d      	movs	r5, r1
    return HAL_BUSY;
 80097a2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80097a4:	2b20      	cmp	r3, #32
 80097a6:	d146      	bne.n	8009836 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 80097a8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80097aa:	2900      	cmp	r1, #0
 80097ac:	d043      	beq.n	8009836 <HAL_UART_Transmit+0xa6>
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	d041      	beq.n	8009836 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097b2:	2380      	movs	r3, #128	; 0x80
 80097b4:	68a1      	ldr	r1, [r4, #8]
 80097b6:	015b      	lsls	r3, r3, #5
 80097b8:	4299      	cmp	r1, r3
 80097ba:	d104      	bne.n	80097c6 <HAL_UART_Transmit+0x36>
 80097bc:	6923      	ldr	r3, [r4, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 80097c2:	4205      	tst	r5, r0
 80097c4:	d137      	bne.n	8009836 <HAL_UART_Transmit+0xa6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c6:	0023      	movs	r3, r4
 80097c8:	2100      	movs	r1, #0
 80097ca:	3390      	adds	r3, #144	; 0x90
 80097cc:	6019      	str	r1, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097ce:	2321      	movs	r3, #33	; 0x21
 80097d0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80097d2:	f7fd f92d 	bl	8006a30 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80097d6:	0023      	movs	r3, r4
 80097d8:	3354      	adds	r3, #84	; 0x54
 80097da:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80097dc:	3302      	adds	r3, #2
 80097de:	801e      	strh	r6, [r3, #0]
 80097e0:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097e2:	2380      	movs	r3, #128	; 0x80
 80097e4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80097e6:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80097e8:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097ea:	015b      	lsls	r3, r3, #5
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d104      	bne.n	80097fa <HAL_UART_Transmit+0x6a>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	42b3      	cmp	r3, r6
 80097f4:	d101      	bne.n	80097fa <HAL_UART_Transmit+0x6a>
 80097f6:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80097f8:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80097fa:	0023      	movs	r3, r4
 80097fc:	3356      	adds	r3, #86	; 0x56
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29a      	uxth	r2, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10c      	bne.n	8009820 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	2140      	movs	r1, #64	; 0x40
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	0020      	movs	r0, r4
 800980e:	003b      	movs	r3, r7
 8009810:	f7ff ff58 	bl	80096c4 <UART_WaitOnFlagUntilTimeout>
 8009814:	2800      	cmp	r0, #0
 8009816:	d10d      	bne.n	8009834 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8009818:	2320      	movs	r3, #32
 800981a:	3488      	adds	r4, #136	; 0x88
 800981c:	6023      	str	r3, [r4, #0]
    return HAL_OK;
 800981e:	e00a      	b.n	8009836 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009820:	9b03      	ldr	r3, [sp, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	2180      	movs	r1, #128	; 0x80
 8009828:	003b      	movs	r3, r7
 800982a:	0020      	movs	r0, r4
 800982c:	f7ff ff4a 	bl	80096c4 <UART_WaitOnFlagUntilTimeout>
 8009830:	2800      	cmp	r0, #0
 8009832:	d002      	beq.n	800983a <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8009834:	2003      	movs	r0, #3
}
 8009836:	b005      	add	sp, #20
 8009838:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800983a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800983c:	2d00      	cmp	r5, #0
 800983e:	d10b      	bne.n	8009858 <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009840:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8009842:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009844:	05db      	lsls	r3, r3, #23
 8009846:	0ddb      	lsrs	r3, r3, #23
 8009848:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800984a:	9b02      	ldr	r3, [sp, #8]
 800984c:	9a02      	ldr	r2, [sp, #8]
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	3b01      	subs	r3, #1
 8009852:	b29b      	uxth	r3, r3
 8009854:	8013      	strh	r3, [r2, #0]
 8009856:	e7d0      	b.n	80097fa <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009858:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800985a:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800985c:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 800985e:	e7f4      	b.n	800984a <HAL_UART_Transmit+0xba>

08009860 <HAL_UART_Receive>:
{
 8009860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009862:	0017      	movs	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8009864:	0002      	movs	r2, r0
{
 8009866:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 8009868:	328c      	adds	r2, #140	; 0x8c
{
 800986a:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 800986c:	6813      	ldr	r3, [r2, #0]
{
 800986e:	0004      	movs	r4, r0
 8009870:	000e      	movs	r6, r1
    return HAL_BUSY;
 8009872:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8009874:	2b20      	cmp	r3, #32
 8009876:	d13f      	bne.n	80098f8 <HAL_UART_Receive+0x98>
      return  HAL_ERROR;
 8009878:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800987a:	2900      	cmp	r1, #0
 800987c:	d03c      	beq.n	80098f8 <HAL_UART_Receive+0x98>
 800987e:	2f00      	cmp	r7, #0
 8009880:	d03a      	beq.n	80098f8 <HAL_UART_Receive+0x98>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009882:	2380      	movs	r3, #128	; 0x80
 8009884:	68a1      	ldr	r1, [r4, #8]
 8009886:	015b      	lsls	r3, r3, #5
 8009888:	4299      	cmp	r1, r3
 800988a:	d104      	bne.n	8009896 <HAL_UART_Receive+0x36>
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_UART_Receive+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8009892:	4206      	tst	r6, r0
 8009894:	d130      	bne.n	80098f8 <HAL_UART_Receive+0x98>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009896:	0023      	movs	r3, r4
 8009898:	2500      	movs	r5, #0
 800989a:	3390      	adds	r3, #144	; 0x90
 800989c:	601d      	str	r5, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800989e:	2322      	movs	r3, #34	; 0x22
 80098a0:	6013      	str	r3, [r2, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a2:	66e5      	str	r5, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 80098a4:	f7fd f8c4 	bl	8006a30 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80098a8:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80098aa:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 80098ac:	335c      	adds	r3, #92	; 0x5c
 80098ae:	801f      	strh	r7, [r3, #0]
    huart->RxXferCount = Size;
 80098b0:	3302      	adds	r3, #2
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	801f      	strh	r7, [r3, #0]
    UART_MASK_COMPUTATION(huart);
 80098b6:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80098b8:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 80098ba:	0152      	lsls	r2, r2, #5
 80098bc:	4293      	cmp	r3, r2
 80098be:	d11d      	bne.n	80098fc <HAL_UART_Receive+0x9c>
 80098c0:	6925      	ldr	r5, [r4, #16]
 80098c2:	1e69      	subs	r1, r5, #1
 80098c4:	418d      	sbcs	r5, r1
 80098c6:	21ff      	movs	r1, #255	; 0xff
 80098c8:	426d      	negs	r5, r5
 80098ca:	438d      	bics	r5, r1
 80098cc:	4923      	ldr	r1, [pc, #140]	; (800995c <HAL_UART_Receive+0xfc>)
 80098ce:	186d      	adds	r5, r5, r1
 80098d0:	0021      	movs	r1, r4
 80098d2:	3160      	adds	r1, #96	; 0x60
      pdata16bits = NULL;
 80098d4:	2700      	movs	r7, #0
    UART_MASK_COMPUTATION(huart);
 80098d6:	800d      	strh	r5, [r1, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098d8:	4293      	cmp	r3, r2
 80098da:	d104      	bne.n	80098e6 <HAL_UART_Receive+0x86>
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	42bb      	cmp	r3, r7
 80098e0:	d101      	bne.n	80098e6 <HAL_UART_Receive+0x86>
 80098e2:	0037      	movs	r7, r6
      pdata8bits  = NULL;
 80098e4:	001e      	movs	r6, r3
    while (huart->RxXferCount > 0U)
 80098e6:	0023      	movs	r3, r4
 80098e8:	335e      	adds	r3, #94	; 0x5e
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b298      	uxth	r0, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d116      	bne.n	8009920 <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 80098f2:	348c      	adds	r4, #140	; 0x8c
 80098f4:	3320      	adds	r3, #32
 80098f6:	6023      	str	r3, [r4, #0]
}
 80098f8:	b007      	add	sp, #28
 80098fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d105      	bne.n	800990c <HAL_UART_Receive+0xac>
 8009900:	6921      	ldr	r1, [r4, #16]
 8009902:	257f      	movs	r5, #127	; 0x7f
 8009904:	2900      	cmp	r1, #0
 8009906:	d1e3      	bne.n	80098d0 <HAL_UART_Receive+0x70>
 8009908:	3580      	adds	r5, #128	; 0x80
 800990a:	e7e1      	b.n	80098d0 <HAL_UART_Receive+0x70>
 800990c:	2180      	movs	r1, #128	; 0x80
 800990e:	0549      	lsls	r1, r1, #21
 8009910:	428b      	cmp	r3, r1
 8009912:	d1dd      	bne.n	80098d0 <HAL_UART_Receive+0x70>
 8009914:	6921      	ldr	r1, [r4, #16]
 8009916:	257f      	movs	r5, #127	; 0x7f
 8009918:	2900      	cmp	r1, #0
 800991a:	d0d9      	beq.n	80098d0 <HAL_UART_Receive+0x70>
 800991c:	3d40      	subs	r5, #64	; 0x40
 800991e:	e7d7      	b.n	80098d0 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009920:	9b05      	ldr	r3, [sp, #20]
 8009922:	2200      	movs	r2, #0
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	2120      	movs	r1, #32
 8009928:	0020      	movs	r0, r4
 800992a:	9b04      	ldr	r3, [sp, #16]
 800992c:	f7ff feca 	bl	80096c4 <UART_WaitOnFlagUntilTimeout>
 8009930:	2800      	cmp	r0, #0
 8009932:	d110      	bne.n	8009956 <HAL_UART_Receive+0xf6>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 800993a:	2e00      	cmp	r6, #0
 800993c:	d108      	bne.n	8009950 <HAL_UART_Receive+0xf0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800993e:	803b      	strh	r3, [r7, #0]
        pdata16bits++;
 8009940:	3702      	adds	r7, #2
      huart->RxXferCount--;
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	9a03      	ldr	r2, [sp, #12]
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	3b01      	subs	r3, #1
 800994a:	b29b      	uxth	r3, r3
 800994c:	8013      	strh	r3, [r2, #0]
 800994e:	e7ca      	b.n	80098e6 <HAL_UART_Receive+0x86>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009950:	7033      	strb	r3, [r6, #0]
        pdata8bits++;
 8009952:	3601      	adds	r6, #1
 8009954:	e7f5      	b.n	8009942 <HAL_UART_Receive+0xe2>
        return HAL_TIMEOUT;
 8009956:	2003      	movs	r0, #3
 8009958:	e7ce      	b.n	80098f8 <HAL_UART_Receive+0x98>
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	000001ff 	.word	0x000001ff

08009960 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009960:	0003      	movs	r3, r0
{
 8009962:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009964:	2600      	movs	r6, #0
{
 8009966:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009968:	3390      	adds	r3, #144	; 0x90
 800996a:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 800996c:	f7fd f860 	bl	8006a30 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009970:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8009972:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	071b      	lsls	r3, r3, #28
 8009978:	d419      	bmi.n	80099ae <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	075b      	lsls	r3, r3, #29
 8009980:	d50a      	bpl.n	8009998 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009982:	2180      	movs	r1, #128	; 0x80
 8009984:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <UART_CheckIdleState+0x68>)
 8009986:	2200      	movs	r2, #0
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	0020      	movs	r0, r4
 800998c:	002b      	movs	r3, r5
 800998e:	03c9      	lsls	r1, r1, #15
 8009990:	f7ff fe98 	bl	80096c4 <UART_WaitOnFlagUntilTimeout>
 8009994:	2800      	cmp	r0, #0
 8009996:	d115      	bne.n	80099c4 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8009998:	0022      	movs	r2, r4
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800999c:	2320      	movs	r3, #32
 800999e:	3288      	adds	r2, #136	; 0x88
 80099a0:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80099a2:	6053      	str	r3, [r2, #4]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a4:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099a6:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80099a8:	3484      	adds	r4, #132	; 0x84
 80099aa:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80099ac:	e00b      	b.n	80099c6 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099ae:	2180      	movs	r1, #128	; 0x80
 80099b0:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <UART_CheckIdleState+0x68>)
 80099b2:	0032      	movs	r2, r6
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	0389      	lsls	r1, r1, #14
 80099b8:	0003      	movs	r3, r0
 80099ba:	0020      	movs	r0, r4
 80099bc:	f7ff fe82 	bl	80096c4 <UART_WaitOnFlagUntilTimeout>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d0da      	beq.n	800997a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80099c4:	2003      	movs	r0, #3
}
 80099c6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80099c8:	01ffffff 	.word	0x01ffffff

080099cc <HAL_UART_Init>:
{
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80099d0:	d101      	bne.n	80099d6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80099d2:	2001      	movs	r0, #1
}
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80099d6:	0005      	movs	r5, r0
 80099d8:	3588      	adds	r5, #136	; 0x88
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 80099e0:	0002      	movs	r2, r0
 80099e2:	3284      	adds	r2, #132	; 0x84
 80099e4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80099e6:	f7fc fdef 	bl	80065c8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80099ea:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80099ec:	2101      	movs	r1, #1
 80099ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80099f0:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80099f2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099f4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80099f6:	438b      	bics	r3, r1
 80099f8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099fa:	f7ff fd37 	bl	800946c <UART_SetConfig>
 80099fe:	2801      	cmp	r0, #1
 8009a00:	d0e7      	beq.n	80099d2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 8009a08:	0020      	movs	r0, r4
 8009a0a:	f7ff fdf3 	bl	80095f4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	4907      	ldr	r1, [pc, #28]	; (8009a30 <HAL_UART_Init+0x64>)
 8009a12:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8009a14:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a16:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a18:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a1c:	689a      	ldr	r2, [r3, #8]
 8009a1e:	438a      	bics	r2, r1
 8009a20:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009a22:	2201      	movs	r2, #1
 8009a24:	6819      	ldr	r1, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8009a2a:	f7ff ff99 	bl	8009960 <UART_CheckIdleState>
 8009a2e:	e7d1      	b.n	80099d4 <HAL_UART_Init+0x8>
 8009a30:	ffffb7ff 	.word	0xffffb7ff

08009a34 <UART_Start_Receive_DMA>:
{
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 8009a38:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3a:	0006      	movs	r6, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a3c:	0005      	movs	r5, r0
  huart->RxXferSize = Size;
 8009a3e:	325c      	adds	r2, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 8009a40:	6581      	str	r1, [r0, #88]	; 0x58
{
 8009a42:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 8009a44:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a46:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a48:	2200      	movs	r2, #0
 8009a4a:	3690      	adds	r6, #144	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a4c:	358c      	adds	r5, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a4e:	6032      	str	r2, [r6, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a50:	6029      	str	r1, [r5, #0]
  if (huart->hdmarx != NULL)
 8009a52:	1d01      	adds	r1, r0, #4
{
 8009a54:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 8009a56:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
 8009a58:	4290      	cmp	r0, r2
 8009a5a:	d013      	beq.n	8009a84 <UART_Start_Receive_DMA+0x50>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a5c:	491d      	ldr	r1, [pc, #116]	; (8009ad4 <UART_Start_Receive_DMA+0xa0>)
    huart->hdmarx->XferAbortCallback = NULL;
 8009a5e:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a60:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a62:	491d      	ldr	r1, [pc, #116]	; (8009ad8 <UART_Start_Receive_DMA+0xa4>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a64:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a66:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a68:	491c      	ldr	r1, [pc, #112]	; (8009adc <UART_Start_Receive_DMA+0xa8>)
 8009a6a:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a6c:	6821      	ldr	r1, [r4, #0]
 8009a6e:	3124      	adds	r1, #36	; 0x24
 8009a70:	f7fd fc08 	bl	8007284 <HAL_DMA_Start_IT>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d005      	beq.n	8009a84 <UART_Start_Receive_DMA+0x50>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a78:	2310      	movs	r3, #16
      return HAL_ERROR;
 8009a7a:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a7c:	6033      	str	r3, [r6, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8009a7e:	18db      	adds	r3, r3, r3
 8009a80:	602b      	str	r3, [r5, #0]
}
 8009a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00b      	beq.n	8009aa2 <UART_Start_Receive_DMA+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a8a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a8e:	2301      	movs	r3, #1
 8009a90:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a94:	6822      	ldr	r2, [r4, #0]
 8009a96:	33ff      	adds	r3, #255	; 0xff
 8009a98:	6810      	ldr	r0, [r2, #0]
 8009a9a:	4303      	orrs	r3, r0
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aa2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aac:	6821      	ldr	r1, [r4, #0]
 8009aae:	688a      	ldr	r2, [r1, #8]
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	608a      	str	r2, [r1, #8]
 8009ab4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ab8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009abc:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	333f      	adds	r3, #63	; 0x3f
 8009ac4:	6890      	ldr	r0, [r2, #8]
 8009ac6:	4303      	orrs	r3, r0
 8009ac8:	6093      	str	r3, [r2, #8]
 8009aca:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e7d7      	b.n	8009a82 <UART_Start_Receive_DMA+0x4e>
 8009ad2:	46c0      	nop			; (mov r8, r8)
 8009ad4:	080093cd 	.word	0x080093cd
 8009ad8:	080093a9 	.word	0x080093a9
 8009adc:	08008fff 	.word	0x08008fff

08009ae0 <HAL_UART_Receive_DMA>:
{
 8009ae0:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ae2:	308c      	adds	r0, #140	; 0x8c
{
 8009ae4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ae6:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 8009ae8:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8009aea:	2c20      	cmp	r4, #32
 8009aec:	d125      	bne.n	8009b3a <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 8009aee:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8009af0:	2900      	cmp	r1, #0
 8009af2:	d022      	beq.n	8009b3a <HAL_UART_Receive_DMA+0x5a>
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	d020      	beq.n	8009b3a <HAL_UART_Receive_DMA+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009af8:	2080      	movs	r0, #128	; 0x80
 8009afa:	689c      	ldr	r4, [r3, #8]
 8009afc:	0140      	lsls	r0, r0, #5
 8009afe:	4284      	cmp	r4, r0
 8009b00:	d105      	bne.n	8009b0e <HAL_UART_Receive_DMA+0x2e>
 8009b02:	6918      	ldr	r0, [r3, #16]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d102      	bne.n	8009b0e <HAL_UART_Receive_DMA+0x2e>
      return HAL_ERROR;
 8009b08:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8009b0a:	4201      	tst	r1, r0
 8009b0c:	d115      	bne.n	8009b3a <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b0e:	2000      	movs	r0, #0
 8009b10:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b12:	6818      	ldr	r0, [r3, #0]
 8009b14:	6840      	ldr	r0, [r0, #4]
 8009b16:	0200      	lsls	r0, r0, #8
 8009b18:	d50c      	bpl.n	8009b34 <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b1a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b24:	2080      	movs	r0, #128	; 0x80
 8009b26:	681c      	ldr	r4, [r3, #0]
 8009b28:	04c0      	lsls	r0, r0, #19
 8009b2a:	6826      	ldr	r6, [r4, #0]
 8009b2c:	4330      	orrs	r0, r6
 8009b2e:	6020      	str	r0, [r4, #0]
 8009b30:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009b34:	0018      	movs	r0, r3
 8009b36:	f7ff ff7d 	bl	8009a34 <UART_Start_Receive_DMA>
}
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}

08009b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b3e:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b40:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8009b42:	0004      	movs	r4, r0
 8009b44:	376a      	adds	r7, #106	; 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d104      	bne.n	8009b54 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8009b4e:	3468      	adds	r4, #104	; 0x68
 8009b50:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b54:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b56:	4e0b      	ldr	r6, [pc, #44]	; (8009b84 <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b58:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b5a:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b5c:	4d0a      	ldr	r5, [pc, #40]	; (8009b88 <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b5e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b60:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b62:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b64:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b66:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b68:	f7f6 fb7e 	bl	8000268 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b6c:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b6e:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b70:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b72:	0f5b      	lsrs	r3, r3, #29
 8009b74:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b76:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b78:	00c0      	lsls	r0, r0, #3
 8009b7a:	f7f6 fb75 	bl	8000268 <__divsi3>
 8009b7e:	b280      	uxth	r0, r0
}
 8009b80:	e7e5      	b.n	8009b4e <UARTEx_SetNbDataToProcess+0x12>
 8009b82:	46c0      	nop			; (mov r8, r8)
 8009b84:	08011eac 	.word	0x08011eac
 8009b88:	08011ea4 	.word	0x08011ea4

08009b8c <HAL_UARTEx_WakeupCallback>:
}
 8009b8c:	4770      	bx	lr

08009b8e <HAL_UARTEx_RxFifoFullCallback>:
 8009b8e:	4770      	bx	lr

08009b90 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009b90:	4770      	bx	lr
	...

08009b94 <HAL_UARTEx_DisableFifoMode>:
{
 8009b94:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8009b96:	0004      	movs	r4, r0
 8009b98:	3484      	adds	r4, #132	; 0x84
 8009b9a:	7822      	ldrb	r2, [r4, #0]
{
 8009b9c:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8009b9e:	2002      	movs	r0, #2
 8009ba0:	2a01      	cmp	r2, #1
 8009ba2:	d011      	beq.n	8009bc8 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8009ba4:	001d      	movs	r5, r3
 8009ba6:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8009ba8:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8009baa:	3588      	adds	r5, #136	; 0x88
 8009bac:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009bb2:	6810      	ldr	r0, [r2, #0]
 8009bb4:	43b0      	bics	r0, r6
 8009bb6:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bb8:	4804      	ldr	r0, [pc, #16]	; (8009bcc <HAL_UARTEx_DisableFifoMode+0x38>)
 8009bba:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8009bc0:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009bc4:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8009bc6:	7020      	strb	r0, [r4, #0]
}
 8009bc8:	bd70      	pop	{r4, r5, r6, pc}
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	dfffffff 	.word	0xdfffffff

08009bd0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8009bd2:	0005      	movs	r5, r0
 8009bd4:	3584      	adds	r5, #132	; 0x84
{
 8009bd6:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8009bd8:	7829      	ldrb	r1, [r5, #0]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	2901      	cmp	r1, #1
 8009bde:	d015      	beq.n	8009c0c <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8009be0:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8009be2:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009be4:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009be6:	3688      	adds	r6, #136	; 0x88
 8009be8:	3222      	adds	r2, #34	; 0x22
 8009bea:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bec:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8009bee:	6822      	ldr	r2, [r4, #0]
 8009bf0:	438a      	bics	r2, r1
 8009bf2:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bf4:	68a1      	ldr	r1, [r4, #8]
 8009bf6:	00c9      	lsls	r1, r1, #3
 8009bf8:	08c9      	lsrs	r1, r1, #3
 8009bfa:	4319      	orrs	r1, r3
 8009bfc:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009bfe:	f7ff ff9d 	bl	8009b3c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8009c02:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8009c04:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c06:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009c08:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8009c0a:	702a      	strb	r2, [r5, #0]
}
 8009c0c:	0010      	movs	r0, r2
 8009c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c10 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8009c12:	0005      	movs	r5, r0
 8009c14:	3584      	adds	r5, #132	; 0x84
{
 8009c16:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8009c18:	7829      	ldrb	r1, [r5, #0]
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	2901      	cmp	r1, #1
 8009c1e:	d015      	beq.n	8009c4c <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8009c20:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8009c22:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c24:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009c26:	3688      	adds	r6, #136	; 0x88
 8009c28:	3322      	adds	r3, #34	; 0x22
 8009c2a:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c2c:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	438b      	bics	r3, r1
 8009c32:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c34:	68a1      	ldr	r1, [r4, #8]
 8009c36:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8009c38:	4019      	ands	r1, r3
 8009c3a:	4311      	orrs	r1, r2
 8009c3c:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009c3e:	f7ff ff7d 	bl	8009b3c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8009c42:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c44:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009c46:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8009c48:	2300      	movs	r3, #0
 8009c4a:	702b      	strb	r3, [r5, #0]
}
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c50:	f1ffffff 	.word	0xf1ffffff

08009c54 <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 8009c54:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 8009c56:	b510      	push	{r4, lr}
  SysTick->CTRL;
 8009c58:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009c5a:	f000 ffbb 	bl	800abd4 <xTaskGetSchedulerState>
 8009c5e:	2801      	cmp	r0, #1
 8009c60:	d001      	beq.n	8009c66 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 8009c62:	f001 fa3f 	bl	800b0e4 <xPortSysTickHandler>
  }
}
 8009c66:	bd10      	pop	{r4, pc}
 8009c68:	e000e010 	.word	0xe000e010

08009c6c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c6c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <osKernelInitialize+0x20>)
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d105      	bne.n	8009c88 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 8009c80:	4770      	bx	lr
    stat = osErrorISR;
 8009c82:	2006      	movs	r0, #6
      stat = osError;
 8009c84:	4240      	negs	r0, r0
  return (stat);
 8009c86:	e7fb      	b.n	8009c80 <osKernelInitialize+0x14>
      stat = osError;
 8009c88:	2001      	movs	r0, #1
 8009c8a:	e7fb      	b.n	8009c84 <osKernelInitialize+0x18>
 8009c8c:	20004204 	.word	0x20004204

08009c90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c90:	b510      	push	{r4, lr}
 8009c92:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c96:	2c00      	cmp	r4, #0
 8009c98:	d10e      	bne.n	8009cb8 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009c9a:	4a0a      	ldr	r2, [pc, #40]	; (8009cc4 <osKernelStart+0x34>)
 8009c9c:	6813      	ldr	r3, [r2, #0]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d10d      	bne.n	8009cbe <osKernelStart+0x2e>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ca2:	4909      	ldr	r1, [pc, #36]	; (8009cc8 <osKernelStart+0x38>)
 8009ca4:	69cb      	ldr	r3, [r1, #28]
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	0a1b      	lsrs	r3, r3, #8
 8009caa:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009cac:	2302      	movs	r3, #2
 8009cae:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009cb0:	f000 fd58 	bl	800a764 <vTaskStartScheduler>
      stat = osOK;
 8009cb4:	0020      	movs	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009cb6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009cb8:	2006      	movs	r0, #6
      stat = osError;
 8009cba:	4240      	negs	r0, r0
  return (stat);
 8009cbc:	e7fb      	b.n	8009cb6 <osKernelStart+0x26>
      stat = osError;
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	e7fb      	b.n	8009cba <osKernelStart+0x2a>
 8009cc2:	46c0      	nop			; (mov r8, r8)
 8009cc4:	20004204 	.word	0x20004204
 8009cc8:	e000ed00 	.word	0xe000ed00

08009ccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cce:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009cd0:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009cd2:	b089      	sub	sp, #36	; 0x24
 8009cd4:	9105      	str	r1, [sp, #20]
  hTask = NULL;
 8009cd6:	9207      	str	r2, [sp, #28]
 8009cd8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009cdc:	2a00      	cmp	r2, #0
 8009cde:	d124      	bne.n	8009d2a <osThreadNew+0x5e>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d022      	beq.n	8009d2a <osThreadNew+0x5e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009ce4:	2c00      	cmp	r4, #0
 8009ce6:	d036      	beq.n	8009d56 <osThreadNew+0x8a>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009ce8:	69a5      	ldr	r5, [r4, #24]
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	d100      	bne.n	8009cf0 <osThreadNew+0x24>
 8009cee:	3518      	adds	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cf0:	1e69      	subs	r1, r5, #1
 8009cf2:	002f      	movs	r7, r5
        return (NULL);
 8009cf4:	2200      	movs	r2, #0
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cf6:	2937      	cmp	r1, #55	; 0x37
 8009cf8:	d818      	bhi.n	8009d2c <osThreadNew+0x60>
 8009cfa:	6861      	ldr	r1, [r4, #4]
 8009cfc:	07c9      	lsls	r1, r1, #31
 8009cfe:	d415      	bmi.n	8009d2c <osThreadNew+0x60>
      }

      if (attr->stack_size > 0U) {
 8009d00:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 8009d02:	3280      	adds	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 8009d04:	2e00      	cmp	r6, #0
 8009d06:	d000      	beq.n	8009d0a <osThreadNew+0x3e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d08:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d0a:	68a3      	ldr	r3, [r4, #8]
      if (attr->name != NULL) {
 8009d0c:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d0e:	9304      	str	r3, [sp, #16]
 8009d10:	68e3      	ldr	r3, [r4, #12]
 8009d12:	469c      	mov	ip, r3
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <osThreadNew+0x66>
 8009d1a:	4663      	mov	r3, ip
 8009d1c:	2ba7      	cmp	r3, #167	; 0xa7
 8009d1e:	d904      	bls.n	8009d2a <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d20:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d22:	2c00      	cmp	r4, #0
 8009d24:	d001      	beq.n	8009d2a <osThreadNew+0x5e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	d119      	bne.n	8009d5e <osThreadNew+0x92>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d2a:	9a07      	ldr	r2, [sp, #28]
}
 8009d2c:	0010      	movs	r0, r2
 8009d2e:	b009      	add	sp, #36	; 0x24
 8009d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d32:	4663      	mov	r3, ip
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f8      	bne.n	8009d2a <osThreadNew+0x5e>
      if (mem == 0) {
 8009d38:	6924      	ldr	r4, [r4, #16]
 8009d3a:	2c00      	cmp	r4, #0
 8009d3c:	d1f5      	bne.n	8009d2a <osThreadNew+0x5e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d3e:	ac07      	add	r4, sp, #28
 8009d40:	9b05      	ldr	r3, [sp, #20]
 8009d42:	b292      	uxth	r2, r2
 8009d44:	9401      	str	r4, [sp, #4]
 8009d46:	9700      	str	r7, [sp, #0]
 8009d48:	f000 fce0 	bl	800a70c <xTaskCreate>
 8009d4c:	2801      	cmp	r0, #1
 8009d4e:	d0ec      	beq.n	8009d2a <osThreadNew+0x5e>
            hTask = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	9307      	str	r3, [sp, #28]
 8009d54:	e7e9      	b.n	8009d2a <osThreadNew+0x5e>
    name = NULL;
 8009d56:	0021      	movs	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8009d58:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8009d5a:	2280      	movs	r2, #128	; 0x80
 8009d5c:	e7ef      	b.n	8009d3e <osThreadNew+0x72>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	9401      	str	r4, [sp, #4]
 8009d62:	9302      	str	r3, [sp, #8]
 8009d64:	9500      	str	r5, [sp, #0]
 8009d66:	9b05      	ldr	r3, [sp, #20]
 8009d68:	f000 fcaa 	bl	800a6c0 <xTaskCreateStatic>
 8009d6c:	9007      	str	r0, [sp, #28]
 8009d6e:	e7dc      	b.n	8009d2a <osThreadNew+0x5e>

08009d70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d70:	b510      	push	{r4, lr}
 8009d72:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	d105      	bne.n	8009d86 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d001      	beq.n	8009d82 <osDelay+0x12>
      vTaskDelay(ticks);
 8009d7e:	f000 fe2b 	bl	800a9d8 <vTaskDelay>
    }
  }

  return (stat);
}
 8009d82:	0020      	movs	r0, r4
 8009d84:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009d86:	2406      	movs	r4, #6
 8009d88:	4264      	negs	r4, r4
 8009d8a:	e7fa      	b.n	8009d82 <osDelay+0x12>

08009d8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d8e:	0014      	movs	r4, r2
 8009d90:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009d94:	2e00      	cmp	r6, #0
 8009d96:	d002      	beq.n	8009d9e <osMessageQueueNew+0x12>
  hQueue = NULL;
 8009d98:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009d9a:	0028      	movs	r0, r5
 8009d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d0fa      	beq.n	8009d98 <osMessageQueueNew+0xc>
 8009da2:	2900      	cmp	r1, #0
 8009da4:	d0f8      	beq.n	8009d98 <osMessageQueueNew+0xc>
    if (attr != NULL) {
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	d01c      	beq.n	8009de4 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009daa:	6893      	ldr	r3, [r2, #8]
 8009dac:	68d2      	ldr	r2, [r2, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d010      	beq.n	8009dd4 <osMessageQueueNew+0x48>
 8009db2:	2a4f      	cmp	r2, #79	; 0x4f
 8009db4:	d9f0      	bls.n	8009d98 <osMessageQueueNew+0xc>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009db6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009db8:	2a00      	cmp	r2, #0
 8009dba:	d0ed      	beq.n	8009d98 <osMessageQueueNew+0xc>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009dbc:	000d      	movs	r5, r1
 8009dbe:	4345      	muls	r5, r0
 8009dc0:	6967      	ldr	r7, [r4, #20]
 8009dc2:	42af      	cmp	r7, r5
 8009dc4:	d3e8      	bcc.n	8009d98 <osMessageQueueNew+0xc>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009dc6:	9600      	str	r6, [sp, #0]
 8009dc8:	f000 f931 	bl	800a02e <xQueueGenericCreateStatic>
 8009dcc:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8009dce:	d0e3      	beq.n	8009d98 <osMessageQueueNew+0xc>
        name = attr->name;
 8009dd0:	6824      	ldr	r4, [r4, #0]
 8009dd2:	e00e      	b.n	8009df2 <osMessageQueueNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	d1df      	bne.n	8009d98 <osMessageQueueNew+0xc>
 8009dd8:	6923      	ldr	r3, [r4, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1dc      	bne.n	8009d98 <osMessageQueueNew+0xc>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009dde:	6963      	ldr	r3, [r4, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1d9      	bne.n	8009d98 <osMessageQueueNew+0xc>
          hQueue = xQueueCreate (msg_count, msg_size);
 8009de4:	2200      	movs	r2, #0
 8009de6:	f000 f953 	bl	800a090 <xQueueGenericCreate>
 8009dea:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 8009dec:	d0d4      	beq.n	8009d98 <osMessageQueueNew+0xc>
      if (attr != NULL) {
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	d1ee      	bne.n	8009dd0 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8009df2:	0021      	movs	r1, r4
 8009df4:	0028      	movs	r0, r5
 8009df6:	f000 facd 	bl	800a394 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8009dfa:	e7ce      	b.n	8009d9a <osMessageQueueNew+0xe>

08009dfc <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009dfc:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <vApplicationGetIdleTaskMemory+0x10>)
 8009dfe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e00:	4b03      	ldr	r3, [pc, #12]	; (8009e10 <vApplicationGetIdleTaskMemory+0x14>)
 8009e02:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e04:	2380      	movs	r3, #128	; 0x80
 8009e06:	6013      	str	r3, [r2, #0]
}
 8009e08:	4770      	bx	lr
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	2000415c 	.word	0x2000415c
 8009e10:	20003f5c 	.word	0x20003f5c

08009e14 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e14:	4b03      	ldr	r3, [pc, #12]	; (8009e24 <vApplicationGetTimerTaskMemory+0x10>)
 8009e16:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e18:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <vApplicationGetTimerTaskMemory+0x14>)
 8009e1a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e1c:	2380      	movs	r3, #128	; 0x80
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	6013      	str	r3, [r2, #0]
}
 8009e22:	4770      	bx	lr
 8009e24:	20004608 	.word	0x20004608
 8009e28:	20004208 	.word	0x20004208

08009e2c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e2c:	0003      	movs	r3, r0
 8009e2e:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e30:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e32:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e34:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e36:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e38:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e3a:	4252      	negs	r2, r2
 8009e3c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e3e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e40:	4770      	bx	lr

08009e42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e46:	4770      	bx	lr

08009e48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e48:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e4a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8009e4c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e4e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e54:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009e56:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009e58:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	6003      	str	r3, [r0, #0]
}
 8009e5e:	4770      	bx	lr

08009e60 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e60:	0002      	movs	r2, r0
{
 8009e62:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e64:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e66:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8009e68:	1c63      	adds	r3, r4, #1
 8009e6a:	d10a      	bne.n	8009e82 <vListInsert+0x22>
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e6c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e72:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e74:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e76:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009e78:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009e7a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	6003      	str	r3, [r0, #0]
}
 8009e80:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e82:	0013      	movs	r3, r2
 8009e84:	6852      	ldr	r2, [r2, #4]
 8009e86:	6815      	ldr	r5, [r2, #0]
 8009e88:	42a5      	cmp	r5, r4
 8009e8a:	d9fa      	bls.n	8009e82 <vListInsert+0x22>
 8009e8c:	e7ef      	b.n	8009e6e <vListInsert+0xe>

08009e8e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e8e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e90:	6841      	ldr	r1, [r0, #4]
 8009e92:	6882      	ldr	r2, [r0, #8]
 8009e94:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e96:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e98:	6859      	ldr	r1, [r3, #4]
 8009e9a:	4281      	cmp	r1, r0
 8009e9c:	d100      	bne.n	8009ea0 <uxListRemove+0x12>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	3a01      	subs	r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009eaa:	6818      	ldr	r0, [r3, #0]
}
 8009eac:	4770      	bx	lr

08009eae <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eb2:	f001 f8cd 	bl	800b050 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009eb6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009eb8:	f001 f8d6 	bl	800b068 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ebc:	4260      	negs	r0, r4
 8009ebe:	4160      	adcs	r0, r4

	return xReturn;
}
 8009ec0:	bd10      	pop	{r4, pc}

08009ec2 <prvCopyDataToQueue>:
{
 8009ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec4:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ec6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8009ec8:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eca:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ecc:	2a00      	cmp	r2, #0
 8009ece:	d10c      	bne.n	8009eea <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ed0:	6807      	ldr	r7, [r0, #0]
BaseType_t xReturn = pdFALSE;
 8009ed2:	0015      	movs	r5, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ed4:	2f00      	cmp	r7, #0
 8009ed6:	d104      	bne.n	8009ee2 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ed8:	6880      	ldr	r0, [r0, #8]
 8009eda:	f000 fe8b 	bl	800abf4 <xTaskPriorityDisinherit>
 8009ede:	0005      	movs	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ee0:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ee2:	3601      	adds	r6, #1
}
 8009ee4:	0028      	movs	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ee6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8009eea:	2d00      	cmp	r5, #0
 8009eec:	d10c      	bne.n	8009f08 <prvCopyDataToQueue+0x46>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eee:	6840      	ldr	r0, [r0, #4]
 8009ef0:	f003 fb5c 	bl	800d5ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ef4:	6863      	ldr	r3, [r4, #4]
 8009ef6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009ef8:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009efa:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009efc:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d3ef      	bcc.n	8009ee2 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	e7ec      	b.n	8009ee2 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f08:	68c0      	ldr	r0, [r0, #12]
 8009f0a:	f003 fb4f 	bl	800d5ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009f10:	68e3      	ldr	r3, [r4, #12]
 8009f12:	4251      	negs	r1, r2
 8009f14:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f16:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f18:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d202      	bcs.n	8009f24 <prvCopyDataToQueue+0x62>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f1e:	68a3      	ldr	r3, [r4, #8]
 8009f20:	185b      	adds	r3, r3, r1
 8009f22:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009f24:	2d02      	cmp	r5, #2
 8009f26:	d105      	bne.n	8009f34 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8009f28:	0033      	movs	r3, r6
 8009f2a:	1e5a      	subs	r2, r3, #1
 8009f2c:	4193      	sbcs	r3, r2
BaseType_t xReturn = pdFALSE;
 8009f2e:	2500      	movs	r5, #0
				--uxMessagesWaiting;
 8009f30:	1af6      	subs	r6, r6, r3
 8009f32:	e7d6      	b.n	8009ee2 <prvCopyDataToQueue+0x20>
BaseType_t xReturn = pdFALSE;
 8009f34:	2500      	movs	r5, #0
 8009f36:	e7d4      	b.n	8009ee2 <prvCopyDataToQueue+0x20>

08009f38 <prvCopyDataFromQueue>:
{
 8009f38:	0003      	movs	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8009f3c:	0008      	movs	r0, r1
 8009f3e:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f40:	2a00      	cmp	r2, #0
 8009f42:	d00a      	beq.n	8009f5a <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f44:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f46:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f48:	18a4      	adds	r4, r4, r2
 8009f4a:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f4c:	428c      	cmp	r4, r1
 8009f4e:	d301      	bcc.n	8009f54 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f50:	6819      	ldr	r1, [r3, #0]
 8009f52:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f54:	68d9      	ldr	r1, [r3, #12]
 8009f56:	f003 fb29 	bl	800d5ac <memcpy>
}
 8009f5a:	bd10      	pop	{r4, pc}

08009f5c <prvUnlockQueue>:
{
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
 8009f60:	0026      	movs	r6, r4
 8009f62:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
 8009f64:	f001 f874 	bl	800b050 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009f68:	7835      	ldrb	r5, [r6, #0]
 8009f6a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f6c:	2d00      	cmp	r5, #0
 8009f6e:	dc10      	bgt.n	8009f92 <prvUnlockQueue+0x36>
		pxQueue->cTxLock = queueUNLOCKED;
 8009f70:	23ff      	movs	r3, #255	; 0xff
 8009f72:	7033      	strb	r3, [r6, #0]
		int8_t cRxLock = pxQueue->cRxLock;
 8009f74:	0026      	movs	r6, r4
 8009f76:	3644      	adds	r6, #68	; 0x44
	taskEXIT_CRITICAL();
 8009f78:	f001 f876 	bl	800b068 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009f7c:	f001 f868 	bl	800b050 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009f80:	7835      	ldrb	r5, [r6, #0]
 8009f82:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f84:	2d00      	cmp	r5, #0
 8009f86:	dc11      	bgt.n	8009fac <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8009f88:	23ff      	movs	r3, #255	; 0xff
 8009f8a:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
 8009f8c:	f001 f86c 	bl	800b068 <vPortExitCritical>
}
 8009f90:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0eb      	beq.n	8009f70 <prvUnlockQueue+0x14>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f98:	0020      	movs	r0, r4
 8009f9a:	3024      	adds	r0, #36	; 0x24
 8009f9c:	f000 fd9c 	bl	800aad8 <xTaskRemoveFromEventList>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d001      	beq.n	8009fa8 <prvUnlockQueue+0x4c>
						vTaskMissedYield();
 8009fa4:	f000 fe10 	bl	800abc8 <vTaskMissedYield>
			--cTxLock;
 8009fa8:	3d01      	subs	r5, #1
 8009faa:	e7de      	b.n	8009f6a <prvUnlockQueue+0xe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0ea      	beq.n	8009f88 <prvUnlockQueue+0x2c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fb2:	0020      	movs	r0, r4
 8009fb4:	3010      	adds	r0, #16
 8009fb6:	f000 fd8f 	bl	800aad8 <xTaskRemoveFromEventList>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d001      	beq.n	8009fc2 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8009fbe:	f000 fe03 	bl	800abc8 <vTaskMissedYield>
				--cRxLock;
 8009fc2:	3d01      	subs	r5, #1
 8009fc4:	e7dd      	b.n	8009f82 <prvUnlockQueue+0x26>

08009fc6 <xQueueGenericReset>:
{
 8009fc6:	b570      	push	{r4, r5, r6, lr}
 8009fc8:	0004      	movs	r4, r0
 8009fca:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d101      	bne.n	8009fd4 <xQueueGenericReset+0xe>
 8009fd0:	b672      	cpsid	i
 8009fd2:	e7fe      	b.n	8009fd2 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 8009fd4:	f001 f83c 	bl	800b050 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009fda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009fdc:	6822      	ldr	r2, [r4, #0]
 8009fde:	434b      	muls	r3, r1
 8009fe0:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fe2:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fe4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fe6:	18d2      	adds	r2, r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 8009fe8:	0023      	movs	r3, r4
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fea:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fec:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fee:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff0:	22ff      	movs	r2, #255	; 0xff
 8009ff2:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ff4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff6:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 8009ff8:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
 8009ffa:	4285      	cmp	r5, r0
 8009ffc:	d10e      	bne.n	800a01c <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	4283      	cmp	r3, r0
 800a002:	d007      	beq.n	800a014 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a004:	0020      	movs	r0, r4
 800a006:	3010      	adds	r0, #16
 800a008:	f000 fd66 	bl	800aad8 <xTaskRemoveFromEventList>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d001      	beq.n	800a014 <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
 800a010:	f001 f812 	bl	800b038 <vPortYield>
	taskEXIT_CRITICAL();
 800a014:	f001 f828 	bl	800b068 <vPortExitCritical>
}
 800a018:	2001      	movs	r0, #1
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a01c:	0020      	movs	r0, r4
 800a01e:	3010      	adds	r0, #16
 800a020:	f7ff ff04 	bl	8009e2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a024:	0020      	movs	r0, r4
 800a026:	3024      	adds	r0, #36	; 0x24
 800a028:	f7ff ff00 	bl	8009e2c <vListInitialise>
 800a02c:	e7f2      	b.n	800a014 <xQueueGenericReset+0x4e>

0800a02e <xQueueGenericCreateStatic>:
	{
 800a02e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a030:	001c      	movs	r4, r3
 800a032:	ab06      	add	r3, sp, #24
 800a034:	781d      	ldrb	r5, [r3, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a036:	2800      	cmp	r0, #0
 800a038:	d101      	bne.n	800a03e <xQueueGenericCreateStatic+0x10>
 800a03a:	b672      	cpsid	i
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericCreateStatic+0xe>
		configASSERT( pxStaticQueue != NULL );
 800a03e:	2c00      	cmp	r4, #0
 800a040:	d101      	bne.n	800a046 <xQueueGenericCreateStatic+0x18>
 800a042:	b672      	cpsid	i
 800a044:	e7fe      	b.n	800a044 <xQueueGenericCreateStatic+0x16>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a046:	2a00      	cmp	r2, #0
 800a048:	d003      	beq.n	800a052 <xQueueGenericCreateStatic+0x24>
 800a04a:	2900      	cmp	r1, #0
 800a04c:	d105      	bne.n	800a05a <xQueueGenericCreateStatic+0x2c>
 800a04e:	b672      	cpsid	i
 800a050:	e7fe      	b.n	800a050 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a052:	2900      	cmp	r1, #0
 800a054:	d001      	beq.n	800a05a <xQueueGenericCreateStatic+0x2c>
 800a056:	b672      	cpsid	i
 800a058:	e7fe      	b.n	800a058 <xQueueGenericCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a05a:	2350      	movs	r3, #80	; 0x50
 800a05c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	2b50      	cmp	r3, #80	; 0x50
 800a062:	d001      	beq.n	800a068 <xQueueGenericCreateStatic+0x3a>
 800a064:	b672      	cpsid	i
 800a066:	e7fe      	b.n	800a066 <xQueueGenericCreateStatic+0x38>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a068:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a06a:	0023      	movs	r3, r4
 800a06c:	2601      	movs	r6, #1
 800a06e:	3346      	adds	r3, #70	; 0x46
 800a070:	701e      	strb	r6, [r3, #0]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a072:	2900      	cmp	r1, #0
 800a074:	d100      	bne.n	800a078 <xQueueGenericCreateStatic+0x4a>
 800a076:	0022      	movs	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 800a078:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a07a:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a07c:	0020      	movs	r0, r4
 800a07e:	2101      	movs	r1, #1
 800a080:	6022      	str	r2, [r4, #0]
 800a082:	f7ff ffa0 	bl	8009fc6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a086:	0023      	movs	r3, r4
 800a088:	334c      	adds	r3, #76	; 0x4c
	}
 800a08a:	0020      	movs	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800a08c:	701d      	strb	r5, [r3, #0]
	}
 800a08e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800a090 <xQueueGenericCreate>:
	{
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	0006      	movs	r6, r0
 800a094:	000d      	movs	r5, r1
 800a096:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a098:	2800      	cmp	r0, #0
 800a09a:	d101      	bne.n	800a0a0 <xQueueGenericCreate+0x10>
 800a09c:	b672      	cpsid	i
 800a09e:	e7fe      	b.n	800a09e <xQueueGenericCreate+0xe>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0a0:	0008      	movs	r0, r1
 800a0a2:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0a4:	3050      	adds	r0, #80	; 0x50
 800a0a6:	f001 f88b 	bl	800b1c0 <pvPortMalloc>
 800a0aa:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 800a0ac:	d011      	beq.n	800a0d2 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0ae:	0003      	movs	r3, r0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	3346      	adds	r3, #70	; 0x46
 800a0b4:	701a      	strb	r2, [r3, #0]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0b6:	0003      	movs	r3, r0
 800a0b8:	4295      	cmp	r5, r2
 800a0ba:	d000      	beq.n	800a0be <xQueueGenericCreate+0x2e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0bc:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0be:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	0020      	movs	r0, r4
	pxNewQueue->uxLength = uxQueueLength;
 800a0c4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0c6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0c8:	f7ff ff7d 	bl	8009fc6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a0cc:	0023      	movs	r3, r4
 800a0ce:	334c      	adds	r3, #76	; 0x4c
 800a0d0:	701f      	strb	r7, [r3, #0]
	}
 800a0d2:	0020      	movs	r0, r4
 800a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0d6 <xQueueGenericSend>:
{
 800a0d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	0004      	movs	r4, r0
 800a0dc:	000d      	movs	r5, r1
 800a0de:	001f      	movs	r7, r3
 800a0e0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d101      	bne.n	800a0ea <xQueueGenericSend+0x14>
 800a0e6:	b672      	cpsid	i
 800a0e8:	e7fe      	b.n	800a0e8 <xQueueGenericSend+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	d104      	bne.n	800a0f8 <xQueueGenericSend+0x22>
 800a0ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <xQueueGenericSend+0x22>
 800a0f4:	b672      	cpsid	i
 800a0f6:	e7fe      	b.n	800a0f6 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0f8:	2f02      	cmp	r7, #2
 800a0fa:	d104      	bne.n	800a106 <xQueueGenericSend+0x30>
 800a0fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d001      	beq.n	800a106 <xQueueGenericSend+0x30>
 800a102:	b672      	cpsid	i
 800a104:	e7fe      	b.n	800a104 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a106:	f000 fd65 	bl	800abd4 <xTaskGetSchedulerState>
 800a10a:	1e06      	subs	r6, r0, #0
 800a10c:	d104      	bne.n	800a118 <xQueueGenericSend+0x42>
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d04d      	beq.n	800a1b0 <xQueueGenericSend+0xda>
 800a114:	b672      	cpsid	i
 800a116:	e7fe      	b.n	800a116 <xQueueGenericSend+0x40>
 800a118:	2600      	movs	r6, #0
 800a11a:	e049      	b.n	800a1b0 <xQueueGenericSend+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a11c:	9b01      	ldr	r3, [sp, #4]
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d103      	bne.n	800a12c <xQueueGenericSend+0x56>
					taskEXIT_CRITICAL();
 800a124:	f000 ffa0 	bl	800b068 <vPortExitCritical>
			return errQUEUE_FULL;
 800a128:	2000      	movs	r0, #0
 800a12a:	e05c      	b.n	800a1e6 <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 800a12c:	2e00      	cmp	r6, #0
 800a12e:	d102      	bne.n	800a136 <xQueueGenericSend+0x60>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a130:	a802      	add	r0, sp, #8
 800a132:	f000 fd0b 	bl	800ab4c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a136:	f000 ff97 	bl	800b068 <vPortExitCritical>
		vTaskSuspendAll();
 800a13a:	f000 fb53 	bl	800a7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a13e:	f000 ff87 	bl	800b050 <vPortEnterCritical>
 800a142:	0022      	movs	r2, r4
 800a144:	3244      	adds	r2, #68	; 0x44
 800a146:	7813      	ldrb	r3, [r2, #0]
 800a148:	b25b      	sxtb	r3, r3
 800a14a:	3301      	adds	r3, #1
 800a14c:	d101      	bne.n	800a152 <xQueueGenericSend+0x7c>
 800a14e:	2300      	movs	r3, #0
 800a150:	7013      	strb	r3, [r2, #0]
 800a152:	0022      	movs	r2, r4
 800a154:	3245      	adds	r2, #69	; 0x45
 800a156:	7813      	ldrb	r3, [r2, #0]
 800a158:	b25b      	sxtb	r3, r3
 800a15a:	3301      	adds	r3, #1
 800a15c:	d101      	bne.n	800a162 <xQueueGenericSend+0x8c>
 800a15e:	2300      	movs	r3, #0
 800a160:	7013      	strb	r3, [r2, #0]
 800a162:	f000 ff81 	bl	800b068 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a166:	a901      	add	r1, sp, #4
 800a168:	a802      	add	r0, sp, #8
 800a16a:	f000 fcfb 	bl	800ab64 <xTaskCheckForTimeOut>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d13b      	bne.n	800a1ea <xQueueGenericSend+0x114>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a172:	f000 ff6d 	bl	800b050 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a176:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d110      	bne.n	800a1a0 <xQueueGenericSend+0xca>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a17e:	f000 ff73 	bl	800b068 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a182:	0020      	movs	r0, r4
 800a184:	9901      	ldr	r1, [sp, #4]
 800a186:	3010      	adds	r0, #16
 800a188:	f000 fc7c 	bl	800aa84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a18c:	0020      	movs	r0, r4
 800a18e:	f7ff fee5 	bl	8009f5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a192:	f000 fbb9 	bl	800a908 <xTaskResumeAll>
 800a196:	2800      	cmp	r0, #0
 800a198:	d109      	bne.n	800a1ae <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 800a19a:	f000 ff4d 	bl	800b038 <vPortYield>
 800a19e:	e006      	b.n	800a1ae <xQueueGenericSend+0xd8>
	taskEXIT_CRITICAL();
 800a1a0:	f000 ff62 	bl	800b068 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800a1a4:	0020      	movs	r0, r4
 800a1a6:	f7ff fed9 	bl	8009f5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1aa:	f000 fbad 	bl	800a908 <xTaskResumeAll>
 800a1ae:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a1b0:	f000 ff4e 	bl	800b050 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a1b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d301      	bcc.n	800a1c0 <xQueueGenericSend+0xea>
 800a1bc:	2f02      	cmp	r7, #2
 800a1be:	d1ad      	bne.n	800a11c <xQueueGenericSend+0x46>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1c0:	003a      	movs	r2, r7
 800a1c2:	0029      	movs	r1, r5
 800a1c4:	0020      	movs	r0, r4
 800a1c6:	f7ff fe7c 	bl	8009ec2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <xQueueGenericSend+0x102>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1d0:	0020      	movs	r0, r4
 800a1d2:	3024      	adds	r0, #36	; 0x24
 800a1d4:	f000 fc80 	bl	800aad8 <xTaskRemoveFromEventList>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d001      	beq.n	800a1e0 <xQueueGenericSend+0x10a>
							queueYIELD_IF_USING_PREEMPTION();
 800a1dc:	f000 ff2c 	bl	800b038 <vPortYield>
				taskEXIT_CRITICAL();
 800a1e0:	f000 ff42 	bl	800b068 <vPortExitCritical>
				return pdPASS;
 800a1e4:	2001      	movs	r0, #1
}
 800a1e6:	b005      	add	sp, #20
 800a1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800a1ea:	0020      	movs	r0, r4
 800a1ec:	f7ff feb6 	bl	8009f5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1f0:	f000 fb8a 	bl	800a908 <xTaskResumeAll>
 800a1f4:	e798      	b.n	800a128 <xQueueGenericSend+0x52>

0800a1f6 <xQueueGenericSendFromISR>:
{
 800a1f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f8:	b085      	sub	sp, #20
 800a1fa:	0004      	movs	r4, r0
 800a1fc:	0017      	movs	r7, r2
 800a1fe:	001e      	movs	r6, r3
 800a200:	9101      	str	r1, [sp, #4]
	configASSERT( pxQueue );
 800a202:	2800      	cmp	r0, #0
 800a204:	d101      	bne.n	800a20a <xQueueGenericSendFromISR+0x14>
 800a206:	b672      	cpsid	i
 800a208:	e7fe      	b.n	800a208 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a20a:	9b01      	ldr	r3, [sp, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d104      	bne.n	800a21a <xQueueGenericSendFromISR+0x24>
 800a210:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <xQueueGenericSendFromISR+0x24>
 800a216:	b672      	cpsid	i
 800a218:	e7fe      	b.n	800a218 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a21a:	2e02      	cmp	r6, #2
 800a21c:	d104      	bne.n	800a228 <xQueueGenericSendFromISR+0x32>
 800a21e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d001      	beq.n	800a228 <xQueueGenericSendFromISR+0x32>
 800a224:	b672      	cpsid	i
 800a226:	e7fe      	b.n	800a226 <xQueueGenericSendFromISR+0x30>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a228:	f000 ff2c 	bl	800b084 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a22c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a22e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a230:	9003      	str	r0, [sp, #12]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a232:	429a      	cmp	r2, r3
 800a234:	d302      	bcc.n	800a23c <xQueueGenericSendFromISR+0x46>
			xReturn = errQUEUE_FULL;
 800a236:	2500      	movs	r5, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a238:	2e02      	cmp	r6, #2
 800a23a:	d11b      	bne.n	800a274 <xQueueGenericSendFromISR+0x7e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a23c:	0023      	movs	r3, r4
 800a23e:	3345      	adds	r3, #69	; 0x45
 800a240:	9302      	str	r3, [sp, #8]
 800a242:	781d      	ldrb	r5, [r3, #0]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a244:	0032      	movs	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 800a246:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a248:	0020      	movs	r0, r4
 800a24a:	9901      	ldr	r1, [sp, #4]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a24c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a24e:	f7ff fe38 	bl	8009ec2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a252:	1c6b      	adds	r3, r5, #1
 800a254:	d114      	bne.n	800a280 <xQueueGenericSendFromISR+0x8a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
 800a25c:	2501      	movs	r5, #1
 800a25e:	e009      	b.n	800a274 <xQueueGenericSendFromISR+0x7e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a260:	0020      	movs	r0, r4
 800a262:	3024      	adds	r0, #36	; 0x24
 800a264:	f000 fc38 	bl	800aad8 <xTaskRemoveFromEventList>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d0f7      	beq.n	800a25c <xQueueGenericSendFromISR+0x66>
							if( pxHigherPriorityTaskWoken != NULL )
 800a26c:	2f00      	cmp	r7, #0
 800a26e:	d0f5      	beq.n	800a25c <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a270:	2501      	movs	r5, #1
 800a272:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a274:	9803      	ldr	r0, [sp, #12]
 800a276:	f000 ff09 	bl	800b08c <vClearInterruptMaskFromISR>
}
 800a27a:	0028      	movs	r0, r5
 800a27c:	b005      	add	sp, #20
 800a27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a280:	9b02      	ldr	r3, [sp, #8]
 800a282:	3501      	adds	r5, #1
 800a284:	b26d      	sxtb	r5, r5
 800a286:	701d      	strb	r5, [r3, #0]
 800a288:	e7e8      	b.n	800a25c <xQueueGenericSendFromISR+0x66>

0800a28a <xQueueReceive>:
{
 800a28a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a28c:	b085      	sub	sp, #20
 800a28e:	0004      	movs	r4, r0
 800a290:	000f      	movs	r7, r1
 800a292:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a294:	2800      	cmp	r0, #0
 800a296:	d101      	bne.n	800a29c <xQueueReceive+0x12>
 800a298:	b672      	cpsid	i
 800a29a:	e7fe      	b.n	800a29a <xQueueReceive+0x10>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a29c:	2900      	cmp	r1, #0
 800a29e:	d104      	bne.n	800a2aa <xQueueReceive+0x20>
 800a2a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <xQueueReceive+0x20>
 800a2a6:	b672      	cpsid	i
 800a2a8:	e7fe      	b.n	800a2a8 <xQueueReceive+0x1e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2aa:	f000 fc93 	bl	800abd4 <xTaskGetSchedulerState>
 800a2ae:	1e06      	subs	r6, r0, #0
 800a2b0:	d104      	bne.n	800a2bc <xQueueReceive+0x32>
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d041      	beq.n	800a33c <xQueueReceive+0xb2>
 800a2b8:	b672      	cpsid	i
 800a2ba:	e7fe      	b.n	800a2ba <xQueueReceive+0x30>
 800a2bc:	2600      	movs	r6, #0
 800a2be:	e03d      	b.n	800a33c <xQueueReceive+0xb2>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2c0:	9d01      	ldr	r5, [sp, #4]
 800a2c2:	2d00      	cmp	r5, #0
 800a2c4:	d103      	bne.n	800a2ce <xQueueReceive+0x44>
					taskEXIT_CRITICAL();
 800a2c6:	f000 fecf 	bl	800b068 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	e04f      	b.n	800a36e <xQueueReceive+0xe4>
				else if( xEntryTimeSet == pdFALSE )
 800a2ce:	2e00      	cmp	r6, #0
 800a2d0:	d102      	bne.n	800a2d8 <xQueueReceive+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2d2:	a802      	add	r0, sp, #8
 800a2d4:	f000 fc3a 	bl	800ab4c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a2d8:	f000 fec6 	bl	800b068 <vPortExitCritical>
		vTaskSuspendAll();
 800a2dc:	f000 fa82 	bl	800a7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2e0:	f000 feb6 	bl	800b050 <vPortEnterCritical>
 800a2e4:	0022      	movs	r2, r4
 800a2e6:	3244      	adds	r2, #68	; 0x44
 800a2e8:	7813      	ldrb	r3, [r2, #0]
 800a2ea:	b25b      	sxtb	r3, r3
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	d101      	bne.n	800a2f4 <xQueueReceive+0x6a>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	7013      	strb	r3, [r2, #0]
 800a2f4:	0022      	movs	r2, r4
 800a2f6:	3245      	adds	r2, #69	; 0x45
 800a2f8:	7813      	ldrb	r3, [r2, #0]
 800a2fa:	b25b      	sxtb	r3, r3
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	d101      	bne.n	800a304 <xQueueReceive+0x7a>
 800a300:	2300      	movs	r3, #0
 800a302:	7013      	strb	r3, [r2, #0]
 800a304:	f000 feb0 	bl	800b068 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a308:	a901      	add	r1, sp, #4
 800a30a:	a802      	add	r0, sp, #8
 800a30c:	f000 fc2a 	bl	800ab64 <xTaskCheckForTimeOut>
 800a310:	2800      	cmp	r0, #0
 800a312:	d134      	bne.n	800a37e <xQueueReceive+0xf4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a314:	0020      	movs	r0, r4
 800a316:	f7ff fdca 	bl	8009eae <prvIsQueueEmpty>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d029      	beq.n	800a372 <xQueueReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a31e:	0020      	movs	r0, r4
 800a320:	9901      	ldr	r1, [sp, #4]
 800a322:	3024      	adds	r0, #36	; 0x24
 800a324:	f000 fbae 	bl	800aa84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a328:	0020      	movs	r0, r4
 800a32a:	f7ff fe17 	bl	8009f5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a32e:	f000 faeb 	bl	800a908 <xTaskResumeAll>
 800a332:	2800      	cmp	r0, #0
 800a334:	d101      	bne.n	800a33a <xQueueReceive+0xb0>
					portYIELD_WITHIN_API();
 800a336:	f000 fe7f 	bl	800b038 <vPortYield>
 800a33a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a33c:	f000 fe88 	bl	800b050 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a340:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a342:	2d00      	cmp	r5, #0
 800a344:	d0bc      	beq.n	800a2c0 <xQueueReceive+0x36>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a346:	0039      	movs	r1, r7
 800a348:	0020      	movs	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a34a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a34c:	f7ff fdf4 	bl	8009f38 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a350:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <xQueueReceive+0xde>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a358:	0020      	movs	r0, r4
 800a35a:	3010      	adds	r0, #16
 800a35c:	f000 fbbc 	bl	800aad8 <xTaskRemoveFromEventList>
 800a360:	2800      	cmp	r0, #0
 800a362:	d001      	beq.n	800a368 <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 800a364:	f000 fe68 	bl	800b038 <vPortYield>
				taskEXIT_CRITICAL();
 800a368:	f000 fe7e 	bl	800b068 <vPortExitCritical>
				return pdPASS;
 800a36c:	2001      	movs	r0, #1
}
 800a36e:	b005      	add	sp, #20
 800a370:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800a372:	0020      	movs	r0, r4
 800a374:	f7ff fdf2 	bl	8009f5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a378:	f000 fac6 	bl	800a908 <xTaskResumeAll>
 800a37c:	e7dd      	b.n	800a33a <xQueueReceive+0xb0>
			prvUnlockQueue( pxQueue );
 800a37e:	0020      	movs	r0, r4
 800a380:	f7ff fdec 	bl	8009f5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a384:	f000 fac0 	bl	800a908 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a388:	0020      	movs	r0, r4
 800a38a:	f7ff fd90 	bl	8009eae <prvIsQueueEmpty>
 800a38e:	2800      	cmp	r0, #0
 800a390:	d0d3      	beq.n	800a33a <xQueueReceive+0xb0>
 800a392:	e79a      	b.n	800a2ca <xQueueReceive+0x40>

0800a394 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a394:	2200      	movs	r2, #0
	{
 800a396:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <vQueueAddToRegistry+0x20>)
 800a39a:	00d4      	lsls	r4, r2, #3
 800a39c:	58e5      	ldr	r5, [r4, r3]
 800a39e:	2d00      	cmp	r5, #0
 800a3a0:	d103      	bne.n	800a3aa <vQueueAddToRegistry+0x16>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3a2:	50e1      	str	r1, [r4, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3a4:	191b      	adds	r3, r3, r4
 800a3a6:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3a8:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3aa:	3201      	adds	r2, #1
 800a3ac:	2a08      	cmp	r2, #8
 800a3ae:	d1f4      	bne.n	800a39a <vQueueAddToRegistry+0x6>
 800a3b0:	e7fa      	b.n	800a3a8 <vQueueAddToRegistry+0x14>
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	200046b0 	.word	0x200046b0

0800a3b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	0004      	movs	r4, r0
 800a3bc:	0016      	movs	r6, r2
 800a3be:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3c0:	f000 fe46 	bl	800b050 <vPortEnterCritical>
 800a3c4:	0022      	movs	r2, r4
 800a3c6:	3244      	adds	r2, #68	; 0x44
 800a3c8:	7813      	ldrb	r3, [r2, #0]
 800a3ca:	b25b      	sxtb	r3, r3
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <vQueueWaitForMessageRestricted+0x1c>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	7013      	strb	r3, [r2, #0]
 800a3d4:	0022      	movs	r2, r4
 800a3d6:	3245      	adds	r2, #69	; 0x45
 800a3d8:	7813      	ldrb	r3, [r2, #0]
 800a3da:	b25b      	sxtb	r3, r3
 800a3dc:	3301      	adds	r3, #1
 800a3de:	d101      	bne.n	800a3e4 <vQueueWaitForMessageRestricted+0x2c>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	7013      	strb	r3, [r2, #0]
 800a3e4:	f000 fe40 	bl	800b068 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <vQueueWaitForMessageRestricted+0x42>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3ee:	0020      	movs	r0, r4
 800a3f0:	0032      	movs	r2, r6
 800a3f2:	0029      	movs	r1, r5
 800a3f4:	3024      	adds	r0, #36	; 0x24
 800a3f6:	f000 fb57 	bl	800aaa8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3fa:	0020      	movs	r0, r4
 800a3fc:	f7ff fdae 	bl	8009f5c <prvUnlockQueue>
	}
 800a400:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a404 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a406:	0004      	movs	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a408:	f000 fe22 	bl	800b050 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a40c:	4b2b      	ldr	r3, [pc, #172]	; (800a4bc <prvAddNewTaskToReadyList+0xb8>)
		if( pxCurrentTCB == NULL )
 800a40e:	4d2c      	ldr	r5, [pc, #176]	; (800a4c0 <prvAddNewTaskToReadyList+0xbc>)
		uxCurrentNumberOfTasks++;
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	3201      	adds	r2, #1
 800a414:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a416:	682e      	ldr	r6, [r5, #0]
 800a418:	4a2a      	ldr	r2, [pc, #168]	; (800a4c4 <prvAddNewTaskToReadyList+0xc0>)
 800a41a:	9201      	str	r2, [sp, #4]
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	d142      	bne.n	800a4a6 <prvAddNewTaskToReadyList+0xa2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a420:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d11e      	bne.n	800a466 <prvAddNewTaskToReadyList+0x62>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a428:	2714      	movs	r7, #20
 800a42a:	0038      	movs	r0, r7
 800a42c:	4370      	muls	r0, r6
 800a42e:	9b01      	ldr	r3, [sp, #4]
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a430:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a432:	1818      	adds	r0, r3, r0
 800a434:	f7ff fcfa 	bl	8009e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a438:	2e38      	cmp	r6, #56	; 0x38
 800a43a:	d1f6      	bne.n	800a42a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a43c:	4f22      	ldr	r7, [pc, #136]	; (800a4c8 <prvAddNewTaskToReadyList+0xc4>)
 800a43e:	0038      	movs	r0, r7
 800a440:	f7ff fcf4 	bl	8009e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a444:	4e21      	ldr	r6, [pc, #132]	; (800a4cc <prvAddNewTaskToReadyList+0xc8>)
 800a446:	0030      	movs	r0, r6
 800a448:	f7ff fcf0 	bl	8009e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a44c:	4820      	ldr	r0, [pc, #128]	; (800a4d0 <prvAddNewTaskToReadyList+0xcc>)
 800a44e:	f7ff fced 	bl	8009e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a452:	4820      	ldr	r0, [pc, #128]	; (800a4d4 <prvAddNewTaskToReadyList+0xd0>)
 800a454:	f7ff fcea 	bl	8009e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a458:	481f      	ldr	r0, [pc, #124]	; (800a4d8 <prvAddNewTaskToReadyList+0xd4>)
 800a45a:	f7ff fce7 	bl	8009e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a45e:	4b1f      	ldr	r3, [pc, #124]	; (800a4dc <prvAddNewTaskToReadyList+0xd8>)
 800a460:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a462:	4b1f      	ldr	r3, [pc, #124]	; (800a4e0 <prvAddNewTaskToReadyList+0xdc>)
 800a464:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800a466:	4a1f      	ldr	r2, [pc, #124]	; (800a4e4 <prvAddNewTaskToReadyList+0xe0>)
 800a468:	6813      	ldr	r3, [r2, #0]
 800a46a:	3301      	adds	r3, #1
 800a46c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a46e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a470:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <prvAddNewTaskToReadyList+0xe4>)
 800a472:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a474:	6819      	ldr	r1, [r3, #0]
 800a476:	428a      	cmp	r2, r1
 800a478:	d900      	bls.n	800a47c <prvAddNewTaskToReadyList+0x78>
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	2314      	movs	r3, #20
 800a47e:	4353      	muls	r3, r2
 800a480:	9a01      	ldr	r2, [sp, #4]
 800a482:	1d21      	adds	r1, r4, #4
 800a484:	18d0      	adds	r0, r2, r3
 800a486:	f7ff fcdf 	bl	8009e48 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a48a:	f000 fded 	bl	800b068 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a48e:	4b17      	ldr	r3, [pc, #92]	; (800a4ec <prvAddNewTaskToReadyList+0xe8>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d006      	beq.n	800a4a4 <prvAddNewTaskToReadyList+0xa0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a496:	682b      	ldr	r3, [r5, #0]
 800a498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d201      	bcs.n	800a4a4 <prvAddNewTaskToReadyList+0xa0>
			taskYIELD_IF_USING_PREEMPTION();
 800a4a0:	f000 fdca 	bl	800b038 <vPortYield>
}
 800a4a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			if( xSchedulerRunning == pdFALSE )
 800a4a6:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <prvAddNewTaskToReadyList+0xe8>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	d1da      	bne.n	800a466 <prvAddNewTaskToReadyList+0x62>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4b0:	682a      	ldr	r2, [r5, #0]
 800a4b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d8d6      	bhi.n	800a466 <prvAddNewTaskToReadyList+0x62>
					pxCurrentTCB = pxNewTCB;
 800a4b8:	602c      	str	r4, [r5, #0]
 800a4ba:	e7d4      	b.n	800a466 <prvAddNewTaskToReadyList+0x62>
 800a4bc:	20004b5c 	.word	0x20004b5c
 800a4c0:	200046f0 	.word	0x200046f0
 800a4c4:	200046fc 	.word	0x200046fc
 800a4c8:	20004b70 	.word	0x20004b70
 800a4cc:	20004b84 	.word	0x20004b84
 800a4d0:	20004ba4 	.word	0x20004ba4
 800a4d4:	20004bd0 	.word	0x20004bd0
 800a4d8:	20004bbc 	.word	0x20004bbc
 800a4dc:	200046f4 	.word	0x200046f4
 800a4e0:	200046f8 	.word	0x200046f8
 800a4e4:	20004b68 	.word	0x20004b68
 800a4e8:	20004b6c 	.word	0x20004b6c
 800a4ec:	20004bb8 	.word	0x20004bb8

0800a4f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4f4:	4b14      	ldr	r3, [pc, #80]	; (800a548 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4f6:	4d15      	ldr	r5, [pc, #84]	; (800a54c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800a4f8:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4fa:	6828      	ldr	r0, [r5, #0]
{
 800a4fc:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4fe:	3004      	adds	r0, #4
 800a500:	f7ff fcc5 	bl	8009e8e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a504:	1c63      	adds	r3, r4, #1
 800a506:	d107      	bne.n	800a518 <prvAddCurrentTaskToDelayedList+0x28>
 800a508:	2f00      	cmp	r7, #0
 800a50a:	d005      	beq.n	800a518 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a50c:	6829      	ldr	r1, [r5, #0]
 800a50e:	4810      	ldr	r0, [pc, #64]	; (800a550 <prvAddCurrentTaskToDelayedList+0x60>)
 800a510:	3104      	adds	r1, #4
 800a512:	f7ff fc99 	bl	8009e48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a518:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a51a:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a51c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a51e:	42a6      	cmp	r6, r4
 800a520:	d906      	bls.n	800a530 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a522:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <prvAddCurrentTaskToDelayedList+0x64>)
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	6829      	ldr	r1, [r5, #0]
 800a528:	3104      	adds	r1, #4
 800a52a:	f7ff fc99 	bl	8009e60 <vListInsert>
 800a52e:	e7f2      	b.n	800a516 <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a530:	4b09      	ldr	r3, [pc, #36]	; (800a558 <prvAddCurrentTaskToDelayedList+0x68>)
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	6829      	ldr	r1, [r5, #0]
 800a536:	3104      	adds	r1, #4
 800a538:	f7ff fc92 	bl	8009e60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a53c:	4b07      	ldr	r3, [pc, #28]	; (800a55c <prvAddCurrentTaskToDelayedList+0x6c>)
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	42a2      	cmp	r2, r4
 800a542:	d9e8      	bls.n	800a516 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 800a544:	601c      	str	r4, [r3, #0]
}
 800a546:	e7e6      	b.n	800a516 <prvAddCurrentTaskToDelayedList+0x26>
 800a548:	20004be4 	.word	0x20004be4
 800a54c:	200046f0 	.word	0x200046f0
 800a550:	20004bbc 	.word	0x20004bbc
 800a554:	200046f8 	.word	0x200046f8
 800a558:	200046f4 	.word	0x200046f4
 800a55c:	20004b98 	.word	0x20004b98

0800a560 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a560:	4a07      	ldr	r2, [pc, #28]	; (800a580 <prvResetNextTaskUnblockTime+0x20>)
 800a562:	6813      	ldr	r3, [r2, #0]
 800a564:	6819      	ldr	r1, [r3, #0]
 800a566:	4b07      	ldr	r3, [pc, #28]	; (800a584 <prvResetNextTaskUnblockTime+0x24>)
 800a568:	2900      	cmp	r1, #0
 800a56a:	d103      	bne.n	800a574 <prvResetNextTaskUnblockTime+0x14>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a56c:	2201      	movs	r2, #1
 800a56e:	4252      	negs	r2, r2
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a570:	601a      	str	r2, [r3, #0]
}
 800a572:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a578:	68d2      	ldr	r2, [r2, #12]
 800a57a:	6852      	ldr	r2, [r2, #4]
 800a57c:	e7f8      	b.n	800a570 <prvResetNextTaskUnblockTime+0x10>
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	200046f4 	.word	0x200046f4
 800a584:	20004b98 	.word	0x20004b98

0800a588 <prvDeleteTCB>:
	{
 800a588:	b510      	push	{r4, lr}
 800a58a:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a58c:	3054      	adds	r0, #84	; 0x54
 800a58e:	f002 ff21 	bl	800d3d4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a592:	0023      	movs	r3, r4
 800a594:	33a5      	adds	r3, #165	; 0xa5
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800a59c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a59e:	f000 fe97 	bl	800b2d0 <vPortFree>
				vPortFree( pxTCB );
 800a5a2:	0020      	movs	r0, r4
 800a5a4:	f000 fe94 	bl	800b2d0 <vPortFree>
	}
 800a5a8:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d0f9      	beq.n	800a5a2 <prvDeleteTCB+0x1a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d0fa      	beq.n	800a5a8 <prvDeleteTCB+0x20>
 800a5b2:	b672      	cpsid	i
 800a5b4:	e7fe      	b.n	800a5b4 <prvDeleteTCB+0x2c>
	...

0800a5b8 <prvIdleTask>:
{
 800a5b8:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5ba:	4c10      	ldr	r4, [pc, #64]	; (800a5fc <prvIdleTask+0x44>)
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5c2:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <prvIdleTask+0x48>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d9f7      	bls.n	800a5ba <prvIdleTask+0x2>
				taskYIELD();
 800a5ca:	f000 fd35 	bl	800b038 <vPortYield>
 800a5ce:	e7f4      	b.n	800a5ba <prvIdleTask+0x2>
			taskENTER_CRITICAL();
 800a5d0:	f000 fd3e 	bl	800b050 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d4:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <prvIdleTask+0x4c>)
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5da:	1d28      	adds	r0, r5, #4
 800a5dc:	f7ff fc57 	bl	8009e8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5e0:	4a09      	ldr	r2, [pc, #36]	; (800a608 <prvIdleTask+0x50>)
 800a5e2:	6813      	ldr	r3, [r2, #0]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a5ee:	f000 fd3b 	bl	800b068 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a5f2:	0028      	movs	r0, r5
 800a5f4:	f7ff ffc8 	bl	800a588 <prvDeleteTCB>
 800a5f8:	e7df      	b.n	800a5ba <prvIdleTask+0x2>
 800a5fa:	46c0      	nop			; (mov r8, r8)
 800a5fc:	20004b60 	.word	0x20004b60
 800a600:	200046fc 	.word	0x200046fc
 800a604:	20004bd0 	.word	0x20004bd0
 800a608:	20004b5c 	.word	0x20004b5c

0800a60c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a60e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a610:	0096      	lsls	r6, r2, #2
 800a612:	0032      	movs	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a614:	9000      	str	r0, [sp, #0]
 800a616:	000d      	movs	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a618:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a61a:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a61c:	9301      	str	r3, [sp, #4]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a61e:	f002 fdfd 	bl	800d21c <memset>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a622:	2207      	movs	r2, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a624:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a626:	3e04      	subs	r6, #4
 800a628:	199b      	adds	r3, r3, r6
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a62a:	4393      	bics	r3, r2
 800a62c:	001f      	movs	r7, r3
	if( pcName != NULL )
 800a62e:	2d00      	cmp	r5, #0
 800a630:	d03c      	beq.n	800a6ac <prvInitialiseNewTask.constprop.0+0xa0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a632:	0021      	movs	r1, r4
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a634:	2300      	movs	r3, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a636:	3134      	adds	r1, #52	; 0x34
 800a638:	5cea      	ldrb	r2, [r5, r3]
 800a63a:	54ca      	strb	r2, [r1, r3]
			if( pcName[ x ] == ( char ) 0x00 )
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	d002      	beq.n	800a646 <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a640:	3301      	adds	r3, #1
 800a642:	2b10      	cmp	r3, #16
 800a644:	d1f8      	bne.n	800a638 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a646:	0023      	movs	r3, r4
 800a648:	2200      	movs	r2, #0
 800a64a:	3343      	adds	r3, #67	; 0x43
 800a64c:	701a      	strb	r2, [r3, #0]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a64e:	9d08      	ldr	r5, [sp, #32]
 800a650:	2d37      	cmp	r5, #55	; 0x37
 800a652:	d900      	bls.n	800a656 <prvInitialiseNewTask.constprop.0+0x4a>
 800a654:	2537      	movs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800a656:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a658:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800a65a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a65c:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a65e:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a660:	f7ff fbef 	bl	8009e42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a664:	0020      	movs	r0, r4
 800a666:	3018      	adds	r0, #24
 800a668:	f7ff fbeb 	bl	8009e42 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a66c:	2338      	movs	r3, #56	; 0x38
 800a66e:	1b5b      	subs	r3, r3, r5
 800a670:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800a672:	0023      	movs	r3, r4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a674:	0020      	movs	r0, r4
		pxNewTCB->ulNotifiedValue = 0;
 800a676:	33a0      	adds	r3, #160	; 0xa0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a678:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a67a:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a67c:	224c      	movs	r2, #76	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 800a67e:	601e      	str	r6, [r3, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a680:	0031      	movs	r1, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a682:	711e      	strb	r6, [r3, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a684:	3054      	adds	r0, #84	; 0x54
 800a686:	f002 fdc9 	bl	800d21c <memset>
 800a68a:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <prvInitialiseNewTask.constprop.0+0xa8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a68c:	0038      	movs	r0, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a68e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a690:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a692:	9a01      	ldr	r2, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a694:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a696:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <prvInitialiseNewTask.constprop.0+0xb0>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a698:	9900      	ldr	r1, [sp, #0]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a69a:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a69c:	f000 fcba 	bl	800b014 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6a2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a6a4:	42b3      	cmp	r3, r6
 800a6a6:	d000      	beq.n	800a6aa <prvInitialiseNewTask.constprop.0+0x9e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6a8:	601c      	str	r4, [r3, #0]
}
 800a6aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a6ac:	0023      	movs	r3, r4
 800a6ae:	3334      	adds	r3, #52	; 0x34
 800a6b0:	701d      	strb	r5, [r3, #0]
 800a6b2:	e7cc      	b.n	800a64e <prvInitialiseNewTask.constprop.0+0x42>
 800a6b4:	20005940 	.word	0x20005940
 800a6b8:	200059a8 	.word	0x200059a8
 800a6bc:	20005a10 	.word	0x20005a10

0800a6c0 <xTaskCreateStatic>:
	{
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a6c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800a6c8:	2d00      	cmp	r5, #0
 800a6ca:	d101      	bne.n	800a6d0 <xTaskCreateStatic+0x10>
 800a6cc:	b672      	cpsid	i
 800a6ce:	e7fe      	b.n	800a6ce <xTaskCreateStatic+0xe>
		configASSERT( pxTaskBuffer != NULL );
 800a6d0:	2c00      	cmp	r4, #0
 800a6d2:	d101      	bne.n	800a6d8 <xTaskCreateStatic+0x18>
 800a6d4:	b672      	cpsid	i
 800a6d6:	e7fe      	b.n	800a6d6 <xTaskCreateStatic+0x16>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a6d8:	26a8      	movs	r6, #168	; 0xa8
 800a6da:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6dc:	9e05      	ldr	r6, [sp, #20]
 800a6de:	2ea8      	cmp	r6, #168	; 0xa8
 800a6e0:	d001      	beq.n	800a6e6 <xTaskCreateStatic+0x26>
 800a6e2:	b672      	cpsid	i
 800a6e4:	e7fe      	b.n	800a6e4 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6e6:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6e8:	0025      	movs	r5, r4
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6ea:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6ec:	2602      	movs	r6, #2
 800a6ee:	35a5      	adds	r5, #165	; 0xa5
 800a6f0:	702e      	strb	r6, [r5, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6f2:	ad04      	add	r5, sp, #16
 800a6f4:	9501      	str	r5, [sp, #4]
 800a6f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a6f8:	9402      	str	r4, [sp, #8]
 800a6fa:	9500      	str	r5, [sp, #0]
 800a6fc:	f7ff ff86 	bl	800a60c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a700:	0020      	movs	r0, r4
 800a702:	f7ff fe7f 	bl	800a404 <prvAddNewTaskToReadyList>
		return xReturn;
 800a706:	9804      	ldr	r0, [sp, #16]
	}
 800a708:	b006      	add	sp, #24
 800a70a:	bd70      	pop	{r4, r5, r6, pc}

0800a70c <xTaskCreate>:
	{
 800a70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a70e:	0007      	movs	r7, r0
 800a710:	b087      	sub	sp, #28
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a712:	0090      	lsls	r0, r2, #2
	{
 800a714:	0016      	movs	r6, r2
 800a716:	9104      	str	r1, [sp, #16]
 800a718:	9305      	str	r3, [sp, #20]
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a71a:	f000 fd51 	bl	800b1c0 <pvPortMalloc>
 800a71e:	1e05      	subs	r5, r0, #0
			if( pxStack != NULL )
 800a720:	d01d      	beq.n	800a75e <xTaskCreate+0x52>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a722:	20a8      	movs	r0, #168	; 0xa8
 800a724:	f000 fd4c 	bl	800b1c0 <pvPortMalloc>
 800a728:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 800a72a:	d015      	beq.n	800a758 <xTaskCreate+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a72c:	0003      	movs	r3, r0
 800a72e:	2200      	movs	r2, #0
 800a730:	33a5      	adds	r3, #165	; 0xa5
					pxNewTCB->pxStack = pxStack;
 800a732:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a734:	701a      	strb	r2, [r3, #0]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a738:	0032      	movs	r2, r6
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a73e:	9904      	ldr	r1, [sp, #16]
 800a740:	9002      	str	r0, [sp, #8]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	0038      	movs	r0, r7
 800a746:	9b05      	ldr	r3, [sp, #20]
 800a748:	f7ff ff60 	bl	800a60c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a74c:	0020      	movs	r0, r4
 800a74e:	f7ff fe59 	bl	800a404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a752:	2001      	movs	r0, #1
	}
 800a754:	b007      	add	sp, #28
 800a756:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 800a758:	0028      	movs	r0, r5
 800a75a:	f000 fdb9 	bl	800b2d0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a75e:	2001      	movs	r0, #1
 800a760:	4240      	negs	r0, r0
		return xReturn;
 800a762:	e7f7      	b.n	800a754 <xTaskCreate+0x48>

0800a764 <vTaskStartScheduler>:
{
 800a764:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a766:	2400      	movs	r4, #0
{
 800a768:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a76a:	aa07      	add	r2, sp, #28
 800a76c:	a906      	add	r1, sp, #24
 800a76e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a770:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a772:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a774:	f7ff fb42 	bl	8009dfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a778:	9b05      	ldr	r3, [sp, #20]
 800a77a:	4913      	ldr	r1, [pc, #76]	; (800a7c8 <vTaskStartScheduler+0x64>)
 800a77c:	9302      	str	r3, [sp, #8]
 800a77e:	9b06      	ldr	r3, [sp, #24]
 800a780:	4812      	ldr	r0, [pc, #72]	; (800a7cc <vTaskStartScheduler+0x68>)
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	9a07      	ldr	r2, [sp, #28]
 800a786:	0023      	movs	r3, r4
 800a788:	9400      	str	r4, [sp, #0]
 800a78a:	f7ff ff99 	bl	800a6c0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a78e:	42a0      	cmp	r0, r4
 800a790:	d013      	beq.n	800a7ba <vTaskStartScheduler+0x56>
			xReturn = xTimerCreateTimerTask();
 800a792:	f000 fab7 	bl	800ad04 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a796:	2801      	cmp	r0, #1
 800a798:	d111      	bne.n	800a7be <vTaskStartScheduler+0x5a>
		portDISABLE_INTERRUPTS();
 800a79a:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a79c:	4b0c      	ldr	r3, [pc, #48]	; (800a7d0 <vTaskStartScheduler+0x6c>)
 800a79e:	4a0d      	ldr	r2, [pc, #52]	; (800a7d4 <vTaskStartScheduler+0x70>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3354      	adds	r3, #84	; 0x54
 800a7a4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <vTaskStartScheduler+0x74>)
 800a7aa:	4252      	negs	r2, r2
 800a7ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <vTaskStartScheduler+0x78>)
 800a7b0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7b2:	4b0b      	ldr	r3, [pc, #44]	; (800a7e0 <vTaskStartScheduler+0x7c>)
 800a7b4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a7b6:	f000 fcc1 	bl	800b13c <xPortStartScheduler>
}
 800a7ba:	b008      	add	sp, #32
 800a7bc:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7be:	3001      	adds	r0, #1
 800a7c0:	d1fb      	bne.n	800a7ba <vTaskStartScheduler+0x56>
 800a7c2:	b672      	cpsid	i
 800a7c4:	e7fe      	b.n	800a7c4 <vTaskStartScheduler+0x60>
 800a7c6:	46c0      	nop			; (mov r8, r8)
 800a7c8:	08011eb4 	.word	0x08011eb4
 800a7cc:	0800a5b9 	.word	0x0800a5b9
 800a7d0:	200046f0 	.word	0x200046f0
 800a7d4:	200002b8 	.word	0x200002b8
 800a7d8:	20004b98 	.word	0x20004b98
 800a7dc:	20004bb8 	.word	0x20004bb8
 800a7e0:	20004be4 	.word	0x20004be4

0800a7e4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a7e4:	4a02      	ldr	r2, [pc, #8]	; (800a7f0 <vTaskSuspendAll+0xc>)
 800a7e6:	6813      	ldr	r3, [r2, #0]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	6013      	str	r3, [r2, #0]
}
 800a7ec:	4770      	bx	lr
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	20004b64 	.word	0x20004b64

0800a7f4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a7f4:	4b01      	ldr	r3, [pc, #4]	; (800a7fc <xTaskGetTickCount+0x8>)
 800a7f6:	6818      	ldr	r0, [r3, #0]
}
 800a7f8:	4770      	bx	lr
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	20004be4 	.word	0x20004be4

0800a800 <xTaskIncrementTick>:
{
 800a800:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a802:	4b36      	ldr	r3, [pc, #216]	; (800a8dc <xTaskIncrementTick+0xdc>)
{
 800a804:	b085      	sub	sp, #20
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d161      	bne.n	800a8d0 <xTaskIncrementTick+0xd0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a80c:	4b34      	ldr	r3, [pc, #208]	; (800a8e0 <xTaskIncrementTick+0xe0>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	3201      	adds	r2, #1
 800a812:	9201      	str	r2, [sp, #4]
		xTickCount = xConstTickCount;
 800a814:	601a      	str	r2, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a816:	2a00      	cmp	r2, #0
 800a818:	d111      	bne.n	800a83e <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
 800a81a:	4b32      	ldr	r3, [pc, #200]	; (800a8e4 <xTaskIncrementTick+0xe4>)
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	6812      	ldr	r2, [r2, #0]
 800a820:	2a00      	cmp	r2, #0
 800a822:	d001      	beq.n	800a828 <xTaskIncrementTick+0x28>
 800a824:	b672      	cpsid	i
 800a826:	e7fe      	b.n	800a826 <xTaskIncrementTick+0x26>
 800a828:	4a2f      	ldr	r2, [pc, #188]	; (800a8e8 <xTaskIncrementTick+0xe8>)
 800a82a:	6819      	ldr	r1, [r3, #0]
 800a82c:	6810      	ldr	r0, [r2, #0]
 800a82e:	6018      	str	r0, [r3, #0]
 800a830:	6011      	str	r1, [r2, #0]
 800a832:	4a2e      	ldr	r2, [pc, #184]	; (800a8ec <xTaskIncrementTick+0xec>)
 800a834:	6813      	ldr	r3, [r2, #0]
 800a836:	3301      	adds	r3, #1
 800a838:	6013      	str	r3, [r2, #0]
 800a83a:	f7ff fe91 	bl	800a560 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a83e:	4a2c      	ldr	r2, [pc, #176]	; (800a8f0 <xTaskIncrementTick+0xf0>)
 800a840:	4e2c      	ldr	r6, [pc, #176]	; (800a8f4 <xTaskIncrementTick+0xf4>)
 800a842:	9202      	str	r2, [sp, #8]
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	9a01      	ldr	r2, [sp, #4]
BaseType_t xSwitchRequired = pdFALSE;
 800a848:	2400      	movs	r4, #0
 800a84a:	4f2b      	ldr	r7, [pc, #172]	; (800a8f8 <xTaskIncrementTick+0xf8>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d236      	bcs.n	800a8be <xTaskIncrementTick+0xbe>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a854:	2314      	movs	r3, #20
 800a856:	4353      	muls	r3, r2
 800a858:	9a02      	ldr	r2, [sp, #8]
 800a85a:	58d3      	ldr	r3, [r2, r3]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d900      	bls.n	800a862 <xTaskIncrementTick+0x62>
				xSwitchRequired = pdTRUE;
 800a860:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 800a862:	4b26      	ldr	r3, [pc, #152]	; (800a8fc <xTaskIncrementTick+0xfc>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d000      	beq.n	800a86c <xTaskIncrementTick+0x6c>
				xSwitchRequired = pdTRUE;
 800a86a:	2401      	movs	r4, #1
}
 800a86c:	0020      	movs	r0, r4
 800a86e:	b005      	add	sp, #20
 800a870:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a872:	681b      	ldr	r3, [r3, #0]
					if( xConstTickCount < xItemValue )
 800a874:	9a01      	ldr	r2, [sp, #4]
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a87a:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d325      	bcc.n	800a8cc <xTaskIncrementTick+0xcc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a880:	1d2b      	adds	r3, r5, #4
 800a882:	0018      	movs	r0, r3
 800a884:	9303      	str	r3, [sp, #12]
 800a886:	f7ff fb02 	bl	8009e8e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a88a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d003      	beq.n	800a898 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a890:	0028      	movs	r0, r5
 800a892:	3018      	adds	r0, #24
 800a894:	f7ff fafb 	bl	8009e8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a898:	4b19      	ldr	r3, [pc, #100]	; (800a900 <xTaskIncrementTick+0x100>)
 800a89a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4290      	cmp	r0, r2
 800a8a0:	d900      	bls.n	800a8a4 <xTaskIncrementTick+0xa4>
 800a8a2:	6018      	str	r0, [r3, #0]
 800a8a4:	2314      	movs	r3, #20
 800a8a6:	4358      	muls	r0, r3
 800a8a8:	9b02      	ldr	r3, [sp, #8]
 800a8aa:	1d29      	adds	r1, r5, #4
 800a8ac:	1818      	adds	r0, r3, r0
 800a8ae:	f7ff facb 	bl	8009e48 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d300      	bcc.n	800a8be <xTaskIncrementTick+0xbe>
							xSwitchRequired = pdTRUE;
 800a8bc:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8be:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <xTaskIncrementTick+0xe4>)
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	2a00      	cmp	r2, #0
 800a8c6:	d1d4      	bne.n	800a872 <xTaskIncrementTick+0x72>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	425b      	negs	r3, r3
						xNextTaskUnblockTime = xItemValue;
 800a8cc:	6033      	str	r3, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8ce:	e7bf      	b.n	800a850 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800a8d0:	4a0c      	ldr	r2, [pc, #48]	; (800a904 <xTaskIncrementTick+0x104>)
BaseType_t xSwitchRequired = pdFALSE;
 800a8d2:	2400      	movs	r4, #0
		++xPendedTicks;
 800a8d4:	6813      	ldr	r3, [r2, #0]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800a8da:	e7c7      	b.n	800a86c <xTaskIncrementTick+0x6c>
 800a8dc:	20004b64 	.word	0x20004b64
 800a8e0:	20004be4 	.word	0x20004be4
 800a8e4:	200046f4 	.word	0x200046f4
 800a8e8:	200046f8 	.word	0x200046f8
 800a8ec:	20004b9c 	.word	0x20004b9c
 800a8f0:	200046fc 	.word	0x200046fc
 800a8f4:	20004b98 	.word	0x20004b98
 800a8f8:	200046f0 	.word	0x200046f0
 800a8fc:	20004be8 	.word	0x20004be8
 800a900:	20004b6c 	.word	0x20004b6c
 800a904:	20004ba0 	.word	0x20004ba0

0800a908 <xTaskResumeAll>:
{
 800a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800a90a:	4c2b      	ldr	r4, [pc, #172]	; (800a9b8 <xTaskResumeAll+0xb0>)
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <xTaskResumeAll+0xe>
 800a912:	b672      	cpsid	i
 800a914:	e7fe      	b.n	800a914 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800a916:	f000 fb9b 	bl	800b050 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a920:	6824      	ldr	r4, [r4, #0]
 800a922:	2c00      	cmp	r4, #0
 800a924:	d004      	beq.n	800a930 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 800a926:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a928:	f000 fb9e 	bl	800b068 <vPortExitCritical>
}
 800a92c:	0020      	movs	r0, r4
 800a92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a930:	4b22      	ldr	r3, [pc, #136]	; (800a9bc <xTaskResumeAll+0xb4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0f6      	beq.n	800a926 <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 800a938:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 800a93a:	2701      	movs	r7, #1
 800a93c:	e01d      	b.n	800a97a <xTaskResumeAll+0x72>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a942:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a944:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a946:	3018      	adds	r0, #24
 800a948:	f7ff faa1 	bl	8009e8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a94c:	0028      	movs	r0, r5
 800a94e:	f7ff fa9e 	bl	8009e8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a952:	4b1b      	ldr	r3, [pc, #108]	; (800a9c0 <xTaskResumeAll+0xb8>)
 800a954:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	4290      	cmp	r0, r2
 800a95a:	d900      	bls.n	800a95e <xTaskResumeAll+0x56>
 800a95c:	6018      	str	r0, [r3, #0]
 800a95e:	4370      	muls	r0, r6
 800a960:	4b18      	ldr	r3, [pc, #96]	; (800a9c4 <xTaskResumeAll+0xbc>)
 800a962:	0029      	movs	r1, r5
 800a964:	18c0      	adds	r0, r0, r3
 800a966:	f7ff fa6f 	bl	8009e48 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a96a:	4b17      	ldr	r3, [pc, #92]	; (800a9c8 <xTaskResumeAll+0xc0>)
 800a96c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a972:	429a      	cmp	r2, r3
 800a974:	d301      	bcc.n	800a97a <xTaskResumeAll+0x72>
						xYieldPending = pdTRUE;
 800a976:	4b15      	ldr	r3, [pc, #84]	; (800a9cc <xTaskResumeAll+0xc4>)
 800a978:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a97a:	4b15      	ldr	r3, [pc, #84]	; (800a9d0 <xTaskResumeAll+0xc8>)
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	2a00      	cmp	r2, #0
 800a980:	d1dd      	bne.n	800a93e <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
 800a982:	2c00      	cmp	r4, #0
 800a984:	d001      	beq.n	800a98a <xTaskResumeAll+0x82>
					prvResetNextTaskUnblockTime();
 800a986:	f7ff fdeb 	bl	800a560 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a98a:	4d12      	ldr	r5, [pc, #72]	; (800a9d4 <xTaskResumeAll+0xcc>)
 800a98c:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a98e:	2c00      	cmp	r4, #0
 800a990:	d00a      	beq.n	800a9a8 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800a992:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 800a994:	f7ff ff34 	bl	800a800 <xTaskIncrementTick>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d001      	beq.n	800a9a0 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <xTaskResumeAll+0xc4>)
 800a99e:	601e      	str	r6, [r3, #0]
							--xPendedCounts;
 800a9a0:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9a2:	2c00      	cmp	r4, #0
 800a9a4:	d1f6      	bne.n	800a994 <xTaskResumeAll+0x8c>
						xPendedTicks = 0;
 800a9a6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800a9a8:	4b08      	ldr	r3, [pc, #32]	; (800a9cc <xTaskResumeAll+0xc4>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0ba      	beq.n	800a926 <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 800a9b0:	f000 fb42 	bl	800b038 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800a9b4:	2401      	movs	r4, #1
 800a9b6:	e7b7      	b.n	800a928 <xTaskResumeAll+0x20>
 800a9b8:	20004b64 	.word	0x20004b64
 800a9bc:	20004b5c 	.word	0x20004b5c
 800a9c0:	20004b6c 	.word	0x20004b6c
 800a9c4:	200046fc 	.word	0x200046fc
 800a9c8:	200046f0 	.word	0x200046f0
 800a9cc:	20004be8 	.word	0x20004be8
 800a9d0:	20004ba4 	.word	0x20004ba4
 800a9d4:	20004ba0 	.word	0x20004ba0

0800a9d8 <vTaskDelay>:
	{
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9dc:	d102      	bne.n	800a9e4 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 800a9de:	f000 fb2b 	bl	800b038 <vPortYield>
	}
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a9e4:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <vTaskDelay+0x30>)
 800a9e6:	681d      	ldr	r5, [r3, #0]
 800a9e8:	2d00      	cmp	r5, #0
 800a9ea:	d001      	beq.n	800a9f0 <vTaskDelay+0x18>
 800a9ec:	b672      	cpsid	i
 800a9ee:	e7fe      	b.n	800a9ee <vTaskDelay+0x16>
			vTaskSuspendAll();
 800a9f0:	f7ff fef8 	bl	800a7e4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9f4:	0029      	movs	r1, r5
 800a9f6:	0020      	movs	r0, r4
 800a9f8:	f7ff fd7a 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a9fc:	f7ff ff84 	bl	800a908 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d0ec      	beq.n	800a9de <vTaskDelay+0x6>
 800aa04:	e7ed      	b.n	800a9e2 <vTaskDelay+0xa>
 800aa06:	46c0      	nop			; (mov r8, r8)
 800aa08:	20004b64 	.word	0x20004b64

0800aa0c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa0c:	4b17      	ldr	r3, [pc, #92]	; (800aa6c <vTaskSwitchContext+0x60>)
{
 800aa0e:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	4b17      	ldr	r3, [pc, #92]	; (800aa70 <vTaskSwitchContext+0x64>)
 800aa14:	2a00      	cmp	r2, #0
 800aa16:	d002      	beq.n	800aa1e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800aa18:	2201      	movs	r2, #1
 800aa1a:	601a      	str	r2, [r3, #0]
}
 800aa1c:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa1e:	2514      	movs	r5, #20
 800aa20:	4814      	ldr	r0, [pc, #80]	; (800aa74 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 800aa22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa24:	6802      	ldr	r2, [r0, #0]
 800aa26:	4914      	ldr	r1, [pc, #80]	; (800aa78 <vTaskSwitchContext+0x6c>)
 800aa28:	002b      	movs	r3, r5
 800aa2a:	4353      	muls	r3, r2
 800aa2c:	585c      	ldr	r4, [r3, r1]
 800aa2e:	2c00      	cmp	r4, #0
 800aa30:	d016      	beq.n	800aa60 <vTaskSwitchContext+0x54>
 800aa32:	18cc      	adds	r4, r1, r3
 800aa34:	6865      	ldr	r5, [r4, #4]
 800aa36:	3308      	adds	r3, #8
 800aa38:	686d      	ldr	r5, [r5, #4]
 800aa3a:	185b      	adds	r3, r3, r1
 800aa3c:	6065      	str	r5, [r4, #4]
 800aa3e:	429d      	cmp	r5, r3
 800aa40:	d101      	bne.n	800aa46 <vTaskSwitchContext+0x3a>
 800aa42:	686b      	ldr	r3, [r5, #4]
 800aa44:	6063      	str	r3, [r4, #4]
 800aa46:	2314      	movs	r3, #20
 800aa48:	4353      	muls	r3, r2
 800aa4a:	18c9      	adds	r1, r1, r3
 800aa4c:	684b      	ldr	r3, [r1, #4]
 800aa4e:	68d9      	ldr	r1, [r3, #12]
 800aa50:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <vTaskSwitchContext+0x70>)
 800aa52:	6019      	str	r1, [r3, #0]
 800aa54:	6002      	str	r2, [r0, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a09      	ldr	r2, [pc, #36]	; (800aa80 <vTaskSwitchContext+0x74>)
 800aa5a:	3354      	adds	r3, #84	; 0x54
 800aa5c:	6013      	str	r3, [r2, #0]
}
 800aa5e:	e7dd      	b.n	800aa1c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	d101      	bne.n	800aa68 <vTaskSwitchContext+0x5c>
 800aa64:	b672      	cpsid	i
 800aa66:	e7fe      	b.n	800aa66 <vTaskSwitchContext+0x5a>
 800aa68:	3a01      	subs	r2, #1
 800aa6a:	e7dd      	b.n	800aa28 <vTaskSwitchContext+0x1c>
 800aa6c:	20004b64 	.word	0x20004b64
 800aa70:	20004be8 	.word	0x20004be8
 800aa74:	20004b6c 	.word	0x20004b6c
 800aa78:	200046fc 	.word	0x200046fc
 800aa7c:	200046f0 	.word	0x200046f0
 800aa80:	200002b8 	.word	0x200002b8

0800aa84 <vTaskPlaceOnEventList>:
{
 800aa84:	b510      	push	{r4, lr}
 800aa86:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d101      	bne.n	800aa90 <vTaskPlaceOnEventList+0xc>
 800aa8c:	b672      	cpsid	i
 800aa8e:	e7fe      	b.n	800aa8e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa90:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <vTaskPlaceOnEventList+0x20>)
 800aa92:	6819      	ldr	r1, [r3, #0]
 800aa94:	3118      	adds	r1, #24
 800aa96:	f7ff f9e3 	bl	8009e60 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	0020      	movs	r0, r4
 800aa9e:	f7ff fd27 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
}
 800aaa2:	bd10      	pop	{r4, pc}
 800aaa4:	200046f0 	.word	0x200046f0

0800aaa8 <vTaskPlaceOnEventListRestricted>:
	{
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	000c      	movs	r4, r1
 800aaac:	0015      	movs	r5, r2
		configASSERT( pxEventList );
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d101      	bne.n	800aab6 <vTaskPlaceOnEventListRestricted+0xe>
 800aab2:	b672      	cpsid	i
 800aab4:	e7fe      	b.n	800aab4 <vTaskPlaceOnEventListRestricted+0xc>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aab6:	4b07      	ldr	r3, [pc, #28]	; (800aad4 <vTaskPlaceOnEventListRestricted+0x2c>)
 800aab8:	6819      	ldr	r1, [r3, #0]
 800aaba:	3118      	adds	r1, #24
 800aabc:	f7ff f9c4 	bl	8009e48 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800aac0:	2d00      	cmp	r5, #0
 800aac2:	d001      	beq.n	800aac8 <vTaskPlaceOnEventListRestricted+0x20>
			xTicksToWait = portMAX_DELAY;
 800aac4:	2401      	movs	r4, #1
 800aac6:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aac8:	0029      	movs	r1, r5
 800aaca:	0020      	movs	r0, r4
 800aacc:	f7ff fd10 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
	}
 800aad0:	bd70      	pop	{r4, r5, r6, pc}
 800aad2:	46c0      	nop			; (mov r8, r8)
 800aad4:	200046f0 	.word	0x200046f0

0800aad8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad8:	68c3      	ldr	r3, [r0, #12]
{
 800aada:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aadc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800aade:	2c00      	cmp	r4, #0
 800aae0:	d101      	bne.n	800aae6 <xTaskRemoveFromEventList+0xe>
 800aae2:	b672      	cpsid	i
 800aae4:	e7fe      	b.n	800aae4 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aae6:	0025      	movs	r5, r4
 800aae8:	3518      	adds	r5, #24
 800aaea:	0028      	movs	r0, r5
 800aaec:	f7ff f9cf 	bl	8009e8e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaf0:	4b10      	ldr	r3, [pc, #64]	; (800ab34 <xTaskRemoveFromEventList+0x5c>)
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaf2:	4811      	ldr	r0, [pc, #68]	; (800ab38 <xTaskRemoveFromEventList+0x60>)
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10d      	bne.n	800ab16 <xTaskRemoveFromEventList+0x3e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aafa:	1d25      	adds	r5, r4, #4
 800aafc:	0028      	movs	r0, r5
 800aafe:	f7ff f9c6 	bl	8009e8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab02:	4a0e      	ldr	r2, [pc, #56]	; (800ab3c <xTaskRemoveFromEventList+0x64>)
 800ab04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab06:	6811      	ldr	r1, [r2, #0]
 800ab08:	428b      	cmp	r3, r1
 800ab0a:	d900      	bls.n	800ab0e <xTaskRemoveFromEventList+0x36>
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	2014      	movs	r0, #20
 800ab10:	4358      	muls	r0, r3
 800ab12:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <xTaskRemoveFromEventList+0x68>)
 800ab14:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab16:	0029      	movs	r1, r5
 800ab18:	f7ff f996 	bl	8009e48 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <xTaskRemoveFromEventList+0x6c>)
 800ab1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ab20:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 800ab22:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d902      	bls.n	800ab30 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <xTaskRemoveFromEventList+0x70>)
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	6018      	str	r0, [r3, #0]
}
 800ab30:	bd70      	pop	{r4, r5, r6, pc}
 800ab32:	46c0      	nop			; (mov r8, r8)
 800ab34:	20004b64 	.word	0x20004b64
 800ab38:	20004ba4 	.word	0x20004ba4
 800ab3c:	20004b6c 	.word	0x20004b6c
 800ab40:	200046fc 	.word	0x200046fc
 800ab44:	200046f0 	.word	0x200046f0
 800ab48:	20004be8 	.word	0x20004be8

0800ab4c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab4c:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <vTaskInternalSetTimeOutState+0x10>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab52:	4b03      	ldr	r3, [pc, #12]	; (800ab60 <vTaskInternalSetTimeOutState+0x14>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6043      	str	r3, [r0, #4]
}
 800ab58:	4770      	bx	lr
 800ab5a:	46c0      	nop			; (mov r8, r8)
 800ab5c:	20004b9c 	.word	0x20004b9c
 800ab60:	20004be4 	.word	0x20004be4

0800ab64 <xTaskCheckForTimeOut>:
{
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	0005      	movs	r5, r0
 800ab68:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d101      	bne.n	800ab72 <xTaskCheckForTimeOut+0xe>
 800ab6e:	b672      	cpsid	i
 800ab70:	e7fe      	b.n	800ab70 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 800ab72:	2900      	cmp	r1, #0
 800ab74:	d101      	bne.n	800ab7a <xTaskCheckForTimeOut+0x16>
 800ab76:	b672      	cpsid	i
 800ab78:	e7fe      	b.n	800ab78 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800ab7a:	f000 fa69 	bl	800b050 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ab7e:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <xTaskCheckForTimeOut+0x5c>)
				xReturn = pdFALSE;
 800ab80:	2600      	movs	r6, #0
		const TickType_t xConstTickCount = xTickCount;
 800ab82:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	d012      	beq.n	800abb0 <xTaskCheckForTimeOut+0x4c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab8a:	480e      	ldr	r0, [pc, #56]	; (800abc4 <xTaskCheckForTimeOut+0x60>)
 800ab8c:	682e      	ldr	r6, [r5, #0]
 800ab8e:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab90:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab92:	4286      	cmp	r6, r0
 800ab94:	d002      	beq.n	800ab9c <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
 800ab96:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab98:	428a      	cmp	r2, r1
 800ab9a:	d909      	bls.n	800abb0 <xTaskCheckForTimeOut+0x4c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab9c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab9e:	4283      	cmp	r3, r0
 800aba0:	d90a      	bls.n	800abb8 <xTaskCheckForTimeOut+0x54>
			*pxTicksToWait -= xElapsedTime;
 800aba2:	1a5b      	subs	r3, r3, r1
 800aba4:	189b      	adds	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aba6:	0028      	movs	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800aba8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abaa:	f7ff ffcf 	bl	800ab4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abae:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800abb0:	f000 fa5a 	bl	800b068 <vPortExitCritical>
}
 800abb4:	0030      	movs	r0, r6
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800abb8:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800abba:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800abbc:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800abbe:	e7f7      	b.n	800abb0 <xTaskCheckForTimeOut+0x4c>
 800abc0:	20004be4 	.word	0x20004be4
 800abc4:	20004b9c 	.word	0x20004b9c

0800abc8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800abc8:	2201      	movs	r2, #1
 800abca:	4b01      	ldr	r3, [pc, #4]	; (800abd0 <vTaskMissedYield+0x8>)
 800abcc:	601a      	str	r2, [r3, #0]
}
 800abce:	4770      	bx	lr
 800abd0:	20004be8 	.word	0x20004be8

0800abd4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800abd4:	4b05      	ldr	r3, [pc, #20]	; (800abec <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abd6:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d004      	beq.n	800abe8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abde:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <xTaskGetSchedulerState+0x1c>)
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	4243      	negs	r3, r0
 800abe4:	4158      	adcs	r0, r3
 800abe6:	0040      	lsls	r0, r0, #1
	}
 800abe8:	4770      	bx	lr
 800abea:	46c0      	nop			; (mov r8, r8)
 800abec:	20004bb8 	.word	0x20004bb8
 800abf0:	20004b64 	.word	0x20004b64

0800abf4 <xTaskPriorityDisinherit>:
	{
 800abf4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d101      	bne.n	800abfe <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800abfa:	2000      	movs	r0, #0
	}
 800abfc:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800abfe:	4b15      	ldr	r3, [pc, #84]	; (800ac54 <xTaskPriorityDisinherit+0x60>)
 800ac00:	681c      	ldr	r4, [r3, #0]
 800ac02:	4284      	cmp	r4, r0
 800ac04:	d001      	beq.n	800ac0a <xTaskPriorityDisinherit+0x16>
 800ac06:	b672      	cpsid	i
 800ac08:	e7fe      	b.n	800ac08 <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <xTaskPriorityDisinherit+0x20>
 800ac10:	b672      	cpsid	i
 800ac12:	e7fe      	b.n	800ac12 <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ac16:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac1c:	4291      	cmp	r1, r2
 800ac1e:	d0ec      	beq.n	800abfa <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1ea      	bne.n	800abfa <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac24:	1d25      	adds	r5, r4, #4
 800ac26:	0028      	movs	r0, r5
 800ac28:	f7ff f931 	bl	8009e8e <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac2c:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac30:	1ad2      	subs	r2, r2, r3
 800ac32:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac34:	4a08      	ldr	r2, [pc, #32]	; (800ac58 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac36:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ac38:	6811      	ldr	r1, [r2, #0]
 800ac3a:	428b      	cmp	r3, r1
 800ac3c:	d900      	bls.n	800ac40 <xTaskPriorityDisinherit+0x4c>
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	2014      	movs	r0, #20
 800ac42:	4358      	muls	r0, r3
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <xTaskPriorityDisinherit+0x68>)
 800ac46:	0029      	movs	r1, r5
 800ac48:	18c0      	adds	r0, r0, r3
 800ac4a:	f7ff f8fd 	bl	8009e48 <vListInsertEnd>
					xReturn = pdTRUE;
 800ac4e:	2001      	movs	r0, #1
		return xReturn;
 800ac50:	e7d4      	b.n	800abfc <xTaskPriorityDisinherit+0x8>
 800ac52:	46c0      	nop			; (mov r8, r8)
 800ac54:	200046f0 	.word	0x200046f0
 800ac58:	20004b6c 	.word	0x20004b6c
 800ac5c:	200046fc 	.word	0x200046fc

0800ac60 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac62:	f000 f9f5 	bl	800b050 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac66:	4c10      	ldr	r4, [pc, #64]	; (800aca8 <prvCheckForValidListAndQueue+0x48>)
 800ac68:	6825      	ldr	r5, [r4, #0]
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	d118      	bne.n	800aca0 <prvCheckForValidListAndQueue+0x40>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac6e:	4f0f      	ldr	r7, [pc, #60]	; (800acac <prvCheckForValidListAndQueue+0x4c>)
 800ac70:	0038      	movs	r0, r7
 800ac72:	f7ff f8db 	bl	8009e2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac76:	4e0e      	ldr	r6, [pc, #56]	; (800acb0 <prvCheckForValidListAndQueue+0x50>)
 800ac78:	0030      	movs	r0, r6
 800ac7a:	f7ff f8d7 	bl	8009e2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac7e:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac80:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ac82:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac84:	4b0c      	ldr	r3, [pc, #48]	; (800acb8 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac86:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ac88:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac8a:	4a0c      	ldr	r2, [pc, #48]	; (800acbc <prvCheckForValidListAndQueue+0x5c>)
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <prvCheckForValidListAndQueue+0x60>)
 800ac8e:	9500      	str	r5, [sp, #0]
 800ac90:	f7ff f9cd 	bl	800a02e <xQueueGenericCreateStatic>
 800ac94:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d002      	beq.n	800aca0 <prvCheckForValidListAndQueue+0x40>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac9a:	490a      	ldr	r1, [pc, #40]	; (800acc4 <prvCheckForValidListAndQueue+0x64>)
 800ac9c:	f7ff fb7a 	bl	800a394 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aca0:	f000 f9e2 	bl	800b068 <vPortExitCritical>
}
 800aca4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aca6:	46c0      	nop			; (mov r8, r8)
 800aca8:	20004d10 	.word	0x20004d10
 800acac:	20004c94 	.word	0x20004c94
 800acb0:	20004ca8 	.word	0x20004ca8
 800acb4:	20004bec 	.word	0x20004bec
 800acb8:	20004bf0 	.word	0x20004bf0
 800acbc:	20004bf4 	.word	0x20004bf4
 800acc0:	20004cc0 	.word	0x20004cc0
 800acc4:	08011eb9 	.word	0x08011eb9

0800acc8 <prvInsertTimerInActiveList>:
{
 800acc8:	b510      	push	{r4, lr}
 800acca:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800accc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acce:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800acd0:	4291      	cmp	r1, r2
 800acd2:	d80b      	bhi.n	800acec <prvInsertTimerInActiveList+0x24>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd4:	1ad2      	subs	r2, r2, r3
 800acd6:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800acd8:	2001      	movs	r0, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acda:	429a      	cmp	r2, r3
 800acdc:	d205      	bcs.n	800acea <prvInsertTimerInActiveList+0x22>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acde:	4b07      	ldr	r3, [pc, #28]	; (800acfc <prvInsertTimerInActiveList+0x34>)
 800ace0:	1d21      	adds	r1, r4, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	f7ff f8bc 	bl	8009e60 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ace8:	2000      	movs	r0, #0
}
 800acea:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800acec:	429a      	cmp	r2, r3
 800acee:	d202      	bcs.n	800acf6 <prvInsertTimerInActiveList+0x2e>
			xProcessTimerNow = pdTRUE;
 800acf0:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800acf2:	4299      	cmp	r1, r3
 800acf4:	d2f9      	bcs.n	800acea <prvInsertTimerInActiveList+0x22>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acf6:	4b02      	ldr	r3, [pc, #8]	; (800ad00 <prvInsertTimerInActiveList+0x38>)
 800acf8:	1d21      	adds	r1, r4, #4
 800acfa:	e7f2      	b.n	800ace2 <prvInsertTimerInActiveList+0x1a>
 800acfc:	20004bf0 	.word	0x20004bf0
 800ad00:	20004bec 	.word	0x20004bec

0800ad04 <xTimerCreateTimerTask>:
{
 800ad04:	b510      	push	{r4, lr}
 800ad06:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ad08:	f7ff ffaa 	bl	800ac60 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ad0c:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <xTimerCreateTimerTask+0x4c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d017      	beq.n	800ad44 <xTimerCreateTimerTask+0x40>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad14:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad16:	aa07      	add	r2, sp, #28
 800ad18:	a906      	add	r1, sp, #24
 800ad1a:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad1c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad1e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad20:	f7ff f878 	bl	8009e14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad24:	9b05      	ldr	r3, [sp, #20]
 800ad26:	490b      	ldr	r1, [pc, #44]	; (800ad54 <xTimerCreateTimerTask+0x50>)
 800ad28:	9302      	str	r3, [sp, #8]
 800ad2a:	9b06      	ldr	r3, [sp, #24]
 800ad2c:	480a      	ldr	r0, [pc, #40]	; (800ad58 <xTimerCreateTimerTask+0x54>)
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	2302      	movs	r3, #2
 800ad32:	9a07      	ldr	r2, [sp, #28]
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	0023      	movs	r3, r4
 800ad38:	f7ff fcc2 	bl	800a6c0 <xTaskCreateStatic>
 800ad3c:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <xTimerCreateTimerTask+0x58>)
 800ad3e:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ad40:	42a0      	cmp	r0, r4
 800ad42:	d101      	bne.n	800ad48 <xTimerCreateTimerTask+0x44>
	configASSERT( xReturn );
 800ad44:	b672      	cpsid	i
 800ad46:	e7fe      	b.n	800ad46 <xTimerCreateTimerTask+0x42>
}
 800ad48:	2001      	movs	r0, #1
 800ad4a:	b008      	add	sp, #32
 800ad4c:	bd10      	pop	{r4, pc}
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	20004d10 	.word	0x20004d10
 800ad54:	08011ebe 	.word	0x08011ebe
 800ad58:	0800ae41 	.word	0x0800ae41
 800ad5c:	20004d14 	.word	0x20004d14

0800ad60 <xTimerGenericCommand>:
{
 800ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad62:	0017      	movs	r7, r2
 800ad64:	0004      	movs	r4, r0
 800ad66:	001a      	movs	r2, r3
 800ad68:	b085      	sub	sp, #20
	configASSERT( xTimer );
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d101      	bne.n	800ad72 <xTimerGenericCommand+0x12>
 800ad6e:	b672      	cpsid	i
 800ad70:	e7fe      	b.n	800ad70 <xTimerGenericCommand+0x10>
	if( xTimerQueue != NULL )
 800ad72:	4d0d      	ldr	r5, [pc, #52]	; (800ada8 <xTimerGenericCommand+0x48>)
 800ad74:	682e      	ldr	r6, [r5, #0]
BaseType_t xReturn = pdFAIL;
 800ad76:	1e30      	subs	r0, r6, #0
	if( xTimerQueue != NULL )
 800ad78:	d00f      	beq.n	800ad9a <xTimerGenericCommand+0x3a>
		xMessage.xMessageID = xCommandID;
 800ad7a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad7c:	9701      	str	r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad7e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad80:	2905      	cmp	r1, #5
 800ad82:	dc0c      	bgt.n	800ad9e <xTimerGenericCommand+0x3e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad84:	f7ff ff26 	bl	800abd4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad88:	2300      	movs	r3, #0
 800ad8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad8c:	2802      	cmp	r0, #2
 800ad8e:	d000      	beq.n	800ad92 <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad90:	001a      	movs	r2, r3
 800ad92:	4669      	mov	r1, sp
 800ad94:	6828      	ldr	r0, [r5, #0]
 800ad96:	f7ff f99e 	bl	800a0d6 <xQueueGenericSend>
}
 800ad9a:	b005      	add	sp, #20
 800ad9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4669      	mov	r1, sp
 800ada2:	f7ff fa28 	bl	800a1f6 <xQueueGenericSendFromISR>
 800ada6:	e7f8      	b.n	800ad9a <xTimerGenericCommand+0x3a>
 800ada8:	20004d10 	.word	0x20004d10

0800adac <prvSampleTimeNow>:
{
 800adac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adae:	b087      	sub	sp, #28
 800adb0:	9005      	str	r0, [sp, #20]
	xTimeNow = xTaskGetTickCount();
 800adb2:	f7ff fd1f 	bl	800a7f4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800adb6:	4f1f      	ldr	r7, [pc, #124]	; (800ae34 <prvSampleTimeNow+0x88>)
	xTimeNow = xTaskGetTickCount();
 800adb8:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	4283      	cmp	r3, r0
 800adbe:	d823      	bhi.n	800ae08 <prvSampleTimeNow+0x5c>
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	0028      	movs	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800adc4:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 800adc6:	603d      	str	r5, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800adc8:	6013      	str	r3, [r2, #0]
}
 800adca:	b007      	add	sp, #28
 800adcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adce:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800add2:	681a      	ldr	r2, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800add4:	1d23      	adds	r3, r4, #4
 800add6:	0018      	movs	r0, r3
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800add8:	9203      	str	r2, [sp, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adda:	9304      	str	r3, [sp, #16]
 800addc:	f7ff f857 	bl	8009e8e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ade0:	6a23      	ldr	r3, [r4, #32]
 800ade2:	0020      	movs	r0, r4
 800ade4:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ade6:	0023      	movs	r3, r4
 800ade8:	2204      	movs	r2, #4
 800adea:	3328      	adds	r3, #40	; 0x28
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	4213      	tst	r3, r2
 800adf0:	d00a      	beq.n	800ae08 <prvSampleTimeNow+0x5c>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800adf2:	69a3      	ldr	r3, [r4, #24]
 800adf4:	9a03      	ldr	r2, [sp, #12]
 800adf6:	18d3      	adds	r3, r2, r3
			if( xReloadTime > xNextExpireTime )
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d210      	bcs.n	800ae1e <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adfc:	9904      	ldr	r1, [sp, #16]
 800adfe:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae00:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae02:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae04:	f7ff f82c 	bl	8009e60 <vListInsert>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae08:	4e0b      	ldr	r6, [pc, #44]	; (800ae38 <prvSampleTimeNow+0x8c>)
 800ae0a:	6833      	ldr	r3, [r6, #0]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	2a00      	cmp	r2, #0
 800ae10:	d1dd      	bne.n	800adce <prvSampleTimeNow+0x22>
	pxCurrentTimerList = pxOverflowTimerList;
 800ae12:	4a0a      	ldr	r2, [pc, #40]	; (800ae3c <prvSampleTimeNow+0x90>)
 800ae14:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae16:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae18:	6031      	str	r1, [r6, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e7d1      	b.n	800adc2 <prvSampleTimeNow+0x16>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae1e:	2100      	movs	r1, #0
 800ae20:	0020      	movs	r0, r4
 800ae22:	000b      	movs	r3, r1
 800ae24:	9a03      	ldr	r2, [sp, #12]
 800ae26:	9100      	str	r1, [sp, #0]
 800ae28:	f7ff ff9a 	bl	800ad60 <xTimerGenericCommand>
				configASSERT( xResult );
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1eb      	bne.n	800ae08 <prvSampleTimeNow+0x5c>
 800ae30:	b672      	cpsid	i
 800ae32:	e7fe      	b.n	800ae32 <prvSampleTimeNow+0x86>
 800ae34:	20004cbc 	.word	0x20004cbc
 800ae38:	20004bec 	.word	0x20004bec
 800ae3c:	20004bf0 	.word	0x20004bf0

0800ae40 <prvTimerTask>:
{
 800ae40:	b5f0      	push	{r4, r5, r6, r7, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae42:	2701      	movs	r7, #1
{
 800ae44:	b08b      	sub	sp, #44	; 0x2c
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae46:	4e5a      	ldr	r6, [pc, #360]	; (800afb0 <prvTimerTask+0x170>)
 800ae48:	003d      	movs	r5, r7
 800ae4a:	6833      	ldr	r3, [r6, #0]
 800ae4c:	681c      	ldr	r4, [r3, #0]
 800ae4e:	2c00      	cmp	r4, #0
 800ae50:	d002      	beq.n	800ae58 <prvTimerTask+0x18>
 800ae52:	2500      	movs	r5, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800ae58:	f7ff fcc4 	bl	800a7e4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae5c:	a806      	add	r0, sp, #24
 800ae5e:	f7ff ffa5 	bl	800adac <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800ae62:	9b06      	ldr	r3, [sp, #24]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae64:	9003      	str	r0, [sp, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d15f      	bne.n	800af2a <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae6a:	2d00      	cmp	r5, #0
 800ae6c:	d14a      	bne.n	800af04 <prvTimerTask+0xc4>
 800ae6e:	42a0      	cmp	r0, r4
 800ae70:	d34d      	bcc.n	800af0e <prvTimerTask+0xce>
				( void ) xTaskResumeAll();
 800ae72:	f7ff fd49 	bl	800a908 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae76:	6833      	ldr	r3, [r6, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae7c:	1d30      	adds	r0, r6, #4
 800ae7e:	f7ff f806 	bl	8009e8e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae82:	0032      	movs	r2, r6
 800ae84:	2104      	movs	r1, #4
 800ae86:	3228      	adds	r2, #40	; 0x28
 800ae88:	7813      	ldrb	r3, [r2, #0]
 800ae8a:	420b      	tst	r3, r1
 800ae8c:	d013      	beq.n	800aeb6 <prvTimerTask+0x76>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae8e:	69b1      	ldr	r1, [r6, #24]
 800ae90:	0023      	movs	r3, r4
 800ae92:	0030      	movs	r0, r6
 800ae94:	9a03      	ldr	r2, [sp, #12]
 800ae96:	1861      	adds	r1, r4, r1
 800ae98:	f7ff ff16 	bl	800acc8 <prvInsertTimerInActiveList>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d00c      	beq.n	800aeba <prvTimerTask+0x7a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aea0:	002b      	movs	r3, r5
 800aea2:	0022      	movs	r2, r4
 800aea4:	0029      	movs	r1, r5
 800aea6:	0030      	movs	r0, r6
 800aea8:	9500      	str	r5, [sp, #0]
 800aeaa:	f7ff ff59 	bl	800ad60 <xTimerGenericCommand>
			configASSERT( xResult );
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d103      	bne.n	800aeba <prvTimerTask+0x7a>
 800aeb2:	b672      	cpsid	i
 800aeb4:	e7fe      	b.n	800aeb4 <prvTimerTask+0x74>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aeb6:	43bb      	bics	r3, r7
 800aeb8:	7013      	strb	r3, [r2, #0]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeba:	0030      	movs	r0, r6
 800aebc:	6a33      	ldr	r3, [r6, #32]
 800aebe:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aec0:	2602      	movs	r6, #2
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aec2:	4b3c      	ldr	r3, [pc, #240]	; (800afb4 <prvTimerTask+0x174>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	6818      	ldr	r0, [r3, #0]
 800aec8:	a906      	add	r1, sp, #24
 800aeca:	f7ff f9de 	bl	800a28a <xQueueReceive>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d0b9      	beq.n	800ae46 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aed2:	9b06      	ldr	r3, [sp, #24]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aed4:	9808      	ldr	r0, [sp, #32]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	db2a      	blt.n	800af30 <prvTimerTask+0xf0>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aeda:	9c08      	ldr	r4, [sp, #32]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aedc:	6963      	ldr	r3, [r4, #20]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d12d      	bne.n	800af3e <prvTimerTask+0xfe>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aee2:	a805      	add	r0, sp, #20
 800aee4:	f7ff ff62 	bl	800adac <prvSampleTimeNow>
 800aee8:	0002      	movs	r2, r0
			switch( xMessage.xMessageID )
 800aeea:	9806      	ldr	r0, [sp, #24]
 800aeec:	2809      	cmp	r0, #9
 800aeee:	d8e8      	bhi.n	800aec2 <prvTimerTask+0x82>
 800aef0:	0025      	movs	r5, r4
 800aef2:	3528      	adds	r5, #40	; 0x28
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aef4:	782b      	ldrb	r3, [r5, #0]
			switch( xMessage.xMessageID )
 800aef6:	f7f5 f919 	bl	800012c <__gnu_thumb1_case_uqi>
 800aefa:	2626      	.short	0x2626
 800aefc:	52445826 	.word	0x52445826
 800af00:	44582626 	.word	0x44582626
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af04:	4b2c      	ldr	r3, [pc, #176]	; (800afb8 <prvTimerTask+0x178>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681d      	ldr	r5, [r3, #0]
 800af0a:	426b      	negs	r3, r5
 800af0c:	415d      	adcs	r5, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	002a      	movs	r2, r5
 800af12:	1ae1      	subs	r1, r4, r3
 800af14:	4b27      	ldr	r3, [pc, #156]	; (800afb4 <prvTimerTask+0x174>)
 800af16:	6818      	ldr	r0, [r3, #0]
 800af18:	f7ff fa4e 	bl	800a3b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af1c:	f7ff fcf4 	bl	800a908 <xTaskResumeAll>
 800af20:	2800      	cmp	r0, #0
 800af22:	d1cd      	bne.n	800aec0 <prvTimerTask+0x80>
					portYIELD_WITHIN_API();
 800af24:	f000 f888 	bl	800b038 <vPortYield>
 800af28:	e7ca      	b.n	800aec0 <prvTimerTask+0x80>
			( void ) xTaskResumeAll();
 800af2a:	f7ff fced 	bl	800a908 <xTaskResumeAll>
 800af2e:	e7c7      	b.n	800aec0 <prvTimerTask+0x80>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af30:	9b07      	ldr	r3, [sp, #28]
 800af32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af34:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af36:	9b06      	ldr	r3, [sp, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	dbc2      	blt.n	800aec2 <prvTimerTask+0x82>
 800af3c:	e7cd      	b.n	800aeda <prvTimerTask+0x9a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af3e:	1d20      	adds	r0, r4, #4
 800af40:	f7fe ffa5 	bl	8009e8e <uxListRemove>
 800af44:	e7cd      	b.n	800aee2 <prvTimerTask+0xa2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af46:	433b      	orrs	r3, r7
 800af48:	702b      	strb	r3, [r5, #0]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af4a:	9b07      	ldr	r3, [sp, #28]
 800af4c:	69a1      	ldr	r1, [r4, #24]
 800af4e:	0020      	movs	r0, r4
 800af50:	1859      	adds	r1, r3, r1
 800af52:	f7ff feb9 	bl	800acc8 <prvInsertTimerInActiveList>
 800af56:	2800      	cmp	r0, #0
 800af58:	d0b3      	beq.n	800aec2 <prvTimerTask+0x82>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af5a:	6a23      	ldr	r3, [r4, #32]
 800af5c:	0020      	movs	r0, r4
 800af5e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af60:	2204      	movs	r2, #4
 800af62:	782b      	ldrb	r3, [r5, #0]
 800af64:	4213      	tst	r3, r2
 800af66:	d0ac      	beq.n	800aec2 <prvTimerTask+0x82>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af68:	2100      	movs	r1, #0
 800af6a:	69a3      	ldr	r3, [r4, #24]
 800af6c:	9a07      	ldr	r2, [sp, #28]
 800af6e:	0020      	movs	r0, r4
 800af70:	18d2      	adds	r2, r2, r3
 800af72:	9100      	str	r1, [sp, #0]
 800af74:	000b      	movs	r3, r1
 800af76:	f7ff fef3 	bl	800ad60 <xTimerGenericCommand>
							configASSERT( xResult );
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d1a1      	bne.n	800aec2 <prvTimerTask+0x82>
 800af7e:	b672      	cpsid	i
 800af80:	e7fe      	b.n	800af80 <prvTimerTask+0x140>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af82:	433b      	orrs	r3, r7
 800af84:	702b      	strb	r3, [r5, #0]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af86:	9907      	ldr	r1, [sp, #28]
 800af88:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af8a:	2900      	cmp	r1, #0
 800af8c:	d101      	bne.n	800af92 <prvTimerTask+0x152>
 800af8e:	b672      	cpsid	i
 800af90:	e7fe      	b.n	800af90 <prvTimerTask+0x150>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af92:	0013      	movs	r3, r2
 800af94:	0020      	movs	r0, r4
 800af96:	1851      	adds	r1, r2, r1
 800af98:	f7ff fe96 	bl	800acc8 <prvInsertTimerInActiveList>
					break;
 800af9c:	e791      	b.n	800aec2 <prvTimerTask+0x82>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af9e:	4233      	tst	r3, r6
 800afa0:	d103      	bne.n	800afaa <prvTimerTask+0x16a>
							vPortFree( pxTimer );
 800afa2:	0020      	movs	r0, r4
 800afa4:	f000 f994 	bl	800b2d0 <vPortFree>
 800afa8:	e78b      	b.n	800aec2 <prvTimerTask+0x82>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afaa:	43bb      	bics	r3, r7
 800afac:	702b      	strb	r3, [r5, #0]
 800afae:	e788      	b.n	800aec2 <prvTimerTask+0x82>
 800afb0:	20004bec 	.word	0x20004bec
 800afb4:	20004d10 	.word	0x20004d10
 800afb8:	20004bf0 	.word	0x20004bf0

0800afbc <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800afbc:	2300      	movs	r3, #0
{
 800afbe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800afc0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afc2:	4b06      	ldr	r3, [pc, #24]	; (800afdc <prvTaskExitError+0x20>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	d001      	beq.n	800afce <prvTaskExitError+0x12>
 800afca:	b672      	cpsid	i
 800afcc:	e7fe      	b.n	800afcc <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800afce:	b672      	cpsid	i
	while( ulDummy == 0 )
 800afd0:	9b01      	ldr	r3, [sp, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0fc      	beq.n	800afd0 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afd6:	b002      	add	sp, #8
 800afd8:	4770      	bx	lr
 800afda:	46c0      	nop			; (mov r8, r8)
 800afdc:	200000f0 	.word	0x200000f0

0800afe0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800afe0:	4a0b      	ldr	r2, [pc, #44]	; (800b010 <pxCurrentTCBConst2>)
 800afe2:	6813      	ldr	r3, [r2, #0]
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	3020      	adds	r0, #32
 800afe8:	f380 8809 	msr	PSP, r0
 800afec:	2002      	movs	r0, #2
 800afee:	f380 8814 	msr	CONTROL, r0
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800aff8:	46ae      	mov	lr, r5
 800affa:	bc08      	pop	{r3}
 800affc:	bc04      	pop	{r2}
 800affe:	b662      	cpsie	i
 800b000:	4718      	bx	r3
 800b002:	46c0      	nop			; (mov r8, r8)
 800b004:	46c0      	nop			; (mov r8, r8)
 800b006:	46c0      	nop			; (mov r8, r8)
 800b008:	46c0      	nop			; (mov r8, r8)
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	46c0      	nop			; (mov r8, r8)
 800b00e:	46c0      	nop			; (mov r8, r8)

0800b010 <pxCurrentTCBConst2>:
 800b010:	200046f0 	.word	0x200046f0

0800b014 <pxPortInitialiseStack>:
{
 800b014:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b016:	2480      	movs	r4, #128	; 0x80
 800b018:	1f03      	subs	r3, r0, #4
 800b01a:	0464      	lsls	r4, r4, #17
 800b01c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800b01e:	3b04      	subs	r3, #4
 800b020:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b022:	4903      	ldr	r1, [pc, #12]	; (800b030 <pxPortInitialiseStack+0x1c>)
 800b024:	3b04      	subs	r3, #4
 800b026:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b028:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800b02a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b02c:	601a      	str	r2, [r3, #0]
}
 800b02e:	bd10      	pop	{r4, pc}
 800b030:	0800afbd 	.word	0x0800afbd

0800b034 <SVC_Handler>:
}
 800b034:	4770      	bx	lr
	...

0800b038 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b038:	2280      	movs	r2, #128	; 0x80
 800b03a:	4b04      	ldr	r3, [pc, #16]	; (800b04c <vPortYield+0x14>)
 800b03c:	0552      	lsls	r2, r2, #21
 800b03e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800b040:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800b044:	f3bf 8f6f 	isb	sy
}
 800b048:	4770      	bx	lr
 800b04a:	46c0      	nop			; (mov r8, r8)
 800b04c:	e000ed04 	.word	0xe000ed04

0800b050 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800b050:	b672      	cpsid	i
	uxCriticalNesting++;
 800b052:	4a04      	ldr	r2, [pc, #16]	; (800b064 <vPortEnterCritical+0x14>)
 800b054:	6813      	ldr	r3, [r2, #0]
 800b056:	3301      	adds	r3, #1
 800b058:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800b05a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800b05e:	f3bf 8f6f 	isb	sy
}
 800b062:	4770      	bx	lr
 800b064:	200000f0 	.word	0x200000f0

0800b068 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800b068:	4a05      	ldr	r2, [pc, #20]	; (800b080 <vPortExitCritical+0x18>)
 800b06a:	6813      	ldr	r3, [r2, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <vPortExitCritical+0xc>
 800b070:	b672      	cpsid	i
 800b072:	e7fe      	b.n	800b072 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 800b074:	3b01      	subs	r3, #1
 800b076:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d100      	bne.n	800b07e <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 800b07c:	b662      	cpsie	i
	}
}
 800b07e:	4770      	bx	lr
 800b080:	200000f0 	.word	0x200000f0

0800b084 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800b084:	f3ef 8010 	mrs	r0, PRIMASK
 800b088:	b672      	cpsid	i
 800b08a:	4770      	bx	lr

0800b08c <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800b08c:	f380 8810 	msr	PRIMASK, r0
 800b090:	4770      	bx	lr
	...

0800b0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0a0:	f3ef 8009 	mrs	r0, PSP
 800b0a4:	4b0e      	ldr	r3, [pc, #56]	; (800b0e0 <pxCurrentTCBConst>)
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	3820      	subs	r0, #32
 800b0aa:	6010      	str	r0, [r2, #0]
 800b0ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800b0ae:	4644      	mov	r4, r8
 800b0b0:	464d      	mov	r5, r9
 800b0b2:	4656      	mov	r6, sl
 800b0b4:	465f      	mov	r7, fp
 800b0b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800b0b8:	b508      	push	{r3, lr}
 800b0ba:	b672      	cpsid	i
 800b0bc:	f7ff fca6 	bl	800aa0c <vTaskSwitchContext>
 800b0c0:	b662      	cpsie	i
 800b0c2:	bc0c      	pop	{r2, r3}
 800b0c4:	6811      	ldr	r1, [r2, #0]
 800b0c6:	6808      	ldr	r0, [r1, #0]
 800b0c8:	3010      	adds	r0, #16
 800b0ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800b0cc:	46a0      	mov	r8, r4
 800b0ce:	46a9      	mov	r9, r5
 800b0d0:	46b2      	mov	sl, r6
 800b0d2:	46bb      	mov	fp, r7
 800b0d4:	f380 8809 	msr	PSP, r0
 800b0d8:	3820      	subs	r0, #32
 800b0da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800b0dc:	4718      	bx	r3
 800b0de:	46c0      	nop			; (mov r8, r8)

0800b0e0 <pxCurrentTCBConst>:
 800b0e0:	200046f0 	.word	0x200046f0

0800b0e4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0e4:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0e6:	f7ff ffcd 	bl	800b084 <ulSetInterruptMaskFromISR>
 800b0ea:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0ec:	f7ff fb88 	bl	800a800 <xTaskIncrementTick>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d003      	beq.n	800b0fc <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0f4:	2280      	movs	r2, #128	; 0x80
 800b0f6:	4b03      	ldr	r3, [pc, #12]	; (800b104 <xPortSysTickHandler+0x20>)
 800b0f8:	0552      	lsls	r2, r2, #21
 800b0fa:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800b0fc:	0020      	movs	r0, r4
 800b0fe:	f7ff ffc5 	bl	800b08c <vClearInterruptMaskFromISR>
}
 800b102:	bd10      	pop	{r4, pc}
 800b104:	e000ed04 	.word	0xe000ed04

0800b108 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b108:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b10a:	21fa      	movs	r1, #250	; 0xfa
{
 800b10c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b10e:	4a07      	ldr	r2, [pc, #28]	; (800b12c <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b110:	4c07      	ldr	r4, [pc, #28]	; (800b130 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b112:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b114:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b116:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <vPortSetupTimerInterrupt+0x2c>)
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	f7f5 f81a 	bl	8000154 <__udivsi3>
 800b120:	4b05      	ldr	r3, [pc, #20]	; (800b138 <vPortSetupTimerInterrupt+0x30>)
 800b122:	3801      	subs	r0, #1
 800b124:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800b126:	2307      	movs	r3, #7
 800b128:	6023      	str	r3, [r4, #0]
}
 800b12a:	bd10      	pop	{r4, pc}
 800b12c:	e000e018 	.word	0xe000e018
 800b130:	e000e010 	.word	0xe000e010
 800b134:	200000e4 	.word	0x200000e4
 800b138:	e000e014 	.word	0xe000e014

0800b13c <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b13c:	22ff      	movs	r2, #255	; 0xff
 800b13e:	4b0c      	ldr	r3, [pc, #48]	; (800b170 <xPortStartScheduler+0x34>)
 800b140:	0412      	lsls	r2, r2, #16
 800b142:	6819      	ldr	r1, [r3, #0]
{
 800b144:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b146:	430a      	orrs	r2, r1
 800b148:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b14a:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 800b14c:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b14e:	6819      	ldr	r1, [r3, #0]
 800b150:	0612      	lsls	r2, r2, #24
 800b152:	430a      	orrs	r2, r1
 800b154:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800b156:	f7ff ffd7 	bl	800b108 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b15a:	4b06      	ldr	r3, [pc, #24]	; (800b174 <xPortStartScheduler+0x38>)
 800b15c:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 800b15e:	f7ff ff3f 	bl	800afe0 <vPortStartFirstTask>
	vTaskSwitchContext();
 800b162:	f7ff fc53 	bl	800aa0c <vTaskSwitchContext>
	prvTaskExitError();
 800b166:	f7ff ff29 	bl	800afbc <prvTaskExitError>
}
 800b16a:	0020      	movs	r0, r4
 800b16c:	bd10      	pop	{r4, pc}
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	e000ed20 	.word	0xe000ed20
 800b174:	200000f0 	.word	0x200000f0

0800b178 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b178:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b17a:	4b0f      	ldr	r3, [pc, #60]	; (800b1b8 <prvInsertBlockIntoFreeList+0x40>)
 800b17c:	001a      	movs	r2, r3
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4283      	cmp	r3, r0
 800b182:	d3fb      	bcc.n	800b17c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b184:	6854      	ldr	r4, [r2, #4]
 800b186:	1911      	adds	r1, r2, r4
 800b188:	4288      	cmp	r0, r1
 800b18a:	d103      	bne.n	800b194 <prvInsertBlockIntoFreeList+0x1c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b18c:	6841      	ldr	r1, [r0, #4]
 800b18e:	0010      	movs	r0, r2
 800b190:	1909      	adds	r1, r1, r4
 800b192:	6051      	str	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b194:	6844      	ldr	r4, [r0, #4]
 800b196:	0019      	movs	r1, r3
 800b198:	1905      	adds	r5, r0, r4
 800b19a:	42ab      	cmp	r3, r5
 800b19c:	d107      	bne.n	800b1ae <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b19e:	4907      	ldr	r1, [pc, #28]	; (800b1bc <prvInsertBlockIntoFreeList+0x44>)
 800b1a0:	6809      	ldr	r1, [r1, #0]
 800b1a2:	428b      	cmp	r3, r1
 800b1a4:	d003      	beq.n	800b1ae <prvInsertBlockIntoFreeList+0x36>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1a6:	6859      	ldr	r1, [r3, #4]
 800b1a8:	1909      	adds	r1, r1, r4
 800b1aa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1ac:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1ae:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1b0:	4290      	cmp	r0, r2
 800b1b2:	d000      	beq.n	800b1b6 <prvInsertBlockIntoFreeList+0x3e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1b4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b6:	bd30      	pop	{r4, r5, pc}
 800b1b8:	20005930 	.word	0x20005930
 800b1bc:	20004d18 	.word	0x20004d18

0800b1c0 <pvPortMalloc>:
{
 800b1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c2:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800b1c4:	f7ff fb0e 	bl	800a7e4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b1c8:	4a3a      	ldr	r2, [pc, #232]	; (800b2b4 <pvPortMalloc+0xf4>)
 800b1ca:	483b      	ldr	r0, [pc, #236]	; (800b2b8 <pvPortMalloc+0xf8>)
 800b1cc:	6813      	ldr	r3, [r2, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d11e      	bne.n	800b210 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b1d2:	493a      	ldr	r1, [pc, #232]	; (800b2bc <pvPortMalloc+0xfc>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1d4:	3307      	adds	r3, #7
 800b1d6:	4219      	tst	r1, r3
 800b1d8:	d046      	beq.n	800b268 <pvPortMalloc+0xa8>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1da:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1dc:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1de:	23c0      	movs	r3, #192	; 0xc0
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	18c9      	adds	r1, r1, r3
 800b1e4:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1e6:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 800b1e8:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1ea:	4e35      	ldr	r6, [pc, #212]	; (800b2c0 <pvPortMalloc+0x100>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1ec:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 800b1ee:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1f0:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1f2:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 800b1f4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1f6:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 800b1f8:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 800b1fa:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1fc:	1a5d      	subs	r5, r3, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1fe:	c128      	stmia	r1!, {r3, r5}
	pxEnd = ( void * ) uxAddress;
 800b200:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b202:	4b30      	ldr	r3, [pc, #192]	; (800b2c4 <pvPortMalloc+0x104>)
 800b204:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b206:	4b30      	ldr	r3, [pc, #192]	; (800b2c8 <pvPortMalloc+0x108>)
 800b208:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b20a:	2380      	movs	r3, #128	; 0x80
 800b20c:	061b      	lsls	r3, r3, #24
 800b20e:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b210:	6806      	ldr	r6, [r0, #0]
 800b212:	4234      	tst	r4, r6
 800b214:	d14a      	bne.n	800b2ac <pvPortMalloc+0xec>
			if( xWantedSize > 0 )
 800b216:	2c00      	cmp	r4, #0
 800b218:	d048      	beq.n	800b2ac <pvPortMalloc+0xec>
				xWantedSize += xHeapStructSize;
 800b21a:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b21c:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 800b21e:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b220:	420b      	tst	r3, r1
 800b222:	d001      	beq.n	800b228 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b224:	438b      	bics	r3, r1
 800b226:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d03f      	beq.n	800b2ac <pvPortMalloc+0xec>
 800b22c:	4f26      	ldr	r7, [pc, #152]	; (800b2c8 <pvPortMalloc+0x108>)
 800b22e:	683d      	ldr	r5, [r7, #0]
 800b230:	429d      	cmp	r5, r3
 800b232:	d33b      	bcc.n	800b2ac <pvPortMalloc+0xec>
				pxBlock = xStart.pxNextFreeBlock;
 800b234:	4922      	ldr	r1, [pc, #136]	; (800b2c0 <pvPortMalloc+0x100>)
 800b236:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b238:	6860      	ldr	r0, [r4, #4]
 800b23a:	9000      	str	r0, [sp, #0]
 800b23c:	4298      	cmp	r0, r3
 800b23e:	d203      	bcs.n	800b248 <pvPortMalloc+0x88>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	4684      	mov	ip, r0
 800b244:	2800      	cmp	r0, #0
 800b246:	d112      	bne.n	800b26e <pvPortMalloc+0xae>
				if( pxBlock != pxEnd )
 800b248:	6812      	ldr	r2, [r2, #0]
 800b24a:	42a2      	cmp	r2, r4
 800b24c:	d02e      	beq.n	800b2ac <pvPortMalloc+0xec>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b24e:	680a      	ldr	r2, [r1, #0]
 800b250:	9201      	str	r2, [sp, #4]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b252:	6822      	ldr	r2, [r4, #0]
 800b254:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b256:	9a00      	ldr	r2, [sp, #0]
 800b258:	1ad2      	subs	r2, r2, r3
 800b25a:	2a10      	cmp	r2, #16
 800b25c:	d90e      	bls.n	800b27c <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b25e:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b260:	0741      	lsls	r1, r0, #29
 800b262:	d007      	beq.n	800b274 <pvPortMalloc+0xb4>
 800b264:	b672      	cpsid	i
 800b266:	e7fe      	b.n	800b266 <pvPortMalloc+0xa6>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b268:	23c0      	movs	r3, #192	; 0xc0
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	e7bc      	b.n	800b1e8 <pvPortMalloc+0x28>
 800b26e:	0021      	movs	r1, r4
 800b270:	4664      	mov	r4, ip
 800b272:	e7e1      	b.n	800b238 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b274:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b276:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b278:	f7ff ff7e 	bl	800b178 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b27c:	4a11      	ldr	r2, [pc, #68]	; (800b2c4 <pvPortMalloc+0x104>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b27e:	6863      	ldr	r3, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b280:	6811      	ldr	r1, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b282:	1aed      	subs	r5, r5, r3
 800b284:	603d      	str	r5, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b286:	428d      	cmp	r5, r1
 800b288:	d200      	bcs.n	800b28c <pvPortMalloc+0xcc>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b28a:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b28c:	431e      	orrs	r6, r3
					pxBlock->pxNextFreeBlock = NULL;
 800b28e:	2300      	movs	r3, #0
					xNumberOfSuccessfulAllocations++;
 800b290:	4a0e      	ldr	r2, [pc, #56]	; (800b2cc <pvPortMalloc+0x10c>)
					pxBlock->pxNextFreeBlock = NULL;
 800b292:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800b294:	6813      	ldr	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b296:	9d01      	ldr	r5, [sp, #4]
					xNumberOfSuccessfulAllocations++;
 800b298:	3301      	adds	r3, #1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b29a:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b29c:	6066      	str	r6, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 800b29e:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b2a0:	f7ff fb32 	bl	800a908 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2a4:	076b      	lsls	r3, r5, #29
 800b2a6:	d003      	beq.n	800b2b0 <pvPortMalloc+0xf0>
 800b2a8:	b672      	cpsid	i
 800b2aa:	e7fe      	b.n	800b2aa <pvPortMalloc+0xea>
void *pvReturn = NULL;
 800b2ac:	2500      	movs	r5, #0
 800b2ae:	e7f7      	b.n	800b2a0 <pvPortMalloc+0xe0>
}
 800b2b0:	0028      	movs	r0, r5
 800b2b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2b4:	20004d18 	.word	0x20004d18
 800b2b8:	2000591c 	.word	0x2000591c
 800b2bc:	20004d1c 	.word	0x20004d1c
 800b2c0:	20005930 	.word	0x20005930
 800b2c4:	20005924 	.word	0x20005924
 800b2c8:	20005920 	.word	0x20005920
 800b2cc:	20005928 	.word	0x20005928

0800b2d0 <vPortFree>:
{
 800b2d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d01f      	beq.n	800b316 <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2d6:	4a10      	ldr	r2, [pc, #64]	; (800b318 <vPortFree+0x48>)
 800b2d8:	3808      	subs	r0, #8
 800b2da:	6843      	ldr	r3, [r0, #4]
 800b2dc:	6812      	ldr	r2, [r2, #0]
 800b2de:	0004      	movs	r4, r0
 800b2e0:	421a      	tst	r2, r3
 800b2e2:	d101      	bne.n	800b2e8 <vPortFree+0x18>
 800b2e4:	b672      	cpsid	i
 800b2e6:	e7fe      	b.n	800b2e6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2e8:	6801      	ldr	r1, [r0, #0]
 800b2ea:	2900      	cmp	r1, #0
 800b2ec:	d001      	beq.n	800b2f2 <vPortFree+0x22>
 800b2ee:	b672      	cpsid	i
 800b2f0:	e7fe      	b.n	800b2f0 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2f2:	4393      	bics	r3, r2
 800b2f4:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800b2f6:	f7ff fa75 	bl	800a7e4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2fa:	4a08      	ldr	r2, [pc, #32]	; (800b31c <vPortFree+0x4c>)
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b300:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b302:	185b      	adds	r3, r3, r1
 800b304:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b306:	f7ff ff37 	bl	800b178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b30a:	4a05      	ldr	r2, [pc, #20]	; (800b320 <vPortFree+0x50>)
 800b30c:	6813      	ldr	r3, [r2, #0]
 800b30e:	3301      	adds	r3, #1
 800b310:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b312:	f7ff faf9 	bl	800a908 <xTaskResumeAll>
}
 800b316:	bd10      	pop	{r4, pc}
 800b318:	2000591c 	.word	0x2000591c
 800b31c:	20005920 	.word	0x20005920
 800b320:	2000592c 	.word	0x2000592c

0800b324 <atoi>:
 800b324:	b510      	push	{r4, lr}
 800b326:	220a      	movs	r2, #10
 800b328:	2100      	movs	r1, #0
 800b32a:	f000 ff81 	bl	800c230 <strtol>
 800b32e:	bd10      	pop	{r4, pc}

0800b330 <malloc>:
 800b330:	b510      	push	{r4, lr}
 800b332:	4b03      	ldr	r3, [pc, #12]	; (800b340 <malloc+0x10>)
 800b334:	0001      	movs	r1, r0
 800b336:	6818      	ldr	r0, [r3, #0]
 800b338:	f000 f826 	bl	800b388 <_malloc_r>
 800b33c:	bd10      	pop	{r4, pc}
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	200002b8 	.word	0x200002b8

0800b344 <sbrk_aligned>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	4e0f      	ldr	r6, [pc, #60]	; (800b384 <sbrk_aligned+0x40>)
 800b348:	000d      	movs	r5, r1
 800b34a:	6831      	ldr	r1, [r6, #0]
 800b34c:	0004      	movs	r4, r0
 800b34e:	2900      	cmp	r1, #0
 800b350:	d102      	bne.n	800b358 <sbrk_aligned+0x14>
 800b352:	f002 f8c5 	bl	800d4e0 <_sbrk_r>
 800b356:	6030      	str	r0, [r6, #0]
 800b358:	0029      	movs	r1, r5
 800b35a:	0020      	movs	r0, r4
 800b35c:	f002 f8c0 	bl	800d4e0 <_sbrk_r>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d00a      	beq.n	800b37a <sbrk_aligned+0x36>
 800b364:	2303      	movs	r3, #3
 800b366:	1cc5      	adds	r5, r0, #3
 800b368:	439d      	bics	r5, r3
 800b36a:	42a8      	cmp	r0, r5
 800b36c:	d007      	beq.n	800b37e <sbrk_aligned+0x3a>
 800b36e:	1a29      	subs	r1, r5, r0
 800b370:	0020      	movs	r0, r4
 800b372:	f002 f8b5 	bl	800d4e0 <_sbrk_r>
 800b376:	3001      	adds	r0, #1
 800b378:	d101      	bne.n	800b37e <sbrk_aligned+0x3a>
 800b37a:	2501      	movs	r5, #1
 800b37c:	426d      	negs	r5, r5
 800b37e:	0028      	movs	r0, r5
 800b380:	bd70      	pop	{r4, r5, r6, pc}
 800b382:	46c0      	nop			; (mov r8, r8)
 800b384:	2000593c 	.word	0x2000593c

0800b388 <_malloc_r>:
 800b388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b38a:	2203      	movs	r2, #3
 800b38c:	1ccb      	adds	r3, r1, #3
 800b38e:	4393      	bics	r3, r2
 800b390:	3308      	adds	r3, #8
 800b392:	0006      	movs	r6, r0
 800b394:	001f      	movs	r7, r3
 800b396:	2b0c      	cmp	r3, #12
 800b398:	d238      	bcs.n	800b40c <_malloc_r+0x84>
 800b39a:	270c      	movs	r7, #12
 800b39c:	42b9      	cmp	r1, r7
 800b39e:	d837      	bhi.n	800b410 <_malloc_r+0x88>
 800b3a0:	0030      	movs	r0, r6
 800b3a2:	f000 f873 	bl	800b48c <__malloc_lock>
 800b3a6:	4b38      	ldr	r3, [pc, #224]	; (800b488 <_malloc_r+0x100>)
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	001c      	movs	r4, r3
 800b3ae:	2c00      	cmp	r4, #0
 800b3b0:	d133      	bne.n	800b41a <_malloc_r+0x92>
 800b3b2:	0039      	movs	r1, r7
 800b3b4:	0030      	movs	r0, r6
 800b3b6:	f7ff ffc5 	bl	800b344 <sbrk_aligned>
 800b3ba:	0004      	movs	r4, r0
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d15e      	bne.n	800b47e <_malloc_r+0xf6>
 800b3c0:	9b00      	ldr	r3, [sp, #0]
 800b3c2:	681c      	ldr	r4, [r3, #0]
 800b3c4:	0025      	movs	r5, r4
 800b3c6:	2d00      	cmp	r5, #0
 800b3c8:	d14e      	bne.n	800b468 <_malloc_r+0xe0>
 800b3ca:	2c00      	cmp	r4, #0
 800b3cc:	d051      	beq.n	800b472 <_malloc_r+0xea>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	0029      	movs	r1, r5
 800b3d2:	18e3      	adds	r3, r4, r3
 800b3d4:	0030      	movs	r0, r6
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	f002 f882 	bl	800d4e0 <_sbrk_r>
 800b3dc:	9b01      	ldr	r3, [sp, #4]
 800b3de:	4283      	cmp	r3, r0
 800b3e0:	d147      	bne.n	800b472 <_malloc_r+0xea>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	0030      	movs	r0, r6
 800b3e6:	1aff      	subs	r7, r7, r3
 800b3e8:	0039      	movs	r1, r7
 800b3ea:	f7ff ffab 	bl	800b344 <sbrk_aligned>
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	d03f      	beq.n	800b472 <_malloc_r+0xea>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	19db      	adds	r3, r3, r7
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d040      	beq.n	800b482 <_malloc_r+0xfa>
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	42a2      	cmp	r2, r4
 800b404:	d133      	bne.n	800b46e <_malloc_r+0xe6>
 800b406:	2200      	movs	r2, #0
 800b408:	605a      	str	r2, [r3, #4]
 800b40a:	e014      	b.n	800b436 <_malloc_r+0xae>
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dac5      	bge.n	800b39c <_malloc_r+0x14>
 800b410:	230c      	movs	r3, #12
 800b412:	2500      	movs	r5, #0
 800b414:	6033      	str	r3, [r6, #0]
 800b416:	0028      	movs	r0, r5
 800b418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b41a:	6821      	ldr	r1, [r4, #0]
 800b41c:	1bc9      	subs	r1, r1, r7
 800b41e:	d420      	bmi.n	800b462 <_malloc_r+0xda>
 800b420:	290b      	cmp	r1, #11
 800b422:	d918      	bls.n	800b456 <_malloc_r+0xce>
 800b424:	19e2      	adds	r2, r4, r7
 800b426:	6027      	str	r7, [r4, #0]
 800b428:	42a3      	cmp	r3, r4
 800b42a:	d112      	bne.n	800b452 <_malloc_r+0xca>
 800b42c:	9b00      	ldr	r3, [sp, #0]
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	6863      	ldr	r3, [r4, #4]
 800b432:	6011      	str	r1, [r2, #0]
 800b434:	6053      	str	r3, [r2, #4]
 800b436:	0030      	movs	r0, r6
 800b438:	0025      	movs	r5, r4
 800b43a:	f000 f82f 	bl	800b49c <__malloc_unlock>
 800b43e:	2207      	movs	r2, #7
 800b440:	350b      	adds	r5, #11
 800b442:	1d23      	adds	r3, r4, #4
 800b444:	4395      	bics	r5, r2
 800b446:	1aea      	subs	r2, r5, r3
 800b448:	429d      	cmp	r5, r3
 800b44a:	d0e4      	beq.n	800b416 <_malloc_r+0x8e>
 800b44c:	1b5b      	subs	r3, r3, r5
 800b44e:	50a3      	str	r3, [r4, r2]
 800b450:	e7e1      	b.n	800b416 <_malloc_r+0x8e>
 800b452:	605a      	str	r2, [r3, #4]
 800b454:	e7ec      	b.n	800b430 <_malloc_r+0xa8>
 800b456:	6862      	ldr	r2, [r4, #4]
 800b458:	42a3      	cmp	r3, r4
 800b45a:	d1d5      	bne.n	800b408 <_malloc_r+0x80>
 800b45c:	9b00      	ldr	r3, [sp, #0]
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	e7e9      	b.n	800b436 <_malloc_r+0xae>
 800b462:	0023      	movs	r3, r4
 800b464:	6864      	ldr	r4, [r4, #4]
 800b466:	e7a2      	b.n	800b3ae <_malloc_r+0x26>
 800b468:	002c      	movs	r4, r5
 800b46a:	686d      	ldr	r5, [r5, #4]
 800b46c:	e7ab      	b.n	800b3c6 <_malloc_r+0x3e>
 800b46e:	0013      	movs	r3, r2
 800b470:	e7c4      	b.n	800b3fc <_malloc_r+0x74>
 800b472:	230c      	movs	r3, #12
 800b474:	0030      	movs	r0, r6
 800b476:	6033      	str	r3, [r6, #0]
 800b478:	f000 f810 	bl	800b49c <__malloc_unlock>
 800b47c:	e7cb      	b.n	800b416 <_malloc_r+0x8e>
 800b47e:	6027      	str	r7, [r4, #0]
 800b480:	e7d9      	b.n	800b436 <_malloc_r+0xae>
 800b482:	605b      	str	r3, [r3, #4]
 800b484:	deff      	udf	#255	; 0xff
 800b486:	46c0      	nop			; (mov r8, r8)
 800b488:	20005938 	.word	0x20005938

0800b48c <__malloc_lock>:
 800b48c:	b510      	push	{r4, lr}
 800b48e:	4802      	ldr	r0, [pc, #8]	; (800b498 <__malloc_lock+0xc>)
 800b490:	f002 f877 	bl	800d582 <__retarget_lock_acquire_recursive>
 800b494:	bd10      	pop	{r4, pc}
 800b496:	46c0      	nop			; (mov r8, r8)
 800b498:	20005a80 	.word	0x20005a80

0800b49c <__malloc_unlock>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	4802      	ldr	r0, [pc, #8]	; (800b4a8 <__malloc_unlock+0xc>)
 800b4a0:	f002 f870 	bl	800d584 <__retarget_lock_release_recursive>
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	46c0      	nop			; (mov r8, r8)
 800b4a8:	20005a80 	.word	0x20005a80

0800b4ac <sulp>:
 800b4ac:	b570      	push	{r4, r5, r6, lr}
 800b4ae:	0016      	movs	r6, r2
 800b4b0:	000d      	movs	r5, r1
 800b4b2:	f003 fe89 	bl	800f1c8 <__ulp>
 800b4b6:	2e00      	cmp	r6, #0
 800b4b8:	d00d      	beq.n	800b4d6 <sulp+0x2a>
 800b4ba:	236b      	movs	r3, #107	; 0x6b
 800b4bc:	006a      	lsls	r2, r5, #1
 800b4be:	0d52      	lsrs	r2, r2, #21
 800b4c0:	1a9b      	subs	r3, r3, r2
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	dd07      	ble.n	800b4d6 <sulp+0x2a>
 800b4c6:	2400      	movs	r4, #0
 800b4c8:	4a03      	ldr	r2, [pc, #12]	; (800b4d8 <sulp+0x2c>)
 800b4ca:	051b      	lsls	r3, r3, #20
 800b4cc:	189d      	adds	r5, r3, r2
 800b4ce:	002b      	movs	r3, r5
 800b4d0:	0022      	movs	r2, r4
 800b4d2:	f7f6 ff09 	bl	80022e8 <__aeabi_dmul>
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	3ff00000 	.word	0x3ff00000

0800b4dc <_strtod_l>:
 800b4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4de:	b0a1      	sub	sp, #132	; 0x84
 800b4e0:	9219      	str	r2, [sp, #100]	; 0x64
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2600      	movs	r6, #0
 800b4e6:	2700      	movs	r7, #0
 800b4e8:	9004      	str	r0, [sp, #16]
 800b4ea:	9107      	str	r1, [sp, #28]
 800b4ec:	921c      	str	r2, [sp, #112]	; 0x70
 800b4ee:	911b      	str	r1, [sp, #108]	; 0x6c
 800b4f0:	780a      	ldrb	r2, [r1, #0]
 800b4f2:	2a2b      	cmp	r2, #43	; 0x2b
 800b4f4:	d055      	beq.n	800b5a2 <_strtod_l+0xc6>
 800b4f6:	d841      	bhi.n	800b57c <_strtod_l+0xa0>
 800b4f8:	2a0d      	cmp	r2, #13
 800b4fa:	d83b      	bhi.n	800b574 <_strtod_l+0x98>
 800b4fc:	2a08      	cmp	r2, #8
 800b4fe:	d83b      	bhi.n	800b578 <_strtod_l+0x9c>
 800b500:	2a00      	cmp	r2, #0
 800b502:	d044      	beq.n	800b58e <_strtod_l+0xb2>
 800b504:	2200      	movs	r2, #0
 800b506:	920f      	str	r2, [sp, #60]	; 0x3c
 800b508:	2100      	movs	r1, #0
 800b50a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b50c:	9109      	str	r1, [sp, #36]	; 0x24
 800b50e:	782a      	ldrb	r2, [r5, #0]
 800b510:	2a30      	cmp	r2, #48	; 0x30
 800b512:	d000      	beq.n	800b516 <_strtod_l+0x3a>
 800b514:	e085      	b.n	800b622 <_strtod_l+0x146>
 800b516:	786a      	ldrb	r2, [r5, #1]
 800b518:	3120      	adds	r1, #32
 800b51a:	438a      	bics	r2, r1
 800b51c:	2a58      	cmp	r2, #88	; 0x58
 800b51e:	d000      	beq.n	800b522 <_strtod_l+0x46>
 800b520:	e075      	b.n	800b60e <_strtod_l+0x132>
 800b522:	9302      	str	r3, [sp, #8]
 800b524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b526:	4a97      	ldr	r2, [pc, #604]	; (800b784 <_strtod_l+0x2a8>)
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	ab1c      	add	r3, sp, #112	; 0x70
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	9804      	ldr	r0, [sp, #16]
 800b530:	ab1d      	add	r3, sp, #116	; 0x74
 800b532:	a91b      	add	r1, sp, #108	; 0x6c
 800b534:	f002 ffbe 	bl	800e4b4 <__gethex>
 800b538:	230f      	movs	r3, #15
 800b53a:	0002      	movs	r2, r0
 800b53c:	401a      	ands	r2, r3
 800b53e:	0004      	movs	r4, r0
 800b540:	9205      	str	r2, [sp, #20]
 800b542:	4218      	tst	r0, r3
 800b544:	d005      	beq.n	800b552 <_strtod_l+0x76>
 800b546:	2a06      	cmp	r2, #6
 800b548:	d12d      	bne.n	800b5a6 <_strtod_l+0xca>
 800b54a:	1c6b      	adds	r3, r5, #1
 800b54c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b54e:	2300      	movs	r3, #0
 800b550:	930f      	str	r3, [sp, #60]	; 0x3c
 800b552:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <_strtod_l+0x82>
 800b558:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b55a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b560:	2b00      	cmp	r3, #0
 800b562:	d01b      	beq.n	800b59c <_strtod_l+0xc0>
 800b564:	2380      	movs	r3, #128	; 0x80
 800b566:	0032      	movs	r2, r6
 800b568:	061b      	lsls	r3, r3, #24
 800b56a:	18fb      	adds	r3, r7, r3
 800b56c:	0010      	movs	r0, r2
 800b56e:	0019      	movs	r1, r3
 800b570:	b021      	add	sp, #132	; 0x84
 800b572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b574:	2a20      	cmp	r2, #32
 800b576:	d1c5      	bne.n	800b504 <_strtod_l+0x28>
 800b578:	3101      	adds	r1, #1
 800b57a:	e7b8      	b.n	800b4ee <_strtod_l+0x12>
 800b57c:	2a2d      	cmp	r2, #45	; 0x2d
 800b57e:	d1c1      	bne.n	800b504 <_strtod_l+0x28>
 800b580:	3a2c      	subs	r2, #44	; 0x2c
 800b582:	920f      	str	r2, [sp, #60]	; 0x3c
 800b584:	1c4a      	adds	r2, r1, #1
 800b586:	921b      	str	r2, [sp, #108]	; 0x6c
 800b588:	784a      	ldrb	r2, [r1, #1]
 800b58a:	2a00      	cmp	r2, #0
 800b58c:	d1bc      	bne.n	800b508 <_strtod_l+0x2c>
 800b58e:	9b07      	ldr	r3, [sp, #28]
 800b590:	931b      	str	r3, [sp, #108]	; 0x6c
 800b592:	2300      	movs	r3, #0
 800b594:	930f      	str	r3, [sp, #60]	; 0x3c
 800b596:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1dd      	bne.n	800b558 <_strtod_l+0x7c>
 800b59c:	0032      	movs	r2, r6
 800b59e:	003b      	movs	r3, r7
 800b5a0:	e7e4      	b.n	800b56c <_strtod_l+0x90>
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	e7ed      	b.n	800b582 <_strtod_l+0xa6>
 800b5a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	d007      	beq.n	800b5bc <_strtod_l+0xe0>
 800b5ac:	2135      	movs	r1, #53	; 0x35
 800b5ae:	a81e      	add	r0, sp, #120	; 0x78
 800b5b0:	f003 fefb 	bl	800f3aa <__copybits>
 800b5b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5b6:	9804      	ldr	r0, [sp, #16]
 800b5b8:	f003 fac4 	bl	800eb44 <_Bfree>
 800b5bc:	9805      	ldr	r0, [sp, #20]
 800b5be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5c0:	3801      	subs	r0, #1
 800b5c2:	2804      	cmp	r0, #4
 800b5c4:	d806      	bhi.n	800b5d4 <_strtod_l+0xf8>
 800b5c6:	f7f4 fdb1 	bl	800012c <__gnu_thumb1_case_uqi>
 800b5ca:	0312      	.short	0x0312
 800b5cc:	1e1c      	.short	0x1e1c
 800b5ce:	12          	.byte	0x12
 800b5cf:	00          	.byte	0x00
 800b5d0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b5d2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b5d4:	05e4      	lsls	r4, r4, #23
 800b5d6:	d502      	bpl.n	800b5de <_strtod_l+0x102>
 800b5d8:	2380      	movs	r3, #128	; 0x80
 800b5da:	061b      	lsls	r3, r3, #24
 800b5dc:	431f      	orrs	r7, r3
 800b5de:	4b6a      	ldr	r3, [pc, #424]	; (800b788 <_strtod_l+0x2ac>)
 800b5e0:	423b      	tst	r3, r7
 800b5e2:	d1b6      	bne.n	800b552 <_strtod_l+0x76>
 800b5e4:	f001 ffa2 	bl	800d52c <__errno>
 800b5e8:	2322      	movs	r3, #34	; 0x22
 800b5ea:	6003      	str	r3, [r0, #0]
 800b5ec:	e7b1      	b.n	800b552 <_strtod_l+0x76>
 800b5ee:	4967      	ldr	r1, [pc, #412]	; (800b78c <_strtod_l+0x2b0>)
 800b5f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b5f2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b5f4:	400a      	ands	r2, r1
 800b5f6:	4966      	ldr	r1, [pc, #408]	; (800b790 <_strtod_l+0x2b4>)
 800b5f8:	185b      	adds	r3, r3, r1
 800b5fa:	051b      	lsls	r3, r3, #20
 800b5fc:	431a      	orrs	r2, r3
 800b5fe:	0017      	movs	r7, r2
 800b600:	e7e8      	b.n	800b5d4 <_strtod_l+0xf8>
 800b602:	4f61      	ldr	r7, [pc, #388]	; (800b788 <_strtod_l+0x2ac>)
 800b604:	e7e6      	b.n	800b5d4 <_strtod_l+0xf8>
 800b606:	2601      	movs	r6, #1
 800b608:	4f62      	ldr	r7, [pc, #392]	; (800b794 <_strtod_l+0x2b8>)
 800b60a:	4276      	negs	r6, r6
 800b60c:	e7e2      	b.n	800b5d4 <_strtod_l+0xf8>
 800b60e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	921b      	str	r2, [sp, #108]	; 0x6c
 800b614:	785b      	ldrb	r3, [r3, #1]
 800b616:	2b30      	cmp	r3, #48	; 0x30
 800b618:	d0f9      	beq.n	800b60e <_strtod_l+0x132>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d099      	beq.n	800b552 <_strtod_l+0x76>
 800b61e:	2301      	movs	r3, #1
 800b620:	9309      	str	r3, [sp, #36]	; 0x24
 800b622:	2500      	movs	r5, #0
 800b624:	220a      	movs	r2, #10
 800b626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b628:	950d      	str	r5, [sp, #52]	; 0x34
 800b62a:	9310      	str	r3, [sp, #64]	; 0x40
 800b62c:	9508      	str	r5, [sp, #32]
 800b62e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b630:	7804      	ldrb	r4, [r0, #0]
 800b632:	0023      	movs	r3, r4
 800b634:	3b30      	subs	r3, #48	; 0x30
 800b636:	b2d9      	uxtb	r1, r3
 800b638:	2909      	cmp	r1, #9
 800b63a:	d927      	bls.n	800b68c <_strtod_l+0x1b0>
 800b63c:	2201      	movs	r2, #1
 800b63e:	4956      	ldr	r1, [pc, #344]	; (800b798 <_strtod_l+0x2bc>)
 800b640:	f001 fe0f 	bl	800d262 <strncmp>
 800b644:	2800      	cmp	r0, #0
 800b646:	d031      	beq.n	800b6ac <_strtod_l+0x1d0>
 800b648:	2000      	movs	r0, #0
 800b64a:	0023      	movs	r3, r4
 800b64c:	4684      	mov	ip, r0
 800b64e:	9a08      	ldr	r2, [sp, #32]
 800b650:	900c      	str	r0, [sp, #48]	; 0x30
 800b652:	9205      	str	r2, [sp, #20]
 800b654:	2220      	movs	r2, #32
 800b656:	0019      	movs	r1, r3
 800b658:	4391      	bics	r1, r2
 800b65a:	000a      	movs	r2, r1
 800b65c:	2100      	movs	r1, #0
 800b65e:	9106      	str	r1, [sp, #24]
 800b660:	2a45      	cmp	r2, #69	; 0x45
 800b662:	d000      	beq.n	800b666 <_strtod_l+0x18a>
 800b664:	e0c2      	b.n	800b7ec <_strtod_l+0x310>
 800b666:	9b05      	ldr	r3, [sp, #20]
 800b668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b66a:	4303      	orrs	r3, r0
 800b66c:	4313      	orrs	r3, r2
 800b66e:	428b      	cmp	r3, r1
 800b670:	d08d      	beq.n	800b58e <_strtod_l+0xb2>
 800b672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b674:	9307      	str	r3, [sp, #28]
 800b676:	3301      	adds	r3, #1
 800b678:	931b      	str	r3, [sp, #108]	; 0x6c
 800b67a:	9b07      	ldr	r3, [sp, #28]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	2b2b      	cmp	r3, #43	; 0x2b
 800b680:	d071      	beq.n	800b766 <_strtod_l+0x28a>
 800b682:	000c      	movs	r4, r1
 800b684:	2b2d      	cmp	r3, #45	; 0x2d
 800b686:	d174      	bne.n	800b772 <_strtod_l+0x296>
 800b688:	2401      	movs	r4, #1
 800b68a:	e06d      	b.n	800b768 <_strtod_l+0x28c>
 800b68c:	9908      	ldr	r1, [sp, #32]
 800b68e:	2908      	cmp	r1, #8
 800b690:	dc09      	bgt.n	800b6a6 <_strtod_l+0x1ca>
 800b692:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b694:	4351      	muls	r1, r2
 800b696:	185b      	adds	r3, r3, r1
 800b698:	930d      	str	r3, [sp, #52]	; 0x34
 800b69a:	9b08      	ldr	r3, [sp, #32]
 800b69c:	3001      	adds	r0, #1
 800b69e:	3301      	adds	r3, #1
 800b6a0:	9308      	str	r3, [sp, #32]
 800b6a2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b6a4:	e7c3      	b.n	800b62e <_strtod_l+0x152>
 800b6a6:	4355      	muls	r5, r2
 800b6a8:	195d      	adds	r5, r3, r5
 800b6aa:	e7f6      	b.n	800b69a <_strtod_l+0x1be>
 800b6ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b6b2:	9a08      	ldr	r2, [sp, #32]
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	2a00      	cmp	r2, #0
 800b6b8:	d03a      	beq.n	800b730 <_strtod_l+0x254>
 800b6ba:	900c      	str	r0, [sp, #48]	; 0x30
 800b6bc:	9205      	str	r2, [sp, #20]
 800b6be:	001a      	movs	r2, r3
 800b6c0:	3a30      	subs	r2, #48	; 0x30
 800b6c2:	2a09      	cmp	r2, #9
 800b6c4:	d912      	bls.n	800b6ec <_strtod_l+0x210>
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	4694      	mov	ip, r2
 800b6ca:	e7c3      	b.n	800b654 <_strtod_l+0x178>
 800b6cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	1c5a      	adds	r2, r3, #1
 800b6d2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b6d4:	785b      	ldrb	r3, [r3, #1]
 800b6d6:	2b30      	cmp	r3, #48	; 0x30
 800b6d8:	d0f8      	beq.n	800b6cc <_strtod_l+0x1f0>
 800b6da:	001a      	movs	r2, r3
 800b6dc:	3a31      	subs	r2, #49	; 0x31
 800b6de:	2a08      	cmp	r2, #8
 800b6e0:	d83c      	bhi.n	800b75c <_strtod_l+0x280>
 800b6e2:	900c      	str	r0, [sp, #48]	; 0x30
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b6e8:	9005      	str	r0, [sp, #20]
 800b6ea:	9210      	str	r2, [sp, #64]	; 0x40
 800b6ec:	001a      	movs	r2, r3
 800b6ee:	1c41      	adds	r1, r0, #1
 800b6f0:	3a30      	subs	r2, #48	; 0x30
 800b6f2:	2b30      	cmp	r3, #48	; 0x30
 800b6f4:	d016      	beq.n	800b724 <_strtod_l+0x248>
 800b6f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6f8:	185b      	adds	r3, r3, r1
 800b6fa:	930c      	str	r3, [sp, #48]	; 0x30
 800b6fc:	9b05      	ldr	r3, [sp, #20]
 800b6fe:	210a      	movs	r1, #10
 800b700:	469c      	mov	ip, r3
 800b702:	4484      	add	ip, r0
 800b704:	4563      	cmp	r3, ip
 800b706:	d115      	bne.n	800b734 <_strtod_l+0x258>
 800b708:	9905      	ldr	r1, [sp, #20]
 800b70a:	9b05      	ldr	r3, [sp, #20]
 800b70c:	3101      	adds	r1, #1
 800b70e:	1809      	adds	r1, r1, r0
 800b710:	181b      	adds	r3, r3, r0
 800b712:	9105      	str	r1, [sp, #20]
 800b714:	2b08      	cmp	r3, #8
 800b716:	dc19      	bgt.n	800b74c <_strtod_l+0x270>
 800b718:	230a      	movs	r3, #10
 800b71a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b71c:	434b      	muls	r3, r1
 800b71e:	2100      	movs	r1, #0
 800b720:	18d3      	adds	r3, r2, r3
 800b722:	930d      	str	r3, [sp, #52]	; 0x34
 800b724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b726:	0008      	movs	r0, r1
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b72c:	785b      	ldrb	r3, [r3, #1]
 800b72e:	e7c6      	b.n	800b6be <_strtod_l+0x1e2>
 800b730:	9808      	ldr	r0, [sp, #32]
 800b732:	e7d0      	b.n	800b6d6 <_strtod_l+0x1fa>
 800b734:	1c5c      	adds	r4, r3, #1
 800b736:	2b08      	cmp	r3, #8
 800b738:	dc04      	bgt.n	800b744 <_strtod_l+0x268>
 800b73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b73c:	434b      	muls	r3, r1
 800b73e:	930d      	str	r3, [sp, #52]	; 0x34
 800b740:	0023      	movs	r3, r4
 800b742:	e7df      	b.n	800b704 <_strtod_l+0x228>
 800b744:	2c10      	cmp	r4, #16
 800b746:	dcfb      	bgt.n	800b740 <_strtod_l+0x264>
 800b748:	434d      	muls	r5, r1
 800b74a:	e7f9      	b.n	800b740 <_strtod_l+0x264>
 800b74c:	9b05      	ldr	r3, [sp, #20]
 800b74e:	2100      	movs	r1, #0
 800b750:	2b10      	cmp	r3, #16
 800b752:	dce7      	bgt.n	800b724 <_strtod_l+0x248>
 800b754:	230a      	movs	r3, #10
 800b756:	435d      	muls	r5, r3
 800b758:	1955      	adds	r5, r2, r5
 800b75a:	e7e3      	b.n	800b724 <_strtod_l+0x248>
 800b75c:	2200      	movs	r2, #0
 800b75e:	920c      	str	r2, [sp, #48]	; 0x30
 800b760:	9205      	str	r2, [sp, #20]
 800b762:	3201      	adds	r2, #1
 800b764:	e7b0      	b.n	800b6c8 <_strtod_l+0x1ec>
 800b766:	2400      	movs	r4, #0
 800b768:	9b07      	ldr	r3, [sp, #28]
 800b76a:	3302      	adds	r3, #2
 800b76c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b76e:	9b07      	ldr	r3, [sp, #28]
 800b770:	789b      	ldrb	r3, [r3, #2]
 800b772:	001a      	movs	r2, r3
 800b774:	3a30      	subs	r2, #48	; 0x30
 800b776:	2a09      	cmp	r2, #9
 800b778:	d914      	bls.n	800b7a4 <_strtod_l+0x2c8>
 800b77a:	9a07      	ldr	r2, [sp, #28]
 800b77c:	921b      	str	r2, [sp, #108]	; 0x6c
 800b77e:	2200      	movs	r2, #0
 800b780:	e033      	b.n	800b7ea <_strtod_l+0x30e>
 800b782:	46c0      	nop			; (mov r8, r8)
 800b784:	08011ec8 	.word	0x08011ec8
 800b788:	7ff00000 	.word	0x7ff00000
 800b78c:	ffefffff 	.word	0xffefffff
 800b790:	00000433 	.word	0x00000433
 800b794:	7fffffff 	.word	0x7fffffff
 800b798:	08011ec6 	.word	0x08011ec6
 800b79c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b79e:	1c5a      	adds	r2, r3, #1
 800b7a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b7a2:	785b      	ldrb	r3, [r3, #1]
 800b7a4:	2b30      	cmp	r3, #48	; 0x30
 800b7a6:	d0f9      	beq.n	800b79c <_strtod_l+0x2c0>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	9206      	str	r2, [sp, #24]
 800b7ac:	001a      	movs	r2, r3
 800b7ae:	3a31      	subs	r2, #49	; 0x31
 800b7b0:	2a08      	cmp	r2, #8
 800b7b2:	d81b      	bhi.n	800b7ec <_strtod_l+0x310>
 800b7b4:	3b30      	subs	r3, #48	; 0x30
 800b7b6:	930e      	str	r3, [sp, #56]	; 0x38
 800b7b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7ba:	9306      	str	r3, [sp, #24]
 800b7bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7be:	1c59      	adds	r1, r3, #1
 800b7c0:	911b      	str	r1, [sp, #108]	; 0x6c
 800b7c2:	785b      	ldrb	r3, [r3, #1]
 800b7c4:	001a      	movs	r2, r3
 800b7c6:	3a30      	subs	r2, #48	; 0x30
 800b7c8:	2a09      	cmp	r2, #9
 800b7ca:	d93a      	bls.n	800b842 <_strtod_l+0x366>
 800b7cc:	9a06      	ldr	r2, [sp, #24]
 800b7ce:	1a8a      	subs	r2, r1, r2
 800b7d0:	49b2      	ldr	r1, [pc, #712]	; (800ba9c <_strtod_l+0x5c0>)
 800b7d2:	9106      	str	r1, [sp, #24]
 800b7d4:	2a08      	cmp	r2, #8
 800b7d6:	dc04      	bgt.n	800b7e2 <_strtod_l+0x306>
 800b7d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7da:	9206      	str	r2, [sp, #24]
 800b7dc:	428a      	cmp	r2, r1
 800b7de:	dd00      	ble.n	800b7e2 <_strtod_l+0x306>
 800b7e0:	9106      	str	r1, [sp, #24]
 800b7e2:	2c00      	cmp	r4, #0
 800b7e4:	d002      	beq.n	800b7ec <_strtod_l+0x310>
 800b7e6:	9a06      	ldr	r2, [sp, #24]
 800b7e8:	4252      	negs	r2, r2
 800b7ea:	9206      	str	r2, [sp, #24]
 800b7ec:	9a05      	ldr	r2, [sp, #20]
 800b7ee:	2a00      	cmp	r2, #0
 800b7f0:	d14d      	bne.n	800b88e <_strtod_l+0x3b2>
 800b7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7f4:	4310      	orrs	r0, r2
 800b7f6:	d000      	beq.n	800b7fa <_strtod_l+0x31e>
 800b7f8:	e6ab      	b.n	800b552 <_strtod_l+0x76>
 800b7fa:	4662      	mov	r2, ip
 800b7fc:	2a00      	cmp	r2, #0
 800b7fe:	d000      	beq.n	800b802 <_strtod_l+0x326>
 800b800:	e6c5      	b.n	800b58e <_strtod_l+0xb2>
 800b802:	2b69      	cmp	r3, #105	; 0x69
 800b804:	d027      	beq.n	800b856 <_strtod_l+0x37a>
 800b806:	dc23      	bgt.n	800b850 <_strtod_l+0x374>
 800b808:	2b49      	cmp	r3, #73	; 0x49
 800b80a:	d024      	beq.n	800b856 <_strtod_l+0x37a>
 800b80c:	2b4e      	cmp	r3, #78	; 0x4e
 800b80e:	d000      	beq.n	800b812 <_strtod_l+0x336>
 800b810:	e6bd      	b.n	800b58e <_strtod_l+0xb2>
 800b812:	49a3      	ldr	r1, [pc, #652]	; (800baa0 <_strtod_l+0x5c4>)
 800b814:	a81b      	add	r0, sp, #108	; 0x6c
 800b816:	f003 f883 	bl	800e920 <__match>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d100      	bne.n	800b820 <_strtod_l+0x344>
 800b81e:	e6b6      	b.n	800b58e <_strtod_l+0xb2>
 800b820:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2b28      	cmp	r3, #40	; 0x28
 800b826:	d12c      	bne.n	800b882 <_strtod_l+0x3a6>
 800b828:	499e      	ldr	r1, [pc, #632]	; (800baa4 <_strtod_l+0x5c8>)
 800b82a:	aa1e      	add	r2, sp, #120	; 0x78
 800b82c:	a81b      	add	r0, sp, #108	; 0x6c
 800b82e:	f003 f88b 	bl	800e948 <__hexnan>
 800b832:	2805      	cmp	r0, #5
 800b834:	d125      	bne.n	800b882 <_strtod_l+0x3a6>
 800b836:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b838:	4a9b      	ldr	r2, [pc, #620]	; (800baa8 <_strtod_l+0x5cc>)
 800b83a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b83c:	431a      	orrs	r2, r3
 800b83e:	0017      	movs	r7, r2
 800b840:	e687      	b.n	800b552 <_strtod_l+0x76>
 800b842:	220a      	movs	r2, #10
 800b844:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b846:	434a      	muls	r2, r1
 800b848:	18d2      	adds	r2, r2, r3
 800b84a:	3a30      	subs	r2, #48	; 0x30
 800b84c:	920e      	str	r2, [sp, #56]	; 0x38
 800b84e:	e7b5      	b.n	800b7bc <_strtod_l+0x2e0>
 800b850:	2b6e      	cmp	r3, #110	; 0x6e
 800b852:	d0de      	beq.n	800b812 <_strtod_l+0x336>
 800b854:	e69b      	b.n	800b58e <_strtod_l+0xb2>
 800b856:	4995      	ldr	r1, [pc, #596]	; (800baac <_strtod_l+0x5d0>)
 800b858:	a81b      	add	r0, sp, #108	; 0x6c
 800b85a:	f003 f861 	bl	800e920 <__match>
 800b85e:	2800      	cmp	r0, #0
 800b860:	d100      	bne.n	800b864 <_strtod_l+0x388>
 800b862:	e694      	b.n	800b58e <_strtod_l+0xb2>
 800b864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b866:	4992      	ldr	r1, [pc, #584]	; (800bab0 <_strtod_l+0x5d4>)
 800b868:	3b01      	subs	r3, #1
 800b86a:	a81b      	add	r0, sp, #108	; 0x6c
 800b86c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b86e:	f003 f857 	bl	800e920 <__match>
 800b872:	2800      	cmp	r0, #0
 800b874:	d102      	bne.n	800b87c <_strtod_l+0x3a0>
 800b876:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b878:	3301      	adds	r3, #1
 800b87a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b87c:	2600      	movs	r6, #0
 800b87e:	4f8a      	ldr	r7, [pc, #552]	; (800baa8 <_strtod_l+0x5cc>)
 800b880:	e667      	b.n	800b552 <_strtod_l+0x76>
 800b882:	488c      	ldr	r0, [pc, #560]	; (800bab4 <_strtod_l+0x5d8>)
 800b884:	f001 fe9c 	bl	800d5c0 <nan>
 800b888:	0006      	movs	r6, r0
 800b88a:	000f      	movs	r7, r1
 800b88c:	e661      	b.n	800b552 <_strtod_l+0x76>
 800b88e:	9b06      	ldr	r3, [sp, #24]
 800b890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b892:	1a9b      	subs	r3, r3, r2
 800b894:	9309      	str	r3, [sp, #36]	; 0x24
 800b896:	9b08      	ldr	r3, [sp, #32]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d101      	bne.n	800b8a0 <_strtod_l+0x3c4>
 800b89c:	9b05      	ldr	r3, [sp, #20]
 800b89e:	9308      	str	r3, [sp, #32]
 800b8a0:	9c05      	ldr	r4, [sp, #20]
 800b8a2:	2c10      	cmp	r4, #16
 800b8a4:	dd00      	ble.n	800b8a8 <_strtod_l+0x3cc>
 800b8a6:	2410      	movs	r4, #16
 800b8a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b8aa:	f7f7 fbe5 	bl	8003078 <__aeabi_ui2d>
 800b8ae:	9b05      	ldr	r3, [sp, #20]
 800b8b0:	0006      	movs	r6, r0
 800b8b2:	000f      	movs	r7, r1
 800b8b4:	2b09      	cmp	r3, #9
 800b8b6:	dd15      	ble.n	800b8e4 <_strtod_l+0x408>
 800b8b8:	0022      	movs	r2, r4
 800b8ba:	4b7f      	ldr	r3, [pc, #508]	; (800bab8 <_strtod_l+0x5dc>)
 800b8bc:	3a09      	subs	r2, #9
 800b8be:	00d2      	lsls	r2, r2, #3
 800b8c0:	189b      	adds	r3, r3, r2
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f7f6 fd0f 	bl	80022e8 <__aeabi_dmul>
 800b8ca:	0006      	movs	r6, r0
 800b8cc:	0028      	movs	r0, r5
 800b8ce:	000f      	movs	r7, r1
 800b8d0:	f7f7 fbd2 	bl	8003078 <__aeabi_ui2d>
 800b8d4:	0002      	movs	r2, r0
 800b8d6:	000b      	movs	r3, r1
 800b8d8:	0030      	movs	r0, r6
 800b8da:	0039      	movs	r1, r7
 800b8dc:	f7f5 fdaa 	bl	8001434 <__aeabi_dadd>
 800b8e0:	0006      	movs	r6, r0
 800b8e2:	000f      	movs	r7, r1
 800b8e4:	9b05      	ldr	r3, [sp, #20]
 800b8e6:	2b0f      	cmp	r3, #15
 800b8e8:	dc39      	bgt.n	800b95e <_strtod_l+0x482>
 800b8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d100      	bne.n	800b8f2 <_strtod_l+0x416>
 800b8f0:	e62f      	b.n	800b552 <_strtod_l+0x76>
 800b8f2:	dd24      	ble.n	800b93e <_strtod_l+0x462>
 800b8f4:	2b16      	cmp	r3, #22
 800b8f6:	dc09      	bgt.n	800b90c <_strtod_l+0x430>
 800b8f8:	496f      	ldr	r1, [pc, #444]	; (800bab8 <_strtod_l+0x5dc>)
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	18c9      	adds	r1, r1, r3
 800b8fe:	0032      	movs	r2, r6
 800b900:	6808      	ldr	r0, [r1, #0]
 800b902:	6849      	ldr	r1, [r1, #4]
 800b904:	003b      	movs	r3, r7
 800b906:	f7f6 fcef 	bl	80022e8 <__aeabi_dmul>
 800b90a:	e7bd      	b.n	800b888 <_strtod_l+0x3ac>
 800b90c:	2325      	movs	r3, #37	; 0x25
 800b90e:	9a05      	ldr	r2, [sp, #20]
 800b910:	1a9b      	subs	r3, r3, r2
 800b912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b914:	4293      	cmp	r3, r2
 800b916:	db22      	blt.n	800b95e <_strtod_l+0x482>
 800b918:	240f      	movs	r4, #15
 800b91a:	9b05      	ldr	r3, [sp, #20]
 800b91c:	4d66      	ldr	r5, [pc, #408]	; (800bab8 <_strtod_l+0x5dc>)
 800b91e:	1ae4      	subs	r4, r4, r3
 800b920:	00e1      	lsls	r1, r4, #3
 800b922:	1869      	adds	r1, r5, r1
 800b924:	0032      	movs	r2, r6
 800b926:	6808      	ldr	r0, [r1, #0]
 800b928:	6849      	ldr	r1, [r1, #4]
 800b92a:	003b      	movs	r3, r7
 800b92c:	f7f6 fcdc 	bl	80022e8 <__aeabi_dmul>
 800b930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b932:	1b1c      	subs	r4, r3, r4
 800b934:	00e4      	lsls	r4, r4, #3
 800b936:	192d      	adds	r5, r5, r4
 800b938:	682a      	ldr	r2, [r5, #0]
 800b93a:	686b      	ldr	r3, [r5, #4]
 800b93c:	e7e3      	b.n	800b906 <_strtod_l+0x42a>
 800b93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b940:	3316      	adds	r3, #22
 800b942:	db0c      	blt.n	800b95e <_strtod_l+0x482>
 800b944:	9906      	ldr	r1, [sp, #24]
 800b946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b948:	4b5b      	ldr	r3, [pc, #364]	; (800bab8 <_strtod_l+0x5dc>)
 800b94a:	1a52      	subs	r2, r2, r1
 800b94c:	00d2      	lsls	r2, r2, #3
 800b94e:	189b      	adds	r3, r3, r2
 800b950:	0030      	movs	r0, r6
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	0039      	movs	r1, r7
 800b958:	f7f6 f8cc 	bl	8001af4 <__aeabi_ddiv>
 800b95c:	e794      	b.n	800b888 <_strtod_l+0x3ac>
 800b95e:	9b05      	ldr	r3, [sp, #20]
 800b960:	1b1c      	subs	r4, r3, r4
 800b962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b964:	18e4      	adds	r4, r4, r3
 800b966:	2c00      	cmp	r4, #0
 800b968:	dd72      	ble.n	800ba50 <_strtod_l+0x574>
 800b96a:	220f      	movs	r2, #15
 800b96c:	0023      	movs	r3, r4
 800b96e:	4013      	ands	r3, r2
 800b970:	4214      	tst	r4, r2
 800b972:	d00a      	beq.n	800b98a <_strtod_l+0x4ae>
 800b974:	4950      	ldr	r1, [pc, #320]	; (800bab8 <_strtod_l+0x5dc>)
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	18c9      	adds	r1, r1, r3
 800b97a:	0032      	movs	r2, r6
 800b97c:	6808      	ldr	r0, [r1, #0]
 800b97e:	6849      	ldr	r1, [r1, #4]
 800b980:	003b      	movs	r3, r7
 800b982:	f7f6 fcb1 	bl	80022e8 <__aeabi_dmul>
 800b986:	0006      	movs	r6, r0
 800b988:	000f      	movs	r7, r1
 800b98a:	230f      	movs	r3, #15
 800b98c:	439c      	bics	r4, r3
 800b98e:	d04a      	beq.n	800ba26 <_strtod_l+0x54a>
 800b990:	3326      	adds	r3, #38	; 0x26
 800b992:	33ff      	adds	r3, #255	; 0xff
 800b994:	429c      	cmp	r4, r3
 800b996:	dd22      	ble.n	800b9de <_strtod_l+0x502>
 800b998:	2300      	movs	r3, #0
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	9306      	str	r3, [sp, #24]
 800b99e:	930d      	str	r3, [sp, #52]	; 0x34
 800b9a0:	9308      	str	r3, [sp, #32]
 800b9a2:	2322      	movs	r3, #34	; 0x22
 800b9a4:	2600      	movs	r6, #0
 800b9a6:	9a04      	ldr	r2, [sp, #16]
 800b9a8:	4f3f      	ldr	r7, [pc, #252]	; (800baa8 <_strtod_l+0x5cc>)
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9ae:	42b3      	cmp	r3, r6
 800b9b0:	d100      	bne.n	800b9b4 <_strtod_l+0x4d8>
 800b9b2:	e5ce      	b.n	800b552 <_strtod_l+0x76>
 800b9b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9b6:	9804      	ldr	r0, [sp, #16]
 800b9b8:	f003 f8c4 	bl	800eb44 <_Bfree>
 800b9bc:	9908      	ldr	r1, [sp, #32]
 800b9be:	9804      	ldr	r0, [sp, #16]
 800b9c0:	f003 f8c0 	bl	800eb44 <_Bfree>
 800b9c4:	9906      	ldr	r1, [sp, #24]
 800b9c6:	9804      	ldr	r0, [sp, #16]
 800b9c8:	f003 f8bc 	bl	800eb44 <_Bfree>
 800b9cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b9ce:	9804      	ldr	r0, [sp, #16]
 800b9d0:	f003 f8b8 	bl	800eb44 <_Bfree>
 800b9d4:	9905      	ldr	r1, [sp, #20]
 800b9d6:	9804      	ldr	r0, [sp, #16]
 800b9d8:	f003 f8b4 	bl	800eb44 <_Bfree>
 800b9dc:	e5b9      	b.n	800b552 <_strtod_l+0x76>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	0030      	movs	r0, r6
 800b9e2:	0039      	movs	r1, r7
 800b9e4:	4d35      	ldr	r5, [pc, #212]	; (800babc <_strtod_l+0x5e0>)
 800b9e6:	1124      	asrs	r4, r4, #4
 800b9e8:	9307      	str	r3, [sp, #28]
 800b9ea:	2c01      	cmp	r4, #1
 800b9ec:	dc1e      	bgt.n	800ba2c <_strtod_l+0x550>
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <_strtod_l+0x51a>
 800b9f2:	0006      	movs	r6, r0
 800b9f4:	000f      	movs	r7, r1
 800b9f6:	4b32      	ldr	r3, [pc, #200]	; (800bac0 <_strtod_l+0x5e4>)
 800b9f8:	9a07      	ldr	r2, [sp, #28]
 800b9fa:	18ff      	adds	r7, r7, r3
 800b9fc:	4b2f      	ldr	r3, [pc, #188]	; (800babc <_strtod_l+0x5e0>)
 800b9fe:	00d2      	lsls	r2, r2, #3
 800ba00:	189d      	adds	r5, r3, r2
 800ba02:	6828      	ldr	r0, [r5, #0]
 800ba04:	6869      	ldr	r1, [r5, #4]
 800ba06:	0032      	movs	r2, r6
 800ba08:	003b      	movs	r3, r7
 800ba0a:	f7f6 fc6d 	bl	80022e8 <__aeabi_dmul>
 800ba0e:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <_strtod_l+0x5cc>)
 800ba10:	4a2c      	ldr	r2, [pc, #176]	; (800bac4 <_strtod_l+0x5e8>)
 800ba12:	0006      	movs	r6, r0
 800ba14:	400b      	ands	r3, r1
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d8be      	bhi.n	800b998 <_strtod_l+0x4bc>
 800ba1a:	4a2b      	ldr	r2, [pc, #172]	; (800bac8 <_strtod_l+0x5ec>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d913      	bls.n	800ba48 <_strtod_l+0x56c>
 800ba20:	2601      	movs	r6, #1
 800ba22:	4f2a      	ldr	r7, [pc, #168]	; (800bacc <_strtod_l+0x5f0>)
 800ba24:	4276      	negs	r6, r6
 800ba26:	2300      	movs	r3, #0
 800ba28:	9307      	str	r3, [sp, #28]
 800ba2a:	e088      	b.n	800bb3e <_strtod_l+0x662>
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	4214      	tst	r4, r2
 800ba30:	d004      	beq.n	800ba3c <_strtod_l+0x560>
 800ba32:	682a      	ldr	r2, [r5, #0]
 800ba34:	686b      	ldr	r3, [r5, #4]
 800ba36:	f7f6 fc57 	bl	80022e8 <__aeabi_dmul>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	9a07      	ldr	r2, [sp, #28]
 800ba3e:	1064      	asrs	r4, r4, #1
 800ba40:	3201      	adds	r2, #1
 800ba42:	9207      	str	r2, [sp, #28]
 800ba44:	3508      	adds	r5, #8
 800ba46:	e7d0      	b.n	800b9ea <_strtod_l+0x50e>
 800ba48:	23d4      	movs	r3, #212	; 0xd4
 800ba4a:	049b      	lsls	r3, r3, #18
 800ba4c:	18cf      	adds	r7, r1, r3
 800ba4e:	e7ea      	b.n	800ba26 <_strtod_l+0x54a>
 800ba50:	2c00      	cmp	r4, #0
 800ba52:	d0e8      	beq.n	800ba26 <_strtod_l+0x54a>
 800ba54:	4264      	negs	r4, r4
 800ba56:	230f      	movs	r3, #15
 800ba58:	0022      	movs	r2, r4
 800ba5a:	401a      	ands	r2, r3
 800ba5c:	421c      	tst	r4, r3
 800ba5e:	d00a      	beq.n	800ba76 <_strtod_l+0x59a>
 800ba60:	4b15      	ldr	r3, [pc, #84]	; (800bab8 <_strtod_l+0x5dc>)
 800ba62:	00d2      	lsls	r2, r2, #3
 800ba64:	189b      	adds	r3, r3, r2
 800ba66:	0030      	movs	r0, r6
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	0039      	movs	r1, r7
 800ba6e:	f7f6 f841 	bl	8001af4 <__aeabi_ddiv>
 800ba72:	0006      	movs	r6, r0
 800ba74:	000f      	movs	r7, r1
 800ba76:	1124      	asrs	r4, r4, #4
 800ba78:	d0d5      	beq.n	800ba26 <_strtod_l+0x54a>
 800ba7a:	2c1f      	cmp	r4, #31
 800ba7c:	dd28      	ble.n	800bad0 <_strtod_l+0x5f4>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9305      	str	r3, [sp, #20]
 800ba82:	9306      	str	r3, [sp, #24]
 800ba84:	930d      	str	r3, [sp, #52]	; 0x34
 800ba86:	9308      	str	r3, [sp, #32]
 800ba88:	2322      	movs	r3, #34	; 0x22
 800ba8a:	9a04      	ldr	r2, [sp, #16]
 800ba8c:	2600      	movs	r6, #0
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba92:	2700      	movs	r7, #0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d18d      	bne.n	800b9b4 <_strtod_l+0x4d8>
 800ba98:	e55b      	b.n	800b552 <_strtod_l+0x76>
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	00004e1f 	.word	0x00004e1f
 800baa0:	08012026 	.word	0x08012026
 800baa4:	08011edc 	.word	0x08011edc
 800baa8:	7ff00000 	.word	0x7ff00000
 800baac:	0801201e 	.word	0x0801201e
 800bab0:	08012106 	.word	0x08012106
 800bab4:	08010feb 	.word	0x08010feb
 800bab8:	08012260 	.word	0x08012260
 800babc:	08012238 	.word	0x08012238
 800bac0:	fcb00000 	.word	0xfcb00000
 800bac4:	7ca00000 	.word	0x7ca00000
 800bac8:	7c900000 	.word	0x7c900000
 800bacc:	7fefffff 	.word	0x7fefffff
 800bad0:	2310      	movs	r3, #16
 800bad2:	0022      	movs	r2, r4
 800bad4:	401a      	ands	r2, r3
 800bad6:	9207      	str	r2, [sp, #28]
 800bad8:	421c      	tst	r4, r3
 800bada:	d001      	beq.n	800bae0 <_strtod_l+0x604>
 800badc:	335a      	adds	r3, #90	; 0x5a
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	0030      	movs	r0, r6
 800bae2:	0039      	movs	r1, r7
 800bae4:	2300      	movs	r3, #0
 800bae6:	4dc4      	ldr	r5, [pc, #784]	; (800bdf8 <_strtod_l+0x91c>)
 800bae8:	2201      	movs	r2, #1
 800baea:	4214      	tst	r4, r2
 800baec:	d004      	beq.n	800baf8 <_strtod_l+0x61c>
 800baee:	682a      	ldr	r2, [r5, #0]
 800baf0:	686b      	ldr	r3, [r5, #4]
 800baf2:	f7f6 fbf9 	bl	80022e8 <__aeabi_dmul>
 800baf6:	2301      	movs	r3, #1
 800baf8:	1064      	asrs	r4, r4, #1
 800bafa:	3508      	adds	r5, #8
 800bafc:	2c00      	cmp	r4, #0
 800bafe:	d1f3      	bne.n	800bae8 <_strtod_l+0x60c>
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <_strtod_l+0x62c>
 800bb04:	0006      	movs	r6, r0
 800bb06:	000f      	movs	r7, r1
 800bb08:	9b07      	ldr	r3, [sp, #28]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00f      	beq.n	800bb2e <_strtod_l+0x652>
 800bb0e:	236b      	movs	r3, #107	; 0x6b
 800bb10:	007a      	lsls	r2, r7, #1
 800bb12:	0d52      	lsrs	r2, r2, #21
 800bb14:	0039      	movs	r1, r7
 800bb16:	1a9b      	subs	r3, r3, r2
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dd08      	ble.n	800bb2e <_strtod_l+0x652>
 800bb1c:	2b1f      	cmp	r3, #31
 800bb1e:	dc00      	bgt.n	800bb22 <_strtod_l+0x646>
 800bb20:	e121      	b.n	800bd66 <_strtod_l+0x88a>
 800bb22:	2600      	movs	r6, #0
 800bb24:	2b34      	cmp	r3, #52	; 0x34
 800bb26:	dc00      	bgt.n	800bb2a <_strtod_l+0x64e>
 800bb28:	e116      	b.n	800bd58 <_strtod_l+0x87c>
 800bb2a:	27dc      	movs	r7, #220	; 0xdc
 800bb2c:	04bf      	lsls	r7, r7, #18
 800bb2e:	2200      	movs	r2, #0
 800bb30:	2300      	movs	r3, #0
 800bb32:	0030      	movs	r0, r6
 800bb34:	0039      	movs	r1, r7
 800bb36:	f7f4 fc93 	bl	8000460 <__aeabi_dcmpeq>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d19f      	bne.n	800ba7e <_strtod_l+0x5a2>
 800bb3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb40:	9a08      	ldr	r2, [sp, #32]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bb46:	9b05      	ldr	r3, [sp, #20]
 800bb48:	9804      	ldr	r0, [sp, #16]
 800bb4a:	f003 f863 	bl	800ec14 <__s2b>
 800bb4e:	900d      	str	r0, [sp, #52]	; 0x34
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d100      	bne.n	800bb56 <_strtod_l+0x67a>
 800bb54:	e720      	b.n	800b998 <_strtod_l+0x4bc>
 800bb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb58:	9906      	ldr	r1, [sp, #24]
 800bb5a:	17da      	asrs	r2, r3, #31
 800bb5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb5e:	1a5b      	subs	r3, r3, r1
 800bb60:	401a      	ands	r2, r3
 800bb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb64:	9215      	str	r2, [sp, #84]	; 0x54
 800bb66:	43db      	mvns	r3, r3
 800bb68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb6a:	17db      	asrs	r3, r3, #31
 800bb6c:	401a      	ands	r2, r3
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9218      	str	r2, [sp, #96]	; 0x60
 800bb72:	9305      	str	r3, [sp, #20]
 800bb74:	9306      	str	r3, [sp, #24]
 800bb76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb78:	9804      	ldr	r0, [sp, #16]
 800bb7a:	6859      	ldr	r1, [r3, #4]
 800bb7c:	f002 ff9e 	bl	800eabc <_Balloc>
 800bb80:	9008      	str	r0, [sp, #32]
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d100      	bne.n	800bb88 <_strtod_l+0x6ac>
 800bb86:	e70c      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bb88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb8a:	300c      	adds	r0, #12
 800bb8c:	0019      	movs	r1, r3
 800bb8e:	691a      	ldr	r2, [r3, #16]
 800bb90:	310c      	adds	r1, #12
 800bb92:	3202      	adds	r2, #2
 800bb94:	0092      	lsls	r2, r2, #2
 800bb96:	f001 fd09 	bl	800d5ac <memcpy>
 800bb9a:	ab1e      	add	r3, sp, #120	; 0x78
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	ab1d      	add	r3, sp, #116	; 0x74
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	0032      	movs	r2, r6
 800bba4:	003b      	movs	r3, r7
 800bba6:	9804      	ldr	r0, [sp, #16]
 800bba8:	9610      	str	r6, [sp, #64]	; 0x40
 800bbaa:	9711      	str	r7, [sp, #68]	; 0x44
 800bbac:	f003 fb74 	bl	800f298 <__d2b>
 800bbb0:	901c      	str	r0, [sp, #112]	; 0x70
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d100      	bne.n	800bbb8 <_strtod_l+0x6dc>
 800bbb6:	e6f4      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bbb8:	2101      	movs	r1, #1
 800bbba:	9804      	ldr	r0, [sp, #16]
 800bbbc:	f003 f8be 	bl	800ed3c <__i2b>
 800bbc0:	9006      	str	r0, [sp, #24]
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d100      	bne.n	800bbc8 <_strtod_l+0x6ec>
 800bbc6:	e6ec      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bbc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bbcc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bbce:	1ad4      	subs	r4, r2, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	db01      	blt.n	800bbd8 <_strtod_l+0x6fc>
 800bbd4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800bbd6:	195d      	adds	r5, r3, r5
 800bbd8:	9907      	ldr	r1, [sp, #28]
 800bbda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bbdc:	1a5b      	subs	r3, r3, r1
 800bbde:	2136      	movs	r1, #54	; 0x36
 800bbe0:	189b      	adds	r3, r3, r2
 800bbe2:	1a8a      	subs	r2, r1, r2
 800bbe4:	4985      	ldr	r1, [pc, #532]	; (800bdfc <_strtod_l+0x920>)
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	468c      	mov	ip, r1
 800bbea:	2100      	movs	r1, #0
 800bbec:	3b01      	subs	r3, #1
 800bbee:	9114      	str	r1, [sp, #80]	; 0x50
 800bbf0:	9012      	str	r0, [sp, #72]	; 0x48
 800bbf2:	4563      	cmp	r3, ip
 800bbf4:	da07      	bge.n	800bc06 <_strtod_l+0x72a>
 800bbf6:	4661      	mov	r1, ip
 800bbf8:	1ac9      	subs	r1, r1, r3
 800bbfa:	1a52      	subs	r2, r2, r1
 800bbfc:	291f      	cmp	r1, #31
 800bbfe:	dd00      	ble.n	800bc02 <_strtod_l+0x726>
 800bc00:	e0b6      	b.n	800bd70 <_strtod_l+0x894>
 800bc02:	4088      	lsls	r0, r1
 800bc04:	9012      	str	r0, [sp, #72]	; 0x48
 800bc06:	18ab      	adds	r3, r5, r2
 800bc08:	930c      	str	r3, [sp, #48]	; 0x30
 800bc0a:	18a4      	adds	r4, r4, r2
 800bc0c:	9b07      	ldr	r3, [sp, #28]
 800bc0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc10:	191c      	adds	r4, r3, r4
 800bc12:	002b      	movs	r3, r5
 800bc14:	4295      	cmp	r5, r2
 800bc16:	dd00      	ble.n	800bc1a <_strtod_l+0x73e>
 800bc18:	0013      	movs	r3, r2
 800bc1a:	42a3      	cmp	r3, r4
 800bc1c:	dd00      	ble.n	800bc20 <_strtod_l+0x744>
 800bc1e:	0023      	movs	r3, r4
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	dd04      	ble.n	800bc2e <_strtod_l+0x752>
 800bc24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc26:	1ae4      	subs	r4, r4, r3
 800bc28:	1ad2      	subs	r2, r2, r3
 800bc2a:	920c      	str	r2, [sp, #48]	; 0x30
 800bc2c:	1aed      	subs	r5, r5, r3
 800bc2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	dd17      	ble.n	800bc64 <_strtod_l+0x788>
 800bc34:	001a      	movs	r2, r3
 800bc36:	9906      	ldr	r1, [sp, #24]
 800bc38:	9804      	ldr	r0, [sp, #16]
 800bc3a:	f003 f947 	bl	800eecc <__pow5mult>
 800bc3e:	9006      	str	r0, [sp, #24]
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d100      	bne.n	800bc46 <_strtod_l+0x76a>
 800bc44:	e6ad      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bc46:	0001      	movs	r1, r0
 800bc48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bc4a:	9804      	ldr	r0, [sp, #16]
 800bc4c:	f003 f88e 	bl	800ed6c <__multiply>
 800bc50:	900e      	str	r0, [sp, #56]	; 0x38
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d100      	bne.n	800bc58 <_strtod_l+0x77c>
 800bc56:	e6a4      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bc58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc5a:	9804      	ldr	r0, [sp, #16]
 800bc5c:	f002 ff72 	bl	800eb44 <_Bfree>
 800bc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc62:	931c      	str	r3, [sp, #112]	; 0x70
 800bc64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dd00      	ble.n	800bc6c <_strtod_l+0x790>
 800bc6a:	e087      	b.n	800bd7c <_strtod_l+0x8a0>
 800bc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	dd08      	ble.n	800bc84 <_strtod_l+0x7a8>
 800bc72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc74:	9908      	ldr	r1, [sp, #32]
 800bc76:	9804      	ldr	r0, [sp, #16]
 800bc78:	f003 f928 	bl	800eecc <__pow5mult>
 800bc7c:	9008      	str	r0, [sp, #32]
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d100      	bne.n	800bc84 <_strtod_l+0x7a8>
 800bc82:	e68e      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bc84:	2c00      	cmp	r4, #0
 800bc86:	dd08      	ble.n	800bc9a <_strtod_l+0x7be>
 800bc88:	0022      	movs	r2, r4
 800bc8a:	9908      	ldr	r1, [sp, #32]
 800bc8c:	9804      	ldr	r0, [sp, #16]
 800bc8e:	f003 f979 	bl	800ef84 <__lshift>
 800bc92:	9008      	str	r0, [sp, #32]
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d100      	bne.n	800bc9a <_strtod_l+0x7be>
 800bc98:	e683      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bc9a:	2d00      	cmp	r5, #0
 800bc9c:	dd08      	ble.n	800bcb0 <_strtod_l+0x7d4>
 800bc9e:	002a      	movs	r2, r5
 800bca0:	9906      	ldr	r1, [sp, #24]
 800bca2:	9804      	ldr	r0, [sp, #16]
 800bca4:	f003 f96e 	bl	800ef84 <__lshift>
 800bca8:	9006      	str	r0, [sp, #24]
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d100      	bne.n	800bcb0 <_strtod_l+0x7d4>
 800bcae:	e678      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bcb0:	9a08      	ldr	r2, [sp, #32]
 800bcb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bcb4:	9804      	ldr	r0, [sp, #16]
 800bcb6:	f003 f9ef 	bl	800f098 <__mdiff>
 800bcba:	9005      	str	r0, [sp, #20]
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d100      	bne.n	800bcc2 <_strtod_l+0x7e6>
 800bcc0:	e66f      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	68c3      	ldr	r3, [r0, #12]
 800bcc6:	9906      	ldr	r1, [sp, #24]
 800bcc8:	60c2      	str	r2, [r0, #12]
 800bcca:	930c      	str	r3, [sp, #48]	; 0x30
 800bccc:	f003 f9c8 	bl	800f060 <__mcmp>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	da5d      	bge.n	800bd90 <_strtod_l+0x8b4>
 800bcd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcd6:	4333      	orrs	r3, r6
 800bcd8:	d000      	beq.n	800bcdc <_strtod_l+0x800>
 800bcda:	e088      	b.n	800bdee <_strtod_l+0x912>
 800bcdc:	033b      	lsls	r3, r7, #12
 800bcde:	d000      	beq.n	800bce2 <_strtod_l+0x806>
 800bce0:	e085      	b.n	800bdee <_strtod_l+0x912>
 800bce2:	22d6      	movs	r2, #214	; 0xd6
 800bce4:	4b46      	ldr	r3, [pc, #280]	; (800be00 <_strtod_l+0x924>)
 800bce6:	04d2      	lsls	r2, r2, #19
 800bce8:	403b      	ands	r3, r7
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d97f      	bls.n	800bdee <_strtod_l+0x912>
 800bcee:	9b05      	ldr	r3, [sp, #20]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d103      	bne.n	800bcfe <_strtod_l+0x822>
 800bcf6:	9b05      	ldr	r3, [sp, #20]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	dd77      	ble.n	800bdee <_strtod_l+0x912>
 800bcfe:	9905      	ldr	r1, [sp, #20]
 800bd00:	2201      	movs	r2, #1
 800bd02:	9804      	ldr	r0, [sp, #16]
 800bd04:	f003 f93e 	bl	800ef84 <__lshift>
 800bd08:	9906      	ldr	r1, [sp, #24]
 800bd0a:	9005      	str	r0, [sp, #20]
 800bd0c:	f003 f9a8 	bl	800f060 <__mcmp>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	dd6c      	ble.n	800bdee <_strtod_l+0x912>
 800bd14:	9907      	ldr	r1, [sp, #28]
 800bd16:	003b      	movs	r3, r7
 800bd18:	4a39      	ldr	r2, [pc, #228]	; (800be00 <_strtod_l+0x924>)
 800bd1a:	2900      	cmp	r1, #0
 800bd1c:	d100      	bne.n	800bd20 <_strtod_l+0x844>
 800bd1e:	e094      	b.n	800be4a <_strtod_l+0x96e>
 800bd20:	0011      	movs	r1, r2
 800bd22:	20d6      	movs	r0, #214	; 0xd6
 800bd24:	4039      	ands	r1, r7
 800bd26:	04c0      	lsls	r0, r0, #19
 800bd28:	4281      	cmp	r1, r0
 800bd2a:	dd00      	ble.n	800bd2e <_strtod_l+0x852>
 800bd2c:	e08d      	b.n	800be4a <_strtod_l+0x96e>
 800bd2e:	23dc      	movs	r3, #220	; 0xdc
 800bd30:	049b      	lsls	r3, r3, #18
 800bd32:	4299      	cmp	r1, r3
 800bd34:	dc00      	bgt.n	800bd38 <_strtod_l+0x85c>
 800bd36:	e6a7      	b.n	800ba88 <_strtod_l+0x5ac>
 800bd38:	0030      	movs	r0, r6
 800bd3a:	0039      	movs	r1, r7
 800bd3c:	4b31      	ldr	r3, [pc, #196]	; (800be04 <_strtod_l+0x928>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f7f6 fad2 	bl	80022e8 <__aeabi_dmul>
 800bd44:	4b2e      	ldr	r3, [pc, #184]	; (800be00 <_strtod_l+0x924>)
 800bd46:	0006      	movs	r6, r0
 800bd48:	000f      	movs	r7, r1
 800bd4a:	420b      	tst	r3, r1
 800bd4c:	d000      	beq.n	800bd50 <_strtod_l+0x874>
 800bd4e:	e631      	b.n	800b9b4 <_strtod_l+0x4d8>
 800bd50:	2322      	movs	r3, #34	; 0x22
 800bd52:	9a04      	ldr	r2, [sp, #16]
 800bd54:	6013      	str	r3, [r2, #0]
 800bd56:	e62d      	b.n	800b9b4 <_strtod_l+0x4d8>
 800bd58:	234b      	movs	r3, #75	; 0x4b
 800bd5a:	1a9a      	subs	r2, r3, r2
 800bd5c:	3b4c      	subs	r3, #76	; 0x4c
 800bd5e:	4093      	lsls	r3, r2
 800bd60:	4019      	ands	r1, r3
 800bd62:	000f      	movs	r7, r1
 800bd64:	e6e3      	b.n	800bb2e <_strtod_l+0x652>
 800bd66:	2201      	movs	r2, #1
 800bd68:	4252      	negs	r2, r2
 800bd6a:	409a      	lsls	r2, r3
 800bd6c:	4016      	ands	r6, r2
 800bd6e:	e6de      	b.n	800bb2e <_strtod_l+0x652>
 800bd70:	4925      	ldr	r1, [pc, #148]	; (800be08 <_strtod_l+0x92c>)
 800bd72:	1acb      	subs	r3, r1, r3
 800bd74:	0001      	movs	r1, r0
 800bd76:	4099      	lsls	r1, r3
 800bd78:	9114      	str	r1, [sp, #80]	; 0x50
 800bd7a:	e743      	b.n	800bc04 <_strtod_l+0x728>
 800bd7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bd80:	9804      	ldr	r0, [sp, #16]
 800bd82:	f003 f8ff 	bl	800ef84 <__lshift>
 800bd86:	901c      	str	r0, [sp, #112]	; 0x70
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d000      	beq.n	800bd8e <_strtod_l+0x8b2>
 800bd8c:	e76e      	b.n	800bc6c <_strtod_l+0x790>
 800bd8e:	e608      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bd90:	970e      	str	r7, [sp, #56]	; 0x38
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d177      	bne.n	800be86 <_strtod_l+0x9aa>
 800bd96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd98:	033b      	lsls	r3, r7, #12
 800bd9a:	0b1b      	lsrs	r3, r3, #12
 800bd9c:	2a00      	cmp	r2, #0
 800bd9e:	d039      	beq.n	800be14 <_strtod_l+0x938>
 800bda0:	4a1a      	ldr	r2, [pc, #104]	; (800be0c <_strtod_l+0x930>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d139      	bne.n	800be1a <_strtod_l+0x93e>
 800bda6:	2101      	movs	r1, #1
 800bda8:	9b07      	ldr	r3, [sp, #28]
 800bdaa:	4249      	negs	r1, r1
 800bdac:	0032      	movs	r2, r6
 800bdae:	0008      	movs	r0, r1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00b      	beq.n	800bdcc <_strtod_l+0x8f0>
 800bdb4:	24d4      	movs	r4, #212	; 0xd4
 800bdb6:	4b12      	ldr	r3, [pc, #72]	; (800be00 <_strtod_l+0x924>)
 800bdb8:	0008      	movs	r0, r1
 800bdba:	403b      	ands	r3, r7
 800bdbc:	04e4      	lsls	r4, r4, #19
 800bdbe:	42a3      	cmp	r3, r4
 800bdc0:	d804      	bhi.n	800bdcc <_strtod_l+0x8f0>
 800bdc2:	306c      	adds	r0, #108	; 0x6c
 800bdc4:	0d1b      	lsrs	r3, r3, #20
 800bdc6:	1ac3      	subs	r3, r0, r3
 800bdc8:	4099      	lsls	r1, r3
 800bdca:	0008      	movs	r0, r1
 800bdcc:	4282      	cmp	r2, r0
 800bdce:	d124      	bne.n	800be1a <_strtod_l+0x93e>
 800bdd0:	4b0f      	ldr	r3, [pc, #60]	; (800be10 <_strtod_l+0x934>)
 800bdd2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bdd4:	4299      	cmp	r1, r3
 800bdd6:	d102      	bne.n	800bdde <_strtod_l+0x902>
 800bdd8:	3201      	adds	r2, #1
 800bdda:	d100      	bne.n	800bdde <_strtod_l+0x902>
 800bddc:	e5e1      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bdde:	4b08      	ldr	r3, [pc, #32]	; (800be00 <_strtod_l+0x924>)
 800bde0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bde2:	2600      	movs	r6, #0
 800bde4:	401a      	ands	r2, r3
 800bde6:	0013      	movs	r3, r2
 800bde8:	2280      	movs	r2, #128	; 0x80
 800bdea:	0352      	lsls	r2, r2, #13
 800bdec:	189f      	adds	r7, r3, r2
 800bdee:	9b07      	ldr	r3, [sp, #28]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1a1      	bne.n	800bd38 <_strtod_l+0x85c>
 800bdf4:	e5de      	b.n	800b9b4 <_strtod_l+0x4d8>
 800bdf6:	46c0      	nop			; (mov r8, r8)
 800bdf8:	08011ef0 	.word	0x08011ef0
 800bdfc:	fffffc02 	.word	0xfffffc02
 800be00:	7ff00000 	.word	0x7ff00000
 800be04:	39500000 	.word	0x39500000
 800be08:	fffffbe2 	.word	0xfffffbe2
 800be0c:	000fffff 	.word	0x000fffff
 800be10:	7fefffff 	.word	0x7fefffff
 800be14:	4333      	orrs	r3, r6
 800be16:	d100      	bne.n	800be1a <_strtod_l+0x93e>
 800be18:	e77c      	b.n	800bd14 <_strtod_l+0x838>
 800be1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01d      	beq.n	800be5c <_strtod_l+0x980>
 800be20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be24:	4213      	tst	r3, r2
 800be26:	d0e2      	beq.n	800bdee <_strtod_l+0x912>
 800be28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be2a:	0030      	movs	r0, r6
 800be2c:	0039      	movs	r1, r7
 800be2e:	9a07      	ldr	r2, [sp, #28]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d017      	beq.n	800be64 <_strtod_l+0x988>
 800be34:	f7ff fb3a 	bl	800b4ac <sulp>
 800be38:	0002      	movs	r2, r0
 800be3a:	000b      	movs	r3, r1
 800be3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be40:	f7f5 faf8 	bl	8001434 <__aeabi_dadd>
 800be44:	0006      	movs	r6, r0
 800be46:	000f      	movs	r7, r1
 800be48:	e7d1      	b.n	800bdee <_strtod_l+0x912>
 800be4a:	2601      	movs	r6, #1
 800be4c:	4013      	ands	r3, r2
 800be4e:	4a98      	ldr	r2, [pc, #608]	; (800c0b0 <_strtod_l+0xbd4>)
 800be50:	4276      	negs	r6, r6
 800be52:	189b      	adds	r3, r3, r2
 800be54:	4a97      	ldr	r2, [pc, #604]	; (800c0b4 <_strtod_l+0xbd8>)
 800be56:	431a      	orrs	r2, r3
 800be58:	0017      	movs	r7, r2
 800be5a:	e7c8      	b.n	800bdee <_strtod_l+0x912>
 800be5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be5e:	4233      	tst	r3, r6
 800be60:	d0c5      	beq.n	800bdee <_strtod_l+0x912>
 800be62:	e7e1      	b.n	800be28 <_strtod_l+0x94c>
 800be64:	f7ff fb22 	bl	800b4ac <sulp>
 800be68:	0002      	movs	r2, r0
 800be6a:	000b      	movs	r3, r1
 800be6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be70:	f7f6 fcfc 	bl	800286c <__aeabi_dsub>
 800be74:	2200      	movs	r2, #0
 800be76:	2300      	movs	r3, #0
 800be78:	0006      	movs	r6, r0
 800be7a:	000f      	movs	r7, r1
 800be7c:	f7f4 faf0 	bl	8000460 <__aeabi_dcmpeq>
 800be80:	2800      	cmp	r0, #0
 800be82:	d0b4      	beq.n	800bdee <_strtod_l+0x912>
 800be84:	e600      	b.n	800ba88 <_strtod_l+0x5ac>
 800be86:	9906      	ldr	r1, [sp, #24]
 800be88:	9805      	ldr	r0, [sp, #20]
 800be8a:	f003 fa65 	bl	800f358 <__ratio>
 800be8e:	2380      	movs	r3, #128	; 0x80
 800be90:	2200      	movs	r2, #0
 800be92:	05db      	lsls	r3, r3, #23
 800be94:	0004      	movs	r4, r0
 800be96:	000d      	movs	r5, r1
 800be98:	f7f4 faf2 	bl	8000480 <__aeabi_dcmple>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d06d      	beq.n	800bf7c <_strtod_l+0xaa0>
 800bea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d000      	beq.n	800bea8 <_strtod_l+0x9cc>
 800bea6:	e07e      	b.n	800bfa6 <_strtod_l+0xaca>
 800bea8:	2e00      	cmp	r6, #0
 800beaa:	d158      	bne.n	800bf5e <_strtod_l+0xa82>
 800beac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beae:	031b      	lsls	r3, r3, #12
 800beb0:	d000      	beq.n	800beb4 <_strtod_l+0x9d8>
 800beb2:	e07f      	b.n	800bfb4 <_strtod_l+0xad8>
 800beb4:	2200      	movs	r2, #0
 800beb6:	0020      	movs	r0, r4
 800beb8:	0029      	movs	r1, r5
 800beba:	4b7f      	ldr	r3, [pc, #508]	; (800c0b8 <_strtod_l+0xbdc>)
 800bebc:	f7f4 fad6 	bl	800046c <__aeabi_dcmplt>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d158      	bne.n	800bf76 <_strtod_l+0xa9a>
 800bec4:	0020      	movs	r0, r4
 800bec6:	0029      	movs	r1, r5
 800bec8:	2200      	movs	r2, #0
 800beca:	4b7c      	ldr	r3, [pc, #496]	; (800c0bc <_strtod_l+0xbe0>)
 800becc:	f7f6 fa0c 	bl	80022e8 <__aeabi_dmul>
 800bed0:	0004      	movs	r4, r0
 800bed2:	000d      	movs	r5, r1
 800bed4:	2380      	movs	r3, #128	; 0x80
 800bed6:	061b      	lsls	r3, r3, #24
 800bed8:	940a      	str	r4, [sp, #40]	; 0x28
 800beda:	18eb      	adds	r3, r5, r3
 800bedc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bee2:	9212      	str	r2, [sp, #72]	; 0x48
 800bee4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bee6:	4a76      	ldr	r2, [pc, #472]	; (800c0c0 <_strtod_l+0xbe4>)
 800bee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beea:	4013      	ands	r3, r2
 800beec:	9314      	str	r3, [sp, #80]	; 0x50
 800beee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bef0:	4b74      	ldr	r3, [pc, #464]	; (800c0c4 <_strtod_l+0xbe8>)
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d000      	beq.n	800bef8 <_strtod_l+0xa1c>
 800bef6:	e091      	b.n	800c01c <_strtod_l+0xb40>
 800bef8:	4a73      	ldr	r2, [pc, #460]	; (800c0c8 <_strtod_l+0xbec>)
 800befa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800befc:	4694      	mov	ip, r2
 800befe:	4463      	add	r3, ip
 800bf00:	001f      	movs	r7, r3
 800bf02:	0030      	movs	r0, r6
 800bf04:	0019      	movs	r1, r3
 800bf06:	f003 f95f 	bl	800f1c8 <__ulp>
 800bf0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf0e:	f7f6 f9eb 	bl	80022e8 <__aeabi_dmul>
 800bf12:	0032      	movs	r2, r6
 800bf14:	003b      	movs	r3, r7
 800bf16:	f7f5 fa8d 	bl	8001434 <__aeabi_dadd>
 800bf1a:	4a69      	ldr	r2, [pc, #420]	; (800c0c0 <_strtod_l+0xbe4>)
 800bf1c:	4b6b      	ldr	r3, [pc, #428]	; (800c0cc <_strtod_l+0xbf0>)
 800bf1e:	0006      	movs	r6, r0
 800bf20:	400a      	ands	r2, r1
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d949      	bls.n	800bfba <_strtod_l+0xade>
 800bf26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bf28:	4b69      	ldr	r3, [pc, #420]	; (800c0d0 <_strtod_l+0xbf4>)
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d103      	bne.n	800bf36 <_strtod_l+0xa5a>
 800bf2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf30:	3301      	adds	r3, #1
 800bf32:	d100      	bne.n	800bf36 <_strtod_l+0xa5a>
 800bf34:	e535      	b.n	800b9a2 <_strtod_l+0x4c6>
 800bf36:	2601      	movs	r6, #1
 800bf38:	4f65      	ldr	r7, [pc, #404]	; (800c0d0 <_strtod_l+0xbf4>)
 800bf3a:	4276      	negs	r6, r6
 800bf3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf3e:	9804      	ldr	r0, [sp, #16]
 800bf40:	f002 fe00 	bl	800eb44 <_Bfree>
 800bf44:	9908      	ldr	r1, [sp, #32]
 800bf46:	9804      	ldr	r0, [sp, #16]
 800bf48:	f002 fdfc 	bl	800eb44 <_Bfree>
 800bf4c:	9906      	ldr	r1, [sp, #24]
 800bf4e:	9804      	ldr	r0, [sp, #16]
 800bf50:	f002 fdf8 	bl	800eb44 <_Bfree>
 800bf54:	9905      	ldr	r1, [sp, #20]
 800bf56:	9804      	ldr	r0, [sp, #16]
 800bf58:	f002 fdf4 	bl	800eb44 <_Bfree>
 800bf5c:	e60b      	b.n	800bb76 <_strtod_l+0x69a>
 800bf5e:	2e01      	cmp	r6, #1
 800bf60:	d103      	bne.n	800bf6a <_strtod_l+0xa8e>
 800bf62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d100      	bne.n	800bf6a <_strtod_l+0xa8e>
 800bf68:	e58e      	b.n	800ba88 <_strtod_l+0x5ac>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	4c59      	ldr	r4, [pc, #356]	; (800c0d4 <_strtod_l+0xbf8>)
 800bf6e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf70:	940b      	str	r4, [sp, #44]	; 0x2c
 800bf72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bf74:	e01c      	b.n	800bfb0 <_strtod_l+0xad4>
 800bf76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bf78:	4d50      	ldr	r5, [pc, #320]	; (800c0bc <_strtod_l+0xbe0>)
 800bf7a:	e7ab      	b.n	800bed4 <_strtod_l+0x9f8>
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	0020      	movs	r0, r4
 800bf80:	0029      	movs	r1, r5
 800bf82:	4b4e      	ldr	r3, [pc, #312]	; (800c0bc <_strtod_l+0xbe0>)
 800bf84:	f7f6 f9b0 	bl	80022e8 <__aeabi_dmul>
 800bf88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf8a:	0004      	movs	r4, r0
 800bf8c:	000b      	movs	r3, r1
 800bf8e:	000d      	movs	r5, r1
 800bf90:	2a00      	cmp	r2, #0
 800bf92:	d104      	bne.n	800bf9e <_strtod_l+0xac2>
 800bf94:	2280      	movs	r2, #128	; 0x80
 800bf96:	0612      	lsls	r2, r2, #24
 800bf98:	900a      	str	r0, [sp, #40]	; 0x28
 800bf9a:	188b      	adds	r3, r1, r2
 800bf9c:	e79e      	b.n	800bedc <_strtod_l+0xa00>
 800bf9e:	0002      	movs	r2, r0
 800bfa0:	920a      	str	r2, [sp, #40]	; 0x28
 800bfa2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfa4:	e79b      	b.n	800bede <_strtod_l+0xa02>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	4c43      	ldr	r4, [pc, #268]	; (800c0b8 <_strtod_l+0xbdc>)
 800bfaa:	930a      	str	r3, [sp, #40]	; 0x28
 800bfac:	940b      	str	r4, [sp, #44]	; 0x2c
 800bfae:	2400      	movs	r4, #0
 800bfb0:	4d41      	ldr	r5, [pc, #260]	; (800c0b8 <_strtod_l+0xbdc>)
 800bfb2:	e794      	b.n	800bede <_strtod_l+0xa02>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	4c47      	ldr	r4, [pc, #284]	; (800c0d4 <_strtod_l+0xbf8>)
 800bfb8:	e7f7      	b.n	800bfaa <_strtod_l+0xace>
 800bfba:	23d4      	movs	r3, #212	; 0xd4
 800bfbc:	049b      	lsls	r3, r3, #18
 800bfbe:	18cf      	adds	r7, r1, r3
 800bfc0:	9b07      	ldr	r3, [sp, #28]
 800bfc2:	970e      	str	r7, [sp, #56]	; 0x38
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1b9      	bne.n	800bf3c <_strtod_l+0xa60>
 800bfc8:	4b3d      	ldr	r3, [pc, #244]	; (800c0c0 <_strtod_l+0xbe4>)
 800bfca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfcc:	403b      	ands	r3, r7
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d1b4      	bne.n	800bf3c <_strtod_l+0xa60>
 800bfd2:	0020      	movs	r0, r4
 800bfd4:	0029      	movs	r1, r5
 800bfd6:	f7f4 fac9 	bl	800056c <__aeabi_d2lz>
 800bfda:	f7f4 fb03 	bl	80005e4 <__aeabi_l2d>
 800bfde:	0002      	movs	r2, r0
 800bfe0:	000b      	movs	r3, r1
 800bfe2:	0020      	movs	r0, r4
 800bfe4:	0029      	movs	r1, r5
 800bfe6:	f7f6 fc41 	bl	800286c <__aeabi_dsub>
 800bfea:	033b      	lsls	r3, r7, #12
 800bfec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfee:	0b1b      	lsrs	r3, r3, #12
 800bff0:	4333      	orrs	r3, r6
 800bff2:	4313      	orrs	r3, r2
 800bff4:	0004      	movs	r4, r0
 800bff6:	000d      	movs	r5, r1
 800bff8:	4a37      	ldr	r2, [pc, #220]	; (800c0d8 <_strtod_l+0xbfc>)
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d054      	beq.n	800c0a8 <_strtod_l+0xbcc>
 800bffe:	4b37      	ldr	r3, [pc, #220]	; (800c0dc <_strtod_l+0xc00>)
 800c000:	f7f4 fa34 	bl	800046c <__aeabi_dcmplt>
 800c004:	2800      	cmp	r0, #0
 800c006:	d000      	beq.n	800c00a <_strtod_l+0xb2e>
 800c008:	e4d4      	b.n	800b9b4 <_strtod_l+0x4d8>
 800c00a:	0020      	movs	r0, r4
 800c00c:	0029      	movs	r1, r5
 800c00e:	4a34      	ldr	r2, [pc, #208]	; (800c0e0 <_strtod_l+0xc04>)
 800c010:	4b2a      	ldr	r3, [pc, #168]	; (800c0bc <_strtod_l+0xbe0>)
 800c012:	f7f4 fa3f 	bl	8000494 <__aeabi_dcmpgt>
 800c016:	2800      	cmp	r0, #0
 800c018:	d090      	beq.n	800bf3c <_strtod_l+0xa60>
 800c01a:	e4cb      	b.n	800b9b4 <_strtod_l+0x4d8>
 800c01c:	9b07      	ldr	r3, [sp, #28]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d02b      	beq.n	800c07a <_strtod_l+0xb9e>
 800c022:	23d4      	movs	r3, #212	; 0xd4
 800c024:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c026:	04db      	lsls	r3, r3, #19
 800c028:	429a      	cmp	r2, r3
 800c02a:	d826      	bhi.n	800c07a <_strtod_l+0xb9e>
 800c02c:	0020      	movs	r0, r4
 800c02e:	0029      	movs	r1, r5
 800c030:	4a2c      	ldr	r2, [pc, #176]	; (800c0e4 <_strtod_l+0xc08>)
 800c032:	4b2d      	ldr	r3, [pc, #180]	; (800c0e8 <_strtod_l+0xc0c>)
 800c034:	f7f4 fa24 	bl	8000480 <__aeabi_dcmple>
 800c038:	2800      	cmp	r0, #0
 800c03a:	d017      	beq.n	800c06c <_strtod_l+0xb90>
 800c03c:	0020      	movs	r0, r4
 800c03e:	0029      	movs	r1, r5
 800c040:	f7f4 fa76 	bl	8000530 <__aeabi_d2uiz>
 800c044:	2800      	cmp	r0, #0
 800c046:	d100      	bne.n	800c04a <_strtod_l+0xb6e>
 800c048:	3001      	adds	r0, #1
 800c04a:	f7f7 f815 	bl	8003078 <__aeabi_ui2d>
 800c04e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c050:	0004      	movs	r4, r0
 800c052:	000b      	movs	r3, r1
 800c054:	000d      	movs	r5, r1
 800c056:	2a00      	cmp	r2, #0
 800c058:	d122      	bne.n	800c0a0 <_strtod_l+0xbc4>
 800c05a:	2280      	movs	r2, #128	; 0x80
 800c05c:	0612      	lsls	r2, r2, #24
 800c05e:	188b      	adds	r3, r1, r2
 800c060:	9016      	str	r0, [sp, #88]	; 0x58
 800c062:	9317      	str	r3, [sp, #92]	; 0x5c
 800c064:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c068:	9212      	str	r2, [sp, #72]	; 0x48
 800c06a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c06c:	22d6      	movs	r2, #214	; 0xd6
 800c06e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c070:	04d2      	lsls	r2, r2, #19
 800c072:	189b      	adds	r3, r3, r2
 800c074:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c076:	1a9b      	subs	r3, r3, r2
 800c078:	9313      	str	r3, [sp, #76]	; 0x4c
 800c07a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c07c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c07e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c080:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c082:	f003 f8a1 	bl	800f1c8 <__ulp>
 800c086:	0002      	movs	r2, r0
 800c088:	000b      	movs	r3, r1
 800c08a:	0030      	movs	r0, r6
 800c08c:	0039      	movs	r1, r7
 800c08e:	f7f6 f92b 	bl	80022e8 <__aeabi_dmul>
 800c092:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c094:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c096:	f7f5 f9cd 	bl	8001434 <__aeabi_dadd>
 800c09a:	0006      	movs	r6, r0
 800c09c:	000f      	movs	r7, r1
 800c09e:	e78f      	b.n	800bfc0 <_strtod_l+0xae4>
 800c0a0:	0002      	movs	r2, r0
 800c0a2:	9216      	str	r2, [sp, #88]	; 0x58
 800c0a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c0a6:	e7dd      	b.n	800c064 <_strtod_l+0xb88>
 800c0a8:	4b10      	ldr	r3, [pc, #64]	; (800c0ec <_strtod_l+0xc10>)
 800c0aa:	f7f4 f9df 	bl	800046c <__aeabi_dcmplt>
 800c0ae:	e7b2      	b.n	800c016 <_strtod_l+0xb3a>
 800c0b0:	fff00000 	.word	0xfff00000
 800c0b4:	000fffff 	.word	0x000fffff
 800c0b8:	3ff00000 	.word	0x3ff00000
 800c0bc:	3fe00000 	.word	0x3fe00000
 800c0c0:	7ff00000 	.word	0x7ff00000
 800c0c4:	7fe00000 	.word	0x7fe00000
 800c0c8:	fcb00000 	.word	0xfcb00000
 800c0cc:	7c9fffff 	.word	0x7c9fffff
 800c0d0:	7fefffff 	.word	0x7fefffff
 800c0d4:	bff00000 	.word	0xbff00000
 800c0d8:	94a03595 	.word	0x94a03595
 800c0dc:	3fdfffff 	.word	0x3fdfffff
 800c0e0:	35afe535 	.word	0x35afe535
 800c0e4:	ffc00000 	.word	0xffc00000
 800c0e8:	41dfffff 	.word	0x41dfffff
 800c0ec:	3fcfffff 	.word	0x3fcfffff

0800c0f0 <_strtod_r>:
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	4b02      	ldr	r3, [pc, #8]	; (800c0fc <_strtod_r+0xc>)
 800c0f4:	f7ff f9f2 	bl	800b4dc <_strtod_l>
 800c0f8:	bd10      	pop	{r4, pc}
 800c0fa:	46c0      	nop			; (mov r8, r8)
 800c0fc:	20000100 	.word	0x20000100

0800c100 <strtod>:
 800c100:	b510      	push	{r4, lr}
 800c102:	4c04      	ldr	r4, [pc, #16]	; (800c114 <strtod+0x14>)
 800c104:	000a      	movs	r2, r1
 800c106:	0001      	movs	r1, r0
 800c108:	4b03      	ldr	r3, [pc, #12]	; (800c118 <strtod+0x18>)
 800c10a:	6820      	ldr	r0, [r4, #0]
 800c10c:	f7ff f9e6 	bl	800b4dc <_strtod_l>
 800c110:	bd10      	pop	{r4, pc}
 800c112:	46c0      	nop			; (mov r8, r8)
 800c114:	200002b8 	.word	0x200002b8
 800c118:	20000100 	.word	0x20000100

0800c11c <_strtol_l.constprop.0>:
 800c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c11e:	b087      	sub	sp, #28
 800c120:	001e      	movs	r6, r3
 800c122:	9005      	str	r0, [sp, #20]
 800c124:	9101      	str	r1, [sp, #4]
 800c126:	9202      	str	r2, [sp, #8]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d048      	beq.n	800c1be <_strtol_l.constprop.0+0xa2>
 800c12c:	000b      	movs	r3, r1
 800c12e:	2e24      	cmp	r6, #36	; 0x24
 800c130:	d845      	bhi.n	800c1be <_strtol_l.constprop.0+0xa2>
 800c132:	4a3b      	ldr	r2, [pc, #236]	; (800c220 <_strtol_l.constprop.0+0x104>)
 800c134:	2108      	movs	r1, #8
 800c136:	4694      	mov	ip, r2
 800c138:	001a      	movs	r2, r3
 800c13a:	4660      	mov	r0, ip
 800c13c:	7814      	ldrb	r4, [r2, #0]
 800c13e:	3301      	adds	r3, #1
 800c140:	5d00      	ldrb	r0, [r0, r4]
 800c142:	001d      	movs	r5, r3
 800c144:	0007      	movs	r7, r0
 800c146:	400f      	ands	r7, r1
 800c148:	4208      	tst	r0, r1
 800c14a:	d1f5      	bne.n	800c138 <_strtol_l.constprop.0+0x1c>
 800c14c:	2c2d      	cmp	r4, #45	; 0x2d
 800c14e:	d13d      	bne.n	800c1cc <_strtol_l.constprop.0+0xb0>
 800c150:	2701      	movs	r7, #1
 800c152:	781c      	ldrb	r4, [r3, #0]
 800c154:	1c95      	adds	r5, r2, #2
 800c156:	2e00      	cmp	r6, #0
 800c158:	d05e      	beq.n	800c218 <_strtol_l.constprop.0+0xfc>
 800c15a:	2e10      	cmp	r6, #16
 800c15c:	d109      	bne.n	800c172 <_strtol_l.constprop.0+0x56>
 800c15e:	2c30      	cmp	r4, #48	; 0x30
 800c160:	d107      	bne.n	800c172 <_strtol_l.constprop.0+0x56>
 800c162:	2220      	movs	r2, #32
 800c164:	782b      	ldrb	r3, [r5, #0]
 800c166:	4393      	bics	r3, r2
 800c168:	2b58      	cmp	r3, #88	; 0x58
 800c16a:	d150      	bne.n	800c20e <_strtol_l.constprop.0+0xf2>
 800c16c:	2610      	movs	r6, #16
 800c16e:	786c      	ldrb	r4, [r5, #1]
 800c170:	3502      	adds	r5, #2
 800c172:	4b2c      	ldr	r3, [pc, #176]	; (800c224 <_strtol_l.constprop.0+0x108>)
 800c174:	0031      	movs	r1, r6
 800c176:	18fb      	adds	r3, r7, r3
 800c178:	0018      	movs	r0, r3
 800c17a:	9303      	str	r3, [sp, #12]
 800c17c:	f7f4 f870 	bl	8000260 <__aeabi_uidivmod>
 800c180:	2200      	movs	r2, #0
 800c182:	9104      	str	r1, [sp, #16]
 800c184:	2101      	movs	r1, #1
 800c186:	4684      	mov	ip, r0
 800c188:	0010      	movs	r0, r2
 800c18a:	4249      	negs	r1, r1
 800c18c:	0023      	movs	r3, r4
 800c18e:	3b30      	subs	r3, #48	; 0x30
 800c190:	2b09      	cmp	r3, #9
 800c192:	d903      	bls.n	800c19c <_strtol_l.constprop.0+0x80>
 800c194:	3b11      	subs	r3, #17
 800c196:	2b19      	cmp	r3, #25
 800c198:	d81d      	bhi.n	800c1d6 <_strtol_l.constprop.0+0xba>
 800c19a:	330a      	adds	r3, #10
 800c19c:	429e      	cmp	r6, r3
 800c19e:	dd1e      	ble.n	800c1de <_strtol_l.constprop.0+0xc2>
 800c1a0:	1c54      	adds	r4, r2, #1
 800c1a2:	d009      	beq.n	800c1b8 <_strtol_l.constprop.0+0x9c>
 800c1a4:	000a      	movs	r2, r1
 800c1a6:	4584      	cmp	ip, r0
 800c1a8:	d306      	bcc.n	800c1b8 <_strtol_l.constprop.0+0x9c>
 800c1aa:	d102      	bne.n	800c1b2 <_strtol_l.constprop.0+0x96>
 800c1ac:	9c04      	ldr	r4, [sp, #16]
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	db02      	blt.n	800c1b8 <_strtol_l.constprop.0+0x9c>
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4370      	muls	r0, r6
 800c1b6:	1818      	adds	r0, r3, r0
 800c1b8:	782c      	ldrb	r4, [r5, #0]
 800c1ba:	3501      	adds	r5, #1
 800c1bc:	e7e6      	b.n	800c18c <_strtol_l.constprop.0+0x70>
 800c1be:	f001 f9b5 	bl	800d52c <__errno>
 800c1c2:	2316      	movs	r3, #22
 800c1c4:	6003      	str	r3, [r0, #0]
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	b007      	add	sp, #28
 800c1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1cc:	2c2b      	cmp	r4, #43	; 0x2b
 800c1ce:	d1c2      	bne.n	800c156 <_strtol_l.constprop.0+0x3a>
 800c1d0:	781c      	ldrb	r4, [r3, #0]
 800c1d2:	1c95      	adds	r5, r2, #2
 800c1d4:	e7bf      	b.n	800c156 <_strtol_l.constprop.0+0x3a>
 800c1d6:	0023      	movs	r3, r4
 800c1d8:	3b61      	subs	r3, #97	; 0x61
 800c1da:	2b19      	cmp	r3, #25
 800c1dc:	d9dd      	bls.n	800c19a <_strtol_l.constprop.0+0x7e>
 800c1de:	1c53      	adds	r3, r2, #1
 800c1e0:	d109      	bne.n	800c1f6 <_strtol_l.constprop.0+0xda>
 800c1e2:	2322      	movs	r3, #34	; 0x22
 800c1e4:	9a05      	ldr	r2, [sp, #20]
 800c1e6:	9803      	ldr	r0, [sp, #12]
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	9b02      	ldr	r3, [sp, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d0eb      	beq.n	800c1c8 <_strtol_l.constprop.0+0xac>
 800c1f0:	1e6b      	subs	r3, r5, #1
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	e007      	b.n	800c206 <_strtol_l.constprop.0+0xea>
 800c1f6:	2f00      	cmp	r7, #0
 800c1f8:	d000      	beq.n	800c1fc <_strtol_l.constprop.0+0xe0>
 800c1fa:	4240      	negs	r0, r0
 800c1fc:	9b02      	ldr	r3, [sp, #8]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d0e2      	beq.n	800c1c8 <_strtol_l.constprop.0+0xac>
 800c202:	2a00      	cmp	r2, #0
 800c204:	d1f4      	bne.n	800c1f0 <_strtol_l.constprop.0+0xd4>
 800c206:	9b02      	ldr	r3, [sp, #8]
 800c208:	9a01      	ldr	r2, [sp, #4]
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	e7dc      	b.n	800c1c8 <_strtol_l.constprop.0+0xac>
 800c20e:	2430      	movs	r4, #48	; 0x30
 800c210:	2e00      	cmp	r6, #0
 800c212:	d1ae      	bne.n	800c172 <_strtol_l.constprop.0+0x56>
 800c214:	3608      	adds	r6, #8
 800c216:	e7ac      	b.n	800c172 <_strtol_l.constprop.0+0x56>
 800c218:	2c30      	cmp	r4, #48	; 0x30
 800c21a:	d0a2      	beq.n	800c162 <_strtol_l.constprop.0+0x46>
 800c21c:	260a      	movs	r6, #10
 800c21e:	e7a8      	b.n	800c172 <_strtol_l.constprop.0+0x56>
 800c220:	08011f19 	.word	0x08011f19
 800c224:	7fffffff 	.word	0x7fffffff

0800c228 <_strtol_r>:
 800c228:	b510      	push	{r4, lr}
 800c22a:	f7ff ff77 	bl	800c11c <_strtol_l.constprop.0>
 800c22e:	bd10      	pop	{r4, pc}

0800c230 <strtol>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4c04      	ldr	r4, [pc, #16]	; (800c244 <strtol+0x14>)
 800c234:	0013      	movs	r3, r2
 800c236:	000a      	movs	r2, r1
 800c238:	0001      	movs	r1, r0
 800c23a:	6820      	ldr	r0, [r4, #0]
 800c23c:	f7ff ff6e 	bl	800c11c <_strtol_l.constprop.0>
 800c240:	bd10      	pop	{r4, pc}
 800c242:	46c0      	nop			; (mov r8, r8)
 800c244:	200002b8 	.word	0x200002b8

0800c248 <__cvt>:
 800c248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24a:	001e      	movs	r6, r3
 800c24c:	2300      	movs	r3, #0
 800c24e:	0014      	movs	r4, r2
 800c250:	b08b      	sub	sp, #44	; 0x2c
 800c252:	429e      	cmp	r6, r3
 800c254:	da04      	bge.n	800c260 <__cvt+0x18>
 800c256:	2180      	movs	r1, #128	; 0x80
 800c258:	0609      	lsls	r1, r1, #24
 800c25a:	1873      	adds	r3, r6, r1
 800c25c:	001e      	movs	r6, r3
 800c25e:	232d      	movs	r3, #45	; 0x2d
 800c260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c262:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c264:	7013      	strb	r3, [r2, #0]
 800c266:	2320      	movs	r3, #32
 800c268:	2203      	movs	r2, #3
 800c26a:	439f      	bics	r7, r3
 800c26c:	2f46      	cmp	r7, #70	; 0x46
 800c26e:	d007      	beq.n	800c280 <__cvt+0x38>
 800c270:	003b      	movs	r3, r7
 800c272:	3b45      	subs	r3, #69	; 0x45
 800c274:	4259      	negs	r1, r3
 800c276:	414b      	adcs	r3, r1
 800c278:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c27a:	3a01      	subs	r2, #1
 800c27c:	18cb      	adds	r3, r1, r3
 800c27e:	9310      	str	r3, [sp, #64]	; 0x40
 800c280:	ab09      	add	r3, sp, #36	; 0x24
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	ab08      	add	r3, sp, #32
 800c286:	9303      	str	r3, [sp, #12]
 800c288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c28a:	9200      	str	r2, [sp, #0]
 800c28c:	9302      	str	r3, [sp, #8]
 800c28e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c290:	0022      	movs	r2, r4
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	0033      	movs	r3, r6
 800c296:	f001 fa4b 	bl	800d730 <_dtoa_r>
 800c29a:	0005      	movs	r5, r0
 800c29c:	2f47      	cmp	r7, #71	; 0x47
 800c29e:	d102      	bne.n	800c2a6 <__cvt+0x5e>
 800c2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2a2:	07db      	lsls	r3, r3, #31
 800c2a4:	d528      	bpl.n	800c2f8 <__cvt+0xb0>
 800c2a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2a8:	18eb      	adds	r3, r5, r3
 800c2aa:	9307      	str	r3, [sp, #28]
 800c2ac:	2f46      	cmp	r7, #70	; 0x46
 800c2ae:	d114      	bne.n	800c2da <__cvt+0x92>
 800c2b0:	782b      	ldrb	r3, [r5, #0]
 800c2b2:	2b30      	cmp	r3, #48	; 0x30
 800c2b4:	d10c      	bne.n	800c2d0 <__cvt+0x88>
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	0020      	movs	r0, r4
 800c2bc:	0031      	movs	r1, r6
 800c2be:	f7f4 f8cf 	bl	8000460 <__aeabi_dcmpeq>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d104      	bne.n	800c2d0 <__cvt+0x88>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2ca:	1a9b      	subs	r3, r3, r2
 800c2cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2d2:	9a07      	ldr	r2, [sp, #28]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	18d3      	adds	r3, r2, r3
 800c2d8:	9307      	str	r3, [sp, #28]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2300      	movs	r3, #0
 800c2de:	0020      	movs	r0, r4
 800c2e0:	0031      	movs	r1, r6
 800c2e2:	f7f4 f8bd 	bl	8000460 <__aeabi_dcmpeq>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d001      	beq.n	800c2ee <__cvt+0xa6>
 800c2ea:	9b07      	ldr	r3, [sp, #28]
 800c2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ee:	2230      	movs	r2, #48	; 0x30
 800c2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f2:	9907      	ldr	r1, [sp, #28]
 800c2f4:	428b      	cmp	r3, r1
 800c2f6:	d306      	bcc.n	800c306 <__cvt+0xbe>
 800c2f8:	0028      	movs	r0, r5
 800c2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c2fe:	1b5b      	subs	r3, r3, r5
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	b00b      	add	sp, #44	; 0x2c
 800c304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c306:	1c59      	adds	r1, r3, #1
 800c308:	9109      	str	r1, [sp, #36]	; 0x24
 800c30a:	701a      	strb	r2, [r3, #0]
 800c30c:	e7f0      	b.n	800c2f0 <__cvt+0xa8>

0800c30e <__exponent>:
 800c30e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c310:	1c83      	adds	r3, r0, #2
 800c312:	b087      	sub	sp, #28
 800c314:	9303      	str	r3, [sp, #12]
 800c316:	0005      	movs	r5, r0
 800c318:	000c      	movs	r4, r1
 800c31a:	232b      	movs	r3, #43	; 0x2b
 800c31c:	7002      	strb	r2, [r0, #0]
 800c31e:	2900      	cmp	r1, #0
 800c320:	da01      	bge.n	800c326 <__exponent+0x18>
 800c322:	424c      	negs	r4, r1
 800c324:	3302      	adds	r3, #2
 800c326:	706b      	strb	r3, [r5, #1]
 800c328:	2c09      	cmp	r4, #9
 800c32a:	dd2f      	ble.n	800c38c <__exponent+0x7e>
 800c32c:	270a      	movs	r7, #10
 800c32e:	ab04      	add	r3, sp, #16
 800c330:	1dde      	adds	r6, r3, #7
 800c332:	0020      	movs	r0, r4
 800c334:	0039      	movs	r1, r7
 800c336:	9601      	str	r6, [sp, #4]
 800c338:	f7f4 f87c 	bl	8000434 <__aeabi_idivmod>
 800c33c:	3e01      	subs	r6, #1
 800c33e:	3130      	adds	r1, #48	; 0x30
 800c340:	0020      	movs	r0, r4
 800c342:	7031      	strb	r1, [r6, #0]
 800c344:	0039      	movs	r1, r7
 800c346:	9402      	str	r4, [sp, #8]
 800c348:	f7f3 ff8e 	bl	8000268 <__divsi3>
 800c34c:	9b02      	ldr	r3, [sp, #8]
 800c34e:	0004      	movs	r4, r0
 800c350:	2b63      	cmp	r3, #99	; 0x63
 800c352:	dcee      	bgt.n	800c332 <__exponent+0x24>
 800c354:	9b01      	ldr	r3, [sp, #4]
 800c356:	3430      	adds	r4, #48	; 0x30
 800c358:	1e9a      	subs	r2, r3, #2
 800c35a:	0013      	movs	r3, r2
 800c35c:	9903      	ldr	r1, [sp, #12]
 800c35e:	7014      	strb	r4, [r2, #0]
 800c360:	a804      	add	r0, sp, #16
 800c362:	3007      	adds	r0, #7
 800c364:	4298      	cmp	r0, r3
 800c366:	d80c      	bhi.n	800c382 <__exponent+0x74>
 800c368:	2300      	movs	r3, #0
 800c36a:	4282      	cmp	r2, r0
 800c36c:	d804      	bhi.n	800c378 <__exponent+0x6a>
 800c36e:	aa04      	add	r2, sp, #16
 800c370:	3309      	adds	r3, #9
 800c372:	189b      	adds	r3, r3, r2
 800c374:	9a01      	ldr	r2, [sp, #4]
 800c376:	1a9b      	subs	r3, r3, r2
 800c378:	9a03      	ldr	r2, [sp, #12]
 800c37a:	18d3      	adds	r3, r2, r3
 800c37c:	1b58      	subs	r0, r3, r5
 800c37e:	b007      	add	sp, #28
 800c380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c382:	7818      	ldrb	r0, [r3, #0]
 800c384:	3301      	adds	r3, #1
 800c386:	7008      	strb	r0, [r1, #0]
 800c388:	3101      	adds	r1, #1
 800c38a:	e7e9      	b.n	800c360 <__exponent+0x52>
 800c38c:	2330      	movs	r3, #48	; 0x30
 800c38e:	3430      	adds	r4, #48	; 0x30
 800c390:	70ab      	strb	r3, [r5, #2]
 800c392:	70ec      	strb	r4, [r5, #3]
 800c394:	1d2b      	adds	r3, r5, #4
 800c396:	e7f1      	b.n	800c37c <__exponent+0x6e>

0800c398 <_printf_float>:
 800c398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c39a:	b095      	sub	sp, #84	; 0x54
 800c39c:	000c      	movs	r4, r1
 800c39e:	9208      	str	r2, [sp, #32]
 800c3a0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a4:	0007      	movs	r7, r0
 800c3a6:	f000 ffff 	bl	800d3a8 <_localeconv_r>
 800c3aa:	6803      	ldr	r3, [r0, #0]
 800c3ac:	0018      	movs	r0, r3
 800c3ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c3b0:	f7f3 feaa 	bl	8000108 <strlen>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9312      	str	r3, [sp, #72]	; 0x48
 800c3b8:	7e23      	ldrb	r3, [r4, #24]
 800c3ba:	2207      	movs	r2, #7
 800c3bc:	930a      	str	r3, [sp, #40]	; 0x28
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	900d      	str	r0, [sp, #52]	; 0x34
 800c3c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	05c9      	lsls	r1, r1, #23
 800c3ca:	d547      	bpl.n	800c45c <_printf_float+0xc4>
 800c3cc:	189b      	adds	r3, r3, r2
 800c3ce:	4393      	bics	r3, r2
 800c3d0:	001a      	movs	r2, r3
 800c3d2:	3208      	adds	r2, #8
 800c3d4:	602a      	str	r2, [r5, #0]
 800c3d6:	681e      	ldr	r6, [r3, #0]
 800c3d8:	685d      	ldr	r5, [r3, #4]
 800c3da:	0032      	movs	r2, r6
 800c3dc:	002b      	movs	r3, r5
 800c3de:	64a2      	str	r2, [r4, #72]	; 0x48
 800c3e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	006b      	lsls	r3, r5, #1
 800c3e6:	085b      	lsrs	r3, r3, #1
 800c3e8:	930e      	str	r3, [sp, #56]	; 0x38
 800c3ea:	0030      	movs	r0, r6
 800c3ec:	4bab      	ldr	r3, [pc, #684]	; (800c69c <_printf_float+0x304>)
 800c3ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c3f0:	4252      	negs	r2, r2
 800c3f2:	f7f6 fdbd 	bl	8002f70 <__aeabi_dcmpun>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d132      	bne.n	800c460 <_printf_float+0xc8>
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	0030      	movs	r0, r6
 800c3fe:	4ba7      	ldr	r3, [pc, #668]	; (800c69c <_printf_float+0x304>)
 800c400:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c402:	4252      	negs	r2, r2
 800c404:	f7f4 f83c 	bl	8000480 <__aeabi_dcmple>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d129      	bne.n	800c460 <_printf_float+0xc8>
 800c40c:	2200      	movs	r2, #0
 800c40e:	2300      	movs	r3, #0
 800c410:	0030      	movs	r0, r6
 800c412:	0029      	movs	r1, r5
 800c414:	f7f4 f82a 	bl	800046c <__aeabi_dcmplt>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d003      	beq.n	800c424 <_printf_float+0x8c>
 800c41c:	0023      	movs	r3, r4
 800c41e:	222d      	movs	r2, #45	; 0x2d
 800c420:	3343      	adds	r3, #67	; 0x43
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c426:	4d9e      	ldr	r5, [pc, #632]	; (800c6a0 <_printf_float+0x308>)
 800c428:	2b47      	cmp	r3, #71	; 0x47
 800c42a:	d900      	bls.n	800c42e <_printf_float+0x96>
 800c42c:	4d9d      	ldr	r5, [pc, #628]	; (800c6a4 <_printf_float+0x30c>)
 800c42e:	2303      	movs	r3, #3
 800c430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	3301      	adds	r3, #1
 800c436:	439a      	bics	r2, r3
 800c438:	2300      	movs	r3, #0
 800c43a:	6022      	str	r2, [r4, #0]
 800c43c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c440:	0021      	movs	r1, r4
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	0038      	movs	r0, r7
 800c446:	9b08      	ldr	r3, [sp, #32]
 800c448:	aa13      	add	r2, sp, #76	; 0x4c
 800c44a:	f000 f9fb 	bl	800c844 <_printf_common>
 800c44e:	3001      	adds	r0, #1
 800c450:	d000      	beq.n	800c454 <_printf_float+0xbc>
 800c452:	e0a3      	b.n	800c59c <_printf_float+0x204>
 800c454:	2001      	movs	r0, #1
 800c456:	4240      	negs	r0, r0
 800c458:	b015      	add	sp, #84	; 0x54
 800c45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c45c:	3307      	adds	r3, #7
 800c45e:	e7b6      	b.n	800c3ce <_printf_float+0x36>
 800c460:	0032      	movs	r2, r6
 800c462:	002b      	movs	r3, r5
 800c464:	0030      	movs	r0, r6
 800c466:	0029      	movs	r1, r5
 800c468:	f7f6 fd82 	bl	8002f70 <__aeabi_dcmpun>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d00b      	beq.n	800c488 <_printf_float+0xf0>
 800c470:	2d00      	cmp	r5, #0
 800c472:	da03      	bge.n	800c47c <_printf_float+0xe4>
 800c474:	0023      	movs	r3, r4
 800c476:	222d      	movs	r2, #45	; 0x2d
 800c478:	3343      	adds	r3, #67	; 0x43
 800c47a:	701a      	strb	r2, [r3, #0]
 800c47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c47e:	4d8a      	ldr	r5, [pc, #552]	; (800c6a8 <_printf_float+0x310>)
 800c480:	2b47      	cmp	r3, #71	; 0x47
 800c482:	d9d4      	bls.n	800c42e <_printf_float+0x96>
 800c484:	4d89      	ldr	r5, [pc, #548]	; (800c6ac <_printf_float+0x314>)
 800c486:	e7d2      	b.n	800c42e <_printf_float+0x96>
 800c488:	2220      	movs	r2, #32
 800c48a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c48c:	6863      	ldr	r3, [r4, #4]
 800c48e:	4391      	bics	r1, r2
 800c490:	910e      	str	r1, [sp, #56]	; 0x38
 800c492:	1c5a      	adds	r2, r3, #1
 800c494:	d14a      	bne.n	800c52c <_printf_float+0x194>
 800c496:	3307      	adds	r3, #7
 800c498:	6063      	str	r3, [r4, #4]
 800c49a:	2380      	movs	r3, #128	; 0x80
 800c49c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	9206      	str	r2, [sp, #24]
 800c4a6:	aa12      	add	r2, sp, #72	; 0x48
 800c4a8:	9205      	str	r2, [sp, #20]
 800c4aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	9204      	str	r2, [sp, #16]
 800c4b0:	aa11      	add	r2, sp, #68	; 0x44
 800c4b2:	9203      	str	r2, [sp, #12]
 800c4b4:	2223      	movs	r2, #35	; 0x23
 800c4b6:	a908      	add	r1, sp, #32
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	6863      	ldr	r3, [r4, #4]
 800c4bc:	1852      	adds	r2, r2, r1
 800c4be:	9202      	str	r2, [sp, #8]
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	0032      	movs	r2, r6
 800c4c4:	002b      	movs	r3, r5
 800c4c6:	0038      	movs	r0, r7
 800c4c8:	f7ff febe 	bl	800c248 <__cvt>
 800c4cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4ce:	0005      	movs	r5, r0
 800c4d0:	2b47      	cmp	r3, #71	; 0x47
 800c4d2:	d109      	bne.n	800c4e8 <_printf_float+0x150>
 800c4d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4d6:	1cda      	adds	r2, r3, #3
 800c4d8:	db02      	blt.n	800c4e0 <_printf_float+0x148>
 800c4da:	6862      	ldr	r2, [r4, #4]
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	dd49      	ble.n	800c574 <_printf_float+0x1dc>
 800c4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4e2:	3b02      	subs	r3, #2
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c4ec:	2b65      	cmp	r3, #101	; 0x65
 800c4ee:	d824      	bhi.n	800c53a <_printf_float+0x1a2>
 800c4f0:	0020      	movs	r0, r4
 800c4f2:	001a      	movs	r2, r3
 800c4f4:	3901      	subs	r1, #1
 800c4f6:	3050      	adds	r0, #80	; 0x50
 800c4f8:	9111      	str	r1, [sp, #68]	; 0x44
 800c4fa:	f7ff ff08 	bl	800c30e <__exponent>
 800c4fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c500:	900b      	str	r0, [sp, #44]	; 0x2c
 800c502:	1813      	adds	r3, r2, r0
 800c504:	6123      	str	r3, [r4, #16]
 800c506:	2a01      	cmp	r2, #1
 800c508:	dc02      	bgt.n	800c510 <_printf_float+0x178>
 800c50a:	6822      	ldr	r2, [r4, #0]
 800c50c:	07d2      	lsls	r2, r2, #31
 800c50e:	d501      	bpl.n	800c514 <_printf_float+0x17c>
 800c510:	3301      	adds	r3, #1
 800c512:	6123      	str	r3, [r4, #16]
 800c514:	2323      	movs	r3, #35	; 0x23
 800c516:	aa08      	add	r2, sp, #32
 800c518:	189b      	adds	r3, r3, r2
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d100      	bne.n	800c522 <_printf_float+0x18a>
 800c520:	e78d      	b.n	800c43e <_printf_float+0xa6>
 800c522:	0023      	movs	r3, r4
 800c524:	222d      	movs	r2, #45	; 0x2d
 800c526:	3343      	adds	r3, #67	; 0x43
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	e788      	b.n	800c43e <_printf_float+0xa6>
 800c52c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c52e:	2a47      	cmp	r2, #71	; 0x47
 800c530:	d1b3      	bne.n	800c49a <_printf_float+0x102>
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1b1      	bne.n	800c49a <_printf_float+0x102>
 800c536:	3301      	adds	r3, #1
 800c538:	e7ae      	b.n	800c498 <_printf_float+0x100>
 800c53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c53c:	2b66      	cmp	r3, #102	; 0x66
 800c53e:	d11b      	bne.n	800c578 <_printf_float+0x1e0>
 800c540:	6863      	ldr	r3, [r4, #4]
 800c542:	2900      	cmp	r1, #0
 800c544:	dd09      	ble.n	800c55a <_printf_float+0x1c2>
 800c546:	6121      	str	r1, [r4, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d102      	bne.n	800c552 <_printf_float+0x1ba>
 800c54c:	6822      	ldr	r2, [r4, #0]
 800c54e:	07d2      	lsls	r2, r2, #31
 800c550:	d50b      	bpl.n	800c56a <_printf_float+0x1d2>
 800c552:	3301      	adds	r3, #1
 800c554:	185b      	adds	r3, r3, r1
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	e007      	b.n	800c56a <_printf_float+0x1d2>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d103      	bne.n	800c566 <_printf_float+0x1ce>
 800c55e:	2201      	movs	r2, #1
 800c560:	6821      	ldr	r1, [r4, #0]
 800c562:	4211      	tst	r1, r2
 800c564:	d000      	beq.n	800c568 <_printf_float+0x1d0>
 800c566:	1c9a      	adds	r2, r3, #2
 800c568:	6122      	str	r2, [r4, #16]
 800c56a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c56c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c56e:	2300      	movs	r3, #0
 800c570:	930b      	str	r3, [sp, #44]	; 0x2c
 800c572:	e7cf      	b.n	800c514 <_printf_float+0x17c>
 800c574:	2367      	movs	r3, #103	; 0x67
 800c576:	930a      	str	r3, [sp, #40]	; 0x28
 800c578:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c57a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c57c:	4299      	cmp	r1, r3
 800c57e:	db06      	blt.n	800c58e <_printf_float+0x1f6>
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	6121      	str	r1, [r4, #16]
 800c584:	07db      	lsls	r3, r3, #31
 800c586:	d5f0      	bpl.n	800c56a <_printf_float+0x1d2>
 800c588:	3101      	adds	r1, #1
 800c58a:	6121      	str	r1, [r4, #16]
 800c58c:	e7ed      	b.n	800c56a <_printf_float+0x1d2>
 800c58e:	2201      	movs	r2, #1
 800c590:	2900      	cmp	r1, #0
 800c592:	dc01      	bgt.n	800c598 <_printf_float+0x200>
 800c594:	1892      	adds	r2, r2, r2
 800c596:	1a52      	subs	r2, r2, r1
 800c598:	189b      	adds	r3, r3, r2
 800c59a:	e7dc      	b.n	800c556 <_printf_float+0x1be>
 800c59c:	6822      	ldr	r2, [r4, #0]
 800c59e:	0553      	lsls	r3, r2, #21
 800c5a0:	d408      	bmi.n	800c5b4 <_printf_float+0x21c>
 800c5a2:	6923      	ldr	r3, [r4, #16]
 800c5a4:	002a      	movs	r2, r5
 800c5a6:	0038      	movs	r0, r7
 800c5a8:	9908      	ldr	r1, [sp, #32]
 800c5aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c5ac:	47a8      	blx	r5
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	d12a      	bne.n	800c608 <_printf_float+0x270>
 800c5b2:	e74f      	b.n	800c454 <_printf_float+0xbc>
 800c5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5b6:	2b65      	cmp	r3, #101	; 0x65
 800c5b8:	d800      	bhi.n	800c5bc <_printf_float+0x224>
 800c5ba:	e0ec      	b.n	800c796 <_printf_float+0x3fe>
 800c5bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c5be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f7f3 ff4c 	bl	8000460 <__aeabi_dcmpeq>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d034      	beq.n	800c636 <_printf_float+0x29e>
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	0038      	movs	r0, r7
 800c5d0:	4a37      	ldr	r2, [pc, #220]	; (800c6b0 <_printf_float+0x318>)
 800c5d2:	9908      	ldr	r1, [sp, #32]
 800c5d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c5d6:	47a8      	blx	r5
 800c5d8:	3001      	adds	r0, #1
 800c5da:	d100      	bne.n	800c5de <_printf_float+0x246>
 800c5dc:	e73a      	b.n	800c454 <_printf_float+0xbc>
 800c5de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c5e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	db02      	blt.n	800c5ec <_printf_float+0x254>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	07db      	lsls	r3, r3, #31
 800c5ea:	d50d      	bpl.n	800c608 <_printf_float+0x270>
 800c5ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c5ee:	0038      	movs	r0, r7
 800c5f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5f4:	9908      	ldr	r1, [sp, #32]
 800c5f6:	47a8      	blx	r5
 800c5f8:	2500      	movs	r5, #0
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	d100      	bne.n	800c600 <_printf_float+0x268>
 800c5fe:	e729      	b.n	800c454 <_printf_float+0xbc>
 800c600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c602:	3b01      	subs	r3, #1
 800c604:	42ab      	cmp	r3, r5
 800c606:	dc0a      	bgt.n	800c61e <_printf_float+0x286>
 800c608:	6823      	ldr	r3, [r4, #0]
 800c60a:	079b      	lsls	r3, r3, #30
 800c60c:	d500      	bpl.n	800c610 <_printf_float+0x278>
 800c60e:	e116      	b.n	800c83e <_printf_float+0x4a6>
 800c610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c612:	68e0      	ldr	r0, [r4, #12]
 800c614:	4298      	cmp	r0, r3
 800c616:	db00      	blt.n	800c61a <_printf_float+0x282>
 800c618:	e71e      	b.n	800c458 <_printf_float+0xc0>
 800c61a:	0018      	movs	r0, r3
 800c61c:	e71c      	b.n	800c458 <_printf_float+0xc0>
 800c61e:	0022      	movs	r2, r4
 800c620:	2301      	movs	r3, #1
 800c622:	0038      	movs	r0, r7
 800c624:	9908      	ldr	r1, [sp, #32]
 800c626:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c628:	321a      	adds	r2, #26
 800c62a:	47b0      	blx	r6
 800c62c:	3001      	adds	r0, #1
 800c62e:	d100      	bne.n	800c632 <_printf_float+0x29a>
 800c630:	e710      	b.n	800c454 <_printf_float+0xbc>
 800c632:	3501      	adds	r5, #1
 800c634:	e7e4      	b.n	800c600 <_printf_float+0x268>
 800c636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c638:	2b00      	cmp	r3, #0
 800c63a:	dc3b      	bgt.n	800c6b4 <_printf_float+0x31c>
 800c63c:	2301      	movs	r3, #1
 800c63e:	0038      	movs	r0, r7
 800c640:	4a1b      	ldr	r2, [pc, #108]	; (800c6b0 <_printf_float+0x318>)
 800c642:	9908      	ldr	r1, [sp, #32]
 800c644:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c646:	47b0      	blx	r6
 800c648:	3001      	adds	r0, #1
 800c64a:	d100      	bne.n	800c64e <_printf_float+0x2b6>
 800c64c:	e702      	b.n	800c454 <_printf_float+0xbc>
 800c64e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c652:	4313      	orrs	r3, r2
 800c654:	d102      	bne.n	800c65c <_printf_float+0x2c4>
 800c656:	6823      	ldr	r3, [r4, #0]
 800c658:	07db      	lsls	r3, r3, #31
 800c65a:	d5d5      	bpl.n	800c608 <_printf_float+0x270>
 800c65c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c65e:	0038      	movs	r0, r7
 800c660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c662:	9908      	ldr	r1, [sp, #32]
 800c664:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c666:	47b0      	blx	r6
 800c668:	2300      	movs	r3, #0
 800c66a:	3001      	adds	r0, #1
 800c66c:	d100      	bne.n	800c670 <_printf_float+0x2d8>
 800c66e:	e6f1      	b.n	800c454 <_printf_float+0xbc>
 800c670:	930a      	str	r3, [sp, #40]	; 0x28
 800c672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c676:	425b      	negs	r3, r3
 800c678:	4293      	cmp	r3, r2
 800c67a:	dc01      	bgt.n	800c680 <_printf_float+0x2e8>
 800c67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c67e:	e791      	b.n	800c5a4 <_printf_float+0x20c>
 800c680:	0022      	movs	r2, r4
 800c682:	2301      	movs	r3, #1
 800c684:	0038      	movs	r0, r7
 800c686:	9908      	ldr	r1, [sp, #32]
 800c688:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c68a:	321a      	adds	r2, #26
 800c68c:	47b0      	blx	r6
 800c68e:	3001      	adds	r0, #1
 800c690:	d100      	bne.n	800c694 <_printf_float+0x2fc>
 800c692:	e6df      	b.n	800c454 <_printf_float+0xbc>
 800c694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c696:	3301      	adds	r3, #1
 800c698:	e7ea      	b.n	800c670 <_printf_float+0x2d8>
 800c69a:	46c0      	nop			; (mov r8, r8)
 800c69c:	7fefffff 	.word	0x7fefffff
 800c6a0:	08012019 	.word	0x08012019
 800c6a4:	0801201d 	.word	0x0801201d
 800c6a8:	08012021 	.word	0x08012021
 800c6ac:	08012025 	.word	0x08012025
 800c6b0:	08010f77 	.word	0x08010f77
 800c6b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6b8:	920a      	str	r2, [sp, #40]	; 0x28
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	dd00      	ble.n	800c6c0 <_printf_float+0x328>
 800c6be:	930a      	str	r3, [sp, #40]	; 0x28
 800c6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	dc3d      	bgt.n	800c742 <_printf_float+0x3aa>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6cc:	43db      	mvns	r3, r3
 800c6ce:	17db      	asrs	r3, r3, #31
 800c6d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6da:	4013      	ands	r3, r2
 800c6dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	dc36      	bgt.n	800c754 <_printf_float+0x3bc>
 800c6e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c6e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	db40      	blt.n	800c770 <_printf_float+0x3d8>
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	07db      	lsls	r3, r3, #31
 800c6f2:	d43d      	bmi.n	800c770 <_printf_float+0x3d8>
 800c6f4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c6f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6fa:	1af3      	subs	r3, r6, r3
 800c6fc:	1ab6      	subs	r6, r6, r2
 800c6fe:	429e      	cmp	r6, r3
 800c700:	dd00      	ble.n	800c704 <_printf_float+0x36c>
 800c702:	001e      	movs	r6, r3
 800c704:	2e00      	cmp	r6, #0
 800c706:	dc3c      	bgt.n	800c782 <_printf_float+0x3ea>
 800c708:	2300      	movs	r3, #0
 800c70a:	930a      	str	r3, [sp, #40]	; 0x28
 800c70c:	43f3      	mvns	r3, r6
 800c70e:	17db      	asrs	r3, r3, #31
 800c710:	930b      	str	r3, [sp, #44]	; 0x2c
 800c712:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c716:	1a9b      	subs	r3, r3, r2
 800c718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c71a:	4032      	ands	r2, r6
 800c71c:	1a9b      	subs	r3, r3, r2
 800c71e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c720:	4293      	cmp	r3, r2
 800c722:	dc00      	bgt.n	800c726 <_printf_float+0x38e>
 800c724:	e770      	b.n	800c608 <_printf_float+0x270>
 800c726:	0022      	movs	r2, r4
 800c728:	2301      	movs	r3, #1
 800c72a:	0038      	movs	r0, r7
 800c72c:	9908      	ldr	r1, [sp, #32]
 800c72e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c730:	321a      	adds	r2, #26
 800c732:	47a8      	blx	r5
 800c734:	3001      	adds	r0, #1
 800c736:	d100      	bne.n	800c73a <_printf_float+0x3a2>
 800c738:	e68c      	b.n	800c454 <_printf_float+0xbc>
 800c73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c73c:	3301      	adds	r3, #1
 800c73e:	930a      	str	r3, [sp, #40]	; 0x28
 800c740:	e7e7      	b.n	800c712 <_printf_float+0x37a>
 800c742:	002a      	movs	r2, r5
 800c744:	0038      	movs	r0, r7
 800c746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c748:	9908      	ldr	r1, [sp, #32]
 800c74a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c74c:	47b0      	blx	r6
 800c74e:	3001      	adds	r0, #1
 800c750:	d1b9      	bne.n	800c6c6 <_printf_float+0x32e>
 800c752:	e67f      	b.n	800c454 <_printf_float+0xbc>
 800c754:	0022      	movs	r2, r4
 800c756:	2301      	movs	r3, #1
 800c758:	0038      	movs	r0, r7
 800c75a:	9908      	ldr	r1, [sp, #32]
 800c75c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c75e:	321a      	adds	r2, #26
 800c760:	47b0      	blx	r6
 800c762:	3001      	adds	r0, #1
 800c764:	d100      	bne.n	800c768 <_printf_float+0x3d0>
 800c766:	e675      	b.n	800c454 <_printf_float+0xbc>
 800c768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c76a:	3301      	adds	r3, #1
 800c76c:	930e      	str	r3, [sp, #56]	; 0x38
 800c76e:	e7b0      	b.n	800c6d2 <_printf_float+0x33a>
 800c770:	0038      	movs	r0, r7
 800c772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c776:	9908      	ldr	r1, [sp, #32]
 800c778:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c77a:	47b0      	blx	r6
 800c77c:	3001      	adds	r0, #1
 800c77e:	d1b9      	bne.n	800c6f4 <_printf_float+0x35c>
 800c780:	e668      	b.n	800c454 <_printf_float+0xbc>
 800c782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c784:	0038      	movs	r0, r7
 800c786:	18ea      	adds	r2, r5, r3
 800c788:	9908      	ldr	r1, [sp, #32]
 800c78a:	0033      	movs	r3, r6
 800c78c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c78e:	47a8      	blx	r5
 800c790:	3001      	adds	r0, #1
 800c792:	d1b9      	bne.n	800c708 <_printf_float+0x370>
 800c794:	e65e      	b.n	800c454 <_printf_float+0xbc>
 800c796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c798:	2b01      	cmp	r3, #1
 800c79a:	dc02      	bgt.n	800c7a2 <_printf_float+0x40a>
 800c79c:	2301      	movs	r3, #1
 800c79e:	421a      	tst	r2, r3
 800c7a0:	d03a      	beq.n	800c818 <_printf_float+0x480>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	002a      	movs	r2, r5
 800c7a6:	0038      	movs	r0, r7
 800c7a8:	9908      	ldr	r1, [sp, #32]
 800c7aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c7ac:	47b0      	blx	r6
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	d100      	bne.n	800c7b4 <_printf_float+0x41c>
 800c7b2:	e64f      	b.n	800c454 <_printf_float+0xbc>
 800c7b4:	0038      	movs	r0, r7
 800c7b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7ba:	9908      	ldr	r1, [sp, #32]
 800c7bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c7be:	47b0      	blx	r6
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	d100      	bne.n	800c7c6 <_printf_float+0x42e>
 800c7c4:	e646      	b.n	800c454 <_printf_float+0xbc>
 800c7c6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c7c8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c7ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	001e      	movs	r6, r3
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	f7f3 fe45 	bl	8000460 <__aeabi_dcmpeq>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d11c      	bne.n	800c814 <_printf_float+0x47c>
 800c7da:	0033      	movs	r3, r6
 800c7dc:	1c6a      	adds	r2, r5, #1
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	0038      	movs	r0, r7
 800c7e2:	9908      	ldr	r1, [sp, #32]
 800c7e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c7e6:	47a8      	blx	r5
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	d10f      	bne.n	800c80c <_printf_float+0x474>
 800c7ec:	e632      	b.n	800c454 <_printf_float+0xbc>
 800c7ee:	0022      	movs	r2, r4
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	0038      	movs	r0, r7
 800c7f4:	9908      	ldr	r1, [sp, #32]
 800c7f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c7f8:	321a      	adds	r2, #26
 800c7fa:	47b0      	blx	r6
 800c7fc:	3001      	adds	r0, #1
 800c7fe:	d100      	bne.n	800c802 <_printf_float+0x46a>
 800c800:	e628      	b.n	800c454 <_printf_float+0xbc>
 800c802:	3501      	adds	r5, #1
 800c804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c806:	3b01      	subs	r3, #1
 800c808:	42ab      	cmp	r3, r5
 800c80a:	dcf0      	bgt.n	800c7ee <_printf_float+0x456>
 800c80c:	0022      	movs	r2, r4
 800c80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c810:	3250      	adds	r2, #80	; 0x50
 800c812:	e6c8      	b.n	800c5a6 <_printf_float+0x20e>
 800c814:	2500      	movs	r5, #0
 800c816:	e7f5      	b.n	800c804 <_printf_float+0x46c>
 800c818:	002a      	movs	r2, r5
 800c81a:	e7e1      	b.n	800c7e0 <_printf_float+0x448>
 800c81c:	0022      	movs	r2, r4
 800c81e:	2301      	movs	r3, #1
 800c820:	0038      	movs	r0, r7
 800c822:	9908      	ldr	r1, [sp, #32]
 800c824:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c826:	3219      	adds	r2, #25
 800c828:	47b0      	blx	r6
 800c82a:	3001      	adds	r0, #1
 800c82c:	d100      	bne.n	800c830 <_printf_float+0x498>
 800c82e:	e611      	b.n	800c454 <_printf_float+0xbc>
 800c830:	3501      	adds	r5, #1
 800c832:	68e3      	ldr	r3, [r4, #12]
 800c834:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c836:	1a9b      	subs	r3, r3, r2
 800c838:	42ab      	cmp	r3, r5
 800c83a:	dcef      	bgt.n	800c81c <_printf_float+0x484>
 800c83c:	e6e8      	b.n	800c610 <_printf_float+0x278>
 800c83e:	2500      	movs	r5, #0
 800c840:	e7f7      	b.n	800c832 <_printf_float+0x49a>
 800c842:	46c0      	nop			; (mov r8, r8)

0800c844 <_printf_common>:
 800c844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c846:	0016      	movs	r6, r2
 800c848:	9301      	str	r3, [sp, #4]
 800c84a:	688a      	ldr	r2, [r1, #8]
 800c84c:	690b      	ldr	r3, [r1, #16]
 800c84e:	000c      	movs	r4, r1
 800c850:	9000      	str	r0, [sp, #0]
 800c852:	4293      	cmp	r3, r2
 800c854:	da00      	bge.n	800c858 <_printf_common+0x14>
 800c856:	0013      	movs	r3, r2
 800c858:	0022      	movs	r2, r4
 800c85a:	6033      	str	r3, [r6, #0]
 800c85c:	3243      	adds	r2, #67	; 0x43
 800c85e:	7812      	ldrb	r2, [r2, #0]
 800c860:	2a00      	cmp	r2, #0
 800c862:	d001      	beq.n	800c868 <_printf_common+0x24>
 800c864:	3301      	adds	r3, #1
 800c866:	6033      	str	r3, [r6, #0]
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	069b      	lsls	r3, r3, #26
 800c86c:	d502      	bpl.n	800c874 <_printf_common+0x30>
 800c86e:	6833      	ldr	r3, [r6, #0]
 800c870:	3302      	adds	r3, #2
 800c872:	6033      	str	r3, [r6, #0]
 800c874:	6822      	ldr	r2, [r4, #0]
 800c876:	2306      	movs	r3, #6
 800c878:	0015      	movs	r5, r2
 800c87a:	401d      	ands	r5, r3
 800c87c:	421a      	tst	r2, r3
 800c87e:	d027      	beq.n	800c8d0 <_printf_common+0x8c>
 800c880:	0023      	movs	r3, r4
 800c882:	3343      	adds	r3, #67	; 0x43
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	1e5a      	subs	r2, r3, #1
 800c888:	4193      	sbcs	r3, r2
 800c88a:	6822      	ldr	r2, [r4, #0]
 800c88c:	0692      	lsls	r2, r2, #26
 800c88e:	d430      	bmi.n	800c8f2 <_printf_common+0xae>
 800c890:	0022      	movs	r2, r4
 800c892:	9901      	ldr	r1, [sp, #4]
 800c894:	9800      	ldr	r0, [sp, #0]
 800c896:	9d08      	ldr	r5, [sp, #32]
 800c898:	3243      	adds	r2, #67	; 0x43
 800c89a:	47a8      	blx	r5
 800c89c:	3001      	adds	r0, #1
 800c89e:	d025      	beq.n	800c8ec <_printf_common+0xa8>
 800c8a0:	2206      	movs	r2, #6
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	2500      	movs	r5, #0
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	2b04      	cmp	r3, #4
 800c8aa:	d105      	bne.n	800c8b8 <_printf_common+0x74>
 800c8ac:	6833      	ldr	r3, [r6, #0]
 800c8ae:	68e5      	ldr	r5, [r4, #12]
 800c8b0:	1aed      	subs	r5, r5, r3
 800c8b2:	43eb      	mvns	r3, r5
 800c8b4:	17db      	asrs	r3, r3, #31
 800c8b6:	401d      	ands	r5, r3
 800c8b8:	68a3      	ldr	r3, [r4, #8]
 800c8ba:	6922      	ldr	r2, [r4, #16]
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	dd01      	ble.n	800c8c4 <_printf_common+0x80>
 800c8c0:	1a9b      	subs	r3, r3, r2
 800c8c2:	18ed      	adds	r5, r5, r3
 800c8c4:	2600      	movs	r6, #0
 800c8c6:	42b5      	cmp	r5, r6
 800c8c8:	d120      	bne.n	800c90c <_printf_common+0xc8>
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	e010      	b.n	800c8f0 <_printf_common+0xac>
 800c8ce:	3501      	adds	r5, #1
 800c8d0:	68e3      	ldr	r3, [r4, #12]
 800c8d2:	6832      	ldr	r2, [r6, #0]
 800c8d4:	1a9b      	subs	r3, r3, r2
 800c8d6:	42ab      	cmp	r3, r5
 800c8d8:	ddd2      	ble.n	800c880 <_printf_common+0x3c>
 800c8da:	0022      	movs	r2, r4
 800c8dc:	2301      	movs	r3, #1
 800c8de:	9901      	ldr	r1, [sp, #4]
 800c8e0:	9800      	ldr	r0, [sp, #0]
 800c8e2:	9f08      	ldr	r7, [sp, #32]
 800c8e4:	3219      	adds	r2, #25
 800c8e6:	47b8      	blx	r7
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	d1f0      	bne.n	800c8ce <_printf_common+0x8a>
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	4240      	negs	r0, r0
 800c8f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c8f2:	2030      	movs	r0, #48	; 0x30
 800c8f4:	18e1      	adds	r1, r4, r3
 800c8f6:	3143      	adds	r1, #67	; 0x43
 800c8f8:	7008      	strb	r0, [r1, #0]
 800c8fa:	0021      	movs	r1, r4
 800c8fc:	1c5a      	adds	r2, r3, #1
 800c8fe:	3145      	adds	r1, #69	; 0x45
 800c900:	7809      	ldrb	r1, [r1, #0]
 800c902:	18a2      	adds	r2, r4, r2
 800c904:	3243      	adds	r2, #67	; 0x43
 800c906:	3302      	adds	r3, #2
 800c908:	7011      	strb	r1, [r2, #0]
 800c90a:	e7c1      	b.n	800c890 <_printf_common+0x4c>
 800c90c:	0022      	movs	r2, r4
 800c90e:	2301      	movs	r3, #1
 800c910:	9901      	ldr	r1, [sp, #4]
 800c912:	9800      	ldr	r0, [sp, #0]
 800c914:	9f08      	ldr	r7, [sp, #32]
 800c916:	321a      	adds	r2, #26
 800c918:	47b8      	blx	r7
 800c91a:	3001      	adds	r0, #1
 800c91c:	d0e6      	beq.n	800c8ec <_printf_common+0xa8>
 800c91e:	3601      	adds	r6, #1
 800c920:	e7d1      	b.n	800c8c6 <_printf_common+0x82>
	...

0800c924 <_printf_i>:
 800c924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c926:	b08b      	sub	sp, #44	; 0x2c
 800c928:	9206      	str	r2, [sp, #24]
 800c92a:	000a      	movs	r2, r1
 800c92c:	3243      	adds	r2, #67	; 0x43
 800c92e:	9307      	str	r3, [sp, #28]
 800c930:	9005      	str	r0, [sp, #20]
 800c932:	9204      	str	r2, [sp, #16]
 800c934:	7e0a      	ldrb	r2, [r1, #24]
 800c936:	000c      	movs	r4, r1
 800c938:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c93a:	2a78      	cmp	r2, #120	; 0x78
 800c93c:	d809      	bhi.n	800c952 <_printf_i+0x2e>
 800c93e:	2a62      	cmp	r2, #98	; 0x62
 800c940:	d80b      	bhi.n	800c95a <_printf_i+0x36>
 800c942:	2a00      	cmp	r2, #0
 800c944:	d100      	bne.n	800c948 <_printf_i+0x24>
 800c946:	e0be      	b.n	800cac6 <_printf_i+0x1a2>
 800c948:	497c      	ldr	r1, [pc, #496]	; (800cb3c <_printf_i+0x218>)
 800c94a:	9103      	str	r1, [sp, #12]
 800c94c:	2a58      	cmp	r2, #88	; 0x58
 800c94e:	d100      	bne.n	800c952 <_printf_i+0x2e>
 800c950:	e093      	b.n	800ca7a <_printf_i+0x156>
 800c952:	0026      	movs	r6, r4
 800c954:	3642      	adds	r6, #66	; 0x42
 800c956:	7032      	strb	r2, [r6, #0]
 800c958:	e022      	b.n	800c9a0 <_printf_i+0x7c>
 800c95a:	0010      	movs	r0, r2
 800c95c:	3863      	subs	r0, #99	; 0x63
 800c95e:	2815      	cmp	r0, #21
 800c960:	d8f7      	bhi.n	800c952 <_printf_i+0x2e>
 800c962:	f7f3 fbed 	bl	8000140 <__gnu_thumb1_case_shi>
 800c966:	0016      	.short	0x0016
 800c968:	fff6001f 	.word	0xfff6001f
 800c96c:	fff6fff6 	.word	0xfff6fff6
 800c970:	001ffff6 	.word	0x001ffff6
 800c974:	fff6fff6 	.word	0xfff6fff6
 800c978:	fff6fff6 	.word	0xfff6fff6
 800c97c:	003600a3 	.word	0x003600a3
 800c980:	fff60083 	.word	0xfff60083
 800c984:	00b4fff6 	.word	0x00b4fff6
 800c988:	0036fff6 	.word	0x0036fff6
 800c98c:	fff6fff6 	.word	0xfff6fff6
 800c990:	0087      	.short	0x0087
 800c992:	0026      	movs	r6, r4
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	3642      	adds	r6, #66	; 0x42
 800c998:	1d11      	adds	r1, r2, #4
 800c99a:	6019      	str	r1, [r3, #0]
 800c99c:	6813      	ldr	r3, [r2, #0]
 800c99e:	7033      	strb	r3, [r6, #0]
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e0a2      	b.n	800caea <_printf_i+0x1c6>
 800c9a4:	6818      	ldr	r0, [r3, #0]
 800c9a6:	6809      	ldr	r1, [r1, #0]
 800c9a8:	1d02      	adds	r2, r0, #4
 800c9aa:	060d      	lsls	r5, r1, #24
 800c9ac:	d50b      	bpl.n	800c9c6 <_printf_i+0xa2>
 800c9ae:	6805      	ldr	r5, [r0, #0]
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	2d00      	cmp	r5, #0
 800c9b4:	da03      	bge.n	800c9be <_printf_i+0x9a>
 800c9b6:	232d      	movs	r3, #45	; 0x2d
 800c9b8:	9a04      	ldr	r2, [sp, #16]
 800c9ba:	426d      	negs	r5, r5
 800c9bc:	7013      	strb	r3, [r2, #0]
 800c9be:	4b5f      	ldr	r3, [pc, #380]	; (800cb3c <_printf_i+0x218>)
 800c9c0:	270a      	movs	r7, #10
 800c9c2:	9303      	str	r3, [sp, #12]
 800c9c4:	e01b      	b.n	800c9fe <_printf_i+0xda>
 800c9c6:	6805      	ldr	r5, [r0, #0]
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	0649      	lsls	r1, r1, #25
 800c9cc:	d5f1      	bpl.n	800c9b2 <_printf_i+0x8e>
 800c9ce:	b22d      	sxth	r5, r5
 800c9d0:	e7ef      	b.n	800c9b2 <_printf_i+0x8e>
 800c9d2:	680d      	ldr	r5, [r1, #0]
 800c9d4:	6819      	ldr	r1, [r3, #0]
 800c9d6:	1d08      	adds	r0, r1, #4
 800c9d8:	6018      	str	r0, [r3, #0]
 800c9da:	062e      	lsls	r6, r5, #24
 800c9dc:	d501      	bpl.n	800c9e2 <_printf_i+0xbe>
 800c9de:	680d      	ldr	r5, [r1, #0]
 800c9e0:	e003      	b.n	800c9ea <_printf_i+0xc6>
 800c9e2:	066d      	lsls	r5, r5, #25
 800c9e4:	d5fb      	bpl.n	800c9de <_printf_i+0xba>
 800c9e6:	680d      	ldr	r5, [r1, #0]
 800c9e8:	b2ad      	uxth	r5, r5
 800c9ea:	4b54      	ldr	r3, [pc, #336]	; (800cb3c <_printf_i+0x218>)
 800c9ec:	2708      	movs	r7, #8
 800c9ee:	9303      	str	r3, [sp, #12]
 800c9f0:	2a6f      	cmp	r2, #111	; 0x6f
 800c9f2:	d000      	beq.n	800c9f6 <_printf_i+0xd2>
 800c9f4:	3702      	adds	r7, #2
 800c9f6:	0023      	movs	r3, r4
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	3343      	adds	r3, #67	; 0x43
 800c9fc:	701a      	strb	r2, [r3, #0]
 800c9fe:	6863      	ldr	r3, [r4, #4]
 800ca00:	60a3      	str	r3, [r4, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	db03      	blt.n	800ca0e <_printf_i+0xea>
 800ca06:	2104      	movs	r1, #4
 800ca08:	6822      	ldr	r2, [r4, #0]
 800ca0a:	438a      	bics	r2, r1
 800ca0c:	6022      	str	r2, [r4, #0]
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	d102      	bne.n	800ca18 <_printf_i+0xf4>
 800ca12:	9e04      	ldr	r6, [sp, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00c      	beq.n	800ca32 <_printf_i+0x10e>
 800ca18:	9e04      	ldr	r6, [sp, #16]
 800ca1a:	0028      	movs	r0, r5
 800ca1c:	0039      	movs	r1, r7
 800ca1e:	f7f3 fc1f 	bl	8000260 <__aeabi_uidivmod>
 800ca22:	9b03      	ldr	r3, [sp, #12]
 800ca24:	3e01      	subs	r6, #1
 800ca26:	5c5b      	ldrb	r3, [r3, r1]
 800ca28:	7033      	strb	r3, [r6, #0]
 800ca2a:	002b      	movs	r3, r5
 800ca2c:	0005      	movs	r5, r0
 800ca2e:	429f      	cmp	r7, r3
 800ca30:	d9f3      	bls.n	800ca1a <_printf_i+0xf6>
 800ca32:	2f08      	cmp	r7, #8
 800ca34:	d109      	bne.n	800ca4a <_printf_i+0x126>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	07db      	lsls	r3, r3, #31
 800ca3a:	d506      	bpl.n	800ca4a <_printf_i+0x126>
 800ca3c:	6862      	ldr	r2, [r4, #4]
 800ca3e:	6923      	ldr	r3, [r4, #16]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	dc02      	bgt.n	800ca4a <_printf_i+0x126>
 800ca44:	2330      	movs	r3, #48	; 0x30
 800ca46:	3e01      	subs	r6, #1
 800ca48:	7033      	strb	r3, [r6, #0]
 800ca4a:	9b04      	ldr	r3, [sp, #16]
 800ca4c:	1b9b      	subs	r3, r3, r6
 800ca4e:	6123      	str	r3, [r4, #16]
 800ca50:	9b07      	ldr	r3, [sp, #28]
 800ca52:	0021      	movs	r1, r4
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	9805      	ldr	r0, [sp, #20]
 800ca58:	9b06      	ldr	r3, [sp, #24]
 800ca5a:	aa09      	add	r2, sp, #36	; 0x24
 800ca5c:	f7ff fef2 	bl	800c844 <_printf_common>
 800ca60:	3001      	adds	r0, #1
 800ca62:	d147      	bne.n	800caf4 <_printf_i+0x1d0>
 800ca64:	2001      	movs	r0, #1
 800ca66:	4240      	negs	r0, r0
 800ca68:	b00b      	add	sp, #44	; 0x2c
 800ca6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca6c:	2220      	movs	r2, #32
 800ca6e:	6809      	ldr	r1, [r1, #0]
 800ca70:	430a      	orrs	r2, r1
 800ca72:	6022      	str	r2, [r4, #0]
 800ca74:	2278      	movs	r2, #120	; 0x78
 800ca76:	4932      	ldr	r1, [pc, #200]	; (800cb40 <_printf_i+0x21c>)
 800ca78:	9103      	str	r1, [sp, #12]
 800ca7a:	0021      	movs	r1, r4
 800ca7c:	3145      	adds	r1, #69	; 0x45
 800ca7e:	700a      	strb	r2, [r1, #0]
 800ca80:	6819      	ldr	r1, [r3, #0]
 800ca82:	6822      	ldr	r2, [r4, #0]
 800ca84:	c920      	ldmia	r1!, {r5}
 800ca86:	0610      	lsls	r0, r2, #24
 800ca88:	d402      	bmi.n	800ca90 <_printf_i+0x16c>
 800ca8a:	0650      	lsls	r0, r2, #25
 800ca8c:	d500      	bpl.n	800ca90 <_printf_i+0x16c>
 800ca8e:	b2ad      	uxth	r5, r5
 800ca90:	6019      	str	r1, [r3, #0]
 800ca92:	07d3      	lsls	r3, r2, #31
 800ca94:	d502      	bpl.n	800ca9c <_printf_i+0x178>
 800ca96:	2320      	movs	r3, #32
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	6023      	str	r3, [r4, #0]
 800ca9c:	2710      	movs	r7, #16
 800ca9e:	2d00      	cmp	r5, #0
 800caa0:	d1a9      	bne.n	800c9f6 <_printf_i+0xd2>
 800caa2:	2220      	movs	r2, #32
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	4393      	bics	r3, r2
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	e7a4      	b.n	800c9f6 <_printf_i+0xd2>
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	680d      	ldr	r5, [r1, #0]
 800cab0:	1d10      	adds	r0, r2, #4
 800cab2:	6949      	ldr	r1, [r1, #20]
 800cab4:	6018      	str	r0, [r3, #0]
 800cab6:	6813      	ldr	r3, [r2, #0]
 800cab8:	062e      	lsls	r6, r5, #24
 800caba:	d501      	bpl.n	800cac0 <_printf_i+0x19c>
 800cabc:	6019      	str	r1, [r3, #0]
 800cabe:	e002      	b.n	800cac6 <_printf_i+0x1a2>
 800cac0:	066d      	lsls	r5, r5, #25
 800cac2:	d5fb      	bpl.n	800cabc <_printf_i+0x198>
 800cac4:	8019      	strh	r1, [r3, #0]
 800cac6:	2300      	movs	r3, #0
 800cac8:	9e04      	ldr	r6, [sp, #16]
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	e7c0      	b.n	800ca50 <_printf_i+0x12c>
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	1d11      	adds	r1, r2, #4
 800cad2:	6019      	str	r1, [r3, #0]
 800cad4:	6816      	ldr	r6, [r2, #0]
 800cad6:	2100      	movs	r1, #0
 800cad8:	0030      	movs	r0, r6
 800cada:	6862      	ldr	r2, [r4, #4]
 800cadc:	f000 fd5b 	bl	800d596 <memchr>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d001      	beq.n	800cae8 <_printf_i+0x1c4>
 800cae4:	1b80      	subs	r0, r0, r6
 800cae6:	6060      	str	r0, [r4, #4]
 800cae8:	6863      	ldr	r3, [r4, #4]
 800caea:	6123      	str	r3, [r4, #16]
 800caec:	2300      	movs	r3, #0
 800caee:	9a04      	ldr	r2, [sp, #16]
 800caf0:	7013      	strb	r3, [r2, #0]
 800caf2:	e7ad      	b.n	800ca50 <_printf_i+0x12c>
 800caf4:	0032      	movs	r2, r6
 800caf6:	6923      	ldr	r3, [r4, #16]
 800caf8:	9906      	ldr	r1, [sp, #24]
 800cafa:	9805      	ldr	r0, [sp, #20]
 800cafc:	9d07      	ldr	r5, [sp, #28]
 800cafe:	47a8      	blx	r5
 800cb00:	3001      	adds	r0, #1
 800cb02:	d0af      	beq.n	800ca64 <_printf_i+0x140>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	079b      	lsls	r3, r3, #30
 800cb08:	d415      	bmi.n	800cb36 <_printf_i+0x212>
 800cb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb0c:	68e0      	ldr	r0, [r4, #12]
 800cb0e:	4298      	cmp	r0, r3
 800cb10:	daaa      	bge.n	800ca68 <_printf_i+0x144>
 800cb12:	0018      	movs	r0, r3
 800cb14:	e7a8      	b.n	800ca68 <_printf_i+0x144>
 800cb16:	0022      	movs	r2, r4
 800cb18:	2301      	movs	r3, #1
 800cb1a:	9906      	ldr	r1, [sp, #24]
 800cb1c:	9805      	ldr	r0, [sp, #20]
 800cb1e:	9e07      	ldr	r6, [sp, #28]
 800cb20:	3219      	adds	r2, #25
 800cb22:	47b0      	blx	r6
 800cb24:	3001      	adds	r0, #1
 800cb26:	d09d      	beq.n	800ca64 <_printf_i+0x140>
 800cb28:	3501      	adds	r5, #1
 800cb2a:	68e3      	ldr	r3, [r4, #12]
 800cb2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb2e:	1a9b      	subs	r3, r3, r2
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	dcf0      	bgt.n	800cb16 <_printf_i+0x1f2>
 800cb34:	e7e9      	b.n	800cb0a <_printf_i+0x1e6>
 800cb36:	2500      	movs	r5, #0
 800cb38:	e7f7      	b.n	800cb2a <_printf_i+0x206>
 800cb3a:	46c0      	nop			; (mov r8, r8)
 800cb3c:	08012029 	.word	0x08012029
 800cb40:	0801203a 	.word	0x0801203a

0800cb44 <_scanf_float>:
 800cb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb46:	b08b      	sub	sp, #44	; 0x2c
 800cb48:	0016      	movs	r6, r2
 800cb4a:	9002      	str	r0, [sp, #8]
 800cb4c:	22ae      	movs	r2, #174	; 0xae
 800cb4e:	2000      	movs	r0, #0
 800cb50:	9307      	str	r3, [sp, #28]
 800cb52:	688b      	ldr	r3, [r1, #8]
 800cb54:	000f      	movs	r7, r1
 800cb56:	1e59      	subs	r1, r3, #1
 800cb58:	0052      	lsls	r2, r2, #1
 800cb5a:	9006      	str	r0, [sp, #24]
 800cb5c:	4291      	cmp	r1, r2
 800cb5e:	d905      	bls.n	800cb6c <_scanf_float+0x28>
 800cb60:	3b5e      	subs	r3, #94	; 0x5e
 800cb62:	3bff      	subs	r3, #255	; 0xff
 800cb64:	9306      	str	r3, [sp, #24]
 800cb66:	235e      	movs	r3, #94	; 0x5e
 800cb68:	33ff      	adds	r3, #255	; 0xff
 800cb6a:	60bb      	str	r3, [r7, #8]
 800cb6c:	23f0      	movs	r3, #240	; 0xf0
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	00db      	lsls	r3, r3, #3
 800cb72:	4313      	orrs	r3, r2
 800cb74:	603b      	str	r3, [r7, #0]
 800cb76:	003b      	movs	r3, r7
 800cb78:	2400      	movs	r4, #0
 800cb7a:	331c      	adds	r3, #28
 800cb7c:	001d      	movs	r5, r3
 800cb7e:	9304      	str	r3, [sp, #16]
 800cb80:	9403      	str	r4, [sp, #12]
 800cb82:	9409      	str	r4, [sp, #36]	; 0x24
 800cb84:	9408      	str	r4, [sp, #32]
 800cb86:	9401      	str	r4, [sp, #4]
 800cb88:	9405      	str	r4, [sp, #20]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	2a00      	cmp	r2, #0
 800cb8e:	d00a      	beq.n	800cba6 <_scanf_float+0x62>
 800cb90:	6833      	ldr	r3, [r6, #0]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b4e      	cmp	r3, #78	; 0x4e
 800cb96:	d844      	bhi.n	800cc22 <_scanf_float+0xde>
 800cb98:	0018      	movs	r0, r3
 800cb9a:	2b40      	cmp	r3, #64	; 0x40
 800cb9c:	d82c      	bhi.n	800cbf8 <_scanf_float+0xb4>
 800cb9e:	382b      	subs	r0, #43	; 0x2b
 800cba0:	b2c1      	uxtb	r1, r0
 800cba2:	290e      	cmp	r1, #14
 800cba4:	d92a      	bls.n	800cbfc <_scanf_float+0xb8>
 800cba6:	9b01      	ldr	r3, [sp, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d003      	beq.n	800cbb4 <_scanf_float+0x70>
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	4aa3      	ldr	r2, [pc, #652]	; (800ce3c <_scanf_float+0x2f8>)
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	603b      	str	r3, [r7, #0]
 800cbb4:	9b03      	ldr	r3, [sp, #12]
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d900      	bls.n	800cbbe <_scanf_float+0x7a>
 800cbbc:	e0f9      	b.n	800cdb2 <_scanf_float+0x26e>
 800cbbe:	24be      	movs	r4, #190	; 0xbe
 800cbc0:	0064      	lsls	r4, r4, #1
 800cbc2:	9b04      	ldr	r3, [sp, #16]
 800cbc4:	429d      	cmp	r5, r3
 800cbc6:	d900      	bls.n	800cbca <_scanf_float+0x86>
 800cbc8:	e0e9      	b.n	800cd9e <_scanf_float+0x25a>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	9303      	str	r3, [sp, #12]
 800cbce:	e183      	b.n	800ced8 <_scanf_float+0x394>
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	3861      	subs	r0, #97	; 0x61
 800cbd4:	280d      	cmp	r0, #13
 800cbd6:	d8e6      	bhi.n	800cba6 <_scanf_float+0x62>
 800cbd8:	f7f3 fab2 	bl	8000140 <__gnu_thumb1_case_shi>
 800cbdc:	ffe50083 	.word	0xffe50083
 800cbe0:	ffe5ffe5 	.word	0xffe5ffe5
 800cbe4:	00a200b6 	.word	0x00a200b6
 800cbe8:	ffe5ffe5 	.word	0xffe5ffe5
 800cbec:	ffe50089 	.word	0xffe50089
 800cbf0:	ffe5ffe5 	.word	0xffe5ffe5
 800cbf4:	0065ffe5 	.word	0x0065ffe5
 800cbf8:	3841      	subs	r0, #65	; 0x41
 800cbfa:	e7eb      	b.n	800cbd4 <_scanf_float+0x90>
 800cbfc:	280e      	cmp	r0, #14
 800cbfe:	d8d2      	bhi.n	800cba6 <_scanf_float+0x62>
 800cc00:	f7f3 fa9e 	bl	8000140 <__gnu_thumb1_case_shi>
 800cc04:	ffd1004b 	.word	0xffd1004b
 800cc08:	0098004b 	.word	0x0098004b
 800cc0c:	0020ffd1 	.word	0x0020ffd1
 800cc10:	00400040 	.word	0x00400040
 800cc14:	00400040 	.word	0x00400040
 800cc18:	00400040 	.word	0x00400040
 800cc1c:	00400040 	.word	0x00400040
 800cc20:	0040      	.short	0x0040
 800cc22:	2b6e      	cmp	r3, #110	; 0x6e
 800cc24:	d809      	bhi.n	800cc3a <_scanf_float+0xf6>
 800cc26:	2b60      	cmp	r3, #96	; 0x60
 800cc28:	d8d2      	bhi.n	800cbd0 <_scanf_float+0x8c>
 800cc2a:	2b54      	cmp	r3, #84	; 0x54
 800cc2c:	d07d      	beq.n	800cd2a <_scanf_float+0x1e6>
 800cc2e:	2b59      	cmp	r3, #89	; 0x59
 800cc30:	d1b9      	bne.n	800cba6 <_scanf_float+0x62>
 800cc32:	2c07      	cmp	r4, #7
 800cc34:	d1b7      	bne.n	800cba6 <_scanf_float+0x62>
 800cc36:	2408      	movs	r4, #8
 800cc38:	e02c      	b.n	800cc94 <_scanf_float+0x150>
 800cc3a:	2b74      	cmp	r3, #116	; 0x74
 800cc3c:	d075      	beq.n	800cd2a <_scanf_float+0x1e6>
 800cc3e:	2b79      	cmp	r3, #121	; 0x79
 800cc40:	d0f7      	beq.n	800cc32 <_scanf_float+0xee>
 800cc42:	e7b0      	b.n	800cba6 <_scanf_float+0x62>
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	05c8      	lsls	r0, r1, #23
 800cc48:	d51c      	bpl.n	800cc84 <_scanf_float+0x140>
 800cc4a:	2380      	movs	r3, #128	; 0x80
 800cc4c:	4399      	bics	r1, r3
 800cc4e:	9b01      	ldr	r3, [sp, #4]
 800cc50:	6039      	str	r1, [r7, #0]
 800cc52:	3301      	adds	r3, #1
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	9b06      	ldr	r3, [sp, #24]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d003      	beq.n	800cc64 <_scanf_float+0x120>
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	3201      	adds	r2, #1
 800cc60:	9306      	str	r3, [sp, #24]
 800cc62:	60ba      	str	r2, [r7, #8]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	3b01      	subs	r3, #1
 800cc68:	60bb      	str	r3, [r7, #8]
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	613b      	str	r3, [r7, #16]
 800cc70:	6873      	ldr	r3, [r6, #4]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	6073      	str	r3, [r6, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	dc00      	bgt.n	800cc7c <_scanf_float+0x138>
 800cc7a:	e086      	b.n	800cd8a <_scanf_float+0x246>
 800cc7c:	6833      	ldr	r3, [r6, #0]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	6033      	str	r3, [r6, #0]
 800cc82:	e782      	b.n	800cb8a <_scanf_float+0x46>
 800cc84:	9a03      	ldr	r2, [sp, #12]
 800cc86:	1912      	adds	r2, r2, r4
 800cc88:	2a00      	cmp	r2, #0
 800cc8a:	d18c      	bne.n	800cba6 <_scanf_float+0x62>
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	496c      	ldr	r1, [pc, #432]	; (800ce40 <_scanf_float+0x2fc>)
 800cc90:	400a      	ands	r2, r1
 800cc92:	603a      	str	r2, [r7, #0]
 800cc94:	702b      	strb	r3, [r5, #0]
 800cc96:	3501      	adds	r5, #1
 800cc98:	e7e4      	b.n	800cc64 <_scanf_float+0x120>
 800cc9a:	2180      	movs	r1, #128	; 0x80
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	420a      	tst	r2, r1
 800cca0:	d081      	beq.n	800cba6 <_scanf_float+0x62>
 800cca2:	438a      	bics	r2, r1
 800cca4:	e7f5      	b.n	800cc92 <_scanf_float+0x14e>
 800cca6:	9a03      	ldr	r2, [sp, #12]
 800cca8:	2a00      	cmp	r2, #0
 800ccaa:	d10f      	bne.n	800cccc <_scanf_float+0x188>
 800ccac:	9a01      	ldr	r2, [sp, #4]
 800ccae:	2a00      	cmp	r2, #0
 800ccb0:	d10f      	bne.n	800ccd2 <_scanf_float+0x18e>
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	21e0      	movs	r1, #224	; 0xe0
 800ccb6:	0010      	movs	r0, r2
 800ccb8:	00c9      	lsls	r1, r1, #3
 800ccba:	4008      	ands	r0, r1
 800ccbc:	4288      	cmp	r0, r1
 800ccbe:	d108      	bne.n	800ccd2 <_scanf_float+0x18e>
 800ccc0:	4960      	ldr	r1, [pc, #384]	; (800ce44 <_scanf_float+0x300>)
 800ccc2:	400a      	ands	r2, r1
 800ccc4:	603a      	str	r2, [r7, #0]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	9203      	str	r2, [sp, #12]
 800ccca:	e7e3      	b.n	800cc94 <_scanf_float+0x150>
 800cccc:	9a03      	ldr	r2, [sp, #12]
 800ccce:	2a02      	cmp	r2, #2
 800ccd0:	d059      	beq.n	800cd86 <_scanf_float+0x242>
 800ccd2:	2c01      	cmp	r4, #1
 800ccd4:	d002      	beq.n	800ccdc <_scanf_float+0x198>
 800ccd6:	2c04      	cmp	r4, #4
 800ccd8:	d000      	beq.n	800ccdc <_scanf_float+0x198>
 800ccda:	e764      	b.n	800cba6 <_scanf_float+0x62>
 800ccdc:	3401      	adds	r4, #1
 800ccde:	b2e4      	uxtb	r4, r4
 800cce0:	e7d8      	b.n	800cc94 <_scanf_float+0x150>
 800cce2:	9a03      	ldr	r2, [sp, #12]
 800cce4:	2a01      	cmp	r2, #1
 800cce6:	d000      	beq.n	800ccea <_scanf_float+0x1a6>
 800cce8:	e75d      	b.n	800cba6 <_scanf_float+0x62>
 800ccea:	2202      	movs	r2, #2
 800ccec:	e7ec      	b.n	800ccc8 <_scanf_float+0x184>
 800ccee:	2c00      	cmp	r4, #0
 800ccf0:	d110      	bne.n	800cd14 <_scanf_float+0x1d0>
 800ccf2:	9a01      	ldr	r2, [sp, #4]
 800ccf4:	2a00      	cmp	r2, #0
 800ccf6:	d000      	beq.n	800ccfa <_scanf_float+0x1b6>
 800ccf8:	e758      	b.n	800cbac <_scanf_float+0x68>
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	21e0      	movs	r1, #224	; 0xe0
 800ccfe:	0010      	movs	r0, r2
 800cd00:	00c9      	lsls	r1, r1, #3
 800cd02:	4008      	ands	r0, r1
 800cd04:	4288      	cmp	r0, r1
 800cd06:	d000      	beq.n	800cd0a <_scanf_float+0x1c6>
 800cd08:	e754      	b.n	800cbb4 <_scanf_float+0x70>
 800cd0a:	494e      	ldr	r1, [pc, #312]	; (800ce44 <_scanf_float+0x300>)
 800cd0c:	3401      	adds	r4, #1
 800cd0e:	400a      	ands	r2, r1
 800cd10:	603a      	str	r2, [r7, #0]
 800cd12:	e7bf      	b.n	800cc94 <_scanf_float+0x150>
 800cd14:	21fd      	movs	r1, #253	; 0xfd
 800cd16:	1ee2      	subs	r2, r4, #3
 800cd18:	420a      	tst	r2, r1
 800cd1a:	d000      	beq.n	800cd1e <_scanf_float+0x1da>
 800cd1c:	e743      	b.n	800cba6 <_scanf_float+0x62>
 800cd1e:	e7dd      	b.n	800ccdc <_scanf_float+0x198>
 800cd20:	2c02      	cmp	r4, #2
 800cd22:	d000      	beq.n	800cd26 <_scanf_float+0x1e2>
 800cd24:	e73f      	b.n	800cba6 <_scanf_float+0x62>
 800cd26:	2403      	movs	r4, #3
 800cd28:	e7b4      	b.n	800cc94 <_scanf_float+0x150>
 800cd2a:	2c06      	cmp	r4, #6
 800cd2c:	d000      	beq.n	800cd30 <_scanf_float+0x1ec>
 800cd2e:	e73a      	b.n	800cba6 <_scanf_float+0x62>
 800cd30:	2407      	movs	r4, #7
 800cd32:	e7af      	b.n	800cc94 <_scanf_float+0x150>
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	0591      	lsls	r1, r2, #22
 800cd38:	d400      	bmi.n	800cd3c <_scanf_float+0x1f8>
 800cd3a:	e734      	b.n	800cba6 <_scanf_float+0x62>
 800cd3c:	4942      	ldr	r1, [pc, #264]	; (800ce48 <_scanf_float+0x304>)
 800cd3e:	400a      	ands	r2, r1
 800cd40:	603a      	str	r2, [r7, #0]
 800cd42:	9a01      	ldr	r2, [sp, #4]
 800cd44:	9205      	str	r2, [sp, #20]
 800cd46:	e7a5      	b.n	800cc94 <_scanf_float+0x150>
 800cd48:	21a0      	movs	r1, #160	; 0xa0
 800cd4a:	2080      	movs	r0, #128	; 0x80
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	00c9      	lsls	r1, r1, #3
 800cd50:	4011      	ands	r1, r2
 800cd52:	00c0      	lsls	r0, r0, #3
 800cd54:	4281      	cmp	r1, r0
 800cd56:	d006      	beq.n	800cd66 <_scanf_float+0x222>
 800cd58:	4202      	tst	r2, r0
 800cd5a:	d100      	bne.n	800cd5e <_scanf_float+0x21a>
 800cd5c:	e723      	b.n	800cba6 <_scanf_float+0x62>
 800cd5e:	9901      	ldr	r1, [sp, #4]
 800cd60:	2900      	cmp	r1, #0
 800cd62:	d100      	bne.n	800cd66 <_scanf_float+0x222>
 800cd64:	e726      	b.n	800cbb4 <_scanf_float+0x70>
 800cd66:	0591      	lsls	r1, r2, #22
 800cd68:	d404      	bmi.n	800cd74 <_scanf_float+0x230>
 800cd6a:	9901      	ldr	r1, [sp, #4]
 800cd6c:	9805      	ldr	r0, [sp, #20]
 800cd6e:	9509      	str	r5, [sp, #36]	; 0x24
 800cd70:	1a09      	subs	r1, r1, r0
 800cd72:	9108      	str	r1, [sp, #32]
 800cd74:	4933      	ldr	r1, [pc, #204]	; (800ce44 <_scanf_float+0x300>)
 800cd76:	400a      	ands	r2, r1
 800cd78:	21c0      	movs	r1, #192	; 0xc0
 800cd7a:	0049      	lsls	r1, r1, #1
 800cd7c:	430a      	orrs	r2, r1
 800cd7e:	603a      	str	r2, [r7, #0]
 800cd80:	2200      	movs	r2, #0
 800cd82:	9201      	str	r2, [sp, #4]
 800cd84:	e786      	b.n	800cc94 <_scanf_float+0x150>
 800cd86:	2203      	movs	r2, #3
 800cd88:	e79e      	b.n	800ccc8 <_scanf_float+0x184>
 800cd8a:	23c0      	movs	r3, #192	; 0xc0
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	0031      	movs	r1, r6
 800cd90:	58fb      	ldr	r3, [r7, r3]
 800cd92:	9802      	ldr	r0, [sp, #8]
 800cd94:	4798      	blx	r3
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d100      	bne.n	800cd9c <_scanf_float+0x258>
 800cd9a:	e6f6      	b.n	800cb8a <_scanf_float+0x46>
 800cd9c:	e703      	b.n	800cba6 <_scanf_float+0x62>
 800cd9e:	3d01      	subs	r5, #1
 800cda0:	593b      	ldr	r3, [r7, r4]
 800cda2:	0032      	movs	r2, r6
 800cda4:	7829      	ldrb	r1, [r5, #0]
 800cda6:	9802      	ldr	r0, [sp, #8]
 800cda8:	4798      	blx	r3
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	613b      	str	r3, [r7, #16]
 800cdb0:	e707      	b.n	800cbc2 <_scanf_float+0x7e>
 800cdb2:	1e63      	subs	r3, r4, #1
 800cdb4:	2b06      	cmp	r3, #6
 800cdb6:	d80e      	bhi.n	800cdd6 <_scanf_float+0x292>
 800cdb8:	9503      	str	r5, [sp, #12]
 800cdba:	2c02      	cmp	r4, #2
 800cdbc:	d920      	bls.n	800ce00 <_scanf_float+0x2bc>
 800cdbe:	1b63      	subs	r3, r4, r5
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	9306      	str	r3, [sp, #24]
 800cdc4:	9b03      	ldr	r3, [sp, #12]
 800cdc6:	9a06      	ldr	r2, [sp, #24]
 800cdc8:	189b      	adds	r3, r3, r2
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b03      	cmp	r3, #3
 800cdce:	d827      	bhi.n	800ce20 <_scanf_float+0x2dc>
 800cdd0:	3c03      	subs	r4, #3
 800cdd2:	b2e4      	uxtb	r4, r4
 800cdd4:	1b2d      	subs	r5, r5, r4
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	05da      	lsls	r2, r3, #23
 800cdda:	d552      	bpl.n	800ce82 <_scanf_float+0x33e>
 800cddc:	055b      	lsls	r3, r3, #21
 800cdde:	d535      	bpl.n	800ce4c <_scanf_float+0x308>
 800cde0:	24be      	movs	r4, #190	; 0xbe
 800cde2:	0064      	lsls	r4, r4, #1
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	429d      	cmp	r5, r3
 800cde8:	d800      	bhi.n	800cdec <_scanf_float+0x2a8>
 800cdea:	e6ee      	b.n	800cbca <_scanf_float+0x86>
 800cdec:	3d01      	subs	r5, #1
 800cdee:	593b      	ldr	r3, [r7, r4]
 800cdf0:	0032      	movs	r2, r6
 800cdf2:	7829      	ldrb	r1, [r5, #0]
 800cdf4:	9802      	ldr	r0, [sp, #8]
 800cdf6:	4798      	blx	r3
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	613b      	str	r3, [r7, #16]
 800cdfe:	e7f1      	b.n	800cde4 <_scanf_float+0x2a0>
 800ce00:	24be      	movs	r4, #190	; 0xbe
 800ce02:	0064      	lsls	r4, r4, #1
 800ce04:	9b04      	ldr	r3, [sp, #16]
 800ce06:	429d      	cmp	r5, r3
 800ce08:	d800      	bhi.n	800ce0c <_scanf_float+0x2c8>
 800ce0a:	e6de      	b.n	800cbca <_scanf_float+0x86>
 800ce0c:	3d01      	subs	r5, #1
 800ce0e:	593b      	ldr	r3, [r7, r4]
 800ce10:	0032      	movs	r2, r6
 800ce12:	7829      	ldrb	r1, [r5, #0]
 800ce14:	9802      	ldr	r0, [sp, #8]
 800ce16:	4798      	blx	r3
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	613b      	str	r3, [r7, #16]
 800ce1e:	e7f1      	b.n	800ce04 <_scanf_float+0x2c0>
 800ce20:	9b03      	ldr	r3, [sp, #12]
 800ce22:	0032      	movs	r2, r6
 800ce24:	3b01      	subs	r3, #1
 800ce26:	7819      	ldrb	r1, [r3, #0]
 800ce28:	9303      	str	r3, [sp, #12]
 800ce2a:	23be      	movs	r3, #190	; 0xbe
 800ce2c:	005b      	lsls	r3, r3, #1
 800ce2e:	58fb      	ldr	r3, [r7, r3]
 800ce30:	9802      	ldr	r0, [sp, #8]
 800ce32:	4798      	blx	r3
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	3b01      	subs	r3, #1
 800ce38:	613b      	str	r3, [r7, #16]
 800ce3a:	e7c3      	b.n	800cdc4 <_scanf_float+0x280>
 800ce3c:	fffffeff 	.word	0xfffffeff
 800ce40:	fffffe7f 	.word	0xfffffe7f
 800ce44:	fffff87f 	.word	0xfffff87f
 800ce48:	fffffd7f 	.word	0xfffffd7f
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	1e6c      	subs	r4, r5, #1
 800ce50:	7821      	ldrb	r1, [r4, #0]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	613b      	str	r3, [r7, #16]
 800ce56:	2965      	cmp	r1, #101	; 0x65
 800ce58:	d00c      	beq.n	800ce74 <_scanf_float+0x330>
 800ce5a:	2945      	cmp	r1, #69	; 0x45
 800ce5c:	d00a      	beq.n	800ce74 <_scanf_float+0x330>
 800ce5e:	23be      	movs	r3, #190	; 0xbe
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	58fb      	ldr	r3, [r7, r3]
 800ce64:	0032      	movs	r2, r6
 800ce66:	9802      	ldr	r0, [sp, #8]
 800ce68:	4798      	blx	r3
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	1eac      	subs	r4, r5, #2
 800ce6e:	3b01      	subs	r3, #1
 800ce70:	7821      	ldrb	r1, [r4, #0]
 800ce72:	613b      	str	r3, [r7, #16]
 800ce74:	23be      	movs	r3, #190	; 0xbe
 800ce76:	005b      	lsls	r3, r3, #1
 800ce78:	0032      	movs	r2, r6
 800ce7a:	58fb      	ldr	r3, [r7, r3]
 800ce7c:	9802      	ldr	r0, [sp, #8]
 800ce7e:	4798      	blx	r3
 800ce80:	0025      	movs	r5, r4
 800ce82:	683a      	ldr	r2, [r7, #0]
 800ce84:	2310      	movs	r3, #16
 800ce86:	0011      	movs	r1, r2
 800ce88:	4019      	ands	r1, r3
 800ce8a:	9103      	str	r1, [sp, #12]
 800ce8c:	421a      	tst	r2, r3
 800ce8e:	d15b      	bne.n	800cf48 <_scanf_float+0x404>
 800ce90:	22c0      	movs	r2, #192	; 0xc0
 800ce92:	7029      	strb	r1, [r5, #0]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	00d2      	lsls	r2, r2, #3
 800ce98:	4013      	ands	r3, r2
 800ce9a:	2280      	movs	r2, #128	; 0x80
 800ce9c:	00d2      	lsls	r2, r2, #3
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d11d      	bne.n	800cede <_scanf_float+0x39a>
 800cea2:	9b05      	ldr	r3, [sp, #20]
 800cea4:	9a01      	ldr	r2, [sp, #4]
 800cea6:	9901      	ldr	r1, [sp, #4]
 800cea8:	1a9a      	subs	r2, r3, r2
 800ceaa:	428b      	cmp	r3, r1
 800ceac:	d124      	bne.n	800cef8 <_scanf_float+0x3b4>
 800ceae:	2200      	movs	r2, #0
 800ceb0:	9904      	ldr	r1, [sp, #16]
 800ceb2:	9802      	ldr	r0, [sp, #8]
 800ceb4:	f7ff f91c 	bl	800c0f0 <_strtod_r>
 800ceb8:	9b07      	ldr	r3, [sp, #28]
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	0004      	movs	r4, r0
 800cebe:	000d      	movs	r5, r1
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	0791      	lsls	r1, r2, #30
 800cec4:	d525      	bpl.n	800cf12 <_scanf_float+0x3ce>
 800cec6:	9907      	ldr	r1, [sp, #28]
 800cec8:	1d1a      	adds	r2, r3, #4
 800ceca:	600a      	str	r2, [r1, #0]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	601c      	str	r4, [r3, #0]
 800ced0:	605d      	str	r5, [r3, #4]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3301      	adds	r3, #1
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	9803      	ldr	r0, [sp, #12]
 800ceda:	b00b      	add	sp, #44	; 0x2c
 800cedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cede:	9b08      	ldr	r3, [sp, #32]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d0e4      	beq.n	800ceae <_scanf_float+0x36a>
 800cee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee6:	9a03      	ldr	r2, [sp, #12]
 800cee8:	1c59      	adds	r1, r3, #1
 800ceea:	9802      	ldr	r0, [sp, #8]
 800ceec:	230a      	movs	r3, #10
 800ceee:	f7ff f99b 	bl	800c228 <_strtol_r>
 800cef2:	9b08      	ldr	r3, [sp, #32]
 800cef4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cef6:	1ac2      	subs	r2, r0, r3
 800cef8:	003b      	movs	r3, r7
 800cefa:	3370      	adds	r3, #112	; 0x70
 800cefc:	33ff      	adds	r3, #255	; 0xff
 800cefe:	429d      	cmp	r5, r3
 800cf00:	d302      	bcc.n	800cf08 <_scanf_float+0x3c4>
 800cf02:	003d      	movs	r5, r7
 800cf04:	356f      	adds	r5, #111	; 0x6f
 800cf06:	35ff      	adds	r5, #255	; 0xff
 800cf08:	0028      	movs	r0, r5
 800cf0a:	4910      	ldr	r1, [pc, #64]	; (800cf4c <_scanf_float+0x408>)
 800cf0c:	f000 f91a 	bl	800d144 <siprintf>
 800cf10:	e7cd      	b.n	800ceae <_scanf_float+0x36a>
 800cf12:	1d19      	adds	r1, r3, #4
 800cf14:	0752      	lsls	r2, r2, #29
 800cf16:	d502      	bpl.n	800cf1e <_scanf_float+0x3da>
 800cf18:	9a07      	ldr	r2, [sp, #28]
 800cf1a:	6011      	str	r1, [r2, #0]
 800cf1c:	e7d6      	b.n	800cecc <_scanf_float+0x388>
 800cf1e:	9a07      	ldr	r2, [sp, #28]
 800cf20:	0020      	movs	r0, r4
 800cf22:	6011      	str	r1, [r2, #0]
 800cf24:	681e      	ldr	r6, [r3, #0]
 800cf26:	0022      	movs	r2, r4
 800cf28:	002b      	movs	r3, r5
 800cf2a:	0029      	movs	r1, r5
 800cf2c:	f7f6 f820 	bl	8002f70 <__aeabi_dcmpun>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d004      	beq.n	800cf3e <_scanf_float+0x3fa>
 800cf34:	4806      	ldr	r0, [pc, #24]	; (800cf50 <_scanf_float+0x40c>)
 800cf36:	f000 fb49 	bl	800d5cc <nanf>
 800cf3a:	6030      	str	r0, [r6, #0]
 800cf3c:	e7c9      	b.n	800ced2 <_scanf_float+0x38e>
 800cf3e:	0020      	movs	r0, r4
 800cf40:	0029      	movs	r1, r5
 800cf42:	f7f6 f907 	bl	8003154 <__aeabi_d2f>
 800cf46:	e7f8      	b.n	800cf3a <_scanf_float+0x3f6>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	e63f      	b.n	800cbcc <_scanf_float+0x88>
 800cf4c:	0801204b 	.word	0x0801204b
 800cf50:	08010feb 	.word	0x08010feb

0800cf54 <std>:
 800cf54:	2300      	movs	r3, #0
 800cf56:	b510      	push	{r4, lr}
 800cf58:	0004      	movs	r4, r0
 800cf5a:	6003      	str	r3, [r0, #0]
 800cf5c:	6043      	str	r3, [r0, #4]
 800cf5e:	6083      	str	r3, [r0, #8]
 800cf60:	8181      	strh	r1, [r0, #12]
 800cf62:	6643      	str	r3, [r0, #100]	; 0x64
 800cf64:	81c2      	strh	r2, [r0, #14]
 800cf66:	6103      	str	r3, [r0, #16]
 800cf68:	6143      	str	r3, [r0, #20]
 800cf6a:	6183      	str	r3, [r0, #24]
 800cf6c:	0019      	movs	r1, r3
 800cf6e:	2208      	movs	r2, #8
 800cf70:	305c      	adds	r0, #92	; 0x5c
 800cf72:	f000 f953 	bl	800d21c <memset>
 800cf76:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <std+0x50>)
 800cf78:	6224      	str	r4, [r4, #32]
 800cf7a:	6263      	str	r3, [r4, #36]	; 0x24
 800cf7c:	4b0a      	ldr	r3, [pc, #40]	; (800cfa8 <std+0x54>)
 800cf7e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <std+0x58>)
 800cf82:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf84:	4b0a      	ldr	r3, [pc, #40]	; (800cfb0 <std+0x5c>)
 800cf86:	6323      	str	r3, [r4, #48]	; 0x30
 800cf88:	4b0a      	ldr	r3, [pc, #40]	; (800cfb4 <std+0x60>)
 800cf8a:	429c      	cmp	r4, r3
 800cf8c:	d005      	beq.n	800cf9a <std+0x46>
 800cf8e:	4b0a      	ldr	r3, [pc, #40]	; (800cfb8 <std+0x64>)
 800cf90:	429c      	cmp	r4, r3
 800cf92:	d002      	beq.n	800cf9a <std+0x46>
 800cf94:	4b09      	ldr	r3, [pc, #36]	; (800cfbc <std+0x68>)
 800cf96:	429c      	cmp	r4, r3
 800cf98:	d103      	bne.n	800cfa2 <std+0x4e>
 800cf9a:	0020      	movs	r0, r4
 800cf9c:	3058      	adds	r0, #88	; 0x58
 800cf9e:	f000 faef 	bl	800d580 <__retarget_lock_init_recursive>
 800cfa2:	bd10      	pop	{r4, pc}
 800cfa4:	0800d185 	.word	0x0800d185
 800cfa8:	0800d1ad 	.word	0x0800d1ad
 800cfac:	0800d1e5 	.word	0x0800d1e5
 800cfb0:	0800d211 	.word	0x0800d211
 800cfb4:	20005940 	.word	0x20005940
 800cfb8:	200059a8 	.word	0x200059a8
 800cfbc:	20005a10 	.word	0x20005a10

0800cfc0 <stdio_exit_handler>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	4a03      	ldr	r2, [pc, #12]	; (800cfd0 <stdio_exit_handler+0x10>)
 800cfc4:	4903      	ldr	r1, [pc, #12]	; (800cfd4 <stdio_exit_handler+0x14>)
 800cfc6:	4804      	ldr	r0, [pc, #16]	; (800cfd8 <stdio_exit_handler+0x18>)
 800cfc8:	f000 f86c 	bl	800d0a4 <_fwalk_sglue>
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	46c0      	nop			; (mov r8, r8)
 800cfd0:	200000f4 	.word	0x200000f4
 800cfd4:	0800f825 	.word	0x0800f825
 800cfd8:	2000026c 	.word	0x2000026c

0800cfdc <cleanup_stdio>:
 800cfdc:	6841      	ldr	r1, [r0, #4]
 800cfde:	4b0b      	ldr	r3, [pc, #44]	; (800d00c <cleanup_stdio+0x30>)
 800cfe0:	b510      	push	{r4, lr}
 800cfe2:	0004      	movs	r4, r0
 800cfe4:	4299      	cmp	r1, r3
 800cfe6:	d001      	beq.n	800cfec <cleanup_stdio+0x10>
 800cfe8:	f002 fc1c 	bl	800f824 <_fflush_r>
 800cfec:	68a1      	ldr	r1, [r4, #8]
 800cfee:	4b08      	ldr	r3, [pc, #32]	; (800d010 <cleanup_stdio+0x34>)
 800cff0:	4299      	cmp	r1, r3
 800cff2:	d002      	beq.n	800cffa <cleanup_stdio+0x1e>
 800cff4:	0020      	movs	r0, r4
 800cff6:	f002 fc15 	bl	800f824 <_fflush_r>
 800cffa:	68e1      	ldr	r1, [r4, #12]
 800cffc:	4b05      	ldr	r3, [pc, #20]	; (800d014 <cleanup_stdio+0x38>)
 800cffe:	4299      	cmp	r1, r3
 800d000:	d002      	beq.n	800d008 <cleanup_stdio+0x2c>
 800d002:	0020      	movs	r0, r4
 800d004:	f002 fc0e 	bl	800f824 <_fflush_r>
 800d008:	bd10      	pop	{r4, pc}
 800d00a:	46c0      	nop			; (mov r8, r8)
 800d00c:	20005940 	.word	0x20005940
 800d010:	200059a8 	.word	0x200059a8
 800d014:	20005a10 	.word	0x20005a10

0800d018 <global_stdio_init.part.0>:
 800d018:	b510      	push	{r4, lr}
 800d01a:	4b09      	ldr	r3, [pc, #36]	; (800d040 <global_stdio_init.part.0+0x28>)
 800d01c:	4a09      	ldr	r2, [pc, #36]	; (800d044 <global_stdio_init.part.0+0x2c>)
 800d01e:	2104      	movs	r1, #4
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	4809      	ldr	r0, [pc, #36]	; (800d048 <global_stdio_init.part.0+0x30>)
 800d024:	2200      	movs	r2, #0
 800d026:	f7ff ff95 	bl	800cf54 <std>
 800d02a:	2201      	movs	r2, #1
 800d02c:	2109      	movs	r1, #9
 800d02e:	4807      	ldr	r0, [pc, #28]	; (800d04c <global_stdio_init.part.0+0x34>)
 800d030:	f7ff ff90 	bl	800cf54 <std>
 800d034:	2202      	movs	r2, #2
 800d036:	2112      	movs	r1, #18
 800d038:	4805      	ldr	r0, [pc, #20]	; (800d050 <global_stdio_init.part.0+0x38>)
 800d03a:	f7ff ff8b 	bl	800cf54 <std>
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	20005a78 	.word	0x20005a78
 800d044:	0800cfc1 	.word	0x0800cfc1
 800d048:	20005940 	.word	0x20005940
 800d04c:	200059a8 	.word	0x200059a8
 800d050:	20005a10 	.word	0x20005a10

0800d054 <__sfp_lock_acquire>:
 800d054:	b510      	push	{r4, lr}
 800d056:	4802      	ldr	r0, [pc, #8]	; (800d060 <__sfp_lock_acquire+0xc>)
 800d058:	f000 fa93 	bl	800d582 <__retarget_lock_acquire_recursive>
 800d05c:	bd10      	pop	{r4, pc}
 800d05e:	46c0      	nop			; (mov r8, r8)
 800d060:	20005a81 	.word	0x20005a81

0800d064 <__sfp_lock_release>:
 800d064:	b510      	push	{r4, lr}
 800d066:	4802      	ldr	r0, [pc, #8]	; (800d070 <__sfp_lock_release+0xc>)
 800d068:	f000 fa8c 	bl	800d584 <__retarget_lock_release_recursive>
 800d06c:	bd10      	pop	{r4, pc}
 800d06e:	46c0      	nop			; (mov r8, r8)
 800d070:	20005a81 	.word	0x20005a81

0800d074 <__sinit>:
 800d074:	b510      	push	{r4, lr}
 800d076:	0004      	movs	r4, r0
 800d078:	f7ff ffec 	bl	800d054 <__sfp_lock_acquire>
 800d07c:	6a23      	ldr	r3, [r4, #32]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <__sinit+0x14>
 800d082:	f7ff ffef 	bl	800d064 <__sfp_lock_release>
 800d086:	bd10      	pop	{r4, pc}
 800d088:	4b04      	ldr	r3, [pc, #16]	; (800d09c <__sinit+0x28>)
 800d08a:	6223      	str	r3, [r4, #32]
 800d08c:	4b04      	ldr	r3, [pc, #16]	; (800d0a0 <__sinit+0x2c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1f6      	bne.n	800d082 <__sinit+0xe>
 800d094:	f7ff ffc0 	bl	800d018 <global_stdio_init.part.0>
 800d098:	e7f3      	b.n	800d082 <__sinit+0xe>
 800d09a:	46c0      	nop			; (mov r8, r8)
 800d09c:	0800cfdd 	.word	0x0800cfdd
 800d0a0:	20005a78 	.word	0x20005a78

0800d0a4 <_fwalk_sglue>:
 800d0a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0a6:	0014      	movs	r4, r2
 800d0a8:	2600      	movs	r6, #0
 800d0aa:	9000      	str	r0, [sp, #0]
 800d0ac:	9101      	str	r1, [sp, #4]
 800d0ae:	68a5      	ldr	r5, [r4, #8]
 800d0b0:	6867      	ldr	r7, [r4, #4]
 800d0b2:	3f01      	subs	r7, #1
 800d0b4:	d504      	bpl.n	800d0c0 <_fwalk_sglue+0x1c>
 800d0b6:	6824      	ldr	r4, [r4, #0]
 800d0b8:	2c00      	cmp	r4, #0
 800d0ba:	d1f8      	bne.n	800d0ae <_fwalk_sglue+0xa>
 800d0bc:	0030      	movs	r0, r6
 800d0be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0c0:	89ab      	ldrh	r3, [r5, #12]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d908      	bls.n	800d0d8 <_fwalk_sglue+0x34>
 800d0c6:	220e      	movs	r2, #14
 800d0c8:	5eab      	ldrsh	r3, [r5, r2]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	d004      	beq.n	800d0d8 <_fwalk_sglue+0x34>
 800d0ce:	0029      	movs	r1, r5
 800d0d0:	9800      	ldr	r0, [sp, #0]
 800d0d2:	9b01      	ldr	r3, [sp, #4]
 800d0d4:	4798      	blx	r3
 800d0d6:	4306      	orrs	r6, r0
 800d0d8:	3568      	adds	r5, #104	; 0x68
 800d0da:	e7ea      	b.n	800d0b2 <_fwalk_sglue+0xe>

0800d0dc <sniprintf>:
 800d0dc:	b40c      	push	{r2, r3}
 800d0de:	b530      	push	{r4, r5, lr}
 800d0e0:	4b17      	ldr	r3, [pc, #92]	; (800d140 <sniprintf+0x64>)
 800d0e2:	000c      	movs	r4, r1
 800d0e4:	681d      	ldr	r5, [r3, #0]
 800d0e6:	b09d      	sub	sp, #116	; 0x74
 800d0e8:	2900      	cmp	r1, #0
 800d0ea:	da08      	bge.n	800d0fe <sniprintf+0x22>
 800d0ec:	238b      	movs	r3, #139	; 0x8b
 800d0ee:	2001      	movs	r0, #1
 800d0f0:	602b      	str	r3, [r5, #0]
 800d0f2:	4240      	negs	r0, r0
 800d0f4:	b01d      	add	sp, #116	; 0x74
 800d0f6:	bc30      	pop	{r4, r5}
 800d0f8:	bc08      	pop	{r3}
 800d0fa:	b002      	add	sp, #8
 800d0fc:	4718      	bx	r3
 800d0fe:	2382      	movs	r3, #130	; 0x82
 800d100:	466a      	mov	r2, sp
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	8293      	strh	r3, [r2, #20]
 800d106:	2300      	movs	r3, #0
 800d108:	9002      	str	r0, [sp, #8]
 800d10a:	9006      	str	r0, [sp, #24]
 800d10c:	4299      	cmp	r1, r3
 800d10e:	d000      	beq.n	800d112 <sniprintf+0x36>
 800d110:	1e4b      	subs	r3, r1, #1
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	9307      	str	r3, [sp, #28]
 800d116:	2301      	movs	r3, #1
 800d118:	466a      	mov	r2, sp
 800d11a:	425b      	negs	r3, r3
 800d11c:	82d3      	strh	r3, [r2, #22]
 800d11e:	0028      	movs	r0, r5
 800d120:	ab21      	add	r3, sp, #132	; 0x84
 800d122:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d124:	a902      	add	r1, sp, #8
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	f002 f9f2 	bl	800f510 <_svfiprintf_r>
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	da01      	bge.n	800d134 <sniprintf+0x58>
 800d130:	238b      	movs	r3, #139	; 0x8b
 800d132:	602b      	str	r3, [r5, #0]
 800d134:	2c00      	cmp	r4, #0
 800d136:	d0dd      	beq.n	800d0f4 <sniprintf+0x18>
 800d138:	2200      	movs	r2, #0
 800d13a:	9b02      	ldr	r3, [sp, #8]
 800d13c:	701a      	strb	r2, [r3, #0]
 800d13e:	e7d9      	b.n	800d0f4 <sniprintf+0x18>
 800d140:	200002b8 	.word	0x200002b8

0800d144 <siprintf>:
 800d144:	b40e      	push	{r1, r2, r3}
 800d146:	b500      	push	{lr}
 800d148:	490b      	ldr	r1, [pc, #44]	; (800d178 <siprintf+0x34>)
 800d14a:	b09c      	sub	sp, #112	; 0x70
 800d14c:	ab1d      	add	r3, sp, #116	; 0x74
 800d14e:	9002      	str	r0, [sp, #8]
 800d150:	9006      	str	r0, [sp, #24]
 800d152:	9107      	str	r1, [sp, #28]
 800d154:	9104      	str	r1, [sp, #16]
 800d156:	4809      	ldr	r0, [pc, #36]	; (800d17c <siprintf+0x38>)
 800d158:	4909      	ldr	r1, [pc, #36]	; (800d180 <siprintf+0x3c>)
 800d15a:	cb04      	ldmia	r3!, {r2}
 800d15c:	9105      	str	r1, [sp, #20]
 800d15e:	6800      	ldr	r0, [r0, #0]
 800d160:	a902      	add	r1, sp, #8
 800d162:	9301      	str	r3, [sp, #4]
 800d164:	f002 f9d4 	bl	800f510 <_svfiprintf_r>
 800d168:	2200      	movs	r2, #0
 800d16a:	9b02      	ldr	r3, [sp, #8]
 800d16c:	701a      	strb	r2, [r3, #0]
 800d16e:	b01c      	add	sp, #112	; 0x70
 800d170:	bc08      	pop	{r3}
 800d172:	b003      	add	sp, #12
 800d174:	4718      	bx	r3
 800d176:	46c0      	nop			; (mov r8, r8)
 800d178:	7fffffff 	.word	0x7fffffff
 800d17c:	200002b8 	.word	0x200002b8
 800d180:	ffff0208 	.word	0xffff0208

0800d184 <__sread>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	000c      	movs	r4, r1
 800d188:	250e      	movs	r5, #14
 800d18a:	5f49      	ldrsh	r1, [r1, r5]
 800d18c:	f000 f994 	bl	800d4b8 <_read_r>
 800d190:	2800      	cmp	r0, #0
 800d192:	db03      	blt.n	800d19c <__sread+0x18>
 800d194:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d196:	181b      	adds	r3, r3, r0
 800d198:	6563      	str	r3, [r4, #84]	; 0x54
 800d19a:	bd70      	pop	{r4, r5, r6, pc}
 800d19c:	89a3      	ldrh	r3, [r4, #12]
 800d19e:	4a02      	ldr	r2, [pc, #8]	; (800d1a8 <__sread+0x24>)
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	81a3      	strh	r3, [r4, #12]
 800d1a4:	e7f9      	b.n	800d19a <__sread+0x16>
 800d1a6:	46c0      	nop			; (mov r8, r8)
 800d1a8:	ffffefff 	.word	0xffffefff

0800d1ac <__swrite>:
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ae:	001f      	movs	r7, r3
 800d1b0:	898b      	ldrh	r3, [r1, #12]
 800d1b2:	0005      	movs	r5, r0
 800d1b4:	000c      	movs	r4, r1
 800d1b6:	0016      	movs	r6, r2
 800d1b8:	05db      	lsls	r3, r3, #23
 800d1ba:	d505      	bpl.n	800d1c8 <__swrite+0x1c>
 800d1bc:	230e      	movs	r3, #14
 800d1be:	5ec9      	ldrsh	r1, [r1, r3]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	f000 f964 	bl	800d490 <_lseek_r>
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	4a05      	ldr	r2, [pc, #20]	; (800d1e0 <__swrite+0x34>)
 800d1cc:	0028      	movs	r0, r5
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	81a3      	strh	r3, [r4, #12]
 800d1d2:	0032      	movs	r2, r6
 800d1d4:	230e      	movs	r3, #14
 800d1d6:	5ee1      	ldrsh	r1, [r4, r3]
 800d1d8:	003b      	movs	r3, r7
 800d1da:	f000 f993 	bl	800d504 <_write_r>
 800d1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1e0:	ffffefff 	.word	0xffffefff

0800d1e4 <__sseek>:
 800d1e4:	b570      	push	{r4, r5, r6, lr}
 800d1e6:	000c      	movs	r4, r1
 800d1e8:	250e      	movs	r5, #14
 800d1ea:	5f49      	ldrsh	r1, [r1, r5]
 800d1ec:	f000 f950 	bl	800d490 <_lseek_r>
 800d1f0:	89a3      	ldrh	r3, [r4, #12]
 800d1f2:	1c42      	adds	r2, r0, #1
 800d1f4:	d103      	bne.n	800d1fe <__sseek+0x1a>
 800d1f6:	4a05      	ldr	r2, [pc, #20]	; (800d20c <__sseek+0x28>)
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	81a3      	strh	r3, [r4, #12]
 800d1fc:	bd70      	pop	{r4, r5, r6, pc}
 800d1fe:	2280      	movs	r2, #128	; 0x80
 800d200:	0152      	lsls	r2, r2, #5
 800d202:	4313      	orrs	r3, r2
 800d204:	81a3      	strh	r3, [r4, #12]
 800d206:	6560      	str	r0, [r4, #84]	; 0x54
 800d208:	e7f8      	b.n	800d1fc <__sseek+0x18>
 800d20a:	46c0      	nop			; (mov r8, r8)
 800d20c:	ffffefff 	.word	0xffffefff

0800d210 <__sclose>:
 800d210:	b510      	push	{r4, lr}
 800d212:	230e      	movs	r3, #14
 800d214:	5ec9      	ldrsh	r1, [r1, r3]
 800d216:	f000 f8cb 	bl	800d3b0 <_close_r>
 800d21a:	bd10      	pop	{r4, pc}

0800d21c <memset>:
 800d21c:	0003      	movs	r3, r0
 800d21e:	1882      	adds	r2, r0, r2
 800d220:	4293      	cmp	r3, r2
 800d222:	d100      	bne.n	800d226 <memset+0xa>
 800d224:	4770      	bx	lr
 800d226:	7019      	strb	r1, [r3, #0]
 800d228:	3301      	adds	r3, #1
 800d22a:	e7f9      	b.n	800d220 <memset+0x4>

0800d22c <strcat>:
 800d22c:	0002      	movs	r2, r0
 800d22e:	b510      	push	{r4, lr}
 800d230:	7813      	ldrb	r3, [r2, #0]
 800d232:	0014      	movs	r4, r2
 800d234:	3201      	adds	r2, #1
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1fa      	bne.n	800d230 <strcat+0x4>
 800d23a:	5cca      	ldrb	r2, [r1, r3]
 800d23c:	54e2      	strb	r2, [r4, r3]
 800d23e:	3301      	adds	r3, #1
 800d240:	2a00      	cmp	r2, #0
 800d242:	d1fa      	bne.n	800d23a <strcat+0xe>
 800d244:	bd10      	pop	{r4, pc}

0800d246 <strchr>:
 800d246:	b2c9      	uxtb	r1, r1
 800d248:	7803      	ldrb	r3, [r0, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d004      	beq.n	800d258 <strchr+0x12>
 800d24e:	428b      	cmp	r3, r1
 800d250:	d100      	bne.n	800d254 <strchr+0xe>
 800d252:	4770      	bx	lr
 800d254:	3001      	adds	r0, #1
 800d256:	e7f7      	b.n	800d248 <strchr+0x2>
 800d258:	424b      	negs	r3, r1
 800d25a:	4159      	adcs	r1, r3
 800d25c:	4249      	negs	r1, r1
 800d25e:	4008      	ands	r0, r1
 800d260:	e7f7      	b.n	800d252 <strchr+0xc>

0800d262 <strncmp>:
 800d262:	b530      	push	{r4, r5, lr}
 800d264:	0005      	movs	r5, r0
 800d266:	1e10      	subs	r0, r2, #0
 800d268:	d00b      	beq.n	800d282 <strncmp+0x20>
 800d26a:	2400      	movs	r4, #0
 800d26c:	3a01      	subs	r2, #1
 800d26e:	5d2b      	ldrb	r3, [r5, r4]
 800d270:	5d08      	ldrb	r0, [r1, r4]
 800d272:	4283      	cmp	r3, r0
 800d274:	d104      	bne.n	800d280 <strncmp+0x1e>
 800d276:	42a2      	cmp	r2, r4
 800d278:	d002      	beq.n	800d280 <strncmp+0x1e>
 800d27a:	3401      	adds	r4, #1
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1f6      	bne.n	800d26e <strncmp+0xc>
 800d280:	1a18      	subs	r0, r3, r0
 800d282:	bd30      	pop	{r4, r5, pc}

0800d284 <strncpy>:
 800d284:	0003      	movs	r3, r0
 800d286:	b530      	push	{r4, r5, lr}
 800d288:	001d      	movs	r5, r3
 800d28a:	2a00      	cmp	r2, #0
 800d28c:	d006      	beq.n	800d29c <strncpy+0x18>
 800d28e:	780c      	ldrb	r4, [r1, #0]
 800d290:	3a01      	subs	r2, #1
 800d292:	3301      	adds	r3, #1
 800d294:	702c      	strb	r4, [r5, #0]
 800d296:	3101      	adds	r1, #1
 800d298:	2c00      	cmp	r4, #0
 800d29a:	d1f5      	bne.n	800d288 <strncpy+0x4>
 800d29c:	2100      	movs	r1, #0
 800d29e:	189a      	adds	r2, r3, r2
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d100      	bne.n	800d2a6 <strncpy+0x22>
 800d2a4:	bd30      	pop	{r4, r5, pc}
 800d2a6:	7019      	strb	r1, [r3, #0]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	e7f9      	b.n	800d2a0 <strncpy+0x1c>

0800d2ac <strtok>:
 800d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ae:	4b16      	ldr	r3, [pc, #88]	; (800d308 <strtok+0x5c>)
 800d2b0:	0005      	movs	r5, r0
 800d2b2:	681f      	ldr	r7, [r3, #0]
 800d2b4:	000e      	movs	r6, r1
 800d2b6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800d2b8:	2c00      	cmp	r4, #0
 800d2ba:	d11d      	bne.n	800d2f8 <strtok+0x4c>
 800d2bc:	2050      	movs	r0, #80	; 0x50
 800d2be:	f7fe f837 	bl	800b330 <malloc>
 800d2c2:	1e02      	subs	r2, r0, #0
 800d2c4:	6478      	str	r0, [r7, #68]	; 0x44
 800d2c6:	d104      	bne.n	800d2d2 <strtok+0x26>
 800d2c8:	215b      	movs	r1, #91	; 0x5b
 800d2ca:	4b10      	ldr	r3, [pc, #64]	; (800d30c <strtok+0x60>)
 800d2cc:	4810      	ldr	r0, [pc, #64]	; (800d310 <strtok+0x64>)
 800d2ce:	f000 f981 	bl	800d5d4 <__assert_func>
 800d2d2:	6004      	str	r4, [r0, #0]
 800d2d4:	6044      	str	r4, [r0, #4]
 800d2d6:	6084      	str	r4, [r0, #8]
 800d2d8:	60c4      	str	r4, [r0, #12]
 800d2da:	6104      	str	r4, [r0, #16]
 800d2dc:	6144      	str	r4, [r0, #20]
 800d2de:	6184      	str	r4, [r0, #24]
 800d2e0:	6284      	str	r4, [r0, #40]	; 0x28
 800d2e2:	62c4      	str	r4, [r0, #44]	; 0x2c
 800d2e4:	6304      	str	r4, [r0, #48]	; 0x30
 800d2e6:	6344      	str	r4, [r0, #52]	; 0x34
 800d2e8:	6384      	str	r4, [r0, #56]	; 0x38
 800d2ea:	63c4      	str	r4, [r0, #60]	; 0x3c
 800d2ec:	6404      	str	r4, [r0, #64]	; 0x40
 800d2ee:	6444      	str	r4, [r0, #68]	; 0x44
 800d2f0:	6484      	str	r4, [r0, #72]	; 0x48
 800d2f2:	64c4      	str	r4, [r0, #76]	; 0x4c
 800d2f4:	7704      	strb	r4, [r0, #28]
 800d2f6:	6244      	str	r4, [r0, #36]	; 0x24
 800d2f8:	0031      	movs	r1, r6
 800d2fa:	0028      	movs	r0, r5
 800d2fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2fe:	2301      	movs	r3, #1
 800d300:	f000 f808 	bl	800d314 <__strtok_r>
 800d304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d306:	46c0      	nop			; (mov r8, r8)
 800d308:	200002b8 	.word	0x200002b8
 800d30c:	08012050 	.word	0x08012050
 800d310:	08012067 	.word	0x08012067

0800d314 <__strtok_r>:
 800d314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d316:	2800      	cmp	r0, #0
 800d318:	d102      	bne.n	800d320 <__strtok_r+0xc>
 800d31a:	6810      	ldr	r0, [r2, #0]
 800d31c:	2800      	cmp	r0, #0
 800d31e:	d013      	beq.n	800d348 <__strtok_r+0x34>
 800d320:	0004      	movs	r4, r0
 800d322:	0020      	movs	r0, r4
 800d324:	000e      	movs	r6, r1
 800d326:	7805      	ldrb	r5, [r0, #0]
 800d328:	3401      	adds	r4, #1
 800d32a:	7837      	ldrb	r7, [r6, #0]
 800d32c:	2f00      	cmp	r7, #0
 800d32e:	d104      	bne.n	800d33a <__strtok_r+0x26>
 800d330:	2d00      	cmp	r5, #0
 800d332:	d10f      	bne.n	800d354 <__strtok_r+0x40>
 800d334:	0028      	movs	r0, r5
 800d336:	6015      	str	r5, [r2, #0]
 800d338:	e006      	b.n	800d348 <__strtok_r+0x34>
 800d33a:	3601      	adds	r6, #1
 800d33c:	42bd      	cmp	r5, r7
 800d33e:	d1f4      	bne.n	800d32a <__strtok_r+0x16>
 800d340:	2b00      	cmp	r3, #0
 800d342:	d1ee      	bne.n	800d322 <__strtok_r+0xe>
 800d344:	6014      	str	r4, [r2, #0]
 800d346:	7003      	strb	r3, [r0, #0]
 800d348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d34a:	002f      	movs	r7, r5
 800d34c:	e00f      	b.n	800d36e <__strtok_r+0x5a>
 800d34e:	3301      	adds	r3, #1
 800d350:	2e00      	cmp	r6, #0
 800d352:	d104      	bne.n	800d35e <__strtok_r+0x4a>
 800d354:	0023      	movs	r3, r4
 800d356:	3401      	adds	r4, #1
 800d358:	781d      	ldrb	r5, [r3, #0]
 800d35a:	0027      	movs	r7, r4
 800d35c:	000b      	movs	r3, r1
 800d35e:	781e      	ldrb	r6, [r3, #0]
 800d360:	42b5      	cmp	r5, r6
 800d362:	d1f4      	bne.n	800d34e <__strtok_r+0x3a>
 800d364:	2d00      	cmp	r5, #0
 800d366:	d0f0      	beq.n	800d34a <__strtok_r+0x36>
 800d368:	2300      	movs	r3, #0
 800d36a:	3c01      	subs	r4, #1
 800d36c:	7023      	strb	r3, [r4, #0]
 800d36e:	6017      	str	r7, [r2, #0]
 800d370:	e7ea      	b.n	800d348 <__strtok_r+0x34>

0800d372 <strtok_r>:
 800d372:	b510      	push	{r4, lr}
 800d374:	2301      	movs	r3, #1
 800d376:	f7ff ffcd 	bl	800d314 <__strtok_r>
 800d37a:	bd10      	pop	{r4, pc}

0800d37c <strstr>:
 800d37c:	780a      	ldrb	r2, [r1, #0]
 800d37e:	b530      	push	{r4, r5, lr}
 800d380:	2a00      	cmp	r2, #0
 800d382:	d10c      	bne.n	800d39e <strstr+0x22>
 800d384:	bd30      	pop	{r4, r5, pc}
 800d386:	429a      	cmp	r2, r3
 800d388:	d108      	bne.n	800d39c <strstr+0x20>
 800d38a:	2301      	movs	r3, #1
 800d38c:	5ccc      	ldrb	r4, [r1, r3]
 800d38e:	2c00      	cmp	r4, #0
 800d390:	d0f8      	beq.n	800d384 <strstr+0x8>
 800d392:	5cc5      	ldrb	r5, [r0, r3]
 800d394:	42a5      	cmp	r5, r4
 800d396:	d101      	bne.n	800d39c <strstr+0x20>
 800d398:	3301      	adds	r3, #1
 800d39a:	e7f7      	b.n	800d38c <strstr+0x10>
 800d39c:	3001      	adds	r0, #1
 800d39e:	7803      	ldrb	r3, [r0, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1f0      	bne.n	800d386 <strstr+0xa>
 800d3a4:	0018      	movs	r0, r3
 800d3a6:	e7ed      	b.n	800d384 <strstr+0x8>

0800d3a8 <_localeconv_r>:
 800d3a8:	4800      	ldr	r0, [pc, #0]	; (800d3ac <_localeconv_r+0x4>)
 800d3aa:	4770      	bx	lr
 800d3ac:	200001f0 	.word	0x200001f0

0800d3b0 <_close_r>:
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	b570      	push	{r4, r5, r6, lr}
 800d3b4:	4d06      	ldr	r5, [pc, #24]	; (800d3d0 <_close_r+0x20>)
 800d3b6:	0004      	movs	r4, r0
 800d3b8:	0008      	movs	r0, r1
 800d3ba:	602b      	str	r3, [r5, #0]
 800d3bc:	f7f9 fac0 	bl	8006940 <_close>
 800d3c0:	1c43      	adds	r3, r0, #1
 800d3c2:	d103      	bne.n	800d3cc <_close_r+0x1c>
 800d3c4:	682b      	ldr	r3, [r5, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d000      	beq.n	800d3cc <_close_r+0x1c>
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	bd70      	pop	{r4, r5, r6, pc}
 800d3ce:	46c0      	nop			; (mov r8, r8)
 800d3d0:	20005a7c 	.word	0x20005a7c

0800d3d4 <_reclaim_reent>:
 800d3d4:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <_reclaim_reent+0xb8>)
 800d3d6:	b570      	push	{r4, r5, r6, lr}
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	0004      	movs	r4, r0
 800d3dc:	4283      	cmp	r3, r0
 800d3de:	d042      	beq.n	800d466 <_reclaim_reent+0x92>
 800d3e0:	69c3      	ldr	r3, [r0, #28]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00a      	beq.n	800d3fc <_reclaim_reent+0x28>
 800d3e6:	2500      	movs	r5, #0
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	42ab      	cmp	r3, r5
 800d3ec:	d140      	bne.n	800d470 <_reclaim_reent+0x9c>
 800d3ee:	69e3      	ldr	r3, [r4, #28]
 800d3f0:	6819      	ldr	r1, [r3, #0]
 800d3f2:	2900      	cmp	r1, #0
 800d3f4:	d002      	beq.n	800d3fc <_reclaim_reent+0x28>
 800d3f6:	0020      	movs	r0, r4
 800d3f8:	f000 ffa8 	bl	800e34c <_free_r>
 800d3fc:	6961      	ldr	r1, [r4, #20]
 800d3fe:	2900      	cmp	r1, #0
 800d400:	d002      	beq.n	800d408 <_reclaim_reent+0x34>
 800d402:	0020      	movs	r0, r4
 800d404:	f000 ffa2 	bl	800e34c <_free_r>
 800d408:	69e1      	ldr	r1, [r4, #28]
 800d40a:	2900      	cmp	r1, #0
 800d40c:	d002      	beq.n	800d414 <_reclaim_reent+0x40>
 800d40e:	0020      	movs	r0, r4
 800d410:	f000 ff9c 	bl	800e34c <_free_r>
 800d414:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d416:	2900      	cmp	r1, #0
 800d418:	d002      	beq.n	800d420 <_reclaim_reent+0x4c>
 800d41a:	0020      	movs	r0, r4
 800d41c:	f000 ff96 	bl	800e34c <_free_r>
 800d420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d422:	2900      	cmp	r1, #0
 800d424:	d002      	beq.n	800d42c <_reclaim_reent+0x58>
 800d426:	0020      	movs	r0, r4
 800d428:	f000 ff90 	bl	800e34c <_free_r>
 800d42c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d42e:	2900      	cmp	r1, #0
 800d430:	d002      	beq.n	800d438 <_reclaim_reent+0x64>
 800d432:	0020      	movs	r0, r4
 800d434:	f000 ff8a 	bl	800e34c <_free_r>
 800d438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d43a:	2900      	cmp	r1, #0
 800d43c:	d002      	beq.n	800d444 <_reclaim_reent+0x70>
 800d43e:	0020      	movs	r0, r4
 800d440:	f000 ff84 	bl	800e34c <_free_r>
 800d444:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d446:	2900      	cmp	r1, #0
 800d448:	d002      	beq.n	800d450 <_reclaim_reent+0x7c>
 800d44a:	0020      	movs	r0, r4
 800d44c:	f000 ff7e 	bl	800e34c <_free_r>
 800d450:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d452:	2900      	cmp	r1, #0
 800d454:	d002      	beq.n	800d45c <_reclaim_reent+0x88>
 800d456:	0020      	movs	r0, r4
 800d458:	f000 ff78 	bl	800e34c <_free_r>
 800d45c:	6a23      	ldr	r3, [r4, #32]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <_reclaim_reent+0x92>
 800d462:	0020      	movs	r0, r4
 800d464:	4798      	blx	r3
 800d466:	bd70      	pop	{r4, r5, r6, pc}
 800d468:	5949      	ldr	r1, [r1, r5]
 800d46a:	2900      	cmp	r1, #0
 800d46c:	d108      	bne.n	800d480 <_reclaim_reent+0xac>
 800d46e:	3504      	adds	r5, #4
 800d470:	69e3      	ldr	r3, [r4, #28]
 800d472:	68d9      	ldr	r1, [r3, #12]
 800d474:	2d80      	cmp	r5, #128	; 0x80
 800d476:	d1f7      	bne.n	800d468 <_reclaim_reent+0x94>
 800d478:	0020      	movs	r0, r4
 800d47a:	f000 ff67 	bl	800e34c <_free_r>
 800d47e:	e7b6      	b.n	800d3ee <_reclaim_reent+0x1a>
 800d480:	680e      	ldr	r6, [r1, #0]
 800d482:	0020      	movs	r0, r4
 800d484:	f000 ff62 	bl	800e34c <_free_r>
 800d488:	0031      	movs	r1, r6
 800d48a:	e7ee      	b.n	800d46a <_reclaim_reent+0x96>
 800d48c:	200002b8 	.word	0x200002b8

0800d490 <_lseek_r>:
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	0004      	movs	r4, r0
 800d494:	0008      	movs	r0, r1
 800d496:	0011      	movs	r1, r2
 800d498:	001a      	movs	r2, r3
 800d49a:	2300      	movs	r3, #0
 800d49c:	4d05      	ldr	r5, [pc, #20]	; (800d4b4 <_lseek_r+0x24>)
 800d49e:	602b      	str	r3, [r5, #0]
 800d4a0:	f7f9 fa58 	bl	8006954 <_lseek>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	d103      	bne.n	800d4b0 <_lseek_r+0x20>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d000      	beq.n	800d4b0 <_lseek_r+0x20>
 800d4ae:	6023      	str	r3, [r4, #0]
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
 800d4b2:	46c0      	nop			; (mov r8, r8)
 800d4b4:	20005a7c 	.word	0x20005a7c

0800d4b8 <_read_r>:
 800d4b8:	b570      	push	{r4, r5, r6, lr}
 800d4ba:	0004      	movs	r4, r0
 800d4bc:	0008      	movs	r0, r1
 800d4be:	0011      	movs	r1, r2
 800d4c0:	001a      	movs	r2, r3
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	4d05      	ldr	r5, [pc, #20]	; (800d4dc <_read_r+0x24>)
 800d4c6:	602b      	str	r3, [r5, #0]
 800d4c8:	f7f9 fa20 	bl	800690c <_read>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d103      	bne.n	800d4d8 <_read_r+0x20>
 800d4d0:	682b      	ldr	r3, [r5, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d000      	beq.n	800d4d8 <_read_r+0x20>
 800d4d6:	6023      	str	r3, [r4, #0]
 800d4d8:	bd70      	pop	{r4, r5, r6, pc}
 800d4da:	46c0      	nop			; (mov r8, r8)
 800d4dc:	20005a7c 	.word	0x20005a7c

0800d4e0 <_sbrk_r>:
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	b570      	push	{r4, r5, r6, lr}
 800d4e4:	4d06      	ldr	r5, [pc, #24]	; (800d500 <_sbrk_r+0x20>)
 800d4e6:	0004      	movs	r4, r0
 800d4e8:	0008      	movs	r0, r1
 800d4ea:	602b      	str	r3, [r5, #0]
 800d4ec:	f7f9 fa34 	bl	8006958 <_sbrk>
 800d4f0:	1c43      	adds	r3, r0, #1
 800d4f2:	d103      	bne.n	800d4fc <_sbrk_r+0x1c>
 800d4f4:	682b      	ldr	r3, [r5, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d000      	beq.n	800d4fc <_sbrk_r+0x1c>
 800d4fa:	6023      	str	r3, [r4, #0]
 800d4fc:	bd70      	pop	{r4, r5, r6, pc}
 800d4fe:	46c0      	nop			; (mov r8, r8)
 800d500:	20005a7c 	.word	0x20005a7c

0800d504 <_write_r>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	0004      	movs	r4, r0
 800d508:	0008      	movs	r0, r1
 800d50a:	0011      	movs	r1, r2
 800d50c:	001a      	movs	r2, r3
 800d50e:	2300      	movs	r3, #0
 800d510:	4d05      	ldr	r5, [pc, #20]	; (800d528 <_write_r+0x24>)
 800d512:	602b      	str	r3, [r5, #0]
 800d514:	f7f9 fa07 	bl	8006926 <_write>
 800d518:	1c43      	adds	r3, r0, #1
 800d51a:	d103      	bne.n	800d524 <_write_r+0x20>
 800d51c:	682b      	ldr	r3, [r5, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d000      	beq.n	800d524 <_write_r+0x20>
 800d522:	6023      	str	r3, [r4, #0]
 800d524:	bd70      	pop	{r4, r5, r6, pc}
 800d526:	46c0      	nop			; (mov r8, r8)
 800d528:	20005a7c 	.word	0x20005a7c

0800d52c <__errno>:
 800d52c:	4b01      	ldr	r3, [pc, #4]	; (800d534 <__errno+0x8>)
 800d52e:	6818      	ldr	r0, [r3, #0]
 800d530:	4770      	bx	lr
 800d532:	46c0      	nop			; (mov r8, r8)
 800d534:	200002b8 	.word	0x200002b8

0800d538 <__libc_init_array>:
 800d538:	b570      	push	{r4, r5, r6, lr}
 800d53a:	2600      	movs	r6, #0
 800d53c:	4c0c      	ldr	r4, [pc, #48]	; (800d570 <__libc_init_array+0x38>)
 800d53e:	4d0d      	ldr	r5, [pc, #52]	; (800d574 <__libc_init_array+0x3c>)
 800d540:	1b64      	subs	r4, r4, r5
 800d542:	10a4      	asrs	r4, r4, #2
 800d544:	42a6      	cmp	r6, r4
 800d546:	d109      	bne.n	800d55c <__libc_init_array+0x24>
 800d548:	2600      	movs	r6, #0
 800d54a:	f003 fbef 	bl	8010d2c <_init>
 800d54e:	4c0a      	ldr	r4, [pc, #40]	; (800d578 <__libc_init_array+0x40>)
 800d550:	4d0a      	ldr	r5, [pc, #40]	; (800d57c <__libc_init_array+0x44>)
 800d552:	1b64      	subs	r4, r4, r5
 800d554:	10a4      	asrs	r4, r4, #2
 800d556:	42a6      	cmp	r6, r4
 800d558:	d105      	bne.n	800d566 <__libc_init_array+0x2e>
 800d55a:	bd70      	pop	{r4, r5, r6, pc}
 800d55c:	00b3      	lsls	r3, r6, #2
 800d55e:	58eb      	ldr	r3, [r5, r3]
 800d560:	4798      	blx	r3
 800d562:	3601      	adds	r6, #1
 800d564:	e7ee      	b.n	800d544 <__libc_init_array+0xc>
 800d566:	00b3      	lsls	r3, r6, #2
 800d568:	58eb      	ldr	r3, [r5, r3]
 800d56a:	4798      	blx	r3
 800d56c:	3601      	adds	r6, #1
 800d56e:	e7f2      	b.n	800d556 <__libc_init_array+0x1e>
 800d570:	08012378 	.word	0x08012378
 800d574:	08012378 	.word	0x08012378
 800d578:	0801237c 	.word	0x0801237c
 800d57c:	08012378 	.word	0x08012378

0800d580 <__retarget_lock_init_recursive>:
 800d580:	4770      	bx	lr

0800d582 <__retarget_lock_acquire_recursive>:
 800d582:	4770      	bx	lr

0800d584 <__retarget_lock_release_recursive>:
 800d584:	4770      	bx	lr

0800d586 <strcpy>:
 800d586:	0003      	movs	r3, r0
 800d588:	780a      	ldrb	r2, [r1, #0]
 800d58a:	3101      	adds	r1, #1
 800d58c:	701a      	strb	r2, [r3, #0]
 800d58e:	3301      	adds	r3, #1
 800d590:	2a00      	cmp	r2, #0
 800d592:	d1f9      	bne.n	800d588 <strcpy+0x2>
 800d594:	4770      	bx	lr

0800d596 <memchr>:
 800d596:	b2c9      	uxtb	r1, r1
 800d598:	1882      	adds	r2, r0, r2
 800d59a:	4290      	cmp	r0, r2
 800d59c:	d101      	bne.n	800d5a2 <memchr+0xc>
 800d59e:	2000      	movs	r0, #0
 800d5a0:	4770      	bx	lr
 800d5a2:	7803      	ldrb	r3, [r0, #0]
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	d0fb      	beq.n	800d5a0 <memchr+0xa>
 800d5a8:	3001      	adds	r0, #1
 800d5aa:	e7f6      	b.n	800d59a <memchr+0x4>

0800d5ac <memcpy>:
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	b510      	push	{r4, lr}
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d100      	bne.n	800d5b6 <memcpy+0xa>
 800d5b4:	bd10      	pop	{r4, pc}
 800d5b6:	5ccc      	ldrb	r4, [r1, r3]
 800d5b8:	54c4      	strb	r4, [r0, r3]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	e7f8      	b.n	800d5b0 <memcpy+0x4>
	...

0800d5c0 <nan>:
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	4901      	ldr	r1, [pc, #4]	; (800d5c8 <nan+0x8>)
 800d5c4:	4770      	bx	lr
 800d5c6:	46c0      	nop			; (mov r8, r8)
 800d5c8:	7ff80000 	.word	0x7ff80000

0800d5cc <nanf>:
 800d5cc:	4800      	ldr	r0, [pc, #0]	; (800d5d0 <nanf+0x4>)
 800d5ce:	4770      	bx	lr
 800d5d0:	7fc00000 	.word	0x7fc00000

0800d5d4 <__assert_func>:
 800d5d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d5d6:	0014      	movs	r4, r2
 800d5d8:	001a      	movs	r2, r3
 800d5da:	4b09      	ldr	r3, [pc, #36]	; (800d600 <__assert_func+0x2c>)
 800d5dc:	0005      	movs	r5, r0
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	000e      	movs	r6, r1
 800d5e2:	68d8      	ldr	r0, [r3, #12]
 800d5e4:	4b07      	ldr	r3, [pc, #28]	; (800d604 <__assert_func+0x30>)
 800d5e6:	2c00      	cmp	r4, #0
 800d5e8:	d101      	bne.n	800d5ee <__assert_func+0x1a>
 800d5ea:	4b07      	ldr	r3, [pc, #28]	; (800d608 <__assert_func+0x34>)
 800d5ec:	001c      	movs	r4, r3
 800d5ee:	4907      	ldr	r1, [pc, #28]	; (800d60c <__assert_func+0x38>)
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	9402      	str	r4, [sp, #8]
 800d5f4:	002b      	movs	r3, r5
 800d5f6:	9600      	str	r6, [sp, #0]
 800d5f8:	f002 f940 	bl	800f87c <fiprintf>
 800d5fc:	f002 f961 	bl	800f8c2 <abort>
 800d600:	200002b8 	.word	0x200002b8
 800d604:	080120c7 	.word	0x080120c7
 800d608:	08010feb 	.word	0x08010feb
 800d60c:	080120d4 	.word	0x080120d4

0800d610 <quorem>:
 800d610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d612:	6902      	ldr	r2, [r0, #16]
 800d614:	690b      	ldr	r3, [r1, #16]
 800d616:	b089      	sub	sp, #36	; 0x24
 800d618:	0007      	movs	r7, r0
 800d61a:	9104      	str	r1, [sp, #16]
 800d61c:	2000      	movs	r0, #0
 800d61e:	429a      	cmp	r2, r3
 800d620:	db69      	blt.n	800d6f6 <quorem+0xe6>
 800d622:	3b01      	subs	r3, #1
 800d624:	009c      	lsls	r4, r3, #2
 800d626:	9301      	str	r3, [sp, #4]
 800d628:	000b      	movs	r3, r1
 800d62a:	3314      	adds	r3, #20
 800d62c:	9306      	str	r3, [sp, #24]
 800d62e:	191b      	adds	r3, r3, r4
 800d630:	9305      	str	r3, [sp, #20]
 800d632:	003b      	movs	r3, r7
 800d634:	3314      	adds	r3, #20
 800d636:	9303      	str	r3, [sp, #12]
 800d638:	191c      	adds	r4, r3, r4
 800d63a:	9b05      	ldr	r3, [sp, #20]
 800d63c:	6826      	ldr	r6, [r4, #0]
 800d63e:	681d      	ldr	r5, [r3, #0]
 800d640:	0030      	movs	r0, r6
 800d642:	3501      	adds	r5, #1
 800d644:	0029      	movs	r1, r5
 800d646:	f7f2 fd85 	bl	8000154 <__udivsi3>
 800d64a:	9002      	str	r0, [sp, #8]
 800d64c:	42ae      	cmp	r6, r5
 800d64e:	d329      	bcc.n	800d6a4 <quorem+0x94>
 800d650:	9b06      	ldr	r3, [sp, #24]
 800d652:	2600      	movs	r6, #0
 800d654:	469c      	mov	ip, r3
 800d656:	9d03      	ldr	r5, [sp, #12]
 800d658:	9606      	str	r6, [sp, #24]
 800d65a:	4662      	mov	r2, ip
 800d65c:	ca08      	ldmia	r2!, {r3}
 800d65e:	6828      	ldr	r0, [r5, #0]
 800d660:	4694      	mov	ip, r2
 800d662:	9a02      	ldr	r2, [sp, #8]
 800d664:	b299      	uxth	r1, r3
 800d666:	4351      	muls	r1, r2
 800d668:	0c1b      	lsrs	r3, r3, #16
 800d66a:	4353      	muls	r3, r2
 800d66c:	1989      	adds	r1, r1, r6
 800d66e:	0c0a      	lsrs	r2, r1, #16
 800d670:	189b      	adds	r3, r3, r2
 800d672:	9307      	str	r3, [sp, #28]
 800d674:	0c1e      	lsrs	r6, r3, #16
 800d676:	9b06      	ldr	r3, [sp, #24]
 800d678:	b282      	uxth	r2, r0
 800d67a:	18d2      	adds	r2, r2, r3
 800d67c:	466b      	mov	r3, sp
 800d67e:	b289      	uxth	r1, r1
 800d680:	8b9b      	ldrh	r3, [r3, #28]
 800d682:	1a52      	subs	r2, r2, r1
 800d684:	0c01      	lsrs	r1, r0, #16
 800d686:	1ac9      	subs	r1, r1, r3
 800d688:	1413      	asrs	r3, r2, #16
 800d68a:	18cb      	adds	r3, r1, r3
 800d68c:	1419      	asrs	r1, r3, #16
 800d68e:	b292      	uxth	r2, r2
 800d690:	041b      	lsls	r3, r3, #16
 800d692:	4313      	orrs	r3, r2
 800d694:	c508      	stmia	r5!, {r3}
 800d696:	9b05      	ldr	r3, [sp, #20]
 800d698:	9106      	str	r1, [sp, #24]
 800d69a:	4563      	cmp	r3, ip
 800d69c:	d2dd      	bcs.n	800d65a <quorem+0x4a>
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d030      	beq.n	800d706 <quorem+0xf6>
 800d6a4:	0038      	movs	r0, r7
 800d6a6:	9904      	ldr	r1, [sp, #16]
 800d6a8:	f001 fcda 	bl	800f060 <__mcmp>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	db21      	blt.n	800d6f4 <quorem+0xe4>
 800d6b0:	0038      	movs	r0, r7
 800d6b2:	2600      	movs	r6, #0
 800d6b4:	9b02      	ldr	r3, [sp, #8]
 800d6b6:	9c04      	ldr	r4, [sp, #16]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	9302      	str	r3, [sp, #8]
 800d6bc:	3014      	adds	r0, #20
 800d6be:	3414      	adds	r4, #20
 800d6c0:	6803      	ldr	r3, [r0, #0]
 800d6c2:	cc02      	ldmia	r4!, {r1}
 800d6c4:	b29d      	uxth	r5, r3
 800d6c6:	19ad      	adds	r5, r5, r6
 800d6c8:	b28a      	uxth	r2, r1
 800d6ca:	1aaa      	subs	r2, r5, r2
 800d6cc:	0c09      	lsrs	r1, r1, #16
 800d6ce:	0c1b      	lsrs	r3, r3, #16
 800d6d0:	1a5b      	subs	r3, r3, r1
 800d6d2:	1411      	asrs	r1, r2, #16
 800d6d4:	185b      	adds	r3, r3, r1
 800d6d6:	141e      	asrs	r6, r3, #16
 800d6d8:	b292      	uxth	r2, r2
 800d6da:	041b      	lsls	r3, r3, #16
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	c008      	stmia	r0!, {r3}
 800d6e0:	9b05      	ldr	r3, [sp, #20]
 800d6e2:	42a3      	cmp	r3, r4
 800d6e4:	d2ec      	bcs.n	800d6c0 <quorem+0xb0>
 800d6e6:	9b01      	ldr	r3, [sp, #4]
 800d6e8:	9a03      	ldr	r2, [sp, #12]
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	18d3      	adds	r3, r2, r3
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	2a00      	cmp	r2, #0
 800d6f2:	d015      	beq.n	800d720 <quorem+0x110>
 800d6f4:	9802      	ldr	r0, [sp, #8]
 800d6f6:	b009      	add	sp, #36	; 0x24
 800d6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d106      	bne.n	800d70e <quorem+0xfe>
 800d700:	9b01      	ldr	r3, [sp, #4]
 800d702:	3b01      	subs	r3, #1
 800d704:	9301      	str	r3, [sp, #4]
 800d706:	9b03      	ldr	r3, [sp, #12]
 800d708:	3c04      	subs	r4, #4
 800d70a:	42a3      	cmp	r3, r4
 800d70c:	d3f5      	bcc.n	800d6fa <quorem+0xea>
 800d70e:	9b01      	ldr	r3, [sp, #4]
 800d710:	613b      	str	r3, [r7, #16]
 800d712:	e7c7      	b.n	800d6a4 <quorem+0x94>
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	2a00      	cmp	r2, #0
 800d718:	d106      	bne.n	800d728 <quorem+0x118>
 800d71a:	9a01      	ldr	r2, [sp, #4]
 800d71c:	3a01      	subs	r2, #1
 800d71e:	9201      	str	r2, [sp, #4]
 800d720:	9a03      	ldr	r2, [sp, #12]
 800d722:	3b04      	subs	r3, #4
 800d724:	429a      	cmp	r2, r3
 800d726:	d3f5      	bcc.n	800d714 <quorem+0x104>
 800d728:	9b01      	ldr	r3, [sp, #4]
 800d72a:	613b      	str	r3, [r7, #16]
 800d72c:	e7e2      	b.n	800d6f4 <quorem+0xe4>
	...

0800d730 <_dtoa_r>:
 800d730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d732:	0014      	movs	r4, r2
 800d734:	001d      	movs	r5, r3
 800d736:	69c6      	ldr	r6, [r0, #28]
 800d738:	b09d      	sub	sp, #116	; 0x74
 800d73a:	9408      	str	r4, [sp, #32]
 800d73c:	9509      	str	r5, [sp, #36]	; 0x24
 800d73e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800d740:	9004      	str	r0, [sp, #16]
 800d742:	2e00      	cmp	r6, #0
 800d744:	d10f      	bne.n	800d766 <_dtoa_r+0x36>
 800d746:	2010      	movs	r0, #16
 800d748:	f7fd fdf2 	bl	800b330 <malloc>
 800d74c:	9b04      	ldr	r3, [sp, #16]
 800d74e:	1e02      	subs	r2, r0, #0
 800d750:	61d8      	str	r0, [r3, #28]
 800d752:	d104      	bne.n	800d75e <_dtoa_r+0x2e>
 800d754:	21ef      	movs	r1, #239	; 0xef
 800d756:	4bc6      	ldr	r3, [pc, #792]	; (800da70 <_dtoa_r+0x340>)
 800d758:	48c6      	ldr	r0, [pc, #792]	; (800da74 <_dtoa_r+0x344>)
 800d75a:	f7ff ff3b 	bl	800d5d4 <__assert_func>
 800d75e:	6046      	str	r6, [r0, #4]
 800d760:	6086      	str	r6, [r0, #8]
 800d762:	6006      	str	r6, [r0, #0]
 800d764:	60c6      	str	r6, [r0, #12]
 800d766:	9b04      	ldr	r3, [sp, #16]
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	6819      	ldr	r1, [r3, #0]
 800d76c:	2900      	cmp	r1, #0
 800d76e:	d00b      	beq.n	800d788 <_dtoa_r+0x58>
 800d770:	685a      	ldr	r2, [r3, #4]
 800d772:	2301      	movs	r3, #1
 800d774:	4093      	lsls	r3, r2
 800d776:	604a      	str	r2, [r1, #4]
 800d778:	608b      	str	r3, [r1, #8]
 800d77a:	9804      	ldr	r0, [sp, #16]
 800d77c:	f001 f9e2 	bl	800eb44 <_Bfree>
 800d780:	2200      	movs	r2, #0
 800d782:	9b04      	ldr	r3, [sp, #16]
 800d784:	69db      	ldr	r3, [r3, #28]
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	2d00      	cmp	r5, #0
 800d78a:	da1e      	bge.n	800d7ca <_dtoa_r+0x9a>
 800d78c:	2301      	movs	r3, #1
 800d78e:	603b      	str	r3, [r7, #0]
 800d790:	006b      	lsls	r3, r5, #1
 800d792:	085b      	lsrs	r3, r3, #1
 800d794:	9309      	str	r3, [sp, #36]	; 0x24
 800d796:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d798:	4bb7      	ldr	r3, [pc, #732]	; (800da78 <_dtoa_r+0x348>)
 800d79a:	4ab7      	ldr	r2, [pc, #732]	; (800da78 <_dtoa_r+0x348>)
 800d79c:	403b      	ands	r3, r7
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d116      	bne.n	800d7d0 <_dtoa_r+0xa0>
 800d7a2:	4bb6      	ldr	r3, [pc, #728]	; (800da7c <_dtoa_r+0x34c>)
 800d7a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d7a6:	6013      	str	r3, [r2, #0]
 800d7a8:	033b      	lsls	r3, r7, #12
 800d7aa:	0b1b      	lsrs	r3, r3, #12
 800d7ac:	4323      	orrs	r3, r4
 800d7ae:	d101      	bne.n	800d7b4 <_dtoa_r+0x84>
 800d7b0:	f000 fdb5 	bl	800e31e <_dtoa_r+0xbee>
 800d7b4:	4bb2      	ldr	r3, [pc, #712]	; (800da80 <_dtoa_r+0x350>)
 800d7b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d7b8:	9306      	str	r3, [sp, #24]
 800d7ba:	2a00      	cmp	r2, #0
 800d7bc:	d002      	beq.n	800d7c4 <_dtoa_r+0x94>
 800d7be:	4bb1      	ldr	r3, [pc, #708]	; (800da84 <_dtoa_r+0x354>)
 800d7c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	9806      	ldr	r0, [sp, #24]
 800d7c6:	b01d      	add	sp, #116	; 0x74
 800d7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	603b      	str	r3, [r7, #0]
 800d7ce:	e7e2      	b.n	800d796 <_dtoa_r+0x66>
 800d7d0:	9a08      	ldr	r2, [sp, #32]
 800d7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d4:	9210      	str	r2, [sp, #64]	; 0x40
 800d7d6:	9311      	str	r3, [sp, #68]	; 0x44
 800d7d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d7da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d7dc:	2200      	movs	r2, #0
 800d7de:	2300      	movs	r3, #0
 800d7e0:	f7f2 fe3e 	bl	8000460 <__aeabi_dcmpeq>
 800d7e4:	1e06      	subs	r6, r0, #0
 800d7e6:	d009      	beq.n	800d7fc <_dtoa_r+0xcc>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d7ec:	6013      	str	r3, [r2, #0]
 800d7ee:	4ba6      	ldr	r3, [pc, #664]	; (800da88 <_dtoa_r+0x358>)
 800d7f0:	9306      	str	r3, [sp, #24]
 800d7f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d0e5      	beq.n	800d7c4 <_dtoa_r+0x94>
 800d7f8:	4ba4      	ldr	r3, [pc, #656]	; (800da8c <_dtoa_r+0x35c>)
 800d7fa:	e7e1      	b.n	800d7c0 <_dtoa_r+0x90>
 800d7fc:	ab1a      	add	r3, sp, #104	; 0x68
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	ab1b      	add	r3, sp, #108	; 0x6c
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	9804      	ldr	r0, [sp, #16]
 800d806:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d80a:	f001 fd45 	bl	800f298 <__d2b>
 800d80e:	007a      	lsls	r2, r7, #1
 800d810:	9005      	str	r0, [sp, #20]
 800d812:	0d52      	lsrs	r2, r2, #21
 800d814:	d100      	bne.n	800d818 <_dtoa_r+0xe8>
 800d816:	e07b      	b.n	800d910 <_dtoa_r+0x1e0>
 800d818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d81a:	9617      	str	r6, [sp, #92]	; 0x5c
 800d81c:	0319      	lsls	r1, r3, #12
 800d81e:	4b9c      	ldr	r3, [pc, #624]	; (800da90 <_dtoa_r+0x360>)
 800d820:	0b09      	lsrs	r1, r1, #12
 800d822:	430b      	orrs	r3, r1
 800d824:	499b      	ldr	r1, [pc, #620]	; (800da94 <_dtoa_r+0x364>)
 800d826:	1857      	adds	r7, r2, r1
 800d828:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d82a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d82c:	0019      	movs	r1, r3
 800d82e:	2200      	movs	r2, #0
 800d830:	4b99      	ldr	r3, [pc, #612]	; (800da98 <_dtoa_r+0x368>)
 800d832:	f7f5 f81b 	bl	800286c <__aeabi_dsub>
 800d836:	4a99      	ldr	r2, [pc, #612]	; (800da9c <_dtoa_r+0x36c>)
 800d838:	4b99      	ldr	r3, [pc, #612]	; (800daa0 <_dtoa_r+0x370>)
 800d83a:	f7f4 fd55 	bl	80022e8 <__aeabi_dmul>
 800d83e:	4a99      	ldr	r2, [pc, #612]	; (800daa4 <_dtoa_r+0x374>)
 800d840:	4b99      	ldr	r3, [pc, #612]	; (800daa8 <_dtoa_r+0x378>)
 800d842:	f7f3 fdf7 	bl	8001434 <__aeabi_dadd>
 800d846:	0004      	movs	r4, r0
 800d848:	0038      	movs	r0, r7
 800d84a:	000d      	movs	r5, r1
 800d84c:	f7f5 fbe4 	bl	8003018 <__aeabi_i2d>
 800d850:	4a96      	ldr	r2, [pc, #600]	; (800daac <_dtoa_r+0x37c>)
 800d852:	4b97      	ldr	r3, [pc, #604]	; (800dab0 <_dtoa_r+0x380>)
 800d854:	f7f4 fd48 	bl	80022e8 <__aeabi_dmul>
 800d858:	0002      	movs	r2, r0
 800d85a:	000b      	movs	r3, r1
 800d85c:	0020      	movs	r0, r4
 800d85e:	0029      	movs	r1, r5
 800d860:	f7f3 fde8 	bl	8001434 <__aeabi_dadd>
 800d864:	0004      	movs	r4, r0
 800d866:	000d      	movs	r5, r1
 800d868:	f7f5 fba0 	bl	8002fac <__aeabi_d2iz>
 800d86c:	2200      	movs	r2, #0
 800d86e:	9003      	str	r0, [sp, #12]
 800d870:	2300      	movs	r3, #0
 800d872:	0020      	movs	r0, r4
 800d874:	0029      	movs	r1, r5
 800d876:	f7f2 fdf9 	bl	800046c <__aeabi_dcmplt>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d00b      	beq.n	800d896 <_dtoa_r+0x166>
 800d87e:	9803      	ldr	r0, [sp, #12]
 800d880:	f7f5 fbca 	bl	8003018 <__aeabi_i2d>
 800d884:	002b      	movs	r3, r5
 800d886:	0022      	movs	r2, r4
 800d888:	f7f2 fdea 	bl	8000460 <__aeabi_dcmpeq>
 800d88c:	4243      	negs	r3, r0
 800d88e:	4158      	adcs	r0, r3
 800d890:	9b03      	ldr	r3, [sp, #12]
 800d892:	1a1b      	subs	r3, r3, r0
 800d894:	9303      	str	r3, [sp, #12]
 800d896:	2301      	movs	r3, #1
 800d898:	9316      	str	r3, [sp, #88]	; 0x58
 800d89a:	9b03      	ldr	r3, [sp, #12]
 800d89c:	2b16      	cmp	r3, #22
 800d89e:	d810      	bhi.n	800d8c2 <_dtoa_r+0x192>
 800d8a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d8a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d8a4:	9a03      	ldr	r2, [sp, #12]
 800d8a6:	4b83      	ldr	r3, [pc, #524]	; (800dab4 <_dtoa_r+0x384>)
 800d8a8:	00d2      	lsls	r2, r2, #3
 800d8aa:	189b      	adds	r3, r3, r2
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	f7f2 fddc 	bl	800046c <__aeabi_dcmplt>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d047      	beq.n	800d948 <_dtoa_r+0x218>
 800d8b8:	9b03      	ldr	r3, [sp, #12]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	9303      	str	r3, [sp, #12]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	9316      	str	r3, [sp, #88]	; 0x58
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d8c6:	920a      	str	r2, [sp, #40]	; 0x28
 800d8c8:	1bdb      	subs	r3, r3, r7
 800d8ca:	1e5a      	subs	r2, r3, #1
 800d8cc:	d53e      	bpl.n	800d94c <_dtoa_r+0x21c>
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	930a      	str	r3, [sp, #40]	; 0x28
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d8d8:	9b03      	ldr	r3, [sp, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	db38      	blt.n	800d950 <_dtoa_r+0x220>
 800d8de:	9a03      	ldr	r2, [sp, #12]
 800d8e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8e2:	4694      	mov	ip, r2
 800d8e4:	4463      	add	r3, ip
 800d8e6:	930c      	str	r3, [sp, #48]	; 0x30
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	9213      	str	r2, [sp, #76]	; 0x4c
 800d8ec:	930d      	str	r3, [sp, #52]	; 0x34
 800d8ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8f0:	2401      	movs	r4, #1
 800d8f2:	2b09      	cmp	r3, #9
 800d8f4:	d867      	bhi.n	800d9c6 <_dtoa_r+0x296>
 800d8f6:	2b05      	cmp	r3, #5
 800d8f8:	dd02      	ble.n	800d900 <_dtoa_r+0x1d0>
 800d8fa:	2400      	movs	r4, #0
 800d8fc:	3b04      	subs	r3, #4
 800d8fe:	9322      	str	r3, [sp, #136]	; 0x88
 800d900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d902:	1e98      	subs	r0, r3, #2
 800d904:	2803      	cmp	r0, #3
 800d906:	d867      	bhi.n	800d9d8 <_dtoa_r+0x2a8>
 800d908:	f7f2 fc10 	bl	800012c <__gnu_thumb1_case_uqi>
 800d90c:	5b383a2b 	.word	0x5b383a2b
 800d910:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d912:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d914:	18f6      	adds	r6, r6, r3
 800d916:	4b68      	ldr	r3, [pc, #416]	; (800dab8 <_dtoa_r+0x388>)
 800d918:	18f2      	adds	r2, r6, r3
 800d91a:	2a20      	cmp	r2, #32
 800d91c:	dd0f      	ble.n	800d93e <_dtoa_r+0x20e>
 800d91e:	2340      	movs	r3, #64	; 0x40
 800d920:	1a9b      	subs	r3, r3, r2
 800d922:	409f      	lsls	r7, r3
 800d924:	4b65      	ldr	r3, [pc, #404]	; (800dabc <_dtoa_r+0x38c>)
 800d926:	0038      	movs	r0, r7
 800d928:	18f3      	adds	r3, r6, r3
 800d92a:	40dc      	lsrs	r4, r3
 800d92c:	4320      	orrs	r0, r4
 800d92e:	f7f5 fba3 	bl	8003078 <__aeabi_ui2d>
 800d932:	2201      	movs	r2, #1
 800d934:	4b62      	ldr	r3, [pc, #392]	; (800dac0 <_dtoa_r+0x390>)
 800d936:	1e77      	subs	r7, r6, #1
 800d938:	18cb      	adds	r3, r1, r3
 800d93a:	9217      	str	r2, [sp, #92]	; 0x5c
 800d93c:	e776      	b.n	800d82c <_dtoa_r+0xfc>
 800d93e:	2320      	movs	r3, #32
 800d940:	0020      	movs	r0, r4
 800d942:	1a9b      	subs	r3, r3, r2
 800d944:	4098      	lsls	r0, r3
 800d946:	e7f2      	b.n	800d92e <_dtoa_r+0x1fe>
 800d948:	9016      	str	r0, [sp, #88]	; 0x58
 800d94a:	e7ba      	b.n	800d8c2 <_dtoa_r+0x192>
 800d94c:	920c      	str	r2, [sp, #48]	; 0x30
 800d94e:	e7c3      	b.n	800d8d8 <_dtoa_r+0x1a8>
 800d950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d952:	9a03      	ldr	r2, [sp, #12]
 800d954:	1a9b      	subs	r3, r3, r2
 800d956:	930a      	str	r3, [sp, #40]	; 0x28
 800d958:	4253      	negs	r3, r2
 800d95a:	930d      	str	r3, [sp, #52]	; 0x34
 800d95c:	2300      	movs	r3, #0
 800d95e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d960:	e7c5      	b.n	800d8ee <_dtoa_r+0x1be>
 800d962:	2300      	movs	r3, #0
 800d964:	930f      	str	r3, [sp, #60]	; 0x3c
 800d966:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d968:	930b      	str	r3, [sp, #44]	; 0x2c
 800d96a:	9307      	str	r3, [sp, #28]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	dc13      	bgt.n	800d998 <_dtoa_r+0x268>
 800d970:	2301      	movs	r3, #1
 800d972:	001a      	movs	r2, r3
 800d974:	930b      	str	r3, [sp, #44]	; 0x2c
 800d976:	9307      	str	r3, [sp, #28]
 800d978:	9223      	str	r2, [sp, #140]	; 0x8c
 800d97a:	e00d      	b.n	800d998 <_dtoa_r+0x268>
 800d97c:	2301      	movs	r3, #1
 800d97e:	e7f1      	b.n	800d964 <_dtoa_r+0x234>
 800d980:	2300      	movs	r3, #0
 800d982:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d984:	930f      	str	r3, [sp, #60]	; 0x3c
 800d986:	4694      	mov	ip, r2
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	4463      	add	r3, ip
 800d98c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d98e:	3301      	adds	r3, #1
 800d990:	9307      	str	r3, [sp, #28]
 800d992:	2b00      	cmp	r3, #0
 800d994:	dc00      	bgt.n	800d998 <_dtoa_r+0x268>
 800d996:	2301      	movs	r3, #1
 800d998:	9a04      	ldr	r2, [sp, #16]
 800d99a:	2100      	movs	r1, #0
 800d99c:	69d0      	ldr	r0, [r2, #28]
 800d99e:	2204      	movs	r2, #4
 800d9a0:	0015      	movs	r5, r2
 800d9a2:	3514      	adds	r5, #20
 800d9a4:	429d      	cmp	r5, r3
 800d9a6:	d91b      	bls.n	800d9e0 <_dtoa_r+0x2b0>
 800d9a8:	6041      	str	r1, [r0, #4]
 800d9aa:	9804      	ldr	r0, [sp, #16]
 800d9ac:	f001 f886 	bl	800eabc <_Balloc>
 800d9b0:	9006      	str	r0, [sp, #24]
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d117      	bne.n	800d9e6 <_dtoa_r+0x2b6>
 800d9b6:	21b0      	movs	r1, #176	; 0xb0
 800d9b8:	4b42      	ldr	r3, [pc, #264]	; (800dac4 <_dtoa_r+0x394>)
 800d9ba:	482e      	ldr	r0, [pc, #184]	; (800da74 <_dtoa_r+0x344>)
 800d9bc:	9a06      	ldr	r2, [sp, #24]
 800d9be:	31ff      	adds	r1, #255	; 0xff
 800d9c0:	e6cb      	b.n	800d75a <_dtoa_r+0x2a>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e7dd      	b.n	800d982 <_dtoa_r+0x252>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	940f      	str	r4, [sp, #60]	; 0x3c
 800d9ca:	9322      	str	r3, [sp, #136]	; 0x88
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9d0:	9307      	str	r3, [sp, #28]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	3313      	adds	r3, #19
 800d9d6:	e7cf      	b.n	800d978 <_dtoa_r+0x248>
 800d9d8:	2301      	movs	r3, #1
 800d9da:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9dc:	3b02      	subs	r3, #2
 800d9de:	e7f6      	b.n	800d9ce <_dtoa_r+0x29e>
 800d9e0:	3101      	adds	r1, #1
 800d9e2:	0052      	lsls	r2, r2, #1
 800d9e4:	e7dc      	b.n	800d9a0 <_dtoa_r+0x270>
 800d9e6:	9b04      	ldr	r3, [sp, #16]
 800d9e8:	9a06      	ldr	r2, [sp, #24]
 800d9ea:	69db      	ldr	r3, [r3, #28]
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	9b07      	ldr	r3, [sp, #28]
 800d9f0:	2b0e      	cmp	r3, #14
 800d9f2:	d900      	bls.n	800d9f6 <_dtoa_r+0x2c6>
 800d9f4:	e0e5      	b.n	800dbc2 <_dtoa_r+0x492>
 800d9f6:	2c00      	cmp	r4, #0
 800d9f8:	d100      	bne.n	800d9fc <_dtoa_r+0x2cc>
 800d9fa:	e0e2      	b.n	800dbc2 <_dtoa_r+0x492>
 800d9fc:	9b03      	ldr	r3, [sp, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	dd64      	ble.n	800dacc <_dtoa_r+0x39c>
 800da02:	210f      	movs	r1, #15
 800da04:	9a03      	ldr	r2, [sp, #12]
 800da06:	4b2b      	ldr	r3, [pc, #172]	; (800dab4 <_dtoa_r+0x384>)
 800da08:	400a      	ands	r2, r1
 800da0a:	00d2      	lsls	r2, r2, #3
 800da0c:	189b      	adds	r3, r3, r2
 800da0e:	681e      	ldr	r6, [r3, #0]
 800da10:	685f      	ldr	r7, [r3, #4]
 800da12:	9b03      	ldr	r3, [sp, #12]
 800da14:	2402      	movs	r4, #2
 800da16:	111d      	asrs	r5, r3, #4
 800da18:	05db      	lsls	r3, r3, #23
 800da1a:	d50a      	bpl.n	800da32 <_dtoa_r+0x302>
 800da1c:	4b2a      	ldr	r3, [pc, #168]	; (800dac8 <_dtoa_r+0x398>)
 800da1e:	400d      	ands	r5, r1
 800da20:	6a1a      	ldr	r2, [r3, #32]
 800da22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da24:	9810      	ldr	r0, [sp, #64]	; 0x40
 800da26:	9911      	ldr	r1, [sp, #68]	; 0x44
 800da28:	f7f4 f864 	bl	8001af4 <__aeabi_ddiv>
 800da2c:	9008      	str	r0, [sp, #32]
 800da2e:	9109      	str	r1, [sp, #36]	; 0x24
 800da30:	3401      	adds	r4, #1
 800da32:	4b25      	ldr	r3, [pc, #148]	; (800dac8 <_dtoa_r+0x398>)
 800da34:	930e      	str	r3, [sp, #56]	; 0x38
 800da36:	2d00      	cmp	r5, #0
 800da38:	d108      	bne.n	800da4c <_dtoa_r+0x31c>
 800da3a:	9808      	ldr	r0, [sp, #32]
 800da3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da3e:	0032      	movs	r2, r6
 800da40:	003b      	movs	r3, r7
 800da42:	f7f4 f857 	bl	8001af4 <__aeabi_ddiv>
 800da46:	9008      	str	r0, [sp, #32]
 800da48:	9109      	str	r1, [sp, #36]	; 0x24
 800da4a:	e05a      	b.n	800db02 <_dtoa_r+0x3d2>
 800da4c:	2301      	movs	r3, #1
 800da4e:	421d      	tst	r5, r3
 800da50:	d009      	beq.n	800da66 <_dtoa_r+0x336>
 800da52:	18e4      	adds	r4, r4, r3
 800da54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da56:	0030      	movs	r0, r6
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	0039      	movs	r1, r7
 800da5e:	f7f4 fc43 	bl	80022e8 <__aeabi_dmul>
 800da62:	0006      	movs	r6, r0
 800da64:	000f      	movs	r7, r1
 800da66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da68:	106d      	asrs	r5, r5, #1
 800da6a:	3308      	adds	r3, #8
 800da6c:	e7e2      	b.n	800da34 <_dtoa_r+0x304>
 800da6e:	46c0      	nop			; (mov r8, r8)
 800da70:	08012050 	.word	0x08012050
 800da74:	08012110 	.word	0x08012110
 800da78:	7ff00000 	.word	0x7ff00000
 800da7c:	0000270f 	.word	0x0000270f
 800da80:	0801210c 	.word	0x0801210c
 800da84:	0801210f 	.word	0x0801210f
 800da88:	08010f77 	.word	0x08010f77
 800da8c:	08010f78 	.word	0x08010f78
 800da90:	3ff00000 	.word	0x3ff00000
 800da94:	fffffc01 	.word	0xfffffc01
 800da98:	3ff80000 	.word	0x3ff80000
 800da9c:	636f4361 	.word	0x636f4361
 800daa0:	3fd287a7 	.word	0x3fd287a7
 800daa4:	8b60c8b3 	.word	0x8b60c8b3
 800daa8:	3fc68a28 	.word	0x3fc68a28
 800daac:	509f79fb 	.word	0x509f79fb
 800dab0:	3fd34413 	.word	0x3fd34413
 800dab4:	08012260 	.word	0x08012260
 800dab8:	00000432 	.word	0x00000432
 800dabc:	00000412 	.word	0x00000412
 800dac0:	fe100000 	.word	0xfe100000
 800dac4:	08012168 	.word	0x08012168
 800dac8:	08012238 	.word	0x08012238
 800dacc:	9b03      	ldr	r3, [sp, #12]
 800dace:	2402      	movs	r4, #2
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d016      	beq.n	800db02 <_dtoa_r+0x3d2>
 800dad4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dad6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dad8:	220f      	movs	r2, #15
 800dada:	425d      	negs	r5, r3
 800dadc:	402a      	ands	r2, r5
 800dade:	4bdd      	ldr	r3, [pc, #884]	; (800de54 <_dtoa_r+0x724>)
 800dae0:	00d2      	lsls	r2, r2, #3
 800dae2:	189b      	adds	r3, r3, r2
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	f7f4 fbfe 	bl	80022e8 <__aeabi_dmul>
 800daec:	2701      	movs	r7, #1
 800daee:	2300      	movs	r3, #0
 800daf0:	9008      	str	r0, [sp, #32]
 800daf2:	9109      	str	r1, [sp, #36]	; 0x24
 800daf4:	4ed8      	ldr	r6, [pc, #864]	; (800de58 <_dtoa_r+0x728>)
 800daf6:	112d      	asrs	r5, r5, #4
 800daf8:	2d00      	cmp	r5, #0
 800dafa:	d000      	beq.n	800dafe <_dtoa_r+0x3ce>
 800dafc:	e091      	b.n	800dc22 <_dtoa_r+0x4f2>
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1a1      	bne.n	800da46 <_dtoa_r+0x316>
 800db02:	9e08      	ldr	r6, [sp, #32]
 800db04:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800db06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d100      	bne.n	800db0e <_dtoa_r+0x3de>
 800db0c:	e094      	b.n	800dc38 <_dtoa_r+0x508>
 800db0e:	2200      	movs	r2, #0
 800db10:	0030      	movs	r0, r6
 800db12:	0039      	movs	r1, r7
 800db14:	4bd1      	ldr	r3, [pc, #836]	; (800de5c <_dtoa_r+0x72c>)
 800db16:	f7f2 fca9 	bl	800046c <__aeabi_dcmplt>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d100      	bne.n	800db20 <_dtoa_r+0x3f0>
 800db1e:	e08b      	b.n	800dc38 <_dtoa_r+0x508>
 800db20:	9b07      	ldr	r3, [sp, #28]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d100      	bne.n	800db28 <_dtoa_r+0x3f8>
 800db26:	e087      	b.n	800dc38 <_dtoa_r+0x508>
 800db28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	dd45      	ble.n	800dbba <_dtoa_r+0x48a>
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	3b01      	subs	r3, #1
 800db34:	930e      	str	r3, [sp, #56]	; 0x38
 800db36:	0030      	movs	r0, r6
 800db38:	4bc9      	ldr	r3, [pc, #804]	; (800de60 <_dtoa_r+0x730>)
 800db3a:	0039      	movs	r1, r7
 800db3c:	f7f4 fbd4 	bl	80022e8 <__aeabi_dmul>
 800db40:	9008      	str	r0, [sp, #32]
 800db42:	9109      	str	r1, [sp, #36]	; 0x24
 800db44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db46:	3401      	adds	r4, #1
 800db48:	0020      	movs	r0, r4
 800db4a:	9e08      	ldr	r6, [sp, #32]
 800db4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800db4e:	9312      	str	r3, [sp, #72]	; 0x48
 800db50:	f7f5 fa62 	bl	8003018 <__aeabi_i2d>
 800db54:	0032      	movs	r2, r6
 800db56:	003b      	movs	r3, r7
 800db58:	f7f4 fbc6 	bl	80022e8 <__aeabi_dmul>
 800db5c:	2200      	movs	r2, #0
 800db5e:	4bc1      	ldr	r3, [pc, #772]	; (800de64 <_dtoa_r+0x734>)
 800db60:	f7f3 fc68 	bl	8001434 <__aeabi_dadd>
 800db64:	4ac0      	ldr	r2, [pc, #768]	; (800de68 <_dtoa_r+0x738>)
 800db66:	9014      	str	r0, [sp, #80]	; 0x50
 800db68:	9115      	str	r1, [sp, #84]	; 0x54
 800db6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db6c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800db6e:	4694      	mov	ip, r2
 800db70:	9308      	str	r3, [sp, #32]
 800db72:	9409      	str	r4, [sp, #36]	; 0x24
 800db74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db76:	4463      	add	r3, ip
 800db78:	9318      	str	r3, [sp, #96]	; 0x60
 800db7a:	9309      	str	r3, [sp, #36]	; 0x24
 800db7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d15e      	bne.n	800dc40 <_dtoa_r+0x510>
 800db82:	2200      	movs	r2, #0
 800db84:	4bb9      	ldr	r3, [pc, #740]	; (800de6c <_dtoa_r+0x73c>)
 800db86:	0030      	movs	r0, r6
 800db88:	0039      	movs	r1, r7
 800db8a:	f7f4 fe6f 	bl	800286c <__aeabi_dsub>
 800db8e:	9a08      	ldr	r2, [sp, #32]
 800db90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800db92:	0004      	movs	r4, r0
 800db94:	000d      	movs	r5, r1
 800db96:	f7f2 fc7d 	bl	8000494 <__aeabi_dcmpgt>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d000      	beq.n	800dba0 <_dtoa_r+0x470>
 800db9e:	e2b3      	b.n	800e108 <_dtoa_r+0x9d8>
 800dba0:	48b3      	ldr	r0, [pc, #716]	; (800de70 <_dtoa_r+0x740>)
 800dba2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dba4:	4684      	mov	ip, r0
 800dba6:	4461      	add	r1, ip
 800dba8:	000b      	movs	r3, r1
 800dbaa:	0020      	movs	r0, r4
 800dbac:	0029      	movs	r1, r5
 800dbae:	9a08      	ldr	r2, [sp, #32]
 800dbb0:	f7f2 fc5c 	bl	800046c <__aeabi_dcmplt>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d000      	beq.n	800dbba <_dtoa_r+0x48a>
 800dbb8:	e2a3      	b.n	800e102 <_dtoa_r+0x9d2>
 800dbba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbbc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800dbbe:	9308      	str	r3, [sp, #32]
 800dbc0:	9409      	str	r4, [sp, #36]	; 0x24
 800dbc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	da00      	bge.n	800dbca <_dtoa_r+0x49a>
 800dbc8:	e179      	b.n	800debe <_dtoa_r+0x78e>
 800dbca:	9a03      	ldr	r2, [sp, #12]
 800dbcc:	2a0e      	cmp	r2, #14
 800dbce:	dd00      	ble.n	800dbd2 <_dtoa_r+0x4a2>
 800dbd0:	e175      	b.n	800debe <_dtoa_r+0x78e>
 800dbd2:	4ba0      	ldr	r3, [pc, #640]	; (800de54 <_dtoa_r+0x724>)
 800dbd4:	00d2      	lsls	r2, r2, #3
 800dbd6:	189b      	adds	r3, r3, r2
 800dbd8:	681e      	ldr	r6, [r3, #0]
 800dbda:	685f      	ldr	r7, [r3, #4]
 800dbdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	db00      	blt.n	800dbe4 <_dtoa_r+0x4b4>
 800dbe2:	e0e5      	b.n	800ddb0 <_dtoa_r+0x680>
 800dbe4:	9b07      	ldr	r3, [sp, #28]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	dd00      	ble.n	800dbec <_dtoa_r+0x4bc>
 800dbea:	e0e1      	b.n	800ddb0 <_dtoa_r+0x680>
 800dbec:	d000      	beq.n	800dbf0 <_dtoa_r+0x4c0>
 800dbee:	e288      	b.n	800e102 <_dtoa_r+0x9d2>
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	0030      	movs	r0, r6
 800dbf4:	0039      	movs	r1, r7
 800dbf6:	4b9d      	ldr	r3, [pc, #628]	; (800de6c <_dtoa_r+0x73c>)
 800dbf8:	f7f4 fb76 	bl	80022e8 <__aeabi_dmul>
 800dbfc:	9a08      	ldr	r2, [sp, #32]
 800dbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc00:	f7f2 fc52 	bl	80004a8 <__aeabi_dcmpge>
 800dc04:	9e07      	ldr	r6, [sp, #28]
 800dc06:	0037      	movs	r7, r6
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d000      	beq.n	800dc0e <_dtoa_r+0x4de>
 800dc0c:	e25f      	b.n	800e0ce <_dtoa_r+0x99e>
 800dc0e:	9b06      	ldr	r3, [sp, #24]
 800dc10:	9a06      	ldr	r2, [sp, #24]
 800dc12:	3301      	adds	r3, #1
 800dc14:	9308      	str	r3, [sp, #32]
 800dc16:	2331      	movs	r3, #49	; 0x31
 800dc18:	7013      	strb	r3, [r2, #0]
 800dc1a:	9b03      	ldr	r3, [sp, #12]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	9303      	str	r3, [sp, #12]
 800dc20:	e25a      	b.n	800e0d8 <_dtoa_r+0x9a8>
 800dc22:	423d      	tst	r5, r7
 800dc24:	d005      	beq.n	800dc32 <_dtoa_r+0x502>
 800dc26:	6832      	ldr	r2, [r6, #0]
 800dc28:	6873      	ldr	r3, [r6, #4]
 800dc2a:	f7f4 fb5d 	bl	80022e8 <__aeabi_dmul>
 800dc2e:	003b      	movs	r3, r7
 800dc30:	3401      	adds	r4, #1
 800dc32:	106d      	asrs	r5, r5, #1
 800dc34:	3608      	adds	r6, #8
 800dc36:	e75f      	b.n	800daf8 <_dtoa_r+0x3c8>
 800dc38:	9b03      	ldr	r3, [sp, #12]
 800dc3a:	930e      	str	r3, [sp, #56]	; 0x38
 800dc3c:	9b07      	ldr	r3, [sp, #28]
 800dc3e:	e783      	b.n	800db48 <_dtoa_r+0x418>
 800dc40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc42:	4b84      	ldr	r3, [pc, #528]	; (800de54 <_dtoa_r+0x724>)
 800dc44:	3a01      	subs	r2, #1
 800dc46:	00d2      	lsls	r2, r2, #3
 800dc48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dc4a:	189b      	adds	r3, r3, r2
 800dc4c:	9c08      	ldr	r4, [sp, #32]
 800dc4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	2900      	cmp	r1, #0
 800dc56:	d051      	beq.n	800dcfc <_dtoa_r+0x5cc>
 800dc58:	2000      	movs	r0, #0
 800dc5a:	4986      	ldr	r1, [pc, #536]	; (800de74 <_dtoa_r+0x744>)
 800dc5c:	f7f3 ff4a 	bl	8001af4 <__aeabi_ddiv>
 800dc60:	0022      	movs	r2, r4
 800dc62:	002b      	movs	r3, r5
 800dc64:	f7f4 fe02 	bl	800286c <__aeabi_dsub>
 800dc68:	9a06      	ldr	r2, [sp, #24]
 800dc6a:	0004      	movs	r4, r0
 800dc6c:	4694      	mov	ip, r2
 800dc6e:	000d      	movs	r5, r1
 800dc70:	9b06      	ldr	r3, [sp, #24]
 800dc72:	9314      	str	r3, [sp, #80]	; 0x50
 800dc74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc76:	4463      	add	r3, ip
 800dc78:	9318      	str	r3, [sp, #96]	; 0x60
 800dc7a:	0039      	movs	r1, r7
 800dc7c:	0030      	movs	r0, r6
 800dc7e:	f7f5 f995 	bl	8002fac <__aeabi_d2iz>
 800dc82:	9012      	str	r0, [sp, #72]	; 0x48
 800dc84:	f7f5 f9c8 	bl	8003018 <__aeabi_i2d>
 800dc88:	0002      	movs	r2, r0
 800dc8a:	000b      	movs	r3, r1
 800dc8c:	0030      	movs	r0, r6
 800dc8e:	0039      	movs	r1, r7
 800dc90:	f7f4 fdec 	bl	800286c <__aeabi_dsub>
 800dc94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc98:	3301      	adds	r3, #1
 800dc9a:	9308      	str	r3, [sp, #32]
 800dc9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc9e:	0006      	movs	r6, r0
 800dca0:	3330      	adds	r3, #48	; 0x30
 800dca2:	7013      	strb	r3, [r2, #0]
 800dca4:	0022      	movs	r2, r4
 800dca6:	002b      	movs	r3, r5
 800dca8:	000f      	movs	r7, r1
 800dcaa:	f7f2 fbdf 	bl	800046c <__aeabi_dcmplt>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d174      	bne.n	800dd9c <_dtoa_r+0x66c>
 800dcb2:	0032      	movs	r2, r6
 800dcb4:	003b      	movs	r3, r7
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	4968      	ldr	r1, [pc, #416]	; (800de5c <_dtoa_r+0x72c>)
 800dcba:	f7f4 fdd7 	bl	800286c <__aeabi_dsub>
 800dcbe:	0022      	movs	r2, r4
 800dcc0:	002b      	movs	r3, r5
 800dcc2:	f7f2 fbd3 	bl	800046c <__aeabi_dcmplt>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d000      	beq.n	800dccc <_dtoa_r+0x59c>
 800dcca:	e0d7      	b.n	800de7c <_dtoa_r+0x74c>
 800dccc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dcce:	9a08      	ldr	r2, [sp, #32]
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d100      	bne.n	800dcd6 <_dtoa_r+0x5a6>
 800dcd4:	e771      	b.n	800dbba <_dtoa_r+0x48a>
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	0020      	movs	r0, r4
 800dcda:	0029      	movs	r1, r5
 800dcdc:	4b60      	ldr	r3, [pc, #384]	; (800de60 <_dtoa_r+0x730>)
 800dcde:	f7f4 fb03 	bl	80022e8 <__aeabi_dmul>
 800dce2:	4b5f      	ldr	r3, [pc, #380]	; (800de60 <_dtoa_r+0x730>)
 800dce4:	0004      	movs	r4, r0
 800dce6:	000d      	movs	r5, r1
 800dce8:	0030      	movs	r0, r6
 800dcea:	0039      	movs	r1, r7
 800dcec:	2200      	movs	r2, #0
 800dcee:	f7f4 fafb 	bl	80022e8 <__aeabi_dmul>
 800dcf2:	9b08      	ldr	r3, [sp, #32]
 800dcf4:	0006      	movs	r6, r0
 800dcf6:	000f      	movs	r7, r1
 800dcf8:	9314      	str	r3, [sp, #80]	; 0x50
 800dcfa:	e7be      	b.n	800dc7a <_dtoa_r+0x54a>
 800dcfc:	0020      	movs	r0, r4
 800dcfe:	0029      	movs	r1, r5
 800dd00:	f7f4 faf2 	bl	80022e8 <__aeabi_dmul>
 800dd04:	9a06      	ldr	r2, [sp, #24]
 800dd06:	9b06      	ldr	r3, [sp, #24]
 800dd08:	4694      	mov	ip, r2
 800dd0a:	9308      	str	r3, [sp, #32]
 800dd0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd0e:	9014      	str	r0, [sp, #80]	; 0x50
 800dd10:	9115      	str	r1, [sp, #84]	; 0x54
 800dd12:	4463      	add	r3, ip
 800dd14:	9319      	str	r3, [sp, #100]	; 0x64
 800dd16:	0030      	movs	r0, r6
 800dd18:	0039      	movs	r1, r7
 800dd1a:	f7f5 f947 	bl	8002fac <__aeabi_d2iz>
 800dd1e:	9018      	str	r0, [sp, #96]	; 0x60
 800dd20:	f7f5 f97a 	bl	8003018 <__aeabi_i2d>
 800dd24:	0002      	movs	r2, r0
 800dd26:	000b      	movs	r3, r1
 800dd28:	0030      	movs	r0, r6
 800dd2a:	0039      	movs	r1, r7
 800dd2c:	f7f4 fd9e 	bl	800286c <__aeabi_dsub>
 800dd30:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800dd32:	9b08      	ldr	r3, [sp, #32]
 800dd34:	3630      	adds	r6, #48	; 0x30
 800dd36:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd38:	701e      	strb	r6, [r3, #0]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	0004      	movs	r4, r0
 800dd3e:	000d      	movs	r5, r1
 800dd40:	9308      	str	r3, [sp, #32]
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d12d      	bne.n	800dda2 <_dtoa_r+0x672>
 800dd46:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dd48:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dd4a:	9a06      	ldr	r2, [sp, #24]
 800dd4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd4e:	4694      	mov	ip, r2
 800dd50:	4463      	add	r3, ip
 800dd52:	2200      	movs	r2, #0
 800dd54:	9308      	str	r3, [sp, #32]
 800dd56:	4b47      	ldr	r3, [pc, #284]	; (800de74 <_dtoa_r+0x744>)
 800dd58:	f7f3 fb6c 	bl	8001434 <__aeabi_dadd>
 800dd5c:	0002      	movs	r2, r0
 800dd5e:	000b      	movs	r3, r1
 800dd60:	0020      	movs	r0, r4
 800dd62:	0029      	movs	r1, r5
 800dd64:	f7f2 fb96 	bl	8000494 <__aeabi_dcmpgt>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d000      	beq.n	800dd6e <_dtoa_r+0x63e>
 800dd6c:	e086      	b.n	800de7c <_dtoa_r+0x74c>
 800dd6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd72:	2000      	movs	r0, #0
 800dd74:	493f      	ldr	r1, [pc, #252]	; (800de74 <_dtoa_r+0x744>)
 800dd76:	f7f4 fd79 	bl	800286c <__aeabi_dsub>
 800dd7a:	0002      	movs	r2, r0
 800dd7c:	000b      	movs	r3, r1
 800dd7e:	0020      	movs	r0, r4
 800dd80:	0029      	movs	r1, r5
 800dd82:	f7f2 fb73 	bl	800046c <__aeabi_dcmplt>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d100      	bne.n	800dd8c <_dtoa_r+0x65c>
 800dd8a:	e716      	b.n	800dbba <_dtoa_r+0x48a>
 800dd8c:	9b08      	ldr	r3, [sp, #32]
 800dd8e:	001a      	movs	r2, r3
 800dd90:	3a01      	subs	r2, #1
 800dd92:	9208      	str	r2, [sp, #32]
 800dd94:	7812      	ldrb	r2, [r2, #0]
 800dd96:	2a30      	cmp	r2, #48	; 0x30
 800dd98:	d0f8      	beq.n	800dd8c <_dtoa_r+0x65c>
 800dd9a:	9308      	str	r3, [sp, #32]
 800dd9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd9e:	9303      	str	r3, [sp, #12]
 800dda0:	e046      	b.n	800de30 <_dtoa_r+0x700>
 800dda2:	2200      	movs	r2, #0
 800dda4:	4b2e      	ldr	r3, [pc, #184]	; (800de60 <_dtoa_r+0x730>)
 800dda6:	f7f4 fa9f 	bl	80022e8 <__aeabi_dmul>
 800ddaa:	0006      	movs	r6, r0
 800ddac:	000f      	movs	r7, r1
 800ddae:	e7b2      	b.n	800dd16 <_dtoa_r+0x5e6>
 800ddb0:	9b06      	ldr	r3, [sp, #24]
 800ddb2:	9a06      	ldr	r2, [sp, #24]
 800ddb4:	930a      	str	r3, [sp, #40]	; 0x28
 800ddb6:	9b07      	ldr	r3, [sp, #28]
 800ddb8:	9c08      	ldr	r4, [sp, #32]
 800ddba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	189b      	adds	r3, r3, r2
 800ddc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddc2:	0032      	movs	r2, r6
 800ddc4:	003b      	movs	r3, r7
 800ddc6:	0020      	movs	r0, r4
 800ddc8:	0029      	movs	r1, r5
 800ddca:	f7f3 fe93 	bl	8001af4 <__aeabi_ddiv>
 800ddce:	f7f5 f8ed 	bl	8002fac <__aeabi_d2iz>
 800ddd2:	9007      	str	r0, [sp, #28]
 800ddd4:	f7f5 f920 	bl	8003018 <__aeabi_i2d>
 800ddd8:	0032      	movs	r2, r6
 800ddda:	003b      	movs	r3, r7
 800dddc:	f7f4 fa84 	bl	80022e8 <__aeabi_dmul>
 800dde0:	0002      	movs	r2, r0
 800dde2:	000b      	movs	r3, r1
 800dde4:	0020      	movs	r0, r4
 800dde6:	0029      	movs	r1, r5
 800dde8:	f7f4 fd40 	bl	800286c <__aeabi_dsub>
 800ddec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddee:	001a      	movs	r2, r3
 800ddf0:	3201      	adds	r2, #1
 800ddf2:	920a      	str	r2, [sp, #40]	; 0x28
 800ddf4:	9208      	str	r2, [sp, #32]
 800ddf6:	9a07      	ldr	r2, [sp, #28]
 800ddf8:	3230      	adds	r2, #48	; 0x30
 800ddfa:	701a      	strb	r2, [r3, #0]
 800ddfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d14f      	bne.n	800dea2 <_dtoa_r+0x772>
 800de02:	0002      	movs	r2, r0
 800de04:	000b      	movs	r3, r1
 800de06:	f7f3 fb15 	bl	8001434 <__aeabi_dadd>
 800de0a:	0032      	movs	r2, r6
 800de0c:	003b      	movs	r3, r7
 800de0e:	0004      	movs	r4, r0
 800de10:	000d      	movs	r5, r1
 800de12:	f7f2 fb3f 	bl	8000494 <__aeabi_dcmpgt>
 800de16:	2800      	cmp	r0, #0
 800de18:	d12e      	bne.n	800de78 <_dtoa_r+0x748>
 800de1a:	0032      	movs	r2, r6
 800de1c:	003b      	movs	r3, r7
 800de1e:	0020      	movs	r0, r4
 800de20:	0029      	movs	r1, r5
 800de22:	f7f2 fb1d 	bl	8000460 <__aeabi_dcmpeq>
 800de26:	2800      	cmp	r0, #0
 800de28:	d002      	beq.n	800de30 <_dtoa_r+0x700>
 800de2a:	9b07      	ldr	r3, [sp, #28]
 800de2c:	07de      	lsls	r6, r3, #31
 800de2e:	d423      	bmi.n	800de78 <_dtoa_r+0x748>
 800de30:	9905      	ldr	r1, [sp, #20]
 800de32:	9804      	ldr	r0, [sp, #16]
 800de34:	f000 fe86 	bl	800eb44 <_Bfree>
 800de38:	2300      	movs	r3, #0
 800de3a:	9a08      	ldr	r2, [sp, #32]
 800de3c:	7013      	strb	r3, [r2, #0]
 800de3e:	9b03      	ldr	r3, [sp, #12]
 800de40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800de42:	3301      	adds	r3, #1
 800de44:	6013      	str	r3, [r2, #0]
 800de46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d100      	bne.n	800de4e <_dtoa_r+0x71e>
 800de4c:	e4ba      	b.n	800d7c4 <_dtoa_r+0x94>
 800de4e:	9a08      	ldr	r2, [sp, #32]
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	e4b7      	b.n	800d7c4 <_dtoa_r+0x94>
 800de54:	08012260 	.word	0x08012260
 800de58:	08012238 	.word	0x08012238
 800de5c:	3ff00000 	.word	0x3ff00000
 800de60:	40240000 	.word	0x40240000
 800de64:	401c0000 	.word	0x401c0000
 800de68:	fcc00000 	.word	0xfcc00000
 800de6c:	40140000 	.word	0x40140000
 800de70:	7cc00000 	.word	0x7cc00000
 800de74:	3fe00000 	.word	0x3fe00000
 800de78:	9b03      	ldr	r3, [sp, #12]
 800de7a:	930e      	str	r3, [sp, #56]	; 0x38
 800de7c:	9b08      	ldr	r3, [sp, #32]
 800de7e:	9308      	str	r3, [sp, #32]
 800de80:	3b01      	subs	r3, #1
 800de82:	781a      	ldrb	r2, [r3, #0]
 800de84:	2a39      	cmp	r2, #57	; 0x39
 800de86:	d108      	bne.n	800de9a <_dtoa_r+0x76a>
 800de88:	9a06      	ldr	r2, [sp, #24]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d1f7      	bne.n	800de7e <_dtoa_r+0x74e>
 800de8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de90:	9906      	ldr	r1, [sp, #24]
 800de92:	3201      	adds	r2, #1
 800de94:	920e      	str	r2, [sp, #56]	; 0x38
 800de96:	2230      	movs	r2, #48	; 0x30
 800de98:	700a      	strb	r2, [r1, #0]
 800de9a:	781a      	ldrb	r2, [r3, #0]
 800de9c:	3201      	adds	r2, #1
 800de9e:	701a      	strb	r2, [r3, #0]
 800dea0:	e77c      	b.n	800dd9c <_dtoa_r+0x66c>
 800dea2:	2200      	movs	r2, #0
 800dea4:	4ba9      	ldr	r3, [pc, #676]	; (800e14c <_dtoa_r+0xa1c>)
 800dea6:	f7f4 fa1f 	bl	80022e8 <__aeabi_dmul>
 800deaa:	2200      	movs	r2, #0
 800deac:	2300      	movs	r3, #0
 800deae:	0004      	movs	r4, r0
 800deb0:	000d      	movs	r5, r1
 800deb2:	f7f2 fad5 	bl	8000460 <__aeabi_dcmpeq>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d100      	bne.n	800debc <_dtoa_r+0x78c>
 800deba:	e782      	b.n	800ddc2 <_dtoa_r+0x692>
 800debc:	e7b8      	b.n	800de30 <_dtoa_r+0x700>
 800debe:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800dec0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800dec2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dec4:	2f00      	cmp	r7, #0
 800dec6:	d012      	beq.n	800deee <_dtoa_r+0x7be>
 800dec8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800deca:	2a01      	cmp	r2, #1
 800decc:	dc6e      	bgt.n	800dfac <_dtoa_r+0x87c>
 800dece:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ded0:	2a00      	cmp	r2, #0
 800ded2:	d065      	beq.n	800dfa0 <_dtoa_r+0x870>
 800ded4:	4a9e      	ldr	r2, [pc, #632]	; (800e150 <_dtoa_r+0xa20>)
 800ded6:	189b      	adds	r3, r3, r2
 800ded8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800deda:	2101      	movs	r1, #1
 800dedc:	18d2      	adds	r2, r2, r3
 800dede:	920a      	str	r2, [sp, #40]	; 0x28
 800dee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dee2:	9804      	ldr	r0, [sp, #16]
 800dee4:	18d3      	adds	r3, r2, r3
 800dee6:	930c      	str	r3, [sp, #48]	; 0x30
 800dee8:	f000 ff28 	bl	800ed3c <__i2b>
 800deec:	0007      	movs	r7, r0
 800deee:	2c00      	cmp	r4, #0
 800def0:	d00e      	beq.n	800df10 <_dtoa_r+0x7e0>
 800def2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800def4:	2b00      	cmp	r3, #0
 800def6:	dd0b      	ble.n	800df10 <_dtoa_r+0x7e0>
 800def8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800defa:	0023      	movs	r3, r4
 800defc:	4294      	cmp	r4, r2
 800defe:	dd00      	ble.n	800df02 <_dtoa_r+0x7d2>
 800df00:	0013      	movs	r3, r2
 800df02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df04:	1ae4      	subs	r4, r4, r3
 800df06:	1ad2      	subs	r2, r2, r3
 800df08:	920a      	str	r2, [sp, #40]	; 0x28
 800df0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	930c      	str	r3, [sp, #48]	; 0x30
 800df10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df12:	2b00      	cmp	r3, #0
 800df14:	d01e      	beq.n	800df54 <_dtoa_r+0x824>
 800df16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d05c      	beq.n	800dfd6 <_dtoa_r+0x8a6>
 800df1c:	2d00      	cmp	r5, #0
 800df1e:	dd10      	ble.n	800df42 <_dtoa_r+0x812>
 800df20:	0039      	movs	r1, r7
 800df22:	002a      	movs	r2, r5
 800df24:	9804      	ldr	r0, [sp, #16]
 800df26:	f000 ffd1 	bl	800eecc <__pow5mult>
 800df2a:	9a05      	ldr	r2, [sp, #20]
 800df2c:	0001      	movs	r1, r0
 800df2e:	0007      	movs	r7, r0
 800df30:	9804      	ldr	r0, [sp, #16]
 800df32:	f000 ff1b 	bl	800ed6c <__multiply>
 800df36:	0006      	movs	r6, r0
 800df38:	9905      	ldr	r1, [sp, #20]
 800df3a:	9804      	ldr	r0, [sp, #16]
 800df3c:	f000 fe02 	bl	800eb44 <_Bfree>
 800df40:	9605      	str	r6, [sp, #20]
 800df42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df44:	1b5a      	subs	r2, r3, r5
 800df46:	42ab      	cmp	r3, r5
 800df48:	d004      	beq.n	800df54 <_dtoa_r+0x824>
 800df4a:	9905      	ldr	r1, [sp, #20]
 800df4c:	9804      	ldr	r0, [sp, #16]
 800df4e:	f000 ffbd 	bl	800eecc <__pow5mult>
 800df52:	9005      	str	r0, [sp, #20]
 800df54:	2101      	movs	r1, #1
 800df56:	9804      	ldr	r0, [sp, #16]
 800df58:	f000 fef0 	bl	800ed3c <__i2b>
 800df5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df5e:	0006      	movs	r6, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	dd3a      	ble.n	800dfda <_dtoa_r+0x8aa>
 800df64:	001a      	movs	r2, r3
 800df66:	0001      	movs	r1, r0
 800df68:	9804      	ldr	r0, [sp, #16]
 800df6a:	f000 ffaf 	bl	800eecc <__pow5mult>
 800df6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df70:	0006      	movs	r6, r0
 800df72:	2500      	movs	r5, #0
 800df74:	2b01      	cmp	r3, #1
 800df76:	dc38      	bgt.n	800dfea <_dtoa_r+0x8ba>
 800df78:	2500      	movs	r5, #0
 800df7a:	9b08      	ldr	r3, [sp, #32]
 800df7c:	42ab      	cmp	r3, r5
 800df7e:	d130      	bne.n	800dfe2 <_dtoa_r+0x8b2>
 800df80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df82:	031b      	lsls	r3, r3, #12
 800df84:	42ab      	cmp	r3, r5
 800df86:	d12c      	bne.n	800dfe2 <_dtoa_r+0x8b2>
 800df88:	4b72      	ldr	r3, [pc, #456]	; (800e154 <_dtoa_r+0xa24>)
 800df8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df8c:	4213      	tst	r3, r2
 800df8e:	d028      	beq.n	800dfe2 <_dtoa_r+0x8b2>
 800df90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df92:	3501      	adds	r5, #1
 800df94:	3301      	adds	r3, #1
 800df96:	930a      	str	r3, [sp, #40]	; 0x28
 800df98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df9a:	3301      	adds	r3, #1
 800df9c:	930c      	str	r3, [sp, #48]	; 0x30
 800df9e:	e020      	b.n	800dfe2 <_dtoa_r+0x8b2>
 800dfa0:	2336      	movs	r3, #54	; 0x36
 800dfa2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dfa4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800dfa6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dfa8:	1a9b      	subs	r3, r3, r2
 800dfaa:	e795      	b.n	800ded8 <_dtoa_r+0x7a8>
 800dfac:	9b07      	ldr	r3, [sp, #28]
 800dfae:	1e5d      	subs	r5, r3, #1
 800dfb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfb2:	42ab      	cmp	r3, r5
 800dfb4:	db07      	blt.n	800dfc6 <_dtoa_r+0x896>
 800dfb6:	1b5d      	subs	r5, r3, r5
 800dfb8:	9b07      	ldr	r3, [sp, #28]
 800dfba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	da8b      	bge.n	800ded8 <_dtoa_r+0x7a8>
 800dfc0:	1ae4      	subs	r4, r4, r3
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	e788      	b.n	800ded8 <_dtoa_r+0x7a8>
 800dfc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dfca:	1aeb      	subs	r3, r5, r3
 800dfcc:	18d3      	adds	r3, r2, r3
 800dfce:	950d      	str	r5, [sp, #52]	; 0x34
 800dfd0:	9313      	str	r3, [sp, #76]	; 0x4c
 800dfd2:	2500      	movs	r5, #0
 800dfd4:	e7f0      	b.n	800dfb8 <_dtoa_r+0x888>
 800dfd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfd8:	e7b7      	b.n	800df4a <_dtoa_r+0x81a>
 800dfda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dfdc:	2500      	movs	r5, #0
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	ddca      	ble.n	800df78 <_dtoa_r+0x848>
 800dfe2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dfe4:	2001      	movs	r0, #1
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d008      	beq.n	800dffc <_dtoa_r+0x8cc>
 800dfea:	6933      	ldr	r3, [r6, #16]
 800dfec:	3303      	adds	r3, #3
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	18f3      	adds	r3, r6, r3
 800dff2:	6858      	ldr	r0, [r3, #4]
 800dff4:	f000 fe5a 	bl	800ecac <__hi0bits>
 800dff8:	2320      	movs	r3, #32
 800dffa:	1a18      	subs	r0, r3, r0
 800dffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dffe:	1818      	adds	r0, r3, r0
 800e000:	0002      	movs	r2, r0
 800e002:	231f      	movs	r3, #31
 800e004:	401a      	ands	r2, r3
 800e006:	4218      	tst	r0, r3
 800e008:	d047      	beq.n	800e09a <_dtoa_r+0x96a>
 800e00a:	3301      	adds	r3, #1
 800e00c:	1a9b      	subs	r3, r3, r2
 800e00e:	2b04      	cmp	r3, #4
 800e010:	dd3f      	ble.n	800e092 <_dtoa_r+0x962>
 800e012:	231c      	movs	r3, #28
 800e014:	1a9b      	subs	r3, r3, r2
 800e016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e018:	18e4      	adds	r4, r4, r3
 800e01a:	18d2      	adds	r2, r2, r3
 800e01c:	920a      	str	r2, [sp, #40]	; 0x28
 800e01e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e020:	18d3      	adds	r3, r2, r3
 800e022:	930c      	str	r3, [sp, #48]	; 0x30
 800e024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e026:	2b00      	cmp	r3, #0
 800e028:	dd05      	ble.n	800e036 <_dtoa_r+0x906>
 800e02a:	001a      	movs	r2, r3
 800e02c:	9905      	ldr	r1, [sp, #20]
 800e02e:	9804      	ldr	r0, [sp, #16]
 800e030:	f000 ffa8 	bl	800ef84 <__lshift>
 800e034:	9005      	str	r0, [sp, #20]
 800e036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e038:	2b00      	cmp	r3, #0
 800e03a:	dd05      	ble.n	800e048 <_dtoa_r+0x918>
 800e03c:	0031      	movs	r1, r6
 800e03e:	001a      	movs	r2, r3
 800e040:	9804      	ldr	r0, [sp, #16]
 800e042:	f000 ff9f 	bl	800ef84 <__lshift>
 800e046:	0006      	movs	r6, r0
 800e048:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d027      	beq.n	800e09e <_dtoa_r+0x96e>
 800e04e:	0031      	movs	r1, r6
 800e050:	9805      	ldr	r0, [sp, #20]
 800e052:	f001 f805 	bl	800f060 <__mcmp>
 800e056:	2800      	cmp	r0, #0
 800e058:	da21      	bge.n	800e09e <_dtoa_r+0x96e>
 800e05a:	9b03      	ldr	r3, [sp, #12]
 800e05c:	220a      	movs	r2, #10
 800e05e:	3b01      	subs	r3, #1
 800e060:	9303      	str	r3, [sp, #12]
 800e062:	9905      	ldr	r1, [sp, #20]
 800e064:	2300      	movs	r3, #0
 800e066:	9804      	ldr	r0, [sp, #16]
 800e068:	f000 fd90 	bl	800eb8c <__multadd>
 800e06c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e06e:	9005      	str	r0, [sp, #20]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d100      	bne.n	800e076 <_dtoa_r+0x946>
 800e074:	e15d      	b.n	800e332 <_dtoa_r+0xc02>
 800e076:	2300      	movs	r3, #0
 800e078:	0039      	movs	r1, r7
 800e07a:	220a      	movs	r2, #10
 800e07c:	9804      	ldr	r0, [sp, #16]
 800e07e:	f000 fd85 	bl	800eb8c <__multadd>
 800e082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e084:	0007      	movs	r7, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	dc49      	bgt.n	800e11e <_dtoa_r+0x9ee>
 800e08a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	dc0e      	bgt.n	800e0ae <_dtoa_r+0x97e>
 800e090:	e045      	b.n	800e11e <_dtoa_r+0x9ee>
 800e092:	2b04      	cmp	r3, #4
 800e094:	d0c6      	beq.n	800e024 <_dtoa_r+0x8f4>
 800e096:	331c      	adds	r3, #28
 800e098:	e7bd      	b.n	800e016 <_dtoa_r+0x8e6>
 800e09a:	0013      	movs	r3, r2
 800e09c:	e7fb      	b.n	800e096 <_dtoa_r+0x966>
 800e09e:	9b07      	ldr	r3, [sp, #28]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	dc36      	bgt.n	800e112 <_dtoa_r+0x9e2>
 800e0a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	dd33      	ble.n	800e112 <_dtoa_r+0x9e2>
 800e0aa:	9b07      	ldr	r3, [sp, #28]
 800e0ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10c      	bne.n	800e0ce <_dtoa_r+0x99e>
 800e0b4:	0031      	movs	r1, r6
 800e0b6:	2205      	movs	r2, #5
 800e0b8:	9804      	ldr	r0, [sp, #16]
 800e0ba:	f000 fd67 	bl	800eb8c <__multadd>
 800e0be:	0006      	movs	r6, r0
 800e0c0:	0001      	movs	r1, r0
 800e0c2:	9805      	ldr	r0, [sp, #20]
 800e0c4:	f000 ffcc 	bl	800f060 <__mcmp>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	dd00      	ble.n	800e0ce <_dtoa_r+0x99e>
 800e0cc:	e59f      	b.n	800dc0e <_dtoa_r+0x4de>
 800e0ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e0d0:	43db      	mvns	r3, r3
 800e0d2:	9303      	str	r3, [sp, #12]
 800e0d4:	9b06      	ldr	r3, [sp, #24]
 800e0d6:	9308      	str	r3, [sp, #32]
 800e0d8:	2500      	movs	r5, #0
 800e0da:	0031      	movs	r1, r6
 800e0dc:	9804      	ldr	r0, [sp, #16]
 800e0de:	f000 fd31 	bl	800eb44 <_Bfree>
 800e0e2:	2f00      	cmp	r7, #0
 800e0e4:	d100      	bne.n	800e0e8 <_dtoa_r+0x9b8>
 800e0e6:	e6a3      	b.n	800de30 <_dtoa_r+0x700>
 800e0e8:	2d00      	cmp	r5, #0
 800e0ea:	d005      	beq.n	800e0f8 <_dtoa_r+0x9c8>
 800e0ec:	42bd      	cmp	r5, r7
 800e0ee:	d003      	beq.n	800e0f8 <_dtoa_r+0x9c8>
 800e0f0:	0029      	movs	r1, r5
 800e0f2:	9804      	ldr	r0, [sp, #16]
 800e0f4:	f000 fd26 	bl	800eb44 <_Bfree>
 800e0f8:	0039      	movs	r1, r7
 800e0fa:	9804      	ldr	r0, [sp, #16]
 800e0fc:	f000 fd22 	bl	800eb44 <_Bfree>
 800e100:	e696      	b.n	800de30 <_dtoa_r+0x700>
 800e102:	2600      	movs	r6, #0
 800e104:	0037      	movs	r7, r6
 800e106:	e7e2      	b.n	800e0ce <_dtoa_r+0x99e>
 800e108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e10a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800e10c:	9303      	str	r3, [sp, #12]
 800e10e:	0037      	movs	r7, r6
 800e110:	e57d      	b.n	800dc0e <_dtoa_r+0x4de>
 800e112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e114:	2b00      	cmp	r3, #0
 800e116:	d100      	bne.n	800e11a <_dtoa_r+0x9ea>
 800e118:	e0c3      	b.n	800e2a2 <_dtoa_r+0xb72>
 800e11a:	9b07      	ldr	r3, [sp, #28]
 800e11c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e11e:	2c00      	cmp	r4, #0
 800e120:	dd05      	ble.n	800e12e <_dtoa_r+0x9fe>
 800e122:	0039      	movs	r1, r7
 800e124:	0022      	movs	r2, r4
 800e126:	9804      	ldr	r0, [sp, #16]
 800e128:	f000 ff2c 	bl	800ef84 <__lshift>
 800e12c:	0007      	movs	r7, r0
 800e12e:	0038      	movs	r0, r7
 800e130:	2d00      	cmp	r5, #0
 800e132:	d024      	beq.n	800e17e <_dtoa_r+0xa4e>
 800e134:	6879      	ldr	r1, [r7, #4]
 800e136:	9804      	ldr	r0, [sp, #16]
 800e138:	f000 fcc0 	bl	800eabc <_Balloc>
 800e13c:	1e04      	subs	r4, r0, #0
 800e13e:	d111      	bne.n	800e164 <_dtoa_r+0xa34>
 800e140:	0022      	movs	r2, r4
 800e142:	4b05      	ldr	r3, [pc, #20]	; (800e158 <_dtoa_r+0xa28>)
 800e144:	4805      	ldr	r0, [pc, #20]	; (800e15c <_dtoa_r+0xa2c>)
 800e146:	4906      	ldr	r1, [pc, #24]	; (800e160 <_dtoa_r+0xa30>)
 800e148:	f7ff fb07 	bl	800d75a <_dtoa_r+0x2a>
 800e14c:	40240000 	.word	0x40240000
 800e150:	00000433 	.word	0x00000433
 800e154:	7ff00000 	.word	0x7ff00000
 800e158:	08012168 	.word	0x08012168
 800e15c:	08012110 	.word	0x08012110
 800e160:	000002ef 	.word	0x000002ef
 800e164:	0039      	movs	r1, r7
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	310c      	adds	r1, #12
 800e16a:	3202      	adds	r2, #2
 800e16c:	0092      	lsls	r2, r2, #2
 800e16e:	300c      	adds	r0, #12
 800e170:	f7ff fa1c 	bl	800d5ac <memcpy>
 800e174:	2201      	movs	r2, #1
 800e176:	0021      	movs	r1, r4
 800e178:	9804      	ldr	r0, [sp, #16]
 800e17a:	f000 ff03 	bl	800ef84 <__lshift>
 800e17e:	9b06      	ldr	r3, [sp, #24]
 800e180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e182:	9307      	str	r3, [sp, #28]
 800e184:	3b01      	subs	r3, #1
 800e186:	189b      	adds	r3, r3, r2
 800e188:	2201      	movs	r2, #1
 800e18a:	003d      	movs	r5, r7
 800e18c:	0007      	movs	r7, r0
 800e18e:	930e      	str	r3, [sp, #56]	; 0x38
 800e190:	9b08      	ldr	r3, [sp, #32]
 800e192:	4013      	ands	r3, r2
 800e194:	930d      	str	r3, [sp, #52]	; 0x34
 800e196:	0031      	movs	r1, r6
 800e198:	9805      	ldr	r0, [sp, #20]
 800e19a:	f7ff fa39 	bl	800d610 <quorem>
 800e19e:	0029      	movs	r1, r5
 800e1a0:	0004      	movs	r4, r0
 800e1a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800e1a4:	9805      	ldr	r0, [sp, #20]
 800e1a6:	f000 ff5b 	bl	800f060 <__mcmp>
 800e1aa:	003a      	movs	r2, r7
 800e1ac:	900c      	str	r0, [sp, #48]	; 0x30
 800e1ae:	0031      	movs	r1, r6
 800e1b0:	9804      	ldr	r0, [sp, #16]
 800e1b2:	f000 ff71 	bl	800f098 <__mdiff>
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	68c3      	ldr	r3, [r0, #12]
 800e1ba:	3430      	adds	r4, #48	; 0x30
 800e1bc:	9008      	str	r0, [sp, #32]
 800e1be:	920a      	str	r2, [sp, #40]	; 0x28
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d104      	bne.n	800e1ce <_dtoa_r+0xa9e>
 800e1c4:	0001      	movs	r1, r0
 800e1c6:	9805      	ldr	r0, [sp, #20]
 800e1c8:	f000 ff4a 	bl	800f060 <__mcmp>
 800e1cc:	900a      	str	r0, [sp, #40]	; 0x28
 800e1ce:	9908      	ldr	r1, [sp, #32]
 800e1d0:	9804      	ldr	r0, [sp, #16]
 800e1d2:	f000 fcb7 	bl	800eb44 <_Bfree>
 800e1d6:	9b07      	ldr	r3, [sp, #28]
 800e1d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1da:	3301      	adds	r3, #1
 800e1dc:	9308      	str	r3, [sp, #32]
 800e1de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	d109      	bne.n	800e1fc <_dtoa_r+0xacc>
 800e1e8:	2c39      	cmp	r4, #57	; 0x39
 800e1ea:	d022      	beq.n	800e232 <_dtoa_r+0xb02>
 800e1ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dd01      	ble.n	800e1f6 <_dtoa_r+0xac6>
 800e1f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e1f4:	3431      	adds	r4, #49	; 0x31
 800e1f6:	9b07      	ldr	r3, [sp, #28]
 800e1f8:	701c      	strb	r4, [r3, #0]
 800e1fa:	e76e      	b.n	800e0da <_dtoa_r+0x9aa>
 800e1fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	db04      	blt.n	800e20c <_dtoa_r+0xadc>
 800e202:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e204:	4313      	orrs	r3, r2
 800e206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e208:	4313      	orrs	r3, r2
 800e20a:	d11e      	bne.n	800e24a <_dtoa_r+0xb1a>
 800e20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e20e:	2b00      	cmp	r3, #0
 800e210:	ddf1      	ble.n	800e1f6 <_dtoa_r+0xac6>
 800e212:	9905      	ldr	r1, [sp, #20]
 800e214:	2201      	movs	r2, #1
 800e216:	9804      	ldr	r0, [sp, #16]
 800e218:	f000 feb4 	bl	800ef84 <__lshift>
 800e21c:	0031      	movs	r1, r6
 800e21e:	9005      	str	r0, [sp, #20]
 800e220:	f000 ff1e 	bl	800f060 <__mcmp>
 800e224:	2800      	cmp	r0, #0
 800e226:	dc02      	bgt.n	800e22e <_dtoa_r+0xafe>
 800e228:	d1e5      	bne.n	800e1f6 <_dtoa_r+0xac6>
 800e22a:	07e3      	lsls	r3, r4, #31
 800e22c:	d5e3      	bpl.n	800e1f6 <_dtoa_r+0xac6>
 800e22e:	2c39      	cmp	r4, #57	; 0x39
 800e230:	d1df      	bne.n	800e1f2 <_dtoa_r+0xac2>
 800e232:	2339      	movs	r3, #57	; 0x39
 800e234:	9a07      	ldr	r2, [sp, #28]
 800e236:	7013      	strb	r3, [r2, #0]
 800e238:	9b08      	ldr	r3, [sp, #32]
 800e23a:	9308      	str	r3, [sp, #32]
 800e23c:	3b01      	subs	r3, #1
 800e23e:	781a      	ldrb	r2, [r3, #0]
 800e240:	2a39      	cmp	r2, #57	; 0x39
 800e242:	d063      	beq.n	800e30c <_dtoa_r+0xbdc>
 800e244:	3201      	adds	r2, #1
 800e246:	701a      	strb	r2, [r3, #0]
 800e248:	e747      	b.n	800e0da <_dtoa_r+0x9aa>
 800e24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	dd03      	ble.n	800e258 <_dtoa_r+0xb28>
 800e250:	2c39      	cmp	r4, #57	; 0x39
 800e252:	d0ee      	beq.n	800e232 <_dtoa_r+0xb02>
 800e254:	3401      	adds	r4, #1
 800e256:	e7ce      	b.n	800e1f6 <_dtoa_r+0xac6>
 800e258:	9b07      	ldr	r3, [sp, #28]
 800e25a:	9a07      	ldr	r2, [sp, #28]
 800e25c:	701c      	strb	r4, [r3, #0]
 800e25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e260:	4293      	cmp	r3, r2
 800e262:	d03e      	beq.n	800e2e2 <_dtoa_r+0xbb2>
 800e264:	2300      	movs	r3, #0
 800e266:	220a      	movs	r2, #10
 800e268:	9905      	ldr	r1, [sp, #20]
 800e26a:	9804      	ldr	r0, [sp, #16]
 800e26c:	f000 fc8e 	bl	800eb8c <__multadd>
 800e270:	2300      	movs	r3, #0
 800e272:	9005      	str	r0, [sp, #20]
 800e274:	220a      	movs	r2, #10
 800e276:	0029      	movs	r1, r5
 800e278:	9804      	ldr	r0, [sp, #16]
 800e27a:	42bd      	cmp	r5, r7
 800e27c:	d106      	bne.n	800e28c <_dtoa_r+0xb5c>
 800e27e:	f000 fc85 	bl	800eb8c <__multadd>
 800e282:	0005      	movs	r5, r0
 800e284:	0007      	movs	r7, r0
 800e286:	9b08      	ldr	r3, [sp, #32]
 800e288:	9307      	str	r3, [sp, #28]
 800e28a:	e784      	b.n	800e196 <_dtoa_r+0xa66>
 800e28c:	f000 fc7e 	bl	800eb8c <__multadd>
 800e290:	0039      	movs	r1, r7
 800e292:	0005      	movs	r5, r0
 800e294:	2300      	movs	r3, #0
 800e296:	220a      	movs	r2, #10
 800e298:	9804      	ldr	r0, [sp, #16]
 800e29a:	f000 fc77 	bl	800eb8c <__multadd>
 800e29e:	0007      	movs	r7, r0
 800e2a0:	e7f1      	b.n	800e286 <_dtoa_r+0xb56>
 800e2a2:	9b07      	ldr	r3, [sp, #28]
 800e2a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2a6:	2500      	movs	r5, #0
 800e2a8:	0031      	movs	r1, r6
 800e2aa:	9805      	ldr	r0, [sp, #20]
 800e2ac:	f7ff f9b0 	bl	800d610 <quorem>
 800e2b0:	9b06      	ldr	r3, [sp, #24]
 800e2b2:	3030      	adds	r0, #48	; 0x30
 800e2b4:	5558      	strb	r0, [r3, r5]
 800e2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2b8:	3501      	adds	r5, #1
 800e2ba:	0004      	movs	r4, r0
 800e2bc:	42ab      	cmp	r3, r5
 800e2be:	dd07      	ble.n	800e2d0 <_dtoa_r+0xba0>
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	220a      	movs	r2, #10
 800e2c4:	9905      	ldr	r1, [sp, #20]
 800e2c6:	9804      	ldr	r0, [sp, #16]
 800e2c8:	f000 fc60 	bl	800eb8c <__multadd>
 800e2cc:	9005      	str	r0, [sp, #20]
 800e2ce:	e7eb      	b.n	800e2a8 <_dtoa_r+0xb78>
 800e2d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	2a00      	cmp	r2, #0
 800e2d6:	dd00      	ble.n	800e2da <_dtoa_r+0xbaa>
 800e2d8:	0013      	movs	r3, r2
 800e2da:	2500      	movs	r5, #0
 800e2dc:	9a06      	ldr	r2, [sp, #24]
 800e2de:	18d3      	adds	r3, r2, r3
 800e2e0:	9308      	str	r3, [sp, #32]
 800e2e2:	9905      	ldr	r1, [sp, #20]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	9804      	ldr	r0, [sp, #16]
 800e2e8:	f000 fe4c 	bl	800ef84 <__lshift>
 800e2ec:	0031      	movs	r1, r6
 800e2ee:	9005      	str	r0, [sp, #20]
 800e2f0:	f000 feb6 	bl	800f060 <__mcmp>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	dc9f      	bgt.n	800e238 <_dtoa_r+0xb08>
 800e2f8:	d101      	bne.n	800e2fe <_dtoa_r+0xbce>
 800e2fa:	07e4      	lsls	r4, r4, #31
 800e2fc:	d49c      	bmi.n	800e238 <_dtoa_r+0xb08>
 800e2fe:	9b08      	ldr	r3, [sp, #32]
 800e300:	9308      	str	r3, [sp, #32]
 800e302:	3b01      	subs	r3, #1
 800e304:	781a      	ldrb	r2, [r3, #0]
 800e306:	2a30      	cmp	r2, #48	; 0x30
 800e308:	d0fa      	beq.n	800e300 <_dtoa_r+0xbd0>
 800e30a:	e6e6      	b.n	800e0da <_dtoa_r+0x9aa>
 800e30c:	9a06      	ldr	r2, [sp, #24]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d193      	bne.n	800e23a <_dtoa_r+0xb0a>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	3301      	adds	r3, #1
 800e316:	9303      	str	r3, [sp, #12]
 800e318:	2331      	movs	r3, #49	; 0x31
 800e31a:	7013      	strb	r3, [r2, #0]
 800e31c:	e6dd      	b.n	800e0da <_dtoa_r+0x9aa>
 800e31e:	4b09      	ldr	r3, [pc, #36]	; (800e344 <_dtoa_r+0xc14>)
 800e320:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e322:	9306      	str	r3, [sp, #24]
 800e324:	4b08      	ldr	r3, [pc, #32]	; (800e348 <_dtoa_r+0xc18>)
 800e326:	2a00      	cmp	r2, #0
 800e328:	d001      	beq.n	800e32e <_dtoa_r+0xbfe>
 800e32a:	f7ff fa49 	bl	800d7c0 <_dtoa_r+0x90>
 800e32e:	f7ff fa49 	bl	800d7c4 <_dtoa_r+0x94>
 800e332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e334:	2b00      	cmp	r3, #0
 800e336:	dcb6      	bgt.n	800e2a6 <_dtoa_r+0xb76>
 800e338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	dd00      	ble.n	800e340 <_dtoa_r+0xc10>
 800e33e:	e6b6      	b.n	800e0ae <_dtoa_r+0x97e>
 800e340:	e7b1      	b.n	800e2a6 <_dtoa_r+0xb76>
 800e342:	46c0      	nop			; (mov r8, r8)
 800e344:	08012103 	.word	0x08012103
 800e348:	0801210b 	.word	0x0801210b

0800e34c <_free_r>:
 800e34c:	b570      	push	{r4, r5, r6, lr}
 800e34e:	0005      	movs	r5, r0
 800e350:	2900      	cmp	r1, #0
 800e352:	d010      	beq.n	800e376 <_free_r+0x2a>
 800e354:	1f0c      	subs	r4, r1, #4
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	da00      	bge.n	800e35e <_free_r+0x12>
 800e35c:	18e4      	adds	r4, r4, r3
 800e35e:	0028      	movs	r0, r5
 800e360:	f7fd f894 	bl	800b48c <__malloc_lock>
 800e364:	4a1d      	ldr	r2, [pc, #116]	; (800e3dc <_free_r+0x90>)
 800e366:	6813      	ldr	r3, [r2, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d105      	bne.n	800e378 <_free_r+0x2c>
 800e36c:	6063      	str	r3, [r4, #4]
 800e36e:	6014      	str	r4, [r2, #0]
 800e370:	0028      	movs	r0, r5
 800e372:	f7fd f893 	bl	800b49c <__malloc_unlock>
 800e376:	bd70      	pop	{r4, r5, r6, pc}
 800e378:	42a3      	cmp	r3, r4
 800e37a:	d908      	bls.n	800e38e <_free_r+0x42>
 800e37c:	6820      	ldr	r0, [r4, #0]
 800e37e:	1821      	adds	r1, r4, r0
 800e380:	428b      	cmp	r3, r1
 800e382:	d1f3      	bne.n	800e36c <_free_r+0x20>
 800e384:	6819      	ldr	r1, [r3, #0]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	1809      	adds	r1, r1, r0
 800e38a:	6021      	str	r1, [r4, #0]
 800e38c:	e7ee      	b.n	800e36c <_free_r+0x20>
 800e38e:	001a      	movs	r2, r3
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d001      	beq.n	800e39a <_free_r+0x4e>
 800e396:	42a3      	cmp	r3, r4
 800e398:	d9f9      	bls.n	800e38e <_free_r+0x42>
 800e39a:	6811      	ldr	r1, [r2, #0]
 800e39c:	1850      	adds	r0, r2, r1
 800e39e:	42a0      	cmp	r0, r4
 800e3a0:	d10b      	bne.n	800e3ba <_free_r+0x6e>
 800e3a2:	6820      	ldr	r0, [r4, #0]
 800e3a4:	1809      	adds	r1, r1, r0
 800e3a6:	1850      	adds	r0, r2, r1
 800e3a8:	6011      	str	r1, [r2, #0]
 800e3aa:	4283      	cmp	r3, r0
 800e3ac:	d1e0      	bne.n	800e370 <_free_r+0x24>
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	1841      	adds	r1, r0, r1
 800e3b4:	6011      	str	r1, [r2, #0]
 800e3b6:	6053      	str	r3, [r2, #4]
 800e3b8:	e7da      	b.n	800e370 <_free_r+0x24>
 800e3ba:	42a0      	cmp	r0, r4
 800e3bc:	d902      	bls.n	800e3c4 <_free_r+0x78>
 800e3be:	230c      	movs	r3, #12
 800e3c0:	602b      	str	r3, [r5, #0]
 800e3c2:	e7d5      	b.n	800e370 <_free_r+0x24>
 800e3c4:	6820      	ldr	r0, [r4, #0]
 800e3c6:	1821      	adds	r1, r4, r0
 800e3c8:	428b      	cmp	r3, r1
 800e3ca:	d103      	bne.n	800e3d4 <_free_r+0x88>
 800e3cc:	6819      	ldr	r1, [r3, #0]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	1809      	adds	r1, r1, r0
 800e3d2:	6021      	str	r1, [r4, #0]
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	6054      	str	r4, [r2, #4]
 800e3d8:	e7ca      	b.n	800e370 <_free_r+0x24>
 800e3da:	46c0      	nop			; (mov r8, r8)
 800e3dc:	20005938 	.word	0x20005938

0800e3e0 <rshift>:
 800e3e0:	0002      	movs	r2, r0
 800e3e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e4:	6904      	ldr	r4, [r0, #16]
 800e3e6:	114b      	asrs	r3, r1, #5
 800e3e8:	b085      	sub	sp, #20
 800e3ea:	3214      	adds	r2, #20
 800e3ec:	9302      	str	r3, [sp, #8]
 800e3ee:	114d      	asrs	r5, r1, #5
 800e3f0:	0013      	movs	r3, r2
 800e3f2:	42ac      	cmp	r4, r5
 800e3f4:	dd32      	ble.n	800e45c <rshift+0x7c>
 800e3f6:	261f      	movs	r6, #31
 800e3f8:	000f      	movs	r7, r1
 800e3fa:	114b      	asrs	r3, r1, #5
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	00a5      	lsls	r5, r4, #2
 800e400:	18d3      	adds	r3, r2, r3
 800e402:	4037      	ands	r7, r6
 800e404:	1955      	adds	r5, r2, r5
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	9701      	str	r7, [sp, #4]
 800e40a:	4231      	tst	r1, r6
 800e40c:	d10d      	bne.n	800e42a <rshift+0x4a>
 800e40e:	0016      	movs	r6, r2
 800e410:	0019      	movs	r1, r3
 800e412:	428d      	cmp	r5, r1
 800e414:	d836      	bhi.n	800e484 <rshift+0xa4>
 800e416:	9900      	ldr	r1, [sp, #0]
 800e418:	2300      	movs	r3, #0
 800e41a:	3903      	subs	r1, #3
 800e41c:	428d      	cmp	r5, r1
 800e41e:	d302      	bcc.n	800e426 <rshift+0x46>
 800e420:	9b02      	ldr	r3, [sp, #8]
 800e422:	1ae4      	subs	r4, r4, r3
 800e424:	00a3      	lsls	r3, r4, #2
 800e426:	18d3      	adds	r3, r2, r3
 800e428:	e018      	b.n	800e45c <rshift+0x7c>
 800e42a:	2120      	movs	r1, #32
 800e42c:	9e01      	ldr	r6, [sp, #4]
 800e42e:	9f01      	ldr	r7, [sp, #4]
 800e430:	1b89      	subs	r1, r1, r6
 800e432:	9e00      	ldr	r6, [sp, #0]
 800e434:	9103      	str	r1, [sp, #12]
 800e436:	ce02      	ldmia	r6!, {r1}
 800e438:	4694      	mov	ip, r2
 800e43a:	40f9      	lsrs	r1, r7
 800e43c:	42b5      	cmp	r5, r6
 800e43e:	d816      	bhi.n	800e46e <rshift+0x8e>
 800e440:	9e00      	ldr	r6, [sp, #0]
 800e442:	2300      	movs	r3, #0
 800e444:	3601      	adds	r6, #1
 800e446:	42b5      	cmp	r5, r6
 800e448:	d303      	bcc.n	800e452 <rshift+0x72>
 800e44a:	9b02      	ldr	r3, [sp, #8]
 800e44c:	1ae3      	subs	r3, r4, r3
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	3b04      	subs	r3, #4
 800e452:	18d3      	adds	r3, r2, r3
 800e454:	6019      	str	r1, [r3, #0]
 800e456:	2900      	cmp	r1, #0
 800e458:	d000      	beq.n	800e45c <rshift+0x7c>
 800e45a:	3304      	adds	r3, #4
 800e45c:	1a99      	subs	r1, r3, r2
 800e45e:	1089      	asrs	r1, r1, #2
 800e460:	6101      	str	r1, [r0, #16]
 800e462:	4293      	cmp	r3, r2
 800e464:	d101      	bne.n	800e46a <rshift+0x8a>
 800e466:	2300      	movs	r3, #0
 800e468:	6143      	str	r3, [r0, #20]
 800e46a:	b005      	add	sp, #20
 800e46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e46e:	6837      	ldr	r7, [r6, #0]
 800e470:	9b03      	ldr	r3, [sp, #12]
 800e472:	409f      	lsls	r7, r3
 800e474:	430f      	orrs	r7, r1
 800e476:	4661      	mov	r1, ip
 800e478:	c180      	stmia	r1!, {r7}
 800e47a:	468c      	mov	ip, r1
 800e47c:	9b01      	ldr	r3, [sp, #4]
 800e47e:	ce02      	ldmia	r6!, {r1}
 800e480:	40d9      	lsrs	r1, r3
 800e482:	e7db      	b.n	800e43c <rshift+0x5c>
 800e484:	c980      	ldmia	r1!, {r7}
 800e486:	c680      	stmia	r6!, {r7}
 800e488:	e7c3      	b.n	800e412 <rshift+0x32>

0800e48a <__hexdig_fun>:
 800e48a:	0002      	movs	r2, r0
 800e48c:	3a30      	subs	r2, #48	; 0x30
 800e48e:	0003      	movs	r3, r0
 800e490:	2a09      	cmp	r2, #9
 800e492:	d802      	bhi.n	800e49a <__hexdig_fun+0x10>
 800e494:	3b20      	subs	r3, #32
 800e496:	b2d8      	uxtb	r0, r3
 800e498:	4770      	bx	lr
 800e49a:	0002      	movs	r2, r0
 800e49c:	3a61      	subs	r2, #97	; 0x61
 800e49e:	2a05      	cmp	r2, #5
 800e4a0:	d801      	bhi.n	800e4a6 <__hexdig_fun+0x1c>
 800e4a2:	3b47      	subs	r3, #71	; 0x47
 800e4a4:	e7f7      	b.n	800e496 <__hexdig_fun+0xc>
 800e4a6:	001a      	movs	r2, r3
 800e4a8:	3a41      	subs	r2, #65	; 0x41
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	2a05      	cmp	r2, #5
 800e4ae:	d8f3      	bhi.n	800e498 <__hexdig_fun+0xe>
 800e4b0:	3b27      	subs	r3, #39	; 0x27
 800e4b2:	e7f0      	b.n	800e496 <__hexdig_fun+0xc>

0800e4b4 <__gethex>:
 800e4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4b6:	b089      	sub	sp, #36	; 0x24
 800e4b8:	9307      	str	r3, [sp, #28]
 800e4ba:	2302      	movs	r3, #2
 800e4bc:	9201      	str	r2, [sp, #4]
 800e4be:	680a      	ldr	r2, [r1, #0]
 800e4c0:	425b      	negs	r3, r3
 800e4c2:	9003      	str	r0, [sp, #12]
 800e4c4:	9106      	str	r1, [sp, #24]
 800e4c6:	1c96      	adds	r6, r2, #2
 800e4c8:	1a9b      	subs	r3, r3, r2
 800e4ca:	199a      	adds	r2, r3, r6
 800e4cc:	9600      	str	r6, [sp, #0]
 800e4ce:	9205      	str	r2, [sp, #20]
 800e4d0:	9a00      	ldr	r2, [sp, #0]
 800e4d2:	3601      	adds	r6, #1
 800e4d4:	7810      	ldrb	r0, [r2, #0]
 800e4d6:	2830      	cmp	r0, #48	; 0x30
 800e4d8:	d0f7      	beq.n	800e4ca <__gethex+0x16>
 800e4da:	f7ff ffd6 	bl	800e48a <__hexdig_fun>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	001d      	movs	r5, r3
 800e4e2:	9302      	str	r3, [sp, #8]
 800e4e4:	4298      	cmp	r0, r3
 800e4e6:	d11d      	bne.n	800e524 <__gethex+0x70>
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	49a6      	ldr	r1, [pc, #664]	; (800e784 <__gethex+0x2d0>)
 800e4ec:	9800      	ldr	r0, [sp, #0]
 800e4ee:	f7fe feb8 	bl	800d262 <strncmp>
 800e4f2:	0007      	movs	r7, r0
 800e4f4:	42a8      	cmp	r0, r5
 800e4f6:	d169      	bne.n	800e5cc <__gethex+0x118>
 800e4f8:	9b00      	ldr	r3, [sp, #0]
 800e4fa:	0034      	movs	r4, r6
 800e4fc:	7858      	ldrb	r0, [r3, #1]
 800e4fe:	f7ff ffc4 	bl	800e48a <__hexdig_fun>
 800e502:	2301      	movs	r3, #1
 800e504:	9302      	str	r3, [sp, #8]
 800e506:	42a8      	cmp	r0, r5
 800e508:	d02f      	beq.n	800e56a <__gethex+0xb6>
 800e50a:	9600      	str	r6, [sp, #0]
 800e50c:	9b00      	ldr	r3, [sp, #0]
 800e50e:	7818      	ldrb	r0, [r3, #0]
 800e510:	2830      	cmp	r0, #48	; 0x30
 800e512:	d009      	beq.n	800e528 <__gethex+0x74>
 800e514:	f7ff ffb9 	bl	800e48a <__hexdig_fun>
 800e518:	4242      	negs	r2, r0
 800e51a:	4142      	adcs	r2, r0
 800e51c:	2301      	movs	r3, #1
 800e51e:	0035      	movs	r5, r6
 800e520:	9202      	str	r2, [sp, #8]
 800e522:	9305      	str	r3, [sp, #20]
 800e524:	9c00      	ldr	r4, [sp, #0]
 800e526:	e004      	b.n	800e532 <__gethex+0x7e>
 800e528:	9b00      	ldr	r3, [sp, #0]
 800e52a:	3301      	adds	r3, #1
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	e7ed      	b.n	800e50c <__gethex+0x58>
 800e530:	3401      	adds	r4, #1
 800e532:	7820      	ldrb	r0, [r4, #0]
 800e534:	f7ff ffa9 	bl	800e48a <__hexdig_fun>
 800e538:	1e07      	subs	r7, r0, #0
 800e53a:	d1f9      	bne.n	800e530 <__gethex+0x7c>
 800e53c:	2201      	movs	r2, #1
 800e53e:	0020      	movs	r0, r4
 800e540:	4990      	ldr	r1, [pc, #576]	; (800e784 <__gethex+0x2d0>)
 800e542:	f7fe fe8e 	bl	800d262 <strncmp>
 800e546:	2800      	cmp	r0, #0
 800e548:	d10d      	bne.n	800e566 <__gethex+0xb2>
 800e54a:	2d00      	cmp	r5, #0
 800e54c:	d106      	bne.n	800e55c <__gethex+0xa8>
 800e54e:	3401      	adds	r4, #1
 800e550:	0025      	movs	r5, r4
 800e552:	7820      	ldrb	r0, [r4, #0]
 800e554:	f7ff ff99 	bl	800e48a <__hexdig_fun>
 800e558:	2800      	cmp	r0, #0
 800e55a:	d102      	bne.n	800e562 <__gethex+0xae>
 800e55c:	1b2d      	subs	r5, r5, r4
 800e55e:	00af      	lsls	r7, r5, #2
 800e560:	e003      	b.n	800e56a <__gethex+0xb6>
 800e562:	3401      	adds	r4, #1
 800e564:	e7f5      	b.n	800e552 <__gethex+0x9e>
 800e566:	2d00      	cmp	r5, #0
 800e568:	d1f8      	bne.n	800e55c <__gethex+0xa8>
 800e56a:	2220      	movs	r2, #32
 800e56c:	7823      	ldrb	r3, [r4, #0]
 800e56e:	0026      	movs	r6, r4
 800e570:	4393      	bics	r3, r2
 800e572:	2b50      	cmp	r3, #80	; 0x50
 800e574:	d11d      	bne.n	800e5b2 <__gethex+0xfe>
 800e576:	7863      	ldrb	r3, [r4, #1]
 800e578:	2b2b      	cmp	r3, #43	; 0x2b
 800e57a:	d02c      	beq.n	800e5d6 <__gethex+0x122>
 800e57c:	2b2d      	cmp	r3, #45	; 0x2d
 800e57e:	d02e      	beq.n	800e5de <__gethex+0x12a>
 800e580:	2300      	movs	r3, #0
 800e582:	1c66      	adds	r6, r4, #1
 800e584:	9304      	str	r3, [sp, #16]
 800e586:	7830      	ldrb	r0, [r6, #0]
 800e588:	f7ff ff7f 	bl	800e48a <__hexdig_fun>
 800e58c:	1e43      	subs	r3, r0, #1
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	2b18      	cmp	r3, #24
 800e592:	d82b      	bhi.n	800e5ec <__gethex+0x138>
 800e594:	3810      	subs	r0, #16
 800e596:	0005      	movs	r5, r0
 800e598:	7870      	ldrb	r0, [r6, #1]
 800e59a:	f7ff ff76 	bl	800e48a <__hexdig_fun>
 800e59e:	1e43      	subs	r3, r0, #1
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	3601      	adds	r6, #1
 800e5a4:	2b18      	cmp	r3, #24
 800e5a6:	d91c      	bls.n	800e5e2 <__gethex+0x12e>
 800e5a8:	9b04      	ldr	r3, [sp, #16]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d000      	beq.n	800e5b0 <__gethex+0xfc>
 800e5ae:	426d      	negs	r5, r5
 800e5b0:	197f      	adds	r7, r7, r5
 800e5b2:	9b06      	ldr	r3, [sp, #24]
 800e5b4:	601e      	str	r6, [r3, #0]
 800e5b6:	9b02      	ldr	r3, [sp, #8]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d019      	beq.n	800e5f0 <__gethex+0x13c>
 800e5bc:	2600      	movs	r6, #0
 800e5be:	9b05      	ldr	r3, [sp, #20]
 800e5c0:	42b3      	cmp	r3, r6
 800e5c2:	d100      	bne.n	800e5c6 <__gethex+0x112>
 800e5c4:	3606      	adds	r6, #6
 800e5c6:	0030      	movs	r0, r6
 800e5c8:	b009      	add	sp, #36	; 0x24
 800e5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	2700      	movs	r7, #0
 800e5d0:	9c00      	ldr	r4, [sp, #0]
 800e5d2:	9302      	str	r3, [sp, #8]
 800e5d4:	e7c9      	b.n	800e56a <__gethex+0xb6>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	9304      	str	r3, [sp, #16]
 800e5da:	1ca6      	adds	r6, r4, #2
 800e5dc:	e7d3      	b.n	800e586 <__gethex+0xd2>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e7fa      	b.n	800e5d8 <__gethex+0x124>
 800e5e2:	230a      	movs	r3, #10
 800e5e4:	435d      	muls	r5, r3
 800e5e6:	182d      	adds	r5, r5, r0
 800e5e8:	3d10      	subs	r5, #16
 800e5ea:	e7d5      	b.n	800e598 <__gethex+0xe4>
 800e5ec:	0026      	movs	r6, r4
 800e5ee:	e7e0      	b.n	800e5b2 <__gethex+0xfe>
 800e5f0:	9b00      	ldr	r3, [sp, #0]
 800e5f2:	9902      	ldr	r1, [sp, #8]
 800e5f4:	1ae3      	subs	r3, r4, r3
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	2b07      	cmp	r3, #7
 800e5fa:	dc0a      	bgt.n	800e612 <__gethex+0x15e>
 800e5fc:	9803      	ldr	r0, [sp, #12]
 800e5fe:	f000 fa5d 	bl	800eabc <_Balloc>
 800e602:	1e05      	subs	r5, r0, #0
 800e604:	d108      	bne.n	800e618 <__gethex+0x164>
 800e606:	002a      	movs	r2, r5
 800e608:	21e4      	movs	r1, #228	; 0xe4
 800e60a:	4b5f      	ldr	r3, [pc, #380]	; (800e788 <__gethex+0x2d4>)
 800e60c:	485f      	ldr	r0, [pc, #380]	; (800e78c <__gethex+0x2d8>)
 800e60e:	f7fe ffe1 	bl	800d5d4 <__assert_func>
 800e612:	3101      	adds	r1, #1
 800e614:	105b      	asrs	r3, r3, #1
 800e616:	e7ef      	b.n	800e5f8 <__gethex+0x144>
 800e618:	0003      	movs	r3, r0
 800e61a:	3314      	adds	r3, #20
 800e61c:	9302      	str	r3, [sp, #8]
 800e61e:	9305      	str	r3, [sp, #20]
 800e620:	2300      	movs	r3, #0
 800e622:	001e      	movs	r6, r3
 800e624:	9304      	str	r3, [sp, #16]
 800e626:	9b00      	ldr	r3, [sp, #0]
 800e628:	42a3      	cmp	r3, r4
 800e62a:	d33f      	bcc.n	800e6ac <__gethex+0x1f8>
 800e62c:	9c05      	ldr	r4, [sp, #20]
 800e62e:	9b02      	ldr	r3, [sp, #8]
 800e630:	c440      	stmia	r4!, {r6}
 800e632:	1ae4      	subs	r4, r4, r3
 800e634:	10a4      	asrs	r4, r4, #2
 800e636:	0030      	movs	r0, r6
 800e638:	612c      	str	r4, [r5, #16]
 800e63a:	f000 fb37 	bl	800ecac <__hi0bits>
 800e63e:	9b01      	ldr	r3, [sp, #4]
 800e640:	0164      	lsls	r4, r4, #5
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	1a26      	subs	r6, r4, r0
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	429e      	cmp	r6, r3
 800e64a:	dd51      	ble.n	800e6f0 <__gethex+0x23c>
 800e64c:	1af6      	subs	r6, r6, r3
 800e64e:	0031      	movs	r1, r6
 800e650:	0028      	movs	r0, r5
 800e652:	f000 fecb 	bl	800f3ec <__any_on>
 800e656:	1e04      	subs	r4, r0, #0
 800e658:	d016      	beq.n	800e688 <__gethex+0x1d4>
 800e65a:	2401      	movs	r4, #1
 800e65c:	231f      	movs	r3, #31
 800e65e:	0020      	movs	r0, r4
 800e660:	1e72      	subs	r2, r6, #1
 800e662:	4013      	ands	r3, r2
 800e664:	4098      	lsls	r0, r3
 800e666:	0003      	movs	r3, r0
 800e668:	1151      	asrs	r1, r2, #5
 800e66a:	9802      	ldr	r0, [sp, #8]
 800e66c:	0089      	lsls	r1, r1, #2
 800e66e:	5809      	ldr	r1, [r1, r0]
 800e670:	4219      	tst	r1, r3
 800e672:	d009      	beq.n	800e688 <__gethex+0x1d4>
 800e674:	42a2      	cmp	r2, r4
 800e676:	dd06      	ble.n	800e686 <__gethex+0x1d2>
 800e678:	0028      	movs	r0, r5
 800e67a:	1eb1      	subs	r1, r6, #2
 800e67c:	f000 feb6 	bl	800f3ec <__any_on>
 800e680:	3402      	adds	r4, #2
 800e682:	2800      	cmp	r0, #0
 800e684:	d100      	bne.n	800e688 <__gethex+0x1d4>
 800e686:	2402      	movs	r4, #2
 800e688:	0031      	movs	r1, r6
 800e68a:	0028      	movs	r0, r5
 800e68c:	f7ff fea8 	bl	800e3e0 <rshift>
 800e690:	19bf      	adds	r7, r7, r6
 800e692:	9b01      	ldr	r3, [sp, #4]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	42bb      	cmp	r3, r7
 800e698:	da3a      	bge.n	800e710 <__gethex+0x25c>
 800e69a:	0029      	movs	r1, r5
 800e69c:	9803      	ldr	r0, [sp, #12]
 800e69e:	f000 fa51 	bl	800eb44 <_Bfree>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6a6:	26a3      	movs	r6, #163	; 0xa3
 800e6a8:	6013      	str	r3, [r2, #0]
 800e6aa:	e78c      	b.n	800e5c6 <__gethex+0x112>
 800e6ac:	3c01      	subs	r4, #1
 800e6ae:	7823      	ldrb	r3, [r4, #0]
 800e6b0:	2b2e      	cmp	r3, #46	; 0x2e
 800e6b2:	d012      	beq.n	800e6da <__gethex+0x226>
 800e6b4:	9b04      	ldr	r3, [sp, #16]
 800e6b6:	2b20      	cmp	r3, #32
 800e6b8:	d104      	bne.n	800e6c4 <__gethex+0x210>
 800e6ba:	9b05      	ldr	r3, [sp, #20]
 800e6bc:	c340      	stmia	r3!, {r6}
 800e6be:	2600      	movs	r6, #0
 800e6c0:	9305      	str	r3, [sp, #20]
 800e6c2:	9604      	str	r6, [sp, #16]
 800e6c4:	7820      	ldrb	r0, [r4, #0]
 800e6c6:	f7ff fee0 	bl	800e48a <__hexdig_fun>
 800e6ca:	230f      	movs	r3, #15
 800e6cc:	4018      	ands	r0, r3
 800e6ce:	9b04      	ldr	r3, [sp, #16]
 800e6d0:	4098      	lsls	r0, r3
 800e6d2:	3304      	adds	r3, #4
 800e6d4:	4306      	orrs	r6, r0
 800e6d6:	9304      	str	r3, [sp, #16]
 800e6d8:	e7a5      	b.n	800e626 <__gethex+0x172>
 800e6da:	9b00      	ldr	r3, [sp, #0]
 800e6dc:	42a3      	cmp	r3, r4
 800e6de:	d8e9      	bhi.n	800e6b4 <__gethex+0x200>
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	0020      	movs	r0, r4
 800e6e4:	4927      	ldr	r1, [pc, #156]	; (800e784 <__gethex+0x2d0>)
 800e6e6:	f7fe fdbc 	bl	800d262 <strncmp>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d1e2      	bne.n	800e6b4 <__gethex+0x200>
 800e6ee:	e79a      	b.n	800e626 <__gethex+0x172>
 800e6f0:	9b00      	ldr	r3, [sp, #0]
 800e6f2:	2400      	movs	r4, #0
 800e6f4:	429e      	cmp	r6, r3
 800e6f6:	dacc      	bge.n	800e692 <__gethex+0x1de>
 800e6f8:	1b9e      	subs	r6, r3, r6
 800e6fa:	0029      	movs	r1, r5
 800e6fc:	0032      	movs	r2, r6
 800e6fe:	9803      	ldr	r0, [sp, #12]
 800e700:	f000 fc40 	bl	800ef84 <__lshift>
 800e704:	0003      	movs	r3, r0
 800e706:	3314      	adds	r3, #20
 800e708:	0005      	movs	r5, r0
 800e70a:	1bbf      	subs	r7, r7, r6
 800e70c:	9302      	str	r3, [sp, #8]
 800e70e:	e7c0      	b.n	800e692 <__gethex+0x1de>
 800e710:	9b01      	ldr	r3, [sp, #4]
 800e712:	685e      	ldr	r6, [r3, #4]
 800e714:	42be      	cmp	r6, r7
 800e716:	dd70      	ble.n	800e7fa <__gethex+0x346>
 800e718:	9b00      	ldr	r3, [sp, #0]
 800e71a:	1bf6      	subs	r6, r6, r7
 800e71c:	42b3      	cmp	r3, r6
 800e71e:	dc37      	bgt.n	800e790 <__gethex+0x2dc>
 800e720:	9b01      	ldr	r3, [sp, #4]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	2b02      	cmp	r3, #2
 800e726:	d024      	beq.n	800e772 <__gethex+0x2be>
 800e728:	2b03      	cmp	r3, #3
 800e72a:	d026      	beq.n	800e77a <__gethex+0x2c6>
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d117      	bne.n	800e760 <__gethex+0x2ac>
 800e730:	9b00      	ldr	r3, [sp, #0]
 800e732:	42b3      	cmp	r3, r6
 800e734:	d114      	bne.n	800e760 <__gethex+0x2ac>
 800e736:	2b01      	cmp	r3, #1
 800e738:	d10b      	bne.n	800e752 <__gethex+0x29e>
 800e73a:	9b01      	ldr	r3, [sp, #4]
 800e73c:	9a07      	ldr	r2, [sp, #28]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	2662      	movs	r6, #98	; 0x62
 800e742:	6013      	str	r3, [r2, #0]
 800e744:	2301      	movs	r3, #1
 800e746:	9a02      	ldr	r2, [sp, #8]
 800e748:	612b      	str	r3, [r5, #16]
 800e74a:	6013      	str	r3, [r2, #0]
 800e74c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e74e:	601d      	str	r5, [r3, #0]
 800e750:	e739      	b.n	800e5c6 <__gethex+0x112>
 800e752:	9900      	ldr	r1, [sp, #0]
 800e754:	0028      	movs	r0, r5
 800e756:	3901      	subs	r1, #1
 800e758:	f000 fe48 	bl	800f3ec <__any_on>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d1ec      	bne.n	800e73a <__gethex+0x286>
 800e760:	0029      	movs	r1, r5
 800e762:	9803      	ldr	r0, [sp, #12]
 800e764:	f000 f9ee 	bl	800eb44 <_Bfree>
 800e768:	2300      	movs	r3, #0
 800e76a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e76c:	2650      	movs	r6, #80	; 0x50
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	e729      	b.n	800e5c6 <__gethex+0x112>
 800e772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1f3      	bne.n	800e760 <__gethex+0x2ac>
 800e778:	e7df      	b.n	800e73a <__gethex+0x286>
 800e77a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1dc      	bne.n	800e73a <__gethex+0x286>
 800e780:	e7ee      	b.n	800e760 <__gethex+0x2ac>
 800e782:	46c0      	nop			; (mov r8, r8)
 800e784:	08011ec6 	.word	0x08011ec6
 800e788:	08012168 	.word	0x08012168
 800e78c:	08012179 	.word	0x08012179
 800e790:	1e77      	subs	r7, r6, #1
 800e792:	2c00      	cmp	r4, #0
 800e794:	d12f      	bne.n	800e7f6 <__gethex+0x342>
 800e796:	2f00      	cmp	r7, #0
 800e798:	d004      	beq.n	800e7a4 <__gethex+0x2f0>
 800e79a:	0039      	movs	r1, r7
 800e79c:	0028      	movs	r0, r5
 800e79e:	f000 fe25 	bl	800f3ec <__any_on>
 800e7a2:	0004      	movs	r4, r0
 800e7a4:	231f      	movs	r3, #31
 800e7a6:	117a      	asrs	r2, r7, #5
 800e7a8:	401f      	ands	r7, r3
 800e7aa:	3b1e      	subs	r3, #30
 800e7ac:	40bb      	lsls	r3, r7
 800e7ae:	9902      	ldr	r1, [sp, #8]
 800e7b0:	0092      	lsls	r2, r2, #2
 800e7b2:	5852      	ldr	r2, [r2, r1]
 800e7b4:	421a      	tst	r2, r3
 800e7b6:	d001      	beq.n	800e7bc <__gethex+0x308>
 800e7b8:	2302      	movs	r3, #2
 800e7ba:	431c      	orrs	r4, r3
 800e7bc:	9b00      	ldr	r3, [sp, #0]
 800e7be:	0031      	movs	r1, r6
 800e7c0:	1b9b      	subs	r3, r3, r6
 800e7c2:	2602      	movs	r6, #2
 800e7c4:	0028      	movs	r0, r5
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	f7ff fe0a 	bl	800e3e0 <rshift>
 800e7cc:	9b01      	ldr	r3, [sp, #4]
 800e7ce:	685f      	ldr	r7, [r3, #4]
 800e7d0:	2c00      	cmp	r4, #0
 800e7d2:	d041      	beq.n	800e858 <__gethex+0x3a4>
 800e7d4:	9b01      	ldr	r3, [sp, #4]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	2b02      	cmp	r3, #2
 800e7da:	d010      	beq.n	800e7fe <__gethex+0x34a>
 800e7dc:	2b03      	cmp	r3, #3
 800e7de:	d012      	beq.n	800e806 <__gethex+0x352>
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d106      	bne.n	800e7f2 <__gethex+0x33e>
 800e7e4:	07a2      	lsls	r2, r4, #30
 800e7e6:	d504      	bpl.n	800e7f2 <__gethex+0x33e>
 800e7e8:	9a02      	ldr	r2, [sp, #8]
 800e7ea:	6812      	ldr	r2, [r2, #0]
 800e7ec:	4314      	orrs	r4, r2
 800e7ee:	421c      	tst	r4, r3
 800e7f0:	d10c      	bne.n	800e80c <__gethex+0x358>
 800e7f2:	2310      	movs	r3, #16
 800e7f4:	e02f      	b.n	800e856 <__gethex+0x3a2>
 800e7f6:	2401      	movs	r4, #1
 800e7f8:	e7d4      	b.n	800e7a4 <__gethex+0x2f0>
 800e7fa:	2601      	movs	r6, #1
 800e7fc:	e7e8      	b.n	800e7d0 <__gethex+0x31c>
 800e7fe:	2301      	movs	r3, #1
 800e800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e802:	1a9b      	subs	r3, r3, r2
 800e804:	930f      	str	r3, [sp, #60]	; 0x3c
 800e806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d0f2      	beq.n	800e7f2 <__gethex+0x33e>
 800e80c:	692b      	ldr	r3, [r5, #16]
 800e80e:	2000      	movs	r0, #0
 800e810:	9302      	str	r3, [sp, #8]
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	9304      	str	r3, [sp, #16]
 800e816:	002b      	movs	r3, r5
 800e818:	9a04      	ldr	r2, [sp, #16]
 800e81a:	3314      	adds	r3, #20
 800e81c:	1899      	adds	r1, r3, r2
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	1c54      	adds	r4, r2, #1
 800e822:	d01e      	beq.n	800e862 <__gethex+0x3ae>
 800e824:	3201      	adds	r2, #1
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	002b      	movs	r3, r5
 800e82a:	3314      	adds	r3, #20
 800e82c:	2e02      	cmp	r6, #2
 800e82e:	d141      	bne.n	800e8b4 <__gethex+0x400>
 800e830:	9a01      	ldr	r2, [sp, #4]
 800e832:	9900      	ldr	r1, [sp, #0]
 800e834:	6812      	ldr	r2, [r2, #0]
 800e836:	3a01      	subs	r2, #1
 800e838:	428a      	cmp	r2, r1
 800e83a:	d10b      	bne.n	800e854 <__gethex+0x3a0>
 800e83c:	221f      	movs	r2, #31
 800e83e:	9800      	ldr	r0, [sp, #0]
 800e840:	1149      	asrs	r1, r1, #5
 800e842:	4002      	ands	r2, r0
 800e844:	2001      	movs	r0, #1
 800e846:	0004      	movs	r4, r0
 800e848:	4094      	lsls	r4, r2
 800e84a:	0089      	lsls	r1, r1, #2
 800e84c:	58cb      	ldr	r3, [r1, r3]
 800e84e:	4223      	tst	r3, r4
 800e850:	d000      	beq.n	800e854 <__gethex+0x3a0>
 800e852:	2601      	movs	r6, #1
 800e854:	2320      	movs	r3, #32
 800e856:	431e      	orrs	r6, r3
 800e858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e85a:	601d      	str	r5, [r3, #0]
 800e85c:	9b07      	ldr	r3, [sp, #28]
 800e85e:	601f      	str	r7, [r3, #0]
 800e860:	e6b1      	b.n	800e5c6 <__gethex+0x112>
 800e862:	c301      	stmia	r3!, {r0}
 800e864:	4299      	cmp	r1, r3
 800e866:	d8da      	bhi.n	800e81e <__gethex+0x36a>
 800e868:	68ab      	ldr	r3, [r5, #8]
 800e86a:	9a02      	ldr	r2, [sp, #8]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	db18      	blt.n	800e8a2 <__gethex+0x3ee>
 800e870:	6869      	ldr	r1, [r5, #4]
 800e872:	9803      	ldr	r0, [sp, #12]
 800e874:	3101      	adds	r1, #1
 800e876:	f000 f921 	bl	800eabc <_Balloc>
 800e87a:	1e04      	subs	r4, r0, #0
 800e87c:	d104      	bne.n	800e888 <__gethex+0x3d4>
 800e87e:	0022      	movs	r2, r4
 800e880:	2184      	movs	r1, #132	; 0x84
 800e882:	4b1c      	ldr	r3, [pc, #112]	; (800e8f4 <__gethex+0x440>)
 800e884:	481c      	ldr	r0, [pc, #112]	; (800e8f8 <__gethex+0x444>)
 800e886:	e6c2      	b.n	800e60e <__gethex+0x15a>
 800e888:	0029      	movs	r1, r5
 800e88a:	692a      	ldr	r2, [r5, #16]
 800e88c:	310c      	adds	r1, #12
 800e88e:	3202      	adds	r2, #2
 800e890:	0092      	lsls	r2, r2, #2
 800e892:	300c      	adds	r0, #12
 800e894:	f7fe fe8a 	bl	800d5ac <memcpy>
 800e898:	0029      	movs	r1, r5
 800e89a:	9803      	ldr	r0, [sp, #12]
 800e89c:	f000 f952 	bl	800eb44 <_Bfree>
 800e8a0:	0025      	movs	r5, r4
 800e8a2:	692b      	ldr	r3, [r5, #16]
 800e8a4:	1c5a      	adds	r2, r3, #1
 800e8a6:	612a      	str	r2, [r5, #16]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	18eb      	adds	r3, r5, r3
 800e8b0:	605a      	str	r2, [r3, #4]
 800e8b2:	e7b9      	b.n	800e828 <__gethex+0x374>
 800e8b4:	692a      	ldr	r2, [r5, #16]
 800e8b6:	9902      	ldr	r1, [sp, #8]
 800e8b8:	428a      	cmp	r2, r1
 800e8ba:	dd09      	ble.n	800e8d0 <__gethex+0x41c>
 800e8bc:	2101      	movs	r1, #1
 800e8be:	0028      	movs	r0, r5
 800e8c0:	f7ff fd8e 	bl	800e3e0 <rshift>
 800e8c4:	9b01      	ldr	r3, [sp, #4]
 800e8c6:	3701      	adds	r7, #1
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	42bb      	cmp	r3, r7
 800e8cc:	dac1      	bge.n	800e852 <__gethex+0x39e>
 800e8ce:	e6e4      	b.n	800e69a <__gethex+0x1e6>
 800e8d0:	221f      	movs	r2, #31
 800e8d2:	9c00      	ldr	r4, [sp, #0]
 800e8d4:	9900      	ldr	r1, [sp, #0]
 800e8d6:	2601      	movs	r6, #1
 800e8d8:	4014      	ands	r4, r2
 800e8da:	4211      	tst	r1, r2
 800e8dc:	d0ba      	beq.n	800e854 <__gethex+0x3a0>
 800e8de:	9a04      	ldr	r2, [sp, #16]
 800e8e0:	189b      	adds	r3, r3, r2
 800e8e2:	3b04      	subs	r3, #4
 800e8e4:	6818      	ldr	r0, [r3, #0]
 800e8e6:	f000 f9e1 	bl	800ecac <__hi0bits>
 800e8ea:	2320      	movs	r3, #32
 800e8ec:	1b1b      	subs	r3, r3, r4
 800e8ee:	4298      	cmp	r0, r3
 800e8f0:	dbe4      	blt.n	800e8bc <__gethex+0x408>
 800e8f2:	e7af      	b.n	800e854 <__gethex+0x3a0>
 800e8f4:	08012168 	.word	0x08012168
 800e8f8:	08012179 	.word	0x08012179

0800e8fc <L_shift>:
 800e8fc:	2308      	movs	r3, #8
 800e8fe:	b570      	push	{r4, r5, r6, lr}
 800e900:	2520      	movs	r5, #32
 800e902:	1a9a      	subs	r2, r3, r2
 800e904:	0092      	lsls	r2, r2, #2
 800e906:	1aad      	subs	r5, r5, r2
 800e908:	6843      	ldr	r3, [r0, #4]
 800e90a:	6804      	ldr	r4, [r0, #0]
 800e90c:	001e      	movs	r6, r3
 800e90e:	40ae      	lsls	r6, r5
 800e910:	40d3      	lsrs	r3, r2
 800e912:	4334      	orrs	r4, r6
 800e914:	6004      	str	r4, [r0, #0]
 800e916:	6043      	str	r3, [r0, #4]
 800e918:	3004      	adds	r0, #4
 800e91a:	4288      	cmp	r0, r1
 800e91c:	d3f4      	bcc.n	800e908 <L_shift+0xc>
 800e91e:	bd70      	pop	{r4, r5, r6, pc}

0800e920 <__match>:
 800e920:	b530      	push	{r4, r5, lr}
 800e922:	6803      	ldr	r3, [r0, #0]
 800e924:	780c      	ldrb	r4, [r1, #0]
 800e926:	3301      	adds	r3, #1
 800e928:	2c00      	cmp	r4, #0
 800e92a:	d102      	bne.n	800e932 <__match+0x12>
 800e92c:	6003      	str	r3, [r0, #0]
 800e92e:	2001      	movs	r0, #1
 800e930:	bd30      	pop	{r4, r5, pc}
 800e932:	781a      	ldrb	r2, [r3, #0]
 800e934:	0015      	movs	r5, r2
 800e936:	3d41      	subs	r5, #65	; 0x41
 800e938:	2d19      	cmp	r5, #25
 800e93a:	d800      	bhi.n	800e93e <__match+0x1e>
 800e93c:	3220      	adds	r2, #32
 800e93e:	3101      	adds	r1, #1
 800e940:	42a2      	cmp	r2, r4
 800e942:	d0ef      	beq.n	800e924 <__match+0x4>
 800e944:	2000      	movs	r0, #0
 800e946:	e7f3      	b.n	800e930 <__match+0x10>

0800e948 <__hexnan>:
 800e948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e94a:	680b      	ldr	r3, [r1, #0]
 800e94c:	b08b      	sub	sp, #44	; 0x2c
 800e94e:	9201      	str	r2, [sp, #4]
 800e950:	9901      	ldr	r1, [sp, #4]
 800e952:	115a      	asrs	r2, r3, #5
 800e954:	0092      	lsls	r2, r2, #2
 800e956:	188a      	adds	r2, r1, r2
 800e958:	9202      	str	r2, [sp, #8]
 800e95a:	0019      	movs	r1, r3
 800e95c:	221f      	movs	r2, #31
 800e95e:	4011      	ands	r1, r2
 800e960:	9008      	str	r0, [sp, #32]
 800e962:	9106      	str	r1, [sp, #24]
 800e964:	4213      	tst	r3, r2
 800e966:	d002      	beq.n	800e96e <__hexnan+0x26>
 800e968:	9b02      	ldr	r3, [sp, #8]
 800e96a:	3304      	adds	r3, #4
 800e96c:	9302      	str	r3, [sp, #8]
 800e96e:	9b02      	ldr	r3, [sp, #8]
 800e970:	2500      	movs	r5, #0
 800e972:	1f1f      	subs	r7, r3, #4
 800e974:	003e      	movs	r6, r7
 800e976:	003c      	movs	r4, r7
 800e978:	9b08      	ldr	r3, [sp, #32]
 800e97a:	603d      	str	r5, [r7, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	9507      	str	r5, [sp, #28]
 800e980:	9305      	str	r3, [sp, #20]
 800e982:	9503      	str	r5, [sp, #12]
 800e984:	9b05      	ldr	r3, [sp, #20]
 800e986:	3301      	adds	r3, #1
 800e988:	9309      	str	r3, [sp, #36]	; 0x24
 800e98a:	9b05      	ldr	r3, [sp, #20]
 800e98c:	785b      	ldrb	r3, [r3, #1]
 800e98e:	9304      	str	r3, [sp, #16]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d028      	beq.n	800e9e6 <__hexnan+0x9e>
 800e994:	9804      	ldr	r0, [sp, #16]
 800e996:	f7ff fd78 	bl	800e48a <__hexdig_fun>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	d154      	bne.n	800ea48 <__hexnan+0x100>
 800e99e:	9b04      	ldr	r3, [sp, #16]
 800e9a0:	2b20      	cmp	r3, #32
 800e9a2:	d819      	bhi.n	800e9d8 <__hexnan+0x90>
 800e9a4:	9b03      	ldr	r3, [sp, #12]
 800e9a6:	9a07      	ldr	r2, [sp, #28]
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	dd12      	ble.n	800e9d2 <__hexnan+0x8a>
 800e9ac:	42b4      	cmp	r4, r6
 800e9ae:	d206      	bcs.n	800e9be <__hexnan+0x76>
 800e9b0:	2d07      	cmp	r5, #7
 800e9b2:	dc04      	bgt.n	800e9be <__hexnan+0x76>
 800e9b4:	002a      	movs	r2, r5
 800e9b6:	0031      	movs	r1, r6
 800e9b8:	0020      	movs	r0, r4
 800e9ba:	f7ff ff9f 	bl	800e8fc <L_shift>
 800e9be:	9b01      	ldr	r3, [sp, #4]
 800e9c0:	2508      	movs	r5, #8
 800e9c2:	429c      	cmp	r4, r3
 800e9c4:	d905      	bls.n	800e9d2 <__hexnan+0x8a>
 800e9c6:	1f26      	subs	r6, r4, #4
 800e9c8:	2500      	movs	r5, #0
 800e9ca:	0034      	movs	r4, r6
 800e9cc:	9b03      	ldr	r3, [sp, #12]
 800e9ce:	6035      	str	r5, [r6, #0]
 800e9d0:	9307      	str	r3, [sp, #28]
 800e9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d4:	9305      	str	r3, [sp, #20]
 800e9d6:	e7d5      	b.n	800e984 <__hexnan+0x3c>
 800e9d8:	9b04      	ldr	r3, [sp, #16]
 800e9da:	2b29      	cmp	r3, #41	; 0x29
 800e9dc:	d159      	bne.n	800ea92 <__hexnan+0x14a>
 800e9de:	9b05      	ldr	r3, [sp, #20]
 800e9e0:	9a08      	ldr	r2, [sp, #32]
 800e9e2:	3302      	adds	r3, #2
 800e9e4:	6013      	str	r3, [r2, #0]
 800e9e6:	9b03      	ldr	r3, [sp, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d052      	beq.n	800ea92 <__hexnan+0x14a>
 800e9ec:	42b4      	cmp	r4, r6
 800e9ee:	d206      	bcs.n	800e9fe <__hexnan+0xb6>
 800e9f0:	2d07      	cmp	r5, #7
 800e9f2:	dc04      	bgt.n	800e9fe <__hexnan+0xb6>
 800e9f4:	002a      	movs	r2, r5
 800e9f6:	0031      	movs	r1, r6
 800e9f8:	0020      	movs	r0, r4
 800e9fa:	f7ff ff7f 	bl	800e8fc <L_shift>
 800e9fe:	9b01      	ldr	r3, [sp, #4]
 800ea00:	429c      	cmp	r4, r3
 800ea02:	d935      	bls.n	800ea70 <__hexnan+0x128>
 800ea04:	001a      	movs	r2, r3
 800ea06:	0023      	movs	r3, r4
 800ea08:	cb02      	ldmia	r3!, {r1}
 800ea0a:	c202      	stmia	r2!, {r1}
 800ea0c:	429f      	cmp	r7, r3
 800ea0e:	d2fb      	bcs.n	800ea08 <__hexnan+0xc0>
 800ea10:	9b02      	ldr	r3, [sp, #8]
 800ea12:	1c62      	adds	r2, r4, #1
 800ea14:	1ed9      	subs	r1, r3, #3
 800ea16:	2304      	movs	r3, #4
 800ea18:	4291      	cmp	r1, r2
 800ea1a:	d305      	bcc.n	800ea28 <__hexnan+0xe0>
 800ea1c:	9b02      	ldr	r3, [sp, #8]
 800ea1e:	3b04      	subs	r3, #4
 800ea20:	1b1b      	subs	r3, r3, r4
 800ea22:	089b      	lsrs	r3, r3, #2
 800ea24:	3301      	adds	r3, #1
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	9a01      	ldr	r2, [sp, #4]
 800ea2a:	18d3      	adds	r3, r2, r3
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	c304      	stmia	r3!, {r2}
 800ea30:	429f      	cmp	r7, r3
 800ea32:	d2fc      	bcs.n	800ea2e <__hexnan+0xe6>
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d104      	bne.n	800ea44 <__hexnan+0xfc>
 800ea3a:	9b01      	ldr	r3, [sp, #4]
 800ea3c:	429f      	cmp	r7, r3
 800ea3e:	d126      	bne.n	800ea8e <__hexnan+0x146>
 800ea40:	2301      	movs	r3, #1
 800ea42:	603b      	str	r3, [r7, #0]
 800ea44:	2005      	movs	r0, #5
 800ea46:	e025      	b.n	800ea94 <__hexnan+0x14c>
 800ea48:	9b03      	ldr	r3, [sp, #12]
 800ea4a:	3501      	adds	r5, #1
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	9303      	str	r3, [sp, #12]
 800ea50:	2d08      	cmp	r5, #8
 800ea52:	dd06      	ble.n	800ea62 <__hexnan+0x11a>
 800ea54:	9b01      	ldr	r3, [sp, #4]
 800ea56:	429c      	cmp	r4, r3
 800ea58:	d9bb      	bls.n	800e9d2 <__hexnan+0x8a>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	2501      	movs	r5, #1
 800ea5e:	3c04      	subs	r4, #4
 800ea60:	6023      	str	r3, [r4, #0]
 800ea62:	220f      	movs	r2, #15
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	4010      	ands	r0, r2
 800ea68:	011b      	lsls	r3, r3, #4
 800ea6a:	4303      	orrs	r3, r0
 800ea6c:	6023      	str	r3, [r4, #0]
 800ea6e:	e7b0      	b.n	800e9d2 <__hexnan+0x8a>
 800ea70:	9b06      	ldr	r3, [sp, #24]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d0de      	beq.n	800ea34 <__hexnan+0xec>
 800ea76:	2320      	movs	r3, #32
 800ea78:	9a06      	ldr	r2, [sp, #24]
 800ea7a:	9902      	ldr	r1, [sp, #8]
 800ea7c:	1a9b      	subs	r3, r3, r2
 800ea7e:	2201      	movs	r2, #1
 800ea80:	4252      	negs	r2, r2
 800ea82:	40da      	lsrs	r2, r3
 800ea84:	3904      	subs	r1, #4
 800ea86:	680b      	ldr	r3, [r1, #0]
 800ea88:	4013      	ands	r3, r2
 800ea8a:	600b      	str	r3, [r1, #0]
 800ea8c:	e7d2      	b.n	800ea34 <__hexnan+0xec>
 800ea8e:	3f04      	subs	r7, #4
 800ea90:	e7d0      	b.n	800ea34 <__hexnan+0xec>
 800ea92:	2004      	movs	r0, #4
 800ea94:	b00b      	add	sp, #44	; 0x2c
 800ea96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea98 <__ascii_mbtowc>:
 800ea98:	b082      	sub	sp, #8
 800ea9a:	2900      	cmp	r1, #0
 800ea9c:	d100      	bne.n	800eaa0 <__ascii_mbtowc+0x8>
 800ea9e:	a901      	add	r1, sp, #4
 800eaa0:	1e10      	subs	r0, r2, #0
 800eaa2:	d006      	beq.n	800eab2 <__ascii_mbtowc+0x1a>
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d006      	beq.n	800eab6 <__ascii_mbtowc+0x1e>
 800eaa8:	7813      	ldrb	r3, [r2, #0]
 800eaaa:	600b      	str	r3, [r1, #0]
 800eaac:	7810      	ldrb	r0, [r2, #0]
 800eaae:	1e43      	subs	r3, r0, #1
 800eab0:	4198      	sbcs	r0, r3
 800eab2:	b002      	add	sp, #8
 800eab4:	4770      	bx	lr
 800eab6:	2002      	movs	r0, #2
 800eab8:	4240      	negs	r0, r0
 800eaba:	e7fa      	b.n	800eab2 <__ascii_mbtowc+0x1a>

0800eabc <_Balloc>:
 800eabc:	b570      	push	{r4, r5, r6, lr}
 800eabe:	69c5      	ldr	r5, [r0, #28]
 800eac0:	0006      	movs	r6, r0
 800eac2:	000c      	movs	r4, r1
 800eac4:	2d00      	cmp	r5, #0
 800eac6:	d10e      	bne.n	800eae6 <_Balloc+0x2a>
 800eac8:	2010      	movs	r0, #16
 800eaca:	f7fc fc31 	bl	800b330 <malloc>
 800eace:	1e02      	subs	r2, r0, #0
 800ead0:	61f0      	str	r0, [r6, #28]
 800ead2:	d104      	bne.n	800eade <_Balloc+0x22>
 800ead4:	216b      	movs	r1, #107	; 0x6b
 800ead6:	4b19      	ldr	r3, [pc, #100]	; (800eb3c <_Balloc+0x80>)
 800ead8:	4819      	ldr	r0, [pc, #100]	; (800eb40 <_Balloc+0x84>)
 800eada:	f7fe fd7b 	bl	800d5d4 <__assert_func>
 800eade:	6045      	str	r5, [r0, #4]
 800eae0:	6085      	str	r5, [r0, #8]
 800eae2:	6005      	str	r5, [r0, #0]
 800eae4:	60c5      	str	r5, [r0, #12]
 800eae6:	69f5      	ldr	r5, [r6, #28]
 800eae8:	68eb      	ldr	r3, [r5, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d013      	beq.n	800eb16 <_Balloc+0x5a>
 800eaee:	69f3      	ldr	r3, [r6, #28]
 800eaf0:	00a2      	lsls	r2, r4, #2
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	189b      	adds	r3, r3, r2
 800eaf6:	6818      	ldr	r0, [r3, #0]
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d118      	bne.n	800eb2e <_Balloc+0x72>
 800eafc:	2101      	movs	r1, #1
 800eafe:	000d      	movs	r5, r1
 800eb00:	40a5      	lsls	r5, r4
 800eb02:	1d6a      	adds	r2, r5, #5
 800eb04:	0030      	movs	r0, r6
 800eb06:	0092      	lsls	r2, r2, #2
 800eb08:	f000 fee2 	bl	800f8d0 <_calloc_r>
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d00c      	beq.n	800eb2a <_Balloc+0x6e>
 800eb10:	6044      	str	r4, [r0, #4]
 800eb12:	6085      	str	r5, [r0, #8]
 800eb14:	e00d      	b.n	800eb32 <_Balloc+0x76>
 800eb16:	2221      	movs	r2, #33	; 0x21
 800eb18:	2104      	movs	r1, #4
 800eb1a:	0030      	movs	r0, r6
 800eb1c:	f000 fed8 	bl	800f8d0 <_calloc_r>
 800eb20:	69f3      	ldr	r3, [r6, #28]
 800eb22:	60e8      	str	r0, [r5, #12]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1e1      	bne.n	800eaee <_Balloc+0x32>
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	bd70      	pop	{r4, r5, r6, pc}
 800eb2e:	6802      	ldr	r2, [r0, #0]
 800eb30:	601a      	str	r2, [r3, #0]
 800eb32:	2300      	movs	r3, #0
 800eb34:	6103      	str	r3, [r0, #16]
 800eb36:	60c3      	str	r3, [r0, #12]
 800eb38:	e7f8      	b.n	800eb2c <_Balloc+0x70>
 800eb3a:	46c0      	nop			; (mov r8, r8)
 800eb3c:	08012050 	.word	0x08012050
 800eb40:	080121d9 	.word	0x080121d9

0800eb44 <_Bfree>:
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	69c6      	ldr	r6, [r0, #28]
 800eb48:	0005      	movs	r5, r0
 800eb4a:	000c      	movs	r4, r1
 800eb4c:	2e00      	cmp	r6, #0
 800eb4e:	d10e      	bne.n	800eb6e <_Bfree+0x2a>
 800eb50:	2010      	movs	r0, #16
 800eb52:	f7fc fbed 	bl	800b330 <malloc>
 800eb56:	1e02      	subs	r2, r0, #0
 800eb58:	61e8      	str	r0, [r5, #28]
 800eb5a:	d104      	bne.n	800eb66 <_Bfree+0x22>
 800eb5c:	218f      	movs	r1, #143	; 0x8f
 800eb5e:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <_Bfree+0x40>)
 800eb60:	4809      	ldr	r0, [pc, #36]	; (800eb88 <_Bfree+0x44>)
 800eb62:	f7fe fd37 	bl	800d5d4 <__assert_func>
 800eb66:	6046      	str	r6, [r0, #4]
 800eb68:	6086      	str	r6, [r0, #8]
 800eb6a:	6006      	str	r6, [r0, #0]
 800eb6c:	60c6      	str	r6, [r0, #12]
 800eb6e:	2c00      	cmp	r4, #0
 800eb70:	d007      	beq.n	800eb82 <_Bfree+0x3e>
 800eb72:	69eb      	ldr	r3, [r5, #28]
 800eb74:	6862      	ldr	r2, [r4, #4]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	0092      	lsls	r2, r2, #2
 800eb7a:	189b      	adds	r3, r3, r2
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	6022      	str	r2, [r4, #0]
 800eb80:	601c      	str	r4, [r3, #0]
 800eb82:	bd70      	pop	{r4, r5, r6, pc}
 800eb84:	08012050 	.word	0x08012050
 800eb88:	080121d9 	.word	0x080121d9

0800eb8c <__multadd>:
 800eb8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb8e:	000e      	movs	r6, r1
 800eb90:	9001      	str	r0, [sp, #4]
 800eb92:	000c      	movs	r4, r1
 800eb94:	001d      	movs	r5, r3
 800eb96:	2000      	movs	r0, #0
 800eb98:	690f      	ldr	r7, [r1, #16]
 800eb9a:	3614      	adds	r6, #20
 800eb9c:	6833      	ldr	r3, [r6, #0]
 800eb9e:	3001      	adds	r0, #1
 800eba0:	b299      	uxth	r1, r3
 800eba2:	4351      	muls	r1, r2
 800eba4:	0c1b      	lsrs	r3, r3, #16
 800eba6:	4353      	muls	r3, r2
 800eba8:	1949      	adds	r1, r1, r5
 800ebaa:	0c0d      	lsrs	r5, r1, #16
 800ebac:	195b      	adds	r3, r3, r5
 800ebae:	0c1d      	lsrs	r5, r3, #16
 800ebb0:	b289      	uxth	r1, r1
 800ebb2:	041b      	lsls	r3, r3, #16
 800ebb4:	185b      	adds	r3, r3, r1
 800ebb6:	c608      	stmia	r6!, {r3}
 800ebb8:	4287      	cmp	r7, r0
 800ebba:	dcef      	bgt.n	800eb9c <__multadd+0x10>
 800ebbc:	2d00      	cmp	r5, #0
 800ebbe:	d022      	beq.n	800ec06 <__multadd+0x7a>
 800ebc0:	68a3      	ldr	r3, [r4, #8]
 800ebc2:	42bb      	cmp	r3, r7
 800ebc4:	dc19      	bgt.n	800ebfa <__multadd+0x6e>
 800ebc6:	6861      	ldr	r1, [r4, #4]
 800ebc8:	9801      	ldr	r0, [sp, #4]
 800ebca:	3101      	adds	r1, #1
 800ebcc:	f7ff ff76 	bl	800eabc <_Balloc>
 800ebd0:	1e06      	subs	r6, r0, #0
 800ebd2:	d105      	bne.n	800ebe0 <__multadd+0x54>
 800ebd4:	0032      	movs	r2, r6
 800ebd6:	21ba      	movs	r1, #186	; 0xba
 800ebd8:	4b0c      	ldr	r3, [pc, #48]	; (800ec0c <__multadd+0x80>)
 800ebda:	480d      	ldr	r0, [pc, #52]	; (800ec10 <__multadd+0x84>)
 800ebdc:	f7fe fcfa 	bl	800d5d4 <__assert_func>
 800ebe0:	0021      	movs	r1, r4
 800ebe2:	6922      	ldr	r2, [r4, #16]
 800ebe4:	310c      	adds	r1, #12
 800ebe6:	3202      	adds	r2, #2
 800ebe8:	0092      	lsls	r2, r2, #2
 800ebea:	300c      	adds	r0, #12
 800ebec:	f7fe fcde 	bl	800d5ac <memcpy>
 800ebf0:	0021      	movs	r1, r4
 800ebf2:	9801      	ldr	r0, [sp, #4]
 800ebf4:	f7ff ffa6 	bl	800eb44 <_Bfree>
 800ebf8:	0034      	movs	r4, r6
 800ebfa:	1d3b      	adds	r3, r7, #4
 800ebfc:	009b      	lsls	r3, r3, #2
 800ebfe:	18e3      	adds	r3, r4, r3
 800ec00:	605d      	str	r5, [r3, #4]
 800ec02:	1c7b      	adds	r3, r7, #1
 800ec04:	6123      	str	r3, [r4, #16]
 800ec06:	0020      	movs	r0, r4
 800ec08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec0a:	46c0      	nop			; (mov r8, r8)
 800ec0c:	08012168 	.word	0x08012168
 800ec10:	080121d9 	.word	0x080121d9

0800ec14 <__s2b>:
 800ec14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec16:	0006      	movs	r6, r0
 800ec18:	0018      	movs	r0, r3
 800ec1a:	000c      	movs	r4, r1
 800ec1c:	3008      	adds	r0, #8
 800ec1e:	2109      	movs	r1, #9
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	0015      	movs	r5, r2
 800ec24:	f7f1 fb20 	bl	8000268 <__divsi3>
 800ec28:	2301      	movs	r3, #1
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	4283      	cmp	r3, r0
 800ec2e:	db0a      	blt.n	800ec46 <__s2b+0x32>
 800ec30:	0030      	movs	r0, r6
 800ec32:	f7ff ff43 	bl	800eabc <_Balloc>
 800ec36:	1e01      	subs	r1, r0, #0
 800ec38:	d108      	bne.n	800ec4c <__s2b+0x38>
 800ec3a:	000a      	movs	r2, r1
 800ec3c:	4b19      	ldr	r3, [pc, #100]	; (800eca4 <__s2b+0x90>)
 800ec3e:	481a      	ldr	r0, [pc, #104]	; (800eca8 <__s2b+0x94>)
 800ec40:	31d3      	adds	r1, #211	; 0xd3
 800ec42:	f7fe fcc7 	bl	800d5d4 <__assert_func>
 800ec46:	005b      	lsls	r3, r3, #1
 800ec48:	3101      	adds	r1, #1
 800ec4a:	e7ef      	b.n	800ec2c <__s2b+0x18>
 800ec4c:	9b08      	ldr	r3, [sp, #32]
 800ec4e:	6143      	str	r3, [r0, #20]
 800ec50:	2301      	movs	r3, #1
 800ec52:	6103      	str	r3, [r0, #16]
 800ec54:	2d09      	cmp	r5, #9
 800ec56:	dd18      	ble.n	800ec8a <__s2b+0x76>
 800ec58:	0023      	movs	r3, r4
 800ec5a:	3309      	adds	r3, #9
 800ec5c:	001f      	movs	r7, r3
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	1964      	adds	r4, r4, r5
 800ec62:	783b      	ldrb	r3, [r7, #0]
 800ec64:	220a      	movs	r2, #10
 800ec66:	0030      	movs	r0, r6
 800ec68:	3b30      	subs	r3, #48	; 0x30
 800ec6a:	f7ff ff8f 	bl	800eb8c <__multadd>
 800ec6e:	3701      	adds	r7, #1
 800ec70:	0001      	movs	r1, r0
 800ec72:	42a7      	cmp	r7, r4
 800ec74:	d1f5      	bne.n	800ec62 <__s2b+0x4e>
 800ec76:	002c      	movs	r4, r5
 800ec78:	9b00      	ldr	r3, [sp, #0]
 800ec7a:	3c08      	subs	r4, #8
 800ec7c:	191c      	adds	r4, r3, r4
 800ec7e:	002f      	movs	r7, r5
 800ec80:	9b01      	ldr	r3, [sp, #4]
 800ec82:	429f      	cmp	r7, r3
 800ec84:	db04      	blt.n	800ec90 <__s2b+0x7c>
 800ec86:	0008      	movs	r0, r1
 800ec88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec8a:	2509      	movs	r5, #9
 800ec8c:	340a      	adds	r4, #10
 800ec8e:	e7f6      	b.n	800ec7e <__s2b+0x6a>
 800ec90:	1b63      	subs	r3, r4, r5
 800ec92:	5ddb      	ldrb	r3, [r3, r7]
 800ec94:	220a      	movs	r2, #10
 800ec96:	0030      	movs	r0, r6
 800ec98:	3b30      	subs	r3, #48	; 0x30
 800ec9a:	f7ff ff77 	bl	800eb8c <__multadd>
 800ec9e:	3701      	adds	r7, #1
 800eca0:	0001      	movs	r1, r0
 800eca2:	e7ed      	b.n	800ec80 <__s2b+0x6c>
 800eca4:	08012168 	.word	0x08012168
 800eca8:	080121d9 	.word	0x080121d9

0800ecac <__hi0bits>:
 800ecac:	0003      	movs	r3, r0
 800ecae:	0c02      	lsrs	r2, r0, #16
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	4282      	cmp	r2, r0
 800ecb4:	d101      	bne.n	800ecba <__hi0bits+0xe>
 800ecb6:	041b      	lsls	r3, r3, #16
 800ecb8:	3010      	adds	r0, #16
 800ecba:	0e1a      	lsrs	r2, r3, #24
 800ecbc:	d101      	bne.n	800ecc2 <__hi0bits+0x16>
 800ecbe:	3008      	adds	r0, #8
 800ecc0:	021b      	lsls	r3, r3, #8
 800ecc2:	0f1a      	lsrs	r2, r3, #28
 800ecc4:	d101      	bne.n	800ecca <__hi0bits+0x1e>
 800ecc6:	3004      	adds	r0, #4
 800ecc8:	011b      	lsls	r3, r3, #4
 800ecca:	0f9a      	lsrs	r2, r3, #30
 800eccc:	d101      	bne.n	800ecd2 <__hi0bits+0x26>
 800ecce:	3002      	adds	r0, #2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	db03      	blt.n	800ecde <__hi0bits+0x32>
 800ecd6:	3001      	adds	r0, #1
 800ecd8:	005b      	lsls	r3, r3, #1
 800ecda:	d400      	bmi.n	800ecde <__hi0bits+0x32>
 800ecdc:	2020      	movs	r0, #32
 800ecde:	4770      	bx	lr

0800ece0 <__lo0bits>:
 800ece0:	6803      	ldr	r3, [r0, #0]
 800ece2:	0001      	movs	r1, r0
 800ece4:	2207      	movs	r2, #7
 800ece6:	0018      	movs	r0, r3
 800ece8:	4010      	ands	r0, r2
 800ecea:	4213      	tst	r3, r2
 800ecec:	d00d      	beq.n	800ed0a <__lo0bits+0x2a>
 800ecee:	3a06      	subs	r2, #6
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	4213      	tst	r3, r2
 800ecf4:	d105      	bne.n	800ed02 <__lo0bits+0x22>
 800ecf6:	3002      	adds	r0, #2
 800ecf8:	4203      	tst	r3, r0
 800ecfa:	d003      	beq.n	800ed04 <__lo0bits+0x24>
 800ecfc:	40d3      	lsrs	r3, r2
 800ecfe:	0010      	movs	r0, r2
 800ed00:	600b      	str	r3, [r1, #0]
 800ed02:	4770      	bx	lr
 800ed04:	089b      	lsrs	r3, r3, #2
 800ed06:	600b      	str	r3, [r1, #0]
 800ed08:	e7fb      	b.n	800ed02 <__lo0bits+0x22>
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	2a00      	cmp	r2, #0
 800ed0e:	d101      	bne.n	800ed14 <__lo0bits+0x34>
 800ed10:	2010      	movs	r0, #16
 800ed12:	0c1b      	lsrs	r3, r3, #16
 800ed14:	b2da      	uxtb	r2, r3
 800ed16:	2a00      	cmp	r2, #0
 800ed18:	d101      	bne.n	800ed1e <__lo0bits+0x3e>
 800ed1a:	3008      	adds	r0, #8
 800ed1c:	0a1b      	lsrs	r3, r3, #8
 800ed1e:	071a      	lsls	r2, r3, #28
 800ed20:	d101      	bne.n	800ed26 <__lo0bits+0x46>
 800ed22:	3004      	adds	r0, #4
 800ed24:	091b      	lsrs	r3, r3, #4
 800ed26:	079a      	lsls	r2, r3, #30
 800ed28:	d101      	bne.n	800ed2e <__lo0bits+0x4e>
 800ed2a:	3002      	adds	r0, #2
 800ed2c:	089b      	lsrs	r3, r3, #2
 800ed2e:	07da      	lsls	r2, r3, #31
 800ed30:	d4e9      	bmi.n	800ed06 <__lo0bits+0x26>
 800ed32:	3001      	adds	r0, #1
 800ed34:	085b      	lsrs	r3, r3, #1
 800ed36:	d1e6      	bne.n	800ed06 <__lo0bits+0x26>
 800ed38:	2020      	movs	r0, #32
 800ed3a:	e7e2      	b.n	800ed02 <__lo0bits+0x22>

0800ed3c <__i2b>:
 800ed3c:	b510      	push	{r4, lr}
 800ed3e:	000c      	movs	r4, r1
 800ed40:	2101      	movs	r1, #1
 800ed42:	f7ff febb 	bl	800eabc <_Balloc>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d107      	bne.n	800ed5a <__i2b+0x1e>
 800ed4a:	2146      	movs	r1, #70	; 0x46
 800ed4c:	4c05      	ldr	r4, [pc, #20]	; (800ed64 <__i2b+0x28>)
 800ed4e:	0002      	movs	r2, r0
 800ed50:	4b05      	ldr	r3, [pc, #20]	; (800ed68 <__i2b+0x2c>)
 800ed52:	0020      	movs	r0, r4
 800ed54:	31ff      	adds	r1, #255	; 0xff
 800ed56:	f7fe fc3d 	bl	800d5d4 <__assert_func>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	6144      	str	r4, [r0, #20]
 800ed5e:	6103      	str	r3, [r0, #16]
 800ed60:	bd10      	pop	{r4, pc}
 800ed62:	46c0      	nop			; (mov r8, r8)
 800ed64:	080121d9 	.word	0x080121d9
 800ed68:	08012168 	.word	0x08012168

0800ed6c <__multiply>:
 800ed6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed6e:	0015      	movs	r5, r2
 800ed70:	690a      	ldr	r2, [r1, #16]
 800ed72:	692b      	ldr	r3, [r5, #16]
 800ed74:	000c      	movs	r4, r1
 800ed76:	b08b      	sub	sp, #44	; 0x2c
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	da01      	bge.n	800ed80 <__multiply+0x14>
 800ed7c:	002c      	movs	r4, r5
 800ed7e:	000d      	movs	r5, r1
 800ed80:	6927      	ldr	r7, [r4, #16]
 800ed82:	692e      	ldr	r6, [r5, #16]
 800ed84:	6861      	ldr	r1, [r4, #4]
 800ed86:	19bb      	adds	r3, r7, r6
 800ed88:	9303      	str	r3, [sp, #12]
 800ed8a:	68a3      	ldr	r3, [r4, #8]
 800ed8c:	19ba      	adds	r2, r7, r6
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	da00      	bge.n	800ed94 <__multiply+0x28>
 800ed92:	3101      	adds	r1, #1
 800ed94:	f7ff fe92 	bl	800eabc <_Balloc>
 800ed98:	9002      	str	r0, [sp, #8]
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d106      	bne.n	800edac <__multiply+0x40>
 800ed9e:	21b1      	movs	r1, #177	; 0xb1
 800eda0:	4b48      	ldr	r3, [pc, #288]	; (800eec4 <__multiply+0x158>)
 800eda2:	4849      	ldr	r0, [pc, #292]	; (800eec8 <__multiply+0x15c>)
 800eda4:	9a02      	ldr	r2, [sp, #8]
 800eda6:	0049      	lsls	r1, r1, #1
 800eda8:	f7fe fc14 	bl	800d5d4 <__assert_func>
 800edac:	9b02      	ldr	r3, [sp, #8]
 800edae:	2200      	movs	r2, #0
 800edb0:	3314      	adds	r3, #20
 800edb2:	469c      	mov	ip, r3
 800edb4:	19bb      	adds	r3, r7, r6
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4463      	add	r3, ip
 800edba:	9304      	str	r3, [sp, #16]
 800edbc:	4663      	mov	r3, ip
 800edbe:	9904      	ldr	r1, [sp, #16]
 800edc0:	428b      	cmp	r3, r1
 800edc2:	d32a      	bcc.n	800ee1a <__multiply+0xae>
 800edc4:	0023      	movs	r3, r4
 800edc6:	00bf      	lsls	r7, r7, #2
 800edc8:	3314      	adds	r3, #20
 800edca:	3514      	adds	r5, #20
 800edcc:	9308      	str	r3, [sp, #32]
 800edce:	00b6      	lsls	r6, r6, #2
 800edd0:	19db      	adds	r3, r3, r7
 800edd2:	9305      	str	r3, [sp, #20]
 800edd4:	19ab      	adds	r3, r5, r6
 800edd6:	9309      	str	r3, [sp, #36]	; 0x24
 800edd8:	2304      	movs	r3, #4
 800edda:	9306      	str	r3, [sp, #24]
 800eddc:	0023      	movs	r3, r4
 800edde:	9a05      	ldr	r2, [sp, #20]
 800ede0:	3315      	adds	r3, #21
 800ede2:	9501      	str	r5, [sp, #4]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d305      	bcc.n	800edf4 <__multiply+0x88>
 800ede8:	1b13      	subs	r3, r2, r4
 800edea:	3b15      	subs	r3, #21
 800edec:	089b      	lsrs	r3, r3, #2
 800edee:	3301      	adds	r3, #1
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	9306      	str	r3, [sp, #24]
 800edf4:	9b01      	ldr	r3, [sp, #4]
 800edf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d310      	bcc.n	800ee1e <__multiply+0xb2>
 800edfc:	9b03      	ldr	r3, [sp, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	dd05      	ble.n	800ee0e <__multiply+0xa2>
 800ee02:	9b04      	ldr	r3, [sp, #16]
 800ee04:	3b04      	subs	r3, #4
 800ee06:	9304      	str	r3, [sp, #16]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d056      	beq.n	800eebc <__multiply+0x150>
 800ee0e:	9b02      	ldr	r3, [sp, #8]
 800ee10:	9a03      	ldr	r2, [sp, #12]
 800ee12:	0018      	movs	r0, r3
 800ee14:	611a      	str	r2, [r3, #16]
 800ee16:	b00b      	add	sp, #44	; 0x2c
 800ee18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee1a:	c304      	stmia	r3!, {r2}
 800ee1c:	e7cf      	b.n	800edbe <__multiply+0x52>
 800ee1e:	9b01      	ldr	r3, [sp, #4]
 800ee20:	6818      	ldr	r0, [r3, #0]
 800ee22:	b280      	uxth	r0, r0
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d01e      	beq.n	800ee66 <__multiply+0xfa>
 800ee28:	4667      	mov	r7, ip
 800ee2a:	2500      	movs	r5, #0
 800ee2c:	9e08      	ldr	r6, [sp, #32]
 800ee2e:	ce02      	ldmia	r6!, {r1}
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	9307      	str	r3, [sp, #28]
 800ee34:	b28b      	uxth	r3, r1
 800ee36:	4343      	muls	r3, r0
 800ee38:	001a      	movs	r2, r3
 800ee3a:	466b      	mov	r3, sp
 800ee3c:	8b9b      	ldrh	r3, [r3, #28]
 800ee3e:	18d3      	adds	r3, r2, r3
 800ee40:	195b      	adds	r3, r3, r5
 800ee42:	0c0d      	lsrs	r5, r1, #16
 800ee44:	4345      	muls	r5, r0
 800ee46:	9a07      	ldr	r2, [sp, #28]
 800ee48:	0c11      	lsrs	r1, r2, #16
 800ee4a:	1869      	adds	r1, r5, r1
 800ee4c:	0c1a      	lsrs	r2, r3, #16
 800ee4e:	188a      	adds	r2, r1, r2
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	0c15      	lsrs	r5, r2, #16
 800ee54:	0412      	lsls	r2, r2, #16
 800ee56:	431a      	orrs	r2, r3
 800ee58:	9b05      	ldr	r3, [sp, #20]
 800ee5a:	c704      	stmia	r7!, {r2}
 800ee5c:	42b3      	cmp	r3, r6
 800ee5e:	d8e6      	bhi.n	800ee2e <__multiply+0xc2>
 800ee60:	4663      	mov	r3, ip
 800ee62:	9a06      	ldr	r2, [sp, #24]
 800ee64:	509d      	str	r5, [r3, r2]
 800ee66:	9b01      	ldr	r3, [sp, #4]
 800ee68:	6818      	ldr	r0, [r3, #0]
 800ee6a:	0c00      	lsrs	r0, r0, #16
 800ee6c:	d020      	beq.n	800eeb0 <__multiply+0x144>
 800ee6e:	4663      	mov	r3, ip
 800ee70:	0025      	movs	r5, r4
 800ee72:	4661      	mov	r1, ip
 800ee74:	2700      	movs	r7, #0
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	3514      	adds	r5, #20
 800ee7a:	682a      	ldr	r2, [r5, #0]
 800ee7c:	680e      	ldr	r6, [r1, #0]
 800ee7e:	b292      	uxth	r2, r2
 800ee80:	4342      	muls	r2, r0
 800ee82:	0c36      	lsrs	r6, r6, #16
 800ee84:	1992      	adds	r2, r2, r6
 800ee86:	19d2      	adds	r2, r2, r7
 800ee88:	0416      	lsls	r6, r2, #16
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	431e      	orrs	r6, r3
 800ee8e:	600e      	str	r6, [r1, #0]
 800ee90:	cd40      	ldmia	r5!, {r6}
 800ee92:	684b      	ldr	r3, [r1, #4]
 800ee94:	0c36      	lsrs	r6, r6, #16
 800ee96:	4346      	muls	r6, r0
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	0c12      	lsrs	r2, r2, #16
 800ee9c:	18f3      	adds	r3, r6, r3
 800ee9e:	189b      	adds	r3, r3, r2
 800eea0:	9a05      	ldr	r2, [sp, #20]
 800eea2:	0c1f      	lsrs	r7, r3, #16
 800eea4:	3104      	adds	r1, #4
 800eea6:	42aa      	cmp	r2, r5
 800eea8:	d8e7      	bhi.n	800ee7a <__multiply+0x10e>
 800eeaa:	4662      	mov	r2, ip
 800eeac:	9906      	ldr	r1, [sp, #24]
 800eeae:	5053      	str	r3, [r2, r1]
 800eeb0:	9b01      	ldr	r3, [sp, #4]
 800eeb2:	3304      	adds	r3, #4
 800eeb4:	9301      	str	r3, [sp, #4]
 800eeb6:	2304      	movs	r3, #4
 800eeb8:	449c      	add	ip, r3
 800eeba:	e79b      	b.n	800edf4 <__multiply+0x88>
 800eebc:	9b03      	ldr	r3, [sp, #12]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	9303      	str	r3, [sp, #12]
 800eec2:	e79b      	b.n	800edfc <__multiply+0x90>
 800eec4:	08012168 	.word	0x08012168
 800eec8:	080121d9 	.word	0x080121d9

0800eecc <__pow5mult>:
 800eecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eece:	2303      	movs	r3, #3
 800eed0:	0015      	movs	r5, r2
 800eed2:	0007      	movs	r7, r0
 800eed4:	000e      	movs	r6, r1
 800eed6:	401a      	ands	r2, r3
 800eed8:	421d      	tst	r5, r3
 800eeda:	d008      	beq.n	800eeee <__pow5mult+0x22>
 800eedc:	4925      	ldr	r1, [pc, #148]	; (800ef74 <__pow5mult+0xa8>)
 800eede:	3a01      	subs	r2, #1
 800eee0:	0092      	lsls	r2, r2, #2
 800eee2:	5852      	ldr	r2, [r2, r1]
 800eee4:	2300      	movs	r3, #0
 800eee6:	0031      	movs	r1, r6
 800eee8:	f7ff fe50 	bl	800eb8c <__multadd>
 800eeec:	0006      	movs	r6, r0
 800eeee:	10ad      	asrs	r5, r5, #2
 800eef0:	d03d      	beq.n	800ef6e <__pow5mult+0xa2>
 800eef2:	69fc      	ldr	r4, [r7, #28]
 800eef4:	2c00      	cmp	r4, #0
 800eef6:	d10f      	bne.n	800ef18 <__pow5mult+0x4c>
 800eef8:	2010      	movs	r0, #16
 800eefa:	f7fc fa19 	bl	800b330 <malloc>
 800eefe:	1e02      	subs	r2, r0, #0
 800ef00:	61f8      	str	r0, [r7, #28]
 800ef02:	d105      	bne.n	800ef10 <__pow5mult+0x44>
 800ef04:	21b4      	movs	r1, #180	; 0xb4
 800ef06:	4b1c      	ldr	r3, [pc, #112]	; (800ef78 <__pow5mult+0xac>)
 800ef08:	481c      	ldr	r0, [pc, #112]	; (800ef7c <__pow5mult+0xb0>)
 800ef0a:	31ff      	adds	r1, #255	; 0xff
 800ef0c:	f7fe fb62 	bl	800d5d4 <__assert_func>
 800ef10:	6044      	str	r4, [r0, #4]
 800ef12:	6084      	str	r4, [r0, #8]
 800ef14:	6004      	str	r4, [r0, #0]
 800ef16:	60c4      	str	r4, [r0, #12]
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	689c      	ldr	r4, [r3, #8]
 800ef1c:	9301      	str	r3, [sp, #4]
 800ef1e:	2c00      	cmp	r4, #0
 800ef20:	d108      	bne.n	800ef34 <__pow5mult+0x68>
 800ef22:	0038      	movs	r0, r7
 800ef24:	4916      	ldr	r1, [pc, #88]	; (800ef80 <__pow5mult+0xb4>)
 800ef26:	f7ff ff09 	bl	800ed3c <__i2b>
 800ef2a:	9b01      	ldr	r3, [sp, #4]
 800ef2c:	0004      	movs	r4, r0
 800ef2e:	6098      	str	r0, [r3, #8]
 800ef30:	2300      	movs	r3, #0
 800ef32:	6003      	str	r3, [r0, #0]
 800ef34:	2301      	movs	r3, #1
 800ef36:	421d      	tst	r5, r3
 800ef38:	d00a      	beq.n	800ef50 <__pow5mult+0x84>
 800ef3a:	0031      	movs	r1, r6
 800ef3c:	0022      	movs	r2, r4
 800ef3e:	0038      	movs	r0, r7
 800ef40:	f7ff ff14 	bl	800ed6c <__multiply>
 800ef44:	0031      	movs	r1, r6
 800ef46:	9001      	str	r0, [sp, #4]
 800ef48:	0038      	movs	r0, r7
 800ef4a:	f7ff fdfb 	bl	800eb44 <_Bfree>
 800ef4e:	9e01      	ldr	r6, [sp, #4]
 800ef50:	106d      	asrs	r5, r5, #1
 800ef52:	d00c      	beq.n	800ef6e <__pow5mult+0xa2>
 800ef54:	6820      	ldr	r0, [r4, #0]
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d107      	bne.n	800ef6a <__pow5mult+0x9e>
 800ef5a:	0022      	movs	r2, r4
 800ef5c:	0021      	movs	r1, r4
 800ef5e:	0038      	movs	r0, r7
 800ef60:	f7ff ff04 	bl	800ed6c <__multiply>
 800ef64:	2300      	movs	r3, #0
 800ef66:	6020      	str	r0, [r4, #0]
 800ef68:	6003      	str	r3, [r0, #0]
 800ef6a:	0004      	movs	r4, r0
 800ef6c:	e7e2      	b.n	800ef34 <__pow5mult+0x68>
 800ef6e:	0030      	movs	r0, r6
 800ef70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef72:	46c0      	nop			; (mov r8, r8)
 800ef74:	08012328 	.word	0x08012328
 800ef78:	08012050 	.word	0x08012050
 800ef7c:	080121d9 	.word	0x080121d9
 800ef80:	00000271 	.word	0x00000271

0800ef84 <__lshift>:
 800ef84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef86:	000c      	movs	r4, r1
 800ef88:	0017      	movs	r7, r2
 800ef8a:	6923      	ldr	r3, [r4, #16]
 800ef8c:	1155      	asrs	r5, r2, #5
 800ef8e:	b087      	sub	sp, #28
 800ef90:	18eb      	adds	r3, r5, r3
 800ef92:	9302      	str	r3, [sp, #8]
 800ef94:	3301      	adds	r3, #1
 800ef96:	9301      	str	r3, [sp, #4]
 800ef98:	6849      	ldr	r1, [r1, #4]
 800ef9a:	68a3      	ldr	r3, [r4, #8]
 800ef9c:	9004      	str	r0, [sp, #16]
 800ef9e:	9a01      	ldr	r2, [sp, #4]
 800efa0:	4293      	cmp	r3, r2
 800efa2:	db10      	blt.n	800efc6 <__lshift+0x42>
 800efa4:	9804      	ldr	r0, [sp, #16]
 800efa6:	f7ff fd89 	bl	800eabc <_Balloc>
 800efaa:	2300      	movs	r3, #0
 800efac:	0002      	movs	r2, r0
 800efae:	0006      	movs	r6, r0
 800efb0:	0019      	movs	r1, r3
 800efb2:	3214      	adds	r2, #20
 800efb4:	4298      	cmp	r0, r3
 800efb6:	d10c      	bne.n	800efd2 <__lshift+0x4e>
 800efb8:	31df      	adds	r1, #223	; 0xdf
 800efba:	0032      	movs	r2, r6
 800efbc:	4b26      	ldr	r3, [pc, #152]	; (800f058 <__lshift+0xd4>)
 800efbe:	4827      	ldr	r0, [pc, #156]	; (800f05c <__lshift+0xd8>)
 800efc0:	31ff      	adds	r1, #255	; 0xff
 800efc2:	f7fe fb07 	bl	800d5d4 <__assert_func>
 800efc6:	3101      	adds	r1, #1
 800efc8:	005b      	lsls	r3, r3, #1
 800efca:	e7e8      	b.n	800ef9e <__lshift+0x1a>
 800efcc:	0098      	lsls	r0, r3, #2
 800efce:	5011      	str	r1, [r2, r0]
 800efd0:	3301      	adds	r3, #1
 800efd2:	42ab      	cmp	r3, r5
 800efd4:	dbfa      	blt.n	800efcc <__lshift+0x48>
 800efd6:	43eb      	mvns	r3, r5
 800efd8:	17db      	asrs	r3, r3, #31
 800efda:	401d      	ands	r5, r3
 800efdc:	211f      	movs	r1, #31
 800efde:	0023      	movs	r3, r4
 800efe0:	0038      	movs	r0, r7
 800efe2:	00ad      	lsls	r5, r5, #2
 800efe4:	1955      	adds	r5, r2, r5
 800efe6:	6922      	ldr	r2, [r4, #16]
 800efe8:	3314      	adds	r3, #20
 800efea:	0092      	lsls	r2, r2, #2
 800efec:	4008      	ands	r0, r1
 800efee:	4684      	mov	ip, r0
 800eff0:	189a      	adds	r2, r3, r2
 800eff2:	420f      	tst	r7, r1
 800eff4:	d02a      	beq.n	800f04c <__lshift+0xc8>
 800eff6:	3101      	adds	r1, #1
 800eff8:	1a09      	subs	r1, r1, r0
 800effa:	9105      	str	r1, [sp, #20]
 800effc:	2100      	movs	r1, #0
 800effe:	9503      	str	r5, [sp, #12]
 800f000:	4667      	mov	r7, ip
 800f002:	6818      	ldr	r0, [r3, #0]
 800f004:	40b8      	lsls	r0, r7
 800f006:	4308      	orrs	r0, r1
 800f008:	9903      	ldr	r1, [sp, #12]
 800f00a:	c101      	stmia	r1!, {r0}
 800f00c:	9103      	str	r1, [sp, #12]
 800f00e:	9805      	ldr	r0, [sp, #20]
 800f010:	cb02      	ldmia	r3!, {r1}
 800f012:	40c1      	lsrs	r1, r0
 800f014:	429a      	cmp	r2, r3
 800f016:	d8f3      	bhi.n	800f000 <__lshift+0x7c>
 800f018:	0020      	movs	r0, r4
 800f01a:	3015      	adds	r0, #21
 800f01c:	2304      	movs	r3, #4
 800f01e:	4282      	cmp	r2, r0
 800f020:	d304      	bcc.n	800f02c <__lshift+0xa8>
 800f022:	1b13      	subs	r3, r2, r4
 800f024:	3b15      	subs	r3, #21
 800f026:	089b      	lsrs	r3, r3, #2
 800f028:	3301      	adds	r3, #1
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	50e9      	str	r1, [r5, r3]
 800f02e:	2900      	cmp	r1, #0
 800f030:	d002      	beq.n	800f038 <__lshift+0xb4>
 800f032:	9b02      	ldr	r3, [sp, #8]
 800f034:	3302      	adds	r3, #2
 800f036:	9301      	str	r3, [sp, #4]
 800f038:	9b01      	ldr	r3, [sp, #4]
 800f03a:	9804      	ldr	r0, [sp, #16]
 800f03c:	3b01      	subs	r3, #1
 800f03e:	0021      	movs	r1, r4
 800f040:	6133      	str	r3, [r6, #16]
 800f042:	f7ff fd7f 	bl	800eb44 <_Bfree>
 800f046:	0030      	movs	r0, r6
 800f048:	b007      	add	sp, #28
 800f04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f04c:	cb02      	ldmia	r3!, {r1}
 800f04e:	c502      	stmia	r5!, {r1}
 800f050:	429a      	cmp	r2, r3
 800f052:	d8fb      	bhi.n	800f04c <__lshift+0xc8>
 800f054:	e7f0      	b.n	800f038 <__lshift+0xb4>
 800f056:	46c0      	nop			; (mov r8, r8)
 800f058:	08012168 	.word	0x08012168
 800f05c:	080121d9 	.word	0x080121d9

0800f060 <__mcmp>:
 800f060:	b530      	push	{r4, r5, lr}
 800f062:	690b      	ldr	r3, [r1, #16]
 800f064:	6904      	ldr	r4, [r0, #16]
 800f066:	0002      	movs	r2, r0
 800f068:	1ae0      	subs	r0, r4, r3
 800f06a:	429c      	cmp	r4, r3
 800f06c:	d10e      	bne.n	800f08c <__mcmp+0x2c>
 800f06e:	3214      	adds	r2, #20
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	3114      	adds	r1, #20
 800f074:	0014      	movs	r4, r2
 800f076:	18c9      	adds	r1, r1, r3
 800f078:	18d2      	adds	r2, r2, r3
 800f07a:	3a04      	subs	r2, #4
 800f07c:	3904      	subs	r1, #4
 800f07e:	6815      	ldr	r5, [r2, #0]
 800f080:	680b      	ldr	r3, [r1, #0]
 800f082:	429d      	cmp	r5, r3
 800f084:	d003      	beq.n	800f08e <__mcmp+0x2e>
 800f086:	2001      	movs	r0, #1
 800f088:	429d      	cmp	r5, r3
 800f08a:	d303      	bcc.n	800f094 <__mcmp+0x34>
 800f08c:	bd30      	pop	{r4, r5, pc}
 800f08e:	4294      	cmp	r4, r2
 800f090:	d3f3      	bcc.n	800f07a <__mcmp+0x1a>
 800f092:	e7fb      	b.n	800f08c <__mcmp+0x2c>
 800f094:	4240      	negs	r0, r0
 800f096:	e7f9      	b.n	800f08c <__mcmp+0x2c>

0800f098 <__mdiff>:
 800f098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f09a:	000e      	movs	r6, r1
 800f09c:	0007      	movs	r7, r0
 800f09e:	0011      	movs	r1, r2
 800f0a0:	0030      	movs	r0, r6
 800f0a2:	b087      	sub	sp, #28
 800f0a4:	0014      	movs	r4, r2
 800f0a6:	f7ff ffdb 	bl	800f060 <__mcmp>
 800f0aa:	1e05      	subs	r5, r0, #0
 800f0ac:	d110      	bne.n	800f0d0 <__mdiff+0x38>
 800f0ae:	0001      	movs	r1, r0
 800f0b0:	0038      	movs	r0, r7
 800f0b2:	f7ff fd03 	bl	800eabc <_Balloc>
 800f0b6:	1e02      	subs	r2, r0, #0
 800f0b8:	d104      	bne.n	800f0c4 <__mdiff+0x2c>
 800f0ba:	4b3f      	ldr	r3, [pc, #252]	; (800f1b8 <__mdiff+0x120>)
 800f0bc:	483f      	ldr	r0, [pc, #252]	; (800f1bc <__mdiff+0x124>)
 800f0be:	4940      	ldr	r1, [pc, #256]	; (800f1c0 <__mdiff+0x128>)
 800f0c0:	f7fe fa88 	bl	800d5d4 <__assert_func>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	6145      	str	r5, [r0, #20]
 800f0c8:	6103      	str	r3, [r0, #16]
 800f0ca:	0010      	movs	r0, r2
 800f0cc:	b007      	add	sp, #28
 800f0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	9301      	str	r3, [sp, #4]
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	db04      	blt.n	800f0e2 <__mdiff+0x4a>
 800f0d8:	0023      	movs	r3, r4
 800f0da:	0034      	movs	r4, r6
 800f0dc:	001e      	movs	r6, r3
 800f0de:	2300      	movs	r3, #0
 800f0e0:	9301      	str	r3, [sp, #4]
 800f0e2:	0038      	movs	r0, r7
 800f0e4:	6861      	ldr	r1, [r4, #4]
 800f0e6:	f7ff fce9 	bl	800eabc <_Balloc>
 800f0ea:	1e02      	subs	r2, r0, #0
 800f0ec:	d103      	bne.n	800f0f6 <__mdiff+0x5e>
 800f0ee:	4b32      	ldr	r3, [pc, #200]	; (800f1b8 <__mdiff+0x120>)
 800f0f0:	4832      	ldr	r0, [pc, #200]	; (800f1bc <__mdiff+0x124>)
 800f0f2:	4934      	ldr	r1, [pc, #208]	; (800f1c4 <__mdiff+0x12c>)
 800f0f4:	e7e4      	b.n	800f0c0 <__mdiff+0x28>
 800f0f6:	9b01      	ldr	r3, [sp, #4]
 800f0f8:	2700      	movs	r7, #0
 800f0fa:	60c3      	str	r3, [r0, #12]
 800f0fc:	6920      	ldr	r0, [r4, #16]
 800f0fe:	3414      	adds	r4, #20
 800f100:	0083      	lsls	r3, r0, #2
 800f102:	18e3      	adds	r3, r4, r3
 800f104:	0021      	movs	r1, r4
 800f106:	9401      	str	r4, [sp, #4]
 800f108:	0034      	movs	r4, r6
 800f10a:	9302      	str	r3, [sp, #8]
 800f10c:	6933      	ldr	r3, [r6, #16]
 800f10e:	3414      	adds	r4, #20
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	18e3      	adds	r3, r4, r3
 800f114:	9303      	str	r3, [sp, #12]
 800f116:	0013      	movs	r3, r2
 800f118:	3314      	adds	r3, #20
 800f11a:	469c      	mov	ip, r3
 800f11c:	9305      	str	r3, [sp, #20]
 800f11e:	9104      	str	r1, [sp, #16]
 800f120:	9b04      	ldr	r3, [sp, #16]
 800f122:	cc02      	ldmia	r4!, {r1}
 800f124:	cb20      	ldmia	r3!, {r5}
 800f126:	9304      	str	r3, [sp, #16]
 800f128:	b2ab      	uxth	r3, r5
 800f12a:	19df      	adds	r7, r3, r7
 800f12c:	b28b      	uxth	r3, r1
 800f12e:	1afb      	subs	r3, r7, r3
 800f130:	0c09      	lsrs	r1, r1, #16
 800f132:	0c2d      	lsrs	r5, r5, #16
 800f134:	1a6d      	subs	r5, r5, r1
 800f136:	1419      	asrs	r1, r3, #16
 800f138:	1869      	adds	r1, r5, r1
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	140f      	asrs	r7, r1, #16
 800f13e:	0409      	lsls	r1, r1, #16
 800f140:	4319      	orrs	r1, r3
 800f142:	4663      	mov	r3, ip
 800f144:	c302      	stmia	r3!, {r1}
 800f146:	469c      	mov	ip, r3
 800f148:	9b03      	ldr	r3, [sp, #12]
 800f14a:	42a3      	cmp	r3, r4
 800f14c:	d8e8      	bhi.n	800f120 <__mdiff+0x88>
 800f14e:	0031      	movs	r1, r6
 800f150:	9c03      	ldr	r4, [sp, #12]
 800f152:	3115      	adds	r1, #21
 800f154:	2304      	movs	r3, #4
 800f156:	428c      	cmp	r4, r1
 800f158:	d304      	bcc.n	800f164 <__mdiff+0xcc>
 800f15a:	1ba3      	subs	r3, r4, r6
 800f15c:	3b15      	subs	r3, #21
 800f15e:	089b      	lsrs	r3, r3, #2
 800f160:	3301      	adds	r3, #1
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	9901      	ldr	r1, [sp, #4]
 800f166:	18cd      	adds	r5, r1, r3
 800f168:	9905      	ldr	r1, [sp, #20]
 800f16a:	002e      	movs	r6, r5
 800f16c:	18cb      	adds	r3, r1, r3
 800f16e:	469c      	mov	ip, r3
 800f170:	9902      	ldr	r1, [sp, #8]
 800f172:	428e      	cmp	r6, r1
 800f174:	d310      	bcc.n	800f198 <__mdiff+0x100>
 800f176:	9e02      	ldr	r6, [sp, #8]
 800f178:	1ee9      	subs	r1, r5, #3
 800f17a:	2400      	movs	r4, #0
 800f17c:	428e      	cmp	r6, r1
 800f17e:	d304      	bcc.n	800f18a <__mdiff+0xf2>
 800f180:	0031      	movs	r1, r6
 800f182:	3103      	adds	r1, #3
 800f184:	1b49      	subs	r1, r1, r5
 800f186:	0889      	lsrs	r1, r1, #2
 800f188:	008c      	lsls	r4, r1, #2
 800f18a:	191b      	adds	r3, r3, r4
 800f18c:	3b04      	subs	r3, #4
 800f18e:	6819      	ldr	r1, [r3, #0]
 800f190:	2900      	cmp	r1, #0
 800f192:	d00f      	beq.n	800f1b4 <__mdiff+0x11c>
 800f194:	6110      	str	r0, [r2, #16]
 800f196:	e798      	b.n	800f0ca <__mdiff+0x32>
 800f198:	ce02      	ldmia	r6!, {r1}
 800f19a:	b28c      	uxth	r4, r1
 800f19c:	19e4      	adds	r4, r4, r7
 800f19e:	0c0f      	lsrs	r7, r1, #16
 800f1a0:	1421      	asrs	r1, r4, #16
 800f1a2:	1879      	adds	r1, r7, r1
 800f1a4:	b2a4      	uxth	r4, r4
 800f1a6:	140f      	asrs	r7, r1, #16
 800f1a8:	0409      	lsls	r1, r1, #16
 800f1aa:	4321      	orrs	r1, r4
 800f1ac:	4664      	mov	r4, ip
 800f1ae:	c402      	stmia	r4!, {r1}
 800f1b0:	46a4      	mov	ip, r4
 800f1b2:	e7dd      	b.n	800f170 <__mdiff+0xd8>
 800f1b4:	3801      	subs	r0, #1
 800f1b6:	e7e9      	b.n	800f18c <__mdiff+0xf4>
 800f1b8:	08012168 	.word	0x08012168
 800f1bc:	080121d9 	.word	0x080121d9
 800f1c0:	00000237 	.word	0x00000237
 800f1c4:	00000245 	.word	0x00000245

0800f1c8 <__ulp>:
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	4b0b      	ldr	r3, [pc, #44]	; (800f1f8 <__ulp+0x30>)
 800f1cc:	4019      	ands	r1, r3
 800f1ce:	4b0b      	ldr	r3, [pc, #44]	; (800f1fc <__ulp+0x34>)
 800f1d0:	18c9      	adds	r1, r1, r3
 800f1d2:	4281      	cmp	r1, r0
 800f1d4:	dc06      	bgt.n	800f1e4 <__ulp+0x1c>
 800f1d6:	4249      	negs	r1, r1
 800f1d8:	150b      	asrs	r3, r1, #20
 800f1da:	2b13      	cmp	r3, #19
 800f1dc:	dc03      	bgt.n	800f1e6 <__ulp+0x1e>
 800f1de:	2180      	movs	r1, #128	; 0x80
 800f1e0:	0309      	lsls	r1, r1, #12
 800f1e2:	4119      	asrs	r1, r3
 800f1e4:	4770      	bx	lr
 800f1e6:	3b14      	subs	r3, #20
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	2b1e      	cmp	r3, #30
 800f1ec:	dc02      	bgt.n	800f1f4 <__ulp+0x2c>
 800f1ee:	2080      	movs	r0, #128	; 0x80
 800f1f0:	0600      	lsls	r0, r0, #24
 800f1f2:	40d8      	lsrs	r0, r3
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	e7f5      	b.n	800f1e4 <__ulp+0x1c>
 800f1f8:	7ff00000 	.word	0x7ff00000
 800f1fc:	fcc00000 	.word	0xfcc00000

0800f200 <__b2d>:
 800f200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f202:	0006      	movs	r6, r0
 800f204:	6903      	ldr	r3, [r0, #16]
 800f206:	3614      	adds	r6, #20
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	18f3      	adds	r3, r6, r3
 800f20c:	1f1d      	subs	r5, r3, #4
 800f20e:	682c      	ldr	r4, [r5, #0]
 800f210:	000f      	movs	r7, r1
 800f212:	0020      	movs	r0, r4
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	f7ff fd49 	bl	800ecac <__hi0bits>
 800f21a:	2220      	movs	r2, #32
 800f21c:	1a12      	subs	r2, r2, r0
 800f21e:	603a      	str	r2, [r7, #0]
 800f220:	0003      	movs	r3, r0
 800f222:	4a1c      	ldr	r2, [pc, #112]	; (800f294 <__b2d+0x94>)
 800f224:	280a      	cmp	r0, #10
 800f226:	dc15      	bgt.n	800f254 <__b2d+0x54>
 800f228:	210b      	movs	r1, #11
 800f22a:	0027      	movs	r7, r4
 800f22c:	1a09      	subs	r1, r1, r0
 800f22e:	40cf      	lsrs	r7, r1
 800f230:	433a      	orrs	r2, r7
 800f232:	468c      	mov	ip, r1
 800f234:	0011      	movs	r1, r2
 800f236:	2200      	movs	r2, #0
 800f238:	42ae      	cmp	r6, r5
 800f23a:	d202      	bcs.n	800f242 <__b2d+0x42>
 800f23c:	9a01      	ldr	r2, [sp, #4]
 800f23e:	3a08      	subs	r2, #8
 800f240:	6812      	ldr	r2, [r2, #0]
 800f242:	3315      	adds	r3, #21
 800f244:	409c      	lsls	r4, r3
 800f246:	4663      	mov	r3, ip
 800f248:	0027      	movs	r7, r4
 800f24a:	40da      	lsrs	r2, r3
 800f24c:	4317      	orrs	r7, r2
 800f24e:	0038      	movs	r0, r7
 800f250:	b003      	add	sp, #12
 800f252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f254:	2700      	movs	r7, #0
 800f256:	42ae      	cmp	r6, r5
 800f258:	d202      	bcs.n	800f260 <__b2d+0x60>
 800f25a:	9d01      	ldr	r5, [sp, #4]
 800f25c:	3d08      	subs	r5, #8
 800f25e:	682f      	ldr	r7, [r5, #0]
 800f260:	210b      	movs	r1, #11
 800f262:	4249      	negs	r1, r1
 800f264:	468c      	mov	ip, r1
 800f266:	449c      	add	ip, r3
 800f268:	2b0b      	cmp	r3, #11
 800f26a:	d010      	beq.n	800f28e <__b2d+0x8e>
 800f26c:	4661      	mov	r1, ip
 800f26e:	2320      	movs	r3, #32
 800f270:	408c      	lsls	r4, r1
 800f272:	1a5b      	subs	r3, r3, r1
 800f274:	0039      	movs	r1, r7
 800f276:	40d9      	lsrs	r1, r3
 800f278:	430c      	orrs	r4, r1
 800f27a:	4322      	orrs	r2, r4
 800f27c:	0011      	movs	r1, r2
 800f27e:	2200      	movs	r2, #0
 800f280:	42b5      	cmp	r5, r6
 800f282:	d901      	bls.n	800f288 <__b2d+0x88>
 800f284:	3d04      	subs	r5, #4
 800f286:	682a      	ldr	r2, [r5, #0]
 800f288:	4664      	mov	r4, ip
 800f28a:	40a7      	lsls	r7, r4
 800f28c:	e7dd      	b.n	800f24a <__b2d+0x4a>
 800f28e:	4322      	orrs	r2, r4
 800f290:	0011      	movs	r1, r2
 800f292:	e7dc      	b.n	800f24e <__b2d+0x4e>
 800f294:	3ff00000 	.word	0x3ff00000

0800f298 <__d2b>:
 800f298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f29a:	2101      	movs	r1, #1
 800f29c:	0014      	movs	r4, r2
 800f29e:	001d      	movs	r5, r3
 800f2a0:	9f08      	ldr	r7, [sp, #32]
 800f2a2:	f7ff fc0b 	bl	800eabc <_Balloc>
 800f2a6:	1e06      	subs	r6, r0, #0
 800f2a8:	d105      	bne.n	800f2b6 <__d2b+0x1e>
 800f2aa:	0032      	movs	r2, r6
 800f2ac:	4b24      	ldr	r3, [pc, #144]	; (800f340 <__d2b+0xa8>)
 800f2ae:	4825      	ldr	r0, [pc, #148]	; (800f344 <__d2b+0xac>)
 800f2b0:	4925      	ldr	r1, [pc, #148]	; (800f348 <__d2b+0xb0>)
 800f2b2:	f7fe f98f 	bl	800d5d4 <__assert_func>
 800f2b6:	032b      	lsls	r3, r5, #12
 800f2b8:	006d      	lsls	r5, r5, #1
 800f2ba:	0b1b      	lsrs	r3, r3, #12
 800f2bc:	0d6d      	lsrs	r5, r5, #21
 800f2be:	d125      	bne.n	800f30c <__d2b+0x74>
 800f2c0:	9301      	str	r3, [sp, #4]
 800f2c2:	2c00      	cmp	r4, #0
 800f2c4:	d028      	beq.n	800f318 <__d2b+0x80>
 800f2c6:	4668      	mov	r0, sp
 800f2c8:	9400      	str	r4, [sp, #0]
 800f2ca:	f7ff fd09 	bl	800ece0 <__lo0bits>
 800f2ce:	9b01      	ldr	r3, [sp, #4]
 800f2d0:	9900      	ldr	r1, [sp, #0]
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d01e      	beq.n	800f314 <__d2b+0x7c>
 800f2d6:	2220      	movs	r2, #32
 800f2d8:	001c      	movs	r4, r3
 800f2da:	1a12      	subs	r2, r2, r0
 800f2dc:	4094      	lsls	r4, r2
 800f2de:	0022      	movs	r2, r4
 800f2e0:	40c3      	lsrs	r3, r0
 800f2e2:	430a      	orrs	r2, r1
 800f2e4:	6172      	str	r2, [r6, #20]
 800f2e6:	9301      	str	r3, [sp, #4]
 800f2e8:	9c01      	ldr	r4, [sp, #4]
 800f2ea:	61b4      	str	r4, [r6, #24]
 800f2ec:	1e63      	subs	r3, r4, #1
 800f2ee:	419c      	sbcs	r4, r3
 800f2f0:	3401      	adds	r4, #1
 800f2f2:	6134      	str	r4, [r6, #16]
 800f2f4:	2d00      	cmp	r5, #0
 800f2f6:	d017      	beq.n	800f328 <__d2b+0x90>
 800f2f8:	2435      	movs	r4, #53	; 0x35
 800f2fa:	4b14      	ldr	r3, [pc, #80]	; (800f34c <__d2b+0xb4>)
 800f2fc:	18ed      	adds	r5, r5, r3
 800f2fe:	182d      	adds	r5, r5, r0
 800f300:	603d      	str	r5, [r7, #0]
 800f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f304:	1a24      	subs	r4, r4, r0
 800f306:	601c      	str	r4, [r3, #0]
 800f308:	0030      	movs	r0, r6
 800f30a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f30c:	2280      	movs	r2, #128	; 0x80
 800f30e:	0352      	lsls	r2, r2, #13
 800f310:	4313      	orrs	r3, r2
 800f312:	e7d5      	b.n	800f2c0 <__d2b+0x28>
 800f314:	6171      	str	r1, [r6, #20]
 800f316:	e7e7      	b.n	800f2e8 <__d2b+0x50>
 800f318:	a801      	add	r0, sp, #4
 800f31a:	f7ff fce1 	bl	800ece0 <__lo0bits>
 800f31e:	9b01      	ldr	r3, [sp, #4]
 800f320:	2401      	movs	r4, #1
 800f322:	6173      	str	r3, [r6, #20]
 800f324:	3020      	adds	r0, #32
 800f326:	e7e4      	b.n	800f2f2 <__d2b+0x5a>
 800f328:	4b09      	ldr	r3, [pc, #36]	; (800f350 <__d2b+0xb8>)
 800f32a:	18c0      	adds	r0, r0, r3
 800f32c:	4b09      	ldr	r3, [pc, #36]	; (800f354 <__d2b+0xbc>)
 800f32e:	6038      	str	r0, [r7, #0]
 800f330:	18e3      	adds	r3, r4, r3
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	18f3      	adds	r3, r6, r3
 800f336:	6958      	ldr	r0, [r3, #20]
 800f338:	f7ff fcb8 	bl	800ecac <__hi0bits>
 800f33c:	0164      	lsls	r4, r4, #5
 800f33e:	e7e0      	b.n	800f302 <__d2b+0x6a>
 800f340:	08012168 	.word	0x08012168
 800f344:	080121d9 	.word	0x080121d9
 800f348:	0000030f 	.word	0x0000030f
 800f34c:	fffffbcd 	.word	0xfffffbcd
 800f350:	fffffbce 	.word	0xfffffbce
 800f354:	3fffffff 	.word	0x3fffffff

0800f358 <__ratio>:
 800f358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f35a:	b087      	sub	sp, #28
 800f35c:	000f      	movs	r7, r1
 800f35e:	a904      	add	r1, sp, #16
 800f360:	0006      	movs	r6, r0
 800f362:	f7ff ff4d 	bl	800f200 <__b2d>
 800f366:	9000      	str	r0, [sp, #0]
 800f368:	9101      	str	r1, [sp, #4]
 800f36a:	9c00      	ldr	r4, [sp, #0]
 800f36c:	9d01      	ldr	r5, [sp, #4]
 800f36e:	0038      	movs	r0, r7
 800f370:	a905      	add	r1, sp, #20
 800f372:	f7ff ff45 	bl	800f200 <__b2d>
 800f376:	9002      	str	r0, [sp, #8]
 800f378:	9103      	str	r1, [sp, #12]
 800f37a:	9a02      	ldr	r2, [sp, #8]
 800f37c:	9b03      	ldr	r3, [sp, #12]
 800f37e:	6930      	ldr	r0, [r6, #16]
 800f380:	6939      	ldr	r1, [r7, #16]
 800f382:	9e04      	ldr	r6, [sp, #16]
 800f384:	1a40      	subs	r0, r0, r1
 800f386:	9905      	ldr	r1, [sp, #20]
 800f388:	0140      	lsls	r0, r0, #5
 800f38a:	1a71      	subs	r1, r6, r1
 800f38c:	1841      	adds	r1, r0, r1
 800f38e:	0508      	lsls	r0, r1, #20
 800f390:	2900      	cmp	r1, #0
 800f392:	dd07      	ble.n	800f3a4 <__ratio+0x4c>
 800f394:	9901      	ldr	r1, [sp, #4]
 800f396:	1845      	adds	r5, r0, r1
 800f398:	0020      	movs	r0, r4
 800f39a:	0029      	movs	r1, r5
 800f39c:	f7f2 fbaa 	bl	8001af4 <__aeabi_ddiv>
 800f3a0:	b007      	add	sp, #28
 800f3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3a4:	9903      	ldr	r1, [sp, #12]
 800f3a6:	1a0b      	subs	r3, r1, r0
 800f3a8:	e7f6      	b.n	800f398 <__ratio+0x40>

0800f3aa <__copybits>:
 800f3aa:	b570      	push	{r4, r5, r6, lr}
 800f3ac:	0014      	movs	r4, r2
 800f3ae:	0005      	movs	r5, r0
 800f3b0:	3901      	subs	r1, #1
 800f3b2:	6913      	ldr	r3, [r2, #16]
 800f3b4:	1149      	asrs	r1, r1, #5
 800f3b6:	3101      	adds	r1, #1
 800f3b8:	0089      	lsls	r1, r1, #2
 800f3ba:	3414      	adds	r4, #20
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	1841      	adds	r1, r0, r1
 800f3c0:	18e3      	adds	r3, r4, r3
 800f3c2:	42a3      	cmp	r3, r4
 800f3c4:	d80d      	bhi.n	800f3e2 <__copybits+0x38>
 800f3c6:	0014      	movs	r4, r2
 800f3c8:	3411      	adds	r4, #17
 800f3ca:	2500      	movs	r5, #0
 800f3cc:	429c      	cmp	r4, r3
 800f3ce:	d803      	bhi.n	800f3d8 <__copybits+0x2e>
 800f3d0:	1a9b      	subs	r3, r3, r2
 800f3d2:	3b11      	subs	r3, #17
 800f3d4:	089b      	lsrs	r3, r3, #2
 800f3d6:	009d      	lsls	r5, r3, #2
 800f3d8:	2300      	movs	r3, #0
 800f3da:	1940      	adds	r0, r0, r5
 800f3dc:	4281      	cmp	r1, r0
 800f3de:	d803      	bhi.n	800f3e8 <__copybits+0x3e>
 800f3e0:	bd70      	pop	{r4, r5, r6, pc}
 800f3e2:	cc40      	ldmia	r4!, {r6}
 800f3e4:	c540      	stmia	r5!, {r6}
 800f3e6:	e7ec      	b.n	800f3c2 <__copybits+0x18>
 800f3e8:	c008      	stmia	r0!, {r3}
 800f3ea:	e7f7      	b.n	800f3dc <__copybits+0x32>

0800f3ec <__any_on>:
 800f3ec:	0002      	movs	r2, r0
 800f3ee:	6900      	ldr	r0, [r0, #16]
 800f3f0:	b510      	push	{r4, lr}
 800f3f2:	3214      	adds	r2, #20
 800f3f4:	114b      	asrs	r3, r1, #5
 800f3f6:	4298      	cmp	r0, r3
 800f3f8:	db13      	blt.n	800f422 <__any_on+0x36>
 800f3fa:	dd0c      	ble.n	800f416 <__any_on+0x2a>
 800f3fc:	241f      	movs	r4, #31
 800f3fe:	0008      	movs	r0, r1
 800f400:	4020      	ands	r0, r4
 800f402:	4221      	tst	r1, r4
 800f404:	d007      	beq.n	800f416 <__any_on+0x2a>
 800f406:	0099      	lsls	r1, r3, #2
 800f408:	588c      	ldr	r4, [r1, r2]
 800f40a:	0021      	movs	r1, r4
 800f40c:	40c1      	lsrs	r1, r0
 800f40e:	4081      	lsls	r1, r0
 800f410:	2001      	movs	r0, #1
 800f412:	428c      	cmp	r4, r1
 800f414:	d104      	bne.n	800f420 <__any_on+0x34>
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	18d3      	adds	r3, r2, r3
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d803      	bhi.n	800f426 <__any_on+0x3a>
 800f41e:	2000      	movs	r0, #0
 800f420:	bd10      	pop	{r4, pc}
 800f422:	0003      	movs	r3, r0
 800f424:	e7f7      	b.n	800f416 <__any_on+0x2a>
 800f426:	3b04      	subs	r3, #4
 800f428:	6819      	ldr	r1, [r3, #0]
 800f42a:	2900      	cmp	r1, #0
 800f42c:	d0f5      	beq.n	800f41a <__any_on+0x2e>
 800f42e:	2001      	movs	r0, #1
 800f430:	e7f6      	b.n	800f420 <__any_on+0x34>

0800f432 <__ascii_wctomb>:
 800f432:	0003      	movs	r3, r0
 800f434:	1e08      	subs	r0, r1, #0
 800f436:	d005      	beq.n	800f444 <__ascii_wctomb+0x12>
 800f438:	2aff      	cmp	r2, #255	; 0xff
 800f43a:	d904      	bls.n	800f446 <__ascii_wctomb+0x14>
 800f43c:	228a      	movs	r2, #138	; 0x8a
 800f43e:	2001      	movs	r0, #1
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	4240      	negs	r0, r0
 800f444:	4770      	bx	lr
 800f446:	2001      	movs	r0, #1
 800f448:	700a      	strb	r2, [r1, #0]
 800f44a:	e7fb      	b.n	800f444 <__ascii_wctomb+0x12>

0800f44c <__ssputs_r>:
 800f44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f44e:	b085      	sub	sp, #20
 800f450:	9301      	str	r3, [sp, #4]
 800f452:	9203      	str	r2, [sp, #12]
 800f454:	688e      	ldr	r6, [r1, #8]
 800f456:	9a01      	ldr	r2, [sp, #4]
 800f458:	0007      	movs	r7, r0
 800f45a:	000c      	movs	r4, r1
 800f45c:	680b      	ldr	r3, [r1, #0]
 800f45e:	4296      	cmp	r6, r2
 800f460:	d831      	bhi.n	800f4c6 <__ssputs_r+0x7a>
 800f462:	898a      	ldrh	r2, [r1, #12]
 800f464:	2190      	movs	r1, #144	; 0x90
 800f466:	00c9      	lsls	r1, r1, #3
 800f468:	420a      	tst	r2, r1
 800f46a:	d029      	beq.n	800f4c0 <__ssputs_r+0x74>
 800f46c:	2003      	movs	r0, #3
 800f46e:	6921      	ldr	r1, [r4, #16]
 800f470:	1a5b      	subs	r3, r3, r1
 800f472:	9302      	str	r3, [sp, #8]
 800f474:	6963      	ldr	r3, [r4, #20]
 800f476:	4343      	muls	r3, r0
 800f478:	0fdd      	lsrs	r5, r3, #31
 800f47a:	18ed      	adds	r5, r5, r3
 800f47c:	9b01      	ldr	r3, [sp, #4]
 800f47e:	9802      	ldr	r0, [sp, #8]
 800f480:	3301      	adds	r3, #1
 800f482:	181b      	adds	r3, r3, r0
 800f484:	106d      	asrs	r5, r5, #1
 800f486:	42ab      	cmp	r3, r5
 800f488:	d900      	bls.n	800f48c <__ssputs_r+0x40>
 800f48a:	001d      	movs	r5, r3
 800f48c:	0552      	lsls	r2, r2, #21
 800f48e:	d529      	bpl.n	800f4e4 <__ssputs_r+0x98>
 800f490:	0029      	movs	r1, r5
 800f492:	0038      	movs	r0, r7
 800f494:	f7fb ff78 	bl	800b388 <_malloc_r>
 800f498:	1e06      	subs	r6, r0, #0
 800f49a:	d02d      	beq.n	800f4f8 <__ssputs_r+0xac>
 800f49c:	9a02      	ldr	r2, [sp, #8]
 800f49e:	6921      	ldr	r1, [r4, #16]
 800f4a0:	f7fe f884 	bl	800d5ac <memcpy>
 800f4a4:	89a2      	ldrh	r2, [r4, #12]
 800f4a6:	4b19      	ldr	r3, [pc, #100]	; (800f50c <__ssputs_r+0xc0>)
 800f4a8:	401a      	ands	r2, r3
 800f4aa:	2380      	movs	r3, #128	; 0x80
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	81a3      	strh	r3, [r4, #12]
 800f4b0:	9b02      	ldr	r3, [sp, #8]
 800f4b2:	6126      	str	r6, [r4, #16]
 800f4b4:	18f6      	adds	r6, r6, r3
 800f4b6:	6026      	str	r6, [r4, #0]
 800f4b8:	6165      	str	r5, [r4, #20]
 800f4ba:	9e01      	ldr	r6, [sp, #4]
 800f4bc:	1aed      	subs	r5, r5, r3
 800f4be:	60a5      	str	r5, [r4, #8]
 800f4c0:	9b01      	ldr	r3, [sp, #4]
 800f4c2:	429e      	cmp	r6, r3
 800f4c4:	d900      	bls.n	800f4c8 <__ssputs_r+0x7c>
 800f4c6:	9e01      	ldr	r6, [sp, #4]
 800f4c8:	0032      	movs	r2, r6
 800f4ca:	9903      	ldr	r1, [sp, #12]
 800f4cc:	6820      	ldr	r0, [r4, #0]
 800f4ce:	f000 f9e5 	bl	800f89c <memmove>
 800f4d2:	2000      	movs	r0, #0
 800f4d4:	68a3      	ldr	r3, [r4, #8]
 800f4d6:	1b9b      	subs	r3, r3, r6
 800f4d8:	60a3      	str	r3, [r4, #8]
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	199b      	adds	r3, r3, r6
 800f4de:	6023      	str	r3, [r4, #0]
 800f4e0:	b005      	add	sp, #20
 800f4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4e4:	002a      	movs	r2, r5
 800f4e6:	0038      	movs	r0, r7
 800f4e8:	f000 fa1f 	bl	800f92a <_realloc_r>
 800f4ec:	1e06      	subs	r6, r0, #0
 800f4ee:	d1df      	bne.n	800f4b0 <__ssputs_r+0x64>
 800f4f0:	0038      	movs	r0, r7
 800f4f2:	6921      	ldr	r1, [r4, #16]
 800f4f4:	f7fe ff2a 	bl	800e34c <_free_r>
 800f4f8:	230c      	movs	r3, #12
 800f4fa:	2001      	movs	r0, #1
 800f4fc:	603b      	str	r3, [r7, #0]
 800f4fe:	89a2      	ldrh	r2, [r4, #12]
 800f500:	3334      	adds	r3, #52	; 0x34
 800f502:	4313      	orrs	r3, r2
 800f504:	81a3      	strh	r3, [r4, #12]
 800f506:	4240      	negs	r0, r0
 800f508:	e7ea      	b.n	800f4e0 <__ssputs_r+0x94>
 800f50a:	46c0      	nop			; (mov r8, r8)
 800f50c:	fffffb7f 	.word	0xfffffb7f

0800f510 <_svfiprintf_r>:
 800f510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f512:	b0a1      	sub	sp, #132	; 0x84
 800f514:	9003      	str	r0, [sp, #12]
 800f516:	001d      	movs	r5, r3
 800f518:	898b      	ldrh	r3, [r1, #12]
 800f51a:	000f      	movs	r7, r1
 800f51c:	0016      	movs	r6, r2
 800f51e:	061b      	lsls	r3, r3, #24
 800f520:	d511      	bpl.n	800f546 <_svfiprintf_r+0x36>
 800f522:	690b      	ldr	r3, [r1, #16]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10e      	bne.n	800f546 <_svfiprintf_r+0x36>
 800f528:	2140      	movs	r1, #64	; 0x40
 800f52a:	f7fb ff2d 	bl	800b388 <_malloc_r>
 800f52e:	6038      	str	r0, [r7, #0]
 800f530:	6138      	str	r0, [r7, #16]
 800f532:	2800      	cmp	r0, #0
 800f534:	d105      	bne.n	800f542 <_svfiprintf_r+0x32>
 800f536:	230c      	movs	r3, #12
 800f538:	9a03      	ldr	r2, [sp, #12]
 800f53a:	3801      	subs	r0, #1
 800f53c:	6013      	str	r3, [r2, #0]
 800f53e:	b021      	add	sp, #132	; 0x84
 800f540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f542:	2340      	movs	r3, #64	; 0x40
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	2300      	movs	r3, #0
 800f548:	ac08      	add	r4, sp, #32
 800f54a:	6163      	str	r3, [r4, #20]
 800f54c:	3320      	adds	r3, #32
 800f54e:	7663      	strb	r3, [r4, #25]
 800f550:	3310      	adds	r3, #16
 800f552:	76a3      	strb	r3, [r4, #26]
 800f554:	9507      	str	r5, [sp, #28]
 800f556:	0035      	movs	r5, r6
 800f558:	782b      	ldrb	r3, [r5, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <_svfiprintf_r+0x52>
 800f55e:	2b25      	cmp	r3, #37	; 0x25
 800f560:	d148      	bne.n	800f5f4 <_svfiprintf_r+0xe4>
 800f562:	1bab      	subs	r3, r5, r6
 800f564:	9305      	str	r3, [sp, #20]
 800f566:	42b5      	cmp	r5, r6
 800f568:	d00b      	beq.n	800f582 <_svfiprintf_r+0x72>
 800f56a:	0032      	movs	r2, r6
 800f56c:	0039      	movs	r1, r7
 800f56e:	9803      	ldr	r0, [sp, #12]
 800f570:	f7ff ff6c 	bl	800f44c <__ssputs_r>
 800f574:	3001      	adds	r0, #1
 800f576:	d100      	bne.n	800f57a <_svfiprintf_r+0x6a>
 800f578:	e0af      	b.n	800f6da <_svfiprintf_r+0x1ca>
 800f57a:	6963      	ldr	r3, [r4, #20]
 800f57c:	9a05      	ldr	r2, [sp, #20]
 800f57e:	189b      	adds	r3, r3, r2
 800f580:	6163      	str	r3, [r4, #20]
 800f582:	782b      	ldrb	r3, [r5, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d100      	bne.n	800f58a <_svfiprintf_r+0x7a>
 800f588:	e0a7      	b.n	800f6da <_svfiprintf_r+0x1ca>
 800f58a:	2201      	movs	r2, #1
 800f58c:	2300      	movs	r3, #0
 800f58e:	4252      	negs	r2, r2
 800f590:	6062      	str	r2, [r4, #4]
 800f592:	a904      	add	r1, sp, #16
 800f594:	3254      	adds	r2, #84	; 0x54
 800f596:	1852      	adds	r2, r2, r1
 800f598:	1c6e      	adds	r6, r5, #1
 800f59a:	6023      	str	r3, [r4, #0]
 800f59c:	60e3      	str	r3, [r4, #12]
 800f59e:	60a3      	str	r3, [r4, #8]
 800f5a0:	7013      	strb	r3, [r2, #0]
 800f5a2:	65a3      	str	r3, [r4, #88]	; 0x58
 800f5a4:	4b55      	ldr	r3, [pc, #340]	; (800f6fc <_svfiprintf_r+0x1ec>)
 800f5a6:	2205      	movs	r2, #5
 800f5a8:	0018      	movs	r0, r3
 800f5aa:	7831      	ldrb	r1, [r6, #0]
 800f5ac:	9305      	str	r3, [sp, #20]
 800f5ae:	f7fd fff2 	bl	800d596 <memchr>
 800f5b2:	1c75      	adds	r5, r6, #1
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d11f      	bne.n	800f5f8 <_svfiprintf_r+0xe8>
 800f5b8:	6822      	ldr	r2, [r4, #0]
 800f5ba:	06d3      	lsls	r3, r2, #27
 800f5bc:	d504      	bpl.n	800f5c8 <_svfiprintf_r+0xb8>
 800f5be:	2353      	movs	r3, #83	; 0x53
 800f5c0:	a904      	add	r1, sp, #16
 800f5c2:	185b      	adds	r3, r3, r1
 800f5c4:	2120      	movs	r1, #32
 800f5c6:	7019      	strb	r1, [r3, #0]
 800f5c8:	0713      	lsls	r3, r2, #28
 800f5ca:	d504      	bpl.n	800f5d6 <_svfiprintf_r+0xc6>
 800f5cc:	2353      	movs	r3, #83	; 0x53
 800f5ce:	a904      	add	r1, sp, #16
 800f5d0:	185b      	adds	r3, r3, r1
 800f5d2:	212b      	movs	r1, #43	; 0x2b
 800f5d4:	7019      	strb	r1, [r3, #0]
 800f5d6:	7833      	ldrb	r3, [r6, #0]
 800f5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f5da:	d016      	beq.n	800f60a <_svfiprintf_r+0xfa>
 800f5dc:	0035      	movs	r5, r6
 800f5de:	2100      	movs	r1, #0
 800f5e0:	200a      	movs	r0, #10
 800f5e2:	68e3      	ldr	r3, [r4, #12]
 800f5e4:	782a      	ldrb	r2, [r5, #0]
 800f5e6:	1c6e      	adds	r6, r5, #1
 800f5e8:	3a30      	subs	r2, #48	; 0x30
 800f5ea:	2a09      	cmp	r2, #9
 800f5ec:	d94e      	bls.n	800f68c <_svfiprintf_r+0x17c>
 800f5ee:	2900      	cmp	r1, #0
 800f5f0:	d111      	bne.n	800f616 <_svfiprintf_r+0x106>
 800f5f2:	e017      	b.n	800f624 <_svfiprintf_r+0x114>
 800f5f4:	3501      	adds	r5, #1
 800f5f6:	e7af      	b.n	800f558 <_svfiprintf_r+0x48>
 800f5f8:	9b05      	ldr	r3, [sp, #20]
 800f5fa:	6822      	ldr	r2, [r4, #0]
 800f5fc:	1ac0      	subs	r0, r0, r3
 800f5fe:	2301      	movs	r3, #1
 800f600:	4083      	lsls	r3, r0
 800f602:	4313      	orrs	r3, r2
 800f604:	002e      	movs	r6, r5
 800f606:	6023      	str	r3, [r4, #0]
 800f608:	e7cc      	b.n	800f5a4 <_svfiprintf_r+0x94>
 800f60a:	9b07      	ldr	r3, [sp, #28]
 800f60c:	1d19      	adds	r1, r3, #4
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	9107      	str	r1, [sp, #28]
 800f612:	2b00      	cmp	r3, #0
 800f614:	db01      	blt.n	800f61a <_svfiprintf_r+0x10a>
 800f616:	930b      	str	r3, [sp, #44]	; 0x2c
 800f618:	e004      	b.n	800f624 <_svfiprintf_r+0x114>
 800f61a:	425b      	negs	r3, r3
 800f61c:	60e3      	str	r3, [r4, #12]
 800f61e:	2302      	movs	r3, #2
 800f620:	4313      	orrs	r3, r2
 800f622:	6023      	str	r3, [r4, #0]
 800f624:	782b      	ldrb	r3, [r5, #0]
 800f626:	2b2e      	cmp	r3, #46	; 0x2e
 800f628:	d10a      	bne.n	800f640 <_svfiprintf_r+0x130>
 800f62a:	786b      	ldrb	r3, [r5, #1]
 800f62c:	2b2a      	cmp	r3, #42	; 0x2a
 800f62e:	d135      	bne.n	800f69c <_svfiprintf_r+0x18c>
 800f630:	9b07      	ldr	r3, [sp, #28]
 800f632:	3502      	adds	r5, #2
 800f634:	1d1a      	adds	r2, r3, #4
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	9207      	str	r2, [sp, #28]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	db2b      	blt.n	800f696 <_svfiprintf_r+0x186>
 800f63e:	9309      	str	r3, [sp, #36]	; 0x24
 800f640:	4e2f      	ldr	r6, [pc, #188]	; (800f700 <_svfiprintf_r+0x1f0>)
 800f642:	2203      	movs	r2, #3
 800f644:	0030      	movs	r0, r6
 800f646:	7829      	ldrb	r1, [r5, #0]
 800f648:	f7fd ffa5 	bl	800d596 <memchr>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d006      	beq.n	800f65e <_svfiprintf_r+0x14e>
 800f650:	2340      	movs	r3, #64	; 0x40
 800f652:	1b80      	subs	r0, r0, r6
 800f654:	4083      	lsls	r3, r0
 800f656:	6822      	ldr	r2, [r4, #0]
 800f658:	3501      	adds	r5, #1
 800f65a:	4313      	orrs	r3, r2
 800f65c:	6023      	str	r3, [r4, #0]
 800f65e:	7829      	ldrb	r1, [r5, #0]
 800f660:	2206      	movs	r2, #6
 800f662:	4828      	ldr	r0, [pc, #160]	; (800f704 <_svfiprintf_r+0x1f4>)
 800f664:	1c6e      	adds	r6, r5, #1
 800f666:	7621      	strb	r1, [r4, #24]
 800f668:	f7fd ff95 	bl	800d596 <memchr>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d03c      	beq.n	800f6ea <_svfiprintf_r+0x1da>
 800f670:	4b25      	ldr	r3, [pc, #148]	; (800f708 <_svfiprintf_r+0x1f8>)
 800f672:	2b00      	cmp	r3, #0
 800f674:	d125      	bne.n	800f6c2 <_svfiprintf_r+0x1b2>
 800f676:	2207      	movs	r2, #7
 800f678:	9b07      	ldr	r3, [sp, #28]
 800f67a:	3307      	adds	r3, #7
 800f67c:	4393      	bics	r3, r2
 800f67e:	3308      	adds	r3, #8
 800f680:	9307      	str	r3, [sp, #28]
 800f682:	6963      	ldr	r3, [r4, #20]
 800f684:	9a04      	ldr	r2, [sp, #16]
 800f686:	189b      	adds	r3, r3, r2
 800f688:	6163      	str	r3, [r4, #20]
 800f68a:	e764      	b.n	800f556 <_svfiprintf_r+0x46>
 800f68c:	4343      	muls	r3, r0
 800f68e:	0035      	movs	r5, r6
 800f690:	2101      	movs	r1, #1
 800f692:	189b      	adds	r3, r3, r2
 800f694:	e7a6      	b.n	800f5e4 <_svfiprintf_r+0xd4>
 800f696:	2301      	movs	r3, #1
 800f698:	425b      	negs	r3, r3
 800f69a:	e7d0      	b.n	800f63e <_svfiprintf_r+0x12e>
 800f69c:	2300      	movs	r3, #0
 800f69e:	200a      	movs	r0, #10
 800f6a0:	001a      	movs	r2, r3
 800f6a2:	3501      	adds	r5, #1
 800f6a4:	6063      	str	r3, [r4, #4]
 800f6a6:	7829      	ldrb	r1, [r5, #0]
 800f6a8:	1c6e      	adds	r6, r5, #1
 800f6aa:	3930      	subs	r1, #48	; 0x30
 800f6ac:	2909      	cmp	r1, #9
 800f6ae:	d903      	bls.n	800f6b8 <_svfiprintf_r+0x1a8>
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d0c5      	beq.n	800f640 <_svfiprintf_r+0x130>
 800f6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800f6b6:	e7c3      	b.n	800f640 <_svfiprintf_r+0x130>
 800f6b8:	4342      	muls	r2, r0
 800f6ba:	0035      	movs	r5, r6
 800f6bc:	2301      	movs	r3, #1
 800f6be:	1852      	adds	r2, r2, r1
 800f6c0:	e7f1      	b.n	800f6a6 <_svfiprintf_r+0x196>
 800f6c2:	aa07      	add	r2, sp, #28
 800f6c4:	9200      	str	r2, [sp, #0]
 800f6c6:	0021      	movs	r1, r4
 800f6c8:	003a      	movs	r2, r7
 800f6ca:	4b10      	ldr	r3, [pc, #64]	; (800f70c <_svfiprintf_r+0x1fc>)
 800f6cc:	9803      	ldr	r0, [sp, #12]
 800f6ce:	f7fc fe63 	bl	800c398 <_printf_float>
 800f6d2:	9004      	str	r0, [sp, #16]
 800f6d4:	9b04      	ldr	r3, [sp, #16]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	d1d3      	bne.n	800f682 <_svfiprintf_r+0x172>
 800f6da:	89bb      	ldrh	r3, [r7, #12]
 800f6dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f6de:	065b      	lsls	r3, r3, #25
 800f6e0:	d400      	bmi.n	800f6e4 <_svfiprintf_r+0x1d4>
 800f6e2:	e72c      	b.n	800f53e <_svfiprintf_r+0x2e>
 800f6e4:	2001      	movs	r0, #1
 800f6e6:	4240      	negs	r0, r0
 800f6e8:	e729      	b.n	800f53e <_svfiprintf_r+0x2e>
 800f6ea:	aa07      	add	r2, sp, #28
 800f6ec:	9200      	str	r2, [sp, #0]
 800f6ee:	0021      	movs	r1, r4
 800f6f0:	003a      	movs	r2, r7
 800f6f2:	4b06      	ldr	r3, [pc, #24]	; (800f70c <_svfiprintf_r+0x1fc>)
 800f6f4:	9803      	ldr	r0, [sp, #12]
 800f6f6:	f7fd f915 	bl	800c924 <_printf_i>
 800f6fa:	e7ea      	b.n	800f6d2 <_svfiprintf_r+0x1c2>
 800f6fc:	08012334 	.word	0x08012334
 800f700:	0801233a 	.word	0x0801233a
 800f704:	0801233e 	.word	0x0801233e
 800f708:	0800c399 	.word	0x0800c399
 800f70c:	0800f44d 	.word	0x0800f44d

0800f710 <__sflush_r>:
 800f710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f712:	898b      	ldrh	r3, [r1, #12]
 800f714:	0005      	movs	r5, r0
 800f716:	000c      	movs	r4, r1
 800f718:	071a      	lsls	r2, r3, #28
 800f71a:	d45c      	bmi.n	800f7d6 <__sflush_r+0xc6>
 800f71c:	684a      	ldr	r2, [r1, #4]
 800f71e:	2a00      	cmp	r2, #0
 800f720:	dc04      	bgt.n	800f72c <__sflush_r+0x1c>
 800f722:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f724:	2a00      	cmp	r2, #0
 800f726:	dc01      	bgt.n	800f72c <__sflush_r+0x1c>
 800f728:	2000      	movs	r0, #0
 800f72a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f72c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f72e:	2f00      	cmp	r7, #0
 800f730:	d0fa      	beq.n	800f728 <__sflush_r+0x18>
 800f732:	2200      	movs	r2, #0
 800f734:	2080      	movs	r0, #128	; 0x80
 800f736:	682e      	ldr	r6, [r5, #0]
 800f738:	602a      	str	r2, [r5, #0]
 800f73a:	001a      	movs	r2, r3
 800f73c:	0140      	lsls	r0, r0, #5
 800f73e:	6a21      	ldr	r1, [r4, #32]
 800f740:	4002      	ands	r2, r0
 800f742:	4203      	tst	r3, r0
 800f744:	d034      	beq.n	800f7b0 <__sflush_r+0xa0>
 800f746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f748:	89a3      	ldrh	r3, [r4, #12]
 800f74a:	075b      	lsls	r3, r3, #29
 800f74c:	d506      	bpl.n	800f75c <__sflush_r+0x4c>
 800f74e:	6863      	ldr	r3, [r4, #4]
 800f750:	1ac0      	subs	r0, r0, r3
 800f752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <__sflush_r+0x4c>
 800f758:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f75a:	1ac0      	subs	r0, r0, r3
 800f75c:	0002      	movs	r2, r0
 800f75e:	2300      	movs	r3, #0
 800f760:	0028      	movs	r0, r5
 800f762:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f764:	6a21      	ldr	r1, [r4, #32]
 800f766:	47b8      	blx	r7
 800f768:	89a2      	ldrh	r2, [r4, #12]
 800f76a:	1c43      	adds	r3, r0, #1
 800f76c:	d106      	bne.n	800f77c <__sflush_r+0x6c>
 800f76e:	6829      	ldr	r1, [r5, #0]
 800f770:	291d      	cmp	r1, #29
 800f772:	d82c      	bhi.n	800f7ce <__sflush_r+0xbe>
 800f774:	4b2a      	ldr	r3, [pc, #168]	; (800f820 <__sflush_r+0x110>)
 800f776:	410b      	asrs	r3, r1
 800f778:	07db      	lsls	r3, r3, #31
 800f77a:	d428      	bmi.n	800f7ce <__sflush_r+0xbe>
 800f77c:	2300      	movs	r3, #0
 800f77e:	6063      	str	r3, [r4, #4]
 800f780:	6923      	ldr	r3, [r4, #16]
 800f782:	6023      	str	r3, [r4, #0]
 800f784:	04d2      	lsls	r2, r2, #19
 800f786:	d505      	bpl.n	800f794 <__sflush_r+0x84>
 800f788:	1c43      	adds	r3, r0, #1
 800f78a:	d102      	bne.n	800f792 <__sflush_r+0x82>
 800f78c:	682b      	ldr	r3, [r5, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d100      	bne.n	800f794 <__sflush_r+0x84>
 800f792:	6560      	str	r0, [r4, #84]	; 0x54
 800f794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f796:	602e      	str	r6, [r5, #0]
 800f798:	2900      	cmp	r1, #0
 800f79a:	d0c5      	beq.n	800f728 <__sflush_r+0x18>
 800f79c:	0023      	movs	r3, r4
 800f79e:	3344      	adds	r3, #68	; 0x44
 800f7a0:	4299      	cmp	r1, r3
 800f7a2:	d002      	beq.n	800f7aa <__sflush_r+0x9a>
 800f7a4:	0028      	movs	r0, r5
 800f7a6:	f7fe fdd1 	bl	800e34c <_free_r>
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	6360      	str	r0, [r4, #52]	; 0x34
 800f7ae:	e7bc      	b.n	800f72a <__sflush_r+0x1a>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	0028      	movs	r0, r5
 800f7b4:	47b8      	blx	r7
 800f7b6:	1c43      	adds	r3, r0, #1
 800f7b8:	d1c6      	bne.n	800f748 <__sflush_r+0x38>
 800f7ba:	682b      	ldr	r3, [r5, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d0c3      	beq.n	800f748 <__sflush_r+0x38>
 800f7c0:	2b1d      	cmp	r3, #29
 800f7c2:	d001      	beq.n	800f7c8 <__sflush_r+0xb8>
 800f7c4:	2b16      	cmp	r3, #22
 800f7c6:	d101      	bne.n	800f7cc <__sflush_r+0xbc>
 800f7c8:	602e      	str	r6, [r5, #0]
 800f7ca:	e7ad      	b.n	800f728 <__sflush_r+0x18>
 800f7cc:	89a2      	ldrh	r2, [r4, #12]
 800f7ce:	2340      	movs	r3, #64	; 0x40
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	81a3      	strh	r3, [r4, #12]
 800f7d4:	e7a9      	b.n	800f72a <__sflush_r+0x1a>
 800f7d6:	690e      	ldr	r6, [r1, #16]
 800f7d8:	2e00      	cmp	r6, #0
 800f7da:	d0a5      	beq.n	800f728 <__sflush_r+0x18>
 800f7dc:	680f      	ldr	r7, [r1, #0]
 800f7de:	600e      	str	r6, [r1, #0]
 800f7e0:	1bba      	subs	r2, r7, r6
 800f7e2:	9201      	str	r2, [sp, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	079b      	lsls	r3, r3, #30
 800f7e8:	d100      	bne.n	800f7ec <__sflush_r+0xdc>
 800f7ea:	694a      	ldr	r2, [r1, #20]
 800f7ec:	60a2      	str	r2, [r4, #8]
 800f7ee:	9b01      	ldr	r3, [sp, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	dd99      	ble.n	800f728 <__sflush_r+0x18>
 800f7f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f7f6:	0032      	movs	r2, r6
 800f7f8:	001f      	movs	r7, r3
 800f7fa:	0028      	movs	r0, r5
 800f7fc:	9b01      	ldr	r3, [sp, #4]
 800f7fe:	6a21      	ldr	r1, [r4, #32]
 800f800:	47b8      	blx	r7
 800f802:	2800      	cmp	r0, #0
 800f804:	dc06      	bgt.n	800f814 <__sflush_r+0x104>
 800f806:	2340      	movs	r3, #64	; 0x40
 800f808:	2001      	movs	r0, #1
 800f80a:	89a2      	ldrh	r2, [r4, #12]
 800f80c:	4240      	negs	r0, r0
 800f80e:	4313      	orrs	r3, r2
 800f810:	81a3      	strh	r3, [r4, #12]
 800f812:	e78a      	b.n	800f72a <__sflush_r+0x1a>
 800f814:	9b01      	ldr	r3, [sp, #4]
 800f816:	1836      	adds	r6, r6, r0
 800f818:	1a1b      	subs	r3, r3, r0
 800f81a:	9301      	str	r3, [sp, #4]
 800f81c:	e7e7      	b.n	800f7ee <__sflush_r+0xde>
 800f81e:	46c0      	nop			; (mov r8, r8)
 800f820:	dfbffffe 	.word	0xdfbffffe

0800f824 <_fflush_r>:
 800f824:	690b      	ldr	r3, [r1, #16]
 800f826:	b570      	push	{r4, r5, r6, lr}
 800f828:	0005      	movs	r5, r0
 800f82a:	000c      	movs	r4, r1
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d102      	bne.n	800f836 <_fflush_r+0x12>
 800f830:	2500      	movs	r5, #0
 800f832:	0028      	movs	r0, r5
 800f834:	bd70      	pop	{r4, r5, r6, pc}
 800f836:	2800      	cmp	r0, #0
 800f838:	d004      	beq.n	800f844 <_fflush_r+0x20>
 800f83a:	6a03      	ldr	r3, [r0, #32]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <_fflush_r+0x20>
 800f840:	f7fd fc18 	bl	800d074 <__sinit>
 800f844:	220c      	movs	r2, #12
 800f846:	5ea3      	ldrsh	r3, [r4, r2]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d0f1      	beq.n	800f830 <_fflush_r+0xc>
 800f84c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f84e:	07d2      	lsls	r2, r2, #31
 800f850:	d404      	bmi.n	800f85c <_fflush_r+0x38>
 800f852:	059b      	lsls	r3, r3, #22
 800f854:	d402      	bmi.n	800f85c <_fflush_r+0x38>
 800f856:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f858:	f7fd fe93 	bl	800d582 <__retarget_lock_acquire_recursive>
 800f85c:	0028      	movs	r0, r5
 800f85e:	0021      	movs	r1, r4
 800f860:	f7ff ff56 	bl	800f710 <__sflush_r>
 800f864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f866:	0005      	movs	r5, r0
 800f868:	07db      	lsls	r3, r3, #31
 800f86a:	d4e2      	bmi.n	800f832 <_fflush_r+0xe>
 800f86c:	89a3      	ldrh	r3, [r4, #12]
 800f86e:	059b      	lsls	r3, r3, #22
 800f870:	d4df      	bmi.n	800f832 <_fflush_r+0xe>
 800f872:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f874:	f7fd fe86 	bl	800d584 <__retarget_lock_release_recursive>
 800f878:	e7db      	b.n	800f832 <_fflush_r+0xe>
	...

0800f87c <fiprintf>:
 800f87c:	b40e      	push	{r1, r2, r3}
 800f87e:	b517      	push	{r0, r1, r2, r4, lr}
 800f880:	4c05      	ldr	r4, [pc, #20]	; (800f898 <fiprintf+0x1c>)
 800f882:	ab05      	add	r3, sp, #20
 800f884:	cb04      	ldmia	r3!, {r2}
 800f886:	0001      	movs	r1, r0
 800f888:	6820      	ldr	r0, [r4, #0]
 800f88a:	9301      	str	r3, [sp, #4]
 800f88c:	f000 f8a4 	bl	800f9d8 <_vfiprintf_r>
 800f890:	bc1e      	pop	{r1, r2, r3, r4}
 800f892:	bc08      	pop	{r3}
 800f894:	b003      	add	sp, #12
 800f896:	4718      	bx	r3
 800f898:	200002b8 	.word	0x200002b8

0800f89c <memmove>:
 800f89c:	b510      	push	{r4, lr}
 800f89e:	4288      	cmp	r0, r1
 800f8a0:	d902      	bls.n	800f8a8 <memmove+0xc>
 800f8a2:	188b      	adds	r3, r1, r2
 800f8a4:	4298      	cmp	r0, r3
 800f8a6:	d303      	bcc.n	800f8b0 <memmove+0x14>
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	e007      	b.n	800f8bc <memmove+0x20>
 800f8ac:	5c8b      	ldrb	r3, [r1, r2]
 800f8ae:	5483      	strb	r3, [r0, r2]
 800f8b0:	3a01      	subs	r2, #1
 800f8b2:	d2fb      	bcs.n	800f8ac <memmove+0x10>
 800f8b4:	bd10      	pop	{r4, pc}
 800f8b6:	5ccc      	ldrb	r4, [r1, r3]
 800f8b8:	54c4      	strb	r4, [r0, r3]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d1fa      	bne.n	800f8b6 <memmove+0x1a>
 800f8c0:	e7f8      	b.n	800f8b4 <memmove+0x18>

0800f8c2 <abort>:
 800f8c2:	2006      	movs	r0, #6
 800f8c4:	b510      	push	{r4, lr}
 800f8c6:	f000 fa73 	bl	800fdb0 <raise>
 800f8ca:	2001      	movs	r0, #1
 800f8cc:	f7f7 f818 	bl	8006900 <_exit>

0800f8d0 <_calloc_r>:
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	0c0b      	lsrs	r3, r1, #16
 800f8d4:	0c15      	lsrs	r5, r2, #16
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d11e      	bne.n	800f918 <_calloc_r+0x48>
 800f8da:	2d00      	cmp	r5, #0
 800f8dc:	d10c      	bne.n	800f8f8 <_calloc_r+0x28>
 800f8de:	b289      	uxth	r1, r1
 800f8e0:	b294      	uxth	r4, r2
 800f8e2:	434c      	muls	r4, r1
 800f8e4:	0021      	movs	r1, r4
 800f8e6:	f7fb fd4f 	bl	800b388 <_malloc_r>
 800f8ea:	1e05      	subs	r5, r0, #0
 800f8ec:	d01b      	beq.n	800f926 <_calloc_r+0x56>
 800f8ee:	0022      	movs	r2, r4
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	f7fd fc93 	bl	800d21c <memset>
 800f8f6:	e016      	b.n	800f926 <_calloc_r+0x56>
 800f8f8:	1c2b      	adds	r3, r5, #0
 800f8fa:	1c0c      	adds	r4, r1, #0
 800f8fc:	b289      	uxth	r1, r1
 800f8fe:	b292      	uxth	r2, r2
 800f900:	434a      	muls	r2, r1
 800f902:	b2a1      	uxth	r1, r4
 800f904:	b29c      	uxth	r4, r3
 800f906:	434c      	muls	r4, r1
 800f908:	0c13      	lsrs	r3, r2, #16
 800f90a:	18e4      	adds	r4, r4, r3
 800f90c:	0c23      	lsrs	r3, r4, #16
 800f90e:	d107      	bne.n	800f920 <_calloc_r+0x50>
 800f910:	0424      	lsls	r4, r4, #16
 800f912:	b292      	uxth	r2, r2
 800f914:	4314      	orrs	r4, r2
 800f916:	e7e5      	b.n	800f8e4 <_calloc_r+0x14>
 800f918:	2d00      	cmp	r5, #0
 800f91a:	d101      	bne.n	800f920 <_calloc_r+0x50>
 800f91c:	1c14      	adds	r4, r2, #0
 800f91e:	e7ed      	b.n	800f8fc <_calloc_r+0x2c>
 800f920:	230c      	movs	r3, #12
 800f922:	2500      	movs	r5, #0
 800f924:	6003      	str	r3, [r0, #0]
 800f926:	0028      	movs	r0, r5
 800f928:	bd70      	pop	{r4, r5, r6, pc}

0800f92a <_realloc_r>:
 800f92a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f92c:	0007      	movs	r7, r0
 800f92e:	000e      	movs	r6, r1
 800f930:	0014      	movs	r4, r2
 800f932:	2900      	cmp	r1, #0
 800f934:	d105      	bne.n	800f942 <_realloc_r+0x18>
 800f936:	0011      	movs	r1, r2
 800f938:	f7fb fd26 	bl	800b388 <_malloc_r>
 800f93c:	0005      	movs	r5, r0
 800f93e:	0028      	movs	r0, r5
 800f940:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f942:	2a00      	cmp	r2, #0
 800f944:	d103      	bne.n	800f94e <_realloc_r+0x24>
 800f946:	f7fe fd01 	bl	800e34c <_free_r>
 800f94a:	0025      	movs	r5, r4
 800f94c:	e7f7      	b.n	800f93e <_realloc_r+0x14>
 800f94e:	f000 fa4f 	bl	800fdf0 <_malloc_usable_size_r>
 800f952:	9001      	str	r0, [sp, #4]
 800f954:	4284      	cmp	r4, r0
 800f956:	d803      	bhi.n	800f960 <_realloc_r+0x36>
 800f958:	0035      	movs	r5, r6
 800f95a:	0843      	lsrs	r3, r0, #1
 800f95c:	42a3      	cmp	r3, r4
 800f95e:	d3ee      	bcc.n	800f93e <_realloc_r+0x14>
 800f960:	0021      	movs	r1, r4
 800f962:	0038      	movs	r0, r7
 800f964:	f7fb fd10 	bl	800b388 <_malloc_r>
 800f968:	1e05      	subs	r5, r0, #0
 800f96a:	d0e8      	beq.n	800f93e <_realloc_r+0x14>
 800f96c:	9b01      	ldr	r3, [sp, #4]
 800f96e:	0022      	movs	r2, r4
 800f970:	429c      	cmp	r4, r3
 800f972:	d900      	bls.n	800f976 <_realloc_r+0x4c>
 800f974:	001a      	movs	r2, r3
 800f976:	0031      	movs	r1, r6
 800f978:	0028      	movs	r0, r5
 800f97a:	f7fd fe17 	bl	800d5ac <memcpy>
 800f97e:	0031      	movs	r1, r6
 800f980:	0038      	movs	r0, r7
 800f982:	f7fe fce3 	bl	800e34c <_free_r>
 800f986:	e7da      	b.n	800f93e <_realloc_r+0x14>

0800f988 <__sfputc_r>:
 800f988:	6893      	ldr	r3, [r2, #8]
 800f98a:	b510      	push	{r4, lr}
 800f98c:	3b01      	subs	r3, #1
 800f98e:	6093      	str	r3, [r2, #8]
 800f990:	2b00      	cmp	r3, #0
 800f992:	da04      	bge.n	800f99e <__sfputc_r+0x16>
 800f994:	6994      	ldr	r4, [r2, #24]
 800f996:	42a3      	cmp	r3, r4
 800f998:	db07      	blt.n	800f9aa <__sfputc_r+0x22>
 800f99a:	290a      	cmp	r1, #10
 800f99c:	d005      	beq.n	800f9aa <__sfputc_r+0x22>
 800f99e:	6813      	ldr	r3, [r2, #0]
 800f9a0:	1c58      	adds	r0, r3, #1
 800f9a2:	6010      	str	r0, [r2, #0]
 800f9a4:	7019      	strb	r1, [r3, #0]
 800f9a6:	0008      	movs	r0, r1
 800f9a8:	bd10      	pop	{r4, pc}
 800f9aa:	f000 f931 	bl	800fc10 <__swbuf_r>
 800f9ae:	0001      	movs	r1, r0
 800f9b0:	e7f9      	b.n	800f9a6 <__sfputc_r+0x1e>

0800f9b2 <__sfputs_r>:
 800f9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b4:	0006      	movs	r6, r0
 800f9b6:	000f      	movs	r7, r1
 800f9b8:	0014      	movs	r4, r2
 800f9ba:	18d5      	adds	r5, r2, r3
 800f9bc:	42ac      	cmp	r4, r5
 800f9be:	d101      	bne.n	800f9c4 <__sfputs_r+0x12>
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	e007      	b.n	800f9d4 <__sfputs_r+0x22>
 800f9c4:	7821      	ldrb	r1, [r4, #0]
 800f9c6:	003a      	movs	r2, r7
 800f9c8:	0030      	movs	r0, r6
 800f9ca:	f7ff ffdd 	bl	800f988 <__sfputc_r>
 800f9ce:	3401      	adds	r4, #1
 800f9d0:	1c43      	adds	r3, r0, #1
 800f9d2:	d1f3      	bne.n	800f9bc <__sfputs_r+0xa>
 800f9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9d8 <_vfiprintf_r>:
 800f9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9da:	b0a1      	sub	sp, #132	; 0x84
 800f9dc:	000f      	movs	r7, r1
 800f9de:	0015      	movs	r5, r2
 800f9e0:	001e      	movs	r6, r3
 800f9e2:	9003      	str	r0, [sp, #12]
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d004      	beq.n	800f9f2 <_vfiprintf_r+0x1a>
 800f9e8:	6a03      	ldr	r3, [r0, #32]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d101      	bne.n	800f9f2 <_vfiprintf_r+0x1a>
 800f9ee:	f7fd fb41 	bl	800d074 <__sinit>
 800f9f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9f4:	07db      	lsls	r3, r3, #31
 800f9f6:	d405      	bmi.n	800fa04 <_vfiprintf_r+0x2c>
 800f9f8:	89bb      	ldrh	r3, [r7, #12]
 800f9fa:	059b      	lsls	r3, r3, #22
 800f9fc:	d402      	bmi.n	800fa04 <_vfiprintf_r+0x2c>
 800f9fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fa00:	f7fd fdbf 	bl	800d582 <__retarget_lock_acquire_recursive>
 800fa04:	89bb      	ldrh	r3, [r7, #12]
 800fa06:	071b      	lsls	r3, r3, #28
 800fa08:	d502      	bpl.n	800fa10 <_vfiprintf_r+0x38>
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d113      	bne.n	800fa38 <_vfiprintf_r+0x60>
 800fa10:	0039      	movs	r1, r7
 800fa12:	9803      	ldr	r0, [sp, #12]
 800fa14:	f000 f93e 	bl	800fc94 <__swsetup_r>
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d00d      	beq.n	800fa38 <_vfiprintf_r+0x60>
 800fa1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa1e:	07db      	lsls	r3, r3, #31
 800fa20:	d503      	bpl.n	800fa2a <_vfiprintf_r+0x52>
 800fa22:	2001      	movs	r0, #1
 800fa24:	4240      	negs	r0, r0
 800fa26:	b021      	add	sp, #132	; 0x84
 800fa28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa2a:	89bb      	ldrh	r3, [r7, #12]
 800fa2c:	059b      	lsls	r3, r3, #22
 800fa2e:	d4f8      	bmi.n	800fa22 <_vfiprintf_r+0x4a>
 800fa30:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fa32:	f7fd fda7 	bl	800d584 <__retarget_lock_release_recursive>
 800fa36:	e7f4      	b.n	800fa22 <_vfiprintf_r+0x4a>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	ac08      	add	r4, sp, #32
 800fa3c:	6163      	str	r3, [r4, #20]
 800fa3e:	3320      	adds	r3, #32
 800fa40:	7663      	strb	r3, [r4, #25]
 800fa42:	3310      	adds	r3, #16
 800fa44:	76a3      	strb	r3, [r4, #26]
 800fa46:	9607      	str	r6, [sp, #28]
 800fa48:	002e      	movs	r6, r5
 800fa4a:	7833      	ldrb	r3, [r6, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <_vfiprintf_r+0x7c>
 800fa50:	2b25      	cmp	r3, #37	; 0x25
 800fa52:	d148      	bne.n	800fae6 <_vfiprintf_r+0x10e>
 800fa54:	1b73      	subs	r3, r6, r5
 800fa56:	9305      	str	r3, [sp, #20]
 800fa58:	42ae      	cmp	r6, r5
 800fa5a:	d00b      	beq.n	800fa74 <_vfiprintf_r+0x9c>
 800fa5c:	002a      	movs	r2, r5
 800fa5e:	0039      	movs	r1, r7
 800fa60:	9803      	ldr	r0, [sp, #12]
 800fa62:	f7ff ffa6 	bl	800f9b2 <__sfputs_r>
 800fa66:	3001      	adds	r0, #1
 800fa68:	d100      	bne.n	800fa6c <_vfiprintf_r+0x94>
 800fa6a:	e0af      	b.n	800fbcc <_vfiprintf_r+0x1f4>
 800fa6c:	6963      	ldr	r3, [r4, #20]
 800fa6e:	9a05      	ldr	r2, [sp, #20]
 800fa70:	189b      	adds	r3, r3, r2
 800fa72:	6163      	str	r3, [r4, #20]
 800fa74:	7833      	ldrb	r3, [r6, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d100      	bne.n	800fa7c <_vfiprintf_r+0xa4>
 800fa7a:	e0a7      	b.n	800fbcc <_vfiprintf_r+0x1f4>
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	2300      	movs	r3, #0
 800fa80:	4252      	negs	r2, r2
 800fa82:	6062      	str	r2, [r4, #4]
 800fa84:	a904      	add	r1, sp, #16
 800fa86:	3254      	adds	r2, #84	; 0x54
 800fa88:	1852      	adds	r2, r2, r1
 800fa8a:	1c75      	adds	r5, r6, #1
 800fa8c:	6023      	str	r3, [r4, #0]
 800fa8e:	60e3      	str	r3, [r4, #12]
 800fa90:	60a3      	str	r3, [r4, #8]
 800fa92:	7013      	strb	r3, [r2, #0]
 800fa94:	65a3      	str	r3, [r4, #88]	; 0x58
 800fa96:	4b59      	ldr	r3, [pc, #356]	; (800fbfc <_vfiprintf_r+0x224>)
 800fa98:	2205      	movs	r2, #5
 800fa9a:	0018      	movs	r0, r3
 800fa9c:	7829      	ldrb	r1, [r5, #0]
 800fa9e:	9305      	str	r3, [sp, #20]
 800faa0:	f7fd fd79 	bl	800d596 <memchr>
 800faa4:	1c6e      	adds	r6, r5, #1
 800faa6:	2800      	cmp	r0, #0
 800faa8:	d11f      	bne.n	800faea <_vfiprintf_r+0x112>
 800faaa:	6822      	ldr	r2, [r4, #0]
 800faac:	06d3      	lsls	r3, r2, #27
 800faae:	d504      	bpl.n	800faba <_vfiprintf_r+0xe2>
 800fab0:	2353      	movs	r3, #83	; 0x53
 800fab2:	a904      	add	r1, sp, #16
 800fab4:	185b      	adds	r3, r3, r1
 800fab6:	2120      	movs	r1, #32
 800fab8:	7019      	strb	r1, [r3, #0]
 800faba:	0713      	lsls	r3, r2, #28
 800fabc:	d504      	bpl.n	800fac8 <_vfiprintf_r+0xf0>
 800fabe:	2353      	movs	r3, #83	; 0x53
 800fac0:	a904      	add	r1, sp, #16
 800fac2:	185b      	adds	r3, r3, r1
 800fac4:	212b      	movs	r1, #43	; 0x2b
 800fac6:	7019      	strb	r1, [r3, #0]
 800fac8:	782b      	ldrb	r3, [r5, #0]
 800faca:	2b2a      	cmp	r3, #42	; 0x2a
 800facc:	d016      	beq.n	800fafc <_vfiprintf_r+0x124>
 800face:	002e      	movs	r6, r5
 800fad0:	2100      	movs	r1, #0
 800fad2:	200a      	movs	r0, #10
 800fad4:	68e3      	ldr	r3, [r4, #12]
 800fad6:	7832      	ldrb	r2, [r6, #0]
 800fad8:	1c75      	adds	r5, r6, #1
 800fada:	3a30      	subs	r2, #48	; 0x30
 800fadc:	2a09      	cmp	r2, #9
 800fade:	d94e      	bls.n	800fb7e <_vfiprintf_r+0x1a6>
 800fae0:	2900      	cmp	r1, #0
 800fae2:	d111      	bne.n	800fb08 <_vfiprintf_r+0x130>
 800fae4:	e017      	b.n	800fb16 <_vfiprintf_r+0x13e>
 800fae6:	3601      	adds	r6, #1
 800fae8:	e7af      	b.n	800fa4a <_vfiprintf_r+0x72>
 800faea:	9b05      	ldr	r3, [sp, #20]
 800faec:	6822      	ldr	r2, [r4, #0]
 800faee:	1ac0      	subs	r0, r0, r3
 800faf0:	2301      	movs	r3, #1
 800faf2:	4083      	lsls	r3, r0
 800faf4:	4313      	orrs	r3, r2
 800faf6:	0035      	movs	r5, r6
 800faf8:	6023      	str	r3, [r4, #0]
 800fafa:	e7cc      	b.n	800fa96 <_vfiprintf_r+0xbe>
 800fafc:	9b07      	ldr	r3, [sp, #28]
 800fafe:	1d19      	adds	r1, r3, #4
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	9107      	str	r1, [sp, #28]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	db01      	blt.n	800fb0c <_vfiprintf_r+0x134>
 800fb08:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb0a:	e004      	b.n	800fb16 <_vfiprintf_r+0x13e>
 800fb0c:	425b      	negs	r3, r3
 800fb0e:	60e3      	str	r3, [r4, #12]
 800fb10:	2302      	movs	r3, #2
 800fb12:	4313      	orrs	r3, r2
 800fb14:	6023      	str	r3, [r4, #0]
 800fb16:	7833      	ldrb	r3, [r6, #0]
 800fb18:	2b2e      	cmp	r3, #46	; 0x2e
 800fb1a:	d10a      	bne.n	800fb32 <_vfiprintf_r+0x15a>
 800fb1c:	7873      	ldrb	r3, [r6, #1]
 800fb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800fb20:	d135      	bne.n	800fb8e <_vfiprintf_r+0x1b6>
 800fb22:	9b07      	ldr	r3, [sp, #28]
 800fb24:	3602      	adds	r6, #2
 800fb26:	1d1a      	adds	r2, r3, #4
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	9207      	str	r2, [sp, #28]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	db2b      	blt.n	800fb88 <_vfiprintf_r+0x1b0>
 800fb30:	9309      	str	r3, [sp, #36]	; 0x24
 800fb32:	4d33      	ldr	r5, [pc, #204]	; (800fc00 <_vfiprintf_r+0x228>)
 800fb34:	2203      	movs	r2, #3
 800fb36:	0028      	movs	r0, r5
 800fb38:	7831      	ldrb	r1, [r6, #0]
 800fb3a:	f7fd fd2c 	bl	800d596 <memchr>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d006      	beq.n	800fb50 <_vfiprintf_r+0x178>
 800fb42:	2340      	movs	r3, #64	; 0x40
 800fb44:	1b40      	subs	r0, r0, r5
 800fb46:	4083      	lsls	r3, r0
 800fb48:	6822      	ldr	r2, [r4, #0]
 800fb4a:	3601      	adds	r6, #1
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	6023      	str	r3, [r4, #0]
 800fb50:	7831      	ldrb	r1, [r6, #0]
 800fb52:	2206      	movs	r2, #6
 800fb54:	482b      	ldr	r0, [pc, #172]	; (800fc04 <_vfiprintf_r+0x22c>)
 800fb56:	1c75      	adds	r5, r6, #1
 800fb58:	7621      	strb	r1, [r4, #24]
 800fb5a:	f7fd fd1c 	bl	800d596 <memchr>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d043      	beq.n	800fbea <_vfiprintf_r+0x212>
 800fb62:	4b29      	ldr	r3, [pc, #164]	; (800fc08 <_vfiprintf_r+0x230>)
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d125      	bne.n	800fbb4 <_vfiprintf_r+0x1dc>
 800fb68:	2207      	movs	r2, #7
 800fb6a:	9b07      	ldr	r3, [sp, #28]
 800fb6c:	3307      	adds	r3, #7
 800fb6e:	4393      	bics	r3, r2
 800fb70:	3308      	adds	r3, #8
 800fb72:	9307      	str	r3, [sp, #28]
 800fb74:	6963      	ldr	r3, [r4, #20]
 800fb76:	9a04      	ldr	r2, [sp, #16]
 800fb78:	189b      	adds	r3, r3, r2
 800fb7a:	6163      	str	r3, [r4, #20]
 800fb7c:	e764      	b.n	800fa48 <_vfiprintf_r+0x70>
 800fb7e:	4343      	muls	r3, r0
 800fb80:	002e      	movs	r6, r5
 800fb82:	2101      	movs	r1, #1
 800fb84:	189b      	adds	r3, r3, r2
 800fb86:	e7a6      	b.n	800fad6 <_vfiprintf_r+0xfe>
 800fb88:	2301      	movs	r3, #1
 800fb8a:	425b      	negs	r3, r3
 800fb8c:	e7d0      	b.n	800fb30 <_vfiprintf_r+0x158>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	200a      	movs	r0, #10
 800fb92:	001a      	movs	r2, r3
 800fb94:	3601      	adds	r6, #1
 800fb96:	6063      	str	r3, [r4, #4]
 800fb98:	7831      	ldrb	r1, [r6, #0]
 800fb9a:	1c75      	adds	r5, r6, #1
 800fb9c:	3930      	subs	r1, #48	; 0x30
 800fb9e:	2909      	cmp	r1, #9
 800fba0:	d903      	bls.n	800fbaa <_vfiprintf_r+0x1d2>
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d0c5      	beq.n	800fb32 <_vfiprintf_r+0x15a>
 800fba6:	9209      	str	r2, [sp, #36]	; 0x24
 800fba8:	e7c3      	b.n	800fb32 <_vfiprintf_r+0x15a>
 800fbaa:	4342      	muls	r2, r0
 800fbac:	002e      	movs	r6, r5
 800fbae:	2301      	movs	r3, #1
 800fbb0:	1852      	adds	r2, r2, r1
 800fbb2:	e7f1      	b.n	800fb98 <_vfiprintf_r+0x1c0>
 800fbb4:	aa07      	add	r2, sp, #28
 800fbb6:	9200      	str	r2, [sp, #0]
 800fbb8:	0021      	movs	r1, r4
 800fbba:	003a      	movs	r2, r7
 800fbbc:	4b13      	ldr	r3, [pc, #76]	; (800fc0c <_vfiprintf_r+0x234>)
 800fbbe:	9803      	ldr	r0, [sp, #12]
 800fbc0:	f7fc fbea 	bl	800c398 <_printf_float>
 800fbc4:	9004      	str	r0, [sp, #16]
 800fbc6:	9b04      	ldr	r3, [sp, #16]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	d1d3      	bne.n	800fb74 <_vfiprintf_r+0x19c>
 800fbcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbce:	07db      	lsls	r3, r3, #31
 800fbd0:	d405      	bmi.n	800fbde <_vfiprintf_r+0x206>
 800fbd2:	89bb      	ldrh	r3, [r7, #12]
 800fbd4:	059b      	lsls	r3, r3, #22
 800fbd6:	d402      	bmi.n	800fbde <_vfiprintf_r+0x206>
 800fbd8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fbda:	f7fd fcd3 	bl	800d584 <__retarget_lock_release_recursive>
 800fbde:	89bb      	ldrh	r3, [r7, #12]
 800fbe0:	065b      	lsls	r3, r3, #25
 800fbe2:	d500      	bpl.n	800fbe6 <_vfiprintf_r+0x20e>
 800fbe4:	e71d      	b.n	800fa22 <_vfiprintf_r+0x4a>
 800fbe6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fbe8:	e71d      	b.n	800fa26 <_vfiprintf_r+0x4e>
 800fbea:	aa07      	add	r2, sp, #28
 800fbec:	9200      	str	r2, [sp, #0]
 800fbee:	0021      	movs	r1, r4
 800fbf0:	003a      	movs	r2, r7
 800fbf2:	4b06      	ldr	r3, [pc, #24]	; (800fc0c <_vfiprintf_r+0x234>)
 800fbf4:	9803      	ldr	r0, [sp, #12]
 800fbf6:	f7fc fe95 	bl	800c924 <_printf_i>
 800fbfa:	e7e3      	b.n	800fbc4 <_vfiprintf_r+0x1ec>
 800fbfc:	08012334 	.word	0x08012334
 800fc00:	0801233a 	.word	0x0801233a
 800fc04:	0801233e 	.word	0x0801233e
 800fc08:	0800c399 	.word	0x0800c399
 800fc0c:	0800f9b3 	.word	0x0800f9b3

0800fc10 <__swbuf_r>:
 800fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc12:	0006      	movs	r6, r0
 800fc14:	000d      	movs	r5, r1
 800fc16:	0014      	movs	r4, r2
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	d004      	beq.n	800fc26 <__swbuf_r+0x16>
 800fc1c:	6a03      	ldr	r3, [r0, #32]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d101      	bne.n	800fc26 <__swbuf_r+0x16>
 800fc22:	f7fd fa27 	bl	800d074 <__sinit>
 800fc26:	69a3      	ldr	r3, [r4, #24]
 800fc28:	60a3      	str	r3, [r4, #8]
 800fc2a:	89a3      	ldrh	r3, [r4, #12]
 800fc2c:	071b      	lsls	r3, r3, #28
 800fc2e:	d528      	bpl.n	800fc82 <__swbuf_r+0x72>
 800fc30:	6923      	ldr	r3, [r4, #16]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d025      	beq.n	800fc82 <__swbuf_r+0x72>
 800fc36:	6923      	ldr	r3, [r4, #16]
 800fc38:	6820      	ldr	r0, [r4, #0]
 800fc3a:	b2ef      	uxtb	r7, r5
 800fc3c:	1ac0      	subs	r0, r0, r3
 800fc3e:	6963      	ldr	r3, [r4, #20]
 800fc40:	b2ed      	uxtb	r5, r5
 800fc42:	4283      	cmp	r3, r0
 800fc44:	dc05      	bgt.n	800fc52 <__swbuf_r+0x42>
 800fc46:	0021      	movs	r1, r4
 800fc48:	0030      	movs	r0, r6
 800fc4a:	f7ff fdeb 	bl	800f824 <_fflush_r>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	d11d      	bne.n	800fc8e <__swbuf_r+0x7e>
 800fc52:	68a3      	ldr	r3, [r4, #8]
 800fc54:	3001      	adds	r0, #1
 800fc56:	3b01      	subs	r3, #1
 800fc58:	60a3      	str	r3, [r4, #8]
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	1c5a      	adds	r2, r3, #1
 800fc5e:	6022      	str	r2, [r4, #0]
 800fc60:	701f      	strb	r7, [r3, #0]
 800fc62:	6963      	ldr	r3, [r4, #20]
 800fc64:	4283      	cmp	r3, r0
 800fc66:	d004      	beq.n	800fc72 <__swbuf_r+0x62>
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	07db      	lsls	r3, r3, #31
 800fc6c:	d507      	bpl.n	800fc7e <__swbuf_r+0x6e>
 800fc6e:	2d0a      	cmp	r5, #10
 800fc70:	d105      	bne.n	800fc7e <__swbuf_r+0x6e>
 800fc72:	0021      	movs	r1, r4
 800fc74:	0030      	movs	r0, r6
 800fc76:	f7ff fdd5 	bl	800f824 <_fflush_r>
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	d107      	bne.n	800fc8e <__swbuf_r+0x7e>
 800fc7e:	0028      	movs	r0, r5
 800fc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc82:	0021      	movs	r1, r4
 800fc84:	0030      	movs	r0, r6
 800fc86:	f000 f805 	bl	800fc94 <__swsetup_r>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d0d3      	beq.n	800fc36 <__swbuf_r+0x26>
 800fc8e:	2501      	movs	r5, #1
 800fc90:	426d      	negs	r5, r5
 800fc92:	e7f4      	b.n	800fc7e <__swbuf_r+0x6e>

0800fc94 <__swsetup_r>:
 800fc94:	4b30      	ldr	r3, [pc, #192]	; (800fd58 <__swsetup_r+0xc4>)
 800fc96:	b570      	push	{r4, r5, r6, lr}
 800fc98:	0005      	movs	r5, r0
 800fc9a:	6818      	ldr	r0, [r3, #0]
 800fc9c:	000c      	movs	r4, r1
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d004      	beq.n	800fcac <__swsetup_r+0x18>
 800fca2:	6a03      	ldr	r3, [r0, #32]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d101      	bne.n	800fcac <__swsetup_r+0x18>
 800fca8:	f7fd f9e4 	bl	800d074 <__sinit>
 800fcac:	230c      	movs	r3, #12
 800fcae:	5ee2      	ldrsh	r2, [r4, r3]
 800fcb0:	b293      	uxth	r3, r2
 800fcb2:	0711      	lsls	r1, r2, #28
 800fcb4:	d423      	bmi.n	800fcfe <__swsetup_r+0x6a>
 800fcb6:	06d9      	lsls	r1, r3, #27
 800fcb8:	d407      	bmi.n	800fcca <__swsetup_r+0x36>
 800fcba:	2309      	movs	r3, #9
 800fcbc:	2001      	movs	r0, #1
 800fcbe:	602b      	str	r3, [r5, #0]
 800fcc0:	3337      	adds	r3, #55	; 0x37
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	81a3      	strh	r3, [r4, #12]
 800fcc6:	4240      	negs	r0, r0
 800fcc8:	bd70      	pop	{r4, r5, r6, pc}
 800fcca:	075b      	lsls	r3, r3, #29
 800fccc:	d513      	bpl.n	800fcf6 <__swsetup_r+0x62>
 800fcce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcd0:	2900      	cmp	r1, #0
 800fcd2:	d008      	beq.n	800fce6 <__swsetup_r+0x52>
 800fcd4:	0023      	movs	r3, r4
 800fcd6:	3344      	adds	r3, #68	; 0x44
 800fcd8:	4299      	cmp	r1, r3
 800fcda:	d002      	beq.n	800fce2 <__swsetup_r+0x4e>
 800fcdc:	0028      	movs	r0, r5
 800fcde:	f7fe fb35 	bl	800e34c <_free_r>
 800fce2:	2300      	movs	r3, #0
 800fce4:	6363      	str	r3, [r4, #52]	; 0x34
 800fce6:	2224      	movs	r2, #36	; 0x24
 800fce8:	89a3      	ldrh	r3, [r4, #12]
 800fcea:	4393      	bics	r3, r2
 800fcec:	81a3      	strh	r3, [r4, #12]
 800fcee:	2300      	movs	r3, #0
 800fcf0:	6063      	str	r3, [r4, #4]
 800fcf2:	6923      	ldr	r3, [r4, #16]
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	2308      	movs	r3, #8
 800fcf8:	89a2      	ldrh	r2, [r4, #12]
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	81a3      	strh	r3, [r4, #12]
 800fcfe:	6923      	ldr	r3, [r4, #16]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d10b      	bne.n	800fd1c <__swsetup_r+0x88>
 800fd04:	21a0      	movs	r1, #160	; 0xa0
 800fd06:	2280      	movs	r2, #128	; 0x80
 800fd08:	89a3      	ldrh	r3, [r4, #12]
 800fd0a:	0089      	lsls	r1, r1, #2
 800fd0c:	0092      	lsls	r2, r2, #2
 800fd0e:	400b      	ands	r3, r1
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d003      	beq.n	800fd1c <__swsetup_r+0x88>
 800fd14:	0021      	movs	r1, r4
 800fd16:	0028      	movs	r0, r5
 800fd18:	f000 f89a 	bl	800fe50 <__smakebuf_r>
 800fd1c:	220c      	movs	r2, #12
 800fd1e:	5ea3      	ldrsh	r3, [r4, r2]
 800fd20:	2001      	movs	r0, #1
 800fd22:	001a      	movs	r2, r3
 800fd24:	b299      	uxth	r1, r3
 800fd26:	4002      	ands	r2, r0
 800fd28:	4203      	tst	r3, r0
 800fd2a:	d00f      	beq.n	800fd4c <__swsetup_r+0xb8>
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	60a2      	str	r2, [r4, #8]
 800fd30:	6962      	ldr	r2, [r4, #20]
 800fd32:	4252      	negs	r2, r2
 800fd34:	61a2      	str	r2, [r4, #24]
 800fd36:	2000      	movs	r0, #0
 800fd38:	6922      	ldr	r2, [r4, #16]
 800fd3a:	4282      	cmp	r2, r0
 800fd3c:	d1c4      	bne.n	800fcc8 <__swsetup_r+0x34>
 800fd3e:	0609      	lsls	r1, r1, #24
 800fd40:	d5c2      	bpl.n	800fcc8 <__swsetup_r+0x34>
 800fd42:	2240      	movs	r2, #64	; 0x40
 800fd44:	4313      	orrs	r3, r2
 800fd46:	81a3      	strh	r3, [r4, #12]
 800fd48:	3801      	subs	r0, #1
 800fd4a:	e7bd      	b.n	800fcc8 <__swsetup_r+0x34>
 800fd4c:	0788      	lsls	r0, r1, #30
 800fd4e:	d400      	bmi.n	800fd52 <__swsetup_r+0xbe>
 800fd50:	6962      	ldr	r2, [r4, #20]
 800fd52:	60a2      	str	r2, [r4, #8]
 800fd54:	e7ef      	b.n	800fd36 <__swsetup_r+0xa2>
 800fd56:	46c0      	nop			; (mov r8, r8)
 800fd58:	200002b8 	.word	0x200002b8

0800fd5c <_raise_r>:
 800fd5c:	b570      	push	{r4, r5, r6, lr}
 800fd5e:	0004      	movs	r4, r0
 800fd60:	000d      	movs	r5, r1
 800fd62:	291f      	cmp	r1, #31
 800fd64:	d904      	bls.n	800fd70 <_raise_r+0x14>
 800fd66:	2316      	movs	r3, #22
 800fd68:	6003      	str	r3, [r0, #0]
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	4240      	negs	r0, r0
 800fd6e:	bd70      	pop	{r4, r5, r6, pc}
 800fd70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d004      	beq.n	800fd80 <_raise_r+0x24>
 800fd76:	008a      	lsls	r2, r1, #2
 800fd78:	189b      	adds	r3, r3, r2
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	2a00      	cmp	r2, #0
 800fd7e:	d108      	bne.n	800fd92 <_raise_r+0x36>
 800fd80:	0020      	movs	r0, r4
 800fd82:	f000 f831 	bl	800fde8 <_getpid_r>
 800fd86:	002a      	movs	r2, r5
 800fd88:	0001      	movs	r1, r0
 800fd8a:	0020      	movs	r0, r4
 800fd8c:	f000 f81a 	bl	800fdc4 <_kill_r>
 800fd90:	e7ed      	b.n	800fd6e <_raise_r+0x12>
 800fd92:	2000      	movs	r0, #0
 800fd94:	2a01      	cmp	r2, #1
 800fd96:	d0ea      	beq.n	800fd6e <_raise_r+0x12>
 800fd98:	1c51      	adds	r1, r2, #1
 800fd9a:	d103      	bne.n	800fda4 <_raise_r+0x48>
 800fd9c:	2316      	movs	r3, #22
 800fd9e:	3001      	adds	r0, #1
 800fda0:	6023      	str	r3, [r4, #0]
 800fda2:	e7e4      	b.n	800fd6e <_raise_r+0x12>
 800fda4:	2400      	movs	r4, #0
 800fda6:	0028      	movs	r0, r5
 800fda8:	601c      	str	r4, [r3, #0]
 800fdaa:	4790      	blx	r2
 800fdac:	0020      	movs	r0, r4
 800fdae:	e7de      	b.n	800fd6e <_raise_r+0x12>

0800fdb0 <raise>:
 800fdb0:	b510      	push	{r4, lr}
 800fdb2:	4b03      	ldr	r3, [pc, #12]	; (800fdc0 <raise+0x10>)
 800fdb4:	0001      	movs	r1, r0
 800fdb6:	6818      	ldr	r0, [r3, #0]
 800fdb8:	f7ff ffd0 	bl	800fd5c <_raise_r>
 800fdbc:	bd10      	pop	{r4, pc}
 800fdbe:	46c0      	nop			; (mov r8, r8)
 800fdc0:	200002b8 	.word	0x200002b8

0800fdc4 <_kill_r>:
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	b570      	push	{r4, r5, r6, lr}
 800fdc8:	4d06      	ldr	r5, [pc, #24]	; (800fde4 <_kill_r+0x20>)
 800fdca:	0004      	movs	r4, r0
 800fdcc:	0008      	movs	r0, r1
 800fdce:	0011      	movs	r1, r2
 800fdd0:	602b      	str	r3, [r5, #0]
 800fdd2:	f7f6 fd8d 	bl	80068f0 <_kill>
 800fdd6:	1c43      	adds	r3, r0, #1
 800fdd8:	d103      	bne.n	800fde2 <_kill_r+0x1e>
 800fdda:	682b      	ldr	r3, [r5, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d000      	beq.n	800fde2 <_kill_r+0x1e>
 800fde0:	6023      	str	r3, [r4, #0]
 800fde2:	bd70      	pop	{r4, r5, r6, pc}
 800fde4:	20005a7c 	.word	0x20005a7c

0800fde8 <_getpid_r>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	f7f6 fd7f 	bl	80068ec <_getpid>
 800fdee:	bd10      	pop	{r4, pc}

0800fdf0 <_malloc_usable_size_r>:
 800fdf0:	1f0b      	subs	r3, r1, #4
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	1f18      	subs	r0, r3, #4
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	da01      	bge.n	800fdfe <_malloc_usable_size_r+0xe>
 800fdfa:	580b      	ldr	r3, [r1, r0]
 800fdfc:	18c0      	adds	r0, r0, r3
 800fdfe:	4770      	bx	lr

0800fe00 <__swhatbuf_r>:
 800fe00:	b570      	push	{r4, r5, r6, lr}
 800fe02:	000e      	movs	r6, r1
 800fe04:	001d      	movs	r5, r3
 800fe06:	230e      	movs	r3, #14
 800fe08:	5ec9      	ldrsh	r1, [r1, r3]
 800fe0a:	0014      	movs	r4, r2
 800fe0c:	b096      	sub	sp, #88	; 0x58
 800fe0e:	2900      	cmp	r1, #0
 800fe10:	da0c      	bge.n	800fe2c <__swhatbuf_r+0x2c>
 800fe12:	89b2      	ldrh	r2, [r6, #12]
 800fe14:	2380      	movs	r3, #128	; 0x80
 800fe16:	0011      	movs	r1, r2
 800fe18:	4019      	ands	r1, r3
 800fe1a:	421a      	tst	r2, r3
 800fe1c:	d013      	beq.n	800fe46 <__swhatbuf_r+0x46>
 800fe1e:	2100      	movs	r1, #0
 800fe20:	3b40      	subs	r3, #64	; 0x40
 800fe22:	2000      	movs	r0, #0
 800fe24:	6029      	str	r1, [r5, #0]
 800fe26:	6023      	str	r3, [r4, #0]
 800fe28:	b016      	add	sp, #88	; 0x58
 800fe2a:	bd70      	pop	{r4, r5, r6, pc}
 800fe2c:	466a      	mov	r2, sp
 800fe2e:	f000 f84d 	bl	800fecc <_fstat_r>
 800fe32:	2800      	cmp	r0, #0
 800fe34:	dbed      	blt.n	800fe12 <__swhatbuf_r+0x12>
 800fe36:	23f0      	movs	r3, #240	; 0xf0
 800fe38:	9901      	ldr	r1, [sp, #4]
 800fe3a:	021b      	lsls	r3, r3, #8
 800fe3c:	4019      	ands	r1, r3
 800fe3e:	4b03      	ldr	r3, [pc, #12]	; (800fe4c <__swhatbuf_r+0x4c>)
 800fe40:	18c9      	adds	r1, r1, r3
 800fe42:	424b      	negs	r3, r1
 800fe44:	4159      	adcs	r1, r3
 800fe46:	2380      	movs	r3, #128	; 0x80
 800fe48:	00db      	lsls	r3, r3, #3
 800fe4a:	e7ea      	b.n	800fe22 <__swhatbuf_r+0x22>
 800fe4c:	ffffe000 	.word	0xffffe000

0800fe50 <__smakebuf_r>:
 800fe50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe52:	2602      	movs	r6, #2
 800fe54:	898b      	ldrh	r3, [r1, #12]
 800fe56:	0005      	movs	r5, r0
 800fe58:	000c      	movs	r4, r1
 800fe5a:	4233      	tst	r3, r6
 800fe5c:	d006      	beq.n	800fe6c <__smakebuf_r+0x1c>
 800fe5e:	0023      	movs	r3, r4
 800fe60:	3347      	adds	r3, #71	; 0x47
 800fe62:	6023      	str	r3, [r4, #0]
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	2301      	movs	r3, #1
 800fe68:	6163      	str	r3, [r4, #20]
 800fe6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800fe6c:	466a      	mov	r2, sp
 800fe6e:	ab01      	add	r3, sp, #4
 800fe70:	f7ff ffc6 	bl	800fe00 <__swhatbuf_r>
 800fe74:	9900      	ldr	r1, [sp, #0]
 800fe76:	0007      	movs	r7, r0
 800fe78:	0028      	movs	r0, r5
 800fe7a:	f7fb fa85 	bl	800b388 <_malloc_r>
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d108      	bne.n	800fe94 <__smakebuf_r+0x44>
 800fe82:	220c      	movs	r2, #12
 800fe84:	5ea3      	ldrsh	r3, [r4, r2]
 800fe86:	059a      	lsls	r2, r3, #22
 800fe88:	d4ef      	bmi.n	800fe6a <__smakebuf_r+0x1a>
 800fe8a:	2203      	movs	r2, #3
 800fe8c:	4393      	bics	r3, r2
 800fe8e:	431e      	orrs	r6, r3
 800fe90:	81a6      	strh	r6, [r4, #12]
 800fe92:	e7e4      	b.n	800fe5e <__smakebuf_r+0xe>
 800fe94:	2380      	movs	r3, #128	; 0x80
 800fe96:	89a2      	ldrh	r2, [r4, #12]
 800fe98:	6020      	str	r0, [r4, #0]
 800fe9a:	4313      	orrs	r3, r2
 800fe9c:	81a3      	strh	r3, [r4, #12]
 800fe9e:	9b00      	ldr	r3, [sp, #0]
 800fea0:	6120      	str	r0, [r4, #16]
 800fea2:	6163      	str	r3, [r4, #20]
 800fea4:	9b01      	ldr	r3, [sp, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00c      	beq.n	800fec4 <__smakebuf_r+0x74>
 800feaa:	0028      	movs	r0, r5
 800feac:	230e      	movs	r3, #14
 800feae:	5ee1      	ldrsh	r1, [r4, r3]
 800feb0:	f000 f81e 	bl	800fef0 <_isatty_r>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d005      	beq.n	800fec4 <__smakebuf_r+0x74>
 800feb8:	2303      	movs	r3, #3
 800feba:	89a2      	ldrh	r2, [r4, #12]
 800febc:	439a      	bics	r2, r3
 800febe:	3b02      	subs	r3, #2
 800fec0:	4313      	orrs	r3, r2
 800fec2:	81a3      	strh	r3, [r4, #12]
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	433b      	orrs	r3, r7
 800fec8:	81a3      	strh	r3, [r4, #12]
 800feca:	e7ce      	b.n	800fe6a <__smakebuf_r+0x1a>

0800fecc <_fstat_r>:
 800fecc:	2300      	movs	r3, #0
 800fece:	b570      	push	{r4, r5, r6, lr}
 800fed0:	4d06      	ldr	r5, [pc, #24]	; (800feec <_fstat_r+0x20>)
 800fed2:	0004      	movs	r4, r0
 800fed4:	0008      	movs	r0, r1
 800fed6:	0011      	movs	r1, r2
 800fed8:	602b      	str	r3, [r5, #0]
 800feda:	f7f6 fd34 	bl	8006946 <_fstat>
 800fede:	1c43      	adds	r3, r0, #1
 800fee0:	d103      	bne.n	800feea <_fstat_r+0x1e>
 800fee2:	682b      	ldr	r3, [r5, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d000      	beq.n	800feea <_fstat_r+0x1e>
 800fee8:	6023      	str	r3, [r4, #0]
 800feea:	bd70      	pop	{r4, r5, r6, pc}
 800feec:	20005a7c 	.word	0x20005a7c

0800fef0 <_isatty_r>:
 800fef0:	2300      	movs	r3, #0
 800fef2:	b570      	push	{r4, r5, r6, lr}
 800fef4:	4d06      	ldr	r5, [pc, #24]	; (800ff10 <_isatty_r+0x20>)
 800fef6:	0004      	movs	r4, r0
 800fef8:	0008      	movs	r0, r1
 800fefa:	602b      	str	r3, [r5, #0]
 800fefc:	f7f6 fd28 	bl	8006950 <_isatty>
 800ff00:	1c43      	adds	r3, r0, #1
 800ff02:	d103      	bne.n	800ff0c <_isatty_r+0x1c>
 800ff04:	682b      	ldr	r3, [r5, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d000      	beq.n	800ff0c <_isatty_r+0x1c>
 800ff0a:	6023      	str	r3, [r4, #0]
 800ff0c:	bd70      	pop	{r4, r5, r6, pc}
 800ff0e:	46c0      	nop			; (mov r8, r8)
 800ff10:	20005a7c 	.word	0x20005a7c

0800ff14 <pow>:
 800ff14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff16:	0014      	movs	r4, r2
 800ff18:	001d      	movs	r5, r3
 800ff1a:	9000      	str	r0, [sp, #0]
 800ff1c:	9101      	str	r1, [sp, #4]
 800ff1e:	f000 f86f 	bl	8010000 <__ieee754_pow>
 800ff22:	0022      	movs	r2, r4
 800ff24:	0006      	movs	r6, r0
 800ff26:	000f      	movs	r7, r1
 800ff28:	002b      	movs	r3, r5
 800ff2a:	0020      	movs	r0, r4
 800ff2c:	0029      	movs	r1, r5
 800ff2e:	f7f3 f81f 	bl	8002f70 <__aeabi_dcmpun>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	d13f      	bne.n	800ffb6 <pow+0xa2>
 800ff36:	9800      	ldr	r0, [sp, #0]
 800ff38:	9901      	ldr	r1, [sp, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	f7f0 fa8f 	bl	8000460 <__aeabi_dcmpeq>
 800ff42:	2800      	cmp	r0, #0
 800ff44:	d019      	beq.n	800ff7a <pow+0x66>
 800ff46:	2200      	movs	r2, #0
 800ff48:	2300      	movs	r3, #0
 800ff4a:	0020      	movs	r0, r4
 800ff4c:	0029      	movs	r1, r5
 800ff4e:	f7f0 fa87 	bl	8000460 <__aeabi_dcmpeq>
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d146      	bne.n	800ffe4 <pow+0xd0>
 800ff56:	0020      	movs	r0, r4
 800ff58:	0029      	movs	r1, r5
 800ff5a:	f000 f849 	bl	800fff0 <finite>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d029      	beq.n	800ffb6 <pow+0xa2>
 800ff62:	2200      	movs	r2, #0
 800ff64:	2300      	movs	r3, #0
 800ff66:	0020      	movs	r0, r4
 800ff68:	0029      	movs	r1, r5
 800ff6a:	f7f0 fa7f 	bl	800046c <__aeabi_dcmplt>
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	d021      	beq.n	800ffb6 <pow+0xa2>
 800ff72:	f7fd fadb 	bl	800d52c <__errno>
 800ff76:	2322      	movs	r3, #34	; 0x22
 800ff78:	e01c      	b.n	800ffb4 <pow+0xa0>
 800ff7a:	0030      	movs	r0, r6
 800ff7c:	0039      	movs	r1, r7
 800ff7e:	f000 f837 	bl	800fff0 <finite>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	d11b      	bne.n	800ffbe <pow+0xaa>
 800ff86:	9800      	ldr	r0, [sp, #0]
 800ff88:	9901      	ldr	r1, [sp, #4]
 800ff8a:	f000 f831 	bl	800fff0 <finite>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d015      	beq.n	800ffbe <pow+0xaa>
 800ff92:	0020      	movs	r0, r4
 800ff94:	0029      	movs	r1, r5
 800ff96:	f000 f82b 	bl	800fff0 <finite>
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	d00f      	beq.n	800ffbe <pow+0xaa>
 800ff9e:	0032      	movs	r2, r6
 800ffa0:	003b      	movs	r3, r7
 800ffa2:	0030      	movs	r0, r6
 800ffa4:	0039      	movs	r1, r7
 800ffa6:	f7f2 ffe3 	bl	8002f70 <__aeabi_dcmpun>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	d0e1      	beq.n	800ff72 <pow+0x5e>
 800ffae:	f7fd fabd 	bl	800d52c <__errno>
 800ffb2:	2321      	movs	r3, #33	; 0x21
 800ffb4:	6003      	str	r3, [r0, #0]
 800ffb6:	0030      	movs	r0, r6
 800ffb8:	0039      	movs	r1, r7
 800ffba:	b003      	add	sp, #12
 800ffbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	0030      	movs	r0, r6
 800ffc4:	0039      	movs	r1, r7
 800ffc6:	f7f0 fa4b 	bl	8000460 <__aeabi_dcmpeq>
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	d0f3      	beq.n	800ffb6 <pow+0xa2>
 800ffce:	9800      	ldr	r0, [sp, #0]
 800ffd0:	9901      	ldr	r1, [sp, #4]
 800ffd2:	f000 f80d 	bl	800fff0 <finite>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d0ed      	beq.n	800ffb6 <pow+0xa2>
 800ffda:	0020      	movs	r0, r4
 800ffdc:	0029      	movs	r1, r5
 800ffde:	f000 f807 	bl	800fff0 <finite>
 800ffe2:	e7c4      	b.n	800ff6e <pow+0x5a>
 800ffe4:	2600      	movs	r6, #0
 800ffe6:	4f01      	ldr	r7, [pc, #4]	; (800ffec <pow+0xd8>)
 800ffe8:	e7e5      	b.n	800ffb6 <pow+0xa2>
 800ffea:	46c0      	nop			; (mov r8, r8)
 800ffec:	3ff00000 	.word	0x3ff00000

0800fff0 <finite>:
 800fff0:	4b02      	ldr	r3, [pc, #8]	; (800fffc <finite+0xc>)
 800fff2:	0048      	lsls	r0, r1, #1
 800fff4:	0840      	lsrs	r0, r0, #1
 800fff6:	18c0      	adds	r0, r0, r3
 800fff8:	0fc0      	lsrs	r0, r0, #31
 800fffa:	4770      	bx	lr
 800fffc:	80100000 	.word	0x80100000

08010000 <__ieee754_pow>:
 8010000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010002:	b095      	sub	sp, #84	; 0x54
 8010004:	9202      	str	r2, [sp, #8]
 8010006:	9303      	str	r3, [sp, #12]
 8010008:	9b03      	ldr	r3, [sp, #12]
 801000a:	9a03      	ldr	r2, [sp, #12]
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	9b02      	ldr	r3, [sp, #8]
 8010010:	0056      	lsls	r6, r2, #1
 8010012:	001a      	movs	r2, r3
 8010014:	0876      	lsrs	r6, r6, #1
 8010016:	0007      	movs	r7, r0
 8010018:	000d      	movs	r5, r1
 801001a:	4332      	orrs	r2, r6
 801001c:	d119      	bne.n	8010052 <__ieee754_pow+0x52>
 801001e:	2180      	movs	r1, #128	; 0x80
 8010020:	0309      	lsls	r1, r1, #12
 8010022:	4069      	eors	r1, r5
 8010024:	0002      	movs	r2, r0
 8010026:	000b      	movs	r3, r1
 8010028:	1892      	adds	r2, r2, r2
 801002a:	415b      	adcs	r3, r3
 801002c:	4989      	ldr	r1, [pc, #548]	; (8010254 <__ieee754_pow+0x254>)
 801002e:	428b      	cmp	r3, r1
 8010030:	d806      	bhi.n	8010040 <__ieee754_pow+0x40>
 8010032:	d001      	beq.n	8010038 <__ieee754_pow+0x38>
 8010034:	f000 fcb6 	bl	80109a4 <__ieee754_pow+0x9a4>
 8010038:	2a00      	cmp	r2, #0
 801003a:	d101      	bne.n	8010040 <__ieee754_pow+0x40>
 801003c:	f000 fcb2 	bl	80109a4 <__ieee754_pow+0x9a4>
 8010040:	9a02      	ldr	r2, [sp, #8]
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	0038      	movs	r0, r7
 8010046:	0029      	movs	r1, r5
 8010048:	f7f1 f9f4 	bl	8001434 <__aeabi_dadd>
 801004c:	9000      	str	r0, [sp, #0]
 801004e:	9101      	str	r1, [sp, #4]
 8010050:	e0ad      	b.n	80101ae <__ieee754_pow+0x1ae>
 8010052:	4a81      	ldr	r2, [pc, #516]	; (8010258 <__ieee754_pow+0x258>)
 8010054:	004c      	lsls	r4, r1, #1
 8010056:	9108      	str	r1, [sp, #32]
 8010058:	9000      	str	r0, [sp, #0]
 801005a:	0864      	lsrs	r4, r4, #1
 801005c:	4294      	cmp	r4, r2
 801005e:	dc08      	bgt.n	8010072 <__ieee754_pow+0x72>
 8010060:	d101      	bne.n	8010066 <__ieee754_pow+0x66>
 8010062:	2800      	cmp	r0, #0
 8010064:	d1ec      	bne.n	8010040 <__ieee754_pow+0x40>
 8010066:	4a7c      	ldr	r2, [pc, #496]	; (8010258 <__ieee754_pow+0x258>)
 8010068:	4296      	cmp	r6, r2
 801006a:	dc02      	bgt.n	8010072 <__ieee754_pow+0x72>
 801006c:	d10c      	bne.n	8010088 <__ieee754_pow+0x88>
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00a      	beq.n	8010088 <__ieee754_pow+0x88>
 8010072:	4b7a      	ldr	r3, [pc, #488]	; (801025c <__ieee754_pow+0x25c>)
 8010074:	18eb      	adds	r3, r5, r3
 8010076:	433b      	orrs	r3, r7
 8010078:	d1e2      	bne.n	8010040 <__ieee754_pow+0x40>
 801007a:	2180      	movs	r1, #128	; 0x80
 801007c:	9803      	ldr	r0, [sp, #12]
 801007e:	0309      	lsls	r1, r1, #12
 8010080:	4048      	eors	r0, r1
 8010082:	0003      	movs	r3, r0
 8010084:	9a02      	ldr	r2, [sp, #8]
 8010086:	e7cf      	b.n	8010028 <__ieee754_pow+0x28>
 8010088:	2200      	movs	r2, #0
 801008a:	9206      	str	r2, [sp, #24]
 801008c:	2d00      	cmp	r5, #0
 801008e:	da69      	bge.n	8010164 <__ieee754_pow+0x164>
 8010090:	4a73      	ldr	r2, [pc, #460]	; (8010260 <__ieee754_pow+0x260>)
 8010092:	4296      	cmp	r6, r2
 8010094:	dc64      	bgt.n	8010160 <__ieee754_pow+0x160>
 8010096:	4a73      	ldr	r2, [pc, #460]	; (8010264 <__ieee754_pow+0x264>)
 8010098:	4296      	cmp	r6, r2
 801009a:	dd11      	ble.n	80100c0 <__ieee754_pow+0xc0>
 801009c:	4972      	ldr	r1, [pc, #456]	; (8010268 <__ieee754_pow+0x268>)
 801009e:	1532      	asrs	r2, r6, #20
 80100a0:	1852      	adds	r2, r2, r1
 80100a2:	2a14      	cmp	r2, #20
 80100a4:	dd3c      	ble.n	8010120 <__ieee754_pow+0x120>
 80100a6:	2134      	movs	r1, #52	; 0x34
 80100a8:	1a89      	subs	r1, r1, r2
 80100aa:	9a02      	ldr	r2, [sp, #8]
 80100ac:	40ca      	lsrs	r2, r1
 80100ae:	0010      	movs	r0, r2
 80100b0:	4088      	lsls	r0, r1
 80100b2:	4298      	cmp	r0, r3
 80100b4:	d104      	bne.n	80100c0 <__ieee754_pow+0xc0>
 80100b6:	2101      	movs	r1, #1
 80100b8:	400a      	ands	r2, r1
 80100ba:	1849      	adds	r1, r1, r1
 80100bc:	1a8a      	subs	r2, r1, r2
 80100be:	9206      	str	r2, [sp, #24]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d03c      	beq.n	801013e <__ieee754_pow+0x13e>
 80100c4:	0038      	movs	r0, r7
 80100c6:	0029      	movs	r1, r5
 80100c8:	f000 fca4 	bl	8010a14 <fabs>
 80100cc:	9000      	str	r0, [sp, #0]
 80100ce:	9101      	str	r1, [sp, #4]
 80100d0:	2f00      	cmp	r7, #0
 80100d2:	d000      	beq.n	80100d6 <__ieee754_pow+0xd6>
 80100d4:	e094      	b.n	8010200 <__ieee754_pow+0x200>
 80100d6:	2c00      	cmp	r4, #0
 80100d8:	d005      	beq.n	80100e6 <__ieee754_pow+0xe6>
 80100da:	4a64      	ldr	r2, [pc, #400]	; (801026c <__ieee754_pow+0x26c>)
 80100dc:	00ab      	lsls	r3, r5, #2
 80100de:	089b      	lsrs	r3, r3, #2
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d000      	beq.n	80100e6 <__ieee754_pow+0xe6>
 80100e4:	e08c      	b.n	8010200 <__ieee754_pow+0x200>
 80100e6:	9b04      	ldr	r3, [sp, #16]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	da07      	bge.n	80100fc <__ieee754_pow+0xfc>
 80100ec:	9a00      	ldr	r2, [sp, #0]
 80100ee:	9b01      	ldr	r3, [sp, #4]
 80100f0:	2000      	movs	r0, #0
 80100f2:	495e      	ldr	r1, [pc, #376]	; (801026c <__ieee754_pow+0x26c>)
 80100f4:	f7f1 fcfe 	bl	8001af4 <__aeabi_ddiv>
 80100f8:	9000      	str	r0, [sp, #0]
 80100fa:	9101      	str	r1, [sp, #4]
 80100fc:	9b08      	ldr	r3, [sp, #32]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	da55      	bge.n	80101ae <__ieee754_pow+0x1ae>
 8010102:	4b56      	ldr	r3, [pc, #344]	; (801025c <__ieee754_pow+0x25c>)
 8010104:	18e4      	adds	r4, r4, r3
 8010106:	9b06      	ldr	r3, [sp, #24]
 8010108:	431c      	orrs	r4, r3
 801010a:	d000      	beq.n	801010e <__ieee754_pow+0x10e>
 801010c:	e06c      	b.n	80101e8 <__ieee754_pow+0x1e8>
 801010e:	9a00      	ldr	r2, [sp, #0]
 8010110:	9b01      	ldr	r3, [sp, #4]
 8010112:	0010      	movs	r0, r2
 8010114:	0019      	movs	r1, r3
 8010116:	f7f2 fba9 	bl	800286c <__aeabi_dsub>
 801011a:	0002      	movs	r2, r0
 801011c:	000b      	movs	r3, r1
 801011e:	e01c      	b.n	801015a <__ieee754_pow+0x15a>
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1cf      	bne.n	80100c4 <__ieee754_pow+0xc4>
 8010124:	3314      	adds	r3, #20
 8010126:	1a9a      	subs	r2, r3, r2
 8010128:	0033      	movs	r3, r6
 801012a:	4113      	asrs	r3, r2
 801012c:	0019      	movs	r1, r3
 801012e:	4091      	lsls	r1, r2
 8010130:	42b1      	cmp	r1, r6
 8010132:	d104      	bne.n	801013e <__ieee754_pow+0x13e>
 8010134:	2201      	movs	r2, #1
 8010136:	4013      	ands	r3, r2
 8010138:	1892      	adds	r2, r2, r2
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	9306      	str	r3, [sp, #24]
 801013e:	4b4b      	ldr	r3, [pc, #300]	; (801026c <__ieee754_pow+0x26c>)
 8010140:	429e      	cmp	r6, r3
 8010142:	d138      	bne.n	80101b6 <__ieee754_pow+0x1b6>
 8010144:	0038      	movs	r0, r7
 8010146:	0029      	movs	r1, r5
 8010148:	9b04      	ldr	r3, [sp, #16]
 801014a:	9000      	str	r0, [sp, #0]
 801014c:	9101      	str	r1, [sp, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	da2d      	bge.n	80101ae <__ieee754_pow+0x1ae>
 8010152:	003a      	movs	r2, r7
 8010154:	002b      	movs	r3, r5
 8010156:	2000      	movs	r0, #0
 8010158:	4944      	ldr	r1, [pc, #272]	; (801026c <__ieee754_pow+0x26c>)
 801015a:	f7f1 fccb 	bl	8001af4 <__aeabi_ddiv>
 801015e:	e775      	b.n	801004c <__ieee754_pow+0x4c>
 8010160:	2202      	movs	r2, #2
 8010162:	9206      	str	r2, [sp, #24]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1ad      	bne.n	80100c4 <__ieee754_pow+0xc4>
 8010168:	4b3b      	ldr	r3, [pc, #236]	; (8010258 <__ieee754_pow+0x258>)
 801016a:	429e      	cmp	r6, r3
 801016c:	d1e7      	bne.n	801013e <__ieee754_pow+0x13e>
 801016e:	4b3b      	ldr	r3, [pc, #236]	; (801025c <__ieee754_pow+0x25c>)
 8010170:	18e3      	adds	r3, r4, r3
 8010172:	433b      	orrs	r3, r7
 8010174:	d101      	bne.n	801017a <__ieee754_pow+0x17a>
 8010176:	f000 fc15 	bl	80109a4 <__ieee754_pow+0x9a4>
 801017a:	4b3a      	ldr	r3, [pc, #232]	; (8010264 <__ieee754_pow+0x264>)
 801017c:	429c      	cmp	r4, r3
 801017e:	dd09      	ble.n	8010194 <__ieee754_pow+0x194>
 8010180:	9b04      	ldr	r3, [sp, #16]
 8010182:	2b00      	cmp	r3, #0
 8010184:	da01      	bge.n	801018a <__ieee754_pow+0x18a>
 8010186:	f000 fc11 	bl	80109ac <__ieee754_pow+0x9ac>
 801018a:	9b02      	ldr	r3, [sp, #8]
 801018c:	9c03      	ldr	r4, [sp, #12]
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	9401      	str	r4, [sp, #4]
 8010192:	e00c      	b.n	80101ae <__ieee754_pow+0x1ae>
 8010194:	9b04      	ldr	r3, [sp, #16]
 8010196:	2b00      	cmp	r3, #0
 8010198:	db01      	blt.n	801019e <__ieee754_pow+0x19e>
 801019a:	f000 fc07 	bl	80109ac <__ieee754_pow+0x9ac>
 801019e:	2280      	movs	r2, #128	; 0x80
 80101a0:	0612      	lsls	r2, r2, #24
 80101a2:	4694      	mov	ip, r2
 80101a4:	9b02      	ldr	r3, [sp, #8]
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	4463      	add	r3, ip
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	9800      	ldr	r0, [sp, #0]
 80101b0:	9901      	ldr	r1, [sp, #4]
 80101b2:	b015      	add	sp, #84	; 0x54
 80101b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101b6:	2380      	movs	r3, #128	; 0x80
 80101b8:	9a04      	ldr	r2, [sp, #16]
 80101ba:	05db      	lsls	r3, r3, #23
 80101bc:	429a      	cmp	r2, r3
 80101be:	d106      	bne.n	80101ce <__ieee754_pow+0x1ce>
 80101c0:	003a      	movs	r2, r7
 80101c2:	002b      	movs	r3, r5
 80101c4:	0038      	movs	r0, r7
 80101c6:	0029      	movs	r1, r5
 80101c8:	f7f2 f88e 	bl	80022e8 <__aeabi_dmul>
 80101cc:	e73e      	b.n	801004c <__ieee754_pow+0x4c>
 80101ce:	4b28      	ldr	r3, [pc, #160]	; (8010270 <__ieee754_pow+0x270>)
 80101d0:	9a04      	ldr	r2, [sp, #16]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d000      	beq.n	80101d8 <__ieee754_pow+0x1d8>
 80101d6:	e775      	b.n	80100c4 <__ieee754_pow+0xc4>
 80101d8:	2d00      	cmp	r5, #0
 80101da:	da00      	bge.n	80101de <__ieee754_pow+0x1de>
 80101dc:	e772      	b.n	80100c4 <__ieee754_pow+0xc4>
 80101de:	0038      	movs	r0, r7
 80101e0:	0029      	movs	r1, r5
 80101e2:	f000 fcb7 	bl	8010b54 <__ieee754_sqrt>
 80101e6:	e731      	b.n	801004c <__ieee754_pow+0x4c>
 80101e8:	9b06      	ldr	r3, [sp, #24]
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d1df      	bne.n	80101ae <__ieee754_pow+0x1ae>
 80101ee:	9800      	ldr	r0, [sp, #0]
 80101f0:	2180      	movs	r1, #128	; 0x80
 80101f2:	0002      	movs	r2, r0
 80101f4:	9801      	ldr	r0, [sp, #4]
 80101f6:	0609      	lsls	r1, r1, #24
 80101f8:	1843      	adds	r3, r0, r1
 80101fa:	9200      	str	r2, [sp, #0]
 80101fc:	9301      	str	r3, [sp, #4]
 80101fe:	e7d6      	b.n	80101ae <__ieee754_pow+0x1ae>
 8010200:	0feb      	lsrs	r3, r5, #31
 8010202:	3b01      	subs	r3, #1
 8010204:	930e      	str	r3, [sp, #56]	; 0x38
 8010206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010208:	9b06      	ldr	r3, [sp, #24]
 801020a:	4313      	orrs	r3, r2
 801020c:	d104      	bne.n	8010218 <__ieee754_pow+0x218>
 801020e:	003a      	movs	r2, r7
 8010210:	002b      	movs	r3, r5
 8010212:	0038      	movs	r0, r7
 8010214:	0029      	movs	r1, r5
 8010216:	e77e      	b.n	8010116 <__ieee754_pow+0x116>
 8010218:	4b16      	ldr	r3, [pc, #88]	; (8010274 <__ieee754_pow+0x274>)
 801021a:	429e      	cmp	r6, r3
 801021c:	dc00      	bgt.n	8010220 <__ieee754_pow+0x220>
 801021e:	e0f1      	b.n	8010404 <__ieee754_pow+0x404>
 8010220:	4b15      	ldr	r3, [pc, #84]	; (8010278 <__ieee754_pow+0x278>)
 8010222:	429e      	cmp	r6, r3
 8010224:	dd09      	ble.n	801023a <__ieee754_pow+0x23a>
 8010226:	4b0f      	ldr	r3, [pc, #60]	; (8010264 <__ieee754_pow+0x264>)
 8010228:	429c      	cmp	r4, r3
 801022a:	dc0c      	bgt.n	8010246 <__ieee754_pow+0x246>
 801022c:	9b04      	ldr	r3, [sp, #16]
 801022e:	2b00      	cmp	r3, #0
 8010230:	da0c      	bge.n	801024c <__ieee754_pow+0x24c>
 8010232:	2000      	movs	r0, #0
 8010234:	f000 fc86 	bl	8010b44 <__math_oflow>
 8010238:	e708      	b.n	801004c <__ieee754_pow+0x4c>
 801023a:	4b10      	ldr	r3, [pc, #64]	; (801027c <__ieee754_pow+0x27c>)
 801023c:	429c      	cmp	r4, r3
 801023e:	ddf5      	ble.n	801022c <__ieee754_pow+0x22c>
 8010240:	4b0a      	ldr	r3, [pc, #40]	; (801026c <__ieee754_pow+0x26c>)
 8010242:	429c      	cmp	r4, r3
 8010244:	dd1c      	ble.n	8010280 <__ieee754_pow+0x280>
 8010246:	9b04      	ldr	r3, [sp, #16]
 8010248:	2b00      	cmp	r3, #0
 801024a:	dcf2      	bgt.n	8010232 <__ieee754_pow+0x232>
 801024c:	2000      	movs	r0, #0
 801024e:	f000 fc72 	bl	8010b36 <__math_uflow>
 8010252:	e6fb      	b.n	801004c <__ieee754_pow+0x4c>
 8010254:	fff00000 	.word	0xfff00000
 8010258:	7ff00000 	.word	0x7ff00000
 801025c:	c0100000 	.word	0xc0100000
 8010260:	433fffff 	.word	0x433fffff
 8010264:	3fefffff 	.word	0x3fefffff
 8010268:	fffffc01 	.word	0xfffffc01
 801026c:	3ff00000 	.word	0x3ff00000
 8010270:	3fe00000 	.word	0x3fe00000
 8010274:	41e00000 	.word	0x41e00000
 8010278:	43f00000 	.word	0x43f00000
 801027c:	3feffffe 	.word	0x3feffffe
 8010280:	2200      	movs	r2, #0
 8010282:	9800      	ldr	r0, [sp, #0]
 8010284:	9901      	ldr	r1, [sp, #4]
 8010286:	4b53      	ldr	r3, [pc, #332]	; (80103d4 <__ieee754_pow+0x3d4>)
 8010288:	f7f2 faf0 	bl	800286c <__aeabi_dsub>
 801028c:	22c0      	movs	r2, #192	; 0xc0
 801028e:	4b52      	ldr	r3, [pc, #328]	; (80103d8 <__ieee754_pow+0x3d8>)
 8010290:	05d2      	lsls	r2, r2, #23
 8010292:	0004      	movs	r4, r0
 8010294:	000d      	movs	r5, r1
 8010296:	f7f2 f827 	bl	80022e8 <__aeabi_dmul>
 801029a:	4a50      	ldr	r2, [pc, #320]	; (80103dc <__ieee754_pow+0x3dc>)
 801029c:	0006      	movs	r6, r0
 801029e:	000f      	movs	r7, r1
 80102a0:	0020      	movs	r0, r4
 80102a2:	0029      	movs	r1, r5
 80102a4:	4b4e      	ldr	r3, [pc, #312]	; (80103e0 <__ieee754_pow+0x3e0>)
 80102a6:	f7f2 f81f 	bl	80022e8 <__aeabi_dmul>
 80102aa:	2200      	movs	r2, #0
 80102ac:	9000      	str	r0, [sp, #0]
 80102ae:	9101      	str	r1, [sp, #4]
 80102b0:	4b4c      	ldr	r3, [pc, #304]	; (80103e4 <__ieee754_pow+0x3e4>)
 80102b2:	0020      	movs	r0, r4
 80102b4:	0029      	movs	r1, r5
 80102b6:	f7f2 f817 	bl	80022e8 <__aeabi_dmul>
 80102ba:	0002      	movs	r2, r0
 80102bc:	000b      	movs	r3, r1
 80102be:	484a      	ldr	r0, [pc, #296]	; (80103e8 <__ieee754_pow+0x3e8>)
 80102c0:	494a      	ldr	r1, [pc, #296]	; (80103ec <__ieee754_pow+0x3ec>)
 80102c2:	f7f2 fad3 	bl	800286c <__aeabi_dsub>
 80102c6:	0022      	movs	r2, r4
 80102c8:	002b      	movs	r3, r5
 80102ca:	f7f2 f80d 	bl	80022e8 <__aeabi_dmul>
 80102ce:	0002      	movs	r2, r0
 80102d0:	000b      	movs	r3, r1
 80102d2:	2000      	movs	r0, #0
 80102d4:	4946      	ldr	r1, [pc, #280]	; (80103f0 <__ieee754_pow+0x3f0>)
 80102d6:	f7f2 fac9 	bl	800286c <__aeabi_dsub>
 80102da:	0022      	movs	r2, r4
 80102dc:	002b      	movs	r3, r5
 80102de:	9004      	str	r0, [sp, #16]
 80102e0:	9105      	str	r1, [sp, #20]
 80102e2:	0020      	movs	r0, r4
 80102e4:	0029      	movs	r1, r5
 80102e6:	f7f1 ffff 	bl	80022e8 <__aeabi_dmul>
 80102ea:	0002      	movs	r2, r0
 80102ec:	000b      	movs	r3, r1
 80102ee:	9804      	ldr	r0, [sp, #16]
 80102f0:	9905      	ldr	r1, [sp, #20]
 80102f2:	f7f1 fff9 	bl	80022e8 <__aeabi_dmul>
 80102f6:	4a3f      	ldr	r2, [pc, #252]	; (80103f4 <__ieee754_pow+0x3f4>)
 80102f8:	4b37      	ldr	r3, [pc, #220]	; (80103d8 <__ieee754_pow+0x3d8>)
 80102fa:	f7f1 fff5 	bl	80022e8 <__aeabi_dmul>
 80102fe:	0002      	movs	r2, r0
 8010300:	000b      	movs	r3, r1
 8010302:	9800      	ldr	r0, [sp, #0]
 8010304:	9901      	ldr	r1, [sp, #4]
 8010306:	f7f2 fab1 	bl	800286c <__aeabi_dsub>
 801030a:	0002      	movs	r2, r0
 801030c:	000b      	movs	r3, r1
 801030e:	0004      	movs	r4, r0
 8010310:	000d      	movs	r5, r1
 8010312:	0030      	movs	r0, r6
 8010314:	0039      	movs	r1, r7
 8010316:	f7f1 f88d 	bl	8001434 <__aeabi_dadd>
 801031a:	2000      	movs	r0, #0
 801031c:	0032      	movs	r2, r6
 801031e:	003b      	movs	r3, r7
 8010320:	9004      	str	r0, [sp, #16]
 8010322:	9105      	str	r1, [sp, #20]
 8010324:	f7f2 faa2 	bl	800286c <__aeabi_dsub>
 8010328:	0002      	movs	r2, r0
 801032a:	000b      	movs	r3, r1
 801032c:	0020      	movs	r0, r4
 801032e:	0029      	movs	r1, r5
 8010330:	f7f2 fa9c 	bl	800286c <__aeabi_dsub>
 8010334:	9b06      	ldr	r3, [sp, #24]
 8010336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010338:	3b01      	subs	r3, #1
 801033a:	0006      	movs	r6, r0
 801033c:	000f      	movs	r7, r1
 801033e:	4313      	orrs	r3, r2
 8010340:	d000      	beq.n	8010344 <__ieee754_pow+0x344>
 8010342:	e1dc      	b.n	80106fe <__ieee754_pow+0x6fe>
 8010344:	2300      	movs	r3, #0
 8010346:	4c2c      	ldr	r4, [pc, #176]	; (80103f8 <__ieee754_pow+0x3f8>)
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	9401      	str	r4, [sp, #4]
 801034c:	9c02      	ldr	r4, [sp, #8]
 801034e:	9d03      	ldr	r5, [sp, #12]
 8010350:	9802      	ldr	r0, [sp, #8]
 8010352:	9903      	ldr	r1, [sp, #12]
 8010354:	2400      	movs	r4, #0
 8010356:	002b      	movs	r3, r5
 8010358:	0022      	movs	r2, r4
 801035a:	f7f2 fa87 	bl	800286c <__aeabi_dsub>
 801035e:	9a04      	ldr	r2, [sp, #16]
 8010360:	9b05      	ldr	r3, [sp, #20]
 8010362:	f7f1 ffc1 	bl	80022e8 <__aeabi_dmul>
 8010366:	9a02      	ldr	r2, [sp, #8]
 8010368:	9b03      	ldr	r3, [sp, #12]
 801036a:	9006      	str	r0, [sp, #24]
 801036c:	9107      	str	r1, [sp, #28]
 801036e:	0030      	movs	r0, r6
 8010370:	0039      	movs	r1, r7
 8010372:	f7f1 ffb9 	bl	80022e8 <__aeabi_dmul>
 8010376:	0002      	movs	r2, r0
 8010378:	000b      	movs	r3, r1
 801037a:	9806      	ldr	r0, [sp, #24]
 801037c:	9907      	ldr	r1, [sp, #28]
 801037e:	f7f1 f859 	bl	8001434 <__aeabi_dadd>
 8010382:	0022      	movs	r2, r4
 8010384:	002b      	movs	r3, r5
 8010386:	0006      	movs	r6, r0
 8010388:	000f      	movs	r7, r1
 801038a:	9804      	ldr	r0, [sp, #16]
 801038c:	9905      	ldr	r1, [sp, #20]
 801038e:	f7f1 ffab 	bl	80022e8 <__aeabi_dmul>
 8010392:	0003      	movs	r3, r0
 8010394:	000c      	movs	r4, r1
 8010396:	9004      	str	r0, [sp, #16]
 8010398:	9105      	str	r1, [sp, #20]
 801039a:	9306      	str	r3, [sp, #24]
 801039c:	9407      	str	r4, [sp, #28]
 801039e:	0002      	movs	r2, r0
 80103a0:	000b      	movs	r3, r1
 80103a2:	0030      	movs	r0, r6
 80103a4:	0039      	movs	r1, r7
 80103a6:	f7f1 f845 	bl	8001434 <__aeabi_dadd>
 80103aa:	4b14      	ldr	r3, [pc, #80]	; (80103fc <__ieee754_pow+0x3fc>)
 80103ac:	0005      	movs	r5, r0
 80103ae:	000c      	movs	r4, r1
 80103b0:	9108      	str	r1, [sp, #32]
 80103b2:	4299      	cmp	r1, r3
 80103b4:	dc00      	bgt.n	80103b8 <__ieee754_pow+0x3b8>
 80103b6:	e2d4      	b.n	8010962 <__ieee754_pow+0x962>
 80103b8:	4b11      	ldr	r3, [pc, #68]	; (8010400 <__ieee754_pow+0x400>)
 80103ba:	18cb      	adds	r3, r1, r3
 80103bc:	4303      	orrs	r3, r0
 80103be:	d100      	bne.n	80103c2 <__ieee754_pow+0x3c2>
 80103c0:	e1d6      	b.n	8010770 <__ieee754_pow+0x770>
 80103c2:	9800      	ldr	r0, [sp, #0]
 80103c4:	9901      	ldr	r1, [sp, #4]
 80103c6:	2300      	movs	r3, #0
 80103c8:	2200      	movs	r2, #0
 80103ca:	f7f0 f84f 	bl	800046c <__aeabi_dcmplt>
 80103ce:	1e43      	subs	r3, r0, #1
 80103d0:	4198      	sbcs	r0, r3
 80103d2:	e72f      	b.n	8010234 <__ieee754_pow+0x234>
 80103d4:	3ff00000 	.word	0x3ff00000
 80103d8:	3ff71547 	.word	0x3ff71547
 80103dc:	f85ddf44 	.word	0xf85ddf44
 80103e0:	3e54ae0b 	.word	0x3e54ae0b
 80103e4:	3fd00000 	.word	0x3fd00000
 80103e8:	55555555 	.word	0x55555555
 80103ec:	3fd55555 	.word	0x3fd55555
 80103f0:	3fe00000 	.word	0x3fe00000
 80103f4:	652b82fe 	.word	0x652b82fe
 80103f8:	bff00000 	.word	0xbff00000
 80103fc:	408fffff 	.word	0x408fffff
 8010400:	bf700000 	.word	0xbf700000
 8010404:	4bbf      	ldr	r3, [pc, #764]	; (8010704 <__ieee754_pow+0x704>)
 8010406:	2200      	movs	r2, #0
 8010408:	422b      	tst	r3, r5
 801040a:	d10a      	bne.n	8010422 <__ieee754_pow+0x422>
 801040c:	9800      	ldr	r0, [sp, #0]
 801040e:	9901      	ldr	r1, [sp, #4]
 8010410:	2200      	movs	r2, #0
 8010412:	4bbd      	ldr	r3, [pc, #756]	; (8010708 <__ieee754_pow+0x708>)
 8010414:	f7f1 ff68 	bl	80022e8 <__aeabi_dmul>
 8010418:	2235      	movs	r2, #53	; 0x35
 801041a:	9000      	str	r0, [sp, #0]
 801041c:	9101      	str	r1, [sp, #4]
 801041e:	9c01      	ldr	r4, [sp, #4]
 8010420:	4252      	negs	r2, r2
 8010422:	49ba      	ldr	r1, [pc, #744]	; (801070c <__ieee754_pow+0x70c>)
 8010424:	1523      	asrs	r3, r4, #20
 8010426:	185b      	adds	r3, r3, r1
 8010428:	189b      	adds	r3, r3, r2
 801042a:	0324      	lsls	r4, r4, #12
 801042c:	4db8      	ldr	r5, [pc, #736]	; (8010710 <__ieee754_pow+0x710>)
 801042e:	930d      	str	r3, [sp, #52]	; 0x34
 8010430:	4bb8      	ldr	r3, [pc, #736]	; (8010714 <__ieee754_pow+0x714>)
 8010432:	0b22      	lsrs	r2, r4, #12
 8010434:	4315      	orrs	r5, r2
 8010436:	2400      	movs	r4, #0
 8010438:	429a      	cmp	r2, r3
 801043a:	dd09      	ble.n	8010450 <__ieee754_pow+0x450>
 801043c:	4bb6      	ldr	r3, [pc, #728]	; (8010718 <__ieee754_pow+0x718>)
 801043e:	3401      	adds	r4, #1
 8010440:	429a      	cmp	r2, r3
 8010442:	dd05      	ble.n	8010450 <__ieee754_pow+0x450>
 8010444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010446:	191b      	adds	r3, r3, r4
 8010448:	2400      	movs	r4, #0
 801044a:	930d      	str	r3, [sp, #52]	; 0x34
 801044c:	4bb3      	ldr	r3, [pc, #716]	; (801071c <__ieee754_pow+0x71c>)
 801044e:	18ed      	adds	r5, r5, r3
 8010450:	4bb3      	ldr	r3, [pc, #716]	; (8010720 <__ieee754_pow+0x720>)
 8010452:	00e2      	lsls	r2, r4, #3
 8010454:	189b      	adds	r3, r3, r2
 8010456:	9800      	ldr	r0, [sp, #0]
 8010458:	9901      	ldr	r1, [sp, #4]
 801045a:	920f      	str	r2, [sp, #60]	; 0x3c
 801045c:	0029      	movs	r1, r5
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	0006      	movs	r6, r0
 8010464:	920a      	str	r2, [sp, #40]	; 0x28
 8010466:	930b      	str	r3, [sp, #44]	; 0x2c
 8010468:	f7f2 fa00 	bl	800286c <__aeabi_dsub>
 801046c:	0032      	movs	r2, r6
 801046e:	002b      	movs	r3, r5
 8010470:	9010      	str	r0, [sp, #64]	; 0x40
 8010472:	9111      	str	r1, [sp, #68]	; 0x44
 8010474:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010476:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010478:	f7f0 ffdc 	bl	8001434 <__aeabi_dadd>
 801047c:	0002      	movs	r2, r0
 801047e:	000b      	movs	r3, r1
 8010480:	2000      	movs	r0, #0
 8010482:	49a3      	ldr	r1, [pc, #652]	; (8010710 <__ieee754_pow+0x710>)
 8010484:	f7f1 fb36 	bl	8001af4 <__aeabi_ddiv>
 8010488:	0002      	movs	r2, r0
 801048a:	000b      	movs	r3, r1
 801048c:	9012      	str	r0, [sp, #72]	; 0x48
 801048e:	9113      	str	r1, [sp, #76]	; 0x4c
 8010490:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010492:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010494:	f7f1 ff28 	bl	80022e8 <__aeabi_dmul>
 8010498:	9008      	str	r0, [sp, #32]
 801049a:	9109      	str	r1, [sp, #36]	; 0x24
 801049c:	9a08      	ldr	r2, [sp, #32]
 801049e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104a0:	9204      	str	r2, [sp, #16]
 80104a2:	9305      	str	r3, [sp, #20]
 80104a4:	2300      	movs	r3, #0
 80104a6:	2180      	movs	r1, #128	; 0x80
 80104a8:	2080      	movs	r0, #128	; 0x80
 80104aa:	9304      	str	r3, [sp, #16]
 80104ac:	9a04      	ldr	r2, [sp, #16]
 80104ae:	9b05      	ldr	r3, [sp, #20]
 80104b0:	9200      	str	r2, [sp, #0]
 80104b2:	9301      	str	r3, [sp, #4]
 80104b4:	2200      	movs	r2, #0
 80104b6:	002f      	movs	r7, r5
 80104b8:	0589      	lsls	r1, r1, #22
 80104ba:	106d      	asrs	r5, r5, #1
 80104bc:	4329      	orrs	r1, r5
 80104be:	0300      	lsls	r0, r0, #12
 80104c0:	1809      	adds	r1, r1, r0
 80104c2:	04a0      	lsls	r0, r4, #18
 80104c4:	180b      	adds	r3, r1, r0
 80104c6:	9800      	ldr	r0, [sp, #0]
 80104c8:	9901      	ldr	r1, [sp, #4]
 80104ca:	0014      	movs	r4, r2
 80104cc:	001d      	movs	r5, r3
 80104ce:	f7f1 ff0b 	bl	80022e8 <__aeabi_dmul>
 80104d2:	0002      	movs	r2, r0
 80104d4:	000b      	movs	r3, r1
 80104d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80104d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80104da:	f7f2 f9c7 	bl	800286c <__aeabi_dsub>
 80104de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104e2:	9010      	str	r0, [sp, #64]	; 0x40
 80104e4:	9111      	str	r1, [sp, #68]	; 0x44
 80104e6:	0020      	movs	r0, r4
 80104e8:	0029      	movs	r1, r5
 80104ea:	f7f2 f9bf 	bl	800286c <__aeabi_dsub>
 80104ee:	0002      	movs	r2, r0
 80104f0:	000b      	movs	r3, r1
 80104f2:	0030      	movs	r0, r6
 80104f4:	0039      	movs	r1, r7
 80104f6:	f7f2 f9b9 	bl	800286c <__aeabi_dsub>
 80104fa:	9a00      	ldr	r2, [sp, #0]
 80104fc:	9b01      	ldr	r3, [sp, #4]
 80104fe:	f7f1 fef3 	bl	80022e8 <__aeabi_dmul>
 8010502:	0002      	movs	r2, r0
 8010504:	000b      	movs	r3, r1
 8010506:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010508:	9911      	ldr	r1, [sp, #68]	; 0x44
 801050a:	f7f2 f9af 	bl	800286c <__aeabi_dsub>
 801050e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010512:	f7f1 fee9 	bl	80022e8 <__aeabi_dmul>
 8010516:	9a08      	ldr	r2, [sp, #32]
 8010518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801051a:	900a      	str	r0, [sp, #40]	; 0x28
 801051c:	910b      	str	r1, [sp, #44]	; 0x2c
 801051e:	0010      	movs	r0, r2
 8010520:	0019      	movs	r1, r3
 8010522:	f7f1 fee1 	bl	80022e8 <__aeabi_dmul>
 8010526:	0006      	movs	r6, r0
 8010528:	000f      	movs	r7, r1
 801052a:	4a7e      	ldr	r2, [pc, #504]	; (8010724 <__ieee754_pow+0x724>)
 801052c:	4b7e      	ldr	r3, [pc, #504]	; (8010728 <__ieee754_pow+0x728>)
 801052e:	f7f1 fedb 	bl	80022e8 <__aeabi_dmul>
 8010532:	4a7e      	ldr	r2, [pc, #504]	; (801072c <__ieee754_pow+0x72c>)
 8010534:	4b7e      	ldr	r3, [pc, #504]	; (8010730 <__ieee754_pow+0x730>)
 8010536:	f7f0 ff7d 	bl	8001434 <__aeabi_dadd>
 801053a:	0032      	movs	r2, r6
 801053c:	003b      	movs	r3, r7
 801053e:	f7f1 fed3 	bl	80022e8 <__aeabi_dmul>
 8010542:	4a7c      	ldr	r2, [pc, #496]	; (8010734 <__ieee754_pow+0x734>)
 8010544:	4b7c      	ldr	r3, [pc, #496]	; (8010738 <__ieee754_pow+0x738>)
 8010546:	f7f0 ff75 	bl	8001434 <__aeabi_dadd>
 801054a:	0032      	movs	r2, r6
 801054c:	003b      	movs	r3, r7
 801054e:	f7f1 fecb 	bl	80022e8 <__aeabi_dmul>
 8010552:	4a7a      	ldr	r2, [pc, #488]	; (801073c <__ieee754_pow+0x73c>)
 8010554:	4b7a      	ldr	r3, [pc, #488]	; (8010740 <__ieee754_pow+0x740>)
 8010556:	f7f0 ff6d 	bl	8001434 <__aeabi_dadd>
 801055a:	0032      	movs	r2, r6
 801055c:	003b      	movs	r3, r7
 801055e:	f7f1 fec3 	bl	80022e8 <__aeabi_dmul>
 8010562:	4a78      	ldr	r2, [pc, #480]	; (8010744 <__ieee754_pow+0x744>)
 8010564:	4b78      	ldr	r3, [pc, #480]	; (8010748 <__ieee754_pow+0x748>)
 8010566:	f7f0 ff65 	bl	8001434 <__aeabi_dadd>
 801056a:	0032      	movs	r2, r6
 801056c:	003b      	movs	r3, r7
 801056e:	f7f1 febb 	bl	80022e8 <__aeabi_dmul>
 8010572:	4a76      	ldr	r2, [pc, #472]	; (801074c <__ieee754_pow+0x74c>)
 8010574:	4b76      	ldr	r3, [pc, #472]	; (8010750 <__ieee754_pow+0x750>)
 8010576:	f7f0 ff5d 	bl	8001434 <__aeabi_dadd>
 801057a:	0032      	movs	r2, r6
 801057c:	0004      	movs	r4, r0
 801057e:	000d      	movs	r5, r1
 8010580:	003b      	movs	r3, r7
 8010582:	0030      	movs	r0, r6
 8010584:	0039      	movs	r1, r7
 8010586:	f7f1 feaf 	bl	80022e8 <__aeabi_dmul>
 801058a:	0002      	movs	r2, r0
 801058c:	000b      	movs	r3, r1
 801058e:	0020      	movs	r0, r4
 8010590:	0029      	movs	r1, r5
 8010592:	f7f1 fea9 	bl	80022e8 <__aeabi_dmul>
 8010596:	9a00      	ldr	r2, [sp, #0]
 8010598:	9b01      	ldr	r3, [sp, #4]
 801059a:	0004      	movs	r4, r0
 801059c:	000d      	movs	r5, r1
 801059e:	9808      	ldr	r0, [sp, #32]
 80105a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105a2:	f7f0 ff47 	bl	8001434 <__aeabi_dadd>
 80105a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105aa:	f7f1 fe9d 	bl	80022e8 <__aeabi_dmul>
 80105ae:	0022      	movs	r2, r4
 80105b0:	002b      	movs	r3, r5
 80105b2:	f7f0 ff3f 	bl	8001434 <__aeabi_dadd>
 80105b6:	9a00      	ldr	r2, [sp, #0]
 80105b8:	9b01      	ldr	r3, [sp, #4]
 80105ba:	9010      	str	r0, [sp, #64]	; 0x40
 80105bc:	9111      	str	r1, [sp, #68]	; 0x44
 80105be:	0010      	movs	r0, r2
 80105c0:	0019      	movs	r1, r3
 80105c2:	f7f1 fe91 	bl	80022e8 <__aeabi_dmul>
 80105c6:	2200      	movs	r2, #0
 80105c8:	4b62      	ldr	r3, [pc, #392]	; (8010754 <__ieee754_pow+0x754>)
 80105ca:	0004      	movs	r4, r0
 80105cc:	000d      	movs	r5, r1
 80105ce:	f7f0 ff31 	bl	8001434 <__aeabi_dadd>
 80105d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80105d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105d6:	f7f0 ff2d 	bl	8001434 <__aeabi_dadd>
 80105da:	2000      	movs	r0, #0
 80105dc:	000f      	movs	r7, r1
 80105de:	0006      	movs	r6, r0
 80105e0:	0002      	movs	r2, r0
 80105e2:	000b      	movs	r3, r1
 80105e4:	9800      	ldr	r0, [sp, #0]
 80105e6:	9901      	ldr	r1, [sp, #4]
 80105e8:	f7f1 fe7e 	bl	80022e8 <__aeabi_dmul>
 80105ec:	2200      	movs	r2, #0
 80105ee:	9000      	str	r0, [sp, #0]
 80105f0:	9101      	str	r1, [sp, #4]
 80105f2:	4b58      	ldr	r3, [pc, #352]	; (8010754 <__ieee754_pow+0x754>)
 80105f4:	0030      	movs	r0, r6
 80105f6:	0039      	movs	r1, r7
 80105f8:	f7f2 f938 	bl	800286c <__aeabi_dsub>
 80105fc:	0022      	movs	r2, r4
 80105fe:	002b      	movs	r3, r5
 8010600:	f7f2 f934 	bl	800286c <__aeabi_dsub>
 8010604:	0002      	movs	r2, r0
 8010606:	000b      	movs	r3, r1
 8010608:	9810      	ldr	r0, [sp, #64]	; 0x40
 801060a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801060c:	f7f2 f92e 	bl	800286c <__aeabi_dsub>
 8010610:	9a08      	ldr	r2, [sp, #32]
 8010612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010614:	f7f1 fe68 	bl	80022e8 <__aeabi_dmul>
 8010618:	0032      	movs	r2, r6
 801061a:	0004      	movs	r4, r0
 801061c:	000d      	movs	r5, r1
 801061e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010622:	003b      	movs	r3, r7
 8010624:	f7f1 fe60 	bl	80022e8 <__aeabi_dmul>
 8010628:	0002      	movs	r2, r0
 801062a:	000b      	movs	r3, r1
 801062c:	0020      	movs	r0, r4
 801062e:	0029      	movs	r1, r5
 8010630:	f7f0 ff00 	bl	8001434 <__aeabi_dadd>
 8010634:	0004      	movs	r4, r0
 8010636:	000d      	movs	r5, r1
 8010638:	0002      	movs	r2, r0
 801063a:	000b      	movs	r3, r1
 801063c:	9800      	ldr	r0, [sp, #0]
 801063e:	9901      	ldr	r1, [sp, #4]
 8010640:	f7f0 fef8 	bl	8001434 <__aeabi_dadd>
 8010644:	22e0      	movs	r2, #224	; 0xe0
 8010646:	2000      	movs	r0, #0
 8010648:	4b43      	ldr	r3, [pc, #268]	; (8010758 <__ieee754_pow+0x758>)
 801064a:	0612      	lsls	r2, r2, #24
 801064c:	0006      	movs	r6, r0
 801064e:	000f      	movs	r7, r1
 8010650:	f7f1 fe4a 	bl	80022e8 <__aeabi_dmul>
 8010654:	9008      	str	r0, [sp, #32]
 8010656:	9109      	str	r1, [sp, #36]	; 0x24
 8010658:	9a00      	ldr	r2, [sp, #0]
 801065a:	9b01      	ldr	r3, [sp, #4]
 801065c:	0030      	movs	r0, r6
 801065e:	0039      	movs	r1, r7
 8010660:	f7f2 f904 	bl	800286c <__aeabi_dsub>
 8010664:	0002      	movs	r2, r0
 8010666:	000b      	movs	r3, r1
 8010668:	0020      	movs	r0, r4
 801066a:	0029      	movs	r1, r5
 801066c:	f7f2 f8fe 	bl	800286c <__aeabi_dsub>
 8010670:	4a3a      	ldr	r2, [pc, #232]	; (801075c <__ieee754_pow+0x75c>)
 8010672:	4b39      	ldr	r3, [pc, #228]	; (8010758 <__ieee754_pow+0x758>)
 8010674:	f7f1 fe38 	bl	80022e8 <__aeabi_dmul>
 8010678:	4a39      	ldr	r2, [pc, #228]	; (8010760 <__ieee754_pow+0x760>)
 801067a:	0004      	movs	r4, r0
 801067c:	000d      	movs	r5, r1
 801067e:	0030      	movs	r0, r6
 8010680:	0039      	movs	r1, r7
 8010682:	4b38      	ldr	r3, [pc, #224]	; (8010764 <__ieee754_pow+0x764>)
 8010684:	f7f1 fe30 	bl	80022e8 <__aeabi_dmul>
 8010688:	0002      	movs	r2, r0
 801068a:	000b      	movs	r3, r1
 801068c:	0020      	movs	r0, r4
 801068e:	0029      	movs	r1, r5
 8010690:	f7f0 fed0 	bl	8001434 <__aeabi_dadd>
 8010694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010696:	4b34      	ldr	r3, [pc, #208]	; (8010768 <__ieee754_pow+0x768>)
 8010698:	189b      	adds	r3, r3, r2
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	f7f0 fec9 	bl	8001434 <__aeabi_dadd>
 80106a2:	9000      	str	r0, [sp, #0]
 80106a4:	9101      	str	r1, [sp, #4]
 80106a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80106a8:	f7f2 fcb6 	bl	8003018 <__aeabi_i2d>
 80106ac:	0004      	movs	r4, r0
 80106ae:	000d      	movs	r5, r1
 80106b0:	9808      	ldr	r0, [sp, #32]
 80106b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80106b6:	4b2d      	ldr	r3, [pc, #180]	; (801076c <__ieee754_pow+0x76c>)
 80106b8:	189b      	adds	r3, r3, r2
 80106ba:	681e      	ldr	r6, [r3, #0]
 80106bc:	685f      	ldr	r7, [r3, #4]
 80106be:	9a00      	ldr	r2, [sp, #0]
 80106c0:	9b01      	ldr	r3, [sp, #4]
 80106c2:	f7f0 feb7 	bl	8001434 <__aeabi_dadd>
 80106c6:	0032      	movs	r2, r6
 80106c8:	003b      	movs	r3, r7
 80106ca:	f7f0 feb3 	bl	8001434 <__aeabi_dadd>
 80106ce:	0022      	movs	r2, r4
 80106d0:	002b      	movs	r3, r5
 80106d2:	f7f0 feaf 	bl	8001434 <__aeabi_dadd>
 80106d6:	2000      	movs	r0, #0
 80106d8:	0022      	movs	r2, r4
 80106da:	002b      	movs	r3, r5
 80106dc:	9004      	str	r0, [sp, #16]
 80106de:	9105      	str	r1, [sp, #20]
 80106e0:	f7f2 f8c4 	bl	800286c <__aeabi_dsub>
 80106e4:	0032      	movs	r2, r6
 80106e6:	003b      	movs	r3, r7
 80106e8:	f7f2 f8c0 	bl	800286c <__aeabi_dsub>
 80106ec:	9a08      	ldr	r2, [sp, #32]
 80106ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f0:	f7f2 f8bc 	bl	800286c <__aeabi_dsub>
 80106f4:	0002      	movs	r2, r0
 80106f6:	000b      	movs	r3, r1
 80106f8:	9800      	ldr	r0, [sp, #0]
 80106fa:	9901      	ldr	r1, [sp, #4]
 80106fc:	e618      	b.n	8010330 <__ieee754_pow+0x330>
 80106fe:	2300      	movs	r3, #0
 8010700:	4c03      	ldr	r4, [pc, #12]	; (8010710 <__ieee754_pow+0x710>)
 8010702:	e621      	b.n	8010348 <__ieee754_pow+0x348>
 8010704:	7ff00000 	.word	0x7ff00000
 8010708:	43400000 	.word	0x43400000
 801070c:	fffffc01 	.word	0xfffffc01
 8010710:	3ff00000 	.word	0x3ff00000
 8010714:	0003988e 	.word	0x0003988e
 8010718:	000bb679 	.word	0x000bb679
 801071c:	fff00000 	.word	0xfff00000
 8010720:	08012348 	.word	0x08012348
 8010724:	4a454eef 	.word	0x4a454eef
 8010728:	3fca7e28 	.word	0x3fca7e28
 801072c:	93c9db65 	.word	0x93c9db65
 8010730:	3fcd864a 	.word	0x3fcd864a
 8010734:	a91d4101 	.word	0xa91d4101
 8010738:	3fd17460 	.word	0x3fd17460
 801073c:	518f264d 	.word	0x518f264d
 8010740:	3fd55555 	.word	0x3fd55555
 8010744:	db6fabff 	.word	0xdb6fabff
 8010748:	3fdb6db6 	.word	0x3fdb6db6
 801074c:	33333303 	.word	0x33333303
 8010750:	3fe33333 	.word	0x3fe33333
 8010754:	40080000 	.word	0x40080000
 8010758:	3feec709 	.word	0x3feec709
 801075c:	dc3a03fd 	.word	0xdc3a03fd
 8010760:	145b01f5 	.word	0x145b01f5
 8010764:	be3e2fe0 	.word	0xbe3e2fe0
 8010768:	08012368 	.word	0x08012368
 801076c:	08012358 	.word	0x08012358
 8010770:	4a90      	ldr	r2, [pc, #576]	; (80109b4 <__ieee754_pow+0x9b4>)
 8010772:	4b91      	ldr	r3, [pc, #580]	; (80109b8 <__ieee754_pow+0x9b8>)
 8010774:	0030      	movs	r0, r6
 8010776:	0039      	movs	r1, r7
 8010778:	f7f0 fe5c 	bl	8001434 <__aeabi_dadd>
 801077c:	9a04      	ldr	r2, [sp, #16]
 801077e:	9b05      	ldr	r3, [sp, #20]
 8010780:	9002      	str	r0, [sp, #8]
 8010782:	9103      	str	r1, [sp, #12]
 8010784:	0028      	movs	r0, r5
 8010786:	0021      	movs	r1, r4
 8010788:	f7f2 f870 	bl	800286c <__aeabi_dsub>
 801078c:	0002      	movs	r2, r0
 801078e:	000b      	movs	r3, r1
 8010790:	9802      	ldr	r0, [sp, #8]
 8010792:	9903      	ldr	r1, [sp, #12]
 8010794:	f7ef fe7e 	bl	8000494 <__aeabi_dcmpgt>
 8010798:	2800      	cmp	r0, #0
 801079a:	d000      	beq.n	801079e <__ieee754_pow+0x79e>
 801079c:	e611      	b.n	80103c2 <__ieee754_pow+0x3c2>
 801079e:	2100      	movs	r1, #0
 80107a0:	4a86      	ldr	r2, [pc, #536]	; (80109bc <__ieee754_pow+0x9bc>)
 80107a2:	0063      	lsls	r3, r4, #1
 80107a4:	085b      	lsrs	r3, r3, #1
 80107a6:	9102      	str	r1, [sp, #8]
 80107a8:	4293      	cmp	r3, r2
 80107aa:	dd25      	ble.n	80107f8 <__ieee754_pow+0x7f8>
 80107ac:	4a84      	ldr	r2, [pc, #528]	; (80109c0 <__ieee754_pow+0x9c0>)
 80107ae:	151b      	asrs	r3, r3, #20
 80107b0:	189b      	adds	r3, r3, r2
 80107b2:	2280      	movs	r2, #128	; 0x80
 80107b4:	0352      	lsls	r2, r2, #13
 80107b6:	0011      	movs	r1, r2
 80107b8:	4119      	asrs	r1, r3
 80107ba:	190b      	adds	r3, r1, r4
 80107bc:	005c      	lsls	r4, r3, #1
 80107be:	4981      	ldr	r1, [pc, #516]	; (80109c4 <__ieee754_pow+0x9c4>)
 80107c0:	4d81      	ldr	r5, [pc, #516]	; (80109c8 <__ieee754_pow+0x9c8>)
 80107c2:	0d64      	lsrs	r4, r4, #21
 80107c4:	1864      	adds	r4, r4, r1
 80107c6:	4125      	asrs	r5, r4
 80107c8:	401d      	ands	r5, r3
 80107ca:	031b      	lsls	r3, r3, #12
 80107cc:	0b1b      	lsrs	r3, r3, #12
 80107ce:	4313      	orrs	r3, r2
 80107d0:	2214      	movs	r2, #20
 80107d2:	1b12      	subs	r2, r2, r4
 80107d4:	4113      	asrs	r3, r2
 80107d6:	9302      	str	r3, [sp, #8]
 80107d8:	9b08      	ldr	r3, [sp, #32]
 80107da:	2000      	movs	r0, #0
 80107dc:	0029      	movs	r1, r5
 80107de:	2b00      	cmp	r3, #0
 80107e0:	da02      	bge.n	80107e8 <__ieee754_pow+0x7e8>
 80107e2:	9b02      	ldr	r3, [sp, #8]
 80107e4:	425b      	negs	r3, r3
 80107e6:	9302      	str	r3, [sp, #8]
 80107e8:	0002      	movs	r2, r0
 80107ea:	000b      	movs	r3, r1
 80107ec:	9804      	ldr	r0, [sp, #16]
 80107ee:	9905      	ldr	r1, [sp, #20]
 80107f0:	f7f2 f83c 	bl	800286c <__aeabi_dsub>
 80107f4:	9006      	str	r0, [sp, #24]
 80107f6:	9107      	str	r1, [sp, #28]
 80107f8:	9806      	ldr	r0, [sp, #24]
 80107fa:	9907      	ldr	r1, [sp, #28]
 80107fc:	0032      	movs	r2, r6
 80107fe:	003b      	movs	r3, r7
 8010800:	f7f0 fe18 	bl	8001434 <__aeabi_dadd>
 8010804:	2000      	movs	r0, #0
 8010806:	2200      	movs	r2, #0
 8010808:	4b70      	ldr	r3, [pc, #448]	; (80109cc <__ieee754_pow+0x9cc>)
 801080a:	9004      	str	r0, [sp, #16]
 801080c:	9105      	str	r1, [sp, #20]
 801080e:	f7f1 fd6b 	bl	80022e8 <__aeabi_dmul>
 8010812:	9a06      	ldr	r2, [sp, #24]
 8010814:	9b07      	ldr	r3, [sp, #28]
 8010816:	9008      	str	r0, [sp, #32]
 8010818:	9109      	str	r1, [sp, #36]	; 0x24
 801081a:	9804      	ldr	r0, [sp, #16]
 801081c:	9905      	ldr	r1, [sp, #20]
 801081e:	f7f2 f825 	bl	800286c <__aeabi_dsub>
 8010822:	0002      	movs	r2, r0
 8010824:	000b      	movs	r3, r1
 8010826:	0030      	movs	r0, r6
 8010828:	0039      	movs	r1, r7
 801082a:	f7f2 f81f 	bl	800286c <__aeabi_dsub>
 801082e:	4a68      	ldr	r2, [pc, #416]	; (80109d0 <__ieee754_pow+0x9d0>)
 8010830:	4b68      	ldr	r3, [pc, #416]	; (80109d4 <__ieee754_pow+0x9d4>)
 8010832:	f7f1 fd59 	bl	80022e8 <__aeabi_dmul>
 8010836:	4a68      	ldr	r2, [pc, #416]	; (80109d8 <__ieee754_pow+0x9d8>)
 8010838:	0004      	movs	r4, r0
 801083a:	000d      	movs	r5, r1
 801083c:	9804      	ldr	r0, [sp, #16]
 801083e:	9905      	ldr	r1, [sp, #20]
 8010840:	4b66      	ldr	r3, [pc, #408]	; (80109dc <__ieee754_pow+0x9dc>)
 8010842:	f7f1 fd51 	bl	80022e8 <__aeabi_dmul>
 8010846:	0002      	movs	r2, r0
 8010848:	000b      	movs	r3, r1
 801084a:	0020      	movs	r0, r4
 801084c:	0029      	movs	r1, r5
 801084e:	f7f0 fdf1 	bl	8001434 <__aeabi_dadd>
 8010852:	0004      	movs	r4, r0
 8010854:	000d      	movs	r5, r1
 8010856:	0002      	movs	r2, r0
 8010858:	000b      	movs	r3, r1
 801085a:	9808      	ldr	r0, [sp, #32]
 801085c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801085e:	f7f0 fde9 	bl	8001434 <__aeabi_dadd>
 8010862:	9a08      	ldr	r2, [sp, #32]
 8010864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010866:	0006      	movs	r6, r0
 8010868:	000f      	movs	r7, r1
 801086a:	f7f1 ffff 	bl	800286c <__aeabi_dsub>
 801086e:	0002      	movs	r2, r0
 8010870:	000b      	movs	r3, r1
 8010872:	0020      	movs	r0, r4
 8010874:	0029      	movs	r1, r5
 8010876:	f7f1 fff9 	bl	800286c <__aeabi_dsub>
 801087a:	0032      	movs	r2, r6
 801087c:	9004      	str	r0, [sp, #16]
 801087e:	9105      	str	r1, [sp, #20]
 8010880:	003b      	movs	r3, r7
 8010882:	0030      	movs	r0, r6
 8010884:	0039      	movs	r1, r7
 8010886:	f7f1 fd2f 	bl	80022e8 <__aeabi_dmul>
 801088a:	0004      	movs	r4, r0
 801088c:	000d      	movs	r5, r1
 801088e:	4a54      	ldr	r2, [pc, #336]	; (80109e0 <__ieee754_pow+0x9e0>)
 8010890:	4b54      	ldr	r3, [pc, #336]	; (80109e4 <__ieee754_pow+0x9e4>)
 8010892:	f7f1 fd29 	bl	80022e8 <__aeabi_dmul>
 8010896:	4a54      	ldr	r2, [pc, #336]	; (80109e8 <__ieee754_pow+0x9e8>)
 8010898:	4b54      	ldr	r3, [pc, #336]	; (80109ec <__ieee754_pow+0x9ec>)
 801089a:	f7f1 ffe7 	bl	800286c <__aeabi_dsub>
 801089e:	0022      	movs	r2, r4
 80108a0:	002b      	movs	r3, r5
 80108a2:	f7f1 fd21 	bl	80022e8 <__aeabi_dmul>
 80108a6:	4a52      	ldr	r2, [pc, #328]	; (80109f0 <__ieee754_pow+0x9f0>)
 80108a8:	4b52      	ldr	r3, [pc, #328]	; (80109f4 <__ieee754_pow+0x9f4>)
 80108aa:	f7f0 fdc3 	bl	8001434 <__aeabi_dadd>
 80108ae:	0022      	movs	r2, r4
 80108b0:	002b      	movs	r3, r5
 80108b2:	f7f1 fd19 	bl	80022e8 <__aeabi_dmul>
 80108b6:	4a50      	ldr	r2, [pc, #320]	; (80109f8 <__ieee754_pow+0x9f8>)
 80108b8:	4b50      	ldr	r3, [pc, #320]	; (80109fc <__ieee754_pow+0x9fc>)
 80108ba:	f7f1 ffd7 	bl	800286c <__aeabi_dsub>
 80108be:	0022      	movs	r2, r4
 80108c0:	002b      	movs	r3, r5
 80108c2:	f7f1 fd11 	bl	80022e8 <__aeabi_dmul>
 80108c6:	4a4e      	ldr	r2, [pc, #312]	; (8010a00 <__ieee754_pow+0xa00>)
 80108c8:	4b4e      	ldr	r3, [pc, #312]	; (8010a04 <__ieee754_pow+0xa04>)
 80108ca:	f7f0 fdb3 	bl	8001434 <__aeabi_dadd>
 80108ce:	0022      	movs	r2, r4
 80108d0:	002b      	movs	r3, r5
 80108d2:	f7f1 fd09 	bl	80022e8 <__aeabi_dmul>
 80108d6:	0002      	movs	r2, r0
 80108d8:	000b      	movs	r3, r1
 80108da:	0030      	movs	r0, r6
 80108dc:	0039      	movs	r1, r7
 80108de:	f7f1 ffc5 	bl	800286c <__aeabi_dsub>
 80108e2:	0004      	movs	r4, r0
 80108e4:	000d      	movs	r5, r1
 80108e6:	0002      	movs	r2, r0
 80108e8:	000b      	movs	r3, r1
 80108ea:	0030      	movs	r0, r6
 80108ec:	0039      	movs	r1, r7
 80108ee:	f7f1 fcfb 	bl	80022e8 <__aeabi_dmul>
 80108f2:	2380      	movs	r3, #128	; 0x80
 80108f4:	9006      	str	r0, [sp, #24]
 80108f6:	9107      	str	r1, [sp, #28]
 80108f8:	2200      	movs	r2, #0
 80108fa:	0020      	movs	r0, r4
 80108fc:	0029      	movs	r1, r5
 80108fe:	05db      	lsls	r3, r3, #23
 8010900:	f7f1 ffb4 	bl	800286c <__aeabi_dsub>
 8010904:	0002      	movs	r2, r0
 8010906:	000b      	movs	r3, r1
 8010908:	9806      	ldr	r0, [sp, #24]
 801090a:	9907      	ldr	r1, [sp, #28]
 801090c:	f7f1 f8f2 	bl	8001af4 <__aeabi_ddiv>
 8010910:	9a04      	ldr	r2, [sp, #16]
 8010912:	9b05      	ldr	r3, [sp, #20]
 8010914:	0004      	movs	r4, r0
 8010916:	000d      	movs	r5, r1
 8010918:	0030      	movs	r0, r6
 801091a:	0039      	movs	r1, r7
 801091c:	f7f1 fce4 	bl	80022e8 <__aeabi_dmul>
 8010920:	9a04      	ldr	r2, [sp, #16]
 8010922:	9b05      	ldr	r3, [sp, #20]
 8010924:	f7f0 fd86 	bl	8001434 <__aeabi_dadd>
 8010928:	0002      	movs	r2, r0
 801092a:	000b      	movs	r3, r1
 801092c:	0020      	movs	r0, r4
 801092e:	0029      	movs	r1, r5
 8010930:	f7f1 ff9c 	bl	800286c <__aeabi_dsub>
 8010934:	0032      	movs	r2, r6
 8010936:	003b      	movs	r3, r7
 8010938:	f7f1 ff98 	bl	800286c <__aeabi_dsub>
 801093c:	0002      	movs	r2, r0
 801093e:	000b      	movs	r3, r1
 8010940:	2000      	movs	r0, #0
 8010942:	4931      	ldr	r1, [pc, #196]	; (8010a08 <__ieee754_pow+0xa08>)
 8010944:	f7f1 ff92 	bl	800286c <__aeabi_dsub>
 8010948:	9b02      	ldr	r3, [sp, #8]
 801094a:	051b      	lsls	r3, r3, #20
 801094c:	185b      	adds	r3, r3, r1
 801094e:	151a      	asrs	r2, r3, #20
 8010950:	2a00      	cmp	r2, #0
 8010952:	dc25      	bgt.n	80109a0 <__ieee754_pow+0x9a0>
 8010954:	9a02      	ldr	r2, [sp, #8]
 8010956:	f000 f861 	bl	8010a1c <scalbn>
 801095a:	9a00      	ldr	r2, [sp, #0]
 801095c:	9b01      	ldr	r3, [sp, #4]
 801095e:	f7ff fc33 	bl	80101c8 <__ieee754_pow+0x1c8>
 8010962:	4a2a      	ldr	r2, [pc, #168]	; (8010a0c <__ieee754_pow+0xa0c>)
 8010964:	004b      	lsls	r3, r1, #1
 8010966:	085b      	lsrs	r3, r3, #1
 8010968:	4293      	cmp	r3, r2
 801096a:	dc00      	bgt.n	801096e <__ieee754_pow+0x96e>
 801096c:	e717      	b.n	801079e <__ieee754_pow+0x79e>
 801096e:	4b28      	ldr	r3, [pc, #160]	; (8010a10 <__ieee754_pow+0xa10>)
 8010970:	18cb      	adds	r3, r1, r3
 8010972:	4303      	orrs	r3, r0
 8010974:	d008      	beq.n	8010988 <__ieee754_pow+0x988>
 8010976:	9800      	ldr	r0, [sp, #0]
 8010978:	9901      	ldr	r1, [sp, #4]
 801097a:	2300      	movs	r3, #0
 801097c:	2200      	movs	r2, #0
 801097e:	f7ef fd75 	bl	800046c <__aeabi_dcmplt>
 8010982:	1e43      	subs	r3, r0, #1
 8010984:	4198      	sbcs	r0, r3
 8010986:	e462      	b.n	801024e <__ieee754_pow+0x24e>
 8010988:	9a04      	ldr	r2, [sp, #16]
 801098a:	9b05      	ldr	r3, [sp, #20]
 801098c:	f7f1 ff6e 	bl	800286c <__aeabi_dsub>
 8010990:	0032      	movs	r2, r6
 8010992:	003b      	movs	r3, r7
 8010994:	f7ef fd88 	bl	80004a8 <__aeabi_dcmpge>
 8010998:	2800      	cmp	r0, #0
 801099a:	d100      	bne.n	801099e <__ieee754_pow+0x99e>
 801099c:	e6ff      	b.n	801079e <__ieee754_pow+0x79e>
 801099e:	e7ea      	b.n	8010976 <__ieee754_pow+0x976>
 80109a0:	0019      	movs	r1, r3
 80109a2:	e7da      	b.n	801095a <__ieee754_pow+0x95a>
 80109a4:	2300      	movs	r3, #0
 80109a6:	4c18      	ldr	r4, [pc, #96]	; (8010a08 <__ieee754_pow+0xa08>)
 80109a8:	f7ff fbf1 	bl	801018e <__ieee754_pow+0x18e>
 80109ac:	2300      	movs	r3, #0
 80109ae:	2400      	movs	r4, #0
 80109b0:	f7ff fbed 	bl	801018e <__ieee754_pow+0x18e>
 80109b4:	652b82fe 	.word	0x652b82fe
 80109b8:	3c971547 	.word	0x3c971547
 80109bc:	3fe00000 	.word	0x3fe00000
 80109c0:	fffffc02 	.word	0xfffffc02
 80109c4:	fffffc01 	.word	0xfffffc01
 80109c8:	fff00000 	.word	0xfff00000
 80109cc:	3fe62e43 	.word	0x3fe62e43
 80109d0:	fefa39ef 	.word	0xfefa39ef
 80109d4:	3fe62e42 	.word	0x3fe62e42
 80109d8:	0ca86c39 	.word	0x0ca86c39
 80109dc:	be205c61 	.word	0xbe205c61
 80109e0:	72bea4d0 	.word	0x72bea4d0
 80109e4:	3e663769 	.word	0x3e663769
 80109e8:	c5d26bf1 	.word	0xc5d26bf1
 80109ec:	3ebbbd41 	.word	0x3ebbbd41
 80109f0:	af25de2c 	.word	0xaf25de2c
 80109f4:	3f11566a 	.word	0x3f11566a
 80109f8:	16bebd93 	.word	0x16bebd93
 80109fc:	3f66c16c 	.word	0x3f66c16c
 8010a00:	5555553e 	.word	0x5555553e
 8010a04:	3fc55555 	.word	0x3fc55555
 8010a08:	3ff00000 	.word	0x3ff00000
 8010a0c:	4090cbff 	.word	0x4090cbff
 8010a10:	3f6f3400 	.word	0x3f6f3400

08010a14 <fabs>:
 8010a14:	0049      	lsls	r1, r1, #1
 8010a16:	084b      	lsrs	r3, r1, #1
 8010a18:	0019      	movs	r1, r3
 8010a1a:	4770      	bx	lr

08010a1c <scalbn>:
 8010a1c:	b570      	push	{r4, r5, r6, lr}
 8010a1e:	0014      	movs	r4, r2
 8010a20:	004a      	lsls	r2, r1, #1
 8010a22:	000b      	movs	r3, r1
 8010a24:	0d52      	lsrs	r2, r2, #21
 8010a26:	d10f      	bne.n	8010a48 <scalbn+0x2c>
 8010a28:	004b      	lsls	r3, r1, #1
 8010a2a:	085b      	lsrs	r3, r3, #1
 8010a2c:	4303      	orrs	r3, r0
 8010a2e:	d011      	beq.n	8010a54 <scalbn+0x38>
 8010a30:	4b22      	ldr	r3, [pc, #136]	; (8010abc <scalbn+0xa0>)
 8010a32:	2200      	movs	r2, #0
 8010a34:	f7f1 fc58 	bl	80022e8 <__aeabi_dmul>
 8010a38:	4b21      	ldr	r3, [pc, #132]	; (8010ac0 <scalbn+0xa4>)
 8010a3a:	429c      	cmp	r4, r3
 8010a3c:	da0b      	bge.n	8010a56 <scalbn+0x3a>
 8010a3e:	4a21      	ldr	r2, [pc, #132]	; (8010ac4 <scalbn+0xa8>)
 8010a40:	4b21      	ldr	r3, [pc, #132]	; (8010ac8 <scalbn+0xac>)
 8010a42:	f7f1 fc51 	bl	80022e8 <__aeabi_dmul>
 8010a46:	e005      	b.n	8010a54 <scalbn+0x38>
 8010a48:	4d20      	ldr	r5, [pc, #128]	; (8010acc <scalbn+0xb0>)
 8010a4a:	42aa      	cmp	r2, r5
 8010a4c:	d107      	bne.n	8010a5e <scalbn+0x42>
 8010a4e:	0002      	movs	r2, r0
 8010a50:	f7f0 fcf0 	bl	8001434 <__aeabi_dadd>
 8010a54:	bd70      	pop	{r4, r5, r6, pc}
 8010a56:	000b      	movs	r3, r1
 8010a58:	004a      	lsls	r2, r1, #1
 8010a5a:	0d52      	lsrs	r2, r2, #21
 8010a5c:	3a36      	subs	r2, #54	; 0x36
 8010a5e:	4d1c      	ldr	r5, [pc, #112]	; (8010ad0 <scalbn+0xb4>)
 8010a60:	42ac      	cmp	r4, r5
 8010a62:	dd0a      	ble.n	8010a7a <scalbn+0x5e>
 8010a64:	4c1b      	ldr	r4, [pc, #108]	; (8010ad4 <scalbn+0xb8>)
 8010a66:	4d1c      	ldr	r5, [pc, #112]	; (8010ad8 <scalbn+0xbc>)
 8010a68:	2900      	cmp	r1, #0
 8010a6a:	da01      	bge.n	8010a70 <scalbn+0x54>
 8010a6c:	4c19      	ldr	r4, [pc, #100]	; (8010ad4 <scalbn+0xb8>)
 8010a6e:	4d1b      	ldr	r5, [pc, #108]	; (8010adc <scalbn+0xc0>)
 8010a70:	4a18      	ldr	r2, [pc, #96]	; (8010ad4 <scalbn+0xb8>)
 8010a72:	4b19      	ldr	r3, [pc, #100]	; (8010ad8 <scalbn+0xbc>)
 8010a74:	0020      	movs	r0, r4
 8010a76:	0029      	movs	r1, r5
 8010a78:	e7e3      	b.n	8010a42 <scalbn+0x26>
 8010a7a:	18a2      	adds	r2, r4, r2
 8010a7c:	4c18      	ldr	r4, [pc, #96]	; (8010ae0 <scalbn+0xc4>)
 8010a7e:	42a2      	cmp	r2, r4
 8010a80:	dcf0      	bgt.n	8010a64 <scalbn+0x48>
 8010a82:	2a00      	cmp	r2, #0
 8010a84:	dd05      	ble.n	8010a92 <scalbn+0x76>
 8010a86:	4c17      	ldr	r4, [pc, #92]	; (8010ae4 <scalbn+0xc8>)
 8010a88:	0512      	lsls	r2, r2, #20
 8010a8a:	4023      	ands	r3, r4
 8010a8c:	4313      	orrs	r3, r2
 8010a8e:	0019      	movs	r1, r3
 8010a90:	e7e0      	b.n	8010a54 <scalbn+0x38>
 8010a92:	0014      	movs	r4, r2
 8010a94:	3435      	adds	r4, #53	; 0x35
 8010a96:	da08      	bge.n	8010aaa <scalbn+0x8e>
 8010a98:	4c0a      	ldr	r4, [pc, #40]	; (8010ac4 <scalbn+0xa8>)
 8010a9a:	4d0b      	ldr	r5, [pc, #44]	; (8010ac8 <scalbn+0xac>)
 8010a9c:	2900      	cmp	r1, #0
 8010a9e:	da01      	bge.n	8010aa4 <scalbn+0x88>
 8010aa0:	4c08      	ldr	r4, [pc, #32]	; (8010ac4 <scalbn+0xa8>)
 8010aa2:	4d11      	ldr	r5, [pc, #68]	; (8010ae8 <scalbn+0xcc>)
 8010aa4:	4a07      	ldr	r2, [pc, #28]	; (8010ac4 <scalbn+0xa8>)
 8010aa6:	4b08      	ldr	r3, [pc, #32]	; (8010ac8 <scalbn+0xac>)
 8010aa8:	e7e4      	b.n	8010a74 <scalbn+0x58>
 8010aaa:	4c0e      	ldr	r4, [pc, #56]	; (8010ae4 <scalbn+0xc8>)
 8010aac:	3236      	adds	r2, #54	; 0x36
 8010aae:	4023      	ands	r3, r4
 8010ab0:	0512      	lsls	r2, r2, #20
 8010ab2:	431a      	orrs	r2, r3
 8010ab4:	0011      	movs	r1, r2
 8010ab6:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <scalbn+0xd0>)
 8010ab8:	2200      	movs	r2, #0
 8010aba:	e7c2      	b.n	8010a42 <scalbn+0x26>
 8010abc:	43500000 	.word	0x43500000
 8010ac0:	ffff3cb0 	.word	0xffff3cb0
 8010ac4:	c2f8f359 	.word	0xc2f8f359
 8010ac8:	01a56e1f 	.word	0x01a56e1f
 8010acc:	000007ff 	.word	0x000007ff
 8010ad0:	0000c350 	.word	0x0000c350
 8010ad4:	8800759c 	.word	0x8800759c
 8010ad8:	7e37e43c 	.word	0x7e37e43c
 8010adc:	fe37e43c 	.word	0xfe37e43c
 8010ae0:	000007fe 	.word	0x000007fe
 8010ae4:	800fffff 	.word	0x800fffff
 8010ae8:	81a56e1f 	.word	0x81a56e1f
 8010aec:	3c900000 	.word	0x3c900000

08010af0 <with_errno>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	000d      	movs	r5, r1
 8010af4:	0016      	movs	r6, r2
 8010af6:	0004      	movs	r4, r0
 8010af8:	f7fc fd18 	bl	800d52c <__errno>
 8010afc:	0029      	movs	r1, r5
 8010afe:	6006      	str	r6, [r0, #0]
 8010b00:	0020      	movs	r0, r4
 8010b02:	bd70      	pop	{r4, r5, r6, pc}

08010b04 <xflow>:
 8010b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b06:	0015      	movs	r5, r2
 8010b08:	001c      	movs	r4, r3
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d010      	beq.n	8010b30 <xflow+0x2c>
 8010b0e:	2380      	movs	r3, #128	; 0x80
 8010b10:	0010      	movs	r0, r2
 8010b12:	061b      	lsls	r3, r3, #24
 8010b14:	18e1      	adds	r1, r4, r3
 8010b16:	9000      	str	r0, [sp, #0]
 8010b18:	9101      	str	r1, [sp, #4]
 8010b1a:	9a00      	ldr	r2, [sp, #0]
 8010b1c:	9b01      	ldr	r3, [sp, #4]
 8010b1e:	0028      	movs	r0, r5
 8010b20:	0021      	movs	r1, r4
 8010b22:	f7f1 fbe1 	bl	80022e8 <__aeabi_dmul>
 8010b26:	2222      	movs	r2, #34	; 0x22
 8010b28:	f7ff ffe2 	bl	8010af0 <with_errno>
 8010b2c:	b003      	add	sp, #12
 8010b2e:	bd30      	pop	{r4, r5, pc}
 8010b30:	0010      	movs	r0, r2
 8010b32:	0019      	movs	r1, r3
 8010b34:	e7ef      	b.n	8010b16 <xflow+0x12>

08010b36 <__math_uflow>:
 8010b36:	2380      	movs	r3, #128	; 0x80
 8010b38:	b510      	push	{r4, lr}
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	055b      	lsls	r3, r3, #21
 8010b3e:	f7ff ffe1 	bl	8010b04 <xflow>
 8010b42:	bd10      	pop	{r4, pc}

08010b44 <__math_oflow>:
 8010b44:	23e0      	movs	r3, #224	; 0xe0
 8010b46:	b510      	push	{r4, lr}
 8010b48:	2200      	movs	r2, #0
 8010b4a:	05db      	lsls	r3, r3, #23
 8010b4c:	f7ff ffda 	bl	8010b04 <xflow>
 8010b50:	bd10      	pop	{r4, pc}
	...

08010b54 <__ieee754_sqrt>:
 8010b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b56:	000a      	movs	r2, r1
 8010b58:	000c      	movs	r4, r1
 8010b5a:	496f      	ldr	r1, [pc, #444]	; (8010d18 <__ieee754_sqrt+0x1c4>)
 8010b5c:	0005      	movs	r5, r0
 8010b5e:	0003      	movs	r3, r0
 8010b60:	0008      	movs	r0, r1
 8010b62:	b087      	sub	sp, #28
 8010b64:	4020      	ands	r0, r4
 8010b66:	4288      	cmp	r0, r1
 8010b68:	d111      	bne.n	8010b8e <__ieee754_sqrt+0x3a>
 8010b6a:	002a      	movs	r2, r5
 8010b6c:	0023      	movs	r3, r4
 8010b6e:	0028      	movs	r0, r5
 8010b70:	0021      	movs	r1, r4
 8010b72:	f7f1 fbb9 	bl	80022e8 <__aeabi_dmul>
 8010b76:	0002      	movs	r2, r0
 8010b78:	000b      	movs	r3, r1
 8010b7a:	0028      	movs	r0, r5
 8010b7c:	0021      	movs	r1, r4
 8010b7e:	f7f0 fc59 	bl	8001434 <__aeabi_dadd>
 8010b82:	0005      	movs	r5, r0
 8010b84:	000c      	movs	r4, r1
 8010b86:	0028      	movs	r0, r5
 8010b88:	0021      	movs	r1, r4
 8010b8a:	b007      	add	sp, #28
 8010b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b8e:	2c00      	cmp	r4, #0
 8010b90:	dc12      	bgt.n	8010bb8 <__ieee754_sqrt+0x64>
 8010b92:	0061      	lsls	r1, r4, #1
 8010b94:	0849      	lsrs	r1, r1, #1
 8010b96:	4329      	orrs	r1, r5
 8010b98:	d0f5      	beq.n	8010b86 <__ieee754_sqrt+0x32>
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	428c      	cmp	r4, r1
 8010b9e:	d100      	bne.n	8010ba2 <__ieee754_sqrt+0x4e>
 8010ba0:	e09f      	b.n	8010ce2 <__ieee754_sqrt+0x18e>
 8010ba2:	002a      	movs	r2, r5
 8010ba4:	0023      	movs	r3, r4
 8010ba6:	0028      	movs	r0, r5
 8010ba8:	0021      	movs	r1, r4
 8010baa:	f7f1 fe5f 	bl	800286c <__aeabi_dsub>
 8010bae:	0002      	movs	r2, r0
 8010bb0:	000b      	movs	r3, r1
 8010bb2:	f7f0 ff9f 	bl	8001af4 <__aeabi_ddiv>
 8010bb6:	e7e4      	b.n	8010b82 <__ieee754_sqrt+0x2e>
 8010bb8:	1521      	asrs	r1, r4, #20
 8010bba:	d100      	bne.n	8010bbe <__ieee754_sqrt+0x6a>
 8010bbc:	e091      	b.n	8010ce2 <__ieee754_sqrt+0x18e>
 8010bbe:	4857      	ldr	r0, [pc, #348]	; (8010d1c <__ieee754_sqrt+0x1c8>)
 8010bc0:	0312      	lsls	r2, r2, #12
 8010bc2:	180c      	adds	r4, r1, r0
 8010bc4:	2080      	movs	r0, #128	; 0x80
 8010bc6:	0b12      	lsrs	r2, r2, #12
 8010bc8:	0340      	lsls	r0, r0, #13
 8010bca:	4310      	orrs	r0, r2
 8010bcc:	07c9      	lsls	r1, r1, #31
 8010bce:	d403      	bmi.n	8010bd8 <__ieee754_sqrt+0x84>
 8010bd0:	0fda      	lsrs	r2, r3, #31
 8010bd2:	0040      	lsls	r0, r0, #1
 8010bd4:	1810      	adds	r0, r2, r0
 8010bd6:	005b      	lsls	r3, r3, #1
 8010bd8:	2500      	movs	r5, #0
 8010bda:	1062      	asrs	r2, r4, #1
 8010bdc:	0040      	lsls	r0, r0, #1
 8010bde:	2480      	movs	r4, #128	; 0x80
 8010be0:	9205      	str	r2, [sp, #20]
 8010be2:	0fda      	lsrs	r2, r3, #31
 8010be4:	1812      	adds	r2, r2, r0
 8010be6:	0029      	movs	r1, r5
 8010be8:	2016      	movs	r0, #22
 8010bea:	005b      	lsls	r3, r3, #1
 8010bec:	03a4      	lsls	r4, r4, #14
 8010bee:	190e      	adds	r6, r1, r4
 8010bf0:	4296      	cmp	r6, r2
 8010bf2:	dc02      	bgt.n	8010bfa <__ieee754_sqrt+0xa6>
 8010bf4:	1931      	adds	r1, r6, r4
 8010bf6:	1b92      	subs	r2, r2, r6
 8010bf8:	192d      	adds	r5, r5, r4
 8010bfa:	0fde      	lsrs	r6, r3, #31
 8010bfc:	0052      	lsls	r2, r2, #1
 8010bfe:	3801      	subs	r0, #1
 8010c00:	18b2      	adds	r2, r6, r2
 8010c02:	005b      	lsls	r3, r3, #1
 8010c04:	0864      	lsrs	r4, r4, #1
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d1f1      	bne.n	8010bee <__ieee754_sqrt+0x9a>
 8010c0a:	2620      	movs	r6, #32
 8010c0c:	2780      	movs	r7, #128	; 0x80
 8010c0e:	0004      	movs	r4, r0
 8010c10:	9604      	str	r6, [sp, #16]
 8010c12:	063f      	lsls	r7, r7, #24
 8010c14:	183e      	adds	r6, r7, r0
 8010c16:	46b4      	mov	ip, r6
 8010c18:	428a      	cmp	r2, r1
 8010c1a:	dc02      	bgt.n	8010c22 <__ieee754_sqrt+0xce>
 8010c1c:	d114      	bne.n	8010c48 <__ieee754_sqrt+0xf4>
 8010c1e:	429e      	cmp	r6, r3
 8010c20:	d812      	bhi.n	8010c48 <__ieee754_sqrt+0xf4>
 8010c22:	4660      	mov	r0, ip
 8010c24:	4666      	mov	r6, ip
 8010c26:	19c0      	adds	r0, r0, r7
 8010c28:	9100      	str	r1, [sp, #0]
 8010c2a:	2e00      	cmp	r6, #0
 8010c2c:	da03      	bge.n	8010c36 <__ieee754_sqrt+0xe2>
 8010c2e:	43c6      	mvns	r6, r0
 8010c30:	0ff6      	lsrs	r6, r6, #31
 8010c32:	198e      	adds	r6, r1, r6
 8010c34:	9600      	str	r6, [sp, #0]
 8010c36:	1a52      	subs	r2, r2, r1
 8010c38:	4563      	cmp	r3, ip
 8010c3a:	4189      	sbcs	r1, r1
 8010c3c:	4249      	negs	r1, r1
 8010c3e:	1a52      	subs	r2, r2, r1
 8010c40:	4661      	mov	r1, ip
 8010c42:	1a5b      	subs	r3, r3, r1
 8010c44:	9900      	ldr	r1, [sp, #0]
 8010c46:	19e4      	adds	r4, r4, r7
 8010c48:	0fde      	lsrs	r6, r3, #31
 8010c4a:	0052      	lsls	r2, r2, #1
 8010c4c:	18b2      	adds	r2, r6, r2
 8010c4e:	9e04      	ldr	r6, [sp, #16]
 8010c50:	005b      	lsls	r3, r3, #1
 8010c52:	3e01      	subs	r6, #1
 8010c54:	087f      	lsrs	r7, r7, #1
 8010c56:	9604      	str	r6, [sp, #16]
 8010c58:	2e00      	cmp	r6, #0
 8010c5a:	d1db      	bne.n	8010c14 <__ieee754_sqrt+0xc0>
 8010c5c:	431a      	orrs	r2, r3
 8010c5e:	d01f      	beq.n	8010ca0 <__ieee754_sqrt+0x14c>
 8010c60:	4e2f      	ldr	r6, [pc, #188]	; (8010d20 <__ieee754_sqrt+0x1cc>)
 8010c62:	4f30      	ldr	r7, [pc, #192]	; (8010d24 <__ieee754_sqrt+0x1d0>)
 8010c64:	6830      	ldr	r0, [r6, #0]
 8010c66:	6871      	ldr	r1, [r6, #4]
 8010c68:	683a      	ldr	r2, [r7, #0]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	9200      	str	r2, [sp, #0]
 8010c6e:	9301      	str	r3, [sp, #4]
 8010c70:	6832      	ldr	r2, [r6, #0]
 8010c72:	6873      	ldr	r3, [r6, #4]
 8010c74:	9202      	str	r2, [sp, #8]
 8010c76:	9303      	str	r3, [sp, #12]
 8010c78:	9a00      	ldr	r2, [sp, #0]
 8010c7a:	9b01      	ldr	r3, [sp, #4]
 8010c7c:	f7f1 fdf6 	bl	800286c <__aeabi_dsub>
 8010c80:	0002      	movs	r2, r0
 8010c82:	000b      	movs	r3, r1
 8010c84:	9802      	ldr	r0, [sp, #8]
 8010c86:	9903      	ldr	r1, [sp, #12]
 8010c88:	f7ef fbfa 	bl	8000480 <__aeabi_dcmple>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d007      	beq.n	8010ca0 <__ieee754_sqrt+0x14c>
 8010c90:	6830      	ldr	r0, [r6, #0]
 8010c92:	6871      	ldr	r1, [r6, #4]
 8010c94:	683a      	ldr	r2, [r7, #0]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	1c67      	adds	r7, r4, #1
 8010c9a:	d127      	bne.n	8010cec <__ieee754_sqrt+0x198>
 8010c9c:	9c04      	ldr	r4, [sp, #16]
 8010c9e:	3501      	adds	r5, #1
 8010ca0:	4b21      	ldr	r3, [pc, #132]	; (8010d28 <__ieee754_sqrt+0x1d4>)
 8010ca2:	1069      	asrs	r1, r5, #1
 8010ca4:	18c9      	adds	r1, r1, r3
 8010ca6:	0864      	lsrs	r4, r4, #1
 8010ca8:	07ed      	lsls	r5, r5, #31
 8010caa:	d502      	bpl.n	8010cb2 <__ieee754_sqrt+0x15e>
 8010cac:	2380      	movs	r3, #128	; 0x80
 8010cae:	061b      	lsls	r3, r3, #24
 8010cb0:	431c      	orrs	r4, r3
 8010cb2:	9b05      	ldr	r3, [sp, #20]
 8010cb4:	0025      	movs	r5, r4
 8010cb6:	0518      	lsls	r0, r3, #20
 8010cb8:	1843      	adds	r3, r0, r1
 8010cba:	001c      	movs	r4, r3
 8010cbc:	e763      	b.n	8010b86 <__ieee754_sqrt+0x32>
 8010cbe:	0ada      	lsrs	r2, r3, #11
 8010cc0:	3815      	subs	r0, #21
 8010cc2:	055b      	lsls	r3, r3, #21
 8010cc4:	2a00      	cmp	r2, #0
 8010cc6:	d0fa      	beq.n	8010cbe <__ieee754_sqrt+0x16a>
 8010cc8:	2480      	movs	r4, #128	; 0x80
 8010cca:	0364      	lsls	r4, r4, #13
 8010ccc:	4222      	tst	r2, r4
 8010cce:	d00a      	beq.n	8010ce6 <__ieee754_sqrt+0x192>
 8010cd0:	2420      	movs	r4, #32
 8010cd2:	001e      	movs	r6, r3
 8010cd4:	1a64      	subs	r4, r4, r1
 8010cd6:	40e6      	lsrs	r6, r4
 8010cd8:	1e4d      	subs	r5, r1, #1
 8010cda:	408b      	lsls	r3, r1
 8010cdc:	4332      	orrs	r2, r6
 8010cde:	1b41      	subs	r1, r0, r5
 8010ce0:	e76d      	b.n	8010bbe <__ieee754_sqrt+0x6a>
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	e7ee      	b.n	8010cc4 <__ieee754_sqrt+0x170>
 8010ce6:	0052      	lsls	r2, r2, #1
 8010ce8:	3101      	adds	r1, #1
 8010cea:	e7ef      	b.n	8010ccc <__ieee754_sqrt+0x178>
 8010cec:	f7f0 fba2 	bl	8001434 <__aeabi_dadd>
 8010cf0:	6877      	ldr	r7, [r6, #4]
 8010cf2:	6836      	ldr	r6, [r6, #0]
 8010cf4:	0002      	movs	r2, r0
 8010cf6:	000b      	movs	r3, r1
 8010cf8:	0030      	movs	r0, r6
 8010cfa:	0039      	movs	r1, r7
 8010cfc:	f7ef fbb6 	bl	800046c <__aeabi_dcmplt>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d004      	beq.n	8010d0e <__ieee754_sqrt+0x1ba>
 8010d04:	3402      	adds	r4, #2
 8010d06:	4263      	negs	r3, r4
 8010d08:	4163      	adcs	r3, r4
 8010d0a:	18ed      	adds	r5, r5, r3
 8010d0c:	e7c8      	b.n	8010ca0 <__ieee754_sqrt+0x14c>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	3401      	adds	r4, #1
 8010d12:	439c      	bics	r4, r3
 8010d14:	e7c4      	b.n	8010ca0 <__ieee754_sqrt+0x14c>
 8010d16:	46c0      	nop			; (mov r8, r8)
 8010d18:	7ff00000 	.word	0x7ff00000
 8010d1c:	fffffc01 	.word	0xfffffc01
 8010d20:	200002c0 	.word	0x200002c0
 8010d24:	200002c8 	.word	0x200002c8
 8010d28:	3fe00000 	.word	0x3fe00000

08010d2c <_init>:
 8010d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d2e:	46c0      	nop			; (mov r8, r8)
 8010d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d32:	bc08      	pop	{r3}
 8010d34:	469e      	mov	lr, r3
 8010d36:	4770      	bx	lr

08010d38 <_fini>:
 8010d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d3a:	46c0      	nop			; (mov r8, r8)
 8010d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d3e:	bc08      	pop	{r3}
 8010d40:	469e      	mov	lr, r3
 8010d42:	4770      	bx	lr
