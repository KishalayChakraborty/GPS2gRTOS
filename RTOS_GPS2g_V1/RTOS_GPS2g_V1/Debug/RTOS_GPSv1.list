
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a74  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ed0  08016b38  08016b38  00026b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a08  08018a08  000302c8  2**0
                  CONTENTS
  4 .ARM          00000000  08018a08  08018a08  000302c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018a08  08018a08  000302c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018a08  08018a08  00028a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a0c  08018a0c  00028a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  08018a10  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057d0  200002c8  08018cd8  000302c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005a98  08018cd8  00035a98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025695  00000000  00000000  00030333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004992  00000000  00000000  000559c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002278  00000000  00000000  0005a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b16  00000000  00000000  0005c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000621f  00000000  00000000  0005e0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002681f  00000000  00000000  0006430d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abe10  00000000  00000000  0008ab2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000099f0  00000000  00000000  0013693c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002c8 	.word	0x200002c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08016b1c 	.word	0x08016b1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002cc 	.word	0x200002cc
 8000104:	08016b1c 	.word	0x08016b1c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	08018358 	.word	0x08018358
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	08018398 	.word	0x08018398

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	080183d8 	.word	0x080183d8
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800328c:	f3bf 8f4f 	dsb	sy
}
 8003290:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <__NVIC_SystemReset+0x1c>)
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <__NVIC_SystemReset+0x20>)
 8003296:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003298:	f3bf 8f4f 	dsb	sy
}
 800329c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	e7fd      	b.n	800329e <__NVIC_SystemReset+0x16>
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	e000ed00 	.word	0xe000ed00
 80032a8:	05fa0004 	.word	0x05fa0004

080032ac <Read_DI_IN1>:

/* Digital Output Function Prototypes-----------------*/


/* Digital Status Read Function Definition-----------------*/
static int Read_DI_IN1(){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	23a0      	movs	r3, #160	; 0xa0
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	0011      	movs	r1, r2
 80032bc:	0018      	movs	r0, r3
 80032be:	f007 f983 	bl	800a5c8 <HAL_GPIO_ReadPin>
 80032c2:	0003      	movs	r3, r0
 80032c4:	607b      	str	r3, [r7, #4]
	return val;
 80032c6:	687b      	ldr	r3, [r7, #4]
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <Read_DI_IN2>:
static int Read_DI_IN2(){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <Read_DI_IN2+0x24>)
 80032dc:	0019      	movs	r1, r3
 80032de:	0010      	movs	r0, r2
 80032e0:	f007 f972 	bl	800a5c8 <HAL_GPIO_ReadPin>
 80032e4:	0003      	movs	r3, r0
 80032e6:	607b      	str	r3, [r7, #4]
	return val;
 80032e8:	687b      	ldr	r3, [r7, #4]
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	50000400 	.word	0x50000400

080032f8 <Read_DI_IN3>:
static int Read_DI_IN3(){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	015b      	lsls	r3, r3, #5
 8003302:	4a06      	ldr	r2, [pc, #24]	; (800331c <Read_DI_IN3+0x24>)
 8003304:	0019      	movs	r1, r3
 8003306:	0010      	movs	r0, r2
 8003308:	f007 f95e 	bl	800a5c8 <HAL_GPIO_ReadPin>
 800330c:	0003      	movs	r3, r0
 800330e:	607b      	str	r3, [r7, #4]
	return val;
 8003310:	687b      	ldr	r3, [r7, #4]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	50000400 	.word	0x50000400

08003320 <Read_DI_MAINS_STATE>:
static int Read_DI_MAINS_STATE(){
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	4a06      	ldr	r2, [pc, #24]	; (8003344 <Read_DI_MAINS_STATE+0x24>)
 800332c:	0019      	movs	r1, r3
 800332e:	0010      	movs	r0, r2
 8003330:	f007 f94a 	bl	800a5c8 <HAL_GPIO_ReadPin>
 8003334:	0003      	movs	r3, r0
 8003336:	607b      	str	r3, [r7, #4]
	return val;
 8003338:	687b      	ldr	r3, [r7, #4]
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	50000400 	.word	0x50000400

08003348 <Read_DI_ACC_STATE>:
static int Read_DI_ACC_STATE(){
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	01db      	lsls	r3, r3, #7
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <Read_DI_ACC_STATE+0x24>)
 8003354:	0019      	movs	r1, r3
 8003356:	0010      	movs	r0, r2
 8003358:	f007 f936 	bl	800a5c8 <HAL_GPIO_ReadPin>
 800335c:	0003      	movs	r3, r0
 800335e:	607b      	str	r3, [r7, #4]
	return val;
 8003360:	687b      	ldr	r3, [r7, #4]
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b002      	add	sp, #8
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	50000400 	.word	0x50000400

08003370 <Read_DI_BOX_STATE>:
static char Read_DI_BOX_STATE(){
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <Read_DI_BOX_STATE+0x40>)
 800337c:	0019      	movs	r1, r3
 800337e:	0010      	movs	r0, r2
 8003380:	f007 f922 	bl	800a5c8 <HAL_GPIO_ReadPin>
 8003384:	0003      	movs	r3, r0
 8003386:	603b      	str	r3, [r7, #0]
	char box='O';
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	224f      	movs	r2, #79	; 0x4f
 800338c:	701a      	strb	r2, [r3, #0]
	if(val==1)box='O';
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d103      	bne.n	800339c <Read_DI_BOX_STATE+0x2c>
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	224f      	movs	r2, #79	; 0x4f
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e002      	b.n	80033a2 <Read_DI_BOX_STATE+0x32>
		else box='C';
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	2243      	movs	r2, #67	; 0x43
 80033a0:	701a      	strb	r2, [r3, #0]

	return box;
 80033a2:	1dfb      	adds	r3, r7, #7
 80033a4:	781b      	ldrb	r3, [r3, #0]
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	50000400 	.word	0x50000400

080033b4 <Read_DI_SOS_STATE>:
static int Read_DI_SOS_STATE(){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	005a      	lsls	r2, r3, #1
 80033be:	23a0      	movs	r3, #160	; 0xa0
 80033c0:	05db      	lsls	r3, r3, #23
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f007 f8ff 	bl	800a5c8 <HAL_GPIO_ReadPin>
 80033ca:	0003      	movs	r3, r0
 80033cc:	607b      	str	r3, [r7, #4]
	return val;
 80033ce:	687b      	ldr	r3, [r7, #4]
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <Init_ADC>:


/* Analog Value Read Function Definition-----------------*/


static void Init_ADC(){
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 80033dc:	4904      	ldr	r1, [pc, #16]	; (80033f0 <Init_ADC+0x18>)
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <Init_ADC+0x1c>)
 80033e0:	2204      	movs	r2, #4
 80033e2:	0018      	movs	r0, r3
 80033e4:	f005 ffd8 	bl	8009398 <HAL_ADC_Start_DMA>
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	200009dc 	.word	0x200009dc
 80033f4:	20000548 	.word	0x20000548

080033f8 <Read_ADC1>:

static float Read_ADC1(){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
	float val=(float)ADCvalue[0];
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <Read_ADC1+0x34>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0018      	movs	r0, r3
 8003404:	f7fd ffc4 	bl	8001390 <__aeabi_ui2f>
 8003408:	1c03      	adds	r3, r0, #0
 800340a:	607b      	str	r3, [r7, #4]

	return ((float)(val*VSENSE*11));
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <Read_ADC1+0x38>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	1c18      	adds	r0, r3, #0
 8003414:	f7fd fc5c 	bl	8000cd0 <__aeabi_fmul>
 8003418:	1c03      	adds	r3, r0, #0
 800341a:	4906      	ldr	r1, [pc, #24]	; (8003434 <Read_ADC1+0x3c>)
 800341c:	1c18      	adds	r0, r3, #0
 800341e:	f7fd fc57 	bl	8000cd0 <__aeabi_fmul>
 8003422:	1c03      	adds	r3, r0, #0
    	//HAL_Delay(1);
}
 8003424:	1c18      	adds	r0, r3, #0
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}
 800342c:	200009dc 	.word	0x200009dc
 8003430:	20000008 	.word	0x20000008
 8003434:	41300000 	.word	0x41300000

08003438 <Read_ADC2>:

static float Read_ADC2(){
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	return (ADCvalue[1]*VSENSE*11);
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <Read_ADC2+0x30>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd ffa5 	bl	8001390 <__aeabi_ui2f>
 8003446:	1c02      	adds	r2, r0, #0
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <Read_ADC2+0x34>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1c19      	adds	r1, r3, #0
 800344e:	1c10      	adds	r0, r2, #0
 8003450:	f7fd fc3e 	bl	8000cd0 <__aeabi_fmul>
 8003454:	1c03      	adds	r3, r0, #0
 8003456:	4906      	ldr	r1, [pc, #24]	; (8003470 <Read_ADC2+0x38>)
 8003458:	1c18      	adds	r0, r3, #0
 800345a:	f7fd fc39 	bl	8000cd0 <__aeabi_fmul>
 800345e:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 8003460:	1c18      	adds	r0, r3, #0
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	200009dc 	.word	0x200009dc
 800346c:	20000008 	.word	0x20000008
 8003470:	41300000 	.word	0x41300000

08003474 <Read_EXT_B_SENSE>:
static float Read_EXT_B_SENSE(){
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	return (ADCvalue[2]*VSENSE*16);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <Read_EXT_B_SENSE+0x30>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	0018      	movs	r0, r3
 800347e:	f7fd ff87 	bl	8001390 <__aeabi_ui2f>
 8003482:	1c02      	adds	r2, r0, #0
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <Read_EXT_B_SENSE+0x34>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c19      	adds	r1, r3, #0
 800348a:	1c10      	adds	r0, r2, #0
 800348c:	f7fd fc20 	bl	8000cd0 <__aeabi_fmul>
 8003490:	1c03      	adds	r3, r0, #0
 8003492:	2183      	movs	r1, #131	; 0x83
 8003494:	05c9      	lsls	r1, r1, #23
 8003496:	1c18      	adds	r0, r3, #0
 8003498:	f7fd fc1a 	bl	8000cd0 <__aeabi_fmul>
 800349c:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 800349e:	1c18      	adds	r0, r3, #0
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200009dc 	.word	0x200009dc
 80034a8:	20000008 	.word	0x20000008

080034ac <Read_INT_B_SENSE>:
static float Read_INT_B_SENSE(){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	return (ADCvalue[3]*VSENSE*2);
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <Read_INT_B_SENSE+0x30>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7fd ff6b 	bl	8001390 <__aeabi_ui2f>
 80034ba:	1c02      	adds	r2, r0, #0
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <Read_INT_B_SENSE+0x34>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1c19      	adds	r1, r3, #0
 80034c2:	1c10      	adds	r0, r2, #0
 80034c4:	f7fd fc04 	bl	8000cd0 <__aeabi_fmul>
 80034c8:	1c03      	adds	r3, r0, #0
 80034ca:	1c19      	adds	r1, r3, #0
 80034cc:	1c18      	adds	r0, r3, #0
 80034ce:	f7fd f895 	bl	80005fc <__aeabi_fadd>
 80034d2:	1c03      	adds	r3, r0, #0
	    	//HAL_Delay(1);
}
 80034d4:	1c18      	adds	r0, r3, #0
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	200009dc 	.word	0x200009dc
 80034e0:	20000008 	.word	0x20000008

080034e4 <SET_5V_OUT_EN>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_OUT3_P_LED_GPIO_Port, DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
	}

}
static void SET_5V_OUT_EN(int val){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	if(val==1){
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <SET_5V_OUT_EN+0x1c>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <SET_5V_OUT_EN+0x38>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	2120      	movs	r1, #32
 80034f8:	0018      	movs	r0, r3
 80034fa:	f007 f882 	bl	800a602 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_RESET);
	}
}
 80034fe:	e008      	b.n	8003512 <SET_5V_OUT_EN+0x2e>
	else if(val==0){
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <SET_5V_OUT_EN+0x2e>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_RESET);
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <SET_5V_OUT_EN+0x38>)
 8003508:	2200      	movs	r2, #0
 800350a:	2120      	movs	r1, #32
 800350c:	0018      	movs	r0, r3
 800350e:	f007 f878 	bl	800a602 <HAL_GPIO_WritePin>
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b002      	add	sp, #8
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	50000400 	.word	0x50000400

08003520 <SET_LED_GPS>:
	else if(val==0){
		HAL_GPIO_WritePin(DO_OUT1_GPIO_Port, DO_OUT1_Pin, GPIO_PIN_RESET);
	}
}

static void SET_LED_GPS(int val){
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	if(val==1){
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d106      	bne.n	800353c <SET_LED_GPS+0x1c>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <SET_LED_GPS+0x38>)
 8003530:	2201      	movs	r2, #1
 8003532:	2104      	movs	r1, #4
 8003534:	0018      	movs	r0, r3
 8003536:	f007 f864 	bl	800a602 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
	}
}
 800353a:	e008      	b.n	800354e <SET_LED_GPS+0x2e>
	else if(val==0){
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <SET_LED_GPS+0x2e>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SET_LED_GPS+0x38>)
 8003544:	2200      	movs	r2, #0
 8003546:	2104      	movs	r1, #4
 8003548:	0018      	movs	r0, r3
 800354a:	f007 f85a 	bl	800a602 <HAL_GPIO_WritePin>
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b002      	add	sp, #8
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	50000c00 	.word	0x50000c00

0800355c <SET_LED_NET>:

static void SET_LED_NET(int val){
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	if(val==1){
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d106      	bne.n	8003578 <SET_LED_NET+0x1c>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <SET_LED_NET+0x38>)
 800356c:	2201      	movs	r2, #1
 800356e:	2102      	movs	r1, #2
 8003570:	0018      	movs	r0, r3
 8003572:	f007 f846 	bl	800a602 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
	}
}
 8003576:	e008      	b.n	800358a <SET_LED_NET+0x2e>
	else if(val==0){
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <SET_LED_NET+0x2e>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SET_LED_NET+0x38>)
 8003580:	2200      	movs	r2, #0
 8003582:	2102      	movs	r1, #2
 8003584:	0018      	movs	r0, r3
 8003586:	f007 f83c 	bl	800a602 <HAL_GPIO_WritePin>
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	50000c00 	.word	0x50000c00

08003598 <SET_LED_PWR>:

static void SET_LED_PWR(int val){
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	if(val==1){
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d106      	bne.n	80035b4 <SET_LED_PWR+0x1c>
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <SET_LED_PWR+0x38>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	2101      	movs	r1, #1
 80035ac:	0018      	movs	r0, r3
 80035ae:	f007 f828 	bl	800a602 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
	}
}
 80035b2:	e008      	b.n	80035c6 <SET_LED_PWR+0x2e>
	else if(val==0){
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <SET_LED_PWR+0x2e>
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <SET_LED_PWR+0x38>)
 80035bc:	2200      	movs	r2, #0
 80035be:	2101      	movs	r1, #1
 80035c0:	0018      	movs	r0, r3
 80035c2:	f007 f81e 	bl	800a602 <HAL_GPIO_WritePin>
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	50000c00 	.word	0x50000c00

080035d4 <SET_GPS_VCC_EN>:

static void SET_GPS_VCC_EN(int val){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	if(val==1){
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d108      	bne.n	80035f4 <SET_GPS_VCC_EN+0x20>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	0219      	lsls	r1, r3, #8
 80035e6:	23a0      	movs	r3, #160	; 0xa0
 80035e8:	05db      	lsls	r3, r3, #23
 80035ea:	2201      	movs	r2, #1
 80035ec:	0018      	movs	r0, r3
 80035ee:	f007 f808 	bl	800a602 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
	}
}
 80035f2:	e00a      	b.n	800360a <SET_GPS_VCC_EN+0x36>
	else if(val==0){
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <SET_GPS_VCC_EN+0x36>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	0219      	lsls	r1, r3, #8
 80035fe:	23a0      	movs	r3, #160	; 0xa0
 8003600:	05db      	lsls	r3, r3, #23
 8003602:	2200      	movs	r2, #0
 8003604:	0018      	movs	r0, r3
 8003606:	f006 fffc 	bl	800a602 <HAL_GPIO_WritePin>
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b002      	add	sp, #8
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <SET_PWRKEY>:

static void SET_PWRKEY(int val){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	if(val==1){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d106      	bne.n	8003630 <SET_PWRKEY+0x1c>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <SET_PWRKEY+0x38>)
 8003624:	2201      	movs	r2, #1
 8003626:	2180      	movs	r1, #128	; 0x80
 8003628:	0018      	movs	r0, r3
 800362a:	f006 ffea 	bl	800a602 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
	}
}
 800362e:	e008      	b.n	8003642 <SET_PWRKEY+0x2e>
	else if(val==0){
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <SET_PWRKEY+0x2e>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <SET_PWRKEY+0x38>)
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	0018      	movs	r0, r3
 800363e:	f006 ffe0 	bl	800a602 <HAL_GPIO_WritePin>
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	50000800 	.word	0x50000800

08003650 <SET_GSM_VCC_EN>:

static void SET_GSM_VCC_EN(int val){
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	if(val==1){
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d106      	bne.n	800366c <SET_GSM_VCC_EN+0x1c>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <SET_GSM_VCC_EN+0x38>)
 8003660:	2201      	movs	r2, #1
 8003662:	2140      	movs	r1, #64	; 0x40
 8003664:	0018      	movs	r0, r3
 8003666:	f006 ffcc 	bl	800a602 <HAL_GPIO_WritePin>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
	}
}
 800366a:	e008      	b.n	800367e <SET_GSM_VCC_EN+0x2e>
	else if(val==0){
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d105      	bne.n	800367e <SET_GSM_VCC_EN+0x2e>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <SET_GSM_VCC_EN+0x38>)
 8003674:	2200      	movs	r2, #0
 8003676:	2140      	movs	r1, #64	; 0x40
 8003678:	0018      	movs	r0, r3
 800367a:	f006 ffc2 	bl	800a602 <HAL_GPIO_WritePin>
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	50000800 	.word	0x50000800

0800368c <RestartGSM>:
	}
	return 1;
}

void RestartGSM()
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
	SET_GSM_VCC_EN(1);
 8003690:	2001      	movs	r0, #1
 8003692:	f7ff ffdd 	bl	8003650 <SET_GSM_VCC_EN>
	SET_PWRKEY(0);
 8003696:	2000      	movs	r0, #0
 8003698:	f7ff ffbc 	bl	8003614 <SET_PWRKEY>
	HAL_Delay(700);
 800369c:	23af      	movs	r3, #175	; 0xaf
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	0018      	movs	r0, r3
 80036a2:	f005 fb4f 	bl	8008d44 <HAL_Delay>
	SET_PWRKEY(1);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7ff ffb4 	bl	8003614 <SET_PWRKEY>
	HAL_Delay(500);
 80036ac:	23fa      	movs	r3, #250	; 0xfa
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	0018      	movs	r0, r3
 80036b2:	f005 fb47 	bl	8008d44 <HAL_Delay>
	SET_PWRKEY(0);
 80036b6:	2000      	movs	r0, #0
 80036b8:	f7ff ffac 	bl	8003614 <SET_PWRKEY>
	HAL_Delay(700);
 80036bc:	23af      	movs	r3, #175	; 0xaf
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f005 fb3f 	bl	8008d44 <HAL_Delay>
	SET_GSM_VCC_EN(0);
 80036c6:	2000      	movs	r0, #0
 80036c8:	f7ff ffc2 	bl	8003650 <SET_GSM_VCC_EN>
	HAL_Delay(700);
 80036cc:	23af      	movs	r3, #175	; 0xaf
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f005 fb37 	bl	8008d44 <HAL_Delay>
	SET_PWRKEY(1);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f7ff ff9c 	bl	8003614 <SET_PWRKEY>
	HAL_Delay(500);
 80036dc:	23fa      	movs	r3, #250	; 0xfa
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	0018      	movs	r0, r3
 80036e2:	f005 fb2f 	bl	8008d44 <HAL_Delay>
	SET_GSM_VCC_EN(1);
 80036e6:	2001      	movs	r0, #1
 80036e8:	f7ff ffb2 	bl	8003650 <SET_GSM_VCC_EN>
	HAL_Delay(200);
 80036ec:	20c8      	movs	r0, #200	; 0xc8
 80036ee:	f005 fb29 	bl	8008d44 <HAL_Delay>
	SET_PWRKEY(0);
 80036f2:	2000      	movs	r0, #0
 80036f4:	f7ff ff8e 	bl	8003614 <SET_PWRKEY>
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <SendGSMCode>:

void SendGSMCode(const char cmd[])
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

	memset(GSMData, 0, 990);
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <SendGSMCode+0xa0>)
 800370a:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <SendGSMCode+0xa4>)
 800370c:	2100      	movs	r1, #0
 800370e:	0018      	movs	r0, r3
 8003710:	f00f fc7c 	bl	801300c <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <SendGSMCode+0xa8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	220c      	movs	r2, #12
 800371a:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800371c:	4923      	ldr	r1, [pc, #140]	; (80037ac <SendGSMCode+0xac>)
 800371e:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <SendGSMCode+0xb0>)
 8003720:	2201      	movs	r2, #1
 8003722:	0018      	movs	r0, r3
 8003724:	f009 fe98 	bl	800d458 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 100);
 8003728:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <SendGSMCode+0xb4>)
 800372a:	2264      	movs	r2, #100	; 0x64
 800372c:	2100      	movs	r1, #0
 800372e:	0018      	movs	r0, r3
 8003730:	f00f fc6c 	bl	801300c <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f7fc fce6 	bl	8000108 <strlen>
 800373c:	0003      	movs	r3, r0
 800373e:	225a      	movs	r2, #90	; 0x5a
 8003740:	429a      	cmp	r2, r3
 8003742:	419b      	sbcs	r3, r3
 8003744:	425b      	negs	r3, r3
 8003746:	b2da      	uxtb	r2, r3
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <SendGSMCode+0xb8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	4259      	negs	r1, r3
 8003750:	414b      	adcs	r3, r1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4013      	ands	r3, r2
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <SendGSMCode+0x64>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <SendGSMCode+0xbc>)
 800375e:	0018      	movs	r0, r3
 8003760:	f004 fd3c 	bl	80081dc <Debug_Tx>
	}
	strcpy(GSMTXC, cmd);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <SendGSMCode+0xb4>)
 8003768:	0011      	movs	r1, r2
 800376a:	0018      	movs	r0, r3
 800376c:	f00f fe03 	bl	8013376 <strcpy>
	strcat(GSMTXC, "\r\n");
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <SendGSMCode+0xb4>)
 8003772:	0018      	movs	r0, r3
 8003774:	f7fc fcc8 	bl	8000108 <strlen>
 8003778:	0003      	movs	r3, r0
 800377a:	001a      	movs	r2, r3
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <SendGSMCode+0xb4>)
 800377e:	18d2      	adds	r2, r2, r3
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <SendGSMCode+0xc0>)
 8003782:	0010      	movs	r0, r2
 8003784:	0019      	movs	r1, r3
 8003786:	2303      	movs	r3, #3
 8003788:	001a      	movs	r2, r3
 800378a:	f00f fe07 	bl	801339c <memcpy>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <SendGSMCode+0xb4>)
 8003790:	0018      	movs	r0, r3
 8003792:	f004 fd61 	bl	8008258 <GSM_Tx>
	// return GSM_Rx();
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b002      	add	sp, #8
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	000003de 	.word	0x000003de
 80037a4:	20000dd4 	.word	0x20000dd4
 80037a8:	200007a0 	.word	0x200007a0
 80037ac:	200013b0 	.word	0x200013b0
 80037b0:	2000070c 	.word	0x2000070c
 80037b4:	20001674 	.word	0x20001674
 80037b8:	2000000c 	.word	0x2000000c
 80037bc:	08016b5c 	.word	0x08016b5c
 80037c0:	08016b7c 	.word	0x08016b7c

080037c4 <SendGSMCodeL>:
	GSM_Tx(cmd);
	// return GSM_Rx();
}

void SendGSMCodeL(const char cmd[])
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <SendGSMCodeL+0xa0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	220c      	movs	r2, #12
 80037d2:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80037d4:	4924      	ldr	r1, [pc, #144]	; (8003868 <SendGSMCodeL+0xa4>)
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <SendGSMCodeL+0xa8>)
 80037d8:	2201      	movs	r2, #1
 80037da:	0018      	movs	r0, r3
 80037dc:	f009 fe3c 	bl	800d458 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 80037e0:	4a23      	ldr	r2, [pc, #140]	; (8003870 <SendGSMCodeL+0xac>)
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <SendGSMCodeL+0xb0>)
 80037e4:	2100      	movs	r1, #0
 80037e6:	0018      	movs	r0, r3
 80037e8:	f00f fc10 	bl	801300c <memset>
	memset(GSMTXC, 0, 100);
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <SendGSMCodeL+0xb4>)
 80037ee:	2264      	movs	r2, #100	; 0x64
 80037f0:	2100      	movs	r1, #0
 80037f2:	0018      	movs	r0, r3
 80037f4:	f00f fc0a 	bl	801300c <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fc fc84 	bl	8000108 <strlen>
 8003800:	0003      	movs	r3, r0
 8003802:	225a      	movs	r2, #90	; 0x5a
 8003804:	429a      	cmp	r2, r3
 8003806:	419b      	sbcs	r3, r3
 8003808:	425b      	negs	r3, r3
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <SendGSMCodeL+0xb8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3b01      	subs	r3, #1
 8003812:	4259      	negs	r1, r3
 8003814:	414b      	adcs	r3, r1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	4013      	ands	r3, r2
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <SendGSMCodeL+0x64>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
 8003820:	4b17      	ldr	r3, [pc, #92]	; (8003880 <SendGSMCodeL+0xbc>)
 8003822:	0018      	movs	r0, r3
 8003824:	f004 fcda 	bl	80081dc <Debug_Tx>
	}
	strcpy(GSMTXC, cmd);
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <SendGSMCodeL+0xb4>)
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f00f fda1 	bl	8013376 <strcpy>
	strcat(GSMTXC, "\r\n");
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <SendGSMCodeL+0xb4>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fc fc66 	bl	8000108 <strlen>
 800383c:	0003      	movs	r3, r0
 800383e:	001a      	movs	r2, r3
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <SendGSMCodeL+0xb4>)
 8003842:	18d2      	adds	r2, r2, r3
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <SendGSMCodeL+0xc0>)
 8003846:	0010      	movs	r0, r2
 8003848:	0019      	movs	r1, r3
 800384a:	2303      	movs	r3, #3
 800384c:	001a      	movs	r2, r3
 800384e:	f00f fda5 	bl	801339c <memcpy>
	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <SendGSMCodeL+0xb4>)
 8003854:	0018      	movs	r0, r3
 8003856:	f004 fcff 	bl	8008258 <GSM_Tx>

	// return GSM_RxL();
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	200007a0 	.word	0x200007a0
 8003868:	200013b0 	.word	0x200013b0
 800386c:	2000070c 	.word	0x2000070c
 8003870:	000003de 	.word	0x000003de
 8003874:	20000dd4 	.word	0x20000dd4
 8003878:	20001674 	.word	0x20001674
 800387c:	2000000c 	.word	0x2000000c
 8003880:	08016b5c 	.word	0x08016b5c
 8003884:	08016b7c 	.word	0x08016b7c

08003888 <SendGSMData>:

void SendGSMData(const char data[])
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <SendGSMData+0x54>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	220c      	movs	r2, #12
 8003896:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003898:	4911      	ldr	r1, [pc, #68]	; (80038e0 <SendGSMData+0x58>)
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <SendGSMData+0x5c>)
 800389c:	2201      	movs	r2, #1
 800389e:	0018      	movs	r0, r3
 80038a0:	f009 fdda 	bl	800d458 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 80038a4:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <SendGSMData+0x60>)
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <SendGSMData+0x64>)
 80038a8:	2100      	movs	r1, #0
 80038aa:	0018      	movs	r0, r3
 80038ac:	f00f fbae 	bl	801300c <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 80038b0:	240c      	movs	r4, #12
 80038b2:	193b      	adds	r3, r7, r4
 80038b4:	2203      	movs	r2, #3
 80038b6:	2100      	movs	r1, #0
 80038b8:	0018      	movs	r0, r3
 80038ba:	f00f fba7 	bl	801300c <memset>
	end[0] = 0x1A;
 80038be:	193b      	adds	r3, r7, r4
 80038c0:	221a      	movs	r2, #26
 80038c2:	701a      	strb	r2, [r3, #0]
	// memset(GSMTXD,0,300);
	// if((strlen(data)>) &(debug==1)){Debug_Tx("Error:GSM Data Length Exceed");}
	// strcpy(GSMTXD,data);
	// strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0018      	movs	r0, r3
 80038c8:	f004 fce0 	bl	800828c <GSM_TxL>
	GSM_Tx((char *)end);
 80038cc:	193b      	adds	r3, r7, r4
 80038ce:	0018      	movs	r0, r3
 80038d0:	f004 fcc2 	bl	8008258 <GSM_Tx>

	// return GSM_Rx();
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b005      	add	sp, #20
 80038da:	bd90      	pop	{r4, r7, pc}
 80038dc:	200007a0 	.word	0x200007a0
 80038e0:	200013b0 	.word	0x200013b0
 80038e4:	2000070c 	.word	0x2000070c
 80038e8:	000003de 	.word	0x000003de
 80038ec:	20000dd4 	.word	0x20000dd4

080038f0 <EndTransfer>:

void EndTransfer()
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0

	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <EndTransfer+0x48>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	220c      	movs	r2, #12
 80038fc:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80038fe:	490f      	ldr	r1, [pc, #60]	; (800393c <EndTransfer+0x4c>)
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <EndTransfer+0x50>)
 8003902:	2201      	movs	r2, #1
 8003904:	0018      	movs	r0, r3
 8003906:	f009 fda7 	bl	800d458 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 990);
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <EndTransfer+0x54>)
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <EndTransfer+0x58>)
 800390e:	2100      	movs	r1, #0
 8003910:	0018      	movs	r0, r3
 8003912:	f00f fb7b 	bl	801300c <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	2203      	movs	r2, #3
 800391a:	2100      	movs	r1, #0
 800391c:	0018      	movs	r0, r3
 800391e:	f00f fb75 	bl	801300c <memset>
	end[0] = 0x1A;
 8003922:	1d3b      	adds	r3, r7, #4
 8003924:	221a      	movs	r2, #26
 8003926:	701a      	strb	r2, [r3, #0]
	GSM_Tx((char *)end);
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	0018      	movs	r0, r3
 800392c:	f004 fc94 	bl	8008258 <GSM_Tx>
	// return GSM_Rx();
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200007a0 	.word	0x200007a0
 800393c:	200013b0 	.word	0x200013b0
 8003940:	2000070c 	.word	0x2000070c
 8003944:	000003de 	.word	0x000003de
 8003948:	20000dd4 	.word	0x20000dd4

0800394c <waitForResponse>:
int waitForResponse(const char* expectedResponse, int timeout) {
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	memset(GSMReply3, 0, 500);
 8003956:	23fa      	movs	r3, #250	; 0xfa
 8003958:	005a      	lsls	r2, r3, #1
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <waitForResponse+0x80>)
 800395c:	2100      	movs	r1, #0
 800395e:	0018      	movs	r0, r3
 8003960:	f00f fb54 	bl	801300c <memset>
    uint16_t rxBufferIndex = 0;
 8003964:	2316      	movs	r3, #22
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2200      	movs	r2, #0
 800396a:	801a      	strh	r2, [r3, #0]
    int ret=0;
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]

	int stT = HAL_GetTick();
 8003970:	f005 f9de 	bl	8008d30 <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	60fb      	str	r3, [r7, #12]
	while (((HAL_GetTick() - stT) <= timeout)){
 8003978:	e01a      	b.n	80039b0 <waitForResponse+0x64>
        HAL_UART_Receive(&huart1, (uint8_t*)(GSMReply3 + rxBufferIndex), 1, HAL_MAX_DELAY);
 800397a:	2416      	movs	r4, #22
 800397c:	193b      	adds	r3, r7, r4
 800397e:	881a      	ldrh	r2, [r3, #0]
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <waitForResponse+0x80>)
 8003982:	18d1      	adds	r1, r2, r3
 8003984:	2301      	movs	r3, #1
 8003986:	425b      	negs	r3, r3
 8003988:	4811      	ldr	r0, [pc, #68]	; (80039d0 <waitForResponse+0x84>)
 800398a:	2201      	movs	r2, #1
 800398c:	f009 fc82 	bl	800d294 <HAL_UART_Receive>
        rxBufferIndex++;
 8003990:	193b      	adds	r3, r7, r4
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	193b      	adds	r3, r7, r4
 8003996:	3201      	adds	r2, #1
 8003998:	801a      	strh	r2, [r3, #0]

        if (strstr(GSMReply3, expectedResponse) != NULL) {
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <waitForResponse+0x80>)
 800399e:	0011      	movs	r1, r2
 80039a0:	0018      	movs	r0, r3
 80039a2:	f00f fbe3 	bl	801316c <strstr>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d002      	beq.n	80039b0 <waitForResponse+0x64>
        	ret=1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	613b      	str	r3, [r7, #16]
            break;
 80039ae:	e007      	b.n	80039c0 <waitForResponse+0x74>
	while (((HAL_GetTick() - stT) <= timeout)){
 80039b0:	f005 f9be 	bl	8008d30 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d9dc      	bls.n	800397a <waitForResponse+0x2e>
        }
    }
	return ret;
 80039c0:	693b      	ldr	r3, [r7, #16]

}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b007      	add	sp, #28
 80039c8:	bd90      	pop	{r4, r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	20001418 	.word	0x20001418
 80039d0:	2000070c 	.word	0x2000070c

080039d4 <GetGSMReply>:

char *GetGSMReply(int extra, const char *find, int gap, const char *LineEnd, const char *ErrorMsg, int timeout, const char *finChar)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
	memset(GSMReply, 0, 100);
 80039e2:	4b60      	ldr	r3, [pc, #384]	; (8003b64 <GetGSMReply+0x190>)
 80039e4:	2264      	movs	r2, #100	; 0x64
 80039e6:	2100      	movs	r1, #0
 80039e8:	0018      	movs	r0, r3
 80039ea:	f00f fb0f 	bl	801300c <memset>
	memset(GSMInData, 0, 1000);
 80039ee:	23fa      	movs	r3, #250	; 0xfa
 80039f0:	009a      	lsls	r2, r3, #2
 80039f2:	4b5d      	ldr	r3, [pc, #372]	; (8003b68 <GetGSMReply+0x194>)
 80039f4:	2100      	movs	r1, #0
 80039f6:	0018      	movs	r0, r3
 80039f8:	f00f fb08 	bl	801300c <memset>
	int stT = HAL_GetTick();
 80039fc:	f005 f998 	bl	8008d30 <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	61fb      	str	r3, [r7, #28]
	while (((HAL_GetTick() - stT) <= timeout))
 8003a04:	e08d      	b.n	8003b22 <GetGSMReply+0x14e>
	{
		HAL_Delay(70);
 8003a06:	2046      	movs	r0, #70	; 0x46
 8003a08:	f005 f99c 	bl	8008d44 <HAL_Delay>
		if (strlen(GSMData) > 0)
 8003a0c:	4b57      	ldr	r3, [pc, #348]	; (8003b6c <GetGSMReply+0x198>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d100      	bne.n	8003a16 <GetGSMReply+0x42>
 8003a14:	e075      	b.n	8003b02 <GetGSMReply+0x12e>
		{
			strcpy(GSMInData, GSMData);
 8003a16:	4a55      	ldr	r2, [pc, #340]	; (8003b6c <GetGSMReply+0x198>)
 8003a18:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <GetGSMReply+0x194>)
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f00f fcaa 	bl	8013376 <strcpy>
			char *pq = strstr(GSMInData, finChar);
 8003a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a24:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <GetGSMReply+0x194>)
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f00f fb9f 	bl	801316c <strstr>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	61bb      	str	r3, [r7, #24]
			if ((pq != NULL))
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d04b      	beq.n	8003ad0 <GetGSMReply+0xfc>
			{ // && (strlen(strstr(GSMInData,find))>gap)){

				if ((strlen(find) < 1))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <GetGSMReply+0x7a>
				{ // Return for
					strcpy(GSMReply, pq);
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <GetGSMReply+0x190>)
 8003a44:	0011      	movs	r1, r2
 8003a46:	0018      	movs	r0, r3
 8003a48:	f00f fc95 	bl	8013376 <strcpy>
					break;
 8003a4c:	e072      	b.n	8003b34 <GetGSMReply+0x160>
				}
				char *p = strstr(GSMInData, find);
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4b45      	ldr	r3, [pc, #276]	; (8003b68 <GetGSMReply+0x194>)
 8003a52:	0011      	movs	r1, r2
 8003a54:	0018      	movs	r0, r3
 8003a56:	f00f fb89 	bl	801316c <strstr>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	617b      	str	r3, [r7, #20]
				if ((strlen(LineEnd) < 1))
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <GetGSMReply+0xa0>
				{ // Return for
					strcpy(GSMReply, p);
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <GetGSMReply+0x190>)
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f00f fc82 	bl	8013376 <strcpy>
					break;
 8003a72:	e05f      	b.n	8003b34 <GetGSMReply+0x160>
				}
				else
				{
					if ((strstr(GSMInData, LineEnd) != NULL))
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	4b3c      	ldr	r3, [pc, #240]	; (8003b68 <GetGSMReply+0x194>)
 8003a78:	0011      	movs	r1, r2
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f00f fb76 	bl	801316c <strstr>
 8003a80:	1e03      	subs	r3, r0, #0
 8003a82:	d03a      	beq.n	8003afa <GetGSMReply+0x126>
					{
						if ((strlen(p + gap) > strlen(LineEnd)))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	18d3      	adds	r3, r2, r3
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f7fc fb3c 	bl	8000108 <strlen>
 8003a90:	0004      	movs	r4, r0
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7fc fb37 	bl	8000108 <strlen>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	d92c      	bls.n	8003afa <GetGSMReply+0x126>
						{
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	18d3      	adds	r3, r2, r3
 8003aa6:	6839      	ldr	r1, [r7, #0]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f00f fb59 	bl	8013162 <strtok_r>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	613b      	str	r3, [r7, #16]
							if (strlen(p1) < 88)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f7fc fb26 	bl	8000108 <strlen>
 8003abc:	0003      	movs	r3, r0
 8003abe:	2b57      	cmp	r3, #87	; 0x57
 8003ac0:	d81b      	bhi.n	8003afa <GetGSMReply+0x126>
							{
								strcpy(GSMReply, p1);
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <GetGSMReply+0x190>)
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f00f fc54 	bl	8013376 <strcpy>
								break;
 8003ace:	e031      	b.n	8003b34 <GetGSMReply+0x160>
					}
				}
			}
			else
			{
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 8003ad0:	4a27      	ldr	r2, [pc, #156]	; (8003b70 <GetGSMReply+0x19c>)
 8003ad2:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <GetGSMReply+0x194>)
 8003ad4:	0011      	movs	r1, r2
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f00f fb48 	bl	801316c <strstr>
 8003adc:	1e03      	subs	r3, r0, #0
 8003ade:	d107      	bne.n	8003af0 <GetGSMReply+0x11c>
 8003ae0:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <GetGSMReply+0x1a0>)
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <GetGSMReply+0x194>)
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f00f fb40 	bl	801316c <strstr>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d004      	beq.n	8003afa <GetGSMReply+0x126>
				{

					Debug_Tx("Err Found");
 8003af0:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <GetGSMReply+0x1a4>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f004 fb72 	bl	80081dc <Debug_Tx>
					break;
 8003af8:	e01c      	b.n	8003b34 <GetGSMReply+0x160>
				}
			}
			gsmER = 0;
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <GetGSMReply+0x1a8>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e00f      	b.n	8003b22 <GetGSMReply+0x14e>
		}
		else
		{
			gsmER++;
 8003b02:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <GetGSMReply+0x1a8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <GetGSMReply+0x1a8>)
 8003b0a:	601a      	str	r2, [r3, #0]
			if (gsmER > 9)
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <GetGSMReply+0x1a8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	dd06      	ble.n	8003b22 <GetGSMReply+0x14e>
			{
				RestartGSM();
 8003b14:	f7ff fdba 	bl	800368c <RestartGSM>
				restartGSMuart();
 8003b18:	f003 fc22 	bl	8007360 <restartGSMuart>
				gsmER = 0;
 8003b1c:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <GetGSMReply+0x1a8>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
	while (((HAL_GetTick() - stT) <= timeout))
 8003b22:	f005 f905 	bl	8008d30 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	1ad2      	subs	r2, r2, r3
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d800      	bhi.n	8003b34 <GetGSMReply+0x160>
 8003b32:	e768      	b.n	8003a06 <GetGSMReply+0x32>
			}
		}
	}

	// Debug_Tx(GSMInData);
	if (strlen(GSMReply) < 1)
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <GetGSMReply+0x190>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <GetGSMReply+0x180>
	{
		Debug_Tx("****");
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <GetGSMReply+0x1ac>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f004 fb4c 	bl	80081dc <Debug_Tx>
		Debug_Tx(GSMInData);
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <GetGSMReply+0x194>)
 8003b46:	0018      	movs	r0, r3
 8003b48:	f004 fb48 	bl	80081dc <Debug_Tx>
		Debug_Tx((char *)ErrorMsg);
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f004 fb44 	bl	80081dc <Debug_Tx>
		// Debug_Tx(GSMData);
		// Debug_Tx("****");
		// Debug_Tx(GSMReply);
		// Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 8003b54:	2064      	movs	r0, #100	; 0x64
 8003b56:	f005 f8f5 	bl	8008d44 <HAL_Delay>
	// if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
 8003b5a:	4b02      	ldr	r3, [pc, #8]	; (8003b64 <GetGSMReply+0x190>)
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b009      	add	sp, #36	; 0x24
 8003b62:	bd90      	pop	{r4, r7, pc}
 8003b64:	20001730 	.word	0x20001730
 8003b68:	200009ec 	.word	0x200009ec
 8003b6c:	20000dd4 	.word	0x20000dd4
 8003b70:	08016c04 	.word	0x08016c04
 8003b74:	08016c0c 	.word	0x08016c0c
 8003b78:	08016c14 	.word	0x08016c14
 8003b7c:	2000172c 	.word	0x2000172c
 8003b80:	08016c20 	.word	0x08016c20

08003b84 <GSMSigQuality>:

int GSMSigQuality()
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af04      	add	r7, sp, #16
	GSMSignal = 0;
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <GSMSigQuality+0xb8>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
	SendGSMCode(" AT+CSQ");
 8003b90:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <GSMSigQuality+0xbc>)
 8003b92:	0018      	movs	r0, r3
 8003b94:	f7ff fdb4 	bl	8003700 <SendGSMCode>
	HAL_Delay(100);
 8003b98:	2064      	movs	r0, #100	; 0x64
 8003b9a:	f005 f8d3 	bl	8008d44 <HAL_Delay>
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8003b9e:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <GSMSigQuality+0xc0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4829      	ldr	r0, [pc, #164]	; (8003c48 <GSMSigQuality+0xc4>)
 8003ba4:	4929      	ldr	r1, [pc, #164]	; (8003c4c <GSMSigQuality+0xc8>)
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <GSMSigQuality+0xcc>)
 8003ba8:	9202      	str	r2, [sp, #8]
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <GSMSigQuality+0xd0>)
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f7ff ff0d 	bl	80039d4 <GetGSMReply>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f00e f996 	bl	8011ef0 <strtod>
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	000b      	movs	r3, r1
 8003bc8:	0010      	movs	r0, r2
 8003bca:	0019      	movs	r1, r3
 8003bcc:	f7ff fab8 	bl	8003140 <__aeabi_d2f>
 8003bd0:	1c02      	adds	r2, r0, #0
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <GSMSigQuality+0xb8>)
 8003bd4:	601a      	str	r2, [r3, #0]

	if (GSMSignal > 5)
 8003bd6:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <GSMSigQuality+0xb8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	491f      	ldr	r1, [pc, #124]	; (8003c58 <GSMSigQuality+0xd4>)
 8003bdc:	1c18      	adds	r0, r3, #0
 8003bde:	f7fc fc89 	bl	80004f4 <__aeabi_fcmpgt>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d00a      	beq.n	8003bfc <GSMSigQuality+0x78>
	{
		SET_LED_NET(1);
 8003be6:	2001      	movs	r0, #1
 8003be8:	f7ff fcb8 	bl	800355c <SET_LED_NET>
		ServerConnected = 1;
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <GSMSigQuality+0xd8>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
		Debug_Tx("GSM HIGH");
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <GSMSigQuality+0xdc>)
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f004 faf1 	bl	80081dc <Debug_Tx>
 8003bfa:	e016      	b.n	8003c2a <GSMSigQuality+0xa6>
	}
	else
	{
		Debug_Tx("GSM low");
 8003bfc:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <GSMSigQuality+0xe0>)
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f004 faec 	bl	80081dc <Debug_Tx>
		Debug_Tx("GSM No Signal");
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <GSMSigQuality+0xe4>)
 8003c06:	0018      	movs	r0, r3
 8003c08:	f004 fae8 	bl	80081dc <Debug_Tx>
		gprsok = 0;
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <GSMSigQuality+0xe8>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
		ServerConnected = 0;
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <GSMSigQuality+0xd8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
		if (0)
			RestartGSM();
		restartGSMuart();
 8003c18:	f003 fba2 	bl	8007360 <restartGSMuart>
		Debug_Tx("GSMTRstarted");
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <GSMSigQuality+0xec>)
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f004 fadc 	bl	80081dc <Debug_Tx>
		SET_LED_NET(0);
 8003c24:	2000      	movs	r0, #0
 8003c26:	f7ff fc99 	bl	800355c <SET_LED_NET>
	}
	return (GSMSignal); // must be higher than 5 ,range 0-33
 8003c2a:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <GSMSigQuality+0xb8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	1c18      	adds	r0, r3, #0
 8003c30:	f7fd fb3c 	bl	80012ac <__aeabi_f2iz>
 8003c34:	0003      	movs	r3, r0
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20001798 	.word	0x20001798
 8003c40:	08016c28 	.word	0x08016c28
 8003c44:	20000014 	.word	0x20000014
 8003c48:	08016c30 	.word	0x08016c30
 8003c4c:	08016c34 	.word	0x08016c34
 8003c50:	08016c3c 	.word	0x08016c3c
 8003c54:	08016c40 	.word	0x08016c40
 8003c58:	40a00000 	.word	0x40a00000
 8003c5c:	20001814 	.word	0x20001814
 8003c60:	08016c60 	.word	0x08016c60
 8003c64:	08016c6c 	.word	0x08016c6c
 8003c68:	08016c74 	.word	0x08016c74
 8003c6c:	20001670 	.word	0x20001670
 8003c70:	08016c84 	.word	0x08016c84

08003c74 <GSMSimOperator>:

char *GSMSimOperator()
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af04      	add	r7, sp, #16

	SendGSMCode("  AT+COPS?");
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <GSMSimOperator+0x30>)
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7ff fd3f 	bl	8003700 <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <GSMSimOperator+0x34>)
 8003c84:	4909      	ldr	r1, [pc, #36]	; (8003cac <GSMSimOperator+0x38>)
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <GSMSimOperator+0x3c>)
 8003c88:	9302      	str	r3, [sp, #8]
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <GSMSimOperator+0x40>)
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <GSMSimOperator+0x44>)
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	0013      	movs	r3, r2
 8003c94:	220c      	movs	r2, #12
 8003c96:	2000      	movs	r0, #0
 8003c98:	f7ff fe9c 	bl	80039d4 <GetGSMReply>
 8003c9c:	0003      	movs	r3, r0
}
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	08016c94 	.word	0x08016c94
 8003ca8:	08016ca0 	.word	0x08016ca0
 8003cac:	08016ca4 	.word	0x08016ca4
 8003cb0:	08016cac 	.word	0x08016cac
 8003cb4:	00001388 	.word	0x00001388
 8003cb8:	08016cb0 	.word	0x08016cb0

08003cbc <GSMIMEI>:

	return (0);
}

char *GSMIMEI()
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af04      	add	r7, sp, #16
	SendGSMCode(" AT+QGSN");
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <GSMIMEI+0x34>)
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7ff fd1b 	bl	8003700 <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <GSMIMEI+0x38>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	480a      	ldr	r0, [pc, #40]	; (8003cf8 <GSMIMEI+0x3c>)
 8003cd0:	490a      	ldr	r1, [pc, #40]	; (8003cfc <GSMIMEI+0x40>)
 8003cd2:	4a0b      	ldr	r2, [pc, #44]	; (8003d00 <GSMIMEI+0x44>)
 8003cd4:	9202      	str	r2, [sp, #8]
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <GSMIMEI+0x48>)
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	0003      	movs	r3, r0
 8003cde:	2208      	movs	r2, #8
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7ff fe77 	bl	80039d4 <GetGSMReply>
 8003ce6:	0003      	movs	r3, r0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	08016d30 	.word	0x08016d30
 8003cf4:	20000014 	.word	0x20000014
 8003cf8:	08016ca0 	.word	0x08016ca0
 8003cfc:	08016d3c 	.word	0x08016d3c
 8003d00:	08016cac 	.word	0x08016cac
 8003d04:	08016d44 	.word	0x08016d44

08003d08 <StartTCPConnection>:
*/
	return 0;
}

void StartTCPConnection()
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af04      	add	r7, sp, #16
	int ck = 1;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	607b      	str	r3, [r7, #4]
	if (strlen(ip) > 4)
 8003d12:	4b54      	ldr	r3, [pc, #336]	; (8003e64 <StartTCPConnection+0x15c>)
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fc f9f7 	bl	8000108 <strlen>
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d93b      	bls.n	8003d98 <StartTCPConnection+0x90>
	{
		memset(GSMDataC, 0, 100);
 8003d20:	4b51      	ldr	r3, [pc, #324]	; (8003e68 <StartTCPConnection+0x160>)
 8003d22:	2264      	movs	r2, #100	; 0x64
 8003d24:	2100      	movs	r1, #0
 8003d26:	0018      	movs	r0, r3
 8003d28:	f00f f970 	bl	801300c <memset>
		strcpy(GSMDataC, (char *)" AT+QIOPEN=0,\"TCP\",\"");
 8003d2c:	4b4e      	ldr	r3, [pc, #312]	; (8003e68 <StartTCPConnection+0x160>)
 8003d2e:	4a4f      	ldr	r2, [pc, #316]	; (8003e6c <StartTCPConnection+0x164>)
 8003d30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d32:	c313      	stmia	r3!, {r0, r1, r4}
 8003d34:	ca03      	ldmia	r2!, {r0, r1}
 8003d36:	c303      	stmia	r3!, {r0, r1}
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]
		strcat(GSMDataC, ip);
 8003d3c:	4a49      	ldr	r2, [pc, #292]	; (8003e64 <StartTCPConnection+0x15c>)
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <StartTCPConnection+0x160>)
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f00f f96a 	bl	801301c <strcat>
		gprsok = 0;
 8003d48:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <StartTCPConnection+0x168>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
		while ((ck > 0) && (gprsok < 1))
 8003d4e:	e01c      	b.n	8003d8a <StartTCPConnection+0x82>
		{
			ck = ck - 1;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	607b      	str	r3, [r7, #4]
			SendGSMCode(GSMDataC);
 8003d56:	4b44      	ldr	r3, [pc, #272]	; (8003e68 <StartTCPConnection+0x160>)
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff fcd1 	bl	8003700 <SendGSMCode>
			// Debug_Tx(GetGSMReply(0,"",0,"","Error: AT+QIOPEN 0 TCP Connection open ",gpsto_net,"CONNECT OK"));

			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN 0 TCP Connection open ", gpsto_net, "CONNECT OK"));
 8003d5e:	4b45      	ldr	r3, [pc, #276]	; (8003e74 <StartTCPConnection+0x16c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4845      	ldr	r0, [pc, #276]	; (8003e78 <StartTCPConnection+0x170>)
 8003d64:	4944      	ldr	r1, [pc, #272]	; (8003e78 <StartTCPConnection+0x170>)
 8003d66:	4a45      	ldr	r2, [pc, #276]	; (8003e7c <StartTCPConnection+0x174>)
 8003d68:	9202      	str	r2, [sp, #8]
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	4b44      	ldr	r3, [pc, #272]	; (8003e80 <StartTCPConnection+0x178>)
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	0003      	movs	r3, r0
 8003d72:	2200      	movs	r2, #0
 8003d74:	2000      	movs	r0, #0
 8003d76:	f7ff fe2d 	bl	80039d4 <GetGSMReply>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fc f9c3 	bl	8000108 <strlen>
 8003d82:	0003      	movs	r3, r0
 8003d84:	001a      	movs	r2, r3
 8003d86:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <StartTCPConnection+0x168>)
 8003d88:	601a      	str	r2, [r3, #0]
		while ((ck > 0) && (gprsok < 1))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	dd03      	ble.n	8003d98 <StartTCPConnection+0x90>
 8003d90:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <StartTCPConnection+0x168>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	dddb      	ble.n	8003d50 <StartTCPConnection+0x48>
		}
	}


	HAL_Delay(1500);
 8003d98:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <StartTCPConnection+0x17c>)
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f004 ffd2 	bl	8008d44 <HAL_Delay>
	if(strlen(ip2)>4){
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d93d      	bls.n	8003e22 <StartTCPConnection+0x11a>
		memset(GSMDataC,0,100);
 8003da6:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <StartTCPConnection+0x160>)
 8003da8:	2264      	movs	r2, #100	; 0x64
 8003daa:	2100      	movs	r1, #0
 8003dac:	0018      	movs	r0, r3
 8003dae:	f00f f92d 	bl	801300c <memset>
		strcpy(GSMDataC,(char*)" AT+QIOPEN=1,\"TCP\",\"");
 8003db2:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <StartTCPConnection+0x160>)
 8003db4:	4a34      	ldr	r2, [pc, #208]	; (8003e88 <StartTCPConnection+0x180>)
 8003db6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003db8:	c313      	stmia	r3!, {r0, r1, r4}
 8003dba:	ca03      	ldmia	r2!, {r0, r1}
 8003dbc:	c303      	stmia	r3!, {r0, r1}
 8003dbe:	7812      	ldrb	r2, [r2, #0]
 8003dc0:	701a      	strb	r2, [r3, #0]
		strcat(GSMDataC,ip2);
 8003dc2:	4a32      	ldr	r2, [pc, #200]	; (8003e8c <StartTCPConnection+0x184>)
 8003dc4:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <StartTCPConnection+0x160>)
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f00f f927 	bl	801301c <strcat>
		ck=1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	607b      	str	r3, [r7, #4]
		gprsok=0;
 8003dd2:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <StartTCPConnection+0x168>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003dd8:	e01c      	b.n	8003e14 <StartTCPConnection+0x10c>
			ck=ck-1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	607b      	str	r3, [r7, #4]
			SendGSMCode(GSMDataC);
 8003de0:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <StartTCPConnection+0x160>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7ff fc8c 	bl	8003700 <SendGSMCode>
			gprsok=strlen(GetGSMReply(0,"",0,"","Error: AT+QIOPEN 1 TCP Connection open ",gpsto_net,"CONNECT OK"));
 8003de8:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <StartTCPConnection+0x16c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4822      	ldr	r0, [pc, #136]	; (8003e78 <StartTCPConnection+0x170>)
 8003dee:	4922      	ldr	r1, [pc, #136]	; (8003e78 <StartTCPConnection+0x170>)
 8003df0:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <StartTCPConnection+0x174>)
 8003df2:	9202      	str	r2, [sp, #8]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <StartTCPConnection+0x188>)
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f7ff fde8 	bl	80039d4 <GetGSMReply>
 8003e04:	0003      	movs	r3, r0
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7fc f97e 	bl	8000108 <strlen>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	001a      	movs	r2, r3
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <StartTCPConnection+0x168>)
 8003e12:	601a      	str	r2, [r3, #0]
		while((ck>0) && (gprsok<1)){
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dd03      	ble.n	8003e22 <StartTCPConnection+0x11a>
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <StartTCPConnection+0x168>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dddb      	ble.n	8003dda <StartTCPConnection+0xd2>
		}
	}
	if (gprsok)
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <StartTCPConnection+0x168>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <StartTCPConnection+0x132>
	{
		Debug_Tx("connected ip2 ");
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <StartTCPConnection+0x18c>)
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f004 f9d5 	bl	80081dc <Debug_Tx>
		ServerConnected = 1;
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <StartTCPConnection+0x190>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e002      	b.n	8003e40 <StartTCPConnection+0x138>
	}
	else
		ServerConnected = 0;
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <StartTCPConnection+0x190>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
	HAL_Delay(1500);
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <StartTCPConnection+0x17c>)
 8003e42:	0018      	movs	r0, r3
 8003e44:	f004 ff7e 	bl	8008d44 <HAL_Delay>
	SendTCPdata(data_LOGIN);
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <StartTCPConnection+0x194>)
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 f892 	bl	8003f74 <SendTCPdata>
	HAL_Delay(500);
 8003e50:	23fa      	movs	r3, #250	; 0xfa
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	0018      	movs	r0, r3
 8003e56:	f004 ff75 	bl	8008d44 <HAL_Delay>
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b003      	add	sp, #12
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	2000001c 	.word	0x2000001c
 8003e68:	200013b4 	.word	0x200013b4
 8003e6c:	08017020 	.word	0x08017020
 8003e70:	20001670 	.word	0x20001670
 8003e74:	20000010 	.word	0x20000010
 8003e78:	08016dac 	.word	0x08016dac
 8003e7c:	08017038 	.word	0x08017038
 8003e80:	08017044 	.word	0x08017044
 8003e84:	000005dc 	.word	0x000005dc
 8003e88:	0801706c 	.word	0x0801706c
 8003e8c:	20001810 	.word	0x20001810
 8003e90:	08017084 	.word	0x08017084
 8003e94:	080170ac 	.word	0x080170ac
 8003e98:	20001814 	.word	0x20001814
 8003e9c:	2000160c 	.word	0x2000160c

08003ea0 <StopTCPConnection>:
void StopTCPConnection()
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af04      	add	r7, sp, #16
	int ck = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	607b      	str	r3, [r7, #4]
	gprsok = 0;
 8003eaa:	4b29      	ldr	r3, [pc, #164]	; (8003f50 <StopTCPConnection+0xb0>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 8003eb0:	e040      	b.n	8003f34 <StopTCPConnection+0x94>
	{
		ck = ck - 1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	607b      	str	r3, [r7, #4]
		if (strlen(ip) > 4)
 8003eb8:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <StopTCPConnection+0xb4>)
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fc f924 	bl	8000108 <strlen>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d919      	bls.n	8003efa <StopTCPConnection+0x5a>
		{
			SendGSMCode(" AT+QICLOSE=0");
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <StopTCPConnection+0xb8>)
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7ff fc19 	bl	8003700 <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <StopTCPConnection+0xbc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4823      	ldr	r0, [pc, #140]	; (8003f60 <StopTCPConnection+0xc0>)
 8003ed4:	4922      	ldr	r1, [pc, #136]	; (8003f60 <StopTCPConnection+0xc0>)
 8003ed6:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <StopTCPConnection+0xc4>)
 8003ed8:	9202      	str	r2, [sp, #8]
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <StopTCPConnection+0xc8>)
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2005      	movs	r0, #5
 8003ee6:	f7ff fd75 	bl	80039d4 <GetGSMReply>
 8003eea:	0003      	movs	r3, r0
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7fc f90b 	bl	8000108 <strlen>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <StopTCPConnection+0xb0>)
 8003ef8:	601a      	str	r2, [r3, #0]
		}
		if (strlen(ip2) > 4)
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d919      	bls.n	8003f34 <StopTCPConnection+0x94>
		{
			SendGSMCode(" AT+QICLOSE=1");
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <StopTCPConnection+0xcc>)
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7ff fbfc 	bl	8003700 <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <StopTCPConnection+0xbc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4814      	ldr	r0, [pc, #80]	; (8003f60 <StopTCPConnection+0xc0>)
 8003f0e:	4914      	ldr	r1, [pc, #80]	; (8003f60 <StopTCPConnection+0xc0>)
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <StopTCPConnection+0xc4>)
 8003f12:	9202      	str	r2, [sp, #8]
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <StopTCPConnection+0xc8>)
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2005      	movs	r0, #5
 8003f20:	f7ff fd58 	bl	80039d4 <GetGSMReply>
 8003f24:	0003      	movs	r3, r0
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fc f8ee 	bl	8000108 <strlen>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	001a      	movs	r2, r3
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <StopTCPConnection+0xb0>)
 8003f32:	601a      	str	r2, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	dd03      	ble.n	8003f42 <StopTCPConnection+0xa2>
 8003f3a:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <StopTCPConnection+0xb0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	ddb7      	ble.n	8003eb2 <StopTCPConnection+0x12>
		}
	}
	ServerConnected = 0;
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <StopTCPConnection+0xd0>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20001670 	.word	0x20001670
 8003f54:	2000001c 	.word	0x2000001c
 8003f58:	080170bc 	.word	0x080170bc
 8003f5c:	20000014 	.word	0x20000014
 8003f60:	08016dac 	.word	0x08016dac
 8003f64:	080170cc 	.word	0x080170cc
 8003f68:	080170d8 	.word	0x080170d8
 8003f6c:	080170fc 	.word	0x080170fc
 8003f70:	20001814 	.word	0x20001814

08003f74 <SendTCPdata>:
void SendTCPdata(char *data)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	int ck = 1;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
	if (gprsok > 0)
 8003f80:	4b66      	ldr	r3, [pc, #408]	; (800411c <SendTCPdata+0x1a8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	dc00      	bgt.n	8003f8a <SendTCPdata+0x16>
 8003f88:	e0be      	b.n	8004108 <SendTCPdata+0x194>
	{
		//Debug_Tx("GPRSOK");
		if (strlen(ip) > 4)
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <SendTCPdata+0x1ac>)
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7fc f8bb 	bl	8000108 <strlen>
 8003f92:	0003      	movs	r3, r0
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d961      	bls.n	800405c <SendTCPdata+0xe8>
		{

			//Debug_Tx("IPOK");
			ck = 1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
			gprsok = 0;
 8003f9c:	4b5f      	ldr	r3, [pc, #380]	; (800411c <SendTCPdata+0x1a8>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
			//while ((ck > 0) && (gprsok < 1))
			{
				//Debug_Tx("CONNECTING TO SEND");
				ck = ck - 1;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]

				Debug_Tx("STUCKHERE CODE");
 8003fa8:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <SendTCPdata+0x1b0>)
 8003faa:	0018      	movs	r0, r3
 8003fac:	f004 f916 	bl	80081dc <Debug_Tx>
				SendGSMCode(" AT+QISEND=0");
 8003fb0:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <SendTCPdata+0x1b4>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7ff fba4 	bl	8003700 <SendGSMCode>

				gprsok = waitForResponse(">",1000);
 8003fb8:	23fa      	movs	r3, #250	; 0xfa
 8003fba:	009a      	lsls	r2, r3, #2
 8003fbc:	4b5b      	ldr	r3, [pc, #364]	; (800412c <SendTCPdata+0x1b8>)
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff fcc3 	bl	800394c <waitForResponse>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	4b54      	ldr	r3, [pc, #336]	; (800411c <SendTCPdata+0x1a8>)
 8003fca:	601a      	str	r2, [r3, #0]

				Debug_Tx("pass CODE");
 8003fcc:	4b58      	ldr	r3, [pc, #352]	; (8004130 <SendTCPdata+0x1bc>)
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f004 f904 	bl	80081dc <Debug_Tx>
				//gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data input1", 4000, ">"));
			}
			if (gprsok > 0)
 8003fd4:	4b51      	ldr	r3, [pc, #324]	; (800411c <SendTCPdata+0x1a8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	dd31      	ble.n	8004040 <SendTCPdata+0xcc>
			{
				ck = 1;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
				gprsok = 0;
 8003fe0:	4b4e      	ldr	r3, [pc, #312]	; (800411c <SendTCPdata+0x1a8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
				//while ((ck > 0) && (gprsok < 1))
				{
					ck = ck - 1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
					//Debug_Tx("SENDINGDATA");

					Debug_Tx("STUCKHERE data");
 8003fec:	4b51      	ldr	r3, [pc, #324]	; (8004134 <SendTCPdata+0x1c0>)
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f004 f8f4 	bl	80081dc <Debug_Tx>
					SendGSMData(data); // Debug_Tx(GSMData);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7ff fc46 	bl	8003888 <SendGSMData>
					gprsok = waitForResponse("SEND OK",1000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 8003ffc:	23fa      	movs	r3, #250	; 0xfa
 8003ffe:	009a      	lsls	r2, r3, #2
 8004000:	4b4d      	ldr	r3, [pc, #308]	; (8004138 <SendTCPdata+0x1c4>)
 8004002:	0011      	movs	r1, r2
 8004004:	0018      	movs	r0, r3
 8004006:	f7ff fca1 	bl	800394c <waitForResponse>
 800400a:	0002      	movs	r2, r0
 800400c:	4b43      	ldr	r3, [pc, #268]	; (800411c <SendTCPdata+0x1a8>)
 800400e:	601a      	str	r2, [r3, #0]

					Debug_Tx("pass DATA");
 8004010:	4b4a      	ldr	r3, [pc, #296]	; (800413c <SendTCPdata+0x1c8>)
 8004012:	0018      	movs	r0, r3
 8004014:	f004 f8e2 	bl	80081dc <Debug_Tx>
								}
				if (gprsok<1){//SendGSMData("    ");
 8004018:	4b40      	ldr	r3, [pc, #256]	; (800411c <SendTCPdata+0x1a8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	dc06      	bgt.n	800402e <SendTCPdata+0xba>
				Debug_Tx("UNABLE TO11 SEND DATA STOPED CONNECTion");EndTransfer();
 8004020:	4b47      	ldr	r3, [pc, #284]	; (8004140 <SendTCPdata+0x1cc>)
 8004022:	0018      	movs	r0, r3
 8004024:	f004 f8da 	bl	80081dc <Debug_Tx>
 8004028:	f7ff fc62 	bl	80038f0 <EndTransfer>
 800402c:	e016      	b.n	800405c <SendTCPdata+0xe8>
}
				else{Debug_Tx("DATASENT");Debug_Tx(data);}
 800402e:	4b45      	ldr	r3, [pc, #276]	; (8004144 <SendTCPdata+0x1d0>)
 8004030:	0018      	movs	r0, r3
 8004032:	f004 f8d3 	bl	80081dc <Debug_Tx>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0018      	movs	r0, r3
 800403a:	f004 f8cf 	bl	80081dc <Debug_Tx>
 800403e:	e00d      	b.n	800405c <SendTCPdata+0xe8>

			}
			else
			{
				SendGSMData("    ");
 8004040:	4b41      	ldr	r3, [pc, #260]	; (8004148 <SendTCPdata+0x1d4>)
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff fc20 	bl	8003888 <SendGSMData>
				Debug_Tx("UNABLE TO SEND11 DATA STOPED CONNECTion");
 8004048:	4b40      	ldr	r3, [pc, #256]	; (800414c <SendTCPdata+0x1d8>)
 800404a:	0018      	movs	r0, r3
 800404c:	f004 f8c6 	bl	80081dc <Debug_Tx>
				Debug_Tx(data);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	0018      	movs	r0, r3
 8004054:	f004 f8c2 	bl	80081dc <Debug_Tx>
				EndTransfer();
 8004058:	f7ff fc4a 	bl	80038f0 <EndTransfer>

			}
		}
		if (strlen(ip2) > 4)
 800405c:	2300      	movs	r3, #0
 800405e:	2b04      	cmp	r3, #4
 8004060:	d958      	bls.n	8004114 <SendTCPdata+0x1a0>
		{

			//Debug_Tx("IPOK");
			ck = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
			gprsok = 0;
 8004066:	4b2d      	ldr	r3, [pc, #180]	; (800411c <SendTCPdata+0x1a8>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
			//while ((ck > 0) && (gprsok < 1))
			{
				//Debug_Tx("CONNECTING TO SEND");
				ck = ck - 1;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3b01      	subs	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
				SendGSMCode(" AT+QISEND=1");
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <SendTCPdata+0x1dc>)
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff fb43 	bl	8003700 <SendGSMCode>

				gprsok = waitForResponse(">",1000);
 800407a:	23fa      	movs	r3, #250	; 0xfa
 800407c:	009a      	lsls	r2, r3, #2
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <SendTCPdata+0x1b8>)
 8004080:	0011      	movs	r1, r2
 8004082:	0018      	movs	r0, r3
 8004084:	f7ff fc62 	bl	800394c <waitForResponse>
 8004088:	0002      	movs	r2, r0
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <SendTCPdata+0x1a8>)
 800408c:	601a      	str	r2, [r3, #0]
				//gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data input1", 4000, ">"));
			}
			if (gprsok > 0)
 800408e:	4b23      	ldr	r3, [pc, #140]	; (800411c <SendTCPdata+0x1a8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	dd29      	ble.n	80040ea <SendTCPdata+0x176>
			{
				ck = 1;
 8004096:	2301      	movs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
				gprsok = 0;
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <SendTCPdata+0x1a8>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
				//while ((ck > 0) && (gprsok < 1))
				{
					ck = ck - 1;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
					//Debug_Tx("SENDINGDATA");

					SendGSMData(data); // Debug_Tx(GSMData);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7ff fbed 	bl	8003888 <SendGSMData>
					gprsok = waitForResponse("SEND OK",1000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 80040ae:	23fa      	movs	r3, #250	; 0xfa
 80040b0:	009a      	lsls	r2, r3, #2
 80040b2:	4b21      	ldr	r3, [pc, #132]	; (8004138 <SendTCPdata+0x1c4>)
 80040b4:	0011      	movs	r1, r2
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fc48 	bl	800394c <waitForResponse>
 80040bc:	0002      	movs	r2, r0
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <SendTCPdata+0x1a8>)
 80040c0:	601a      	str	r2, [r3, #0]

								}
				if (gprsok<1){//SendGSMData("    ");
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <SendTCPdata+0x1a8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	dc06      	bgt.n	80040d8 <SendTCPdata+0x164>
				Debug_Tx("UNABLE TO22 SEND DATA STOPED CONNECTion");EndTransfer();
 80040ca:	4b22      	ldr	r3, [pc, #136]	; (8004154 <SendTCPdata+0x1e0>)
 80040cc:	0018      	movs	r0, r3
 80040ce:	f004 f885 	bl	80081dc <Debug_Tx>
 80040d2:	f7ff fc0d 	bl	80038f0 <EndTransfer>
	else
	{
		Debug_Tx("DISCONNECTED FROM SERVER .resetting connection ");
		ResetTCP();
	}
}
 80040d6:	e01d      	b.n	8004114 <SendTCPdata+0x1a0>
				else{Debug_Tx("DATASENT");Debug_Tx(data);}
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <SendTCPdata+0x1d0>)
 80040da:	0018      	movs	r0, r3
 80040dc:	f004 f87e 	bl	80081dc <Debug_Tx>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f004 f87a 	bl	80081dc <Debug_Tx>
}
 80040e8:	e014      	b.n	8004114 <SendTCPdata+0x1a0>
				SendGSMData("    ");
 80040ea:	4b17      	ldr	r3, [pc, #92]	; (8004148 <SendTCPdata+0x1d4>)
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7ff fbcb 	bl	8003888 <SendGSMData>
				Debug_Tx("UNABLE TO 22SEND DATA STOPED CONNECTion");
 80040f2:	4b19      	ldr	r3, [pc, #100]	; (8004158 <SendTCPdata+0x1e4>)
 80040f4:	0018      	movs	r0, r3
 80040f6:	f004 f871 	bl	80081dc <Debug_Tx>
				Debug_Tx(data);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f004 f86d 	bl	80081dc <Debug_Tx>
				EndTransfer();
 8004102:	f7ff fbf5 	bl	80038f0 <EndTransfer>
}
 8004106:	e005      	b.n	8004114 <SendTCPdata+0x1a0>
		Debug_Tx("DISCONNECTED FROM SERVER .resetting connection ");
 8004108:	4b14      	ldr	r3, [pc, #80]	; (800415c <SendTCPdata+0x1e8>)
 800410a:	0018      	movs	r0, r3
 800410c:	f004 f866 	bl	80081dc <Debug_Tx>
		ResetTCP();
 8004110:	f000 fa88 	bl	8004624 <ResetTCP>
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b004      	add	sp, #16
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20001670 	.word	0x20001670
 8004120:	2000001c 	.word	0x2000001c
 8004124:	0801710c 	.word	0x0801710c
 8004128:	0801711c 	.word	0x0801711c
 800412c:	0801712c 	.word	0x0801712c
 8004130:	08017130 	.word	0x08017130
 8004134:	0801713c 	.word	0x0801713c
 8004138:	0801714c 	.word	0x0801714c
 800413c:	08017154 	.word	0x08017154
 8004140:	08017160 	.word	0x08017160
 8004144:	08017188 	.word	0x08017188
 8004148:	08017194 	.word	0x08017194
 800414c:	0801719c 	.word	0x0801719c
 8004150:	080171c4 	.word	0x080171c4
 8004154:	080171d4 	.word	0x080171d4
 8004158:	080171fc 	.word	0x080171fc
 800415c:	08017224 	.word	0x08017224

08004160 <GSMCellInfo>:

char *GSMCellInfo()
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b097      	sub	sp, #92	; 0x5c
 8004164:	af10      	add	r7, sp, #64	; 0x40

	memset(SS0, 0, 4);
 8004166:	4bcb      	ldr	r3, [pc, #812]	; (8004494 <GSMCellInfo+0x334>)
 8004168:	2204      	movs	r2, #4
 800416a:	2100      	movs	r1, #0
 800416c:	0018      	movs	r0, r3
 800416e:	f00e ff4d 	bl	801300c <memset>
	memset(SS1, 0, 4);
 8004172:	4bc9      	ldr	r3, [pc, #804]	; (8004498 <GSMCellInfo+0x338>)
 8004174:	2204      	movs	r2, #4
 8004176:	2100      	movs	r1, #0
 8004178:	0018      	movs	r0, r3
 800417a:	f00e ff47 	bl	801300c <memset>
	memset(SS2, 0, 4);
 800417e:	4bc7      	ldr	r3, [pc, #796]	; (800449c <GSMCellInfo+0x33c>)
 8004180:	2204      	movs	r2, #4
 8004182:	2100      	movs	r1, #0
 8004184:	0018      	movs	r0, r3
 8004186:	f00e ff41 	bl	801300c <memset>
	memset(SS3, 0, 4);
 800418a:	4bc5      	ldr	r3, [pc, #788]	; (80044a0 <GSMCellInfo+0x340>)
 800418c:	2204      	movs	r2, #4
 800418e:	2100      	movs	r1, #0
 8004190:	0018      	movs	r0, r3
 8004192:	f00e ff3b 	bl	801300c <memset>
	memset(SS4, 0, 4);
 8004196:	4bc3      	ldr	r3, [pc, #780]	; (80044a4 <GSMCellInfo+0x344>)
 8004198:	2204      	movs	r2, #4
 800419a:	2100      	movs	r1, #0
 800419c:	0018      	movs	r0, r3
 800419e:	f00e ff35 	bl	801300c <memset>
	memset(MCC0, 0, 5);
 80041a2:	4bc1      	ldr	r3, [pc, #772]	; (80044a8 <GSMCellInfo+0x348>)
 80041a4:	2205      	movs	r2, #5
 80041a6:	2100      	movs	r1, #0
 80041a8:	0018      	movs	r0, r3
 80041aa:	f00e ff2f 	bl	801300c <memset>
	memset(MNC0, 0, 5);
 80041ae:	4bbf      	ldr	r3, [pc, #764]	; (80044ac <GSMCellInfo+0x34c>)
 80041b0:	2205      	movs	r2, #5
 80041b2:	2100      	movs	r1, #0
 80041b4:	0018      	movs	r0, r3
 80041b6:	f00e ff29 	bl	801300c <memset>
	memset(LAC0, 0, 6);
 80041ba:	4bbd      	ldr	r3, [pc, #756]	; (80044b0 <GSMCellInfo+0x350>)
 80041bc:	2206      	movs	r2, #6
 80041be:	2100      	movs	r1, #0
 80041c0:	0018      	movs	r0, r3
 80041c2:	f00e ff23 	bl	801300c <memset>
	memset(LAC1, 0, 6);
 80041c6:	4bbb      	ldr	r3, [pc, #748]	; (80044b4 <GSMCellInfo+0x354>)
 80041c8:	2206      	movs	r2, #6
 80041ca:	2100      	movs	r1, #0
 80041cc:	0018      	movs	r0, r3
 80041ce:	f00e ff1d 	bl	801300c <memset>
	memset(LAC2, 0, 6);
 80041d2:	4bb9      	ldr	r3, [pc, #740]	; (80044b8 <GSMCellInfo+0x358>)
 80041d4:	2206      	movs	r2, #6
 80041d6:	2100      	movs	r1, #0
 80041d8:	0018      	movs	r0, r3
 80041da:	f00e ff17 	bl	801300c <memset>
	memset(LAC3, 0, 6);
 80041de:	4bb7      	ldr	r3, [pc, #732]	; (80044bc <GSMCellInfo+0x35c>)
 80041e0:	2206      	movs	r2, #6
 80041e2:	2100      	movs	r1, #0
 80041e4:	0018      	movs	r0, r3
 80041e6:	f00e ff11 	bl	801300c <memset>
	memset(LAC4, 0, 6);
 80041ea:	4bb5      	ldr	r3, [pc, #724]	; (80044c0 <GSMCellInfo+0x360>)
 80041ec:	2206      	movs	r2, #6
 80041ee:	2100      	movs	r1, #0
 80041f0:	0018      	movs	r0, r3
 80041f2:	f00e ff0b 	bl	801300c <memset>
	memset(CID4, 0, 6);
 80041f6:	4bb3      	ldr	r3, [pc, #716]	; (80044c4 <GSMCellInfo+0x364>)
 80041f8:	2206      	movs	r2, #6
 80041fa:	2100      	movs	r1, #0
 80041fc:	0018      	movs	r0, r3
 80041fe:	f00e ff05 	bl	801300c <memset>
	memset(CID3, 0, 6);
 8004202:	4bb1      	ldr	r3, [pc, #708]	; (80044c8 <GSMCellInfo+0x368>)
 8004204:	2206      	movs	r2, #6
 8004206:	2100      	movs	r1, #0
 8004208:	0018      	movs	r0, r3
 800420a:	f00e feff 	bl	801300c <memset>
	memset(CID2, 0, 6);
 800420e:	4baf      	ldr	r3, [pc, #700]	; (80044cc <GSMCellInfo+0x36c>)
 8004210:	2206      	movs	r2, #6
 8004212:	2100      	movs	r1, #0
 8004214:	0018      	movs	r0, r3
 8004216:	f00e fef9 	bl	801300c <memset>
	memset(CID1, 0, 6);
 800421a:	4bad      	ldr	r3, [pc, #692]	; (80044d0 <GSMCellInfo+0x370>)
 800421c:	2206      	movs	r2, #6
 800421e:	2100      	movs	r1, #0
 8004220:	0018      	movs	r0, r3
 8004222:	f00e fef3 	bl	801300c <memset>
	memset(CID0, 0, 6);
 8004226:	4bab      	ldr	r3, [pc, #684]	; (80044d4 <GSMCellInfo+0x374>)
 8004228:	2206      	movs	r2, #6
 800422a:	2100      	movs	r1, #0
 800422c:	0018      	movs	r0, r3
 800422e:	f00e feed 	bl	801300c <memset>
	strcpy(MCC0, "x\0");
 8004232:	4b9d      	ldr	r3, [pc, #628]	; (80044a8 <GSMCellInfo+0x348>)
 8004234:	2278      	movs	r2, #120	; 0x78
 8004236:	801a      	strh	r2, [r3, #0]
	strcpy(MNC0, "x\0");
 8004238:	4b9c      	ldr	r3, [pc, #624]	; (80044ac <GSMCellInfo+0x34c>)
 800423a:	2278      	movs	r2, #120	; 0x78
 800423c:	801a      	strh	r2, [r3, #0]
	strcpy(LAC0, "x\0");
 800423e:	4b9c      	ldr	r3, [pc, #624]	; (80044b0 <GSMCellInfo+0x350>)
 8004240:	2278      	movs	r2, #120	; 0x78
 8004242:	801a      	strh	r2, [r3, #0]
	strcpy(CID0, "x\0");
 8004244:	4ba3      	ldr	r3, [pc, #652]	; (80044d4 <GSMCellInfo+0x374>)
 8004246:	2278      	movs	r2, #120	; 0x78
 8004248:	801a      	strh	r2, [r3, #0]
	strcpy(SS0, "x\0");
 800424a:	4b92      	ldr	r3, [pc, #584]	; (8004494 <GSMCellInfo+0x334>)
 800424c:	2278      	movs	r2, #120	; 0x78
 800424e:	801a      	strh	r2, [r3, #0]
	strcpy(SS1, "x\0");
 8004250:	4b91      	ldr	r3, [pc, #580]	; (8004498 <GSMCellInfo+0x338>)
 8004252:	2278      	movs	r2, #120	; 0x78
 8004254:	801a      	strh	r2, [r3, #0]
	strcpy(CID1, "x\0");
 8004256:	4b9e      	ldr	r3, [pc, #632]	; (80044d0 <GSMCellInfo+0x370>)
 8004258:	2278      	movs	r2, #120	; 0x78
 800425a:	801a      	strh	r2, [r3, #0]
	strcpy(LAC1, "x\0");
 800425c:	4b95      	ldr	r3, [pc, #596]	; (80044b4 <GSMCellInfo+0x354>)
 800425e:	2278      	movs	r2, #120	; 0x78
 8004260:	801a      	strh	r2, [r3, #0]

	strcpy(SS2, "x\0");
 8004262:	4b8e      	ldr	r3, [pc, #568]	; (800449c <GSMCellInfo+0x33c>)
 8004264:	2278      	movs	r2, #120	; 0x78
 8004266:	801a      	strh	r2, [r3, #0]
	strcpy(CID2, "x\0");
 8004268:	4b98      	ldr	r3, [pc, #608]	; (80044cc <GSMCellInfo+0x36c>)
 800426a:	2278      	movs	r2, #120	; 0x78
 800426c:	801a      	strh	r2, [r3, #0]
	strcpy(LAC2, "x\0");
 800426e:	4b92      	ldr	r3, [pc, #584]	; (80044b8 <GSMCellInfo+0x358>)
 8004270:	2278      	movs	r2, #120	; 0x78
 8004272:	801a      	strh	r2, [r3, #0]

	strcpy(SS3, "x\0");
 8004274:	4b8a      	ldr	r3, [pc, #552]	; (80044a0 <GSMCellInfo+0x340>)
 8004276:	2278      	movs	r2, #120	; 0x78
 8004278:	801a      	strh	r2, [r3, #0]
	strcpy(CID3, "x\0");
 800427a:	4b93      	ldr	r3, [pc, #588]	; (80044c8 <GSMCellInfo+0x368>)
 800427c:	2278      	movs	r2, #120	; 0x78
 800427e:	801a      	strh	r2, [r3, #0]
	strcpy(LAC3, "x\0");
 8004280:	4b8e      	ldr	r3, [pc, #568]	; (80044bc <GSMCellInfo+0x35c>)
 8004282:	2278      	movs	r2, #120	; 0x78
 8004284:	801a      	strh	r2, [r3, #0]

	strcpy(SS4, "x\0");
 8004286:	4b87      	ldr	r3, [pc, #540]	; (80044a4 <GSMCellInfo+0x344>)
 8004288:	2278      	movs	r2, #120	; 0x78
 800428a:	801a      	strh	r2, [r3, #0]
	strcpy(CID4, "x\0");
 800428c:	4b8d      	ldr	r3, [pc, #564]	; (80044c4 <GSMCellInfo+0x364>)
 800428e:	2278      	movs	r2, #120	; 0x78
 8004290:	801a      	strh	r2, [r3, #0]
	strcpy(LAC4, "x\0");
 8004292:	4b8b      	ldr	r3, [pc, #556]	; (80044c0 <GSMCellInfo+0x360>)
 8004294:	2278      	movs	r2, #120	; 0x78
 8004296:	801a      	strh	r2, [r3, #0]

	memset(GSMData, 0, 800);
 8004298:	23c8      	movs	r3, #200	; 0xc8
 800429a:	009a      	lsls	r2, r3, #2
 800429c:	4b8e      	ldr	r3, [pc, #568]	; (80044d8 <GSMCellInfo+0x378>)
 800429e:	2100      	movs	r1, #0
 80042a0:	0018      	movs	r0, r3
 80042a2:	f00e feb3 	bl	801300c <memset>

	SendGSMCodeL(" AT+QENG?");
 80042a6:	4b8d      	ldr	r3, [pc, #564]	; (80044dc <GSMCellInfo+0x37c>)
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7ff fa8b 	bl	80037c4 <SendGSMCodeL>
	// Debug_Tx(GSMData);

	HAL_Delay(500);
 80042ae:	23fa      	movs	r3, #250	; 0xfa
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	0018      	movs	r0, r3
 80042b4:	f004 fd46 	bl	8008d44 <HAL_Delay>

	char *m0 = strstr(GSMData, "+QENG: 0");
 80042b8:	4a89      	ldr	r2, [pc, #548]	; (80044e0 <GSMCellInfo+0x380>)
 80042ba:	4b87      	ldr	r3, [pc, #540]	; (80044d8 <GSMCellInfo+0x378>)
 80042bc:	0011      	movs	r1, r2
 80042be:	0018      	movs	r0, r3
 80042c0:	f00e ff54 	bl	801316c <strstr>
 80042c4:	0003      	movs	r3, r0
 80042c6:	607b      	str	r3, [r7, #4]
	if ((m0 != NULL) & (strlen(m0) > 1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	1e5a      	subs	r2, r3, #1
 80042cc:	4193      	sbcs	r3, r2
 80042ce:	b2dc      	uxtb	r4, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7fb ff18 	bl	8000108 <strlen>
 80042d8:	0003      	movs	r3, r0
 80042da:	2201      	movs	r2, #1
 80042dc:	429a      	cmp	r2, r3
 80042de:	419b      	sbcs	r3, r3
 80042e0:	425b      	negs	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	4023      	ands	r3, r4
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d042      	beq.n	8004372 <GSMCellInfo+0x212>
	{

		// Debug_Tx(m0);
		int k = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
		char *part;
		while ((part = strtok_r(m0, ",", &m0)))
 80042f0:	e033      	b.n	800435a <GSMCellInfo+0x1fa>
		{
			if (k == 1)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <GSMCellInfo+0x1a6>
				strcpy(MCC0, part);
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <GSMCellInfo+0x348>)
 80042fc:	0011      	movs	r1, r2
 80042fe:	0018      	movs	r0, r3
 8004300:	f00f f839 	bl	8013376 <strcpy>
 8004304:	e026      	b.n	8004354 <GSMCellInfo+0x1f4>
			else if (k == 2)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d106      	bne.n	800431a <GSMCellInfo+0x1ba>
				strcpy(MNC0, part);
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4b67      	ldr	r3, [pc, #412]	; (80044ac <GSMCellInfo+0x34c>)
 8004310:	0011      	movs	r1, r2
 8004312:	0018      	movs	r0, r3
 8004314:	f00f f82f 	bl	8013376 <strcpy>
 8004318:	e01c      	b.n	8004354 <GSMCellInfo+0x1f4>
			else if (k == 3)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d106      	bne.n	800432e <GSMCellInfo+0x1ce>
				strcpy(LAC0, part);
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4b63      	ldr	r3, [pc, #396]	; (80044b0 <GSMCellInfo+0x350>)
 8004324:	0011      	movs	r1, r2
 8004326:	0018      	movs	r0, r3
 8004328:	f00f f825 	bl	8013376 <strcpy>
 800432c:	e012      	b.n	8004354 <GSMCellInfo+0x1f4>
			else if (k == 4)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d106      	bne.n	8004342 <GSMCellInfo+0x1e2>
				strcpy(CID0, part);
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4b67      	ldr	r3, [pc, #412]	; (80044d4 <GSMCellInfo+0x374>)
 8004338:	0011      	movs	r1, r2
 800433a:	0018      	movs	r0, r3
 800433c:	f00f f81b 	bl	8013376 <strcpy>
 8004340:	e008      	b.n	8004354 <GSMCellInfo+0x1f4>
			else if (k == 7)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b07      	cmp	r3, #7
 8004346:	d105      	bne.n	8004354 <GSMCellInfo+0x1f4>
				strcpy(SS0, part);
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4b52      	ldr	r3, [pc, #328]	; (8004494 <GSMCellInfo+0x334>)
 800434c:	0011      	movs	r1, r2
 800434e:	0018      	movs	r0, r3
 8004350:	f00f f811 	bl	8013376 <strcpy>
			k++;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3301      	adds	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
		while ((part = strtok_r(m0, ",", &m0)))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	1d3a      	adds	r2, r7, #4
 800435e:	4961      	ldr	r1, [pc, #388]	; (80044e4 <GSMCellInfo+0x384>)
 8004360:	0018      	movs	r0, r3
 8004362:	f00e fefe 	bl	8013162 <strtok_r>
 8004366:	0003      	movs	r3, r0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1c0      	bne.n	80042f2 <GSMCellInfo+0x192>
 8004370:	e003      	b.n	800437a <GSMCellInfo+0x21a>
		}
	}
	else
	{
		Debug_Tx("GSM tower data  Signal");
 8004372:	4b5d      	ldr	r3, [pc, #372]	; (80044e8 <GSMCellInfo+0x388>)
 8004374:	0018      	movs	r0, r3
 8004376:	f003 ff31 	bl	80081dc <Debug_Tx>
	}
	char *m1 = strstr(GSMData, "+QENG: 1");
 800437a:	4a5c      	ldr	r2, [pc, #368]	; (80044ec <GSMCellInfo+0x38c>)
 800437c:	4b56      	ldr	r3, [pc, #344]	; (80044d8 <GSMCellInfo+0x378>)
 800437e:	0011      	movs	r1, r2
 8004380:	0018      	movs	r0, r3
 8004382:	f00e fef3 	bl	801316c <strstr>
 8004386:	0003      	movs	r3, r0
 8004388:	603b      	str	r3, [r7, #0]
	if ((m1 != NULL) & (strlen(m1) > 1))
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	1e5a      	subs	r2, r3, #1
 800438e:	4193      	sbcs	r3, r2
 8004390:	b2dc      	uxtb	r4, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	0018      	movs	r0, r3
 8004396:	f7fb feb7 	bl	8000108 <strlen>
 800439a:	0003      	movs	r3, r0
 800439c:	2201      	movs	r2, #1
 800439e:	429a      	cmp	r2, r3
 80043a0:	419b      	sbcs	r3, r3
 80043a2:	425b      	negs	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	4023      	ands	r3, r4
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d100      	bne.n	80043b0 <GSMCellInfo+0x250>
 80043ae:	e0b7      	b.n	8004520 <GSMCellInfo+0x3c0>
	{
		// Debug_Tx(m1);
		int k = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
		char *part;
		while ((part = strtok_r(m1, ",", &m1)))
 80043b4:	e0a8      	b.n	8004508 <GSMCellInfo+0x3a8>
		{
			if (k == 3)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d106      	bne.n	80043ca <GSMCellInfo+0x26a>
				strcpy(SS1, part);
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <GSMCellInfo+0x338>)
 80043c0:	0011      	movs	r1, r2
 80043c2:	0018      	movs	r0, r3
 80043c4:	f00e ffd7 	bl	8013376 <strcpy>
 80043c8:	e09b      	b.n	8004502 <GSMCellInfo+0x3a2>
			else if (k == 10)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b0a      	cmp	r3, #10
 80043ce:	d106      	bne.n	80043de <GSMCellInfo+0x27e>
				strcpy(CID1, part);
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	4b3f      	ldr	r3, [pc, #252]	; (80044d0 <GSMCellInfo+0x370>)
 80043d4:	0011      	movs	r1, r2
 80043d6:	0018      	movs	r0, r3
 80043d8:	f00e ffcd 	bl	8013376 <strcpy>
 80043dc:	e091      	b.n	8004502 <GSMCellInfo+0x3a2>
			else if (k == 9)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b09      	cmp	r3, #9
 80043e2:	d106      	bne.n	80043f2 <GSMCellInfo+0x292>
				strcpy(LAC1, part);
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	4b33      	ldr	r3, [pc, #204]	; (80044b4 <GSMCellInfo+0x354>)
 80043e8:	0011      	movs	r1, r2
 80043ea:	0018      	movs	r0, r3
 80043ec:	f00e ffc3 	bl	8013376 <strcpy>
 80043f0:	e087      	b.n	8004502 <GSMCellInfo+0x3a2>

			else if (k == 13)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b0d      	cmp	r3, #13
 80043f6:	d106      	bne.n	8004406 <GSMCellInfo+0x2a6>
				strcpy(SS2, part);
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <GSMCellInfo+0x33c>)
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f00e ffb9 	bl	8013376 <strcpy>
 8004404:	e07d      	b.n	8004502 <GSMCellInfo+0x3a2>
			else if (k == 20)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b14      	cmp	r3, #20
 800440a:	d106      	bne.n	800441a <GSMCellInfo+0x2ba>
				strcpy(CID2, part);
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	4b2f      	ldr	r3, [pc, #188]	; (80044cc <GSMCellInfo+0x36c>)
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f00e ffaf 	bl	8013376 <strcpy>
 8004418:	e073      	b.n	8004502 <GSMCellInfo+0x3a2>
			else if (k == 19)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b13      	cmp	r3, #19
 800441e:	d106      	bne.n	800442e <GSMCellInfo+0x2ce>
				strcpy(LAC2, part);
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <GSMCellInfo+0x358>)
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f00e ffa5 	bl	8013376 <strcpy>
 800442c:	e069      	b.n	8004502 <GSMCellInfo+0x3a2>

			else if (k == 23)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b17      	cmp	r3, #23
 8004432:	d106      	bne.n	8004442 <GSMCellInfo+0x2e2>
				strcpy(SS3, part);
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <GSMCellInfo+0x340>)
 8004438:	0011      	movs	r1, r2
 800443a:	0018      	movs	r0, r3
 800443c:	f00e ff9b 	bl	8013376 <strcpy>
 8004440:	e05f      	b.n	8004502 <GSMCellInfo+0x3a2>
			else if (k == 30)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b1e      	cmp	r3, #30
 8004446:	d106      	bne.n	8004456 <GSMCellInfo+0x2f6>
				strcpy(CID3, part);
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	4b1f      	ldr	r3, [pc, #124]	; (80044c8 <GSMCellInfo+0x368>)
 800444c:	0011      	movs	r1, r2
 800444e:	0018      	movs	r0, r3
 8004450:	f00e ff91 	bl	8013376 <strcpy>
 8004454:	e055      	b.n	8004502 <GSMCellInfo+0x3a2>
			else if (k == 29)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b1d      	cmp	r3, #29
 800445a:	d106      	bne.n	800446a <GSMCellInfo+0x30a>
				strcpy(LAC3, part);
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <GSMCellInfo+0x35c>)
 8004460:	0011      	movs	r1, r2
 8004462:	0018      	movs	r0, r3
 8004464:	f00e ff87 	bl	8013376 <strcpy>
 8004468:	e04b      	b.n	8004502 <GSMCellInfo+0x3a2>

			else if (k == 33)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b21      	cmp	r3, #33	; 0x21
 800446e:	d106      	bne.n	800447e <GSMCellInfo+0x31e>
				strcpy(SS4, part);
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <GSMCellInfo+0x344>)
 8004474:	0011      	movs	r1, r2
 8004476:	0018      	movs	r0, r3
 8004478:	f00e ff7d 	bl	8013376 <strcpy>
 800447c:	e041      	b.n	8004502 <GSMCellInfo+0x3a2>
			else if (k == 40)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b28      	cmp	r3, #40	; 0x28
 8004482:	d135      	bne.n	80044f0 <GSMCellInfo+0x390>
				strcpy(CID4, part);
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <GSMCellInfo+0x364>)
 8004488:	0011      	movs	r1, r2
 800448a:	0018      	movs	r0, r3
 800448c:	f00e ff73 	bl	8013376 <strcpy>
 8004490:	e037      	b.n	8004502 <GSMCellInfo+0x3a2>
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	2000179c 	.word	0x2000179c
 8004498:	200017c0 	.word	0x200017c0
 800449c:	200017d4 	.word	0x200017d4
 80044a0:	200017e8 	.word	0x200017e8
 80044a4:	200017fc 	.word	0x200017fc
 80044a8:	200017a0 	.word	0x200017a0
 80044ac:	200017a8 	.word	0x200017a8
 80044b0:	200017b0 	.word	0x200017b0
 80044b4:	200017c4 	.word	0x200017c4
 80044b8:	200017d8 	.word	0x200017d8
 80044bc:	200017ec 	.word	0x200017ec
 80044c0:	20001800 	.word	0x20001800
 80044c4:	20001808 	.word	0x20001808
 80044c8:	200017f4 	.word	0x200017f4
 80044cc:	200017e0 	.word	0x200017e0
 80044d0:	200017cc 	.word	0x200017cc
 80044d4:	200017b8 	.word	0x200017b8
 80044d8:	20000dd4 	.word	0x20000dd4
 80044dc:	08017254 	.word	0x08017254
 80044e0:	08017260 	.word	0x08017260
 80044e4:	08016c30 	.word	0x08016c30
 80044e8:	0801726c 	.word	0x0801726c
 80044ec:	08017284 	.word	0x08017284
			else if (k == 39)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b27      	cmp	r3, #39	; 0x27
 80044f4:	d105      	bne.n	8004502 <GSMCellInfo+0x3a2>
				strcpy(LAC4, part);
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <GSMCellInfo+0x42c>)
 80044fa:	0011      	movs	r1, r2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f00e ff3a 	bl	8013376 <strcpy>
			k++;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3301      	adds	r3, #1
 8004506:	613b      	str	r3, [r7, #16]
		while ((part = strtok_r(m1, ",", &m1)))
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	003a      	movs	r2, r7
 800450c:	4920      	ldr	r1, [pc, #128]	; (8004590 <GSMCellInfo+0x430>)
 800450e:	0018      	movs	r0, r3
 8004510:	f00e fe27 	bl	8013162 <strtok_r>
 8004514:	0003      	movs	r3, r0
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d000      	beq.n	8004520 <GSMCellInfo+0x3c0>
 800451e:	e74a      	b.n	80043b6 <GSMCellInfo+0x256>
		}
	}

	//

	memset(gsminfo, 0, 80);
 8004520:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <GSMCellInfo+0x434>)
 8004522:	2250      	movs	r2, #80	; 0x50
 8004524:	2100      	movs	r1, #0
 8004526:	0018      	movs	r0, r3
 8004528:	f00e fd70 	bl	801300c <memset>
	sprintf(gsminfo, "%2d,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s,%4s", (int)GSMSignal, MCC0, MNC0, LAC0, CID0, CID1, LAC1, SS1, CID2, LAC2, SS2, CID3, LAC3, SS3, CID4, LAC4, SS4);
 800452c:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <GSMCellInfo+0x438>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	1c18      	adds	r0, r3, #0
 8004532:	f7fc febb 	bl	80012ac <__aeabi_f2iz>
 8004536:	0004      	movs	r4, r0
 8004538:	4a18      	ldr	r2, [pc, #96]	; (800459c <GSMCellInfo+0x43c>)
 800453a:	4919      	ldr	r1, [pc, #100]	; (80045a0 <GSMCellInfo+0x440>)
 800453c:	4815      	ldr	r0, [pc, #84]	; (8004594 <GSMCellInfo+0x434>)
 800453e:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <GSMCellInfo+0x444>)
 8004540:	930e      	str	r3, [sp, #56]	; 0x38
 8004542:	4b12      	ldr	r3, [pc, #72]	; (800458c <GSMCellInfo+0x42c>)
 8004544:	930d      	str	r3, [sp, #52]	; 0x34
 8004546:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <GSMCellInfo+0x448>)
 8004548:	930c      	str	r3, [sp, #48]	; 0x30
 800454a:	4b18      	ldr	r3, [pc, #96]	; (80045ac <GSMCellInfo+0x44c>)
 800454c:	930b      	str	r3, [sp, #44]	; 0x2c
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <GSMCellInfo+0x450>)
 8004550:	930a      	str	r3, [sp, #40]	; 0x28
 8004552:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <GSMCellInfo+0x454>)
 8004554:	9309      	str	r3, [sp, #36]	; 0x24
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <GSMCellInfo+0x458>)
 8004558:	9308      	str	r3, [sp, #32]
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <GSMCellInfo+0x45c>)
 800455c:	9307      	str	r3, [sp, #28]
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <GSMCellInfo+0x460>)
 8004560:	9306      	str	r3, [sp, #24]
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <GSMCellInfo+0x464>)
 8004564:	9305      	str	r3, [sp, #20]
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <GSMCellInfo+0x468>)
 8004568:	9304      	str	r3, [sp, #16]
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <GSMCellInfo+0x46c>)
 800456c:	9303      	str	r3, [sp, #12]
 800456e:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <GSMCellInfo+0x470>)
 8004570:	9302      	str	r3, [sp, #8]
 8004572:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <GSMCellInfo+0x474>)
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <GSMCellInfo+0x478>)
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	0013      	movs	r3, r2
 800457c:	0022      	movs	r2, r4
 800457e:	f00e fcd9 	bl	8012f34 <siprintf>
	// Debug_Tx(gsminfo);

	return (gsminfo);
 8004582:	4b04      	ldr	r3, [pc, #16]	; (8004594 <GSMCellInfo+0x434>)
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b007      	add	sp, #28
 800458a:	bd90      	pop	{r4, r7, pc}
 800458c:	20001800 	.word	0x20001800
 8004590:	08016c30 	.word	0x08016c30
 8004594:	200016dc 	.word	0x200016dc
 8004598:	20001798 	.word	0x20001798
 800459c:	200017a0 	.word	0x200017a0
 80045a0:	08017290 	.word	0x08017290
 80045a4:	200017fc 	.word	0x200017fc
 80045a8:	20001808 	.word	0x20001808
 80045ac:	200017e8 	.word	0x200017e8
 80045b0:	200017ec 	.word	0x200017ec
 80045b4:	200017f4 	.word	0x200017f4
 80045b8:	200017d4 	.word	0x200017d4
 80045bc:	200017d8 	.word	0x200017d8
 80045c0:	200017e0 	.word	0x200017e0
 80045c4:	200017c0 	.word	0x200017c0
 80045c8:	200017c4 	.word	0x200017c4
 80045cc:	200017cc 	.word	0x200017cc
 80045d0:	200017b8 	.word	0x200017b8
 80045d4:	200017b0 	.word	0x200017b0
 80045d8:	200017a8 	.word	0x200017a8

080045dc <SetTCPMux>:
	return(GSMData);
}
*/

char *SetTCPMux()
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af04      	add	r7, sp, #16
	SendGSMCode(" AT+QIMUX=1");
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <SetTCPMux+0x34>)
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7ff f88b 	bl	8003700 <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <SetTCPMux+0x38>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	480a      	ldr	r0, [pc, #40]	; (8004618 <SetTCPMux+0x3c>)
 80045f0:	4909      	ldr	r1, [pc, #36]	; (8004618 <SetTCPMux+0x3c>)
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <SetTCPMux+0x40>)
 80045f4:	9202      	str	r2, [sp, #8]
 80045f6:	9301      	str	r3, [sp, #4]
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <SetTCPMux+0x44>)
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	0003      	movs	r3, r0
 80045fe:	2200      	movs	r2, #0
 8004600:	2000      	movs	r0, #0
 8004602:	f7ff f9e7 	bl	80039d4 <GetGSMReply>
 8004606:	0003      	movs	r3, r0
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	080172d4 	.word	0x080172d4
 8004614:	20000014 	.word	0x20000014
 8004618:	08016dac 	.word	0x08016dac
 800461c:	08016cac 	.word	0x08016cac
 8004620:	080172e0 	.word	0x080172e0

08004624 <ResetTCP>:

void ResetTCP()
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
	//EndTransfer();
	StopTCPConnection();
 8004628:	f7ff fc3a 	bl	8003ea0 <StopTCPConnection>
	StartTCPConnection();
 800462c:	f7ff fb6c 	bl	8003d08 <StartTCPConnection>
}
 8004630:	46c0      	nop			; (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <ProcessTCPAll>:

void ProcessTCPAll(char *data)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	int tcpSENDDATA = tic();
 8004640:	f001 fff6 	bl	8006630 <tic>
 8004644:	0003      	movs	r3, r0
 8004646:	60fb      	str	r3, [r7, #12]

	if (ServerConnected > 0)
 8004648:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <ProcessTCPAll+0x70>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	dd10      	ble.n	8004672 <ProcessTCPAll+0x3a>
	{
		//$AS01FFA0138,$123456789012345,$1.0.4,$1.0.0,28.609803N077.103198E,F7,*

		Debug_Tx("sending data to ip ");
 8004650:	4b16      	ldr	r3, [pc, #88]	; (80046ac <ProcessTCPAll+0x74>)
 8004652:	0018      	movs	r0, r3
 8004654:	f003 fdc2 	bl	80081dc <Debug_Tx>
		Debug_Tx(ip2);
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <ProcessTCPAll+0x78>)
 800465a:	0018      	movs	r0, r3
 800465c:	f003 fdbe 	bl	80081dc <Debug_Tx>
		// SendTCPdata(data_LOGIN);
		SendTCPdata(data);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	f7ff fc86 	bl	8003f74 <SendTCPdata>
		Debug_Tx("dat send done  ");
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <ProcessTCPAll+0x7c>)
 800466a:	0018      	movs	r0, r3
 800466c:	f003 fdb6 	bl	80081dc <Debug_Tx>
 8004670:	e00f      	b.n	8004692 <ProcessTCPAll+0x5a>
	}
	else
	{
		if (debug == 1)
 8004672:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <ProcessTCPAll+0x80>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d103      	bne.n	8004682 <ProcessTCPAll+0x4a>
		{
			Debug_Tx("Error: ServerSession disconnected ");
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <ProcessTCPAll+0x84>)
 800467c:	0018      	movs	r0, r3
 800467e:	f003 fdad 	bl	80081dc <Debug_Tx>
		}

		Debug_Tx("error insending data to ip ");
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <ProcessTCPAll+0x88>)
 8004684:	0018      	movs	r0, r3
 8004686:	f003 fda9 	bl	80081dc <Debug_Tx>
		Debug_Tx(ip2);
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <ProcessTCPAll+0x78>)
 800468c:	0018      	movs	r0, r3
 800468e:	f003 fda5 	bl	80081dc <Debug_Tx>
		//ResetTCP();
	}

	toc(tcpSENDDATA, "_________________________TCP SEND DATA");
 8004692:	4a0c      	ldr	r2, [pc, #48]	; (80046c4 <ProcessTCPAll+0x8c>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	0011      	movs	r1, r2
 8004698:	0018      	movs	r0, r3
 800469a:	f001 ffd1 	bl	8006640 <toc>
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b004      	add	sp, #16
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	20001814 	.word	0x20001814
 80046ac:	08017300 	.word	0x08017300
 80046b0:	20001810 	.word	0x20001810
 80046b4:	08017314 	.word	0x08017314
 80046b8:	2000000c 	.word	0x2000000c
 80046bc:	08017324 	.word	0x08017324
 80046c0:	08017348 	.word	0x08017348
 80046c4:	08017364 	.word	0x08017364

080046c8 <SetupGPRS>:
	}
	return smsok;
}

void SetupGPRS(char *apn)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b089      	sub	sp, #36	; 0x24
 80046cc:	af04      	add	r7, sp, #16
 80046ce:	6078      	str	r0, [r7, #4]

	int ck = 5;
 80046d0:	2305      	movs	r3, #5
 80046d2:	60fb      	str	r3, [r7, #12]

	gprsok = 0;
 80046d4:	4b39      	ldr	r3, [pc, #228]	; (80047bc <SetupGPRS+0xf4>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 80046da:	e064      	b.n	80047a6 <SetupGPRS+0xde>
	{
		HAL_Delay(2000);
 80046dc:	23fa      	movs	r3, #250	; 0xfa
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	0018      	movs	r0, r3
 80046e2:	f004 fb2f 	bl	8008d44 <HAL_Delay>
		ck = ck - 1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
		// SendGSMCode(" AT+CGACT=0,1");
		// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",500));
		memset(GSMDataC, 0, 100);
 80046ec:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <SetupGPRS+0xf8>)
 80046ee:	2264      	movs	r2, #100	; 0x64
 80046f0:	2100      	movs	r1, #0
 80046f2:	0018      	movs	r0, r3
 80046f4:	f00e fc8a 	bl	801300c <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80046f8:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <SetupGPRS+0xf8>)
 80046fa:	4a32      	ldr	r2, [pc, #200]	; (80047c4 <SetupGPRS+0xfc>)
 80046fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046fe:	c313      	stmia	r3!, {r0, r1, r4}
 8004700:	8811      	ldrh	r1, [r2, #0]
 8004702:	8019      	strh	r1, [r3, #0]
 8004704:	7892      	ldrb	r2, [r2, #2]
 8004706:	709a      	strb	r2, [r3, #2]
		strcat(GSMDataC, apn);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <SetupGPRS+0xf8>)
 800470c:	0011      	movs	r1, r2
 800470e:	0018      	movs	r0, r3
 8004710:	f00e fc84 	bl	801301c <strcat>
		strcat(GSMDataC, "\",\"\",\"\",0");
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <SetupGPRS+0xf8>)
 8004716:	0018      	movs	r0, r3
 8004718:	f7fb fcf6 	bl	8000108 <strlen>
 800471c:	0003      	movs	r3, r0
 800471e:	001a      	movs	r2, r3
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <SetupGPRS+0xf8>)
 8004722:	18d2      	adds	r2, r2, r3
 8004724:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <SetupGPRS+0x100>)
 8004726:	0010      	movs	r0, r2
 8004728:	0019      	movs	r1, r3
 800472a:	230a      	movs	r3, #10
 800472c:	001a      	movs	r2, r3
 800472e:	f00e fe35 	bl	801339c <memcpy>
		SendGSMCode(GSMDataC);
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <SetupGPRS+0xf8>)
 8004734:	0018      	movs	r0, r3
 8004736:	f7fe ffe3 	bl	8003700 <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <SetupGPRS+0x104>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4824      	ldr	r0, [pc, #144]	; (80047d0 <SetupGPRS+0x108>)
 8004740:	4923      	ldr	r1, [pc, #140]	; (80047d0 <SetupGPRS+0x108>)
 8004742:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <SetupGPRS+0x10c>)
 8004744:	9202      	str	r2, [sp, #8]
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <SetupGPRS+0x110>)
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	0003      	movs	r3, r0
 800474e:	2200      	movs	r2, #0
 8004750:	2000      	movs	r0, #0
 8004752:	f7ff f93f 	bl	80039d4 <GetGSMReply>
 8004756:	0003      	movs	r3, r0
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb fcd5 	bl	8000108 <strlen>
 800475e:	0003      	movs	r3, r0
 8004760:	001a      	movs	r2, r3
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <SetupGPRS+0xf4>)
 8004764:	601a      	str	r2, [r3, #0]

		// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",10));
		if (gprsok > 0)
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <SetupGPRS+0xf4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	dd1b      	ble.n	80047a6 <SetupGPRS+0xde>
		{
			// gprsok=0;
			// HAL_Delay(4000);

			SendGSMCode(" AT+QIMODE=0");
 800476e:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <SetupGPRS+0x114>)
 8004770:	0018      	movs	r0, r3
 8004772:	f7fe ffc5 	bl	8003700 <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <SetupGPRS+0x104>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4815      	ldr	r0, [pc, #84]	; (80047d0 <SetupGPRS+0x108>)
 800477c:	4914      	ldr	r1, [pc, #80]	; (80047d0 <SetupGPRS+0x108>)
 800477e:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <SetupGPRS+0x10c>)
 8004780:	9202      	str	r2, [sp, #8]
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <SetupGPRS+0x118>)
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	0003      	movs	r3, r0
 800478a:	2200      	movs	r2, #0
 800478c:	2000      	movs	r0, #0
 800478e:	f7ff f921 	bl	80039d4 <GetGSMReply>
 8004792:	0003      	movs	r3, r0
 8004794:	0018      	movs	r0, r3
 8004796:	f7fb fcb7 	bl	8000108 <strlen>
 800479a:	0003      	movs	r3, r0
 800479c:	001a      	movs	r2, r3
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <SetupGPRS+0xf4>)
 80047a0:	601a      	str	r2, [r3, #0]
			// SendGSMCode(" AT+CGATT=0");
			// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGATT=1 GPRS Setup",100));

			// SendGSMCode(" AT+CGATT=1");
			// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGATT=1 GPRS Setup",200));
			if (gprsok > 0)
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <SetupGPRS+0xf4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	dd03      	ble.n	80047b4 <SetupGPRS+0xec>
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <SetupGPRS+0xf4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dd93      	ble.n	80046dc <SetupGPRS+0x14>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 80047b4:	46c0      	nop			; (mov r8, r8)
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b005      	add	sp, #20
 80047ba:	bd90      	pop	{r4, r7, pc}
 80047bc:	20001670 	.word	0x20001670
 80047c0:	200013b4 	.word	0x200013b4
 80047c4:	080173b8 	.word	0x080173b8
 80047c8:	080173c8 	.word	0x080173c8
 80047cc:	20000014 	.word	0x20000014
 80047d0:	08016dac 	.word	0x08016dac
 80047d4:	08016cac 	.word	0x08016cac
 80047d8:	080173d4 	.word	0x080173d4
 80047dc:	080173f4 	.word	0x080173f4
 80047e0:	08017404 	.word	0x08017404

080047e4 <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af04      	add	r7, sp, #16
	// RestartGSM();
	int ook;
	Debug_Tx("______________Begin_____________________________");
 80047ea:	4b8c      	ldr	r3, [pc, #560]	; (8004a1c <ShiftGSMProfile+0x238>)
 80047ec:	0018      	movs	r0, r3
 80047ee:	f003 fcf5 	bl	80081dc <Debug_Tx>

	// Debug_Tx("______________print operator_____________________________");
	// Debug_Tx(GSMSimOperator());

	// Debug_Tx("______________setup stk_____________________________");
	int ck = 10;
 80047f2:	230a      	movs	r3, #10
 80047f4:	603b      	str	r3, [r7, #0]
	ook = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (ook < 1))
 80047fa:	e0d5      	b.n	80049a8 <ShiftGSMProfile+0x1c4>
	{
		HAL_Delay(3000);
 80047fc:	4b88      	ldr	r3, [pc, #544]	; (8004a20 <ShiftGSMProfile+0x23c>)
 80047fe:	0018      	movs	r0, r3
 8004800:	f004 faa0 	bl	8008d44 <HAL_Delay>
		ck = ck - 1;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	3b01      	subs	r3, #1
 8004808:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+QSTK=1");
 800480a:	4b86      	ldr	r3, [pc, #536]	; (8004a24 <ShiftGSMProfile+0x240>)
 800480c:	0018      	movs	r0, r3
 800480e:	f7fe ff77 	bl	8003700 <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8004812:	4b85      	ldr	r3, [pc, #532]	; (8004a28 <ShiftGSMProfile+0x244>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4885      	ldr	r0, [pc, #532]	; (8004a2c <ShiftGSMProfile+0x248>)
 8004818:	4984      	ldr	r1, [pc, #528]	; (8004a2c <ShiftGSMProfile+0x248>)
 800481a:	4a85      	ldr	r2, [pc, #532]	; (8004a30 <ShiftGSMProfile+0x24c>)
 800481c:	9202      	str	r2, [sp, #8]
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	4b84      	ldr	r3, [pc, #528]	; (8004a34 <ShiftGSMProfile+0x250>)
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	0003      	movs	r3, r0
 8004826:	2200      	movs	r2, #0
 8004828:	2000      	movs	r0, #0
 800482a:	f7ff f8d3 	bl	80039d4 <GetGSMReply>
 800482e:	0003      	movs	r3, r0
 8004830:	0018      	movs	r0, r3
 8004832:	f7fb fc69 	bl	8000108 <strlen>
 8004836:	0003      	movs	r3, r0
 8004838:	607b      	str	r3, [r7, #4]
		if (ook > 0)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	dc00      	bgt.n	8004842 <ShiftGSMProfile+0x5e>
 8004840:	e0b2      	b.n	80049a8 <ShiftGSMProfile+0x1c4>
		{
			Debug_Tx("______________Setup Menu_____________________________");
 8004842:	4b7d      	ldr	r3, [pc, #500]	; (8004a38 <ShiftGSMProfile+0x254>)
 8004844:	0018      	movs	r0, r3
 8004846:	f003 fcc9 	bl	80081dc <Debug_Tx>
			ook = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 800484e:	4b7b      	ldr	r3, [pc, #492]	; (8004a3c <ShiftGSMProfile+0x258>)
 8004850:	0018      	movs	r0, r3
 8004852:	f7fe ff55 	bl	8003700 <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", gpsto_net, "OK"));
 8004856:	4b74      	ldr	r3, [pc, #464]	; (8004a28 <ShiftGSMProfile+0x244>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4874      	ldr	r0, [pc, #464]	; (8004a2c <ShiftGSMProfile+0x248>)
 800485c:	4973      	ldr	r1, [pc, #460]	; (8004a2c <ShiftGSMProfile+0x248>)
 800485e:	4a74      	ldr	r2, [pc, #464]	; (8004a30 <ShiftGSMProfile+0x24c>)
 8004860:	9202      	str	r2, [sp, #8]
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	4b76      	ldr	r3, [pc, #472]	; (8004a40 <ShiftGSMProfile+0x25c>)
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	0003      	movs	r3, r0
 800486a:	2200      	movs	r2, #0
 800486c:	2000      	movs	r0, #0
 800486e:	f7ff f8b1 	bl	80039d4 <GetGSMReply>
 8004872:	0003      	movs	r3, r0
 8004874:	0018      	movs	r0, r3
 8004876:	f7fb fc47 	bl	8000108 <strlen>
 800487a:	0003      	movs	r3, r0
 800487c:	607b      	str	r3, [r7, #4]
			HAL_Delay(3000);
 800487e:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <ShiftGSMProfile+0x23c>)
 8004880:	0018      	movs	r0, r3
 8004882:	f004 fa5f 	bl	8008d44 <HAL_Delay>
			if (ook > 0)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc00      	bgt.n	800488e <ShiftGSMProfile+0xaa>
 800488c:	e08c      	b.n	80049a8 <ShiftGSMProfile+0x1c4>
			{
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
 800488e:	4b6d      	ldr	r3, [pc, #436]	; (8004a44 <ShiftGSMProfile+0x260>)
 8004890:	0018      	movs	r0, r3
 8004892:	f003 fca3 	bl	80081dc <Debug_Tx>
				ook = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 800489a:	4b6b      	ldr	r3, [pc, #428]	; (8004a48 <ShiftGSMProfile+0x264>)
 800489c:	0018      	movs	r0, r3
 800489e:	f7fe ff2f 	bl	8003700 <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 80048a2:	4b61      	ldr	r3, [pc, #388]	; (8004a28 <ShiftGSMProfile+0x244>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4861      	ldr	r0, [pc, #388]	; (8004a2c <ShiftGSMProfile+0x248>)
 80048a8:	4960      	ldr	r1, [pc, #384]	; (8004a2c <ShiftGSMProfile+0x248>)
 80048aa:	4a61      	ldr	r2, [pc, #388]	; (8004a30 <ShiftGSMProfile+0x24c>)
 80048ac:	9202      	str	r2, [sp, #8]
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	4b66      	ldr	r3, [pc, #408]	; (8004a4c <ShiftGSMProfile+0x268>)
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	0003      	movs	r3, r0
 80048b6:	2200      	movs	r2, #0
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7ff f88b 	bl	80039d4 <GetGSMReply>
 80048be:	0003      	movs	r3, r0
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fb fc21 	bl	8000108 <strlen>
 80048c6:	0003      	movs	r3, r0
 80048c8:	607b      	str	r3, [r7, #4]
				if (ook > 0)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dd6b      	ble.n	80049a8 <ShiftGSMProfile+0x1c4>
				{

					if (GSMProf == 0)
 80048d0:	4b5f      	ldr	r3, [pc, #380]	; (8004a50 <ShiftGSMProfile+0x26c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d121      	bne.n	800491c <ShiftGSMProfile+0x138>
					{
						Debug_Tx("_____________BSNL profile Selection_____________________________");
 80048d8:	4b5e      	ldr	r3, [pc, #376]	; (8004a54 <ShiftGSMProfile+0x270>)
 80048da:	0018      	movs	r0, r3
 80048dc:	f003 fc7e 	bl	80081dc <Debug_Tx>
						ook = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 80048e4:	4b5c      	ldr	r3, [pc, #368]	; (8004a58 <ShiftGSMProfile+0x274>)
 80048e6:	0018      	movs	r0, r3
 80048e8:	f7fe ff0a 	bl	8003700 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
 80048ec:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <ShiftGSMProfile+0x244>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	484e      	ldr	r0, [pc, #312]	; (8004a2c <ShiftGSMProfile+0x248>)
 80048f2:	494e      	ldr	r1, [pc, #312]	; (8004a2c <ShiftGSMProfile+0x248>)
 80048f4:	4a4e      	ldr	r2, [pc, #312]	; (8004a30 <ShiftGSMProfile+0x24c>)
 80048f6:	9202      	str	r2, [sp, #8]
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	4b58      	ldr	r3, [pc, #352]	; (8004a5c <ShiftGSMProfile+0x278>)
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	0003      	movs	r3, r0
 8004900:	2200      	movs	r2, #0
 8004902:	2000      	movs	r0, #0
 8004904:	f7ff f866 	bl	80039d4 <GetGSMReply>
 8004908:	0003      	movs	r3, r0
 800490a:	0018      	movs	r0, r3
 800490c:	f7fb fbfc 	bl	8000108 <strlen>
 8004910:	0003      	movs	r3, r0
 8004912:	607b      	str	r3, [r7, #4]
						GSMProf = 1;
 8004914:	4b4e      	ldr	r3, [pc, #312]	; (8004a50 <ShiftGSMProfile+0x26c>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e024      	b.n	8004966 <ShiftGSMProfile+0x182>
					}
					else if (GSMProf == 1)
 800491c:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <ShiftGSMProfile+0x26c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d120      	bne.n	8004966 <ShiftGSMProfile+0x182>
					{
						Debug_Tx("_____________Airtel profile Selection_____________________________");
 8004924:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <ShiftGSMProfile+0x27c>)
 8004926:	0018      	movs	r0, r3
 8004928:	f003 fc58 	bl	80081dc <Debug_Tx>

						ook = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 8004930:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <ShiftGSMProfile+0x280>)
 8004932:	0018      	movs	r0, r3
 8004934:	f7fe fee4 	bl	8003700 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", gpsto_net, "OK"));
 8004938:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <ShiftGSMProfile+0x244>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	483b      	ldr	r0, [pc, #236]	; (8004a2c <ShiftGSMProfile+0x248>)
 800493e:	493b      	ldr	r1, [pc, #236]	; (8004a2c <ShiftGSMProfile+0x248>)
 8004940:	4a3b      	ldr	r2, [pc, #236]	; (8004a30 <ShiftGSMProfile+0x24c>)
 8004942:	9202      	str	r2, [sp, #8]
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	4b48      	ldr	r3, [pc, #288]	; (8004a68 <ShiftGSMProfile+0x284>)
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	0003      	movs	r3, r0
 800494c:	2200      	movs	r2, #0
 800494e:	2000      	movs	r0, #0
 8004950:	f7ff f840 	bl	80039d4 <GetGSMReply>
 8004954:	0003      	movs	r3, r0
 8004956:	0018      	movs	r0, r3
 8004958:	f7fb fbd6 	bl	8000108 <strlen>
 800495c:	0003      	movs	r3, r0
 800495e:	607b      	str	r3, [r7, #4]
						GSMProf = 0;
 8004960:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <ShiftGSMProfile+0x26c>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
					}
					if (ook > 0)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	dd1d      	ble.n	80049a8 <ShiftGSMProfile+0x1c4>
					{
						Debug_Tx("_____________Refresh_____________________________");
 800496c:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <ShiftGSMProfile+0x288>)
 800496e:	0018      	movs	r0, r3
 8004970:	f003 fc34 	bl	80081dc <Debug_Tx>
						ook = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 8004978:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <ShiftGSMProfile+0x28c>)
 800497a:	0018      	movs	r0, r3
 800497c:	f7fe fec0 	bl	8003700 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh", gpsto_net, "OK"));
 8004980:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <ShiftGSMProfile+0x244>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4829      	ldr	r0, [pc, #164]	; (8004a2c <ShiftGSMProfile+0x248>)
 8004986:	4929      	ldr	r1, [pc, #164]	; (8004a2c <ShiftGSMProfile+0x248>)
 8004988:	4a29      	ldr	r2, [pc, #164]	; (8004a30 <ShiftGSMProfile+0x24c>)
 800498a:	9202      	str	r2, [sp, #8]
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <ShiftGSMProfile+0x290>)
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	0003      	movs	r3, r0
 8004994:	2200      	movs	r2, #0
 8004996:	2000      	movs	r0, #0
 8004998:	f7ff f81c 	bl	80039d4 <GetGSMReply>
 800499c:	0003      	movs	r3, r0
 800499e:	0018      	movs	r0, r3
 80049a0:	f7fb fbb2 	bl	8000108 <strlen>
 80049a4:	0003      	movs	r3, r0
 80049a6:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (ook < 1))
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dd03      	ble.n	80049b6 <ShiftGSMProfile+0x1d2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dc00      	bgt.n	80049b6 <ShiftGSMProfile+0x1d2>
 80049b4:	e722      	b.n	80047fc <ShiftGSMProfile+0x18>
				}
			}
		}
	}

	Debug_Tx("_____________Restart_____________________________");
 80049b6:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <ShiftGSMProfile+0x294>)
 80049b8:	0018      	movs	r0, r3
 80049ba:	f003 fc0f 	bl	80081dc <Debug_Tx>

	ck = 2;
 80049be:	2302      	movs	r3, #2
 80049c0:	603b      	str	r3, [r7, #0]
	ook = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (ook < 1))
 80049c6:	e01a      	b.n	80049fe <ShiftGSMProfile+0x21a>
	{
		ck = ck - 1;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+QPOWD=1");
 80049ce:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <ShiftGSMProfile+0x298>)
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7fe fe95 	bl	8003700 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 80049d6:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <ShiftGSMProfile+0x29c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4814      	ldr	r0, [pc, #80]	; (8004a2c <ShiftGSMProfile+0x248>)
 80049dc:	4913      	ldr	r1, [pc, #76]	; (8004a2c <ShiftGSMProfile+0x248>)
 80049de:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <ShiftGSMProfile+0x2a0>)
 80049e0:	9202      	str	r2, [sp, #8]
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <ShiftGSMProfile+0x2a4>)
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	0003      	movs	r3, r0
 80049ea:	2200      	movs	r2, #0
 80049ec:	200f      	movs	r0, #15
 80049ee:	f7fe fff1 	bl	80039d4 <GetGSMReply>
 80049f2:	0003      	movs	r3, r0
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7fb fb87 	bl	8000108 <strlen>
 80049fa:	0003      	movs	r3, r0
 80049fc:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (ook < 1))
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	dd02      	ble.n	8004a0a <ShiftGSMProfile+0x226>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	ddde      	ble.n	80049c8 <ShiftGSMProfile+0x1e4>
	}
	HAL_Delay(6000);
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <ShiftGSMProfile+0x2a8>)
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f004 f999 	bl	8008d44 <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b002      	add	sp, #8
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	08017428 	.word	0x08017428
 8004a20:	00000bb8 	.word	0x00000bb8
 8004a24:	0801745c 	.word	0x0801745c
 8004a28:	20000010 	.word	0x20000010
 8004a2c:	08016dac 	.word	0x08016dac
 8004a30:	08016cac 	.word	0x08016cac
 8004a34:	08017468 	.word	0x08017468
 8004a38:	08017484 	.word	0x08017484
 8004a3c:	080174bc 	.word	0x080174bc
 8004a40:	080174e4 	.word	0x080174e4
 8004a44:	08017504 	.word	0x08017504
 8004a48:	08017544 	.word	0x08017544
 8004a4c:	08017564 	.word	0x08017564
 8004a50:	20000018 	.word	0x20000018
 8004a54:	08017588 	.word	0x08017588
 8004a58:	080175cc 	.word	0x080175cc
 8004a5c:	080175f8 	.word	0x080175f8
 8004a60:	08017618 	.word	0x08017618
 8004a64:	0801765c 	.word	0x0801765c
 8004a68:	08017688 	.word	0x08017688
 8004a6c:	080176a8 	.word	0x080176a8
 8004a70:	080176dc 	.word	0x080176dc
 8004a74:	08017704 	.word	0x08017704
 8004a78:	08017720 	.word	0x08017720
 8004a7c:	08017754 	.word	0x08017754
 8004a80:	20000014 	.word	0x20000014
 8004a84:	08017760 	.word	0x08017760
 8004a88:	08017774 	.word	0x08017774
 8004a8c:	00001770 	.word	0x00001770

08004a90 <InitGSM>:

void InitGSM()
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af04      	add	r7, sp, #16
	// RestartGSM();
	HAL_Delay(5000);
 8004a96:	4bd0      	ldr	r3, [pc, #832]	; (8004dd8 <InitGSM+0x348>)
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f004 f953 	bl	8008d44 <HAL_Delay>

	int i = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
	int ck = 10;
 8004aa2:	230a      	movs	r3, #10
 8004aa4:	603b      	str	r3, [r7, #0]
	// SendGSMCode(" AT+QPOWD=1");
	// i=strlen(GetGSMReply(0,"NORMAL POWER DOWN",0,"","Error:  AT+QPOWD=1 Restart",20));

	// HAL_Delay(10000);
	ck = 2;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	603b      	str	r3, [r7, #0]
	i = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004aae:	e01a      	b.n	8004ae6 <InitGSM+0x56>
	{
		ck = ck - 1;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	603b      	str	r3, [r7, #0]
		SendGSMCode(" ATE0");
 8004ab6:	4bc9      	ldr	r3, [pc, #804]	; (8004ddc <InitGSM+0x34c>)
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fe fe21 	bl	8003700 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 8004abe:	4bc8      	ldr	r3, [pc, #800]	; (8004de0 <InitGSM+0x350>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	48c8      	ldr	r0, [pc, #800]	; (8004de4 <InitGSM+0x354>)
 8004ac4:	49c7      	ldr	r1, [pc, #796]	; (8004de4 <InitGSM+0x354>)
 8004ac6:	4ac8      	ldr	r2, [pc, #800]	; (8004de8 <InitGSM+0x358>)
 8004ac8:	9202      	str	r2, [sp, #8]
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	4bc7      	ldr	r3, [pc, #796]	; (8004dec <InitGSM+0x35c>)
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	0003      	movs	r3, r0
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	200f      	movs	r0, #15
 8004ad6:	f7fe ff7d 	bl	80039d4 <GetGSMReply>
 8004ada:	0003      	movs	r3, r0
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7fb fb13 	bl	8000108 <strlen>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	dd02      	ble.n	8004af2 <InitGSM+0x62>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	ddde      	ble.n	8004ab0 <InitGSM+0x20>
	}
	ck = 2;
 8004af2:	2302      	movs	r3, #2
 8004af4:	603b      	str	r3, [r7, #0]
	i = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004afa:	e01a      	b.n	8004b32 <InitGSM+0xa2>
	{
		ck = ck - 1;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT");
 8004b02:	4bbb      	ldr	r3, [pc, #748]	; (8004df0 <InitGSM+0x360>)
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7fe fdfb 	bl	8003700 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004b0a:	4bb5      	ldr	r3, [pc, #724]	; (8004de0 <InitGSM+0x350>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	48b5      	ldr	r0, [pc, #724]	; (8004de4 <InitGSM+0x354>)
 8004b10:	49b4      	ldr	r1, [pc, #720]	; (8004de4 <InitGSM+0x354>)
 8004b12:	4ab5      	ldr	r2, [pc, #724]	; (8004de8 <InitGSM+0x358>)
 8004b14:	9202      	str	r2, [sp, #8]
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	4bb6      	ldr	r3, [pc, #728]	; (8004df4 <InitGSM+0x364>)
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	2200      	movs	r2, #0
 8004b20:	200f      	movs	r0, #15
 8004b22:	f7fe ff57 	bl	80039d4 <GetGSMReply>
 8004b26:	0003      	movs	r3, r0
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7fb faed 	bl	8000108 <strlen>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	dd02      	ble.n	8004b3e <InitGSM+0xae>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	ddde      	ble.n	8004afc <InitGSM+0x6c>
	}

	HAL_Delay(2000);
 8004b3e:	23fa      	movs	r3, #250	; 0xfa
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	0018      	movs	r0, r3
 8004b44:	f004 f8fe 	bl	8008d44 <HAL_Delay>
	ShiftGSMProfile();
 8004b48:	f7ff fe4c 	bl	80047e4 <ShiftGSMProfile>

	// HAL_Delay(5000);
	ck = 2;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	603b      	str	r3, [r7, #0]
	i = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004b54:	e01a      	b.n	8004b8c <InitGSM+0xfc>
	{
		ck = ck - 1;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	603b      	str	r3, [r7, #0]
		SendGSMCode(" ATE0");
 8004b5c:	4b9f      	ldr	r3, [pc, #636]	; (8004ddc <InitGSM+0x34c>)
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f7fe fdce 	bl	8003700 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8004b64:	4b9e      	ldr	r3, [pc, #632]	; (8004de0 <InitGSM+0x350>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	489e      	ldr	r0, [pc, #632]	; (8004de4 <InitGSM+0x354>)
 8004b6a:	499e      	ldr	r1, [pc, #632]	; (8004de4 <InitGSM+0x354>)
 8004b6c:	4a9e      	ldr	r2, [pc, #632]	; (8004de8 <InitGSM+0x358>)
 8004b6e:	9202      	str	r2, [sp, #8]
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	4ba1      	ldr	r3, [pc, #644]	; (8004df8 <InitGSM+0x368>)
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	0003      	movs	r3, r0
 8004b78:	2200      	movs	r2, #0
 8004b7a:	200a      	movs	r0, #10
 8004b7c:	f7fe ff2a 	bl	80039d4 <GetGSMReply>
 8004b80:	0003      	movs	r3, r0
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7fb fac0 	bl	8000108 <strlen>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	dd02      	ble.n	8004b98 <InitGSM+0x108>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	ddde      	ble.n	8004b56 <InitGSM+0xc6>
	}
	ck = 2;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	603b      	str	r3, [r7, #0]
	i = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004ba0:	e01a      	b.n	8004bd8 <InitGSM+0x148>
	{
		ck = ck - 1;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT");
 8004ba8:	4b91      	ldr	r3, [pc, #580]	; (8004df0 <InitGSM+0x360>)
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7fe fda8 	bl	8003700 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004bb0:	4b8b      	ldr	r3, [pc, #556]	; (8004de0 <InitGSM+0x350>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	488b      	ldr	r0, [pc, #556]	; (8004de4 <InitGSM+0x354>)
 8004bb6:	498b      	ldr	r1, [pc, #556]	; (8004de4 <InitGSM+0x354>)
 8004bb8:	4a8b      	ldr	r2, [pc, #556]	; (8004de8 <InitGSM+0x358>)
 8004bba:	9202      	str	r2, [sp, #8]
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	4b8d      	ldr	r3, [pc, #564]	; (8004df4 <InitGSM+0x364>)
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	200a      	movs	r0, #10
 8004bc8:	f7fe ff04 	bl	80039d4 <GetGSMReply>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7fb fa9a 	bl	8000108 <strlen>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	dd02      	ble.n	8004be4 <InitGSM+0x154>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	ddde      	ble.n	8004ba2 <InitGSM+0x112>
	// SendGSMCode(" AT+CRES");
	// SendGSMCode(" AT+COLP=1"); //Connected Line Identification Presentation
	// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+COLP=1 Connected  Line Identification ",10));
	// SendGSMCode(" AT+CSCA=\"+919810051914\",145");	//+CSCA: "+919810051914",145 //+919818023015

	ck = 10;
 8004be4:	230a      	movs	r3, #10
 8004be6:	603b      	str	r3, [r7, #0]
	i = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	607b      	str	r3, [r7, #4]
	while ((ck > 0) && (i < 1))
 8004bec:	e0e8      	b.n	8004dc0 <InitGSM+0x330>
	{
		ck = ck - 1;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	603b      	str	r3, [r7, #0]
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 8004bf4:	4b81      	ldr	r3, [pc, #516]	; (8004dfc <InitGSM+0x36c>)
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7fe fd82 	bl	8003700 <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 8004bfc:	4b78      	ldr	r3, [pc, #480]	; (8004de0 <InitGSM+0x350>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4878      	ldr	r0, [pc, #480]	; (8004de4 <InitGSM+0x354>)
 8004c02:	4978      	ldr	r1, [pc, #480]	; (8004de4 <InitGSM+0x354>)
 8004c04:	4a78      	ldr	r2, [pc, #480]	; (8004de8 <InitGSM+0x358>)
 8004c06:	9202      	str	r2, [sp, #8]
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	4b7d      	ldr	r3, [pc, #500]	; (8004e00 <InitGSM+0x370>)
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	0003      	movs	r3, r0
 8004c10:	2200      	movs	r2, #0
 8004c12:	2005      	movs	r0, #5
 8004c14:	f7fe fede 	bl	80039d4 <GetGSMReply>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f7fb fa74 	bl	8000108 <strlen>
 8004c20:	0003      	movs	r3, r0
 8004c22:	607b      	str	r3, [r7, #4]
		// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
 8004c24:	23fa      	movs	r3, #250	; 0xfa
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f004 f88b 	bl	8008d44 <HAL_Delay>
		if (i > 0)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dc00      	bgt.n	8004c36 <InitGSM+0x1a6>
 8004c34:	e0c4      	b.n	8004dc0 <InitGSM+0x330>
		{
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 8004c36:	4b73      	ldr	r3, [pc, #460]	; (8004e04 <InitGSM+0x374>)
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7fe fd61 	bl	8003700 <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 8004c3e:	4b68      	ldr	r3, [pc, #416]	; (8004de0 <InitGSM+0x350>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4868      	ldr	r0, [pc, #416]	; (8004de4 <InitGSM+0x354>)
 8004c44:	4967      	ldr	r1, [pc, #412]	; (8004de4 <InitGSM+0x354>)
 8004c46:	4a68      	ldr	r2, [pc, #416]	; (8004de8 <InitGSM+0x358>)
 8004c48:	9202      	str	r2, [sp, #8]
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	4b6e      	ldr	r3, [pc, #440]	; (8004e08 <InitGSM+0x378>)
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	0003      	movs	r3, r0
 8004c52:	2200      	movs	r2, #0
 8004c54:	2000      	movs	r0, #0
 8004c56:	f7fe febd 	bl	80039d4 <GetGSMReply>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f7fb fa53 	bl	8000108 <strlen>
 8004c62:	0003      	movs	r3, r0
 8004c64:	607b      	str	r3, [r7, #4]

			if (i > 0)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dc00      	bgt.n	8004c6e <InitGSM+0x1de>
 8004c6c:	e0a8      	b.n	8004dc0 <InitGSM+0x330>
			{
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 8004c6e:	4b67      	ldr	r3, [pc, #412]	; (8004e0c <InitGSM+0x37c>)
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fe fd45 	bl	8003700 <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 8004c76:	4b5a      	ldr	r3, [pc, #360]	; (8004de0 <InitGSM+0x350>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	485a      	ldr	r0, [pc, #360]	; (8004de4 <InitGSM+0x354>)
 8004c7c:	4959      	ldr	r1, [pc, #356]	; (8004de4 <InitGSM+0x354>)
 8004c7e:	4a5a      	ldr	r2, [pc, #360]	; (8004de8 <InitGSM+0x358>)
 8004c80:	9202      	str	r2, [sp, #8]
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	4b62      	ldr	r3, [pc, #392]	; (8004e10 <InitGSM+0x380>)
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	0003      	movs	r3, r0
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7fe fea1 	bl	80039d4 <GetGSMReply>
 8004c92:	0003      	movs	r3, r0
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7fb fa37 	bl	8000108 <strlen>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	607b      	str	r3, [r7, #4]

				if (i > 0)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dc00      	bgt.n	8004ca6 <InitGSM+0x216>
 8004ca4:	e08c      	b.n	8004dc0 <InitGSM+0x330>
				{
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 8004ca6:	4b5b      	ldr	r3, [pc, #364]	; (8004e14 <InitGSM+0x384>)
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7fe fd29 	bl	8003700 <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 8004cae:	4b4c      	ldr	r3, [pc, #304]	; (8004de0 <InitGSM+0x350>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	484c      	ldr	r0, [pc, #304]	; (8004de4 <InitGSM+0x354>)
 8004cb4:	494b      	ldr	r1, [pc, #300]	; (8004de4 <InitGSM+0x354>)
 8004cb6:	4a4c      	ldr	r2, [pc, #304]	; (8004de8 <InitGSM+0x358>)
 8004cb8:	9202      	str	r2, [sp, #8]
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	4b56      	ldr	r3, [pc, #344]	; (8004e18 <InitGSM+0x388>)
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7fe fe85 	bl	80039d4 <GetGSMReply>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7fb fa1b 	bl	8000108 <strlen>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	607b      	str	r3, [r7, #4]
					if (i > 0)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	dd71      	ble.n	8004dc0 <InitGSM+0x330>
					{
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 8004cdc:	4b4f      	ldr	r3, [pc, #316]	; (8004e1c <InitGSM+0x38c>)
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f7fe fd0e 	bl	8003700 <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <InitGSM+0x350>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	483e      	ldr	r0, [pc, #248]	; (8004de4 <InitGSM+0x354>)
 8004cea:	493e      	ldr	r1, [pc, #248]	; (8004de4 <InitGSM+0x354>)
 8004cec:	4a3e      	ldr	r2, [pc, #248]	; (8004de8 <InitGSM+0x358>)
 8004cee:	9202      	str	r2, [sp, #8]
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <InitGSM+0x390>)
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7fe fe6a 	bl	80039d4 <GetGSMReply>
 8004d00:	0003      	movs	r3, r0
 8004d02:	0018      	movs	r0, r3
 8004d04:	f7fb fa00 	bl	8000108 <strlen>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	607b      	str	r3, [r7, #4]
						if (i > 0)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dd56      	ble.n	8004dc0 <InitGSM+0x330>
						{
							HAL_Delay(3000);
 8004d12:	4b44      	ldr	r3, [pc, #272]	; (8004e24 <InitGSM+0x394>)
 8004d14:	0018      	movs	r0, r3
 8004d16:	f004 f815 	bl	8008d44 <HAL_Delay>
							// SendGSMCode(" AT+CSMP=17,167,0,16");
							// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CSMP=17,167,0,16  SMS Text mode parameter ",10));
							if (i > 0)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dd4f      	ble.n	8004dc0 <InitGSM+0x330>
							{
								SendGSMCode(" AT+QENG=1,4");
 8004d20:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <InitGSM+0x398>)
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7fe fcec 	bl	8003700 <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 8004d28:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <InitGSM+0x350>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	482d      	ldr	r0, [pc, #180]	; (8004de4 <InitGSM+0x354>)
 8004d2e:	492d      	ldr	r1, [pc, #180]	; (8004de4 <InitGSM+0x354>)
 8004d30:	4a2d      	ldr	r2, [pc, #180]	; (8004de8 <InitGSM+0x358>)
 8004d32:	9202      	str	r2, [sp, #8]
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <InitGSM+0x39c>)
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2000      	movs	r0, #0
 8004d40:	f7fe fe48 	bl	80039d4 <GetGSMReply>
 8004d44:	0003      	movs	r3, r0
 8004d46:	0018      	movs	r0, r3
 8004d48:	f7fb f9de 	bl	8000108 <strlen>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	607b      	str	r3, [r7, #4]

								if (i > 0)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	dd34      	ble.n	8004dc0 <InitGSM+0x330>
								{

									HAL_Delay(1000);
 8004d56:	23fa      	movs	r3, #250	; 0xfa
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f003 fff2 	bl	8008d44 <HAL_Delay>
									if (GSMProf == 0)
 8004d60:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <InitGSM+0x3a0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d108      	bne.n	8004d7a <InitGSM+0x2ea>
									{
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
 8004d68:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <InitGSM+0x3a4>)
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f003 fa36 	bl	80081dc <Debug_Tx>
										SetupGPRS("taisysnet"); // taisysnet");
 8004d70:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <InitGSM+0x3a8>)
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7ff fca8 	bl	80046c8 <SetupGPRS>
 8004d78:	e00b      	b.n	8004d92 <InitGSM+0x302>
									}
									else if (GSMProf == 1)
 8004d7a:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <InitGSM+0x3a0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <InitGSM+0x302>
									{
										Debug_Tx("_____________BSNL APN SET_____________________________");
 8004d82:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <InitGSM+0x3ac>)
 8004d84:	0018      	movs	r0, r3
 8004d86:	f003 fa29 	bl	80081dc <Debug_Tx>
										SetupGPRS("bsnlnet"); // taisysnet");
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <InitGSM+0x3b0>)
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7ff fc9b 	bl	80046c8 <SetupGPRS>
									}
									HAL_Delay(1000);
 8004d92:	23fa      	movs	r3, #250	; 0xfa
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	0018      	movs	r0, r3
 8004d98:	f003 ffd4 	bl	8008d44 <HAL_Delay>

									Debug_Tx("_____________Operator again_____________________________");
 8004d9c:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <InitGSM+0x3b4>)
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f003 fa1c 	bl	80081dc <Debug_Tx>
									// Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 8004da4:	23fa      	movs	r3, #250	; 0xfa
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	0018      	movs	r0, r3
 8004daa:	f003 ffcb 	bl	8008d44 <HAL_Delay>
									SetTCPMux();
 8004dae:	f7ff fc15 	bl	80045dc <SetTCPMux>
									HAL_Delay(1000);
 8004db2:	23fa      	movs	r3, #250	; 0xfa
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	0018      	movs	r0, r3
 8004db8:	f003 ffc4 	bl	8008d44 <HAL_Delay>
									SetTCPMux();
 8004dbc:	f7ff fc0e 	bl	80045dc <SetTCPMux>
	while ((ck > 0) && (i < 1))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	dd03      	ble.n	8004dce <InitGSM+0x33e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	dc00      	bgt.n	8004dce <InitGSM+0x33e>
 8004dcc:	e70f      	b.n	8004bee <InitGSM+0x15e>
					}
				}
			}
		}
	}
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b002      	add	sp, #8
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	00001388 	.word	0x00001388
 8004ddc:	08017790 	.word	0x08017790
 8004de0:	20000014 	.word	0x20000014
 8004de4:	08016dac 	.word	0x08016dac
 8004de8:	08016cac 	.word	0x08016cac
 8004dec:	08017798 	.word	0x08017798
 8004df0:	08016c00 	.word	0x08016c00
 8004df4:	080177ac 	.word	0x080177ac
 8004df8:	080177c0 	.word	0x080177c0
 8004dfc:	080177d4 	.word	0x080177d4
 8004e00:	080177e0 	.word	0x080177e0
 8004e04:	08017808 	.word	0x08017808
 8004e08:	08017814 	.word	0x08017814
 8004e0c:	0801783c 	.word	0x0801783c
 8004e10:	08017848 	.word	0x08017848
 8004e14:	08017864 	.word	0x08017864
 8004e18:	08017870 	.word	0x08017870
 8004e1c:	080178a0 	.word	0x080178a0
 8004e20:	080178b0 	.word	0x080178b0
 8004e24:	00000bb8 	.word	0x00000bb8
 8004e28:	080178dc 	.word	0x080178dc
 8004e2c:	080178ec 	.word	0x080178ec
 8004e30:	20000018 	.word	0x20000018
 8004e34:	08017914 	.word	0x08017914
 8004e38:	08017950 	.word	0x08017950
 8004e3c:	0801795c 	.word	0x0801795c
 8004e40:	08017994 	.word	0x08017994
 8004e44:	0801799c 	.word	0x0801799c

08004e48 <SPI_flash_sent_byte>:
uint8_t buffer_SPI_Recive[30];
//The data you want to receive

//This is the definition of an array

void SPI_flash_sent_byte(uint8_t data){
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	0002      	movs	r2, r0
 8004e50:	1dfb      	adds	r3, r7, #7
 8004e52:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e54:	23fa      	movs	r3, #250	; 0xfa
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	1df9      	adds	r1, r7, #7
 8004e5a:	4804      	ldr	r0, [pc, #16]	; (8004e6c <SPI_flash_sent_byte+0x24>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f007 f991 	bl	800c184 <HAL_SPI_Transmit>
}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b002      	add	sp, #8
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	2000065c 	.word	0x2000065c

08004e70 <SPI_flash_Write_Enable>:

void SPI_flash_Write_Enable() {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
    SPI_flash_cs_low;
 8004e74:	23a0      	movs	r3, #160	; 0xa0
 8004e76:	05db      	lsls	r3, r3, #23
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2110      	movs	r1, #16
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f005 fbc0 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004e82:	2006      	movs	r0, #6
 8004e84:	f7ff ffe0 	bl	8004e48 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8004e88:	23a0      	movs	r3, #160	; 0xa0
 8004e8a:	05db      	lsls	r3, r3, #23
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2110      	movs	r1, #16
 8004e90:	0018      	movs	r0, r3
 8004e92:	f005 fbb6 	bl	800a602 <HAL_GPIO_WritePin>
}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <SPI_flash_Write_Disable>:

void SPI_flash_Write_Disable() {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
    SPI_flash_cs_low;
 8004ea0:	23a0      	movs	r3, #160	; 0xa0
 8004ea2:	05db      	lsls	r3, r3, #23
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2110      	movs	r1, #16
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f005 fbaa 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8004eae:	2004      	movs	r0, #4
 8004eb0:	f7ff ffca 	bl	8004e48 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8004eb4:	23a0      	movs	r3, #160	; 0xa0
 8004eb6:	05db      	lsls	r3, r3, #23
 8004eb8:	2201      	movs	r2, #1
 8004eba:	2110      	movs	r1, #16
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f005 fba0 	bl	800a602 <HAL_GPIO_WritePin>
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <SPI_flash_sent_address>:

void SPI_flash_sent_address(uint8_t* Sent){
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004ed0:	23fa      	movs	r3, #250	; 0xfa
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <SPI_flash_sent_address+0x20>)
 8004ed8:	2203      	movs	r2, #3
 8004eda:	f007 f953 	bl	800c184 <HAL_SPI_Transmit>
}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	2000065c 	.word	0x2000065c

08004eec <SPI_flash_TransmitReceive>:



void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	000a      	movs	r2, r1
 8004ef6:	1cbb      	adds	r3, r7, #2
 8004ef8:	801a      	strh	r2, [r3, #0]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004efa:	1cbb      	adds	r3, r7, #2
 8004efc:	881c      	ldrh	r4, [r3, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4805      	ldr	r0, [pc, #20]	; (8004f18 <SPI_flash_TransmitReceive+0x2c>)
 8004f04:	23fa      	movs	r3, #250	; 0xfa
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	0023      	movs	r3, r4
 8004f0c:	f007 fa92 	bl	800c434 <HAL_SPI_TransmitReceive>
}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b003      	add	sp, #12
 8004f16:	bd90      	pop	{r4, r7, pc}
 8004f18:	2000065c 	.word	0x2000065c

08004f1c <SPI_flash_get_device_ID>:

void SPI_flash_get_device_ID( ) {
 8004f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1e:	b0a1      	sub	sp, #132	; 0x84
 8004f20:	af04      	add	r7, sp, #16
    SPI_flash_cs_low;
 8004f22:	23a0      	movs	r3, #160	; 0xa0
 8004f24:	05db      	lsls	r3, r3, #23
 8004f26:	2200      	movs	r2, #0
 8004f28:	2110      	movs	r1, #16
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f005 fb69 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8004f30:	2090      	movs	r0, #144	; 0x90
 8004f32:	f7ff ff89 	bl	8004e48 <SPI_flash_sent_byte>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8004f36:	2464      	movs	r4, #100	; 0x64
 8004f38:	193b      	adds	r3, r7, r4
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
    aa[1]=0;
 8004f3e:	193b      	adds	r3, r7, r4
 8004f40:	2200      	movs	r2, #0
 8004f42:	705a      	strb	r2, [r3, #1]
    aa[2]=0;
 8004f44:	193b      	adds	r3, r7, r4
 8004f46:	2200      	movs	r2, #0
 8004f48:	709a      	strb	r2, [r3, #2]
    aa[3]=0;
 8004f4a:	193b      	adds	r3, r7, r4
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	70da      	strb	r2, [r3, #3]
    aa[4]=0;
 8004f50:	193b      	adds	r3, r7, r4
 8004f52:	2200      	movs	r2, #0
 8004f54:	711a      	strb	r2, [r3, #4]
    aa[5]=0;
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	2200      	movs	r2, #0
 8004f5a:	715a      	strb	r2, [r3, #5]
    SPI_flash_sent_address (aa);
 8004f5c:	193b      	adds	r3, r7, r4
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f7ff ffb2 	bl	8004ec8 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(aa, 2);
 8004f64:	193b      	adds	r3, r7, r4
 8004f66:	2102      	movs	r1, #2
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f7ff ffbf 	bl	8004eec <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8004f6e:	23a0      	movs	r3, #160	; 0xa0
 8004f70:	05db      	lsls	r3, r3, #23
 8004f72:	2201      	movs	r2, #1
 8004f74:	2110      	movs	r1, #16
 8004f76:	0018      	movs	r0, r3
 8004f78:	f005 fb43 	bl	800a602 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8004f7c:	193b      	adds	r3, r7, r4
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	001a      	movs	r2, r3
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	494c      	ldr	r1, [pc, #304]	; (80050b8 <SPI_flash_get_device_ID+0x19c>)
 8004f88:	0038      	movs	r0, r7
 8004f8a:	f00d ffd3 	bl	8012f34 <siprintf>
    Debug_Tx((char*)bufd);
 8004f8e:	003b      	movs	r3, r7
 8004f90:	0018      	movs	r0, r3
 8004f92:	f003 f923 	bl	80081dc <Debug_Tx>

    SPI_flash_cs_low;
 8004f96:	23a0      	movs	r3, #160	; 0xa0
 8004f98:	05db      	lsls	r3, r3, #23
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2110      	movs	r1, #16
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f005 fb2f 	bl	800a602 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8004fa4:	209f      	movs	r0, #159	; 0x9f
 8004fa6:	f7ff ff4f 	bl	8004e48 <SPI_flash_sent_byte>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004faa:	0025      	movs	r5, r4
 8004fac:	197b      	adds	r3, r7, r5
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
       aa[1]=0;
 8004fb2:	197b      	adds	r3, r7, r5
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	705a      	strb	r2, [r3, #1]
       aa[2]=0;
 8004fb8:	197b      	adds	r3, r7, r5
 8004fba:	2200      	movs	r2, #0
 8004fbc:	709a      	strb	r2, [r3, #2]
       aa[3]=0;
 8004fbe:	197b      	adds	r3, r7, r5
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	70da      	strb	r2, [r3, #3]
       aa[4]=0;
 8004fc4:	197b      	adds	r3, r7, r5
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	711a      	strb	r2, [r3, #4]
       aa[5]=0;
 8004fca:	197b      	adds	r3, r7, r5
 8004fcc:	2200      	movs	r2, #0
 8004fce:	715a      	strb	r2, [r3, #5]
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
 8004fd0:	197b      	adds	r3, r7, r5
 8004fd2:	2103      	movs	r1, #3
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff ff89 	bl	8004eec <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8004fda:	23a0      	movs	r3, #160	; 0xa0
 8004fdc:	05db      	lsls	r3, r3, #23
 8004fde:	2201      	movs	r2, #1
 8004fe0:	2110      	movs	r1, #16
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f005 fb0d 	bl	800a602 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8004fe8:	197b      	adds	r3, r7, r5
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	001a      	movs	r2, r3
 8004fee:	197b      	adds	r3, r7, r5
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	001c      	movs	r4, r3
 8004ff4:	197b      	adds	r3, r7, r5
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	4930      	ldr	r1, [pc, #192]	; (80050bc <SPI_flash_get_device_ID+0x1a0>)
 8004ffa:	0038      	movs	r0, r7
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	0023      	movs	r3, r4
 8005000:	f00d ff98 	bl	8012f34 <siprintf>
       Debug_Tx((char*)bufd);
 8005004:	003b      	movs	r3, r7
 8005006:	0018      	movs	r0, r3
 8005008:	f003 f8e8 	bl	80081dc <Debug_Tx>



       SPI_flash_cs_low;
 800500c:	23a0      	movs	r3, #160	; 0xa0
 800500e:	05db      	lsls	r3, r3, #23
 8005010:	2200      	movs	r2, #0
 8005012:	2110      	movs	r1, #16
 8005014:	0018      	movs	r0, r3
 8005016:	f005 faf4 	bl	800a602 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 800501a:	204b      	movs	r0, #75	; 0x4b
 800501c:	f7ff ff14 	bl	8004e48 <SPI_flash_sent_byte>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8005020:	0029      	movs	r1, r5
 8005022:	187b      	adds	r3, r7, r1
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
       aa[1]=0;
 8005028:	187b      	adds	r3, r7, r1
 800502a:	2200      	movs	r2, #0
 800502c:	705a      	strb	r2, [r3, #1]
       aa[2]=0;
 800502e:	187b      	adds	r3, r7, r1
 8005030:	2200      	movs	r2, #0
 8005032:	709a      	strb	r2, [r3, #2]
       aa[3]=0;
 8005034:	187b      	adds	r3, r7, r1
 8005036:	2200      	movs	r2, #0
 8005038:	70da      	strb	r2, [r3, #3]
       aa[4]=0;
 800503a:	187b      	adds	r3, r7, r1
 800503c:	2200      	movs	r2, #0
 800503e:	711a      	strb	r2, [r3, #4]
       aa[5]=0;
 8005040:	187b      	adds	r3, r7, r1
 8005042:	2200      	movs	r2, #0
 8005044:	715a      	strb	r2, [r3, #5]
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8005046:	23fa      	movs	r3, #250	; 0xfa
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	000c      	movs	r4, r1
 800504c:	1939      	adds	r1, r7, r4
 800504e:	481c      	ldr	r0, [pc, #112]	; (80050c0 <SPI_flash_get_device_ID+0x1a4>)
 8005050:	2204      	movs	r2, #4
 8005052:	f007 f897 	bl	800c184 <HAL_SPI_Transmit>
       SPI_flash_TransmitReceive(aa, 6);
 8005056:	193b      	adds	r3, r7, r4
 8005058:	2106      	movs	r1, #6
 800505a:	0018      	movs	r0, r3
 800505c:	f7ff ff46 	bl	8004eec <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8005060:	23a0      	movs	r3, #160	; 0xa0
 8005062:	05db      	lsls	r3, r3, #23
 8005064:	2201      	movs	r2, #1
 8005066:	2110      	movs	r1, #16
 8005068:	0018      	movs	r0, r3
 800506a:	f005 faca 	bl	800a602 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 800506e:	0021      	movs	r1, r4
 8005070:	187b      	adds	r3, r7, r1
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	001e      	movs	r6, r3
 8005076:	187b      	adds	r3, r7, r1
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	469c      	mov	ip, r3
 800507c:	187b      	adds	r3, r7, r1
 800507e:	789b      	ldrb	r3, [r3, #2]
 8005080:	001a      	movs	r2, r3
 8005082:	187b      	adds	r3, r7, r1
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	001c      	movs	r4, r3
 8005088:	187b      	adds	r3, r7, r1
 800508a:	791b      	ldrb	r3, [r3, #4]
 800508c:	001d      	movs	r5, r3
 800508e:	187b      	adds	r3, r7, r1
 8005090:	795b      	ldrb	r3, [r3, #5]
 8005092:	490c      	ldr	r1, [pc, #48]	; (80050c4 <SPI_flash_get_device_ID+0x1a8>)
 8005094:	0038      	movs	r0, r7
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	9502      	str	r5, [sp, #8]
 800509a:	9401      	str	r4, [sp, #4]
 800509c:	9200      	str	r2, [sp, #0]
 800509e:	4663      	mov	r3, ip
 80050a0:	0032      	movs	r2, r6
 80050a2:	f00d ff47 	bl	8012f34 <siprintf>
       Debug_Tx((char*)bufd);
 80050a6:	003b      	movs	r3, r7
 80050a8:	0018      	movs	r0, r3
 80050aa:	f003 f897 	bl	80081dc <Debug_Tx>
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b01d      	add	sp, #116	; 0x74
 80050b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	080179d8 	.word	0x080179d8
 80050bc:	080179f8 	.word	0x080179f8
 80050c0:	2000065c 	.word	0x2000065c
 80050c4:	08017a14 	.word	0x08017a14

080050c8 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
    SPI_flash_Write_Enable();
 80050d0:	f7ff fece 	bl	8004e70 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 80050d4:	23a0      	movs	r3, #160	; 0xa0
 80050d6:	05db      	lsls	r3, r3, #23
 80050d8:	2200      	movs	r2, #0
 80050da:	2110      	movs	r1, #16
 80050dc:	0018      	movs	r0, r3
 80050de:	f005 fa90 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 80050e2:	2020      	movs	r0, #32
 80050e4:	f7ff feb0 	bl	8004e48 <SPI_flash_sent_byte>
    SPI_flash_sent_address (address);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7ff feec 	bl	8004ec8 <SPI_flash_sent_address>
    SPI_flash_cs_high;
 80050f0:	23a0      	movs	r3, #160	; 0xa0
 80050f2:	05db      	lsls	r3, r3, #23
 80050f4:	2201      	movs	r2, #1
 80050f6:	2110      	movs	r1, #16
 80050f8:	0018      	movs	r0, r3
 80050fa:	f005 fa82 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 80050fe:	f7ff fecd 	bl	8004e9c <SPI_flash_Write_Disable>
    //HAL_Delay(100);
	Debug_Rx();
 8005102:	f003 f893 	bl	800822c <Debug_Rx>
}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	46bd      	mov	sp, r7
 800510a:	b002      	add	sp, #8
 800510c:	bd80      	pop	{r7, pc}

0800510e <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 800510e:	b580      	push	{r7, lr}
 8005110:	af00      	add	r7, sp, #0
    SPI_flash_Write_Enable();
 8005112:	f7ff fead 	bl	8004e70 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8005116:	23a0      	movs	r3, #160	; 0xa0
 8005118:	05db      	lsls	r3, r3, #23
 800511a:	2200      	movs	r2, #0
 800511c:	2110      	movs	r1, #16
 800511e:	0018      	movs	r0, r3
 8005120:	f005 fa6f 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 8005124:	20c7      	movs	r0, #199	; 0xc7
 8005126:	f7ff fe8f 	bl	8004e48 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 800512a:	23a0      	movs	r3, #160	; 0xa0
 800512c:	05db      	lsls	r3, r3, #23
 800512e:	2201      	movs	r2, #1
 8005130:	2110      	movs	r1, #16
 8005132:	0018      	movs	r0, r3
 8005134:	f005 fa65 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8005138:	f7ff feb0 	bl	8004e9c <SPI_flash_Write_Disable>
}
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	1dbb      	adds	r3, r7, #6
 800514e:	801a      	strh	r2, [r3, #0]
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
 8005150:	f7ff fe8e 	bl	8004e70 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8005154:	23a0      	movs	r3, #160	; 0xa0
 8005156:	05db      	lsls	r3, r3, #23
 8005158:	2200      	movs	r2, #0
 800515a:	2110      	movs	r1, #16
 800515c:	0018      	movs	r0, r3
 800515e:	f005 fa50 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 8005162:	2002      	movs	r0, #2
 8005164:	f7ff fe70 	bl	8004e48 <SPI_flash_sent_byte>
    SPI_flash_sent_address (data_address);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	0018      	movs	r0, r3
 800516c:	f7ff feac 	bl	8004ec8 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8005170:	1dbb      	adds	r3, r7, #6
 8005172:	881a      	ldrh	r2, [r3, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	0011      	movs	r1, r2
 8005178:	0018      	movs	r0, r3
 800517a:	f7ff feb7 	bl	8004eec <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 800517e:	23a0      	movs	r3, #160	; 0xa0
 8005180:	05db      	lsls	r3, r3, #23
 8005182:	2201      	movs	r2, #1
 8005184:	2110      	movs	r1, #16
 8005186:	0018      	movs	r0, r3
 8005188:	f005 fa3b 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 800518c:	f7ff fe86 	bl	8004e9c <SPI_flash_Write_Disable>

	Debug_Rx();
 8005190:	f003 f84c 	bl	800822c <Debug_Rx>
    //HAL_Delay(1);
}
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	b004      	add	sp, #16
 800519a:	bd80      	pop	{r7, pc}

0800519c <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	1dbb      	adds	r3, r7, #6
 80051a8:	801a      	strh	r2, [r3, #0]
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 80051aa:	23a0      	movs	r3, #160	; 0xa0
 80051ac:	05db      	lsls	r3, r3, #23
 80051ae:	2200      	movs	r2, #0
 80051b0:	2110      	movs	r1, #16
 80051b2:	0018      	movs	r0, r3
 80051b4:	f005 fa25 	bl	800a602 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 80051b8:	2003      	movs	r0, #3
 80051ba:	f7ff fe45 	bl	8004e48 <SPI_flash_sent_byte>
    SPI_flash_sent_address(data_address);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7ff fe81 	bl	8004ec8 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 80051c6:	1dbb      	adds	r3, r7, #6
 80051c8:	881a      	ldrh	r2, [r3, #0]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	0011      	movs	r1, r2
 80051ce:	0018      	movs	r0, r3
 80051d0:	f7ff fe8c 	bl	8004eec <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 80051d4:	23a0      	movs	r3, #160	; 0xa0
 80051d6:	05db      	lsls	r3, r3, #23
 80051d8:	2201      	movs	r2, #1
 80051da:	2110      	movs	r1, #16
 80051dc:	0018      	movs	r0, r3
 80051de:	f005 fa10 	bl	800a602 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b004      	add	sp, #16
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <incrimentAddress2>:


	return add;
}

void incrimentAddress2(int inc){
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 80051f4:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <incrimentAddress2+0x74>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	4a19      	ldr	r2, [pc, #100]	; (8005260 <incrimentAddress2+0x74>)
 80051fc:	7852      	ldrb	r2, [r2, #1]
 80051fe:	189b      	adds	r3, r3, r2
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <incrimentAddress2+0x74>)
 8005204:	7892      	ldrb	r2, [r2, #2]
 8005206:	189b      	adds	r3, r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	18d3      	adds	r3, r2, r3
 800520c:	60fb      	str	r3, [r7, #12]
	WrtAdd[0]=addi/(256*256);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	da02      	bge.n	800521a <incrimentAddress2+0x2e>
 8005214:	4a13      	ldr	r2, [pc, #76]	; (8005264 <incrimentAddress2+0x78>)
 8005216:	4694      	mov	ip, r2
 8005218:	4463      	add	r3, ip
 800521a:	141b      	asrs	r3, r3, #16
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <incrimentAddress2+0x74>)
 8005220:	701a      	strb	r2, [r3, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a10      	ldr	r2, [pc, #64]	; (8005268 <incrimentAddress2+0x7c>)
 8005226:	4013      	ands	r3, r2
 8005228:	d503      	bpl.n	8005232 <incrimentAddress2+0x46>
 800522a:	3b01      	subs	r3, #1
 800522c:	4a0f      	ldr	r2, [pc, #60]	; (800526c <incrimentAddress2+0x80>)
 800522e:	4313      	orrs	r3, r2
 8005230:	3301      	adds	r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	da00      	bge.n	8005238 <incrimentAddress2+0x4c>
 8005236:	33ff      	adds	r3, #255	; 0xff
 8005238:	121b      	asrs	r3, r3, #8
 800523a:	b2da      	uxtb	r2, r3
 800523c:	4b08      	ldr	r3, [pc, #32]	; (8005260 <incrimentAddress2+0x74>)
 800523e:	705a      	strb	r2, [r3, #1]
	WrtAdd[2]=(addi)%256;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a0b      	ldr	r2, [pc, #44]	; (8005270 <incrimentAddress2+0x84>)
 8005244:	4013      	ands	r3, r2
 8005246:	d503      	bpl.n	8005250 <incrimentAddress2+0x64>
 8005248:	3b01      	subs	r3, #1
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <incrimentAddress2+0x88>)
 800524c:	4313      	orrs	r3, r2
 800524e:	3301      	adds	r3, #1
 8005250:	b2da      	uxtb	r2, r3
 8005252:	4b03      	ldr	r3, [pc, #12]	; (8005260 <incrimentAddress2+0x74>)
 8005254:	709a      	strb	r2, [r3, #2]


}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	46bd      	mov	sp, r7
 800525a:	b004      	add	sp, #16
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	20000030 	.word	0x20000030
 8005264:	0000ffff 	.word	0x0000ffff
 8005268:	8000ffff 	.word	0x8000ffff
 800526c:	ffff0000 	.word	0xffff0000
 8005270:	800000ff 	.word	0x800000ff
 8005274:	ffffff00 	.word	0xffffff00

08005278 <WriteQdata>:
	memset(str,0,20);
	sprintf(str, "MemoryAdd:%X-%X-%X",WrtAdd[0],WrtAdd[1],WrtAdd[2]);
	Debug_Tx(str);
}

void WriteQdata(uint8_t* data, uint16_t len) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	000a      	movs	r2, r1
 8005282:	1cbb      	adds	r3, r7, #2
 8005284:	801a      	strh	r2, [r3, #0]
	//Writes data at the end of queue
	if (len<255){
 8005286:	1cbb      	adds	r3, r7, #2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	2bfe      	cmp	r3, #254	; 0xfe
 800528c:	d80b      	bhi.n	80052a6 <WriteQdata+0x2e>
		//Debug_Tx("---------------------\nWriting  Data");
		//printAdd();
		SPI_flash_Page_Program(WrtAdd, data,len);
 800528e:	1cbb      	adds	r3, r7, #2
 8005290:	881a      	ldrh	r2, [r3, #0]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <WriteQdata+0x38>)
 8005296:	0018      	movs	r0, r3
 8005298:	f7ff ff53 	bl	8005142 <SPI_flash_Page_Program>
		incrimentAddress2(256);
 800529c:	2380      	movs	r3, #128	; 0x80
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	0018      	movs	r0, r3
 80052a2:	f7ff ffa3 	bl	80051ec <incrimentAddress2>
	}
}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b002      	add	sp, #8
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000030 	.word	0x20000030

080052b4 <isQempty>:

int isQempty() {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <isQempty+0x2c>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	4a07      	ldr	r2, [pc, #28]	; (80052e0 <isQempty+0x2c>)
 80052c2:	7852      	ldrb	r2, [r2, #1]
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	607b      	str	r3, [r7, #4]
	if(addi<(256*256*3)+256){
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a05      	ldr	r2, [pc, #20]	; (80052e4 <isQempty+0x30>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	dc01      	bgt.n	80052d6 <isQempty+0x22>
		return 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <isQempty+0x24>
	}
	return 0;
 80052d6:	2300      	movs	r3, #0

}
 80052d8:	0018      	movs	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000030 	.word	0x20000030
 80052e4:	000300ff 	.word	0x000300ff

080052e8 <ReadQdata>:

}



int ReadQdata() {
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b0c5      	sub	sp, #276	; 0x114
 80052ec:	af00      	add	r7, sp, #0
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	4b64      	ldr	r3, [pc, #400]	; (8005484 <ReadQdata+0x19c>)
 80052f4:	2100      	movs	r1, #0
 80052f6:	0018      	movs	r0, r3
 80052f8:	f00d fe88 	bl	801300c <memset>
	memset(ReadMDataS,0,4096);
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	4b61      	ldr	r3, [pc, #388]	; (8005488 <ReadQdata+0x1a0>)
 8005302:	2100      	movs	r1, #0
 8005304:	0018      	movs	r0, r3
 8005306:	f00d fe81 	bl	801300c <memset>
	if(isQempty()==1){
 800530a:	f7ff ffd3 	bl	80052b4 <isQempty>
 800530e:	0003      	movs	r3, r0
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <ReadQdata+0x38>
		Debug_Tx("Memory Empty");
 8005314:	4b5d      	ldr	r3, [pc, #372]	; (800548c <ReadQdata+0x1a4>)
 8005316:	0018      	movs	r0, r3
 8005318:	f002 ff60 	bl	80081dc <Debug_Tx>
		return 0;
 800531c:	2300      	movs	r3, #0
 800531e:	e0ac      	b.n	800547a <ReadQdata+0x192>
	}
	incrimentAddress2(-1);
 8005320:	2301      	movs	r3, #1
 8005322:	425b      	negs	r3, r3
 8005324:	0018      	movs	r0, r3
 8005326:	f7ff ff61 	bl	80051ec <incrimentAddress2>
	int len=WrtAdd[1]%16;
 800532a:	4b59      	ldr	r3, [pc, #356]	; (8005490 <ReadQdata+0x1a8>)
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	001a      	movs	r2, r3
 8005330:	230f      	movs	r3, #15
 8005332:	4013      	ands	r3, r2
 8005334:	1d7a      	adds	r2, r7, #5
 8005336:	32ff      	adds	r2, #255	; 0xff
 8005338:	6013      	str	r3, [r2, #0]
	len=len+1;
 800533a:	1d7b      	adds	r3, r7, #5
 800533c:	33ff      	adds	r3, #255	; 0xff
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	1d7a      	adds	r2, r7, #5
 8005344:	32ff      	adds	r2, #255	; 0xff
 8005346:	6013      	str	r3, [r2, #0]
	WrtAdd[1]=WrtAdd[1]/16;
 8005348:	4b51      	ldr	r3, [pc, #324]	; (8005490 <ReadQdata+0x1a8>)
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	091b      	lsrs	r3, r3, #4
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b4f      	ldr	r3, [pc, #316]	; (8005490 <ReadQdata+0x1a8>)
 8005352:	705a      	strb	r2, [r3, #1]
	WrtAdd[1]=WrtAdd[1]*16;
 8005354:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <ReadQdata+0x1a8>)
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	b2da      	uxtb	r2, r3
 800535c:	4b4c      	ldr	r3, [pc, #304]	; (8005490 <ReadQdata+0x1a8>)
 800535e:	705a      	strb	r2, [r3, #1]
	WrtAdd[2]=0;
 8005360:	4b4b      	ldr	r3, [pc, #300]	; (8005490 <ReadQdata+0x1a8>)
 8005362:	2200      	movs	r2, #0
 8005364:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8005366:	1d7b      	adds	r3, r7, #5
 8005368:	33ff      	adds	r3, #255	; 0xff
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	b29a      	uxth	r2, r3
 8005372:	4944      	ldr	r1, [pc, #272]	; (8005484 <ReadQdata+0x19c>)
 8005374:	4b46      	ldr	r3, [pc, #280]	; (8005490 <ReadQdata+0x1a8>)
 8005376:	0018      	movs	r0, r3
 8005378:	f7ff ff10 	bl	800519c <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 800537c:	2301      	movs	r3, #1
 800537e:	2286      	movs	r2, #134	; 0x86
 8005380:	0052      	lsls	r2, r2, #1
 8005382:	18ba      	adds	r2, r7, r2
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e06a      	b.n	800545e <ReadQdata+0x176>
		memset(temp,0,256);
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	005a      	lsls	r2, r3, #1
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	2100      	movs	r1, #0
 8005390:	0018      	movs	r0, r3
 8005392:	f00d fe3b 	bl	801300c <memset>
		for (int j=0;j<256;j++){
 8005396:	2300      	movs	r3, #0
 8005398:	2284      	movs	r2, #132	; 0x84
 800539a:	0052      	lsls	r2, r2, #1
 800539c:	18ba      	adds	r2, r7, r2
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e033      	b.n	800540a <ReadQdata+0x122>
			temp[j]=ReadMData[(len-i)*256+j];
 80053a2:	1d7b      	adds	r3, r7, #5
 80053a4:	33ff      	adds	r3, #255	; 0xff
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	2386      	movs	r3, #134	; 0x86
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	021a      	lsls	r2, r3, #8
 80053b4:	2084      	movs	r0, #132	; 0x84
 80053b6:	0040      	lsls	r0, r0, #1
 80053b8:	183b      	adds	r3, r7, r0
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	18d3      	adds	r3, r2, r3
 80053be:	4a31      	ldr	r2, [pc, #196]	; (8005484 <ReadQdata+0x19c>)
 80053c0:	5cd1      	ldrb	r1, [r2, r3]
 80053c2:	4b34      	ldr	r3, [pc, #208]	; (8005494 <ReadQdata+0x1ac>)
 80053c4:	2488      	movs	r4, #136	; 0x88
 80053c6:	0064      	lsls	r4, r4, #1
 80053c8:	191b      	adds	r3, r3, r4
 80053ca:	19da      	adds	r2, r3, r7
 80053cc:	183b      	adds	r3, r7, r0
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	18d3      	adds	r3, r2, r3
 80053d2:	1c0a      	adds	r2, r1, #0
 80053d4:	701a      	strb	r2, [r3, #0]
			if (temp[j]==255){
 80053d6:	4b2f      	ldr	r3, [pc, #188]	; (8005494 <ReadQdata+0x1ac>)
 80053d8:	191b      	adds	r3, r3, r4
 80053da:	19da      	adds	r2, r3, r7
 80053dc:	0001      	movs	r1, r0
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	18d3      	adds	r3, r2, r3
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2bff      	cmp	r3, #255	; 0xff
 80053e8:	d108      	bne.n	80053fc <ReadQdata+0x114>
				temp[j]=0;
 80053ea:	4b2a      	ldr	r3, [pc, #168]	; (8005494 <ReadQdata+0x1ac>)
 80053ec:	191b      	adds	r3, r3, r4
 80053ee:	19da      	adds	r2, r3, r7
 80053f0:	187b      	adds	r3, r7, r1
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	18d3      	adds	r3, r2, r3
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
				break;
 80053fa:	e00c      	b.n	8005416 <ReadQdata+0x12e>
		for (int j=0;j<256;j++){
 80053fc:	2284      	movs	r2, #132	; 0x84
 80053fe:	0052      	lsls	r2, r2, #1
 8005400:	18bb      	adds	r3, r7, r2
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	18ba      	adds	r2, r7, r2
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	2384      	movs	r3, #132	; 0x84
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2bff      	cmp	r3, #255	; 0xff
 8005414:	ddc5      	ble.n	80053a2 <ReadQdata+0xba>
			}
		}
		temp[255]=0;
 8005416:	4b1f      	ldr	r3, [pc, #124]	; (8005494 <ReadQdata+0x1ac>)
 8005418:	2288      	movs	r2, #136	; 0x88
 800541a:	0052      	lsls	r2, r2, #1
 800541c:	189b      	adds	r3, r3, r2
 800541e:	19db      	adds	r3, r3, r7
 8005420:	22ff      	movs	r2, #255	; 0xff
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]
		strcat(ReadMDataS,temp);
 8005426:	1d3a      	adds	r2, r7, #4
 8005428:	4b17      	ldr	r3, [pc, #92]	; (8005488 <ReadQdata+0x1a0>)
 800542a:	0011      	movs	r1, r2
 800542c:	0018      	movs	r0, r3
 800542e:	f00d fdf5 	bl	801301c <strcat>
		strcat(ReadMDataS,"\r\n");
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <ReadQdata+0x1a0>)
 8005434:	0018      	movs	r0, r3
 8005436:	f7fa fe67 	bl	8000108 <strlen>
 800543a:	0003      	movs	r3, r0
 800543c:	001a      	movs	r2, r3
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <ReadQdata+0x1a0>)
 8005440:	18d2      	adds	r2, r2, r3
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <ReadQdata+0x1b0>)
 8005444:	0010      	movs	r0, r2
 8005446:	0019      	movs	r1, r3
 8005448:	2303      	movs	r3, #3
 800544a:	001a      	movs	r2, r3
 800544c:	f00d ffa6 	bl	801339c <memcpy>
	for (int i=1;i<=len;i++){
 8005450:	2286      	movs	r2, #134	; 0x86
 8005452:	0052      	lsls	r2, r2, #1
 8005454:	18bb      	adds	r3, r7, r2
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	18ba      	adds	r2, r7, r2
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	2386      	movs	r3, #134	; 0x86
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	1d7b      	adds	r3, r7, #5
 8005468:	33ff      	adds	r3, #255	; 0xff
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	dd8b      	ble.n	8005388 <ReadQdata+0xa0>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <ReadQdata+0x1a8>)
 8005472:	0018      	movs	r0, r3
 8005474:	f7ff fe28 	bl	80050c8 <SPI_flash_Sector_Erase>
	return 1;
 8005478:	2301      	movs	r3, #1
}
 800547a:	0018      	movs	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	b045      	add	sp, #276	; 0x114
 8005480:	bd90      	pop	{r4, r7, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	20001918 	.word	0x20001918
 8005488:	20002918 	.word	0x20002918
 800548c:	08017a68 	.word	0x08017a68
 8005490:	20000030 	.word	0x20000030
 8005494:	fffffef4 	.word	0xfffffef4
 8005498:	08016b7c 	.word	0x08016b7c

0800549c <InitMEMQ>:

void InitMEMQ(){
 800549c:	b580      	push	{r7, lr}
 800549e:	b0c2      	sub	sp, #264	; 0x108
 80054a0:	af00      	add	r7, sp, #0
	if(isQempty()==1){
 80054a2:	f7ff ff07 	bl	80052b4 <isQempty>
 80054a6:	0003      	movs	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d142      	bne.n	8005532 <InitMEMQ+0x96>
		int i=0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	1d7a      	adds	r2, r7, #5
 80054b0:	32ff      	adds	r2, #255	; 0xff
 80054b2:	6013      	str	r3, [r2, #0]
		Debug_Tx("------------------Init Mem:");
 80054b4:	4b21      	ldr	r3, [pc, #132]	; (800553c <InitMEMQ+0xa0>)
 80054b6:	0018      	movs	r0, r3
 80054b8:	f002 fe90 	bl	80081dc <Debug_Tx>
		char str[256];
		for(i=0;i<5;i++){
 80054bc:	2300      	movs	r3, #0
 80054be:	1d7a      	adds	r2, r7, #5
 80054c0:	32ff      	adds	r2, #255	; 0xff
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	e01d      	b.n	8005502 <InitMEMQ+0x66>
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 80054c6:	1d7b      	adds	r3, r7, #5
 80054c8:	33ff      	adds	r3, #255	; 0xff
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	1d7a      	adds	r2, r7, #5
 80054ce:	32ff      	adds	r2, #255	; 0xff
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	491b      	ldr	r1, [pc, #108]	; (8005540 <InitMEMQ+0xa4>)
 80054d4:	1d38      	adds	r0, r7, #4
 80054d6:	f00d fd2d 	bl	8012f34 <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	0018      	movs	r0, r3
 80054de:	f7fa fe13 	bl	8000108 <strlen>
 80054e2:	0003      	movs	r3, r0
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	0011      	movs	r1, r2
 80054ee:	0018      	movs	r0, r3
 80054f0:	f7ff fec2 	bl	8005278 <WriteQdata>
		for(i=0;i<5;i++){
 80054f4:	1d7b      	adds	r3, r7, #5
 80054f6:	33ff      	adds	r3, #255	; 0xff
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	1d7a      	adds	r2, r7, #5
 80054fe:	32ff      	adds	r2, #255	; 0xff
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	1d7b      	adds	r3, r7, #5
 8005504:	33ff      	adds	r3, #255	; 0xff
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b04      	cmp	r3, #4
 800550a:	dddc      	ble.n	80054c6 <InitMEMQ+0x2a>
		}
		for(i=0;i<2;i++){
 800550c:	2300      	movs	r3, #0
 800550e:	1d7a      	adds	r2, r7, #5
 8005510:	32ff      	adds	r2, #255	; 0xff
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e008      	b.n	8005528 <InitMEMQ+0x8c>
			ReadQdata();
 8005516:	f7ff fee7 	bl	80052e8 <ReadQdata>
		for(i=0;i<2;i++){
 800551a:	1d7b      	adds	r3, r7, #5
 800551c:	33ff      	adds	r3, #255	; 0xff
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	1d7a      	adds	r2, r7, #5
 8005524:	32ff      	adds	r2, #255	; 0xff
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	1d7b      	adds	r3, r7, #5
 800552a:	33ff      	adds	r3, #255	; 0xff
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	ddf1      	ble.n	8005516 <InitMEMQ+0x7a>
		}
	}

}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b042      	add	sp, #264	; 0x108
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	08017a78 	.word	0x08017a78
 8005540:	08017a94 	.word	0x08017a94

08005544 <ClearQueue>:





void ClearQueue(){
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
	//uint8_t dat[]={0x01, 0x00,0x00,0x01, 0x00,0x00,0x00,0x00,0x00,0x00,0x01};
	//uint8_t add[]={0x00,0x10,0x00};

	//SPI_flash_Sector_Erase(add);
	SPI_flash_Chip_Erase();
 8005548:	f7ff fde1 	bl	800510e <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <ClearQueue+0x18>)
 800554e:	0018      	movs	r0, r3
 8005550:	f003 fbf8 	bl	8008d44 <HAL_Delay>

	//SPI_flash_Page_Program(add,dat,11);
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	00007530 	.word	0x00007530

08005560 <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8005560:	b5b0      	push	{r4, r5, r7, lr}
 8005562:	4cc9      	ldr	r4, [pc, #804]	; (8005888 <writeConfig+0x328>)
 8005564:	44a5      	add	sp, r4
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 8005570:	4bc6      	ldr	r3, [pc, #792]	; (800588c <writeConfig+0x32c>)
 8005572:	24c8      	movs	r4, #200	; 0xc8
 8005574:	00a4      	lsls	r4, r4, #2
 8005576:	191b      	adds	r3, r3, r4
 8005578:	19db      	adds	r3, r3, r7
 800557a:	4ac5      	ldr	r2, [pc, #788]	; (8005890 <writeConfig+0x330>)
 800557c:	8811      	ldrh	r1, [r2, #0]
 800557e:	8019      	strh	r1, [r3, #0]
 8005580:	7892      	ldrb	r2, [r2, #2]
 8005582:	709a      	strb	r2, [r3, #2]

	SPI_flash_Read_Data(add , data1 , 256);
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	005a      	lsls	r2, r3, #1
 8005588:	2386      	movs	r3, #134	; 0x86
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	18f9      	adds	r1, r7, r3
 800558e:	2514      	movs	r5, #20
 8005590:	197b      	adds	r3, r7, r5
 8005592:	0018      	movs	r0, r3
 8005594:	f7ff fe02 	bl	800519c <SPI_flash_Read_Data>
	add[1]=0x01;
 8005598:	4bbc      	ldr	r3, [pc, #752]	; (800588c <writeConfig+0x32c>)
 800559a:	191b      	adds	r3, r3, r4
 800559c:	19db      	adds	r3, r3, r7
 800559e:	2201      	movs	r2, #1
 80055a0:	705a      	strb	r2, [r3, #1]
	SPI_flash_Read_Data(add , data2 , 256);
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	005a      	lsls	r2, r3, #1
 80055a6:	238c      	movs	r3, #140	; 0x8c
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	18f9      	adds	r1, r7, r3
 80055ac:	197b      	adds	r3, r7, r5
 80055ae:	0018      	movs	r0, r3
 80055b0:	f7ff fdf4 	bl	800519c <SPI_flash_Read_Data>
	add[1]=0x02;
 80055b4:	4bb5      	ldr	r3, [pc, #724]	; (800588c <writeConfig+0x32c>)
 80055b6:	191b      	adds	r3, r3, r4
 80055b8:	19db      	adds	r3, r3, r7
 80055ba:	2202      	movs	r2, #2
 80055bc:	705a      	strb	r2, [r3, #1]
	SPI_flash_Read_Data(add , data3 , 256);
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	005a      	lsls	r2, r3, #1
 80055c2:	2318      	movs	r3, #24
 80055c4:	18f9      	adds	r1, r7, r3
 80055c6:	197b      	adds	r3, r7, r5
 80055c8:	0018      	movs	r0, r3
 80055ca:	f7ff fde7 	bl	800519c <SPI_flash_Read_Data>



	int i=0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	22c7      	movs	r2, #199	; 0xc7
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	18b9      	adds	r1, r7, r2
 80055d6:	600b      	str	r3, [r1, #0]
	int j=0;
 80055d8:	2300      	movs	r3, #0
 80055da:	21c6      	movs	r1, #198	; 0xc6
 80055dc:	0089      	lsls	r1, r1, #2
 80055de:	1879      	adds	r1, r7, r1
 80055e0:	600b      	str	r3, [r1, #0]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80055e2:	2300      	movs	r3, #0
 80055e4:	18ba      	adds	r2, r7, r2
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	e018      	b.n	800561c <writeConfig+0xbc>
		data1[j+i]=RegNo[i];
 80055ea:	20c7      	movs	r0, #199	; 0xc7
 80055ec:	0080      	lsls	r0, r0, #2
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	18d2      	adds	r2, r2, r3
 80055f6:	23c6      	movs	r3, #198	; 0xc6
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	6819      	ldr	r1, [r3, #0]
 80055fe:	183b      	adds	r3, r7, r0
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	18cb      	adds	r3, r1, r3
 8005604:	7811      	ldrb	r1, [r2, #0]
 8005606:	4aa3      	ldr	r2, [pc, #652]	; (8005894 <writeConfig+0x334>)
 8005608:	24c8      	movs	r4, #200	; 0xc8
 800560a:	00a4      	lsls	r4, r4, #2
 800560c:	1912      	adds	r2, r2, r4
 800560e:	19d2      	adds	r2, r2, r7
 8005610:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8005612:	183b      	adds	r3, r7, r0
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3301      	adds	r3, #1
 8005618:	183a      	adds	r2, r7, r0
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	0018      	movs	r0, r3
 8005620:	f7fa fd72 	bl	8000108 <strlen>
 8005624:	0002      	movs	r2, r0
 8005626:	21c7      	movs	r1, #199	; 0xc7
 8005628:	0089      	lsls	r1, r1, #2
 800562a:	187b      	adds	r3, r7, r1
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d303      	bcc.n	800563a <writeConfig+0xda>
 8005632:	187b      	adds	r3, r7, r1
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b0f      	cmp	r3, #15
 8005638:	ddd7      	ble.n	80055ea <writeConfig+0x8a>
	}
	j=j+RegNoLen;
 800563a:	22c6      	movs	r2, #198	; 0xc6
 800563c:	0092      	lsls	r2, r2, #2
 800563e:	18bb      	adds	r3, r7, r2
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3310      	adds	r3, #16
 8005644:	18ba      	adds	r2, r7, r2
 8005646:	6013      	str	r3, [r2, #0]

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8005648:	2300      	movs	r3, #0
 800564a:	22c7      	movs	r2, #199	; 0xc7
 800564c:	0092      	lsls	r2, r2, #2
 800564e:	18ba      	adds	r2, r7, r2
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e018      	b.n	8005686 <writeConfig+0x126>
		data1[j+i]=INSMS[i];
 8005654:	20c7      	movs	r0, #199	; 0xc7
 8005656:	0080      	lsls	r0, r0, #2
 8005658:	183b      	adds	r3, r7, r0
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	18d2      	adds	r2, r2, r3
 8005660:	23c6      	movs	r3, #198	; 0xc6
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	183b      	adds	r3, r7, r0
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	18cb      	adds	r3, r1, r3
 800566e:	7811      	ldrb	r1, [r2, #0]
 8005670:	4a88      	ldr	r2, [pc, #544]	; (8005894 <writeConfig+0x334>)
 8005672:	24c8      	movs	r4, #200	; 0xc8
 8005674:	00a4      	lsls	r4, r4, #2
 8005676:	1912      	adds	r2, r2, r4
 8005678:	19d2      	adds	r2, r2, r7
 800567a:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 800567c:	183b      	adds	r3, r7, r0
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	183a      	adds	r2, r7, r0
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	0018      	movs	r0, r3
 800568a:	f7fa fd3d 	bl	8000108 <strlen>
 800568e:	0002      	movs	r2, r0
 8005690:	21c7      	movs	r1, #199	; 0xc7
 8005692:	0089      	lsls	r1, r1, #2
 8005694:	187b      	adds	r3, r7, r1
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d303      	bcc.n	80056a4 <writeConfig+0x144>
 800569c:	187b      	adds	r3, r7, r1
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b63      	cmp	r3, #99	; 0x63
 80056a2:	ddd7      	ble.n	8005654 <writeConfig+0xf4>
	}
	j=j+INSMSLen;
 80056a4:	22c6      	movs	r2, #198	; 0xc6
 80056a6:	0092      	lsls	r2, r2, #2
 80056a8:	18bb      	adds	r3, r7, r2
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3364      	adds	r3, #100	; 0x64
 80056ae:	18ba      	adds	r2, r7, r2
 80056b0:	6013      	str	r3, [r2, #0]

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 80056b2:	2300      	movs	r3, #0
 80056b4:	22c7      	movs	r2, #199	; 0xc7
 80056b6:	0092      	lsls	r2, r2, #2
 80056b8:	18ba      	adds	r2, r7, r2
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e018      	b.n	80056f0 <writeConfig+0x190>
		data1[j+i]=OUTSMS[i];
 80056be:	20c7      	movs	r0, #199	; 0xc7
 80056c0:	0080      	lsls	r0, r0, #2
 80056c2:	183b      	adds	r3, r7, r0
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	18d2      	adds	r2, r2, r3
 80056ca:	23c6      	movs	r3, #198	; 0xc6
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	18fb      	adds	r3, r7, r3
 80056d0:	6819      	ldr	r1, [r3, #0]
 80056d2:	183b      	adds	r3, r7, r0
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	18cb      	adds	r3, r1, r3
 80056d8:	7811      	ldrb	r1, [r2, #0]
 80056da:	4a6e      	ldr	r2, [pc, #440]	; (8005894 <writeConfig+0x334>)
 80056dc:	24c8      	movs	r4, #200	; 0xc8
 80056de:	00a4      	lsls	r4, r4, #2
 80056e0:	1912      	adds	r2, r2, r4
 80056e2:	19d2      	adds	r2, r2, r7
 80056e4:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 80056e6:	183b      	adds	r3, r7, r0
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3301      	adds	r3, #1
 80056ec:	183a      	adds	r2, r7, r0
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f7fa fd08 	bl	8000108 <strlen>
 80056f8:	0002      	movs	r2, r0
 80056fa:	21c7      	movs	r1, #199	; 0xc7
 80056fc:	0089      	lsls	r1, r1, #2
 80056fe:	187b      	adds	r3, r7, r1
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d303      	bcc.n	800570e <writeConfig+0x1ae>
 8005706:	187b      	adds	r3, r7, r1
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b3b      	cmp	r3, #59	; 0x3b
 800570c:	ddd7      	ble.n	80056be <writeConfig+0x15e>
	}
	j=0;
 800570e:	2300      	movs	r3, #0
 8005710:	22c6      	movs	r2, #198	; 0xc6
 8005712:	0092      	lsls	r2, r2, #2
 8005714:	18ba      	adds	r2, r7, r2
 8005716:	6013      	str	r3, [r2, #0]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8005718:	2300      	movs	r3, #0
 800571a:	22c7      	movs	r2, #199	; 0xc7
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	18ba      	adds	r2, r7, r2
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e018      	b.n	8005756 <writeConfig+0x1f6>
		data2[j+i]=EmgIP[i];
 8005724:	20c7      	movs	r0, #199	; 0xc7
 8005726:	0080      	lsls	r0, r0, #2
 8005728:	183b      	adds	r3, r7, r0
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	18d2      	adds	r2, r2, r3
 8005730:	23c6      	movs	r3, #198	; 0xc6
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	6819      	ldr	r1, [r3, #0]
 8005738:	183b      	adds	r3, r7, r0
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	18cb      	adds	r3, r1, r3
 800573e:	7811      	ldrb	r1, [r2, #0]
 8005740:	4a55      	ldr	r2, [pc, #340]	; (8005898 <writeConfig+0x338>)
 8005742:	24c8      	movs	r4, #200	; 0xc8
 8005744:	00a4      	lsls	r4, r4, #2
 8005746:	1912      	adds	r2, r2, r4
 8005748:	19d2      	adds	r2, r2, r7
 800574a:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 800574c:	183b      	adds	r3, r7, r0
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	183a      	adds	r2, r7, r0
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	0018      	movs	r0, r3
 800575a:	f7fa fcd5 	bl	8000108 <strlen>
 800575e:	0002      	movs	r2, r0
 8005760:	21c7      	movs	r1, #199	; 0xc7
 8005762:	0089      	lsls	r1, r1, #2
 8005764:	187b      	adds	r3, r7, r1
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d303      	bcc.n	8005774 <writeConfig+0x214>
 800576c:	187b      	adds	r3, r7, r1
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b27      	cmp	r3, #39	; 0x27
 8005772:	ddd7      	ble.n	8005724 <writeConfig+0x1c4>
	}
	j=j+EmgIPLen;
 8005774:	22c6      	movs	r2, #198	; 0xc6
 8005776:	0092      	lsls	r2, r2, #2
 8005778:	18bb      	adds	r3, r7, r2
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3328      	adds	r3, #40	; 0x28
 800577e:	18ba      	adds	r2, r7, r2
 8005780:	6013      	str	r3, [r2, #0]

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8005782:	2300      	movs	r3, #0
 8005784:	22c7      	movs	r2, #199	; 0xc7
 8005786:	0092      	lsls	r2, r2, #2
 8005788:	18ba      	adds	r2, r7, r2
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e01d      	b.n	80057ca <writeConfig+0x26a>
		data2[j+i]=RegIP[i];
 800578e:	20c7      	movs	r0, #199	; 0xc7
 8005790:	0080      	lsls	r0, r0, #2
 8005792:	183b      	adds	r3, r7, r0
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	22ca      	movs	r2, #202	; 0xca
 8005798:	0092      	lsls	r2, r2, #2
 800579a:	2108      	movs	r1, #8
 800579c:	1852      	adds	r2, r2, r1
 800579e:	19d2      	adds	r2, r2, r7
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	18d2      	adds	r2, r2, r3
 80057a4:	23c6      	movs	r3, #198	; 0xc6
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	6819      	ldr	r1, [r3, #0]
 80057ac:	183b      	adds	r3, r7, r0
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	18cb      	adds	r3, r1, r3
 80057b2:	7811      	ldrb	r1, [r2, #0]
 80057b4:	4a38      	ldr	r2, [pc, #224]	; (8005898 <writeConfig+0x338>)
 80057b6:	24c8      	movs	r4, #200	; 0xc8
 80057b8:	00a4      	lsls	r4, r4, #2
 80057ba:	1912      	adds	r2, r2, r4
 80057bc:	19d2      	adds	r2, r2, r7
 80057be:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 80057c0:	183b      	adds	r3, r7, r0
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	183a      	adds	r2, r7, r0
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	23ca      	movs	r3, #202	; 0xca
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	2208      	movs	r2, #8
 80057d0:	189b      	adds	r3, r3, r2
 80057d2:	19db      	adds	r3, r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f7fa fc96 	bl	8000108 <strlen>
 80057dc:	0002      	movs	r2, r0
 80057de:	21c7      	movs	r1, #199	; 0xc7
 80057e0:	0089      	lsls	r1, r1, #2
 80057e2:	187b      	adds	r3, r7, r1
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d303      	bcc.n	80057f2 <writeConfig+0x292>
 80057ea:	187b      	adds	r3, r7, r1
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b27      	cmp	r3, #39	; 0x27
 80057f0:	ddcd      	ble.n	800578e <writeConfig+0x22e>
	}
	j=j+RegIPLen;
 80057f2:	22c6      	movs	r2, #198	; 0xc6
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	18bb      	adds	r3, r7, r2
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3328      	adds	r3, #40	; 0x28
 80057fc:	18ba      	adds	r2, r7, r2
 80057fe:	6013      	str	r3, [r2, #0]


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8005800:	2300      	movs	r3, #0
 8005802:	22c7      	movs	r2, #199	; 0xc7
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	18ba      	adds	r2, r7, r2
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e01d      	b.n	8005848 <writeConfig+0x2e8>
		data2[j+i]=TrackIP[i];
 800580c:	20c7      	movs	r0, #199	; 0xc7
 800580e:	0080      	lsls	r0, r0, #2
 8005810:	183b      	adds	r3, r7, r0
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	22cb      	movs	r2, #203	; 0xcb
 8005816:	0092      	lsls	r2, r2, #2
 8005818:	2108      	movs	r1, #8
 800581a:	1852      	adds	r2, r2, r1
 800581c:	19d2      	adds	r2, r2, r7
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	18d2      	adds	r2, r2, r3
 8005822:	23c6      	movs	r3, #198	; 0xc6
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	183b      	adds	r3, r7, r0
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	18cb      	adds	r3, r1, r3
 8005830:	7811      	ldrb	r1, [r2, #0]
 8005832:	4a19      	ldr	r2, [pc, #100]	; (8005898 <writeConfig+0x338>)
 8005834:	24c8      	movs	r4, #200	; 0xc8
 8005836:	00a4      	lsls	r4, r4, #2
 8005838:	1912      	adds	r2, r2, r4
 800583a:	19d2      	adds	r2, r2, r7
 800583c:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 800583e:	183b      	adds	r3, r7, r0
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3301      	adds	r3, #1
 8005844:	183a      	adds	r2, r7, r0
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	23cb      	movs	r3, #203	; 0xcb
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	2208      	movs	r2, #8
 800584e:	189b      	adds	r3, r3, r2
 8005850:	19db      	adds	r3, r3, r7
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	0018      	movs	r0, r3
 8005856:	f7fa fc57 	bl	8000108 <strlen>
 800585a:	0002      	movs	r2, r0
 800585c:	21c7      	movs	r1, #199	; 0xc7
 800585e:	0089      	lsls	r1, r1, #2
 8005860:	187b      	adds	r3, r7, r1
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d303      	bcc.n	8005870 <writeConfig+0x310>
 8005868:	187b      	adds	r3, r7, r1
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b27      	cmp	r3, #39	; 0x27
 800586e:	ddcd      	ble.n	800580c <writeConfig+0x2ac>
	}
	j=0;
 8005870:	2300      	movs	r3, #0
 8005872:	22c6      	movs	r2, #198	; 0xc6
 8005874:	0092      	lsls	r2, r2, #2
 8005876:	18ba      	adds	r2, r7, r2
 8005878:	6013      	str	r3, [r2, #0]


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 800587a:	2300      	movs	r3, #0
 800587c:	22c7      	movs	r2, #199	; 0xc7
 800587e:	0092      	lsls	r2, r2, #2
 8005880:	18ba      	adds	r2, r7, r2
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e028      	b.n	80058d8 <writeConfig+0x378>
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	fffffce0 	.word	0xfffffce0
 800588c:	fffffcf4 	.word	0xfffffcf4
 8005890:	08017b6c 	.word	0x08017b6c
 8005894:	fffffef8 	.word	0xfffffef8
 8005898:	fffffdf8 	.word	0xfffffdf8
		data3[j+i]=OtherData[i];
 800589c:	20c7      	movs	r0, #199	; 0xc7
 800589e:	0080      	lsls	r0, r0, #2
 80058a0:	183b      	adds	r3, r7, r0
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	22cc      	movs	r2, #204	; 0xcc
 80058a6:	0092      	lsls	r2, r2, #2
 80058a8:	2108      	movs	r1, #8
 80058aa:	1852      	adds	r2, r2, r1
 80058ac:	19d2      	adds	r2, r2, r7
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	18d2      	adds	r2, r2, r3
 80058b2:	23c6      	movs	r3, #198	; 0xc6
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	6819      	ldr	r1, [r3, #0]
 80058ba:	183b      	adds	r3, r7, r0
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	18cb      	adds	r3, r1, r3
 80058c0:	7811      	ldrb	r1, [r2, #0]
 80058c2:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <writeConfig+0x420>)
 80058c4:	24c8      	movs	r4, #200	; 0xc8
 80058c6:	00a4      	lsls	r4, r4, #2
 80058c8:	1912      	adds	r2, r2, r4
 80058ca:	19d2      	adds	r2, r2, r7
 80058cc:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80058ce:	183b      	adds	r3, r7, r0
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3301      	adds	r3, #1
 80058d4:	183a      	adds	r2, r7, r0
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	23cc      	movs	r3, #204	; 0xcc
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	2208      	movs	r2, #8
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	19db      	adds	r3, r3, r7
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7fa fc0f 	bl	8000108 <strlen>
 80058ea:	0002      	movs	r2, r0
 80058ec:	21c7      	movs	r1, #199	; 0xc7
 80058ee:	0089      	lsls	r1, r1, #2
 80058f0:	187b      	adds	r3, r7, r1
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d303      	bcc.n	8005900 <writeConfig+0x3a0>
 80058f8:	187b      	adds	r3, r7, r1
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2bff      	cmp	r3, #255	; 0xff
 80058fe:	ddcd      	ble.n	800589c <writeConfig+0x33c>
	}
	j=j+OtherDataLen;
 8005900:	22c6      	movs	r2, #198	; 0xc6
 8005902:	0092      	lsls	r2, r2, #2
 8005904:	18bb      	adds	r3, r7, r2
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	33ff      	adds	r3, #255	; 0xff
 800590c:	18ba      	adds	r2, r7, r2
 800590e:	6013      	str	r3, [r2, #0]


	add[1]=0x00;
 8005910:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <writeConfig+0x424>)
 8005912:	25c8      	movs	r5, #200	; 0xc8
 8005914:	00ad      	lsls	r5, r5, #2
 8005916:	195b      	adds	r3, r3, r5
 8005918:	19db      	adds	r3, r3, r7
 800591a:	2200      	movs	r2, #0
 800591c:	705a      	strb	r2, [r3, #1]

	SPI_flash_Sector_Erase(add);
 800591e:	2414      	movs	r4, #20
 8005920:	193b      	adds	r3, r7, r4
 8005922:	0018      	movs	r0, r3
 8005924:	f7ff fbd0 	bl	80050c8 <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	005a      	lsls	r2, r3, #1
 800592c:	2386      	movs	r3, #134	; 0x86
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	18f9      	adds	r1, r7, r3
 8005932:	193b      	adds	r3, r7, r4
 8005934:	0018      	movs	r0, r3
 8005936:	f7ff fc04 	bl	8005142 <SPI_flash_Page_Program>
	add[1]=0x01;
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <writeConfig+0x424>)
 800593c:	195b      	adds	r3, r3, r5
 800593e:	19db      	adds	r3, r3, r7
 8005940:	2201      	movs	r2, #1
 8005942:	705a      	strb	r2, [r3, #1]
	SPI_flash_Page_Program(add, data2,256);
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	005a      	lsls	r2, r3, #1
 8005948:	238c      	movs	r3, #140	; 0x8c
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	18f9      	adds	r1, r7, r3
 800594e:	193b      	adds	r3, r7, r4
 8005950:	0018      	movs	r0, r3
 8005952:	f7ff fbf6 	bl	8005142 <SPI_flash_Page_Program>
	add[1]=0x02;
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <writeConfig+0x424>)
 8005958:	195b      	adds	r3, r3, r5
 800595a:	19db      	adds	r3, r3, r7
 800595c:	2202      	movs	r2, #2
 800595e:	705a      	strb	r2, [r3, #1]
	SPI_flash_Page_Program(add, data3,256);
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	005a      	lsls	r2, r3, #1
 8005964:	2318      	movs	r3, #24
 8005966:	18f9      	adds	r1, r7, r3
 8005968:	193b      	adds	r3, r7, r4
 800596a:	0018      	movs	r0, r3
 800596c:	f7ff fbe9 	bl	8005142 <SPI_flash_Page_Program>
	return 1;
 8005970:	2301      	movs	r3, #1

}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	23c8      	movs	r3, #200	; 0xc8
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	449d      	add	sp, r3
 800597c:	bdb0      	pop	{r4, r5, r7, pc}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	fffffcf8 	.word	0xfffffcf8
 8005984:	fffffcf4 	.word	0xfffffcf4

08005988 <readRegNo>:



char* readRegNo(){
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	4a0f      	ldr	r2, [pc, #60]	; (80059d0 <readRegNo+0x48>)
 8005992:	8811      	ldrh	r1, [r2, #0]
 8005994:	8019      	strh	r1, [r3, #0]
 8005996:	7892      	ldrb	r2, [r2, #2]
 8005998:	709a      	strb	r2, [r3, #2]

    memset(dataR,0,256);
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	005a      	lsls	r2, r3, #1
 800599e:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <readRegNo+0x4c>)
 80059a0:	2100      	movs	r1, #0
 80059a2:	0018      	movs	r0, r3
 80059a4:	f00d fb32 	bl	801300c <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 80059a8:	490a      	ldr	r1, [pc, #40]	; (80059d4 <readRegNo+0x4c>)
 80059aa:	1d3b      	adds	r3, r7, #4
 80059ac:	2210      	movs	r2, #16
 80059ae:	0018      	movs	r0, r3
 80059b0:	f7ff fbf4 	bl	800519c <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <readRegNo+0x4c>)
 80059b6:	0018      	movs	r0, r3
 80059b8:	f7fa fba6 	bl	8000108 <strlen>
 80059bc:	0003      	movs	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d901      	bls.n	80059c6 <readRegNo+0x3e>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
 80059c2:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <readRegNo+0x4c>)
 80059c4:	e000      	b.n	80059c8 <readRegNo+0x40>
	}
	else{
		return "--Err RegNo--";
 80059c6:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <readRegNo+0x50>)
	}

}
 80059c8:	0018      	movs	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b002      	add	sp, #8
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	08017b6c 	.word	0x08017b6c
 80059d4:	20001818 	.word	0x20001818
 80059d8:	08017b70 	.word	0x08017b70

080059dc <readINSMSno>:

char* readINSMSno(){
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <readINSMSno+0x30>)
 80059e6:	8811      	ldrh	r1, [r2, #0]
 80059e8:	8019      	strh	r1, [r3, #0]
 80059ea:	7892      	ldrb	r2, [r2, #2]
 80059ec:	709a      	strb	r2, [r3, #2]
	add4[2]=RegNoLen;
 80059ee:	1d3b      	adds	r3, r7, #4
 80059f0:	2210      	movs	r2, #16
 80059f2:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 80059f4:	4906      	ldr	r1, [pc, #24]	; (8005a10 <readINSMSno+0x34>)
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	2264      	movs	r2, #100	; 0x64
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7ff fbce 	bl	800519c <SPI_flash_Read_Data>
	return (char*) dataR;
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <readINSMSno+0x34>)
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b002      	add	sp, #8
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	08017b6c 	.word	0x08017b6c
 8005a10:	20001818 	.word	0x20001818

08005a14 <readOUTSMSno>:

char* readOUTSMSno(){
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0

	uint8_t  add4[]={0x00, 0x00,0x00};
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <readOUTSMSno+0x30>)
 8005a1e:	8811      	ldrh	r1, [r2, #0]
 8005a20:	8019      	strh	r1, [r3, #0]
 8005a22:	7892      	ldrb	r2, [r2, #2]
 8005a24:	709a      	strb	r2, [r3, #2]
	add4[2]=RegNoLen+INSMSLen;
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	2274      	movs	r2, #116	; 0x74
 8005a2a:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8005a2c:	4906      	ldr	r1, [pc, #24]	; (8005a48 <readOUTSMSno+0x34>)
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	223c      	movs	r2, #60	; 0x3c
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7ff fbb2 	bl	800519c <SPI_flash_Read_Data>
	return (char*) dataR;
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <readOUTSMSno+0x34>)
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b002      	add	sp, #8
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	08017b6c 	.word	0x08017b6c
 8005a48:	20001818 	.word	0x20001818

08005a4c <readEmgIP>:

char* readEmgIP(){
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
	uint8_t  add4[]={0x00, 0x01,0x00};
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	4a07      	ldr	r2, [pc, #28]	; (8005a74 <readEmgIP+0x28>)
 8005a56:	8811      	ldrh	r1, [r2, #0]
 8005a58:	8019      	strh	r1, [r3, #0]
 8005a5a:	7892      	ldrb	r2, [r2, #2]
 8005a5c:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8005a5e:	4906      	ldr	r1, [pc, #24]	; (8005a78 <readEmgIP+0x2c>)
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	2228      	movs	r2, #40	; 0x28
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7ff fb99 	bl	800519c <SPI_flash_Read_Data>
	return (char*) dataR;
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <readEmgIP+0x2c>)
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b002      	add	sp, #8
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	08017b80 	.word	0x08017b80
 8005a78:	20001818 	.word	0x20001818

08005a7c <readRegIP>:

char* readRegIP(){
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
	uint8_t  add4[]={0x00, 0x01,0x00};
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	4a09      	ldr	r2, [pc, #36]	; (8005aac <readRegIP+0x30>)
 8005a86:	8811      	ldrh	r1, [r2, #0]
 8005a88:	8019      	strh	r1, [r3, #0]
 8005a8a:	7892      	ldrb	r2, [r2, #2]
 8005a8c:	709a      	strb	r2, [r3, #2]
	add4[2]=EmgIPLen;
 8005a8e:	1d3b      	adds	r3, r7, #4
 8005a90:	2228      	movs	r2, #40	; 0x28
 8005a92:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8005a94:	4906      	ldr	r1, [pc, #24]	; (8005ab0 <readRegIP+0x34>)
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	2228      	movs	r2, #40	; 0x28
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f7ff fb7e 	bl	800519c <SPI_flash_Read_Data>
	return (char*) dataR;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <readRegIP+0x34>)
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b002      	add	sp, #8
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	08017b80 	.word	0x08017b80
 8005ab0:	20001818 	.word	0x20001818

08005ab4 <readTracIP>:

char* readTracIP(){
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
	uint8_t  add4[]={0x00, 0x01,0x00};
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <readTracIP+0x30>)
 8005abe:	8811      	ldrh	r1, [r2, #0]
 8005ac0:	8019      	strh	r1, [r3, #0]
 8005ac2:	7892      	ldrb	r2, [r2, #2]
 8005ac4:	709a      	strb	r2, [r3, #2]
	add4[2]=EmgIPLen+RegIPLen;
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	2250      	movs	r2, #80	; 0x50
 8005aca:	709a      	strb	r2, [r3, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8005acc:	4906      	ldr	r1, [pc, #24]	; (8005ae8 <readTracIP+0x34>)
 8005ace:	1d3b      	adds	r3, r7, #4
 8005ad0:	2228      	movs	r2, #40	; 0x28
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7ff fb62 	bl	800519c <SPI_flash_Read_Data>
	return (char*) dataR;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <readTracIP+0x34>)
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b002      	add	sp, #8
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	08017b80 	.word	0x08017b80
 8005ae8:	20001818 	.word	0x20001818

08005aec <initAcc>:
#define WHO_AM_I_REG 0x75

/* Constants for Acc*/


static void initAcc(){
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8005af2:	4858      	ldr	r0, [pc, #352]	; (8005c54 <initAcc+0x168>)
 8005af4:	23fa      	movs	r3, #250	; 0xfa
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	9302      	str	r3, [sp, #8]
 8005afa:	2301      	movs	r3, #1
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	1dfb      	adds	r3, r7, #7
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2301      	movs	r3, #1
 8005b04:	2275      	movs	r2, #117	; 0x75
 8005b06:	21d0      	movs	r1, #208	; 0xd0
 8005b08:	f004 ff78 	bl	800a9fc <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8005b0c:	1dfb      	adds	r3, r7, #7
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b68      	cmp	r3, #104	; 0x68
 8005b12:	d144      	bne.n	8005b9e <initAcc+0xb2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8005b14:	1dbb      	adds	r3, r7, #6
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8005b1a:	484e      	ldr	r0, [pc, #312]	; (8005c54 <initAcc+0x168>)
 8005b1c:	23fa      	movs	r3, #250	; 0xfa
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	9302      	str	r3, [sp, #8]
 8005b22:	2301      	movs	r3, #1
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	1dbb      	adds	r3, r7, #6
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	226b      	movs	r2, #107	; 0x6b
 8005b2e:	21d0      	movs	r1, #208	; 0xd0
 8005b30:	f004 fe36 	bl	800a7a0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	2207      	movs	r2, #7
 8005b38:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8005b3a:	4846      	ldr	r0, [pc, #280]	; (8005c54 <initAcc+0x168>)
 8005b3c:	23fa      	movs	r3, #250	; 0xfa
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	9302      	str	r3, [sp, #8]
 8005b42:	2301      	movs	r3, #1
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	1dbb      	adds	r3, r7, #6
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	2219      	movs	r2, #25
 8005b4e:	21d0      	movs	r1, #208	; 0xd0
 8005b50:	f004 fe26 	bl	800a7a0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g
		Data = 0x00;
 8005b54:	1dbb      	adds	r3, r7, #6
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8005b5a:	483e      	ldr	r0, [pc, #248]	; (8005c54 <initAcc+0x168>)
 8005b5c:	23fa      	movs	r3, #250	; 0xfa
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	9302      	str	r3, [sp, #8]
 8005b62:	2301      	movs	r3, #1
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	1dbb      	adds	r3, r7, #6
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	221c      	movs	r2, #28
 8005b6e:	21d0      	movs	r1, #208	; 0xd0
 8005b70:	f004 fe16 	bl	800a7a0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 /s
		Data = 0x00;
 8005b74:	1dbb      	adds	r3, r7, #6
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8005b7a:	4836      	ldr	r0, [pc, #216]	; (8005c54 <initAcc+0x168>)
 8005b7c:	23fa      	movs	r3, #250	; 0xfa
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	9302      	str	r3, [sp, #8]
 8005b82:	2301      	movs	r3, #1
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	1dbb      	adds	r3, r7, #6
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	221b      	movs	r2, #27
 8005b8e:	21d0      	movs	r1, #208	; 0xd0
 8005b90:	f004 fe06 	bl	800a7a0 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 8005b94:	4b30      	ldr	r3, [pc, #192]	; (8005c58 <initAcc+0x16c>)
 8005b96:	0018      	movs	r0, r3
 8005b98:	f002 fb20 	bl	80081dc <Debug_Tx>
 8005b9c:	e043      	b.n	8005c26 <initAcc+0x13a>
	}
	else{
		Data = 0;
 8005b9e:	1dbb      	adds	r3, r7, #6
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8005ba4:	482b      	ldr	r0, [pc, #172]	; (8005c54 <initAcc+0x168>)
 8005ba6:	23fa      	movs	r3, #250	; 0xfa
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	9302      	str	r3, [sp, #8]
 8005bac:	2301      	movs	r3, #1
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	1dbb      	adds	r3, r7, #6
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	226b      	movs	r2, #107	; 0x6b
 8005bb8:	21d0      	movs	r1, #208	; 0xd0
 8005bba:	f004 fdf1 	bl	800a7a0 <HAL_I2C_Mem_Write>

				// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
				Data = 0x07;
 8005bbe:	1dbb      	adds	r3, r7, #6
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8005bc4:	4823      	ldr	r0, [pc, #140]	; (8005c54 <initAcc+0x168>)
 8005bc6:	23fa      	movs	r3, #250	; 0xfa
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	9302      	str	r3, [sp, #8]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	1dbb      	adds	r3, r7, #6
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	2219      	movs	r2, #25
 8005bd8:	21d0      	movs	r1, #208	; 0xd0
 8005bda:	f004 fde1 	bl	800a7a0 <HAL_I2C_Mem_Write>

				// Set accelerometer configuration in ACCEL_CONFIG Register
				// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 ->  2g
				Data = 0x00;
 8005bde:	1dbb      	adds	r3, r7, #6
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8005be4:	481b      	ldr	r0, [pc, #108]	; (8005c54 <initAcc+0x168>)
 8005be6:	23fa      	movs	r3, #250	; 0xfa
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	9302      	str	r3, [sp, #8]
 8005bec:	2301      	movs	r3, #1
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	1dbb      	adds	r3, r7, #6
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	221c      	movs	r2, #28
 8005bf8:	21d0      	movs	r1, #208	; 0xd0
 8005bfa:	f004 fdd1 	bl	800a7a0 <HAL_I2C_Mem_Write>

				// Set Gyroscopic configuration in GYRO_CONFIG Register
				// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 /s
				Data = 0x00;
 8005bfe:	1dbb      	adds	r3, r7, #6
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8005c04:	4813      	ldr	r0, [pc, #76]	; (8005c54 <initAcc+0x168>)
 8005c06:	23fa      	movs	r3, #250	; 0xfa
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	9302      	str	r3, [sp, #8]
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	1dbb      	adds	r3, r7, #6
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	2301      	movs	r3, #1
 8005c16:	221b      	movs	r2, #27
 8005c18:	21d0      	movs	r1, #208	; 0xd0
 8005c1a:	f004 fdc1 	bl	800a7a0 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <initAcc+0x170>)
 8005c20:	0018      	movs	r0, r3
 8005c22:	f002 fadb 	bl	80081dc <Debug_Tx>
	}

	ACC_GYRO_data[0]=0;
 8005c26:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <initAcc+0x174>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <initAcc+0x174>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <initAcc+0x174>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 8005c38:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <initAcc+0x174>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 8005c3e:	4b08      	ldr	r3, [pc, #32]	; (8005c60 <initAcc+0x174>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <initAcc+0x174>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	615a      	str	r2, [r3, #20]

}
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b002      	add	sp, #8
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	20000608 	.word	0x20000608
 8005c58:	08017b88 	.word	0x08017b88
 8005c5c:	08017b9c 	.word	0x08017b9c
 8005c60:	2000393c 	.word	0x2000393c

08005c64 <readAcc>:





static float* readAcc(){
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af04      	add	r7, sp, #16

	ACC_GYRO_data[0]=0;
 8005c6a:	4b7e      	ldr	r3, [pc, #504]	; (8005e64 <readAcc+0x200>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 8005c70:	4b7c      	ldr	r3, [pc, #496]	; (8005e64 <readAcc+0x200>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 8005c76:	4b7b      	ldr	r3, [pc, #492]	; (8005e64 <readAcc+0x200>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 8005c7c:	4b79      	ldr	r3, [pc, #484]	; (8005e64 <readAcc+0x200>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 8005c82:	4b78      	ldr	r3, [pc, #480]	; (8005e64 <readAcc+0x200>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8005c88:	4b76      	ldr	r3, [pc, #472]	; (8005e64 <readAcc+0x200>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	615a      	str	r2, [r3, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005c8e:	4876      	ldr	r0, [pc, #472]	; (8005e68 <readAcc+0x204>)
 8005c90:	23fa      	movs	r3, #250	; 0xfa
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	2306      	movs	r3, #6
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	003b      	movs	r3, r7
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	223b      	movs	r2, #59	; 0x3b
 8005ca2:	21d0      	movs	r1, #208	; 0xd0
 8005ca4:	f004 feaa 	bl	800a9fc <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8005ca8:	003b      	movs	r3, r7
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	b21a      	sxth	r2, r3
 8005cb0:	003b      	movs	r3, r7
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	b21b      	sxth	r3, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b21a      	sxth	r2, r3
 8005cba:	4b6c      	ldr	r3, [pc, #432]	; (8005e6c <readAcc+0x208>)
 8005cbc:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8005cbe:	003b      	movs	r3, r7
 8005cc0:	789b      	ldrb	r3, [r3, #2]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	b21a      	sxth	r2, r3
 8005cc6:	003b      	movs	r3, r7
 8005cc8:	78db      	ldrb	r3, [r3, #3]
 8005cca:	b21b      	sxth	r3, r3
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b21a      	sxth	r2, r3
 8005cd0:	4b67      	ldr	r3, [pc, #412]	; (8005e70 <readAcc+0x20c>)
 8005cd2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8005cd4:	003b      	movs	r3, r7
 8005cd6:	791b      	ldrb	r3, [r3, #4]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	b21a      	sxth	r2, r3
 8005cdc:	003b      	movs	r3, r7
 8005cde:	795b      	ldrb	r3, [r3, #5]
 8005ce0:	b21b      	sxth	r3, r3
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	b21a      	sxth	r2, r3
 8005ce6:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <readAcc+0x210>)
 8005ce8:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8005cea:	4b60      	ldr	r3, [pc, #384]	; (8005e6c <readAcc+0x208>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	5e9b      	ldrsh	r3, [r3, r2]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f7fd f987 	bl	8003004 <__aeabi_i2d>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	4b5f      	ldr	r3, [pc, #380]	; (8005e78 <readAcc+0x214>)
 8005cfa:	f7fb fef1 	bl	8001ae0 <__aeabi_ddiv>
 8005cfe:	0002      	movs	r2, r0
 8005d00:	000b      	movs	r3, r1
 8005d02:	0010      	movs	r0, r2
 8005d04:	0019      	movs	r1, r3
 8005d06:	f7fd fa1b 	bl	8003140 <__aeabi_d2f>
 8005d0a:	1c02      	adds	r2, r0, #0
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	; (8005e7c <readAcc+0x218>)
 8005d0e:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 8005d10:	4b57      	ldr	r3, [pc, #348]	; (8005e70 <readAcc+0x20c>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	5e9b      	ldrsh	r3, [r3, r2]
 8005d16:	0018      	movs	r0, r3
 8005d18:	f7fd f974 	bl	8003004 <__aeabi_i2d>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4b56      	ldr	r3, [pc, #344]	; (8005e78 <readAcc+0x214>)
 8005d20:	f7fb fede 	bl	8001ae0 <__aeabi_ddiv>
 8005d24:	0002      	movs	r2, r0
 8005d26:	000b      	movs	r3, r1
 8005d28:	0010      	movs	r0, r2
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	f7fd fa08 	bl	8003140 <__aeabi_d2f>
 8005d30:	1c02      	adds	r2, r0, #0
 8005d32:	4b53      	ldr	r3, [pc, #332]	; (8005e80 <readAcc+0x21c>)
 8005d34:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8005d36:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <readAcc+0x210>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	5e9b      	ldrsh	r3, [r3, r2]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7fd f961 	bl	8003004 <__aeabi_i2d>
 8005d42:	2200      	movs	r2, #0
 8005d44:	4b4c      	ldr	r3, [pc, #304]	; (8005e78 <readAcc+0x214>)
 8005d46:	f7fb fecb 	bl	8001ae0 <__aeabi_ddiv>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	000b      	movs	r3, r1
 8005d4e:	0010      	movs	r0, r2
 8005d50:	0019      	movs	r1, r3
 8005d52:	f7fd f9f5 	bl	8003140 <__aeabi_d2f>
 8005d56:	1c02      	adds	r2, r0, #0
 8005d58:	4b4a      	ldr	r3, [pc, #296]	; (8005e84 <readAcc+0x220>)
 8005d5a:	601a      	str	r2, [r3, #0]


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005d5c:	4842      	ldr	r0, [pc, #264]	; (8005e68 <readAcc+0x204>)
 8005d5e:	23fa      	movs	r3, #250	; 0xfa
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	9302      	str	r3, [sp, #8]
 8005d64:	2306      	movs	r3, #6
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	003b      	movs	r3, r7
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	2243      	movs	r2, #67	; 0x43
 8005d70:	21d0      	movs	r1, #208	; 0xd0
 8005d72:	f004 fe43 	bl	800a9fc <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8005d76:	003b      	movs	r3, r7
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	b21a      	sxth	r2, r3
 8005d7e:	003b      	movs	r3, r7
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b21a      	sxth	r2, r3
 8005d88:	4b3f      	ldr	r3, [pc, #252]	; (8005e88 <readAcc+0x224>)
 8005d8a:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8005d8c:	003b      	movs	r3, r7
 8005d8e:	789b      	ldrb	r3, [r3, #2]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	b21a      	sxth	r2, r3
 8005d94:	003b      	movs	r3, r7
 8005d96:	78db      	ldrb	r3, [r3, #3]
 8005d98:	b21b      	sxth	r3, r3
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	b21a      	sxth	r2, r3
 8005d9e:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <readAcc+0x228>)
 8005da0:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8005da2:	003b      	movs	r3, r7
 8005da4:	791b      	ldrb	r3, [r3, #4]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	b21a      	sxth	r2, r3
 8005daa:	003b      	movs	r3, r7
 8005dac:	795b      	ldrb	r3, [r3, #5]
 8005dae:	b21b      	sxth	r3, r3
 8005db0:	4313      	orrs	r3, r2
 8005db2:	b21a      	sxth	r2, r3
 8005db4:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <readAcc+0x22c>)
 8005db6:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8005db8:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <readAcc+0x224>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	5e9b      	ldrsh	r3, [r3, r2]
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f7fd f920 	bl	8003004 <__aeabi_i2d>
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4b33      	ldr	r3, [pc, #204]	; (8005e94 <readAcc+0x230>)
 8005dc8:	f7fb fe8a 	bl	8001ae0 <__aeabi_ddiv>
 8005dcc:	0002      	movs	r2, r0
 8005dce:	000b      	movs	r3, r1
 8005dd0:	0010      	movs	r0, r2
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	f7fd f9b4 	bl	8003140 <__aeabi_d2f>
 8005dd8:	1c02      	adds	r2, r0, #0
 8005dda:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <readAcc+0x234>)
 8005ddc:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8005dde:	4b2b      	ldr	r3, [pc, #172]	; (8005e8c <readAcc+0x228>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	5e9b      	ldrsh	r3, [r3, r2]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7fd f90d 	bl	8003004 <__aeabi_i2d>
 8005dea:	2200      	movs	r2, #0
 8005dec:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <readAcc+0x230>)
 8005dee:	f7fb fe77 	bl	8001ae0 <__aeabi_ddiv>
 8005df2:	0002      	movs	r2, r0
 8005df4:	000b      	movs	r3, r1
 8005df6:	0010      	movs	r0, r2
 8005df8:	0019      	movs	r1, r3
 8005dfa:	f7fd f9a1 	bl	8003140 <__aeabi_d2f>
 8005dfe:	1c02      	adds	r2, r0, #0
 8005e00:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <readAcc+0x238>)
 8005e02:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8005e04:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <readAcc+0x22c>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	5e9b      	ldrsh	r3, [r3, r2]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7fd f8fa 	bl	8003004 <__aeabi_i2d>
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <readAcc+0x230>)
 8005e14:	f7fb fe64 	bl	8001ae0 <__aeabi_ddiv>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	000b      	movs	r3, r1
 8005e1c:	0010      	movs	r0, r2
 8005e1e:	0019      	movs	r1, r3
 8005e20:	f7fd f98e 	bl	8003140 <__aeabi_d2f>
 8005e24:	1c02      	adds	r2, r0, #0
 8005e26:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <readAcc+0x23c>)
 8005e28:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 8005e2a:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <readAcc+0x218>)
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <readAcc+0x200>)
 8005e30:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=Ay;
 8005e32:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <readAcc+0x21c>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <readAcc+0x200>)
 8005e38:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=Az;
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <readAcc+0x220>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <readAcc+0x200>)
 8005e40:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=Gx;
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <readAcc+0x234>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <readAcc+0x200>)
 8005e48:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=Gy;
 8005e4a:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <readAcc+0x238>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <readAcc+0x200>)
 8005e50:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=Gz;
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <readAcc+0x23c>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <readAcc+0x200>)
 8005e58:	615a      	str	r2, [r3, #20]
	return(ACC_GYRO_data);
 8005e5a:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <readAcc+0x200>)

	//sprintf (buf, "%.2f", Ax);
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b002      	add	sp, #8
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	2000393c 	.word	0x2000393c
 8005e68:	20000608 	.word	0x20000608
 8005e6c:	20003918 	.word	0x20003918
 8005e70:	2000391a 	.word	0x2000391a
 8005e74:	2000391c 	.word	0x2000391c
 8005e78:	40d00000 	.word	0x40d00000
 8005e7c:	20003924 	.word	0x20003924
 8005e80:	20003928 	.word	0x20003928
 8005e84:	2000392c 	.word	0x2000392c
 8005e88:	2000391e 	.word	0x2000391e
 8005e8c:	20003920 	.word	0x20003920
 8005e90:	20003922 	.word	0x20003922
 8005e94:	40606000 	.word	0x40606000
 8005e98:	20003930 	.word	0x20003930
 8005e9c:	20003934 	.word	0x20003934
 8005ea0:	20003938 	.word	0x20003938

08005ea4 <detectAcc>:


int detectAcc(){
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
	readAcc();
 8005ea8:	f7ff fedc 	bl	8005c64 <readAcc>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8005eac:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <detectAcc+0xa8>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <detectAcc+0xa8>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	1c19      	adds	r1, r3, #0
 8005eb6:	1c10      	adds	r0, r2, #0
 8005eb8:	f7fa fba0 	bl	80005fc <__aeabi_fadd>
 8005ebc:	1c03      	adds	r3, r0, #0
 8005ebe:	1c1a      	adds	r2, r3, #0
 8005ec0:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <detectAcc+0xa8>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	1c19      	adds	r1, r3, #0
 8005ec6:	1c10      	adds	r0, r2, #0
 8005ec8:	f7fa fb98 	bl	80005fc <__aeabi_fadd>
 8005ecc:	1c03      	adds	r3, r0, #0
 8005ece:	4920      	ldr	r1, [pc, #128]	; (8005f50 <detectAcc+0xac>)
 8005ed0:	1c18      	adds	r0, r3, #0
 8005ed2:	f7fa fb0f 	bl	80004f4 <__aeabi_fcmpgt>
 8005ed6:	1e03      	subs	r3, r0, #0
 8005ed8:	d001      	beq.n	8005ede <detectAcc+0x3a>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e032      	b.n	8005f44 <detectAcc+0xa0>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 8005ede:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <detectAcc+0xa8>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <detectAcc+0xa8>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	1c19      	adds	r1, r3, #0
 8005ee8:	1c10      	adds	r0, r2, #0
 8005eea:	f7fa fb87 	bl	80005fc <__aeabi_fadd>
 8005eee:	1c03      	adds	r3, r0, #0
 8005ef0:	1c1a      	adds	r2, r3, #0
 8005ef2:	4b16      	ldr	r3, [pc, #88]	; (8005f4c <detectAcc+0xa8>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	1c19      	adds	r1, r3, #0
 8005ef8:	1c10      	adds	r0, r2, #0
 8005efa:	f7fa fb7f 	bl	80005fc <__aeabi_fadd>
 8005efe:	1c03      	adds	r3, r0, #0
 8005f00:	4914      	ldr	r1, [pc, #80]	; (8005f54 <detectAcc+0xb0>)
 8005f02:	1c18      	adds	r0, r3, #0
 8005f04:	f7fa fae2 	bl	80004cc <__aeabi_fcmplt>
 8005f08:	1e03      	subs	r3, r0, #0
 8005f0a:	d001      	beq.n	8005f10 <detectAcc+0x6c>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e019      	b.n	8005f44 <detectAcc+0xa0>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <detectAcc+0xa8>)
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <detectAcc+0xa8>)
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	1c19      	adds	r1, r3, #0
 8005f1a:	1c10      	adds	r0, r2, #0
 8005f1c:	f7fa fb6e 	bl	80005fc <__aeabi_fadd>
 8005f20:	1c03      	adds	r3, r0, #0
 8005f22:	1c1a      	adds	r2, r3, #0
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <detectAcc+0xa8>)
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	1c19      	adds	r1, r3, #0
 8005f2a:	1c10      	adds	r0, r2, #0
 8005f2c:	f7fa fb66 	bl	80005fc <__aeabi_fadd>
 8005f30:	1c03      	adds	r3, r0, #0
 8005f32:	4907      	ldr	r1, [pc, #28]	; (8005f50 <detectAcc+0xac>)
 8005f34:	1c18      	adds	r0, r3, #0
 8005f36:	f7fa fadd 	bl	80004f4 <__aeabi_fcmpgt>
 8005f3a:	1e03      	subs	r3, r0, #0
 8005f3c:	d001      	beq.n	8005f42 <detectAcc+0x9e>
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e000      	b.n	8005f44 <detectAcc+0xa0>


	return 0;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	0018      	movs	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	2000393c 	.word	0x2000393c
 8005f50:	44fa0000 	.word	0x44fa0000
 8005f54:	c4fa0000 	.word	0xc4fa0000

08005f58 <initGPS>:
char printBuf[50];

//char* buffer
//int ProcessRunning_GPS=0;

void initGPS(){
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 8005f5c:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <initGPS+0x6c>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
	GPSInfo.lon=0.0;
 8005f62:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <initGPS+0x6c>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	605a      	str	r2, [r3, #4]
	GPSInfo.alt=0.0;
 8005f68:	4b16      	ldr	r3, [pc, #88]	; (8005fc4 <initGPS+0x6c>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
	GPSInfo.hdop=0.0;
 8005f6e:	4b15      	ldr	r3, [pc, #84]	; (8005fc4 <initGPS+0x6c>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	60da      	str	r2, [r3, #12]
	GPSInfo.pdop=0.0;
 8005f74:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <initGPS+0x6c>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	611a      	str	r2, [r3, #16]
	GPSInfo.head=0.0;
 8005f7a:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <initGPS+0x6c>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	615a      	str	r2, [r3, #20]
	GPSInfo.speed=0.0;
 8005f80:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <initGPS+0x6c>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	619a      	str	r2, [r3, #24]
	GPSInfo.fix=0;
 8005f86:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <initGPS+0x6c>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	61da      	str	r2, [r3, #28]
	GPSInfo.sat=0;
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <initGPS+0x6c>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	621a      	str	r2, [r3, #32]
	strcpy(GPSInfo.latD,"x");
 8005f92:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <initGPS+0x70>)
 8005f94:	2278      	movs	r2, #120	; 0x78
 8005f96:	801a      	strh	r2, [r3, #0]
	strcpy(GPSInfo.lonD,"x");
 8005f98:	4a0c      	ldr	r2, [pc, #48]	; (8005fcc <initGPS+0x74>)
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <initGPS+0x78>)
 8005f9c:	0010      	movs	r0, r2
 8005f9e:	0019      	movs	r1, r3
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	001a      	movs	r2, r3
 8005fa4:	f00d f9fa 	bl	801339c <memcpy>
	strcpy(GPSInfo.time,"x");
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <initGPS+0x7c>)
 8005faa:	2278      	movs	r2, #120	; 0x78
 8005fac:	801a      	strh	r2, [r3, #0]
	strcpy(GPSInfo.date,"x");
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <initGPS+0x80>)
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <initGPS+0x78>)
 8005fb2:	0010      	movs	r0, r2
 8005fb4:	0019      	movs	r1, r3
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	001a      	movs	r2, r3
 8005fba:	f00d f9ef 	bl	801339c <memcpy>
}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20003954 	.word	0x20003954
 8005fc8:	2000397c 	.word	0x2000397c
 8005fcc:	2000397f 	.word	0x2000397f
 8005fd0:	08017bd8 	.word	0x08017bd8
 8005fd4:	20003982 	.word	0x20003982
 8005fd8:	20003991 	.word	0x20003991

08005fdc <getGPSString>:
void getGPSString(){
 8005fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fde:	46ce      	mov	lr, r9
 8005fe0:	4647      	mov	r7, r8
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b0a1      	sub	sp, #132	; 0x84
 8005fe6:	af16      	add	r7, sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 8005fe8:	4b3a      	ldr	r3, [pc, #232]	; (80060d4 <getGPSString+0xf8>)
 8005fea:	2246      	movs	r2, #70	; 0x46
 8005fec:	2100      	movs	r1, #0
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f00d f80c 	bl	801300c <memset>

	if(GPSInfo.fix==1){
 8005ff4:	4b38      	ldr	r3, [pc, #224]	; (80060d8 <getGPSString+0xfc>)
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d103      	bne.n	8006004 <getGPSString+0x28>
		SET_LED_GPS(1);
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	f7fd fa8f 	bl	8003520 <SET_LED_GPS>
 8006002:	e002      	b.n	800600a <getGPSString+0x2e>
	}
	else{
		SET_LED_GPS(0);
 8006004:	2000      	movs	r0, #0
 8006006:	f7fd fa8b 	bl	8003520 <SET_LED_GPS>
	}




	sprintf(gpsDataRet, "%1d,%10s,%10s,%10f,%1s,%10f,%1s,%5.1f,%3.0f,%2d,%4.1f,%6.2f,%6.2f",
 800600a:	4b33      	ldr	r3, [pc, #204]	; (80060d8 <getGPSString+0xfc>)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	4699      	mov	r9, r3
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 8006010:	4b31      	ldr	r3, [pc, #196]	; (80060d8 <getGPSString+0xfc>)
 8006012:	681b      	ldr	r3, [r3, #0]
	sprintf(gpsDataRet, "%1d,%10s,%10s,%10f,%1s,%10f,%1s,%5.1f,%3.0f,%2d,%4.1f,%6.2f,%6.2f",
 8006014:	1c18      	adds	r0, r3, #0
 8006016:	f7fd f84b 	bl	80030b0 <__aeabi_f2d>
 800601a:	6238      	str	r0, [r7, #32]
 800601c:	6279      	str	r1, [r7, #36]	; 0x24
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 800601e:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <getGPSString+0xfc>)
 8006020:	685b      	ldr	r3, [r3, #4]
	sprintf(gpsDataRet, "%1d,%10s,%10s,%10f,%1s,%10f,%1s,%5.1f,%3.0f,%2d,%4.1f,%6.2f,%6.2f",
 8006022:	1c18      	adds	r0, r3, #0
 8006024:	f7fd f844 	bl	80030b0 <__aeabi_f2d>
 8006028:	61b8      	str	r0, [r7, #24]
 800602a:	61f9      	str	r1, [r7, #28]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 800602c:	4b2a      	ldr	r3, [pc, #168]	; (80060d8 <getGPSString+0xfc>)
 800602e:	699b      	ldr	r3, [r3, #24]
	sprintf(gpsDataRet, "%1d,%10s,%10s,%10f,%1s,%10f,%1s,%5.1f,%3.0f,%2d,%4.1f,%6.2f,%6.2f",
 8006030:	1c18      	adds	r0, r3, #0
 8006032:	f7fd f83d 	bl	80030b0 <__aeabi_f2d>
 8006036:	6138      	str	r0, [r7, #16]
 8006038:	6179      	str	r1, [r7, #20]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 800603a:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <getGPSString+0xfc>)
 800603c:	695b      	ldr	r3, [r3, #20]
	sprintf(gpsDataRet, "%1d,%10s,%10s,%10f,%1s,%10f,%1s,%5.1f,%3.0f,%2d,%4.1f,%6.2f,%6.2f",
 800603e:	1c18      	adds	r0, r3, #0
 8006040:	f7fd f836 	bl	80030b0 <__aeabi_f2d>
 8006044:	60b8      	str	r0, [r7, #8]
 8006046:	60f9      	str	r1, [r7, #12]
 8006048:	4b23      	ldr	r3, [pc, #140]	; (80060d8 <getGPSString+0xfc>)
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	4690      	mov	r8, r2
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 800604e:	4b22      	ldr	r3, [pc, #136]	; (80060d8 <getGPSString+0xfc>)
 8006050:	689b      	ldr	r3, [r3, #8]
	sprintf(gpsDataRet, "%1d,%10s,%10s,%10f,%1s,%10f,%1s,%5.1f,%3.0f,%2d,%4.1f,%6.2f,%6.2f",
 8006052:	1c18      	adds	r0, r3, #0
 8006054:	f7fd f82c 	bl	80030b0 <__aeabi_f2d>
 8006058:	6038      	str	r0, [r7, #0]
 800605a:	6079      	str	r1, [r7, #4]
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 800605c:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <getGPSString+0xfc>)
 800605e:	691b      	ldr	r3, [r3, #16]
	sprintf(gpsDataRet, "%1d,%10s,%10s,%10f,%1s,%10f,%1s,%5.1f,%3.0f,%2d,%4.1f,%6.2f,%6.2f",
 8006060:	1c18      	adds	r0, r3, #0
 8006062:	f7fd f825 	bl	80030b0 <__aeabi_f2d>
 8006066:	0004      	movs	r4, r0
 8006068:	000d      	movs	r5, r1
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
 800606a:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <getGPSString+0xfc>)
 800606c:	68db      	ldr	r3, [r3, #12]
	sprintf(gpsDataRet, "%1d,%10s,%10s,%10f,%1s,%10f,%1s,%5.1f,%3.0f,%2d,%4.1f,%6.2f,%6.2f",
 800606e:	1c18      	adds	r0, r3, #0
 8006070:	f7fd f81e 	bl	80030b0 <__aeabi_f2d>
 8006074:	0002      	movs	r2, r0
 8006076:	000b      	movs	r3, r1
 8006078:	4e18      	ldr	r6, [pc, #96]	; (80060dc <getGPSString+0x100>)
 800607a:	4919      	ldr	r1, [pc, #100]	; (80060e0 <getGPSString+0x104>)
 800607c:	4815      	ldr	r0, [pc, #84]	; (80060d4 <getGPSString+0xf8>)
 800607e:	9214      	str	r2, [sp, #80]	; 0x50
 8006080:	9315      	str	r3, [sp, #84]	; 0x54
 8006082:	9412      	str	r4, [sp, #72]	; 0x48
 8006084:	9513      	str	r5, [sp, #76]	; 0x4c
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	687c      	ldr	r4, [r7, #4]
 800608a:	9310      	str	r3, [sp, #64]	; 0x40
 800608c:	9411      	str	r4, [sp, #68]	; 0x44
 800608e:	4642      	mov	r2, r8
 8006090:	920e      	str	r2, [sp, #56]	; 0x38
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68fc      	ldr	r4, [r7, #12]
 8006096:	930c      	str	r3, [sp, #48]	; 0x30
 8006098:	940d      	str	r4, [sp, #52]	; 0x34
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	697c      	ldr	r4, [r7, #20]
 800609e:	930a      	str	r3, [sp, #40]	; 0x28
 80060a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80060a2:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <getGPSString+0x108>)
 80060a4:	9308      	str	r3, [sp, #32]
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	69fc      	ldr	r4, [r7, #28]
 80060aa:	9306      	str	r3, [sp, #24]
 80060ac:	9407      	str	r4, [sp, #28]
 80060ae:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <getGPSString+0x10c>)
 80060b0:	9304      	str	r3, [sp, #16]
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80060b6:	9302      	str	r3, [sp, #8]
 80060b8:	9403      	str	r4, [sp, #12]
 80060ba:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <getGPSString+0x110>)
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	0033      	movs	r3, r6
 80060c0:	464a      	mov	r2, r9
 80060c2:	f00c ff37 	bl	8012f34 <siprintf>
}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	46bd      	mov	sp, r7
 80060ca:	b00b      	add	sp, #44	; 0x2c
 80060cc:	bcc0      	pop	{r6, r7}
 80060ce:	46b9      	mov	r9, r7
 80060d0:	46b0      	mov	r8, r6
 80060d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d4:	20003d88 	.word	0x20003d88
 80060d8:	20003954 	.word	0x20003954
 80060dc:	20003991 	.word	0x20003991
 80060e0:	08017bdc 	.word	0x08017bdc
 80060e4:	2000397f 	.word	0x2000397f
 80060e8:	2000397c 	.word	0x2000397c
 80060ec:	20003982 	.word	0x20003982

080060f0 <DegreeDecimalConvert>:



float DegreeDecimalConvert(float ddmmmm){
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
    // printf("insfunction2 %f",ddmmmm);
    int dd1= ddmmmm/100;
 80060f8:	4915      	ldr	r1, [pc, #84]	; (8006150 <DegreeDecimalConvert+0x60>)
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fa fc1e 	bl	800093c <__aeabi_fdiv>
 8006100:	1c03      	adds	r3, r0, #0
 8006102:	1c18      	adds	r0, r3, #0
 8006104:	f7fb f8d2 	bl	80012ac <__aeabi_f2iz>
 8006108:	0003      	movs	r3, r0
 800610a:	60fb      	str	r3, [r7, #12]
    float mm=ddmmmm -(dd1*100);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2264      	movs	r2, #100	; 0x64
 8006110:	4353      	muls	r3, r2
 8006112:	0018      	movs	r0, r3
 8006114:	f7fb f8ea 	bl	80012ec <__aeabi_i2f>
 8006118:	1c03      	adds	r3, r0, #0
 800611a:	1c19      	adds	r1, r3, #0
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fa ff25 	bl	8000f6c <__aeabi_fsub>
 8006122:	1c03      	adds	r3, r0, #0
 8006124:	60bb      	str	r3, [r7, #8]
    mm=mm/60;
 8006126:	490b      	ldr	r1, [pc, #44]	; (8006154 <DegreeDecimalConvert+0x64>)
 8006128:	68b8      	ldr	r0, [r7, #8]
 800612a:	f7fa fc07 	bl	800093c <__aeabi_fdiv>
 800612e:	1c03      	adds	r3, r0, #0
 8006130:	60bb      	str	r3, [r7, #8]
    mm=(float)dd1+mm;
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7fb f8da 	bl	80012ec <__aeabi_i2f>
 8006138:	1c03      	adds	r3, r0, #0
 800613a:	1c19      	adds	r1, r3, #0
 800613c:	68b8      	ldr	r0, [r7, #8]
 800613e:	f7fa fa5d 	bl	80005fc <__aeabi_fadd>
 8006142:	1c03      	adds	r3, r0, #0
 8006144:	60bb      	str	r3, [r7, #8]
    return(mm);
 8006146:	68bb      	ldr	r3, [r7, #8]
}
 8006148:	1c18      	adds	r0, r3, #0
 800614a:	46bd      	mov	sp, r7
 800614c:	b004      	add	sp, #16
 800614e:	bd80      	pop	{r7, pc}
 8006150:	42c80000 	.word	0x42c80000
 8006154:	42700000 	.word	0x42700000

08006158 <printInt>:
	snprintf(printBuf, 6, "%5.0f", x);
	//gcvt(x, 6, buf);
	Debug_Tx(printBuf);

}
void printInt(int x){
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	memset(printBuf,0,50);
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <printInt+0x30>)
 8006162:	2232      	movs	r2, #50	; 0x32
 8006164:	2100      	movs	r1, #0
 8006166:	0018      	movs	r0, r3
 8006168:	f00c ff50 	bl	801300c <memset>
	snprintf(printBuf, 6, "%d", x);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a07      	ldr	r2, [pc, #28]	; (800618c <printInt+0x34>)
 8006170:	4805      	ldr	r0, [pc, #20]	; (8006188 <printInt+0x30>)
 8006172:	2106      	movs	r1, #6
 8006174:	f00c feaa 	bl	8012ecc <sniprintf>
	//gcvt(x, 6, buf);
	Debug_Tx(printBuf);
 8006178:	4b03      	ldr	r3, [pc, #12]	; (8006188 <printInt+0x30>)
 800617a:	0018      	movs	r0, r3
 800617c:	f002 f82e 	bl	80081dc <Debug_Tx>

}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	b002      	add	sp, #8
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20003ddc 	.word	0x20003ddc
 800618c:	08016bfc 	.word	0x08016bfc

08006190 <nmea0183_checksum>:
int nmea0183_checksum(char *s){//one extra blank char was found so last 4 char had to remove
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
    int c = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
    while (*s)
 800619c:	e007      	b.n	80061ae <nmea0183_checksum+0x1e>
        c ^= *s++;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	001a      	movs	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4053      	eors	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
    while (*s)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f3      	bne.n	800619e <nmea0183_checksum+0xe>

    return c;
 80061b6:	68fb      	ldr	r3, [r7, #12]

}
 80061b8:	0018      	movs	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b004      	add	sp, #16
 80061be:	bd80      	pop	{r7, pc}

080061c0 <getGNRMC>:
        }
    }
}
*/

void getGNRMC(const char * ptra){
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);
	int i=0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
    char *token = strtok((char *)ptra, ",");
 80061cc:	4a5a      	ldr	r2, [pc, #360]	; (8006338 <getGNRMC+0x178>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	0011      	movs	r1, r2
 80061d2:	0018      	movs	r0, r3
 80061d4:	f00c ff62 	bl	801309c <strtok>
 80061d8:	0003      	movs	r3, r0
 80061da:	613b      	str	r3, [r7, #16]
    while( token != NULL ) {
 80061dc:	e0a2      	b.n	8006324 <getGNRMC+0x164>
  	    if(i==1){ //Getting time
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d105      	bne.n	80061f0 <getGNRMC+0x30>
  	    	strncpy(GPSInfo.time,token,6);
 80061e4:	6939      	ldr	r1, [r7, #16]
 80061e6:	4b55      	ldr	r3, [pc, #340]	; (800633c <getGNRMC+0x17c>)
 80061e8:	2206      	movs	r2, #6
 80061ea:	0018      	movs	r0, r3
 80061ec:	f00c ff42 	bl	8013074 <strncpy>
  	    }
  	    if(i==10){ //Getting GPS status
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2b0a      	cmp	r3, #10
 80061f4:	d10d      	bne.n	8006212 <getGNRMC+0x52>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	214e      	movs	r1, #78	; 0x4e
 80061fa:	0018      	movs	r0, r3
 80061fc:	f00c ff1b 	bl	8013036 <strchr>
 8006200:	1e03      	subs	r3, r0, #0
 8006202:	d003      	beq.n	800620c <getGNRMC+0x4c>
 8006204:	4b4e      	ldr	r3, [pc, #312]	; (8006340 <getGNRMC+0x180>)
 8006206:	2200      	movs	r2, #0
 8006208:	61da      	str	r2, [r3, #28]
 800620a:	e002      	b.n	8006212 <getGNRMC+0x52>
  	        else{GPSInfo.fix=1;}
 800620c:	4b4c      	ldr	r3, [pc, #304]	; (8006340 <getGNRMC+0x180>)
 800620e:	2201      	movs	r2, #1
 8006210:	61da      	str	r2, [r3, #28]
  	    }
  	    if(i==10){ //Getting GPS status
  	        //if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
  	    }
  	    if(i==3){ //Getting Latitude
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d10a      	bne.n	800622e <getGNRMC+0x6e>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	0018      	movs	r0, r3
 800621c:	f000 fe6c 	bl	8006ef8 <stor>
 8006220:	1c03      	adds	r3, r0, #0
 8006222:	1c18      	adds	r0, r3, #0
 8006224:	f7ff ff64 	bl	80060f0 <DegreeDecimalConvert>
 8006228:	1c02      	adds	r2, r0, #0
 800622a:	4b45      	ldr	r3, [pc, #276]	; (8006340 <getGNRMC+0x180>)
 800622c:	601a      	str	r2, [r3, #0]
  	    }
  	    if(i==4){ //Getting Latitude ind
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b04      	cmp	r3, #4
 8006232:	d105      	bne.n	8006240 <getGNRMC+0x80>
  	        strcpy(GPSInfo.latD,token);
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4b43      	ldr	r3, [pc, #268]	; (8006344 <getGNRMC+0x184>)
 8006238:	0011      	movs	r1, r2
 800623a:	0018      	movs	r0, r3
 800623c:	f00d f89b 	bl	8013376 <strcpy>
  	    }
  	    if(i==5){ //Getting Longitude
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b05      	cmp	r3, #5
 8006244:	d10a      	bne.n	800625c <getGNRMC+0x9c>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	0018      	movs	r0, r3
 800624a:	f000 fe55 	bl	8006ef8 <stor>
 800624e:	1c03      	adds	r3, r0, #0
 8006250:	1c18      	adds	r0, r3, #0
 8006252:	f7ff ff4d 	bl	80060f0 <DegreeDecimalConvert>
 8006256:	1c02      	adds	r2, r0, #0
 8006258:	4b39      	ldr	r3, [pc, #228]	; (8006340 <getGNRMC+0x180>)
 800625a:	605a      	str	r2, [r3, #4]
  	    }
  	    if(i==6){ //Getting Longitude ind
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b06      	cmp	r3, #6
 8006260:	d105      	bne.n	800626e <getGNRMC+0xae>
  	    	strcpy(GPSInfo.lonD,token);
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4b38      	ldr	r3, [pc, #224]	; (8006348 <getGNRMC+0x188>)
 8006266:	0011      	movs	r1, r2
 8006268:	0018      	movs	r0, r3
 800626a:	f00d f884 	bl	8013376 <strcpy>
  	    }
  	    if(i==9){ //Getting Date
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b09      	cmp	r3, #9
 8006272:	d139      	bne.n	80062e8 <getGNRMC+0x128>
  			memset(dd,0,10);
 8006274:	4b35      	ldr	r3, [pc, #212]	; (800634c <getGNRMC+0x18c>)
 8006276:	220a      	movs	r2, #10
 8006278:	2100      	movs	r1, #0
 800627a:	0018      	movs	r0, r3
 800627c:	f00c fec6 	bl	801300c <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e00b      	b.n	800629e <getGNRMC+0xde>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	18d3      	adds	r3, r2, r3
 800628c:	7819      	ldrb	r1, [r3, #0]
 800628e:	4a2f      	ldr	r2, [pc, #188]	; (800634c <getGNRMC+0x18c>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	18d3      	adds	r3, r2, r3
 8006294:	1c0a      	adds	r2, r1, #0
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	ddf0      	ble.n	8006286 <getGNRMC+0xc6>
  	        dd[4]='2';
 80062a4:	4b29      	ldr	r3, [pc, #164]	; (800634c <getGNRMC+0x18c>)
 80062a6:	2232      	movs	r2, #50	; 0x32
 80062a8:	711a      	strb	r2, [r3, #4]
  	        dd[5]='0';
 80062aa:	4b28      	ldr	r3, [pc, #160]	; (800634c <getGNRMC+0x18c>)
 80062ac:	2230      	movs	r2, #48	; 0x30
 80062ae:	715a      	strb	r2, [r3, #5]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 80062b0:	2306      	movs	r3, #6
 80062b2:	60bb      	str	r3, [r7, #8]
 80062b4:	e00c      	b.n	80062d0 <getGNRMC+0x110>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	3b02      	subs	r3, #2
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	18d3      	adds	r3, r2, r3
 80062be:	7819      	ldrb	r1, [r3, #0]
 80062c0:	4a22      	ldr	r2, [pc, #136]	; (800634c <getGNRMC+0x18c>)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	18d3      	adds	r3, r2, r3
 80062c6:	1c0a      	adds	r2, r1, #0
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60bb      	str	r3, [r7, #8]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b07      	cmp	r3, #7
 80062d4:	ddef      	ble.n	80062b6 <getGNRMC+0xf6>
  	        dd[8]='\0';
 80062d6:	4b1d      	ldr	r3, [pc, #116]	; (800634c <getGNRMC+0x18c>)
 80062d8:	2200      	movs	r2, #0
 80062da:	721a      	strb	r2, [r3, #8]
  	        strcpy(GPSInfo.date,dd);
 80062dc:	4a1b      	ldr	r2, [pc, #108]	; (800634c <getGNRMC+0x18c>)
 80062de:	4b1c      	ldr	r3, [pc, #112]	; (8006350 <getGNRMC+0x190>)
 80062e0:	0011      	movs	r1, r2
 80062e2:	0018      	movs	r0, r3
 80062e4:	f00d f847 	bl	8013376 <strcpy>
  	    }
  	    if(i==7){ //Getting Speed
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b07      	cmp	r3, #7
 80062ec:	d106      	bne.n	80062fc <getGNRMC+0x13c>
  	        GPSInfo.speed=stor(token);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f000 fe01 	bl	8006ef8 <stor>
 80062f6:	1c02      	adds	r2, r0, #0
 80062f8:	4b11      	ldr	r3, [pc, #68]	; (8006340 <getGNRMC+0x180>)
 80062fa:	619a      	str	r2, [r3, #24]
  	    }
  	    if(i==8){ //Getting Course
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d106      	bne.n	8006310 <getGNRMC+0x150>
  	        GPSInfo.head=stor(token);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	0018      	movs	r0, r3
 8006306:	f000 fdf7 	bl	8006ef8 <stor>
 800630a:	1c02      	adds	r2, r0, #0
 800630c:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <getGNRMC+0x180>)
 800630e:	615a      	str	r2, [r3, #20]
  	    }
  	    token = strtok(NULL,",");
 8006310:	4b09      	ldr	r3, [pc, #36]	; (8006338 <getGNRMC+0x178>)
 8006312:	0019      	movs	r1, r3
 8006314:	2000      	movs	r0, #0
 8006316:	f00c fec1 	bl	801309c <strtok>
 800631a:	0003      	movs	r3, r0
 800631c:	613b      	str	r3, [r7, #16]
        i++;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	3301      	adds	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
    while( token != NULL ) {
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d000      	beq.n	800632c <getGNRMC+0x16c>
 800632a:	e758      	b.n	80061de <getGNRMC+0x1e>
    }
	//free(token);
}
 800632c:	46c0      	nop			; (mov r8, r8)
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	b006      	add	sp, #24
 8006334:	bd80      	pop	{r7, pc}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	08016c30 	.word	0x08016c30
 800633c:	20003982 	.word	0x20003982
 8006340:	20003954 	.word	0x20003954
 8006344:	2000397c 	.word	0x2000397c
 8006348:	2000397f 	.word	0x2000397f
 800634c:	20003dd0 	.word	0x20003dd0
 8006350:	20003991 	.word	0x20003991

08006354 <getGNGSA>:
void getGNGSA(const  char * ptra){
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);
	int i=0;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
    char *token = strtok((char *)ptra, ",");
 8006360:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <getGNGSA+0x6c>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	0011      	movs	r1, r2
 8006366:	0018      	movs	r0, r3
 8006368:	f00c fe98 	bl	801309c <strtok>
 800636c:	0003      	movs	r3, r0
 800636e:	60bb      	str	r3, [r7, #8]
    while( token != NULL ) {
 8006370:	e01d      	b.n	80063ae <getGNGSA+0x5a>

        if(i==15){ //Getting PDOP
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b0f      	cmp	r3, #15
 8006376:	d106      	bne.n	8006386 <getGNGSA+0x32>
    	    GPSInfo.pdop=stor(token);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	0018      	movs	r0, r3
 800637c:	f000 fdbc 	bl	8006ef8 <stor>
 8006380:	1c02      	adds	r2, r0, #0
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <getGNGSA+0x70>)
 8006384:	611a      	str	r2, [r3, #16]
    	}
    	if(i==16){ //Getting HDOP
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b10      	cmp	r3, #16
 800638a:	d106      	bne.n	800639a <getGNGSA+0x46>
    	    GPSInfo.hdop=stor(token);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	0018      	movs	r0, r3
 8006390:	f000 fdb2 	bl	8006ef8 <stor>
 8006394:	1c02      	adds	r2, r0, #0
 8006396:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <getGNGSA+0x70>)
 8006398:	60da      	str	r2, [r3, #12]
        }
  	    token = strtok(NULL,",");
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <getGNGSA+0x6c>)
 800639c:	0019      	movs	r1, r3
 800639e:	2000      	movs	r0, #0
 80063a0:	f00c fe7c 	bl	801309c <strtok>
 80063a4:	0003      	movs	r3, r0
 80063a6:	60bb      	str	r3, [r7, #8]
        i++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
    while( token != NULL ) {
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1de      	bne.n	8006372 <getGNGSA+0x1e>
    }
	//free(token);
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b004      	add	sp, #16
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	08016c30 	.word	0x08016c30
 80063c4:	20003954 	.word	0x20003954

080063c8 <getGNGGA>:



void getGNGGA(const  char * ptra){
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	//Debug_Tx((char*)ptra);

	int i=0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
    char *token = strtok((char *)ptra, ",");
 80063d4:	4a17      	ldr	r2, [pc, #92]	; (8006434 <getGNGGA+0x6c>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	0011      	movs	r1, r2
 80063da:	0018      	movs	r0, r3
 80063dc:	f00c fe5e 	bl	801309c <strtok>
 80063e0:	0003      	movs	r3, r0
 80063e2:	60bb      	str	r3, [r7, #8]
    while( token != NULL ) {
 80063e4:	e01d      	b.n	8006422 <getGNGGA+0x5a>
    	if(i==7){ //Getting Satellites no
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b07      	cmp	r3, #7
 80063ea:	d106      	bne.n	80063fa <getGNGGA+0x32>
            GPSInfo.sat = atoi(token);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f00a fe90 	bl	8011114 <atoi>
 80063f4:	0002      	movs	r2, r0
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <getGNGGA+0x70>)
 80063f8:	621a      	str	r2, [r3, #32]
        }

    	if(i==9){ //Getting Saltitute
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b09      	cmp	r3, #9
 80063fe:	d106      	bne.n	800640e <getGNGGA+0x46>
            GPSInfo.alt = stor(token);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	0018      	movs	r0, r3
 8006404:	f000 fd78 	bl	8006ef8 <stor>
 8006408:	1c02      	adds	r2, r0, #0
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <getGNGGA+0x70>)
 800640c:	609a      	str	r2, [r3, #8]

  	    if(i==6){ //Getting GPS status
  	        //if(strstr(token,"0") != NULL){GPSInfo.fix=0;}
  	        //else{GPSInfo.fix=1;}
  	    }
  	    token = strtok(NULL,",");
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <getGNGGA+0x6c>)
 8006410:	0019      	movs	r1, r3
 8006412:	2000      	movs	r0, #0
 8006414:	f00c fe42 	bl	801309c <strtok>
 8006418:	0003      	movs	r3, r0
 800641a:	60bb      	str	r3, [r7, #8]
        i++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
    while( token != NULL ) {
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1de      	bne.n	80063e6 <getGNGGA+0x1e>
    }
	//free(token);
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	46bd      	mov	sp, r7
 800642e:	b004      	add	sp, #16
 8006430:	bd80      	pop	{r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	08016c30 	.word	0x08016c30
 8006438:	20003954 	.word	0x20003954

0800643c <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	212a      	movs	r1, #42	; 0x2a
 8006448:	0018      	movs	r0, r3
 800644a:	f00c fdf4 	bl	8013036 <strchr>
 800644e:	0003      	movs	r3, r0
 8006450:	3301      	adds	r3, #1
 8006452:	2210      	movs	r2, #16
 8006454:	2100      	movs	r1, #0
 8006456:	0018      	movs	r0, r3
 8006458:	f00b fde2 	bl	8012020 <strtol>
 800645c:	0002      	movs	r2, r0
 800645e:	230e      	movs	r3, #14
 8006460:	18fb      	adds	r3, r7, r3
 8006462:	701a      	strb	r2, [r3, #0]

    char p;
    uint8_t sum = 0;
 8006464:	230f      	movs	r3, #15
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
    ++message;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3301      	adds	r3, #1
 8006470:	607b      	str	r3, [r7, #4]
    while ((p = *message++) != '*') {
 8006472:	e008      	b.n	8006486 <nmea_valid_checksum+0x4a>
        sum ^= p;
 8006474:	220f      	movs	r2, #15
 8006476:	18bb      	adds	r3, r7, r2
 8006478:	18b9      	adds	r1, r7, r2
 800647a:	220d      	movs	r2, #13
 800647c:	18ba      	adds	r2, r7, r2
 800647e:	7809      	ldrb	r1, [r1, #0]
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	404a      	eors	r2, r1
 8006484:	701a      	strb	r2, [r3, #0]
    while ((p = *message++) != '*') {
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	210d      	movs	r1, #13
 800648e:	187a      	adds	r2, r7, r1
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	7013      	strb	r3, [r2, #0]
 8006494:	187b      	adds	r3, r7, r1
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b2a      	cmp	r3, #42	; 0x2a
 800649a:	d1eb      	bne.n	8006474 <nmea_valid_checksum+0x38>
    }

    if (sum != checksum) {
 800649c:	230f      	movs	r3, #15
 800649e:	18fa      	adds	r2, r7, r3
 80064a0:	230e      	movs	r3, #14
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	7812      	ldrb	r2, [r2, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <nmea_valid_checksum+0x74>
        return 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <nmea_valid_checksum+0x76>
    }

    return 1;
 80064b0:	2301      	movs	r3, #1
}
 80064b2:	0018      	movs	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b004      	add	sp, #16
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <validateGPS>:
int validateGPS(const char * str){
 80064bc:	b5b0      	push	{r4, r5, r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	int GPStyp=0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

	uint8_t checksum = 0;
 80064c8:	250b      	movs	r5, #11
 80064ca:	197b      	adds	r3, r7, r5
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 80064d0:	197c      	adds	r4, r7, r5
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	0018      	movs	r0, r3
 80064d6:	f7ff ffb1 	bl	800643c <nmea_valid_checksum>
 80064da:	0003      	movs	r3, r0
 80064dc:	7023      	strb	r3, [r4, #0]
 80064de:	197b      	adds	r3, r7, r5
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d001      	beq.n	80064ea <validateGPS+0x2e>
	        return 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e056      	b.n	8006598 <validateGPS+0xdc>
	    }
	    if(strlen(str)<4){return 0;}
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7f9 fe0b 	bl	8000108 <strlen>
 80064f2:	0003      	movs	r3, r0
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d801      	bhi.n	80064fc <validateGPS+0x40>
 80064f8:	2300      	movs	r3, #0
 80064fa:	e04d      	b.n	8006598 <validateGPS+0xdc>

	    if (strstr(str, "GNRMC") != NULL) {
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <validateGPS+0xe4>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	0011      	movs	r1, r2
 8006502:	0018      	movs	r0, r3
 8006504:	f00c fe32 	bl	801316c <strstr>
 8006508:	1e03      	subs	r3, r0, #0
 800650a:	d006      	beq.n	800651a <validateGPS+0x5e>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 800650c:	2301      	movs	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	0018      	movs	r0, r3
 8006514:	f7ff fe54 	bl	80061c0 <getGNRMC>
 8006518:	e03d      	b.n	8006596 <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGGA") != NULL) {
 800651a:	4a22      	ldr	r2, [pc, #136]	; (80065a4 <validateGPS+0xe8>)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0011      	movs	r1, r2
 8006520:	0018      	movs	r0, r3
 8006522:	f00c fe23 	bl	801316c <strstr>
 8006526:	1e03      	subs	r3, r0, #0
 8006528:	d006      	beq.n	8006538 <validateGPS+0x7c>
	    	//Debug_Tx(str);
	    	GPStyp=2; getGNGGA(str);
 800652a:	2302      	movs	r3, #2
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	0018      	movs	r0, r3
 8006532:	f7ff ff49 	bl	80063c8 <getGNGGA>
 8006536:	e02e      	b.n	8006596 <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGSA") != NULL) {
 8006538:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <validateGPS+0xec>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0011      	movs	r1, r2
 800653e:	0018      	movs	r0, r3
 8006540:	f00c fe14 	bl	801316c <strstr>
 8006544:	1e03      	subs	r3, r0, #0
 8006546:	d006      	beq.n	8006556 <validateGPS+0x9a>
	    	//Debug_Tx(str);
	    	GPStyp=3;getGNGSA(str);
 8006548:	2303      	movs	r3, #3
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	0018      	movs	r0, r3
 8006550:	f7ff ff00 	bl	8006354 <getGNGSA>
 8006554:	e01f      	b.n	8006596 <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGSV") != NULL) {
 8006556:	4a15      	ldr	r2, [pc, #84]	; (80065ac <validateGPS+0xf0>)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	0011      	movs	r1, r2
 800655c:	0018      	movs	r0, r3
 800655e:	f00c fe05 	bl	801316c <strstr>
 8006562:	1e03      	subs	r3, r0, #0
 8006564:	d002      	beq.n	800656c <validateGPS+0xb0>
	    	GPStyp=4;
 8006566:	2304      	movs	r3, #4
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	e014      	b.n	8006596 <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNGLL") != NULL) {
 800656c:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <validateGPS+0xf4>)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	0011      	movs	r1, r2
 8006572:	0018      	movs	r0, r3
 8006574:	f00c fdfa 	bl	801316c <strstr>
 8006578:	1e03      	subs	r3, r0, #0
 800657a:	d002      	beq.n	8006582 <validateGPS+0xc6>
	    	GPStyp=5;
 800657c:	2305      	movs	r3, #5
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e009      	b.n	8006596 <validateGPS+0xda>
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
 8006582:	4a0c      	ldr	r2, [pc, #48]	; (80065b4 <validateGPS+0xf8>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	0011      	movs	r1, r2
 8006588:	0018      	movs	r0, r3
 800658a:	f00c fdef 	bl	801316c <strstr>
 800658e:	1e03      	subs	r3, r0, #0
 8006590:	d001      	beq.n	8006596 <validateGPS+0xda>
	    	GPStyp=6;
 8006592:	2306      	movs	r3, #6
 8006594:	60fb      	str	r3, [r7, #12]
	    }
    return(GPStyp);
 8006596:	68fb      	ldr	r3, [r7, #12]
}
 8006598:	0018      	movs	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	b004      	add	sp, #16
 800659e:	bdb0      	pop	{r4, r5, r7, pc}
 80065a0:	08017c28 	.word	0x08017c28
 80065a4:	08017c30 	.word	0x08017c30
 80065a8:	08017c38 	.word	0x08017c38
 80065ac:	08017c40 	.word	0x08017c40
 80065b0:	08017c48 	.word	0x08017c48
 80065b4:	08017c50 	.word	0x08017c50

080065b8 <getSpeed>:

float getSpeed(){
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
	return GPSInfo.speed;
 80065bc:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <getSpeed+0x10>)
 80065be:	699b      	ldr	r3, [r3, #24]
}
 80065c0:	1c18      	adds	r0, r3, #0
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	20003954 	.word	0x20003954

080065cc <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
	    //Debug_Tx(gpsData);
		int valid=0 ;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
		if(strlen((char*)gpsData)>5){
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <ProcessGPS+0x5c>)
 80065d8:	0018      	movs	r0, r3
 80065da:	f7f9 fd95 	bl	8000108 <strlen>
 80065de:	0003      	movs	r3, r0
 80065e0:	2b05      	cmp	r3, #5
 80065e2:	d91d      	bls.n	8006620 <ProcessGPS+0x54>

			char *tk= NULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	607b      	str	r3, [r7, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 80065e8:	1d3a      	adds	r2, r7, #4
 80065ea:	4910      	ldr	r1, [pc, #64]	; (800662c <ProcessGPS+0x60>)
 80065ec:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <ProcessGPS+0x5c>)
 80065ee:	0018      	movs	r0, r3
 80065f0:	f00c fdb7 	bl	8013162 <strtok_r>
 80065f4:	0003      	movs	r3, r0
 80065f6:	60bb      	str	r3, [r7, #8]
			while( token != NULL ) {
 80065f8:	e00f      	b.n	800661a <ProcessGPS+0x4e>
				valid=valid+validateGPS(token);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7ff ff5d 	bl	80064bc <validateGPS>
 8006602:	0002      	movs	r2, r0
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	189b      	adds	r3, r3, r2
 8006608:	60fb      	str	r3, [r7, #12]
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 800660a:	1d3a      	adds	r2, r7, #4
 800660c:	4b07      	ldr	r3, [pc, #28]	; (800662c <ProcessGPS+0x60>)
 800660e:	0019      	movs	r1, r3
 8006610:	2000      	movs	r0, #0
 8006612:	f00c fda6 	bl	8013162 <strtok_r>
 8006616:	0003      	movs	r3, r0
 8006618:	60bb      	str	r3, [r7, #8]
			while( token != NULL ) {
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1ec      	bne.n	80065fa <ProcessGPS+0x2e>
			}
			//free(token);
		}
}
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b004      	add	sp, #16
 8006626:	bd80      	pop	{r7, pc}
 8006628:	200039a0 	.word	0x200039a0
 800662c:	08016b7c 	.word	0x08016b7c

08006630 <tic>:

int ticT;
int tocT;
char tocTxt[30];
char time1[10];
int tic(){
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8006634:	f002 fb7c 	bl	8008d30 <HAL_GetTick>
 8006638:	0003      	movs	r3, r0
}
 800663a:	0018      	movs	r0, r3
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <toc>:
void toc(int tc, char Message[]){
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
	strcat(tocTxt,time1);
	Debug_Tx(tocTxt);
	*/


}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	46bd      	mov	sp, r7
 800664e:	b002      	add	sp, #8
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 8006654:	b590      	push	{r4, r7, lr}
 8006656:	b087      	sub	sp, #28
 8006658:	af04      	add	r7, sp, #16
	int i=0;
 800665a:	2300      	movs	r3, #0
 800665c:	607b      	str	r3, [r7, #4]
	Debug_Tx("------------------Testing Memory:");
 800665e:	4b18      	ldr	r3, [pc, #96]	; (80066c0 <TestMEM+0x6c>)
 8006660:	0018      	movs	r0, r3
 8006662:	f001 fdbb 	bl	80081dc <Debug_Tx>
	for(i=0;i<1;i++){
 8006666:	2300      	movs	r3, #0
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	e020      	b.n	80066ae <TestMEM+0x5a>
		SPI_flash_get_device_ID( );
 800666c:	f7fe fc56 	bl	8004f1c <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8006670:	4c14      	ldr	r4, [pc, #80]	; (80066c4 <TestMEM+0x70>)
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <TestMEM+0x74>)
 8006674:	4915      	ldr	r1, [pc, #84]	; (80066cc <TestMEM+0x78>)
 8006676:	4816      	ldr	r0, [pc, #88]	; (80066d0 <TestMEM+0x7c>)
 8006678:	4b16      	ldr	r3, [pc, #88]	; (80066d4 <TestMEM+0x80>)
 800667a:	9302      	str	r3, [sp, #8]
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <TestMEM+0x70>)
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <TestMEM+0x70>)
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	0023      	movs	r3, r4
 8006686:	f7fe ff6b 	bl	8005560 <writeConfig>
		 	  				  "216.10.243.86","216.10.243.86","216.10.243.86",
			  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");


		Debug_Tx("Reading RegNo--");
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <TestMEM+0x84>)
 800668c:	0018      	movs	r0, r3
 800668e:	f001 fda5 	bl	80081dc <Debug_Tx>
		Debug_Tx(readRegNo());
 8006692:	f7ff f979 	bl	8005988 <readRegNo>
 8006696:	0003      	movs	r3, r0
 8006698:	0018      	movs	r0, r3
 800669a:	f001 fd9f 	bl	80081dc <Debug_Tx>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 800669e:	23fa      	movs	r3, #250	; 0xfa
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	0018      	movs	r0, r3
 80066a4:	f002 fb4e 	bl	8008d44 <HAL_Delay>
	for(i=0;i<1;i++){
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3301      	adds	r3, #1
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	dddb      	ble.n	800666c <TestMEM+0x18>

	}


}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b003      	add	sp, #12
 80066bc:	bd90      	pop	{r4, r7, pc}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	08017efc 	.word	0x08017efc
 80066c4:	08017f20 	.word	0x08017f20
 80066c8:	08017f30 	.word	0x08017f30
 80066cc:	08017f58 	.word	0x08017f58
 80066d0:	08017f7c 	.word	0x08017f7c
 80066d4:	08017f8c 	.word	0x08017f8c
 80066d8:	08017fc8 	.word	0x08017fc8

080066dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066e0:	f002 faf4 	bl	8008ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80066e4:	f000 f852 	bl	800678c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80066e8:	f000 fae4 	bl	8006cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80066ec:	f000 fab4 	bl	8006c58 <MX_DMA_Init>
  MX_ADC1_Init();
 80066f0:	f000 f896 	bl	8006820 <MX_ADC1_Init>
  MX_I2C1_Init();
 80066f4:	f000 f926 	bl	8006944 <MX_I2C1_Init>
  MX_SPI1_Init();
 80066f8:	f000 f964 	bl	80069c4 <MX_SPI1_Init>
  MX_TIM6_Init();
 80066fc:	f000 f9a0 	bl	8006a40 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8006700:	f000 f9da 	bl	8006ab8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006704:	f000 fa26 	bl	8006b54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006708:	f000 fa72 	bl	8006bf0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800670c:	f008 f9ec 	bl	800eae8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testQ */
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8006710:	4b13      	ldr	r3, [pc, #76]	; (8006760 <main+0x84>)
 8006712:	001a      	movs	r2, r3
 8006714:	2102      	movs	r1, #2
 8006716:	2010      	movs	r0, #16
 8006718:	f008 fae0 	bl	800ecdc <osMessageQueueNew>
 800671c:	0002      	movs	r2, r0
 800671e:	4b11      	ldr	r3, [pc, #68]	; (8006764 <main+0x88>)
 8006720:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006722:	4a11      	ldr	r2, [pc, #68]	; (8006768 <main+0x8c>)
 8006724:	4b11      	ldr	r3, [pc, #68]	; (800676c <main+0x90>)
 8006726:	2100      	movs	r1, #0
 8006728:	0018      	movs	r0, r3
 800672a:	f008 fa25 	bl	800eb78 <osThreadNew>
 800672e:	0002      	movs	r2, r0
 8006730:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <main+0x94>)
 8006732:	601a      	str	r2, [r3, #0]

  /* creation of GPS_read */
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8006734:	4a0f      	ldr	r2, [pc, #60]	; (8006774 <main+0x98>)
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <main+0x9c>)
 8006738:	2100      	movs	r1, #0
 800673a:	0018      	movs	r0, r3
 800673c:	f008 fa1c 	bl	800eb78 <osThreadNew>
 8006740:	0002      	movs	r2, r0
 8006742:	4b0e      	ldr	r3, [pc, #56]	; (800677c <main+0xa0>)
 8006744:	601a      	str	r2, [r3, #0]

  /* creation of StatusLED */
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8006746:	4a0e      	ldr	r2, [pc, #56]	; (8006780 <main+0xa4>)
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <main+0xa8>)
 800674a:	2100      	movs	r1, #0
 800674c:	0018      	movs	r0, r3
 800674e:	f008 fa13 	bl	800eb78 <osThreadNew>
 8006752:	0002      	movs	r2, r0
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <main+0xac>)
 8006756:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8006758:	f008 f9e8 	bl	800eb2c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800675c:	e7fe      	b.n	800675c <main+0x80>
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	08018488 	.word	0x08018488
 8006764:	20003f14 	.word	0x20003f14
 8006768:	0801841c 	.word	0x0801841c
 800676c:	08007225 	.word	0x08007225
 8006770:	20003f08 	.word	0x20003f08
 8006774:	08018440 	.word	0x08018440
 8006778:	0800731d 	.word	0x0800731d
 800677c:	20003f0c 	.word	0x20003f0c
 8006780:	08018464 	.word	0x08018464
 8006784:	0800732d 	.word	0x0800732d
 8006788:	20003f10 	.word	0x20003f10

0800678c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b093      	sub	sp, #76	; 0x4c
 8006790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006792:	2414      	movs	r4, #20
 8006794:	193b      	adds	r3, r7, r4
 8006796:	0018      	movs	r0, r3
 8006798:	2334      	movs	r3, #52	; 0x34
 800679a:	001a      	movs	r2, r3
 800679c:	2100      	movs	r1, #0
 800679e:	f00c fc35 	bl	801300c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067a2:	1d3b      	adds	r3, r7, #4
 80067a4:	0018      	movs	r0, r3
 80067a6:	2310      	movs	r3, #16
 80067a8:	001a      	movs	r2, r3
 80067aa:	2100      	movs	r1, #0
 80067ac:	f00c fc2e 	bl	801300c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067b0:	2380      	movs	r3, #128	; 0x80
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	0018      	movs	r0, r3
 80067b6:	f004 fdc9 	bl	800b34c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80067ba:	193b      	adds	r3, r7, r4
 80067bc:	2202      	movs	r2, #2
 80067be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80067c0:	193b      	adds	r3, r7, r4
 80067c2:	2280      	movs	r2, #128	; 0x80
 80067c4:	0052      	lsls	r2, r2, #1
 80067c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80067c8:	193b      	adds	r3, r7, r4
 80067ca:	2200      	movs	r2, #0
 80067cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80067ce:	193b      	adds	r3, r7, r4
 80067d0:	2240      	movs	r2, #64	; 0x40
 80067d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80067d4:	193b      	adds	r3, r7, r4
 80067d6:	2200      	movs	r2, #0
 80067d8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067da:	193b      	adds	r3, r7, r4
 80067dc:	0018      	movs	r0, r3
 80067de:	f004 fe01 	bl	800b3e4 <HAL_RCC_OscConfig>
 80067e2:	1e03      	subs	r3, r0, #0
 80067e4:	d001      	beq.n	80067ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80067e6:	f001 fd6d 	bl	80082c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067ea:	1d3b      	adds	r3, r7, #4
 80067ec:	2207      	movs	r2, #7
 80067ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80067f0:	1d3b      	adds	r3, r7, #4
 80067f2:	2200      	movs	r2, #0
 80067f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067f6:	1d3b      	adds	r3, r7, #4
 80067f8:	2200      	movs	r2, #0
 80067fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80067fc:	1d3b      	adds	r3, r7, #4
 80067fe:	22a0      	movs	r2, #160	; 0xa0
 8006800:	01d2      	lsls	r2, r2, #7
 8006802:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006804:	1d3b      	adds	r3, r7, #4
 8006806:	2100      	movs	r1, #0
 8006808:	0018      	movs	r0, r3
 800680a:	f005 f8fb 	bl	800ba04 <HAL_RCC_ClockConfig>
 800680e:	1e03      	subs	r3, r0, #0
 8006810:	d001      	beq.n	8006816 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8006812:	f001 fd57 	bl	80082c4 <Error_Handler>
  }
}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	46bd      	mov	sp, r7
 800681a:	b013      	add	sp, #76	; 0x4c
 800681c:	bd90      	pop	{r4, r7, pc}
	...

08006820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	0018      	movs	r0, r3
 800682a:	230c      	movs	r3, #12
 800682c:	001a      	movs	r2, r3
 800682e:	2100      	movs	r1, #0
 8006830:	f00c fbec 	bl	801300c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006834:	4b3e      	ldr	r3, [pc, #248]	; (8006930 <MX_ADC1_Init+0x110>)
 8006836:	4a3f      	ldr	r2, [pc, #252]	; (8006934 <MX_ADC1_Init+0x114>)
 8006838:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800683a:	4b3d      	ldr	r3, [pc, #244]	; (8006930 <MX_ADC1_Init+0x110>)
 800683c:	2280      	movs	r2, #128	; 0x80
 800683e:	05d2      	lsls	r2, r2, #23
 8006840:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006842:	4b3b      	ldr	r3, [pc, #236]	; (8006930 <MX_ADC1_Init+0x110>)
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006848:	4b39      	ldr	r3, [pc, #228]	; (8006930 <MX_ADC1_Init+0x110>)
 800684a:	2200      	movs	r2, #0
 800684c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800684e:	4b38      	ldr	r3, [pc, #224]	; (8006930 <MX_ADC1_Init+0x110>)
 8006850:	2280      	movs	r2, #128	; 0x80
 8006852:	0392      	lsls	r2, r2, #14
 8006854:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <MX_ADC1_Init+0x110>)
 8006858:	2204      	movs	r2, #4
 800685a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800685c:	4b34      	ldr	r3, [pc, #208]	; (8006930 <MX_ADC1_Init+0x110>)
 800685e:	2200      	movs	r2, #0
 8006860:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8006862:	4b33      	ldr	r3, [pc, #204]	; (8006930 <MX_ADC1_Init+0x110>)
 8006864:	2200      	movs	r2, #0
 8006866:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006868:	4b31      	ldr	r3, [pc, #196]	; (8006930 <MX_ADC1_Init+0x110>)
 800686a:	2200      	movs	r2, #0
 800686c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800686e:	4b30      	ldr	r3, [pc, #192]	; (8006930 <MX_ADC1_Init+0x110>)
 8006870:	2204      	movs	r2, #4
 8006872:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006874:	4b2e      	ldr	r3, [pc, #184]	; (8006930 <MX_ADC1_Init+0x110>)
 8006876:	2220      	movs	r2, #32
 8006878:	2100      	movs	r1, #0
 800687a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800687c:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <MX_ADC1_Init+0x110>)
 800687e:	2200      	movs	r2, #0
 8006880:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006882:	4b2b      	ldr	r3, [pc, #172]	; (8006930 <MX_ADC1_Init+0x110>)
 8006884:	2200      	movs	r2, #0
 8006886:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006888:	4b29      	ldr	r3, [pc, #164]	; (8006930 <MX_ADC1_Init+0x110>)
 800688a:	222c      	movs	r2, #44	; 0x2c
 800688c:	2100      	movs	r1, #0
 800688e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <MX_ADC1_Init+0x110>)
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8006896:	4b26      	ldr	r3, [pc, #152]	; (8006930 <MX_ADC1_Init+0x110>)
 8006898:	2200      	movs	r2, #0
 800689a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800689c:	4b24      	ldr	r3, [pc, #144]	; (8006930 <MX_ADC1_Init+0x110>)
 800689e:	2200      	movs	r2, #0
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80068a2:	4b23      	ldr	r3, [pc, #140]	; (8006930 <MX_ADC1_Init+0x110>)
 80068a4:	223c      	movs	r2, #60	; 0x3c
 80068a6:	2100      	movs	r1, #0
 80068a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80068aa:	4b21      	ldr	r3, [pc, #132]	; (8006930 <MX_ADC1_Init+0x110>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80068b0:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <MX_ADC1_Init+0x110>)
 80068b2:	0018      	movs	r0, r3
 80068b4:	f002 fbc8 	bl	8009048 <HAL_ADC_Init>
 80068b8:	1e03      	subs	r3, r0, #0
 80068ba:	d001      	beq.n	80068c0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80068bc:	f001 fd02 	bl	80082c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80068c0:	1d3b      	adds	r3, r7, #4
 80068c2:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <MX_ADC1_Init+0x118>)
 80068c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	2204      	movs	r2, #4
 80068ca:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80068cc:	1d3b      	adds	r3, r7, #4
 80068ce:	2200      	movs	r2, #0
 80068d0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068d2:	1d3a      	adds	r2, r7, #4
 80068d4:	4b16      	ldr	r3, [pc, #88]	; (8006930 <MX_ADC1_Init+0x110>)
 80068d6:	0011      	movs	r1, r2
 80068d8:	0018      	movs	r0, r3
 80068da:	f002 fe03 	bl	80094e4 <HAL_ADC_ConfigChannel>
 80068de:	1e03      	subs	r3, r0, #0
 80068e0:	d001      	beq.n	80068e6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80068e2:	f001 fcef 	bl	80082c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80068e6:	1d3b      	adds	r3, r7, #4
 80068e8:	4a14      	ldr	r2, [pc, #80]	; (800693c <MX_ADC1_Init+0x11c>)
 80068ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80068ec:	1d3b      	adds	r3, r7, #4
 80068ee:	2208      	movs	r2, #8
 80068f0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068f2:	1d3a      	adds	r2, r7, #4
 80068f4:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <MX_ADC1_Init+0x110>)
 80068f6:	0011      	movs	r1, r2
 80068f8:	0018      	movs	r0, r3
 80068fa:	f002 fdf3 	bl	80094e4 <HAL_ADC_ConfigChannel>
 80068fe:	1e03      	subs	r3, r0, #0
 8006900:	d001      	beq.n	8006906 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8006902:	f001 fcdf 	bl	80082c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	4a0d      	ldr	r2, [pc, #52]	; (8006940 <MX_ADC1_Init+0x120>)
 800690a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800690c:	1d3b      	adds	r3, r7, #4
 800690e:	220c      	movs	r2, #12
 8006910:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006912:	1d3a      	adds	r2, r7, #4
 8006914:	4b06      	ldr	r3, [pc, #24]	; (8006930 <MX_ADC1_Init+0x110>)
 8006916:	0011      	movs	r1, r2
 8006918:	0018      	movs	r0, r3
 800691a:	f002 fde3 	bl	80094e4 <HAL_ADC_ConfigChannel>
 800691e:	1e03      	subs	r3, r0, #0
 8006920:	d001      	beq.n	8006926 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8006922:	f001 fccf 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	46bd      	mov	sp, r7
 800692a:	b004      	add	sp, #16
 800692c:	bd80      	pop	{r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	20000548 	.word	0x20000548
 8006934:	40012400 	.word	0x40012400
 8006938:	04000002 	.word	0x04000002
 800693c:	24000200 	.word	0x24000200
 8006940:	2c000800 	.word	0x2c000800

08006944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <MX_I2C1_Init+0x74>)
 800694a:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <MX_I2C1_Init+0x78>)
 800694c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800694e:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <MX_I2C1_Init+0x74>)
 8006950:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <MX_I2C1_Init+0x7c>)
 8006952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006954:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <MX_I2C1_Init+0x74>)
 8006956:	2200      	movs	r2, #0
 8006958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800695a:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <MX_I2C1_Init+0x74>)
 800695c:	2201      	movs	r2, #1
 800695e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006960:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <MX_I2C1_Init+0x74>)
 8006962:	2200      	movs	r2, #0
 8006964:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <MX_I2C1_Init+0x74>)
 8006968:	2200      	movs	r2, #0
 800696a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800696c:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <MX_I2C1_Init+0x74>)
 800696e:	2200      	movs	r2, #0
 8006970:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006972:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <MX_I2C1_Init+0x74>)
 8006974:	2200      	movs	r2, #0
 8006976:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006978:	4b0f      	ldr	r3, [pc, #60]	; (80069b8 <MX_I2C1_Init+0x74>)
 800697a:	2200      	movs	r2, #0
 800697c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800697e:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <MX_I2C1_Init+0x74>)
 8006980:	0018      	movs	r0, r3
 8006982:	f003 fe77 	bl	800a674 <HAL_I2C_Init>
 8006986:	1e03      	subs	r3, r0, #0
 8006988:	d001      	beq.n	800698e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800698a:	f001 fc9b 	bl	80082c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800698e:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <MX_I2C1_Init+0x74>)
 8006990:	2100      	movs	r1, #0
 8006992:	0018      	movs	r0, r3
 8006994:	f004 fc42 	bl	800b21c <HAL_I2CEx_ConfigAnalogFilter>
 8006998:	1e03      	subs	r3, r0, #0
 800699a:	d001      	beq.n	80069a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800699c:	f001 fc92 	bl	80082c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <MX_I2C1_Init+0x74>)
 80069a2:	2100      	movs	r1, #0
 80069a4:	0018      	movs	r0, r3
 80069a6:	f004 fc85 	bl	800b2b4 <HAL_I2CEx_ConfigDigitalFilter>
 80069aa:	1e03      	subs	r3, r0, #0
 80069ac:	d001      	beq.n	80069b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80069ae:	f001 fc89 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000608 	.word	0x20000608
 80069bc:	40005400 	.word	0x40005400
 80069c0:	00000e14 	.word	0x00000e14

080069c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80069c8:	4b1b      	ldr	r3, [pc, #108]	; (8006a38 <MX_SPI1_Init+0x74>)
 80069ca:	4a1c      	ldr	r2, [pc, #112]	; (8006a3c <MX_SPI1_Init+0x78>)
 80069cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80069ce:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <MX_SPI1_Init+0x74>)
 80069d0:	2282      	movs	r2, #130	; 0x82
 80069d2:	0052      	lsls	r2, r2, #1
 80069d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80069d6:	4b18      	ldr	r3, [pc, #96]	; (8006a38 <MX_SPI1_Init+0x74>)
 80069d8:	2200      	movs	r2, #0
 80069da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80069dc:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <MX_SPI1_Init+0x74>)
 80069de:	22e0      	movs	r2, #224	; 0xe0
 80069e0:	00d2      	lsls	r2, r2, #3
 80069e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e4:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <MX_SPI1_Init+0x74>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <MX_SPI1_Init+0x74>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80069f0:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <MX_SPI1_Init+0x74>)
 80069f2:	2280      	movs	r2, #128	; 0x80
 80069f4:	0092      	lsls	r2, r2, #2
 80069f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80069f8:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <MX_SPI1_Init+0x74>)
 80069fa:	2208      	movs	r2, #8
 80069fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80069fe:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <MX_SPI1_Init+0x74>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <MX_SPI1_Init+0x74>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <MX_SPI1_Init+0x74>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006a10:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <MX_SPI1_Init+0x74>)
 8006a12:	2207      	movs	r2, #7
 8006a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006a16:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <MX_SPI1_Init+0x74>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <MX_SPI1_Init+0x74>)
 8006a1e:	2208      	movs	r2, #8
 8006a20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006a22:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <MX_SPI1_Init+0x74>)
 8006a24:	0018      	movs	r0, r3
 8006a26:	f005 faf5 	bl	800c014 <HAL_SPI_Init>
 8006a2a:	1e03      	subs	r3, r0, #0
 8006a2c:	d001      	beq.n	8006a32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006a2e:	f001 fc49 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	2000065c 	.word	0x2000065c
 8006a3c:	40013000 	.word	0x40013000

08006a40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	0018      	movs	r0, r3
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	001a      	movs	r2, r3
 8006a4e:	2100      	movs	r1, #0
 8006a50:	f00c fadc 	bl	801300c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006a54:	4b15      	ldr	r3, [pc, #84]	; (8006aac <MX_TIM6_Init+0x6c>)
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <MX_TIM6_Init+0x70>)
 8006a58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 8006a5a:	4b14      	ldr	r3, [pc, #80]	; (8006aac <MX_TIM6_Init+0x6c>)
 8006a5c:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <MX_TIM6_Init+0x74>)
 8006a5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a60:	4b12      	ldr	r3, [pc, #72]	; (8006aac <MX_TIM6_Init+0x6c>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500-1;
 8006a66:	4b11      	ldr	r3, [pc, #68]	; (8006aac <MX_TIM6_Init+0x6c>)
 8006a68:	22f4      	movs	r2, #244	; 0xf4
 8006a6a:	32ff      	adds	r2, #255	; 0xff
 8006a6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a6e:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <MX_TIM6_Init+0x6c>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006a74:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <MX_TIM6_Init+0x6c>)
 8006a76:	0018      	movs	r0, r3
 8006a78:	f006 f824 	bl	800cac4 <HAL_TIM_Base_Init>
 8006a7c:	1e03      	subs	r3, r0, #0
 8006a7e:	d001      	beq.n	8006a84 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8006a80:	f001 fc20 	bl	80082c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a84:	1d3b      	adds	r3, r7, #4
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a8a:	1d3b      	adds	r3, r7, #4
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006a90:	1d3a      	adds	r2, r7, #4
 8006a92:	4b06      	ldr	r3, [pc, #24]	; (8006aac <MX_TIM6_Init+0x6c>)
 8006a94:	0011      	movs	r1, r2
 8006a96:	0018      	movs	r0, r3
 8006a98:	f006 fa8a 	bl	800cfb0 <HAL_TIMEx_MasterConfigSynchronization>
 8006a9c:	1e03      	subs	r3, r0, #0
 8006a9e:	d001      	beq.n	8006aa4 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8006aa0:	f001 fc10 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006aa4:	46c0      	nop			; (mov r8, r8)
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b004      	add	sp, #16
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	200006c0 	.word	0x200006c0
 8006ab0:	40001000 	.word	0x40001000
 8006ab4:	00001f3f 	.word	0x00001f3f

08006ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006abc:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006abe:	4a24      	ldr	r2, [pc, #144]	; (8006b50 <MX_USART1_UART_Init+0x98>)
 8006ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006ac2:	4b22      	ldr	r3, [pc, #136]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006ac4:	2296      	movs	r2, #150	; 0x96
 8006ac6:	0192      	lsls	r2, r2, #6
 8006ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006aca:	4b20      	ldr	r3, [pc, #128]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006ad0:	4b1e      	ldr	r3, [pc, #120]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006ad6:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006adc:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006ade:	220c      	movs	r2, #12
 8006ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ae2:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ae8:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006aee:	4b17      	ldr	r3, [pc, #92]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006af4:	4b15      	ldr	r3, [pc, #84]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006afa:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b00:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006b02:	0018      	movs	r0, r3
 8006b04:	f006 fad4 	bl	800d0b0 <HAL_UART_Init>
 8006b08:	1e03      	subs	r3, r0, #0
 8006b0a:	d001      	beq.n	8006b10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006b0c:	f001 fbda 	bl	80082c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b10:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006b12:	2100      	movs	r1, #0
 8006b14:	0018      	movs	r0, r3
 8006b16:	f007 fe7d 	bl	800e814 <HAL_UARTEx_SetTxFifoThreshold>
 8006b1a:	1e03      	subs	r3, r0, #0
 8006b1c:	d001      	beq.n	8006b22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006b1e:	f001 fbd1 	bl	80082c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006b24:	2100      	movs	r1, #0
 8006b26:	0018      	movs	r0, r3
 8006b28:	f007 feb4 	bl	800e894 <HAL_UARTEx_SetRxFifoThreshold>
 8006b2c:	1e03      	subs	r3, r0, #0
 8006b2e:	d001      	beq.n	8006b34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006b30:	f001 fbc8 	bl	80082c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <MX_USART1_UART_Init+0x94>)
 8006b36:	0018      	movs	r0, r3
 8006b38:	f007 fe32 	bl	800e7a0 <HAL_UARTEx_DisableFifoMode>
 8006b3c:	1e03      	subs	r3, r0, #0
 8006b3e:	d001      	beq.n	8006b44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006b40:	f001 fbc0 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b44:	46c0      	nop			; (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	2000070c 	.word	0x2000070c
 8006b50:	40013800 	.word	0x40013800

08006b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b58:	4b23      	ldr	r3, [pc, #140]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b5a:	4a24      	ldr	r2, [pc, #144]	; (8006bec <MX_USART2_UART_Init+0x98>)
 8006b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006b5e:	4b22      	ldr	r3, [pc, #136]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b60:	2296      	movs	r2, #150	; 0x96
 8006b62:	0192      	lsls	r2, r2, #6
 8006b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b66:	4b20      	ldr	r3, [pc, #128]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b72:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b78:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b7a:	220c      	movs	r2, #12
 8006b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b84:	4b18      	ldr	r3, [pc, #96]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b90:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b9c:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f006 fa86 	bl	800d0b0 <HAL_UART_Init>
 8006ba4:	1e03      	subs	r3, r0, #0
 8006ba6:	d001      	beq.n	8006bac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006ba8:	f001 fb8c 	bl	80082c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006bae:	2100      	movs	r1, #0
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f007 fe2f 	bl	800e814 <HAL_UARTEx_SetTxFifoThreshold>
 8006bb6:	1e03      	subs	r3, r0, #0
 8006bb8:	d001      	beq.n	8006bbe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006bba:	f001 fb83 	bl	80082c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f007 fe66 	bl	800e894 <HAL_UARTEx_SetRxFifoThreshold>
 8006bc8:	1e03      	subs	r3, r0, #0
 8006bca:	d001      	beq.n	8006bd0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006bcc:	f001 fb7a 	bl	80082c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <MX_USART2_UART_Init+0x94>)
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f007 fde4 	bl	800e7a0 <HAL_UARTEx_DisableFifoMode>
 8006bd8:	1e03      	subs	r3, r0, #0
 8006bda:	d001      	beq.n	8006be0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006bdc:	f001 fb72 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006be0:	46c0      	nop			; (mov r8, r8)
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	200007a0 	.word	0x200007a0
 8006bec:	40004400 	.word	0x40004400

08006bf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006bf4:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006bf6:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <MX_USART3_UART_Init+0x64>)
 8006bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006bfa:	4b15      	ldr	r3, [pc, #84]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006bfc:	2296      	movs	r2, #150	; 0x96
 8006bfe:	0192      	lsls	r2, r2, #6
 8006c00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006c02:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006c08:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006c0e:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006c14:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c16:	220c      	movs	r2, #12
 8006c18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c26:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006c2c:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c32:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <MX_USART3_UART_Init+0x60>)
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f006 fa38 	bl	800d0b0 <HAL_UART_Init>
 8006c40:	1e03      	subs	r3, r0, #0
 8006c42:	d001      	beq.n	8006c48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006c44:	f001 fb3e 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006c48:	46c0      	nop			; (mov r8, r8)
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	20000834 	.word	0x20000834
 8006c54:	40004800 	.word	0x40004800

08006c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006c5e:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <MX_DMA_Init+0x58>)
 8006c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c62:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <MX_DMA_Init+0x58>)
 8006c64:	2101      	movs	r1, #1
 8006c66:	430a      	orrs	r2, r1
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38
 8006c6a:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <MX_DMA_Init+0x58>)
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4013      	ands	r3, r2
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8006c76:	2200      	movs	r2, #0
 8006c78:	2103      	movs	r1, #3
 8006c7a:	2009      	movs	r0, #9
 8006c7c:	f002 ffa6 	bl	8009bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006c80:	2009      	movs	r0, #9
 8006c82:	f002 ffb8 	bl	8009bf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8006c86:	2200      	movs	r2, #0
 8006c88:	2103      	movs	r1, #3
 8006c8a:	200a      	movs	r0, #10
 8006c8c:	f002 ff9e 	bl	8009bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006c90:	200a      	movs	r0, #10
 8006c92:	f002 ffb0 	bl	8009bf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 8006c96:	2200      	movs	r2, #0
 8006c98:	2103      	movs	r1, #3
 8006c9a:	200b      	movs	r0, #11
 8006c9c:	f002 ff96 	bl	8009bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8006ca0:	200b      	movs	r0, #11
 8006ca2:	f002 ffa8 	bl	8009bf6 <HAL_NVIC_EnableIRQ>

}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b002      	add	sp, #8
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	40021000 	.word	0x40021000

08006cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006cb4:	b590      	push	{r4, r7, lr}
 8006cb6:	b08b      	sub	sp, #44	; 0x2c
 8006cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cba:	2414      	movs	r4, #20
 8006cbc:	193b      	adds	r3, r7, r4
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	2314      	movs	r3, #20
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f00c f9a1 	bl	801300c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cca:	4b75      	ldr	r3, [pc, #468]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cce:	4b74      	ldr	r3, [pc, #464]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006cd0:	2104      	movs	r1, #4
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8006cd6:	4b72      	ldr	r3, [pc, #456]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	2204      	movs	r2, #4
 8006cdc:	4013      	ands	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ce2:	4b6f      	ldr	r3, [pc, #444]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce6:	4b6e      	ldr	r3, [pc, #440]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006ce8:	2120      	movs	r1, #32
 8006cea:	430a      	orrs	r2, r1
 8006cec:	635a      	str	r2, [r3, #52]	; 0x34
 8006cee:	4b6c      	ldr	r3, [pc, #432]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfa:	4b69      	ldr	r3, [pc, #420]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cfe:	4b68      	ldr	r3, [pc, #416]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006d00:	2101      	movs	r1, #1
 8006d02:	430a      	orrs	r2, r1
 8006d04:	635a      	str	r2, [r3, #52]	; 0x34
 8006d06:	4b66      	ldr	r3, [pc, #408]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]
 8006d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d12:	4b63      	ldr	r3, [pc, #396]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d16:	4b62      	ldr	r3, [pc, #392]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006d18:	2102      	movs	r1, #2
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8006d1e:	4b60      	ldr	r3, [pc, #384]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d22:	2202      	movs	r2, #2
 8006d24:	4013      	ands	r3, r2
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d2a:	4b5d      	ldr	r3, [pc, #372]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d2e:	4b5c      	ldr	r3, [pc, #368]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006d30:	2108      	movs	r1, #8
 8006d32:	430a      	orrs	r2, r1
 8006d34:	635a      	str	r2, [r3, #52]	; 0x34
 8006d36:	4b5a      	ldr	r3, [pc, #360]	; (8006ea0 <MX_GPIO_Init+0x1ec>)
 8006d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8006d42:	4958      	ldr	r1, [pc, #352]	; (8006ea4 <MX_GPIO_Init+0x1f0>)
 8006d44:	23a0      	movs	r3, #160	; 0xa0
 8006d46:	05db      	lsls	r3, r3, #23
 8006d48:	2200      	movs	r2, #0
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f003 fc59 	bl	800a602 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8006d50:	4b55      	ldr	r3, [pc, #340]	; (8006ea8 <MX_GPIO_Init+0x1f4>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	21c0      	movs	r1, #192	; 0xc0
 8006d56:	0018      	movs	r0, r3
 8006d58:	f003 fc53 	bl	800a602 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8006d5c:	4b53      	ldr	r3, [pc, #332]	; (8006eac <MX_GPIO_Init+0x1f8>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2107      	movs	r1, #7
 8006d62:	0018      	movs	r0, r3
 8006d64:	f003 fc4d 	bl	800a602 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8006d68:	238e      	movs	r3, #142	; 0x8e
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4850      	ldr	r0, [pc, #320]	; (8006eb0 <MX_GPIO_Init+0x1fc>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	0019      	movs	r1, r3
 8006d72:	f003 fc46 	bl	800a602 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_MEM_Pin DO_GPS_VCC_EN_Pin */
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 8006d76:	193b      	adds	r3, r7, r4
 8006d78:	4a4a      	ldr	r2, [pc, #296]	; (8006ea4 <MX_GPIO_Init+0x1f0>)
 8006d7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d7c:	193b      	adds	r3, r7, r4
 8006d7e:	2201      	movs	r2, #1
 8006d80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d82:	193b      	adds	r3, r7, r4
 8006d84:	2200      	movs	r2, #0
 8006d86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d88:	193b      	adds	r3, r7, r4
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d8e:	193a      	adds	r2, r7, r4
 8006d90:	23a0      	movs	r3, #160	; 0xa0
 8006d92:	05db      	lsls	r3, r3, #23
 8006d94:	0011      	movs	r1, r2
 8006d96:	0018      	movs	r0, r3
 8006d98:	f003 fab2 	bl	800a300 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_IN2_Pin DI_IN3_Pin DI_MAINS_STATE_Pin DI_ACC_STATE_Pin
                            DI_INT1_ACCEL_Pin */
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8006d9c:	0021      	movs	r1, r4
 8006d9e:	187b      	adds	r3, r7, r1
 8006da0:	22f2      	movs	r2, #242	; 0xf2
 8006da2:	01d2      	lsls	r2, r2, #7
 8006da4:	601a      	str	r2, [r3, #0]
                          | DI_INT1_ACCEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006da6:	000c      	movs	r4, r1
 8006da8:	193b      	adds	r3, r7, r4
 8006daa:	2200      	movs	r2, #0
 8006dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dae:	193b      	adds	r3, r7, r4
 8006db0:	2200      	movs	r2, #0
 8006db2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006db4:	193b      	adds	r3, r7, r4
 8006db6:	4a3e      	ldr	r2, [pc, #248]	; (8006eb0 <MX_GPIO_Init+0x1fc>)
 8006db8:	0019      	movs	r1, r3
 8006dba:	0010      	movs	r0, r2
 8006dbc:	f003 faa0 	bl	800a300 <HAL_GPIO_Init>


  /*Configure GPIO pins :  DI_BOX_STATE_Pin  */
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8006dc0:	0021      	movs	r1, r4
 8006dc2:	187b      	adds	r3, r7, r1
 8006dc4:	2280      	movs	r2, #128	; 0x80
 8006dc6:	0212      	lsls	r2, r2, #8
 8006dc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dca:	000c      	movs	r4, r1
 8006dcc:	193b      	adds	r3, r7, r4
 8006dce:	2200      	movs	r2, #0
 8006dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8006dd2:	193b      	adds	r3, r7, r4
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dd8:	193b      	adds	r3, r7, r4
 8006dda:	4a35      	ldr	r2, [pc, #212]	; (8006eb0 <MX_GPIO_Init+0x1fc>)
 8006ddc:	0019      	movs	r1, r3
 8006dde:	0010      	movs	r0, r2
 8006de0:	f003 fa8e 	bl	800a300 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_SOS_STATE_Pin  */
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8006de4:	193b      	adds	r3, r7, r4
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	0052      	lsls	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dec:	193b      	adds	r3, r7, r4
 8006dee:	2200      	movs	r2, #0
 8006df0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8006df2:	193b      	adds	r3, r7, r4
 8006df4:	2201      	movs	r2, #1
 8006df6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006df8:	193a      	adds	r2, r7, r4
 8006dfa:	23a0      	movs	r3, #160	; 0xa0
 8006dfc:	05db      	lsls	r3, r3, #23
 8006dfe:	0011      	movs	r1, r2
 8006e00:	0018      	movs	r0, r3
 8006e02:	f003 fa7d 	bl	800a300 <HAL_GPIO_Init>

  /*Configure GPIO pins :  DI_IN1_Pin */
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8006e06:	193b      	adds	r3, r7, r4
 8006e08:	2280      	movs	r2, #128	; 0x80
 8006e0a:	0152      	lsls	r2, r2, #5
 8006e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e0e:	193b      	adds	r3, r7, r4
 8006e10:	2200      	movs	r2, #0
 8006e12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	193b      	adds	r3, r7, r4
 8006e16:	2200      	movs	r2, #0
 8006e18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e1a:	193a      	adds	r2, r7, r4
 8006e1c:	23a0      	movs	r3, #160	; 0xa0
 8006e1e:	05db      	lsls	r3, r3, #23
 8006e20:	0011      	movs	r1, r2
 8006e22:	0018      	movs	r0, r3
 8006e24:	f003 fa6c 	bl	800a300 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_GSM_VCC_EN_Pin DO_PWRKEY_Pin */
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8006e28:	193b      	adds	r3, r7, r4
 8006e2a:	22c0      	movs	r2, #192	; 0xc0
 8006e2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e2e:	193b      	adds	r3, r7, r4
 8006e30:	2201      	movs	r2, #1
 8006e32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e34:	193b      	adds	r3, r7, r4
 8006e36:	2200      	movs	r2, #0
 8006e38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e3a:	193b      	adds	r3, r7, r4
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e40:	193b      	adds	r3, r7, r4
 8006e42:	4a19      	ldr	r2, [pc, #100]	; (8006ea8 <MX_GPIO_Init+0x1f4>)
 8006e44:	0019      	movs	r1, r3
 8006e46:	0010      	movs	r0, r2
 8006e48:	f003 fa5a 	bl	800a300 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_LED_PWR_Pin DO_LED_NET_Pin DO_LED_GPS_Pin */
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8006e4c:	193b      	adds	r3, r7, r4
 8006e4e:	2207      	movs	r2, #7
 8006e50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e52:	193b      	adds	r3, r7, r4
 8006e54:	2201      	movs	r2, #1
 8006e56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e58:	193b      	adds	r3, r7, r4
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e5e:	193b      	adds	r3, r7, r4
 8006e60:	2200      	movs	r2, #0
 8006e62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e64:	193b      	adds	r3, r7, r4
 8006e66:	4a11      	ldr	r2, [pc, #68]	; (8006eac <MX_GPIO_Init+0x1f8>)
 8006e68:	0019      	movs	r1, r3
 8006e6a:	0010      	movs	r0, r2
 8006e6c:	f003 fa48 	bl	800a300 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_OUT1_Pin DO_OUT2_Pin DO_5V_OUT_EN_Pin DO_OUT3_P_LED_Pin */
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8006e70:	0021      	movs	r1, r4
 8006e72:	187b      	adds	r3, r7, r1
 8006e74:	228e      	movs	r2, #142	; 0x8e
 8006e76:	0092      	lsls	r2, r2, #2
 8006e78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e7a:	187b      	adds	r3, r7, r1
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e80:	187b      	adds	r3, r7, r1
 8006e82:	2200      	movs	r2, #0
 8006e84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e86:	187b      	adds	r3, r7, r1
 8006e88:	2200      	movs	r2, #0
 8006e8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e8c:	187b      	adds	r3, r7, r1
 8006e8e:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <MX_GPIO_Init+0x1fc>)
 8006e90:	0019      	movs	r1, r3
 8006e92:	0010      	movs	r0, r2
 8006e94:	f003 fa34 	bl	800a300 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	b00b      	add	sp, #44	; 0x2c
 8006e9e:	bd90      	pop	{r4, r7, pc}
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	00008010 	.word	0x00008010
 8006ea8:	50000800 	.word	0x50000800
 8006eac:	50000c00 	.word	0x50000c00
 8006eb0:	50000400 	.word	0x50000400

08006eb4 <timedWork>:
/* USER CODE END 4 */




void timedWork(){
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <timedWork+0x38>)
 8006eba:	2104      	movs	r1, #4
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f003 fbbd 	bl	800a63c <HAL_GPIO_TogglePin>

		//%%%%%%%    AccGyro Rest    %%%%%%
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <timedWork+0x3c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <timedWork+0x20>
 8006eca:	f7fe ffeb 	bl	8005ea4 <detectAcc>
 8006ece:	0002      	movs	r2, r0
 8006ed0:	4b08      	ldr	r3, [pc, #32]	; (8006ef4 <timedWork+0x40>)
 8006ed2:	601a      	str	r2, [r3, #0]
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 8006ed4:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <timedWork+0x40>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dd03      	ble.n	8006ee4 <timedWork+0x30>
 8006edc:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <timedWork+0x40>)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <timedWork+0x3c>)
 8006ee2:	601a      	str	r2, [r3, #0]

}
 8006ee4:	46c0      	nop			; (mov r8, r8)
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	50000c00 	.word	0x50000c00
 8006ef0:	20000520 	.word	0x20000520
 8006ef4:	2000051c 	.word	0x2000051c

08006ef8 <stor>:

float stor(const char* str) {
 8006ef8:	b5b0      	push	{r4, r5, r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
    float result = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
    float sign = *str == '-' ? str++, -1 : 1;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b2d      	cmp	r3, #45	; 0x2d
 8006f0a:	d104      	bne.n	8006f16 <stor+0x1e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	4b5c      	ldr	r3, [pc, #368]	; (8007084 <stor+0x18c>)
 8006f14:	e001      	b.n	8006f1a <stor+0x22>
 8006f16:	23fe      	movs	r3, #254	; 0xfe
 8006f18:	059b      	lsls	r3, r3, #22
 8006f1a:	613b      	str	r3, [r7, #16]
    while (*str >= '0' && *str <= '9') {
 8006f1c:	e015      	b.n	8006f4a <stor+0x52>
        result *= 10;
 8006f1e:	495a      	ldr	r1, [pc, #360]	; (8007088 <stor+0x190>)
 8006f20:	69f8      	ldr	r0, [r7, #28]
 8006f22:	f7f9 fed5 	bl	8000cd0 <__aeabi_fmul>
 8006f26:	1c03      	adds	r3, r0, #0
 8006f28:	61fb      	str	r3, [r7, #28]
        result += *str - '0';
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	3b30      	subs	r3, #48	; 0x30
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7fa f9db 	bl	80012ec <__aeabi_i2f>
 8006f36:	1c03      	adds	r3, r0, #0
 8006f38:	1c19      	adds	r1, r3, #0
 8006f3a:	69f8      	ldr	r0, [r7, #28]
 8006f3c:	f7f9 fb5e 	bl	80005fc <__aeabi_fadd>
 8006f40:	1c03      	adds	r3, r0, #0
 8006f42:	61fb      	str	r3, [r7, #28]
        str++;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3301      	adds	r3, #1
 8006f48:	607b      	str	r3, [r7, #4]
    while (*str >= '0' && *str <= '9') {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b2f      	cmp	r3, #47	; 0x2f
 8006f50:	d903      	bls.n	8006f5a <stor+0x62>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b39      	cmp	r3, #57	; 0x39
 8006f58:	d9e1      	bls.n	8006f1e <stor+0x26>
    }
    if (*str == ',' || *str == '.') {
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b2c      	cmp	r3, #44	; 0x2c
 8006f60:	d003      	beq.n	8006f6a <stor+0x72>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b2e      	cmp	r3, #46	; 0x2e
 8006f68:	d128      	bne.n	8006fbc <stor+0xc4>
        str++;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	607b      	str	r3, [r7, #4]
        float multiplier = 0.1;
 8006f70:	4b46      	ldr	r3, [pc, #280]	; (800708c <stor+0x194>)
 8006f72:	61bb      	str	r3, [r7, #24]
        while (*str >= '0' && *str <= '9') {
 8006f74:	e01a      	b.n	8006fac <stor+0xb4>
            result += (*str - '0') * multiplier;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	3b30      	subs	r3, #48	; 0x30
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f7fa f9b5 	bl	80012ec <__aeabi_i2f>
 8006f82:	1c03      	adds	r3, r0, #0
 8006f84:	69b9      	ldr	r1, [r7, #24]
 8006f86:	1c18      	adds	r0, r3, #0
 8006f88:	f7f9 fea2 	bl	8000cd0 <__aeabi_fmul>
 8006f8c:	1c03      	adds	r3, r0, #0
 8006f8e:	1c19      	adds	r1, r3, #0
 8006f90:	69f8      	ldr	r0, [r7, #28]
 8006f92:	f7f9 fb33 	bl	80005fc <__aeabi_fadd>
 8006f96:	1c03      	adds	r3, r0, #0
 8006f98:	61fb      	str	r3, [r7, #28]
            multiplier /= 10;
 8006f9a:	493b      	ldr	r1, [pc, #236]	; (8007088 <stor+0x190>)
 8006f9c:	69b8      	ldr	r0, [r7, #24]
 8006f9e:	f7f9 fccd 	bl	800093c <__aeabi_fdiv>
 8006fa2:	1c03      	adds	r3, r0, #0
 8006fa4:	61bb      	str	r3, [r7, #24]
            str++;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	607b      	str	r3, [r7, #4]
        while (*str >= '0' && *str <= '9') {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b2f      	cmp	r3, #47	; 0x2f
 8006fb2:	d903      	bls.n	8006fbc <stor+0xc4>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b39      	cmp	r3, #57	; 0x39
 8006fba:	d9dc      	bls.n	8006f76 <stor+0x7e>
        }
    }
    result *= sign;
 8006fbc:	6939      	ldr	r1, [r7, #16]
 8006fbe:	69f8      	ldr	r0, [r7, #28]
 8006fc0:	f7f9 fe86 	bl	8000cd0 <__aeabi_fmul>
 8006fc4:	1c03      	adds	r3, r0, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
    if (*str == 'e' || *str == 'E') {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b65      	cmp	r3, #101	; 0x65
 8006fce:	d003      	beq.n	8006fd8 <stor+0xe0>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b45      	cmp	r3, #69	; 0x45
 8006fd6:	d14f      	bne.n	8007078 <stor+0x180>
        str++;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
        float powerer = *str == '-'? str++, 0.1 : 10;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b2d      	cmp	r3, #45	; 0x2d
 8006fe4:	d104      	bne.n	8006ff0 <stor+0xf8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	4b27      	ldr	r3, [pc, #156]	; (800708c <stor+0x194>)
 8006fee:	e000      	b.n	8006ff2 <stor+0xfa>
 8006ff0:	4b25      	ldr	r3, [pc, #148]	; (8007088 <stor+0x190>)
 8006ff2:	60fb      	str	r3, [r7, #12]
        float power = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
        while (*str >= '0' && *str <= '9') {
 8006ff8:	e015      	b.n	8007026 <stor+0x12e>
            power *= 10;
 8006ffa:	4923      	ldr	r1, [pc, #140]	; (8007088 <stor+0x190>)
 8006ffc:	6978      	ldr	r0, [r7, #20]
 8006ffe:	f7f9 fe67 	bl	8000cd0 <__aeabi_fmul>
 8007002:	1c03      	adds	r3, r0, #0
 8007004:	617b      	str	r3, [r7, #20]
            power += *str - '0';
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	3b30      	subs	r3, #48	; 0x30
 800700c:	0018      	movs	r0, r3
 800700e:	f7fa f96d 	bl	80012ec <__aeabi_i2f>
 8007012:	1c03      	adds	r3, r0, #0
 8007014:	1c19      	adds	r1, r3, #0
 8007016:	6978      	ldr	r0, [r7, #20]
 8007018:	f7f9 faf0 	bl	80005fc <__aeabi_fadd>
 800701c:	1c03      	adds	r3, r0, #0
 800701e:	617b      	str	r3, [r7, #20]
            str++;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3301      	adds	r3, #1
 8007024:	607b      	str	r3, [r7, #4]
        while (*str >= '0' && *str <= '9') {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b2f      	cmp	r3, #47	; 0x2f
 800702c:	d903      	bls.n	8007036 <stor+0x13e>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b39      	cmp	r3, #57	; 0x39
 8007034:	d9e1      	bls.n	8006ffa <stor+0x102>
        }
        result *= pow(powerer, power);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f7fc f83a 	bl	80030b0 <__aeabi_f2d>
 800703c:	0004      	movs	r4, r0
 800703e:	000d      	movs	r5, r1
 8007040:	6978      	ldr	r0, [r7, #20]
 8007042:	f7fc f835 	bl	80030b0 <__aeabi_f2d>
 8007046:	0002      	movs	r2, r0
 8007048:	000b      	movs	r3, r1
 800704a:	0020      	movs	r0, r4
 800704c:	0029      	movs	r1, r5
 800704e:	f00e fe59 	bl	8015d04 <pow>
 8007052:	0004      	movs	r4, r0
 8007054:	000d      	movs	r5, r1
 8007056:	69f8      	ldr	r0, [r7, #28]
 8007058:	f7fc f82a 	bl	80030b0 <__aeabi_f2d>
 800705c:	0002      	movs	r2, r0
 800705e:	000b      	movs	r3, r1
 8007060:	0020      	movs	r0, r4
 8007062:	0029      	movs	r1, r5
 8007064:	f7fb f936 	bl	80022d4 <__aeabi_dmul>
 8007068:	0002      	movs	r2, r0
 800706a:	000b      	movs	r3, r1
 800706c:	0010      	movs	r0, r2
 800706e:	0019      	movs	r1, r3
 8007070:	f7fc f866 	bl	8003140 <__aeabi_d2f>
 8007074:	1c03      	adds	r3, r0, #0
 8007076:	61fb      	str	r3, [r7, #28]
    }
    return result;
 8007078:	69fb      	ldr	r3, [r7, #28]
}
 800707a:	1c18      	adds	r0, r3, #0
 800707c:	46bd      	mov	sp, r7
 800707e:	b008      	add	sp, #32
 8007080:	bdb0      	pop	{r4, r5, r7, pc}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	bf800000 	.word	0xbf800000
 8007088:	41200000 	.word	0x41200000
 800708c:	3dcccccd 	.word	0x3dcccccd

08007090 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]


}
 8007098:	46c0      	nop			; (mov r8, r8)
 800709a:	46bd      	mov	sp, r7
 800709c:	b002      	add	sp, #8
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
	{

	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 80070a8:	4b2d      	ldr	r3, [pc, #180]	; (8007160 <HAL_UART_RxCpltCallback+0xc0>)
 80070aa:	2104      	movs	r1, #4
 80070ac:	0018      	movs	r0, r3
 80070ae:	f003 fac5 	bl	800a63c <HAL_GPIO_TogglePin>
	//Debug_Tx("V");
	if(huart==&huart2){
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4b2b      	ldr	r3, [pc, #172]	; (8007164 <HAL_UART_RxCpltCallback+0xc4>)
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d129      	bne.n	800710e <HAL_UART_RxCpltCallback+0x6e>
		if(dnlfile==0){
 80070ba:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <HAL_UART_RxCpltCallback+0xc8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d125      	bne.n	800710e <HAL_UART_RxCpltCallback+0x6e>
		if(strlen((char*)gpsData)>10){
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <HAL_UART_RxCpltCallback+0xcc>)
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7f9 f81f 	bl	8000108 <strlen>
 80070ca:	0003      	movs	r3, r0
 80070cc:	2b0a      	cmp	r3, #10
 80070ce:	d909      	bls.n	80070e4 <HAL_UART_RxCpltCallback+0x44>

	  		//Debug_Tx((char*)gpsData);
			ProcessGPS((char*)gpsData);
 80070d0:	4b26      	ldr	r3, [pc, #152]	; (800716c <HAL_UART_RxCpltCallback+0xcc>)
 80070d2:	0018      	movs	r0, r3
 80070d4:	f7ff fa7a 	bl	80065cc <ProcessGPS>
			getGPSString();
 80070d8:	f7fe ff80 	bl	8005fdc <getGPSString>
			timedWork();
 80070dc:	f7ff feea 	bl	8006eb4 <timedWork>
			ReadAllGPIO();
 80070e0:	f000 f97a 	bl	80073d8 <ReadAllGPIO>
		}
		if(DMAon==1){
 80070e4:	4b22      	ldr	r3, [pc, #136]	; (8007170 <HAL_UART_RxCpltCallback+0xd0>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d110      	bne.n	800710e <HAL_UART_RxCpltCallback+0x6e>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80070ec:	4b1f      	ldr	r3, [pc, #124]	; (800716c <HAL_UART_RxCpltCallback+0xcc>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_UART_RxCpltCallback+0x60>
 80070f4:	4a1f      	ldr	r2, [pc, #124]	; (8007174 <HAL_UART_RxCpltCallback+0xd4>)
 80070f6:	4b1d      	ldr	r3, [pc, #116]	; (800716c <HAL_UART_RxCpltCallback+0xcc>)
 80070f8:	2100      	movs	r1, #0
 80070fa:	0018      	movs	r0, r3
 80070fc:	f00b ff86 	bl	801300c <memset>
		//__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 8007100:	23e1      	movs	r3, #225	; 0xe1
 8007102:	009a      	lsls	r2, r3, #2
 8007104:	4919      	ldr	r1, [pc, #100]	; (800716c <HAL_UART_RxCpltCallback+0xcc>)
 8007106:	4b17      	ldr	r3, [pc, #92]	; (8007164 <HAL_UART_RxCpltCallback+0xc4>)
 8007108:	0018      	movs	r0, r3
 800710a:	f006 f9a5 	bl	800d458 <HAL_UART_Receive_DMA>
		}
	}
	if(huart==&huart1){
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4b19      	ldr	r3, [pc, #100]	; (8007178 <HAL_UART_RxCpltCallback+0xd8>)
 8007112:	429a      	cmp	r2, r3
 8007114:	d11f      	bne.n	8007156 <HAL_UART_RxCpltCallback+0xb6>
		if(strlen((char*)GSMData)<900){
 8007116:	4b19      	ldr	r3, [pc, #100]	; (800717c <HAL_UART_RxCpltCallback+0xdc>)
 8007118:	0018      	movs	r0, r3
 800711a:	f7f8 fff5 	bl	8000108 <strlen>
 800711e:	0002      	movs	r2, r0
 8007120:	23e1      	movs	r3, #225	; 0xe1
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	429a      	cmp	r2, r3
 8007126:	d209      	bcs.n	800713c <HAL_UART_RxCpltCallback+0x9c>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8007128:	4b15      	ldr	r3, [pc, #84]	; (8007180 <HAL_UART_RxCpltCallback+0xe0>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_UART_RxCpltCallback+0x9c>
 8007130:	4a13      	ldr	r2, [pc, #76]	; (8007180 <HAL_UART_RxCpltCallback+0xe0>)
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <HAL_UART_RxCpltCallback+0xdc>)
 8007134:	0011      	movs	r1, r2
 8007136:	0018      	movs	r0, r3
 8007138:	f00b ff70 	bl	801301c <strcat>
		}


		if(DMAon==1){
 800713c:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <HAL_UART_RxCpltCallback+0xd0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d108      	bne.n	8007156 <HAL_UART_RxCpltCallback+0xb6>
		GSMBuff[0]=0;
 8007144:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <HAL_UART_RxCpltCallback+0xe0>)
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]
		//__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800714a:	490d      	ldr	r1, [pc, #52]	; (8007180 <HAL_UART_RxCpltCallback+0xe0>)
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <HAL_UART_RxCpltCallback+0xd8>)
 800714e:	2201      	movs	r2, #1
 8007150:	0018      	movs	r0, r3
 8007152:	f006 f981 	bl	800d458 <HAL_UART_Receive_DMA>
		}
	}
	}

}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	46bd      	mov	sp, r7
 800715a:	b002      	add	sp, #8
 800715c:	bd80      	pop	{r7, pc}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	50000c00 	.word	0x50000c00
 8007164:	200007a0 	.word	0x200007a0
 8007168:	200016d8 	.word	0x200016d8
 800716c:	200039a0 	.word	0x200039a0
 8007170:	20000004 	.word	0x20000004
 8007174:	000003e7 	.word	0x000003e7
 8007178:	2000070c 	.word	0x2000070c
 800717c:	20000dd4 	.word	0x20000dd4
 8007180:	200013b0 	.word	0x200013b0

08007184 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <HAL_UART_ErrorCallback+0x84>)
 8007190:	429a      	cmp	r2, r3
 8007192:	d11c      	bne.n	80071ce <HAL_UART_ErrorCallback+0x4a>

		if(dnlfile==0){
 8007194:	4b1d      	ldr	r3, [pc, #116]	; (800720c <HAL_UART_ErrorCallback+0x88>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d118      	bne.n	80071ce <HAL_UART_ErrorCallback+0x4a>
		if(DMAon==1){
 800719c:	4b1c      	ldr	r3, [pc, #112]	; (8007210 <HAL_UART_ErrorCallback+0x8c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d114      	bne.n	80071ce <HAL_UART_ErrorCallback+0x4a>
		//Debug_Tx("GPSErr");
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80071a4:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <HAL_UART_ErrorCallback+0x90>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_UART_ErrorCallback+0x34>
 80071ac:	4a1a      	ldr	r2, [pc, #104]	; (8007218 <HAL_UART_ErrorCallback+0x94>)
 80071ae:	4b19      	ldr	r3, [pc, #100]	; (8007214 <HAL_UART_ErrorCallback+0x90>)
 80071b0:	2100      	movs	r1, #0
 80071b2:	0018      	movs	r0, r3
 80071b4:	f00b ff2a 	bl	801300c <memset>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <HAL_UART_ErrorCallback+0x84>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	220c      	movs	r2, #12
 80071be:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80071c0:	23e1      	movs	r3, #225	; 0xe1
 80071c2:	009a      	lsls	r2, r3, #2
 80071c4:	4913      	ldr	r1, [pc, #76]	; (8007214 <HAL_UART_ErrorCallback+0x90>)
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <HAL_UART_ErrorCallback+0x84>)
 80071c8:	0018      	movs	r0, r3
 80071ca:	f006 f945 	bl	800d458 <HAL_UART_Receive_DMA>
		}
		}
	}
	if(huart==&huart1){
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4b12      	ldr	r3, [pc, #72]	; (800721c <HAL_UART_ErrorCallback+0x98>)
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d114      	bne.n	8007200 <HAL_UART_ErrorCallback+0x7c>

		if(DMAon==1){
 80071d6:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <HAL_UART_ErrorCallback+0x8c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d110      	bne.n	8007200 <HAL_UART_ErrorCallback+0x7c>
		//Debug_Tx("GSMErr");
		GSMBuff[0]=0;
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <HAL_UART_ErrorCallback+0x9c>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80071e4:	4b0d      	ldr	r3, [pc, #52]	; (800721c <HAL_UART_ErrorCallback+0x98>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	220c      	movs	r2, #12
 80071ea:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <HAL_UART_ErrorCallback+0x84>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	220c      	movs	r2, #12
 80071f2:	621a      	str	r2, [r3, #32]
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80071f4:	490a      	ldr	r1, [pc, #40]	; (8007220 <HAL_UART_ErrorCallback+0x9c>)
 80071f6:	4b09      	ldr	r3, [pc, #36]	; (800721c <HAL_UART_ErrorCallback+0x98>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	0018      	movs	r0, r3
 80071fc:	f006 f92c 	bl	800d458 <HAL_UART_Receive_DMA>





}
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	46bd      	mov	sp, r7
 8007204:	b002      	add	sp, #8
 8007206:	bd80      	pop	{r7, pc}
 8007208:	200007a0 	.word	0x200007a0
 800720c:	200016d8 	.word	0x200016d8
 8007210:	20000004 	.word	0x20000004
 8007214:	200039a0 	.word	0x200039a0
 8007218:	000003e7 	.word	0x000003e7
 800721c:	2000070c 	.word	0x2000070c
 8007220:	200013b0 	.word	0x200013b0

08007224 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */



	 // TestDigitalOutput();
initAcc();
 800722c:	f7fe fc5e 	bl	8005aec <initAcc>
//TestDigitalOutput();
SET_GPS_VCC_EN(1);
 8007230:	2001      	movs	r0, #1
 8007232:	f7fc f9cf 	bl	80035d4 <SET_GPS_VCC_EN>
SET_GSM_VCC_EN(1);
 8007236:	2001      	movs	r0, #1
 8007238:	f7fc fa0a 	bl	8003650 <SET_GSM_VCC_EN>
SET_PWRKEY(1);
 800723c:	2001      	movs	r0, #1
 800723e:	f7fc f9e9 	bl	8003614 <SET_PWRKEY>
Init_ADC();
 8007242:	f7fc f8c9 	bl	80033d8 <Init_ADC>
SET_5V_OUT_EN(1);
 8007246:	2001      	movs	r0, #1
 8007248:	f7fc f94c 	bl	80034e4 <SET_5V_OUT_EN>
SET_GPS_VCC_EN(1);
 800724c:	2001      	movs	r0, #1
 800724e:	f7fc f9c1 	bl	80035d4 <SET_GPS_VCC_EN>
SET_GSM_VCC_EN(1);
 8007252:	2001      	movs	r0, #1
 8007254:	f7fc f9fc 	bl	8003650 <SET_GSM_VCC_EN>
SET_PWRKEY(1);
 8007258:	2001      	movs	r0, #1
 800725a:	f7fc f9db 	bl	8003614 <SET_PWRKEY>
GSMBuff[0]=0;
 800725e:	4b28      	ldr	r3, [pc, #160]	; (8007300 <StartDefaultTask+0xdc>)
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
 memset((char*)gpsData,0,1000);
 8007264:	23fa      	movs	r3, #250	; 0xfa
 8007266:	009a      	lsls	r2, r3, #2
 8007268:	4b26      	ldr	r3, [pc, #152]	; (8007304 <StartDefaultTask+0xe0>)
 800726a:	2100      	movs	r1, #0
 800726c:	0018      	movs	r0, r3
 800726e:	f00b fecd 	bl	801300c <memset>
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007272:	4b25      	ldr	r3, [pc, #148]	; (8007308 <StartDefaultTask+0xe4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	220c      	movs	r2, #12
 8007278:	621a      	str	r2, [r3, #32]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 800727a:	23e1      	movs	r3, #225	; 0xe1
 800727c:	009a      	lsls	r2, r3, #2
 800727e:	4921      	ldr	r1, [pc, #132]	; (8007304 <StartDefaultTask+0xe0>)
 8007280:	4b21      	ldr	r3, [pc, #132]	; (8007308 <StartDefaultTask+0xe4>)
 8007282:	0018      	movs	r0, r3
 8007284:	f006 f8e8 	bl	800d458 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007288:	4b20      	ldr	r3, [pc, #128]	; (800730c <StartDefaultTask+0xe8>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	220c      	movs	r2, #12
 800728e:	621a      	str	r2, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8007290:	491b      	ldr	r1, [pc, #108]	; (8007300 <StartDefaultTask+0xdc>)
 8007292:	4b1e      	ldr	r3, [pc, #120]	; (800730c <StartDefaultTask+0xe8>)
 8007294:	2201      	movs	r2, #1
 8007296:	0018      	movs	r0, r3
 8007298:	f006 f8de 	bl	800d458 <HAL_UART_Receive_DMA>
initGPS();
 800729c:	f7fe fe5c 	bl	8005f58 <initGPS>
initFirstRun();
 80072a0:	f000 f87a 	bl	8007398 <initFirstRun>
InitMEMQ();
 80072a4:	f7fe f8fa 	bl	800549c <InitMEMQ>
HAL_Delay(10000);
 80072a8:	4b19      	ldr	r3, [pc, #100]	; (8007310 <StartDefaultTask+0xec>)
 80072aa:	0018      	movs	r0, r3
 80072ac:	f001 fd4a 	bl	8008d44 <HAL_Delay>
InitGSM();
 80072b0:	f7fd fbee 	bl	8004a90 <InitGSM>
TestMEM();
 80072b4:	f7ff f9ce 	bl	8006654 <TestMEM>

 memset(IMEI,0,20);
 80072b8:	4b16      	ldr	r3, [pc, #88]	; (8007314 <StartDefaultTask+0xf0>)
 80072ba:	2214      	movs	r2, #20
 80072bc:	2100      	movs	r1, #0
 80072be:	0018      	movs	r0, r3
 80072c0:	f00b fea4 	bl	801300c <memset>
 memset(Regno,0,20);
 80072c4:	4b14      	ldr	r3, [pc, #80]	; (8007318 <StartDefaultTask+0xf4>)
 80072c6:	2214      	movs	r2, #20
 80072c8:	2100      	movs	r1, #0
 80072ca:	0018      	movs	r0, r3
 80072cc:	f00b fe9e 	bl	801300c <memset>
strcpy(IMEI,GSMIMEI());
 80072d0:	f7fc fcf4 	bl	8003cbc <GSMIMEI>
 80072d4:	0002      	movs	r2, r0
 80072d6:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <StartDefaultTask+0xf0>)
 80072d8:	0011      	movs	r1, r2
 80072da:	0018      	movs	r0, r3
 80072dc:	f00c f84b 	bl	8013376 <strcpy>
 strcpy(Regno,readRegNo());
 80072e0:	f7fe fb52 	bl	8005988 <readRegNo>
 80072e4:	0002      	movs	r2, r0
 80072e6:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <StartDefaultTask+0xf4>)
 80072e8:	0011      	movs	r1, r2
 80072ea:	0018      	movs	r0, r3
 80072ec:	f00c f843 	bl	8013376 <strcpy>

StartTCPConnection();
 80072f0:	f7fc fd0a 	bl	8003d08 <StartTCPConnection>
while (1){
    GSMSigQuality();
 80072f4:	f7fc fc46 	bl	8003b84 <GSMSigQuality>
	TestRun();
 80072f8:	f000 fbb2 	bl	8007a60 <TestRun>
    GSMSigQuality();
 80072fc:	e7fa      	b.n	80072f4 <StartDefaultTask+0xd0>
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	200013b0 	.word	0x200013b0
 8007304:	200039a0 	.word	0x200039a0
 8007308:	200007a0 	.word	0x200007a0
 800730c:	2000070c 	.word	0x2000070c
 8007310:	00002710 	.word	0x00002710
 8007314:	20000428 	.word	0x20000428
 8007318:	20000414 	.word	0x20000414

0800731c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

while(1){osDelay(1);
 8007324:	2001      	movs	r0, #1
 8007326:	f007 fcbd 	bl	800eca4 <osDelay>
 800732a:	e7fb      	b.n	8007324 <StartTask02+0x8>

0800732c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007334:	2001      	movs	r0, #1
 8007336:	f007 fcb5 	bl	800eca4 <osDelay>
 800733a:	e7fb      	b.n	8007334 <StartTask03+0x8>

0800733c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a04      	ldr	r2, [pc, #16]	; (800735c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800734e:	f001 fcdd 	bl	8008d0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007352:	46c0      	nop			; (mov r8, r8)
 8007354:	46bd      	mov	sp, r7
 8007356:	b002      	add	sp, #8
 8007358:	bd80      	pop	{r7, pc}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	40012c00 	.word	0x40012c00

08007360 <restartGSMuart>:




void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
 8007364:	4b09      	ldr	r3, [pc, #36]	; (800738c <restartGSMuart+0x2c>)
 8007366:	2200      	movs	r2, #0
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	4b09      	ldr	r3, [pc, #36]	; (8007390 <restartGSMuart+0x30>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	220c      	movs	r2, #12
 8007370:	621a      	str	r2, [r3, #32]

__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007372:	4b08      	ldr	r3, [pc, #32]	; (8007394 <restartGSMuart+0x34>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	220c      	movs	r2, #12
 8007378:	621a      	str	r2, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800737a:	4904      	ldr	r1, [pc, #16]	; (800738c <restartGSMuart+0x2c>)
 800737c:	4b05      	ldr	r3, [pc, #20]	; (8007394 <restartGSMuart+0x34>)
 800737e:	2201      	movs	r2, #1
 8007380:	0018      	movs	r0, r3
 8007382:	f006 f869 	bl	800d458 <HAL_UART_Receive_DMA>

}
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	200013b0 	.word	0x200013b0
 8007390:	200007a0 	.word	0x200007a0
 8007394:	2000070c 	.word	0x2000070c

08007398 <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b085      	sub	sp, #20
 800739c:	af04      	add	r7, sp, #16
	ClearQueue();
 800739e:	f7fe f8d1 	bl	8005544 <ClearQueue>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 80073a2:	4c08      	ldr	r4, [pc, #32]	; (80073c4 <initFirstRun+0x2c>)
 80073a4:	4a08      	ldr	r2, [pc, #32]	; (80073c8 <initFirstRun+0x30>)
 80073a6:	4909      	ldr	r1, [pc, #36]	; (80073cc <initFirstRun+0x34>)
 80073a8:	4809      	ldr	r0, [pc, #36]	; (80073d0 <initFirstRun+0x38>)
 80073aa:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <initFirstRun+0x3c>)
 80073ac:	9302      	str	r3, [sp, #8]
 80073ae:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <initFirstRun+0x2c>)
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <initFirstRun+0x2c>)
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	0023      	movs	r3, r4
 80073b8:	f7fe f8d2 	bl	8005560 <writeConfig>
 	  				  "20.210.207.21","20.210.207.21","20.210.207.21",
	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");

}
 80073bc:	46c0      	nop			; (mov r8, r8)
 80073be:	46bd      	mov	sp, r7
 80073c0:	b001      	add	sp, #4
 80073c2:	bd90      	pop	{r4, r7, pc}
 80073c4:	08018180 	.word	0x08018180
 80073c8:	08017f30 	.word	0x08017f30
 80073cc:	08017f58 	.word	0x08017f58
 80073d0:	08018190 	.word	0x08018190
 80073d4:	08017f8c 	.word	0x08017f8c

080073d8 <ReadAllGPIO>:




void ReadAllGPIO(){
 80073d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073da:	46de      	mov	lr, fp
 80073dc:	4657      	mov	r7, sl
 80073de:	464e      	mov	r6, r9
 80073e0:	4645      	mov	r5, r8
 80073e2:	b5e0      	push	{r5, r6, r7, lr}
 80073e4:	b08b      	sub	sp, #44	; 0x2c
 80073e6:	af08      	add	r7, sp, #32
	memset(StatusStrng,0,20);
 80073e8:	4b58      	ldr	r3, [pc, #352]	; (800754c <ReadAllGPIO+0x174>)
 80073ea:	2214      	movs	r2, #20
 80073ec:	2100      	movs	r1, #0
 80073ee:	0018      	movs	r0, r3
 80073f0:	f00b fe0c 	bl	801300c <memset>
	memset(Dig_io,0,30);
 80073f4:	4b56      	ldr	r3, [pc, #344]	; (8007550 <ReadAllGPIO+0x178>)
 80073f6:	221e      	movs	r2, #30
 80073f8:	2100      	movs	r1, #0
 80073fa:	0018      	movs	r0, r3
 80073fc:	f00b fe06 	bl	801300c <memset>

	//%%%%%%%    GPIO Read    %%%%%%
	Dig_in[0]=Read_DI_IN1();
 8007400:	f7fb ff54 	bl	80032ac <Read_DI_IN1>
 8007404:	0002      	movs	r2, r0
 8007406:	4b53      	ldr	r3, [pc, #332]	; (8007554 <ReadAllGPIO+0x17c>)
 8007408:	601a      	str	r2, [r3, #0]
	Dig_in[1]=Read_DI_IN2();
 800740a:	f7fb ff61 	bl	80032d0 <Read_DI_IN2>
 800740e:	0002      	movs	r2, r0
 8007410:	4b50      	ldr	r3, [pc, #320]	; (8007554 <ReadAllGPIO+0x17c>)
 8007412:	605a      	str	r2, [r3, #4]
	Dig_in[2]=Read_DI_IN3();
 8007414:	f7fb ff70 	bl	80032f8 <Read_DI_IN3>
 8007418:	0002      	movs	r2, r0
 800741a:	4b4e      	ldr	r3, [pc, #312]	; (8007554 <ReadAllGPIO+0x17c>)
 800741c:	609a      	str	r2, [r3, #8]

	MAINS_STATE=Read_DI_MAINS_STATE();
 800741e:	f7fb ff7f 	bl	8003320 <Read_DI_MAINS_STATE>
 8007422:	0002      	movs	r2, r0
 8007424:	4b4c      	ldr	r3, [pc, #304]	; (8007558 <ReadAllGPIO+0x180>)
 8007426:	601a      	str	r2, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 8007428:	f7fb ff8e 	bl	8003348 <Read_DI_ACC_STATE>
 800742c:	0002      	movs	r2, r0
 800742e:	4b4b      	ldr	r3, [pc, #300]	; (800755c <ReadAllGPIO+0x184>)
 8007430:	601a      	str	r2, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 8007432:	f7fb ff9d 	bl	8003370 <Read_DI_BOX_STATE>
 8007436:	0003      	movs	r3, r0
 8007438:	001a      	movs	r2, r3
 800743a:	4b49      	ldr	r3, [pc, #292]	; (8007560 <ReadAllGPIO+0x188>)
 800743c:	701a      	strb	r2, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 800743e:	f7fb ffb9 	bl	80033b4 <Read_DI_SOS_STATE>
 8007442:	0002      	movs	r2, r0
 8007444:	4b47      	ldr	r3, [pc, #284]	; (8007564 <ReadAllGPIO+0x18c>)
 8007446:	601a      	str	r2, [r3, #0]
	EXT_B=Read_EXT_B_SENSE();
 8007448:	f7fc f814 	bl	8003474 <Read_EXT_B_SENSE>
 800744c:	1c02      	adds	r2, r0, #0
 800744e:	4b46      	ldr	r3, [pc, #280]	; (8007568 <ReadAllGPIO+0x190>)
 8007450:	601a      	str	r2, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 8007452:	f7fc f82b 	bl	80034ac <Read_INT_B_SENSE>
 8007456:	1c02      	adds	r2, r0, #0
 8007458:	4b44      	ldr	r3, [pc, #272]	; (800756c <ReadAllGPIO+0x194>)
 800745a:	601a      	str	r2, [r3, #0]


	adc[0]=Read_ADC1();
 800745c:	f7fb ffcc 	bl	80033f8 <Read_ADC1>
 8007460:	1c02      	adds	r2, r0, #0
 8007462:	4b43      	ldr	r3, [pc, #268]	; (8007570 <ReadAllGPIO+0x198>)
 8007464:	601a      	str	r2, [r3, #0]
	adc[1]=Read_ADC2();
 8007466:	f7fb ffe7 	bl	8003438 <Read_ADC2>
 800746a:	1c02      	adds	r2, r0, #0
 800746c:	4b40      	ldr	r3, [pc, #256]	; (8007570 <ReadAllGPIO+0x198>)
 800746e:	605a      	str	r2, [r3, #4]

	memset(StatusStrng,0,20);
 8007470:	4b36      	ldr	r3, [pc, #216]	; (800754c <ReadAllGPIO+0x174>)
 8007472:	2214      	movs	r2, #20
 8007474:	2100      	movs	r1, #0
 8007476:	0018      	movs	r0, r3
 8007478:	f00b fdc8 	bl	801300c <memset>
	memset(Dig_io,0,30);
 800747c:	4b34      	ldr	r3, [pc, #208]	; (8007550 <ReadAllGPIO+0x178>)
 800747e:	221e      	movs	r2, #30
 8007480:	2100      	movs	r1, #0
 8007482:	0018      	movs	r0, r3
 8007484:	f00b fdc2 	bl	801300c <memset>

    sprintf(Dig_io, "%d%d%d0,%d%d,%d,%.1f,%.1f,,()",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo,adc[0],adc[1]);
 8007488:	4b32      	ldr	r3, [pc, #200]	; (8007554 <ReadAllGPIO+0x17c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	469b      	mov	fp, r3
 800748e:	4b31      	ldr	r3, [pc, #196]	; (8007554 <ReadAllGPIO+0x17c>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	4b2f      	ldr	r3, [pc, #188]	; (8007554 <ReadAllGPIO+0x17c>)
 8007496:	689e      	ldr	r6, [r3, #8]
 8007498:	4b36      	ldr	r3, [pc, #216]	; (8007574 <ReadAllGPIO+0x19c>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	4690      	mov	r8, r2
 800749e:	4b36      	ldr	r3, [pc, #216]	; (8007578 <ReadAllGPIO+0x1a0>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4691      	mov	r9, r2
 80074a4:	4b35      	ldr	r3, [pc, #212]	; (800757c <ReadAllGPIO+0x1a4>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	4692      	mov	sl, r2
 80074aa:	4b31      	ldr	r3, [pc, #196]	; (8007570 <ReadAllGPIO+0x198>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	1c18      	adds	r0, r3, #0
 80074b0:	f7fb fdfe 	bl	80030b0 <__aeabi_f2d>
 80074b4:	0004      	movs	r4, r0
 80074b6:	000d      	movs	r5, r1
 80074b8:	4b2d      	ldr	r3, [pc, #180]	; (8007570 <ReadAllGPIO+0x198>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	1c18      	adds	r0, r3, #0
 80074be:	f7fb fdf7 	bl	80030b0 <__aeabi_f2d>
 80074c2:	0002      	movs	r2, r0
 80074c4:	000b      	movs	r3, r1
 80074c6:	492e      	ldr	r1, [pc, #184]	; (8007580 <ReadAllGPIO+0x1a8>)
 80074c8:	4821      	ldr	r0, [pc, #132]	; (8007550 <ReadAllGPIO+0x178>)
 80074ca:	9206      	str	r2, [sp, #24]
 80074cc:	9307      	str	r3, [sp, #28]
 80074ce:	9404      	str	r4, [sp, #16]
 80074d0:	9505      	str	r5, [sp, #20]
 80074d2:	4652      	mov	r2, sl
 80074d4:	9203      	str	r2, [sp, #12]
 80074d6:	464a      	mov	r2, r9
 80074d8:	9202      	str	r2, [sp, #8]
 80074da:	4642      	mov	r2, r8
 80074dc:	9201      	str	r2, [sp, #4]
 80074de:	9600      	str	r6, [sp, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	465a      	mov	r2, fp
 80074e4:	f00b fd26 	bl	8012f34 <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 80074e8:	4b1c      	ldr	r3, [pc, #112]	; (800755c <ReadAllGPIO+0x184>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4698      	mov	r8, r3
 80074ee:	4b1a      	ldr	r3, [pc, #104]	; (8007558 <ReadAllGPIO+0x180>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4699      	mov	r9, r3
 80074f4:	4b1c      	ldr	r3, [pc, #112]	; (8007568 <ReadAllGPIO+0x190>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	1c18      	adds	r0, r3, #0
 80074fa:	f7fb fdd9 	bl	80030b0 <__aeabi_f2d>
 80074fe:	0004      	movs	r4, r0
 8007500:	000d      	movs	r5, r1
 8007502:	4b1a      	ldr	r3, [pc, #104]	; (800756c <ReadAllGPIO+0x194>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	1c18      	adds	r0, r3, #0
 8007508:	f7fb fdd2 	bl	80030b0 <__aeabi_f2d>
 800750c:	6038      	str	r0, [r7, #0]
 800750e:	6079      	str	r1, [r7, #4]
 8007510:	4914      	ldr	r1, [pc, #80]	; (8007564 <ReadAllGPIO+0x18c>)
 8007512:	6809      	ldr	r1, [r1, #0]
 8007514:	4812      	ldr	r0, [pc, #72]	; (8007560 <ReadAllGPIO+0x188>)
 8007516:	7800      	ldrb	r0, [r0, #0]
 8007518:	4684      	mov	ip, r0
 800751a:	4e1a      	ldr	r6, [pc, #104]	; (8007584 <ReadAllGPIO+0x1ac>)
 800751c:	480b      	ldr	r0, [pc, #44]	; (800754c <ReadAllGPIO+0x174>)
 800751e:	4663      	mov	r3, ip
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	9104      	str	r1, [sp, #16]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	9202      	str	r2, [sp, #8]
 800752a:	9303      	str	r3, [sp, #12]
 800752c:	9400      	str	r4, [sp, #0]
 800752e:	9501      	str	r5, [sp, #4]
 8007530:	464b      	mov	r3, r9
 8007532:	4642      	mov	r2, r8
 8007534:	0031      	movs	r1, r6
 8007536:	f00b fcfd 	bl	8012f34 <siprintf>


}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b003      	add	sp, #12
 8007540:	bcf0      	pop	{r4, r5, r6, r7}
 8007542:	46bb      	mov	fp, r7
 8007544:	46b2      	mov	sl, r6
 8007546:	46a9      	mov	r9, r5
 8007548:	46a0      	mov	r8, r4
 800754a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754c:	20003ec4 	.word	0x20003ec4
 8007550:	20003e1c 	.word	0x20003e1c
 8007554:	20003e10 	.word	0x20003e10
 8007558:	20003e44 	.word	0x20003e44
 800755c:	20003e48 	.word	0x20003e48
 8007560:	20000033 	.word	0x20000033
 8007564:	20003e4c 	.word	0x20003e4c
 8007568:	20003e58 	.word	0x20003e58
 800756c:	20003e5c 	.word	0x20003e5c
 8007570:	20003e50 	.word	0x20003e50
 8007574:	20003e3c 	.word	0x20003e3c
 8007578:	20003e40 	.word	0x20003e40
 800757c:	20000410 	.word	0x20000410
 8007580:	080181a0 	.word	0x080181a0
 8007584:	080181c0 	.word	0x080181c0

08007588 <GetHead>:


void GetHead(){
 8007588:	b5b0      	push	{r4, r5, r7, lr}
 800758a:	af00      	add	r7, sp, #0

	memset(Head,0,100);
 800758c:	4bd7      	ldr	r3, [pc, #860]	; (80078ec <GetHead+0x364>)
 800758e:	2264      	movs	r2, #100	; 0x64
 8007590:	2100      	movs	r1, #0
 8007592:	0018      	movs	r0, r3
 8007594:	f00b fd3a 	bl	801300c <memset>
	strcpy(Head,InitStr);
 8007598:	4ad5      	ldr	r2, [pc, #852]	; (80078f0 <GetHead+0x368>)
 800759a:	4bd4      	ldr	r3, [pc, #848]	; (80078ec <GetHead+0x364>)
 800759c:	0011      	movs	r1, r2
 800759e:	0018      	movs	r0, r3
 80075a0:	f00b fee9 	bl	8013376 <strcpy>
	strcat(Head,VerStr);
 80075a4:	4ad3      	ldr	r2, [pc, #844]	; (80078f4 <GetHead+0x36c>)
 80075a6:	4bd1      	ldr	r3, [pc, #836]	; (80078ec <GetHead+0x364>)
 80075a8:	0011      	movs	r1, r2
 80075aa:	0018      	movs	r0, r3
 80075ac:	f00b fd36 	bl	801301c <strcat>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 80075b0:	4bd1      	ldr	r3, [pc, #836]	; (80078f8 <GetHead+0x370>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	425a      	negs	r2, r3
 80075b8:	4153      	adcs	r3, r2
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	4bcf      	ldr	r3, [pc, #828]	; (80078fc <GetHead+0x374>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	4259      	negs	r1, r3
 80075c4:	414b      	adcs	r3, r1
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	4013      	ands	r3, r2
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d006      	beq.n	80075de <GetHead+0x56>
 80075d0:	4bc9      	ldr	r3, [pc, #804]	; (80078f8 <GetHead+0x370>)
 80075d2:	2201      	movs	r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	4bca      	ldr	r3, [pc, #808]	; (8007900 <GetHead+0x378>)
 80075d8:	2201      	movs	r2, #1
 80075da:	4252      	negs	r2, r2
 80075dc:	601a      	str	r2, [r3, #0]
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 80075de:	4bc8      	ldr	r3, [pc, #800]	; (8007900 <GetHead+0x378>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	425a      	negs	r2, r3
 80075e6:	4153      	adcs	r3, r2
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	4bc4      	ldr	r3, [pc, #784]	; (80078fc <GetHead+0x374>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4259      	negs	r1, r3
 80075f0:	414b      	adcs	r3, r1
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	4013      	ands	r3, r2
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <GetHead+0x82>
 80075fc:	4bc0      	ldr	r3, [pc, #768]	; (8007900 <GetHead+0x378>)
 80075fe:	2201      	movs	r2, #1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	4bbd      	ldr	r3, [pc, #756]	; (80078f8 <GetHead+0x370>)
 8007604:	2201      	movs	r2, #1
 8007606:	4252      	negs	r2, r2
 8007608:	601a      	str	r2, [r3, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 800760a:	4bbe      	ldr	r3, [pc, #760]	; (8007904 <GetHead+0x37c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3301      	adds	r3, #1
 8007610:	425a      	negs	r2, r3
 8007612:	4153      	adcs	r3, r2
 8007614:	b2da      	uxtb	r2, r3
 8007616:	4bbc      	ldr	r3, [pc, #752]	; (8007908 <GetHead+0x380>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3b01      	subs	r3, #1
 800761c:	4259      	negs	r1, r3
 800761e:	414b      	adcs	r3, r1
 8007620:	b2db      	uxtb	r3, r3
 8007622:	4013      	ands	r3, r2
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <GetHead+0xb0>
 800762a:	4bb6      	ldr	r3, [pc, #728]	; (8007904 <GetHead+0x37c>)
 800762c:	2201      	movs	r2, #1
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	4bb6      	ldr	r3, [pc, #728]	; (800790c <GetHead+0x384>)
 8007632:	2201      	movs	r2, #1
 8007634:	4252      	negs	r2, r2
 8007636:	601a      	str	r2, [r3, #0]
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 8007638:	4bb4      	ldr	r3, [pc, #720]	; (800790c <GetHead+0x384>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3301      	adds	r3, #1
 800763e:	425a      	negs	r2, r3
 8007640:	4153      	adcs	r3, r2
 8007642:	b2da      	uxtb	r2, r3
 8007644:	4bb0      	ldr	r3, [pc, #704]	; (8007908 <GetHead+0x380>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4259      	negs	r1, r3
 800764a:	414b      	adcs	r3, r1
 800764c:	b2db      	uxtb	r3, r3
 800764e:	4013      	ands	r3, r2
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d006      	beq.n	8007664 <GetHead+0xdc>
 8007656:	4bad      	ldr	r3, [pc, #692]	; (800790c <GetHead+0x384>)
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	4ba9      	ldr	r3, [pc, #676]	; (8007904 <GetHead+0x37c>)
 800765e:	2201      	movs	r2, #1
 8007660:	4252      	negs	r2, r2
 8007662:	601a      	str	r2, [r3, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8007664:	4baa      	ldr	r3, [pc, #680]	; (8007910 <GetHead+0x388>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	425a      	negs	r2, r3
 800766c:	4153      	adcs	r3, r2
 800766e:	b2dc      	uxtb	r4, r3
 8007670:	4ba8      	ldr	r3, [pc, #672]	; (8007914 <GetHead+0x38c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2201      	movs	r2, #1
 8007676:	1c15      	adds	r5, r2, #0
 8007678:	49a7      	ldr	r1, [pc, #668]	; (8007918 <GetHead+0x390>)
 800767a:	1c18      	adds	r0, r3, #0
 800767c:	f7f8 ff26 	bl	80004cc <__aeabi_fcmplt>
 8007680:	1e03      	subs	r3, r0, #0
 8007682:	d101      	bne.n	8007688 <GetHead+0x100>
 8007684:	2300      	movs	r3, #0
 8007686:	1c1d      	adds	r5, r3, #0
 8007688:	b2eb      	uxtb	r3, r5
 800768a:	4023      	ands	r3, r4
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d006      	beq.n	80076a0 <GetHead+0x118>
 8007692:	4b9f      	ldr	r3, [pc, #636]	; (8007910 <GetHead+0x388>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	4ba0      	ldr	r3, [pc, #640]	; (800791c <GetHead+0x394>)
 800769a:	2201      	movs	r2, #1
 800769c:	4252      	negs	r2, r2
 800769e:	601a      	str	r2, [r3, #0]
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 80076a0:	4b9e      	ldr	r3, [pc, #632]	; (800791c <GetHead+0x394>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3301      	adds	r3, #1
 80076a6:	425a      	negs	r2, r3
 80076a8:	4153      	adcs	r3, r2
 80076aa:	b2dc      	uxtb	r4, r3
 80076ac:	4b99      	ldr	r3, [pc, #612]	; (8007914 <GetHead+0x38c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2201      	movs	r2, #1
 80076b2:	1c15      	adds	r5, r2, #0
 80076b4:	4998      	ldr	r1, [pc, #608]	; (8007918 <GetHead+0x390>)
 80076b6:	1c18      	adds	r0, r3, #0
 80076b8:	f7f8 ff26 	bl	8000508 <__aeabi_fcmpge>
 80076bc:	1e03      	subs	r3, r0, #0
 80076be:	d101      	bne.n	80076c4 <GetHead+0x13c>
 80076c0:	2300      	movs	r3, #0
 80076c2:	1c1d      	adds	r5, r3, #0
 80076c4:	b2eb      	uxtb	r3, r5
 80076c6:	4023      	ands	r3, r4
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <GetHead+0x154>
 80076ce:	4b93      	ldr	r3, [pc, #588]	; (800791c <GetHead+0x394>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	4b8e      	ldr	r3, [pc, #568]	; (8007910 <GetHead+0x388>)
 80076d6:	2201      	movs	r2, #1
 80076d8:	4252      	negs	r2, r2
 80076da:	601a      	str	r2, [r3, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 80076dc:	4b90      	ldr	r3, [pc, #576]	; (8007920 <GetHead+0x398>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	425a      	negs	r2, r3
 80076e4:	4153      	adcs	r3, r2
 80076e6:	b2dc      	uxtb	r4, r3
 80076e8:	4b8a      	ldr	r3, [pc, #552]	; (8007914 <GetHead+0x38c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2201      	movs	r2, #1
 80076ee:	1c15      	adds	r5, r2, #0
 80076f0:	4989      	ldr	r1, [pc, #548]	; (8007918 <GetHead+0x390>)
 80076f2:	1c18      	adds	r0, r3, #0
 80076f4:	f7f8 feea 	bl	80004cc <__aeabi_fcmplt>
 80076f8:	1e03      	subs	r3, r0, #0
 80076fa:	d101      	bne.n	8007700 <GetHead+0x178>
 80076fc:	2300      	movs	r3, #0
 80076fe:	1c1d      	adds	r5, r3, #0
 8007700:	b2eb      	uxtb	r3, r5
 8007702:	4023      	ands	r3, r4
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d006      	beq.n	8007718 <GetHead+0x190>
 800770a:	4b85      	ldr	r3, [pc, #532]	; (8007920 <GetHead+0x398>)
 800770c:	2201      	movs	r2, #1
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	4b84      	ldr	r3, [pc, #528]	; (8007924 <GetHead+0x39c>)
 8007712:	2201      	movs	r2, #1
 8007714:	4252      	negs	r2, r2
 8007716:	601a      	str	r2, [r3, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 8007718:	4b82      	ldr	r3, [pc, #520]	; (8007924 <GetHead+0x39c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	425a      	negs	r2, r3
 8007720:	4153      	adcs	r3, r2
 8007722:	b2dc      	uxtb	r4, r3
 8007724:	4b7b      	ldr	r3, [pc, #492]	; (8007914 <GetHead+0x38c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2201      	movs	r2, #1
 800772a:	1c15      	adds	r5, r2, #0
 800772c:	497a      	ldr	r1, [pc, #488]	; (8007918 <GetHead+0x390>)
 800772e:	1c18      	adds	r0, r3, #0
 8007730:	f7f8 feea 	bl	8000508 <__aeabi_fcmpge>
 8007734:	1e03      	subs	r3, r0, #0
 8007736:	d101      	bne.n	800773c <GetHead+0x1b4>
 8007738:	2300      	movs	r3, #0
 800773a:	1c1d      	adds	r5, r3, #0
 800773c:	b2eb      	uxtb	r3, r5
 800773e:	4023      	ands	r3, r4
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d006      	beq.n	8007754 <GetHead+0x1cc>
 8007746:	4b77      	ldr	r3, [pc, #476]	; (8007924 <GetHead+0x39c>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	4b74      	ldr	r3, [pc, #464]	; (8007920 <GetHead+0x398>)
 800774e:	2201      	movs	r2, #1
 8007750:	4252      	negs	r2, r2
 8007752:	601a      	str	r2, [r3, #0]
	if(GSMSignal<=10){
 8007754:	4b74      	ldr	r3, [pc, #464]	; (8007928 <GetHead+0x3a0>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4974      	ldr	r1, [pc, #464]	; (800792c <GetHead+0x3a4>)
 800775a:	1c18      	adds	r0, r3, #0
 800775c:	f7f8 fec0 	bl	80004e0 <__aeabi_fcmple>
 8007760:	1e03      	subs	r3, r0, #0
 8007762:	d006      	beq.n	8007772 <GetHead+0x1ea>
		strcat(Head,AlartStr_HistoryPVTData);
 8007764:	4a72      	ldr	r2, [pc, #456]	; (8007930 <GetHead+0x3a8>)
 8007766:	4b61      	ldr	r3, [pc, #388]	; (80078ec <GetHead+0x364>)
 8007768:	0011      	movs	r1, r2
 800776a:	0018      	movs	r0, r3
 800776c:	f00b fc56 	bl	801301c <strcat>
 8007770:	e134      	b.n	80079dc <GetHead+0x454>
	}
	else if(getSpeed()>SpeedThr){
 8007772:	f7fe ff21 	bl	80065b8 <getSpeed>
 8007776:	1c02      	adds	r2, r0, #0
 8007778:	4b6e      	ldr	r3, [pc, #440]	; (8007934 <GetHead+0x3ac>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	1c19      	adds	r1, r3, #0
 800777e:	1c10      	adds	r0, r2, #0
 8007780:	f7f8 feb8 	bl	80004f4 <__aeabi_fcmpgt>
 8007784:	1e03      	subs	r3, r0, #0
 8007786:	d006      	beq.n	8007796 <GetHead+0x20e>
		strcat(Head,AlartStr_OverSpeed);
 8007788:	4a6b      	ldr	r2, [pc, #428]	; (8007938 <GetHead+0x3b0>)
 800778a:	4b58      	ldr	r3, [pc, #352]	; (80078ec <GetHead+0x364>)
 800778c:	0011      	movs	r1, r2
 800778e:	0018      	movs	r0, r3
 8007790:	f00b fc44 	bl	801301c <strcat>
 8007794:	e122      	b.n	80079dc <GetHead+0x454>
	}
	else if(EmergencyWireBreak>0){
 8007796:	4b69      	ldr	r3, [pc, #420]	; (800793c <GetHead+0x3b4>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd09      	ble.n	80077b2 <GetHead+0x22a>
		strcat(Head,AlartStr_EmergencyWireBreak);
 800779e:	4a68      	ldr	r2, [pc, #416]	; (8007940 <GetHead+0x3b8>)
 80077a0:	4b52      	ldr	r3, [pc, #328]	; (80078ec <GetHead+0x364>)
 80077a2:	0011      	movs	r1, r2
 80077a4:	0018      	movs	r0, r3
 80077a6:	f00b fc39 	bl	801301c <strcat>
		EmergencyWireBreak=0;
 80077aa:	4b64      	ldr	r3, [pc, #400]	; (800793c <GetHead+0x3b4>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	e114      	b.n	80079dc <GetHead+0x454>
	}
	else if(AccGyroStatus==1){
 80077b2:	4b64      	ldr	r3, [pc, #400]	; (8007944 <GetHead+0x3bc>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d106      	bne.n	80077c8 <GetHead+0x240>
		strcat(Head,AlartStr_HarshAcceleration);
 80077ba:	4a63      	ldr	r2, [pc, #396]	; (8007948 <GetHead+0x3c0>)
 80077bc:	4b4b      	ldr	r3, [pc, #300]	; (80078ec <GetHead+0x364>)
 80077be:	0011      	movs	r1, r2
 80077c0:	0018      	movs	r0, r3
 80077c2:	f00b fc2b 	bl	801301c <strcat>
 80077c6:	e109      	b.n	80079dc <GetHead+0x454>
	}

	else if(AccGyroStatus==2){
 80077c8:	4b5e      	ldr	r3, [pc, #376]	; (8007944 <GetHead+0x3bc>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d106      	bne.n	80077de <GetHead+0x256>
		strcat(Head,AlartStr_HarshBreaking);
 80077d0:	4a5e      	ldr	r2, [pc, #376]	; (800794c <GetHead+0x3c4>)
 80077d2:	4b46      	ldr	r3, [pc, #280]	; (80078ec <GetHead+0x364>)
 80077d4:	0011      	movs	r1, r2
 80077d6:	0018      	movs	r0, r3
 80077d8:	f00b fc20 	bl	801301c <strcat>
 80077dc:	e0fe      	b.n	80079dc <GetHead+0x454>
	}
	else if(AccGyroStatus==3){
 80077de:	4b59      	ldr	r3, [pc, #356]	; (8007944 <GetHead+0x3bc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d106      	bne.n	80077f4 <GetHead+0x26c>
		strcat(Head,AlartStr_RashTurning);
 80077e6:	4a5a      	ldr	r2, [pc, #360]	; (8007950 <GetHead+0x3c8>)
 80077e8:	4b40      	ldr	r3, [pc, #256]	; (80078ec <GetHead+0x364>)
 80077ea:	0011      	movs	r1, r2
 80077ec:	0018      	movs	r0, r3
 80077ee:	f00b fc15 	bl	801301c <strcat>
 80077f2:	e0f3      	b.n	80079dc <GetHead+0x454>
	}
	else if(EmergencyStateON>0){
 80077f4:	4b40      	ldr	r3, [pc, #256]	; (80078f8 <GetHead+0x370>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dd09      	ble.n	8007810 <GetHead+0x288>
		strcat(Head,AlartStr_EmergencyStateON);
 80077fc:	4a55      	ldr	r2, [pc, #340]	; (8007954 <GetHead+0x3cc>)
 80077fe:	4b3b      	ldr	r3, [pc, #236]	; (80078ec <GetHead+0x364>)
 8007800:	0011      	movs	r1, r2
 8007802:	0018      	movs	r0, r3
 8007804:	f00b fc0a 	bl	801301c <strcat>
		EmergencyStateON=0;
 8007808:	4b3b      	ldr	r3, [pc, #236]	; (80078f8 <GetHead+0x370>)
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	e0e5      	b.n	80079dc <GetHead+0x454>
	}
	else if(EmergencyStateOFF>0){
 8007810:	4b3b      	ldr	r3, [pc, #236]	; (8007900 <GetHead+0x378>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	dd09      	ble.n	800782c <GetHead+0x2a4>
		strcat(Head,AlartStr_EmergencyStateOFF);
 8007818:	4a4f      	ldr	r2, [pc, #316]	; (8007958 <GetHead+0x3d0>)
 800781a:	4b34      	ldr	r3, [pc, #208]	; (80078ec <GetHead+0x364>)
 800781c:	0011      	movs	r1, r2
 800781e:	0018      	movs	r0, r3
 8007820:	f00b fbfc 	bl	801301c <strcat>
		EmergencyStateOFF=0;
 8007824:	4b36      	ldr	r3, [pc, #216]	; (8007900 <GetHead+0x378>)
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e0d7      	b.n	80079dc <GetHead+0x454>
	}
	else if(IgnitionTurnedON>0){
 800782c:	4b35      	ldr	r3, [pc, #212]	; (8007904 <GetHead+0x37c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	dd09      	ble.n	8007848 <GetHead+0x2c0>
		strcat(Head,AlartStr_IgnitionTurnedON);
 8007834:	4a49      	ldr	r2, [pc, #292]	; (800795c <GetHead+0x3d4>)
 8007836:	4b2d      	ldr	r3, [pc, #180]	; (80078ec <GetHead+0x364>)
 8007838:	0011      	movs	r1, r2
 800783a:	0018      	movs	r0, r3
 800783c:	f00b fbee 	bl	801301c <strcat>
		IgnitionTurnedON=0;
 8007840:	4b30      	ldr	r3, [pc, #192]	; (8007904 <GetHead+0x37c>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	e0c9      	b.n	80079dc <GetHead+0x454>
	}
	else if(IgnitionTurnedOFF>0){
 8007848:	4b30      	ldr	r3, [pc, #192]	; (800790c <GetHead+0x384>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd09      	ble.n	8007864 <GetHead+0x2dc>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 8007850:	4a43      	ldr	r2, [pc, #268]	; (8007960 <GetHead+0x3d8>)
 8007852:	4b26      	ldr	r3, [pc, #152]	; (80078ec <GetHead+0x364>)
 8007854:	0011      	movs	r1, r2
 8007856:	0018      	movs	r0, r3
 8007858:	f00b fbe0 	bl	801301c <strcat>
		IgnitionTurnedOFF=0;
 800785c:	4b2b      	ldr	r3, [pc, #172]	; (800790c <GetHead+0x384>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	e0bb      	b.n	80079dc <GetHead+0x454>
	}
	else if(BOX_STATE=='C'){
 8007864:	4b3f      	ldr	r3, [pc, #252]	; (8007964 <GetHead+0x3dc>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b43      	cmp	r3, #67	; 0x43
 800786a:	d106      	bne.n	800787a <GetHead+0x2f2>
		strcat(Head,AlartStr_BoxTemper);
 800786c:	4a3e      	ldr	r2, [pc, #248]	; (8007968 <GetHead+0x3e0>)
 800786e:	4b1f      	ldr	r3, [pc, #124]	; (80078ec <GetHead+0x364>)
 8007870:	0011      	movs	r1, r2
 8007872:	0018      	movs	r0, r3
 8007874:	f00b fbd2 	bl	801301c <strcat>
 8007878:	e0b0      	b.n	80079dc <GetHead+0x454>
	}
	else if(InternalBatterLow>0){
 800787a:	4b25      	ldr	r3, [pc, #148]	; (8007910 <GetHead+0x388>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd09      	ble.n	8007896 <GetHead+0x30e>
		strcat(Head,AlartStr_InternalBatterLow);
 8007882:	4a3a      	ldr	r2, [pc, #232]	; (800796c <GetHead+0x3e4>)
 8007884:	4b19      	ldr	r3, [pc, #100]	; (80078ec <GetHead+0x364>)
 8007886:	0011      	movs	r1, r2
 8007888:	0018      	movs	r0, r3
 800788a:	f00b fbc7 	bl	801301c <strcat>
		InternalBatterLow=0;
 800788e:	4b20      	ldr	r3, [pc, #128]	; (8007910 <GetHead+0x388>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e0a2      	b.n	80079dc <GetHead+0x454>
	}
	else if(InternalBatteryChargedAgain>0){
 8007896:	4b21      	ldr	r3, [pc, #132]	; (800791c <GetHead+0x394>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd09      	ble.n	80078b2 <GetHead+0x32a>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 800789e:	4a34      	ldr	r2, [pc, #208]	; (8007970 <GetHead+0x3e8>)
 80078a0:	4b12      	ldr	r3, [pc, #72]	; (80078ec <GetHead+0x364>)
 80078a2:	0011      	movs	r1, r2
 80078a4:	0018      	movs	r0, r3
 80078a6:	f00b fbb9 	bl	801301c <strcat>
		InternalBatteryChargedAgain=0;
 80078aa:	4b1c      	ldr	r3, [pc, #112]	; (800791c <GetHead+0x394>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	e094      	b.n	80079dc <GetHead+0x454>
	}
	else if(MainBatteryDisconnect>0){
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <GetHead+0x398>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dd09      	ble.n	80078ce <GetHead+0x346>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 80078ba:	4a2e      	ldr	r2, [pc, #184]	; (8007974 <GetHead+0x3ec>)
 80078bc:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <GetHead+0x364>)
 80078be:	0011      	movs	r1, r2
 80078c0:	0018      	movs	r0, r3
 80078c2:	f00b fbab 	bl	801301c <strcat>
		MainBatteryDisconnect=0;
 80078c6:	4b16      	ldr	r3, [pc, #88]	; (8007920 <GetHead+0x398>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	e086      	b.n	80079dc <GetHead+0x454>

	}
	else if(MainBatteryReconnect>0){
 80078ce:	4b15      	ldr	r3, [pc, #84]	; (8007924 <GetHead+0x39c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dd52      	ble.n	800797c <GetHead+0x3f4>
		strcat(Head,AlartStr_MainBatteryReconnect);
 80078d6:	4a28      	ldr	r2, [pc, #160]	; (8007978 <GetHead+0x3f0>)
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <GetHead+0x364>)
 80078da:	0011      	movs	r1, r2
 80078dc:	0018      	movs	r0, r3
 80078de:	f00b fb9d 	bl	801301c <strcat>
		MainBatteryReconnect=0;
 80078e2:	4b10      	ldr	r3, [pc, #64]	; (8007924 <GetHead+0x39c>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	e078      	b.n	80079dc <GetHead+0x454>
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	20003e60 	.word	0x20003e60
 80078f0:	20000034 	.word	0x20000034
 80078f4:	20000040 	.word	0x20000040
 80078f8:	200000dc 	.word	0x200000dc
 80078fc:	20003e4c 	.word	0x20003e4c
 8007900:	20003ee4 	.word	0x20003ee4
 8007904:	20003ee8 	.word	0x20003ee8
 8007908:	20003e44 	.word	0x20003e44
 800790c:	20003eec 	.word	0x20003eec
 8007910:	20003ef0 	.word	0x20003ef0
 8007914:	20003e5c 	.word	0x20003e5c
 8007918:	40400000 	.word	0x40400000
 800791c:	20003ef4 	.word	0x20003ef4
 8007920:	20003ef8 	.word	0x20003ef8
 8007924:	20003efc 	.word	0x20003efc
 8007928:	20001798 	.word	0x20001798
 800792c:	41200000 	.word	0x41200000
 8007930:	20000050 	.word	0x20000050
 8007934:	20000000 	.word	0x20000000
 8007938:	200000d0 	.word	0x200000d0
 800793c:	20003f00 	.word	0x20003f00
 8007940:	200000c8 	.word	0x200000c8
 8007944:	2000051c 	.word	0x2000051c
 8007948:	200000a0 	.word	0x200000a0
 800794c:	200000a8 	.word	0x200000a8
 8007950:	200000b0 	.word	0x200000b0
 8007954:	20000090 	.word	0x20000090
 8007958:	20000098 	.word	0x20000098
 800795c:	20000080 	.word	0x20000080
 8007960:	20000088 	.word	0x20000088
 8007964:	20000033 	.word	0x20000033
 8007968:	20000078 	.word	0x20000078
 800796c:	20000068 	.word	0x20000068
 8007970:	20000070 	.word	0x20000070
 8007974:	20000058 	.word	0x20000058
 8007978:	20000060 	.word	0x20000060
	}
	else if(HistoryPVTData>0){
 800797c:	4b2b      	ldr	r3, [pc, #172]	; (8007a2c <GetHead+0x4a4>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	dd09      	ble.n	8007998 <GetHead+0x410>
		strcat(Head,AlartStr_HistoryPVTData);
 8007984:	4a2a      	ldr	r2, [pc, #168]	; (8007a30 <GetHead+0x4a8>)
 8007986:	4b2b      	ldr	r3, [pc, #172]	; (8007a34 <GetHead+0x4ac>)
 8007988:	0011      	movs	r1, r2
 800798a:	0018      	movs	r0, r3
 800798c:	f00b fb46 	bl	801301c <strcat>
		HistoryPVTData=0;
 8007990:	4b26      	ldr	r3, [pc, #152]	; (8007a2c <GetHead+0x4a4>)
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e021      	b.n	80079dc <GetHead+0x454>
	}
	else if(HealthPacket>0){
 8007998:	4b27      	ldr	r3, [pc, #156]	; (8007a38 <GetHead+0x4b0>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dd09      	ble.n	80079b4 <GetHead+0x42c>
		strcat(Head,AlartStr_HealthPacket);
 80079a0:	4a26      	ldr	r2, [pc, #152]	; (8007a3c <GetHead+0x4b4>)
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <GetHead+0x4ac>)
 80079a4:	0011      	movs	r1, r2
 80079a6:	0018      	movs	r0, r3
 80079a8:	f00b fb38 	bl	801301c <strcat>
		HealthPacket=0;
 80079ac:	4b22      	ldr	r3, [pc, #136]	; (8007a38 <GetHead+0x4b0>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	e013      	b.n	80079dc <GetHead+0x454>
	}
	else if(OTAParameterChange>0){
 80079b4:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <GetHead+0x4b8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dd09      	ble.n	80079d0 <GetHead+0x448>
		strcat(Head,AlartStr_OTAParameterChange);
 80079bc:	4a21      	ldr	r2, [pc, #132]	; (8007a44 <GetHead+0x4bc>)
 80079be:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <GetHead+0x4ac>)
 80079c0:	0011      	movs	r1, r2
 80079c2:	0018      	movs	r0, r3
 80079c4:	f00b fb2a 	bl	801301c <strcat>
		OTAParameterChange=0;
 80079c8:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <GetHead+0x4b8>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e005      	b.n	80079dc <GetHead+0x454>
	}
	else{
		strcat(Head,AlartStr_NormalPkt);
 80079d0:	4a1d      	ldr	r2, [pc, #116]	; (8007a48 <GetHead+0x4c0>)
 80079d2:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <GetHead+0x4ac>)
 80079d4:	0011      	movs	r1, r2
 80079d6:	0018      	movs	r0, r3
 80079d8:	f00b fb20 	bl	801301c <strcat>
	}


	if(GSMSignal<=10){
 80079dc:	4b1b      	ldr	r3, [pc, #108]	; (8007a4c <GetHead+0x4c4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	491b      	ldr	r1, [pc, #108]	; (8007a50 <GetHead+0x4c8>)
 80079e2:	1c18      	adds	r0, r3, #0
 80079e4:	f7f8 fd7c 	bl	80004e0 <__aeabi_fcmple>
 80079e8:	1e03      	subs	r3, r0, #0
 80079ea:	d00f      	beq.n	8007a0c <GetHead+0x484>
			strcat(Head,PacketStatusStrHist);
 80079ec:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <GetHead+0x4ac>)
 80079ee:	0018      	movs	r0, r3
 80079f0:	f7f8 fb8a 	bl	8000108 <strlen>
 80079f4:	0003      	movs	r3, r0
 80079f6:	001a      	movs	r2, r3
 80079f8:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <GetHead+0x4ac>)
 80079fa:	18d2      	adds	r2, r2, r3
 80079fc:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <GetHead+0x4cc>)
 80079fe:	0010      	movs	r0, r2
 8007a00:	0019      	movs	r1, r3
 8007a02:	2303      	movs	r3, #3
 8007a04:	001a      	movs	r2, r3
 8007a06:	f00b fcc9 	bl	801339c <memcpy>
 8007a0a:	e005      	b.n	8007a18 <GetHead+0x490>
	}else{
		strcat(Head,PacketStatusStrLive);
 8007a0c:	4a12      	ldr	r2, [pc, #72]	; (8007a58 <GetHead+0x4d0>)
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <GetHead+0x4ac>)
 8007a10:	0011      	movs	r1, r2
 8007a12:	0018      	movs	r0, r3
 8007a14:	f00b fb02 	bl	801301c <strcat>
	}

	//%%%%%%%    AccGyro Rest    %%%%%%
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 8007a18:	4b10      	ldr	r3, [pc, #64]	; (8007a5c <GetHead+0x4d4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dd02      	ble.n	8007a26 <GetHead+0x49e>
 8007a20:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <GetHead+0x4d4>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]


}
 8007a26:	46c0      	nop			; (mov r8, r8)
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a2c:	20003ed8 	.word	0x20003ed8
 8007a30:	20000050 	.word	0x20000050
 8007a34:	20003e60 	.word	0x20003e60
 8007a38:	20003edc 	.word	0x20003edc
 8007a3c:	200000c0 	.word	0x200000c0
 8007a40:	20003ee0 	.word	0x20003ee0
 8007a44:	200000b8 	.word	0x200000b8
 8007a48:	20000048 	.word	0x20000048
 8007a4c:	20001798 	.word	0x20001798
 8007a50:	41200000 	.word	0x41200000
 8007a54:	08018418 	.word	0x08018418
 8007a58:	200000d8 	.word	0x200000d8
 8007a5c:	20000520 	.word	0x20000520

08007a60 <TestRun>:

void TestRun(){
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0



	if(errorlen>10){
 8007a66:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <TestRun+0x90>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b0a      	cmp	r3, #10
 8007a6c:	dd05      	ble.n	8007a7a <TestRun+0x1a>
		Debug_Tx("GSMUART error rebooting device");
 8007a6e:	4b21      	ldr	r3, [pc, #132]	; (8007af4 <TestRun+0x94>)
 8007a70:	0018      	movs	r0, r3
 8007a72:	f000 fbb3 	bl	80081dc <Debug_Tx>
		NVIC_SystemReset();
 8007a76:	f7fb fc07 	bl	8003288 <__NVIC_SystemReset>
	}




	printInt(seqNo);
 8007a7a:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <TestRun+0x98>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	0018      	movs	r0, r3
 8007a80:	f7fe fb6a 	bl	8006158 <printInt>


	MAINS_STATE=Read_DI_MAINS_STATE();
 8007a84:	f7fb fc4c 	bl	8003320 <Read_DI_MAINS_STATE>
 8007a88:	0002      	movs	r2, r0
 8007a8a:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <TestRun+0x9c>)
 8007a8c:	601a      	str	r2, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 8007a8e:	f7fb fc5b 	bl	8003348 <Read_DI_ACC_STATE>
 8007a92:	0002      	movs	r2, r0
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <TestRun+0xa0>)
 8007a96:	601a      	str	r2, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 8007a98:	f7fb fc6a 	bl	8003370 <Read_DI_BOX_STATE>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	4b18      	ldr	r3, [pc, #96]	; (8007b04 <TestRun+0xa4>)
 8007aa2:	701a      	strb	r2, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 8007aa4:	f7fb fc86 	bl	80033b4 <Read_DI_SOS_STATE>
 8007aa8:	0002      	movs	r2, r0
 8007aaa:	4b17      	ldr	r3, [pc, #92]	; (8007b08 <TestRun+0xa8>)
 8007aac:	601a      	str	r2, [r3, #0]
	EXT_B=Read_EXT_B_SENSE();
 8007aae:	f7fb fce1 	bl	8003474 <Read_EXT_B_SENSE>
 8007ab2:	1c02      	adds	r2, r0, #0
 8007ab4:	4b15      	ldr	r3, [pc, #84]	; (8007b0c <TestRun+0xac>)
 8007ab6:	601a      	str	r2, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 8007ab8:	f7fb fcf8 	bl	80034ac <Read_INT_B_SENSE>
 8007abc:	1c02      	adds	r2, r0, #0
 8007abe:	4b14      	ldr	r3, [pc, #80]	; (8007b10 <TestRun+0xb0>)
 8007ac0:	601a      	str	r2, [r3, #0]


	adc[0]=Read_ADC1();
 8007ac2:	f7fb fc99 	bl	80033f8 <Read_ADC1>
 8007ac6:	1c02      	adds	r2, r0, #0
 8007ac8:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <TestRun+0xb4>)
 8007aca:	601a      	str	r2, [r3, #0]
	adc[1]=Read_ADC2();
 8007acc:	f7fb fcb4 	bl	8003438 <Read_ADC2>
 8007ad0:	1c02      	adds	r2, r0, #0
 8007ad2:	4b10      	ldr	r3, [pc, #64]	; (8007b14 <TestRun+0xb4>)
 8007ad4:	605a      	str	r2, [r3, #4]
	if(EXT_B>7){
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <TestRun+0xac>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	490f      	ldr	r1, [pc, #60]	; (8007b18 <TestRun+0xb8>)
 8007adc:	1c18      	adds	r0, r3, #0
 8007ade:	f7f8 fd09 	bl	80004f4 <__aeabi_fcmpgt>
 8007ae2:	1e03      	subs	r3, r0, #0
 8007ae4:	d01a      	beq.n	8007b1c <TestRun+0xbc>
		SET_LED_PWR(1);
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	f7fb fd56 	bl	8003598 <SET_LED_PWR>
 8007aec:	e019      	b.n	8007b22 <TestRun+0xc2>
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	20001794 	.word	0x20001794
 8007af4:	080181d8 	.word	0x080181d8
 8007af8:	20000410 	.word	0x20000410
 8007afc:	20003e44 	.word	0x20003e44
 8007b00:	20003e48 	.word	0x20003e48
 8007b04:	20000033 	.word	0x20000033
 8007b08:	20003e4c 	.word	0x20003e4c
 8007b0c:	20003e58 	.word	0x20003e58
 8007b10:	20003e5c 	.word	0x20003e5c
 8007b14:	20003e50 	.word	0x20003e50
 8007b18:	40e00000 	.word	0x40e00000
	}
	else{
		SET_LED_PWR(0);
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f7fb fd3b 	bl	8003598 <SET_LED_PWR>
	}



memset(INSMSno,0,30);
 8007b22:	4bfd      	ldr	r3, [pc, #1012]	; (8007f18 <TestRun+0x4b8>)
 8007b24:	221e      	movs	r2, #30
 8007b26:	2100      	movs	r1, #0
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f00b fa6f 	bl	801300c <memset>
memset(OUTSMSno,0,30);
 8007b2e:	4bfb      	ldr	r3, [pc, #1004]	; (8007f1c <TestRun+0x4bc>)
 8007b30:	221e      	movs	r2, #30
 8007b32:	2100      	movs	r1, #0
 8007b34:	0018      	movs	r0, r3
 8007b36:	f00b fa69 	bl	801300c <memset>
memset(EmgIP,0,50);
 8007b3a:	4bf9      	ldr	r3, [pc, #996]	; (8007f20 <TestRun+0x4c0>)
 8007b3c:	2232      	movs	r2, #50	; 0x32
 8007b3e:	2100      	movs	r1, #0
 8007b40:	0018      	movs	r0, r3
 8007b42:	f00b fa63 	bl	801300c <memset>
memset(RegIP,0,50);
 8007b46:	4bf7      	ldr	r3, [pc, #988]	; (8007f24 <TestRun+0x4c4>)
 8007b48:	2232      	movs	r2, #50	; 0x32
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f00b fa5d 	bl	801300c <memset>
memset(TracIP,0,50);
 8007b52:	4bf5      	ldr	r3, [pc, #980]	; (8007f28 <TestRun+0x4c8>)
 8007b54:	2232      	movs	r2, #50	; 0x32
 8007b56:	2100      	movs	r1, #0
 8007b58:	0018      	movs	r0, r3
 8007b5a:	f00b fa57 	bl	801300c <memset>
memset(simop,0,25);
 8007b5e:	4bf3      	ldr	r3, [pc, #972]	; (8007f2c <TestRun+0x4cc>)
 8007b60:	2219      	movs	r2, #25
 8007b62:	2100      	movs	r1, #0
 8007b64:	0018      	movs	r0, r3
 8007b66:	f00b fa51 	bl	801300c <memset>

strcpy(INSMSno,readINSMSno());
 8007b6a:	f7fd ff37 	bl	80059dc <readINSMSno>
 8007b6e:	0002      	movs	r2, r0
 8007b70:	4be9      	ldr	r3, [pc, #932]	; (8007f18 <TestRun+0x4b8>)
 8007b72:	0011      	movs	r1, r2
 8007b74:	0018      	movs	r0, r3
 8007b76:	f00b fbfe 	bl	8013376 <strcpy>
strcpy(OUTSMSno,readOUTSMSno());
 8007b7a:	f7fd ff4b 	bl	8005a14 <readOUTSMSno>
 8007b7e:	0002      	movs	r2, r0
 8007b80:	4be6      	ldr	r3, [pc, #920]	; (8007f1c <TestRun+0x4bc>)
 8007b82:	0011      	movs	r1, r2
 8007b84:	0018      	movs	r0, r3
 8007b86:	f00b fbf6 	bl	8013376 <strcpy>
strcpy(EmgIP,readEmgIP());
 8007b8a:	f7fd ff5f 	bl	8005a4c <readEmgIP>
 8007b8e:	0002      	movs	r2, r0
 8007b90:	4be3      	ldr	r3, [pc, #908]	; (8007f20 <TestRun+0x4c0>)
 8007b92:	0011      	movs	r1, r2
 8007b94:	0018      	movs	r0, r3
 8007b96:	f00b fbee 	bl	8013376 <strcpy>
strcpy(RegIP,readRegIP());
 8007b9a:	f7fd ff6f 	bl	8005a7c <readRegIP>
 8007b9e:	0002      	movs	r2, r0
 8007ba0:	4be0      	ldr	r3, [pc, #896]	; (8007f24 <TestRun+0x4c4>)
 8007ba2:	0011      	movs	r1, r2
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f00b fbe6 	bl	8013376 <strcpy>
strcpy(TracIP,readTracIP());
 8007baa:	f7fd ff83 	bl	8005ab4 <readTracIP>
 8007bae:	0002      	movs	r2, r0
 8007bb0:	4bdd      	ldr	r3, [pc, #884]	; (8007f28 <TestRun+0x4c8>)
 8007bb2:	0011      	movs	r1, r2
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f00b fbde 	bl	8013376 <strcpy>
//Debug_Tx("BEFORE SIM OP");
strcpy(simop, GSMSimOperator());
 8007bba:	f7fc f85b 	bl	8003c74 <GSMSimOperator>
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	4bda      	ldr	r3, [pc, #872]	; (8007f2c <TestRun+0x4cc>)
 8007bc2:	0011      	movs	r1, r2
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	f00b fbd6 	bl	8013376 <strcpy>
//strcpy(simop, GSMSimOperator());
//strcpy(simop, GSMSimOperator());


	//%%%%%%%    GSM Info Read    %%%%%%
	int GSMinfoT=tic();
 8007bca:	f7fe fd31 	bl	8006630 <tic>
 8007bce:	0003      	movs	r3, r0
 8007bd0:	607b      	str	r3, [r7, #4]
	GSMCellInfo();
 8007bd2:	f7fc fac5 	bl	8004160 <GSMCellInfo>

	toc(GSMinfoT,"_________________________While loop GSMinfo");
 8007bd6:	4ad6      	ldr	r2, [pc, #856]	; (8007f30 <TestRun+0x4d0>)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	0011      	movs	r1, r2
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7fe fd2f 	bl	8006640 <toc>


	// %%%%%%%%%%%%%%%%%%%%%%%%%Create Protocall %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	GetHead();
 8007be2:	f7ff fcd1 	bl	8007588 <GetHead>
	//Debug_Tx(Head);



	if (debug==122){
 8007be6:	4bd3      	ldr	r3, [pc, #844]	; (8007f34 <TestRun+0x4d4>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b7a      	cmp	r3, #122	; 0x7a
 8007bec:	d000      	beq.n	8007bf0 <TestRun+0x190>
 8007bee:	e0c1      	b.n	8007d74 <TestRun+0x314>
		memset(DataString,0,300);
 8007bf0:	2396      	movs	r3, #150	; 0x96
 8007bf2:	005a      	lsls	r2, r3, #1
 8007bf4:	4bd0      	ldr	r3, [pc, #832]	; (8007f38 <TestRun+0x4d8>)
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	f00b fa07 	bl	801300c <memset>
		strcat(DataString,"Head:");
 8007bfe:	4bce      	ldr	r3, [pc, #824]	; (8007f38 <TestRun+0x4d8>)
 8007c00:	0018      	movs	r0, r3
 8007c02:	f7f8 fa81 	bl	8000108 <strlen>
 8007c06:	0003      	movs	r3, r0
 8007c08:	001a      	movs	r2, r3
 8007c0a:	4bcb      	ldr	r3, [pc, #812]	; (8007f38 <TestRun+0x4d8>)
 8007c0c:	18d2      	adds	r2, r2, r3
 8007c0e:	4bcb      	ldr	r3, [pc, #812]	; (8007f3c <TestRun+0x4dc>)
 8007c10:	0010      	movs	r0, r2
 8007c12:	0019      	movs	r1, r3
 8007c14:	2306      	movs	r3, #6
 8007c16:	001a      	movs	r2, r3
 8007c18:	f00b fbc0 	bl	801339c <memcpy>
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 8007c1c:	4ac8      	ldr	r2, [pc, #800]	; (8007f40 <TestRun+0x4e0>)
 8007c1e:	4bc6      	ldr	r3, [pc, #792]	; (8007f38 <TestRun+0x4d8>)
 8007c20:	0011      	movs	r1, r2
 8007c22:	0018      	movs	r0, r3
 8007c24:	f00b f9fa 	bl	801301c <strcat>
 8007c28:	4bc3      	ldr	r3, [pc, #780]	; (8007f38 <TestRun+0x4d8>)
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f7f8 fa6c 	bl	8000108 <strlen>
 8007c30:	0003      	movs	r3, r0
 8007c32:	001a      	movs	r2, r3
 8007c34:	4bc0      	ldr	r3, [pc, #768]	; (8007f38 <TestRun+0x4d8>)
 8007c36:	18d2      	adds	r2, r2, r3
 8007c38:	4bc2      	ldr	r3, [pc, #776]	; (8007f44 <TestRun+0x4e4>)
 8007c3a:	0010      	movs	r0, r2
 8007c3c:	0019      	movs	r1, r3
 8007c3e:	2308      	movs	r3, #8
 8007c40:	001a      	movs	r2, r3
 8007c42:	f00b fbab 	bl	801339c <memcpy>
		strcat(DataString,Regno);strcat(DataString,"\nGPSDS:");
 8007c46:	4ac0      	ldr	r2, [pc, #768]	; (8007f48 <TestRun+0x4e8>)
 8007c48:	4bbb      	ldr	r3, [pc, #748]	; (8007f38 <TestRun+0x4d8>)
 8007c4a:	0011      	movs	r1, r2
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	f00b f9e5 	bl	801301c <strcat>
 8007c52:	4bb9      	ldr	r3, [pc, #740]	; (8007f38 <TestRun+0x4d8>)
 8007c54:	0018      	movs	r0, r3
 8007c56:	f7f8 fa57 	bl	8000108 <strlen>
 8007c5a:	0003      	movs	r3, r0
 8007c5c:	001a      	movs	r2, r3
 8007c5e:	4bb6      	ldr	r3, [pc, #728]	; (8007f38 <TestRun+0x4d8>)
 8007c60:	18d2      	adds	r2, r2, r3
 8007c62:	4bba      	ldr	r3, [pc, #744]	; (8007f4c <TestRun+0x4ec>)
 8007c64:	0010      	movs	r0, r2
 8007c66:	0019      	movs	r1, r3
 8007c68:	2308      	movs	r3, #8
 8007c6a:	001a      	movs	r2, r3
 8007c6c:	f00b fb96 	bl	801339c <memcpy>
		strcat(DataString,gpsDataRet);strcat(DataString,"\nIMEI:");
 8007c70:	4ab7      	ldr	r2, [pc, #732]	; (8007f50 <TestRun+0x4f0>)
 8007c72:	4bb1      	ldr	r3, [pc, #708]	; (8007f38 <TestRun+0x4d8>)
 8007c74:	0011      	movs	r1, r2
 8007c76:	0018      	movs	r0, r3
 8007c78:	f00b f9d0 	bl	801301c <strcat>
 8007c7c:	4bae      	ldr	r3, [pc, #696]	; (8007f38 <TestRun+0x4d8>)
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7f8 fa42 	bl	8000108 <strlen>
 8007c84:	0003      	movs	r3, r0
 8007c86:	001a      	movs	r2, r3
 8007c88:	4bab      	ldr	r3, [pc, #684]	; (8007f38 <TestRun+0x4d8>)
 8007c8a:	18d2      	adds	r2, r2, r3
 8007c8c:	4bb1      	ldr	r3, [pc, #708]	; (8007f54 <TestRun+0x4f4>)
 8007c8e:	0010      	movs	r0, r2
 8007c90:	0019      	movs	r1, r3
 8007c92:	2307      	movs	r3, #7
 8007c94:	001a      	movs	r2, r3
 8007c96:	f00b fb81 	bl	801339c <memcpy>
		strcat(DataString,IMEI);strcat(DataString,"\nSIMOP:");
 8007c9a:	4aaf      	ldr	r2, [pc, #700]	; (8007f58 <TestRun+0x4f8>)
 8007c9c:	4ba6      	ldr	r3, [pc, #664]	; (8007f38 <TestRun+0x4d8>)
 8007c9e:	0011      	movs	r1, r2
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f00b f9bb 	bl	801301c <strcat>
 8007ca6:	4ba4      	ldr	r3, [pc, #656]	; (8007f38 <TestRun+0x4d8>)
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7f8 fa2d 	bl	8000108 <strlen>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	001a      	movs	r2, r3
 8007cb2:	4ba1      	ldr	r3, [pc, #644]	; (8007f38 <TestRun+0x4d8>)
 8007cb4:	18d2      	adds	r2, r2, r3
 8007cb6:	4ba9      	ldr	r3, [pc, #676]	; (8007f5c <TestRun+0x4fc>)
 8007cb8:	0010      	movs	r0, r2
 8007cba:	0019      	movs	r1, r3
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	001a      	movs	r2, r3
 8007cc0:	f00b fb6c 	bl	801339c <memcpy>
		strcat(DataString,simop);strcat(DataString,"\nStratusString:");
 8007cc4:	4a99      	ldr	r2, [pc, #612]	; (8007f2c <TestRun+0x4cc>)
 8007cc6:	4b9c      	ldr	r3, [pc, #624]	; (8007f38 <TestRun+0x4d8>)
 8007cc8:	0011      	movs	r1, r2
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f00b f9a6 	bl	801301c <strcat>
 8007cd0:	4b99      	ldr	r3, [pc, #612]	; (8007f38 <TestRun+0x4d8>)
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f7f8 fa18 	bl	8000108 <strlen>
 8007cd8:	0003      	movs	r3, r0
 8007cda:	001a      	movs	r2, r3
 8007cdc:	4b96      	ldr	r3, [pc, #600]	; (8007f38 <TestRun+0x4d8>)
 8007cde:	18d2      	adds	r2, r2, r3
 8007ce0:	4b9f      	ldr	r3, [pc, #636]	; (8007f60 <TestRun+0x500>)
 8007ce2:	0010      	movs	r0, r2
 8007ce4:	0019      	movs	r1, r3
 8007ce6:	2310      	movs	r3, #16
 8007ce8:	001a      	movs	r2, r3
 8007cea:	f00b fb57 	bl	801339c <memcpy>
		strcat(DataString,StatusStrng);strcat(DataString,"\nGsminfo:");
 8007cee:	4a9d      	ldr	r2, [pc, #628]	; (8007f64 <TestRun+0x504>)
 8007cf0:	4b91      	ldr	r3, [pc, #580]	; (8007f38 <TestRun+0x4d8>)
 8007cf2:	0011      	movs	r1, r2
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	f00b f991 	bl	801301c <strcat>
 8007cfa:	4b8f      	ldr	r3, [pc, #572]	; (8007f38 <TestRun+0x4d8>)
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f7f8 fa03 	bl	8000108 <strlen>
 8007d02:	0003      	movs	r3, r0
 8007d04:	001a      	movs	r2, r3
 8007d06:	4b8c      	ldr	r3, [pc, #560]	; (8007f38 <TestRun+0x4d8>)
 8007d08:	18d2      	adds	r2, r2, r3
 8007d0a:	4b97      	ldr	r3, [pc, #604]	; (8007f68 <TestRun+0x508>)
 8007d0c:	0010      	movs	r0, r2
 8007d0e:	0019      	movs	r1, r3
 8007d10:	230a      	movs	r3, #10
 8007d12:	001a      	movs	r2, r3
 8007d14:	f00b fb42 	bl	801339c <memcpy>
		strcat(DataString,gsminfo);strcat(DataString,"\nDig_io:");
 8007d18:	4a94      	ldr	r2, [pc, #592]	; (8007f6c <TestRun+0x50c>)
 8007d1a:	4b87      	ldr	r3, [pc, #540]	; (8007f38 <TestRun+0x4d8>)
 8007d1c:	0011      	movs	r1, r2
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f00b f97c 	bl	801301c <strcat>
 8007d24:	4b84      	ldr	r3, [pc, #528]	; (8007f38 <TestRun+0x4d8>)
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7f8 f9ee 	bl	8000108 <strlen>
 8007d2c:	0003      	movs	r3, r0
 8007d2e:	001a      	movs	r2, r3
 8007d30:	4b81      	ldr	r3, [pc, #516]	; (8007f38 <TestRun+0x4d8>)
 8007d32:	18d2      	adds	r2, r2, r3
 8007d34:	4b8e      	ldr	r3, [pc, #568]	; (8007f70 <TestRun+0x510>)
 8007d36:	0010      	movs	r0, r2
 8007d38:	0019      	movs	r1, r3
 8007d3a:	2309      	movs	r3, #9
 8007d3c:	001a      	movs	r2, r3
 8007d3e:	f00b fb2d 	bl	801339c <memcpy>
		strcat(DataString,Dig_io);strcat(DataString,",\n\0");
 8007d42:	4a8c      	ldr	r2, [pc, #560]	; (8007f74 <TestRun+0x514>)
 8007d44:	4b7c      	ldr	r3, [pc, #496]	; (8007f38 <TestRun+0x4d8>)
 8007d46:	0011      	movs	r1, r2
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f00b f967 	bl	801301c <strcat>
 8007d4e:	4b7a      	ldr	r3, [pc, #488]	; (8007f38 <TestRun+0x4d8>)
 8007d50:	0018      	movs	r0, r3
 8007d52:	f7f8 f9d9 	bl	8000108 <strlen>
 8007d56:	0003      	movs	r3, r0
 8007d58:	001a      	movs	r2, r3
 8007d5a:	4b77      	ldr	r3, [pc, #476]	; (8007f38 <TestRun+0x4d8>)
 8007d5c:	18d2      	adds	r2, r2, r3
 8007d5e:	4b86      	ldr	r3, [pc, #536]	; (8007f78 <TestRun+0x518>)
 8007d60:	0010      	movs	r0, r2
 8007d62:	0019      	movs	r1, r3
 8007d64:	2303      	movs	r3, #3
 8007d66:	001a      	movs	r2, r3
 8007d68:	f00b fb18 	bl	801339c <memcpy>
		Debug_Tx(DataString);
 8007d6c:	4b72      	ldr	r3, [pc, #456]	; (8007f38 <TestRun+0x4d8>)
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f000 fa34 	bl	80081dc <Debug_Tx>
	}
	memset(data_LOGIN,0,100);
 8007d74:	4b81      	ldr	r3, [pc, #516]	; (8007f7c <TestRun+0x51c>)
 8007d76:	2264      	movs	r2, #100	; 0x64
 8007d78:	2100      	movs	r1, #0
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f00b f946 	bl	801300c <memset>
	strcat(data_LOGIN,"$");
 8007d80:	4b7e      	ldr	r3, [pc, #504]	; (8007f7c <TestRun+0x51c>)
 8007d82:	0018      	movs	r0, r3
 8007d84:	f7f8 f9c0 	bl	8000108 <strlen>
 8007d88:	0003      	movs	r3, r0
 8007d8a:	001a      	movs	r2, r3
 8007d8c:	4b7b      	ldr	r3, [pc, #492]	; (8007f7c <TestRun+0x51c>)
 8007d8e:	18d2      	adds	r2, r2, r3
 8007d90:	4b7b      	ldr	r3, [pc, #492]	; (8007f80 <TestRun+0x520>)
 8007d92:	0010      	movs	r0, r2
 8007d94:	0019      	movs	r1, r3
 8007d96:	2302      	movs	r3, #2
 8007d98:	001a      	movs	r2, r3
 8007d9a:	f00b faff 	bl	801339c <memcpy>
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8007d9e:	4a6a      	ldr	r2, [pc, #424]	; (8007f48 <TestRun+0x4e8>)
 8007da0:	4b76      	ldr	r3, [pc, #472]	; (8007f7c <TestRun+0x51c>)
 8007da2:	0011      	movs	r1, r2
 8007da4:	0018      	movs	r0, r3
 8007da6:	f00b f939 	bl	801301c <strcat>
 8007daa:	4b74      	ldr	r3, [pc, #464]	; (8007f7c <TestRun+0x51c>)
 8007dac:	0018      	movs	r0, r3
 8007dae:	f7f8 f9ab 	bl	8000108 <strlen>
 8007db2:	0003      	movs	r3, r0
 8007db4:	001a      	movs	r2, r3
 8007db6:	4b71      	ldr	r3, [pc, #452]	; (8007f7c <TestRun+0x51c>)
 8007db8:	18d2      	adds	r2, r2, r3
 8007dba:	4b72      	ldr	r3, [pc, #456]	; (8007f84 <TestRun+0x524>)
 8007dbc:	0010      	movs	r0, r2
 8007dbe:	0019      	movs	r1, r3
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	001a      	movs	r2, r3
 8007dc4:	f00b faea 	bl	801339c <memcpy>
	strcat(data_LOGIN,"$");
 8007dc8:	4b6c      	ldr	r3, [pc, #432]	; (8007f7c <TestRun+0x51c>)
 8007dca:	0018      	movs	r0, r3
 8007dcc:	f7f8 f99c 	bl	8000108 <strlen>
 8007dd0:	0003      	movs	r3, r0
 8007dd2:	001a      	movs	r2, r3
 8007dd4:	4b69      	ldr	r3, [pc, #420]	; (8007f7c <TestRun+0x51c>)
 8007dd6:	18d2      	adds	r2, r2, r3
 8007dd8:	4b69      	ldr	r3, [pc, #420]	; (8007f80 <TestRun+0x520>)
 8007dda:	0010      	movs	r0, r2
 8007ddc:	0019      	movs	r1, r3
 8007dde:	2302      	movs	r3, #2
 8007de0:	001a      	movs	r2, r3
 8007de2:	f00b fadb 	bl	801339c <memcpy>
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8007de6:	4a5c      	ldr	r2, [pc, #368]	; (8007f58 <TestRun+0x4f8>)
 8007de8:	4b64      	ldr	r3, [pc, #400]	; (8007f7c <TestRun+0x51c>)
 8007dea:	0011      	movs	r1, r2
 8007dec:	0018      	movs	r0, r3
 8007dee:	f00b f915 	bl	801301c <strcat>
 8007df2:	4b62      	ldr	r3, [pc, #392]	; (8007f7c <TestRun+0x51c>)
 8007df4:	0018      	movs	r0, r3
 8007df6:	f7f8 f987 	bl	8000108 <strlen>
 8007dfa:	0003      	movs	r3, r0
 8007dfc:	001a      	movs	r2, r3
 8007dfe:	4b5f      	ldr	r3, [pc, #380]	; (8007f7c <TestRun+0x51c>)
 8007e00:	18d2      	adds	r2, r2, r3
 8007e02:	4b60      	ldr	r3, [pc, #384]	; (8007f84 <TestRun+0x524>)
 8007e04:	0010      	movs	r0, r2
 8007e06:	0019      	movs	r1, r3
 8007e08:	2302      	movs	r3, #2
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	f00b fac6 	bl	801339c <memcpy>
	strcat(data_LOGIN,"$");
 8007e10:	4b5a      	ldr	r3, [pc, #360]	; (8007f7c <TestRun+0x51c>)
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7f8 f978 	bl	8000108 <strlen>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	001a      	movs	r2, r3
 8007e1c:	4b57      	ldr	r3, [pc, #348]	; (8007f7c <TestRun+0x51c>)
 8007e1e:	18d2      	adds	r2, r2, r3
 8007e20:	4b57      	ldr	r3, [pc, #348]	; (8007f80 <TestRun+0x520>)
 8007e22:	0010      	movs	r0, r2
 8007e24:	0019      	movs	r1, r3
 8007e26:	2302      	movs	r3, #2
 8007e28:	001a      	movs	r2, r3
 8007e2a:	f00b fab7 	bl	801339c <memcpy>
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8007e2e:	4a56      	ldr	r2, [pc, #344]	; (8007f88 <TestRun+0x528>)
 8007e30:	4b52      	ldr	r3, [pc, #328]	; (8007f7c <TestRun+0x51c>)
 8007e32:	0011      	movs	r1, r2
 8007e34:	0018      	movs	r0, r3
 8007e36:	f00b f8f1 	bl	801301c <strcat>
 8007e3a:	4b50      	ldr	r3, [pc, #320]	; (8007f7c <TestRun+0x51c>)
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f7f8 f963 	bl	8000108 <strlen>
 8007e42:	0003      	movs	r3, r0
 8007e44:	001a      	movs	r2, r3
 8007e46:	4b4d      	ldr	r3, [pc, #308]	; (8007f7c <TestRun+0x51c>)
 8007e48:	18d2      	adds	r2, r2, r3
 8007e4a:	4b4e      	ldr	r3, [pc, #312]	; (8007f84 <TestRun+0x524>)
 8007e4c:	0010      	movs	r0, r2
 8007e4e:	0019      	movs	r1, r3
 8007e50:	2302      	movs	r3, #2
 8007e52:	001a      	movs	r2, r3
 8007e54:	f00b faa2 	bl	801339c <memcpy>
	strcat(data_LOGIN,"$");
 8007e58:	4b48      	ldr	r3, [pc, #288]	; (8007f7c <TestRun+0x51c>)
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	f7f8 f954 	bl	8000108 <strlen>
 8007e60:	0003      	movs	r3, r0
 8007e62:	001a      	movs	r2, r3
 8007e64:	4b45      	ldr	r3, [pc, #276]	; (8007f7c <TestRun+0x51c>)
 8007e66:	18d2      	adds	r2, r2, r3
 8007e68:	4b45      	ldr	r3, [pc, #276]	; (8007f80 <TestRun+0x520>)
 8007e6a:	0010      	movs	r0, r2
 8007e6c:	0019      	movs	r1, r3
 8007e6e:	2302      	movs	r3, #2
 8007e70:	001a      	movs	r2, r3
 8007e72:	f00b fa93 	bl	801339c <memcpy>
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",0E0W,");
 8007e76:	4a44      	ldr	r2, [pc, #272]	; (8007f88 <TestRun+0x528>)
 8007e78:	4b40      	ldr	r3, [pc, #256]	; (8007f7c <TestRun+0x51c>)
 8007e7a:	0011      	movs	r1, r2
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f00b f8cd 	bl	801301c <strcat>
 8007e82:	4b3e      	ldr	r3, [pc, #248]	; (8007f7c <TestRun+0x51c>)
 8007e84:	0018      	movs	r0, r3
 8007e86:	f7f8 f93f 	bl	8000108 <strlen>
 8007e8a:	0003      	movs	r3, r0
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	4b3b      	ldr	r3, [pc, #236]	; (8007f7c <TestRun+0x51c>)
 8007e90:	18d2      	adds	r2, r2, r3
 8007e92:	4b3e      	ldr	r3, [pc, #248]	; (8007f8c <TestRun+0x52c>)
 8007e94:	0010      	movs	r0, r2
 8007e96:	0019      	movs	r1, r3
 8007e98:	2307      	movs	r3, #7
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	f00b fa7e 	bl	801339c <memcpy>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 8007ea0:	4b36      	ldr	r3, [pc, #216]	; (8007f7c <TestRun+0x51c>)
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	f7fe f974 	bl	8006190 <nmea0183_checksum>
 8007ea8:	0002      	movs	r2, r0
 8007eaa:	4939      	ldr	r1, [pc, #228]	; (8007f90 <TestRun+0x530>)
 8007eac:	4b39      	ldr	r3, [pc, #228]	; (8007f94 <TestRun+0x534>)
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f00b f840 	bl	8012f34 <siprintf>
	strcat(data_LOGIN,checksum);
 8007eb4:	4a37      	ldr	r2, [pc, #220]	; (8007f94 <TestRun+0x534>)
 8007eb6:	4b31      	ldr	r3, [pc, #196]	; (8007f7c <TestRun+0x51c>)
 8007eb8:	0011      	movs	r1, r2
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f00b f8ae 	bl	801301c <strcat>
	strcat(data_LOGIN,",*\0");
 8007ec0:	4b2e      	ldr	r3, [pc, #184]	; (8007f7c <TestRun+0x51c>)
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f7f8 f920 	bl	8000108 <strlen>
 8007ec8:	0003      	movs	r3, r0
 8007eca:	001a      	movs	r2, r3
 8007ecc:	4b2b      	ldr	r3, [pc, #172]	; (8007f7c <TestRun+0x51c>)
 8007ece:	18d2      	adds	r2, r2, r3
 8007ed0:	4b31      	ldr	r3, [pc, #196]	; (8007f98 <TestRun+0x538>)
 8007ed2:	0010      	movs	r0, r2
 8007ed4:	0019      	movs	r1, r3
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	001a      	movs	r2, r3
 8007eda:	f00b fa5f 	bl	801339c <memcpy>

    memset(checksum,0,3);
 8007ede:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <TestRun+0x534>)
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	f00b f891 	bl	801300c <memset>
    memset(DataString,0,300);
 8007eea:	2396      	movs	r3, #150	; 0x96
 8007eec:	005a      	lsls	r2, r3, #1
 8007eee:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <TestRun+0x4d8>)
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f00b f88a 	bl	801300c <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8007ef8:	4a11      	ldr	r2, [pc, #68]	; (8007f40 <TestRun+0x4e0>)
 8007efa:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <TestRun+0x4d8>)
 8007efc:	0011      	movs	r1, r2
 8007efe:	0018      	movs	r0, r3
 8007f00:	f00b f88c 	bl	801301c <strcat>
 8007f04:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <TestRun+0x4d8>)
 8007f06:	0018      	movs	r0, r3
 8007f08:	f7f8 f8fe 	bl	8000108 <strlen>
 8007f0c:	0003      	movs	r3, r0
 8007f0e:	001a      	movs	r2, r3
 8007f10:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <TestRun+0x4d8>)
 8007f12:	18d2      	adds	r2, r2, r3
 8007f14:	e042      	b.n	8007f9c <TestRun+0x53c>
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	20000440 	.word	0x20000440
 8007f1c:	20000460 	.word	0x20000460
 8007f20:	20000480 	.word	0x20000480
 8007f24:	200004b4 	.word	0x200004b4
 8007f28:	200004e8 	.word	0x200004e8
 8007f2c:	20000524 	.word	0x20000524
 8007f30:	080181f8 	.word	0x080181f8
 8007f34:	2000000c 	.word	0x2000000c
 8007f38:	200002e4 	.word	0x200002e4
 8007f3c:	08018224 	.word	0x08018224
 8007f40:	20003e60 	.word	0x20003e60
 8007f44:	0801822c 	.word	0x0801822c
 8007f48:	20000414 	.word	0x20000414
 8007f4c:	08018234 	.word	0x08018234
 8007f50:	20003d88 	.word	0x20003d88
 8007f54:	0801823c 	.word	0x0801823c
 8007f58:	20000428 	.word	0x20000428
 8007f5c:	08018244 	.word	0x08018244
 8007f60:	0801824c 	.word	0x0801824c
 8007f64:	20003ec4 	.word	0x20003ec4
 8007f68:	0801825c 	.word	0x0801825c
 8007f6c:	200016dc 	.word	0x200016dc
 8007f70:	08018268 	.word	0x08018268
 8007f74:	20003e1c 	.word	0x20003e1c
 8007f78:	08018274 	.word	0x08018274
 8007f7c:	2000160c 	.word	0x2000160c
 8007f80:	08018278 	.word	0x08018278
 8007f84:	08016c30 	.word	0x08016c30
 8007f88:	20000040 	.word	0x20000040
 8007f8c:	0801827c 	.word	0x0801827c
 8007f90:	08018284 	.word	0x08018284
 8007f94:	20003f04 	.word	0x20003f04
 8007f98:	0801828c 	.word	0x0801828c
 8007f9c:	4b7b      	ldr	r3, [pc, #492]	; (800818c <TestRun+0x72c>)
 8007f9e:	0010      	movs	r0, r2
 8007fa0:	0019      	movs	r1, r3
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	001a      	movs	r2, r3
 8007fa6:	f00b f9f9 	bl	801339c <memcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 8007faa:	4a79      	ldr	r2, [pc, #484]	; (8008190 <TestRun+0x730>)
 8007fac:	4b79      	ldr	r3, [pc, #484]	; (8008194 <TestRun+0x734>)
 8007fae:	0011      	movs	r1, r2
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f00b f833 	bl	801301c <strcat>
 8007fb6:	4b77      	ldr	r3, [pc, #476]	; (8008194 <TestRun+0x734>)
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f7f8 f8a5 	bl	8000108 <strlen>
 8007fbe:	0003      	movs	r3, r0
 8007fc0:	001a      	movs	r2, r3
 8007fc2:	4b74      	ldr	r3, [pc, #464]	; (8008194 <TestRun+0x734>)
 8007fc4:	18d2      	adds	r2, r2, r3
 8007fc6:	4b71      	ldr	r3, [pc, #452]	; (800818c <TestRun+0x72c>)
 8007fc8:	0010      	movs	r0, r2
 8007fca:	0019      	movs	r1, r3
 8007fcc:	2302      	movs	r3, #2
 8007fce:	001a      	movs	r2, r3
 8007fd0:	f00b f9e4 	bl	801339c <memcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 8007fd4:	4a70      	ldr	r2, [pc, #448]	; (8008198 <TestRun+0x738>)
 8007fd6:	4b6f      	ldr	r3, [pc, #444]	; (8008194 <TestRun+0x734>)
 8007fd8:	0011      	movs	r1, r2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f00b f81e 	bl	801301c <strcat>
 8007fe0:	4b6c      	ldr	r3, [pc, #432]	; (8008194 <TestRun+0x734>)
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f7f8 f890 	bl	8000108 <strlen>
 8007fe8:	0003      	movs	r3, r0
 8007fea:	001a      	movs	r2, r3
 8007fec:	4b69      	ldr	r3, [pc, #420]	; (8008194 <TestRun+0x734>)
 8007fee:	18d2      	adds	r2, r2, r3
 8007ff0:	4b66      	ldr	r3, [pc, #408]	; (800818c <TestRun+0x72c>)
 8007ff2:	0010      	movs	r0, r2
 8007ff4:	0019      	movs	r1, r3
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	f00b f9cf 	bl	801339c <memcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8007ffe:	4a67      	ldr	r2, [pc, #412]	; (800819c <TestRun+0x73c>)
 8008000:	4b64      	ldr	r3, [pc, #400]	; (8008194 <TestRun+0x734>)
 8008002:	0011      	movs	r1, r2
 8008004:	0018      	movs	r0, r3
 8008006:	f00b f809 	bl	801301c <strcat>
 800800a:	4b62      	ldr	r3, [pc, #392]	; (8008194 <TestRun+0x734>)
 800800c:	0018      	movs	r0, r3
 800800e:	f7f8 f87b 	bl	8000108 <strlen>
 8008012:	0003      	movs	r3, r0
 8008014:	001a      	movs	r2, r3
 8008016:	4b5f      	ldr	r3, [pc, #380]	; (8008194 <TestRun+0x734>)
 8008018:	18d2      	adds	r2, r2, r3
 800801a:	4b5c      	ldr	r3, [pc, #368]	; (800818c <TestRun+0x72c>)
 800801c:	0010      	movs	r0, r2
 800801e:	0019      	movs	r1, r3
 8008020:	2302      	movs	r3, #2
 8008022:	001a      	movs	r2, r3
 8008024:	f00b f9ba 	bl	801339c <memcpy>
	strcat(DataString,simop);strcat(DataString,",");
 8008028:	4a5d      	ldr	r2, [pc, #372]	; (80081a0 <TestRun+0x740>)
 800802a:	4b5a      	ldr	r3, [pc, #360]	; (8008194 <TestRun+0x734>)
 800802c:	0011      	movs	r1, r2
 800802e:	0018      	movs	r0, r3
 8008030:	f00a fff4 	bl	801301c <strcat>
 8008034:	4b57      	ldr	r3, [pc, #348]	; (8008194 <TestRun+0x734>)
 8008036:	0018      	movs	r0, r3
 8008038:	f7f8 f866 	bl	8000108 <strlen>
 800803c:	0003      	movs	r3, r0
 800803e:	001a      	movs	r2, r3
 8008040:	4b54      	ldr	r3, [pc, #336]	; (8008194 <TestRun+0x734>)
 8008042:	18d2      	adds	r2, r2, r3
 8008044:	4b51      	ldr	r3, [pc, #324]	; (800818c <TestRun+0x72c>)
 8008046:	0010      	movs	r0, r2
 8008048:	0019      	movs	r1, r3
 800804a:	2302      	movs	r3, #2
 800804c:	001a      	movs	r2, r3
 800804e:	f00b f9a5 	bl	801339c <memcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8008052:	4a54      	ldr	r2, [pc, #336]	; (80081a4 <TestRun+0x744>)
 8008054:	4b4f      	ldr	r3, [pc, #316]	; (8008194 <TestRun+0x734>)
 8008056:	0011      	movs	r1, r2
 8008058:	0018      	movs	r0, r3
 800805a:	f00a ffdf 	bl	801301c <strcat>
 800805e:	4b4d      	ldr	r3, [pc, #308]	; (8008194 <TestRun+0x734>)
 8008060:	0018      	movs	r0, r3
 8008062:	f7f8 f851 	bl	8000108 <strlen>
 8008066:	0003      	movs	r3, r0
 8008068:	001a      	movs	r2, r3
 800806a:	4b4a      	ldr	r3, [pc, #296]	; (8008194 <TestRun+0x734>)
 800806c:	18d2      	adds	r2, r2, r3
 800806e:	4b47      	ldr	r3, [pc, #284]	; (800818c <TestRun+0x72c>)
 8008070:	0010      	movs	r0, r2
 8008072:	0019      	movs	r1, r3
 8008074:	2302      	movs	r3, #2
 8008076:	001a      	movs	r2, r3
 8008078:	f00b f990 	bl	801339c <memcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 800807c:	4a4a      	ldr	r2, [pc, #296]	; (80081a8 <TestRun+0x748>)
 800807e:	4b45      	ldr	r3, [pc, #276]	; (8008194 <TestRun+0x734>)
 8008080:	0011      	movs	r1, r2
 8008082:	0018      	movs	r0, r3
 8008084:	f00a ffca 	bl	801301c <strcat>
 8008088:	4b42      	ldr	r3, [pc, #264]	; (8008194 <TestRun+0x734>)
 800808a:	0018      	movs	r0, r3
 800808c:	f7f8 f83c 	bl	8000108 <strlen>
 8008090:	0003      	movs	r3, r0
 8008092:	001a      	movs	r2, r3
 8008094:	4b3f      	ldr	r3, [pc, #252]	; (8008194 <TestRun+0x734>)
 8008096:	18d2      	adds	r2, r2, r3
 8008098:	4b3c      	ldr	r3, [pc, #240]	; (800818c <TestRun+0x72c>)
 800809a:	0010      	movs	r0, r2
 800809c:	0019      	movs	r1, r3
 800809e:	2302      	movs	r3, #2
 80080a0:	001a      	movs	r2, r3
 80080a2:	f00b f97b 	bl	801339c <memcpy>
 	strcat(DataString,Dig_io);strcat(DataString,"\0");
 80080a6:	4a41      	ldr	r2, [pc, #260]	; (80081ac <TestRun+0x74c>)
 80080a8:	4b3a      	ldr	r3, [pc, #232]	; (8008194 <TestRun+0x734>)
 80080aa:	0011      	movs	r1, r2
 80080ac:	0018      	movs	r0, r3
 80080ae:	f00a ffb5 	bl	801301c <strcat>
 	// %%%%%%%%%%%%%%%%%%%%%%%%%Add Checksum %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 80080b2:	4b38      	ldr	r3, [pc, #224]	; (8008194 <TestRun+0x734>)
 80080b4:	0018      	movs	r0, r3
 80080b6:	f7fe f86b 	bl	8006190 <nmea0183_checksum>
 80080ba:	0002      	movs	r2, r0
 80080bc:	493c      	ldr	r1, [pc, #240]	; (80081b0 <TestRun+0x750>)
 80080be:	4b3d      	ldr	r3, [pc, #244]	; (80081b4 <TestRun+0x754>)
 80080c0:	0018      	movs	r0, r3
 80080c2:	f00a ff37 	bl	8012f34 <siprintf>
    strcat(DataString,"*\0");
 80080c6:	4b33      	ldr	r3, [pc, #204]	; (8008194 <TestRun+0x734>)
 80080c8:	0018      	movs	r0, r3
 80080ca:	f7f8 f81d 	bl	8000108 <strlen>
 80080ce:	0003      	movs	r3, r0
 80080d0:	001a      	movs	r2, r3
 80080d2:	4b30      	ldr	r3, [pc, #192]	; (8008194 <TestRun+0x734>)
 80080d4:	18d2      	adds	r2, r2, r3
 80080d6:	4b38      	ldr	r3, [pc, #224]	; (80081b8 <TestRun+0x758>)
 80080d8:	0010      	movs	r0, r2
 80080da:	0019      	movs	r1, r3
 80080dc:	2302      	movs	r3, #2
 80080de:	001a      	movs	r2, r3
 80080e0:	f00b f95c 	bl	801339c <memcpy>
    strcat(DataString,checksum);
 80080e4:	4a33      	ldr	r2, [pc, #204]	; (80081b4 <TestRun+0x754>)
 80080e6:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <TestRun+0x734>)
 80080e8:	0011      	movs	r1, r2
 80080ea:	0018      	movs	r0, r3
 80080ec:	f00a ff96 	bl	801301c <strcat>



    if (debug==1){
    }
    if(ServerConnected==1){
 80080f0:	4b32      	ldr	r3, [pc, #200]	; (80081bc <TestRun+0x75c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d11a      	bne.n	800812e <TestRun+0x6ce>
    	while(ReadQdata()>0){
 80080f8:	e003      	b.n	8008102 <TestRun+0x6a2>
			//
    		ProcessTCPAll( ReadMDataS);
 80080fa:	4b31      	ldr	r3, [pc, #196]	; (80081c0 <TestRun+0x760>)
 80080fc:	0018      	movs	r0, r3
 80080fe:	f7fc fa9b 	bl	8004638 <ProcessTCPAll>
    	while(ReadQdata()>0){
 8008102:	f7fd f8f1 	bl	80052e8 <ReadQdata>
 8008106:	1e03      	subs	r3, r0, #0
 8008108:	dcf7      	bgt.n	80080fa <TestRun+0x69a>
    	}
    	// %%%%%%%%%%%%%%%%%%%%%%%%Send Protocall %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    	int tcpsendT=tic();
 800810a:	f7fe fa91 	bl	8006630 <tic>
 800810e:	0003      	movs	r3, r0
 8008110:	603b      	str	r3, [r7, #0]

     	ProcessTCPAll(DataString);
 8008112:	4b20      	ldr	r3, [pc, #128]	; (8008194 <TestRun+0x734>)
 8008114:	0018      	movs	r0, r3
 8008116:	f7fc fa8f 	bl	8004638 <ProcessTCPAll>
     	toc( tcpsendT,"_________________________While loop tcp send data");
 800811a:	4a2a      	ldr	r2, [pc, #168]	; (80081c4 <TestRun+0x764>)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	0011      	movs	r1, r2
 8008120:	0018      	movs	r0, r3
 8008122:	f7fe fa8d 	bl	8006640 <toc>
     	RunCnt=0;
 8008126:	4b28      	ldr	r3, [pc, #160]	; (80081c8 <TestRun+0x768>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	e020      	b.n	8008170 <TestRun+0x710>
    }
    else{
    	if (debug==1){
 800812e:	4b27      	ldr	r3, [pc, #156]	; (80081cc <TestRun+0x76c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d103      	bne.n	800813e <TestRun+0x6de>
    		Debug_Tx("No GSM Signal Saving Data to Memory----");
 8008136:	4b26      	ldr	r3, [pc, #152]	; (80081d0 <TestRun+0x770>)
 8008138:	0018      	movs	r0, r3
 800813a:	f000 f84f 	bl	80081dc <Debug_Tx>
    	}
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 800813e:	4b15      	ldr	r3, [pc, #84]	; (8008194 <TestRun+0x734>)
 8008140:	0018      	movs	r0, r3
 8008142:	f7f7 ffe1 	bl	8000108 <strlen>
 8008146:	0003      	movs	r3, r0
 8008148:	b29b      	uxth	r3, r3
 800814a:	3301      	adds	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <TestRun+0x734>)
 8008150:	0011      	movs	r1, r2
 8008152:	0018      	movs	r0, r3
 8008154:	f7fd f890 	bl	8005278 <WriteQdata>
    	RunCnt++;
 8008158:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <TestRun+0x768>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <TestRun+0x768>)
 8008160:	601a      	str	r2, [r3, #0]
    	if(RunCnt>10){
 8008162:	4b19      	ldr	r3, [pc, #100]	; (80081c8 <TestRun+0x768>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b0a      	cmp	r3, #10
 8008168:	dd02      	ble.n	8008170 <TestRun+0x710>
    		//InitGSM();
    		RunCnt=0;
 800816a:	4b17      	ldr	r3, [pc, #92]	; (80081c8 <TestRun+0x768>)
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
		timedWork();

	}
	*/
	TimeCount=tic();
 8008170:	f7fe fa5e 	bl	8006630 <tic>
 8008174:	0002      	movs	r2, r0
 8008176:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <TestRun+0x774>)
 8008178:	601a      	str	r2, [r3, #0]

 	//ProcessTCPAll(TracIP,"6055", DataString);
 	//ProcessTCPAll("34.74.249.18","300", DataString);
 	//ProcessTCPAll("34.74.249.18","300", DataString, "taisysnet");

 	seqNo=seqNo+1;
 800817a:	4b17      	ldr	r3, [pc, #92]	; (80081d8 <TestRun+0x778>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <TestRun+0x778>)
 8008182:	601a      	str	r2, [r3, #0]


}
 8008184:	46c0      	nop			; (mov r8, r8)
 8008186:	46bd      	mov	sp, r7
 8008188:	b002      	add	sp, #8
 800818a:	bd80      	pop	{r7, pc}
 800818c:	08016c30 	.word	0x08016c30
 8008190:	20000428 	.word	0x20000428
 8008194:	200002e4 	.word	0x200002e4
 8008198:	20000414 	.word	0x20000414
 800819c:	20003d88 	.word	0x20003d88
 80081a0:	20000524 	.word	0x20000524
 80081a4:	20003ec4 	.word	0x20003ec4
 80081a8:	200016dc 	.word	0x200016dc
 80081ac:	20003e1c 	.word	0x20003e1c
 80081b0:	08018284 	.word	0x08018284
 80081b4:	20003f04 	.word	0x20003f04
 80081b8:	08018290 	.word	0x08018290
 80081bc:	20001814 	.word	0x20001814
 80081c0:	20002918 	.word	0x20002918
 80081c4:	08018294 	.word	0x08018294
 80081c8:	20000544 	.word	0x20000544
 80081cc:	2000000c 	.word	0x2000000c
 80081d0:	080182c8 	.word	0x080182c8
 80081d4:	20000540 	.word	0x20000540
 80081d8:	20000410 	.word	0x20000410

080081dc <Debug_Tx>:




static void Debug_Tx(char _out[]){
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80081e4:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <Debug_Tx+0x44>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	220c      	movs	r2, #12
 80081ea:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7f7 ff8a 	bl	8000108 <strlen>
 80081f4:	0003      	movs	r3, r0
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <Debug_Tx+0x48>)
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4808      	ldr	r0, [pc, #32]	; (8008220 <Debug_Tx+0x44>)
 80081fe:	f004 ffad 	bl	800d15c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8008202:	210c      	movs	r1, #12
 8008204:	187b      	adds	r3, r7, r1
 8008206:	4a08      	ldr	r2, [pc, #32]	; (8008228 <Debug_Tx+0x4c>)
 8008208:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800820a:	1879      	adds	r1, r7, r1
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <Debug_Tx+0x44>)
 800820e:	230a      	movs	r3, #10
 8008210:	2202      	movs	r2, #2
 8008212:	f004 ffa3 	bl	800d15c <HAL_UART_Transmit>


}
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	46bd      	mov	sp, r7
 800821a:	b004      	add	sp, #16
 800821c:	bd80      	pop	{r7, pc}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	20000834 	.word	0x20000834
 8008224:	00001388 	.word	0x00001388
 8008228:	00000a0d 	.word	0x00000a0d

0800822c <Debug_Rx>:


static char* Debug_Rx(){
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <Debug_Rx+0x24>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	220c      	movs	r2, #12
 8008236:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8008238:	2396      	movs	r3, #150	; 0x96
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	22fa      	movs	r2, #250	; 0xfa
 800823e:	0092      	lsls	r2, r2, #2
 8008240:	4904      	ldr	r1, [pc, #16]	; (8008254 <Debug_Rx+0x28>)
 8008242:	4803      	ldr	r0, [pc, #12]	; (8008250 <Debug_Rx+0x24>)
 8008244:	f005 f826 	bl	800d294 <HAL_UART_Receive>
	return(inn);
 8008248:	4b02      	ldr	r3, [pc, #8]	; (8008254 <Debug_Rx+0x28>)

}
 800824a:	0018      	movs	r0, r3
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20000834 	.word	0x20000834
 8008254:	2000043c 	.word	0x2000043c

08008258 <GSM_Tx>:




static void GSM_Tx(const char _out[]){
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8008260:	4b09      	ldr	r3, [pc, #36]	; (8008288 <GSM_Tx+0x30>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	220c      	movs	r2, #12
 8008266:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	0018      	movs	r0, r3
 800826c:	f7f7 ff4c 	bl	8000108 <strlen>
 8008270:	0003      	movs	r3, r0
 8008272:	b29a      	uxth	r2, r3
 8008274:	2396      	movs	r3, #150	; 0x96
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	4803      	ldr	r0, [pc, #12]	; (8008288 <GSM_Tx+0x30>)
 800827c:	f004 ff6e 	bl	800d15c <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 8008280:	46c0      	nop			; (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b002      	add	sp, #8
 8008286:	bd80      	pop	{r7, pc}
 8008288:	2000070c 	.word	0x2000070c

0800828c <GSM_TxL>:

static void GSM_TxL(const char _out[]){
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8008294:	4b09      	ldr	r3, [pc, #36]	; (80082bc <GSM_TxL+0x30>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	220c      	movs	r2, #12
 800829a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	0018      	movs	r0, r3
 80082a0:	f7f7 ff32 	bl	8000108 <strlen>
 80082a4:	0003      	movs	r3, r0
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <GSM_TxL+0x34>)
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	4803      	ldr	r0, [pc, #12]	; (80082bc <GSM_TxL+0x30>)
 80082ae:	f004 ff55 	bl	800d15c <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	46bd      	mov	sp, r7
 80082b6:	b002      	add	sp, #8
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	2000070c 	.word	0x2000070c
 80082c0:	00001388 	.word	0x00001388

080082c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80082c8:	b672      	cpsid	i
}
 80082ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082cc:	e7fe      	b.n	80082cc <Error_Handler+0x8>
	...

080082d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082d6:	4b15      	ldr	r3, [pc, #84]	; (800832c <HAL_MspInit+0x5c>)
 80082d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082da:	4b14      	ldr	r3, [pc, #80]	; (800832c <HAL_MspInit+0x5c>)
 80082dc:	2101      	movs	r1, #1
 80082de:	430a      	orrs	r2, r1
 80082e0:	641a      	str	r2, [r3, #64]	; 0x40
 80082e2:	4b12      	ldr	r3, [pc, #72]	; (800832c <HAL_MspInit+0x5c>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	2201      	movs	r2, #1
 80082e8:	4013      	ands	r3, r2
 80082ea:	607b      	str	r3, [r7, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082ee:	4b0f      	ldr	r3, [pc, #60]	; (800832c <HAL_MspInit+0x5c>)
 80082f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f2:	4b0e      	ldr	r3, [pc, #56]	; (800832c <HAL_MspInit+0x5c>)
 80082f4:	2180      	movs	r1, #128	; 0x80
 80082f6:	0549      	lsls	r1, r1, #21
 80082f8:	430a      	orrs	r2, r1
 80082fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80082fc:	4b0b      	ldr	r3, [pc, #44]	; (800832c <HAL_MspInit+0x5c>)
 80082fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008300:	2380      	movs	r3, #128	; 0x80
 8008302:	055b      	lsls	r3, r3, #21
 8008304:	4013      	ands	r3, r2
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800830a:	2302      	movs	r3, #2
 800830c:	425b      	negs	r3, r3
 800830e:	2200      	movs	r2, #0
 8008310:	2103      	movs	r1, #3
 8008312:	0018      	movs	r0, r3
 8008314:	f001 fc5a 	bl	8009bcc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8008318:	23c0      	movs	r3, #192	; 0xc0
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	0018      	movs	r0, r3
 800831e:	f000 fd35 	bl	8008d8c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	46bd      	mov	sp, r7
 8008326:	b002      	add	sp, #8
 8008328:	bd80      	pop	{r7, pc}
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	40021000 	.word	0x40021000

08008330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b08b      	sub	sp, #44	; 0x2c
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008338:	2414      	movs	r4, #20
 800833a:	193b      	adds	r3, r7, r4
 800833c:	0018      	movs	r0, r3
 800833e:	2314      	movs	r3, #20
 8008340:	001a      	movs	r2, r3
 8008342:	2100      	movs	r1, #0
 8008344:	f00a fe62 	bl	801300c <memset>
  if(hadc->Instance==ADC1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a3b      	ldr	r2, [pc, #236]	; (800843c <HAL_ADC_MspInit+0x10c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d16f      	bne.n	8008432 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008352:	4b3b      	ldr	r3, [pc, #236]	; (8008440 <HAL_ADC_MspInit+0x110>)
 8008354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008356:	4b3a      	ldr	r3, [pc, #232]	; (8008440 <HAL_ADC_MspInit+0x110>)
 8008358:	2180      	movs	r1, #128	; 0x80
 800835a:	0349      	lsls	r1, r1, #13
 800835c:	430a      	orrs	r2, r1
 800835e:	641a      	str	r2, [r3, #64]	; 0x40
 8008360:	4b37      	ldr	r3, [pc, #220]	; (8008440 <HAL_ADC_MspInit+0x110>)
 8008362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	035b      	lsls	r3, r3, #13
 8008368:	4013      	ands	r3, r2
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800836e:	4b34      	ldr	r3, [pc, #208]	; (8008440 <HAL_ADC_MspInit+0x110>)
 8008370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008372:	4b33      	ldr	r3, [pc, #204]	; (8008440 <HAL_ADC_MspInit+0x110>)
 8008374:	2101      	movs	r1, #1
 8008376:	430a      	orrs	r2, r1
 8008378:	635a      	str	r2, [r3, #52]	; 0x34
 800837a:	4b31      	ldr	r3, [pc, #196]	; (8008440 <HAL_ADC_MspInit+0x110>)
 800837c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837e:	2201      	movs	r2, #1
 8008380:	4013      	ands	r3, r2
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008386:	4b2e      	ldr	r3, [pc, #184]	; (8008440 <HAL_ADC_MspInit+0x110>)
 8008388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838a:	4b2d      	ldr	r3, [pc, #180]	; (8008440 <HAL_ADC_MspInit+0x110>)
 800838c:	2102      	movs	r1, #2
 800838e:	430a      	orrs	r2, r1
 8008390:	635a      	str	r2, [r3, #52]	; 0x34
 8008392:	4b2b      	ldr	r3, [pc, #172]	; (8008440 <HAL_ADC_MspInit+0x110>)
 8008394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008396:	2202      	movs	r2, #2
 8008398:	4013      	ands	r3, r2
 800839a:	60bb      	str	r3, [r7, #8]
 800839c:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    PB10     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 800839e:	193b      	adds	r3, r7, r4
 80083a0:	2203      	movs	r2, #3
 80083a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083a4:	193b      	adds	r3, r7, r4
 80083a6:	2203      	movs	r2, #3
 80083a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083aa:	193b      	adds	r3, r7, r4
 80083ac:	2200      	movs	r2, #0
 80083ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b0:	193a      	adds	r2, r7, r4
 80083b2:	23a0      	movs	r3, #160	; 0xa0
 80083b4:	05db      	lsls	r3, r3, #23
 80083b6:	0011      	movs	r1, r2
 80083b8:	0018      	movs	r0, r3
 80083ba:	f001 ffa1 	bl	800a300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 80083be:	193b      	adds	r3, r7, r4
 80083c0:	4a20      	ldr	r2, [pc, #128]	; (8008444 <HAL_ADC_MspInit+0x114>)
 80083c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083c4:	193b      	adds	r3, r7, r4
 80083c6:	2203      	movs	r2, #3
 80083c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ca:	193b      	adds	r3, r7, r4
 80083cc:	2200      	movs	r2, #0
 80083ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083d0:	193b      	adds	r3, r7, r4
 80083d2:	4a1d      	ldr	r2, [pc, #116]	; (8008448 <HAL_ADC_MspInit+0x118>)
 80083d4:	0019      	movs	r1, r3
 80083d6:	0010      	movs	r0, r2
 80083d8:	f001 ff92 	bl	800a300 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80083dc:	4b1b      	ldr	r3, [pc, #108]	; (800844c <HAL_ADC_MspInit+0x11c>)
 80083de:	4a1c      	ldr	r2, [pc, #112]	; (8008450 <HAL_ADC_MspInit+0x120>)
 80083e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80083e2:	4b1a      	ldr	r3, [pc, #104]	; (800844c <HAL_ADC_MspInit+0x11c>)
 80083e4:	2205      	movs	r2, #5
 80083e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083e8:	4b18      	ldr	r3, [pc, #96]	; (800844c <HAL_ADC_MspInit+0x11c>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80083ee:	4b17      	ldr	r3, [pc, #92]	; (800844c <HAL_ADC_MspInit+0x11c>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80083f4:	4b15      	ldr	r3, [pc, #84]	; (800844c <HAL_ADC_MspInit+0x11c>)
 80083f6:	2280      	movs	r2, #128	; 0x80
 80083f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80083fa:	4b14      	ldr	r3, [pc, #80]	; (800844c <HAL_ADC_MspInit+0x11c>)
 80083fc:	2280      	movs	r2, #128	; 0x80
 80083fe:	0092      	lsls	r2, r2, #2
 8008400:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008402:	4b12      	ldr	r3, [pc, #72]	; (800844c <HAL_ADC_MspInit+0x11c>)
 8008404:	2280      	movs	r2, #128	; 0x80
 8008406:	0112      	lsls	r2, r2, #4
 8008408:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800840a:	4b10      	ldr	r3, [pc, #64]	; (800844c <HAL_ADC_MspInit+0x11c>)
 800840c:	2220      	movs	r2, #32
 800840e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008410:	4b0e      	ldr	r3, [pc, #56]	; (800844c <HAL_ADC_MspInit+0x11c>)
 8008412:	2200      	movs	r2, #0
 8008414:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008416:	4b0d      	ldr	r3, [pc, #52]	; (800844c <HAL_ADC_MspInit+0x11c>)
 8008418:	0018      	movs	r0, r3
 800841a:	f001 fbfd 	bl	8009c18 <HAL_DMA_Init>
 800841e:	1e03      	subs	r3, r0, #0
 8008420:	d001      	beq.n	8008426 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8008422:	f7ff ff4f 	bl	80082c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a08      	ldr	r2, [pc, #32]	; (800844c <HAL_ADC_MspInit+0x11c>)
 800842a:	651a      	str	r2, [r3, #80]	; 0x50
 800842c:	4b07      	ldr	r3, [pc, #28]	; (800844c <HAL_ADC_MspInit+0x11c>)
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	46bd      	mov	sp, r7
 8008436:	b00b      	add	sp, #44	; 0x2c
 8008438:	bd90      	pop	{r4, r7, pc}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	40012400 	.word	0x40012400
 8008440:	40021000 	.word	0x40021000
 8008444:	00000402 	.word	0x00000402
 8008448:	50000400 	.word	0x50000400
 800844c:	200005ac 	.word	0x200005ac
 8008450:	40020008 	.word	0x40020008

08008454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008454:	b590      	push	{r4, r7, lr}
 8008456:	b091      	sub	sp, #68	; 0x44
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800845c:	232c      	movs	r3, #44	; 0x2c
 800845e:	18fb      	adds	r3, r7, r3
 8008460:	0018      	movs	r0, r3
 8008462:	2314      	movs	r3, #20
 8008464:	001a      	movs	r2, r3
 8008466:	2100      	movs	r1, #0
 8008468:	f00a fdd0 	bl	801300c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800846c:	2410      	movs	r4, #16
 800846e:	193b      	adds	r3, r7, r4
 8008470:	0018      	movs	r0, r3
 8008472:	231c      	movs	r3, #28
 8008474:	001a      	movs	r2, r3
 8008476:	2100      	movs	r1, #0
 8008478:	f00a fdc8 	bl	801300c <memset>
  if(hi2c->Instance==I2C1)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a22      	ldr	r2, [pc, #136]	; (800850c <HAL_I2C_MspInit+0xb8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d13d      	bne.n	8008502 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008486:	193b      	adds	r3, r7, r4
 8008488:	2220      	movs	r2, #32
 800848a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800848c:	193b      	adds	r3, r7, r4
 800848e:	2200      	movs	r2, #0
 8008490:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008492:	193b      	adds	r3, r7, r4
 8008494:	0018      	movs	r0, r3
 8008496:	f003 fc89 	bl	800bdac <HAL_RCCEx_PeriphCLKConfig>
 800849a:	1e03      	subs	r3, r0, #0
 800849c:	d001      	beq.n	80084a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800849e:	f7ff ff11 	bl	80082c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084a2:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <HAL_I2C_MspInit+0xbc>)
 80084a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <HAL_I2C_MspInit+0xbc>)
 80084a8:	2102      	movs	r1, #2
 80084aa:	430a      	orrs	r2, r1
 80084ac:	635a      	str	r2, [r3, #52]	; 0x34
 80084ae:	4b18      	ldr	r3, [pc, #96]	; (8008510 <HAL_I2C_MspInit+0xbc>)
 80084b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b2:	2202      	movs	r2, #2
 80084b4:	4013      	ands	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80084ba:	212c      	movs	r1, #44	; 0x2c
 80084bc:	187b      	adds	r3, r7, r1
 80084be:	22c0      	movs	r2, #192	; 0xc0
 80084c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084c2:	187b      	adds	r3, r7, r1
 80084c4:	2212      	movs	r2, #18
 80084c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084c8:	187b      	adds	r3, r7, r1
 80084ca:	2201      	movs	r2, #1
 80084cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ce:	187b      	adds	r3, r7, r1
 80084d0:	2200      	movs	r2, #0
 80084d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80084d4:	187b      	adds	r3, r7, r1
 80084d6:	2206      	movs	r2, #6
 80084d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084da:	187b      	adds	r3, r7, r1
 80084dc:	4a0d      	ldr	r2, [pc, #52]	; (8008514 <HAL_I2C_MspInit+0xc0>)
 80084de:	0019      	movs	r1, r3
 80084e0:	0010      	movs	r0, r2
 80084e2:	f001 ff0d 	bl	800a300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084e6:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <HAL_I2C_MspInit+0xbc>)
 80084e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <HAL_I2C_MspInit+0xbc>)
 80084ec:	2180      	movs	r1, #128	; 0x80
 80084ee:	0389      	lsls	r1, r1, #14
 80084f0:	430a      	orrs	r2, r1
 80084f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80084f4:	4b06      	ldr	r3, [pc, #24]	; (8008510 <HAL_I2C_MspInit+0xbc>)
 80084f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084f8:	2380      	movs	r3, #128	; 0x80
 80084fa:	039b      	lsls	r3, r3, #14
 80084fc:	4013      	ands	r3, r2
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	46bd      	mov	sp, r7
 8008506:	b011      	add	sp, #68	; 0x44
 8008508:	bd90      	pop	{r4, r7, pc}
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	40005400 	.word	0x40005400
 8008510:	40021000 	.word	0x40021000
 8008514:	50000400 	.word	0x50000400

08008518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008518:	b590      	push	{r4, r7, lr}
 800851a:	b08b      	sub	sp, #44	; 0x2c
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008520:	2414      	movs	r4, #20
 8008522:	193b      	adds	r3, r7, r4
 8008524:	0018      	movs	r0, r3
 8008526:	2314      	movs	r3, #20
 8008528:	001a      	movs	r2, r3
 800852a:	2100      	movs	r1, #0
 800852c:	f00a fd6e 	bl	801300c <memset>
  if(hspi->Instance==SPI1)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a1b      	ldr	r2, [pc, #108]	; (80085a4 <HAL_SPI_MspInit+0x8c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d130      	bne.n	800859c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800853a:	4b1b      	ldr	r3, [pc, #108]	; (80085a8 <HAL_SPI_MspInit+0x90>)
 800853c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800853e:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <HAL_SPI_MspInit+0x90>)
 8008540:	2180      	movs	r1, #128	; 0x80
 8008542:	0149      	lsls	r1, r1, #5
 8008544:	430a      	orrs	r2, r1
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
 8008548:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <HAL_SPI_MspInit+0x90>)
 800854a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800854c:	2380      	movs	r3, #128	; 0x80
 800854e:	015b      	lsls	r3, r3, #5
 8008550:	4013      	ands	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
 8008554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <HAL_SPI_MspInit+0x90>)
 8008558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800855a:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <HAL_SPI_MspInit+0x90>)
 800855c:	2101      	movs	r1, #1
 800855e:	430a      	orrs	r2, r1
 8008560:	635a      	str	r2, [r3, #52]	; 0x34
 8008562:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <HAL_SPI_MspInit+0x90>)
 8008564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008566:	2201      	movs	r2, #1
 8008568:	4013      	ands	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 800856e:	0021      	movs	r1, r4
 8008570:	187b      	adds	r3, r7, r1
 8008572:	22e0      	movs	r2, #224	; 0xe0
 8008574:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008576:	187b      	adds	r3, r7, r1
 8008578:	2202      	movs	r2, #2
 800857a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857c:	187b      	adds	r3, r7, r1
 800857e:	2200      	movs	r2, #0
 8008580:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008582:	187b      	adds	r3, r7, r1
 8008584:	2200      	movs	r2, #0
 8008586:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008588:	187b      	adds	r3, r7, r1
 800858a:	2200      	movs	r2, #0
 800858c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800858e:	187a      	adds	r2, r7, r1
 8008590:	23a0      	movs	r3, #160	; 0xa0
 8008592:	05db      	lsls	r3, r3, #23
 8008594:	0011      	movs	r1, r2
 8008596:	0018      	movs	r0, r3
 8008598:	f001 feb2 	bl	800a300 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800859c:	46c0      	nop			; (mov r8, r8)
 800859e:	46bd      	mov	sp, r7
 80085a0:	b00b      	add	sp, #44	; 0x2c
 80085a2:	bd90      	pop	{r4, r7, pc}
 80085a4:	40013000 	.word	0x40013000
 80085a8:	40021000 	.word	0x40021000

080085ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a0d      	ldr	r2, [pc, #52]	; (80085f0 <HAL_TIM_Base_MspInit+0x44>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d113      	bne.n	80085e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <HAL_TIM_Base_MspInit+0x48>)
 80085c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085c2:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <HAL_TIM_Base_MspInit+0x48>)
 80085c4:	2110      	movs	r1, #16
 80085c6:	430a      	orrs	r2, r1
 80085c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80085ca:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <HAL_TIM_Base_MspInit+0x48>)
 80085cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ce:	2210      	movs	r2, #16
 80085d0:	4013      	ands	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	2103      	movs	r1, #3
 80085da:	2011      	movs	r0, #17
 80085dc:	f001 faf6 	bl	8009bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80085e0:	2011      	movs	r0, #17
 80085e2:	f001 fb08 	bl	8009bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b004      	add	sp, #16
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	40001000 	.word	0x40001000
 80085f4:	40021000 	.word	0x40021000

080085f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b095      	sub	sp, #84	; 0x54
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008600:	233c      	movs	r3, #60	; 0x3c
 8008602:	18fb      	adds	r3, r7, r3
 8008604:	0018      	movs	r0, r3
 8008606:	2314      	movs	r3, #20
 8008608:	001a      	movs	r2, r3
 800860a:	2100      	movs	r1, #0
 800860c:	f00a fcfe 	bl	801300c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008610:	2420      	movs	r4, #32
 8008612:	193b      	adds	r3, r7, r4
 8008614:	0018      	movs	r0, r3
 8008616:	231c      	movs	r3, #28
 8008618:	001a      	movs	r2, r3
 800861a:	2100      	movs	r1, #0
 800861c:	f00a fcf6 	bl	801300c <memset>
  if(huart->Instance==USART1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4aab      	ldr	r2, [pc, #684]	; (80088d4 <HAL_UART_MspInit+0x2dc>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d172      	bne.n	8008710 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800862a:	193b      	adds	r3, r7, r4
 800862c:	2201      	movs	r2, #1
 800862e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8008630:	193b      	adds	r3, r7, r4
 8008632:	2200      	movs	r2, #0
 8008634:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008636:	193b      	adds	r3, r7, r4
 8008638:	0018      	movs	r0, r3
 800863a:	f003 fbb7 	bl	800bdac <HAL_RCCEx_PeriphCLKConfig>
 800863e:	1e03      	subs	r3, r0, #0
 8008640:	d001      	beq.n	8008646 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008642:	f7ff fe3f 	bl	80082c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008646:	4ba4      	ldr	r3, [pc, #656]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800864a:	4ba3      	ldr	r3, [pc, #652]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 800864c:	2180      	movs	r1, #128	; 0x80
 800864e:	01c9      	lsls	r1, r1, #7
 8008650:	430a      	orrs	r2, r1
 8008652:	641a      	str	r2, [r3, #64]	; 0x40
 8008654:	4ba0      	ldr	r3, [pc, #640]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	01db      	lsls	r3, r3, #7
 800865c:	4013      	ands	r3, r2
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008662:	4b9d      	ldr	r3, [pc, #628]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008666:	4b9c      	ldr	r3, [pc, #624]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008668:	2101      	movs	r1, #1
 800866a:	430a      	orrs	r2, r1
 800866c:	635a      	str	r2, [r3, #52]	; 0x34
 800866e:	4b9a      	ldr	r3, [pc, #616]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008672:	2201      	movs	r2, #1
 8008674:	4013      	ands	r3, r2
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 800867a:	213c      	movs	r1, #60	; 0x3c
 800867c:	187b      	adds	r3, r7, r1
 800867e:	22c0      	movs	r2, #192	; 0xc0
 8008680:	00d2      	lsls	r2, r2, #3
 8008682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008684:	187b      	adds	r3, r7, r1
 8008686:	2202      	movs	r2, #2
 8008688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868a:	187b      	adds	r3, r7, r1
 800868c:	2200      	movs	r2, #0
 800868e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008690:	187b      	adds	r3, r7, r1
 8008692:	2200      	movs	r2, #0
 8008694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8008696:	187b      	adds	r3, r7, r1
 8008698:	2201      	movs	r2, #1
 800869a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800869c:	187a      	adds	r2, r7, r1
 800869e:	23a0      	movs	r3, #160	; 0xa0
 80086a0:	05db      	lsls	r3, r3, #23
 80086a2:	0011      	movs	r1, r2
 80086a4:	0018      	movs	r0, r3
 80086a6:	f001 fe2b 	bl	800a300 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80086aa:	4b8c      	ldr	r3, [pc, #560]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086ac:	4a8c      	ldr	r2, [pc, #560]	; (80088e0 <HAL_UART_MspInit+0x2e8>)
 80086ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80086b0:	4b8a      	ldr	r3, [pc, #552]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086b2:	2232      	movs	r2, #50	; 0x32
 80086b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086b6:	4b89      	ldr	r3, [pc, #548]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80086bc:	4b87      	ldr	r3, [pc, #540]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086be:	2200      	movs	r2, #0
 80086c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80086c2:	4b86      	ldr	r3, [pc, #536]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086c4:	2280      	movs	r2, #128	; 0x80
 80086c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80086c8:	4b84      	ldr	r3, [pc, #528]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80086ce:	4b83      	ldr	r3, [pc, #524]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80086d4:	4b81      	ldr	r3, [pc, #516]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80086da:	4b80      	ldr	r3, [pc, #512]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086dc:	2200      	movs	r2, #0
 80086de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80086e0:	4b7e      	ldr	r3, [pc, #504]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086e2:	0018      	movs	r0, r3
 80086e4:	f001 fa98 	bl	8009c18 <HAL_DMA_Init>
 80086e8:	1e03      	subs	r3, r0, #0
 80086ea:	d001      	beq.n	80086f0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80086ec:	f7ff fdea 	bl	80082c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2180      	movs	r1, #128	; 0x80
 80086f4:	4a79      	ldr	r2, [pc, #484]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086f6:	505a      	str	r2, [r3, r1]
 80086f8:	4b78      	ldr	r3, [pc, #480]	; (80088dc <HAL_UART_MspInit+0x2e4>)
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80086fe:	2200      	movs	r2, #0
 8008700:	2103      	movs	r1, #3
 8008702:	201b      	movs	r0, #27
 8008704:	f001 fa62 	bl	8009bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008708:	201b      	movs	r0, #27
 800870a:	f001 fa74 	bl	8009bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800870e:	e0dd      	b.n	80088cc <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART2)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a73      	ldr	r2, [pc, #460]	; (80088e4 <HAL_UART_MspInit+0x2ec>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d172      	bne.n	8008800 <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800871a:	2120      	movs	r1, #32
 800871c:	187b      	adds	r3, r7, r1
 800871e:	2202      	movs	r2, #2
 8008720:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008722:	187b      	adds	r3, r7, r1
 8008724:	2200      	movs	r2, #0
 8008726:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008728:	187b      	adds	r3, r7, r1
 800872a:	0018      	movs	r0, r3
 800872c:	f003 fb3e 	bl	800bdac <HAL_RCCEx_PeriphCLKConfig>
 8008730:	1e03      	subs	r3, r0, #0
 8008732:	d001      	beq.n	8008738 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8008734:	f7ff fdc6 	bl	80082c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008738:	4b67      	ldr	r3, [pc, #412]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 800873a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800873c:	4b66      	ldr	r3, [pc, #408]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 800873e:	2180      	movs	r1, #128	; 0x80
 8008740:	0289      	lsls	r1, r1, #10
 8008742:	430a      	orrs	r2, r1
 8008744:	63da      	str	r2, [r3, #60]	; 0x3c
 8008746:	4b64      	ldr	r3, [pc, #400]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800874a:	2380      	movs	r3, #128	; 0x80
 800874c:	029b      	lsls	r3, r3, #10
 800874e:	4013      	ands	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008754:	4b60      	ldr	r3, [pc, #384]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008758:	4b5f      	ldr	r3, [pc, #380]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 800875a:	2101      	movs	r1, #1
 800875c:	430a      	orrs	r2, r1
 800875e:	635a      	str	r2, [r3, #52]	; 0x34
 8008760:	4b5d      	ldr	r3, [pc, #372]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008764:	2201      	movs	r2, #1
 8008766:	4013      	ands	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 800876c:	213c      	movs	r1, #60	; 0x3c
 800876e:	187b      	adds	r3, r7, r1
 8008770:	220c      	movs	r2, #12
 8008772:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008774:	187b      	adds	r3, r7, r1
 8008776:	2202      	movs	r2, #2
 8008778:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800877a:	187b      	adds	r3, r7, r1
 800877c:	2200      	movs	r2, #0
 800877e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008780:	187b      	adds	r3, r7, r1
 8008782:	2200      	movs	r2, #0
 8008784:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008786:	187b      	adds	r3, r7, r1
 8008788:	2201      	movs	r2, #1
 800878a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800878c:	187a      	adds	r2, r7, r1
 800878e:	23a0      	movs	r3, #160	; 0xa0
 8008790:	05db      	lsls	r3, r3, #23
 8008792:	0011      	movs	r1, r2
 8008794:	0018      	movs	r0, r3
 8008796:	f001 fdb3 	bl	800a300 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800879a:	4b53      	ldr	r3, [pc, #332]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 800879c:	4a53      	ldr	r2, [pc, #332]	; (80088ec <HAL_UART_MspInit+0x2f4>)
 800879e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80087a0:	4b51      	ldr	r3, [pc, #324]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087a2:	2234      	movs	r2, #52	; 0x34
 80087a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087a6:	4b50      	ldr	r3, [pc, #320]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087ac:	4b4e      	ldr	r3, [pc, #312]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80087b2:	4b4d      	ldr	r3, [pc, #308]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087b4:	2280      	movs	r2, #128	; 0x80
 80087b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087b8:	4b4b      	ldr	r3, [pc, #300]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80087be:	4b4a      	ldr	r3, [pc, #296]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80087c4:	4b48      	ldr	r3, [pc, #288]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80087ca:	4b47      	ldr	r3, [pc, #284]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80087d0:	4b45      	ldr	r3, [pc, #276]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087d2:	0018      	movs	r0, r3
 80087d4:	f001 fa20 	bl	8009c18 <HAL_DMA_Init>
 80087d8:	1e03      	subs	r3, r0, #0
 80087da:	d001      	beq.n	80087e0 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 80087dc:	f7ff fd72 	bl	80082c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2180      	movs	r1, #128	; 0x80
 80087e4:	4a40      	ldr	r2, [pc, #256]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087e6:	505a      	str	r2, [r3, r1]
 80087e8:	4b3f      	ldr	r3, [pc, #252]	; (80088e8 <HAL_UART_MspInit+0x2f0>)
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80087ee:	2200      	movs	r2, #0
 80087f0:	2103      	movs	r1, #3
 80087f2:	201c      	movs	r0, #28
 80087f4:	f001 f9ea 	bl	8009bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80087f8:	201c      	movs	r0, #28
 80087fa:	f001 f9fc 	bl	8009bf6 <HAL_NVIC_EnableIRQ>
}
 80087fe:	e065      	b.n	80088cc <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a3a      	ldr	r2, [pc, #232]	; (80088f0 <HAL_UART_MspInit+0x2f8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d160      	bne.n	80088cc <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800880a:	4b33      	ldr	r3, [pc, #204]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 800880c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800880e:	4b32      	ldr	r3, [pc, #200]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008810:	2180      	movs	r1, #128	; 0x80
 8008812:	02c9      	lsls	r1, r1, #11
 8008814:	430a      	orrs	r2, r1
 8008816:	63da      	str	r2, [r3, #60]	; 0x3c
 8008818:	4b2f      	ldr	r3, [pc, #188]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 800881a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800881c:	2380      	movs	r3, #128	; 0x80
 800881e:	02db      	lsls	r3, r3, #11
 8008820:	4013      	ands	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008826:	4b2c      	ldr	r3, [pc, #176]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800882a:	4b2b      	ldr	r3, [pc, #172]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 800882c:	2102      	movs	r1, #2
 800882e:	430a      	orrs	r2, r1
 8008830:	635a      	str	r2, [r3, #52]	; 0x34
 8008832:	4b29      	ldr	r3, [pc, #164]	; (80088d8 <HAL_UART_MspInit+0x2e0>)
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	2202      	movs	r2, #2
 8008838:	4013      	ands	r3, r2
 800883a:	60bb      	str	r3, [r7, #8]
 800883c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 800883e:	213c      	movs	r1, #60	; 0x3c
 8008840:	187b      	adds	r3, r7, r1
 8008842:	2205      	movs	r2, #5
 8008844:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008846:	187b      	adds	r3, r7, r1
 8008848:	2202      	movs	r2, #2
 800884a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800884c:	187b      	adds	r3, r7, r1
 800884e:	2200      	movs	r2, #0
 8008850:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008852:	187b      	adds	r3, r7, r1
 8008854:	2200      	movs	r2, #0
 8008856:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8008858:	187b      	adds	r3, r7, r1
 800885a:	2204      	movs	r2, #4
 800885c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800885e:	187b      	adds	r3, r7, r1
 8008860:	4a24      	ldr	r2, [pc, #144]	; (80088f4 <HAL_UART_MspInit+0x2fc>)
 8008862:	0019      	movs	r1, r3
 8008864:	0010      	movs	r0, r2
 8008866:	f001 fd4b 	bl	800a300 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 800886a:	4b23      	ldr	r3, [pc, #140]	; (80088f8 <HAL_UART_MspInit+0x300>)
 800886c:	4a23      	ldr	r2, [pc, #140]	; (80088fc <HAL_UART_MspInit+0x304>)
 800886e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8008870:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <HAL_UART_MspInit+0x300>)
 8008872:	2237      	movs	r2, #55	; 0x37
 8008874:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008876:	4b20      	ldr	r3, [pc, #128]	; (80088f8 <HAL_UART_MspInit+0x300>)
 8008878:	2210      	movs	r2, #16
 800887a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800887c:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <HAL_UART_MspInit+0x300>)
 800887e:	2200      	movs	r2, #0
 8008880:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008882:	4b1d      	ldr	r3, [pc, #116]	; (80088f8 <HAL_UART_MspInit+0x300>)
 8008884:	2280      	movs	r2, #128	; 0x80
 8008886:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008888:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <HAL_UART_MspInit+0x300>)
 800888a:	2200      	movs	r2, #0
 800888c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800888e:	4b1a      	ldr	r3, [pc, #104]	; (80088f8 <HAL_UART_MspInit+0x300>)
 8008890:	2200      	movs	r2, #0
 8008892:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008894:	4b18      	ldr	r3, [pc, #96]	; (80088f8 <HAL_UART_MspInit+0x300>)
 8008896:	2200      	movs	r2, #0
 8008898:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800889a:	4b17      	ldr	r3, [pc, #92]	; (80088f8 <HAL_UART_MspInit+0x300>)
 800889c:	2200      	movs	r2, #0
 800889e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80088a0:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <HAL_UART_MspInit+0x300>)
 80088a2:	0018      	movs	r0, r3
 80088a4:	f001 f9b8 	bl	8009c18 <HAL_DMA_Init>
 80088a8:	1e03      	subs	r3, r0, #0
 80088aa:	d001      	beq.n	80088b0 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 80088ac:	f7ff fd0a 	bl	80082c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a11      	ldr	r2, [pc, #68]	; (80088f8 <HAL_UART_MspInit+0x300>)
 80088b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80088b6:	4b10      	ldr	r3, [pc, #64]	; (80088f8 <HAL_UART_MspInit+0x300>)
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80088bc:	2200      	movs	r2, #0
 80088be:	2103      	movs	r1, #3
 80088c0:	201d      	movs	r0, #29
 80088c2:	f001 f983 	bl	8009bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80088c6:	201d      	movs	r0, #29
 80088c8:	f001 f995 	bl	8009bf6 <HAL_NVIC_EnableIRQ>
}
 80088cc:	46c0      	nop			; (mov r8, r8)
 80088ce:	46bd      	mov	sp, r7
 80088d0:	b015      	add	sp, #84	; 0x54
 80088d2:	bd90      	pop	{r4, r7, pc}
 80088d4:	40013800 	.word	0x40013800
 80088d8:	40021000 	.word	0x40021000
 80088dc:	200008c8 	.word	0x200008c8
 80088e0:	4002001c 	.word	0x4002001c
 80088e4:	40004400 	.word	0x40004400
 80088e8:	20000924 	.word	0x20000924
 80088ec:	40020030 	.word	0x40020030
 80088f0:	40004800 	.word	0x40004800
 80088f4:	50000400 	.word	0x50000400
 80088f8:	20000980 	.word	0x20000980
 80088fc:	40020044 	.word	0x40020044

08008900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008900:	b5b0      	push	{r4, r5, r7, lr}
 8008902:	b08c      	sub	sp, #48	; 0x30
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8008908:	232b      	movs	r3, #43	; 0x2b
 800890a:	18fb      	adds	r3, r7, r3
 800890c:	2200      	movs	r2, #0
 800890e:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008910:	4b38      	ldr	r3, [pc, #224]	; (80089f4 <HAL_InitTick+0xf4>)
 8008912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008914:	4b37      	ldr	r3, [pc, #220]	; (80089f4 <HAL_InitTick+0xf4>)
 8008916:	2180      	movs	r1, #128	; 0x80
 8008918:	0109      	lsls	r1, r1, #4
 800891a:	430a      	orrs	r2, r1
 800891c:	641a      	str	r2, [r3, #64]	; 0x40
 800891e:	4b35      	ldr	r3, [pc, #212]	; (80089f4 <HAL_InitTick+0xf4>)
 8008920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008922:	2380      	movs	r3, #128	; 0x80
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	4013      	ands	r3, r2
 8008928:	60bb      	str	r3, [r7, #8]
 800892a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800892c:	230c      	movs	r3, #12
 800892e:	18fa      	adds	r2, r7, r3
 8008930:	2410      	movs	r4, #16
 8008932:	193b      	adds	r3, r7, r4
 8008934:	0011      	movs	r1, r2
 8008936:	0018      	movs	r0, r3
 8008938:	f003 fa0e 	bl	800bd58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800893c:	193b      	adds	r3, r7, r4
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	d104      	bne.n	8008952 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008948:	f003 f9f0 	bl	800bd2c <HAL_RCC_GetPCLK1Freq>
 800894c:	0003      	movs	r3, r0
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008950:	e004      	b.n	800895c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008952:	f003 f9eb 	bl	800bd2c <HAL_RCC_GetPCLK1Freq>
 8008956:	0003      	movs	r3, r0
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	4926      	ldr	r1, [pc, #152]	; (80089f8 <HAL_InitTick+0xf8>)
 8008960:	0018      	movs	r0, r3
 8008962:	f7f7 fbed 	bl	8000140 <__udivsi3>
 8008966:	0003      	movs	r3, r0
 8008968:	3b01      	subs	r3, #1
 800896a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800896c:	4b23      	ldr	r3, [pc, #140]	; (80089fc <HAL_InitTick+0xfc>)
 800896e:	4a24      	ldr	r2, [pc, #144]	; (8008a00 <HAL_InitTick+0x100>)
 8008970:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8008972:	4b22      	ldr	r3, [pc, #136]	; (80089fc <HAL_InitTick+0xfc>)
 8008974:	4a23      	ldr	r2, [pc, #140]	; (8008a04 <HAL_InitTick+0x104>)
 8008976:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008978:	4b20      	ldr	r3, [pc, #128]	; (80089fc <HAL_InitTick+0xfc>)
 800897a:	6a3a      	ldr	r2, [r7, #32]
 800897c:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800897e:	4b1f      	ldr	r3, [pc, #124]	; (80089fc <HAL_InitTick+0xfc>)
 8008980:	2200      	movs	r2, #0
 8008982:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008984:	4b1d      	ldr	r3, [pc, #116]	; (80089fc <HAL_InitTick+0xfc>)
 8008986:	2200      	movs	r2, #0
 8008988:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800898a:	4b1c      	ldr	r3, [pc, #112]	; (80089fc <HAL_InitTick+0xfc>)
 800898c:	2200      	movs	r2, #0
 800898e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8008990:	252b      	movs	r5, #43	; 0x2b
 8008992:	197c      	adds	r4, r7, r5
 8008994:	4b19      	ldr	r3, [pc, #100]	; (80089fc <HAL_InitTick+0xfc>)
 8008996:	0018      	movs	r0, r3
 8008998:	f004 f894 	bl	800cac4 <HAL_TIM_Base_Init>
 800899c:	0003      	movs	r3, r0
 800899e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80089a0:	197b      	adds	r3, r7, r5
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d11e      	bne.n	80089e6 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80089a8:	197c      	adds	r4, r7, r5
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <HAL_InitTick+0xfc>)
 80089ac:	0018      	movs	r0, r3
 80089ae:	f004 f8e1 	bl	800cb74 <HAL_TIM_Base_Start_IT>
 80089b2:	0003      	movs	r3, r0
 80089b4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80089b6:	197b      	adds	r3, r7, r5
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d113      	bne.n	80089e6 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80089be:	200d      	movs	r0, #13
 80089c0:	f001 f919 	bl	8009bf6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d809      	bhi.n	80089de <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	0019      	movs	r1, r3
 80089d0:	200d      	movs	r0, #13
 80089d2:	f001 f8fb 	bl	8009bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80089d6:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <HAL_InitTick+0x108>)
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	e003      	b.n	80089e6 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80089de:	232b      	movs	r3, #43	; 0x2b
 80089e0:	18fb      	adds	r3, r7, r3
 80089e2:	2201      	movs	r2, #1
 80089e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80089e6:	232b      	movs	r3, #43	; 0x2b
 80089e8:	18fb      	adds	r3, r7, r3
 80089ea:	781b      	ldrb	r3, [r3, #0]
}
 80089ec:	0018      	movs	r0, r3
 80089ee:	46bd      	mov	sp, r7
 80089f0:	b00c      	add	sp, #48	; 0x30
 80089f2:	bdb0      	pop	{r4, r5, r7, pc}
 80089f4:	40021000 	.word	0x40021000
 80089f8:	000f4240 	.word	0x000f4240
 80089fc:	20003f18 	.word	0x20003f18
 8008a00:	40012c00 	.word	0x40012c00
 8008a04:	000003e7 	.word	0x000003e7
 8008a08:	200000e4 	.word	0x200000e4

08008a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008a10:	e7fe      	b.n	8008a10 <NMI_Handler+0x4>

08008a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a16:	e7fe      	b.n	8008a16 <HardFault_Handler+0x4>

08008a18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008a1c:	4b03      	ldr	r3, [pc, #12]	; (8008a2c <DMA1_Channel1_IRQHandler+0x14>)
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f001 fad6 	bl	8009fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008a24:	46c0      	nop			; (mov r8, r8)
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	200005ac 	.word	0x200005ac

08008a30 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8008a36:	0018      	movs	r0, r3
 8008a38:	f001 faca 	bl	8009fd0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008a3c:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <DMA1_Channel2_3_IRQHandler+0x20>)
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f001 fac6 	bl	8009fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008a44:	46c0      	nop			; (mov r8, r8)
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	200008c8 	.word	0x200008c8
 8008a50:	20000924 	.word	0x20000924

08008a54 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f001 fab8 	bl	8009fd0 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8008a60:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8008a62:	0018      	movs	r0, r3
 8008a64:	f001 fbf6 	bl	800a254 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8008a68:	46c0      	nop			; (mov r8, r8)
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	20000980 	.word	0x20000980
 8008a74:	200005ac 	.word	0x200005ac

08008a78 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008a7c:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f004 f8ce 	bl	800cc20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8008a84:	46c0      	nop			; (mov r8, r8)
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	20003f18 	.word	0x20003f18

08008a90 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <TIM6_IRQHandler+0x14>)
 8008a96:	0018      	movs	r0, r3
 8008a98:	f004 f8c2 	bl	800cc20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8008a9c:	46c0      	nop			; (mov r8, r8)
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	46c0      	nop			; (mov r8, r8)
 8008aa4:	200006c0 	.word	0x200006c0

08008aa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008aac:	4b03      	ldr	r3, [pc, #12]	; (8008abc <USART1_IRQHandler+0x14>)
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f004 fd2a 	bl	800d508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ab4:	46c0      	nop			; (mov r8, r8)
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	2000070c 	.word	0x2000070c

08008ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008ac4:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <USART2_IRQHandler+0x14>)
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f004 fd1e 	bl	800d508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008acc:	46c0      	nop			; (mov r8, r8)
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	46c0      	nop			; (mov r8, r8)
 8008ad4:	200007a0 	.word	0x200007a0

08008ad8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008adc:	4b03      	ldr	r3, [pc, #12]	; (8008aec <USART3_4_IRQHandler+0x14>)
 8008ade:	0018      	movs	r0, r3
 8008ae0:	f004 fd12 	bl	800d508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8008ae4:	46c0      	nop			; (mov r8, r8)
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	20000834 	.word	0x20000834

08008af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  return 1;
 8008af4:	2301      	movs	r3, #1
}
 8008af6:	0018      	movs	r0, r3
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <_kill>:

int _kill(int pid, int sig)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008b06:	f00a fc09 	bl	801331c <__errno>
 8008b0a:	0003      	movs	r3, r0
 8008b0c:	2216      	movs	r2, #22
 8008b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8008b10:	2301      	movs	r3, #1
 8008b12:	425b      	negs	r3, r3
}
 8008b14:	0018      	movs	r0, r3
 8008b16:	46bd      	mov	sp, r7
 8008b18:	b002      	add	sp, #8
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <_exit>:

void _exit (int status)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008b24:	2301      	movs	r3, #1
 8008b26:	425a      	negs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	0011      	movs	r1, r2
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f7ff ffe5 	bl	8008afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8008b32:	e7fe      	b.n	8008b32 <_exit+0x16>

08008b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e00a      	b.n	8008b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008b46:	e000      	b.n	8008b4a <_read+0x16>
 8008b48:	bf00      	nop
 8008b4a:	0001      	movs	r1, r0
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	60ba      	str	r2, [r7, #8]
 8008b52:	b2ca      	uxtb	r2, r1
 8008b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	dbf0      	blt.n	8008b46 <_read+0x12>
  }

  return len;
 8008b64:	687b      	ldr	r3, [r7, #4]
}
 8008b66:	0018      	movs	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b006      	add	sp, #24
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e009      	b.n	8008b94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	60ba      	str	r2, [r7, #8]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	0018      	movs	r0, r3
 8008b8a:	e000      	b.n	8008b8e <_write+0x20>
 8008b8c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	3301      	adds	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	dbf1      	blt.n	8008b80 <_write+0x12>
  }
  return len;
 8008b9c:	687b      	ldr	r3, [r7, #4]
}
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	b006      	add	sp, #24
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <_close>:

int _close(int file)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	425b      	negs	r3, r3
}
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	b002      	add	sp, #8
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2280      	movs	r2, #128	; 0x80
 8008bc8:	0192      	lsls	r2, r2, #6
 8008bca:	605a      	str	r2, [r3, #4]
  return 0;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	0018      	movs	r0, r3
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	b002      	add	sp, #8
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <_isatty>:

int _isatty(int file)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b082      	sub	sp, #8
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008bde:	2301      	movs	r3, #1
}
 8008be0:	0018      	movs	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b002      	add	sp, #8
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	b004      	add	sp, #16
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c08:	4a14      	ldr	r2, [pc, #80]	; (8008c5c <_sbrk+0x5c>)
 8008c0a:	4b15      	ldr	r3, [pc, #84]	; (8008c60 <_sbrk+0x60>)
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c14:	4b13      	ldr	r3, [pc, #76]	; (8008c64 <_sbrk+0x64>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c1c:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <_sbrk+0x64>)
 8008c1e:	4a12      	ldr	r2, [pc, #72]	; (8008c68 <_sbrk+0x68>)
 8008c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <_sbrk+0x64>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	18d3      	adds	r3, r2, r3
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d207      	bcs.n	8008c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c30:	f00a fb74 	bl	801331c <__errno>
 8008c34:	0003      	movs	r3, r0
 8008c36:	220c      	movs	r2, #12
 8008c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	425b      	negs	r3, r3
 8008c3e:	e009      	b.n	8008c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c40:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <_sbrk+0x64>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c46:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <_sbrk+0x64>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	18d2      	adds	r2, r2, r3
 8008c4e:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <_sbrk+0x64>)
 8008c50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008c52:	68fb      	ldr	r3, [r7, #12]
}
 8008c54:	0018      	movs	r0, r3
 8008c56:	46bd      	mov	sp, r7
 8008c58:	b006      	add	sp, #24
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20009000 	.word	0x20009000
 8008c60:	00000400 	.word	0x00000400
 8008c64:	20003f64 	.word	0x20003f64
 8008c68:	20005a98 	.word	0x20005a98

08008c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008c70:	46c0      	nop			; (mov r8, r8)
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008c78:	480d      	ldr	r0, [pc, #52]	; (8008cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008c7c:	f7ff fff6 	bl	8008c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c80:	480c      	ldr	r0, [pc, #48]	; (8008cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8008c82:	490d      	ldr	r1, [pc, #52]	; (8008cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008c84:	4a0d      	ldr	r2, [pc, #52]	; (8008cbc <LoopForever+0xe>)
  movs r3, #0
 8008c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c88:	e002      	b.n	8008c90 <LoopCopyDataInit>

08008c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c8e:	3304      	adds	r3, #4

08008c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c94:	d3f9      	bcc.n	8008c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c96:	4a0a      	ldr	r2, [pc, #40]	; (8008cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008c98:	4c0a      	ldr	r4, [pc, #40]	; (8008cc4 <LoopForever+0x16>)
  movs r3, #0
 8008c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c9c:	e001      	b.n	8008ca2 <LoopFillZerobss>

08008c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ca0:	3204      	adds	r2, #4

08008ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ca4:	d3fb      	bcc.n	8008c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008ca6:	f00a fb3f 	bl	8013328 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008caa:	f7fd fd17 	bl	80066dc <main>

08008cae <LoopForever>:

LoopForever:
  b LoopForever
 8008cae:	e7fe      	b.n	8008cae <LoopForever>
  ldr   r0, =_estack
 8008cb0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8008cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008cb8:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8008cbc:	08018a10 	.word	0x08018a10
  ldr r2, =_sbss
 8008cc0:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8008cc4:	20005a98 	.word	0x20005a98

08008cc8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008cc8:	e7fe      	b.n	8008cc8 <ADC1_IRQHandler>
	...

08008ccc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008cd2:	1dfb      	adds	r3, r7, #7
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008cd8:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <HAL_Init+0x3c>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <HAL_Init+0x3c>)
 8008cde:	2180      	movs	r1, #128	; 0x80
 8008ce0:	0049      	lsls	r1, r1, #1
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ce6:	2003      	movs	r0, #3
 8008ce8:	f7ff fe0a 	bl	8008900 <HAL_InitTick>
 8008cec:	1e03      	subs	r3, r0, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008cf0:	1dfb      	adds	r3, r7, #7
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	e001      	b.n	8008cfc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008cf8:	f7ff faea 	bl	80082d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008cfc:	1dfb      	adds	r3, r7, #7
 8008cfe:	781b      	ldrb	r3, [r3, #0]
}
 8008d00:	0018      	movs	r0, r3
 8008d02:	46bd      	mov	sp, r7
 8008d04:	b002      	add	sp, #8
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40022000 	.word	0x40022000

08008d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008d10:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <HAL_IncTick+0x1c>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	001a      	movs	r2, r3
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <HAL_IncTick+0x20>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	18d2      	adds	r2, r2, r3
 8008d1c:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <HAL_IncTick+0x20>)
 8008d1e:	601a      	str	r2, [r3, #0]
}
 8008d20:	46c0      	nop			; (mov r8, r8)
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	200000e8 	.word	0x200000e8
 8008d2c:	20003f68 	.word	0x20003f68

08008d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  return uwTick;
 8008d34:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <HAL_GetTick+0x10>)
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	0018      	movs	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	20003f68 	.word	0x20003f68

08008d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d4c:	f7ff fff0 	bl	8008d30 <HAL_GetTick>
 8008d50:	0003      	movs	r3, r0
 8008d52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	d005      	beq.n	8008d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d5e:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <HAL_Delay+0x44>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	001a      	movs	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	f7ff ffe0 	bl	8008d30 <HAL_GetTick>
 8008d70:	0002      	movs	r2, r0
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d8f7      	bhi.n	8008d6c <HAL_Delay+0x28>
  {
  }
}
 8008d7c:	46c0      	nop			; (mov r8, r8)
 8008d7e:	46c0      	nop			; (mov r8, r8)
 8008d80:	46bd      	mov	sp, r7
 8008d82:	b004      	add	sp, #16
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	200000e8 	.word	0x200000e8

08008d8c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008d94:	4b06      	ldr	r3, [pc, #24]	; (8008db0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a06      	ldr	r2, [pc, #24]	; (8008db4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	0019      	movs	r1, r3
 8008d9e:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	601a      	str	r2, [r3, #0]
}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	46bd      	mov	sp, r7
 8008daa:	b002      	add	sp, #8
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	40010000 	.word	0x40010000
 8008db4:	fffff9ff 	.word	0xfffff9ff

08008db8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a05      	ldr	r2, [pc, #20]	; (8008ddc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8008dc8:	401a      	ands	r2, r3
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	601a      	str	r2, [r3, #0]
}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	b002      	add	sp, #8
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	fe3fffff 	.word	0xfe3fffff

08008de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	23e0      	movs	r3, #224	; 0xe0
 8008dee:	045b      	lsls	r3, r3, #17
 8008df0:	4013      	ands	r3, r2
}
 8008df2:	0018      	movs	r0, r3
 8008df4:	46bd      	mov	sp, r7
 8008df6:	b002      	add	sp, #8
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	2104      	movs	r1, #4
 8008e0e:	400a      	ands	r2, r1
 8008e10:	2107      	movs	r1, #7
 8008e12:	4091      	lsls	r1, r2
 8008e14:	000a      	movs	r2, r1
 8008e16:	43d2      	mvns	r2, r2
 8008e18:	401a      	ands	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2104      	movs	r1, #4
 8008e1e:	400b      	ands	r3, r1
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4099      	lsls	r1, r3
 8008e24:	000b      	movs	r3, r1
 8008e26:	431a      	orrs	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8008e2c:	46c0      	nop			; (mov r8, r8)
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	b004      	add	sp, #16
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	2104      	movs	r1, #4
 8008e46:	400a      	ands	r2, r1
 8008e48:	2107      	movs	r1, #7
 8008e4a:	4091      	lsls	r1, r2
 8008e4c:	000a      	movs	r2, r1
 8008e4e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2104      	movs	r1, #4
 8008e54:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008e56:	40da      	lsrs	r2, r3
 8008e58:	0013      	movs	r3, r2
}
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	b002      	add	sp, #8
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	23c0      	movs	r3, #192	; 0xc0
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	4013      	ands	r3, r2
 8008e74:	d101      	bne.n	8008e7a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e000      	b.n	8008e7c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b002      	add	sp, #8
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	211f      	movs	r1, #31
 8008e98:	400a      	ands	r2, r1
 8008e9a:	210f      	movs	r1, #15
 8008e9c:	4091      	lsls	r1, r2
 8008e9e:	000a      	movs	r2, r1
 8008ea0:	43d2      	mvns	r2, r2
 8008ea2:	401a      	ands	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	0e9b      	lsrs	r3, r3, #26
 8008ea8:	210f      	movs	r1, #15
 8008eaa:	4019      	ands	r1, r3
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	201f      	movs	r0, #31
 8008eb0:	4003      	ands	r3, r0
 8008eb2:	4099      	lsls	r1, r3
 8008eb4:	000b      	movs	r3, r1
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008ebc:	46c0      	nop			; (mov r8, r8)
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b004      	add	sp, #16
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	035b      	lsls	r3, r3, #13
 8008ed6:	0b5b      	lsrs	r3, r3, #13
 8008ed8:	431a      	orrs	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	b002      	add	sp, #8
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	0352      	lsls	r2, r2, #13
 8008ef8:	0b52      	lsrs	r2, r2, #13
 8008efa:	43d2      	mvns	r2, r2
 8008efc:	401a      	ands	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	46bd      	mov	sp, r7
 8008f06:	b002      	add	sp, #8
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	0212      	lsls	r2, r2, #8
 8008f20:	43d2      	mvns	r2, r2
 8008f22:	401a      	ands	r2, r3
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	400b      	ands	r3, r1
 8008f2c:	4904      	ldr	r1, [pc, #16]	; (8008f40 <LL_ADC_SetChannelSamplingTime+0x34>)
 8008f2e:	400b      	ands	r3, r1
 8008f30:	431a      	orrs	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	b004      	add	sp, #16
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	07ffff00 	.word	0x07ffff00

08008f44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	4a05      	ldr	r2, [pc, #20]	; (8008f68 <LL_ADC_EnableInternalRegulator+0x24>)
 8008f52:	4013      	ands	r3, r2
 8008f54:	2280      	movs	r2, #128	; 0x80
 8008f56:	0552      	lsls	r2, r2, #21
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	46bd      	mov	sp, r7
 8008f62:	b002      	add	sp, #8
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	46c0      	nop			; (mov r8, r8)
 8008f68:	6fffffe8 	.word	0x6fffffe8

08008f6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	2380      	movs	r3, #128	; 0x80
 8008f7a:	055b      	lsls	r3, r3, #21
 8008f7c:	401a      	ands	r2, r3
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	055b      	lsls	r3, r3, #21
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d101      	bne.n	8008f8a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	b002      	add	sp, #8
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	4a04      	ldr	r2, [pc, #16]	; (8008fb4 <LL_ADC_Enable+0x20>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008fac:	46c0      	nop			; (mov r8, r8)
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	b002      	add	sp, #8
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	7fffffe8 	.word	0x7fffffe8

08008fb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	4a04      	ldr	r2, [pc, #16]	; (8008fd8 <LL_ADC_Disable+0x20>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	2202      	movs	r2, #2
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008fd0:	46c0      	nop			; (mov r8, r8)
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	b002      	add	sp, #8
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	7fffffe8 	.word	0x7fffffe8

08008fdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <LL_ADC_IsEnabled+0x18>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e000      	b.n	8008ff6 <LL_ADC_IsEnabled+0x1a>
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	b002      	add	sp, #8
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	4a04      	ldr	r2, [pc, #16]	; (8009020 <LL_ADC_REG_StartConversion+0x20>)
 800900e:	4013      	ands	r3, r2
 8009010:	2204      	movs	r2, #4
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009018:	46c0      	nop			; (mov r8, r8)
 800901a:	46bd      	mov	sp, r7
 800901c:	b002      	add	sp, #8
 800901e:	bd80      	pop	{r7, pc}
 8009020:	7fffffe8 	.word	0x7fffffe8

08009024 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	2204      	movs	r2, #4
 8009032:	4013      	ands	r3, r2
 8009034:	2b04      	cmp	r3, #4
 8009036:	d101      	bne.n	800903c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800903c:	2300      	movs	r3, #0
}
 800903e:	0018      	movs	r0, r3
 8009040:	46bd      	mov	sp, r7
 8009042:	b002      	add	sp, #8
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009050:	231f      	movs	r3, #31
 8009052:	18fb      	adds	r3, r7, r3
 8009054:	2200      	movs	r2, #0
 8009056:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e17f      	b.n	800936e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10a      	bne.n	800908c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	0018      	movs	r0, r3
 800907a:	f7ff f959 	bl	8008330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2254      	movs	r2, #84	; 0x54
 8009088:	2100      	movs	r1, #0
 800908a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	0018      	movs	r0, r3
 8009092:	f7ff ff6b 	bl	8008f6c <LL_ADC_IsInternalRegulatorEnabled>
 8009096:	1e03      	subs	r3, r0, #0
 8009098:	d115      	bne.n	80090c6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	0018      	movs	r0, r3
 80090a0:	f7ff ff50 	bl	8008f44 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80090a4:	4bb4      	ldr	r3, [pc, #720]	; (8009378 <HAL_ADC_Init+0x330>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	49b4      	ldr	r1, [pc, #720]	; (800937c <HAL_ADC_Init+0x334>)
 80090aa:	0018      	movs	r0, r3
 80090ac:	f7f7 f848 	bl	8000140 <__udivsi3>
 80090b0:	0003      	movs	r3, r0
 80090b2:	3301      	adds	r3, #1
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80090b8:	e002      	b.n	80090c0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3b01      	subs	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1f9      	bne.n	80090ba <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	0018      	movs	r0, r3
 80090cc:	f7ff ff4e 	bl	8008f6c <LL_ADC_IsInternalRegulatorEnabled>
 80090d0:	1e03      	subs	r3, r0, #0
 80090d2:	d10f      	bne.n	80090f4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d8:	2210      	movs	r2, #16
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e4:	2201      	movs	r2, #1
 80090e6:	431a      	orrs	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80090ec:	231f      	movs	r3, #31
 80090ee:	18fb      	adds	r3, r7, r3
 80090f0:	2201      	movs	r2, #1
 80090f2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7ff ff93 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 80090fe:	0003      	movs	r3, r0
 8009100:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009106:	2210      	movs	r2, #16
 8009108:	4013      	ands	r3, r2
 800910a:	d000      	beq.n	800910e <HAL_ADC_Init+0xc6>
 800910c:	e122      	b.n	8009354 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d000      	beq.n	8009116 <HAL_ADC_Init+0xce>
 8009114:	e11e      	b.n	8009354 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911a:	4a99      	ldr	r2, [pc, #612]	; (8009380 <HAL_ADC_Init+0x338>)
 800911c:	4013      	ands	r3, r2
 800911e:	2202      	movs	r2, #2
 8009120:	431a      	orrs	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff ff56 	bl	8008fdc <LL_ADC_IsEnabled>
 8009130:	1e03      	subs	r3, r0, #0
 8009132:	d000      	beq.n	8009136 <HAL_ADC_Init+0xee>
 8009134:	e0ad      	b.n	8009292 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	7e1b      	ldrb	r3, [r3, #24]
 800913e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8009140:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	7e5b      	ldrb	r3, [r3, #25]
 8009146:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009148:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7e9b      	ldrb	r3, [r3, #26]
 800914e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8009150:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <HAL_ADC_Init+0x118>
 800915a:	2380      	movs	r3, #128	; 0x80
 800915c:	015b      	lsls	r3, r3, #5
 800915e:	e000      	b.n	8009162 <HAL_ADC_Init+0x11a>
 8009160:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8009162:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8009168:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	da04      	bge.n	800917c <HAL_ADC_Init+0x134>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	085b      	lsrs	r3, r3, #1
 800917a:	e001      	b.n	8009180 <HAL_ADC_Init+0x138>
 800917c:	2380      	movs	r3, #128	; 0x80
 800917e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8009180:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	212c      	movs	r1, #44	; 0x2c
 8009186:	5c5b      	ldrb	r3, [r3, r1]
 8009188:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800918a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	4313      	orrs	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	5c9b      	ldrb	r3, [r3, r2]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d115      	bne.n	80091c8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7e9b      	ldrb	r3, [r3, #26]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2280      	movs	r2, #128	; 0x80
 80091a8:	0252      	lsls	r2, r2, #9
 80091aa:	4313      	orrs	r3, r2
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	e00b      	b.n	80091c8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b4:	2220      	movs	r2, #32
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091c0:	2201      	movs	r2, #1
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00a      	beq.n	80091e6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091d4:	23e0      	movs	r3, #224	; 0xe0
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80091de:	4313      	orrs	r3, r2
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	4a65      	ldr	r2, [pc, #404]	; (8009384 <HAL_ADC_Init+0x33c>)
 80091ee:	4013      	ands	r3, r2
 80091f0:	0019      	movs	r1, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	0f9b      	lsrs	r3, r3, #30
 8009202:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009208:	4313      	orrs	r3, r2
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	223c      	movs	r2, #60	; 0x3c
 8009214:	5c9b      	ldrb	r3, [r3, r2]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d111      	bne.n	800923e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	0f9b      	lsrs	r3, r3, #30
 8009220:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009226:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800922c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8009232:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	4313      	orrs	r3, r2
 8009238:	2201      	movs	r2, #1
 800923a:	4313      	orrs	r3, r2
 800923c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	4a50      	ldr	r2, [pc, #320]	; (8009388 <HAL_ADC_Init+0x340>)
 8009246:	4013      	ands	r3, r2
 8009248:	0019      	movs	r1, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	430a      	orrs	r2, r1
 8009252:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	23c0      	movs	r3, #192	; 0xc0
 800925a:	061b      	lsls	r3, r3, #24
 800925c:	429a      	cmp	r2, r3
 800925e:	d018      	beq.n	8009292 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009264:	2380      	movs	r3, #128	; 0x80
 8009266:	05db      	lsls	r3, r3, #23
 8009268:	429a      	cmp	r2, r3
 800926a:	d012      	beq.n	8009292 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009270:	2380      	movs	r3, #128	; 0x80
 8009272:	061b      	lsls	r3, r3, #24
 8009274:	429a      	cmp	r2, r3
 8009276:	d00c      	beq.n	8009292 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8009278:	4b44      	ldr	r3, [pc, #272]	; (800938c <HAL_ADC_Init+0x344>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a44      	ldr	r2, [pc, #272]	; (8009390 <HAL_ADC_Init+0x348>)
 800927e:	4013      	ands	r3, r2
 8009280:	0019      	movs	r1, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	23f0      	movs	r3, #240	; 0xf0
 8009288:	039b      	lsls	r3, r3, #14
 800928a:	401a      	ands	r2, r3
 800928c:	4b3f      	ldr	r3, [pc, #252]	; (800938c <HAL_ADC_Init+0x344>)
 800928e:	430a      	orrs	r2, r1
 8009290:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929a:	001a      	movs	r2, r3
 800929c:	2100      	movs	r1, #0
 800929e:	f7ff fdac 	bl	8008dfa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	493a      	ldr	r1, [pc, #232]	; (8009394 <HAL_ADC_Init+0x34c>)
 80092ac:	001a      	movs	r2, r3
 80092ae:	f7ff fda4 	bl	8008dfa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d109      	bne.n	80092ce <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2110      	movs	r1, #16
 80092c6:	4249      	negs	r1, r1
 80092c8:	430a      	orrs	r2, r1
 80092ca:	629a      	str	r2, [r3, #40]	; 0x28
 80092cc:	e018      	b.n	8009300 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	2380      	movs	r3, #128	; 0x80
 80092d4:	039b      	lsls	r3, r3, #14
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d112      	bne.n	8009300 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	221c      	movs	r2, #28
 80092ea:	4013      	ands	r3, r2
 80092ec:	2210      	movs	r2, #16
 80092ee:	4252      	negs	r2, r2
 80092f0:	409a      	lsls	r2, r3
 80092f2:	0011      	movs	r1, r2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2100      	movs	r1, #0
 8009306:	0018      	movs	r0, r3
 8009308:	f7ff fd94 	bl	8008e34 <LL_ADC_GetSamplingTimeCommonChannels>
 800930c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009312:	429a      	cmp	r2, r3
 8009314:	d10b      	bne.n	800932e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009320:	2203      	movs	r2, #3
 8009322:	4393      	bics	r3, r2
 8009324:	2201      	movs	r2, #1
 8009326:	431a      	orrs	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800932c:	e01c      	b.n	8009368 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009332:	2212      	movs	r2, #18
 8009334:	4393      	bics	r3, r2
 8009336:	2210      	movs	r2, #16
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009342:	2201      	movs	r2, #1
 8009344:	431a      	orrs	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800934a:	231f      	movs	r3, #31
 800934c:	18fb      	adds	r3, r7, r3
 800934e:	2201      	movs	r2, #1
 8009350:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009352:	e009      	b.n	8009368 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009358:	2210      	movs	r2, #16
 800935a:	431a      	orrs	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009360:	231f      	movs	r3, #31
 8009362:	18fb      	adds	r3, r7, r3
 8009364:	2201      	movs	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009368:	231f      	movs	r3, #31
 800936a:	18fb      	adds	r3, r7, r3
 800936c:	781b      	ldrb	r3, [r3, #0]
}
 800936e:	0018      	movs	r0, r3
 8009370:	46bd      	mov	sp, r7
 8009372:	b008      	add	sp, #32
 8009374:	bd80      	pop	{r7, pc}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	200000e0 	.word	0x200000e0
 800937c:	00030d40 	.word	0x00030d40
 8009380:	fffffefd 	.word	0xfffffefd
 8009384:	fffe0201 	.word	0xfffe0201
 8009388:	1ffffc02 	.word	0x1ffffc02
 800938c:	40012708 	.word	0x40012708
 8009390:	ffc3ffff 	.word	0xffc3ffff
 8009394:	07ffff04 	.word	0x07ffff04

08009398 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009398:	b5b0      	push	{r4, r5, r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	0018      	movs	r0, r3
 80093aa:	f7ff fe3b 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 80093ae:	1e03      	subs	r3, r0, #0
 80093b0:	d16c      	bne.n	800948c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2254      	movs	r2, #84	; 0x54
 80093b6:	5c9b      	ldrb	r3, [r3, r2]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d101      	bne.n	80093c0 <HAL_ADC_Start_DMA+0x28>
 80093bc:	2302      	movs	r3, #2
 80093be:	e06c      	b.n	800949a <HAL_ADC_Start_DMA+0x102>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2254      	movs	r2, #84	; 0x54
 80093c4:	2101      	movs	r1, #1
 80093c6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2201      	movs	r2, #1
 80093d0:	4013      	ands	r3, r2
 80093d2:	d113      	bne.n	80093fc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	0018      	movs	r0, r3
 80093da:	f7ff fdff 	bl	8008fdc <LL_ADC_IsEnabled>
 80093de:	1e03      	subs	r3, r0, #0
 80093e0:	d004      	beq.n	80093ec <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	0018      	movs	r0, r3
 80093e8:	f7ff fde6 	bl	8008fb8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2101      	movs	r1, #1
 80093f8:	430a      	orrs	r2, r1
 80093fa:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80093fc:	2517      	movs	r5, #23
 80093fe:	197c      	adds	r4, r7, r5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	0018      	movs	r0, r3
 8009404:	f000 fa46 	bl	8009894 <ADC_Enable>
 8009408:	0003      	movs	r3, r0
 800940a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800940c:	002c      	movs	r4, r5
 800940e:	193b      	adds	r3, r7, r4
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d13e      	bne.n	8009494 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941a:	4a22      	ldr	r2, [pc, #136]	; (80094a4 <HAL_ADC_Start_DMA+0x10c>)
 800941c:	4013      	ands	r3, r2
 800941e:	2280      	movs	r2, #128	; 0x80
 8009420:	0052      	lsls	r2, r2, #1
 8009422:	431a      	orrs	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009432:	4a1d      	ldr	r2, [pc, #116]	; (80094a8 <HAL_ADC_Start_DMA+0x110>)
 8009434:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800943a:	4a1c      	ldr	r2, [pc, #112]	; (80094ac <HAL_ADC_Start_DMA+0x114>)
 800943c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009442:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <HAL_ADC_Start_DMA+0x118>)
 8009444:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	221c      	movs	r2, #28
 800944c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2254      	movs	r2, #84	; 0x54
 8009452:	2100      	movs	r1, #0
 8009454:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2110      	movs	r1, #16
 8009462:	430a      	orrs	r2, r1
 8009464:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3340      	adds	r3, #64	; 0x40
 8009470:	0019      	movs	r1, r3
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	193c      	adds	r4, r7, r4
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f000 fc58 	bl	8009d2c <HAL_DMA_Start_IT>
 800947c:	0003      	movs	r3, r0
 800947e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	0018      	movs	r0, r3
 8009486:	f7ff fdbb 	bl	8009000 <LL_ADC_REG_StartConversion>
 800948a:	e003      	b.n	8009494 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800948c:	2317      	movs	r3, #23
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	2202      	movs	r2, #2
 8009492:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009494:	2317      	movs	r3, #23
 8009496:	18fb      	adds	r3, r7, r3
 8009498:	781b      	ldrb	r3, [r3, #0]
}
 800949a:	0018      	movs	r0, r3
 800949c:	46bd      	mov	sp, r7
 800949e:	b006      	add	sp, #24
 80094a0:	bdb0      	pop	{r4, r5, r7, pc}
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	fffff0fe 	.word	0xfffff0fe
 80094a8:	080099a1 	.word	0x080099a1
 80094ac:	08009a69 	.word	0x08009a69
 80094b0:	08009a87 	.word	0x08009a87

080094b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80094bc:	46c0      	nop			; (mov r8, r8)
 80094be:	46bd      	mov	sp, r7
 80094c0:	b002      	add	sp, #8
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80094cc:	46c0      	nop			; (mov r8, r8)
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b002      	add	sp, #8
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80094dc:	46c0      	nop			; (mov r8, r8)
 80094de:	46bd      	mov	sp, r7
 80094e0:	b002      	add	sp, #8
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80094ee:	2317      	movs	r3, #23
 80094f0:	18fb      	adds	r3, r7, r3
 80094f2:	2200      	movs	r2, #0
 80094f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2254      	movs	r2, #84	; 0x54
 80094fe:	5c9b      	ldrb	r3, [r3, r2]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d101      	bne.n	8009508 <HAL_ADC_ConfigChannel+0x24>
 8009504:	2302      	movs	r3, #2
 8009506:	e1c0      	b.n	800988a <HAL_ADC_ConfigChannel+0x3a6>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2254      	movs	r2, #84	; 0x54
 800950c:	2101      	movs	r1, #1
 800950e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	0018      	movs	r0, r3
 8009516:	f7ff fd85 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 800951a:	1e03      	subs	r3, r0, #0
 800951c:	d000      	beq.n	8009520 <HAL_ADC_ConfigChannel+0x3c>
 800951e:	e1a3      	b.n	8009868 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2b02      	cmp	r3, #2
 8009526:	d100      	bne.n	800952a <HAL_ADC_ConfigChannel+0x46>
 8009528:	e143      	b.n	80097b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	2380      	movs	r3, #128	; 0x80
 8009530:	061b      	lsls	r3, r3, #24
 8009532:	429a      	cmp	r2, r3
 8009534:	d004      	beq.n	8009540 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800953a:	4ac1      	ldr	r2, [pc, #772]	; (8009840 <HAL_ADC_ConfigChannel+0x35c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d108      	bne.n	8009552 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	0019      	movs	r1, r3
 800954a:	0010      	movs	r0, r2
 800954c:	f7ff fcba 	bl	8008ec4 <LL_ADC_REG_SetSequencerChAdd>
 8009550:	e0c9      	b.n	80096e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	211f      	movs	r1, #31
 800955c:	400b      	ands	r3, r1
 800955e:	210f      	movs	r1, #15
 8009560:	4099      	lsls	r1, r3
 8009562:	000b      	movs	r3, r1
 8009564:	43db      	mvns	r3, r3
 8009566:	4013      	ands	r3, r2
 8009568:	0019      	movs	r1, r3
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	035b      	lsls	r3, r3, #13
 8009570:	0b5b      	lsrs	r3, r3, #13
 8009572:	d105      	bne.n	8009580 <HAL_ADC_ConfigChannel+0x9c>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	0e9b      	lsrs	r3, r3, #26
 800957a:	221f      	movs	r2, #31
 800957c:	4013      	ands	r3, r2
 800957e:	e098      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2201      	movs	r2, #1
 8009586:	4013      	ands	r3, r2
 8009588:	d000      	beq.n	800958c <HAL_ADC_ConfigChannel+0xa8>
 800958a:	e091      	b.n	80096b0 <HAL_ADC_ConfigChannel+0x1cc>
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2202      	movs	r2, #2
 8009592:	4013      	ands	r3, r2
 8009594:	d000      	beq.n	8009598 <HAL_ADC_ConfigChannel+0xb4>
 8009596:	e089      	b.n	80096ac <HAL_ADC_ConfigChannel+0x1c8>
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2204      	movs	r2, #4
 800959e:	4013      	ands	r3, r2
 80095a0:	d000      	beq.n	80095a4 <HAL_ADC_ConfigChannel+0xc0>
 80095a2:	e081      	b.n	80096a8 <HAL_ADC_ConfigChannel+0x1c4>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2208      	movs	r2, #8
 80095aa:	4013      	ands	r3, r2
 80095ac:	d000      	beq.n	80095b0 <HAL_ADC_ConfigChannel+0xcc>
 80095ae:	e079      	b.n	80096a4 <HAL_ADC_ConfigChannel+0x1c0>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2210      	movs	r2, #16
 80095b6:	4013      	ands	r3, r2
 80095b8:	d000      	beq.n	80095bc <HAL_ADC_ConfigChannel+0xd8>
 80095ba:	e071      	b.n	80096a0 <HAL_ADC_ConfigChannel+0x1bc>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2220      	movs	r2, #32
 80095c2:	4013      	ands	r3, r2
 80095c4:	d000      	beq.n	80095c8 <HAL_ADC_ConfigChannel+0xe4>
 80095c6:	e069      	b.n	800969c <HAL_ADC_ConfigChannel+0x1b8>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2240      	movs	r2, #64	; 0x40
 80095ce:	4013      	ands	r3, r2
 80095d0:	d000      	beq.n	80095d4 <HAL_ADC_ConfigChannel+0xf0>
 80095d2:	e061      	b.n	8009698 <HAL_ADC_ConfigChannel+0x1b4>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2280      	movs	r2, #128	; 0x80
 80095da:	4013      	ands	r3, r2
 80095dc:	d000      	beq.n	80095e0 <HAL_ADC_ConfigChannel+0xfc>
 80095de:	e059      	b.n	8009694 <HAL_ADC_ConfigChannel+0x1b0>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	2380      	movs	r3, #128	; 0x80
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	4013      	ands	r3, r2
 80095ea:	d151      	bne.n	8009690 <HAL_ADC_ConfigChannel+0x1ac>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	2380      	movs	r3, #128	; 0x80
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4013      	ands	r3, r2
 80095f6:	d149      	bne.n	800968c <HAL_ADC_ConfigChannel+0x1a8>
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	2380      	movs	r3, #128	; 0x80
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	4013      	ands	r3, r2
 8009602:	d141      	bne.n	8009688 <HAL_ADC_ConfigChannel+0x1a4>
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	2380      	movs	r3, #128	; 0x80
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	4013      	ands	r3, r2
 800960e:	d139      	bne.n	8009684 <HAL_ADC_ConfigChannel+0x1a0>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	2380      	movs	r3, #128	; 0x80
 8009616:	015b      	lsls	r3, r3, #5
 8009618:	4013      	ands	r3, r2
 800961a:	d131      	bne.n	8009680 <HAL_ADC_ConfigChannel+0x19c>
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	2380      	movs	r3, #128	; 0x80
 8009622:	019b      	lsls	r3, r3, #6
 8009624:	4013      	ands	r3, r2
 8009626:	d129      	bne.n	800967c <HAL_ADC_ConfigChannel+0x198>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	2380      	movs	r3, #128	; 0x80
 800962e:	01db      	lsls	r3, r3, #7
 8009630:	4013      	ands	r3, r2
 8009632:	d121      	bne.n	8009678 <HAL_ADC_ConfigChannel+0x194>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	2380      	movs	r3, #128	; 0x80
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	4013      	ands	r3, r2
 800963e:	d119      	bne.n	8009674 <HAL_ADC_ConfigChannel+0x190>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	2380      	movs	r3, #128	; 0x80
 8009646:	025b      	lsls	r3, r3, #9
 8009648:	4013      	ands	r3, r2
 800964a:	d111      	bne.n	8009670 <HAL_ADC_ConfigChannel+0x18c>
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	2380      	movs	r3, #128	; 0x80
 8009652:	029b      	lsls	r3, r3, #10
 8009654:	4013      	ands	r3, r2
 8009656:	d109      	bne.n	800966c <HAL_ADC_ConfigChannel+0x188>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	2380      	movs	r3, #128	; 0x80
 800965e:	02db      	lsls	r3, r3, #11
 8009660:	4013      	ands	r3, r2
 8009662:	d001      	beq.n	8009668 <HAL_ADC_ConfigChannel+0x184>
 8009664:	2312      	movs	r3, #18
 8009666:	e024      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009668:	2300      	movs	r3, #0
 800966a:	e022      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 800966c:	2311      	movs	r3, #17
 800966e:	e020      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009670:	2310      	movs	r3, #16
 8009672:	e01e      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009674:	230f      	movs	r3, #15
 8009676:	e01c      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009678:	230e      	movs	r3, #14
 800967a:	e01a      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 800967c:	230d      	movs	r3, #13
 800967e:	e018      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009680:	230c      	movs	r3, #12
 8009682:	e016      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009684:	230b      	movs	r3, #11
 8009686:	e014      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009688:	230a      	movs	r3, #10
 800968a:	e012      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 800968c:	2309      	movs	r3, #9
 800968e:	e010      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009690:	2308      	movs	r3, #8
 8009692:	e00e      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009694:	2307      	movs	r3, #7
 8009696:	e00c      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 8009698:	2306      	movs	r3, #6
 800969a:	e00a      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 800969c:	2305      	movs	r3, #5
 800969e:	e008      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 80096a0:	2304      	movs	r3, #4
 80096a2:	e006      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 80096a4:	2303      	movs	r3, #3
 80096a6:	e004      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 80096a8:	2302      	movs	r3, #2
 80096aa:	e002      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 80096ac:	2301      	movs	r3, #1
 80096ae:	e000      	b.n	80096b2 <HAL_ADC_ConfigChannel+0x1ce>
 80096b0:	2300      	movs	r3, #0
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	6852      	ldr	r2, [r2, #4]
 80096b6:	201f      	movs	r0, #31
 80096b8:	4002      	ands	r2, r0
 80096ba:	4093      	lsls	r3, r2
 80096bc:	000a      	movs	r2, r1
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	089b      	lsrs	r3, r3, #2
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d808      	bhi.n	80096e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	6859      	ldr	r1, [r3, #4]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	001a      	movs	r2, r3
 80096e2:	f7ff fbcf 	bl	8008e84 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	6819      	ldr	r1, [r3, #0]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	001a      	movs	r2, r3
 80096f4:	f7ff fc0a 	bl	8008f0c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	db00      	blt.n	8009702 <HAL_ADC_ConfigChannel+0x21e>
 8009700:	e0bc      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009702:	4b50      	ldr	r3, [pc, #320]	; (8009844 <HAL_ADC_ConfigChannel+0x360>)
 8009704:	0018      	movs	r0, r3
 8009706:	f7ff fb6b 	bl	8008de0 <LL_ADC_GetCommonPathInternalCh>
 800970a:	0003      	movs	r3, r0
 800970c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a4d      	ldr	r2, [pc, #308]	; (8009848 <HAL_ADC_ConfigChannel+0x364>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d122      	bne.n	800975e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	2380      	movs	r3, #128	; 0x80
 800971c:	041b      	lsls	r3, r3, #16
 800971e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009720:	d11d      	bne.n	800975e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	2280      	movs	r2, #128	; 0x80
 8009726:	0412      	lsls	r2, r2, #16
 8009728:	4313      	orrs	r3, r2
 800972a:	4a46      	ldr	r2, [pc, #280]	; (8009844 <HAL_ADC_ConfigChannel+0x360>)
 800972c:	0019      	movs	r1, r3
 800972e:	0010      	movs	r0, r2
 8009730:	f7ff fb42 	bl	8008db8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009734:	4b45      	ldr	r3, [pc, #276]	; (800984c <HAL_ADC_ConfigChannel+0x368>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4945      	ldr	r1, [pc, #276]	; (8009850 <HAL_ADC_ConfigChannel+0x36c>)
 800973a:	0018      	movs	r0, r3
 800973c:	f7f6 fd00 	bl	8000140 <__udivsi3>
 8009740:	0003      	movs	r3, r0
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	0013      	movs	r3, r2
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	189b      	adds	r3, r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800974e:	e002      	b.n	8009756 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3b01      	subs	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1f9      	bne.n	8009750 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800975c:	e08e      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a3c      	ldr	r2, [pc, #240]	; (8009854 <HAL_ADC_ConfigChannel+0x370>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d10e      	bne.n	8009786 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	2380      	movs	r3, #128	; 0x80
 800976c:	045b      	lsls	r3, r3, #17
 800976e:	4013      	ands	r3, r2
 8009770:	d109      	bne.n	8009786 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2280      	movs	r2, #128	; 0x80
 8009776:	0452      	lsls	r2, r2, #17
 8009778:	4313      	orrs	r3, r2
 800977a:	4a32      	ldr	r2, [pc, #200]	; (8009844 <HAL_ADC_ConfigChannel+0x360>)
 800977c:	0019      	movs	r1, r3
 800977e:	0010      	movs	r0, r2
 8009780:	f7ff fb1a 	bl	8008db8 <LL_ADC_SetCommonPathInternalCh>
 8009784:	e07a      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a33      	ldr	r2, [pc, #204]	; (8009858 <HAL_ADC_ConfigChannel+0x374>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d000      	beq.n	8009792 <HAL_ADC_ConfigChannel+0x2ae>
 8009790:	e074      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	2380      	movs	r3, #128	; 0x80
 8009796:	03db      	lsls	r3, r3, #15
 8009798:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800979a:	d000      	beq.n	800979e <HAL_ADC_ConfigChannel+0x2ba>
 800979c:	e06e      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2280      	movs	r2, #128	; 0x80
 80097a2:	03d2      	lsls	r2, r2, #15
 80097a4:	4313      	orrs	r3, r2
 80097a6:	4a27      	ldr	r2, [pc, #156]	; (8009844 <HAL_ADC_ConfigChannel+0x360>)
 80097a8:	0019      	movs	r1, r3
 80097aa:	0010      	movs	r0, r2
 80097ac:	f7ff fb04 	bl	8008db8 <LL_ADC_SetCommonPathInternalCh>
 80097b0:	e064      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691a      	ldr	r2, [r3, #16]
 80097b6:	2380      	movs	r3, #128	; 0x80
 80097b8:	061b      	lsls	r3, r3, #24
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d004      	beq.n	80097c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80097c2:	4a1f      	ldr	r2, [pc, #124]	; (8009840 <HAL_ADC_ConfigChannel+0x35c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d107      	bne.n	80097d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	0019      	movs	r1, r3
 80097d2:	0010      	movs	r0, r2
 80097d4:	f7ff fb87 	bl	8008ee6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	da4d      	bge.n	800987c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80097e0:	4b18      	ldr	r3, [pc, #96]	; (8009844 <HAL_ADC_ConfigChannel+0x360>)
 80097e2:	0018      	movs	r0, r3
 80097e4:	f7ff fafc 	bl	8008de0 <LL_ADC_GetCommonPathInternalCh>
 80097e8:	0003      	movs	r3, r0
 80097ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a15      	ldr	r2, [pc, #84]	; (8009848 <HAL_ADC_ConfigChannel+0x364>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d108      	bne.n	8009808 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	4a18      	ldr	r2, [pc, #96]	; (800985c <HAL_ADC_ConfigChannel+0x378>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	4a11      	ldr	r2, [pc, #68]	; (8009844 <HAL_ADC_ConfigChannel+0x360>)
 80097fe:	0019      	movs	r1, r3
 8009800:	0010      	movs	r0, r2
 8009802:	f7ff fad9 	bl	8008db8 <LL_ADC_SetCommonPathInternalCh>
 8009806:	e039      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a11      	ldr	r2, [pc, #68]	; (8009854 <HAL_ADC_ConfigChannel+0x370>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d108      	bne.n	8009824 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	4a12      	ldr	r2, [pc, #72]	; (8009860 <HAL_ADC_ConfigChannel+0x37c>)
 8009816:	4013      	ands	r3, r2
 8009818:	4a0a      	ldr	r2, [pc, #40]	; (8009844 <HAL_ADC_ConfigChannel+0x360>)
 800981a:	0019      	movs	r1, r3
 800981c:	0010      	movs	r0, r2
 800981e:	f7ff facb 	bl	8008db8 <LL_ADC_SetCommonPathInternalCh>
 8009822:	e02b      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a0b      	ldr	r2, [pc, #44]	; (8009858 <HAL_ADC_ConfigChannel+0x374>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d126      	bne.n	800987c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <HAL_ADC_ConfigChannel+0x380>)
 8009832:	4013      	ands	r3, r2
 8009834:	4a03      	ldr	r2, [pc, #12]	; (8009844 <HAL_ADC_ConfigChannel+0x360>)
 8009836:	0019      	movs	r1, r3
 8009838:	0010      	movs	r0, r2
 800983a:	f7ff fabd 	bl	8008db8 <LL_ADC_SetCommonPathInternalCh>
 800983e:	e01d      	b.n	800987c <HAL_ADC_ConfigChannel+0x398>
 8009840:	80000004 	.word	0x80000004
 8009844:	40012708 	.word	0x40012708
 8009848:	b0001000 	.word	0xb0001000
 800984c:	200000e0 	.word	0x200000e0
 8009850:	00030d40 	.word	0x00030d40
 8009854:	b8004000 	.word	0xb8004000
 8009858:	b4002000 	.word	0xb4002000
 800985c:	ff7fffff 	.word	0xff7fffff
 8009860:	feffffff 	.word	0xfeffffff
 8009864:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800986c:	2220      	movs	r2, #32
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009874:	2317      	movs	r3, #23
 8009876:	18fb      	adds	r3, r7, r3
 8009878:	2201      	movs	r2, #1
 800987a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2254      	movs	r2, #84	; 0x54
 8009880:	2100      	movs	r1, #0
 8009882:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8009884:	2317      	movs	r3, #23
 8009886:	18fb      	adds	r3, r7, r3
 8009888:	781b      	ldrb	r3, [r3, #0]
}
 800988a:	0018      	movs	r0, r3
 800988c:	46bd      	mov	sp, r7
 800988e:	b006      	add	sp, #24
 8009890:	bd80      	pop	{r7, pc}
 8009892:	46c0      	nop			; (mov r8, r8)

08009894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800989c:	2300      	movs	r3, #0
 800989e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	0018      	movs	r0, r3
 80098a6:	f7ff fb99 	bl	8008fdc <LL_ADC_IsEnabled>
 80098aa:	1e03      	subs	r3, r0, #0
 80098ac:	d000      	beq.n	80098b0 <ADC_Enable+0x1c>
 80098ae:	e069      	b.n	8009984 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	4a36      	ldr	r2, [pc, #216]	; (8009990 <ADC_Enable+0xfc>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	d00d      	beq.n	80098d8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c0:	2210      	movs	r2, #16
 80098c2:	431a      	orrs	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098cc:	2201      	movs	r2, #1
 80098ce:	431a      	orrs	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e056      	b.n	8009986 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	0018      	movs	r0, r3
 80098de:	f7ff fb59 	bl	8008f94 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80098e2:	4b2c      	ldr	r3, [pc, #176]	; (8009994 <ADC_Enable+0x100>)
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7ff fa7b 	bl	8008de0 <LL_ADC_GetCommonPathInternalCh>
 80098ea:	0002      	movs	r2, r0
 80098ec:	2380      	movs	r3, #128	; 0x80
 80098ee:	041b      	lsls	r3, r3, #16
 80098f0:	4013      	ands	r3, r2
 80098f2:	d00f      	beq.n	8009914 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80098f4:	4b28      	ldr	r3, [pc, #160]	; (8009998 <ADC_Enable+0x104>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4928      	ldr	r1, [pc, #160]	; (800999c <ADC_Enable+0x108>)
 80098fa:	0018      	movs	r0, r3
 80098fc:	f7f6 fc20 	bl	8000140 <__udivsi3>
 8009900:	0003      	movs	r3, r0
 8009902:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8009904:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009906:	e002      	b.n	800990e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	3b01      	subs	r3, #1
 800990c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1f9      	bne.n	8009908 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	7e5b      	ldrb	r3, [r3, #25]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d033      	beq.n	8009984 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800991c:	f7ff fa08 	bl	8008d30 <HAL_GetTick>
 8009920:	0003      	movs	r3, r0
 8009922:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009924:	e027      	b.n	8009976 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	0018      	movs	r0, r3
 800992c:	f7ff fb56 	bl	8008fdc <LL_ADC_IsEnabled>
 8009930:	1e03      	subs	r3, r0, #0
 8009932:	d104      	bne.n	800993e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	0018      	movs	r0, r3
 800993a:	f7ff fb2b 	bl	8008f94 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800993e:	f7ff f9f7 	bl	8008d30 <HAL_GetTick>
 8009942:	0002      	movs	r2, r0
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d914      	bls.n	8009976 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2201      	movs	r2, #1
 8009954:	4013      	ands	r3, r2
 8009956:	2b01      	cmp	r3, #1
 8009958:	d00d      	beq.n	8009976 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995e:	2210      	movs	r2, #16
 8009960:	431a      	orrs	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800996a:	2201      	movs	r2, #1
 800996c:	431a      	orrs	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e007      	b.n	8009986 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2201      	movs	r2, #1
 800997e:	4013      	ands	r3, r2
 8009980:	2b01      	cmp	r3, #1
 8009982:	d1d0      	bne.n	8009926 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	0018      	movs	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	b004      	add	sp, #16
 800998c:	bd80      	pop	{r7, pc}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	80000017 	.word	0x80000017
 8009994:	40012708 	.word	0x40012708
 8009998:	200000e0 	.word	0x200000e0
 800999c:	00030d40 	.word	0x00030d40

080099a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b2:	2250      	movs	r2, #80	; 0x50
 80099b4:	4013      	ands	r3, r2
 80099b6:	d141      	bne.n	8009a3c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099bc:	2280      	movs	r2, #128	; 0x80
 80099be:	0092      	lsls	r2, r2, #2
 80099c0:	431a      	orrs	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	0018      	movs	r0, r3
 80099cc:	f7ff fa49 	bl	8008e62 <LL_ADC_REG_IsTriggerSourceSWStart>
 80099d0:	1e03      	subs	r3, r0, #0
 80099d2:	d02e      	beq.n	8009a32 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	7e9b      	ldrb	r3, [r3, #26]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d12a      	bne.n	8009a32 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2208      	movs	r2, #8
 80099e4:	4013      	ands	r3, r2
 80099e6:	2b08      	cmp	r3, #8
 80099e8:	d123      	bne.n	8009a32 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	0018      	movs	r0, r3
 80099f0:	f7ff fb18 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 80099f4:	1e03      	subs	r3, r0, #0
 80099f6:	d110      	bne.n	8009a1a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	210c      	movs	r1, #12
 8009a04:	438a      	bics	r2, r1
 8009a06:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0c:	4a15      	ldr	r2, [pc, #84]	; (8009a64 <ADC_DMAConvCplt+0xc4>)
 8009a0e:	4013      	ands	r3, r2
 8009a10:	2201      	movs	r2, #1
 8009a12:	431a      	orrs	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	659a      	str	r2, [r3, #88]	; 0x58
 8009a18:	e00b      	b.n	8009a32 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1e:	2220      	movs	r2, #32
 8009a20:	431a      	orrs	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7ff fd3d 	bl	80094b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009a3a:	e00f      	b.n	8009a5c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a40:	2210      	movs	r2, #16
 8009a42:	4013      	ands	r3, r2
 8009a44:	d004      	beq.n	8009a50 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f7ff fd43 	bl	80094d4 <HAL_ADC_ErrorCallback>
}
 8009a4e:	e005      	b.n	8009a5c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	0010      	movs	r0, r2
 8009a5a:	4798      	blx	r3
}
 8009a5c:	46c0      	nop			; (mov r8, r8)
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b004      	add	sp, #16
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	fffffefe 	.word	0xfffffefe

08009a68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f7ff fd23 	bl	80094c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	46bd      	mov	sp, r7
 8009a82:	b004      	add	sp, #16
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a98:	2240      	movs	r2, #64	; 0x40
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa4:	2204      	movs	r2, #4
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f7ff fd10 	bl	80094d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009ab4:	46c0      	nop			; (mov r8, r8)
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	b004      	add	sp, #16
 8009aba:	bd80      	pop	{r7, pc}

08009abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	0002      	movs	r2, r0
 8009ac4:	1dfb      	adds	r3, r7, #7
 8009ac6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009ac8:	1dfb      	adds	r3, r7, #7
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b7f      	cmp	r3, #127	; 0x7f
 8009ace:	d809      	bhi.n	8009ae4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ad0:	1dfb      	adds	r3, r7, #7
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	001a      	movs	r2, r3
 8009ad6:	231f      	movs	r3, #31
 8009ad8:	401a      	ands	r2, r3
 8009ada:	4b04      	ldr	r3, [pc, #16]	; (8009aec <__NVIC_EnableIRQ+0x30>)
 8009adc:	2101      	movs	r1, #1
 8009ade:	4091      	lsls	r1, r2
 8009ae0:	000a      	movs	r2, r1
 8009ae2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8009ae4:	46c0      	nop			; (mov r8, r8)
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	b002      	add	sp, #8
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	e000e100 	.word	0xe000e100

08009af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	0002      	movs	r2, r0
 8009af8:	6039      	str	r1, [r7, #0]
 8009afa:	1dfb      	adds	r3, r7, #7
 8009afc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009afe:	1dfb      	adds	r3, r7, #7
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b7f      	cmp	r3, #127	; 0x7f
 8009b04:	d828      	bhi.n	8009b58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b06:	4a2f      	ldr	r2, [pc, #188]	; (8009bc4 <__NVIC_SetPriority+0xd4>)
 8009b08:	1dfb      	adds	r3, r7, #7
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	b25b      	sxtb	r3, r3
 8009b0e:	089b      	lsrs	r3, r3, #2
 8009b10:	33c0      	adds	r3, #192	; 0xc0
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	589b      	ldr	r3, [r3, r2]
 8009b16:	1dfa      	adds	r2, r7, #7
 8009b18:	7812      	ldrb	r2, [r2, #0]
 8009b1a:	0011      	movs	r1, r2
 8009b1c:	2203      	movs	r2, #3
 8009b1e:	400a      	ands	r2, r1
 8009b20:	00d2      	lsls	r2, r2, #3
 8009b22:	21ff      	movs	r1, #255	; 0xff
 8009b24:	4091      	lsls	r1, r2
 8009b26:	000a      	movs	r2, r1
 8009b28:	43d2      	mvns	r2, r2
 8009b2a:	401a      	ands	r2, r3
 8009b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	019b      	lsls	r3, r3, #6
 8009b32:	22ff      	movs	r2, #255	; 0xff
 8009b34:	401a      	ands	r2, r3
 8009b36:	1dfb      	adds	r3, r7, #7
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	4003      	ands	r3, r0
 8009b40:	00db      	lsls	r3, r3, #3
 8009b42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b44:	481f      	ldr	r0, [pc, #124]	; (8009bc4 <__NVIC_SetPriority+0xd4>)
 8009b46:	1dfb      	adds	r3, r7, #7
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b25b      	sxtb	r3, r3
 8009b4c:	089b      	lsrs	r3, r3, #2
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	33c0      	adds	r3, #192	; 0xc0
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009b56:	e031      	b.n	8009bbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b58:	4a1b      	ldr	r2, [pc, #108]	; (8009bc8 <__NVIC_SetPriority+0xd8>)
 8009b5a:	1dfb      	adds	r3, r7, #7
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	0019      	movs	r1, r3
 8009b60:	230f      	movs	r3, #15
 8009b62:	400b      	ands	r3, r1
 8009b64:	3b08      	subs	r3, #8
 8009b66:	089b      	lsrs	r3, r3, #2
 8009b68:	3306      	adds	r3, #6
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	18d3      	adds	r3, r2, r3
 8009b6e:	3304      	adds	r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	1dfa      	adds	r2, r7, #7
 8009b74:	7812      	ldrb	r2, [r2, #0]
 8009b76:	0011      	movs	r1, r2
 8009b78:	2203      	movs	r2, #3
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	00d2      	lsls	r2, r2, #3
 8009b7e:	21ff      	movs	r1, #255	; 0xff
 8009b80:	4091      	lsls	r1, r2
 8009b82:	000a      	movs	r2, r1
 8009b84:	43d2      	mvns	r2, r2
 8009b86:	401a      	ands	r2, r3
 8009b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	019b      	lsls	r3, r3, #6
 8009b8e:	22ff      	movs	r2, #255	; 0xff
 8009b90:	401a      	ands	r2, r3
 8009b92:	1dfb      	adds	r3, r7, #7
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	0018      	movs	r0, r3
 8009b98:	2303      	movs	r3, #3
 8009b9a:	4003      	ands	r3, r0
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ba0:	4809      	ldr	r0, [pc, #36]	; (8009bc8 <__NVIC_SetPriority+0xd8>)
 8009ba2:	1dfb      	adds	r3, r7, #7
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	001c      	movs	r4, r3
 8009ba8:	230f      	movs	r3, #15
 8009baa:	4023      	ands	r3, r4
 8009bac:	3b08      	subs	r3, #8
 8009bae:	089b      	lsrs	r3, r3, #2
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	3306      	adds	r3, #6
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	18c3      	adds	r3, r0, r3
 8009bb8:	3304      	adds	r3, #4
 8009bba:	601a      	str	r2, [r3, #0]
}
 8009bbc:	46c0      	nop			; (mov r8, r8)
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	b003      	add	sp, #12
 8009bc2:	bd90      	pop	{r4, r7, pc}
 8009bc4:	e000e100 	.word	0xe000e100
 8009bc8:	e000ed00 	.word	0xe000ed00

08009bcc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	210f      	movs	r1, #15
 8009bd8:	187b      	adds	r3, r7, r1
 8009bda:	1c02      	adds	r2, r0, #0
 8009bdc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	187b      	adds	r3, r7, r1
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	b25b      	sxtb	r3, r3
 8009be6:	0011      	movs	r1, r2
 8009be8:	0018      	movs	r0, r3
 8009bea:	f7ff ff81 	bl	8009af0 <__NVIC_SetPriority>
}
 8009bee:	46c0      	nop			; (mov r8, r8)
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	b004      	add	sp, #16
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	0002      	movs	r2, r0
 8009bfe:	1dfb      	adds	r3, r7, #7
 8009c00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c02:	1dfb      	adds	r3, r7, #7
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	b25b      	sxtb	r3, r3
 8009c08:	0018      	movs	r0, r3
 8009c0a:	f7ff ff57 	bl	8009abc <__NVIC_EnableIRQ>
}
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	46bd      	mov	sp, r7
 8009c12:	b002      	add	sp, #8
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e077      	b.n	8009d1a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a3d      	ldr	r2, [pc, #244]	; (8009d24 <HAL_DMA_Init+0x10c>)
 8009c30:	4694      	mov	ip, r2
 8009c32:	4463      	add	r3, ip
 8009c34:	2114      	movs	r1, #20
 8009c36:	0018      	movs	r0, r3
 8009c38:	f7f6 fa82 	bl	8000140 <__udivsi3>
 8009c3c:	0003      	movs	r3, r0
 8009c3e:	009a      	lsls	r2, r3, #2
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2225      	movs	r2, #37	; 0x25
 8009c48:	2102      	movs	r1, #2
 8009c4a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4934      	ldr	r1, [pc, #208]	; (8009d28 <HAL_DMA_Init+0x110>)
 8009c58:	400a      	ands	r2, r1
 8009c5a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6819      	ldr	r1, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	689a      	ldr	r2, [r3, #8]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	431a      	orrs	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	431a      	orrs	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	431a      	orrs	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	0018      	movs	r0, r3
 8009c96:	f000 fa8d 	bl	800a1b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	689a      	ldr	r2, [r3, #8]
 8009c9e:	2380      	movs	r3, #128	; 0x80
 8009ca0:	01db      	lsls	r3, r3, #7
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d102      	bne.n	8009cac <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb4:	213f      	movs	r1, #63	; 0x3f
 8009cb6:	400a      	ands	r2, r1
 8009cb8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009cc2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d011      	beq.n	8009cf0 <HAL_DMA_Init+0xd8>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	d80d      	bhi.n	8009cf0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	f000 fa98 	bl	800a20c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009cec:	605a      	str	r2, [r3, #4]
 8009cee:	e008      	b.n	8009d02 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2225      	movs	r2, #37	; 0x25
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2224      	movs	r2, #36	; 0x24
 8009d14:	2100      	movs	r1, #0
 8009d16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	b002      	add	sp, #8
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	bffdfff8 	.word	0xbffdfff8
 8009d28:	ffff800f 	.word	0xffff800f

08009d2c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d3a:	2317      	movs	r3, #23
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2224      	movs	r2, #36	; 0x24
 8009d46:	5c9b      	ldrb	r3, [r3, r2]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d101      	bne.n	8009d50 <HAL_DMA_Start_IT+0x24>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e06f      	b.n	8009e30 <HAL_DMA_Start_IT+0x104>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2224      	movs	r2, #36	; 0x24
 8009d54:	2101      	movs	r1, #1
 8009d56:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2225      	movs	r2, #37	; 0x25
 8009d5c:	5c9b      	ldrb	r3, [r3, r2]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d157      	bne.n	8009e14 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2225      	movs	r2, #37	; 0x25
 8009d68:	2102      	movs	r1, #2
 8009d6a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	438a      	bics	r2, r1
 8009d80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	68b9      	ldr	r1, [r7, #8]
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f9d3 	bl	800a134 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d008      	beq.n	8009da8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	210e      	movs	r1, #14
 8009da2:	430a      	orrs	r2, r1
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e00f      	b.n	8009dc8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2104      	movs	r1, #4
 8009db4:	438a      	bics	r2, r1
 8009db6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	210a      	movs	r1, #10
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	2380      	movs	r3, #128	; 0x80
 8009dd0:	025b      	lsls	r3, r3, #9
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	d008      	beq.n	8009de8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de0:	2180      	movs	r1, #128	; 0x80
 8009de2:	0049      	lsls	r1, r1, #1
 8009de4:	430a      	orrs	r2, r1
 8009de6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d008      	beq.n	8009e02 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dfa:	2180      	movs	r1, #128	; 0x80
 8009dfc:	0049      	lsls	r1, r1, #1
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e00a      	b.n	8009e2a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2280      	movs	r2, #128	; 0x80
 8009e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2224      	movs	r2, #36	; 0x24
 8009e1e:	2100      	movs	r1, #0
 8009e20:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8009e22:	2317      	movs	r3, #23
 8009e24:	18fb      	adds	r3, r7, r3
 8009e26:	2201      	movs	r2, #1
 8009e28:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009e2a:	2317      	movs	r3, #23
 8009e2c:	18fb      	adds	r3, r7, r3
 8009e2e:	781b      	ldrb	r3, [r3, #0]
}
 8009e30:	0018      	movs	r0, r3
 8009e32:	46bd      	mov	sp, r7
 8009e34:	b006      	add	sp, #24
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e050      	b.n	8009eec <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2225      	movs	r2, #37	; 0x25
 8009e4e:	5c9b      	ldrb	r3, [r3, r2]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d008      	beq.n	8009e68 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2204      	movs	r2, #4
 8009e5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2224      	movs	r2, #36	; 0x24
 8009e60:	2100      	movs	r1, #0
 8009e62:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e041      	b.n	8009eec <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	210e      	movs	r1, #14
 8009e74:	438a      	bics	r2, r1
 8009e76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e82:	491c      	ldr	r1, [pc, #112]	; (8009ef4 <HAL_DMA_Abort+0xbc>)
 8009e84:	400a      	ands	r2, r1
 8009e86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2101      	movs	r1, #1
 8009e94:	438a      	bics	r2, r1
 8009e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8009e98:	4b17      	ldr	r3, [pc, #92]	; (8009ef8 <HAL_DMA_Abort+0xc0>)
 8009e9a:	6859      	ldr	r1, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	221c      	movs	r2, #28
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	409a      	lsls	r2, r3
 8009ea8:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <HAL_DMA_Abort+0xc0>)
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009eb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00c      	beq.n	8009eda <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eca:	490a      	ldr	r1, [pc, #40]	; (8009ef4 <HAL_DMA_Abort+0xbc>)
 8009ecc:	400a      	ands	r2, r1
 8009ece:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009ed8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2225      	movs	r2, #37	; 0x25
 8009ede:	2101      	movs	r1, #1
 8009ee0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2224      	movs	r2, #36	; 0x24
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	0018      	movs	r0, r3
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	b002      	add	sp, #8
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	fffffeff 	.word	0xfffffeff
 8009ef8:	40020000 	.word	0x40020000

08009efc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f04:	210f      	movs	r1, #15
 8009f06:	187b      	adds	r3, r7, r1
 8009f08:	2200      	movs	r2, #0
 8009f0a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2225      	movs	r2, #37	; 0x25
 8009f10:	5c9b      	ldrb	r3, [r3, r2]
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d006      	beq.n	8009f26 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2204      	movs	r2, #4
 8009f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009f1e:	187b      	adds	r3, r7, r1
 8009f20:	2201      	movs	r2, #1
 8009f22:	701a      	strb	r2, [r3, #0]
 8009f24:	e049      	b.n	8009fba <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	210e      	movs	r1, #14
 8009f32:	438a      	bics	r2, r1
 8009f34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2101      	movs	r1, #1
 8009f42:	438a      	bics	r2, r1
 8009f44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f50:	491d      	ldr	r1, [pc, #116]	; (8009fc8 <HAL_DMA_Abort_IT+0xcc>)
 8009f52:	400a      	ands	r2, r1
 8009f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8009f56:	4b1d      	ldr	r3, [pc, #116]	; (8009fcc <HAL_DMA_Abort_IT+0xd0>)
 8009f58:	6859      	ldr	r1, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	221c      	movs	r2, #28
 8009f60:	4013      	ands	r3, r2
 8009f62:	2201      	movs	r2, #1
 8009f64:	409a      	lsls	r2, r3
 8009f66:	4b19      	ldr	r3, [pc, #100]	; (8009fcc <HAL_DMA_Abort_IT+0xd0>)
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009f74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00c      	beq.n	8009f98 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f88:	490f      	ldr	r1, [pc, #60]	; (8009fc8 <HAL_DMA_Abort_IT+0xcc>)
 8009f8a:	400a      	ands	r2, r1
 8009f8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009f96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2225      	movs	r2, #37	; 0x25
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2224      	movs	r2, #36	; 0x24
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d004      	beq.n	8009fba <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	0010      	movs	r0, r2
 8009fb8:	4798      	blx	r3
    }
  }
  return status;
 8009fba:	230f      	movs	r3, #15
 8009fbc:	18fb      	adds	r3, r7, r3
 8009fbe:	781b      	ldrb	r3, [r3, #0]
}
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	b004      	add	sp, #16
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	fffffeff 	.word	0xfffffeff
 8009fcc:	40020000 	.word	0x40020000

08009fd0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8009fd8:	4b55      	ldr	r3, [pc, #340]	; (800a130 <HAL_DMA_IRQHandler+0x160>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	221c      	movs	r2, #28
 8009fec:	4013      	ands	r3, r2
 8009fee:	2204      	movs	r2, #4
 8009ff0:	409a      	lsls	r2, r3
 8009ff2:	0013      	movs	r3, r2
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	d027      	beq.n	800a04a <HAL_DMA_IRQHandler+0x7a>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	4013      	ands	r3, r2
 800a000:	d023      	beq.n	800a04a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2220      	movs	r2, #32
 800a00a:	4013      	ands	r3, r2
 800a00c:	d107      	bne.n	800a01e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2104      	movs	r1, #4
 800a01a:	438a      	bics	r2, r1
 800a01c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800a01e:	4b44      	ldr	r3, [pc, #272]	; (800a130 <HAL_DMA_IRQHandler+0x160>)
 800a020:	6859      	ldr	r1, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	221c      	movs	r2, #28
 800a028:	4013      	ands	r3, r2
 800a02a:	2204      	movs	r2, #4
 800a02c:	409a      	lsls	r2, r3
 800a02e:	4b40      	ldr	r3, [pc, #256]	; (800a130 <HAL_DMA_IRQHandler+0x160>)
 800a030:	430a      	orrs	r2, r1
 800a032:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d100      	bne.n	800a03e <HAL_DMA_IRQHandler+0x6e>
 800a03c:	e073      	b.n	800a126 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	0010      	movs	r0, r2
 800a046:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800a048:	e06d      	b.n	800a126 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	221c      	movs	r2, #28
 800a050:	4013      	ands	r3, r2
 800a052:	2202      	movs	r2, #2
 800a054:	409a      	lsls	r2, r3
 800a056:	0013      	movs	r3, r2
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4013      	ands	r3, r2
 800a05c:	d02e      	beq.n	800a0bc <HAL_DMA_IRQHandler+0xec>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2202      	movs	r2, #2
 800a062:	4013      	ands	r3, r2
 800a064:	d02a      	beq.n	800a0bc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2220      	movs	r2, #32
 800a06e:	4013      	ands	r3, r2
 800a070:	d10b      	bne.n	800a08a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	210a      	movs	r1, #10
 800a07e:	438a      	bics	r2, r1
 800a080:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2225      	movs	r2, #37	; 0x25
 800a086:	2101      	movs	r1, #1
 800a088:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800a08a:	4b29      	ldr	r3, [pc, #164]	; (800a130 <HAL_DMA_IRQHandler+0x160>)
 800a08c:	6859      	ldr	r1, [r3, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	221c      	movs	r2, #28
 800a094:	4013      	ands	r3, r2
 800a096:	2202      	movs	r2, #2
 800a098:	409a      	lsls	r2, r3
 800a09a:	4b25      	ldr	r3, [pc, #148]	; (800a130 <HAL_DMA_IRQHandler+0x160>)
 800a09c:	430a      	orrs	r2, r1
 800a09e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2224      	movs	r2, #36	; 0x24
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d03a      	beq.n	800a126 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	0010      	movs	r0, r2
 800a0b8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800a0ba:	e034      	b.n	800a126 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c0:	221c      	movs	r2, #28
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	2208      	movs	r2, #8
 800a0c6:	409a      	lsls	r2, r3
 800a0c8:	0013      	movs	r3, r2
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	d02b      	beq.n	800a128 <HAL_DMA_IRQHandler+0x158>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2208      	movs	r2, #8
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	d027      	beq.n	800a128 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	210e      	movs	r1, #14
 800a0e4:	438a      	bics	r2, r1
 800a0e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800a0e8:	4b11      	ldr	r3, [pc, #68]	; (800a130 <HAL_DMA_IRQHandler+0x160>)
 800a0ea:	6859      	ldr	r1, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f0:	221c      	movs	r2, #28
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	409a      	lsls	r2, r3
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <HAL_DMA_IRQHandler+0x160>)
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2225      	movs	r2, #37	; 0x25
 800a108:	2101      	movs	r1, #1
 800a10a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2224      	movs	r2, #36	; 0x24
 800a110:	2100      	movs	r1, #0
 800a112:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	0010      	movs	r0, r2
 800a124:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	46c0      	nop			; (mov r8, r8)
}
 800a12a:	46bd      	mov	sp, r7
 800a12c:	b004      	add	sp, #16
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	40020000 	.word	0x40020000

0800a134 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a14a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a150:	2b00      	cmp	r3, #0
 800a152:	d004      	beq.n	800a15e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a15c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800a15e:	4b14      	ldr	r3, [pc, #80]	; (800a1b0 <DMA_SetConfig+0x7c>)
 800a160:	6859      	ldr	r1, [r3, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	221c      	movs	r2, #28
 800a168:	4013      	ands	r3, r2
 800a16a:	2201      	movs	r2, #1
 800a16c:	409a      	lsls	r2, r3
 800a16e:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <DMA_SetConfig+0x7c>)
 800a170:	430a      	orrs	r2, r1
 800a172:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	2b10      	cmp	r3, #16
 800a182:	d108      	bne.n	800a196 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a194:	e007      	b.n	800a1a6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	60da      	str	r2, [r3, #12]
}
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	b004      	add	sp, #16
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	40020000 	.word	0x40020000

0800a1b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	089b      	lsrs	r3, r3, #2
 800a1c2:	4a10      	ldr	r2, [pc, #64]	; (800a204 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800a1c4:	4694      	mov	ip, r2
 800a1c6:	4463      	add	r3, ip
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	001a      	movs	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	001a      	movs	r2, r3
 800a1d6:	23ff      	movs	r3, #255	; 0xff
 800a1d8:	4013      	ands	r3, r2
 800a1da:	3b08      	subs	r3, #8
 800a1dc:	2114      	movs	r1, #20
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f7f5 ffae 	bl	8000140 <__udivsi3>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a07      	ldr	r2, [pc, #28]	; (800a208 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800a1ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	221f      	movs	r2, #31
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	409a      	lsls	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800a1fc:	46c0      	nop			; (mov r8, r8)
 800a1fe:	46bd      	mov	sp, r7
 800a200:	b004      	add	sp, #16
 800a202:	bd80      	pop	{r7, pc}
 800a204:	10008200 	.word	0x10008200
 800a208:	40020880 	.word	0x40020880

0800a20c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	223f      	movs	r2, #63	; 0x3f
 800a21a:	4013      	ands	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4a0a      	ldr	r2, [pc, #40]	; (800a24c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a222:	4694      	mov	ip, r2
 800a224:	4463      	add	r3, ip
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	001a      	movs	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a07      	ldr	r2, [pc, #28]	; (800a250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a232:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3b01      	subs	r3, #1
 800a238:	2203      	movs	r2, #3
 800a23a:	4013      	ands	r3, r2
 800a23c:	2201      	movs	r2, #1
 800a23e:	409a      	lsls	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	659a      	str	r2, [r3, #88]	; 0x58
}
 800a244:	46c0      	nop			; (mov r8, r8)
 800a246:	46bd      	mov	sp, r7
 800a248:	b004      	add	sp, #16
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	1000823f 	.word	0x1000823f
 800a250:	40020940 	.word	0x40020940

0800a254 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a266:	4013      	ands	r3, r2
 800a268:	d01c      	beq.n	800a2a4 <HAL_DMAEx_MUX_IRQHandler+0x50>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a274:	4921      	ldr	r1, [pc, #132]	; (800a2fc <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 800a276:	400a      	ands	r2, r1
 800a278:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a282:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a288:	2280      	movs	r2, #128	; 0x80
 800a28a:	0092      	lsls	r2, r2, #2
 800a28c:	431a      	orrs	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <HAL_DMAEx_MUX_IRQHandler+0x50>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	0010      	movs	r0, r2
 800a2a2:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d023      	beq.n	800a2f4 <HAL_DMAEx_MUX_IRQHandler+0xa0>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	d01c      	beq.n	800a2f4 <HAL_DMAEx_MUX_IRQHandler+0xa0>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c4:	490d      	ldr	r1, [pc, #52]	; (800a2fc <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 800a2c6:	400a      	ands	r2, r1
 800a2c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a2d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d8:	2280      	movs	r2, #128	; 0x80
 800a2da:	00d2      	lsls	r2, r2, #3
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <HAL_DMAEx_MUX_IRQHandler+0xa0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	0010      	movs	r0, r2
 800a2f2:	4798      	blx	r3
      }
    }
  }
}
 800a2f4:	46c0      	nop			; (mov r8, r8)
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	b002      	add	sp, #8
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	fffffeff 	.word	0xfffffeff

0800a300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a30a:	2300      	movs	r3, #0
 800a30c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a30e:	e147      	b.n	800a5a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2101      	movs	r1, #1
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	4091      	lsls	r1, r2
 800a31a:	000a      	movs	r2, r1
 800a31c:	4013      	ands	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d100      	bne.n	800a328 <HAL_GPIO_Init+0x28>
 800a326:	e138      	b.n	800a59a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2203      	movs	r2, #3
 800a32e:	4013      	ands	r3, r2
 800a330:	2b01      	cmp	r3, #1
 800a332:	d005      	beq.n	800a340 <HAL_GPIO_Init+0x40>
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	2203      	movs	r2, #3
 800a33a:	4013      	ands	r3, r2
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d130      	bne.n	800a3a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	2203      	movs	r2, #3
 800a34c:	409a      	lsls	r2, r3
 800a34e:	0013      	movs	r3, r2
 800a350:	43da      	mvns	r2, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	4013      	ands	r3, r2
 800a356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	409a      	lsls	r2, r3
 800a362:	0013      	movs	r3, r2
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	4313      	orrs	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a376:	2201      	movs	r2, #1
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	409a      	lsls	r2, r3
 800a37c:	0013      	movs	r3, r2
 800a37e:	43da      	mvns	r2, r3
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	4013      	ands	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	091b      	lsrs	r3, r3, #4
 800a38c:	2201      	movs	r2, #1
 800a38e:	401a      	ands	r2, r3
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	409a      	lsls	r2, r3
 800a394:	0013      	movs	r3, r2
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	4313      	orrs	r3, r2
 800a39a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2203      	movs	r2, #3
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d017      	beq.n	800a3de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	2203      	movs	r2, #3
 800a3ba:	409a      	lsls	r2, r3
 800a3bc:	0013      	movs	r3, r2
 800a3be:	43da      	mvns	r2, r3
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	005b      	lsls	r3, r3, #1
 800a3ce:	409a      	lsls	r2, r3
 800a3d0:	0013      	movs	r3, r2
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d123      	bne.n	800a432 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	08da      	lsrs	r2, r3, #3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3208      	adds	r2, #8
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	58d3      	ldr	r3, [r2, r3]
 800a3f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2207      	movs	r2, #7
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	220f      	movs	r2, #15
 800a402:	409a      	lsls	r2, r3
 800a404:	0013      	movs	r3, r2
 800a406:	43da      	mvns	r2, r3
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	4013      	ands	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2107      	movs	r1, #7
 800a416:	400b      	ands	r3, r1
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	409a      	lsls	r2, r3
 800a41c:	0013      	movs	r3, r2
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	4313      	orrs	r3, r2
 800a422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	08da      	lsrs	r2, r3, #3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3208      	adds	r2, #8
 800a42c:	0092      	lsls	r2, r2, #2
 800a42e:	6939      	ldr	r1, [r7, #16]
 800a430:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	2203      	movs	r2, #3
 800a43e:	409a      	lsls	r2, r3
 800a440:	0013      	movs	r3, r2
 800a442:	43da      	mvns	r2, r3
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	4013      	ands	r3, r2
 800a448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	2203      	movs	r2, #3
 800a450:	401a      	ands	r2, r3
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	409a      	lsls	r2, r3
 800a458:	0013      	movs	r3, r2
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	23c0      	movs	r3, #192	; 0xc0
 800a46c:	029b      	lsls	r3, r3, #10
 800a46e:	4013      	ands	r3, r2
 800a470:	d100      	bne.n	800a474 <HAL_GPIO_Init+0x174>
 800a472:	e092      	b.n	800a59a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a474:	4a50      	ldr	r2, [pc, #320]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	089b      	lsrs	r3, r3, #2
 800a47a:	3318      	adds	r3, #24
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	589b      	ldr	r3, [r3, r2]
 800a480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2203      	movs	r2, #3
 800a486:	4013      	ands	r3, r2
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	220f      	movs	r2, #15
 800a48c:	409a      	lsls	r2, r3
 800a48e:	0013      	movs	r3, r2
 800a490:	43da      	mvns	r2, r3
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	4013      	ands	r3, r2
 800a496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	23a0      	movs	r3, #160	; 0xa0
 800a49c:	05db      	lsls	r3, r3, #23
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d013      	beq.n	800a4ca <HAL_GPIO_Init+0x1ca>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a45      	ldr	r2, [pc, #276]	; (800a5bc <HAL_GPIO_Init+0x2bc>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00d      	beq.n	800a4c6 <HAL_GPIO_Init+0x1c6>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a44      	ldr	r2, [pc, #272]	; (800a5c0 <HAL_GPIO_Init+0x2c0>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d007      	beq.n	800a4c2 <HAL_GPIO_Init+0x1c2>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a43      	ldr	r2, [pc, #268]	; (800a5c4 <HAL_GPIO_Init+0x2c4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d101      	bne.n	800a4be <HAL_GPIO_Init+0x1be>
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e006      	b.n	800a4cc <HAL_GPIO_Init+0x1cc>
 800a4be:	2305      	movs	r3, #5
 800a4c0:	e004      	b.n	800a4cc <HAL_GPIO_Init+0x1cc>
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	e002      	b.n	800a4cc <HAL_GPIO_Init+0x1cc>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e000      	b.n	800a4cc <HAL_GPIO_Init+0x1cc>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	2103      	movs	r1, #3
 800a4d0:	400a      	ands	r2, r1
 800a4d2:	00d2      	lsls	r2, r2, #3
 800a4d4:	4093      	lsls	r3, r2
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a4dc:	4936      	ldr	r1, [pc, #216]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	089b      	lsrs	r3, r3, #2
 800a4e2:	3318      	adds	r3, #24
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4ea:	4b33      	ldr	r3, [pc, #204]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	43da      	mvns	r2, r3
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	2380      	movs	r3, #128	; 0x80
 800a500:	035b      	lsls	r3, r3, #13
 800a502:	4013      	ands	r3, r2
 800a504:	d003      	beq.n	800a50e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a50e:	4b2a      	ldr	r3, [pc, #168]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a514:	4b28      	ldr	r3, [pc, #160]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	43da      	mvns	r2, r3
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	4013      	ands	r3, r2
 800a522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	2380      	movs	r3, #128	; 0x80
 800a52a:	039b      	lsls	r3, r3, #14
 800a52c:	4013      	ands	r3, r2
 800a52e:	d003      	beq.n	800a538 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4313      	orrs	r3, r2
 800a536:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a538:	4b1f      	ldr	r3, [pc, #124]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a53e:	4a1e      	ldr	r2, [pc, #120]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a540:	2384      	movs	r3, #132	; 0x84
 800a542:	58d3      	ldr	r3, [r2, r3]
 800a544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	43da      	mvns	r2, r3
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	4013      	ands	r3, r2
 800a54e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	2380      	movs	r3, #128	; 0x80
 800a556:	029b      	lsls	r3, r3, #10
 800a558:	4013      	ands	r3, r2
 800a55a:	d003      	beq.n	800a564 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4313      	orrs	r3, r2
 800a562:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a564:	4914      	ldr	r1, [pc, #80]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a566:	2284      	movs	r2, #132	; 0x84
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a56c:	4a12      	ldr	r2, [pc, #72]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a56e:	2380      	movs	r3, #128	; 0x80
 800a570:	58d3      	ldr	r3, [r2, r3]
 800a572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	43da      	mvns	r2, r3
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	4013      	ands	r3, r2
 800a57c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	2380      	movs	r3, #128	; 0x80
 800a584:	025b      	lsls	r3, r3, #9
 800a586:	4013      	ands	r3, r2
 800a588:	d003      	beq.n	800a592 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a592:	4909      	ldr	r1, [pc, #36]	; (800a5b8 <HAL_GPIO_Init+0x2b8>)
 800a594:	2280      	movs	r2, #128	; 0x80
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	3301      	adds	r3, #1
 800a59e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	40da      	lsrs	r2, r3
 800a5a8:	1e13      	subs	r3, r2, #0
 800a5aa:	d000      	beq.n	800a5ae <HAL_GPIO_Init+0x2ae>
 800a5ac:	e6b0      	b.n	800a310 <HAL_GPIO_Init+0x10>
  }
}
 800a5ae:	46c0      	nop			; (mov r8, r8)
 800a5b0:	46c0      	nop			; (mov r8, r8)
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	b006      	add	sp, #24
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	40021800 	.word	0x40021800
 800a5bc:	50000400 	.word	0x50000400
 800a5c0:	50000800 	.word	0x50000800
 800a5c4:	50000c00 	.word	0x50000c00

0800a5c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	000a      	movs	r2, r1
 800a5d2:	1cbb      	adds	r3, r7, #2
 800a5d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	1cba      	adds	r2, r7, #2
 800a5dc:	8812      	ldrh	r2, [r2, #0]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	d004      	beq.n	800a5ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a5e2:	230f      	movs	r3, #15
 800a5e4:	18fb      	adds	r3, r7, r3
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	e003      	b.n	800a5f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a5ec:	230f      	movs	r3, #15
 800a5ee:	18fb      	adds	r3, r7, r3
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a5f4:	230f      	movs	r3, #15
 800a5f6:	18fb      	adds	r3, r7, r3
 800a5f8:	781b      	ldrb	r3, [r3, #0]
}
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	b004      	add	sp, #16
 800a600:	bd80      	pop	{r7, pc}

0800a602 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	0008      	movs	r0, r1
 800a60c:	0011      	movs	r1, r2
 800a60e:	1cbb      	adds	r3, r7, #2
 800a610:	1c02      	adds	r2, r0, #0
 800a612:	801a      	strh	r2, [r3, #0]
 800a614:	1c7b      	adds	r3, r7, #1
 800a616:	1c0a      	adds	r2, r1, #0
 800a618:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a61a:	1c7b      	adds	r3, r7, #1
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d004      	beq.n	800a62c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a622:	1cbb      	adds	r3, r7, #2
 800a624:	881a      	ldrh	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a62a:	e003      	b.n	800a634 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a62c:	1cbb      	adds	r3, r7, #2
 800a62e:	881a      	ldrh	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a634:	46c0      	nop			; (mov r8, r8)
 800a636:	46bd      	mov	sp, r7
 800a638:	b002      	add	sp, #8
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	000a      	movs	r2, r1
 800a646:	1cbb      	adds	r3, r7, #2
 800a648:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a650:	1cbb      	adds	r3, r7, #2
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4013      	ands	r3, r2
 800a658:	041a      	lsls	r2, r3, #16
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	43db      	mvns	r3, r3
 800a65e:	1cb9      	adds	r1, r7, #2
 800a660:	8809      	ldrh	r1, [r1, #0]
 800a662:	400b      	ands	r3, r1
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	619a      	str	r2, [r3, #24]
}
 800a66a:	46c0      	nop			; (mov r8, r8)
 800a66c:	46bd      	mov	sp, r7
 800a66e:	b004      	add	sp, #16
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e082      	b.n	800a78c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2241      	movs	r2, #65	; 0x41
 800a68a:	5c9b      	ldrb	r3, [r3, r2]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d107      	bne.n	800a6a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2240      	movs	r2, #64	; 0x40
 800a696:	2100      	movs	r1, #0
 800a698:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	0018      	movs	r0, r3
 800a69e:	f7fd fed9 	bl	8008454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2241      	movs	r2, #65	; 0x41
 800a6a6:	2124      	movs	r1, #36	; 0x24
 800a6a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	438a      	bics	r2, r1
 800a6b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4934      	ldr	r1, [pc, #208]	; (800a794 <HAL_I2C_Init+0x120>)
 800a6c4:	400a      	ands	r2, r1
 800a6c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689a      	ldr	r2, [r3, #8]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4931      	ldr	r1, [pc, #196]	; (800a798 <HAL_I2C_Init+0x124>)
 800a6d4:	400a      	ands	r2, r1
 800a6d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d108      	bne.n	800a6f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2180      	movs	r1, #128	; 0x80
 800a6ea:	0209      	lsls	r1, r1, #8
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	609a      	str	r2, [r3, #8]
 800a6f0:	e007      	b.n	800a702 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	689a      	ldr	r2, [r3, #8]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2184      	movs	r1, #132	; 0x84
 800a6fc:	0209      	lsls	r1, r1, #8
 800a6fe:	430a      	orrs	r2, r1
 800a700:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d104      	bne.n	800a714 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2280      	movs	r2, #128	; 0x80
 800a710:	0112      	lsls	r2, r2, #4
 800a712:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	491f      	ldr	r1, [pc, #124]	; (800a79c <HAL_I2C_Init+0x128>)
 800a720:	430a      	orrs	r2, r1
 800a722:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	491a      	ldr	r1, [pc, #104]	; (800a798 <HAL_I2C_Init+0x124>)
 800a730:	400a      	ands	r2, r1
 800a732:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	431a      	orrs	r2, r3
 800a73e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	69d9      	ldr	r1, [r3, #28]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1a      	ldr	r2, [r3, #32]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2101      	movs	r1, #1
 800a76a:	430a      	orrs	r2, r1
 800a76c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2241      	movs	r2, #65	; 0x41
 800a778:	2120      	movs	r1, #32
 800a77a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2242      	movs	r2, #66	; 0x42
 800a786:	2100      	movs	r1, #0
 800a788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	0018      	movs	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	b002      	add	sp, #8
 800a792:	bd80      	pop	{r7, pc}
 800a794:	f0ffffff 	.word	0xf0ffffff
 800a798:	ffff7fff 	.word	0xffff7fff
 800a79c:	02008000 	.word	0x02008000

0800a7a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7a0:	b590      	push	{r4, r7, lr}
 800a7a2:	b089      	sub	sp, #36	; 0x24
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	000c      	movs	r4, r1
 800a7aa:	0010      	movs	r0, r2
 800a7ac:	0019      	movs	r1, r3
 800a7ae:	230a      	movs	r3, #10
 800a7b0:	18fb      	adds	r3, r7, r3
 800a7b2:	1c22      	adds	r2, r4, #0
 800a7b4:	801a      	strh	r2, [r3, #0]
 800a7b6:	2308      	movs	r3, #8
 800a7b8:	18fb      	adds	r3, r7, r3
 800a7ba:	1c02      	adds	r2, r0, #0
 800a7bc:	801a      	strh	r2, [r3, #0]
 800a7be:	1dbb      	adds	r3, r7, #6
 800a7c0:	1c0a      	adds	r2, r1, #0
 800a7c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2241      	movs	r2, #65	; 0x41
 800a7c8:	5c9b      	ldrb	r3, [r3, r2]
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b20      	cmp	r3, #32
 800a7ce:	d000      	beq.n	800a7d2 <HAL_I2C_Mem_Write+0x32>
 800a7d0:	e10c      	b.n	800a9ec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d004      	beq.n	800a7e2 <HAL_I2C_Mem_Write+0x42>
 800a7d8:	232c      	movs	r3, #44	; 0x2c
 800a7da:	18fb      	adds	r3, r7, r3
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d105      	bne.n	800a7ee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2280      	movs	r2, #128	; 0x80
 800a7e6:	0092      	lsls	r2, r2, #2
 800a7e8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e0ff      	b.n	800a9ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2240      	movs	r2, #64	; 0x40
 800a7f2:	5c9b      	ldrb	r3, [r3, r2]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d101      	bne.n	800a7fc <HAL_I2C_Mem_Write+0x5c>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e0f8      	b.n	800a9ee <HAL_I2C_Mem_Write+0x24e>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2240      	movs	r2, #64	; 0x40
 800a800:	2101      	movs	r1, #1
 800a802:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a804:	f7fe fa94 	bl	8008d30 <HAL_GetTick>
 800a808:	0003      	movs	r3, r0
 800a80a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a80c:	2380      	movs	r3, #128	; 0x80
 800a80e:	0219      	lsls	r1, r3, #8
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2319      	movs	r3, #25
 800a818:	2201      	movs	r2, #1
 800a81a:	f000 fb0b 	bl	800ae34 <I2C_WaitOnFlagUntilTimeout>
 800a81e:	1e03      	subs	r3, r0, #0
 800a820:	d001      	beq.n	800a826 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e0e3      	b.n	800a9ee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2241      	movs	r2, #65	; 0x41
 800a82a:	2121      	movs	r1, #33	; 0x21
 800a82c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2242      	movs	r2, #66	; 0x42
 800a832:	2140      	movs	r1, #64	; 0x40
 800a834:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	222c      	movs	r2, #44	; 0x2c
 800a846:	18ba      	adds	r2, r7, r2
 800a848:	8812      	ldrh	r2, [r2, #0]
 800a84a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a852:	1dbb      	adds	r3, r7, #6
 800a854:	881c      	ldrh	r4, [r3, #0]
 800a856:	2308      	movs	r3, #8
 800a858:	18fb      	adds	r3, r7, r3
 800a85a:	881a      	ldrh	r2, [r3, #0]
 800a85c:	230a      	movs	r3, #10
 800a85e:	18fb      	adds	r3, r7, r3
 800a860:	8819      	ldrh	r1, [r3, #0]
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	0023      	movs	r3, r4
 800a86e:	f000 f9f9 	bl	800ac64 <I2C_RequestMemoryWrite>
 800a872:	1e03      	subs	r3, r0, #0
 800a874:	d005      	beq.n	800a882 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2240      	movs	r2, #64	; 0x40
 800a87a:	2100      	movs	r1, #0
 800a87c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e0b5      	b.n	800a9ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a886:	b29b      	uxth	r3, r3
 800a888:	2bff      	cmp	r3, #255	; 0xff
 800a88a:	d911      	bls.n	800a8b0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	22ff      	movs	r2, #255	; 0xff
 800a890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a896:	b2da      	uxtb	r2, r3
 800a898:	2380      	movs	r3, #128	; 0x80
 800a89a:	045c      	lsls	r4, r3, #17
 800a89c:	230a      	movs	r3, #10
 800a89e:	18fb      	adds	r3, r7, r3
 800a8a0:	8819      	ldrh	r1, [r3, #0]
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	0023      	movs	r3, r4
 800a8aa:	f000 fc7d 	bl	800b1a8 <I2C_TransferConfig>
 800a8ae:	e012      	b.n	800a8d6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	2380      	movs	r3, #128	; 0x80
 800a8c2:	049c      	lsls	r4, r3, #18
 800a8c4:	230a      	movs	r3, #10
 800a8c6:	18fb      	adds	r3, r7, r3
 800a8c8:	8819      	ldrh	r1, [r3, #0]
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	0023      	movs	r3, r4
 800a8d2:	f000 fc69 	bl	800b1a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	0018      	movs	r0, r3
 800a8de:	f000 fae8 	bl	800aeb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800a8e2:	1e03      	subs	r3, r0, #0
 800a8e4:	d001      	beq.n	800a8ea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e081      	b.n	800a9ee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	781a      	ldrb	r2, [r3, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a904:	b29b      	uxth	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	b29a      	uxth	r2, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a912:	3b01      	subs	r3, #1
 800a914:	b29a      	uxth	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a91e:	b29b      	uxth	r3, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d03a      	beq.n	800a99a <HAL_I2C_Mem_Write+0x1fa>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d136      	bne.n	800a99a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	0013      	movs	r3, r2
 800a936:	2200      	movs	r2, #0
 800a938:	2180      	movs	r1, #128	; 0x80
 800a93a:	f000 fa7b 	bl	800ae34 <I2C_WaitOnFlagUntilTimeout>
 800a93e:	1e03      	subs	r3, r0, #0
 800a940:	d001      	beq.n	800a946 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e053      	b.n	800a9ee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	2bff      	cmp	r3, #255	; 0xff
 800a94e:	d911      	bls.n	800a974 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	22ff      	movs	r2, #255	; 0xff
 800a954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	2380      	movs	r3, #128	; 0x80
 800a95e:	045c      	lsls	r4, r3, #17
 800a960:	230a      	movs	r3, #10
 800a962:	18fb      	adds	r3, r7, r3
 800a964:	8819      	ldrh	r1, [r3, #0]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	2300      	movs	r3, #0
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	0023      	movs	r3, r4
 800a96e:	f000 fc1b 	bl	800b1a8 <I2C_TransferConfig>
 800a972:	e012      	b.n	800a99a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a978:	b29a      	uxth	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a982:	b2da      	uxtb	r2, r3
 800a984:	2380      	movs	r3, #128	; 0x80
 800a986:	049c      	lsls	r4, r3, #18
 800a988:	230a      	movs	r3, #10
 800a98a:	18fb      	adds	r3, r7, r3
 800a98c:	8819      	ldrh	r1, [r3, #0]
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	2300      	movs	r3, #0
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	0023      	movs	r3, r4
 800a996:	f000 fc07 	bl	800b1a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d198      	bne.n	800a8d6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	0018      	movs	r0, r3
 800a9ac:	f000 fac0 	bl	800af30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a9b0:	1e03      	subs	r3, r0, #0
 800a9b2:	d001      	beq.n	800a9b8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e01a      	b.n	800a9ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2220      	movs	r2, #32
 800a9be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	490b      	ldr	r1, [pc, #44]	; (800a9f8 <HAL_I2C_Mem_Write+0x258>)
 800a9cc:	400a      	ands	r2, r1
 800a9ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2241      	movs	r2, #65	; 0x41
 800a9d4:	2120      	movs	r1, #32
 800a9d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2242      	movs	r2, #66	; 0x42
 800a9dc:	2100      	movs	r1, #0
 800a9de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2240      	movs	r2, #64	; 0x40
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e000      	b.n	800a9ee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800a9ec:	2302      	movs	r3, #2
  }
}
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	b007      	add	sp, #28
 800a9f4:	bd90      	pop	{r4, r7, pc}
 800a9f6:	46c0      	nop			; (mov r8, r8)
 800a9f8:	fe00e800 	.word	0xfe00e800

0800a9fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9fc:	b590      	push	{r4, r7, lr}
 800a9fe:	b089      	sub	sp, #36	; 0x24
 800aa00:	af02      	add	r7, sp, #8
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	000c      	movs	r4, r1
 800aa06:	0010      	movs	r0, r2
 800aa08:	0019      	movs	r1, r3
 800aa0a:	230a      	movs	r3, #10
 800aa0c:	18fb      	adds	r3, r7, r3
 800aa0e:	1c22      	adds	r2, r4, #0
 800aa10:	801a      	strh	r2, [r3, #0]
 800aa12:	2308      	movs	r3, #8
 800aa14:	18fb      	adds	r3, r7, r3
 800aa16:	1c02      	adds	r2, r0, #0
 800aa18:	801a      	strh	r2, [r3, #0]
 800aa1a:	1dbb      	adds	r3, r7, #6
 800aa1c:	1c0a      	adds	r2, r1, #0
 800aa1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2241      	movs	r2, #65	; 0x41
 800aa24:	5c9b      	ldrb	r3, [r3, r2]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b20      	cmp	r3, #32
 800aa2a:	d000      	beq.n	800aa2e <HAL_I2C_Mem_Read+0x32>
 800aa2c:	e110      	b.n	800ac50 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <HAL_I2C_Mem_Read+0x42>
 800aa34:	232c      	movs	r3, #44	; 0x2c
 800aa36:	18fb      	adds	r3, r7, r3
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d105      	bne.n	800aa4a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2280      	movs	r2, #128	; 0x80
 800aa42:	0092      	lsls	r2, r2, #2
 800aa44:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e103      	b.n	800ac52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2240      	movs	r2, #64	; 0x40
 800aa4e:	5c9b      	ldrb	r3, [r3, r2]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d101      	bne.n	800aa58 <HAL_I2C_Mem_Read+0x5c>
 800aa54:	2302      	movs	r3, #2
 800aa56:	e0fc      	b.n	800ac52 <HAL_I2C_Mem_Read+0x256>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2240      	movs	r2, #64	; 0x40
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aa60:	f7fe f966 	bl	8008d30 <HAL_GetTick>
 800aa64:	0003      	movs	r3, r0
 800aa66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aa68:	2380      	movs	r3, #128	; 0x80
 800aa6a:	0219      	lsls	r1, r3, #8
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	2319      	movs	r3, #25
 800aa74:	2201      	movs	r2, #1
 800aa76:	f000 f9dd 	bl	800ae34 <I2C_WaitOnFlagUntilTimeout>
 800aa7a:	1e03      	subs	r3, r0, #0
 800aa7c:	d001      	beq.n	800aa82 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e0e7      	b.n	800ac52 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2241      	movs	r2, #65	; 0x41
 800aa86:	2122      	movs	r1, #34	; 0x22
 800aa88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2242      	movs	r2, #66	; 0x42
 800aa8e:	2140      	movs	r1, #64	; 0x40
 800aa90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	222c      	movs	r2, #44	; 0x2c
 800aaa2:	18ba      	adds	r2, r7, r2
 800aaa4:	8812      	ldrh	r2, [r2, #0]
 800aaa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aaae:	1dbb      	adds	r3, r7, #6
 800aab0:	881c      	ldrh	r4, [r3, #0]
 800aab2:	2308      	movs	r3, #8
 800aab4:	18fb      	adds	r3, r7, r3
 800aab6:	881a      	ldrh	r2, [r3, #0]
 800aab8:	230a      	movs	r3, #10
 800aaba:	18fb      	adds	r3, r7, r3
 800aabc:	8819      	ldrh	r1, [r3, #0]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	0023      	movs	r3, r4
 800aaca:	f000 f92f 	bl	800ad2c <I2C_RequestMemoryRead>
 800aace:	1e03      	subs	r3, r0, #0
 800aad0:	d005      	beq.n	800aade <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2240      	movs	r2, #64	; 0x40
 800aad6:	2100      	movs	r1, #0
 800aad8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e0b9      	b.n	800ac52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	2bff      	cmp	r3, #255	; 0xff
 800aae6:	d911      	bls.n	800ab0c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	22ff      	movs	r2, #255	; 0xff
 800aaec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	2380      	movs	r3, #128	; 0x80
 800aaf6:	045c      	lsls	r4, r3, #17
 800aaf8:	230a      	movs	r3, #10
 800aafa:	18fb      	adds	r3, r7, r3
 800aafc:	8819      	ldrh	r1, [r3, #0]
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	4b56      	ldr	r3, [pc, #344]	; (800ac5c <HAL_I2C_Mem_Read+0x260>)
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	0023      	movs	r3, r4
 800ab06:	f000 fb4f 	bl	800b1a8 <I2C_TransferConfig>
 800ab0a:	e012      	b.n	800ab32 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	2380      	movs	r3, #128	; 0x80
 800ab1e:	049c      	lsls	r4, r3, #18
 800ab20:	230a      	movs	r3, #10
 800ab22:	18fb      	adds	r3, r7, r3
 800ab24:	8819      	ldrh	r1, [r3, #0]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	4b4c      	ldr	r3, [pc, #304]	; (800ac5c <HAL_I2C_Mem_Read+0x260>)
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	0023      	movs	r3, r4
 800ab2e:	f000 fb3b 	bl	800b1a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ab32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	0013      	movs	r3, r2
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2104      	movs	r1, #4
 800ab40:	f000 f978 	bl	800ae34 <I2C_WaitOnFlagUntilTimeout>
 800ab44:	1e03      	subs	r3, r0, #0
 800ab46:	d001      	beq.n	800ab4c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e082      	b.n	800ac52 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab56:	b2d2      	uxtb	r2, r2
 800ab58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d03a      	beq.n	800abfe <HAL_I2C_Mem_Read+0x202>
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d136      	bne.n	800abfe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	0013      	movs	r3, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2180      	movs	r1, #128	; 0x80
 800ab9e:	f000 f949 	bl	800ae34 <I2C_WaitOnFlagUntilTimeout>
 800aba2:	1e03      	subs	r3, r0, #0
 800aba4:	d001      	beq.n	800abaa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e053      	b.n	800ac52 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abae:	b29b      	uxth	r3, r3
 800abb0:	2bff      	cmp	r3, #255	; 0xff
 800abb2:	d911      	bls.n	800abd8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	22ff      	movs	r2, #255	; 0xff
 800abb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	2380      	movs	r3, #128	; 0x80
 800abc2:	045c      	lsls	r4, r3, #17
 800abc4:	230a      	movs	r3, #10
 800abc6:	18fb      	adds	r3, r7, r3
 800abc8:	8819      	ldrh	r1, [r3, #0]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	2300      	movs	r3, #0
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	0023      	movs	r3, r4
 800abd2:	f000 fae9 	bl	800b1a8 <I2C_TransferConfig>
 800abd6:	e012      	b.n	800abfe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abdc:	b29a      	uxth	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	2380      	movs	r3, #128	; 0x80
 800abea:	049c      	lsls	r4, r3, #18
 800abec:	230a      	movs	r3, #10
 800abee:	18fb      	adds	r3, r7, r3
 800abf0:	8819      	ldrh	r1, [r3, #0]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	2300      	movs	r3, #0
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	0023      	movs	r3, r4
 800abfa:	f000 fad5 	bl	800b1a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d194      	bne.n	800ab32 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f000 f98e 	bl	800af30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac14:	1e03      	subs	r3, r0, #0
 800ac16:	d001      	beq.n	800ac1c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e01a      	b.n	800ac52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2220      	movs	r2, #32
 800ac22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	490c      	ldr	r1, [pc, #48]	; (800ac60 <HAL_I2C_Mem_Read+0x264>)
 800ac30:	400a      	ands	r2, r1
 800ac32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2241      	movs	r2, #65	; 0x41
 800ac38:	2120      	movs	r1, #32
 800ac3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2242      	movs	r2, #66	; 0x42
 800ac40:	2100      	movs	r1, #0
 800ac42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2240      	movs	r2, #64	; 0x40
 800ac48:	2100      	movs	r1, #0
 800ac4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	e000      	b.n	800ac52 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800ac50:	2302      	movs	r3, #2
  }
}
 800ac52:	0018      	movs	r0, r3
 800ac54:	46bd      	mov	sp, r7
 800ac56:	b007      	add	sp, #28
 800ac58:	bd90      	pop	{r4, r7, pc}
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	80002400 	.word	0x80002400
 800ac60:	fe00e800 	.word	0xfe00e800

0800ac64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ac64:	b5b0      	push	{r4, r5, r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	000c      	movs	r4, r1
 800ac6e:	0010      	movs	r0, r2
 800ac70:	0019      	movs	r1, r3
 800ac72:	250a      	movs	r5, #10
 800ac74:	197b      	adds	r3, r7, r5
 800ac76:	1c22      	adds	r2, r4, #0
 800ac78:	801a      	strh	r2, [r3, #0]
 800ac7a:	2308      	movs	r3, #8
 800ac7c:	18fb      	adds	r3, r7, r3
 800ac7e:	1c02      	adds	r2, r0, #0
 800ac80:	801a      	strh	r2, [r3, #0]
 800ac82:	1dbb      	adds	r3, r7, #6
 800ac84:	1c0a      	adds	r2, r1, #0
 800ac86:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ac88:	1dbb      	adds	r3, r7, #6
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	2380      	movs	r3, #128	; 0x80
 800ac90:	045c      	lsls	r4, r3, #17
 800ac92:	197b      	adds	r3, r7, r5
 800ac94:	8819      	ldrh	r1, [r3, #0]
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	4b23      	ldr	r3, [pc, #140]	; (800ad28 <I2C_RequestMemoryWrite+0xc4>)
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	0023      	movs	r3, r4
 800ac9e:	f000 fa83 	bl	800b1a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca4:	6a39      	ldr	r1, [r7, #32]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	0018      	movs	r0, r3
 800acaa:	f000 f902 	bl	800aeb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800acae:	1e03      	subs	r3, r0, #0
 800acb0:	d001      	beq.n	800acb6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e033      	b.n	800ad1e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800acb6:	1dbb      	adds	r3, r7, #6
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d107      	bne.n	800acce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800acbe:	2308      	movs	r3, #8
 800acc0:	18fb      	adds	r3, r7, r3
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	629a      	str	r2, [r3, #40]	; 0x28
 800accc:	e019      	b.n	800ad02 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800acce:	2308      	movs	r3, #8
 800acd0:	18fb      	adds	r3, r7, r3
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ace0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace2:	6a39      	ldr	r1, [r7, #32]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	0018      	movs	r0, r3
 800ace8:	f000 f8e3 	bl	800aeb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800acec:	1e03      	subs	r3, r0, #0
 800acee:	d001      	beq.n	800acf4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e014      	b.n	800ad1e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800acf4:	2308      	movs	r3, #8
 800acf6:	18fb      	adds	r3, r7, r3
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ad02:	6a3a      	ldr	r2, [r7, #32]
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	0013      	movs	r3, r2
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	2180      	movs	r1, #128	; 0x80
 800ad10:	f000 f890 	bl	800ae34 <I2C_WaitOnFlagUntilTimeout>
 800ad14:	1e03      	subs	r3, r0, #0
 800ad16:	d001      	beq.n	800ad1c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e000      	b.n	800ad1e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	0018      	movs	r0, r3
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b004      	add	sp, #16
 800ad24:	bdb0      	pop	{r4, r5, r7, pc}
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	80002000 	.word	0x80002000

0800ad2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ad2c:	b5b0      	push	{r4, r5, r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af02      	add	r7, sp, #8
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	000c      	movs	r4, r1
 800ad36:	0010      	movs	r0, r2
 800ad38:	0019      	movs	r1, r3
 800ad3a:	250a      	movs	r5, #10
 800ad3c:	197b      	adds	r3, r7, r5
 800ad3e:	1c22      	adds	r2, r4, #0
 800ad40:	801a      	strh	r2, [r3, #0]
 800ad42:	2308      	movs	r3, #8
 800ad44:	18fb      	adds	r3, r7, r3
 800ad46:	1c02      	adds	r2, r0, #0
 800ad48:	801a      	strh	r2, [r3, #0]
 800ad4a:	1dbb      	adds	r3, r7, #6
 800ad4c:	1c0a      	adds	r2, r1, #0
 800ad4e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ad50:	1dbb      	adds	r3, r7, #6
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	197b      	adds	r3, r7, r5
 800ad58:	8819      	ldrh	r1, [r3, #0]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	4b23      	ldr	r3, [pc, #140]	; (800adec <I2C_RequestMemoryRead+0xc0>)
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	2300      	movs	r3, #0
 800ad62:	f000 fa21 	bl	800b1a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad68:	6a39      	ldr	r1, [r7, #32]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	f000 f8a0 	bl	800aeb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad72:	1e03      	subs	r3, r0, #0
 800ad74:	d001      	beq.n	800ad7a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e033      	b.n	800ade2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad7a:	1dbb      	adds	r3, r7, #6
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d107      	bne.n	800ad92 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad82:	2308      	movs	r3, #8
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	629a      	str	r2, [r3, #40]	; 0x28
 800ad90:	e019      	b.n	800adc6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ad92:	2308      	movs	r3, #8
 800ad94:	18fb      	adds	r3, r7, r3
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	0a1b      	lsrs	r3, r3, #8
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ada4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada6:	6a39      	ldr	r1, [r7, #32]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	0018      	movs	r0, r3
 800adac:	f000 f881 	bl	800aeb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800adb0:	1e03      	subs	r3, r0, #0
 800adb2:	d001      	beq.n	800adb8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e014      	b.n	800ade2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800adb8:	2308      	movs	r3, #8
 800adba:	18fb      	adds	r3, r7, r3
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800adc6:	6a3a      	ldr	r2, [r7, #32]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	0013      	movs	r3, r2
 800add0:	2200      	movs	r2, #0
 800add2:	2140      	movs	r1, #64	; 0x40
 800add4:	f000 f82e 	bl	800ae34 <I2C_WaitOnFlagUntilTimeout>
 800add8:	1e03      	subs	r3, r0, #0
 800adda:	d001      	beq.n	800ade0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e000      	b.n	800ade2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	0018      	movs	r0, r3
 800ade4:	46bd      	mov	sp, r7
 800ade6:	b004      	add	sp, #16
 800ade8:	bdb0      	pop	{r4, r5, r7, pc}
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	80002000 	.word	0x80002000

0800adf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	2202      	movs	r2, #2
 800ae00:	4013      	ands	r3, r2
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d103      	bne.n	800ae0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	2201      	movs	r2, #1
 800ae16:	4013      	ands	r3, r2
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d007      	beq.n	800ae2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	699a      	ldr	r2, [r3, #24]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2101      	movs	r1, #1
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	619a      	str	r2, [r3, #24]
  }
}
 800ae2c:	46c0      	nop			; (mov r8, r8)
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	b002      	add	sp, #8
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	603b      	str	r3, [r7, #0]
 800ae40:	1dfb      	adds	r3, r7, #7
 800ae42:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae44:	e021      	b.n	800ae8a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	d01e      	beq.n	800ae8a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae4c:	f7fd ff70 	bl	8008d30 <HAL_GetTick>
 800ae50:	0002      	movs	r2, r0
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d302      	bcc.n	800ae62 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d113      	bne.n	800ae8a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae66:	2220      	movs	r2, #32
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2241      	movs	r2, #65	; 0x41
 800ae72:	2120      	movs	r1, #32
 800ae74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2242      	movs	r2, #66	; 0x42
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2240      	movs	r2, #64	; 0x40
 800ae82:	2100      	movs	r1, #0
 800ae84:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e00f      	b.n	800aeaa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	4013      	ands	r3, r2
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	425a      	negs	r2, r3
 800ae9a:	4153      	adcs	r3, r2
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	001a      	movs	r2, r3
 800aea0:	1dfb      	adds	r3, r7, #7
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d0ce      	beq.n	800ae46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	0018      	movs	r0, r3
 800aeac:	46bd      	mov	sp, r7
 800aeae:	b004      	add	sp, #16
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aebe:	e02b      	b.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	0018      	movs	r0, r3
 800aec8:	f000 f86e 	bl	800afa8 <I2C_IsErrorOccurred>
 800aecc:	1e03      	subs	r3, r0, #0
 800aece:	d001      	beq.n	800aed4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e029      	b.n	800af28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	3301      	adds	r3, #1
 800aed8:	d01e      	beq.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeda:	f7fd ff29 	bl	8008d30 <HAL_GetTick>
 800aede:	0002      	movs	r2, r0
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d302      	bcc.n	800aef0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d113      	bne.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef4:	2220      	movs	r2, #32
 800aef6:	431a      	orrs	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2241      	movs	r2, #65	; 0x41
 800af00:	2120      	movs	r1, #32
 800af02:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2242      	movs	r2, #66	; 0x42
 800af08:	2100      	movs	r1, #0
 800af0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2240      	movs	r2, #64	; 0x40
 800af10:	2100      	movs	r1, #0
 800af12:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e007      	b.n	800af28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	2202      	movs	r2, #2
 800af20:	4013      	ands	r3, r2
 800af22:	2b02      	cmp	r3, #2
 800af24:	d1cc      	bne.n	800aec0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	0018      	movs	r0, r3
 800af2a:	46bd      	mov	sp, r7
 800af2c:	b004      	add	sp, #16
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af3c:	e028      	b.n	800af90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	0018      	movs	r0, r3
 800af46:	f000 f82f 	bl	800afa8 <I2C_IsErrorOccurred>
 800af4a:	1e03      	subs	r3, r0, #0
 800af4c:	d001      	beq.n	800af52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e026      	b.n	800afa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af52:	f7fd feed 	bl	8008d30 <HAL_GetTick>
 800af56:	0002      	movs	r2, r0
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d302      	bcc.n	800af68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d113      	bne.n	800af90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6c:	2220      	movs	r2, #32
 800af6e:	431a      	orrs	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2241      	movs	r2, #65	; 0x41
 800af78:	2120      	movs	r1, #32
 800af7a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2242      	movs	r2, #66	; 0x42
 800af80:	2100      	movs	r1, #0
 800af82:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2240      	movs	r2, #64	; 0x40
 800af88:	2100      	movs	r1, #0
 800af8a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e007      	b.n	800afa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	2220      	movs	r2, #32
 800af98:	4013      	ands	r3, r2
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	d1cf      	bne.n	800af3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	0018      	movs	r0, r3
 800afa2:	46bd      	mov	sp, r7
 800afa4:	b004      	add	sp, #16
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afa8:	b590      	push	{r4, r7, lr}
 800afaa:	b08b      	sub	sp, #44	; 0x2c
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afb4:	2327      	movs	r3, #39	; 0x27
 800afb6:	18fb      	adds	r3, r7, r3
 800afb8:	2200      	movs	r2, #0
 800afba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800afc4:	2300      	movs	r3, #0
 800afc6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	2210      	movs	r2, #16
 800afd0:	4013      	ands	r3, r2
 800afd2:	d100      	bne.n	800afd6 <I2C_IsErrorOccurred+0x2e>
 800afd4:	e082      	b.n	800b0dc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2210      	movs	r2, #16
 800afdc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800afde:	e060      	b.n	800b0a2 <I2C_IsErrorOccurred+0xfa>
 800afe0:	2427      	movs	r4, #39	; 0x27
 800afe2:	193b      	adds	r3, r7, r4
 800afe4:	193a      	adds	r2, r7, r4
 800afe6:	7812      	ldrb	r2, [r2, #0]
 800afe8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	3301      	adds	r3, #1
 800afee:	d058      	beq.n	800b0a2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aff0:	f7fd fe9e 	bl	8008d30 <HAL_GetTick>
 800aff4:	0002      	movs	r2, r0
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	429a      	cmp	r2, r3
 800affe:	d306      	bcc.n	800b00e <I2C_IsErrorOccurred+0x66>
 800b000:	193b      	adds	r3, r7, r4
 800b002:	193a      	adds	r2, r7, r4
 800b004:	7812      	ldrb	r2, [r2, #0]
 800b006:	701a      	strb	r2, [r3, #0]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d149      	bne.n	800b0a2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	685a      	ldr	r2, [r3, #4]
 800b014:	2380      	movs	r3, #128	; 0x80
 800b016:	01db      	lsls	r3, r3, #7
 800b018:	4013      	ands	r3, r2
 800b01a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b01c:	2013      	movs	r0, #19
 800b01e:	183b      	adds	r3, r7, r0
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	2142      	movs	r1, #66	; 0x42
 800b024:	5c52      	ldrb	r2, [r2, r1]
 800b026:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	2380      	movs	r3, #128	; 0x80
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	401a      	ands	r2, r3
 800b034:	2380      	movs	r3, #128	; 0x80
 800b036:	021b      	lsls	r3, r3, #8
 800b038:	429a      	cmp	r2, r3
 800b03a:	d126      	bne.n	800b08a <I2C_IsErrorOccurred+0xe2>
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	2380      	movs	r3, #128	; 0x80
 800b040:	01db      	lsls	r3, r3, #7
 800b042:	429a      	cmp	r2, r3
 800b044:	d021      	beq.n	800b08a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800b046:	183b      	adds	r3, r7, r0
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d01d      	beq.n	800b08a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2180      	movs	r1, #128	; 0x80
 800b05a:	01c9      	lsls	r1, r1, #7
 800b05c:	430a      	orrs	r2, r1
 800b05e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b060:	f7fd fe66 	bl	8008d30 <HAL_GetTick>
 800b064:	0003      	movs	r3, r0
 800b066:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b068:	e00f      	b.n	800b08a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b06a:	f7fd fe61 	bl	8008d30 <HAL_GetTick>
 800b06e:	0002      	movs	r2, r0
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	2b19      	cmp	r3, #25
 800b076:	d908      	bls.n	800b08a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	2220      	movs	r2, #32
 800b07c:	4313      	orrs	r3, r2
 800b07e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b080:	2327      	movs	r3, #39	; 0x27
 800b082:	18fb      	adds	r3, r7, r3
 800b084:	2201      	movs	r2, #1
 800b086:	701a      	strb	r2, [r3, #0]

              break;
 800b088:	e00b      	b.n	800b0a2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	2220      	movs	r2, #32
 800b092:	4013      	ands	r3, r2
 800b094:	2127      	movs	r1, #39	; 0x27
 800b096:	187a      	adds	r2, r7, r1
 800b098:	1879      	adds	r1, r7, r1
 800b09a:	7809      	ldrb	r1, [r1, #0]
 800b09c:	7011      	strb	r1, [r2, #0]
 800b09e:	2b20      	cmp	r3, #32
 800b0a0:	d1e3      	bne.n	800b06a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	2220      	movs	r2, #32
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	2b20      	cmp	r3, #32
 800b0ae:	d004      	beq.n	800b0ba <I2C_IsErrorOccurred+0x112>
 800b0b0:	2327      	movs	r3, #39	; 0x27
 800b0b2:	18fb      	adds	r3, r7, r3
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d092      	beq.n	800afe0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b0ba:	2327      	movs	r3, #39	; 0x27
 800b0bc:	18fb      	adds	r3, r7, r3
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d103      	bne.n	800b0cc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	2204      	movs	r2, #4
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b0d4:	2327      	movs	r3, #39	; 0x27
 800b0d6:	18fb      	adds	r3, r7, r3
 800b0d8:	2201      	movs	r2, #1
 800b0da:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b0e4:	69ba      	ldr	r2, [r7, #24]
 800b0e6:	2380      	movs	r3, #128	; 0x80
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	d00c      	beq.n	800b108 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2280      	movs	r2, #128	; 0x80
 800b0fc:	0052      	lsls	r2, r2, #1
 800b0fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b100:	2327      	movs	r3, #39	; 0x27
 800b102:	18fb      	adds	r3, r7, r3
 800b104:	2201      	movs	r2, #1
 800b106:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	2380      	movs	r3, #128	; 0x80
 800b10c:	00db      	lsls	r3, r3, #3
 800b10e:	4013      	ands	r3, r2
 800b110:	d00c      	beq.n	800b12c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	2208      	movs	r2, #8
 800b116:	4313      	orrs	r3, r2
 800b118:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2280      	movs	r2, #128	; 0x80
 800b120:	00d2      	lsls	r2, r2, #3
 800b122:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b124:	2327      	movs	r3, #39	; 0x27
 800b126:	18fb      	adds	r3, r7, r3
 800b128:	2201      	movs	r2, #1
 800b12a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	2380      	movs	r3, #128	; 0x80
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4013      	ands	r3, r2
 800b134:	d00c      	beq.n	800b150 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	2202      	movs	r2, #2
 800b13a:	4313      	orrs	r3, r2
 800b13c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2280      	movs	r2, #128	; 0x80
 800b144:	0092      	lsls	r2, r2, #2
 800b146:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b148:	2327      	movs	r3, #39	; 0x27
 800b14a:	18fb      	adds	r3, r7, r3
 800b14c:	2201      	movs	r2, #1
 800b14e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800b150:	2327      	movs	r3, #39	; 0x27
 800b152:	18fb      	adds	r3, r7, r3
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d01d      	beq.n	800b196 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	0018      	movs	r0, r3
 800b15e:	f7ff fe47 	bl	800adf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	490d      	ldr	r1, [pc, #52]	; (800b1a4 <I2C_IsErrorOccurred+0x1fc>)
 800b16e:	400a      	ands	r2, r1
 800b170:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	431a      	orrs	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2241      	movs	r2, #65	; 0x41
 800b182:	2120      	movs	r1, #32
 800b184:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2242      	movs	r2, #66	; 0x42
 800b18a:	2100      	movs	r1, #0
 800b18c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2240      	movs	r2, #64	; 0x40
 800b192:	2100      	movs	r1, #0
 800b194:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800b196:	2327      	movs	r3, #39	; 0x27
 800b198:	18fb      	adds	r3, r7, r3
 800b19a:	781b      	ldrb	r3, [r3, #0]
}
 800b19c:	0018      	movs	r0, r3
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	b00b      	add	sp, #44	; 0x2c
 800b1a2:	bd90      	pop	{r4, r7, pc}
 800b1a4:	fe00e800 	.word	0xfe00e800

0800b1a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b1a8:	b590      	push	{r4, r7, lr}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	0008      	movs	r0, r1
 800b1b2:	0011      	movs	r1, r2
 800b1b4:	607b      	str	r3, [r7, #4]
 800b1b6:	240a      	movs	r4, #10
 800b1b8:	193b      	adds	r3, r7, r4
 800b1ba:	1c02      	adds	r2, r0, #0
 800b1bc:	801a      	strh	r2, [r3, #0]
 800b1be:	2009      	movs	r0, #9
 800b1c0:	183b      	adds	r3, r7, r0
 800b1c2:	1c0a      	adds	r2, r1, #0
 800b1c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1c6:	193b      	adds	r3, r7, r4
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	059b      	lsls	r3, r3, #22
 800b1cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1ce:	183b      	adds	r3, r7, r0
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	0419      	lsls	r1, r3, #16
 800b1d4:	23ff      	movs	r3, #255	; 0xff
 800b1d6:	041b      	lsls	r3, r3, #16
 800b1d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	005b      	lsls	r3, r3, #1
 800b1e6:	085b      	lsrs	r3, r3, #1
 800b1e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1f2:	0d51      	lsrs	r1, r2, #21
 800b1f4:	2280      	movs	r2, #128	; 0x80
 800b1f6:	00d2      	lsls	r2, r2, #3
 800b1f8:	400a      	ands	r2, r1
 800b1fa:	4907      	ldr	r1, [pc, #28]	; (800b218 <I2C_TransferConfig+0x70>)
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	43d2      	mvns	r2, r2
 800b200:	401a      	ands	r2, r3
 800b202:	0011      	movs	r1, r2
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	697a      	ldr	r2, [r7, #20]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b20e:	46c0      	nop			; (mov r8, r8)
 800b210:	46bd      	mov	sp, r7
 800b212:	b007      	add	sp, #28
 800b214:	bd90      	pop	{r4, r7, pc}
 800b216:	46c0      	nop			; (mov r8, r8)
 800b218:	03ff63ff 	.word	0x03ff63ff

0800b21c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2241      	movs	r2, #65	; 0x41
 800b22a:	5c9b      	ldrb	r3, [r3, r2]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b20      	cmp	r3, #32
 800b230:	d138      	bne.n	800b2a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2240      	movs	r2, #64	; 0x40
 800b236:	5c9b      	ldrb	r3, [r3, r2]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e032      	b.n	800b2a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2240      	movs	r2, #64	; 0x40
 800b244:	2101      	movs	r1, #1
 800b246:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2241      	movs	r2, #65	; 0x41
 800b24c:	2124      	movs	r1, #36	; 0x24
 800b24e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2101      	movs	r1, #1
 800b25c:	438a      	bics	r2, r1
 800b25e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4911      	ldr	r1, [pc, #68]	; (800b2b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800b26c:	400a      	ands	r2, r1
 800b26e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6819      	ldr	r1, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	430a      	orrs	r2, r1
 800b27e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2101      	movs	r1, #1
 800b28c:	430a      	orrs	r2, r1
 800b28e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2241      	movs	r2, #65	; 0x41
 800b294:	2120      	movs	r1, #32
 800b296:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2240      	movs	r2, #64	; 0x40
 800b29c:	2100      	movs	r1, #0
 800b29e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	e000      	b.n	800b2a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b2a4:	2302      	movs	r3, #2
  }
}
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	b002      	add	sp, #8
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	46c0      	nop			; (mov r8, r8)
 800b2b0:	ffffefff 	.word	0xffffefff

0800b2b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2241      	movs	r2, #65	; 0x41
 800b2c2:	5c9b      	ldrb	r3, [r3, r2]
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b20      	cmp	r3, #32
 800b2c8:	d139      	bne.n	800b33e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2240      	movs	r2, #64	; 0x40
 800b2ce:	5c9b      	ldrb	r3, [r3, r2]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d101      	bne.n	800b2d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	e033      	b.n	800b340 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2240      	movs	r2, #64	; 0x40
 800b2dc:	2101      	movs	r1, #1
 800b2de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2241      	movs	r2, #65	; 0x41
 800b2e4:	2124      	movs	r1, #36	; 0x24
 800b2e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	438a      	bics	r2, r1
 800b2f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4a11      	ldr	r2, [pc, #68]	; (800b348 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b304:	4013      	ands	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	021b      	lsls	r3, r3, #8
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2101      	movs	r1, #1
 800b326:	430a      	orrs	r2, r1
 800b328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2241      	movs	r2, #65	; 0x41
 800b32e:	2120      	movs	r1, #32
 800b330:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2240      	movs	r2, #64	; 0x40
 800b336:	2100      	movs	r1, #0
 800b338:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	e000      	b.n	800b340 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b33e:	2302      	movs	r3, #2
  }
}
 800b340:	0018      	movs	r0, r3
 800b342:	46bd      	mov	sp, r7
 800b344:	b004      	add	sp, #16
 800b346:	bd80      	pop	{r7, pc}
 800b348:	fffff0ff 	.word	0xfffff0ff

0800b34c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b354:	4b19      	ldr	r3, [pc, #100]	; (800b3bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a19      	ldr	r2, [pc, #100]	; (800b3c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b35a:	4013      	ands	r3, r2
 800b35c:	0019      	movs	r1, r3
 800b35e:	4b17      	ldr	r3, [pc, #92]	; (800b3bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	430a      	orrs	r2, r1
 800b364:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	2380      	movs	r3, #128	; 0x80
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d11f      	bne.n	800b3b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800b370:	4b14      	ldr	r3, [pc, #80]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	0013      	movs	r3, r2
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	189b      	adds	r3, r3, r2
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	4912      	ldr	r1, [pc, #72]	; (800b3c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b37e:	0018      	movs	r0, r3
 800b380:	f7f4 fede 	bl	8000140 <__udivsi3>
 800b384:	0003      	movs	r3, r0
 800b386:	3301      	adds	r3, #1
 800b388:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b38a:	e008      	b.n	800b39e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3b01      	subs	r3, #1
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	e001      	b.n	800b39e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e009      	b.n	800b3b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b39e:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b3a0:	695a      	ldr	r2, [r3, #20]
 800b3a2:	2380      	movs	r3, #128	; 0x80
 800b3a4:	00db      	lsls	r3, r3, #3
 800b3a6:	401a      	ands	r2, r3
 800b3a8:	2380      	movs	r3, #128	; 0x80
 800b3aa:	00db      	lsls	r3, r3, #3
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d0ed      	beq.n	800b38c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b004      	add	sp, #16
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	46c0      	nop			; (mov r8, r8)
 800b3bc:	40007000 	.word	0x40007000
 800b3c0:	fffff9ff 	.word	0xfffff9ff
 800b3c4:	200000e0 	.word	0x200000e0
 800b3c8:	000f4240 	.word	0x000f4240

0800b3cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b3d0:	4b03      	ldr	r3, [pc, #12]	; (800b3e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 800b3d2:	689a      	ldr	r2, [r3, #8]
 800b3d4:	23e0      	movs	r3, #224	; 0xe0
 800b3d6:	01db      	lsls	r3, r3, #7
 800b3d8:	4013      	ands	r3, r2
}
 800b3da:	0018      	movs	r0, r3
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	40021000 	.word	0x40021000

0800b3e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b088      	sub	sp, #32
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e2f3      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	d100      	bne.n	800b402 <HAL_RCC_OscConfig+0x1e>
 800b400:	e07c      	b.n	800b4fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b402:	4bc3      	ldr	r3, [pc, #780]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	2238      	movs	r2, #56	; 0x38
 800b408:	4013      	ands	r3, r2
 800b40a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b40c:	4bc0      	ldr	r3, [pc, #768]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	2203      	movs	r2, #3
 800b412:	4013      	ands	r3, r2
 800b414:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	2b10      	cmp	r3, #16
 800b41a:	d102      	bne.n	800b422 <HAL_RCC_OscConfig+0x3e>
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d002      	beq.n	800b428 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	2b08      	cmp	r3, #8
 800b426:	d10b      	bne.n	800b440 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b428:	4bb9      	ldr	r3, [pc, #740]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	2380      	movs	r3, #128	; 0x80
 800b42e:	029b      	lsls	r3, r3, #10
 800b430:	4013      	ands	r3, r2
 800b432:	d062      	beq.n	800b4fa <HAL_RCC_OscConfig+0x116>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d15e      	bne.n	800b4fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e2ce      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	2380      	movs	r3, #128	; 0x80
 800b446:	025b      	lsls	r3, r3, #9
 800b448:	429a      	cmp	r2, r3
 800b44a:	d107      	bne.n	800b45c <HAL_RCC_OscConfig+0x78>
 800b44c:	4bb0      	ldr	r3, [pc, #704]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	4baf      	ldr	r3, [pc, #700]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b452:	2180      	movs	r1, #128	; 0x80
 800b454:	0249      	lsls	r1, r1, #9
 800b456:	430a      	orrs	r2, r1
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	e020      	b.n	800b49e <HAL_RCC_OscConfig+0xba>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	23a0      	movs	r3, #160	; 0xa0
 800b462:	02db      	lsls	r3, r3, #11
 800b464:	429a      	cmp	r2, r3
 800b466:	d10e      	bne.n	800b486 <HAL_RCC_OscConfig+0xa2>
 800b468:	4ba9      	ldr	r3, [pc, #676]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	4ba8      	ldr	r3, [pc, #672]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b46e:	2180      	movs	r1, #128	; 0x80
 800b470:	02c9      	lsls	r1, r1, #11
 800b472:	430a      	orrs	r2, r1
 800b474:	601a      	str	r2, [r3, #0]
 800b476:	4ba6      	ldr	r3, [pc, #664]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	4ba5      	ldr	r3, [pc, #660]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b47c:	2180      	movs	r1, #128	; 0x80
 800b47e:	0249      	lsls	r1, r1, #9
 800b480:	430a      	orrs	r2, r1
 800b482:	601a      	str	r2, [r3, #0]
 800b484:	e00b      	b.n	800b49e <HAL_RCC_OscConfig+0xba>
 800b486:	4ba2      	ldr	r3, [pc, #648]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	4ba1      	ldr	r3, [pc, #644]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b48c:	49a1      	ldr	r1, [pc, #644]	; (800b714 <HAL_RCC_OscConfig+0x330>)
 800b48e:	400a      	ands	r2, r1
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	4b9f      	ldr	r3, [pc, #636]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	4b9e      	ldr	r3, [pc, #632]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b498:	499f      	ldr	r1, [pc, #636]	; (800b718 <HAL_RCC_OscConfig+0x334>)
 800b49a:	400a      	ands	r2, r1
 800b49c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d014      	beq.n	800b4d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4a6:	f7fd fc43 	bl	8008d30 <HAL_GetTick>
 800b4aa:	0003      	movs	r3, r0
 800b4ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4ae:	e008      	b.n	800b4c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4b0:	f7fd fc3e 	bl	8008d30 <HAL_GetTick>
 800b4b4:	0002      	movs	r2, r0
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	2b64      	cmp	r3, #100	; 0x64
 800b4bc:	d901      	bls.n	800b4c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e28d      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4c2:	4b93      	ldr	r3, [pc, #588]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	2380      	movs	r3, #128	; 0x80
 800b4c8:	029b      	lsls	r3, r3, #10
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	d0f0      	beq.n	800b4b0 <HAL_RCC_OscConfig+0xcc>
 800b4ce:	e015      	b.n	800b4fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4d0:	f7fd fc2e 	bl	8008d30 <HAL_GetTick>
 800b4d4:	0003      	movs	r3, r0
 800b4d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b4d8:	e008      	b.n	800b4ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4da:	f7fd fc29 	bl	8008d30 <HAL_GetTick>
 800b4de:	0002      	movs	r2, r0
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	2b64      	cmp	r3, #100	; 0x64
 800b4e6:	d901      	bls.n	800b4ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e278      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b4ec:	4b88      	ldr	r3, [pc, #544]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	2380      	movs	r3, #128	; 0x80
 800b4f2:	029b      	lsls	r3, r3, #10
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	d1f0      	bne.n	800b4da <HAL_RCC_OscConfig+0xf6>
 800b4f8:	e000      	b.n	800b4fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2202      	movs	r2, #2
 800b502:	4013      	ands	r3, r2
 800b504:	d100      	bne.n	800b508 <HAL_RCC_OscConfig+0x124>
 800b506:	e099      	b.n	800b63c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b508:	4b81      	ldr	r3, [pc, #516]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	2238      	movs	r2, #56	; 0x38
 800b50e:	4013      	ands	r3, r2
 800b510:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b512:	4b7f      	ldr	r3, [pc, #508]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	2203      	movs	r2, #3
 800b518:	4013      	ands	r3, r2
 800b51a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	2b10      	cmp	r3, #16
 800b520:	d102      	bne.n	800b528 <HAL_RCC_OscConfig+0x144>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b02      	cmp	r3, #2
 800b526:	d002      	beq.n	800b52e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d135      	bne.n	800b59a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b52e:	4b78      	ldr	r3, [pc, #480]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	2380      	movs	r3, #128	; 0x80
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	4013      	ands	r3, r2
 800b538:	d005      	beq.n	800b546 <HAL_RCC_OscConfig+0x162>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e24b      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b546:	4b72      	ldr	r3, [pc, #456]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	4a74      	ldr	r2, [pc, #464]	; (800b71c <HAL_RCC_OscConfig+0x338>)
 800b54c:	4013      	ands	r3, r2
 800b54e:	0019      	movs	r1, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	021a      	lsls	r2, r3, #8
 800b556:	4b6e      	ldr	r3, [pc, #440]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b558:	430a      	orrs	r2, r1
 800b55a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d112      	bne.n	800b588 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b562:	4b6b      	ldr	r3, [pc, #428]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a6e      	ldr	r2, [pc, #440]	; (800b720 <HAL_RCC_OscConfig+0x33c>)
 800b568:	4013      	ands	r3, r2
 800b56a:	0019      	movs	r1, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691a      	ldr	r2, [r3, #16]
 800b570:	4b67      	ldr	r3, [pc, #412]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b572:	430a      	orrs	r2, r1
 800b574:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b576:	4b66      	ldr	r3, [pc, #408]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	0adb      	lsrs	r3, r3, #11
 800b57c:	2207      	movs	r2, #7
 800b57e:	4013      	ands	r3, r2
 800b580:	4a68      	ldr	r2, [pc, #416]	; (800b724 <HAL_RCC_OscConfig+0x340>)
 800b582:	40da      	lsrs	r2, r3
 800b584:	4b68      	ldr	r3, [pc, #416]	; (800b728 <HAL_RCC_OscConfig+0x344>)
 800b586:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b588:	4b68      	ldr	r3, [pc, #416]	; (800b72c <HAL_RCC_OscConfig+0x348>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	0018      	movs	r0, r3
 800b58e:	f7fd f9b7 	bl	8008900 <HAL_InitTick>
 800b592:	1e03      	subs	r3, r0, #0
 800b594:	d051      	beq.n	800b63a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	e221      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d030      	beq.n	800b604 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b5a2:	4b5b      	ldr	r3, [pc, #364]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a5e      	ldr	r2, [pc, #376]	; (800b720 <HAL_RCC_OscConfig+0x33c>)
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	0019      	movs	r1, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	691a      	ldr	r2, [r3, #16]
 800b5b0:	4b57      	ldr	r3, [pc, #348]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b5b6:	4b56      	ldr	r3, [pc, #344]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	4b55      	ldr	r3, [pc, #340]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b5bc:	2180      	movs	r1, #128	; 0x80
 800b5be:	0049      	lsls	r1, r1, #1
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5c4:	f7fd fbb4 	bl	8008d30 <HAL_GetTick>
 800b5c8:	0003      	movs	r3, r0
 800b5ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5cc:	e008      	b.n	800b5e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5ce:	f7fd fbaf 	bl	8008d30 <HAL_GetTick>
 800b5d2:	0002      	movs	r2, r0
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d901      	bls.n	800b5e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e1fe      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5e0:	4b4b      	ldr	r3, [pc, #300]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	2380      	movs	r3, #128	; 0x80
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	d0f0      	beq.n	800b5ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5ec:	4b48      	ldr	r3, [pc, #288]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	4a4a      	ldr	r2, [pc, #296]	; (800b71c <HAL_RCC_OscConfig+0x338>)
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	0019      	movs	r1, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	021a      	lsls	r2, r3, #8
 800b5fc:	4b44      	ldr	r3, [pc, #272]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b5fe:	430a      	orrs	r2, r1
 800b600:	605a      	str	r2, [r3, #4]
 800b602:	e01b      	b.n	800b63c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b604:	4b42      	ldr	r3, [pc, #264]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	4b41      	ldr	r3, [pc, #260]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b60a:	4949      	ldr	r1, [pc, #292]	; (800b730 <HAL_RCC_OscConfig+0x34c>)
 800b60c:	400a      	ands	r2, r1
 800b60e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b610:	f7fd fb8e 	bl	8008d30 <HAL_GetTick>
 800b614:	0003      	movs	r3, r0
 800b616:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b618:	e008      	b.n	800b62c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b61a:	f7fd fb89 	bl	8008d30 <HAL_GetTick>
 800b61e:	0002      	movs	r2, r0
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	d901      	bls.n	800b62c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e1d8      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b62c:	4b38      	ldr	r3, [pc, #224]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	2380      	movs	r3, #128	; 0x80
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	4013      	ands	r3, r2
 800b636:	d1f0      	bne.n	800b61a <HAL_RCC_OscConfig+0x236>
 800b638:	e000      	b.n	800b63c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b63a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2208      	movs	r2, #8
 800b642:	4013      	ands	r3, r2
 800b644:	d047      	beq.n	800b6d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b646:	4b32      	ldr	r3, [pc, #200]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	2238      	movs	r2, #56	; 0x38
 800b64c:	4013      	ands	r3, r2
 800b64e:	2b18      	cmp	r3, #24
 800b650:	d10a      	bne.n	800b668 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b652:	4b2f      	ldr	r3, [pc, #188]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b656:	2202      	movs	r2, #2
 800b658:	4013      	ands	r3, r2
 800b65a:	d03c      	beq.n	800b6d6 <HAL_RCC_OscConfig+0x2f2>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d138      	bne.n	800b6d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e1ba      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d019      	beq.n	800b6a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b670:	4b27      	ldr	r3, [pc, #156]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b672:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b674:	4b26      	ldr	r3, [pc, #152]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b676:	2101      	movs	r1, #1
 800b678:	430a      	orrs	r2, r1
 800b67a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b67c:	f7fd fb58 	bl	8008d30 <HAL_GetTick>
 800b680:	0003      	movs	r3, r0
 800b682:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b684:	e008      	b.n	800b698 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b686:	f7fd fb53 	bl	8008d30 <HAL_GetTick>
 800b68a:	0002      	movs	r2, r0
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	2b02      	cmp	r3, #2
 800b692:	d901      	bls.n	800b698 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e1a2      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b698:	4b1d      	ldr	r3, [pc, #116]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b69a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b69c:	2202      	movs	r2, #2
 800b69e:	4013      	ands	r3, r2
 800b6a0:	d0f1      	beq.n	800b686 <HAL_RCC_OscConfig+0x2a2>
 800b6a2:	e018      	b.n	800b6d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b6a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b6a8:	4b19      	ldr	r3, [pc, #100]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	438a      	bics	r2, r1
 800b6ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b0:	f7fd fb3e 	bl	8008d30 <HAL_GetTick>
 800b6b4:	0003      	movs	r3, r0
 800b6b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6b8:	e008      	b.n	800b6cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6ba:	f7fd fb39 	bl	8008d30 <HAL_GetTick>
 800b6be:	0002      	movs	r2, r0
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d901      	bls.n	800b6cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e188      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6cc:	4b10      	ldr	r3, [pc, #64]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b6ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	d1f1      	bne.n	800b6ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2204      	movs	r2, #4
 800b6dc:	4013      	ands	r3, r2
 800b6de:	d100      	bne.n	800b6e2 <HAL_RCC_OscConfig+0x2fe>
 800b6e0:	e0c6      	b.n	800b870 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6e2:	231f      	movs	r3, #31
 800b6e4:	18fb      	adds	r3, r7, r3
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b6ea:	4b09      	ldr	r3, [pc, #36]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	2238      	movs	r2, #56	; 0x38
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	2b20      	cmp	r3, #32
 800b6f4:	d11e      	bne.n	800b734 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b6f6:	4b06      	ldr	r3, [pc, #24]	; (800b710 <HAL_RCC_OscConfig+0x32c>)
 800b6f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6fa:	2202      	movs	r2, #2
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	d100      	bne.n	800b702 <HAL_RCC_OscConfig+0x31e>
 800b700:	e0b6      	b.n	800b870 <HAL_RCC_OscConfig+0x48c>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d000      	beq.n	800b70c <HAL_RCC_OscConfig+0x328>
 800b70a:	e0b1      	b.n	800b870 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e166      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
 800b710:	40021000 	.word	0x40021000
 800b714:	fffeffff 	.word	0xfffeffff
 800b718:	fffbffff 	.word	0xfffbffff
 800b71c:	ffff80ff 	.word	0xffff80ff
 800b720:	ffffc7ff 	.word	0xffffc7ff
 800b724:	00f42400 	.word	0x00f42400
 800b728:	200000e0 	.word	0x200000e0
 800b72c:	200000e4 	.word	0x200000e4
 800b730:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b734:	4bac      	ldr	r3, [pc, #688]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b738:	2380      	movs	r3, #128	; 0x80
 800b73a:	055b      	lsls	r3, r3, #21
 800b73c:	4013      	ands	r3, r2
 800b73e:	d101      	bne.n	800b744 <HAL_RCC_OscConfig+0x360>
 800b740:	2301      	movs	r3, #1
 800b742:	e000      	b.n	800b746 <HAL_RCC_OscConfig+0x362>
 800b744:	2300      	movs	r3, #0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d011      	beq.n	800b76e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b74a:	4ba7      	ldr	r3, [pc, #668]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b74c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b74e:	4ba6      	ldr	r3, [pc, #664]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b750:	2180      	movs	r1, #128	; 0x80
 800b752:	0549      	lsls	r1, r1, #21
 800b754:	430a      	orrs	r2, r1
 800b756:	63da      	str	r2, [r3, #60]	; 0x3c
 800b758:	4ba3      	ldr	r3, [pc, #652]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b75a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b75c:	2380      	movs	r3, #128	; 0x80
 800b75e:	055b      	lsls	r3, r3, #21
 800b760:	4013      	ands	r3, r2
 800b762:	60fb      	str	r3, [r7, #12]
 800b764:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800b766:	231f      	movs	r3, #31
 800b768:	18fb      	adds	r3, r7, r3
 800b76a:	2201      	movs	r2, #1
 800b76c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b76e:	4b9f      	ldr	r3, [pc, #636]	; (800b9ec <HAL_RCC_OscConfig+0x608>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	2380      	movs	r3, #128	; 0x80
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	4013      	ands	r3, r2
 800b778:	d11a      	bne.n	800b7b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b77a:	4b9c      	ldr	r3, [pc, #624]	; (800b9ec <HAL_RCC_OscConfig+0x608>)
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b9b      	ldr	r3, [pc, #620]	; (800b9ec <HAL_RCC_OscConfig+0x608>)
 800b780:	2180      	movs	r1, #128	; 0x80
 800b782:	0049      	lsls	r1, r1, #1
 800b784:	430a      	orrs	r2, r1
 800b786:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800b788:	f7fd fad2 	bl	8008d30 <HAL_GetTick>
 800b78c:	0003      	movs	r3, r0
 800b78e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b790:	e008      	b.n	800b7a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b792:	f7fd facd 	bl	8008d30 <HAL_GetTick>
 800b796:	0002      	movs	r2, r0
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d901      	bls.n	800b7a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e11c      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7a4:	4b91      	ldr	r3, [pc, #580]	; (800b9ec <HAL_RCC_OscConfig+0x608>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	2380      	movs	r3, #128	; 0x80
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	d0f0      	beq.n	800b792 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d106      	bne.n	800b7c6 <HAL_RCC_OscConfig+0x3e2>
 800b7b8:	4b8b      	ldr	r3, [pc, #556]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7bc:	4b8a      	ldr	r3, [pc, #552]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7be:	2101      	movs	r1, #1
 800b7c0:	430a      	orrs	r2, r1
 800b7c2:	65da      	str	r2, [r3, #92]	; 0x5c
 800b7c4:	e01c      	b.n	800b800 <HAL_RCC_OscConfig+0x41c>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	2b05      	cmp	r3, #5
 800b7cc:	d10c      	bne.n	800b7e8 <HAL_RCC_OscConfig+0x404>
 800b7ce:	4b86      	ldr	r3, [pc, #536]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7d2:	4b85      	ldr	r3, [pc, #532]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7d4:	2104      	movs	r1, #4
 800b7d6:	430a      	orrs	r2, r1
 800b7d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800b7da:	4b83      	ldr	r3, [pc, #524]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7de:	4b82      	ldr	r3, [pc, #520]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b7e6:	e00b      	b.n	800b800 <HAL_RCC_OscConfig+0x41c>
 800b7e8:	4b7f      	ldr	r3, [pc, #508]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7ec:	4b7e      	ldr	r3, [pc, #504]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7ee:	2101      	movs	r1, #1
 800b7f0:	438a      	bics	r2, r1
 800b7f2:	65da      	str	r2, [r3, #92]	; 0x5c
 800b7f4:	4b7c      	ldr	r3, [pc, #496]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7f8:	4b7b      	ldr	r3, [pc, #492]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b7fa:	2104      	movs	r1, #4
 800b7fc:	438a      	bics	r2, r1
 800b7fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d014      	beq.n	800b832 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b808:	f7fd fa92 	bl	8008d30 <HAL_GetTick>
 800b80c:	0003      	movs	r3, r0
 800b80e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b810:	e009      	b.n	800b826 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b812:	f7fd fa8d 	bl	8008d30 <HAL_GetTick>
 800b816:	0002      	movs	r2, r0
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	4a74      	ldr	r2, [pc, #464]	; (800b9f0 <HAL_RCC_OscConfig+0x60c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d901      	bls.n	800b826 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800b822:	2303      	movs	r3, #3
 800b824:	e0db      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b826:	4b70      	ldr	r3, [pc, #448]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b82a:	2202      	movs	r2, #2
 800b82c:	4013      	ands	r3, r2
 800b82e:	d0f0      	beq.n	800b812 <HAL_RCC_OscConfig+0x42e>
 800b830:	e013      	b.n	800b85a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b832:	f7fd fa7d 	bl	8008d30 <HAL_GetTick>
 800b836:	0003      	movs	r3, r0
 800b838:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b83a:	e009      	b.n	800b850 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b83c:	f7fd fa78 	bl	8008d30 <HAL_GetTick>
 800b840:	0002      	movs	r2, r0
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	4a6a      	ldr	r2, [pc, #424]	; (800b9f0 <HAL_RCC_OscConfig+0x60c>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d901      	bls.n	800b850 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e0c6      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b850:	4b65      	ldr	r3, [pc, #404]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b854:	2202      	movs	r2, #2
 800b856:	4013      	ands	r3, r2
 800b858:	d1f0      	bne.n	800b83c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b85a:	231f      	movs	r3, #31
 800b85c:	18fb      	adds	r3, r7, r3
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d105      	bne.n	800b870 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b864:	4b60      	ldr	r3, [pc, #384]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b868:	4b5f      	ldr	r3, [pc, #380]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b86a:	4962      	ldr	r1, [pc, #392]	; (800b9f4 <HAL_RCC_OscConfig+0x610>)
 800b86c:	400a      	ands	r2, r1
 800b86e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	69db      	ldr	r3, [r3, #28]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d100      	bne.n	800b87a <HAL_RCC_OscConfig+0x496>
 800b878:	e0b0      	b.n	800b9dc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b87a:	4b5b      	ldr	r3, [pc, #364]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	2238      	movs	r2, #56	; 0x38
 800b880:	4013      	ands	r3, r2
 800b882:	2b10      	cmp	r3, #16
 800b884:	d100      	bne.n	800b888 <HAL_RCC_OscConfig+0x4a4>
 800b886:	e078      	b.n	800b97a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d153      	bne.n	800b938 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b890:	4b55      	ldr	r3, [pc, #340]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	4b54      	ldr	r3, [pc, #336]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b896:	4958      	ldr	r1, [pc, #352]	; (800b9f8 <HAL_RCC_OscConfig+0x614>)
 800b898:	400a      	ands	r2, r1
 800b89a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b89c:	f7fd fa48 	bl	8008d30 <HAL_GetTick>
 800b8a0:	0003      	movs	r3, r0
 800b8a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8a4:	e008      	b.n	800b8b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8a6:	f7fd fa43 	bl	8008d30 <HAL_GetTick>
 800b8aa:	0002      	movs	r2, r0
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d901      	bls.n	800b8b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e092      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8b8:	4b4b      	ldr	r3, [pc, #300]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	2380      	movs	r3, #128	; 0x80
 800b8be:	049b      	lsls	r3, r3, #18
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	d1f0      	bne.n	800b8a6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b8c4:	4b48      	ldr	r3, [pc, #288]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	4a4c      	ldr	r2, [pc, #304]	; (800b9fc <HAL_RCC_OscConfig+0x618>)
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	0019      	movs	r1, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a1a      	ldr	r2, [r3, #32]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	021b      	lsls	r3, r3, #8
 800b8de:	431a      	orrs	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	4b3e      	ldr	r3, [pc, #248]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b8f2:	4b3d      	ldr	r3, [pc, #244]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	4b3c      	ldr	r3, [pc, #240]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b8f8:	2180      	movs	r1, #128	; 0x80
 800b8fa:	0449      	lsls	r1, r1, #17
 800b8fc:	430a      	orrs	r2, r1
 800b8fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800b900:	4b39      	ldr	r3, [pc, #228]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	4b38      	ldr	r3, [pc, #224]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b906:	2180      	movs	r1, #128	; 0x80
 800b908:	0549      	lsls	r1, r1, #21
 800b90a:	430a      	orrs	r2, r1
 800b90c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b90e:	f7fd fa0f 	bl	8008d30 <HAL_GetTick>
 800b912:	0003      	movs	r3, r0
 800b914:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b916:	e008      	b.n	800b92a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b918:	f7fd fa0a 	bl	8008d30 <HAL_GetTick>
 800b91c:	0002      	movs	r2, r0
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	2b02      	cmp	r3, #2
 800b924:	d901      	bls.n	800b92a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800b926:	2303      	movs	r3, #3
 800b928:	e059      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b92a:	4b2f      	ldr	r3, [pc, #188]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	2380      	movs	r3, #128	; 0x80
 800b930:	049b      	lsls	r3, r3, #18
 800b932:	4013      	ands	r3, r2
 800b934:	d0f0      	beq.n	800b918 <HAL_RCC_OscConfig+0x534>
 800b936:	e051      	b.n	800b9dc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b938:	4b2b      	ldr	r3, [pc, #172]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	4b2a      	ldr	r3, [pc, #168]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b93e:	492e      	ldr	r1, [pc, #184]	; (800b9f8 <HAL_RCC_OscConfig+0x614>)
 800b940:	400a      	ands	r2, r1
 800b942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b944:	f7fd f9f4 	bl	8008d30 <HAL_GetTick>
 800b948:	0003      	movs	r3, r0
 800b94a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b94c:	e008      	b.n	800b960 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b94e:	f7fd f9ef 	bl	8008d30 <HAL_GetTick>
 800b952:	0002      	movs	r2, r0
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d901      	bls.n	800b960 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e03e      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b960:	4b21      	ldr	r3, [pc, #132]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	2380      	movs	r3, #128	; 0x80
 800b966:	049b      	lsls	r3, r3, #18
 800b968:	4013      	ands	r3, r2
 800b96a:	d1f0      	bne.n	800b94e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800b96c:	4b1e      	ldr	r3, [pc, #120]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	4b1d      	ldr	r3, [pc, #116]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b972:	4923      	ldr	r1, [pc, #140]	; (800ba00 <HAL_RCC_OscConfig+0x61c>)
 800b974:	400a      	ands	r2, r1
 800b976:	60da      	str	r2, [r3, #12]
 800b978:	e030      	b.n	800b9dc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	69db      	ldr	r3, [r3, #28]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d101      	bne.n	800b986 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e02b      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800b986:	4b18      	ldr	r3, [pc, #96]	; (800b9e8 <HAL_RCC_OscConfig+0x604>)
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	2203      	movs	r2, #3
 800b990:	401a      	ands	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	429a      	cmp	r2, r3
 800b998:	d11e      	bne.n	800b9d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2270      	movs	r2, #112	; 0x70
 800b99e:	401a      	ands	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d117      	bne.n	800b9d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	23fe      	movs	r3, #254	; 0xfe
 800b9ac:	01db      	lsls	r3, r3, #7
 800b9ae:	401a      	ands	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d10e      	bne.n	800b9d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	23f8      	movs	r3, #248	; 0xf8
 800b9be:	039b      	lsls	r3, r3, #14
 800b9c0:	401a      	ands	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d106      	bne.n	800b9d8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	0f5b      	lsrs	r3, r3, #29
 800b9ce:	075a      	lsls	r2, r3, #29
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d001      	beq.n	800b9dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e000      	b.n	800b9de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	0018      	movs	r0, r3
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	b008      	add	sp, #32
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	46c0      	nop			; (mov r8, r8)
 800b9e8:	40021000 	.word	0x40021000
 800b9ec:	40007000 	.word	0x40007000
 800b9f0:	00001388 	.word	0x00001388
 800b9f4:	efffffff 	.word	0xefffffff
 800b9f8:	feffffff 	.word	0xfeffffff
 800b9fc:	1fc1808c 	.word	0x1fc1808c
 800ba00:	effefffc 	.word	0xeffefffc

0800ba04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e0e9      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba18:	4b76      	ldr	r3, [pc, #472]	; (800bbf4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	4013      	ands	r3, r2
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d91e      	bls.n	800ba64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba26:	4b73      	ldr	r3, [pc, #460]	; (800bbf4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2207      	movs	r2, #7
 800ba2c:	4393      	bics	r3, r2
 800ba2e:	0019      	movs	r1, r3
 800ba30:	4b70      	ldr	r3, [pc, #448]	; (800bbf4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	430a      	orrs	r2, r1
 800ba36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ba38:	f7fd f97a 	bl	8008d30 <HAL_GetTick>
 800ba3c:	0003      	movs	r3, r0
 800ba3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ba40:	e009      	b.n	800ba56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba42:	f7fd f975 	bl	8008d30 <HAL_GetTick>
 800ba46:	0002      	movs	r2, r0
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	4a6a      	ldr	r2, [pc, #424]	; (800bbf8 <HAL_RCC_ClockConfig+0x1f4>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d901      	bls.n	800ba56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e0ca      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ba56:	4b67      	ldr	r3, [pc, #412]	; (800bbf4 <HAL_RCC_ClockConfig+0x1f0>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2207      	movs	r2, #7
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d1ee      	bne.n	800ba42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2202      	movs	r2, #2
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	d015      	beq.n	800ba9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2204      	movs	r2, #4
 800ba74:	4013      	ands	r3, r2
 800ba76:	d006      	beq.n	800ba86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800ba78:	4b60      	ldr	r3, [pc, #384]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	4b5f      	ldr	r3, [pc, #380]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800ba7e:	21e0      	movs	r1, #224	; 0xe0
 800ba80:	01c9      	lsls	r1, r1, #7
 800ba82:	430a      	orrs	r2, r1
 800ba84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba86:	4b5d      	ldr	r3, [pc, #372]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	4a5d      	ldr	r2, [pc, #372]	; (800bc00 <HAL_RCC_ClockConfig+0x1fc>)
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	0019      	movs	r1, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	689a      	ldr	r2, [r3, #8]
 800ba94:	4b59      	ldr	r3, [pc, #356]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800ba96:	430a      	orrs	r2, r1
 800ba98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	4013      	ands	r3, r2
 800baa2:	d057      	beq.n	800bb54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d107      	bne.n	800babc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800baac:	4b53      	ldr	r3, [pc, #332]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	2380      	movs	r3, #128	; 0x80
 800bab2:	029b      	lsls	r3, r3, #10
 800bab4:	4013      	ands	r3, r2
 800bab6:	d12b      	bne.n	800bb10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e097      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	d107      	bne.n	800bad4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bac4:	4b4d      	ldr	r3, [pc, #308]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	2380      	movs	r3, #128	; 0x80
 800baca:	049b      	lsls	r3, r3, #18
 800bacc:	4013      	ands	r3, r2
 800bace:	d11f      	bne.n	800bb10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e08b      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d107      	bne.n	800baec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800badc:	4b47      	ldr	r3, [pc, #284]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	2380      	movs	r3, #128	; 0x80
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	4013      	ands	r3, r2
 800bae6:	d113      	bne.n	800bb10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	e07f      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d106      	bne.n	800bb02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800baf4:	4b41      	ldr	r3, [pc, #260]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800baf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baf8:	2202      	movs	r2, #2
 800bafa:	4013      	ands	r3, r2
 800bafc:	d108      	bne.n	800bb10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e074      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb02:	4b3e      	ldr	r3, [pc, #248]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bb04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb06:	2202      	movs	r2, #2
 800bb08:	4013      	ands	r3, r2
 800bb0a:	d101      	bne.n	800bb10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e06d      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb10:	4b3a      	ldr	r3, [pc, #232]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	2207      	movs	r2, #7
 800bb16:	4393      	bics	r3, r2
 800bb18:	0019      	movs	r1, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	4b37      	ldr	r3, [pc, #220]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bb20:	430a      	orrs	r2, r1
 800bb22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb24:	f7fd f904 	bl	8008d30 <HAL_GetTick>
 800bb28:	0003      	movs	r3, r0
 800bb2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb2c:	e009      	b.n	800bb42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb2e:	f7fd f8ff 	bl	8008d30 <HAL_GetTick>
 800bb32:	0002      	movs	r2, r0
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	4a2f      	ldr	r2, [pc, #188]	; (800bbf8 <HAL_RCC_ClockConfig+0x1f4>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d901      	bls.n	800bb42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e054      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb42:	4b2e      	ldr	r3, [pc, #184]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	2238      	movs	r2, #56	; 0x38
 800bb48:	401a      	ands	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d1ec      	bne.n	800bb2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb54:	4b27      	ldr	r3, [pc, #156]	; (800bbf4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2207      	movs	r2, #7
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d21e      	bcs.n	800bba0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb62:	4b24      	ldr	r3, [pc, #144]	; (800bbf4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2207      	movs	r2, #7
 800bb68:	4393      	bics	r3, r2
 800bb6a:	0019      	movs	r1, r3
 800bb6c:	4b21      	ldr	r3, [pc, #132]	; (800bbf4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb6e:	683a      	ldr	r2, [r7, #0]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bb74:	f7fd f8dc 	bl	8008d30 <HAL_GetTick>
 800bb78:	0003      	movs	r3, r0
 800bb7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bb7c:	e009      	b.n	800bb92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb7e:	f7fd f8d7 	bl	8008d30 <HAL_GetTick>
 800bb82:	0002      	movs	r2, r0
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	4a1b      	ldr	r2, [pc, #108]	; (800bbf8 <HAL_RCC_ClockConfig+0x1f4>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d901      	bls.n	800bb92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e02c      	b.n	800bbec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bb92:	4b18      	ldr	r3, [pc, #96]	; (800bbf4 <HAL_RCC_ClockConfig+0x1f0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2207      	movs	r2, #7
 800bb98:	4013      	ands	r3, r2
 800bb9a:	683a      	ldr	r2, [r7, #0]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d1ee      	bne.n	800bb7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2204      	movs	r2, #4
 800bba6:	4013      	ands	r3, r2
 800bba8:	d009      	beq.n	800bbbe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800bbaa:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	4a15      	ldr	r2, [pc, #84]	; (800bc04 <HAL_RCC_ClockConfig+0x200>)
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	0019      	movs	r1, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	68da      	ldr	r2, [r3, #12]
 800bbb8:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800bbbe:	f000 f829 	bl	800bc14 <HAL_RCC_GetSysClockFreq>
 800bbc2:	0001      	movs	r1, r0
 800bbc4:	4b0d      	ldr	r3, [pc, #52]	; (800bbfc <HAL_RCC_ClockConfig+0x1f8>)
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	0a1b      	lsrs	r3, r3, #8
 800bbca:	220f      	movs	r2, #15
 800bbcc:	401a      	ands	r2, r3
 800bbce:	4b0e      	ldr	r3, [pc, #56]	; (800bc08 <HAL_RCC_ClockConfig+0x204>)
 800bbd0:	0092      	lsls	r2, r2, #2
 800bbd2:	58d3      	ldr	r3, [r2, r3]
 800bbd4:	221f      	movs	r2, #31
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	000a      	movs	r2, r1
 800bbda:	40da      	lsrs	r2, r3
 800bbdc:	4b0b      	ldr	r3, [pc, #44]	; (800bc0c <HAL_RCC_ClockConfig+0x208>)
 800bbde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bbe0:	4b0b      	ldr	r3, [pc, #44]	; (800bc10 <HAL_RCC_ClockConfig+0x20c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	f7fc fe8b 	bl	8008900 <HAL_InitTick>
 800bbea:	0003      	movs	r3, r0
}
 800bbec:	0018      	movs	r0, r3
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	b004      	add	sp, #16
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	40022000 	.word	0x40022000
 800bbf8:	00001388 	.word	0x00001388
 800bbfc:	40021000 	.word	0x40021000
 800bc00:	fffff0ff 	.word	0xfffff0ff
 800bc04:	ffff8fff 	.word	0xffff8fff
 800bc08:	080184a0 	.word	0x080184a0
 800bc0c:	200000e0 	.word	0x200000e0
 800bc10:	200000e4 	.word	0x200000e4

0800bc14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bc1a:	4b3c      	ldr	r3, [pc, #240]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	2238      	movs	r2, #56	; 0x38
 800bc20:	4013      	ands	r3, r2
 800bc22:	d10f      	bne.n	800bc44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bc24:	4b39      	ldr	r3, [pc, #228]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	0adb      	lsrs	r3, r3, #11
 800bc2a:	2207      	movs	r2, #7
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	2201      	movs	r2, #1
 800bc30:	409a      	lsls	r2, r3
 800bc32:	0013      	movs	r3, r2
 800bc34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	4835      	ldr	r0, [pc, #212]	; (800bd10 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bc3a:	f7f4 fa81 	bl	8000140 <__udivsi3>
 800bc3e:	0003      	movs	r3, r0
 800bc40:	613b      	str	r3, [r7, #16]
 800bc42:	e05d      	b.n	800bd00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bc44:	4b31      	ldr	r3, [pc, #196]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	2238      	movs	r2, #56	; 0x38
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	2b08      	cmp	r3, #8
 800bc4e:	d102      	bne.n	800bc56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bc50:	4b30      	ldr	r3, [pc, #192]	; (800bd14 <HAL_RCC_GetSysClockFreq+0x100>)
 800bc52:	613b      	str	r3, [r7, #16]
 800bc54:	e054      	b.n	800bd00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc56:	4b2d      	ldr	r3, [pc, #180]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	2238      	movs	r2, #56	; 0x38
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	2b10      	cmp	r3, #16
 800bc60:	d138      	bne.n	800bcd4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bc62:	4b2a      	ldr	r3, [pc, #168]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	2203      	movs	r2, #3
 800bc68:	4013      	ands	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bc6c:	4b27      	ldr	r3, [pc, #156]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	091b      	lsrs	r3, r3, #4
 800bc72:	2207      	movs	r2, #7
 800bc74:	4013      	ands	r3, r2
 800bc76:	3301      	adds	r3, #1
 800bc78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d10d      	bne.n	800bc9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bc80:	68b9      	ldr	r1, [r7, #8]
 800bc82:	4824      	ldr	r0, [pc, #144]	; (800bd14 <HAL_RCC_GetSysClockFreq+0x100>)
 800bc84:	f7f4 fa5c 	bl	8000140 <__udivsi3>
 800bc88:	0003      	movs	r3, r0
 800bc8a:	0019      	movs	r1, r3
 800bc8c:	4b1f      	ldr	r3, [pc, #124]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	0a1b      	lsrs	r3, r3, #8
 800bc92:	227f      	movs	r2, #127	; 0x7f
 800bc94:	4013      	ands	r3, r2
 800bc96:	434b      	muls	r3, r1
 800bc98:	617b      	str	r3, [r7, #20]
        break;
 800bc9a:	e00d      	b.n	800bcb8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800bc9c:	68b9      	ldr	r1, [r7, #8]
 800bc9e:	481c      	ldr	r0, [pc, #112]	; (800bd10 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bca0:	f7f4 fa4e 	bl	8000140 <__udivsi3>
 800bca4:	0003      	movs	r3, r0
 800bca6:	0019      	movs	r1, r3
 800bca8:	4b18      	ldr	r3, [pc, #96]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	0a1b      	lsrs	r3, r3, #8
 800bcae:	227f      	movs	r2, #127	; 0x7f
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	434b      	muls	r3, r1
 800bcb4:	617b      	str	r3, [r7, #20]
        break;
 800bcb6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800bcb8:	4b14      	ldr	r3, [pc, #80]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	0f5b      	lsrs	r3, r3, #29
 800bcbe:	2207      	movs	r2, #7
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	6978      	ldr	r0, [r7, #20]
 800bcca:	f7f4 fa39 	bl	8000140 <__udivsi3>
 800bcce:	0003      	movs	r3, r0
 800bcd0:	613b      	str	r3, [r7, #16]
 800bcd2:	e015      	b.n	800bd00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800bcd4:	4b0d      	ldr	r3, [pc, #52]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	2238      	movs	r2, #56	; 0x38
 800bcda:	4013      	ands	r3, r2
 800bcdc:	2b20      	cmp	r3, #32
 800bcde:	d103      	bne.n	800bce8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800bce0:	2380      	movs	r3, #128	; 0x80
 800bce2:	021b      	lsls	r3, r3, #8
 800bce4:	613b      	str	r3, [r7, #16]
 800bce6:	e00b      	b.n	800bd00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800bce8:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	2238      	movs	r2, #56	; 0x38
 800bcee:	4013      	ands	r3, r2
 800bcf0:	2b18      	cmp	r3, #24
 800bcf2:	d103      	bne.n	800bcfc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800bcf4:	23fa      	movs	r3, #250	; 0xfa
 800bcf6:	01db      	lsls	r3, r3, #7
 800bcf8:	613b      	str	r3, [r7, #16]
 800bcfa:	e001      	b.n	800bd00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bd00:	693b      	ldr	r3, [r7, #16]
}
 800bd02:	0018      	movs	r0, r3
 800bd04:	46bd      	mov	sp, r7
 800bd06:	b006      	add	sp, #24
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	46c0      	nop			; (mov r8, r8)
 800bd0c:	40021000 	.word	0x40021000
 800bd10:	00f42400 	.word	0x00f42400
 800bd14:	007a1200 	.word	0x007a1200

0800bd18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd1c:	4b02      	ldr	r3, [pc, #8]	; (800bd28 <HAL_RCC_GetHCLKFreq+0x10>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
}
 800bd20:	0018      	movs	r0, r3
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	46c0      	nop			; (mov r8, r8)
 800bd28:	200000e0 	.word	0x200000e0

0800bd2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd2c:	b5b0      	push	{r4, r5, r7, lr}
 800bd2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800bd30:	f7ff fff2 	bl	800bd18 <HAL_RCC_GetHCLKFreq>
 800bd34:	0004      	movs	r4, r0
 800bd36:	f7ff fb49 	bl	800b3cc <LL_RCC_GetAPB1Prescaler>
 800bd3a:	0003      	movs	r3, r0
 800bd3c:	0b1a      	lsrs	r2, r3, #12
 800bd3e:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bd40:	0092      	lsls	r2, r2, #2
 800bd42:	58d3      	ldr	r3, [r2, r3]
 800bd44:	221f      	movs	r2, #31
 800bd46:	4013      	ands	r3, r2
 800bd48:	40dc      	lsrs	r4, r3
 800bd4a:	0023      	movs	r3, r4
}
 800bd4c:	0018      	movs	r0, r3
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bdb0      	pop	{r4, r5, r7, pc}
 800bd52:	46c0      	nop			; (mov r8, r8)
 800bd54:	080184e0 	.word	0x080184e0

0800bd58 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2207      	movs	r2, #7
 800bd66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bd68:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <HAL_RCC_GetClockConfig+0x4c>)
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	2207      	movs	r2, #7
 800bd6e:	401a      	ands	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bd74:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <HAL_RCC_GetClockConfig+0x4c>)
 800bd76:	689a      	ldr	r2, [r3, #8]
 800bd78:	23f0      	movs	r3, #240	; 0xf0
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	401a      	ands	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800bd82:	4b08      	ldr	r3, [pc, #32]	; (800bda4 <HAL_RCC_GetClockConfig+0x4c>)
 800bd84:	689a      	ldr	r2, [r3, #8]
 800bd86:	23e0      	movs	r3, #224	; 0xe0
 800bd88:	01db      	lsls	r3, r3, #7
 800bd8a:	401a      	ands	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bd90:	4b05      	ldr	r3, [pc, #20]	; (800bda8 <HAL_RCC_GetClockConfig+0x50>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2207      	movs	r2, #7
 800bd96:	401a      	ands	r2, r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	601a      	str	r2, [r3, #0]
}
 800bd9c:	46c0      	nop			; (mov r8, r8)
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	b002      	add	sp, #8
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	40021000 	.word	0x40021000
 800bda8:	40022000 	.word	0x40022000

0800bdac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800bdb4:	2313      	movs	r3, #19
 800bdb6:	18fb      	adds	r3, r7, r3
 800bdb8:	2200      	movs	r2, #0
 800bdba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bdbc:	2312      	movs	r3, #18
 800bdbe:	18fb      	adds	r3, r7, r3
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	2380      	movs	r3, #128	; 0x80
 800bdca:	029b      	lsls	r3, r3, #10
 800bdcc:	4013      	ands	r3, r2
 800bdce:	d100      	bne.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800bdd0:	e0a3      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bdd2:	2011      	movs	r0, #17
 800bdd4:	183b      	adds	r3, r7, r0
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdda:	4b86      	ldr	r3, [pc, #536]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdde:	2380      	movs	r3, #128	; 0x80
 800bde0:	055b      	lsls	r3, r3, #21
 800bde2:	4013      	ands	r3, r2
 800bde4:	d110      	bne.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bde6:	4b83      	ldr	r3, [pc, #524]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bde8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdea:	4b82      	ldr	r3, [pc, #520]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bdec:	2180      	movs	r1, #128	; 0x80
 800bdee:	0549      	lsls	r1, r1, #21
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	63da      	str	r2, [r3, #60]	; 0x3c
 800bdf4:	4b7f      	ldr	r3, [pc, #508]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bdf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdf8:	2380      	movs	r3, #128	; 0x80
 800bdfa:	055b      	lsls	r3, r3, #21
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	60bb      	str	r3, [r7, #8]
 800be00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be02:	183b      	adds	r3, r7, r0
 800be04:	2201      	movs	r2, #1
 800be06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be08:	4b7b      	ldr	r3, [pc, #492]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	4b7a      	ldr	r3, [pc, #488]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800be0e:	2180      	movs	r1, #128	; 0x80
 800be10:	0049      	lsls	r1, r1, #1
 800be12:	430a      	orrs	r2, r1
 800be14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be16:	f7fc ff8b 	bl	8008d30 <HAL_GetTick>
 800be1a:	0003      	movs	r3, r0
 800be1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be1e:	e00b      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be20:	f7fc ff86 	bl	8008d30 <HAL_GetTick>
 800be24:	0002      	movs	r2, r0
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d904      	bls.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800be2e:	2313      	movs	r3, #19
 800be30:	18fb      	adds	r3, r7, r3
 800be32:	2203      	movs	r2, #3
 800be34:	701a      	strb	r2, [r3, #0]
        break;
 800be36:	e005      	b.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be38:	4b6f      	ldr	r3, [pc, #444]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	2380      	movs	r3, #128	; 0x80
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	4013      	ands	r3, r2
 800be42:	d0ed      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800be44:	2313      	movs	r3, #19
 800be46:	18fb      	adds	r3, r7, r3
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d154      	bne.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800be4e:	4b69      	ldr	r3, [pc, #420]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800be50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be52:	23c0      	movs	r3, #192	; 0xc0
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4013      	ands	r3, r2
 800be58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d019      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	429a      	cmp	r2, r3
 800be68:	d014      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800be6a:	4b62      	ldr	r3, [pc, #392]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800be6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be6e:	4a63      	ldr	r2, [pc, #396]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800be70:	4013      	ands	r3, r2
 800be72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be74:	4b5f      	ldr	r3, [pc, #380]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800be76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be78:	4b5e      	ldr	r3, [pc, #376]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800be7a:	2180      	movs	r1, #128	; 0x80
 800be7c:	0249      	lsls	r1, r1, #9
 800be7e:	430a      	orrs	r2, r1
 800be80:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be82:	4b5c      	ldr	r3, [pc, #368]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800be84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be86:	4b5b      	ldr	r3, [pc, #364]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800be88:	495d      	ldr	r1, [pc, #372]	; (800c000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800be8a:	400a      	ands	r2, r1
 800be8c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800be8e:	4b59      	ldr	r3, [pc, #356]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2201      	movs	r2, #1
 800be98:	4013      	ands	r3, r2
 800be9a:	d016      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be9c:	f7fc ff48 	bl	8008d30 <HAL_GetTick>
 800bea0:	0003      	movs	r3, r0
 800bea2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bea4:	e00c      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bea6:	f7fc ff43 	bl	8008d30 <HAL_GetTick>
 800beaa:	0002      	movs	r2, r0
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	4a54      	ldr	r2, [pc, #336]	; (800c004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d904      	bls.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800beb6:	2313      	movs	r3, #19
 800beb8:	18fb      	adds	r3, r7, r3
 800beba:	2203      	movs	r2, #3
 800bebc:	701a      	strb	r2, [r3, #0]
            break;
 800bebe:	e004      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bec0:	4b4c      	ldr	r3, [pc, #304]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bec4:	2202      	movs	r2, #2
 800bec6:	4013      	ands	r3, r2
 800bec8:	d0ed      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800beca:	2313      	movs	r3, #19
 800becc:	18fb      	adds	r3, r7, r3
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10a      	bne.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bed4:	4b47      	ldr	r3, [pc, #284]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed8:	4a48      	ldr	r2, [pc, #288]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800beda:	4013      	ands	r3, r2
 800bedc:	0019      	movs	r1, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	699a      	ldr	r2, [r3, #24]
 800bee2:	4b44      	ldr	r3, [pc, #272]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bee4:	430a      	orrs	r2, r1
 800bee6:	65da      	str	r2, [r3, #92]	; 0x5c
 800bee8:	e00c      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800beea:	2312      	movs	r3, #18
 800beec:	18fb      	adds	r3, r7, r3
 800beee:	2213      	movs	r2, #19
 800bef0:	18ba      	adds	r2, r7, r2
 800bef2:	7812      	ldrb	r2, [r2, #0]
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	e005      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef8:	2312      	movs	r3, #18
 800befa:	18fb      	adds	r3, r7, r3
 800befc:	2213      	movs	r2, #19
 800befe:	18ba      	adds	r2, r7, r2
 800bf00:	7812      	ldrb	r2, [r2, #0]
 800bf02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bf04:	2311      	movs	r3, #17
 800bf06:	18fb      	adds	r3, r7, r3
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d105      	bne.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf0e:	4b39      	ldr	r3, [pc, #228]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf12:	4b38      	ldr	r3, [pc, #224]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf14:	493c      	ldr	r1, [pc, #240]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800bf16:	400a      	ands	r2, r1
 800bf18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	4013      	ands	r3, r2
 800bf22:	d009      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf24:	4b33      	ldr	r3, [pc, #204]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf28:	2203      	movs	r2, #3
 800bf2a:	4393      	bics	r3, r2
 800bf2c:	0019      	movs	r1, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	4b30      	ldr	r3, [pc, #192]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf34:	430a      	orrs	r2, r1
 800bf36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	4013      	ands	r3, r2
 800bf40:	d009      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bf42:	4b2c      	ldr	r3, [pc, #176]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf46:	220c      	movs	r2, #12
 800bf48:	4393      	bics	r3, r2
 800bf4a:	0019      	movs	r1, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	4b28      	ldr	r3, [pc, #160]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf52:	430a      	orrs	r2, r1
 800bf54:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	d009      	beq.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf60:	4b24      	ldr	r3, [pc, #144]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf64:	4a29      	ldr	r2, [pc, #164]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bf66:	4013      	ands	r3, r2
 800bf68:	0019      	movs	r1, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68da      	ldr	r2, [r3, #12]
 800bf6e:	4b21      	ldr	r3, [pc, #132]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf70:	430a      	orrs	r2, r1
 800bf72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	2380      	movs	r3, #128	; 0x80
 800bf7a:	01db      	lsls	r3, r3, #7
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	d015      	beq.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf80:	4b1c      	ldr	r3, [pc, #112]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	0899      	lsrs	r1, r3, #2
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	695a      	ldr	r2, [r3, #20]
 800bf8c:	4b19      	ldr	r3, [pc, #100]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	695a      	ldr	r2, [r3, #20]
 800bf96:	2380      	movs	r3, #128	; 0x80
 800bf98:	05db      	lsls	r3, r3, #23
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d106      	bne.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bf9e:	4b15      	ldr	r3, [pc, #84]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bfa0:	68da      	ldr	r2, [r3, #12]
 800bfa2:	4b14      	ldr	r3, [pc, #80]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bfa4:	2180      	movs	r1, #128	; 0x80
 800bfa6:	0249      	lsls	r1, r1, #9
 800bfa8:	430a      	orrs	r2, r1
 800bfaa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	2380      	movs	r3, #128	; 0x80
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	d016      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800bfb8:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bfba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfbc:	4a14      	ldr	r2, [pc, #80]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	0019      	movs	r1, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	691a      	ldr	r2, [r3, #16]
 800bfc6:	4b0b      	ldr	r3, [pc, #44]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bfc8:	430a      	orrs	r2, r1
 800bfca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691a      	ldr	r2, [r3, #16]
 800bfd0:	2380      	movs	r3, #128	; 0x80
 800bfd2:	01db      	lsls	r3, r3, #7
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d106      	bne.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bfd8:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	4b05      	ldr	r3, [pc, #20]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800bfde:	2180      	movs	r1, #128	; 0x80
 800bfe0:	0249      	lsls	r1, r1, #9
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800bfe6:	2312      	movs	r3, #18
 800bfe8:	18fb      	adds	r3, r7, r3
 800bfea:	781b      	ldrb	r3, [r3, #0]
}
 800bfec:	0018      	movs	r0, r3
 800bfee:	46bd      	mov	sp, r7
 800bff0:	b006      	add	sp, #24
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	40021000 	.word	0x40021000
 800bff8:	40007000 	.word	0x40007000
 800bffc:	fffffcff 	.word	0xfffffcff
 800c000:	fffeffff 	.word	0xfffeffff
 800c004:	00001388 	.word	0x00001388
 800c008:	efffffff 	.word	0xefffffff
 800c00c:	ffffcfff 	.word	0xffffcfff
 800c010:	ffff3fff 	.word	0xffff3fff

0800c014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e0a8      	b.n	800c178 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d109      	bne.n	800c042 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	2382      	movs	r3, #130	; 0x82
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	429a      	cmp	r2, r3
 800c038:	d009      	beq.n	800c04e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	61da      	str	r2, [r3, #28]
 800c040:	e005      	b.n	800c04e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	225d      	movs	r2, #93	; 0x5d
 800c058:	5c9b      	ldrb	r3, [r3, r2]
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d107      	bne.n	800c070 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	225c      	movs	r2, #92	; 0x5c
 800c064:	2100      	movs	r1, #0
 800c066:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	0018      	movs	r0, r3
 800c06c:	f7fc fa54 	bl	8008518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	225d      	movs	r2, #93	; 0x5d
 800c074:	2102      	movs	r1, #2
 800c076:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2140      	movs	r1, #64	; 0x40
 800c084:	438a      	bics	r2, r1
 800c086:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	68da      	ldr	r2, [r3, #12]
 800c08c:	23e0      	movs	r3, #224	; 0xe0
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	429a      	cmp	r2, r3
 800c092:	d902      	bls.n	800c09a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c094:	2300      	movs	r3, #0
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	e002      	b.n	800c0a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c09a:	2380      	movs	r3, #128	; 0x80
 800c09c:	015b      	lsls	r3, r3, #5
 800c09e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	68da      	ldr	r2, [r3, #12]
 800c0a4:	23f0      	movs	r3, #240	; 0xf0
 800c0a6:	011b      	lsls	r3, r3, #4
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d008      	beq.n	800c0be <HAL_SPI_Init+0xaa>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68da      	ldr	r2, [r3, #12]
 800c0b0:	23e0      	movs	r3, #224	; 0xe0
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d002      	beq.n	800c0be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	2382      	movs	r3, #130	; 0x82
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	401a      	ands	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6899      	ldr	r1, [r3, #8]
 800c0cc:	2384      	movs	r3, #132	; 0x84
 800c0ce:	021b      	lsls	r3, r3, #8
 800c0d0:	400b      	ands	r3, r1
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	2102      	movs	r1, #2
 800c0da:	400b      	ands	r3, r1
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	400b      	ands	r3, r1
 800c0e6:	431a      	orrs	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6999      	ldr	r1, [r3, #24]
 800c0ec:	2380      	movs	r3, #128	; 0x80
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	400b      	ands	r3, r1
 800c0f2:	431a      	orrs	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	69db      	ldr	r3, [r3, #28]
 800c0f8:	2138      	movs	r1, #56	; 0x38
 800c0fa:	400b      	ands	r3, r1
 800c0fc:	431a      	orrs	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	2180      	movs	r1, #128	; 0x80
 800c104:	400b      	ands	r3, r1
 800c106:	431a      	orrs	r2, r3
 800c108:	0011      	movs	r1, r2
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c10e:	2380      	movs	r3, #128	; 0x80
 800c110:	019b      	lsls	r3, r3, #6
 800c112:	401a      	ands	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	0c1b      	lsrs	r3, r3, #16
 800c122:	2204      	movs	r2, #4
 800c124:	401a      	ands	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12a:	2110      	movs	r1, #16
 800c12c:	400b      	ands	r3, r1
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c134:	2108      	movs	r1, #8
 800c136:	400b      	ands	r3, r1
 800c138:	431a      	orrs	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68d9      	ldr	r1, [r3, #12]
 800c13e:	23f0      	movs	r3, #240	; 0xf0
 800c140:	011b      	lsls	r3, r3, #4
 800c142:	400b      	ands	r3, r1
 800c144:	431a      	orrs	r2, r3
 800c146:	0011      	movs	r1, r2
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	2380      	movs	r3, #128	; 0x80
 800c14c:	015b      	lsls	r3, r3, #5
 800c14e:	401a      	ands	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	430a      	orrs	r2, r1
 800c156:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	69da      	ldr	r2, [r3, #28]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4907      	ldr	r1, [pc, #28]	; (800c180 <HAL_SPI_Init+0x16c>)
 800c164:	400a      	ands	r2, r1
 800c166:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	225d      	movs	r2, #93	; 0x5d
 800c172:	2101      	movs	r1, #1
 800c174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	0018      	movs	r0, r3
 800c17a:	46bd      	mov	sp, r7
 800c17c:	b004      	add	sp, #16
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	fffff7ff 	.word	0xfffff7ff

0800c184 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	1dbb      	adds	r3, r7, #6
 800c192:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c194:	231f      	movs	r3, #31
 800c196:	18fb      	adds	r3, r7, r3
 800c198:	2200      	movs	r2, #0
 800c19a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	225c      	movs	r2, #92	; 0x5c
 800c1a0:	5c9b      	ldrb	r3, [r3, r2]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d101      	bne.n	800c1aa <HAL_SPI_Transmit+0x26>
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	e140      	b.n	800c42c <HAL_SPI_Transmit+0x2a8>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	225c      	movs	r2, #92	; 0x5c
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1b2:	f7fc fdbd 	bl	8008d30 <HAL_GetTick>
 800c1b6:	0003      	movs	r3, r0
 800c1b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800c1ba:	2316      	movs	r3, #22
 800c1bc:	18fb      	adds	r3, r7, r3
 800c1be:	1dba      	adds	r2, r7, #6
 800c1c0:	8812      	ldrh	r2, [r2, #0]
 800c1c2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	225d      	movs	r2, #93	; 0x5d
 800c1c8:	5c9b      	ldrb	r3, [r3, r2]
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d004      	beq.n	800c1da <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800c1d0:	231f      	movs	r3, #31
 800c1d2:	18fb      	adds	r3, r7, r3
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	701a      	strb	r2, [r3, #0]
    goto error;
 800c1d8:	e11d      	b.n	800c416 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d003      	beq.n	800c1e8 <HAL_SPI_Transmit+0x64>
 800c1e0:	1dbb      	adds	r3, r7, #6
 800c1e2:	881b      	ldrh	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d104      	bne.n	800c1f2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800c1e8:	231f      	movs	r3, #31
 800c1ea:	18fb      	adds	r3, r7, r3
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	701a      	strb	r2, [r3, #0]
    goto error;
 800c1f0:	e111      	b.n	800c416 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	225d      	movs	r2, #93	; 0x5d
 800c1f6:	2103      	movs	r1, #3
 800c1f8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	1dba      	adds	r2, r7, #6
 800c20a:	8812      	ldrh	r2, [r2, #0]
 800c20c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	1dba      	adds	r2, r7, #6
 800c212:	8812      	ldrh	r2, [r2, #0]
 800c214:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2244      	movs	r2, #68	; 0x44
 800c220:	2100      	movs	r1, #0
 800c222:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2246      	movs	r2, #70	; 0x46
 800c228:	2100      	movs	r1, #0
 800c22a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	689a      	ldr	r2, [r3, #8]
 800c23c:	2380      	movs	r3, #128	; 0x80
 800c23e:	021b      	lsls	r3, r3, #8
 800c240:	429a      	cmp	r2, r3
 800c242:	d110      	bne.n	800c266 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2140      	movs	r1, #64	; 0x40
 800c250:	438a      	bics	r2, r1
 800c252:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2180      	movs	r1, #128	; 0x80
 800c260:	01c9      	lsls	r1, r1, #7
 800c262:	430a      	orrs	r2, r1
 800c264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2240      	movs	r2, #64	; 0x40
 800c26e:	4013      	ands	r3, r2
 800c270:	2b40      	cmp	r3, #64	; 0x40
 800c272:	d007      	beq.n	800c284 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2140      	movs	r1, #64	; 0x40
 800c280:	430a      	orrs	r2, r1
 800c282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	23e0      	movs	r3, #224	; 0xe0
 800c28a:	00db      	lsls	r3, r3, #3
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d94e      	bls.n	800c32e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d004      	beq.n	800c2a2 <HAL_SPI_Transmit+0x11e>
 800c298:	2316      	movs	r3, #22
 800c29a:	18fb      	adds	r3, r7, r3
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d13f      	bne.n	800c322 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a6:	881a      	ldrh	r2, [r3, #0]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b2:	1c9a      	adds	r2, r3, #2
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c2c6:	e02c      	b.n	800c322 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d112      	bne.n	800c2fc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	881a      	ldrh	r2, [r3, #0]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e6:	1c9a      	adds	r2, r3, #2
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	b29a      	uxth	r2, r3
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2fa:	e012      	b.n	800c322 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2fc:	f7fc fd18 	bl	8008d30 <HAL_GetTick>
 800c300:	0002      	movs	r2, r0
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d802      	bhi.n	800c312 <HAL_SPI_Transmit+0x18e>
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	3301      	adds	r3, #1
 800c310:	d102      	bne.n	800c318 <HAL_SPI_Transmit+0x194>
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d104      	bne.n	800c322 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800c318:	231f      	movs	r3, #31
 800c31a:	18fb      	adds	r3, r7, r3
 800c31c:	2203      	movs	r2, #3
 800c31e:	701a      	strb	r2, [r3, #0]
          goto error;
 800c320:	e079      	b.n	800c416 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c326:	b29b      	uxth	r3, r3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1cd      	bne.n	800c2c8 <HAL_SPI_Transmit+0x144>
 800c32c:	e04f      	b.n	800c3ce <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d004      	beq.n	800c340 <HAL_SPI_Transmit+0x1bc>
 800c336:	2316      	movs	r3, #22
 800c338:	18fb      	adds	r3, r7, r3
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d141      	bne.n	800c3c4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	330c      	adds	r3, #12
 800c34a:	7812      	ldrb	r2, [r2, #0]
 800c34c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	3b01      	subs	r3, #1
 800c360:	b29a      	uxth	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800c366:	e02d      	b.n	800c3c4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	2202      	movs	r2, #2
 800c370:	4013      	ands	r3, r2
 800c372:	2b02      	cmp	r3, #2
 800c374:	d113      	bne.n	800c39e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	330c      	adds	r3, #12
 800c380:	7812      	ldrb	r2, [r2, #0]
 800c382:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c388:	1c5a      	adds	r2, r3, #1
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c392:	b29b      	uxth	r3, r3
 800c394:	3b01      	subs	r3, #1
 800c396:	b29a      	uxth	r2, r3
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c39c:	e012      	b.n	800c3c4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c39e:	f7fc fcc7 	bl	8008d30 <HAL_GetTick>
 800c3a2:	0002      	movs	r2, r0
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d802      	bhi.n	800c3b4 <HAL_SPI_Transmit+0x230>
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	d102      	bne.n	800c3ba <HAL_SPI_Transmit+0x236>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d104      	bne.n	800c3c4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800c3ba:	231f      	movs	r3, #31
 800c3bc:	18fb      	adds	r3, r7, r3
 800c3be:	2203      	movs	r2, #3
 800c3c0:	701a      	strb	r2, [r3, #0]
          goto error;
 800c3c2:	e028      	b.n	800c416 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1cc      	bne.n	800c368 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c3ce:	69ba      	ldr	r2, [r7, #24]
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	0018      	movs	r0, r3
 800c3d6:	f000 fb2f 	bl	800ca38 <SPI_EndRxTxTransaction>
 800c3da:	1e03      	subs	r3, r0, #0
 800c3dc:	d002      	beq.n	800c3e4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	613b      	str	r3, [r7, #16]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	613b      	str	r3, [r7, #16]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c406:	2b00      	cmp	r3, #0
 800c408:	d004      	beq.n	800c414 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800c40a:	231f      	movs	r3, #31
 800c40c:	18fb      	adds	r3, r7, r3
 800c40e:	2201      	movs	r2, #1
 800c410:	701a      	strb	r2, [r3, #0]
 800c412:	e000      	b.n	800c416 <HAL_SPI_Transmit+0x292>
  }

error:
 800c414:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	225d      	movs	r2, #93	; 0x5d
 800c41a:	2101      	movs	r1, #1
 800c41c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	225c      	movs	r2, #92	; 0x5c
 800c422:	2100      	movs	r1, #0
 800c424:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c426:	231f      	movs	r3, #31
 800c428:	18fb      	adds	r3, r7, r3
 800c42a:	781b      	ldrb	r3, [r3, #0]
}
 800c42c:	0018      	movs	r0, r3
 800c42e:	46bd      	mov	sp, r7
 800c430:	b008      	add	sp, #32
 800c432:	bd80      	pop	{r7, pc}

0800c434 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08a      	sub	sp, #40	; 0x28
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	001a      	movs	r2, r3
 800c442:	1cbb      	adds	r3, r7, #2
 800c444:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c446:	2301      	movs	r3, #1
 800c448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c44a:	2323      	movs	r3, #35	; 0x23
 800c44c:	18fb      	adds	r3, r7, r3
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	225c      	movs	r2, #92	; 0x5c
 800c456:	5c9b      	ldrb	r3, [r3, r2]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d101      	bne.n	800c460 <HAL_SPI_TransmitReceive+0x2c>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e1b5      	b.n	800c7cc <HAL_SPI_TransmitReceive+0x398>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	225c      	movs	r2, #92	; 0x5c
 800c464:	2101      	movs	r1, #1
 800c466:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c468:	f7fc fc62 	bl	8008d30 <HAL_GetTick>
 800c46c:	0003      	movs	r3, r0
 800c46e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c470:	201b      	movs	r0, #27
 800c472:	183b      	adds	r3, r7, r0
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	215d      	movs	r1, #93	; 0x5d
 800c478:	5c52      	ldrb	r2, [r2, r1]
 800c47a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c482:	2312      	movs	r3, #18
 800c484:	18fb      	adds	r3, r7, r3
 800c486:	1cba      	adds	r2, r7, #2
 800c488:	8812      	ldrh	r2, [r2, #0]
 800c48a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c48c:	183b      	adds	r3, r7, r0
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d011      	beq.n	800c4b8 <HAL_SPI_TransmitReceive+0x84>
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	2382      	movs	r3, #130	; 0x82
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d107      	bne.n	800c4ae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d103      	bne.n	800c4ae <HAL_SPI_TransmitReceive+0x7a>
 800c4a6:	183b      	adds	r3, r7, r0
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b04      	cmp	r3, #4
 800c4ac:	d004      	beq.n	800c4b8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800c4ae:	2323      	movs	r3, #35	; 0x23
 800c4b0:	18fb      	adds	r3, r7, r3
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	701a      	strb	r2, [r3, #0]
    goto error;
 800c4b6:	e17e      	b.n	800c7b6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d006      	beq.n	800c4cc <HAL_SPI_TransmitReceive+0x98>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d003      	beq.n	800c4cc <HAL_SPI_TransmitReceive+0x98>
 800c4c4:	1cbb      	adds	r3, r7, #2
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d104      	bne.n	800c4d6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800c4cc:	2323      	movs	r3, #35	; 0x23
 800c4ce:	18fb      	adds	r3, r7, r3
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	701a      	strb	r2, [r3, #0]
    goto error;
 800c4d4:	e16f      	b.n	800c7b6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	225d      	movs	r2, #93	; 0x5d
 800c4da:	5c9b      	ldrb	r3, [r3, r2]
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b04      	cmp	r3, #4
 800c4e0:	d003      	beq.n	800c4ea <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	225d      	movs	r2, #93	; 0x5d
 800c4e6:	2105      	movs	r1, #5
 800c4e8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	1cba      	adds	r2, r7, #2
 800c4fa:	2146      	movs	r1, #70	; 0x46
 800c4fc:	8812      	ldrh	r2, [r2, #0]
 800c4fe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	1cba      	adds	r2, r7, #2
 800c504:	2144      	movs	r1, #68	; 0x44
 800c506:	8812      	ldrh	r2, [r2, #0]
 800c508:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	1cba      	adds	r2, r7, #2
 800c514:	8812      	ldrh	r2, [r2, #0]
 800c516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	1cba      	adds	r2, r7, #2
 800c51c:	8812      	ldrh	r2, [r2, #0]
 800c51e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	68da      	ldr	r2, [r3, #12]
 800c530:	23e0      	movs	r3, #224	; 0xe0
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	429a      	cmp	r2, r3
 800c536:	d908      	bls.n	800c54a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	49a4      	ldr	r1, [pc, #656]	; (800c7d4 <HAL_SPI_TransmitReceive+0x3a0>)
 800c544:	400a      	ands	r2, r1
 800c546:	605a      	str	r2, [r3, #4]
 800c548:	e008      	b.n	800c55c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2180      	movs	r1, #128	; 0x80
 800c556:	0149      	lsls	r1, r1, #5
 800c558:	430a      	orrs	r2, r1
 800c55a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2240      	movs	r2, #64	; 0x40
 800c564:	4013      	ands	r3, r2
 800c566:	2b40      	cmp	r3, #64	; 0x40
 800c568:	d007      	beq.n	800c57a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2140      	movs	r1, #64	; 0x40
 800c576:	430a      	orrs	r2, r1
 800c578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	68da      	ldr	r2, [r3, #12]
 800c57e:	23e0      	movs	r3, #224	; 0xe0
 800c580:	00db      	lsls	r3, r3, #3
 800c582:	429a      	cmp	r2, r3
 800c584:	d800      	bhi.n	800c588 <HAL_SPI_TransmitReceive+0x154>
 800c586:	e07f      	b.n	800c688 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d005      	beq.n	800c59c <HAL_SPI_TransmitReceive+0x168>
 800c590:	2312      	movs	r3, #18
 800c592:	18fb      	adds	r3, r7, r3
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d000      	beq.n	800c59c <HAL_SPI_TransmitReceive+0x168>
 800c59a:	e069      	b.n	800c670 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	881a      	ldrh	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ac:	1c9a      	adds	r2, r3, #2
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5c0:	e056      	b.n	800c670 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	2202      	movs	r2, #2
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d11b      	bne.n	800c608 <HAL_SPI_TransmitReceive+0x1d4>
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d016      	beq.n	800c608 <HAL_SPI_TransmitReceive+0x1d4>
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d113      	bne.n	800c608 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e4:	881a      	ldrh	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f0:	1c9a      	adds	r2, r3, #2
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c604:	2300      	movs	r3, #0
 800c606:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	2201      	movs	r2, #1
 800c610:	4013      	ands	r3, r2
 800c612:	2b01      	cmp	r3, #1
 800c614:	d11c      	bne.n	800c650 <HAL_SPI_TransmitReceive+0x21c>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2246      	movs	r2, #70	; 0x46
 800c61a:	5a9b      	ldrh	r3, [r3, r2]
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d016      	beq.n	800c650 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68da      	ldr	r2, [r3, #12]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62c:	b292      	uxth	r2, r2
 800c62e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c634:	1c9a      	adds	r2, r3, #2
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2246      	movs	r2, #70	; 0x46
 800c63e:	5a9b      	ldrh	r3, [r3, r2]
 800c640:	b29b      	uxth	r3, r3
 800c642:	3b01      	subs	r3, #1
 800c644:	b299      	uxth	r1, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2246      	movs	r2, #70	; 0x46
 800c64a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c64c:	2301      	movs	r3, #1
 800c64e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c650:	f7fc fb6e 	bl	8008d30 <HAL_GetTick>
 800c654:	0002      	movs	r2, r0
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d807      	bhi.n	800c670 <HAL_SPI_TransmitReceive+0x23c>
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	3301      	adds	r3, #1
 800c664:	d004      	beq.n	800c670 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800c666:	2323      	movs	r3, #35	; 0x23
 800c668:	18fb      	adds	r3, r7, r3
 800c66a:	2203      	movs	r2, #3
 800c66c:	701a      	strb	r2, [r3, #0]
        goto error;
 800c66e:	e0a2      	b.n	800c7b6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c674:	b29b      	uxth	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1a3      	bne.n	800c5c2 <HAL_SPI_TransmitReceive+0x18e>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2246      	movs	r2, #70	; 0x46
 800c67e:	5a9b      	ldrh	r3, [r3, r2]
 800c680:	b29b      	uxth	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d19d      	bne.n	800c5c2 <HAL_SPI_TransmitReceive+0x18e>
 800c686:	e085      	b.n	800c794 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d005      	beq.n	800c69c <HAL_SPI_TransmitReceive+0x268>
 800c690:	2312      	movs	r3, #18
 800c692:	18fb      	adds	r3, r7, r3
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d000      	beq.n	800c69c <HAL_SPI_TransmitReceive+0x268>
 800c69a:	e070      	b.n	800c77e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	330c      	adds	r3, #12
 800c6a6:	7812      	ldrb	r2, [r2, #0]
 800c6a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6c2:	e05c      	b.n	800c77e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d11c      	bne.n	800c70c <HAL_SPI_TransmitReceive+0x2d8>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d017      	beq.n	800c70c <HAL_SPI_TransmitReceive+0x2d8>
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d114      	bne.n	800c70c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	330c      	adds	r3, #12
 800c6ec:	7812      	ldrb	r2, [r2, #0]
 800c6ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	3b01      	subs	r3, #1
 800c702:	b29a      	uxth	r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c708:	2300      	movs	r3, #0
 800c70a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	2201      	movs	r2, #1
 800c714:	4013      	ands	r3, r2
 800c716:	2b01      	cmp	r3, #1
 800c718:	d11e      	bne.n	800c758 <HAL_SPI_TransmitReceive+0x324>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2246      	movs	r2, #70	; 0x46
 800c71e:	5a9b      	ldrh	r3, [r3, r2]
 800c720:	b29b      	uxth	r3, r3
 800c722:	2b00      	cmp	r3, #0
 800c724:	d018      	beq.n	800c758 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	330c      	adds	r3, #12
 800c72c:	001a      	movs	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c732:	7812      	ldrb	r2, [r2, #0]
 800c734:	b2d2      	uxtb	r2, r2
 800c736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73c:	1c5a      	adds	r2, r3, #1
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2246      	movs	r2, #70	; 0x46
 800c746:	5a9b      	ldrh	r3, [r3, r2]
 800c748:	b29b      	uxth	r3, r3
 800c74a:	3b01      	subs	r3, #1
 800c74c:	b299      	uxth	r1, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2246      	movs	r2, #70	; 0x46
 800c752:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c754:	2301      	movs	r3, #1
 800c756:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c758:	f7fc faea 	bl	8008d30 <HAL_GetTick>
 800c75c:	0002      	movs	r2, r0
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c764:	429a      	cmp	r2, r3
 800c766:	d802      	bhi.n	800c76e <HAL_SPI_TransmitReceive+0x33a>
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	3301      	adds	r3, #1
 800c76c:	d102      	bne.n	800c774 <HAL_SPI_TransmitReceive+0x340>
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	2b00      	cmp	r3, #0
 800c772:	d104      	bne.n	800c77e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800c774:	2323      	movs	r3, #35	; 0x23
 800c776:	18fb      	adds	r3, r7, r3
 800c778:	2203      	movs	r2, #3
 800c77a:	701a      	strb	r2, [r3, #0]
        goto error;
 800c77c:	e01b      	b.n	800c7b6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c782:	b29b      	uxth	r3, r3
 800c784:	2b00      	cmp	r3, #0
 800c786:	d19d      	bne.n	800c6c4 <HAL_SPI_TransmitReceive+0x290>
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2246      	movs	r2, #70	; 0x46
 800c78c:	5a9b      	ldrh	r3, [r3, r2]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d197      	bne.n	800c6c4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c794:	69fa      	ldr	r2, [r7, #28]
 800c796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	0018      	movs	r0, r3
 800c79c:	f000 f94c 	bl	800ca38 <SPI_EndRxTxTransaction>
 800c7a0:	1e03      	subs	r3, r0, #0
 800c7a2:	d007      	beq.n	800c7b4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800c7a4:	2323      	movs	r3, #35	; 0x23
 800c7a6:	18fb      	adds	r3, r7, r3
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2220      	movs	r2, #32
 800c7b0:	661a      	str	r2, [r3, #96]	; 0x60
 800c7b2:	e000      	b.n	800c7b6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800c7b4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	225d      	movs	r2, #93	; 0x5d
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	225c      	movs	r2, #92	; 0x5c
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c7c6:	2323      	movs	r3, #35	; 0x23
 800c7c8:	18fb      	adds	r3, r7, r3
 800c7ca:	781b      	ldrb	r3, [r3, #0]
}
 800c7cc:	0018      	movs	r0, r3
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	b00a      	add	sp, #40	; 0x28
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	ffffefff 	.word	0xffffefff

0800c7d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b088      	sub	sp, #32
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	603b      	str	r3, [r7, #0]
 800c7e4:	1dfb      	adds	r3, r7, #7
 800c7e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c7e8:	f7fc faa2 	bl	8008d30 <HAL_GetTick>
 800c7ec:	0002      	movs	r2, r0
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	1a9b      	subs	r3, r3, r2
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	18d3      	adds	r3, r2, r3
 800c7f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c7f8:	f7fc fa9a 	bl	8008d30 <HAL_GetTick>
 800c7fc:	0003      	movs	r3, r0
 800c7fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c800:	4b3a      	ldr	r3, [pc, #232]	; (800c8ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	015b      	lsls	r3, r3, #5
 800c806:	0d1b      	lsrs	r3, r3, #20
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	4353      	muls	r3, r2
 800c80c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c80e:	e058      	b.n	800c8c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	d055      	beq.n	800c8c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c816:	f7fc fa8b 	bl	8008d30 <HAL_GetTick>
 800c81a:	0002      	movs	r2, r0
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	429a      	cmp	r2, r3
 800c824:	d902      	bls.n	800c82c <SPI_WaitFlagStateUntilTimeout+0x54>
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d142      	bne.n	800c8b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	685a      	ldr	r2, [r3, #4]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	21e0      	movs	r1, #224	; 0xe0
 800c838:	438a      	bics	r2, r1
 800c83a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	2382      	movs	r3, #130	; 0x82
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	429a      	cmp	r2, r3
 800c846:	d113      	bne.n	800c870 <SPI_WaitFlagStateUntilTimeout+0x98>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	689a      	ldr	r2, [r3, #8]
 800c84c:	2380      	movs	r3, #128	; 0x80
 800c84e:	021b      	lsls	r3, r3, #8
 800c850:	429a      	cmp	r2, r3
 800c852:	d005      	beq.n	800c860 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	2380      	movs	r3, #128	; 0x80
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d107      	bne.n	800c870 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2140      	movs	r1, #64	; 0x40
 800c86c:	438a      	bics	r2, r1
 800c86e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c874:	2380      	movs	r3, #128	; 0x80
 800c876:	019b      	lsls	r3, r3, #6
 800c878:	429a      	cmp	r2, r3
 800c87a:	d110      	bne.n	800c89e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	491a      	ldr	r1, [pc, #104]	; (800c8f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800c888:	400a      	ands	r2, r1
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2180      	movs	r1, #128	; 0x80
 800c898:	0189      	lsls	r1, r1, #6
 800c89a:	430a      	orrs	r2, r1
 800c89c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	225d      	movs	r2, #93	; 0x5d
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	225c      	movs	r2, #92	; 0x5c
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e017      	b.n	800c8e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d101      	bne.n	800c8bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	425a      	negs	r2, r3
 800c8d2:	4153      	adcs	r3, r2
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	001a      	movs	r2, r3
 800c8d8:	1dfb      	adds	r3, r7, #7
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d197      	bne.n	800c810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	b008      	add	sp, #32
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	46c0      	nop			; (mov r8, r8)
 800c8ec:	200000e0 	.word	0x200000e0
 800c8f0:	ffffdfff 	.word	0xffffdfff

0800c8f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b08a      	sub	sp, #40	; 0x28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
 800c900:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c902:	2317      	movs	r3, #23
 800c904:	18fb      	adds	r3, r7, r3
 800c906:	2200      	movs	r2, #0
 800c908:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c90a:	f7fc fa11 	bl	8008d30 <HAL_GetTick>
 800c90e:	0002      	movs	r2, r0
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	1a9b      	subs	r3, r3, r2
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	18d3      	adds	r3, r2, r3
 800c918:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c91a:	f7fc fa09 	bl	8008d30 <HAL_GetTick>
 800c91e:	0003      	movs	r3, r0
 800c920:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	330c      	adds	r3, #12
 800c928:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c92a:	4b41      	ldr	r3, [pc, #260]	; (800ca30 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	0013      	movs	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	189b      	adds	r3, r3, r2
 800c934:	00da      	lsls	r2, r3, #3
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	0d1b      	lsrs	r3, r3, #20
 800c93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93c:	4353      	muls	r3, r2
 800c93e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c940:	e068      	b.n	800ca14 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	23c0      	movs	r3, #192	; 0xc0
 800c946:	00db      	lsls	r3, r3, #3
 800c948:	429a      	cmp	r2, r3
 800c94a:	d10a      	bne.n	800c962 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d107      	bne.n	800c962 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	b2da      	uxtb	r2, r3
 800c958:	2117      	movs	r1, #23
 800c95a:	187b      	adds	r3, r7, r1
 800c95c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c95e:	187b      	adds	r3, r7, r1
 800c960:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	3301      	adds	r3, #1
 800c966:	d055      	beq.n	800ca14 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c968:	f7fc f9e2 	bl	8008d30 <HAL_GetTick>
 800c96c:	0002      	movs	r2, r0
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c974:	429a      	cmp	r2, r3
 800c976:	d902      	bls.n	800c97e <SPI_WaitFifoStateUntilTimeout+0x8a>
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d142      	bne.n	800ca04 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	21e0      	movs	r1, #224	; 0xe0
 800c98a:	438a      	bics	r2, r1
 800c98c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	2382      	movs	r3, #130	; 0x82
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	429a      	cmp	r2, r3
 800c998:	d113      	bne.n	800c9c2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	689a      	ldr	r2, [r3, #8]
 800c99e:	2380      	movs	r3, #128	; 0x80
 800c9a0:	021b      	lsls	r3, r3, #8
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d005      	beq.n	800c9b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	689a      	ldr	r2, [r3, #8]
 800c9aa:	2380      	movs	r3, #128	; 0x80
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d107      	bne.n	800c9c2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2140      	movs	r1, #64	; 0x40
 800c9be:	438a      	bics	r2, r1
 800c9c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9c6:	2380      	movs	r3, #128	; 0x80
 800c9c8:	019b      	lsls	r3, r3, #6
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d110      	bne.n	800c9f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4916      	ldr	r1, [pc, #88]	; (800ca34 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800c9da:	400a      	ands	r2, r1
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2180      	movs	r1, #128	; 0x80
 800c9ea:	0189      	lsls	r1, r1, #6
 800c9ec:	430a      	orrs	r2, r1
 800c9ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	225d      	movs	r2, #93	; 0x5d
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	225c      	movs	r2, #92	; 0x5c
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e010      	b.n	800ca26 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	4013      	ands	r3, r2
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d18e      	bne.n	800c942 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	0018      	movs	r0, r3
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	b00a      	add	sp, #40	; 0x28
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	46c0      	nop			; (mov r8, r8)
 800ca30:	200000e0 	.word	0x200000e0
 800ca34:	ffffdfff 	.word	0xffffdfff

0800ca38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af02      	add	r7, sp, #8
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	23c0      	movs	r3, #192	; 0xc0
 800ca48:	0159      	lsls	r1, r3, #5
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	0013      	movs	r3, r2
 800ca52:	2200      	movs	r2, #0
 800ca54:	f7ff ff4e 	bl	800c8f4 <SPI_WaitFifoStateUntilTimeout>
 800ca58:	1e03      	subs	r3, r0, #0
 800ca5a:	d007      	beq.n	800ca6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca60:	2220      	movs	r2, #32
 800ca62:	431a      	orrs	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ca68:	2303      	movs	r3, #3
 800ca6a:	e027      	b.n	800cabc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	0013      	movs	r3, r2
 800ca76:	2200      	movs	r2, #0
 800ca78:	2180      	movs	r1, #128	; 0x80
 800ca7a:	f7ff fead 	bl	800c7d8 <SPI_WaitFlagStateUntilTimeout>
 800ca7e:	1e03      	subs	r3, r0, #0
 800ca80:	d007      	beq.n	800ca92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca86:	2220      	movs	r2, #32
 800ca88:	431a      	orrs	r2, r3
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e014      	b.n	800cabc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	23c0      	movs	r3, #192	; 0xc0
 800ca96:	00d9      	lsls	r1, r3, #3
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	0013      	movs	r3, r2
 800caa0:	2200      	movs	r2, #0
 800caa2:	f7ff ff27 	bl	800c8f4 <SPI_WaitFifoStateUntilTimeout>
 800caa6:	1e03      	subs	r3, r0, #0
 800caa8:	d007      	beq.n	800caba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800caae:	2220      	movs	r2, #32
 800cab0:	431a      	orrs	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cab6:	2303      	movs	r3, #3
 800cab8:	e000      	b.n	800cabc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	0018      	movs	r0, r3
 800cabe:	46bd      	mov	sp, r7
 800cac0:	b004      	add	sp, #16
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e04a      	b.n	800cb6c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	223d      	movs	r2, #61	; 0x3d
 800cada:	5c9b      	ldrb	r3, [r3, r2]
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d107      	bne.n	800caf2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	223c      	movs	r2, #60	; 0x3c
 800cae6:	2100      	movs	r1, #0
 800cae8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	0018      	movs	r0, r3
 800caee:	f7fb fd5d 	bl	80085ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	223d      	movs	r2, #61	; 0x3d
 800caf6:	2102      	movs	r1, #2
 800caf8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	3304      	adds	r3, #4
 800cb02:	0019      	movs	r1, r3
 800cb04:	0010      	movs	r0, r2
 800cb06:	f000 f9dd 	bl	800cec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2248      	movs	r2, #72	; 0x48
 800cb0e:	2101      	movs	r1, #1
 800cb10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	223e      	movs	r2, #62	; 0x3e
 800cb16:	2101      	movs	r1, #1
 800cb18:	5499      	strb	r1, [r3, r2]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	223f      	movs	r2, #63	; 0x3f
 800cb1e:	2101      	movs	r1, #1
 800cb20:	5499      	strb	r1, [r3, r2]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2240      	movs	r2, #64	; 0x40
 800cb26:	2101      	movs	r1, #1
 800cb28:	5499      	strb	r1, [r3, r2]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2241      	movs	r2, #65	; 0x41
 800cb2e:	2101      	movs	r1, #1
 800cb30:	5499      	strb	r1, [r3, r2]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2242      	movs	r2, #66	; 0x42
 800cb36:	2101      	movs	r1, #1
 800cb38:	5499      	strb	r1, [r3, r2]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2243      	movs	r2, #67	; 0x43
 800cb3e:	2101      	movs	r1, #1
 800cb40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2244      	movs	r2, #68	; 0x44
 800cb46:	2101      	movs	r1, #1
 800cb48:	5499      	strb	r1, [r3, r2]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2245      	movs	r2, #69	; 0x45
 800cb4e:	2101      	movs	r1, #1
 800cb50:	5499      	strb	r1, [r3, r2]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2246      	movs	r2, #70	; 0x46
 800cb56:	2101      	movs	r1, #1
 800cb58:	5499      	strb	r1, [r3, r2]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2247      	movs	r2, #71	; 0x47
 800cb5e:	2101      	movs	r1, #1
 800cb60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	223d      	movs	r2, #61	; 0x3d
 800cb66:	2101      	movs	r1, #1
 800cb68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	b002      	add	sp, #8
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	223d      	movs	r2, #61	; 0x3d
 800cb80:	5c9b      	ldrb	r3, [r3, r2]
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d001      	beq.n	800cb8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e03c      	b.n	800cc06 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	223d      	movs	r2, #61	; 0x3d
 800cb90:	2102      	movs	r1, #2
 800cb92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68da      	ldr	r2, [r3, #12]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2101      	movs	r1, #1
 800cba0:	430a      	orrs	r2, r1
 800cba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a19      	ldr	r2, [pc, #100]	; (800cc10 <HAL_TIM_Base_Start_IT+0x9c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d009      	beq.n	800cbc2 <HAL_TIM_Base_Start_IT+0x4e>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a18      	ldr	r2, [pc, #96]	; (800cc14 <HAL_TIM_Base_Start_IT+0xa0>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d004      	beq.n	800cbc2 <HAL_TIM_Base_Start_IT+0x4e>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a16      	ldr	r2, [pc, #88]	; (800cc18 <HAL_TIM_Base_Start_IT+0xa4>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d116      	bne.n	800cbf0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	4a14      	ldr	r2, [pc, #80]	; (800cc1c <HAL_TIM_Base_Start_IT+0xa8>)
 800cbca:	4013      	ands	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2b06      	cmp	r3, #6
 800cbd2:	d016      	beq.n	800cc02 <HAL_TIM_Base_Start_IT+0x8e>
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	2380      	movs	r3, #128	; 0x80
 800cbd8:	025b      	lsls	r3, r3, #9
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d011      	beq.n	800cc02 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2101      	movs	r1, #1
 800cbea:	430a      	orrs	r2, r1
 800cbec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbee:	e008      	b.n	800cc02 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	e000      	b.n	800cc04 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc02:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	0018      	movs	r0, r3
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	b004      	add	sp, #16
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	46c0      	nop			; (mov r8, r8)
 800cc10:	40012c00 	.word	0x40012c00
 800cc14:	40000400 	.word	0x40000400
 800cc18:	40014000 	.word	0x40014000
 800cc1c:	00010007 	.word	0x00010007

0800cc20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	2202      	movs	r2, #2
 800cc30:	4013      	ands	r3, r2
 800cc32:	2b02      	cmp	r3, #2
 800cc34:	d124      	bne.n	800cc80 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	2202      	movs	r2, #2
 800cc3e:	4013      	ands	r3, r2
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d11d      	bne.n	800cc80 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2203      	movs	r2, #3
 800cc4a:	4252      	negs	r2, r2
 800cc4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2201      	movs	r2, #1
 800cc52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	d004      	beq.n	800cc6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	0018      	movs	r0, r3
 800cc64:	f000 f916 	bl	800ce94 <HAL_TIM_IC_CaptureCallback>
 800cc68:	e007      	b.n	800cc7a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	0018      	movs	r0, r3
 800cc6e:	f000 f909 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	0018      	movs	r0, r3
 800cc76:	f000 f915 	bl	800cea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	2204      	movs	r2, #4
 800cc88:	4013      	ands	r3, r2
 800cc8a:	2b04      	cmp	r3, #4
 800cc8c:	d125      	bne.n	800ccda <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	2204      	movs	r2, #4
 800cc96:	4013      	ands	r3, r2
 800cc98:	2b04      	cmp	r3, #4
 800cc9a:	d11e      	bne.n	800ccda <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2205      	movs	r2, #5
 800cca2:	4252      	negs	r2, r2
 800cca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2202      	movs	r2, #2
 800ccaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	699a      	ldr	r2, [r3, #24]
 800ccb2:	23c0      	movs	r3, #192	; 0xc0
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	d004      	beq.n	800ccc4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	0018      	movs	r0, r3
 800ccbe:	f000 f8e9 	bl	800ce94 <HAL_TIM_IC_CaptureCallback>
 800ccc2:	e007      	b.n	800ccd4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	0018      	movs	r0, r3
 800ccc8:	f000 f8dc 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	0018      	movs	r0, r3
 800ccd0:	f000 f8e8 	bl	800cea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	2208      	movs	r2, #8
 800cce2:	4013      	ands	r3, r2
 800cce4:	2b08      	cmp	r3, #8
 800cce6:	d124      	bne.n	800cd32 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	2208      	movs	r2, #8
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	2b08      	cmp	r3, #8
 800ccf4:	d11d      	bne.n	800cd32 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2209      	movs	r2, #9
 800ccfc:	4252      	negs	r2, r2
 800ccfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2204      	movs	r2, #4
 800cd04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	2203      	movs	r2, #3
 800cd0e:	4013      	ands	r3, r2
 800cd10:	d004      	beq.n	800cd1c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	0018      	movs	r0, r3
 800cd16:	f000 f8bd 	bl	800ce94 <HAL_TIM_IC_CaptureCallback>
 800cd1a:	e007      	b.n	800cd2c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	0018      	movs	r0, r3
 800cd20:	f000 f8b0 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	0018      	movs	r0, r3
 800cd28:	f000 f8bc 	bl	800cea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	2210      	movs	r2, #16
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	2b10      	cmp	r3, #16
 800cd3e:	d125      	bne.n	800cd8c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	2210      	movs	r2, #16
 800cd48:	4013      	ands	r3, r2
 800cd4a:	2b10      	cmp	r3, #16
 800cd4c:	d11e      	bne.n	800cd8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2211      	movs	r2, #17
 800cd54:	4252      	negs	r2, r2
 800cd56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2208      	movs	r2, #8
 800cd5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	69da      	ldr	r2, [r3, #28]
 800cd64:	23c0      	movs	r3, #192	; 0xc0
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4013      	ands	r3, r2
 800cd6a:	d004      	beq.n	800cd76 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	0018      	movs	r0, r3
 800cd70:	f000 f890 	bl	800ce94 <HAL_TIM_IC_CaptureCallback>
 800cd74:	e007      	b.n	800cd86 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	0018      	movs	r0, r3
 800cd7a:	f000 f883 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	0018      	movs	r0, r3
 800cd82:	f000 f88f 	bl	800cea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	691b      	ldr	r3, [r3, #16]
 800cd92:	2201      	movs	r2, #1
 800cd94:	4013      	ands	r3, r2
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d10f      	bne.n	800cdba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	2201      	movs	r2, #1
 800cda2:	4013      	ands	r3, r2
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d108      	bne.n	800cdba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2202      	movs	r2, #2
 800cdae:	4252      	negs	r2, r2
 800cdb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	f7fa fac1 	bl	800733c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	2280      	movs	r2, #128	; 0x80
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	2b80      	cmp	r3, #128	; 0x80
 800cdc6:	d10f      	bne.n	800cde8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	2280      	movs	r2, #128	; 0x80
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	2b80      	cmp	r3, #128	; 0x80
 800cdd4:	d108      	bne.n	800cde8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2281      	movs	r2, #129	; 0x81
 800cddc:	4252      	negs	r2, r2
 800cdde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	0018      	movs	r0, r3
 800cde4:	f000 f954 	bl	800d090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	691a      	ldr	r2, [r3, #16]
 800cdee:	2380      	movs	r3, #128	; 0x80
 800cdf0:	005b      	lsls	r3, r3, #1
 800cdf2:	401a      	ands	r2, r3
 800cdf4:	2380      	movs	r3, #128	; 0x80
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d10e      	bne.n	800ce1a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	2280      	movs	r2, #128	; 0x80
 800ce04:	4013      	ands	r3, r2
 800ce06:	2b80      	cmp	r3, #128	; 0x80
 800ce08:	d107      	bne.n	800ce1a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a1c      	ldr	r2, [pc, #112]	; (800ce80 <HAL_TIM_IRQHandler+0x260>)
 800ce10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	0018      	movs	r0, r3
 800ce16:	f000 f943 	bl	800d0a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	2240      	movs	r2, #64	; 0x40
 800ce22:	4013      	ands	r3, r2
 800ce24:	2b40      	cmp	r3, #64	; 0x40
 800ce26:	d10f      	bne.n	800ce48 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	2240      	movs	r2, #64	; 0x40
 800ce30:	4013      	ands	r3, r2
 800ce32:	2b40      	cmp	r3, #64	; 0x40
 800ce34:	d108      	bne.n	800ce48 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2241      	movs	r2, #65	; 0x41
 800ce3c:	4252      	negs	r2, r2
 800ce3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	0018      	movs	r0, r3
 800ce44:	f000 f836 	bl	800ceb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	2220      	movs	r2, #32
 800ce50:	4013      	ands	r3, r2
 800ce52:	2b20      	cmp	r3, #32
 800ce54:	d10f      	bne.n	800ce76 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	2220      	movs	r2, #32
 800ce5e:	4013      	ands	r3, r2
 800ce60:	2b20      	cmp	r3, #32
 800ce62:	d108      	bne.n	800ce76 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2221      	movs	r2, #33	; 0x21
 800ce6a:	4252      	negs	r2, r2
 800ce6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	0018      	movs	r0, r3
 800ce72:	f000 f905 	bl	800d080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce76:	46c0      	nop			; (mov r8, r8)
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	b002      	add	sp, #8
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	46c0      	nop			; (mov r8, r8)
 800ce80:	fffffeff 	.word	0xfffffeff

0800ce84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce8c:	46c0      	nop			; (mov r8, r8)
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	b002      	add	sp, #8
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce9c:	46c0      	nop			; (mov r8, r8)
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	b002      	add	sp, #8
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ceac:	46c0      	nop			; (mov r8, r8)
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cebc:	46c0      	nop			; (mov r8, r8)
 800cebe:	46bd      	mov	sp, r7
 800cec0:	b002      	add	sp, #8
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4a2f      	ldr	r2, [pc, #188]	; (800cf94 <TIM_Base_SetConfig+0xd0>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d003      	beq.n	800cee4 <TIM_Base_SetConfig+0x20>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a2e      	ldr	r2, [pc, #184]	; (800cf98 <TIM_Base_SetConfig+0xd4>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d108      	bne.n	800cef6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2270      	movs	r2, #112	; 0x70
 800cee8:	4393      	bics	r3, r2
 800ceea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a26      	ldr	r2, [pc, #152]	; (800cf94 <TIM_Base_SetConfig+0xd0>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d013      	beq.n	800cf26 <TIM_Base_SetConfig+0x62>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a25      	ldr	r2, [pc, #148]	; (800cf98 <TIM_Base_SetConfig+0xd4>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d00f      	beq.n	800cf26 <TIM_Base_SetConfig+0x62>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a24      	ldr	r2, [pc, #144]	; (800cf9c <TIM_Base_SetConfig+0xd8>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d00b      	beq.n	800cf26 <TIM_Base_SetConfig+0x62>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a23      	ldr	r2, [pc, #140]	; (800cfa0 <TIM_Base_SetConfig+0xdc>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d007      	beq.n	800cf26 <TIM_Base_SetConfig+0x62>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a22      	ldr	r2, [pc, #136]	; (800cfa4 <TIM_Base_SetConfig+0xe0>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d003      	beq.n	800cf26 <TIM_Base_SetConfig+0x62>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a21      	ldr	r2, [pc, #132]	; (800cfa8 <TIM_Base_SetConfig+0xe4>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d108      	bne.n	800cf38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	4a20      	ldr	r2, [pc, #128]	; (800cfac <TIM_Base_SetConfig+0xe8>)
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2280      	movs	r2, #128	; 0x80
 800cf3c:	4393      	bics	r3, r2
 800cf3e:	001a      	movs	r2, r3
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	695b      	ldr	r3, [r3, #20]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	689a      	ldr	r2, [r3, #8]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a0c      	ldr	r2, [pc, #48]	; (800cf94 <TIM_Base_SetConfig+0xd0>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d00b      	beq.n	800cf7e <TIM_Base_SetConfig+0xba>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a0d      	ldr	r2, [pc, #52]	; (800cfa0 <TIM_Base_SetConfig+0xdc>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d007      	beq.n	800cf7e <TIM_Base_SetConfig+0xba>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a0c      	ldr	r2, [pc, #48]	; (800cfa4 <TIM_Base_SetConfig+0xe0>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d003      	beq.n	800cf7e <TIM_Base_SetConfig+0xba>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a0b      	ldr	r2, [pc, #44]	; (800cfa8 <TIM_Base_SetConfig+0xe4>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d103      	bne.n	800cf86 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	691a      	ldr	r2, [r3, #16]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	615a      	str	r2, [r3, #20]
}
 800cf8c:	46c0      	nop			; (mov r8, r8)
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	b004      	add	sp, #16
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	40012c00 	.word	0x40012c00
 800cf98:	40000400 	.word	0x40000400
 800cf9c:	40002000 	.word	0x40002000
 800cfa0:	40014000 	.word	0x40014000
 800cfa4:	40014400 	.word	0x40014400
 800cfa8:	40014800 	.word	0x40014800
 800cfac:	fffffcff 	.word	0xfffffcff

0800cfb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	223c      	movs	r2, #60	; 0x3c
 800cfbe:	5c9b      	ldrb	r3, [r3, r2]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d101      	bne.n	800cfc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	e04f      	b.n	800d068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	223c      	movs	r2, #60	; 0x3c
 800cfcc:	2101      	movs	r1, #1
 800cfce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	223d      	movs	r2, #61	; 0x3d
 800cfd4:	2102      	movs	r1, #2
 800cfd6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a20      	ldr	r2, [pc, #128]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d108      	bne.n	800d004 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	4a1f      	ldr	r2, [pc, #124]	; (800d074 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cff6:	4013      	ands	r3, r2
 800cff8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	4313      	orrs	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2270      	movs	r2, #112	; 0x70
 800d008:	4393      	bics	r3, r2
 800d00a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	4313      	orrs	r3, r2
 800d014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a13      	ldr	r2, [pc, #76]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d009      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a12      	ldr	r2, [pc, #72]	; (800d078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d004      	beq.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a11      	ldr	r2, [pc, #68]	; (800d07c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d10c      	bne.n	800d056 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	2280      	movs	r2, #128	; 0x80
 800d040:	4393      	bics	r3, r2
 800d042:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	223d      	movs	r2, #61	; 0x3d
 800d05a:	2101      	movs	r1, #1
 800d05c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	223c      	movs	r2, #60	; 0x3c
 800d062:	2100      	movs	r1, #0
 800d064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	0018      	movs	r0, r3
 800d06a:	46bd      	mov	sp, r7
 800d06c:	b004      	add	sp, #16
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	40012c00 	.word	0x40012c00
 800d074:	ff0fffff 	.word	0xff0fffff
 800d078:	40000400 	.word	0x40000400
 800d07c:	40014000 	.word	0x40014000

0800d080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d088:	46c0      	nop			; (mov r8, r8)
 800d08a:	46bd      	mov	sp, r7
 800d08c:	b002      	add	sp, #8
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d098:	46c0      	nop			; (mov r8, r8)
 800d09a:	46bd      	mov	sp, r7
 800d09c:	b002      	add	sp, #8
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d0a8:	46c0      	nop			; (mov r8, r8)
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	b002      	add	sp, #8
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e046      	b.n	800d150 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2288      	movs	r2, #136	; 0x88
 800d0c6:	589b      	ldr	r3, [r3, r2]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d107      	bne.n	800d0dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2284      	movs	r2, #132	; 0x84
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	0018      	movs	r0, r3
 800d0d8:	f7fb fa8e 	bl	80085f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2288      	movs	r2, #136	; 0x88
 800d0e0:	2124      	movs	r1, #36	; 0x24
 800d0e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2101      	movs	r1, #1
 800d0f0:	438a      	bics	r2, r1
 800d0f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f000 fd40 	bl	800db7c <UART_SetConfig>
 800d0fc:	0003      	movs	r3, r0
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d101      	bne.n	800d106 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	e024      	b.n	800d150 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d003      	beq.n	800d116 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	0018      	movs	r0, r3
 800d112:	f000 fed7 	bl	800dec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	490d      	ldr	r1, [pc, #52]	; (800d158 <HAL_UART_Init+0xa8>)
 800d122:	400a      	ands	r2, r1
 800d124:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	689a      	ldr	r2, [r3, #8]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	212a      	movs	r1, #42	; 0x2a
 800d132:	438a      	bics	r2, r1
 800d134:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2101      	movs	r1, #1
 800d142:	430a      	orrs	r2, r1
 800d144:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	0018      	movs	r0, r3
 800d14a:	f000 ff6f 	bl	800e02c <UART_CheckIdleState>
 800d14e:	0003      	movs	r3, r0
}
 800d150:	0018      	movs	r0, r3
 800d152:	46bd      	mov	sp, r7
 800d154:	b002      	add	sp, #8
 800d156:	bd80      	pop	{r7, pc}
 800d158:	ffffb7ff 	.word	0xffffb7ff

0800d15c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08a      	sub	sp, #40	; 0x28
 800d160:	af02      	add	r7, sp, #8
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	603b      	str	r3, [r7, #0]
 800d168:	1dbb      	adds	r3, r7, #6
 800d16a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2288      	movs	r2, #136	; 0x88
 800d170:	589b      	ldr	r3, [r3, r2]
 800d172:	2b20      	cmp	r3, #32
 800d174:	d000      	beq.n	800d178 <HAL_UART_Transmit+0x1c>
 800d176:	e088      	b.n	800d28a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <HAL_UART_Transmit+0x2a>
 800d17e:	1dbb      	adds	r3, r7, #6
 800d180:	881b      	ldrh	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	e080      	b.n	800d28c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	689a      	ldr	r2, [r3, #8]
 800d18e:	2380      	movs	r3, #128	; 0x80
 800d190:	015b      	lsls	r3, r3, #5
 800d192:	429a      	cmp	r2, r3
 800d194:	d109      	bne.n	800d1aa <HAL_UART_Transmit+0x4e>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d105      	bne.n	800d1aa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	d001      	beq.n	800d1aa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e070      	b.n	800d28c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2290      	movs	r2, #144	; 0x90
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2288      	movs	r2, #136	; 0x88
 800d1b6:	2121      	movs	r1, #33	; 0x21
 800d1b8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1ba:	f7fb fdb9 	bl	8008d30 <HAL_GetTick>
 800d1be:	0003      	movs	r3, r0
 800d1c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	1dba      	adds	r2, r7, #6
 800d1c6:	2154      	movs	r1, #84	; 0x54
 800d1c8:	8812      	ldrh	r2, [r2, #0]
 800d1ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	1dba      	adds	r2, r7, #6
 800d1d0:	2156      	movs	r1, #86	; 0x56
 800d1d2:	8812      	ldrh	r2, [r2, #0]
 800d1d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	689a      	ldr	r2, [r3, #8]
 800d1da:	2380      	movs	r3, #128	; 0x80
 800d1dc:	015b      	lsls	r3, r3, #5
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d108      	bne.n	800d1f4 <HAL_UART_Transmit+0x98>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d104      	bne.n	800d1f4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	61bb      	str	r3, [r7, #24]
 800d1f2:	e003      	b.n	800d1fc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d1fc:	e02c      	b.n	800d258 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	0013      	movs	r3, r2
 800d208:	2200      	movs	r2, #0
 800d20a:	2180      	movs	r1, #128	; 0x80
 800d20c:	f000 ff5c 	bl	800e0c8 <UART_WaitOnFlagUntilTimeout>
 800d210:	1e03      	subs	r3, r0, #0
 800d212:	d001      	beq.n	800d218 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	e039      	b.n	800d28c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	001a      	movs	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	05d2      	lsls	r2, r2, #23
 800d22a:	0dd2      	lsrs	r2, r2, #23
 800d22c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	3302      	adds	r3, #2
 800d232:	61bb      	str	r3, [r7, #24]
 800d234:	e007      	b.n	800d246 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	781a      	ldrb	r2, [r3, #0]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	3301      	adds	r3, #1
 800d244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2256      	movs	r2, #86	; 0x56
 800d24a:	5a9b      	ldrh	r3, [r3, r2]
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	b299      	uxth	r1, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2256      	movs	r2, #86	; 0x56
 800d256:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2256      	movs	r2, #86	; 0x56
 800d25c:	5a9b      	ldrh	r3, [r3, r2]
 800d25e:	b29b      	uxth	r3, r3
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1cc      	bne.n	800d1fe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	0013      	movs	r3, r2
 800d26e:	2200      	movs	r2, #0
 800d270:	2140      	movs	r1, #64	; 0x40
 800d272:	f000 ff29 	bl	800e0c8 <UART_WaitOnFlagUntilTimeout>
 800d276:	1e03      	subs	r3, r0, #0
 800d278:	d001      	beq.n	800d27e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800d27a:	2303      	movs	r3, #3
 800d27c:	e006      	b.n	800d28c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2288      	movs	r2, #136	; 0x88
 800d282:	2120      	movs	r1, #32
 800d284:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d286:	2300      	movs	r3, #0
 800d288:	e000      	b.n	800d28c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800d28a:	2302      	movs	r3, #2
  }
}
 800d28c:	0018      	movs	r0, r3
 800d28e:	46bd      	mov	sp, r7
 800d290:	b008      	add	sp, #32
 800d292:	bd80      	pop	{r7, pc}

0800d294 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08a      	sub	sp, #40	; 0x28
 800d298:	af02      	add	r7, sp, #8
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	1dbb      	adds	r3, r7, #6
 800d2a2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	228c      	movs	r2, #140	; 0x8c
 800d2a8:	589b      	ldr	r3, [r3, r2]
 800d2aa:	2b20      	cmp	r3, #32
 800d2ac:	d000      	beq.n	800d2b0 <HAL_UART_Receive+0x1c>
 800d2ae:	e0cc      	b.n	800d44a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d003      	beq.n	800d2be <HAL_UART_Receive+0x2a>
 800d2b6:	1dbb      	adds	r3, r7, #6
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d101      	bne.n	800d2c2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e0c4      	b.n	800d44c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	689a      	ldr	r2, [r3, #8]
 800d2c6:	2380      	movs	r3, #128	; 0x80
 800d2c8:	015b      	lsls	r3, r3, #5
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d109      	bne.n	800d2e2 <HAL_UART_Receive+0x4e>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d105      	bne.n	800d2e2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	4013      	ands	r3, r2
 800d2dc:	d001      	beq.n	800d2e2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e0b4      	b.n	800d44c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2290      	movs	r2, #144	; 0x90
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	228c      	movs	r2, #140	; 0x8c
 800d2ee:	2122      	movs	r1, #34	; 0x22
 800d2f0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d2f8:	f7fb fd1a 	bl	8008d30 <HAL_GetTick>
 800d2fc:	0003      	movs	r3, r0
 800d2fe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	1dba      	adds	r2, r7, #6
 800d304:	215c      	movs	r1, #92	; 0x5c
 800d306:	8812      	ldrh	r2, [r2, #0]
 800d308:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	1dba      	adds	r2, r7, #6
 800d30e:	215e      	movs	r1, #94	; 0x5e
 800d310:	8812      	ldrh	r2, [r2, #0]
 800d312:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	689a      	ldr	r2, [r3, #8]
 800d318:	2380      	movs	r3, #128	; 0x80
 800d31a:	015b      	lsls	r3, r3, #5
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d10d      	bne.n	800d33c <HAL_UART_Receive+0xa8>
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d104      	bne.n	800d332 <HAL_UART_Receive+0x9e>
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2260      	movs	r2, #96	; 0x60
 800d32c:	4949      	ldr	r1, [pc, #292]	; (800d454 <HAL_UART_Receive+0x1c0>)
 800d32e:	5299      	strh	r1, [r3, r2]
 800d330:	e02e      	b.n	800d390 <HAL_UART_Receive+0xfc>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2260      	movs	r2, #96	; 0x60
 800d336:	21ff      	movs	r1, #255	; 0xff
 800d338:	5299      	strh	r1, [r3, r2]
 800d33a:	e029      	b.n	800d390 <HAL_UART_Receive+0xfc>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10d      	bne.n	800d360 <HAL_UART_Receive+0xcc>
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d104      	bne.n	800d356 <HAL_UART_Receive+0xc2>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2260      	movs	r2, #96	; 0x60
 800d350:	21ff      	movs	r1, #255	; 0xff
 800d352:	5299      	strh	r1, [r3, r2]
 800d354:	e01c      	b.n	800d390 <HAL_UART_Receive+0xfc>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2260      	movs	r2, #96	; 0x60
 800d35a:	217f      	movs	r1, #127	; 0x7f
 800d35c:	5299      	strh	r1, [r3, r2]
 800d35e:	e017      	b.n	800d390 <HAL_UART_Receive+0xfc>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	689a      	ldr	r2, [r3, #8]
 800d364:	2380      	movs	r3, #128	; 0x80
 800d366:	055b      	lsls	r3, r3, #21
 800d368:	429a      	cmp	r2, r3
 800d36a:	d10d      	bne.n	800d388 <HAL_UART_Receive+0xf4>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d104      	bne.n	800d37e <HAL_UART_Receive+0xea>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2260      	movs	r2, #96	; 0x60
 800d378:	217f      	movs	r1, #127	; 0x7f
 800d37a:	5299      	strh	r1, [r3, r2]
 800d37c:	e008      	b.n	800d390 <HAL_UART_Receive+0xfc>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2260      	movs	r2, #96	; 0x60
 800d382:	213f      	movs	r1, #63	; 0x3f
 800d384:	5299      	strh	r1, [r3, r2]
 800d386:	e003      	b.n	800d390 <HAL_UART_Receive+0xfc>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2260      	movs	r2, #96	; 0x60
 800d38c:	2100      	movs	r1, #0
 800d38e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800d390:	2312      	movs	r3, #18
 800d392:	18fb      	adds	r3, r7, r3
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	2160      	movs	r1, #96	; 0x60
 800d398:	5a52      	ldrh	r2, [r2, r1]
 800d39a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	689a      	ldr	r2, [r3, #8]
 800d3a0:	2380      	movs	r3, #128	; 0x80
 800d3a2:	015b      	lsls	r3, r3, #5
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d108      	bne.n	800d3ba <HAL_UART_Receive+0x126>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d104      	bne.n	800d3ba <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	61bb      	str	r3, [r7, #24]
 800d3b8:	e003      	b.n	800d3c2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d3c2:	e036      	b.n	800d432 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d3c4:	697a      	ldr	r2, [r7, #20]
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	0013      	movs	r3, r2
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2120      	movs	r1, #32
 800d3d2:	f000 fe79 	bl	800e0c8 <UART_WaitOnFlagUntilTimeout>
 800d3d6:	1e03      	subs	r3, r0, #0
 800d3d8:	d001      	beq.n	800d3de <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	e036      	b.n	800d44c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10e      	bne.n	800d402 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	2212      	movs	r2, #18
 800d3ee:	18ba      	adds	r2, r7, r2
 800d3f0:	8812      	ldrh	r2, [r2, #0]
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	3302      	adds	r3, #2
 800d3fe:	61bb      	str	r3, [r7, #24]
 800d400:	e00e      	b.n	800d420 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2212      	movs	r2, #18
 800d40c:	18ba      	adds	r2, r7, r2
 800d40e:	8812      	ldrh	r2, [r2, #0]
 800d410:	b2d2      	uxtb	r2, r2
 800d412:	4013      	ands	r3, r2
 800d414:	b2da      	uxtb	r2, r3
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	3301      	adds	r3, #1
 800d41e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	225e      	movs	r2, #94	; 0x5e
 800d424:	5a9b      	ldrh	r3, [r3, r2]
 800d426:	b29b      	uxth	r3, r3
 800d428:	3b01      	subs	r3, #1
 800d42a:	b299      	uxth	r1, r3
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	225e      	movs	r2, #94	; 0x5e
 800d430:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	225e      	movs	r2, #94	; 0x5e
 800d436:	5a9b      	ldrh	r3, [r3, r2]
 800d438:	b29b      	uxth	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1c2      	bne.n	800d3c4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	228c      	movs	r2, #140	; 0x8c
 800d442:	2120      	movs	r1, #32
 800d444:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	e000      	b.n	800d44c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800d44a:	2302      	movs	r3, #2
  }
}
 800d44c:	0018      	movs	r0, r3
 800d44e:	46bd      	mov	sp, r7
 800d450:	b008      	add	sp, #32
 800d452:	bd80      	pop	{r7, pc}
 800d454:	000001ff 	.word	0x000001ff

0800d458 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	1dbb      	adds	r3, r7, #6
 800d464:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	228c      	movs	r2, #140	; 0x8c
 800d46a:	589b      	ldr	r3, [r3, r2]
 800d46c:	2b20      	cmp	r3, #32
 800d46e:	d145      	bne.n	800d4fc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d003      	beq.n	800d47e <HAL_UART_Receive_DMA+0x26>
 800d476:	1dbb      	adds	r3, r7, #6
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d101      	bne.n	800d482 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d47e:	2301      	movs	r3, #1
 800d480:	e03d      	b.n	800d4fe <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	689a      	ldr	r2, [r3, #8]
 800d486:	2380      	movs	r3, #128	; 0x80
 800d488:	015b      	lsls	r3, r3, #5
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d109      	bne.n	800d4a2 <HAL_UART_Receive_DMA+0x4a>
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d105      	bne.n	800d4a2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	2201      	movs	r2, #1
 800d49a:	4013      	ands	r3, r2
 800d49c:	d001      	beq.n	800d4a2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e02d      	b.n	800d4fe <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	2380      	movs	r3, #128	; 0x80
 800d4b0:	041b      	lsls	r3, r3, #16
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	d019      	beq.n	800d4ea <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ba:	613b      	str	r3, [r7, #16]
  return(result);
 800d4bc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4be:	61fb      	str	r3, [r7, #28]
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	f383 8810 	msr	PRIMASK, r3
}
 800d4ca:	46c0      	nop			; (mov r8, r8)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2180      	movs	r1, #128	; 0x80
 800d4d8:	04c9      	lsls	r1, r1, #19
 800d4da:	430a      	orrs	r2, r1
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	f383 8810 	msr	PRIMASK, r3
}
 800d4e8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d4ea:	1dbb      	adds	r3, r7, #6
 800d4ec:	881a      	ldrh	r2, [r3, #0]
 800d4ee:	68b9      	ldr	r1, [r7, #8]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	0018      	movs	r0, r3
 800d4f4:	f000 feb0 	bl	800e258 <UART_Start_Receive_DMA>
 800d4f8:	0003      	movs	r3, r0
 800d4fa:	e000      	b.n	800d4fe <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800d4fc:	2302      	movs	r3, #2
  }
}
 800d4fe:	0018      	movs	r0, r3
 800d500:	46bd      	mov	sp, r7
 800d502:	b008      	add	sp, #32
 800d504:	bd80      	pop	{r7, pc}
	...

0800d508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d508:	b5b0      	push	{r4, r5, r7, lr}
 800d50a:	b0aa      	sub	sp, #168	; 0xa8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	69db      	ldr	r3, [r3, #28]
 800d516:	22a4      	movs	r2, #164	; 0xa4
 800d518:	18b9      	adds	r1, r7, r2
 800d51a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	20a0      	movs	r0, #160	; 0xa0
 800d524:	1839      	adds	r1, r7, r0
 800d526:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	249c      	movs	r4, #156	; 0x9c
 800d530:	1939      	adds	r1, r7, r4
 800d532:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d534:	0011      	movs	r1, r2
 800d536:	18bb      	adds	r3, r7, r2
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4aa2      	ldr	r2, [pc, #648]	; (800d7c4 <HAL_UART_IRQHandler+0x2bc>)
 800d53c:	4013      	ands	r3, r2
 800d53e:	2298      	movs	r2, #152	; 0x98
 800d540:	18bd      	adds	r5, r7, r2
 800d542:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800d544:	18bb      	adds	r3, r7, r2
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d11a      	bne.n	800d582 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d54c:	187b      	adds	r3, r7, r1
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2220      	movs	r2, #32
 800d552:	4013      	ands	r3, r2
 800d554:	d015      	beq.n	800d582 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d556:	183b      	adds	r3, r7, r0
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2220      	movs	r2, #32
 800d55c:	4013      	ands	r3, r2
 800d55e:	d105      	bne.n	800d56c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d560:	193b      	adds	r3, r7, r4
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	2380      	movs	r3, #128	; 0x80
 800d566:	055b      	lsls	r3, r3, #21
 800d568:	4013      	ands	r3, r2
 800d56a:	d00a      	beq.n	800d582 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d570:	2b00      	cmp	r3, #0
 800d572:	d100      	bne.n	800d576 <HAL_UART_IRQHandler+0x6e>
 800d574:	e2dc      	b.n	800db30 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	0010      	movs	r0, r2
 800d57e:	4798      	blx	r3
      }
      return;
 800d580:	e2d6      	b.n	800db30 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d582:	2398      	movs	r3, #152	; 0x98
 800d584:	18fb      	adds	r3, r7, r3
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d100      	bne.n	800d58e <HAL_UART_IRQHandler+0x86>
 800d58c:	e122      	b.n	800d7d4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d58e:	239c      	movs	r3, #156	; 0x9c
 800d590:	18fb      	adds	r3, r7, r3
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a8c      	ldr	r2, [pc, #560]	; (800d7c8 <HAL_UART_IRQHandler+0x2c0>)
 800d596:	4013      	ands	r3, r2
 800d598:	d106      	bne.n	800d5a8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d59a:	23a0      	movs	r3, #160	; 0xa0
 800d59c:	18fb      	adds	r3, r7, r3
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a8a      	ldr	r2, [pc, #552]	; (800d7cc <HAL_UART_IRQHandler+0x2c4>)
 800d5a2:	4013      	ands	r3, r2
 800d5a4:	d100      	bne.n	800d5a8 <HAL_UART_IRQHandler+0xa0>
 800d5a6:	e115      	b.n	800d7d4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d5a8:	23a4      	movs	r3, #164	; 0xa4
 800d5aa:	18fb      	adds	r3, r7, r3
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	d012      	beq.n	800d5da <HAL_UART_IRQHandler+0xd2>
 800d5b4:	23a0      	movs	r3, #160	; 0xa0
 800d5b6:	18fb      	adds	r3, r7, r3
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	2380      	movs	r3, #128	; 0x80
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	4013      	ands	r3, r2
 800d5c0:	d00b      	beq.n	800d5da <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2290      	movs	r2, #144	; 0x90
 800d5ce:	589b      	ldr	r3, [r3, r2]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	431a      	orrs	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2190      	movs	r1, #144	; 0x90
 800d5d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5da:	23a4      	movs	r3, #164	; 0xa4
 800d5dc:	18fb      	adds	r3, r7, r3
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	d011      	beq.n	800d60a <HAL_UART_IRQHandler+0x102>
 800d5e6:	239c      	movs	r3, #156	; 0x9c
 800d5e8:	18fb      	adds	r3, r7, r3
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	4013      	ands	r3, r2
 800d5f0:	d00b      	beq.n	800d60a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2290      	movs	r2, #144	; 0x90
 800d5fe:	589b      	ldr	r3, [r3, r2]
 800d600:	2204      	movs	r2, #4
 800d602:	431a      	orrs	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2190      	movs	r1, #144	; 0x90
 800d608:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d60a:	23a4      	movs	r3, #164	; 0xa4
 800d60c:	18fb      	adds	r3, r7, r3
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2204      	movs	r2, #4
 800d612:	4013      	ands	r3, r2
 800d614:	d011      	beq.n	800d63a <HAL_UART_IRQHandler+0x132>
 800d616:	239c      	movs	r3, #156	; 0x9c
 800d618:	18fb      	adds	r3, r7, r3
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2201      	movs	r2, #1
 800d61e:	4013      	ands	r3, r2
 800d620:	d00b      	beq.n	800d63a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2204      	movs	r2, #4
 800d628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2290      	movs	r2, #144	; 0x90
 800d62e:	589b      	ldr	r3, [r3, r2]
 800d630:	2202      	movs	r2, #2
 800d632:	431a      	orrs	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2190      	movs	r1, #144	; 0x90
 800d638:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d63a:	23a4      	movs	r3, #164	; 0xa4
 800d63c:	18fb      	adds	r3, r7, r3
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2208      	movs	r2, #8
 800d642:	4013      	ands	r3, r2
 800d644:	d017      	beq.n	800d676 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d646:	23a0      	movs	r3, #160	; 0xa0
 800d648:	18fb      	adds	r3, r7, r3
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2220      	movs	r2, #32
 800d64e:	4013      	ands	r3, r2
 800d650:	d105      	bne.n	800d65e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d652:	239c      	movs	r3, #156	; 0x9c
 800d654:	18fb      	adds	r3, r7, r3
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a5b      	ldr	r2, [pc, #364]	; (800d7c8 <HAL_UART_IRQHandler+0x2c0>)
 800d65a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d65c:	d00b      	beq.n	800d676 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2208      	movs	r2, #8
 800d664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2290      	movs	r2, #144	; 0x90
 800d66a:	589b      	ldr	r3, [r3, r2]
 800d66c:	2208      	movs	r2, #8
 800d66e:	431a      	orrs	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2190      	movs	r1, #144	; 0x90
 800d674:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d676:	23a4      	movs	r3, #164	; 0xa4
 800d678:	18fb      	adds	r3, r7, r3
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	2380      	movs	r3, #128	; 0x80
 800d67e:	011b      	lsls	r3, r3, #4
 800d680:	4013      	ands	r3, r2
 800d682:	d013      	beq.n	800d6ac <HAL_UART_IRQHandler+0x1a4>
 800d684:	23a0      	movs	r3, #160	; 0xa0
 800d686:	18fb      	adds	r3, r7, r3
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	2380      	movs	r3, #128	; 0x80
 800d68c:	04db      	lsls	r3, r3, #19
 800d68e:	4013      	ands	r3, r2
 800d690:	d00c      	beq.n	800d6ac <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2280      	movs	r2, #128	; 0x80
 800d698:	0112      	lsls	r2, r2, #4
 800d69a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2290      	movs	r2, #144	; 0x90
 800d6a0:	589b      	ldr	r3, [r3, r2]
 800d6a2:	2220      	movs	r2, #32
 800d6a4:	431a      	orrs	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2190      	movs	r1, #144	; 0x90
 800d6aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2290      	movs	r2, #144	; 0x90
 800d6b0:	589b      	ldr	r3, [r3, r2]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d100      	bne.n	800d6b8 <HAL_UART_IRQHandler+0x1b0>
 800d6b6:	e23d      	b.n	800db34 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d6b8:	23a4      	movs	r3, #164	; 0xa4
 800d6ba:	18fb      	adds	r3, r7, r3
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	2220      	movs	r2, #32
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	d015      	beq.n	800d6f0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d6c4:	23a0      	movs	r3, #160	; 0xa0
 800d6c6:	18fb      	adds	r3, r7, r3
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2220      	movs	r2, #32
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	d106      	bne.n	800d6de <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d6d0:	239c      	movs	r3, #156	; 0x9c
 800d6d2:	18fb      	adds	r3, r7, r3
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	2380      	movs	r3, #128	; 0x80
 800d6d8:	055b      	lsls	r3, r3, #21
 800d6da:	4013      	ands	r3, r2
 800d6dc:	d008      	beq.n	800d6f0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d004      	beq.n	800d6f0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	0010      	movs	r0, r2
 800d6ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2290      	movs	r2, #144	; 0x90
 800d6f4:	589b      	ldr	r3, [r3, r2]
 800d6f6:	2194      	movs	r1, #148	; 0x94
 800d6f8:	187a      	adds	r2, r7, r1
 800d6fa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	2240      	movs	r2, #64	; 0x40
 800d704:	4013      	ands	r3, r2
 800d706:	2b40      	cmp	r3, #64	; 0x40
 800d708:	d004      	beq.n	800d714 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d70a:	187b      	adds	r3, r7, r1
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2228      	movs	r2, #40	; 0x28
 800d710:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d712:	d04c      	beq.n	800d7ae <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	0018      	movs	r0, r3
 800d718:	f000 fe84 	bl	800e424 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	2240      	movs	r2, #64	; 0x40
 800d724:	4013      	ands	r3, r2
 800d726:	2b40      	cmp	r3, #64	; 0x40
 800d728:	d13c      	bne.n	800d7a4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d72a:	f3ef 8310 	mrs	r3, PRIMASK
 800d72e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800d730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d732:	2090      	movs	r0, #144	; 0x90
 800d734:	183a      	adds	r2, r7, r0
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	2301      	movs	r3, #1
 800d73a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d73e:	f383 8810 	msr	PRIMASK, r3
}
 800d742:	46c0      	nop			; (mov r8, r8)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	689a      	ldr	r2, [r3, #8]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2140      	movs	r1, #64	; 0x40
 800d750:	438a      	bics	r2, r1
 800d752:	609a      	str	r2, [r3, #8]
 800d754:	183b      	adds	r3, r7, r0
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d75a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d75c:	f383 8810 	msr	PRIMASK, r3
}
 800d760:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2280      	movs	r2, #128	; 0x80
 800d766:	589b      	ldr	r3, [r3, r2]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d016      	beq.n	800d79a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2280      	movs	r2, #128	; 0x80
 800d770:	589b      	ldr	r3, [r3, r2]
 800d772:	4a17      	ldr	r2, [pc, #92]	; (800d7d0 <HAL_UART_IRQHandler+0x2c8>)
 800d774:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2280      	movs	r2, #128	; 0x80
 800d77a:	589b      	ldr	r3, [r3, r2]
 800d77c:	0018      	movs	r0, r3
 800d77e:	f7fc fbbd 	bl	8009efc <HAL_DMA_Abort_IT>
 800d782:	1e03      	subs	r3, r0, #0
 800d784:	d01c      	beq.n	800d7c0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2280      	movs	r2, #128	; 0x80
 800d78a:	589b      	ldr	r3, [r3, r2]
 800d78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	2180      	movs	r1, #128	; 0x80
 800d792:	5852      	ldr	r2, [r2, r1]
 800d794:	0010      	movs	r0, r2
 800d796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d798:	e012      	b.n	800d7c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	0018      	movs	r0, r3
 800d79e:	f7f9 fcf1 	bl	8007184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7a2:	e00d      	b.n	800d7c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	0018      	movs	r0, r3
 800d7a8:	f7f9 fcec 	bl	8007184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7ac:	e008      	b.n	800d7c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	0018      	movs	r0, r3
 800d7b2:	f7f9 fce7 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2290      	movs	r2, #144	; 0x90
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800d7be:	e1b9      	b.n	800db34 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7c0:	46c0      	nop			; (mov r8, r8)
    return;
 800d7c2:	e1b7      	b.n	800db34 <HAL_UART_IRQHandler+0x62c>
 800d7c4:	0000080f 	.word	0x0000080f
 800d7c8:	10000001 	.word	0x10000001
 800d7cc:	04000120 	.word	0x04000120
 800d7d0:	0800e6e9 	.word	0x0800e6e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d000      	beq.n	800d7de <HAL_UART_IRQHandler+0x2d6>
 800d7dc:	e13e      	b.n	800da5c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d7de:	23a4      	movs	r3, #164	; 0xa4
 800d7e0:	18fb      	adds	r3, r7, r3
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2210      	movs	r2, #16
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	d100      	bne.n	800d7ec <HAL_UART_IRQHandler+0x2e4>
 800d7ea:	e137      	b.n	800da5c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d7ec:	23a0      	movs	r3, #160	; 0xa0
 800d7ee:	18fb      	adds	r3, r7, r3
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2210      	movs	r2, #16
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	d100      	bne.n	800d7fa <HAL_UART_IRQHandler+0x2f2>
 800d7f8:	e130      	b.n	800da5c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2210      	movs	r2, #16
 800d800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	2240      	movs	r2, #64	; 0x40
 800d80a:	4013      	ands	r3, r2
 800d80c:	2b40      	cmp	r3, #64	; 0x40
 800d80e:	d000      	beq.n	800d812 <HAL_UART_IRQHandler+0x30a>
 800d810:	e0a4      	b.n	800d95c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2280      	movs	r2, #128	; 0x80
 800d816:	589b      	ldr	r3, [r3, r2]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	685a      	ldr	r2, [r3, #4]
 800d81c:	217e      	movs	r1, #126	; 0x7e
 800d81e:	187b      	adds	r3, r7, r1
 800d820:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800d822:	187b      	adds	r3, r7, r1
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d100      	bne.n	800d82c <HAL_UART_IRQHandler+0x324>
 800d82a:	e185      	b.n	800db38 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	225c      	movs	r2, #92	; 0x5c
 800d830:	5a9b      	ldrh	r3, [r3, r2]
 800d832:	187a      	adds	r2, r7, r1
 800d834:	8812      	ldrh	r2, [r2, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d300      	bcc.n	800d83c <HAL_UART_IRQHandler+0x334>
 800d83a:	e17d      	b.n	800db38 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	187a      	adds	r2, r7, r1
 800d840:	215e      	movs	r1, #94	; 0x5e
 800d842:	8812      	ldrh	r2, [r2, #0]
 800d844:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2280      	movs	r2, #128	; 0x80
 800d84a:	589b      	ldr	r3, [r3, r2]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2220      	movs	r2, #32
 800d852:	4013      	ands	r3, r2
 800d854:	d170      	bne.n	800d938 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d856:	f3ef 8310 	mrs	r3, PRIMASK
 800d85a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800d85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d85e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d860:	2301      	movs	r3, #1
 800d862:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d866:	f383 8810 	msr	PRIMASK, r3
}
 800d86a:	46c0      	nop			; (mov r8, r8)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	49b4      	ldr	r1, [pc, #720]	; (800db48 <HAL_UART_IRQHandler+0x640>)
 800d878:	400a      	ands	r2, r1
 800d87a:	601a      	str	r2, [r3, #0]
 800d87c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d87e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d882:	f383 8810 	msr	PRIMASK, r3
}
 800d886:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d888:	f3ef 8310 	mrs	r3, PRIMASK
 800d88c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800d88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d890:	677b      	str	r3, [r7, #116]	; 0x74
 800d892:	2301      	movs	r3, #1
 800d894:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d898:	f383 8810 	msr	PRIMASK, r3
}
 800d89c:	46c0      	nop			; (mov r8, r8)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	438a      	bics	r2, r1
 800d8ac:	609a      	str	r2, [r3, #8]
 800d8ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8b4:	f383 8810 	msr	PRIMASK, r3
}
 800d8b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d8be:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800d8c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8c2:	673b      	str	r3, [r7, #112]	; 0x70
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ca:	f383 8810 	msr	PRIMASK, r3
}
 800d8ce:	46c0      	nop			; (mov r8, r8)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	689a      	ldr	r2, [r3, #8]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2140      	movs	r1, #64	; 0x40
 800d8dc:	438a      	bics	r2, r1
 800d8de:	609a      	str	r2, [r3, #8]
 800d8e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8e2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8e6:	f383 8810 	msr	PRIMASK, r3
}
 800d8ea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	228c      	movs	r2, #140	; 0x8c
 800d8f0:	2120      	movs	r1, #32
 800d8f2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d8fe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800d900:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d902:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d904:	2301      	movs	r3, #1
 800d906:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d90a:	f383 8810 	msr	PRIMASK, r3
}
 800d90e:	46c0      	nop			; (mov r8, r8)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2110      	movs	r1, #16
 800d91c:	438a      	bics	r2, r1
 800d91e:	601a      	str	r2, [r3, #0]
 800d920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d922:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d926:	f383 8810 	msr	PRIMASK, r3
}
 800d92a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2280      	movs	r2, #128	; 0x80
 800d930:	589b      	ldr	r3, [r3, r2]
 800d932:	0018      	movs	r0, r3
 800d934:	f7fc fa80 	bl	8009e38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2202      	movs	r2, #2
 800d93c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	225c      	movs	r2, #92	; 0x5c
 800d942:	5a9a      	ldrh	r2, [r3, r2]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	215e      	movs	r1, #94	; 0x5e
 800d948:	5a5b      	ldrh	r3, [r3, r1]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	b29a      	uxth	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	0011      	movs	r1, r2
 800d954:	0018      	movs	r0, r3
 800d956:	f000 f905 	bl	800db64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d95a:	e0ed      	b.n	800db38 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	225c      	movs	r2, #92	; 0x5c
 800d960:	5a99      	ldrh	r1, [r3, r2]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	225e      	movs	r2, #94	; 0x5e
 800d966:	5a9b      	ldrh	r3, [r3, r2]
 800d968:	b29a      	uxth	r2, r3
 800d96a:	208e      	movs	r0, #142	; 0x8e
 800d96c:	183b      	adds	r3, r7, r0
 800d96e:	1a8a      	subs	r2, r1, r2
 800d970:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	225e      	movs	r2, #94	; 0x5e
 800d976:	5a9b      	ldrh	r3, [r3, r2]
 800d978:	b29b      	uxth	r3, r3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d100      	bne.n	800d980 <HAL_UART_IRQHandler+0x478>
 800d97e:	e0dd      	b.n	800db3c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800d980:	183b      	adds	r3, r7, r0
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d100      	bne.n	800d98a <HAL_UART_IRQHandler+0x482>
 800d988:	e0d8      	b.n	800db3c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d98a:	f3ef 8310 	mrs	r3, PRIMASK
 800d98e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d990:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d992:	2488      	movs	r4, #136	; 0x88
 800d994:	193a      	adds	r2, r7, r4
 800d996:	6013      	str	r3, [r2, #0]
 800d998:	2301      	movs	r3, #1
 800d99a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	f383 8810 	msr	PRIMASK, r3
}
 800d9a2:	46c0      	nop			; (mov r8, r8)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4967      	ldr	r1, [pc, #412]	; (800db4c <HAL_UART_IRQHandler+0x644>)
 800d9b0:	400a      	ands	r2, r1
 800d9b2:	601a      	str	r2, [r3, #0]
 800d9b4:	193b      	adds	r3, r7, r4
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	f383 8810 	msr	PRIMASK, r3
}
 800d9c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d9c6:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9c8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9ca:	2484      	movs	r4, #132	; 0x84
 800d9cc:	193a      	adds	r2, r7, r4
 800d9ce:	6013      	str	r3, [r2, #0]
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	f383 8810 	msr	PRIMASK, r3
}
 800d9da:	46c0      	nop			; (mov r8, r8)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	689a      	ldr	r2, [r3, #8]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	495a      	ldr	r1, [pc, #360]	; (800db50 <HAL_UART_IRQHandler+0x648>)
 800d9e8:	400a      	ands	r2, r1
 800d9ea:	609a      	str	r2, [r3, #8]
 800d9ec:	193b      	adds	r3, r7, r4
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	f383 8810 	msr	PRIMASK, r3
}
 800d9f8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	228c      	movs	r2, #140	; 0x8c
 800d9fe:	2120      	movs	r1, #32
 800da00:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da0e:	f3ef 8310 	mrs	r3, PRIMASK
 800da12:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da16:	2480      	movs	r4, #128	; 0x80
 800da18:	193a      	adds	r2, r7, r4
 800da1a:	6013      	str	r3, [r2, #0]
 800da1c:	2301      	movs	r3, #1
 800da1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	f383 8810 	msr	PRIMASK, r3
}
 800da26:	46c0      	nop			; (mov r8, r8)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2110      	movs	r1, #16
 800da34:	438a      	bics	r2, r1
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	193b      	adds	r3, r7, r4
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da40:	f383 8810 	msr	PRIMASK, r3
}
 800da44:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2202      	movs	r2, #2
 800da4a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da4c:	183b      	adds	r3, r7, r0
 800da4e:	881a      	ldrh	r2, [r3, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	0011      	movs	r1, r2
 800da54:	0018      	movs	r0, r3
 800da56:	f000 f885 	bl	800db64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da5a:	e06f      	b.n	800db3c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800da5c:	23a4      	movs	r3, #164	; 0xa4
 800da5e:	18fb      	adds	r3, r7, r3
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	2380      	movs	r3, #128	; 0x80
 800da64:	035b      	lsls	r3, r3, #13
 800da66:	4013      	ands	r3, r2
 800da68:	d010      	beq.n	800da8c <HAL_UART_IRQHandler+0x584>
 800da6a:	239c      	movs	r3, #156	; 0x9c
 800da6c:	18fb      	adds	r3, r7, r3
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	2380      	movs	r3, #128	; 0x80
 800da72:	03db      	lsls	r3, r3, #15
 800da74:	4013      	ands	r3, r2
 800da76:	d009      	beq.n	800da8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2280      	movs	r2, #128	; 0x80
 800da7e:	0352      	lsls	r2, r2, #13
 800da80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	0018      	movs	r0, r3
 800da86:	f000 fe72 	bl	800e76e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da8a:	e05a      	b.n	800db42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800da8c:	23a4      	movs	r3, #164	; 0xa4
 800da8e:	18fb      	adds	r3, r7, r3
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2280      	movs	r2, #128	; 0x80
 800da94:	4013      	ands	r3, r2
 800da96:	d016      	beq.n	800dac6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800da98:	23a0      	movs	r3, #160	; 0xa0
 800da9a:	18fb      	adds	r3, r7, r3
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2280      	movs	r2, #128	; 0x80
 800daa0:	4013      	ands	r3, r2
 800daa2:	d106      	bne.n	800dab2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800daa4:	239c      	movs	r3, #156	; 0x9c
 800daa6:	18fb      	adds	r3, r7, r3
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	2380      	movs	r3, #128	; 0x80
 800daac:	041b      	lsls	r3, r3, #16
 800daae:	4013      	ands	r3, r2
 800dab0:	d009      	beq.n	800dac6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d042      	beq.n	800db40 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	0010      	movs	r0, r2
 800dac2:	4798      	blx	r3
    }
    return;
 800dac4:	e03c      	b.n	800db40 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dac6:	23a4      	movs	r3, #164	; 0xa4
 800dac8:	18fb      	adds	r3, r7, r3
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2240      	movs	r2, #64	; 0x40
 800dace:	4013      	ands	r3, r2
 800dad0:	d00a      	beq.n	800dae8 <HAL_UART_IRQHandler+0x5e0>
 800dad2:	23a0      	movs	r3, #160	; 0xa0
 800dad4:	18fb      	adds	r3, r7, r3
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2240      	movs	r2, #64	; 0x40
 800dada:	4013      	ands	r3, r2
 800dadc:	d004      	beq.n	800dae8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	0018      	movs	r0, r3
 800dae2:	f000 fe18 	bl	800e716 <UART_EndTransmit_IT>
    return;
 800dae6:	e02c      	b.n	800db42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dae8:	23a4      	movs	r3, #164	; 0xa4
 800daea:	18fb      	adds	r3, r7, r3
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	2380      	movs	r3, #128	; 0x80
 800daf0:	041b      	lsls	r3, r3, #16
 800daf2:	4013      	ands	r3, r2
 800daf4:	d00b      	beq.n	800db0e <HAL_UART_IRQHandler+0x606>
 800daf6:	23a0      	movs	r3, #160	; 0xa0
 800daf8:	18fb      	adds	r3, r7, r3
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	2380      	movs	r3, #128	; 0x80
 800dafe:	05db      	lsls	r3, r3, #23
 800db00:	4013      	ands	r3, r2
 800db02:	d004      	beq.n	800db0e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	0018      	movs	r0, r3
 800db08:	f000 fe41 	bl	800e78e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db0c:	e019      	b.n	800db42 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800db0e:	23a4      	movs	r3, #164	; 0xa4
 800db10:	18fb      	adds	r3, r7, r3
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	2380      	movs	r3, #128	; 0x80
 800db16:	045b      	lsls	r3, r3, #17
 800db18:	4013      	ands	r3, r2
 800db1a:	d012      	beq.n	800db42 <HAL_UART_IRQHandler+0x63a>
 800db1c:	23a0      	movs	r3, #160	; 0xa0
 800db1e:	18fb      	adds	r3, r7, r3
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	da0d      	bge.n	800db42 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	0018      	movs	r0, r3
 800db2a:	f000 fe28 	bl	800e77e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db2e:	e008      	b.n	800db42 <HAL_UART_IRQHandler+0x63a>
      return;
 800db30:	46c0      	nop			; (mov r8, r8)
 800db32:	e006      	b.n	800db42 <HAL_UART_IRQHandler+0x63a>
    return;
 800db34:	46c0      	nop			; (mov r8, r8)
 800db36:	e004      	b.n	800db42 <HAL_UART_IRQHandler+0x63a>
      return;
 800db38:	46c0      	nop			; (mov r8, r8)
 800db3a:	e002      	b.n	800db42 <HAL_UART_IRQHandler+0x63a>
      return;
 800db3c:	46c0      	nop			; (mov r8, r8)
 800db3e:	e000      	b.n	800db42 <HAL_UART_IRQHandler+0x63a>
    return;
 800db40:	46c0      	nop			; (mov r8, r8)
  }
}
 800db42:	46bd      	mov	sp, r7
 800db44:	b02a      	add	sp, #168	; 0xa8
 800db46:	bdb0      	pop	{r4, r5, r7, pc}
 800db48:	fffffeff 	.word	0xfffffeff
 800db4c:	fffffedf 	.word	0xfffffedf
 800db50:	effffffe 	.word	0xeffffffe

0800db54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800db5c:	46c0      	nop			; (mov r8, r8)
 800db5e:	46bd      	mov	sp, r7
 800db60:	b002      	add	sp, #8
 800db62:	bd80      	pop	{r7, pc}

0800db64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	000a      	movs	r2, r1
 800db6e:	1cbb      	adds	r3, r7, #2
 800db70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db72:	46c0      	nop			; (mov r8, r8)
 800db74:	46bd      	mov	sp, r7
 800db76:	b002      	add	sp, #8
 800db78:	bd80      	pop	{r7, pc}
	...

0800db7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b088      	sub	sp, #32
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db84:	231a      	movs	r3, #26
 800db86:	18fb      	adds	r3, r7, r3
 800db88:	2200      	movs	r2, #0
 800db8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	689a      	ldr	r2, [r3, #8]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	431a      	orrs	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	431a      	orrs	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	69db      	ldr	r3, [r3, #28]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4abc      	ldr	r2, [pc, #752]	; (800de9c <UART_SetConfig+0x320>)
 800dbac:	4013      	ands	r3, r2
 800dbae:	0019      	movs	r1, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	69fa      	ldr	r2, [r7, #28]
 800dbb6:	430a      	orrs	r2, r1
 800dbb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	4ab7      	ldr	r2, [pc, #732]	; (800dea0 <UART_SetConfig+0x324>)
 800dbc2:	4013      	ands	r3, r2
 800dbc4:	0019      	movs	r1, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68da      	ldr	r2, [r3, #12]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a1b      	ldr	r3, [r3, #32]
 800dbdc:	69fa      	ldr	r2, [r7, #28]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	4aae      	ldr	r2, [pc, #696]	; (800dea4 <UART_SetConfig+0x328>)
 800dbea:	4013      	ands	r3, r2
 800dbec:	0019      	movs	r1, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	69fa      	ldr	r2, [r7, #28]
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfe:	220f      	movs	r2, #15
 800dc00:	4393      	bics	r3, r2
 800dc02:	0019      	movs	r1, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4aa4      	ldr	r2, [pc, #656]	; (800dea8 <UART_SetConfig+0x32c>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d127      	bne.n	800dc6a <UART_SetConfig+0xee>
 800dc1a:	4ba4      	ldr	r3, [pc, #656]	; (800deac <UART_SetConfig+0x330>)
 800dc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc1e:	2203      	movs	r2, #3
 800dc20:	4013      	ands	r3, r2
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	d017      	beq.n	800dc56 <UART_SetConfig+0xda>
 800dc26:	d81b      	bhi.n	800dc60 <UART_SetConfig+0xe4>
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d00a      	beq.n	800dc42 <UART_SetConfig+0xc6>
 800dc2c:	d818      	bhi.n	800dc60 <UART_SetConfig+0xe4>
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d002      	beq.n	800dc38 <UART_SetConfig+0xbc>
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d00a      	beq.n	800dc4c <UART_SetConfig+0xd0>
 800dc36:	e013      	b.n	800dc60 <UART_SetConfig+0xe4>
 800dc38:	231b      	movs	r3, #27
 800dc3a:	18fb      	adds	r3, r7, r3
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
 800dc40:	e058      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dc42:	231b      	movs	r3, #27
 800dc44:	18fb      	adds	r3, r7, r3
 800dc46:	2202      	movs	r2, #2
 800dc48:	701a      	strb	r2, [r3, #0]
 800dc4a:	e053      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dc4c:	231b      	movs	r3, #27
 800dc4e:	18fb      	adds	r3, r7, r3
 800dc50:	2204      	movs	r2, #4
 800dc52:	701a      	strb	r2, [r3, #0]
 800dc54:	e04e      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dc56:	231b      	movs	r3, #27
 800dc58:	18fb      	adds	r3, r7, r3
 800dc5a:	2208      	movs	r2, #8
 800dc5c:	701a      	strb	r2, [r3, #0]
 800dc5e:	e049      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dc60:	231b      	movs	r3, #27
 800dc62:	18fb      	adds	r3, r7, r3
 800dc64:	2210      	movs	r2, #16
 800dc66:	701a      	strb	r2, [r3, #0]
 800dc68:	e044      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a90      	ldr	r2, [pc, #576]	; (800deb0 <UART_SetConfig+0x334>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d127      	bne.n	800dcc4 <UART_SetConfig+0x148>
 800dc74:	4b8d      	ldr	r3, [pc, #564]	; (800deac <UART_SetConfig+0x330>)
 800dc76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc78:	220c      	movs	r2, #12
 800dc7a:	4013      	ands	r3, r2
 800dc7c:	2b0c      	cmp	r3, #12
 800dc7e:	d017      	beq.n	800dcb0 <UART_SetConfig+0x134>
 800dc80:	d81b      	bhi.n	800dcba <UART_SetConfig+0x13e>
 800dc82:	2b08      	cmp	r3, #8
 800dc84:	d00a      	beq.n	800dc9c <UART_SetConfig+0x120>
 800dc86:	d818      	bhi.n	800dcba <UART_SetConfig+0x13e>
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <UART_SetConfig+0x116>
 800dc8c:	2b04      	cmp	r3, #4
 800dc8e:	d00a      	beq.n	800dca6 <UART_SetConfig+0x12a>
 800dc90:	e013      	b.n	800dcba <UART_SetConfig+0x13e>
 800dc92:	231b      	movs	r3, #27
 800dc94:	18fb      	adds	r3, r7, r3
 800dc96:	2200      	movs	r2, #0
 800dc98:	701a      	strb	r2, [r3, #0]
 800dc9a:	e02b      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dc9c:	231b      	movs	r3, #27
 800dc9e:	18fb      	adds	r3, r7, r3
 800dca0:	2202      	movs	r2, #2
 800dca2:	701a      	strb	r2, [r3, #0]
 800dca4:	e026      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dca6:	231b      	movs	r3, #27
 800dca8:	18fb      	adds	r3, r7, r3
 800dcaa:	2204      	movs	r2, #4
 800dcac:	701a      	strb	r2, [r3, #0]
 800dcae:	e021      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dcb0:	231b      	movs	r3, #27
 800dcb2:	18fb      	adds	r3, r7, r3
 800dcb4:	2208      	movs	r2, #8
 800dcb6:	701a      	strb	r2, [r3, #0]
 800dcb8:	e01c      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dcba:	231b      	movs	r3, #27
 800dcbc:	18fb      	adds	r3, r7, r3
 800dcbe:	2210      	movs	r2, #16
 800dcc0:	701a      	strb	r2, [r3, #0]
 800dcc2:	e017      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a7a      	ldr	r2, [pc, #488]	; (800deb4 <UART_SetConfig+0x338>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d104      	bne.n	800dcd8 <UART_SetConfig+0x15c>
 800dcce:	231b      	movs	r3, #27
 800dcd0:	18fb      	adds	r3, r7, r3
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	701a      	strb	r2, [r3, #0]
 800dcd6:	e00d      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a76      	ldr	r2, [pc, #472]	; (800deb8 <UART_SetConfig+0x33c>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d104      	bne.n	800dcec <UART_SetConfig+0x170>
 800dce2:	231b      	movs	r3, #27
 800dce4:	18fb      	adds	r3, r7, r3
 800dce6:	2200      	movs	r2, #0
 800dce8:	701a      	strb	r2, [r3, #0]
 800dcea:	e003      	b.n	800dcf4 <UART_SetConfig+0x178>
 800dcec:	231b      	movs	r3, #27
 800dcee:	18fb      	adds	r3, r7, r3
 800dcf0:	2210      	movs	r2, #16
 800dcf2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	69da      	ldr	r2, [r3, #28]
 800dcf8:	2380      	movs	r3, #128	; 0x80
 800dcfa:	021b      	lsls	r3, r3, #8
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d000      	beq.n	800dd02 <UART_SetConfig+0x186>
 800dd00:	e065      	b.n	800ddce <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800dd02:	231b      	movs	r3, #27
 800dd04:	18fb      	adds	r3, r7, r3
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b08      	cmp	r3, #8
 800dd0a:	d015      	beq.n	800dd38 <UART_SetConfig+0x1bc>
 800dd0c:	dc18      	bgt.n	800dd40 <UART_SetConfig+0x1c4>
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d00d      	beq.n	800dd2e <UART_SetConfig+0x1b2>
 800dd12:	dc15      	bgt.n	800dd40 <UART_SetConfig+0x1c4>
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <UART_SetConfig+0x1a2>
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	d005      	beq.n	800dd28 <UART_SetConfig+0x1ac>
 800dd1c:	e010      	b.n	800dd40 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd1e:	f7fe f805 	bl	800bd2c <HAL_RCC_GetPCLK1Freq>
 800dd22:	0003      	movs	r3, r0
 800dd24:	617b      	str	r3, [r7, #20]
        break;
 800dd26:	e012      	b.n	800dd4e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd28:	4b64      	ldr	r3, [pc, #400]	; (800debc <UART_SetConfig+0x340>)
 800dd2a:	617b      	str	r3, [r7, #20]
        break;
 800dd2c:	e00f      	b.n	800dd4e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd2e:	f7fd ff71 	bl	800bc14 <HAL_RCC_GetSysClockFreq>
 800dd32:	0003      	movs	r3, r0
 800dd34:	617b      	str	r3, [r7, #20]
        break;
 800dd36:	e00a      	b.n	800dd4e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd38:	2380      	movs	r3, #128	; 0x80
 800dd3a:	021b      	lsls	r3, r3, #8
 800dd3c:	617b      	str	r3, [r7, #20]
        break;
 800dd3e:	e006      	b.n	800dd4e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800dd44:	231a      	movs	r3, #26
 800dd46:	18fb      	adds	r3, r7, r3
 800dd48:	2201      	movs	r2, #1
 800dd4a:	701a      	strb	r2, [r3, #0]
        break;
 800dd4c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d100      	bne.n	800dd56 <UART_SetConfig+0x1da>
 800dd54:	e08d      	b.n	800de72 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd5a:	4b59      	ldr	r3, [pc, #356]	; (800dec0 <UART_SetConfig+0x344>)
 800dd5c:	0052      	lsls	r2, r2, #1
 800dd5e:	5ad3      	ldrh	r3, [r2, r3]
 800dd60:	0019      	movs	r1, r3
 800dd62:	6978      	ldr	r0, [r7, #20]
 800dd64:	f7f2 f9ec 	bl	8000140 <__udivsi3>
 800dd68:	0003      	movs	r3, r0
 800dd6a:	005a      	lsls	r2, r3, #1
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	085b      	lsrs	r3, r3, #1
 800dd72:	18d2      	adds	r2, r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	0019      	movs	r1, r3
 800dd7a:	0010      	movs	r0, r2
 800dd7c:	f7f2 f9e0 	bl	8000140 <__udivsi3>
 800dd80:	0003      	movs	r3, r0
 800dd82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	2b0f      	cmp	r3, #15
 800dd88:	d91c      	bls.n	800ddc4 <UART_SetConfig+0x248>
 800dd8a:	693a      	ldr	r2, [r7, #16]
 800dd8c:	2380      	movs	r3, #128	; 0x80
 800dd8e:	025b      	lsls	r3, r3, #9
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d217      	bcs.n	800ddc4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	200e      	movs	r0, #14
 800dd9a:	183b      	adds	r3, r7, r0
 800dd9c:	210f      	movs	r1, #15
 800dd9e:	438a      	bics	r2, r1
 800dda0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	085b      	lsrs	r3, r3, #1
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	2207      	movs	r2, #7
 800ddaa:	4013      	ands	r3, r2
 800ddac:	b299      	uxth	r1, r3
 800ddae:	183b      	adds	r3, r7, r0
 800ddb0:	183a      	adds	r2, r7, r0
 800ddb2:	8812      	ldrh	r2, [r2, #0]
 800ddb4:	430a      	orrs	r2, r1
 800ddb6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	183a      	adds	r2, r7, r0
 800ddbe:	8812      	ldrh	r2, [r2, #0]
 800ddc0:	60da      	str	r2, [r3, #12]
 800ddc2:	e056      	b.n	800de72 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800ddc4:	231a      	movs	r3, #26
 800ddc6:	18fb      	adds	r3, r7, r3
 800ddc8:	2201      	movs	r2, #1
 800ddca:	701a      	strb	r2, [r3, #0]
 800ddcc:	e051      	b.n	800de72 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddce:	231b      	movs	r3, #27
 800ddd0:	18fb      	adds	r3, r7, r3
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	2b08      	cmp	r3, #8
 800ddd6:	d015      	beq.n	800de04 <UART_SetConfig+0x288>
 800ddd8:	dc18      	bgt.n	800de0c <UART_SetConfig+0x290>
 800ddda:	2b04      	cmp	r3, #4
 800dddc:	d00d      	beq.n	800ddfa <UART_SetConfig+0x27e>
 800ddde:	dc15      	bgt.n	800de0c <UART_SetConfig+0x290>
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <UART_SetConfig+0x26e>
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d005      	beq.n	800ddf4 <UART_SetConfig+0x278>
 800dde8:	e010      	b.n	800de0c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddea:	f7fd ff9f 	bl	800bd2c <HAL_RCC_GetPCLK1Freq>
 800ddee:	0003      	movs	r3, r0
 800ddf0:	617b      	str	r3, [r7, #20]
        break;
 800ddf2:	e012      	b.n	800de1a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ddf4:	4b31      	ldr	r3, [pc, #196]	; (800debc <UART_SetConfig+0x340>)
 800ddf6:	617b      	str	r3, [r7, #20]
        break;
 800ddf8:	e00f      	b.n	800de1a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ddfa:	f7fd ff0b 	bl	800bc14 <HAL_RCC_GetSysClockFreq>
 800ddfe:	0003      	movs	r3, r0
 800de00:	617b      	str	r3, [r7, #20]
        break;
 800de02:	e00a      	b.n	800de1a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de04:	2380      	movs	r3, #128	; 0x80
 800de06:	021b      	lsls	r3, r3, #8
 800de08:	617b      	str	r3, [r7, #20]
        break;
 800de0a:	e006      	b.n	800de1a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800de0c:	2300      	movs	r3, #0
 800de0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800de10:	231a      	movs	r3, #26
 800de12:	18fb      	adds	r3, r7, r3
 800de14:	2201      	movs	r2, #1
 800de16:	701a      	strb	r2, [r3, #0]
        break;
 800de18:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d028      	beq.n	800de72 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de24:	4b26      	ldr	r3, [pc, #152]	; (800dec0 <UART_SetConfig+0x344>)
 800de26:	0052      	lsls	r2, r2, #1
 800de28:	5ad3      	ldrh	r3, [r2, r3]
 800de2a:	0019      	movs	r1, r3
 800de2c:	6978      	ldr	r0, [r7, #20]
 800de2e:	f7f2 f987 	bl	8000140 <__udivsi3>
 800de32:	0003      	movs	r3, r0
 800de34:	001a      	movs	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	085b      	lsrs	r3, r3, #1
 800de3c:	18d2      	adds	r2, r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	0019      	movs	r1, r3
 800de44:	0010      	movs	r0, r2
 800de46:	f7f2 f97b 	bl	8000140 <__udivsi3>
 800de4a:	0003      	movs	r3, r0
 800de4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	2b0f      	cmp	r3, #15
 800de52:	d90a      	bls.n	800de6a <UART_SetConfig+0x2ee>
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	2380      	movs	r3, #128	; 0x80
 800de58:	025b      	lsls	r3, r3, #9
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d205      	bcs.n	800de6a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	b29a      	uxth	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	60da      	str	r2, [r3, #12]
 800de68:	e003      	b.n	800de72 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800de6a:	231a      	movs	r3, #26
 800de6c:	18fb      	adds	r3, r7, r3
 800de6e:	2201      	movs	r2, #1
 800de70:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	226a      	movs	r2, #106	; 0x6a
 800de76:	2101      	movs	r1, #1
 800de78:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2268      	movs	r2, #104	; 0x68
 800de7e:	2101      	movs	r1, #1
 800de80:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2200      	movs	r2, #0
 800de8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800de8e:	231a      	movs	r3, #26
 800de90:	18fb      	adds	r3, r7, r3
 800de92:	781b      	ldrb	r3, [r3, #0]
}
 800de94:	0018      	movs	r0, r3
 800de96:	46bd      	mov	sp, r7
 800de98:	b008      	add	sp, #32
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	cfff69f3 	.word	0xcfff69f3
 800dea0:	ffffcfff 	.word	0xffffcfff
 800dea4:	11fff4ff 	.word	0x11fff4ff
 800dea8:	40013800 	.word	0x40013800
 800deac:	40021000 	.word	0x40021000
 800deb0:	40004400 	.word	0x40004400
 800deb4:	40004800 	.word	0x40004800
 800deb8:	40004c00 	.word	0x40004c00
 800debc:	00f42400 	.word	0x00f42400
 800dec0:	08018500 	.word	0x08018500

0800dec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded0:	2201      	movs	r2, #1
 800ded2:	4013      	ands	r3, r2
 800ded4:	d00b      	beq.n	800deee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	4a4a      	ldr	r2, [pc, #296]	; (800e008 <UART_AdvFeatureConfig+0x144>)
 800dede:	4013      	ands	r3, r2
 800dee0:	0019      	movs	r1, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	430a      	orrs	r2, r1
 800deec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def2:	2202      	movs	r2, #2
 800def4:	4013      	ands	r3, r2
 800def6:	d00b      	beq.n	800df10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	4a43      	ldr	r2, [pc, #268]	; (800e00c <UART_AdvFeatureConfig+0x148>)
 800df00:	4013      	ands	r3, r2
 800df02:	0019      	movs	r1, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	430a      	orrs	r2, r1
 800df0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df14:	2204      	movs	r2, #4
 800df16:	4013      	ands	r3, r2
 800df18:	d00b      	beq.n	800df32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	4a3b      	ldr	r2, [pc, #236]	; (800e010 <UART_AdvFeatureConfig+0x14c>)
 800df22:	4013      	ands	r3, r2
 800df24:	0019      	movs	r1, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	430a      	orrs	r2, r1
 800df30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df36:	2208      	movs	r2, #8
 800df38:	4013      	ands	r3, r2
 800df3a:	d00b      	beq.n	800df54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	4a34      	ldr	r2, [pc, #208]	; (800e014 <UART_AdvFeatureConfig+0x150>)
 800df44:	4013      	ands	r3, r2
 800df46:	0019      	movs	r1, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	430a      	orrs	r2, r1
 800df52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df58:	2210      	movs	r2, #16
 800df5a:	4013      	ands	r3, r2
 800df5c:	d00b      	beq.n	800df76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	4a2c      	ldr	r2, [pc, #176]	; (800e018 <UART_AdvFeatureConfig+0x154>)
 800df66:	4013      	ands	r3, r2
 800df68:	0019      	movs	r1, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	430a      	orrs	r2, r1
 800df74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df7a:	2220      	movs	r2, #32
 800df7c:	4013      	ands	r3, r2
 800df7e:	d00b      	beq.n	800df98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	4a25      	ldr	r2, [pc, #148]	; (800e01c <UART_AdvFeatureConfig+0x158>)
 800df88:	4013      	ands	r3, r2
 800df8a:	0019      	movs	r1, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	430a      	orrs	r2, r1
 800df96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df9c:	2240      	movs	r2, #64	; 0x40
 800df9e:	4013      	ands	r3, r2
 800dfa0:	d01d      	beq.n	800dfde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	4a1d      	ldr	r2, [pc, #116]	; (800e020 <UART_AdvFeatureConfig+0x15c>)
 800dfaa:	4013      	ands	r3, r2
 800dfac:	0019      	movs	r1, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	430a      	orrs	r2, r1
 800dfb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfbe:	2380      	movs	r3, #128	; 0x80
 800dfc0:	035b      	lsls	r3, r3, #13
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d10b      	bne.n	800dfde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	4a15      	ldr	r2, [pc, #84]	; (800e024 <UART_AdvFeatureConfig+0x160>)
 800dfce:	4013      	ands	r3, r2
 800dfd0:	0019      	movs	r1, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	430a      	orrs	r2, r1
 800dfdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe2:	2280      	movs	r2, #128	; 0x80
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	d00b      	beq.n	800e000 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	4a0e      	ldr	r2, [pc, #56]	; (800e028 <UART_AdvFeatureConfig+0x164>)
 800dff0:	4013      	ands	r3, r2
 800dff2:	0019      	movs	r1, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	430a      	orrs	r2, r1
 800dffe:	605a      	str	r2, [r3, #4]
  }
}
 800e000:	46c0      	nop			; (mov r8, r8)
 800e002:	46bd      	mov	sp, r7
 800e004:	b002      	add	sp, #8
 800e006:	bd80      	pop	{r7, pc}
 800e008:	fffdffff 	.word	0xfffdffff
 800e00c:	fffeffff 	.word	0xfffeffff
 800e010:	fffbffff 	.word	0xfffbffff
 800e014:	ffff7fff 	.word	0xffff7fff
 800e018:	ffffefff 	.word	0xffffefff
 800e01c:	ffffdfff 	.word	0xffffdfff
 800e020:	ffefffff 	.word	0xffefffff
 800e024:	ff9fffff 	.word	0xff9fffff
 800e028:	fff7ffff 	.word	0xfff7ffff

0800e02c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b086      	sub	sp, #24
 800e030:	af02      	add	r7, sp, #8
 800e032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2290      	movs	r2, #144	; 0x90
 800e038:	2100      	movs	r1, #0
 800e03a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e03c:	f7fa fe78 	bl	8008d30 <HAL_GetTick>
 800e040:	0003      	movs	r3, r0
 800e042:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2208      	movs	r2, #8
 800e04c:	4013      	ands	r3, r2
 800e04e:	2b08      	cmp	r3, #8
 800e050:	d10c      	bne.n	800e06c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2280      	movs	r2, #128	; 0x80
 800e056:	0391      	lsls	r1, r2, #14
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	4a1a      	ldr	r2, [pc, #104]	; (800e0c4 <UART_CheckIdleState+0x98>)
 800e05c:	9200      	str	r2, [sp, #0]
 800e05e:	2200      	movs	r2, #0
 800e060:	f000 f832 	bl	800e0c8 <UART_WaitOnFlagUntilTimeout>
 800e064:	1e03      	subs	r3, r0, #0
 800e066:	d001      	beq.n	800e06c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e068:	2303      	movs	r3, #3
 800e06a:	e026      	b.n	800e0ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2204      	movs	r2, #4
 800e074:	4013      	ands	r3, r2
 800e076:	2b04      	cmp	r3, #4
 800e078:	d10c      	bne.n	800e094 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2280      	movs	r2, #128	; 0x80
 800e07e:	03d1      	lsls	r1, r2, #15
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	4a10      	ldr	r2, [pc, #64]	; (800e0c4 <UART_CheckIdleState+0x98>)
 800e084:	9200      	str	r2, [sp, #0]
 800e086:	2200      	movs	r2, #0
 800e088:	f000 f81e 	bl	800e0c8 <UART_WaitOnFlagUntilTimeout>
 800e08c:	1e03      	subs	r3, r0, #0
 800e08e:	d001      	beq.n	800e094 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e090:	2303      	movs	r3, #3
 800e092:	e012      	b.n	800e0ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2288      	movs	r2, #136	; 0x88
 800e098:	2120      	movs	r1, #32
 800e09a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	228c      	movs	r2, #140	; 0x8c
 800e0a0:	2120      	movs	r1, #32
 800e0a2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2284      	movs	r2, #132	; 0x84
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	0018      	movs	r0, r3
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	b004      	add	sp, #16
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	46c0      	nop			; (mov r8, r8)
 800e0c4:	01ffffff 	.word	0x01ffffff

0800e0c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b094      	sub	sp, #80	; 0x50
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	1dfb      	adds	r3, r7, #7
 800e0d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0d8:	e0a7      	b.n	800e22a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0dc:	3301      	adds	r3, #1
 800e0de:	d100      	bne.n	800e0e2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800e0e0:	e0a3      	b.n	800e22a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0e2:	f7fa fe25 	bl	8008d30 <HAL_GetTick>
 800e0e6:	0002      	movs	r2, r0
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	1ad3      	subs	r3, r2, r3
 800e0ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d302      	bcc.n	800e0f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800e0f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d13f      	bne.n	800e178 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0f8:	f3ef 8310 	mrs	r3, PRIMASK
 800e0fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800e0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e100:	647b      	str	r3, [r7, #68]	; 0x44
 800e102:	2301      	movs	r3, #1
 800e104:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e108:	f383 8810 	msr	PRIMASK, r3
}
 800e10c:	46c0      	nop			; (mov r8, r8)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	494e      	ldr	r1, [pc, #312]	; (800e254 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800e11a:	400a      	ands	r2, r1
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e120:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e124:	f383 8810 	msr	PRIMASK, r3
}
 800e128:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e12a:	f3ef 8310 	mrs	r3, PRIMASK
 800e12e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800e130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e132:	643b      	str	r3, [r7, #64]	; 0x40
 800e134:	2301      	movs	r3, #1
 800e136:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13a:	f383 8810 	msr	PRIMASK, r3
}
 800e13e:	46c0      	nop			; (mov r8, r8)
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	689a      	ldr	r2, [r3, #8]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2101      	movs	r1, #1
 800e14c:	438a      	bics	r2, r1
 800e14e:	609a      	str	r2, [r3, #8]
 800e150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e152:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e156:	f383 8810 	msr	PRIMASK, r3
}
 800e15a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2288      	movs	r2, #136	; 0x88
 800e160:	2120      	movs	r1, #32
 800e162:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	228c      	movs	r2, #140	; 0x8c
 800e168:	2120      	movs	r1, #32
 800e16a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2284      	movs	r2, #132	; 0x84
 800e170:	2100      	movs	r1, #0
 800e172:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e174:	2303      	movs	r3, #3
 800e176:	e069      	b.n	800e24c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2204      	movs	r2, #4
 800e180:	4013      	ands	r3, r2
 800e182:	d052      	beq.n	800e22a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	69da      	ldr	r2, [r3, #28]
 800e18a:	2380      	movs	r3, #128	; 0x80
 800e18c:	011b      	lsls	r3, r3, #4
 800e18e:	401a      	ands	r2, r3
 800e190:	2380      	movs	r3, #128	; 0x80
 800e192:	011b      	lsls	r3, r3, #4
 800e194:	429a      	cmp	r2, r3
 800e196:	d148      	bne.n	800e22a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2280      	movs	r2, #128	; 0x80
 800e19e:	0112      	lsls	r2, r2, #4
 800e1a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1a2:	f3ef 8310 	mrs	r3, PRIMASK
 800e1a6:	613b      	str	r3, [r7, #16]
  return(result);
 800e1a8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	f383 8810 	msr	PRIMASK, r3
}
 800e1b6:	46c0      	nop			; (mov r8, r8)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4924      	ldr	r1, [pc, #144]	; (800e254 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800e1c4:	400a      	ands	r2, r1
 800e1c6:	601a      	str	r2, [r3, #0]
 800e1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	f383 8810 	msr	PRIMASK, r3
}
 800e1d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1d4:	f3ef 8310 	mrs	r3, PRIMASK
 800e1d8:	61fb      	str	r3, [r7, #28]
  return(result);
 800e1da:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1de:	2301      	movs	r3, #1
 800e1e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	f383 8810 	msr	PRIMASK, r3
}
 800e1e8:	46c0      	nop			; (mov r8, r8)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	689a      	ldr	r2, [r3, #8]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	438a      	bics	r2, r1
 800e1f8:	609a      	str	r2, [r3, #8]
 800e1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e200:	f383 8810 	msr	PRIMASK, r3
}
 800e204:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2288      	movs	r2, #136	; 0x88
 800e20a:	2120      	movs	r1, #32
 800e20c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	228c      	movs	r2, #140	; 0x8c
 800e212:	2120      	movs	r1, #32
 800e214:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2290      	movs	r2, #144	; 0x90
 800e21a:	2120      	movs	r1, #32
 800e21c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2284      	movs	r2, #132	; 0x84
 800e222:	2100      	movs	r1, #0
 800e224:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e226:	2303      	movs	r3, #3
 800e228:	e010      	b.n	800e24c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	69db      	ldr	r3, [r3, #28]
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	4013      	ands	r3, r2
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	1ad3      	subs	r3, r2, r3
 800e238:	425a      	negs	r2, r3
 800e23a:	4153      	adcs	r3, r2
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	001a      	movs	r2, r3
 800e240:	1dfb      	adds	r3, r7, #7
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	429a      	cmp	r2, r3
 800e246:	d100      	bne.n	800e24a <UART_WaitOnFlagUntilTimeout+0x182>
 800e248:	e747      	b.n	800e0da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	0018      	movs	r0, r3
 800e24e:	46bd      	mov	sp, r7
 800e250:	b014      	add	sp, #80	; 0x50
 800e252:	bd80      	pop	{r7, pc}
 800e254:	fffffe5f 	.word	0xfffffe5f

0800e258 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b090      	sub	sp, #64	; 0x40
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	1dbb      	adds	r3, r7, #6
 800e264:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	1dba      	adds	r2, r7, #6
 800e270:	215c      	movs	r1, #92	; 0x5c
 800e272:	8812      	ldrh	r2, [r2, #0]
 800e274:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2290      	movs	r2, #144	; 0x90
 800e27a:	2100      	movs	r1, #0
 800e27c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	228c      	movs	r2, #140	; 0x8c
 800e282:	2122      	movs	r1, #34	; 0x22
 800e284:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2280      	movs	r2, #128	; 0x80
 800e28a:	589b      	ldr	r3, [r3, r2]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d02d      	beq.n	800e2ec <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2280      	movs	r2, #128	; 0x80
 800e294:	589b      	ldr	r3, [r3, r2]
 800e296:	4a40      	ldr	r2, [pc, #256]	; (800e398 <UART_Start_Receive_DMA+0x140>)
 800e298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2280      	movs	r2, #128	; 0x80
 800e29e:	589b      	ldr	r3, [r3, r2]
 800e2a0:	4a3e      	ldr	r2, [pc, #248]	; (800e39c <UART_Start_Receive_DMA+0x144>)
 800e2a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2280      	movs	r2, #128	; 0x80
 800e2a8:	589b      	ldr	r3, [r3, r2]
 800e2aa:	4a3d      	ldr	r2, [pc, #244]	; (800e3a0 <UART_Start_Receive_DMA+0x148>)
 800e2ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2280      	movs	r2, #128	; 0x80
 800e2b2:	589b      	ldr	r3, [r3, r2]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2280      	movs	r2, #128	; 0x80
 800e2bc:	5898      	ldr	r0, [r3, r2]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	3324      	adds	r3, #36	; 0x24
 800e2c4:	0019      	movs	r1, r3
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ca:	001a      	movs	r2, r3
 800e2cc:	1dbb      	adds	r3, r7, #6
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	f7fb fd2c 	bl	8009d2c <HAL_DMA_Start_IT>
 800e2d4:	1e03      	subs	r3, r0, #0
 800e2d6:	d009      	beq.n	800e2ec <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2290      	movs	r2, #144	; 0x90
 800e2dc:	2110      	movs	r1, #16
 800e2de:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	228c      	movs	r2, #140	; 0x8c
 800e2e4:	2120      	movs	r1, #32
 800e2e6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e050      	b.n	800e38e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	691b      	ldr	r3, [r3, #16]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d019      	beq.n	800e328 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800e2f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2fe:	2301      	movs	r3, #1
 800e300:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	f383 8810 	msr	PRIMASK, r3
}
 800e308:	46c0      	nop			; (mov r8, r8)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2180      	movs	r1, #128	; 0x80
 800e316:	0049      	lsls	r1, r1, #1
 800e318:	430a      	orrs	r2, r1
 800e31a:	601a      	str	r2, [r3, #0]
 800e31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e31e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e322:	f383 8810 	msr	PRIMASK, r3
}
 800e326:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e328:	f3ef 8310 	mrs	r3, PRIMASK
 800e32c:	613b      	str	r3, [r7, #16]
  return(result);
 800e32e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e330:	63bb      	str	r3, [r7, #56]	; 0x38
 800e332:	2301      	movs	r3, #1
 800e334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	f383 8810 	msr	PRIMASK, r3
}
 800e33c:	46c0      	nop			; (mov r8, r8)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	689a      	ldr	r2, [r3, #8]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2101      	movs	r1, #1
 800e34a:	430a      	orrs	r2, r1
 800e34c:	609a      	str	r2, [r3, #8]
 800e34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e350:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	f383 8810 	msr	PRIMASK, r3
}
 800e358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e35a:	f3ef 8310 	mrs	r3, PRIMASK
 800e35e:	61fb      	str	r3, [r7, #28]
  return(result);
 800e360:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e362:	637b      	str	r3, [r7, #52]	; 0x34
 800e364:	2301      	movs	r3, #1
 800e366:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e368:	6a3b      	ldr	r3, [r7, #32]
 800e36a:	f383 8810 	msr	PRIMASK, r3
}
 800e36e:	46c0      	nop			; (mov r8, r8)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	689a      	ldr	r2, [r3, #8]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2140      	movs	r1, #64	; 0x40
 800e37c:	430a      	orrs	r2, r1
 800e37e:	609a      	str	r2, [r3, #8]
 800e380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e382:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e386:	f383 8810 	msr	PRIMASK, r3
}
 800e38a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	0018      	movs	r0, r3
 800e390:	46bd      	mov	sp, r7
 800e392:	b010      	add	sp, #64	; 0x40
 800e394:	bd80      	pop	{r7, pc}
 800e396:	46c0      	nop			; (mov r8, r8)
 800e398:	0800e4f1 	.word	0x0800e4f1
 800e39c:	0800e621 	.word	0x0800e621
 800e3a0:	0800e663 	.word	0x0800e663

0800e3a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b08a      	sub	sp, #40	; 0x28
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3ac:	f3ef 8310 	mrs	r3, PRIMASK
 800e3b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3b2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e3b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f383 8810 	msr	PRIMASK, r3
}
 800e3c0:	46c0      	nop			; (mov r8, r8)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	21c0      	movs	r1, #192	; 0xc0
 800e3ce:	438a      	bics	r2, r1
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	f383 8810 	msr	PRIMASK, r3
}
 800e3dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3de:	f3ef 8310 	mrs	r3, PRIMASK
 800e3e2:	617b      	str	r3, [r7, #20]
  return(result);
 800e3e4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e3e6:	623b      	str	r3, [r7, #32]
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	f383 8810 	msr	PRIMASK, r3
}
 800e3f2:	46c0      	nop			; (mov r8, r8)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	689a      	ldr	r2, [r3, #8]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4908      	ldr	r1, [pc, #32]	; (800e420 <UART_EndTxTransfer+0x7c>)
 800e400:	400a      	ands	r2, r1
 800e402:	609a      	str	r2, [r3, #8]
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	f383 8810 	msr	PRIMASK, r3
}
 800e40e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2288      	movs	r2, #136	; 0x88
 800e414:	2120      	movs	r1, #32
 800e416:	5099      	str	r1, [r3, r2]
}
 800e418:	46c0      	nop			; (mov r8, r8)
 800e41a:	46bd      	mov	sp, r7
 800e41c:	b00a      	add	sp, #40	; 0x28
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	ff7fffff 	.word	0xff7fffff

0800e424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b08e      	sub	sp, #56	; 0x38
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e42c:	f3ef 8310 	mrs	r3, PRIMASK
 800e430:	617b      	str	r3, [r7, #20]
  return(result);
 800e432:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e434:	637b      	str	r3, [r7, #52]	; 0x34
 800e436:	2301      	movs	r3, #1
 800e438:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	f383 8810 	msr	PRIMASK, r3
}
 800e440:	46c0      	nop			; (mov r8, r8)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4926      	ldr	r1, [pc, #152]	; (800e4e8 <UART_EndRxTransfer+0xc4>)
 800e44e:	400a      	ands	r2, r1
 800e450:	601a      	str	r2, [r3, #0]
 800e452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e454:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	f383 8810 	msr	PRIMASK, r3
}
 800e45c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e45e:	f3ef 8310 	mrs	r3, PRIMASK
 800e462:	623b      	str	r3, [r7, #32]
  return(result);
 800e464:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e466:	633b      	str	r3, [r7, #48]	; 0x30
 800e468:	2301      	movs	r3, #1
 800e46a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	f383 8810 	msr	PRIMASK, r3
}
 800e472:	46c0      	nop			; (mov r8, r8)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	689a      	ldr	r2, [r3, #8]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	491b      	ldr	r1, [pc, #108]	; (800e4ec <UART_EndRxTransfer+0xc8>)
 800e480:	400a      	ands	r2, r1
 800e482:	609a      	str	r2, [r3, #8]
 800e484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e486:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	f383 8810 	msr	PRIMASK, r3
}
 800e48e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e494:	2b01      	cmp	r3, #1
 800e496:	d118      	bne.n	800e4ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e498:	f3ef 8310 	mrs	r3, PRIMASK
 800e49c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e49e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f383 8810 	msr	PRIMASK, r3
}
 800e4ac:	46c0      	nop			; (mov r8, r8)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2110      	movs	r1, #16
 800e4ba:	438a      	bics	r2, r1
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	f383 8810 	msr	PRIMASK, r3
}
 800e4c8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	228c      	movs	r2, #140	; 0x8c
 800e4ce:	2120      	movs	r1, #32
 800e4d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e4de:	46c0      	nop			; (mov r8, r8)
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	b00e      	add	sp, #56	; 0x38
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	46c0      	nop			; (mov r8, r8)
 800e4e8:	fffffedf 	.word	0xfffffedf
 800e4ec:	effffffe 	.word	0xeffffffe

0800e4f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b094      	sub	sp, #80	; 0x50
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2220      	movs	r2, #32
 800e506:	4013      	ands	r3, r2
 800e508:	d16f      	bne.n	800e5ea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800e50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e50c:	225e      	movs	r2, #94	; 0x5e
 800e50e:	2100      	movs	r1, #0
 800e510:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e512:	f3ef 8310 	mrs	r3, PRIMASK
 800e516:	61bb      	str	r3, [r7, #24]
  return(result);
 800e518:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e51a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e51c:	2301      	movs	r3, #1
 800e51e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	f383 8810 	msr	PRIMASK, r3
}
 800e526:	46c0      	nop			; (mov r8, r8)
 800e528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	493a      	ldr	r1, [pc, #232]	; (800e61c <UART_DMAReceiveCplt+0x12c>)
 800e534:	400a      	ands	r2, r1
 800e536:	601a      	str	r2, [r3, #0]
 800e538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e53a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e53c:	6a3b      	ldr	r3, [r7, #32]
 800e53e:	f383 8810 	msr	PRIMASK, r3
}
 800e542:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e544:	f3ef 8310 	mrs	r3, PRIMASK
 800e548:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e54c:	647b      	str	r3, [r7, #68]	; 0x44
 800e54e:	2301      	movs	r3, #1
 800e550:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e554:	f383 8810 	msr	PRIMASK, r3
}
 800e558:	46c0      	nop			; (mov r8, r8)
 800e55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	689a      	ldr	r2, [r3, #8]
 800e560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2101      	movs	r1, #1
 800e566:	438a      	bics	r2, r1
 800e568:	609a      	str	r2, [r3, #8]
 800e56a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e56c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e570:	f383 8810 	msr	PRIMASK, r3
}
 800e574:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e576:	f3ef 8310 	mrs	r3, PRIMASK
 800e57a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e57e:	643b      	str	r3, [r7, #64]	; 0x40
 800e580:	2301      	movs	r3, #1
 800e582:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e586:	f383 8810 	msr	PRIMASK, r3
}
 800e58a:	46c0      	nop			; (mov r8, r8)
 800e58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	689a      	ldr	r2, [r3, #8]
 800e592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2140      	movs	r1, #64	; 0x40
 800e598:	438a      	bics	r2, r1
 800e59a:	609a      	str	r2, [r3, #8]
 800e59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e59e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a2:	f383 8810 	msr	PRIMASK, r3
}
 800e5a6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5aa:	228c      	movs	r2, #140	; 0x8c
 800e5ac:	2120      	movs	r1, #32
 800e5ae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d118      	bne.n	800e5ea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e5bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5be:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	f383 8810 	msr	PRIMASK, r3
}
 800e5cc:	46c0      	nop			; (mov r8, r8)
 800e5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2110      	movs	r1, #16
 800e5da:	438a      	bics	r2, r1
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	f383 8810 	msr	PRIMASK, r3
}
 800e5e8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d108      	bne.n	800e60a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5fa:	225c      	movs	r2, #92	; 0x5c
 800e5fc:	5a9a      	ldrh	r2, [r3, r2]
 800e5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e600:	0011      	movs	r1, r2
 800e602:	0018      	movs	r0, r3
 800e604:	f7ff faae 	bl	800db64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e608:	e003      	b.n	800e612 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800e60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e60c:	0018      	movs	r0, r3
 800e60e:	f7f8 fd47 	bl	80070a0 <HAL_UART_RxCpltCallback>
}
 800e612:	46c0      	nop			; (mov r8, r8)
 800e614:	46bd      	mov	sp, r7
 800e616:	b014      	add	sp, #80	; 0x50
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	46c0      	nop			; (mov r8, r8)
 800e61c:	fffffeff 	.word	0xfffffeff

0800e620 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2201      	movs	r2, #1
 800e632:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d10a      	bne.n	800e652 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	225c      	movs	r2, #92	; 0x5c
 800e640:	5a9b      	ldrh	r3, [r3, r2]
 800e642:	085b      	lsrs	r3, r3, #1
 800e644:	b29a      	uxth	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	0011      	movs	r1, r2
 800e64a:	0018      	movs	r0, r3
 800e64c:	f7ff fa8a 	bl	800db64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e650:	e003      	b.n	800e65a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	0018      	movs	r0, r3
 800e656:	f7ff fa7d 	bl	800db54 <HAL_UART_RxHalfCpltCallback>
}
 800e65a:	46c0      	nop			; (mov r8, r8)
 800e65c:	46bd      	mov	sp, r7
 800e65e:	b004      	add	sp, #16
 800e660:	bd80      	pop	{r7, pc}

0800e662 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b086      	sub	sp, #24
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e66e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	2288      	movs	r2, #136	; 0x88
 800e674:	589b      	ldr	r3, [r3, r2]
 800e676:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	228c      	movs	r2, #140	; 0x8c
 800e67c:	589b      	ldr	r3, [r3, r2]
 800e67e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	689b      	ldr	r3, [r3, #8]
 800e686:	2280      	movs	r2, #128	; 0x80
 800e688:	4013      	ands	r3, r2
 800e68a:	2b80      	cmp	r3, #128	; 0x80
 800e68c:	d10a      	bne.n	800e6a4 <UART_DMAError+0x42>
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	2b21      	cmp	r3, #33	; 0x21
 800e692:	d107      	bne.n	800e6a4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	2256      	movs	r2, #86	; 0x56
 800e698:	2100      	movs	r1, #0
 800e69a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	0018      	movs	r0, r3
 800e6a0:	f7ff fe80 	bl	800e3a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	2240      	movs	r2, #64	; 0x40
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	2b40      	cmp	r3, #64	; 0x40
 800e6b0:	d10a      	bne.n	800e6c8 <UART_DMAError+0x66>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2b22      	cmp	r3, #34	; 0x22
 800e6b6:	d107      	bne.n	800e6c8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	225e      	movs	r2, #94	; 0x5e
 800e6bc:	2100      	movs	r1, #0
 800e6be:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	0018      	movs	r0, r3
 800e6c4:	f7ff feae 	bl	800e424 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	2290      	movs	r2, #144	; 0x90
 800e6cc:	589b      	ldr	r3, [r3, r2]
 800e6ce:	2210      	movs	r2, #16
 800e6d0:	431a      	orrs	r2, r3
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	2190      	movs	r1, #144	; 0x90
 800e6d6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	0018      	movs	r0, r3
 800e6dc:	f7f8 fd52 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6e0:	46c0      	nop			; (mov r8, r8)
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	b006      	add	sp, #24
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	225e      	movs	r2, #94	; 0x5e
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2256      	movs	r2, #86	; 0x56
 800e702:	2100      	movs	r1, #0
 800e704:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	0018      	movs	r0, r3
 800e70a:	f7f8 fd3b 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e70e:	46c0      	nop			; (mov r8, r8)
 800e710:	46bd      	mov	sp, r7
 800e712:	b004      	add	sp, #16
 800e714:	bd80      	pop	{r7, pc}

0800e716 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b086      	sub	sp, #24
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e71e:	f3ef 8310 	mrs	r3, PRIMASK
 800e722:	60bb      	str	r3, [r7, #8]
  return(result);
 800e724:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e726:	617b      	str	r3, [r7, #20]
 800e728:	2301      	movs	r3, #1
 800e72a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f383 8810 	msr	PRIMASK, r3
}
 800e732:	46c0      	nop			; (mov r8, r8)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2140      	movs	r1, #64	; 0x40
 800e740:	438a      	bics	r2, r1
 800e742:	601a      	str	r2, [r3, #0]
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	f383 8810 	msr	PRIMASK, r3
}
 800e74e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2288      	movs	r2, #136	; 0x88
 800e754:	2120      	movs	r1, #32
 800e756:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	0018      	movs	r0, r3
 800e762:	f7f8 fc95 	bl	8007090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e766:	46c0      	nop			; (mov r8, r8)
 800e768:	46bd      	mov	sp, r7
 800e76a:	b006      	add	sp, #24
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b082      	sub	sp, #8
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e776:	46c0      	nop			; (mov r8, r8)
 800e778:	46bd      	mov	sp, r7
 800e77a:	b002      	add	sp, #8
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b082      	sub	sp, #8
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e786:	46c0      	nop			; (mov r8, r8)
 800e788:	46bd      	mov	sp, r7
 800e78a:	b002      	add	sp, #8
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b082      	sub	sp, #8
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e796:	46c0      	nop			; (mov r8, r8)
 800e798:	46bd      	mov	sp, r7
 800e79a:	b002      	add	sp, #8
 800e79c:	bd80      	pop	{r7, pc}
	...

0800e7a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2284      	movs	r2, #132	; 0x84
 800e7ac:	5c9b      	ldrb	r3, [r3, r2]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d101      	bne.n	800e7b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e027      	b.n	800e806 <HAL_UARTEx_DisableFifoMode+0x66>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2284      	movs	r2, #132	; 0x84
 800e7ba:	2101      	movs	r1, #1
 800e7bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2288      	movs	r2, #136	; 0x88
 800e7c2:	2124      	movs	r1, #36	; 0x24
 800e7c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2101      	movs	r1, #1
 800e7da:	438a      	bics	r2, r1
 800e7dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	4a0b      	ldr	r2, [pc, #44]	; (800e810 <HAL_UARTEx_DisableFifoMode+0x70>)
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2288      	movs	r2, #136	; 0x88
 800e7f8:	2120      	movs	r1, #32
 800e7fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2284      	movs	r2, #132	; 0x84
 800e800:	2100      	movs	r1, #0
 800e802:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e804:	2300      	movs	r3, #0
}
 800e806:	0018      	movs	r0, r3
 800e808:	46bd      	mov	sp, r7
 800e80a:	b004      	add	sp, #16
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	46c0      	nop			; (mov r8, r8)
 800e810:	dfffffff 	.word	0xdfffffff

0800e814 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2284      	movs	r2, #132	; 0x84
 800e822:	5c9b      	ldrb	r3, [r3, r2]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d101      	bne.n	800e82c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e828:	2302      	movs	r3, #2
 800e82a:	e02e      	b.n	800e88a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2284      	movs	r2, #132	; 0x84
 800e830:	2101      	movs	r1, #1
 800e832:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2288      	movs	r2, #136	; 0x88
 800e838:	2124      	movs	r1, #36	; 0x24
 800e83a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2101      	movs	r1, #1
 800e850:	438a      	bics	r2, r1
 800e852:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	08d9      	lsrs	r1, r3, #3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	683a      	ldr	r2, [r7, #0]
 800e864:	430a      	orrs	r2, r1
 800e866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	0018      	movs	r0, r3
 800e86c:	f000 f854 	bl	800e918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2288      	movs	r2, #136	; 0x88
 800e87c:	2120      	movs	r1, #32
 800e87e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2284      	movs	r2, #132	; 0x84
 800e884:	2100      	movs	r1, #0
 800e886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	0018      	movs	r0, r3
 800e88c:	46bd      	mov	sp, r7
 800e88e:	b004      	add	sp, #16
 800e890:	bd80      	pop	{r7, pc}
	...

0800e894 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2284      	movs	r2, #132	; 0x84
 800e8a2:	5c9b      	ldrb	r3, [r3, r2]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d101      	bne.n	800e8ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	e02f      	b.n	800e90c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2284      	movs	r2, #132	; 0x84
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2288      	movs	r2, #136	; 0x88
 800e8b8:	2124      	movs	r1, #36	; 0x24
 800e8ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2101      	movs	r1, #1
 800e8d0:	438a      	bics	r2, r1
 800e8d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	4a0e      	ldr	r2, [pc, #56]	; (800e914 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800e8dc:	4013      	ands	r3, r2
 800e8de:	0019      	movs	r1, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	683a      	ldr	r2, [r7, #0]
 800e8e6:	430a      	orrs	r2, r1
 800e8e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	0018      	movs	r0, r3
 800e8ee:	f000 f813 	bl	800e918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2288      	movs	r2, #136	; 0x88
 800e8fe:	2120      	movs	r1, #32
 800e900:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2284      	movs	r2, #132	; 0x84
 800e906:	2100      	movs	r1, #0
 800e908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	0018      	movs	r0, r3
 800e90e:	46bd      	mov	sp, r7
 800e910:	b004      	add	sp, #16
 800e912:	bd80      	pop	{r7, pc}
 800e914:	f1ffffff 	.word	0xf1ffffff

0800e918 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e924:	2b00      	cmp	r3, #0
 800e926:	d108      	bne.n	800e93a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	226a      	movs	r2, #106	; 0x6a
 800e92c:	2101      	movs	r1, #1
 800e92e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2268      	movs	r2, #104	; 0x68
 800e934:	2101      	movs	r1, #1
 800e936:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e938:	e043      	b.n	800e9c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e93a:	260f      	movs	r6, #15
 800e93c:	19bb      	adds	r3, r7, r6
 800e93e:	2208      	movs	r2, #8
 800e940:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e942:	200e      	movs	r0, #14
 800e944:	183b      	adds	r3, r7, r0
 800e946:	2208      	movs	r2, #8
 800e948:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	689b      	ldr	r3, [r3, #8]
 800e950:	0e5b      	lsrs	r3, r3, #25
 800e952:	b2da      	uxtb	r2, r3
 800e954:	240d      	movs	r4, #13
 800e956:	193b      	adds	r3, r7, r4
 800e958:	2107      	movs	r1, #7
 800e95a:	400a      	ands	r2, r1
 800e95c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	0f5b      	lsrs	r3, r3, #29
 800e966:	b2da      	uxtb	r2, r3
 800e968:	250c      	movs	r5, #12
 800e96a:	197b      	adds	r3, r7, r5
 800e96c:	2107      	movs	r1, #7
 800e96e:	400a      	ands	r2, r1
 800e970:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e972:	183b      	adds	r3, r7, r0
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	197a      	adds	r2, r7, r5
 800e978:	7812      	ldrb	r2, [r2, #0]
 800e97a:	4914      	ldr	r1, [pc, #80]	; (800e9cc <UARTEx_SetNbDataToProcess+0xb4>)
 800e97c:	5c8a      	ldrb	r2, [r1, r2]
 800e97e:	435a      	muls	r2, r3
 800e980:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800e982:	197b      	adds	r3, r7, r5
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	4a12      	ldr	r2, [pc, #72]	; (800e9d0 <UARTEx_SetNbDataToProcess+0xb8>)
 800e988:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e98a:	0019      	movs	r1, r3
 800e98c:	f7f1 fc62 	bl	8000254 <__divsi3>
 800e990:	0003      	movs	r3, r0
 800e992:	b299      	uxth	r1, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	226a      	movs	r2, #106	; 0x6a
 800e998:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e99a:	19bb      	adds	r3, r7, r6
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	193a      	adds	r2, r7, r4
 800e9a0:	7812      	ldrb	r2, [r2, #0]
 800e9a2:	490a      	ldr	r1, [pc, #40]	; (800e9cc <UARTEx_SetNbDataToProcess+0xb4>)
 800e9a4:	5c8a      	ldrb	r2, [r1, r2]
 800e9a6:	435a      	muls	r2, r3
 800e9a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9aa:	193b      	adds	r3, r7, r4
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	4a08      	ldr	r2, [pc, #32]	; (800e9d0 <UARTEx_SetNbDataToProcess+0xb8>)
 800e9b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9b2:	0019      	movs	r1, r3
 800e9b4:	f7f1 fc4e 	bl	8000254 <__divsi3>
 800e9b8:	0003      	movs	r3, r0
 800e9ba:	b299      	uxth	r1, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2268      	movs	r2, #104	; 0x68
 800e9c0:	5299      	strh	r1, [r3, r2]
}
 800e9c2:	46c0      	nop			; (mov r8, r8)
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	b005      	add	sp, #20
 800e9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ca:	46c0      	nop			; (mov r8, r8)
 800e9cc:	08018518 	.word	0x08018518
 800e9d0:	08018520 	.word	0x08018520

0800e9d4 <__NVIC_SetPriority>:
{
 800e9d4:	b590      	push	{r4, r7, lr}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	0002      	movs	r2, r0
 800e9dc:	6039      	str	r1, [r7, #0]
 800e9de:	1dfb      	adds	r3, r7, #7
 800e9e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e9e2:	1dfb      	adds	r3, r7, #7
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	2b7f      	cmp	r3, #127	; 0x7f
 800e9e8:	d828      	bhi.n	800ea3c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e9ea:	4a2f      	ldr	r2, [pc, #188]	; (800eaa8 <__NVIC_SetPriority+0xd4>)
 800e9ec:	1dfb      	adds	r3, r7, #7
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	b25b      	sxtb	r3, r3
 800e9f2:	089b      	lsrs	r3, r3, #2
 800e9f4:	33c0      	adds	r3, #192	; 0xc0
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	589b      	ldr	r3, [r3, r2]
 800e9fa:	1dfa      	adds	r2, r7, #7
 800e9fc:	7812      	ldrb	r2, [r2, #0]
 800e9fe:	0011      	movs	r1, r2
 800ea00:	2203      	movs	r2, #3
 800ea02:	400a      	ands	r2, r1
 800ea04:	00d2      	lsls	r2, r2, #3
 800ea06:	21ff      	movs	r1, #255	; 0xff
 800ea08:	4091      	lsls	r1, r2
 800ea0a:	000a      	movs	r2, r1
 800ea0c:	43d2      	mvns	r2, r2
 800ea0e:	401a      	ands	r2, r3
 800ea10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	019b      	lsls	r3, r3, #6
 800ea16:	22ff      	movs	r2, #255	; 0xff
 800ea18:	401a      	ands	r2, r3
 800ea1a:	1dfb      	adds	r3, r7, #7
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	0018      	movs	r0, r3
 800ea20:	2303      	movs	r3, #3
 800ea22:	4003      	ands	r3, r0
 800ea24:	00db      	lsls	r3, r3, #3
 800ea26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ea28:	481f      	ldr	r0, [pc, #124]	; (800eaa8 <__NVIC_SetPriority+0xd4>)
 800ea2a:	1dfb      	adds	r3, r7, #7
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	b25b      	sxtb	r3, r3
 800ea30:	089b      	lsrs	r3, r3, #2
 800ea32:	430a      	orrs	r2, r1
 800ea34:	33c0      	adds	r3, #192	; 0xc0
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	501a      	str	r2, [r3, r0]
}
 800ea3a:	e031      	b.n	800eaa0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ea3c:	4a1b      	ldr	r2, [pc, #108]	; (800eaac <__NVIC_SetPriority+0xd8>)
 800ea3e:	1dfb      	adds	r3, r7, #7
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	0019      	movs	r1, r3
 800ea44:	230f      	movs	r3, #15
 800ea46:	400b      	ands	r3, r1
 800ea48:	3b08      	subs	r3, #8
 800ea4a:	089b      	lsrs	r3, r3, #2
 800ea4c:	3306      	adds	r3, #6
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	18d3      	adds	r3, r2, r3
 800ea52:	3304      	adds	r3, #4
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	1dfa      	adds	r2, r7, #7
 800ea58:	7812      	ldrb	r2, [r2, #0]
 800ea5a:	0011      	movs	r1, r2
 800ea5c:	2203      	movs	r2, #3
 800ea5e:	400a      	ands	r2, r1
 800ea60:	00d2      	lsls	r2, r2, #3
 800ea62:	21ff      	movs	r1, #255	; 0xff
 800ea64:	4091      	lsls	r1, r2
 800ea66:	000a      	movs	r2, r1
 800ea68:	43d2      	mvns	r2, r2
 800ea6a:	401a      	ands	r2, r3
 800ea6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	019b      	lsls	r3, r3, #6
 800ea72:	22ff      	movs	r2, #255	; 0xff
 800ea74:	401a      	ands	r2, r3
 800ea76:	1dfb      	adds	r3, r7, #7
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	0018      	movs	r0, r3
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	4003      	ands	r3, r0
 800ea80:	00db      	lsls	r3, r3, #3
 800ea82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ea84:	4809      	ldr	r0, [pc, #36]	; (800eaac <__NVIC_SetPriority+0xd8>)
 800ea86:	1dfb      	adds	r3, r7, #7
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	001c      	movs	r4, r3
 800ea8c:	230f      	movs	r3, #15
 800ea8e:	4023      	ands	r3, r4
 800ea90:	3b08      	subs	r3, #8
 800ea92:	089b      	lsrs	r3, r3, #2
 800ea94:	430a      	orrs	r2, r1
 800ea96:	3306      	adds	r3, #6
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	18c3      	adds	r3, r0, r3
 800ea9c:	3304      	adds	r3, #4
 800ea9e:	601a      	str	r2, [r3, #0]
}
 800eaa0:	46c0      	nop			; (mov r8, r8)
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	b003      	add	sp, #12
 800eaa6:	bd90      	pop	{r4, r7, pc}
 800eaa8:	e000e100 	.word	0xe000e100
 800eaac:	e000ed00 	.word	0xe000ed00

0800eab0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800eab0:	b580      	push	{r7, lr}
 800eab2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800eab4:	4b05      	ldr	r3, [pc, #20]	; (800eacc <SysTick_Handler+0x1c>)
 800eab6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800eab8:	f001 fc6a 	bl	8010390 <xTaskGetSchedulerState>
 800eabc:	0003      	movs	r3, r0
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d001      	beq.n	800eac6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800eac2:	f002 f939 	bl	8010d38 <xPortSysTickHandler>
  }
}
 800eac6:	46c0      	nop			; (mov r8, r8)
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	e000e010 	.word	0xe000e010

0800ead0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ead0:	b580      	push	{r7, lr}
 800ead2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ead4:	2305      	movs	r3, #5
 800ead6:	425b      	negs	r3, r3
 800ead8:	2100      	movs	r1, #0
 800eada:	0018      	movs	r0, r3
 800eadc:	f7ff ff7a 	bl	800e9d4 <__NVIC_SetPriority>
#endif
}
 800eae0:	46c0      	nop			; (mov r8, r8)
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
	...

0800eae8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaee:	f3ef 8305 	mrs	r3, IPSR
 800eaf2:	603b      	str	r3, [r7, #0]
  return(result);
 800eaf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d003      	beq.n	800eb02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800eafa:	2306      	movs	r3, #6
 800eafc:	425b      	negs	r3, r3
 800eafe:	607b      	str	r3, [r7, #4]
 800eb00:	e00c      	b.n	800eb1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800eb02:	4b09      	ldr	r3, [pc, #36]	; (800eb28 <osKernelInitialize+0x40>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d105      	bne.n	800eb16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800eb0a:	4b07      	ldr	r3, [pc, #28]	; (800eb28 <osKernelInitialize+0x40>)
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800eb10:	2300      	movs	r3, #0
 800eb12:	607b      	str	r3, [r7, #4]
 800eb14:	e002      	b.n	800eb1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800eb16:	2301      	movs	r3, #1
 800eb18:	425b      	negs	r3, r3
 800eb1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eb1c:	687b      	ldr	r3, [r7, #4]
}
 800eb1e:	0018      	movs	r0, r3
 800eb20:	46bd      	mov	sp, r7
 800eb22:	b002      	add	sp, #8
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	46c0      	nop			; (mov r8, r8)
 800eb28:	20003f6c 	.word	0x20003f6c

0800eb2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb32:	f3ef 8305 	mrs	r3, IPSR
 800eb36:	603b      	str	r3, [r7, #0]
  return(result);
 800eb38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <osKernelStart+0x1a>
    stat = osErrorISR;
 800eb3e:	2306      	movs	r3, #6
 800eb40:	425b      	negs	r3, r3
 800eb42:	607b      	str	r3, [r7, #4]
 800eb44:	e010      	b.n	800eb68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800eb46:	4b0b      	ldr	r3, [pc, #44]	; (800eb74 <osKernelStart+0x48>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d109      	bne.n	800eb62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800eb4e:	f7ff ffbf 	bl	800ead0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800eb52:	4b08      	ldr	r3, [pc, #32]	; (800eb74 <osKernelStart+0x48>)
 800eb54:	2202      	movs	r2, #2
 800eb56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800eb58:	f001 f830 	bl	800fbbc <vTaskStartScheduler>
      stat = osOK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	607b      	str	r3, [r7, #4]
 800eb60:	e002      	b.n	800eb68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800eb62:	2301      	movs	r3, #1
 800eb64:	425b      	negs	r3, r3
 800eb66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eb68:	687b      	ldr	r3, [r7, #4]
}
 800eb6a:	0018      	movs	r0, r3
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	b002      	add	sp, #8
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	46c0      	nop			; (mov r8, r8)
 800eb74:	20003f6c 	.word	0x20003f6c

0800eb78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eb78:	b5b0      	push	{r4, r5, r7, lr}
 800eb7a:	b08e      	sub	sp, #56	; 0x38
 800eb7c:	af04      	add	r7, sp, #16
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eb84:	2300      	movs	r3, #0
 800eb86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb88:	f3ef 8305 	mrs	r3, IPSR
 800eb8c:	617b      	str	r3, [r7, #20]
  return(result);
 800eb8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d000      	beq.n	800eb96 <osThreadNew+0x1e>
 800eb94:	e081      	b.n	800ec9a <osThreadNew+0x122>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d100      	bne.n	800eb9e <osThreadNew+0x26>
 800eb9c:	e07d      	b.n	800ec9a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800eb9e:	2380      	movs	r3, #128	; 0x80
 800eba0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800eba2:	2318      	movs	r3, #24
 800eba4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800eba6:	2300      	movs	r3, #0
 800eba8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	425b      	negs	r3, r3
 800ebae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d044      	beq.n	800ec40 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <osThreadNew+0x4c>
        name = attr->name;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d002      	beq.n	800ebd2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d007      	beq.n	800ebe8 <osThreadNew+0x70>
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	2b38      	cmp	r3, #56	; 0x38
 800ebdc:	d804      	bhi.n	800ebe8 <osThreadNew+0x70>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	4013      	ands	r3, r2
 800ebe6:	d001      	beq.n	800ebec <osThreadNew+0x74>
        return (NULL);
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e057      	b.n	800ec9c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	695b      	ldr	r3, [r3, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d003      	beq.n	800ebfc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	695b      	ldr	r3, [r3, #20]
 800ebf8:	089b      	lsrs	r3, r3, #2
 800ebfa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00e      	beq.n	800ec22 <osThreadNew+0xaa>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	2ba7      	cmp	r3, #167	; 0xa7
 800ec0a:	d90a      	bls.n	800ec22 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d006      	beq.n	800ec22 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	695b      	ldr	r3, [r3, #20]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <osThreadNew+0xaa>
        mem = 1;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	61bb      	str	r3, [r7, #24]
 800ec20:	e010      	b.n	800ec44 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d10c      	bne.n	800ec44 <osThreadNew+0xcc>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d108      	bne.n	800ec44 <osThreadNew+0xcc>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d104      	bne.n	800ec44 <osThreadNew+0xcc>
          mem = 0;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	61bb      	str	r3, [r7, #24]
 800ec3e:	e001      	b.n	800ec44 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d112      	bne.n	800ec70 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec52:	68bd      	ldr	r5, [r7, #8]
 800ec54:	6a3c      	ldr	r4, [r7, #32]
 800ec56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec58:	68f8      	ldr	r0, [r7, #12]
 800ec5a:	9302      	str	r3, [sp, #8]
 800ec5c:	9201      	str	r2, [sp, #4]
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	002b      	movs	r3, r5
 800ec64:	0022      	movs	r2, r4
 800ec66:	f000 fdea 	bl	800f83e <xTaskCreateStatic>
 800ec6a:	0003      	movs	r3, r0
 800ec6c:	613b      	str	r3, [r7, #16]
 800ec6e:	e014      	b.n	800ec9a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d111      	bne.n	800ec9a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	68bc      	ldr	r4, [r7, #8]
 800ec7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	2310      	movs	r3, #16
 800ec82:	18fb      	adds	r3, r7, r3
 800ec84:	9301      	str	r3, [sp, #4]
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	9300      	str	r3, [sp, #0]
 800ec8a:	0023      	movs	r3, r4
 800ec8c:	f000 fe1b 	bl	800f8c6 <xTaskCreate>
 800ec90:	0003      	movs	r3, r0
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d001      	beq.n	800ec9a <osThreadNew+0x122>
            hTask = NULL;
 800ec96:	2300      	movs	r3, #0
 800ec98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ec9a:	693b      	ldr	r3, [r7, #16]
}
 800ec9c:	0018      	movs	r0, r3
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	b00a      	add	sp, #40	; 0x28
 800eca2:	bdb0      	pop	{r4, r5, r7, pc}

0800eca4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecac:	f3ef 8305 	mrs	r3, IPSR
 800ecb0:	60bb      	str	r3, [r7, #8]
  return(result);
 800ecb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d003      	beq.n	800ecc0 <osDelay+0x1c>
    stat = osErrorISR;
 800ecb8:	2306      	movs	r3, #6
 800ecba:	425b      	negs	r3, r3
 800ecbc:	60fb      	str	r3, [r7, #12]
 800ecbe:	e008      	b.n	800ecd2 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d003      	beq.n	800ecd2 <osDelay+0x2e>
      vTaskDelay(ticks);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	0018      	movs	r0, r3
 800ecce:	f000 ff4f 	bl	800fb70 <vTaskDelay>
    }
  }

  return (stat);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
}
 800ecd4:	0018      	movs	r0, r3
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	b004      	add	sp, #16
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ecdc:	b590      	push	{r4, r7, lr}
 800ecde:	b08b      	sub	sp, #44	; 0x2c
 800ece0:	af02      	add	r7, sp, #8
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ece8:	2300      	movs	r3, #0
 800ecea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecec:	f3ef 8305 	mrs	r3, IPSR
 800ecf0:	613b      	str	r3, [r7, #16]
  return(result);
 800ecf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d000      	beq.n	800ecfa <osMessageQueueNew+0x1e>
 800ecf8:	e064      	b.n	800edc4 <osMessageQueueNew+0xe8>
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d100      	bne.n	800ed02 <osMessageQueueNew+0x26>
 800ed00:	e060      	b.n	800edc4 <osMessageQueueNew+0xe8>
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d05d      	beq.n	800edc4 <osMessageQueueNew+0xe8>
    mem = -1;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	425b      	negs	r3, r3
 800ed0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d028      	beq.n	800ed66 <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d011      	beq.n	800ed40 <osMessageQueueNew+0x64>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	2b4f      	cmp	r3, #79	; 0x4f
 800ed22:	d90d      	bls.n	800ed40 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d009      	beq.n	800ed40 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	695a      	ldr	r2, [r3, #20]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	68b9      	ldr	r1, [r7, #8]
 800ed34:	434b      	muls	r3, r1
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d302      	bcc.n	800ed40 <osMessageQueueNew+0x64>
        mem = 1;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	61bb      	str	r3, [r7, #24]
 800ed3e:	e014      	b.n	800ed6a <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d110      	bne.n	800ed6a <osMessageQueueNew+0x8e>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10c      	bne.n	800ed6a <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d108      	bne.n	800ed6a <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	695b      	ldr	r3, [r3, #20]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d104      	bne.n	800ed6a <osMessageQueueNew+0x8e>
          mem = 0;
 800ed60:	2300      	movs	r3, #0
 800ed62:	61bb      	str	r3, [r7, #24]
 800ed64:	e001      	b.n	800ed6a <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d10c      	bne.n	800ed8a <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	691a      	ldr	r2, [r3, #16]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	68b9      	ldr	r1, [r7, #8]
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	2400      	movs	r4, #0
 800ed7e:	9400      	str	r4, [sp, #0]
 800ed80:	f000 f953 	bl	800f02a <xQueueGenericCreateStatic>
 800ed84:	0003      	movs	r3, r0
 800ed86:	61fb      	str	r3, [r7, #28]
 800ed88:	e00a      	b.n	800eda0 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d107      	bne.n	800eda0 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ed90:	68b9      	ldr	r1, [r7, #8]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2200      	movs	r2, #0
 800ed96:	0018      	movs	r0, r3
 800ed98:	f000 f993 	bl	800f0c2 <xQueueGenericCreate>
 800ed9c:	0003      	movs	r3, r0
 800ed9e:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00e      	beq.n	800edc4 <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d003      	beq.n	800edb4 <osMessageQueueNew+0xd8>
        name = attr->name;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	617b      	str	r3, [r7, #20]
 800edb2:	e001      	b.n	800edb8 <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 800edb4:	2300      	movs	r3, #0
 800edb6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	0011      	movs	r1, r2
 800edbe:	0018      	movs	r0, r3
 800edc0:	f000 fce2 	bl	800f788 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800edc4:	69fb      	ldr	r3, [r7, #28]
}
 800edc6:	0018      	movs	r0, r3
 800edc8:	46bd      	mov	sp, r7
 800edca:	b009      	add	sp, #36	; 0x24
 800edcc:	bd90      	pop	{r4, r7, pc}
	...

0800edd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	4a06      	ldr	r2, [pc, #24]	; (800edf8 <vApplicationGetIdleTaskMemory+0x28>)
 800ede0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	4a05      	ldr	r2, [pc, #20]	; (800edfc <vApplicationGetIdleTaskMemory+0x2c>)
 800ede6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2280      	movs	r2, #128	; 0x80
 800edec:	601a      	str	r2, [r3, #0]
}
 800edee:	46c0      	nop			; (mov r8, r8)
 800edf0:	46bd      	mov	sp, r7
 800edf2:	b004      	add	sp, #16
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	46c0      	nop			; (mov r8, r8)
 800edf8:	20003f70 	.word	0x20003f70
 800edfc:	20004018 	.word	0x20004018

0800ee00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	4a06      	ldr	r2, [pc, #24]	; (800ee28 <vApplicationGetTimerTaskMemory+0x28>)
 800ee10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	4a05      	ldr	r2, [pc, #20]	; (800ee2c <vApplicationGetTimerTaskMemory+0x2c>)
 800ee16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2280      	movs	r2, #128	; 0x80
 800ee1c:	0052      	lsls	r2, r2, #1
 800ee1e:	601a      	str	r2, [r3, #0]
}
 800ee20:	46c0      	nop			; (mov r8, r8)
 800ee22:	46bd      	mov	sp, r7
 800ee24:	b004      	add	sp, #16
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	20004218 	.word	0x20004218
 800ee2c:	200042c0 	.word	0x200042c0

0800ee30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	3308      	adds	r3, #8
 800ee3c:	001a      	movs	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2201      	movs	r2, #1
 800ee46:	4252      	negs	r2, r2
 800ee48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3308      	adds	r3, #8
 800ee4e:	001a      	movs	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	3308      	adds	r3, #8
 800ee58:	001a      	movs	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2200      	movs	r2, #0
 800ee62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ee64:	46c0      	nop			; (mov r8, r8)
 800ee66:	46bd      	mov	sp, r7
 800ee68:	b002      	add	sp, #8
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ee7a:	46c0      	nop			; (mov r8, r8)
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	b002      	add	sp, #8
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b084      	sub	sp, #16
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	689a      	ldr	r2, [r3, #8]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	683a      	ldr	r2, [r7, #0]
 800eea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	601a      	str	r2, [r3, #0]
}
 800eebe:	46c0      	nop			; (mov r8, r8)
 800eec0:	46bd      	mov	sp, r7
 800eec2:	b004      	add	sp, #16
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b084      	sub	sp, #16
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	3301      	adds	r3, #1
 800eeda:	d103      	bne.n	800eee4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	691b      	ldr	r3, [r3, #16]
 800eee0:	60fb      	str	r3, [r7, #12]
 800eee2:	e00c      	b.n	800eefe <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3308      	adds	r3, #8
 800eee8:	60fb      	str	r3, [r7, #12]
 800eeea:	e002      	b.n	800eef2 <vListInsert+0x2c>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	60fb      	str	r3, [r7, #12]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d2f6      	bcs.n	800eeec <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	685a      	ldr	r2, [r3, #4]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	1c5a      	adds	r2, r3, #1
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	601a      	str	r2, [r3, #0]
}
 800ef2a:	46c0      	nop			; (mov r8, r8)
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	b004      	add	sp, #16
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	6892      	ldr	r2, [r2, #8]
 800ef48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	6852      	ldr	r2, [r2, #4]
 800ef52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d103      	bne.n	800ef66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	689a      	ldr	r2, [r3, #8]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	1e5a      	subs	r2, r3, #1
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
}
 800ef7a:	0018      	movs	r0, r3
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	b004      	add	sp, #16
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ef82:	b580      	push	{r7, lr}
 800ef84:	b084      	sub	sp, #16
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
 800ef8a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d101      	bne.n	800ef9a <xQueueGenericReset+0x18>
 800ef96:	b672      	cpsid	i
 800ef98:	e7fe      	b.n	800ef98 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800ef9a:	f001 fe71 	bl	8010c80 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efaa:	434b      	muls	r3, r1
 800efac:	18d2      	adds	r2, r2, r3
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2200      	movs	r2, #0
 800efb6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efc8:	1e59      	subs	r1, r3, #1
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efce:	434b      	muls	r3, r1
 800efd0:	18d2      	adds	r2, r2, r3
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2244      	movs	r2, #68	; 0x44
 800efda:	21ff      	movs	r1, #255	; 0xff
 800efdc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2245      	movs	r2, #69	; 0x45
 800efe2:	21ff      	movs	r1, #255	; 0xff
 800efe4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d10d      	bne.n	800f008 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	691b      	ldr	r3, [r3, #16]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d013      	beq.n	800f01c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3310      	adds	r3, #16
 800eff8:	0018      	movs	r0, r3
 800effa:	f001 f831 	bl	8010060 <xTaskRemoveFromEventList>
 800effe:	1e03      	subs	r3, r0, #0
 800f000:	d00c      	beq.n	800f01c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f002:	f001 fe2d 	bl	8010c60 <vPortYield>
 800f006:	e009      	b.n	800f01c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	3310      	adds	r3, #16
 800f00c:	0018      	movs	r0, r3
 800f00e:	f7ff ff0f 	bl	800ee30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	3324      	adds	r3, #36	; 0x24
 800f016:	0018      	movs	r0, r3
 800f018:	f7ff ff0a 	bl	800ee30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f01c:	f001 fe42 	bl	8010ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f020:	2301      	movs	r3, #1
}
 800f022:	0018      	movs	r0, r3
 800f024:	46bd      	mov	sp, r7
 800f026:	b004      	add	sp, #16
 800f028:	bd80      	pop	{r7, pc}

0800f02a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f02a:	b590      	push	{r4, r7, lr}
 800f02c:	b089      	sub	sp, #36	; 0x24
 800f02e:	af02      	add	r7, sp, #8
 800f030:	60f8      	str	r0, [r7, #12]
 800f032:	60b9      	str	r1, [r7, #8]
 800f034:	607a      	str	r2, [r7, #4]
 800f036:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d101      	bne.n	800f042 <xQueueGenericCreateStatic+0x18>
 800f03e:	b672      	cpsid	i
 800f040:	e7fe      	b.n	800f040 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d101      	bne.n	800f04c <xQueueGenericCreateStatic+0x22>
 800f048:	b672      	cpsid	i
 800f04a:	e7fe      	b.n	800f04a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d002      	beq.n	800f058 <xQueueGenericCreateStatic+0x2e>
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <xQueueGenericCreateStatic+0x32>
 800f058:	2301      	movs	r3, #1
 800f05a:	e000      	b.n	800f05e <xQueueGenericCreateStatic+0x34>
 800f05c:	2300      	movs	r3, #0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d101      	bne.n	800f066 <xQueueGenericCreateStatic+0x3c>
 800f062:	b672      	cpsid	i
 800f064:	e7fe      	b.n	800f064 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d102      	bne.n	800f072 <xQueueGenericCreateStatic+0x48>
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <xQueueGenericCreateStatic+0x4c>
 800f072:	2301      	movs	r3, #1
 800f074:	e000      	b.n	800f078 <xQueueGenericCreateStatic+0x4e>
 800f076:	2300      	movs	r3, #0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d101      	bne.n	800f080 <xQueueGenericCreateStatic+0x56>
 800f07c:	b672      	cpsid	i
 800f07e:	e7fe      	b.n	800f07e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f080:	2350      	movs	r3, #80	; 0x50
 800f082:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	2b50      	cmp	r3, #80	; 0x50
 800f088:	d001      	beq.n	800f08e <xQueueGenericCreateStatic+0x64>
 800f08a:	b672      	cpsid	i
 800f08c:	e7fe      	b.n	800f08c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f08e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00e      	beq.n	800f0b8 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	2246      	movs	r2, #70	; 0x46
 800f09e:	2101      	movs	r1, #1
 800f0a0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f0a2:	2328      	movs	r3, #40	; 0x28
 800f0a4:	18fb      	adds	r3, r7, r3
 800f0a6:	781c      	ldrb	r4, [r3, #0]
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	68b9      	ldr	r1, [r7, #8]
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	0023      	movs	r3, r4
 800f0b4:	f000 f837 	bl	800f126 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f0b8:	697b      	ldr	r3, [r7, #20]
	}
 800f0ba:	0018      	movs	r0, r3
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	b007      	add	sp, #28
 800f0c0:	bd90      	pop	{r4, r7, pc}

0800f0c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f0c2:	b590      	push	{r4, r7, lr}
 800f0c4:	b08b      	sub	sp, #44	; 0x2c
 800f0c6:	af02      	add	r7, sp, #8
 800f0c8:	60f8      	str	r0, [r7, #12]
 800f0ca:	60b9      	str	r1, [r7, #8]
 800f0cc:	1dfb      	adds	r3, r7, #7
 800f0ce:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d101      	bne.n	800f0da <xQueueGenericCreate+0x18>
 800f0d6:	b672      	cpsid	i
 800f0d8:	e7fe      	b.n	800f0d8 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	4353      	muls	r3, r2
 800f0e0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	3350      	adds	r3, #80	; 0x50
 800f0e6:	0018      	movs	r0, r3
 800f0e8:	f001 fe62 	bl	8010db0 <pvPortMalloc>
 800f0ec:	0003      	movs	r3, r0
 800f0ee:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d012      	beq.n	800f11c <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	3350      	adds	r3, #80	; 0x50
 800f0fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	2246      	movs	r2, #70	; 0x46
 800f104:	2100      	movs	r1, #0
 800f106:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f108:	1dfb      	adds	r3, r7, #7
 800f10a:	781c      	ldrb	r4, [r3, #0]
 800f10c:	697a      	ldr	r2, [r7, #20]
 800f10e:	68b9      	ldr	r1, [r7, #8]
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	0023      	movs	r3, r4
 800f118:	f000 f805 	bl	800f126 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f11c:	69bb      	ldr	r3, [r7, #24]
	}
 800f11e:	0018      	movs	r0, r3
 800f120:	46bd      	mov	sp, r7
 800f122:	b009      	add	sp, #36	; 0x24
 800f124:	bd90      	pop	{r4, r7, pc}

0800f126 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f126:	b580      	push	{r7, lr}
 800f128:	b084      	sub	sp, #16
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	60f8      	str	r0, [r7, #12]
 800f12e:	60b9      	str	r1, [r7, #8]
 800f130:	607a      	str	r2, [r7, #4]
 800f132:	001a      	movs	r2, r3
 800f134:	1cfb      	adds	r3, r7, #3
 800f136:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d103      	bne.n	800f146 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	69ba      	ldr	r2, [r7, #24]
 800f142:	601a      	str	r2, [r3, #0]
 800f144:	e002      	b.n	800f14c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	68ba      	ldr	r2, [r7, #8]
 800f156:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	2101      	movs	r1, #1
 800f15c:	0018      	movs	r0, r3
 800f15e:	f7ff ff10 	bl	800ef82 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	1cfa      	adds	r2, r7, #3
 800f166:	214c      	movs	r1, #76	; 0x4c
 800f168:	7812      	ldrb	r2, [r2, #0]
 800f16a:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f16c:	46c0      	nop			; (mov r8, r8)
 800f16e:	46bd      	mov	sp, r7
 800f170:	b004      	add	sp, #16
 800f172:	bd80      	pop	{r7, pc}

0800f174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b08a      	sub	sp, #40	; 0x28
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	607a      	str	r2, [r7, #4]
 800f180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f182:	2300      	movs	r3, #0
 800f184:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f18a:	6a3b      	ldr	r3, [r7, #32]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d101      	bne.n	800f194 <xQueueGenericSend+0x20>
 800f190:	b672      	cpsid	i
 800f192:	e7fe      	b.n	800f192 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d103      	bne.n	800f1a2 <xQueueGenericSend+0x2e>
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <xQueueGenericSend+0x32>
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e000      	b.n	800f1a8 <xQueueGenericSend+0x34>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d101      	bne.n	800f1b0 <xQueueGenericSend+0x3c>
 800f1ac:	b672      	cpsid	i
 800f1ae:	e7fe      	b.n	800f1ae <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d103      	bne.n	800f1be <xQueueGenericSend+0x4a>
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d101      	bne.n	800f1c2 <xQueueGenericSend+0x4e>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e000      	b.n	800f1c4 <xQueueGenericSend+0x50>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <xQueueGenericSend+0x58>
 800f1c8:	b672      	cpsid	i
 800f1ca:	e7fe      	b.n	800f1ca <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1cc:	f001 f8e0 	bl	8010390 <xTaskGetSchedulerState>
 800f1d0:	1e03      	subs	r3, r0, #0
 800f1d2:	d102      	bne.n	800f1da <xQueueGenericSend+0x66>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <xQueueGenericSend+0x6a>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e000      	b.n	800f1e0 <xQueueGenericSend+0x6c>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <xQueueGenericSend+0x74>
 800f1e4:	b672      	cpsid	i
 800f1e6:	e7fe      	b.n	800f1e6 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1e8:	f001 fd4a 	bl	8010c80 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1ec:	6a3b      	ldr	r3, [r7, #32]
 800f1ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1f0:	6a3b      	ldr	r3, [r7, #32]
 800f1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d302      	bcc.n	800f1fe <xQueueGenericSend+0x8a>
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d11e      	bne.n	800f23c <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	68b9      	ldr	r1, [r7, #8]
 800f202:	6a3b      	ldr	r3, [r7, #32]
 800f204:	0018      	movs	r0, r3
 800f206:	f000 f9a2 	bl	800f54e <prvCopyDataToQueue>
 800f20a:	0003      	movs	r3, r0
 800f20c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f212:	2b00      	cmp	r3, #0
 800f214:	d009      	beq.n	800f22a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f216:	6a3b      	ldr	r3, [r7, #32]
 800f218:	3324      	adds	r3, #36	; 0x24
 800f21a:	0018      	movs	r0, r3
 800f21c:	f000 ff20 	bl	8010060 <xTaskRemoveFromEventList>
 800f220:	1e03      	subs	r3, r0, #0
 800f222:	d007      	beq.n	800f234 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f224:	f001 fd1c 	bl	8010c60 <vPortYield>
 800f228:	e004      	b.n	800f234 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f230:	f001 fd16 	bl	8010c60 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f234:	f001 fd36 	bl	8010ca4 <vPortExitCritical>
				return pdPASS;
 800f238:	2301      	movs	r3, #1
 800f23a:	e05b      	b.n	800f2f4 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d103      	bne.n	800f24a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f242:	f001 fd2f 	bl	8010ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f246:	2300      	movs	r3, #0
 800f248:	e054      	b.n	800f2f4 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d106      	bne.n	800f25e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f250:	2314      	movs	r3, #20
 800f252:	18fb      	adds	r3, r7, r3
 800f254:	0018      	movs	r0, r3
 800f256:	f000 ff5f 	bl	8010118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f25a:	2301      	movs	r3, #1
 800f25c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f25e:	f001 fd21 	bl	8010ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f262:	f000 fd09 	bl	800fc78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f266:	f001 fd0b 	bl	8010c80 <vPortEnterCritical>
 800f26a:	6a3b      	ldr	r3, [r7, #32]
 800f26c:	2244      	movs	r2, #68	; 0x44
 800f26e:	5c9b      	ldrb	r3, [r3, r2]
 800f270:	b25b      	sxtb	r3, r3
 800f272:	3301      	adds	r3, #1
 800f274:	d103      	bne.n	800f27e <xQueueGenericSend+0x10a>
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	2244      	movs	r2, #68	; 0x44
 800f27a:	2100      	movs	r1, #0
 800f27c:	5499      	strb	r1, [r3, r2]
 800f27e:	6a3b      	ldr	r3, [r7, #32]
 800f280:	2245      	movs	r2, #69	; 0x45
 800f282:	5c9b      	ldrb	r3, [r3, r2]
 800f284:	b25b      	sxtb	r3, r3
 800f286:	3301      	adds	r3, #1
 800f288:	d103      	bne.n	800f292 <xQueueGenericSend+0x11e>
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	2245      	movs	r2, #69	; 0x45
 800f28e:	2100      	movs	r1, #0
 800f290:	5499      	strb	r1, [r3, r2]
 800f292:	f001 fd07 	bl	8010ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f296:	1d3a      	adds	r2, r7, #4
 800f298:	2314      	movs	r3, #20
 800f29a:	18fb      	adds	r3, r7, r3
 800f29c:	0011      	movs	r1, r2
 800f29e:	0018      	movs	r0, r3
 800f2a0:	f000 ff4e 	bl	8010140 <xTaskCheckForTimeOut>
 800f2a4:	1e03      	subs	r3, r0, #0
 800f2a6:	d11e      	bne.n	800f2e6 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f2a8:	6a3b      	ldr	r3, [r7, #32]
 800f2aa:	0018      	movs	r0, r3
 800f2ac:	f000 fa54 	bl	800f758 <prvIsQueueFull>
 800f2b0:	1e03      	subs	r3, r0, #0
 800f2b2:	d011      	beq.n	800f2d8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	3310      	adds	r3, #16
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	0011      	movs	r1, r2
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f000 fe8b 	bl	800ffd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f2c2:	6a3b      	ldr	r3, [r7, #32]
 800f2c4:	0018      	movs	r0, r3
 800f2c6:	f000 f9d3 	bl	800f670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f2ca:	f000 fce1 	bl	800fc90 <xTaskResumeAll>
 800f2ce:	1e03      	subs	r3, r0, #0
 800f2d0:	d18a      	bne.n	800f1e8 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800f2d2:	f001 fcc5 	bl	8010c60 <vPortYield>
 800f2d6:	e787      	b.n	800f1e8 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f2d8:	6a3b      	ldr	r3, [r7, #32]
 800f2da:	0018      	movs	r0, r3
 800f2dc:	f000 f9c8 	bl	800f670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2e0:	f000 fcd6 	bl	800fc90 <xTaskResumeAll>
 800f2e4:	e780      	b.n	800f1e8 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f2e6:	6a3b      	ldr	r3, [r7, #32]
 800f2e8:	0018      	movs	r0, r3
 800f2ea:	f000 f9c1 	bl	800f670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2ee:	f000 fccf 	bl	800fc90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f2f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f2f4:	0018      	movs	r0, r3
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	b00a      	add	sp, #40	; 0x28
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f2fc:	b590      	push	{r4, r7, lr}
 800f2fe:	b08b      	sub	sp, #44	; 0x2c
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f30e:	6a3b      	ldr	r3, [r7, #32]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <xQueueGenericSendFromISR+0x1c>
 800f314:	b672      	cpsid	i
 800f316:	e7fe      	b.n	800f316 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d103      	bne.n	800f326 <xQueueGenericSendFromISR+0x2a>
 800f31e:	6a3b      	ldr	r3, [r7, #32]
 800f320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f322:	2b00      	cmp	r3, #0
 800f324:	d101      	bne.n	800f32a <xQueueGenericSendFromISR+0x2e>
 800f326:	2301      	movs	r3, #1
 800f328:	e000      	b.n	800f32c <xQueueGenericSendFromISR+0x30>
 800f32a:	2300      	movs	r3, #0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d101      	bne.n	800f334 <xQueueGenericSendFromISR+0x38>
 800f330:	b672      	cpsid	i
 800f332:	e7fe      	b.n	800f332 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	2b02      	cmp	r3, #2
 800f338:	d103      	bne.n	800f342 <xQueueGenericSendFromISR+0x46>
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d101      	bne.n	800f346 <xQueueGenericSendFromISR+0x4a>
 800f342:	2301      	movs	r3, #1
 800f344:	e000      	b.n	800f348 <xQueueGenericSendFromISR+0x4c>
 800f346:	2300      	movs	r3, #0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d101      	bne.n	800f350 <xQueueGenericSendFromISR+0x54>
 800f34c:	b672      	cpsid	i
 800f34e:	e7fe      	b.n	800f34e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f350:	f001 fcc0 	bl	8010cd4 <ulSetInterruptMaskFromISR>
 800f354:	0003      	movs	r3, r0
 800f356:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f358:	6a3b      	ldr	r3, [r7, #32]
 800f35a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f360:	429a      	cmp	r2, r3
 800f362:	d302      	bcc.n	800f36a <xQueueGenericSendFromISR+0x6e>
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	2b02      	cmp	r3, #2
 800f368:	d131      	bne.n	800f3ce <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f36a:	241b      	movs	r4, #27
 800f36c:	193b      	adds	r3, r7, r4
 800f36e:	6a3a      	ldr	r2, [r7, #32]
 800f370:	2145      	movs	r1, #69	; 0x45
 800f372:	5c52      	ldrb	r2, [r2, r1]
 800f374:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f37a:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f37c:	683a      	ldr	r2, [r7, #0]
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	6a3b      	ldr	r3, [r7, #32]
 800f382:	0018      	movs	r0, r3
 800f384:	f000 f8e3 	bl	800f54e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f388:	193b      	adds	r3, r7, r4
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	b25b      	sxtb	r3, r3
 800f38e:	3301      	adds	r3, #1
 800f390:	d111      	bne.n	800f3b6 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f392:	6a3b      	ldr	r3, [r7, #32]
 800f394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	d016      	beq.n	800f3c8 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	3324      	adds	r3, #36	; 0x24
 800f39e:	0018      	movs	r0, r3
 800f3a0:	f000 fe5e 	bl	8010060 <xTaskRemoveFromEventList>
 800f3a4:	1e03      	subs	r3, r0, #0
 800f3a6:	d00f      	beq.n	800f3c8 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00c      	beq.n	800f3c8 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	601a      	str	r2, [r3, #0]
 800f3b4:	e008      	b.n	800f3c8 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f3b6:	231b      	movs	r3, #27
 800f3b8:	18fb      	adds	r3, r7, r3
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	3301      	adds	r3, #1
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	b259      	sxtb	r1, r3
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	2245      	movs	r2, #69	; 0x45
 800f3c6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800f3cc:	e001      	b.n	800f3d2 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	0018      	movs	r0, r3
 800f3d6:	f001 fc83 	bl	8010ce0 <vClearInterruptMaskFromISR>

	return xReturn;
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3dc:	0018      	movs	r0, r3
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	b00b      	add	sp, #44	; 0x2c
 800f3e2:	bd90      	pop	{r4, r7, pc}

0800f3e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b08a      	sub	sp, #40	; 0x28
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f3f8:	6a3b      	ldr	r3, [r7, #32]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d101      	bne.n	800f402 <xQueueReceive+0x1e>
 800f3fe:	b672      	cpsid	i
 800f400:	e7fe      	b.n	800f400 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d103      	bne.n	800f410 <xQueueReceive+0x2c>
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d101      	bne.n	800f414 <xQueueReceive+0x30>
 800f410:	2301      	movs	r3, #1
 800f412:	e000      	b.n	800f416 <xQueueReceive+0x32>
 800f414:	2300      	movs	r3, #0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <xQueueReceive+0x3a>
 800f41a:	b672      	cpsid	i
 800f41c:	e7fe      	b.n	800f41c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f41e:	f000 ffb7 	bl	8010390 <xTaskGetSchedulerState>
 800f422:	1e03      	subs	r3, r0, #0
 800f424:	d102      	bne.n	800f42c <xQueueReceive+0x48>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d101      	bne.n	800f430 <xQueueReceive+0x4c>
 800f42c:	2301      	movs	r3, #1
 800f42e:	e000      	b.n	800f432 <xQueueReceive+0x4e>
 800f430:	2300      	movs	r3, #0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d101      	bne.n	800f43a <xQueueReceive+0x56>
 800f436:	b672      	cpsid	i
 800f438:	e7fe      	b.n	800f438 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f43a:	f001 fc21 	bl	8010c80 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f442:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d01a      	beq.n	800f480 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f44a:	68ba      	ldr	r2, [r7, #8]
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	0011      	movs	r1, r2
 800f450:	0018      	movs	r0, r3
 800f452:	f000 f8e7 	bl	800f624 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	1e5a      	subs	r2, r3, #1
 800f45a:	6a3b      	ldr	r3, [r7, #32]
 800f45c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f45e:	6a3b      	ldr	r3, [r7, #32]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d008      	beq.n	800f478 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	3310      	adds	r3, #16
 800f46a:	0018      	movs	r0, r3
 800f46c:	f000 fdf8 	bl	8010060 <xTaskRemoveFromEventList>
 800f470:	1e03      	subs	r3, r0, #0
 800f472:	d001      	beq.n	800f478 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f474:	f001 fbf4 	bl	8010c60 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f478:	f001 fc14 	bl	8010ca4 <vPortExitCritical>
				return pdPASS;
 800f47c:	2301      	movs	r3, #1
 800f47e:	e062      	b.n	800f546 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d103      	bne.n	800f48e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f486:	f001 fc0d 	bl	8010ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f48a:	2300      	movs	r3, #0
 800f48c:	e05b      	b.n	800f546 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	2b00      	cmp	r3, #0
 800f492:	d106      	bne.n	800f4a2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f494:	2314      	movs	r3, #20
 800f496:	18fb      	adds	r3, r7, r3
 800f498:	0018      	movs	r0, r3
 800f49a:	f000 fe3d 	bl	8010118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f49e:	2301      	movs	r3, #1
 800f4a0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4a2:	f001 fbff 	bl	8010ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4a6:	f000 fbe7 	bl	800fc78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4aa:	f001 fbe9 	bl	8010c80 <vPortEnterCritical>
 800f4ae:	6a3b      	ldr	r3, [r7, #32]
 800f4b0:	2244      	movs	r2, #68	; 0x44
 800f4b2:	5c9b      	ldrb	r3, [r3, r2]
 800f4b4:	b25b      	sxtb	r3, r3
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	d103      	bne.n	800f4c2 <xQueueReceive+0xde>
 800f4ba:	6a3b      	ldr	r3, [r7, #32]
 800f4bc:	2244      	movs	r2, #68	; 0x44
 800f4be:	2100      	movs	r1, #0
 800f4c0:	5499      	strb	r1, [r3, r2]
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	2245      	movs	r2, #69	; 0x45
 800f4c6:	5c9b      	ldrb	r3, [r3, r2]
 800f4c8:	b25b      	sxtb	r3, r3
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	d103      	bne.n	800f4d6 <xQueueReceive+0xf2>
 800f4ce:	6a3b      	ldr	r3, [r7, #32]
 800f4d0:	2245      	movs	r2, #69	; 0x45
 800f4d2:	2100      	movs	r1, #0
 800f4d4:	5499      	strb	r1, [r3, r2]
 800f4d6:	f001 fbe5 	bl	8010ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4da:	1d3a      	adds	r2, r7, #4
 800f4dc:	2314      	movs	r3, #20
 800f4de:	18fb      	adds	r3, r7, r3
 800f4e0:	0011      	movs	r1, r2
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	f000 fe2c 	bl	8010140 <xTaskCheckForTimeOut>
 800f4e8:	1e03      	subs	r3, r0, #0
 800f4ea:	d11e      	bne.n	800f52a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4ec:	6a3b      	ldr	r3, [r7, #32]
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	f000 f91c 	bl	800f72c <prvIsQueueEmpty>
 800f4f4:	1e03      	subs	r3, r0, #0
 800f4f6:	d011      	beq.n	800f51c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	3324      	adds	r3, #36	; 0x24
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	0011      	movs	r1, r2
 800f500:	0018      	movs	r0, r3
 800f502:	f000 fd69 	bl	800ffd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f506:	6a3b      	ldr	r3, [r7, #32]
 800f508:	0018      	movs	r0, r3
 800f50a:	f000 f8b1 	bl	800f670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f50e:	f000 fbbf 	bl	800fc90 <xTaskResumeAll>
 800f512:	1e03      	subs	r3, r0, #0
 800f514:	d191      	bne.n	800f43a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800f516:	f001 fba3 	bl	8010c60 <vPortYield>
 800f51a:	e78e      	b.n	800f43a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f51c:	6a3b      	ldr	r3, [r7, #32]
 800f51e:	0018      	movs	r0, r3
 800f520:	f000 f8a6 	bl	800f670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f524:	f000 fbb4 	bl	800fc90 <xTaskResumeAll>
 800f528:	e787      	b.n	800f43a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f52a:	6a3b      	ldr	r3, [r7, #32]
 800f52c:	0018      	movs	r0, r3
 800f52e:	f000 f89f 	bl	800f670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f532:	f000 fbad 	bl	800fc90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	0018      	movs	r0, r3
 800f53a:	f000 f8f7 	bl	800f72c <prvIsQueueEmpty>
 800f53e:	1e03      	subs	r3, r0, #0
 800f540:	d100      	bne.n	800f544 <xQueueReceive+0x160>
 800f542:	e77a      	b.n	800f43a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f544:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f546:	0018      	movs	r0, r3
 800f548:	46bd      	mov	sp, r7
 800f54a:	b00a      	add	sp, #40	; 0x28
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b086      	sub	sp, #24
 800f552:	af00      	add	r7, sp, #0
 800f554:	60f8      	str	r0, [r7, #12]
 800f556:	60b9      	str	r1, [r7, #8]
 800f558:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f55a:	2300      	movs	r3, #0
 800f55c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f562:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10e      	bne.n	800f58a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d14e      	bne.n	800f612 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	0018      	movs	r0, r3
 800f57a:	f000 ff25 	bl	80103c8 <xTaskPriorityDisinherit>
 800f57e:	0003      	movs	r3, r0
 800f580:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	609a      	str	r2, [r3, #8]
 800f588:	e043      	b.n	800f612 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d119      	bne.n	800f5c4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6858      	ldr	r0, [r3, #4]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	0019      	movs	r1, r3
 800f59c:	f003 fefe 	bl	801339c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	685a      	ldr	r2, [r3, #4]
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a8:	18d2      	adds	r2, r2, r3
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	689b      	ldr	r3, [r3, #8]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d32b      	bcc.n	800f612 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	605a      	str	r2, [r3, #4]
 800f5c2:	e026      	b.n	800f612 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	68d8      	ldr	r0, [r3, #12]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	0019      	movs	r1, r3
 800f5d0:	f003 fee4 	bl	801339c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	68da      	ldr	r2, [r3, #12]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5dc:	425b      	negs	r3, r3
 800f5de:	18d2      	adds	r2, r2, r3
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	68da      	ldr	r2, [r3, #12]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d207      	bcs.n	800f600 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	689a      	ldr	r2, [r3, #8]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f8:	425b      	negs	r3, r3
 800f5fa:	18d2      	adds	r2, r2, r3
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2b02      	cmp	r3, #2
 800f604:	d105      	bne.n	800f612 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d002      	beq.n	800f612 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	3b01      	subs	r3, #1
 800f610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	1c5a      	adds	r2, r3, #1
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f61a:	697b      	ldr	r3, [r7, #20]
}
 800f61c:	0018      	movs	r0, r3
 800f61e:	46bd      	mov	sp, r7
 800f620:	b006      	add	sp, #24
 800f622:	bd80      	pop	{r7, pc}

0800f624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f632:	2b00      	cmp	r3, #0
 800f634:	d018      	beq.n	800f668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	68da      	ldr	r2, [r3, #12]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f63e:	18d2      	adds	r2, r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	68da      	ldr	r2, [r3, #12]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d303      	bcc.n	800f658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	68d9      	ldr	r1, [r3, #12]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	0018      	movs	r0, r3
 800f664:	f003 fe9a 	bl	801339c <memcpy>
	}
}
 800f668:	46c0      	nop			; (mov r8, r8)
 800f66a:	46bd      	mov	sp, r7
 800f66c:	b002      	add	sp, #8
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f678:	f001 fb02 	bl	8010c80 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f67c:	230f      	movs	r3, #15
 800f67e:	18fb      	adds	r3, r7, r3
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	2145      	movs	r1, #69	; 0x45
 800f684:	5c52      	ldrb	r2, [r2, r1]
 800f686:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f688:	e013      	b.n	800f6b2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d016      	beq.n	800f6c0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	3324      	adds	r3, #36	; 0x24
 800f696:	0018      	movs	r0, r3
 800f698:	f000 fce2 	bl	8010060 <xTaskRemoveFromEventList>
 800f69c:	1e03      	subs	r3, r0, #0
 800f69e:	d001      	beq.n	800f6a4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f6a0:	f000 fd9e 	bl	80101e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f6a4:	210f      	movs	r1, #15
 800f6a6:	187b      	adds	r3, r7, r1
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	b2da      	uxtb	r2, r3
 800f6ae:	187b      	adds	r3, r7, r1
 800f6b0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6b2:	230f      	movs	r3, #15
 800f6b4:	18fb      	adds	r3, r7, r3
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	b25b      	sxtb	r3, r3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	dce5      	bgt.n	800f68a <prvUnlockQueue+0x1a>
 800f6be:	e000      	b.n	800f6c2 <prvUnlockQueue+0x52>
					break;
 800f6c0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2245      	movs	r2, #69	; 0x45
 800f6c6:	21ff      	movs	r1, #255	; 0xff
 800f6c8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800f6ca:	f001 faeb 	bl	8010ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f6ce:	f001 fad7 	bl	8010c80 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f6d2:	230e      	movs	r3, #14
 800f6d4:	18fb      	adds	r3, r7, r3
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	2144      	movs	r1, #68	; 0x44
 800f6da:	5c52      	ldrb	r2, [r2, r1]
 800f6dc:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6de:	e013      	b.n	800f708 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	691b      	ldr	r3, [r3, #16]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d016      	beq.n	800f716 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3310      	adds	r3, #16
 800f6ec:	0018      	movs	r0, r3
 800f6ee:	f000 fcb7 	bl	8010060 <xTaskRemoveFromEventList>
 800f6f2:	1e03      	subs	r3, r0, #0
 800f6f4:	d001      	beq.n	800f6fa <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800f6f6:	f000 fd73 	bl	80101e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f6fa:	210e      	movs	r1, #14
 800f6fc:	187b      	adds	r3, r7, r1
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	3b01      	subs	r3, #1
 800f702:	b2da      	uxtb	r2, r3
 800f704:	187b      	adds	r3, r7, r1
 800f706:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f708:	230e      	movs	r3, #14
 800f70a:	18fb      	adds	r3, r7, r3
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	b25b      	sxtb	r3, r3
 800f710:	2b00      	cmp	r3, #0
 800f712:	dce5      	bgt.n	800f6e0 <prvUnlockQueue+0x70>
 800f714:	e000      	b.n	800f718 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800f716:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2244      	movs	r2, #68	; 0x44
 800f71c:	21ff      	movs	r1, #255	; 0xff
 800f71e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800f720:	f001 fac0 	bl	8010ca4 <vPortExitCritical>
}
 800f724:	46c0      	nop			; (mov r8, r8)
 800f726:	46bd      	mov	sp, r7
 800f728:	b004      	add	sp, #16
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f734:	f001 faa4 	bl	8010c80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d102      	bne.n	800f746 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f740:	2301      	movs	r3, #1
 800f742:	60fb      	str	r3, [r7, #12]
 800f744:	e001      	b.n	800f74a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f746:	2300      	movs	r3, #0
 800f748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f74a:	f001 faab 	bl	8010ca4 <vPortExitCritical>

	return xReturn;
 800f74e:	68fb      	ldr	r3, [r7, #12]
}
 800f750:	0018      	movs	r0, r3
 800f752:	46bd      	mov	sp, r7
 800f754:	b004      	add	sp, #16
 800f756:	bd80      	pop	{r7, pc}

0800f758 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f760:	f001 fa8e 	bl	8010c80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d102      	bne.n	800f776 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f770:	2301      	movs	r3, #1
 800f772:	60fb      	str	r3, [r7, #12]
 800f774:	e001      	b.n	800f77a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f776:	2300      	movs	r3, #0
 800f778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f77a:	f001 fa93 	bl	8010ca4 <vPortExitCritical>

	return xReturn;
 800f77e:	68fb      	ldr	r3, [r7, #12]
}
 800f780:	0018      	movs	r0, r3
 800f782:	46bd      	mov	sp, r7
 800f784:	b004      	add	sp, #16
 800f786:	bd80      	pop	{r7, pc}

0800f788 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f792:	2300      	movs	r3, #0
 800f794:	60fb      	str	r3, [r7, #12]
 800f796:	e015      	b.n	800f7c4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f798:	4b0e      	ldr	r3, [pc, #56]	; (800f7d4 <vQueueAddToRegistry+0x4c>)
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	00d2      	lsls	r2, r2, #3
 800f79e:	58d3      	ldr	r3, [r2, r3]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10c      	bne.n	800f7be <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f7a4:	4b0b      	ldr	r3, [pc, #44]	; (800f7d4 <vQueueAddToRegistry+0x4c>)
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	00d2      	lsls	r2, r2, #3
 800f7aa:	6839      	ldr	r1, [r7, #0]
 800f7ac:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f7ae:	4a09      	ldr	r2, [pc, #36]	; (800f7d4 <vQueueAddToRegistry+0x4c>)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	00db      	lsls	r3, r3, #3
 800f7b4:	18d3      	adds	r3, r2, r3
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f7bc:	e006      	b.n	800f7cc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	60fb      	str	r3, [r7, #12]
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b07      	cmp	r3, #7
 800f7c8:	d9e6      	bls.n	800f798 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f7ca:	46c0      	nop			; (mov r8, r8)
 800f7cc:	46c0      	nop			; (mov r8, r8)
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	b004      	add	sp, #16
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	200046c0 	.word	0x200046c0

0800f7d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f7e8:	f001 fa4a 	bl	8010c80 <vPortEnterCritical>
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	2244      	movs	r2, #68	; 0x44
 800f7f0:	5c9b      	ldrb	r3, [r3, r2]
 800f7f2:	b25b      	sxtb	r3, r3
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	d103      	bne.n	800f800 <vQueueWaitForMessageRestricted+0x28>
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	2244      	movs	r2, #68	; 0x44
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	5499      	strb	r1, [r3, r2]
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	2245      	movs	r2, #69	; 0x45
 800f804:	5c9b      	ldrb	r3, [r3, r2]
 800f806:	b25b      	sxtb	r3, r3
 800f808:	3301      	adds	r3, #1
 800f80a:	d103      	bne.n	800f814 <vQueueWaitForMessageRestricted+0x3c>
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	2245      	movs	r2, #69	; 0x45
 800f810:	2100      	movs	r1, #0
 800f812:	5499      	strb	r1, [r3, r2]
 800f814:	f001 fa46 	bl	8010ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d106      	bne.n	800f82e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	3324      	adds	r3, #36	; 0x24
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	68b9      	ldr	r1, [r7, #8]
 800f828:	0018      	movs	r0, r3
 800f82a:	f000 fbf3 	bl	8010014 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	0018      	movs	r0, r3
 800f832:	f7ff ff1d 	bl	800f670 <prvUnlockQueue>
	}
 800f836:	46c0      	nop			; (mov r8, r8)
 800f838:	46bd      	mov	sp, r7
 800f83a:	b006      	add	sp, #24
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f83e:	b590      	push	{r4, r7, lr}
 800f840:	b08d      	sub	sp, #52	; 0x34
 800f842:	af04      	add	r7, sp, #16
 800f844:	60f8      	str	r0, [r7, #12]
 800f846:	60b9      	str	r1, [r7, #8]
 800f848:	607a      	str	r2, [r7, #4]
 800f84a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d101      	bne.n	800f856 <xTaskCreateStatic+0x18>
 800f852:	b672      	cpsid	i
 800f854:	e7fe      	b.n	800f854 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800f856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d101      	bne.n	800f860 <xTaskCreateStatic+0x22>
 800f85c:	b672      	cpsid	i
 800f85e:	e7fe      	b.n	800f85e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f860:	23a8      	movs	r3, #168	; 0xa8
 800f862:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2ba8      	cmp	r3, #168	; 0xa8
 800f868:	d001      	beq.n	800f86e <xTaskCreateStatic+0x30>
 800f86a:	b672      	cpsid	i
 800f86c:	e7fe      	b.n	800f86c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f86e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f872:	2b00      	cmp	r3, #0
 800f874:	d020      	beq.n	800f8b8 <xTaskCreateStatic+0x7a>
 800f876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d01d      	beq.n	800f8b8 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f884:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	22a5      	movs	r2, #165	; 0xa5
 800f88a:	2102      	movs	r1, #2
 800f88c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f88e:	683c      	ldr	r4, [r7, #0]
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	68b9      	ldr	r1, [r7, #8]
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	2300      	movs	r3, #0
 800f898:	9303      	str	r3, [sp, #12]
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	9302      	str	r3, [sp, #8]
 800f89e:	2318      	movs	r3, #24
 800f8a0:	18fb      	adds	r3, r7, r3
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	0023      	movs	r3, r4
 800f8aa:	f000 f859 	bl	800f960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	0018      	movs	r0, r3
 800f8b2:	f000 f8f5 	bl	800faa0 <prvAddNewTaskToReadyList>
 800f8b6:	e001      	b.n	800f8bc <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f8bc:	69bb      	ldr	r3, [r7, #24]
	}
 800f8be:	0018      	movs	r0, r3
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	b009      	add	sp, #36	; 0x24
 800f8c4:	bd90      	pop	{r4, r7, pc}

0800f8c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f8c6:	b590      	push	{r4, r7, lr}
 800f8c8:	b08d      	sub	sp, #52	; 0x34
 800f8ca:	af04      	add	r7, sp, #16
 800f8cc:	60f8      	str	r0, [r7, #12]
 800f8ce:	60b9      	str	r1, [r7, #8]
 800f8d0:	603b      	str	r3, [r7, #0]
 800f8d2:	1dbb      	adds	r3, r7, #6
 800f8d4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f8d6:	1dbb      	adds	r3, r7, #6
 800f8d8:	881b      	ldrh	r3, [r3, #0]
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	0018      	movs	r0, r3
 800f8de:	f001 fa67 	bl	8010db0 <pvPortMalloc>
 800f8e2:	0003      	movs	r3, r0
 800f8e4:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d010      	beq.n	800f90e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f8ec:	20a8      	movs	r0, #168	; 0xa8
 800f8ee:	f001 fa5f 	bl	8010db0 <pvPortMalloc>
 800f8f2:	0003      	movs	r3, r0
 800f8f4:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d003      	beq.n	800f904 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	697a      	ldr	r2, [r7, #20]
 800f900:	631a      	str	r2, [r3, #48]	; 0x30
 800f902:	e006      	b.n	800f912 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	0018      	movs	r0, r3
 800f908:	f001 fafe 	bl	8010f08 <vPortFree>
 800f90c:	e001      	b.n	800f912 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f90e:	2300      	movs	r3, #0
 800f910:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d01a      	beq.n	800f94e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	22a5      	movs	r2, #165	; 0xa5
 800f91c:	2100      	movs	r1, #0
 800f91e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f920:	1dbb      	adds	r3, r7, #6
 800f922:	881a      	ldrh	r2, [r3, #0]
 800f924:	683c      	ldr	r4, [r7, #0]
 800f926:	68b9      	ldr	r1, [r7, #8]
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	2300      	movs	r3, #0
 800f92c:	9303      	str	r3, [sp, #12]
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	9302      	str	r3, [sp, #8]
 800f932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	0023      	movs	r3, r4
 800f93c:	f000 f810 	bl	800f960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	0018      	movs	r0, r3
 800f944:	f000 f8ac 	bl	800faa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f948:	2301      	movs	r3, #1
 800f94a:	61bb      	str	r3, [r7, #24]
 800f94c:	e002      	b.n	800f954 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f94e:	2301      	movs	r3, #1
 800f950:	425b      	negs	r3, r3
 800f952:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f954:	69bb      	ldr	r3, [r7, #24]
	}
 800f956:	0018      	movs	r0, r3
 800f958:	46bd      	mov	sp, r7
 800f95a:	b009      	add	sp, #36	; 0x24
 800f95c:	bd90      	pop	{r4, r7, pc}
	...

0800f960 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b086      	sub	sp, #24
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
 800f96c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f970:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	001a      	movs	r2, r3
 800f978:	21a5      	movs	r1, #165	; 0xa5
 800f97a:	f003 fb47 	bl	801300c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	4942      	ldr	r1, [pc, #264]	; (800fa90 <prvInitialiseNewTask+0x130>)
 800f986:	468c      	mov	ip, r1
 800f988:	4463      	add	r3, ip
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	18d3      	adds	r3, r2, r3
 800f98e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	2207      	movs	r2, #7
 800f994:	4393      	bics	r3, r2
 800f996:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	2207      	movs	r2, #7
 800f99c:	4013      	ands	r3, r2
 800f99e:	d001      	beq.n	800f9a4 <prvInitialiseNewTask+0x44>
 800f9a0:	b672      	cpsid	i
 800f9a2:	e7fe      	b.n	800f9a2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d020      	beq.n	800f9ec <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	617b      	str	r3, [r7, #20]
 800f9ae:	e013      	b.n	800f9d8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f9b0:	68ba      	ldr	r2, [r7, #8]
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	18d3      	adds	r3, r2, r3
 800f9b6:	7818      	ldrb	r0, [r3, #0]
 800f9b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9ba:	2134      	movs	r1, #52	; 0x34
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	18d3      	adds	r3, r2, r3
 800f9c0:	185b      	adds	r3, r3, r1
 800f9c2:	1c02      	adds	r2, r0, #0
 800f9c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f9c6:	68ba      	ldr	r2, [r7, #8]
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	18d3      	adds	r3, r2, r3
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d006      	beq.n	800f9e0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	617b      	str	r3, [r7, #20]
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	2b0f      	cmp	r3, #15
 800f9dc:	d9e8      	bls.n	800f9b0 <prvInitialiseNewTask+0x50>
 800f9de:	e000      	b.n	800f9e2 <prvInitialiseNewTask+0x82>
			{
				break;
 800f9e0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e4:	2243      	movs	r2, #67	; 0x43
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	5499      	strb	r1, [r3, r2]
 800f9ea:	e003      	b.n	800f9f4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ee:	2234      	movs	r2, #52	; 0x34
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f9f4:	6a3b      	ldr	r3, [r7, #32]
 800f9f6:	2b37      	cmp	r3, #55	; 0x37
 800f9f8:	d901      	bls.n	800f9fe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f9fa:	2337      	movs	r3, #55	; 0x37
 800f9fc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa00:	6a3a      	ldr	r2, [r7, #32]
 800fa02:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa06:	6a3a      	ldr	r2, [r7, #32]
 800fa08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa12:	3304      	adds	r3, #4
 800fa14:	0018      	movs	r0, r3
 800fa16:	f7ff fa29 	bl	800ee6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fa1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa1c:	3318      	adds	r3, #24
 800fa1e:	0018      	movs	r0, r3
 800fa20:	f7ff fa24 	bl	800ee6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa2a:	6a3b      	ldr	r3, [r7, #32]
 800fa2c:	2238      	movs	r2, #56	; 0x38
 800fa2e:	1ad2      	subs	r2, r2, r3
 800fa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa38:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3c:	22a0      	movs	r2, #160	; 0xa0
 800fa3e:	2100      	movs	r1, #0
 800fa40:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa44:	22a4      	movs	r2, #164	; 0xa4
 800fa46:	2100      	movs	r1, #0
 800fa48:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4c:	3354      	adds	r3, #84	; 0x54
 800fa4e:	224c      	movs	r2, #76	; 0x4c
 800fa50:	2100      	movs	r1, #0
 800fa52:	0018      	movs	r0, r3
 800fa54:	f003 fada 	bl	801300c <memset>
 800fa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa5a:	4a0e      	ldr	r2, [pc, #56]	; (800fa94 <prvInitialiseNewTask+0x134>)
 800fa5c:	659a      	str	r2, [r3, #88]	; 0x58
 800fa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa60:	4a0d      	ldr	r2, [pc, #52]	; (800fa98 <prvInitialiseNewTask+0x138>)
 800fa62:	65da      	str	r2, [r3, #92]	; 0x5c
 800fa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa66:	4a0d      	ldr	r2, [pc, #52]	; (800fa9c <prvInitialiseNewTask+0x13c>)
 800fa68:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fa6a:	683a      	ldr	r2, [r7, #0]
 800fa6c:	68f9      	ldr	r1, [r7, #12]
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	0018      	movs	r0, r3
 800fa72:	f001 f86b 	bl	8010b4c <pxPortInitialiseStack>
 800fa76:	0002      	movs	r2, r0
 800fa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa88:	46c0      	nop			; (mov r8, r8)
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	b006      	add	sp, #24
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	3fffffff 	.word	0x3fffffff
 800fa94:	20005954 	.word	0x20005954
 800fa98:	200059bc 	.word	0x200059bc
 800fa9c:	20005a24 	.word	0x20005a24

0800faa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800faa8:	f001 f8ea 	bl	8010c80 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800faac:	4b2a      	ldr	r3, [pc, #168]	; (800fb58 <prvAddNewTaskToReadyList+0xb8>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	4b29      	ldr	r3, [pc, #164]	; (800fb58 <prvAddNewTaskToReadyList+0xb8>)
 800fab4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800fab6:	4b29      	ldr	r3, [pc, #164]	; (800fb5c <prvAddNewTaskToReadyList+0xbc>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d109      	bne.n	800fad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fabe:	4b27      	ldr	r3, [pc, #156]	; (800fb5c <prvAddNewTaskToReadyList+0xbc>)
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fac4:	4b24      	ldr	r3, [pc, #144]	; (800fb58 <prvAddNewTaskToReadyList+0xb8>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d110      	bne.n	800faee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800facc:	f000 fba2 	bl	8010214 <prvInitialiseTaskLists>
 800fad0:	e00d      	b.n	800faee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fad2:	4b23      	ldr	r3, [pc, #140]	; (800fb60 <prvAddNewTaskToReadyList+0xc0>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d109      	bne.n	800faee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fada:	4b20      	ldr	r3, [pc, #128]	; (800fb5c <prvAddNewTaskToReadyList+0xbc>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d802      	bhi.n	800faee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fae8:	4b1c      	ldr	r3, [pc, #112]	; (800fb5c <prvAddNewTaskToReadyList+0xbc>)
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800faee:	4b1d      	ldr	r3, [pc, #116]	; (800fb64 <prvAddNewTaskToReadyList+0xc4>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	1c5a      	adds	r2, r3, #1
 800faf4:	4b1b      	ldr	r3, [pc, #108]	; (800fb64 <prvAddNewTaskToReadyList+0xc4>)
 800faf6:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800faf8:	4b1a      	ldr	r3, [pc, #104]	; (800fb64 <prvAddNewTaskToReadyList+0xc4>)
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb04:	4b18      	ldr	r3, [pc, #96]	; (800fb68 <prvAddNewTaskToReadyList+0xc8>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d903      	bls.n	800fb14 <prvAddNewTaskToReadyList+0x74>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb10:	4b15      	ldr	r3, [pc, #84]	; (800fb68 <prvAddNewTaskToReadyList+0xc8>)
 800fb12:	601a      	str	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb18:	0013      	movs	r3, r2
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	189b      	adds	r3, r3, r2
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	4a12      	ldr	r2, [pc, #72]	; (800fb6c <prvAddNewTaskToReadyList+0xcc>)
 800fb22:	189a      	adds	r2, r3, r2
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	3304      	adds	r3, #4
 800fb28:	0019      	movs	r1, r3
 800fb2a:	0010      	movs	r0, r2
 800fb2c:	f7ff f9a9 	bl	800ee82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb30:	f001 f8b8 	bl	8010ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb34:	4b0a      	ldr	r3, [pc, #40]	; (800fb60 <prvAddNewTaskToReadyList+0xc0>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d008      	beq.n	800fb4e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fb3c:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <prvAddNewTaskToReadyList+0xbc>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d201      	bcs.n	800fb4e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fb4a:	f001 f889 	bl	8010c60 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb4e:	46c0      	nop			; (mov r8, r8)
 800fb50:	46bd      	mov	sp, r7
 800fb52:	b002      	add	sp, #8
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	46c0      	nop			; (mov r8, r8)
 800fb58:	20004bd4 	.word	0x20004bd4
 800fb5c:	20004700 	.word	0x20004700
 800fb60:	20004be0 	.word	0x20004be0
 800fb64:	20004bf0 	.word	0x20004bf0
 800fb68:	20004bdc 	.word	0x20004bdc
 800fb6c:	20004704 	.word	0x20004704

0800fb70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d010      	beq.n	800fba4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fb82:	4b0d      	ldr	r3, [pc, #52]	; (800fbb8 <vTaskDelay+0x48>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d001      	beq.n	800fb8e <vTaskDelay+0x1e>
 800fb8a:	b672      	cpsid	i
 800fb8c:	e7fe      	b.n	800fb8c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800fb8e:	f000 f873 	bl	800fc78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2100      	movs	r1, #0
 800fb96:	0018      	movs	r0, r3
 800fb98:	f000 fc72 	bl	8010480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fb9c:	f000 f878 	bl	800fc90 <xTaskResumeAll>
 800fba0:	0003      	movs	r3, r0
 800fba2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d101      	bne.n	800fbae <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800fbaa:	f001 f859 	bl	8010c60 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fbae:	46c0      	nop			; (mov r8, r8)
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	b004      	add	sp, #16
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	46c0      	nop			; (mov r8, r8)
 800fbb8:	20004bfc 	.word	0x20004bfc

0800fbbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fbbc:	b590      	push	{r4, r7, lr}
 800fbbe:	b089      	sub	sp, #36	; 0x24
 800fbc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fbca:	003a      	movs	r2, r7
 800fbcc:	1d39      	adds	r1, r7, #4
 800fbce:	2308      	movs	r3, #8
 800fbd0:	18fb      	adds	r3, r7, r3
 800fbd2:	0018      	movs	r0, r3
 800fbd4:	f7ff f8fc 	bl	800edd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fbd8:	683c      	ldr	r4, [r7, #0]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	68ba      	ldr	r2, [r7, #8]
 800fbde:	491e      	ldr	r1, [pc, #120]	; (800fc58 <vTaskStartScheduler+0x9c>)
 800fbe0:	481e      	ldr	r0, [pc, #120]	; (800fc5c <vTaskStartScheduler+0xa0>)
 800fbe2:	9202      	str	r2, [sp, #8]
 800fbe4:	9301      	str	r3, [sp, #4]
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	9300      	str	r3, [sp, #0]
 800fbea:	2300      	movs	r3, #0
 800fbec:	0022      	movs	r2, r4
 800fbee:	f7ff fe26 	bl	800f83e <xTaskCreateStatic>
 800fbf2:	0002      	movs	r2, r0
 800fbf4:	4b1a      	ldr	r3, [pc, #104]	; (800fc60 <vTaskStartScheduler+0xa4>)
 800fbf6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fbf8:	4b19      	ldr	r3, [pc, #100]	; (800fc60 <vTaskStartScheduler+0xa4>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fc00:	2301      	movs	r3, #1
 800fc02:	60fb      	str	r3, [r7, #12]
 800fc04:	e001      	b.n	800fc0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fc06:	2300      	movs	r3, #0
 800fc08:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d103      	bne.n	800fc18 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800fc10:	f000 fc8a 	bl	8010528 <xTimerCreateTimerTask>
 800fc14:	0003      	movs	r3, r0
 800fc16:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	d113      	bne.n	800fc46 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800fc1e:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fc20:	4b10      	ldr	r3, [pc, #64]	; (800fc64 <vTaskStartScheduler+0xa8>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3354      	adds	r3, #84	; 0x54
 800fc26:	001a      	movs	r2, r3
 800fc28:	4b0f      	ldr	r3, [pc, #60]	; (800fc68 <vTaskStartScheduler+0xac>)
 800fc2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fc2c:	4b0f      	ldr	r3, [pc, #60]	; (800fc6c <vTaskStartScheduler+0xb0>)
 800fc2e:	2201      	movs	r2, #1
 800fc30:	4252      	negs	r2, r2
 800fc32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fc34:	4b0e      	ldr	r3, [pc, #56]	; (800fc70 <vTaskStartScheduler+0xb4>)
 800fc36:	2201      	movs	r2, #1
 800fc38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fc3a:	4b0e      	ldr	r3, [pc, #56]	; (800fc74 <vTaskStartScheduler+0xb8>)
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fc40:	f000 ffea 	bl	8010c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fc44:	e004      	b.n	800fc50 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	3301      	adds	r3, #1
 800fc4a:	d101      	bne.n	800fc50 <vTaskStartScheduler+0x94>
 800fc4c:	b672      	cpsid	i
 800fc4e:	e7fe      	b.n	800fc4e <vTaskStartScheduler+0x92>
}
 800fc50:	46c0      	nop			; (mov r8, r8)
 800fc52:	46bd      	mov	sp, r7
 800fc54:	b005      	add	sp, #20
 800fc56:	bd90      	pop	{r4, r7, pc}
 800fc58:	08018340 	.word	0x08018340
 800fc5c:	080101f5 	.word	0x080101f5
 800fc60:	20004bf8 	.word	0x20004bf8
 800fc64:	20004700 	.word	0x20004700
 800fc68:	200002b4 	.word	0x200002b4
 800fc6c:	20004bf4 	.word	0x20004bf4
 800fc70:	20004be0 	.word	0x20004be0
 800fc74:	20004bd8 	.word	0x20004bd8

0800fc78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fc7c:	4b03      	ldr	r3, [pc, #12]	; (800fc8c <vTaskSuspendAll+0x14>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	1c5a      	adds	r2, r3, #1
 800fc82:	4b02      	ldr	r3, [pc, #8]	; (800fc8c <vTaskSuspendAll+0x14>)
 800fc84:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fc86:	46c0      	nop			; (mov r8, r8)
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	20004bfc 	.word	0x20004bfc

0800fc90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fc96:	2300      	movs	r3, #0
 800fc98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fc9e:	4b3a      	ldr	r3, [pc, #232]	; (800fd88 <xTaskResumeAll+0xf8>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d101      	bne.n	800fcaa <xTaskResumeAll+0x1a>
 800fca6:	b672      	cpsid	i
 800fca8:	e7fe      	b.n	800fca8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fcaa:	f000 ffe9 	bl	8010c80 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fcae:	4b36      	ldr	r3, [pc, #216]	; (800fd88 <xTaskResumeAll+0xf8>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	1e5a      	subs	r2, r3, #1
 800fcb4:	4b34      	ldr	r3, [pc, #208]	; (800fd88 <xTaskResumeAll+0xf8>)
 800fcb6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcb8:	4b33      	ldr	r3, [pc, #204]	; (800fd88 <xTaskResumeAll+0xf8>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d15b      	bne.n	800fd78 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fcc0:	4b32      	ldr	r3, [pc, #200]	; (800fd8c <xTaskResumeAll+0xfc>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d057      	beq.n	800fd78 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fcc8:	e02f      	b.n	800fd2a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcca:	4b31      	ldr	r3, [pc, #196]	; (800fd90 <xTaskResumeAll+0x100>)
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	3318      	adds	r3, #24
 800fcd6:	0018      	movs	r0, r3
 800fcd8:	f7ff f92b 	bl	800ef32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	3304      	adds	r3, #4
 800fce0:	0018      	movs	r0, r3
 800fce2:	f7ff f926 	bl	800ef32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcea:	4b2a      	ldr	r3, [pc, #168]	; (800fd94 <xTaskResumeAll+0x104>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d903      	bls.n	800fcfa <xTaskResumeAll+0x6a>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcf6:	4b27      	ldr	r3, [pc, #156]	; (800fd94 <xTaskResumeAll+0x104>)
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcfe:	0013      	movs	r3, r2
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	189b      	adds	r3, r3, r2
 800fd04:	009b      	lsls	r3, r3, #2
 800fd06:	4a24      	ldr	r2, [pc, #144]	; (800fd98 <xTaskResumeAll+0x108>)
 800fd08:	189a      	adds	r2, r3, r2
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	3304      	adds	r3, #4
 800fd0e:	0019      	movs	r1, r3
 800fd10:	0010      	movs	r0, r2
 800fd12:	f7ff f8b6 	bl	800ee82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd1a:	4b20      	ldr	r3, [pc, #128]	; (800fd9c <xTaskResumeAll+0x10c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d302      	bcc.n	800fd2a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800fd24:	4b1e      	ldr	r3, [pc, #120]	; (800fda0 <xTaskResumeAll+0x110>)
 800fd26:	2201      	movs	r2, #1
 800fd28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd2a:	4b19      	ldr	r3, [pc, #100]	; (800fd90 <xTaskResumeAll+0x100>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1cb      	bne.n	800fcca <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d001      	beq.n	800fd3c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fd38:	f000 fb0c 	bl	8010354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fd3c:	4b19      	ldr	r3, [pc, #100]	; (800fda4 <xTaskResumeAll+0x114>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00f      	beq.n	800fd68 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fd48:	f000 f83c 	bl	800fdc4 <xTaskIncrementTick>
 800fd4c:	1e03      	subs	r3, r0, #0
 800fd4e:	d002      	beq.n	800fd56 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800fd50:	4b13      	ldr	r3, [pc, #76]	; (800fda0 <xTaskResumeAll+0x110>)
 800fd52:	2201      	movs	r2, #1
 800fd54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1f2      	bne.n	800fd48 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800fd62:	4b10      	ldr	r3, [pc, #64]	; (800fda4 <xTaskResumeAll+0x114>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fd68:	4b0d      	ldr	r3, [pc, #52]	; (800fda0 <xTaskResumeAll+0x110>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d003      	beq.n	800fd78 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fd70:	2301      	movs	r3, #1
 800fd72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fd74:	f000 ff74 	bl	8010c60 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd78:	f000 ff94 	bl	8010ca4 <vPortExitCritical>

	return xAlreadyYielded;
 800fd7c:	68bb      	ldr	r3, [r7, #8]
}
 800fd7e:	0018      	movs	r0, r3
 800fd80:	46bd      	mov	sp, r7
 800fd82:	b004      	add	sp, #16
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	46c0      	nop			; (mov r8, r8)
 800fd88:	20004bfc 	.word	0x20004bfc
 800fd8c:	20004bd4 	.word	0x20004bd4
 800fd90:	20004b94 	.word	0x20004b94
 800fd94:	20004bdc 	.word	0x20004bdc
 800fd98:	20004704 	.word	0x20004704
 800fd9c:	20004700 	.word	0x20004700
 800fda0:	20004be8 	.word	0x20004be8
 800fda4:	20004be4 	.word	0x20004be4

0800fda8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fdae:	4b04      	ldr	r3, [pc, #16]	; (800fdc0 <xTaskGetTickCount+0x18>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fdb4:	687b      	ldr	r3, [r7, #4]
}
 800fdb6:	0018      	movs	r0, r3
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	b002      	add	sp, #8
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	46c0      	nop			; (mov r8, r8)
 800fdc0:	20004bd8 	.word	0x20004bd8

0800fdc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdce:	4b4a      	ldr	r3, [pc, #296]	; (800fef8 <xTaskIncrementTick+0x134>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d000      	beq.n	800fdd8 <xTaskIncrementTick+0x14>
 800fdd6:	e084      	b.n	800fee2 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fdd8:	4b48      	ldr	r3, [pc, #288]	; (800fefc <xTaskIncrementTick+0x138>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	3301      	adds	r3, #1
 800fdde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fde0:	4b46      	ldr	r3, [pc, #280]	; (800fefc <xTaskIncrementTick+0x138>)
 800fde2:	693a      	ldr	r2, [r7, #16]
 800fde4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d117      	bne.n	800fe1c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800fdec:	4b44      	ldr	r3, [pc, #272]	; (800ff00 <xTaskIncrementTick+0x13c>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d001      	beq.n	800fdfa <xTaskIncrementTick+0x36>
 800fdf6:	b672      	cpsid	i
 800fdf8:	e7fe      	b.n	800fdf8 <xTaskIncrementTick+0x34>
 800fdfa:	4b41      	ldr	r3, [pc, #260]	; (800ff00 <xTaskIncrementTick+0x13c>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	60fb      	str	r3, [r7, #12]
 800fe00:	4b40      	ldr	r3, [pc, #256]	; (800ff04 <xTaskIncrementTick+0x140>)
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	4b3e      	ldr	r3, [pc, #248]	; (800ff00 <xTaskIncrementTick+0x13c>)
 800fe06:	601a      	str	r2, [r3, #0]
 800fe08:	4b3e      	ldr	r3, [pc, #248]	; (800ff04 <xTaskIncrementTick+0x140>)
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	4b3e      	ldr	r3, [pc, #248]	; (800ff08 <xTaskIncrementTick+0x144>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	1c5a      	adds	r2, r3, #1
 800fe14:	4b3c      	ldr	r3, [pc, #240]	; (800ff08 <xTaskIncrementTick+0x144>)
 800fe16:	601a      	str	r2, [r3, #0]
 800fe18:	f000 fa9c 	bl	8010354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fe1c:	4b3b      	ldr	r3, [pc, #236]	; (800ff0c <xTaskIncrementTick+0x148>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	693a      	ldr	r2, [r7, #16]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d349      	bcc.n	800feba <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe26:	4b36      	ldr	r3, [pc, #216]	; (800ff00 <xTaskIncrementTick+0x13c>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d104      	bne.n	800fe3a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe30:	4b36      	ldr	r3, [pc, #216]	; (800ff0c <xTaskIncrementTick+0x148>)
 800fe32:	2201      	movs	r2, #1
 800fe34:	4252      	negs	r2, r2
 800fe36:	601a      	str	r2, [r3, #0]
					break;
 800fe38:	e03f      	b.n	800feba <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe3a:	4b31      	ldr	r3, [pc, #196]	; (800ff00 <xTaskIncrementTick+0x13c>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fe4a:	693a      	ldr	r2, [r7, #16]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d203      	bcs.n	800fe5a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fe52:	4b2e      	ldr	r3, [pc, #184]	; (800ff0c <xTaskIncrementTick+0x148>)
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fe58:	e02f      	b.n	800feba <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	3304      	adds	r3, #4
 800fe5e:	0018      	movs	r0, r3
 800fe60:	f7ff f867 	bl	800ef32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d004      	beq.n	800fe76 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	3318      	adds	r3, #24
 800fe70:	0018      	movs	r0, r3
 800fe72:	f7ff f85e 	bl	800ef32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe7a:	4b25      	ldr	r3, [pc, #148]	; (800ff10 <xTaskIncrementTick+0x14c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d903      	bls.n	800fe8a <xTaskIncrementTick+0xc6>
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe86:	4b22      	ldr	r3, [pc, #136]	; (800ff10 <xTaskIncrementTick+0x14c>)
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe8e:	0013      	movs	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	189b      	adds	r3, r3, r2
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	4a1f      	ldr	r2, [pc, #124]	; (800ff14 <xTaskIncrementTick+0x150>)
 800fe98:	189a      	adds	r2, r3, r2
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	3304      	adds	r3, #4
 800fe9e:	0019      	movs	r1, r3
 800fea0:	0010      	movs	r0, r2
 800fea2:	f7fe ffee 	bl	800ee82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feaa:	4b1b      	ldr	r3, [pc, #108]	; (800ff18 <xTaskIncrementTick+0x154>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d3b8      	bcc.n	800fe26 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800feb4:	2301      	movs	r3, #1
 800feb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800feb8:	e7b5      	b.n	800fe26 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800feba:	4b17      	ldr	r3, [pc, #92]	; (800ff18 <xTaskIncrementTick+0x154>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec0:	4914      	ldr	r1, [pc, #80]	; (800ff14 <xTaskIncrementTick+0x150>)
 800fec2:	0013      	movs	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	189b      	adds	r3, r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	585b      	ldr	r3, [r3, r1]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d901      	bls.n	800fed4 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800fed0:	2301      	movs	r3, #1
 800fed2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fed4:	4b11      	ldr	r3, [pc, #68]	; (800ff1c <xTaskIncrementTick+0x158>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d007      	beq.n	800feec <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800fedc:	2301      	movs	r3, #1
 800fede:	617b      	str	r3, [r7, #20]
 800fee0:	e004      	b.n	800feec <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fee2:	4b0f      	ldr	r3, [pc, #60]	; (800ff20 <xTaskIncrementTick+0x15c>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	1c5a      	adds	r2, r3, #1
 800fee8:	4b0d      	ldr	r3, [pc, #52]	; (800ff20 <xTaskIncrementTick+0x15c>)
 800feea:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800feec:	697b      	ldr	r3, [r7, #20]
}
 800feee:	0018      	movs	r0, r3
 800fef0:	46bd      	mov	sp, r7
 800fef2:	b006      	add	sp, #24
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	46c0      	nop			; (mov r8, r8)
 800fef8:	20004bfc 	.word	0x20004bfc
 800fefc:	20004bd8 	.word	0x20004bd8
 800ff00:	20004b8c 	.word	0x20004b8c
 800ff04:	20004b90 	.word	0x20004b90
 800ff08:	20004bec 	.word	0x20004bec
 800ff0c:	20004bf4 	.word	0x20004bf4
 800ff10:	20004bdc 	.word	0x20004bdc
 800ff14:	20004704 	.word	0x20004704
 800ff18:	20004700 	.word	0x20004700
 800ff1c:	20004be8 	.word	0x20004be8
 800ff20:	20004be4 	.word	0x20004be4

0800ff24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ff2a:	4b25      	ldr	r3, [pc, #148]	; (800ffc0 <vTaskSwitchContext+0x9c>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d003      	beq.n	800ff3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ff32:	4b24      	ldr	r3, [pc, #144]	; (800ffc4 <vTaskSwitchContext+0xa0>)
 800ff34:	2201      	movs	r2, #1
 800ff36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ff38:	e03d      	b.n	800ffb6 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800ff3a:	4b22      	ldr	r3, [pc, #136]	; (800ffc4 <vTaskSwitchContext+0xa0>)
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff40:	4b21      	ldr	r3, [pc, #132]	; (800ffc8 <vTaskSwitchContext+0xa4>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	607b      	str	r3, [r7, #4]
 800ff46:	e007      	b.n	800ff58 <vTaskSwitchContext+0x34>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d101      	bne.n	800ff52 <vTaskSwitchContext+0x2e>
 800ff4e:	b672      	cpsid	i
 800ff50:	e7fe      	b.n	800ff50 <vTaskSwitchContext+0x2c>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	3b01      	subs	r3, #1
 800ff56:	607b      	str	r3, [r7, #4]
 800ff58:	491c      	ldr	r1, [pc, #112]	; (800ffcc <vTaskSwitchContext+0xa8>)
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	0013      	movs	r3, r2
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	189b      	adds	r3, r3, r2
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	585b      	ldr	r3, [r3, r1]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d0ee      	beq.n	800ff48 <vTaskSwitchContext+0x24>
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	0013      	movs	r3, r2
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	189b      	adds	r3, r3, r2
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	4a15      	ldr	r2, [pc, #84]	; (800ffcc <vTaskSwitchContext+0xa8>)
 800ff76:	189b      	adds	r3, r3, r2
 800ff78:	603b      	str	r3, [r7, #0]
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	685a      	ldr	r2, [r3, #4]
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	605a      	str	r2, [r3, #4]
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	685a      	ldr	r2, [r3, #4]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	3308      	adds	r3, #8
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d104      	bne.n	800ff9a <vTaskSwitchContext+0x76>
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	685a      	ldr	r2, [r3, #4]
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	605a      	str	r2, [r3, #4]
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	68da      	ldr	r2, [r3, #12]
 800ffa0:	4b0b      	ldr	r3, [pc, #44]	; (800ffd0 <vTaskSwitchContext+0xac>)
 800ffa2:	601a      	str	r2, [r3, #0]
 800ffa4:	4b08      	ldr	r3, [pc, #32]	; (800ffc8 <vTaskSwitchContext+0xa4>)
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ffaa:	4b09      	ldr	r3, [pc, #36]	; (800ffd0 <vTaskSwitchContext+0xac>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	3354      	adds	r3, #84	; 0x54
 800ffb0:	001a      	movs	r2, r3
 800ffb2:	4b08      	ldr	r3, [pc, #32]	; (800ffd4 <vTaskSwitchContext+0xb0>)
 800ffb4:	601a      	str	r2, [r3, #0]
}
 800ffb6:	46c0      	nop			; (mov r8, r8)
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	b002      	add	sp, #8
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	46c0      	nop			; (mov r8, r8)
 800ffc0:	20004bfc 	.word	0x20004bfc
 800ffc4:	20004be8 	.word	0x20004be8
 800ffc8:	20004bdc 	.word	0x20004bdc
 800ffcc:	20004704 	.word	0x20004704
 800ffd0:	20004700 	.word	0x20004700
 800ffd4:	200002b4 	.word	0x200002b4

0800ffd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d101      	bne.n	800ffec <vTaskPlaceOnEventList+0x14>
 800ffe8:	b672      	cpsid	i
 800ffea:	e7fe      	b.n	800ffea <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffec:	4b08      	ldr	r3, [pc, #32]	; (8010010 <vTaskPlaceOnEventList+0x38>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	3318      	adds	r3, #24
 800fff2:	001a      	movs	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	0011      	movs	r1, r2
 800fff8:	0018      	movs	r0, r3
 800fffa:	f7fe ff64 	bl	800eec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	2101      	movs	r1, #1
 8010002:	0018      	movs	r0, r3
 8010004:	f000 fa3c 	bl	8010480 <prvAddCurrentTaskToDelayedList>
}
 8010008:	46c0      	nop			; (mov r8, r8)
 801000a:	46bd      	mov	sp, r7
 801000c:	b002      	add	sp, #8
 801000e:	bd80      	pop	{r7, pc}
 8010010:	20004700 	.word	0x20004700

08010014 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <vTaskPlaceOnEventListRestricted+0x16>
 8010026:	b672      	cpsid	i
 8010028:	e7fe      	b.n	8010028 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801002a:	4b0c      	ldr	r3, [pc, #48]	; (801005c <vTaskPlaceOnEventListRestricted+0x48>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	3318      	adds	r3, #24
 8010030:	001a      	movs	r2, r3
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	0011      	movs	r1, r2
 8010036:	0018      	movs	r0, r3
 8010038:	f7fe ff23 	bl	800ee82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d002      	beq.n	8010048 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8010042:	2301      	movs	r3, #1
 8010044:	425b      	negs	r3, r3
 8010046:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	0011      	movs	r1, r2
 801004e:	0018      	movs	r0, r3
 8010050:	f000 fa16 	bl	8010480 <prvAddCurrentTaskToDelayedList>
	}
 8010054:	46c0      	nop			; (mov r8, r8)
 8010056:	46bd      	mov	sp, r7
 8010058:	b004      	add	sp, #16
 801005a:	bd80      	pop	{r7, pc}
 801005c:	20004700 	.word	0x20004700

08010060 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d101      	bne.n	801007a <xTaskRemoveFromEventList+0x1a>
 8010076:	b672      	cpsid	i
 8010078:	e7fe      	b.n	8010078 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	3318      	adds	r3, #24
 801007e:	0018      	movs	r0, r3
 8010080:	f7fe ff57 	bl	800ef32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010084:	4b1e      	ldr	r3, [pc, #120]	; (8010100 <xTaskRemoveFromEventList+0xa0>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d11d      	bne.n	80100c8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	3304      	adds	r3, #4
 8010090:	0018      	movs	r0, r3
 8010092:	f7fe ff4e 	bl	800ef32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009a:	4b1a      	ldr	r3, [pc, #104]	; (8010104 <xTaskRemoveFromEventList+0xa4>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d903      	bls.n	80100aa <xTaskRemoveFromEventList+0x4a>
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a6:	4b17      	ldr	r3, [pc, #92]	; (8010104 <xTaskRemoveFromEventList+0xa4>)
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ae:	0013      	movs	r3, r2
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	189b      	adds	r3, r3, r2
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	4a14      	ldr	r2, [pc, #80]	; (8010108 <xTaskRemoveFromEventList+0xa8>)
 80100b8:	189a      	adds	r2, r3, r2
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	3304      	adds	r3, #4
 80100be:	0019      	movs	r1, r3
 80100c0:	0010      	movs	r0, r2
 80100c2:	f7fe fede 	bl	800ee82 <vListInsertEnd>
 80100c6:	e007      	b.n	80100d8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	3318      	adds	r3, #24
 80100cc:	001a      	movs	r2, r3
 80100ce:	4b0f      	ldr	r3, [pc, #60]	; (801010c <xTaskRemoveFromEventList+0xac>)
 80100d0:	0011      	movs	r1, r2
 80100d2:	0018      	movs	r0, r3
 80100d4:	f7fe fed5 	bl	800ee82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100dc:	4b0c      	ldr	r3, [pc, #48]	; (8010110 <xTaskRemoveFromEventList+0xb0>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d905      	bls.n	80100f2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80100e6:	2301      	movs	r3, #1
 80100e8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80100ea:	4b0a      	ldr	r3, [pc, #40]	; (8010114 <xTaskRemoveFromEventList+0xb4>)
 80100ec:	2201      	movs	r2, #1
 80100ee:	601a      	str	r2, [r3, #0]
 80100f0:	e001      	b.n	80100f6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80100f2:	2300      	movs	r3, #0
 80100f4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80100f6:	68fb      	ldr	r3, [r7, #12]
}
 80100f8:	0018      	movs	r0, r3
 80100fa:	46bd      	mov	sp, r7
 80100fc:	b004      	add	sp, #16
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	20004bfc 	.word	0x20004bfc
 8010104:	20004bdc 	.word	0x20004bdc
 8010108:	20004704 	.word	0x20004704
 801010c:	20004b94 	.word	0x20004b94
 8010110:	20004700 	.word	0x20004700
 8010114:	20004be8 	.word	0x20004be8

08010118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010120:	4b05      	ldr	r3, [pc, #20]	; (8010138 <vTaskInternalSetTimeOutState+0x20>)
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010128:	4b04      	ldr	r3, [pc, #16]	; (801013c <vTaskInternalSetTimeOutState+0x24>)
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	605a      	str	r2, [r3, #4]
}
 8010130:	46c0      	nop			; (mov r8, r8)
 8010132:	46bd      	mov	sp, r7
 8010134:	b002      	add	sp, #8
 8010136:	bd80      	pop	{r7, pc}
 8010138:	20004bec 	.word	0x20004bec
 801013c:	20004bd8 	.word	0x20004bd8

08010140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d101      	bne.n	8010154 <xTaskCheckForTimeOut+0x14>
 8010150:	b672      	cpsid	i
 8010152:	e7fe      	b.n	8010152 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d101      	bne.n	801015e <xTaskCheckForTimeOut+0x1e>
 801015a:	b672      	cpsid	i
 801015c:	e7fe      	b.n	801015c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 801015e:	f000 fd8f 	bl	8010c80 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010162:	4b1d      	ldr	r3, [pc, #116]	; (80101d8 <xTaskCheckForTimeOut+0x98>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	693a      	ldr	r2, [r7, #16]
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	3301      	adds	r3, #1
 8010178:	d102      	bne.n	8010180 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801017a:	2300      	movs	r3, #0
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	e024      	b.n	80101ca <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	4b15      	ldr	r3, [pc, #84]	; (80101dc <xTaskCheckForTimeOut+0x9c>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	429a      	cmp	r2, r3
 801018a:	d007      	beq.n	801019c <xTaskCheckForTimeOut+0x5c>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	693a      	ldr	r2, [r7, #16]
 8010192:	429a      	cmp	r2, r3
 8010194:	d302      	bcc.n	801019c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010196:	2301      	movs	r3, #1
 8010198:	617b      	str	r3, [r7, #20]
 801019a:	e016      	b.n	80101ca <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	68fa      	ldr	r2, [r7, #12]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d20c      	bcs.n	80101c0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	1ad2      	subs	r2, r2, r3
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	0018      	movs	r0, r3
 80101b6:	f7ff ffaf 	bl	8010118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80101ba:	2300      	movs	r3, #0
 80101bc:	617b      	str	r3, [r7, #20]
 80101be:	e004      	b.n	80101ca <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	2200      	movs	r2, #0
 80101c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80101c6:	2301      	movs	r3, #1
 80101c8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80101ca:	f000 fd6b 	bl	8010ca4 <vPortExitCritical>

	return xReturn;
 80101ce:	697b      	ldr	r3, [r7, #20]
}
 80101d0:	0018      	movs	r0, r3
 80101d2:	46bd      	mov	sp, r7
 80101d4:	b006      	add	sp, #24
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	20004bd8 	.word	0x20004bd8
 80101dc:	20004bec 	.word	0x20004bec

080101e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80101e4:	4b02      	ldr	r3, [pc, #8]	; (80101f0 <vTaskMissedYield+0x10>)
 80101e6:	2201      	movs	r2, #1
 80101e8:	601a      	str	r2, [r3, #0]
}
 80101ea:	46c0      	nop			; (mov r8, r8)
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	20004be8 	.word	0x20004be8

080101f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80101fc:	f000 f84e 	bl	801029c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010200:	4b03      	ldr	r3, [pc, #12]	; (8010210 <prvIdleTask+0x1c>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b01      	cmp	r3, #1
 8010206:	d9f9      	bls.n	80101fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8010208:	f000 fd2a 	bl	8010c60 <vPortYield>
		prvCheckTasksWaitingTermination();
 801020c:	e7f6      	b.n	80101fc <prvIdleTask+0x8>
 801020e:	46c0      	nop			; (mov r8, r8)
 8010210:	20004704 	.word	0x20004704

08010214 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801021a:	2300      	movs	r3, #0
 801021c:	607b      	str	r3, [r7, #4]
 801021e:	e00c      	b.n	801023a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	0013      	movs	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	189b      	adds	r3, r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	4a14      	ldr	r2, [pc, #80]	; (801027c <prvInitialiseTaskLists+0x68>)
 801022c:	189b      	adds	r3, r3, r2
 801022e:	0018      	movs	r0, r3
 8010230:	f7fe fdfe 	bl	800ee30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3301      	adds	r3, #1
 8010238:	607b      	str	r3, [r7, #4]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2b37      	cmp	r3, #55	; 0x37
 801023e:	d9ef      	bls.n	8010220 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010240:	4b0f      	ldr	r3, [pc, #60]	; (8010280 <prvInitialiseTaskLists+0x6c>)
 8010242:	0018      	movs	r0, r3
 8010244:	f7fe fdf4 	bl	800ee30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010248:	4b0e      	ldr	r3, [pc, #56]	; (8010284 <prvInitialiseTaskLists+0x70>)
 801024a:	0018      	movs	r0, r3
 801024c:	f7fe fdf0 	bl	800ee30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010250:	4b0d      	ldr	r3, [pc, #52]	; (8010288 <prvInitialiseTaskLists+0x74>)
 8010252:	0018      	movs	r0, r3
 8010254:	f7fe fdec 	bl	800ee30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010258:	4b0c      	ldr	r3, [pc, #48]	; (801028c <prvInitialiseTaskLists+0x78>)
 801025a:	0018      	movs	r0, r3
 801025c:	f7fe fde8 	bl	800ee30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010260:	4b0b      	ldr	r3, [pc, #44]	; (8010290 <prvInitialiseTaskLists+0x7c>)
 8010262:	0018      	movs	r0, r3
 8010264:	f7fe fde4 	bl	800ee30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010268:	4b0a      	ldr	r3, [pc, #40]	; (8010294 <prvInitialiseTaskLists+0x80>)
 801026a:	4a05      	ldr	r2, [pc, #20]	; (8010280 <prvInitialiseTaskLists+0x6c>)
 801026c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801026e:	4b0a      	ldr	r3, [pc, #40]	; (8010298 <prvInitialiseTaskLists+0x84>)
 8010270:	4a04      	ldr	r2, [pc, #16]	; (8010284 <prvInitialiseTaskLists+0x70>)
 8010272:	601a      	str	r2, [r3, #0]
}
 8010274:	46c0      	nop			; (mov r8, r8)
 8010276:	46bd      	mov	sp, r7
 8010278:	b002      	add	sp, #8
 801027a:	bd80      	pop	{r7, pc}
 801027c:	20004704 	.word	0x20004704
 8010280:	20004b64 	.word	0x20004b64
 8010284:	20004b78 	.word	0x20004b78
 8010288:	20004b94 	.word	0x20004b94
 801028c:	20004ba8 	.word	0x20004ba8
 8010290:	20004bc0 	.word	0x20004bc0
 8010294:	20004b8c 	.word	0x20004b8c
 8010298:	20004b90 	.word	0x20004b90

0801029c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102a2:	e01a      	b.n	80102da <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80102a4:	f000 fcec 	bl	8010c80 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102a8:	4b10      	ldr	r3, [pc, #64]	; (80102ec <prvCheckTasksWaitingTermination+0x50>)
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	3304      	adds	r3, #4
 80102b4:	0018      	movs	r0, r3
 80102b6:	f7fe fe3c 	bl	800ef32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80102ba:	4b0d      	ldr	r3, [pc, #52]	; (80102f0 <prvCheckTasksWaitingTermination+0x54>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	1e5a      	subs	r2, r3, #1
 80102c0:	4b0b      	ldr	r3, [pc, #44]	; (80102f0 <prvCheckTasksWaitingTermination+0x54>)
 80102c2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80102c4:	4b0b      	ldr	r3, [pc, #44]	; (80102f4 <prvCheckTasksWaitingTermination+0x58>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	1e5a      	subs	r2, r3, #1
 80102ca:	4b0a      	ldr	r3, [pc, #40]	; (80102f4 <prvCheckTasksWaitingTermination+0x58>)
 80102cc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80102ce:	f000 fce9 	bl	8010ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	0018      	movs	r0, r3
 80102d6:	f000 f80f 	bl	80102f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102da:	4b06      	ldr	r3, [pc, #24]	; (80102f4 <prvCheckTasksWaitingTermination+0x58>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1e0      	bne.n	80102a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80102e2:	46c0      	nop			; (mov r8, r8)
 80102e4:	46c0      	nop			; (mov r8, r8)
 80102e6:	46bd      	mov	sp, r7
 80102e8:	b002      	add	sp, #8
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	20004ba8 	.word	0x20004ba8
 80102f0:	20004bd4 	.word	0x20004bd4
 80102f4:	20004bbc 	.word	0x20004bbc

080102f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	3354      	adds	r3, #84	; 0x54
 8010304:	0018      	movs	r0, r3
 8010306:	f002 ff5d 	bl	80131c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	22a5      	movs	r2, #165	; 0xa5
 801030e:	5c9b      	ldrb	r3, [r3, r2]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d109      	bne.n	8010328 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010318:	0018      	movs	r0, r3
 801031a:	f000 fdf5 	bl	8010f08 <vPortFree>
				vPortFree( pxTCB );
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	0018      	movs	r0, r3
 8010322:	f000 fdf1 	bl	8010f08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010326:	e010      	b.n	801034a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	22a5      	movs	r2, #165	; 0xa5
 801032c:	5c9b      	ldrb	r3, [r3, r2]
 801032e:	2b01      	cmp	r3, #1
 8010330:	d104      	bne.n	801033c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	0018      	movs	r0, r3
 8010336:	f000 fde7 	bl	8010f08 <vPortFree>
	}
 801033a:	e006      	b.n	801034a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	22a5      	movs	r2, #165	; 0xa5
 8010340:	5c9b      	ldrb	r3, [r3, r2]
 8010342:	2b02      	cmp	r3, #2
 8010344:	d001      	beq.n	801034a <prvDeleteTCB+0x52>
 8010346:	b672      	cpsid	i
 8010348:	e7fe      	b.n	8010348 <prvDeleteTCB+0x50>
	}
 801034a:	46c0      	nop			; (mov r8, r8)
 801034c:	46bd      	mov	sp, r7
 801034e:	b002      	add	sp, #8
 8010350:	bd80      	pop	{r7, pc}
	...

08010354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801035a:	4b0b      	ldr	r3, [pc, #44]	; (8010388 <prvResetNextTaskUnblockTime+0x34>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d104      	bne.n	801036e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010364:	4b09      	ldr	r3, [pc, #36]	; (801038c <prvResetNextTaskUnblockTime+0x38>)
 8010366:	2201      	movs	r2, #1
 8010368:	4252      	negs	r2, r2
 801036a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801036c:	e008      	b.n	8010380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801036e:	4b06      	ldr	r3, [pc, #24]	; (8010388 <prvResetNextTaskUnblockTime+0x34>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685a      	ldr	r2, [r3, #4]
 801037c:	4b03      	ldr	r3, [pc, #12]	; (801038c <prvResetNextTaskUnblockTime+0x38>)
 801037e:	601a      	str	r2, [r3, #0]
}
 8010380:	46c0      	nop			; (mov r8, r8)
 8010382:	46bd      	mov	sp, r7
 8010384:	b002      	add	sp, #8
 8010386:	bd80      	pop	{r7, pc}
 8010388:	20004b8c 	.word	0x20004b8c
 801038c:	20004bf4 	.word	0x20004bf4

08010390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010396:	4b0a      	ldr	r3, [pc, #40]	; (80103c0 <xTaskGetSchedulerState+0x30>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d102      	bne.n	80103a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801039e:	2301      	movs	r3, #1
 80103a0:	607b      	str	r3, [r7, #4]
 80103a2:	e008      	b.n	80103b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103a4:	4b07      	ldr	r3, [pc, #28]	; (80103c4 <xTaskGetSchedulerState+0x34>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d102      	bne.n	80103b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80103ac:	2302      	movs	r3, #2
 80103ae:	607b      	str	r3, [r7, #4]
 80103b0:	e001      	b.n	80103b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80103b2:	2300      	movs	r3, #0
 80103b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80103b6:	687b      	ldr	r3, [r7, #4]
	}
 80103b8:	0018      	movs	r0, r3
 80103ba:	46bd      	mov	sp, r7
 80103bc:	b002      	add	sp, #8
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	20004be0 	.word	0x20004be0
 80103c4:	20004bfc 	.word	0x20004bfc

080103c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80103d4:	2300      	movs	r3, #0
 80103d6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d044      	beq.n	8010468 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103de:	4b25      	ldr	r3, [pc, #148]	; (8010474 <xTaskPriorityDisinherit+0xac>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	68ba      	ldr	r2, [r7, #8]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d001      	beq.n	80103ec <xTaskPriorityDisinherit+0x24>
 80103e8:	b672      	cpsid	i
 80103ea:	e7fe      	b.n	80103ea <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d101      	bne.n	80103f8 <xTaskPriorityDisinherit+0x30>
 80103f4:	b672      	cpsid	i
 80103f6:	e7fe      	b.n	80103f6 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103fc:	1e5a      	subs	r2, r3, #1
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801040a:	429a      	cmp	r2, r3
 801040c:	d02c      	beq.n	8010468 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010412:	2b00      	cmp	r3, #0
 8010414:	d128      	bne.n	8010468 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	3304      	adds	r3, #4
 801041a:	0018      	movs	r0, r3
 801041c:	f7fe fd89 	bl	800ef32 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801042c:	2238      	movs	r2, #56	; 0x38
 801042e:	1ad2      	subs	r2, r2, r3
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010438:	4b0f      	ldr	r3, [pc, #60]	; (8010478 <xTaskPriorityDisinherit+0xb0>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	429a      	cmp	r2, r3
 801043e:	d903      	bls.n	8010448 <xTaskPriorityDisinherit+0x80>
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010444:	4b0c      	ldr	r3, [pc, #48]	; (8010478 <xTaskPriorityDisinherit+0xb0>)
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801044c:	0013      	movs	r3, r2
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	189b      	adds	r3, r3, r2
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	4a09      	ldr	r2, [pc, #36]	; (801047c <xTaskPriorityDisinherit+0xb4>)
 8010456:	189a      	adds	r2, r3, r2
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	3304      	adds	r3, #4
 801045c:	0019      	movs	r1, r3
 801045e:	0010      	movs	r0, r2
 8010460:	f7fe fd0f 	bl	800ee82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010464:	2301      	movs	r3, #1
 8010466:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010468:	68fb      	ldr	r3, [r7, #12]
	}
 801046a:	0018      	movs	r0, r3
 801046c:	46bd      	mov	sp, r7
 801046e:	b004      	add	sp, #16
 8010470:	bd80      	pop	{r7, pc}
 8010472:	46c0      	nop			; (mov r8, r8)
 8010474:	20004700 	.word	0x20004700
 8010478:	20004bdc 	.word	0x20004bdc
 801047c:	20004704 	.word	0x20004704

08010480 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801048a:	4b21      	ldr	r3, [pc, #132]	; (8010510 <prvAddCurrentTaskToDelayedList+0x90>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010490:	4b20      	ldr	r3, [pc, #128]	; (8010514 <prvAddCurrentTaskToDelayedList+0x94>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3304      	adds	r3, #4
 8010496:	0018      	movs	r0, r3
 8010498:	f7fe fd4b 	bl	800ef32 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	3301      	adds	r3, #1
 80104a0:	d10b      	bne.n	80104ba <prvAddCurrentTaskToDelayedList+0x3a>
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d008      	beq.n	80104ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104a8:	4b1a      	ldr	r3, [pc, #104]	; (8010514 <prvAddCurrentTaskToDelayedList+0x94>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	1d1a      	adds	r2, r3, #4
 80104ae:	4b1a      	ldr	r3, [pc, #104]	; (8010518 <prvAddCurrentTaskToDelayedList+0x98>)
 80104b0:	0011      	movs	r1, r2
 80104b2:	0018      	movs	r0, r3
 80104b4:	f7fe fce5 	bl	800ee82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80104b8:	e026      	b.n	8010508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80104ba:	68fa      	ldr	r2, [r7, #12]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	18d3      	adds	r3, r2, r3
 80104c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80104c2:	4b14      	ldr	r3, [pc, #80]	; (8010514 <prvAddCurrentTaskToDelayedList+0x94>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	68ba      	ldr	r2, [r7, #8]
 80104c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d209      	bcs.n	80104e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104d2:	4b12      	ldr	r3, [pc, #72]	; (801051c <prvAddCurrentTaskToDelayedList+0x9c>)
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	4b0f      	ldr	r3, [pc, #60]	; (8010514 <prvAddCurrentTaskToDelayedList+0x94>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3304      	adds	r3, #4
 80104dc:	0019      	movs	r1, r3
 80104de:	0010      	movs	r0, r2
 80104e0:	f7fe fcf1 	bl	800eec6 <vListInsert>
}
 80104e4:	e010      	b.n	8010508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104e6:	4b0e      	ldr	r3, [pc, #56]	; (8010520 <prvAddCurrentTaskToDelayedList+0xa0>)
 80104e8:	681a      	ldr	r2, [r3, #0]
 80104ea:	4b0a      	ldr	r3, [pc, #40]	; (8010514 <prvAddCurrentTaskToDelayedList+0x94>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	3304      	adds	r3, #4
 80104f0:	0019      	movs	r1, r3
 80104f2:	0010      	movs	r0, r2
 80104f4:	f7fe fce7 	bl	800eec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80104f8:	4b0a      	ldr	r3, [pc, #40]	; (8010524 <prvAddCurrentTaskToDelayedList+0xa4>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	68ba      	ldr	r2, [r7, #8]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d202      	bcs.n	8010508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010502:	4b08      	ldr	r3, [pc, #32]	; (8010524 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010504:	68ba      	ldr	r2, [r7, #8]
 8010506:	601a      	str	r2, [r3, #0]
}
 8010508:	46c0      	nop			; (mov r8, r8)
 801050a:	46bd      	mov	sp, r7
 801050c:	b004      	add	sp, #16
 801050e:	bd80      	pop	{r7, pc}
 8010510:	20004bd8 	.word	0x20004bd8
 8010514:	20004700 	.word	0x20004700
 8010518:	20004bc0 	.word	0x20004bc0
 801051c:	20004b90 	.word	0x20004b90
 8010520:	20004b8c 	.word	0x20004b8c
 8010524:	20004bf4 	.word	0x20004bf4

08010528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010528:	b590      	push	{r4, r7, lr}
 801052a:	b089      	sub	sp, #36	; 0x24
 801052c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801052e:	2300      	movs	r3, #0
 8010530:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010532:	f000 fac9 	bl	8010ac8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010536:	4b17      	ldr	r3, [pc, #92]	; (8010594 <xTimerCreateTimerTask+0x6c>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d020      	beq.n	8010580 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801053e:	2300      	movs	r3, #0
 8010540:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010542:	2300      	movs	r3, #0
 8010544:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010546:	003a      	movs	r2, r7
 8010548:	1d39      	adds	r1, r7, #4
 801054a:	2308      	movs	r3, #8
 801054c:	18fb      	adds	r3, r7, r3
 801054e:	0018      	movs	r0, r3
 8010550:	f7fe fc56 	bl	800ee00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010554:	683c      	ldr	r4, [r7, #0]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	68ba      	ldr	r2, [r7, #8]
 801055a:	490f      	ldr	r1, [pc, #60]	; (8010598 <xTimerCreateTimerTask+0x70>)
 801055c:	480f      	ldr	r0, [pc, #60]	; (801059c <xTimerCreateTimerTask+0x74>)
 801055e:	9202      	str	r2, [sp, #8]
 8010560:	9301      	str	r3, [sp, #4]
 8010562:	2302      	movs	r3, #2
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	2300      	movs	r3, #0
 8010568:	0022      	movs	r2, r4
 801056a:	f7ff f968 	bl	800f83e <xTaskCreateStatic>
 801056e:	0002      	movs	r2, r0
 8010570:	4b0b      	ldr	r3, [pc, #44]	; (80105a0 <xTimerCreateTimerTask+0x78>)
 8010572:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010574:	4b0a      	ldr	r3, [pc, #40]	; (80105a0 <xTimerCreateTimerTask+0x78>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d001      	beq.n	8010580 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801057c:	2301      	movs	r3, #1
 801057e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <xTimerCreateTimerTask+0x62>
 8010586:	b672      	cpsid	i
 8010588:	e7fe      	b.n	8010588 <xTimerCreateTimerTask+0x60>
	return xReturn;
 801058a:	68fb      	ldr	r3, [r7, #12]
}
 801058c:	0018      	movs	r0, r3
 801058e:	46bd      	mov	sp, r7
 8010590:	b005      	add	sp, #20
 8010592:	bd90      	pop	{r4, r7, pc}
 8010594:	20004c30 	.word	0x20004c30
 8010598:	08018348 	.word	0x08018348
 801059c:	080106c1 	.word	0x080106c1
 80105a0:	20004c34 	.word	0x20004c34

080105a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b08b      	sub	sp, #44	; 0x2c
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	607a      	str	r2, [r7, #4]
 80105b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <xTimerGenericCommand+0x1c>
 80105bc:	b672      	cpsid	i
 80105be:	e7fe      	b.n	80105be <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80105c0:	4b1c      	ldr	r3, [pc, #112]	; (8010634 <xTimerGenericCommand+0x90>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d030      	beq.n	801062a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80105c8:	2414      	movs	r4, #20
 80105ca:	193b      	adds	r3, r7, r4
 80105cc:	68ba      	ldr	r2, [r7, #8]
 80105ce:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80105d0:	193b      	adds	r3, r7, r4
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80105d6:	193b      	adds	r3, r7, r4
 80105d8:	68fa      	ldr	r2, [r7, #12]
 80105da:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	2b05      	cmp	r3, #5
 80105e0:	dc19      	bgt.n	8010616 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80105e2:	f7ff fed5 	bl	8010390 <xTaskGetSchedulerState>
 80105e6:	0003      	movs	r3, r0
 80105e8:	2b02      	cmp	r3, #2
 80105ea:	d109      	bne.n	8010600 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80105ec:	4b11      	ldr	r3, [pc, #68]	; (8010634 <xTimerGenericCommand+0x90>)
 80105ee:	6818      	ldr	r0, [r3, #0]
 80105f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105f2:	1939      	adds	r1, r7, r4
 80105f4:	2300      	movs	r3, #0
 80105f6:	f7fe fdbd 	bl	800f174 <xQueueGenericSend>
 80105fa:	0003      	movs	r3, r0
 80105fc:	627b      	str	r3, [r7, #36]	; 0x24
 80105fe:	e014      	b.n	801062a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010600:	4b0c      	ldr	r3, [pc, #48]	; (8010634 <xTimerGenericCommand+0x90>)
 8010602:	6818      	ldr	r0, [r3, #0]
 8010604:	2314      	movs	r3, #20
 8010606:	18f9      	adds	r1, r7, r3
 8010608:	2300      	movs	r3, #0
 801060a:	2200      	movs	r2, #0
 801060c:	f7fe fdb2 	bl	800f174 <xQueueGenericSend>
 8010610:	0003      	movs	r3, r0
 8010612:	627b      	str	r3, [r7, #36]	; 0x24
 8010614:	e009      	b.n	801062a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010616:	4b07      	ldr	r3, [pc, #28]	; (8010634 <xTimerGenericCommand+0x90>)
 8010618:	6818      	ldr	r0, [r3, #0]
 801061a:	683a      	ldr	r2, [r7, #0]
 801061c:	2314      	movs	r3, #20
 801061e:	18f9      	adds	r1, r7, r3
 8010620:	2300      	movs	r3, #0
 8010622:	f7fe fe6b 	bl	800f2fc <xQueueGenericSendFromISR>
 8010626:	0003      	movs	r3, r0
 8010628:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801062c:	0018      	movs	r0, r3
 801062e:	46bd      	mov	sp, r7
 8010630:	b00b      	add	sp, #44	; 0x2c
 8010632:	bd90      	pop	{r4, r7, pc}
 8010634:	20004c30 	.word	0x20004c30

08010638 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b086      	sub	sp, #24
 801063c:	af02      	add	r7, sp, #8
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010642:	4b1e      	ldr	r3, [pc, #120]	; (80106bc <prvProcessExpiredTimer+0x84>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	3304      	adds	r3, #4
 8010650:	0018      	movs	r0, r3
 8010652:	f7fe fc6e 	bl	800ef32 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2228      	movs	r2, #40	; 0x28
 801065a:	5c9b      	ldrb	r3, [r3, r2]
 801065c:	001a      	movs	r2, r3
 801065e:	2304      	movs	r3, #4
 8010660:	4013      	ands	r3, r2
 8010662:	d019      	beq.n	8010698 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	699a      	ldr	r2, [r3, #24]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	18d1      	adds	r1, r2, r3
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	f000 f8c3 	bl	80107fc <prvInsertTimerInActiveList>
 8010676:	1e03      	subs	r3, r0, #0
 8010678:	d017      	beq.n	80106aa <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	2300      	movs	r3, #0
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	2300      	movs	r3, #0
 8010684:	2100      	movs	r1, #0
 8010686:	f7ff ff8d 	bl	80105a4 <xTimerGenericCommand>
 801068a:	0003      	movs	r3, r0
 801068c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d10a      	bne.n	80106aa <prvProcessExpiredTimer+0x72>
 8010694:	b672      	cpsid	i
 8010696:	e7fe      	b.n	8010696 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2228      	movs	r2, #40	; 0x28
 801069c:	5c9b      	ldrb	r3, [r3, r2]
 801069e:	2201      	movs	r2, #1
 80106a0:	4393      	bics	r3, r2
 80106a2:	b2d9      	uxtb	r1, r3
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2228      	movs	r2, #40	; 0x28
 80106a8:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	68fa      	ldr	r2, [r7, #12]
 80106b0:	0010      	movs	r0, r2
 80106b2:	4798      	blx	r3
}
 80106b4:	46c0      	nop			; (mov r8, r8)
 80106b6:	46bd      	mov	sp, r7
 80106b8:	b004      	add	sp, #16
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	20004c28 	.word	0x20004c28

080106c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106c8:	2308      	movs	r3, #8
 80106ca:	18fb      	adds	r3, r7, r3
 80106cc:	0018      	movs	r0, r3
 80106ce:	f000 f853 	bl	8010778 <prvGetNextExpireTime>
 80106d2:	0003      	movs	r3, r0
 80106d4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80106d6:	68ba      	ldr	r2, [r7, #8]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	0011      	movs	r1, r2
 80106dc:	0018      	movs	r0, r3
 80106de:	f000 f803 	bl	80106e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80106e2:	f000 f8cd 	bl	8010880 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106e6:	e7ef      	b.n	80106c8 <prvTimerTask+0x8>

080106e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80106f2:	f7ff fac1 	bl	800fc78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106f6:	2308      	movs	r3, #8
 80106f8:	18fb      	adds	r3, r7, r3
 80106fa:	0018      	movs	r0, r3
 80106fc:	f000 f85e 	bl	80107bc <prvSampleTimeNow>
 8010700:	0003      	movs	r3, r0
 8010702:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d12b      	bne.n	8010762 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d10c      	bne.n	801072a <prvProcessTimerOrBlockTask+0x42>
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	429a      	cmp	r2, r3
 8010716:	d808      	bhi.n	801072a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8010718:	f7ff faba 	bl	800fc90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801071c:	68fa      	ldr	r2, [r7, #12]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	0011      	movs	r1, r2
 8010722:	0018      	movs	r0, r3
 8010724:	f7ff ff88 	bl	8010638 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010728:	e01d      	b.n	8010766 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d008      	beq.n	8010742 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010730:	4b0f      	ldr	r3, [pc, #60]	; (8010770 <prvProcessTimerOrBlockTask+0x88>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d101      	bne.n	801073e <prvProcessTimerOrBlockTask+0x56>
 801073a:	2301      	movs	r3, #1
 801073c:	e000      	b.n	8010740 <prvProcessTimerOrBlockTask+0x58>
 801073e:	2300      	movs	r3, #0
 8010740:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010742:	4b0c      	ldr	r3, [pc, #48]	; (8010774 <prvProcessTimerOrBlockTask+0x8c>)
 8010744:	6818      	ldr	r0, [r3, #0]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	683a      	ldr	r2, [r7, #0]
 801074e:	0019      	movs	r1, r3
 8010750:	f7ff f842 	bl	800f7d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010754:	f7ff fa9c 	bl	800fc90 <xTaskResumeAll>
 8010758:	1e03      	subs	r3, r0, #0
 801075a:	d104      	bne.n	8010766 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 801075c:	f000 fa80 	bl	8010c60 <vPortYield>
}
 8010760:	e001      	b.n	8010766 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8010762:	f7ff fa95 	bl	800fc90 <xTaskResumeAll>
}
 8010766:	46c0      	nop			; (mov r8, r8)
 8010768:	46bd      	mov	sp, r7
 801076a:	b004      	add	sp, #16
 801076c:	bd80      	pop	{r7, pc}
 801076e:	46c0      	nop			; (mov r8, r8)
 8010770:	20004c2c 	.word	0x20004c2c
 8010774:	20004c30 	.word	0x20004c30

08010778 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010780:	4b0d      	ldr	r3, [pc, #52]	; (80107b8 <prvGetNextExpireTime+0x40>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d101      	bne.n	801078e <prvGetNextExpireTime+0x16>
 801078a:	2201      	movs	r2, #1
 801078c:	e000      	b.n	8010790 <prvGetNextExpireTime+0x18>
 801078e:	2200      	movs	r2, #0
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d105      	bne.n	80107a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801079c:	4b06      	ldr	r3, [pc, #24]	; (80107b8 <prvGetNextExpireTime+0x40>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	60fb      	str	r3, [r7, #12]
 80107a6:	e001      	b.n	80107ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80107a8:	2300      	movs	r3, #0
 80107aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80107ac:	68fb      	ldr	r3, [r7, #12]
}
 80107ae:	0018      	movs	r0, r3
 80107b0:	46bd      	mov	sp, r7
 80107b2:	b004      	add	sp, #16
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	46c0      	nop			; (mov r8, r8)
 80107b8:	20004c28 	.word	0x20004c28

080107bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80107c4:	f7ff faf0 	bl	800fda8 <xTaskGetTickCount>
 80107c8:	0003      	movs	r3, r0
 80107ca:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80107cc:	4b0a      	ldr	r3, [pc, #40]	; (80107f8 <prvSampleTimeNow+0x3c>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d205      	bcs.n	80107e2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80107d6:	f000 f919 	bl	8010a0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2201      	movs	r2, #1
 80107de:	601a      	str	r2, [r3, #0]
 80107e0:	e002      	b.n	80107e8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2200      	movs	r2, #0
 80107e6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80107e8:	4b03      	ldr	r3, [pc, #12]	; (80107f8 <prvSampleTimeNow+0x3c>)
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80107ee:	68fb      	ldr	r3, [r7, #12]
}
 80107f0:	0018      	movs	r0, r3
 80107f2:	46bd      	mov	sp, r7
 80107f4:	b004      	add	sp, #16
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	20004c38 	.word	0x20004c38

080107fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b086      	sub	sp, #24
 8010800:	af00      	add	r7, sp, #0
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	607a      	str	r2, [r7, #4]
 8010808:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801080a:	2300      	movs	r3, #0
 801080c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	429a      	cmp	r2, r3
 8010820:	d812      	bhi.n	8010848 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	1ad2      	subs	r2, r2, r3
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	699b      	ldr	r3, [r3, #24]
 801082c:	429a      	cmp	r2, r3
 801082e:	d302      	bcc.n	8010836 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010830:	2301      	movs	r3, #1
 8010832:	617b      	str	r3, [r7, #20]
 8010834:	e01b      	b.n	801086e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010836:	4b10      	ldr	r3, [pc, #64]	; (8010878 <prvInsertTimerInActiveList+0x7c>)
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	3304      	adds	r3, #4
 801083e:	0019      	movs	r1, r3
 8010840:	0010      	movs	r0, r2
 8010842:	f7fe fb40 	bl	800eec6 <vListInsert>
 8010846:	e012      	b.n	801086e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	429a      	cmp	r2, r3
 801084e:	d206      	bcs.n	801085e <prvInsertTimerInActiveList+0x62>
 8010850:	68ba      	ldr	r2, [r7, #8]
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	429a      	cmp	r2, r3
 8010856:	d302      	bcc.n	801085e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010858:	2301      	movs	r3, #1
 801085a:	617b      	str	r3, [r7, #20]
 801085c:	e007      	b.n	801086e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801085e:	4b07      	ldr	r3, [pc, #28]	; (801087c <prvInsertTimerInActiveList+0x80>)
 8010860:	681a      	ldr	r2, [r3, #0]
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	3304      	adds	r3, #4
 8010866:	0019      	movs	r1, r3
 8010868:	0010      	movs	r0, r2
 801086a:	f7fe fb2c 	bl	800eec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801086e:	697b      	ldr	r3, [r7, #20]
}
 8010870:	0018      	movs	r0, r3
 8010872:	46bd      	mov	sp, r7
 8010874:	b006      	add	sp, #24
 8010876:	bd80      	pop	{r7, pc}
 8010878:	20004c2c 	.word	0x20004c2c
 801087c:	20004c28 	.word	0x20004c28

08010880 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010880:	b590      	push	{r4, r7, lr}
 8010882:	b08d      	sub	sp, #52	; 0x34
 8010884:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010886:	e0ac      	b.n	80109e2 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010888:	2208      	movs	r2, #8
 801088a:	18bb      	adds	r3, r7, r2
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	da0f      	bge.n	80108b2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010892:	18bb      	adds	r3, r7, r2
 8010894:	3304      	adds	r3, #4
 8010896:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089a:	2b00      	cmp	r3, #0
 801089c:	d101      	bne.n	80108a2 <prvProcessReceivedCommands+0x22>
 801089e:	b672      	cpsid	i
 80108a0:	e7fe      	b.n	80108a0 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80108a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	6858      	ldr	r0, [r3, #4]
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	689b      	ldr	r3, [r3, #8]
 80108ae:	0019      	movs	r1, r3
 80108b0:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80108b2:	2208      	movs	r2, #8
 80108b4:	18bb      	adds	r3, r7, r2
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	da00      	bge.n	80108be <prvProcessReceivedCommands+0x3e>
 80108bc:	e091      	b.n	80109e2 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80108be:	18bb      	adds	r3, r7, r2
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	695b      	ldr	r3, [r3, #20]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d004      	beq.n	80108d6 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108cc:	6a3b      	ldr	r3, [r7, #32]
 80108ce:	3304      	adds	r3, #4
 80108d0:	0018      	movs	r0, r3
 80108d2:	f7fe fb2e 	bl	800ef32 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108d6:	1d3b      	adds	r3, r7, #4
 80108d8:	0018      	movs	r0, r3
 80108da:	f7ff ff6f 	bl	80107bc <prvSampleTimeNow>
 80108de:	0003      	movs	r3, r0
 80108e0:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80108e2:	2308      	movs	r3, #8
 80108e4:	18fb      	adds	r3, r7, r3
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2b09      	cmp	r3, #9
 80108ea:	d900      	bls.n	80108ee <prvProcessReceivedCommands+0x6e>
 80108ec:	e078      	b.n	80109e0 <prvProcessReceivedCommands+0x160>
 80108ee:	009a      	lsls	r2, r3, #2
 80108f0:	4b44      	ldr	r3, [pc, #272]	; (8010a04 <prvProcessReceivedCommands+0x184>)
 80108f2:	18d3      	adds	r3, r2, r3
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108f8:	6a3b      	ldr	r3, [r7, #32]
 80108fa:	2228      	movs	r2, #40	; 0x28
 80108fc:	5c9b      	ldrb	r3, [r3, r2]
 80108fe:	2201      	movs	r2, #1
 8010900:	4313      	orrs	r3, r2
 8010902:	b2d9      	uxtb	r1, r3
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	2228      	movs	r2, #40	; 0x28
 8010908:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801090a:	2408      	movs	r4, #8
 801090c:	193b      	adds	r3, r7, r4
 801090e:	685a      	ldr	r2, [r3, #4]
 8010910:	6a3b      	ldr	r3, [r7, #32]
 8010912:	699b      	ldr	r3, [r3, #24]
 8010914:	18d1      	adds	r1, r2, r3
 8010916:	193b      	adds	r3, r7, r4
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	69fa      	ldr	r2, [r7, #28]
 801091c:	6a38      	ldr	r0, [r7, #32]
 801091e:	f7ff ff6d 	bl	80107fc <prvInsertTimerInActiveList>
 8010922:	1e03      	subs	r3, r0, #0
 8010924:	d05d      	beq.n	80109e2 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010926:	6a3b      	ldr	r3, [r7, #32]
 8010928:	6a1b      	ldr	r3, [r3, #32]
 801092a:	6a3a      	ldr	r2, [r7, #32]
 801092c:	0010      	movs	r0, r2
 801092e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010930:	6a3b      	ldr	r3, [r7, #32]
 8010932:	2228      	movs	r2, #40	; 0x28
 8010934:	5c9b      	ldrb	r3, [r3, r2]
 8010936:	001a      	movs	r2, r3
 8010938:	2304      	movs	r3, #4
 801093a:	4013      	ands	r3, r2
 801093c:	d051      	beq.n	80109e2 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801093e:	193b      	adds	r3, r7, r4
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	6a3b      	ldr	r3, [r7, #32]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	18d2      	adds	r2, r2, r3
 8010948:	6a38      	ldr	r0, [r7, #32]
 801094a:	2300      	movs	r3, #0
 801094c:	9300      	str	r3, [sp, #0]
 801094e:	2300      	movs	r3, #0
 8010950:	2100      	movs	r1, #0
 8010952:	f7ff fe27 	bl	80105a4 <xTimerGenericCommand>
 8010956:	0003      	movs	r3, r0
 8010958:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d140      	bne.n	80109e2 <prvProcessReceivedCommands+0x162>
 8010960:	b672      	cpsid	i
 8010962:	e7fe      	b.n	8010962 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010964:	6a3b      	ldr	r3, [r7, #32]
 8010966:	2228      	movs	r2, #40	; 0x28
 8010968:	5c9b      	ldrb	r3, [r3, r2]
 801096a:	2201      	movs	r2, #1
 801096c:	4393      	bics	r3, r2
 801096e:	b2d9      	uxtb	r1, r3
 8010970:	6a3b      	ldr	r3, [r7, #32]
 8010972:	2228      	movs	r2, #40	; 0x28
 8010974:	5499      	strb	r1, [r3, r2]
					break;
 8010976:	e034      	b.n	80109e2 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010978:	6a3b      	ldr	r3, [r7, #32]
 801097a:	2228      	movs	r2, #40	; 0x28
 801097c:	5c9b      	ldrb	r3, [r3, r2]
 801097e:	2201      	movs	r2, #1
 8010980:	4313      	orrs	r3, r2
 8010982:	b2d9      	uxtb	r1, r3
 8010984:	6a3b      	ldr	r3, [r7, #32]
 8010986:	2228      	movs	r2, #40	; 0x28
 8010988:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801098a:	2308      	movs	r3, #8
 801098c:	18fb      	adds	r3, r7, r3
 801098e:	685a      	ldr	r2, [r3, #4]
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010994:	6a3b      	ldr	r3, [r7, #32]
 8010996:	699b      	ldr	r3, [r3, #24]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d101      	bne.n	80109a0 <prvProcessReceivedCommands+0x120>
 801099c:	b672      	cpsid	i
 801099e:	e7fe      	b.n	801099e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80109a0:	6a3b      	ldr	r3, [r7, #32]
 80109a2:	699a      	ldr	r2, [r3, #24]
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	18d1      	adds	r1, r2, r3
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	69fa      	ldr	r2, [r7, #28]
 80109ac:	6a38      	ldr	r0, [r7, #32]
 80109ae:	f7ff ff25 	bl	80107fc <prvInsertTimerInActiveList>
					break;
 80109b2:	e016      	b.n	80109e2 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80109b4:	6a3b      	ldr	r3, [r7, #32]
 80109b6:	2228      	movs	r2, #40	; 0x28
 80109b8:	5c9b      	ldrb	r3, [r3, r2]
 80109ba:	001a      	movs	r2, r3
 80109bc:	2302      	movs	r3, #2
 80109be:	4013      	ands	r3, r2
 80109c0:	d104      	bne.n	80109cc <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	0018      	movs	r0, r3
 80109c6:	f000 fa9f 	bl	8010f08 <vPortFree>
 80109ca:	e00a      	b.n	80109e2 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109cc:	6a3b      	ldr	r3, [r7, #32]
 80109ce:	2228      	movs	r2, #40	; 0x28
 80109d0:	5c9b      	ldrb	r3, [r3, r2]
 80109d2:	2201      	movs	r2, #1
 80109d4:	4393      	bics	r3, r2
 80109d6:	b2d9      	uxtb	r1, r3
 80109d8:	6a3b      	ldr	r3, [r7, #32]
 80109da:	2228      	movs	r2, #40	; 0x28
 80109dc:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80109de:	e000      	b.n	80109e2 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80109e0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109e2:	4b09      	ldr	r3, [pc, #36]	; (8010a08 <prvProcessReceivedCommands+0x188>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2208      	movs	r2, #8
 80109e8:	18b9      	adds	r1, r7, r2
 80109ea:	2200      	movs	r2, #0
 80109ec:	0018      	movs	r0, r3
 80109ee:	f7fe fcf9 	bl	800f3e4 <xQueueReceive>
 80109f2:	1e03      	subs	r3, r0, #0
 80109f4:	d000      	beq.n	80109f8 <prvProcessReceivedCommands+0x178>
 80109f6:	e747      	b.n	8010888 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80109f8:	46c0      	nop			; (mov r8, r8)
 80109fa:	46c0      	nop			; (mov r8, r8)
 80109fc:	46bd      	mov	sp, r7
 80109fe:	b00b      	add	sp, #44	; 0x2c
 8010a00:	bd90      	pop	{r4, r7, pc}
 8010a02:	46c0      	nop			; (mov r8, r8)
 8010a04:	08018528 	.word	0x08018528
 8010a08:	20004c30 	.word	0x20004c30

08010a0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b088      	sub	sp, #32
 8010a10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a12:	e041      	b.n	8010a98 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a14:	4b2a      	ldr	r3, [pc, #168]	; (8010ac0 <prvSwitchTimerLists+0xb4>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a1e:	4b28      	ldr	r3, [pc, #160]	; (8010ac0 <prvSwitchTimerLists+0xb4>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	3304      	adds	r3, #4
 8010a2c:	0018      	movs	r0, r3
 8010a2e:	f7fe fa80 	bl	800ef32 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	6a1b      	ldr	r3, [r3, #32]
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	0010      	movs	r0, r2
 8010a3a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2228      	movs	r2, #40	; 0x28
 8010a40:	5c9b      	ldrb	r3, [r3, r2]
 8010a42:	001a      	movs	r2, r3
 8010a44:	2304      	movs	r3, #4
 8010a46:	4013      	ands	r3, r2
 8010a48:	d026      	beq.n	8010a98 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	699b      	ldr	r3, [r3, #24]
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	18d3      	adds	r3, r2, r3
 8010a52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a54:	68ba      	ldr	r2, [r7, #8]
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d90e      	bls.n	8010a7a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	68ba      	ldr	r2, [r7, #8]
 8010a60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	68fa      	ldr	r2, [r7, #12]
 8010a66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a68:	4b15      	ldr	r3, [pc, #84]	; (8010ac0 <prvSwitchTimerLists+0xb4>)
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	3304      	adds	r3, #4
 8010a70:	0019      	movs	r1, r3
 8010a72:	0010      	movs	r0, r2
 8010a74:	f7fe fa27 	bl	800eec6 <vListInsert>
 8010a78:	e00e      	b.n	8010a98 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a7a:	693a      	ldr	r2, [r7, #16]
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	2300      	movs	r3, #0
 8010a80:	9300      	str	r3, [sp, #0]
 8010a82:	2300      	movs	r3, #0
 8010a84:	2100      	movs	r1, #0
 8010a86:	f7ff fd8d 	bl	80105a4 <xTimerGenericCommand>
 8010a8a:	0003      	movs	r3, r0
 8010a8c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d101      	bne.n	8010a98 <prvSwitchTimerLists+0x8c>
 8010a94:	b672      	cpsid	i
 8010a96:	e7fe      	b.n	8010a96 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a98:	4b09      	ldr	r3, [pc, #36]	; (8010ac0 <prvSwitchTimerLists+0xb4>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d1b8      	bne.n	8010a14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010aa2:	4b07      	ldr	r3, [pc, #28]	; (8010ac0 <prvSwitchTimerLists+0xb4>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010aa8:	4b06      	ldr	r3, [pc, #24]	; (8010ac4 <prvSwitchTimerLists+0xb8>)
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	4b04      	ldr	r3, [pc, #16]	; (8010ac0 <prvSwitchTimerLists+0xb4>)
 8010aae:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8010ab0:	4b04      	ldr	r3, [pc, #16]	; (8010ac4 <prvSwitchTimerLists+0xb8>)
 8010ab2:	697a      	ldr	r2, [r7, #20]
 8010ab4:	601a      	str	r2, [r3, #0]
}
 8010ab6:	46c0      	nop			; (mov r8, r8)
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	b006      	add	sp, #24
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	46c0      	nop			; (mov r8, r8)
 8010ac0:	20004c28 	.word	0x20004c28
 8010ac4:	20004c2c 	.word	0x20004c2c

08010ac8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010ace:	f000 f8d7 	bl	8010c80 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010ad2:	4b16      	ldr	r3, [pc, #88]	; (8010b2c <prvCheckForValidListAndQueue+0x64>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d123      	bne.n	8010b22 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8010ada:	4b15      	ldr	r3, [pc, #84]	; (8010b30 <prvCheckForValidListAndQueue+0x68>)
 8010adc:	0018      	movs	r0, r3
 8010ade:	f7fe f9a7 	bl	800ee30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010ae2:	4b14      	ldr	r3, [pc, #80]	; (8010b34 <prvCheckForValidListAndQueue+0x6c>)
 8010ae4:	0018      	movs	r0, r3
 8010ae6:	f7fe f9a3 	bl	800ee30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010aea:	4b13      	ldr	r3, [pc, #76]	; (8010b38 <prvCheckForValidListAndQueue+0x70>)
 8010aec:	4a10      	ldr	r2, [pc, #64]	; (8010b30 <prvCheckForValidListAndQueue+0x68>)
 8010aee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010af0:	4b12      	ldr	r3, [pc, #72]	; (8010b3c <prvCheckForValidListAndQueue+0x74>)
 8010af2:	4a10      	ldr	r2, [pc, #64]	; (8010b34 <prvCheckForValidListAndQueue+0x6c>)
 8010af4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010af6:	4b12      	ldr	r3, [pc, #72]	; (8010b40 <prvCheckForValidListAndQueue+0x78>)
 8010af8:	4a12      	ldr	r2, [pc, #72]	; (8010b44 <prvCheckForValidListAndQueue+0x7c>)
 8010afa:	2100      	movs	r1, #0
 8010afc:	9100      	str	r1, [sp, #0]
 8010afe:	2110      	movs	r1, #16
 8010b00:	200a      	movs	r0, #10
 8010b02:	f7fe fa92 	bl	800f02a <xQueueGenericCreateStatic>
 8010b06:	0002      	movs	r2, r0
 8010b08:	4b08      	ldr	r3, [pc, #32]	; (8010b2c <prvCheckForValidListAndQueue+0x64>)
 8010b0a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b0c:	4b07      	ldr	r3, [pc, #28]	; (8010b2c <prvCheckForValidListAndQueue+0x64>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d006      	beq.n	8010b22 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b14:	4b05      	ldr	r3, [pc, #20]	; (8010b2c <prvCheckForValidListAndQueue+0x64>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a0b      	ldr	r2, [pc, #44]	; (8010b48 <prvCheckForValidListAndQueue+0x80>)
 8010b1a:	0011      	movs	r1, r2
 8010b1c:	0018      	movs	r0, r3
 8010b1e:	f7fe fe33 	bl	800f788 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b22:	f000 f8bf 	bl	8010ca4 <vPortExitCritical>
}
 8010b26:	46c0      	nop			; (mov r8, r8)
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	20004c30 	.word	0x20004c30
 8010b30:	20004c00 	.word	0x20004c00
 8010b34:	20004c14 	.word	0x20004c14
 8010b38:	20004c28 	.word	0x20004c28
 8010b3c:	20004c2c 	.word	0x20004c2c
 8010b40:	20004cdc 	.word	0x20004cdc
 8010b44:	20004c3c 	.word	0x20004c3c
 8010b48:	08018350 	.word	0x08018350

08010b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3b04      	subs	r3, #4
 8010b5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2280      	movs	r2, #128	; 0x80
 8010b62:	0452      	lsls	r2, r2, #17
 8010b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	3b04      	subs	r3, #4
 8010b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	3b04      	subs	r3, #4
 8010b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b78:	4a08      	ldr	r2, [pc, #32]	; (8010b9c <pxPortInitialiseStack+0x50>)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	3b14      	subs	r3, #20
 8010b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b84:	687a      	ldr	r2, [r7, #4]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	3b20      	subs	r3, #32
 8010b8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b90:	68fb      	ldr	r3, [r7, #12]
}
 8010b92:	0018      	movs	r0, r3
 8010b94:	46bd      	mov	sp, r7
 8010b96:	b004      	add	sp, #16
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	46c0      	nop			; (mov r8, r8)
 8010b9c:	08010ba1 	.word	0x08010ba1

08010ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010baa:	4b08      	ldr	r3, [pc, #32]	; (8010bcc <prvTaskExitError+0x2c>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	d001      	beq.n	8010bb6 <prvTaskExitError+0x16>
 8010bb2:	b672      	cpsid	i
 8010bb4:	e7fe      	b.n	8010bb4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8010bb6:	b672      	cpsid	i
	while( ulDummy == 0 )
 8010bb8:	46c0      	nop			; (mov r8, r8)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d0fc      	beq.n	8010bba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010bc0:	46c0      	nop			; (mov r8, r8)
 8010bc2:	46c0      	nop			; (mov r8, r8)
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	b002      	add	sp, #8
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	46c0      	nop			; (mov r8, r8)
 8010bcc:	200000ec 	.word	0x200000ec

08010bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8010bd4:	46c0      	nop			; (mov r8, r8)
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	0000      	movs	r0, r0
 8010bdc:	0000      	movs	r0, r0
	...

08010be0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010be0:	4a0b      	ldr	r2, [pc, #44]	; (8010c10 <pxCurrentTCBConst2>)
 8010be2:	6813      	ldr	r3, [r2, #0]
 8010be4:	6818      	ldr	r0, [r3, #0]
 8010be6:	3020      	adds	r0, #32
 8010be8:	f380 8809 	msr	PSP, r0
 8010bec:	2002      	movs	r0, #2
 8010bee:	f380 8814 	msr	CONTROL, r0
 8010bf2:	f3bf 8f6f 	isb	sy
 8010bf6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010bf8:	46ae      	mov	lr, r5
 8010bfa:	bc08      	pop	{r3}
 8010bfc:	bc04      	pop	{r2}
 8010bfe:	b662      	cpsie	i
 8010c00:	4718      	bx	r3
 8010c02:	46c0      	nop			; (mov r8, r8)
 8010c04:	46c0      	nop			; (mov r8, r8)
 8010c06:	46c0      	nop			; (mov r8, r8)
 8010c08:	46c0      	nop			; (mov r8, r8)
 8010c0a:	46c0      	nop			; (mov r8, r8)
 8010c0c:	46c0      	nop			; (mov r8, r8)
 8010c0e:	46c0      	nop			; (mov r8, r8)

08010c10 <pxCurrentTCBConst2>:
 8010c10:	20004700 	.word	0x20004700
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8010c14:	46c0      	nop			; (mov r8, r8)
 8010c16:	46c0      	nop			; (mov r8, r8)

08010c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c1c:	4b0e      	ldr	r3, [pc, #56]	; (8010c58 <xPortStartScheduler+0x40>)
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	4b0d      	ldr	r3, [pc, #52]	; (8010c58 <xPortStartScheduler+0x40>)
 8010c22:	21ff      	movs	r1, #255	; 0xff
 8010c24:	0409      	lsls	r1, r1, #16
 8010c26:	430a      	orrs	r2, r1
 8010c28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c2a:	4b0b      	ldr	r3, [pc, #44]	; (8010c58 <xPortStartScheduler+0x40>)
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	4b0a      	ldr	r3, [pc, #40]	; (8010c58 <xPortStartScheduler+0x40>)
 8010c30:	21ff      	movs	r1, #255	; 0xff
 8010c32:	0609      	lsls	r1, r1, #24
 8010c34:	430a      	orrs	r2, r1
 8010c36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c38:	f000 f898 	bl	8010d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c3c:	4b07      	ldr	r3, [pc, #28]	; (8010c5c <xPortStartScheduler+0x44>)
 8010c3e:	2200      	movs	r2, #0
 8010c40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8010c42:	f7ff ffcd 	bl	8010be0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010c46:	f7ff f96d 	bl	800ff24 <vTaskSwitchContext>
	prvTaskExitError();
 8010c4a:	f7ff ffa9 	bl	8010ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010c4e:	2300      	movs	r3, #0
}
 8010c50:	0018      	movs	r0, r3
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	46c0      	nop			; (mov r8, r8)
 8010c58:	e000ed20 	.word	0xe000ed20
 8010c5c:	200000ec 	.word	0x200000ec

08010c60 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c64:	4b05      	ldr	r3, [pc, #20]	; (8010c7c <vPortYield+0x1c>)
 8010c66:	2280      	movs	r2, #128	; 0x80
 8010c68:	0552      	lsls	r2, r2, #21
 8010c6a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8010c6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010c70:	f3bf 8f6f 	isb	sy
}
 8010c74:	46c0      	nop			; (mov r8, r8)
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	46c0      	nop			; (mov r8, r8)
 8010c7c:	e000ed04 	.word	0xe000ed04

08010c80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8010c84:	b672      	cpsid	i
	uxCriticalNesting++;
 8010c86:	4b06      	ldr	r3, [pc, #24]	; (8010ca0 <vPortEnterCritical+0x20>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	1c5a      	adds	r2, r3, #1
 8010c8c:	4b04      	ldr	r3, [pc, #16]	; (8010ca0 <vPortEnterCritical+0x20>)
 8010c8e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8010c90:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010c94:	f3bf 8f6f 	isb	sy
}
 8010c98:	46c0      	nop			; (mov r8, r8)
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	46c0      	nop			; (mov r8, r8)
 8010ca0:	200000ec 	.word	0x200000ec

08010ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010ca8:	4b09      	ldr	r3, [pc, #36]	; (8010cd0 <vPortExitCritical+0x2c>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <vPortExitCritical+0x10>
 8010cb0:	b672      	cpsid	i
 8010cb2:	e7fe      	b.n	8010cb2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8010cb4:	4b06      	ldr	r3, [pc, #24]	; (8010cd0 <vPortExitCritical+0x2c>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	1e5a      	subs	r2, r3, #1
 8010cba:	4b05      	ldr	r3, [pc, #20]	; (8010cd0 <vPortExitCritical+0x2c>)
 8010cbc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8010cbe:	4b04      	ldr	r3, [pc, #16]	; (8010cd0 <vPortExitCritical+0x2c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d100      	bne.n	8010cc8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8010cc6:	b662      	cpsie	i
	}
}
 8010cc8:	46c0      	nop			; (mov r8, r8)
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	46c0      	nop			; (mov r8, r8)
 8010cd0:	200000ec 	.word	0x200000ec

08010cd4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8010cd4:	f3ef 8010 	mrs	r0, PRIMASK
 8010cd8:	b672      	cpsid	i
 8010cda:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8010cdc:	46c0      	nop			; (mov r8, r8)
 8010cde:	0018      	movs	r0, r3

08010ce0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8010ce0:	f380 8810 	msr	PRIMASK, r0
 8010ce4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8010ce6:	46c0      	nop			; (mov r8, r8)
	...

08010cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010cf0:	f3ef 8009 	mrs	r0, PSP
 8010cf4:	4b0e      	ldr	r3, [pc, #56]	; (8010d30 <pxCurrentTCBConst>)
 8010cf6:	681a      	ldr	r2, [r3, #0]
 8010cf8:	3820      	subs	r0, #32
 8010cfa:	6010      	str	r0, [r2, #0]
 8010cfc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010cfe:	4644      	mov	r4, r8
 8010d00:	464d      	mov	r5, r9
 8010d02:	4656      	mov	r6, sl
 8010d04:	465f      	mov	r7, fp
 8010d06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010d08:	b508      	push	{r3, lr}
 8010d0a:	b672      	cpsid	i
 8010d0c:	f7ff f90a 	bl	800ff24 <vTaskSwitchContext>
 8010d10:	b662      	cpsie	i
 8010d12:	bc0c      	pop	{r2, r3}
 8010d14:	6811      	ldr	r1, [r2, #0]
 8010d16:	6808      	ldr	r0, [r1, #0]
 8010d18:	3010      	adds	r0, #16
 8010d1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010d1c:	46a0      	mov	r8, r4
 8010d1e:	46a9      	mov	r9, r5
 8010d20:	46b2      	mov	sl, r6
 8010d22:	46bb      	mov	fp, r7
 8010d24:	f380 8809 	msr	PSP, r0
 8010d28:	3820      	subs	r0, #32
 8010d2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010d2c:	4718      	bx	r3
 8010d2e:	46c0      	nop			; (mov r8, r8)

08010d30 <pxCurrentTCBConst>:
 8010d30:	20004700 	.word	0x20004700
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8010d34:	46c0      	nop			; (mov r8, r8)
 8010d36:	46c0      	nop			; (mov r8, r8)

08010d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d3e:	f7ff ffc9 	bl	8010cd4 <ulSetInterruptMaskFromISR>
 8010d42:	0003      	movs	r3, r0
 8010d44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010d46:	f7ff f83d 	bl	800fdc4 <xTaskIncrementTick>
 8010d4a:	1e03      	subs	r3, r0, #0
 8010d4c:	d003      	beq.n	8010d56 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d4e:	4b06      	ldr	r3, [pc, #24]	; (8010d68 <xPortSysTickHandler+0x30>)
 8010d50:	2280      	movs	r2, #128	; 0x80
 8010d52:	0552      	lsls	r2, r2, #21
 8010d54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	0018      	movs	r0, r3
 8010d5a:	f7ff ffc1 	bl	8010ce0 <vClearInterruptMaskFromISR>
}
 8010d5e:	46c0      	nop			; (mov r8, r8)
 8010d60:	46bd      	mov	sp, r7
 8010d62:	b002      	add	sp, #8
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	46c0      	nop			; (mov r8, r8)
 8010d68:	e000ed04 	.word	0xe000ed04

08010d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d70:	4b0b      	ldr	r3, [pc, #44]	; (8010da0 <vPortSetupTimerInterrupt+0x34>)
 8010d72:	2200      	movs	r2, #0
 8010d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d76:	4b0b      	ldr	r3, [pc, #44]	; (8010da4 <vPortSetupTimerInterrupt+0x38>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d7c:	4b0a      	ldr	r3, [pc, #40]	; (8010da8 <vPortSetupTimerInterrupt+0x3c>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	22fa      	movs	r2, #250	; 0xfa
 8010d82:	0091      	lsls	r1, r2, #2
 8010d84:	0018      	movs	r0, r3
 8010d86:	f7ef f9db 	bl	8000140 <__udivsi3>
 8010d8a:	0003      	movs	r3, r0
 8010d8c:	001a      	movs	r2, r3
 8010d8e:	4b07      	ldr	r3, [pc, #28]	; (8010dac <vPortSetupTimerInterrupt+0x40>)
 8010d90:	3a01      	subs	r2, #1
 8010d92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010d94:	4b02      	ldr	r3, [pc, #8]	; (8010da0 <vPortSetupTimerInterrupt+0x34>)
 8010d96:	2207      	movs	r2, #7
 8010d98:	601a      	str	r2, [r3, #0]
}
 8010d9a:	46c0      	nop			; (mov r8, r8)
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	e000e010 	.word	0xe000e010
 8010da4:	e000e018 	.word	0xe000e018
 8010da8:	200000e0 	.word	0x200000e0
 8010dac:	e000e014 	.word	0xe000e014

08010db0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b086      	sub	sp, #24
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010db8:	2300      	movs	r3, #0
 8010dba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8010dbc:	f7fe ff5c 	bl	800fc78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010dc0:	4b4b      	ldr	r3, [pc, #300]	; (8010ef0 <pvPortMalloc+0x140>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d101      	bne.n	8010dcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010dc8:	f000 f8ec 	bl	8010fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010dcc:	4b49      	ldr	r3, [pc, #292]	; (8010ef4 <pvPortMalloc+0x144>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	4013      	ands	r3, r2
 8010dd4:	d000      	beq.n	8010dd8 <pvPortMalloc+0x28>
 8010dd6:	e07e      	b.n	8010ed6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d012      	beq.n	8010e04 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8010dde:	2208      	movs	r2, #8
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	189b      	adds	r3, r3, r2
 8010de4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2207      	movs	r2, #7
 8010dea:	4013      	ands	r3, r2
 8010dec:	d00a      	beq.n	8010e04 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2207      	movs	r2, #7
 8010df2:	4393      	bics	r3, r2
 8010df4:	3308      	adds	r3, #8
 8010df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2207      	movs	r2, #7
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	d001      	beq.n	8010e04 <pvPortMalloc+0x54>
 8010e00:	b672      	cpsid	i
 8010e02:	e7fe      	b.n	8010e02 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d065      	beq.n	8010ed6 <pvPortMalloc+0x126>
 8010e0a:	4b3b      	ldr	r3, [pc, #236]	; (8010ef8 <pvPortMalloc+0x148>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d860      	bhi.n	8010ed6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e14:	4b39      	ldr	r3, [pc, #228]	; (8010efc <pvPortMalloc+0x14c>)
 8010e16:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8010e18:	4b38      	ldr	r3, [pc, #224]	; (8010efc <pvPortMalloc+0x14c>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e1e:	e004      	b.n	8010e2a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d903      	bls.n	8010e3c <pvPortMalloc+0x8c>
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1f1      	bne.n	8010e20 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e3c:	4b2c      	ldr	r3, [pc, #176]	; (8010ef0 <pvPortMalloc+0x140>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	697a      	ldr	r2, [r7, #20]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d047      	beq.n	8010ed6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2208      	movs	r2, #8
 8010e4c:	189b      	adds	r3, r3, r2
 8010e4e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	685a      	ldr	r2, [r3, #4]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	1ad2      	subs	r2, r2, r3
 8010e60:	2308      	movs	r3, #8
 8010e62:	005b      	lsls	r3, r3, #1
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d916      	bls.n	8010e96 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e68:	697a      	ldr	r2, [r7, #20]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	18d3      	adds	r3, r2, r3
 8010e6e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2207      	movs	r2, #7
 8010e74:	4013      	ands	r3, r2
 8010e76:	d001      	beq.n	8010e7c <pvPortMalloc+0xcc>
 8010e78:	b672      	cpsid	i
 8010e7a:	e7fe      	b.n	8010e7a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	685a      	ldr	r2, [r3, #4]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	1ad2      	subs	r2, r2, r3
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	0018      	movs	r0, r3
 8010e92:	f000 f8e7 	bl	8011064 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e96:	4b18      	ldr	r3, [pc, #96]	; (8010ef8 <pvPortMalloc+0x148>)
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	1ad2      	subs	r2, r2, r3
 8010ea0:	4b15      	ldr	r3, [pc, #84]	; (8010ef8 <pvPortMalloc+0x148>)
 8010ea2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010ea4:	4b14      	ldr	r3, [pc, #80]	; (8010ef8 <pvPortMalloc+0x148>)
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	4b15      	ldr	r3, [pc, #84]	; (8010f00 <pvPortMalloc+0x150>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d203      	bcs.n	8010eb8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010eb0:	4b11      	ldr	r3, [pc, #68]	; (8010ef8 <pvPortMalloc+0x148>)
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	4b12      	ldr	r3, [pc, #72]	; (8010f00 <pvPortMalloc+0x150>)
 8010eb6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	4b0d      	ldr	r3, [pc, #52]	; (8010ef4 <pvPortMalloc+0x144>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	431a      	orrs	r2, r3
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010ecc:	4b0d      	ldr	r3, [pc, #52]	; (8010f04 <pvPortMalloc+0x154>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	1c5a      	adds	r2, r3, #1
 8010ed2:	4b0c      	ldr	r3, [pc, #48]	; (8010f04 <pvPortMalloc+0x154>)
 8010ed4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010ed6:	f7fe fedb 	bl	800fc90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2207      	movs	r2, #7
 8010ede:	4013      	ands	r3, r2
 8010ee0:	d001      	beq.n	8010ee6 <pvPortMalloc+0x136>
 8010ee2:	b672      	cpsid	i
 8010ee4:	e7fe      	b.n	8010ee4 <pvPortMalloc+0x134>
	return pvReturn;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
}
 8010ee8:	0018      	movs	r0, r3
 8010eea:	46bd      	mov	sp, r7
 8010eec:	b006      	add	sp, #24
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20005934 	.word	0x20005934
 8010ef4:	20005948 	.word	0x20005948
 8010ef8:	20005938 	.word	0x20005938
 8010efc:	2000592c 	.word	0x2000592c
 8010f00:	2000593c 	.word	0x2000593c
 8010f04:	20005940 	.word	0x20005940

08010f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d03a      	beq.n	8010f90 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010f1a:	2308      	movs	r3, #8
 8010f1c:	425b      	negs	r3, r3
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	18d3      	adds	r3, r2, r3
 8010f22:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	4b1a      	ldr	r3, [pc, #104]	; (8010f98 <vPortFree+0x90>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4013      	ands	r3, r2
 8010f32:	d101      	bne.n	8010f38 <vPortFree+0x30>
 8010f34:	b672      	cpsid	i
 8010f36:	e7fe      	b.n	8010f36 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d001      	beq.n	8010f44 <vPortFree+0x3c>
 8010f40:	b672      	cpsid	i
 8010f42:	e7fe      	b.n	8010f42 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	685a      	ldr	r2, [r3, #4]
 8010f48:	4b13      	ldr	r3, [pc, #76]	; (8010f98 <vPortFree+0x90>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4013      	ands	r3, r2
 8010f4e:	d01f      	beq.n	8010f90 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d11b      	bne.n	8010f90 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	685a      	ldr	r2, [r3, #4]
 8010f5c:	4b0e      	ldr	r3, [pc, #56]	; (8010f98 <vPortFree+0x90>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	43db      	mvns	r3, r3
 8010f62:	401a      	ands	r2, r3
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f68:	f7fe fe86 	bl	800fc78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	685a      	ldr	r2, [r3, #4]
 8010f70:	4b0a      	ldr	r3, [pc, #40]	; (8010f9c <vPortFree+0x94>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	18d2      	adds	r2, r2, r3
 8010f76:	4b09      	ldr	r3, [pc, #36]	; (8010f9c <vPortFree+0x94>)
 8010f78:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	0018      	movs	r0, r3
 8010f7e:	f000 f871 	bl	8011064 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010f82:	4b07      	ldr	r3, [pc, #28]	; (8010fa0 <vPortFree+0x98>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	4b05      	ldr	r3, [pc, #20]	; (8010fa0 <vPortFree+0x98>)
 8010f8a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8010f8c:	f7fe fe80 	bl	800fc90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f90:	46c0      	nop			; (mov r8, r8)
 8010f92:	46bd      	mov	sp, r7
 8010f94:	b004      	add	sp, #16
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	20005948 	.word	0x20005948
 8010f9c:	20005938 	.word	0x20005938
 8010fa0:	20005944 	.word	0x20005944

08010fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010faa:	23c0      	movs	r3, #192	; 0xc0
 8010fac:	011b      	lsls	r3, r3, #4
 8010fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010fb0:	4b26      	ldr	r3, [pc, #152]	; (801104c <prvHeapInit+0xa8>)
 8010fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2207      	movs	r2, #7
 8010fb8:	4013      	ands	r3, r2
 8010fba:	d00c      	beq.n	8010fd6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	3307      	adds	r3, #7
 8010fc0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2207      	movs	r2, #7
 8010fc6:	4393      	bics	r3, r2
 8010fc8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010fca:	68ba      	ldr	r2, [r7, #8]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	1ad2      	subs	r2, r2, r3
 8010fd0:	4b1e      	ldr	r3, [pc, #120]	; (801104c <prvHeapInit+0xa8>)
 8010fd2:	18d3      	adds	r3, r2, r3
 8010fd4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fda:	4b1d      	ldr	r3, [pc, #116]	; (8011050 <prvHeapInit+0xac>)
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fe0:	4b1b      	ldr	r3, [pc, #108]	; (8011050 <prvHeapInit+0xac>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	68ba      	ldr	r2, [r7, #8]
 8010fea:	18d3      	adds	r3, r2, r3
 8010fec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fee:	2208      	movs	r2, #8
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	1a9b      	subs	r3, r3, r2
 8010ff4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2207      	movs	r2, #7
 8010ffa:	4393      	bics	r3, r2
 8010ffc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010ffe:	68fa      	ldr	r2, [r7, #12]
 8011000:	4b14      	ldr	r3, [pc, #80]	; (8011054 <prvHeapInit+0xb0>)
 8011002:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8011004:	4b13      	ldr	r3, [pc, #76]	; (8011054 <prvHeapInit+0xb0>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2200      	movs	r2, #0
 801100a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801100c:	4b11      	ldr	r3, [pc, #68]	; (8011054 <prvHeapInit+0xb0>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2200      	movs	r2, #0
 8011012:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	68fa      	ldr	r2, [r7, #12]
 801101c:	1ad2      	subs	r2, r2, r3
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011022:	4b0c      	ldr	r3, [pc, #48]	; (8011054 <prvHeapInit+0xb0>)
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	685a      	ldr	r2, [r3, #4]
 801102e:	4b0a      	ldr	r3, [pc, #40]	; (8011058 <prvHeapInit+0xb4>)
 8011030:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	685a      	ldr	r2, [r3, #4]
 8011036:	4b09      	ldr	r3, [pc, #36]	; (801105c <prvHeapInit+0xb8>)
 8011038:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801103a:	4b09      	ldr	r3, [pc, #36]	; (8011060 <prvHeapInit+0xbc>)
 801103c:	2280      	movs	r2, #128	; 0x80
 801103e:	0612      	lsls	r2, r2, #24
 8011040:	601a      	str	r2, [r3, #0]
}
 8011042:	46c0      	nop			; (mov r8, r8)
 8011044:	46bd      	mov	sp, r7
 8011046:	b004      	add	sp, #16
 8011048:	bd80      	pop	{r7, pc}
 801104a:	46c0      	nop			; (mov r8, r8)
 801104c:	20004d2c 	.word	0x20004d2c
 8011050:	2000592c 	.word	0x2000592c
 8011054:	20005934 	.word	0x20005934
 8011058:	2000593c 	.word	0x2000593c
 801105c:	20005938 	.word	0x20005938
 8011060:	20005948 	.word	0x20005948

08011064 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801106c:	4b27      	ldr	r3, [pc, #156]	; (801110c <prvInsertBlockIntoFreeList+0xa8>)
 801106e:	60fb      	str	r3, [r7, #12]
 8011070:	e002      	b.n	8011078 <prvInsertBlockIntoFreeList+0x14>
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	60fb      	str	r3, [r7, #12]
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	429a      	cmp	r2, r3
 8011080:	d8f7      	bhi.n	8011072 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	18d3      	adds	r3, r2, r3
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	429a      	cmp	r2, r3
 8011092:	d108      	bne.n	80110a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	18d2      	adds	r2, r2, r3
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	68ba      	ldr	r2, [r7, #8]
 80110b0:	18d2      	adds	r2, r2, r3
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d118      	bne.n	80110ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	4b14      	ldr	r3, [pc, #80]	; (8011110 <prvInsertBlockIntoFreeList+0xac>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d00d      	beq.n	80110e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	685a      	ldr	r2, [r3, #4]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	18d2      	adds	r2, r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	601a      	str	r2, [r3, #0]
 80110e0:	e008      	b.n	80110f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110e2:	4b0b      	ldr	r3, [pc, #44]	; (8011110 <prvInsertBlockIntoFreeList+0xac>)
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	601a      	str	r2, [r3, #0]
 80110ea:	e003      	b.n	80110f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d002      	beq.n	8011102 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011102:	46c0      	nop			; (mov r8, r8)
 8011104:	46bd      	mov	sp, r7
 8011106:	b004      	add	sp, #16
 8011108:	bd80      	pop	{r7, pc}
 801110a:	46c0      	nop			; (mov r8, r8)
 801110c:	2000592c 	.word	0x2000592c
 8011110:	20005934 	.word	0x20005934

08011114 <atoi>:
 8011114:	b510      	push	{r4, lr}
 8011116:	220a      	movs	r2, #10
 8011118:	2100      	movs	r1, #0
 801111a:	f000 ff81 	bl	8012020 <strtol>
 801111e:	bd10      	pop	{r4, pc}

08011120 <malloc>:
 8011120:	b510      	push	{r4, lr}
 8011122:	4b03      	ldr	r3, [pc, #12]	; (8011130 <malloc+0x10>)
 8011124:	0001      	movs	r1, r0
 8011126:	6818      	ldr	r0, [r3, #0]
 8011128:	f000 f826 	bl	8011178 <_malloc_r>
 801112c:	bd10      	pop	{r4, pc}
 801112e:	46c0      	nop			; (mov r8, r8)
 8011130:	200002b4 	.word	0x200002b4

08011134 <sbrk_aligned>:
 8011134:	b570      	push	{r4, r5, r6, lr}
 8011136:	4e0f      	ldr	r6, [pc, #60]	; (8011174 <sbrk_aligned+0x40>)
 8011138:	000d      	movs	r5, r1
 801113a:	6831      	ldr	r1, [r6, #0]
 801113c:	0004      	movs	r4, r0
 801113e:	2900      	cmp	r1, #0
 8011140:	d102      	bne.n	8011148 <sbrk_aligned+0x14>
 8011142:	f002 f8c5 	bl	80132d0 <_sbrk_r>
 8011146:	6030      	str	r0, [r6, #0]
 8011148:	0029      	movs	r1, r5
 801114a:	0020      	movs	r0, r4
 801114c:	f002 f8c0 	bl	80132d0 <_sbrk_r>
 8011150:	1c43      	adds	r3, r0, #1
 8011152:	d00a      	beq.n	801116a <sbrk_aligned+0x36>
 8011154:	2303      	movs	r3, #3
 8011156:	1cc5      	adds	r5, r0, #3
 8011158:	439d      	bics	r5, r3
 801115a:	42a8      	cmp	r0, r5
 801115c:	d007      	beq.n	801116e <sbrk_aligned+0x3a>
 801115e:	1a29      	subs	r1, r5, r0
 8011160:	0020      	movs	r0, r4
 8011162:	f002 f8b5 	bl	80132d0 <_sbrk_r>
 8011166:	3001      	adds	r0, #1
 8011168:	d101      	bne.n	801116e <sbrk_aligned+0x3a>
 801116a:	2501      	movs	r5, #1
 801116c:	426d      	negs	r5, r5
 801116e:	0028      	movs	r0, r5
 8011170:	bd70      	pop	{r4, r5, r6, pc}
 8011172:	46c0      	nop			; (mov r8, r8)
 8011174:	20005950 	.word	0x20005950

08011178 <_malloc_r>:
 8011178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801117a:	2203      	movs	r2, #3
 801117c:	1ccb      	adds	r3, r1, #3
 801117e:	4393      	bics	r3, r2
 8011180:	3308      	adds	r3, #8
 8011182:	0006      	movs	r6, r0
 8011184:	001f      	movs	r7, r3
 8011186:	2b0c      	cmp	r3, #12
 8011188:	d238      	bcs.n	80111fc <_malloc_r+0x84>
 801118a:	270c      	movs	r7, #12
 801118c:	42b9      	cmp	r1, r7
 801118e:	d837      	bhi.n	8011200 <_malloc_r+0x88>
 8011190:	0030      	movs	r0, r6
 8011192:	f000 f873 	bl	801127c <__malloc_lock>
 8011196:	4b38      	ldr	r3, [pc, #224]	; (8011278 <_malloc_r+0x100>)
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	001c      	movs	r4, r3
 801119e:	2c00      	cmp	r4, #0
 80111a0:	d133      	bne.n	801120a <_malloc_r+0x92>
 80111a2:	0039      	movs	r1, r7
 80111a4:	0030      	movs	r0, r6
 80111a6:	f7ff ffc5 	bl	8011134 <sbrk_aligned>
 80111aa:	0004      	movs	r4, r0
 80111ac:	1c43      	adds	r3, r0, #1
 80111ae:	d15e      	bne.n	801126e <_malloc_r+0xf6>
 80111b0:	9b00      	ldr	r3, [sp, #0]
 80111b2:	681c      	ldr	r4, [r3, #0]
 80111b4:	0025      	movs	r5, r4
 80111b6:	2d00      	cmp	r5, #0
 80111b8:	d14e      	bne.n	8011258 <_malloc_r+0xe0>
 80111ba:	2c00      	cmp	r4, #0
 80111bc:	d051      	beq.n	8011262 <_malloc_r+0xea>
 80111be:	6823      	ldr	r3, [r4, #0]
 80111c0:	0029      	movs	r1, r5
 80111c2:	18e3      	adds	r3, r4, r3
 80111c4:	0030      	movs	r0, r6
 80111c6:	9301      	str	r3, [sp, #4]
 80111c8:	f002 f882 	bl	80132d0 <_sbrk_r>
 80111cc:	9b01      	ldr	r3, [sp, #4]
 80111ce:	4283      	cmp	r3, r0
 80111d0:	d147      	bne.n	8011262 <_malloc_r+0xea>
 80111d2:	6823      	ldr	r3, [r4, #0]
 80111d4:	0030      	movs	r0, r6
 80111d6:	1aff      	subs	r7, r7, r3
 80111d8:	0039      	movs	r1, r7
 80111da:	f7ff ffab 	bl	8011134 <sbrk_aligned>
 80111de:	3001      	adds	r0, #1
 80111e0:	d03f      	beq.n	8011262 <_malloc_r+0xea>
 80111e2:	6823      	ldr	r3, [r4, #0]
 80111e4:	19db      	adds	r3, r3, r7
 80111e6:	6023      	str	r3, [r4, #0]
 80111e8:	9b00      	ldr	r3, [sp, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d040      	beq.n	8011272 <_malloc_r+0xfa>
 80111f0:	685a      	ldr	r2, [r3, #4]
 80111f2:	42a2      	cmp	r2, r4
 80111f4:	d133      	bne.n	801125e <_malloc_r+0xe6>
 80111f6:	2200      	movs	r2, #0
 80111f8:	605a      	str	r2, [r3, #4]
 80111fa:	e014      	b.n	8011226 <_malloc_r+0xae>
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	dac5      	bge.n	801118c <_malloc_r+0x14>
 8011200:	230c      	movs	r3, #12
 8011202:	2500      	movs	r5, #0
 8011204:	6033      	str	r3, [r6, #0]
 8011206:	0028      	movs	r0, r5
 8011208:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801120a:	6821      	ldr	r1, [r4, #0]
 801120c:	1bc9      	subs	r1, r1, r7
 801120e:	d420      	bmi.n	8011252 <_malloc_r+0xda>
 8011210:	290b      	cmp	r1, #11
 8011212:	d918      	bls.n	8011246 <_malloc_r+0xce>
 8011214:	19e2      	adds	r2, r4, r7
 8011216:	6027      	str	r7, [r4, #0]
 8011218:	42a3      	cmp	r3, r4
 801121a:	d112      	bne.n	8011242 <_malloc_r+0xca>
 801121c:	9b00      	ldr	r3, [sp, #0]
 801121e:	601a      	str	r2, [r3, #0]
 8011220:	6863      	ldr	r3, [r4, #4]
 8011222:	6011      	str	r1, [r2, #0]
 8011224:	6053      	str	r3, [r2, #4]
 8011226:	0030      	movs	r0, r6
 8011228:	0025      	movs	r5, r4
 801122a:	f000 f82f 	bl	801128c <__malloc_unlock>
 801122e:	2207      	movs	r2, #7
 8011230:	350b      	adds	r5, #11
 8011232:	1d23      	adds	r3, r4, #4
 8011234:	4395      	bics	r5, r2
 8011236:	1aea      	subs	r2, r5, r3
 8011238:	429d      	cmp	r5, r3
 801123a:	d0e4      	beq.n	8011206 <_malloc_r+0x8e>
 801123c:	1b5b      	subs	r3, r3, r5
 801123e:	50a3      	str	r3, [r4, r2]
 8011240:	e7e1      	b.n	8011206 <_malloc_r+0x8e>
 8011242:	605a      	str	r2, [r3, #4]
 8011244:	e7ec      	b.n	8011220 <_malloc_r+0xa8>
 8011246:	6862      	ldr	r2, [r4, #4]
 8011248:	42a3      	cmp	r3, r4
 801124a:	d1d5      	bne.n	80111f8 <_malloc_r+0x80>
 801124c:	9b00      	ldr	r3, [sp, #0]
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	e7e9      	b.n	8011226 <_malloc_r+0xae>
 8011252:	0023      	movs	r3, r4
 8011254:	6864      	ldr	r4, [r4, #4]
 8011256:	e7a2      	b.n	801119e <_malloc_r+0x26>
 8011258:	002c      	movs	r4, r5
 801125a:	686d      	ldr	r5, [r5, #4]
 801125c:	e7ab      	b.n	80111b6 <_malloc_r+0x3e>
 801125e:	0013      	movs	r3, r2
 8011260:	e7c4      	b.n	80111ec <_malloc_r+0x74>
 8011262:	230c      	movs	r3, #12
 8011264:	0030      	movs	r0, r6
 8011266:	6033      	str	r3, [r6, #0]
 8011268:	f000 f810 	bl	801128c <__malloc_unlock>
 801126c:	e7cb      	b.n	8011206 <_malloc_r+0x8e>
 801126e:	6027      	str	r7, [r4, #0]
 8011270:	e7d9      	b.n	8011226 <_malloc_r+0xae>
 8011272:	605b      	str	r3, [r3, #4]
 8011274:	deff      	udf	#255	; 0xff
 8011276:	46c0      	nop			; (mov r8, r8)
 8011278:	2000594c 	.word	0x2000594c

0801127c <__malloc_lock>:
 801127c:	b510      	push	{r4, lr}
 801127e:	4802      	ldr	r0, [pc, #8]	; (8011288 <__malloc_lock+0xc>)
 8011280:	f002 f877 	bl	8013372 <__retarget_lock_acquire_recursive>
 8011284:	bd10      	pop	{r4, pc}
 8011286:	46c0      	nop			; (mov r8, r8)
 8011288:	20005a94 	.word	0x20005a94

0801128c <__malloc_unlock>:
 801128c:	b510      	push	{r4, lr}
 801128e:	4802      	ldr	r0, [pc, #8]	; (8011298 <__malloc_unlock+0xc>)
 8011290:	f002 f870 	bl	8013374 <__retarget_lock_release_recursive>
 8011294:	bd10      	pop	{r4, pc}
 8011296:	46c0      	nop			; (mov r8, r8)
 8011298:	20005a94 	.word	0x20005a94

0801129c <sulp>:
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	0016      	movs	r6, r2
 80112a0:	000d      	movs	r5, r1
 80112a2:	f003 fe89 	bl	8014fb8 <__ulp>
 80112a6:	2e00      	cmp	r6, #0
 80112a8:	d00d      	beq.n	80112c6 <sulp+0x2a>
 80112aa:	236b      	movs	r3, #107	; 0x6b
 80112ac:	006a      	lsls	r2, r5, #1
 80112ae:	0d52      	lsrs	r2, r2, #21
 80112b0:	1a9b      	subs	r3, r3, r2
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	dd07      	ble.n	80112c6 <sulp+0x2a>
 80112b6:	2400      	movs	r4, #0
 80112b8:	4a03      	ldr	r2, [pc, #12]	; (80112c8 <sulp+0x2c>)
 80112ba:	051b      	lsls	r3, r3, #20
 80112bc:	189d      	adds	r5, r3, r2
 80112be:	002b      	movs	r3, r5
 80112c0:	0022      	movs	r2, r4
 80112c2:	f7f1 f807 	bl	80022d4 <__aeabi_dmul>
 80112c6:	bd70      	pop	{r4, r5, r6, pc}
 80112c8:	3ff00000 	.word	0x3ff00000

080112cc <_strtod_l>:
 80112cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112ce:	b0a1      	sub	sp, #132	; 0x84
 80112d0:	9219      	str	r2, [sp, #100]	; 0x64
 80112d2:	2200      	movs	r2, #0
 80112d4:	2600      	movs	r6, #0
 80112d6:	2700      	movs	r7, #0
 80112d8:	9004      	str	r0, [sp, #16]
 80112da:	9107      	str	r1, [sp, #28]
 80112dc:	921c      	str	r2, [sp, #112]	; 0x70
 80112de:	911b      	str	r1, [sp, #108]	; 0x6c
 80112e0:	780a      	ldrb	r2, [r1, #0]
 80112e2:	2a2b      	cmp	r2, #43	; 0x2b
 80112e4:	d055      	beq.n	8011392 <_strtod_l+0xc6>
 80112e6:	d841      	bhi.n	801136c <_strtod_l+0xa0>
 80112e8:	2a0d      	cmp	r2, #13
 80112ea:	d83b      	bhi.n	8011364 <_strtod_l+0x98>
 80112ec:	2a08      	cmp	r2, #8
 80112ee:	d83b      	bhi.n	8011368 <_strtod_l+0x9c>
 80112f0:	2a00      	cmp	r2, #0
 80112f2:	d044      	beq.n	801137e <_strtod_l+0xb2>
 80112f4:	2200      	movs	r2, #0
 80112f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80112f8:	2100      	movs	r1, #0
 80112fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80112fc:	9109      	str	r1, [sp, #36]	; 0x24
 80112fe:	782a      	ldrb	r2, [r5, #0]
 8011300:	2a30      	cmp	r2, #48	; 0x30
 8011302:	d000      	beq.n	8011306 <_strtod_l+0x3a>
 8011304:	e085      	b.n	8011412 <_strtod_l+0x146>
 8011306:	786a      	ldrb	r2, [r5, #1]
 8011308:	3120      	adds	r1, #32
 801130a:	438a      	bics	r2, r1
 801130c:	2a58      	cmp	r2, #88	; 0x58
 801130e:	d000      	beq.n	8011312 <_strtod_l+0x46>
 8011310:	e075      	b.n	80113fe <_strtod_l+0x132>
 8011312:	9302      	str	r3, [sp, #8]
 8011314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011316:	4a97      	ldr	r2, [pc, #604]	; (8011574 <_strtod_l+0x2a8>)
 8011318:	9301      	str	r3, [sp, #4]
 801131a:	ab1c      	add	r3, sp, #112	; 0x70
 801131c:	9300      	str	r3, [sp, #0]
 801131e:	9804      	ldr	r0, [sp, #16]
 8011320:	ab1d      	add	r3, sp, #116	; 0x74
 8011322:	a91b      	add	r1, sp, #108	; 0x6c
 8011324:	f002 ffbe 	bl	80142a4 <__gethex>
 8011328:	230f      	movs	r3, #15
 801132a:	0002      	movs	r2, r0
 801132c:	401a      	ands	r2, r3
 801132e:	0004      	movs	r4, r0
 8011330:	9205      	str	r2, [sp, #20]
 8011332:	4218      	tst	r0, r3
 8011334:	d005      	beq.n	8011342 <_strtod_l+0x76>
 8011336:	2a06      	cmp	r2, #6
 8011338:	d12d      	bne.n	8011396 <_strtod_l+0xca>
 801133a:	1c6b      	adds	r3, r5, #1
 801133c:	931b      	str	r3, [sp, #108]	; 0x6c
 801133e:	2300      	movs	r3, #0
 8011340:	930f      	str	r3, [sp, #60]	; 0x3c
 8011342:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011344:	2b00      	cmp	r3, #0
 8011346:	d002      	beq.n	801134e <_strtod_l+0x82>
 8011348:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801134a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801134c:	6013      	str	r3, [r2, #0]
 801134e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011350:	2b00      	cmp	r3, #0
 8011352:	d01b      	beq.n	801138c <_strtod_l+0xc0>
 8011354:	2380      	movs	r3, #128	; 0x80
 8011356:	0032      	movs	r2, r6
 8011358:	061b      	lsls	r3, r3, #24
 801135a:	18fb      	adds	r3, r7, r3
 801135c:	0010      	movs	r0, r2
 801135e:	0019      	movs	r1, r3
 8011360:	b021      	add	sp, #132	; 0x84
 8011362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011364:	2a20      	cmp	r2, #32
 8011366:	d1c5      	bne.n	80112f4 <_strtod_l+0x28>
 8011368:	3101      	adds	r1, #1
 801136a:	e7b8      	b.n	80112de <_strtod_l+0x12>
 801136c:	2a2d      	cmp	r2, #45	; 0x2d
 801136e:	d1c1      	bne.n	80112f4 <_strtod_l+0x28>
 8011370:	3a2c      	subs	r2, #44	; 0x2c
 8011372:	920f      	str	r2, [sp, #60]	; 0x3c
 8011374:	1c4a      	adds	r2, r1, #1
 8011376:	921b      	str	r2, [sp, #108]	; 0x6c
 8011378:	784a      	ldrb	r2, [r1, #1]
 801137a:	2a00      	cmp	r2, #0
 801137c:	d1bc      	bne.n	80112f8 <_strtod_l+0x2c>
 801137e:	9b07      	ldr	r3, [sp, #28]
 8011380:	931b      	str	r3, [sp, #108]	; 0x6c
 8011382:	2300      	movs	r3, #0
 8011384:	930f      	str	r3, [sp, #60]	; 0x3c
 8011386:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011388:	2b00      	cmp	r3, #0
 801138a:	d1dd      	bne.n	8011348 <_strtod_l+0x7c>
 801138c:	0032      	movs	r2, r6
 801138e:	003b      	movs	r3, r7
 8011390:	e7e4      	b.n	801135c <_strtod_l+0x90>
 8011392:	2200      	movs	r2, #0
 8011394:	e7ed      	b.n	8011372 <_strtod_l+0xa6>
 8011396:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011398:	2a00      	cmp	r2, #0
 801139a:	d007      	beq.n	80113ac <_strtod_l+0xe0>
 801139c:	2135      	movs	r1, #53	; 0x35
 801139e:	a81e      	add	r0, sp, #120	; 0x78
 80113a0:	f003 fefb 	bl	801519a <__copybits>
 80113a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80113a6:	9804      	ldr	r0, [sp, #16]
 80113a8:	f003 fac4 	bl	8014934 <_Bfree>
 80113ac:	9805      	ldr	r0, [sp, #20]
 80113ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113b0:	3801      	subs	r0, #1
 80113b2:	2804      	cmp	r0, #4
 80113b4:	d806      	bhi.n	80113c4 <_strtod_l+0xf8>
 80113b6:	f7ee feaf 	bl	8000118 <__gnu_thumb1_case_uqi>
 80113ba:	0312      	.short	0x0312
 80113bc:	1e1c      	.short	0x1e1c
 80113be:	12          	.byte	0x12
 80113bf:	00          	.byte	0x00
 80113c0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80113c2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80113c4:	05e4      	lsls	r4, r4, #23
 80113c6:	d502      	bpl.n	80113ce <_strtod_l+0x102>
 80113c8:	2380      	movs	r3, #128	; 0x80
 80113ca:	061b      	lsls	r3, r3, #24
 80113cc:	431f      	orrs	r7, r3
 80113ce:	4b6a      	ldr	r3, [pc, #424]	; (8011578 <_strtod_l+0x2ac>)
 80113d0:	423b      	tst	r3, r7
 80113d2:	d1b6      	bne.n	8011342 <_strtod_l+0x76>
 80113d4:	f001 ffa2 	bl	801331c <__errno>
 80113d8:	2322      	movs	r3, #34	; 0x22
 80113da:	6003      	str	r3, [r0, #0]
 80113dc:	e7b1      	b.n	8011342 <_strtod_l+0x76>
 80113de:	4967      	ldr	r1, [pc, #412]	; (801157c <_strtod_l+0x2b0>)
 80113e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80113e2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80113e4:	400a      	ands	r2, r1
 80113e6:	4966      	ldr	r1, [pc, #408]	; (8011580 <_strtod_l+0x2b4>)
 80113e8:	185b      	adds	r3, r3, r1
 80113ea:	051b      	lsls	r3, r3, #20
 80113ec:	431a      	orrs	r2, r3
 80113ee:	0017      	movs	r7, r2
 80113f0:	e7e8      	b.n	80113c4 <_strtod_l+0xf8>
 80113f2:	4f61      	ldr	r7, [pc, #388]	; (8011578 <_strtod_l+0x2ac>)
 80113f4:	e7e6      	b.n	80113c4 <_strtod_l+0xf8>
 80113f6:	2601      	movs	r6, #1
 80113f8:	4f62      	ldr	r7, [pc, #392]	; (8011584 <_strtod_l+0x2b8>)
 80113fa:	4276      	negs	r6, r6
 80113fc:	e7e2      	b.n	80113c4 <_strtod_l+0xf8>
 80113fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011400:	1c5a      	adds	r2, r3, #1
 8011402:	921b      	str	r2, [sp, #108]	; 0x6c
 8011404:	785b      	ldrb	r3, [r3, #1]
 8011406:	2b30      	cmp	r3, #48	; 0x30
 8011408:	d0f9      	beq.n	80113fe <_strtod_l+0x132>
 801140a:	2b00      	cmp	r3, #0
 801140c:	d099      	beq.n	8011342 <_strtod_l+0x76>
 801140e:	2301      	movs	r3, #1
 8011410:	9309      	str	r3, [sp, #36]	; 0x24
 8011412:	2500      	movs	r5, #0
 8011414:	220a      	movs	r2, #10
 8011416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011418:	950d      	str	r5, [sp, #52]	; 0x34
 801141a:	9310      	str	r3, [sp, #64]	; 0x40
 801141c:	9508      	str	r5, [sp, #32]
 801141e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011420:	7804      	ldrb	r4, [r0, #0]
 8011422:	0023      	movs	r3, r4
 8011424:	3b30      	subs	r3, #48	; 0x30
 8011426:	b2d9      	uxtb	r1, r3
 8011428:	2909      	cmp	r1, #9
 801142a:	d927      	bls.n	801147c <_strtod_l+0x1b0>
 801142c:	2201      	movs	r2, #1
 801142e:	4956      	ldr	r1, [pc, #344]	; (8011588 <_strtod_l+0x2bc>)
 8011430:	f001 fe0f 	bl	8013052 <strncmp>
 8011434:	2800      	cmp	r0, #0
 8011436:	d031      	beq.n	801149c <_strtod_l+0x1d0>
 8011438:	2000      	movs	r0, #0
 801143a:	0023      	movs	r3, r4
 801143c:	4684      	mov	ip, r0
 801143e:	9a08      	ldr	r2, [sp, #32]
 8011440:	900c      	str	r0, [sp, #48]	; 0x30
 8011442:	9205      	str	r2, [sp, #20]
 8011444:	2220      	movs	r2, #32
 8011446:	0019      	movs	r1, r3
 8011448:	4391      	bics	r1, r2
 801144a:	000a      	movs	r2, r1
 801144c:	2100      	movs	r1, #0
 801144e:	9106      	str	r1, [sp, #24]
 8011450:	2a45      	cmp	r2, #69	; 0x45
 8011452:	d000      	beq.n	8011456 <_strtod_l+0x18a>
 8011454:	e0c2      	b.n	80115dc <_strtod_l+0x310>
 8011456:	9b05      	ldr	r3, [sp, #20]
 8011458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801145a:	4303      	orrs	r3, r0
 801145c:	4313      	orrs	r3, r2
 801145e:	428b      	cmp	r3, r1
 8011460:	d08d      	beq.n	801137e <_strtod_l+0xb2>
 8011462:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011464:	9307      	str	r3, [sp, #28]
 8011466:	3301      	adds	r3, #1
 8011468:	931b      	str	r3, [sp, #108]	; 0x6c
 801146a:	9b07      	ldr	r3, [sp, #28]
 801146c:	785b      	ldrb	r3, [r3, #1]
 801146e:	2b2b      	cmp	r3, #43	; 0x2b
 8011470:	d071      	beq.n	8011556 <_strtod_l+0x28a>
 8011472:	000c      	movs	r4, r1
 8011474:	2b2d      	cmp	r3, #45	; 0x2d
 8011476:	d174      	bne.n	8011562 <_strtod_l+0x296>
 8011478:	2401      	movs	r4, #1
 801147a:	e06d      	b.n	8011558 <_strtod_l+0x28c>
 801147c:	9908      	ldr	r1, [sp, #32]
 801147e:	2908      	cmp	r1, #8
 8011480:	dc09      	bgt.n	8011496 <_strtod_l+0x1ca>
 8011482:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011484:	4351      	muls	r1, r2
 8011486:	185b      	adds	r3, r3, r1
 8011488:	930d      	str	r3, [sp, #52]	; 0x34
 801148a:	9b08      	ldr	r3, [sp, #32]
 801148c:	3001      	adds	r0, #1
 801148e:	3301      	adds	r3, #1
 8011490:	9308      	str	r3, [sp, #32]
 8011492:	901b      	str	r0, [sp, #108]	; 0x6c
 8011494:	e7c3      	b.n	801141e <_strtod_l+0x152>
 8011496:	4355      	muls	r5, r2
 8011498:	195d      	adds	r5, r3, r5
 801149a:	e7f6      	b.n	801148a <_strtod_l+0x1be>
 801149c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801149e:	1c5a      	adds	r2, r3, #1
 80114a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80114a2:	9a08      	ldr	r2, [sp, #32]
 80114a4:	785b      	ldrb	r3, [r3, #1]
 80114a6:	2a00      	cmp	r2, #0
 80114a8:	d03a      	beq.n	8011520 <_strtod_l+0x254>
 80114aa:	900c      	str	r0, [sp, #48]	; 0x30
 80114ac:	9205      	str	r2, [sp, #20]
 80114ae:	001a      	movs	r2, r3
 80114b0:	3a30      	subs	r2, #48	; 0x30
 80114b2:	2a09      	cmp	r2, #9
 80114b4:	d912      	bls.n	80114dc <_strtod_l+0x210>
 80114b6:	2201      	movs	r2, #1
 80114b8:	4694      	mov	ip, r2
 80114ba:	e7c3      	b.n	8011444 <_strtod_l+0x178>
 80114bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80114be:	3001      	adds	r0, #1
 80114c0:	1c5a      	adds	r2, r3, #1
 80114c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80114c4:	785b      	ldrb	r3, [r3, #1]
 80114c6:	2b30      	cmp	r3, #48	; 0x30
 80114c8:	d0f8      	beq.n	80114bc <_strtod_l+0x1f0>
 80114ca:	001a      	movs	r2, r3
 80114cc:	3a31      	subs	r2, #49	; 0x31
 80114ce:	2a08      	cmp	r2, #8
 80114d0:	d83c      	bhi.n	801154c <_strtod_l+0x280>
 80114d2:	900c      	str	r0, [sp, #48]	; 0x30
 80114d4:	2000      	movs	r0, #0
 80114d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80114d8:	9005      	str	r0, [sp, #20]
 80114da:	9210      	str	r2, [sp, #64]	; 0x40
 80114dc:	001a      	movs	r2, r3
 80114de:	1c41      	adds	r1, r0, #1
 80114e0:	3a30      	subs	r2, #48	; 0x30
 80114e2:	2b30      	cmp	r3, #48	; 0x30
 80114e4:	d016      	beq.n	8011514 <_strtod_l+0x248>
 80114e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114e8:	185b      	adds	r3, r3, r1
 80114ea:	930c      	str	r3, [sp, #48]	; 0x30
 80114ec:	9b05      	ldr	r3, [sp, #20]
 80114ee:	210a      	movs	r1, #10
 80114f0:	469c      	mov	ip, r3
 80114f2:	4484      	add	ip, r0
 80114f4:	4563      	cmp	r3, ip
 80114f6:	d115      	bne.n	8011524 <_strtod_l+0x258>
 80114f8:	9905      	ldr	r1, [sp, #20]
 80114fa:	9b05      	ldr	r3, [sp, #20]
 80114fc:	3101      	adds	r1, #1
 80114fe:	1809      	adds	r1, r1, r0
 8011500:	181b      	adds	r3, r3, r0
 8011502:	9105      	str	r1, [sp, #20]
 8011504:	2b08      	cmp	r3, #8
 8011506:	dc19      	bgt.n	801153c <_strtod_l+0x270>
 8011508:	230a      	movs	r3, #10
 801150a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801150c:	434b      	muls	r3, r1
 801150e:	2100      	movs	r1, #0
 8011510:	18d3      	adds	r3, r2, r3
 8011512:	930d      	str	r3, [sp, #52]	; 0x34
 8011514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011516:	0008      	movs	r0, r1
 8011518:	1c5a      	adds	r2, r3, #1
 801151a:	921b      	str	r2, [sp, #108]	; 0x6c
 801151c:	785b      	ldrb	r3, [r3, #1]
 801151e:	e7c6      	b.n	80114ae <_strtod_l+0x1e2>
 8011520:	9808      	ldr	r0, [sp, #32]
 8011522:	e7d0      	b.n	80114c6 <_strtod_l+0x1fa>
 8011524:	1c5c      	adds	r4, r3, #1
 8011526:	2b08      	cmp	r3, #8
 8011528:	dc04      	bgt.n	8011534 <_strtod_l+0x268>
 801152a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801152c:	434b      	muls	r3, r1
 801152e:	930d      	str	r3, [sp, #52]	; 0x34
 8011530:	0023      	movs	r3, r4
 8011532:	e7df      	b.n	80114f4 <_strtod_l+0x228>
 8011534:	2c10      	cmp	r4, #16
 8011536:	dcfb      	bgt.n	8011530 <_strtod_l+0x264>
 8011538:	434d      	muls	r5, r1
 801153a:	e7f9      	b.n	8011530 <_strtod_l+0x264>
 801153c:	9b05      	ldr	r3, [sp, #20]
 801153e:	2100      	movs	r1, #0
 8011540:	2b10      	cmp	r3, #16
 8011542:	dce7      	bgt.n	8011514 <_strtod_l+0x248>
 8011544:	230a      	movs	r3, #10
 8011546:	435d      	muls	r5, r3
 8011548:	1955      	adds	r5, r2, r5
 801154a:	e7e3      	b.n	8011514 <_strtod_l+0x248>
 801154c:	2200      	movs	r2, #0
 801154e:	920c      	str	r2, [sp, #48]	; 0x30
 8011550:	9205      	str	r2, [sp, #20]
 8011552:	3201      	adds	r2, #1
 8011554:	e7b0      	b.n	80114b8 <_strtod_l+0x1ec>
 8011556:	2400      	movs	r4, #0
 8011558:	9b07      	ldr	r3, [sp, #28]
 801155a:	3302      	adds	r3, #2
 801155c:	931b      	str	r3, [sp, #108]	; 0x6c
 801155e:	9b07      	ldr	r3, [sp, #28]
 8011560:	789b      	ldrb	r3, [r3, #2]
 8011562:	001a      	movs	r2, r3
 8011564:	3a30      	subs	r2, #48	; 0x30
 8011566:	2a09      	cmp	r2, #9
 8011568:	d914      	bls.n	8011594 <_strtod_l+0x2c8>
 801156a:	9a07      	ldr	r2, [sp, #28]
 801156c:	921b      	str	r2, [sp, #108]	; 0x6c
 801156e:	2200      	movs	r2, #0
 8011570:	e033      	b.n	80115da <_strtod_l+0x30e>
 8011572:	46c0      	nop			; (mov r8, r8)
 8011574:	08018554 	.word	0x08018554
 8011578:	7ff00000 	.word	0x7ff00000
 801157c:	ffefffff 	.word	0xffefffff
 8011580:	00000433 	.word	0x00000433
 8011584:	7fffffff 	.word	0x7fffffff
 8011588:	08018550 	.word	0x08018550
 801158c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801158e:	1c5a      	adds	r2, r3, #1
 8011590:	921b      	str	r2, [sp, #108]	; 0x6c
 8011592:	785b      	ldrb	r3, [r3, #1]
 8011594:	2b30      	cmp	r3, #48	; 0x30
 8011596:	d0f9      	beq.n	801158c <_strtod_l+0x2c0>
 8011598:	2200      	movs	r2, #0
 801159a:	9206      	str	r2, [sp, #24]
 801159c:	001a      	movs	r2, r3
 801159e:	3a31      	subs	r2, #49	; 0x31
 80115a0:	2a08      	cmp	r2, #8
 80115a2:	d81b      	bhi.n	80115dc <_strtod_l+0x310>
 80115a4:	3b30      	subs	r3, #48	; 0x30
 80115a6:	930e      	str	r3, [sp, #56]	; 0x38
 80115a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80115aa:	9306      	str	r3, [sp, #24]
 80115ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80115ae:	1c59      	adds	r1, r3, #1
 80115b0:	911b      	str	r1, [sp, #108]	; 0x6c
 80115b2:	785b      	ldrb	r3, [r3, #1]
 80115b4:	001a      	movs	r2, r3
 80115b6:	3a30      	subs	r2, #48	; 0x30
 80115b8:	2a09      	cmp	r2, #9
 80115ba:	d93a      	bls.n	8011632 <_strtod_l+0x366>
 80115bc:	9a06      	ldr	r2, [sp, #24]
 80115be:	1a8a      	subs	r2, r1, r2
 80115c0:	49b2      	ldr	r1, [pc, #712]	; (801188c <_strtod_l+0x5c0>)
 80115c2:	9106      	str	r1, [sp, #24]
 80115c4:	2a08      	cmp	r2, #8
 80115c6:	dc04      	bgt.n	80115d2 <_strtod_l+0x306>
 80115c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115ca:	9206      	str	r2, [sp, #24]
 80115cc:	428a      	cmp	r2, r1
 80115ce:	dd00      	ble.n	80115d2 <_strtod_l+0x306>
 80115d0:	9106      	str	r1, [sp, #24]
 80115d2:	2c00      	cmp	r4, #0
 80115d4:	d002      	beq.n	80115dc <_strtod_l+0x310>
 80115d6:	9a06      	ldr	r2, [sp, #24]
 80115d8:	4252      	negs	r2, r2
 80115da:	9206      	str	r2, [sp, #24]
 80115dc:	9a05      	ldr	r2, [sp, #20]
 80115de:	2a00      	cmp	r2, #0
 80115e0:	d14d      	bne.n	801167e <_strtod_l+0x3b2>
 80115e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115e4:	4310      	orrs	r0, r2
 80115e6:	d000      	beq.n	80115ea <_strtod_l+0x31e>
 80115e8:	e6ab      	b.n	8011342 <_strtod_l+0x76>
 80115ea:	4662      	mov	r2, ip
 80115ec:	2a00      	cmp	r2, #0
 80115ee:	d000      	beq.n	80115f2 <_strtod_l+0x326>
 80115f0:	e6c5      	b.n	801137e <_strtod_l+0xb2>
 80115f2:	2b69      	cmp	r3, #105	; 0x69
 80115f4:	d027      	beq.n	8011646 <_strtod_l+0x37a>
 80115f6:	dc23      	bgt.n	8011640 <_strtod_l+0x374>
 80115f8:	2b49      	cmp	r3, #73	; 0x49
 80115fa:	d024      	beq.n	8011646 <_strtod_l+0x37a>
 80115fc:	2b4e      	cmp	r3, #78	; 0x4e
 80115fe:	d000      	beq.n	8011602 <_strtod_l+0x336>
 8011600:	e6bd      	b.n	801137e <_strtod_l+0xb2>
 8011602:	49a3      	ldr	r1, [pc, #652]	; (8011890 <_strtod_l+0x5c4>)
 8011604:	a81b      	add	r0, sp, #108	; 0x6c
 8011606:	f003 f883 	bl	8014710 <__match>
 801160a:	2800      	cmp	r0, #0
 801160c:	d100      	bne.n	8011610 <_strtod_l+0x344>
 801160e:	e6b6      	b.n	801137e <_strtod_l+0xb2>
 8011610:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	2b28      	cmp	r3, #40	; 0x28
 8011616:	d12c      	bne.n	8011672 <_strtod_l+0x3a6>
 8011618:	499e      	ldr	r1, [pc, #632]	; (8011894 <_strtod_l+0x5c8>)
 801161a:	aa1e      	add	r2, sp, #120	; 0x78
 801161c:	a81b      	add	r0, sp, #108	; 0x6c
 801161e:	f003 f88b 	bl	8014738 <__hexnan>
 8011622:	2805      	cmp	r0, #5
 8011624:	d125      	bne.n	8011672 <_strtod_l+0x3a6>
 8011626:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011628:	4a9b      	ldr	r2, [pc, #620]	; (8011898 <_strtod_l+0x5cc>)
 801162a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801162c:	431a      	orrs	r2, r3
 801162e:	0017      	movs	r7, r2
 8011630:	e687      	b.n	8011342 <_strtod_l+0x76>
 8011632:	220a      	movs	r2, #10
 8011634:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011636:	434a      	muls	r2, r1
 8011638:	18d2      	adds	r2, r2, r3
 801163a:	3a30      	subs	r2, #48	; 0x30
 801163c:	920e      	str	r2, [sp, #56]	; 0x38
 801163e:	e7b5      	b.n	80115ac <_strtod_l+0x2e0>
 8011640:	2b6e      	cmp	r3, #110	; 0x6e
 8011642:	d0de      	beq.n	8011602 <_strtod_l+0x336>
 8011644:	e69b      	b.n	801137e <_strtod_l+0xb2>
 8011646:	4995      	ldr	r1, [pc, #596]	; (801189c <_strtod_l+0x5d0>)
 8011648:	a81b      	add	r0, sp, #108	; 0x6c
 801164a:	f003 f861 	bl	8014710 <__match>
 801164e:	2800      	cmp	r0, #0
 8011650:	d100      	bne.n	8011654 <_strtod_l+0x388>
 8011652:	e694      	b.n	801137e <_strtod_l+0xb2>
 8011654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011656:	4992      	ldr	r1, [pc, #584]	; (80118a0 <_strtod_l+0x5d4>)
 8011658:	3b01      	subs	r3, #1
 801165a:	a81b      	add	r0, sp, #108	; 0x6c
 801165c:	931b      	str	r3, [sp, #108]	; 0x6c
 801165e:	f003 f857 	bl	8014710 <__match>
 8011662:	2800      	cmp	r0, #0
 8011664:	d102      	bne.n	801166c <_strtod_l+0x3a0>
 8011666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011668:	3301      	adds	r3, #1
 801166a:	931b      	str	r3, [sp, #108]	; 0x6c
 801166c:	2600      	movs	r6, #0
 801166e:	4f8a      	ldr	r7, [pc, #552]	; (8011898 <_strtod_l+0x5cc>)
 8011670:	e667      	b.n	8011342 <_strtod_l+0x76>
 8011672:	488c      	ldr	r0, [pc, #560]	; (80118a4 <_strtod_l+0x5d8>)
 8011674:	f001 fe9c 	bl	80133b0 <nan>
 8011678:	0006      	movs	r6, r0
 801167a:	000f      	movs	r7, r1
 801167c:	e661      	b.n	8011342 <_strtod_l+0x76>
 801167e:	9b06      	ldr	r3, [sp, #24]
 8011680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011682:	1a9b      	subs	r3, r3, r2
 8011684:	9309      	str	r3, [sp, #36]	; 0x24
 8011686:	9b08      	ldr	r3, [sp, #32]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d101      	bne.n	8011690 <_strtod_l+0x3c4>
 801168c:	9b05      	ldr	r3, [sp, #20]
 801168e:	9308      	str	r3, [sp, #32]
 8011690:	9c05      	ldr	r4, [sp, #20]
 8011692:	2c10      	cmp	r4, #16
 8011694:	dd00      	ble.n	8011698 <_strtod_l+0x3cc>
 8011696:	2410      	movs	r4, #16
 8011698:	980d      	ldr	r0, [sp, #52]	; 0x34
 801169a:	f7f1 fce3 	bl	8003064 <__aeabi_ui2d>
 801169e:	9b05      	ldr	r3, [sp, #20]
 80116a0:	0006      	movs	r6, r0
 80116a2:	000f      	movs	r7, r1
 80116a4:	2b09      	cmp	r3, #9
 80116a6:	dd15      	ble.n	80116d4 <_strtod_l+0x408>
 80116a8:	0022      	movs	r2, r4
 80116aa:	4b7f      	ldr	r3, [pc, #508]	; (80118a8 <_strtod_l+0x5dc>)
 80116ac:	3a09      	subs	r2, #9
 80116ae:	00d2      	lsls	r2, r2, #3
 80116b0:	189b      	adds	r3, r3, r2
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	f7f0 fe0d 	bl	80022d4 <__aeabi_dmul>
 80116ba:	0006      	movs	r6, r0
 80116bc:	0028      	movs	r0, r5
 80116be:	000f      	movs	r7, r1
 80116c0:	f7f1 fcd0 	bl	8003064 <__aeabi_ui2d>
 80116c4:	0002      	movs	r2, r0
 80116c6:	000b      	movs	r3, r1
 80116c8:	0030      	movs	r0, r6
 80116ca:	0039      	movs	r1, r7
 80116cc:	f7ef fea8 	bl	8001420 <__aeabi_dadd>
 80116d0:	0006      	movs	r6, r0
 80116d2:	000f      	movs	r7, r1
 80116d4:	9b05      	ldr	r3, [sp, #20]
 80116d6:	2b0f      	cmp	r3, #15
 80116d8:	dc39      	bgt.n	801174e <_strtod_l+0x482>
 80116da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d100      	bne.n	80116e2 <_strtod_l+0x416>
 80116e0:	e62f      	b.n	8011342 <_strtod_l+0x76>
 80116e2:	dd24      	ble.n	801172e <_strtod_l+0x462>
 80116e4:	2b16      	cmp	r3, #22
 80116e6:	dc09      	bgt.n	80116fc <_strtod_l+0x430>
 80116e8:	496f      	ldr	r1, [pc, #444]	; (80118a8 <_strtod_l+0x5dc>)
 80116ea:	00db      	lsls	r3, r3, #3
 80116ec:	18c9      	adds	r1, r1, r3
 80116ee:	0032      	movs	r2, r6
 80116f0:	6808      	ldr	r0, [r1, #0]
 80116f2:	6849      	ldr	r1, [r1, #4]
 80116f4:	003b      	movs	r3, r7
 80116f6:	f7f0 fded 	bl	80022d4 <__aeabi_dmul>
 80116fa:	e7bd      	b.n	8011678 <_strtod_l+0x3ac>
 80116fc:	2325      	movs	r3, #37	; 0x25
 80116fe:	9a05      	ldr	r2, [sp, #20]
 8011700:	1a9b      	subs	r3, r3, r2
 8011702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011704:	4293      	cmp	r3, r2
 8011706:	db22      	blt.n	801174e <_strtod_l+0x482>
 8011708:	240f      	movs	r4, #15
 801170a:	9b05      	ldr	r3, [sp, #20]
 801170c:	4d66      	ldr	r5, [pc, #408]	; (80118a8 <_strtod_l+0x5dc>)
 801170e:	1ae4      	subs	r4, r4, r3
 8011710:	00e1      	lsls	r1, r4, #3
 8011712:	1869      	adds	r1, r5, r1
 8011714:	0032      	movs	r2, r6
 8011716:	6808      	ldr	r0, [r1, #0]
 8011718:	6849      	ldr	r1, [r1, #4]
 801171a:	003b      	movs	r3, r7
 801171c:	f7f0 fdda 	bl	80022d4 <__aeabi_dmul>
 8011720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011722:	1b1c      	subs	r4, r3, r4
 8011724:	00e4      	lsls	r4, r4, #3
 8011726:	192d      	adds	r5, r5, r4
 8011728:	682a      	ldr	r2, [r5, #0]
 801172a:	686b      	ldr	r3, [r5, #4]
 801172c:	e7e3      	b.n	80116f6 <_strtod_l+0x42a>
 801172e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011730:	3316      	adds	r3, #22
 8011732:	db0c      	blt.n	801174e <_strtod_l+0x482>
 8011734:	9906      	ldr	r1, [sp, #24]
 8011736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011738:	4b5b      	ldr	r3, [pc, #364]	; (80118a8 <_strtod_l+0x5dc>)
 801173a:	1a52      	subs	r2, r2, r1
 801173c:	00d2      	lsls	r2, r2, #3
 801173e:	189b      	adds	r3, r3, r2
 8011740:	0030      	movs	r0, r6
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	0039      	movs	r1, r7
 8011748:	f7f0 f9ca 	bl	8001ae0 <__aeabi_ddiv>
 801174c:	e794      	b.n	8011678 <_strtod_l+0x3ac>
 801174e:	9b05      	ldr	r3, [sp, #20]
 8011750:	1b1c      	subs	r4, r3, r4
 8011752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011754:	18e4      	adds	r4, r4, r3
 8011756:	2c00      	cmp	r4, #0
 8011758:	dd72      	ble.n	8011840 <_strtod_l+0x574>
 801175a:	220f      	movs	r2, #15
 801175c:	0023      	movs	r3, r4
 801175e:	4013      	ands	r3, r2
 8011760:	4214      	tst	r4, r2
 8011762:	d00a      	beq.n	801177a <_strtod_l+0x4ae>
 8011764:	4950      	ldr	r1, [pc, #320]	; (80118a8 <_strtod_l+0x5dc>)
 8011766:	00db      	lsls	r3, r3, #3
 8011768:	18c9      	adds	r1, r1, r3
 801176a:	0032      	movs	r2, r6
 801176c:	6808      	ldr	r0, [r1, #0]
 801176e:	6849      	ldr	r1, [r1, #4]
 8011770:	003b      	movs	r3, r7
 8011772:	f7f0 fdaf 	bl	80022d4 <__aeabi_dmul>
 8011776:	0006      	movs	r6, r0
 8011778:	000f      	movs	r7, r1
 801177a:	230f      	movs	r3, #15
 801177c:	439c      	bics	r4, r3
 801177e:	d04a      	beq.n	8011816 <_strtod_l+0x54a>
 8011780:	3326      	adds	r3, #38	; 0x26
 8011782:	33ff      	adds	r3, #255	; 0xff
 8011784:	429c      	cmp	r4, r3
 8011786:	dd22      	ble.n	80117ce <_strtod_l+0x502>
 8011788:	2300      	movs	r3, #0
 801178a:	9305      	str	r3, [sp, #20]
 801178c:	9306      	str	r3, [sp, #24]
 801178e:	930d      	str	r3, [sp, #52]	; 0x34
 8011790:	9308      	str	r3, [sp, #32]
 8011792:	2322      	movs	r3, #34	; 0x22
 8011794:	2600      	movs	r6, #0
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	4f3f      	ldr	r7, [pc, #252]	; (8011898 <_strtod_l+0x5cc>)
 801179a:	6013      	str	r3, [r2, #0]
 801179c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801179e:	42b3      	cmp	r3, r6
 80117a0:	d100      	bne.n	80117a4 <_strtod_l+0x4d8>
 80117a2:	e5ce      	b.n	8011342 <_strtod_l+0x76>
 80117a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80117a6:	9804      	ldr	r0, [sp, #16]
 80117a8:	f003 f8c4 	bl	8014934 <_Bfree>
 80117ac:	9908      	ldr	r1, [sp, #32]
 80117ae:	9804      	ldr	r0, [sp, #16]
 80117b0:	f003 f8c0 	bl	8014934 <_Bfree>
 80117b4:	9906      	ldr	r1, [sp, #24]
 80117b6:	9804      	ldr	r0, [sp, #16]
 80117b8:	f003 f8bc 	bl	8014934 <_Bfree>
 80117bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80117be:	9804      	ldr	r0, [sp, #16]
 80117c0:	f003 f8b8 	bl	8014934 <_Bfree>
 80117c4:	9905      	ldr	r1, [sp, #20]
 80117c6:	9804      	ldr	r0, [sp, #16]
 80117c8:	f003 f8b4 	bl	8014934 <_Bfree>
 80117cc:	e5b9      	b.n	8011342 <_strtod_l+0x76>
 80117ce:	2300      	movs	r3, #0
 80117d0:	0030      	movs	r0, r6
 80117d2:	0039      	movs	r1, r7
 80117d4:	4d35      	ldr	r5, [pc, #212]	; (80118ac <_strtod_l+0x5e0>)
 80117d6:	1124      	asrs	r4, r4, #4
 80117d8:	9307      	str	r3, [sp, #28]
 80117da:	2c01      	cmp	r4, #1
 80117dc:	dc1e      	bgt.n	801181c <_strtod_l+0x550>
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d001      	beq.n	80117e6 <_strtod_l+0x51a>
 80117e2:	0006      	movs	r6, r0
 80117e4:	000f      	movs	r7, r1
 80117e6:	4b32      	ldr	r3, [pc, #200]	; (80118b0 <_strtod_l+0x5e4>)
 80117e8:	9a07      	ldr	r2, [sp, #28]
 80117ea:	18ff      	adds	r7, r7, r3
 80117ec:	4b2f      	ldr	r3, [pc, #188]	; (80118ac <_strtod_l+0x5e0>)
 80117ee:	00d2      	lsls	r2, r2, #3
 80117f0:	189d      	adds	r5, r3, r2
 80117f2:	6828      	ldr	r0, [r5, #0]
 80117f4:	6869      	ldr	r1, [r5, #4]
 80117f6:	0032      	movs	r2, r6
 80117f8:	003b      	movs	r3, r7
 80117fa:	f7f0 fd6b 	bl	80022d4 <__aeabi_dmul>
 80117fe:	4b26      	ldr	r3, [pc, #152]	; (8011898 <_strtod_l+0x5cc>)
 8011800:	4a2c      	ldr	r2, [pc, #176]	; (80118b4 <_strtod_l+0x5e8>)
 8011802:	0006      	movs	r6, r0
 8011804:	400b      	ands	r3, r1
 8011806:	4293      	cmp	r3, r2
 8011808:	d8be      	bhi.n	8011788 <_strtod_l+0x4bc>
 801180a:	4a2b      	ldr	r2, [pc, #172]	; (80118b8 <_strtod_l+0x5ec>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d913      	bls.n	8011838 <_strtod_l+0x56c>
 8011810:	2601      	movs	r6, #1
 8011812:	4f2a      	ldr	r7, [pc, #168]	; (80118bc <_strtod_l+0x5f0>)
 8011814:	4276      	negs	r6, r6
 8011816:	2300      	movs	r3, #0
 8011818:	9307      	str	r3, [sp, #28]
 801181a:	e088      	b.n	801192e <_strtod_l+0x662>
 801181c:	2201      	movs	r2, #1
 801181e:	4214      	tst	r4, r2
 8011820:	d004      	beq.n	801182c <_strtod_l+0x560>
 8011822:	682a      	ldr	r2, [r5, #0]
 8011824:	686b      	ldr	r3, [r5, #4]
 8011826:	f7f0 fd55 	bl	80022d4 <__aeabi_dmul>
 801182a:	2301      	movs	r3, #1
 801182c:	9a07      	ldr	r2, [sp, #28]
 801182e:	1064      	asrs	r4, r4, #1
 8011830:	3201      	adds	r2, #1
 8011832:	9207      	str	r2, [sp, #28]
 8011834:	3508      	adds	r5, #8
 8011836:	e7d0      	b.n	80117da <_strtod_l+0x50e>
 8011838:	23d4      	movs	r3, #212	; 0xd4
 801183a:	049b      	lsls	r3, r3, #18
 801183c:	18cf      	adds	r7, r1, r3
 801183e:	e7ea      	b.n	8011816 <_strtod_l+0x54a>
 8011840:	2c00      	cmp	r4, #0
 8011842:	d0e8      	beq.n	8011816 <_strtod_l+0x54a>
 8011844:	4264      	negs	r4, r4
 8011846:	230f      	movs	r3, #15
 8011848:	0022      	movs	r2, r4
 801184a:	401a      	ands	r2, r3
 801184c:	421c      	tst	r4, r3
 801184e:	d00a      	beq.n	8011866 <_strtod_l+0x59a>
 8011850:	4b15      	ldr	r3, [pc, #84]	; (80118a8 <_strtod_l+0x5dc>)
 8011852:	00d2      	lsls	r2, r2, #3
 8011854:	189b      	adds	r3, r3, r2
 8011856:	0030      	movs	r0, r6
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	0039      	movs	r1, r7
 801185e:	f7f0 f93f 	bl	8001ae0 <__aeabi_ddiv>
 8011862:	0006      	movs	r6, r0
 8011864:	000f      	movs	r7, r1
 8011866:	1124      	asrs	r4, r4, #4
 8011868:	d0d5      	beq.n	8011816 <_strtod_l+0x54a>
 801186a:	2c1f      	cmp	r4, #31
 801186c:	dd28      	ble.n	80118c0 <_strtod_l+0x5f4>
 801186e:	2300      	movs	r3, #0
 8011870:	9305      	str	r3, [sp, #20]
 8011872:	9306      	str	r3, [sp, #24]
 8011874:	930d      	str	r3, [sp, #52]	; 0x34
 8011876:	9308      	str	r3, [sp, #32]
 8011878:	2322      	movs	r3, #34	; 0x22
 801187a:	9a04      	ldr	r2, [sp, #16]
 801187c:	2600      	movs	r6, #0
 801187e:	6013      	str	r3, [r2, #0]
 8011880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011882:	2700      	movs	r7, #0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d18d      	bne.n	80117a4 <_strtod_l+0x4d8>
 8011888:	e55b      	b.n	8011342 <_strtod_l+0x76>
 801188a:	46c0      	nop			; (mov r8, r8)
 801188c:	00004e1f 	.word	0x00004e1f
 8011890:	080186b6 	.word	0x080186b6
 8011894:	08018568 	.word	0x08018568
 8011898:	7ff00000 	.word	0x7ff00000
 801189c:	080186ae 	.word	0x080186ae
 80118a0:	0801879a 	.word	0x0801879a
 80118a4:	08018796 	.word	0x08018796
 80118a8:	080188f0 	.word	0x080188f0
 80118ac:	080188c8 	.word	0x080188c8
 80118b0:	fcb00000 	.word	0xfcb00000
 80118b4:	7ca00000 	.word	0x7ca00000
 80118b8:	7c900000 	.word	0x7c900000
 80118bc:	7fefffff 	.word	0x7fefffff
 80118c0:	2310      	movs	r3, #16
 80118c2:	0022      	movs	r2, r4
 80118c4:	401a      	ands	r2, r3
 80118c6:	9207      	str	r2, [sp, #28]
 80118c8:	421c      	tst	r4, r3
 80118ca:	d001      	beq.n	80118d0 <_strtod_l+0x604>
 80118cc:	335a      	adds	r3, #90	; 0x5a
 80118ce:	9307      	str	r3, [sp, #28]
 80118d0:	0030      	movs	r0, r6
 80118d2:	0039      	movs	r1, r7
 80118d4:	2300      	movs	r3, #0
 80118d6:	4dc4      	ldr	r5, [pc, #784]	; (8011be8 <_strtod_l+0x91c>)
 80118d8:	2201      	movs	r2, #1
 80118da:	4214      	tst	r4, r2
 80118dc:	d004      	beq.n	80118e8 <_strtod_l+0x61c>
 80118de:	682a      	ldr	r2, [r5, #0]
 80118e0:	686b      	ldr	r3, [r5, #4]
 80118e2:	f7f0 fcf7 	bl	80022d4 <__aeabi_dmul>
 80118e6:	2301      	movs	r3, #1
 80118e8:	1064      	asrs	r4, r4, #1
 80118ea:	3508      	adds	r5, #8
 80118ec:	2c00      	cmp	r4, #0
 80118ee:	d1f3      	bne.n	80118d8 <_strtod_l+0x60c>
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d001      	beq.n	80118f8 <_strtod_l+0x62c>
 80118f4:	0006      	movs	r6, r0
 80118f6:	000f      	movs	r7, r1
 80118f8:	9b07      	ldr	r3, [sp, #28]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d00f      	beq.n	801191e <_strtod_l+0x652>
 80118fe:	236b      	movs	r3, #107	; 0x6b
 8011900:	007a      	lsls	r2, r7, #1
 8011902:	0d52      	lsrs	r2, r2, #21
 8011904:	0039      	movs	r1, r7
 8011906:	1a9b      	subs	r3, r3, r2
 8011908:	2b00      	cmp	r3, #0
 801190a:	dd08      	ble.n	801191e <_strtod_l+0x652>
 801190c:	2b1f      	cmp	r3, #31
 801190e:	dc00      	bgt.n	8011912 <_strtod_l+0x646>
 8011910:	e121      	b.n	8011b56 <_strtod_l+0x88a>
 8011912:	2600      	movs	r6, #0
 8011914:	2b34      	cmp	r3, #52	; 0x34
 8011916:	dc00      	bgt.n	801191a <_strtod_l+0x64e>
 8011918:	e116      	b.n	8011b48 <_strtod_l+0x87c>
 801191a:	27dc      	movs	r7, #220	; 0xdc
 801191c:	04bf      	lsls	r7, r7, #18
 801191e:	2200      	movs	r2, #0
 8011920:	2300      	movs	r3, #0
 8011922:	0030      	movs	r0, r6
 8011924:	0039      	movs	r1, r7
 8011926:	f7ee fd91 	bl	800044c <__aeabi_dcmpeq>
 801192a:	2800      	cmp	r0, #0
 801192c:	d19f      	bne.n	801186e <_strtod_l+0x5a2>
 801192e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011930:	9a08      	ldr	r2, [sp, #32]
 8011932:	9300      	str	r3, [sp, #0]
 8011934:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011936:	9b05      	ldr	r3, [sp, #20]
 8011938:	9804      	ldr	r0, [sp, #16]
 801193a:	f003 f863 	bl	8014a04 <__s2b>
 801193e:	900d      	str	r0, [sp, #52]	; 0x34
 8011940:	2800      	cmp	r0, #0
 8011942:	d100      	bne.n	8011946 <_strtod_l+0x67a>
 8011944:	e720      	b.n	8011788 <_strtod_l+0x4bc>
 8011946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011948:	9906      	ldr	r1, [sp, #24]
 801194a:	17da      	asrs	r2, r3, #31
 801194c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801194e:	1a5b      	subs	r3, r3, r1
 8011950:	401a      	ands	r2, r3
 8011952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011954:	9215      	str	r2, [sp, #84]	; 0x54
 8011956:	43db      	mvns	r3, r3
 8011958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801195a:	17db      	asrs	r3, r3, #31
 801195c:	401a      	ands	r2, r3
 801195e:	2300      	movs	r3, #0
 8011960:	9218      	str	r2, [sp, #96]	; 0x60
 8011962:	9305      	str	r3, [sp, #20]
 8011964:	9306      	str	r3, [sp, #24]
 8011966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011968:	9804      	ldr	r0, [sp, #16]
 801196a:	6859      	ldr	r1, [r3, #4]
 801196c:	f002 ff9e 	bl	80148ac <_Balloc>
 8011970:	9008      	str	r0, [sp, #32]
 8011972:	2800      	cmp	r0, #0
 8011974:	d100      	bne.n	8011978 <_strtod_l+0x6ac>
 8011976:	e70c      	b.n	8011792 <_strtod_l+0x4c6>
 8011978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801197a:	300c      	adds	r0, #12
 801197c:	0019      	movs	r1, r3
 801197e:	691a      	ldr	r2, [r3, #16]
 8011980:	310c      	adds	r1, #12
 8011982:	3202      	adds	r2, #2
 8011984:	0092      	lsls	r2, r2, #2
 8011986:	f001 fd09 	bl	801339c <memcpy>
 801198a:	ab1e      	add	r3, sp, #120	; 0x78
 801198c:	9301      	str	r3, [sp, #4]
 801198e:	ab1d      	add	r3, sp, #116	; 0x74
 8011990:	9300      	str	r3, [sp, #0]
 8011992:	0032      	movs	r2, r6
 8011994:	003b      	movs	r3, r7
 8011996:	9804      	ldr	r0, [sp, #16]
 8011998:	9610      	str	r6, [sp, #64]	; 0x40
 801199a:	9711      	str	r7, [sp, #68]	; 0x44
 801199c:	f003 fb74 	bl	8015088 <__d2b>
 80119a0:	901c      	str	r0, [sp, #112]	; 0x70
 80119a2:	2800      	cmp	r0, #0
 80119a4:	d100      	bne.n	80119a8 <_strtod_l+0x6dc>
 80119a6:	e6f4      	b.n	8011792 <_strtod_l+0x4c6>
 80119a8:	2101      	movs	r1, #1
 80119aa:	9804      	ldr	r0, [sp, #16]
 80119ac:	f003 f8be 	bl	8014b2c <__i2b>
 80119b0:	9006      	str	r0, [sp, #24]
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d100      	bne.n	80119b8 <_strtod_l+0x6ec>
 80119b6:	e6ec      	b.n	8011792 <_strtod_l+0x4c6>
 80119b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80119bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80119be:	1ad4      	subs	r4, r2, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	db01      	blt.n	80119c8 <_strtod_l+0x6fc>
 80119c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80119c6:	195d      	adds	r5, r3, r5
 80119c8:	9907      	ldr	r1, [sp, #28]
 80119ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80119cc:	1a5b      	subs	r3, r3, r1
 80119ce:	2136      	movs	r1, #54	; 0x36
 80119d0:	189b      	adds	r3, r3, r2
 80119d2:	1a8a      	subs	r2, r1, r2
 80119d4:	4985      	ldr	r1, [pc, #532]	; (8011bec <_strtod_l+0x920>)
 80119d6:	2001      	movs	r0, #1
 80119d8:	468c      	mov	ip, r1
 80119da:	2100      	movs	r1, #0
 80119dc:	3b01      	subs	r3, #1
 80119de:	9114      	str	r1, [sp, #80]	; 0x50
 80119e0:	9012      	str	r0, [sp, #72]	; 0x48
 80119e2:	4563      	cmp	r3, ip
 80119e4:	da07      	bge.n	80119f6 <_strtod_l+0x72a>
 80119e6:	4661      	mov	r1, ip
 80119e8:	1ac9      	subs	r1, r1, r3
 80119ea:	1a52      	subs	r2, r2, r1
 80119ec:	291f      	cmp	r1, #31
 80119ee:	dd00      	ble.n	80119f2 <_strtod_l+0x726>
 80119f0:	e0b6      	b.n	8011b60 <_strtod_l+0x894>
 80119f2:	4088      	lsls	r0, r1
 80119f4:	9012      	str	r0, [sp, #72]	; 0x48
 80119f6:	18ab      	adds	r3, r5, r2
 80119f8:	930c      	str	r3, [sp, #48]	; 0x30
 80119fa:	18a4      	adds	r4, r4, r2
 80119fc:	9b07      	ldr	r3, [sp, #28]
 80119fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a00:	191c      	adds	r4, r3, r4
 8011a02:	002b      	movs	r3, r5
 8011a04:	4295      	cmp	r5, r2
 8011a06:	dd00      	ble.n	8011a0a <_strtod_l+0x73e>
 8011a08:	0013      	movs	r3, r2
 8011a0a:	42a3      	cmp	r3, r4
 8011a0c:	dd00      	ble.n	8011a10 <_strtod_l+0x744>
 8011a0e:	0023      	movs	r3, r4
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	dd04      	ble.n	8011a1e <_strtod_l+0x752>
 8011a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a16:	1ae4      	subs	r4, r4, r3
 8011a18:	1ad2      	subs	r2, r2, r3
 8011a1a:	920c      	str	r2, [sp, #48]	; 0x30
 8011a1c:	1aed      	subs	r5, r5, r3
 8011a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	dd17      	ble.n	8011a54 <_strtod_l+0x788>
 8011a24:	001a      	movs	r2, r3
 8011a26:	9906      	ldr	r1, [sp, #24]
 8011a28:	9804      	ldr	r0, [sp, #16]
 8011a2a:	f003 f947 	bl	8014cbc <__pow5mult>
 8011a2e:	9006      	str	r0, [sp, #24]
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d100      	bne.n	8011a36 <_strtod_l+0x76a>
 8011a34:	e6ad      	b.n	8011792 <_strtod_l+0x4c6>
 8011a36:	0001      	movs	r1, r0
 8011a38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a3a:	9804      	ldr	r0, [sp, #16]
 8011a3c:	f003 f88e 	bl	8014b5c <__multiply>
 8011a40:	900e      	str	r0, [sp, #56]	; 0x38
 8011a42:	2800      	cmp	r0, #0
 8011a44:	d100      	bne.n	8011a48 <_strtod_l+0x77c>
 8011a46:	e6a4      	b.n	8011792 <_strtod_l+0x4c6>
 8011a48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011a4a:	9804      	ldr	r0, [sp, #16]
 8011a4c:	f002 ff72 	bl	8014934 <_Bfree>
 8011a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a52:	931c      	str	r3, [sp, #112]	; 0x70
 8011a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	dd00      	ble.n	8011a5c <_strtod_l+0x790>
 8011a5a:	e087      	b.n	8011b6c <_strtod_l+0x8a0>
 8011a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	dd08      	ble.n	8011a74 <_strtod_l+0x7a8>
 8011a62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a64:	9908      	ldr	r1, [sp, #32]
 8011a66:	9804      	ldr	r0, [sp, #16]
 8011a68:	f003 f928 	bl	8014cbc <__pow5mult>
 8011a6c:	9008      	str	r0, [sp, #32]
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	d100      	bne.n	8011a74 <_strtod_l+0x7a8>
 8011a72:	e68e      	b.n	8011792 <_strtod_l+0x4c6>
 8011a74:	2c00      	cmp	r4, #0
 8011a76:	dd08      	ble.n	8011a8a <_strtod_l+0x7be>
 8011a78:	0022      	movs	r2, r4
 8011a7a:	9908      	ldr	r1, [sp, #32]
 8011a7c:	9804      	ldr	r0, [sp, #16]
 8011a7e:	f003 f979 	bl	8014d74 <__lshift>
 8011a82:	9008      	str	r0, [sp, #32]
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d100      	bne.n	8011a8a <_strtod_l+0x7be>
 8011a88:	e683      	b.n	8011792 <_strtod_l+0x4c6>
 8011a8a:	2d00      	cmp	r5, #0
 8011a8c:	dd08      	ble.n	8011aa0 <_strtod_l+0x7d4>
 8011a8e:	002a      	movs	r2, r5
 8011a90:	9906      	ldr	r1, [sp, #24]
 8011a92:	9804      	ldr	r0, [sp, #16]
 8011a94:	f003 f96e 	bl	8014d74 <__lshift>
 8011a98:	9006      	str	r0, [sp, #24]
 8011a9a:	2800      	cmp	r0, #0
 8011a9c:	d100      	bne.n	8011aa0 <_strtod_l+0x7d4>
 8011a9e:	e678      	b.n	8011792 <_strtod_l+0x4c6>
 8011aa0:	9a08      	ldr	r2, [sp, #32]
 8011aa2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011aa4:	9804      	ldr	r0, [sp, #16]
 8011aa6:	f003 f9ef 	bl	8014e88 <__mdiff>
 8011aaa:	9005      	str	r0, [sp, #20]
 8011aac:	2800      	cmp	r0, #0
 8011aae:	d100      	bne.n	8011ab2 <_strtod_l+0x7e6>
 8011ab0:	e66f      	b.n	8011792 <_strtod_l+0x4c6>
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	68c3      	ldr	r3, [r0, #12]
 8011ab6:	9906      	ldr	r1, [sp, #24]
 8011ab8:	60c2      	str	r2, [r0, #12]
 8011aba:	930c      	str	r3, [sp, #48]	; 0x30
 8011abc:	f003 f9c8 	bl	8014e50 <__mcmp>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	da5d      	bge.n	8011b80 <_strtod_l+0x8b4>
 8011ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ac6:	4333      	orrs	r3, r6
 8011ac8:	d000      	beq.n	8011acc <_strtod_l+0x800>
 8011aca:	e088      	b.n	8011bde <_strtod_l+0x912>
 8011acc:	033b      	lsls	r3, r7, #12
 8011ace:	d000      	beq.n	8011ad2 <_strtod_l+0x806>
 8011ad0:	e085      	b.n	8011bde <_strtod_l+0x912>
 8011ad2:	22d6      	movs	r2, #214	; 0xd6
 8011ad4:	4b46      	ldr	r3, [pc, #280]	; (8011bf0 <_strtod_l+0x924>)
 8011ad6:	04d2      	lsls	r2, r2, #19
 8011ad8:	403b      	ands	r3, r7
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d97f      	bls.n	8011bde <_strtod_l+0x912>
 8011ade:	9b05      	ldr	r3, [sp, #20]
 8011ae0:	695b      	ldr	r3, [r3, #20]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d103      	bne.n	8011aee <_strtod_l+0x822>
 8011ae6:	9b05      	ldr	r3, [sp, #20]
 8011ae8:	691b      	ldr	r3, [r3, #16]
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	dd77      	ble.n	8011bde <_strtod_l+0x912>
 8011aee:	9905      	ldr	r1, [sp, #20]
 8011af0:	2201      	movs	r2, #1
 8011af2:	9804      	ldr	r0, [sp, #16]
 8011af4:	f003 f93e 	bl	8014d74 <__lshift>
 8011af8:	9906      	ldr	r1, [sp, #24]
 8011afa:	9005      	str	r0, [sp, #20]
 8011afc:	f003 f9a8 	bl	8014e50 <__mcmp>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	dd6c      	ble.n	8011bde <_strtod_l+0x912>
 8011b04:	9907      	ldr	r1, [sp, #28]
 8011b06:	003b      	movs	r3, r7
 8011b08:	4a39      	ldr	r2, [pc, #228]	; (8011bf0 <_strtod_l+0x924>)
 8011b0a:	2900      	cmp	r1, #0
 8011b0c:	d100      	bne.n	8011b10 <_strtod_l+0x844>
 8011b0e:	e094      	b.n	8011c3a <_strtod_l+0x96e>
 8011b10:	0011      	movs	r1, r2
 8011b12:	20d6      	movs	r0, #214	; 0xd6
 8011b14:	4039      	ands	r1, r7
 8011b16:	04c0      	lsls	r0, r0, #19
 8011b18:	4281      	cmp	r1, r0
 8011b1a:	dd00      	ble.n	8011b1e <_strtod_l+0x852>
 8011b1c:	e08d      	b.n	8011c3a <_strtod_l+0x96e>
 8011b1e:	23dc      	movs	r3, #220	; 0xdc
 8011b20:	049b      	lsls	r3, r3, #18
 8011b22:	4299      	cmp	r1, r3
 8011b24:	dc00      	bgt.n	8011b28 <_strtod_l+0x85c>
 8011b26:	e6a7      	b.n	8011878 <_strtod_l+0x5ac>
 8011b28:	0030      	movs	r0, r6
 8011b2a:	0039      	movs	r1, r7
 8011b2c:	4b31      	ldr	r3, [pc, #196]	; (8011bf4 <_strtod_l+0x928>)
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f7f0 fbd0 	bl	80022d4 <__aeabi_dmul>
 8011b34:	4b2e      	ldr	r3, [pc, #184]	; (8011bf0 <_strtod_l+0x924>)
 8011b36:	0006      	movs	r6, r0
 8011b38:	000f      	movs	r7, r1
 8011b3a:	420b      	tst	r3, r1
 8011b3c:	d000      	beq.n	8011b40 <_strtod_l+0x874>
 8011b3e:	e631      	b.n	80117a4 <_strtod_l+0x4d8>
 8011b40:	2322      	movs	r3, #34	; 0x22
 8011b42:	9a04      	ldr	r2, [sp, #16]
 8011b44:	6013      	str	r3, [r2, #0]
 8011b46:	e62d      	b.n	80117a4 <_strtod_l+0x4d8>
 8011b48:	234b      	movs	r3, #75	; 0x4b
 8011b4a:	1a9a      	subs	r2, r3, r2
 8011b4c:	3b4c      	subs	r3, #76	; 0x4c
 8011b4e:	4093      	lsls	r3, r2
 8011b50:	4019      	ands	r1, r3
 8011b52:	000f      	movs	r7, r1
 8011b54:	e6e3      	b.n	801191e <_strtod_l+0x652>
 8011b56:	2201      	movs	r2, #1
 8011b58:	4252      	negs	r2, r2
 8011b5a:	409a      	lsls	r2, r3
 8011b5c:	4016      	ands	r6, r2
 8011b5e:	e6de      	b.n	801191e <_strtod_l+0x652>
 8011b60:	4925      	ldr	r1, [pc, #148]	; (8011bf8 <_strtod_l+0x92c>)
 8011b62:	1acb      	subs	r3, r1, r3
 8011b64:	0001      	movs	r1, r0
 8011b66:	4099      	lsls	r1, r3
 8011b68:	9114      	str	r1, [sp, #80]	; 0x50
 8011b6a:	e743      	b.n	80119f4 <_strtod_l+0x728>
 8011b6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b70:	9804      	ldr	r0, [sp, #16]
 8011b72:	f003 f8ff 	bl	8014d74 <__lshift>
 8011b76:	901c      	str	r0, [sp, #112]	; 0x70
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d000      	beq.n	8011b7e <_strtod_l+0x8b2>
 8011b7c:	e76e      	b.n	8011a5c <_strtod_l+0x790>
 8011b7e:	e608      	b.n	8011792 <_strtod_l+0x4c6>
 8011b80:	970e      	str	r7, [sp, #56]	; 0x38
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d177      	bne.n	8011c76 <_strtod_l+0x9aa>
 8011b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b88:	033b      	lsls	r3, r7, #12
 8011b8a:	0b1b      	lsrs	r3, r3, #12
 8011b8c:	2a00      	cmp	r2, #0
 8011b8e:	d039      	beq.n	8011c04 <_strtod_l+0x938>
 8011b90:	4a1a      	ldr	r2, [pc, #104]	; (8011bfc <_strtod_l+0x930>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d139      	bne.n	8011c0a <_strtod_l+0x93e>
 8011b96:	2101      	movs	r1, #1
 8011b98:	9b07      	ldr	r3, [sp, #28]
 8011b9a:	4249      	negs	r1, r1
 8011b9c:	0032      	movs	r2, r6
 8011b9e:	0008      	movs	r0, r1
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00b      	beq.n	8011bbc <_strtod_l+0x8f0>
 8011ba4:	24d4      	movs	r4, #212	; 0xd4
 8011ba6:	4b12      	ldr	r3, [pc, #72]	; (8011bf0 <_strtod_l+0x924>)
 8011ba8:	0008      	movs	r0, r1
 8011baa:	403b      	ands	r3, r7
 8011bac:	04e4      	lsls	r4, r4, #19
 8011bae:	42a3      	cmp	r3, r4
 8011bb0:	d804      	bhi.n	8011bbc <_strtod_l+0x8f0>
 8011bb2:	306c      	adds	r0, #108	; 0x6c
 8011bb4:	0d1b      	lsrs	r3, r3, #20
 8011bb6:	1ac3      	subs	r3, r0, r3
 8011bb8:	4099      	lsls	r1, r3
 8011bba:	0008      	movs	r0, r1
 8011bbc:	4282      	cmp	r2, r0
 8011bbe:	d124      	bne.n	8011c0a <_strtod_l+0x93e>
 8011bc0:	4b0f      	ldr	r3, [pc, #60]	; (8011c00 <_strtod_l+0x934>)
 8011bc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011bc4:	4299      	cmp	r1, r3
 8011bc6:	d102      	bne.n	8011bce <_strtod_l+0x902>
 8011bc8:	3201      	adds	r2, #1
 8011bca:	d100      	bne.n	8011bce <_strtod_l+0x902>
 8011bcc:	e5e1      	b.n	8011792 <_strtod_l+0x4c6>
 8011bce:	4b08      	ldr	r3, [pc, #32]	; (8011bf0 <_strtod_l+0x924>)
 8011bd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bd2:	2600      	movs	r6, #0
 8011bd4:	401a      	ands	r2, r3
 8011bd6:	0013      	movs	r3, r2
 8011bd8:	2280      	movs	r2, #128	; 0x80
 8011bda:	0352      	lsls	r2, r2, #13
 8011bdc:	189f      	adds	r7, r3, r2
 8011bde:	9b07      	ldr	r3, [sp, #28]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d1a1      	bne.n	8011b28 <_strtod_l+0x85c>
 8011be4:	e5de      	b.n	80117a4 <_strtod_l+0x4d8>
 8011be6:	46c0      	nop			; (mov r8, r8)
 8011be8:	08018580 	.word	0x08018580
 8011bec:	fffffc02 	.word	0xfffffc02
 8011bf0:	7ff00000 	.word	0x7ff00000
 8011bf4:	39500000 	.word	0x39500000
 8011bf8:	fffffbe2 	.word	0xfffffbe2
 8011bfc:	000fffff 	.word	0x000fffff
 8011c00:	7fefffff 	.word	0x7fefffff
 8011c04:	4333      	orrs	r3, r6
 8011c06:	d100      	bne.n	8011c0a <_strtod_l+0x93e>
 8011c08:	e77c      	b.n	8011b04 <_strtod_l+0x838>
 8011c0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d01d      	beq.n	8011c4c <_strtod_l+0x980>
 8011c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c14:	4213      	tst	r3, r2
 8011c16:	d0e2      	beq.n	8011bde <_strtod_l+0x912>
 8011c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c1a:	0030      	movs	r0, r6
 8011c1c:	0039      	movs	r1, r7
 8011c1e:	9a07      	ldr	r2, [sp, #28]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d017      	beq.n	8011c54 <_strtod_l+0x988>
 8011c24:	f7ff fb3a 	bl	801129c <sulp>
 8011c28:	0002      	movs	r2, r0
 8011c2a:	000b      	movs	r3, r1
 8011c2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c30:	f7ef fbf6 	bl	8001420 <__aeabi_dadd>
 8011c34:	0006      	movs	r6, r0
 8011c36:	000f      	movs	r7, r1
 8011c38:	e7d1      	b.n	8011bde <_strtod_l+0x912>
 8011c3a:	2601      	movs	r6, #1
 8011c3c:	4013      	ands	r3, r2
 8011c3e:	4a98      	ldr	r2, [pc, #608]	; (8011ea0 <_strtod_l+0xbd4>)
 8011c40:	4276      	negs	r6, r6
 8011c42:	189b      	adds	r3, r3, r2
 8011c44:	4a97      	ldr	r2, [pc, #604]	; (8011ea4 <_strtod_l+0xbd8>)
 8011c46:	431a      	orrs	r2, r3
 8011c48:	0017      	movs	r7, r2
 8011c4a:	e7c8      	b.n	8011bde <_strtod_l+0x912>
 8011c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c4e:	4233      	tst	r3, r6
 8011c50:	d0c5      	beq.n	8011bde <_strtod_l+0x912>
 8011c52:	e7e1      	b.n	8011c18 <_strtod_l+0x94c>
 8011c54:	f7ff fb22 	bl	801129c <sulp>
 8011c58:	0002      	movs	r2, r0
 8011c5a:	000b      	movs	r3, r1
 8011c5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c60:	f7f0 fdfa 	bl	8002858 <__aeabi_dsub>
 8011c64:	2200      	movs	r2, #0
 8011c66:	2300      	movs	r3, #0
 8011c68:	0006      	movs	r6, r0
 8011c6a:	000f      	movs	r7, r1
 8011c6c:	f7ee fbee 	bl	800044c <__aeabi_dcmpeq>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d0b4      	beq.n	8011bde <_strtod_l+0x912>
 8011c74:	e600      	b.n	8011878 <_strtod_l+0x5ac>
 8011c76:	9906      	ldr	r1, [sp, #24]
 8011c78:	9805      	ldr	r0, [sp, #20]
 8011c7a:	f003 fa65 	bl	8015148 <__ratio>
 8011c7e:	2380      	movs	r3, #128	; 0x80
 8011c80:	2200      	movs	r2, #0
 8011c82:	05db      	lsls	r3, r3, #23
 8011c84:	0004      	movs	r4, r0
 8011c86:	000d      	movs	r5, r1
 8011c88:	f7ee fbf0 	bl	800046c <__aeabi_dcmple>
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	d06d      	beq.n	8011d6c <_strtod_l+0xaa0>
 8011c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d000      	beq.n	8011c98 <_strtod_l+0x9cc>
 8011c96:	e07e      	b.n	8011d96 <_strtod_l+0xaca>
 8011c98:	2e00      	cmp	r6, #0
 8011c9a:	d158      	bne.n	8011d4e <_strtod_l+0xa82>
 8011c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c9e:	031b      	lsls	r3, r3, #12
 8011ca0:	d000      	beq.n	8011ca4 <_strtod_l+0x9d8>
 8011ca2:	e07f      	b.n	8011da4 <_strtod_l+0xad8>
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	0020      	movs	r0, r4
 8011ca8:	0029      	movs	r1, r5
 8011caa:	4b7f      	ldr	r3, [pc, #508]	; (8011ea8 <_strtod_l+0xbdc>)
 8011cac:	f7ee fbd4 	bl	8000458 <__aeabi_dcmplt>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d158      	bne.n	8011d66 <_strtod_l+0xa9a>
 8011cb4:	0020      	movs	r0, r4
 8011cb6:	0029      	movs	r1, r5
 8011cb8:	2200      	movs	r2, #0
 8011cba:	4b7c      	ldr	r3, [pc, #496]	; (8011eac <_strtod_l+0xbe0>)
 8011cbc:	f7f0 fb0a 	bl	80022d4 <__aeabi_dmul>
 8011cc0:	0004      	movs	r4, r0
 8011cc2:	000d      	movs	r5, r1
 8011cc4:	2380      	movs	r3, #128	; 0x80
 8011cc6:	061b      	lsls	r3, r3, #24
 8011cc8:	940a      	str	r4, [sp, #40]	; 0x28
 8011cca:	18eb      	adds	r3, r5, r3
 8011ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8011cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cd2:	9212      	str	r2, [sp, #72]	; 0x48
 8011cd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8011cd6:	4a76      	ldr	r2, [pc, #472]	; (8011eb0 <_strtod_l+0xbe4>)
 8011cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cda:	4013      	ands	r3, r2
 8011cdc:	9314      	str	r3, [sp, #80]	; 0x50
 8011cde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ce0:	4b74      	ldr	r3, [pc, #464]	; (8011eb4 <_strtod_l+0xbe8>)
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d000      	beq.n	8011ce8 <_strtod_l+0xa1c>
 8011ce6:	e091      	b.n	8011e0c <_strtod_l+0xb40>
 8011ce8:	4a73      	ldr	r2, [pc, #460]	; (8011eb8 <_strtod_l+0xbec>)
 8011cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cec:	4694      	mov	ip, r2
 8011cee:	4463      	add	r3, ip
 8011cf0:	001f      	movs	r7, r3
 8011cf2:	0030      	movs	r0, r6
 8011cf4:	0019      	movs	r1, r3
 8011cf6:	f003 f95f 	bl	8014fb8 <__ulp>
 8011cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cfe:	f7f0 fae9 	bl	80022d4 <__aeabi_dmul>
 8011d02:	0032      	movs	r2, r6
 8011d04:	003b      	movs	r3, r7
 8011d06:	f7ef fb8b 	bl	8001420 <__aeabi_dadd>
 8011d0a:	4a69      	ldr	r2, [pc, #420]	; (8011eb0 <_strtod_l+0xbe4>)
 8011d0c:	4b6b      	ldr	r3, [pc, #428]	; (8011ebc <_strtod_l+0xbf0>)
 8011d0e:	0006      	movs	r6, r0
 8011d10:	400a      	ands	r2, r1
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d949      	bls.n	8011daa <_strtod_l+0xade>
 8011d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011d18:	4b69      	ldr	r3, [pc, #420]	; (8011ec0 <_strtod_l+0xbf4>)
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d103      	bne.n	8011d26 <_strtod_l+0xa5a>
 8011d1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d20:	3301      	adds	r3, #1
 8011d22:	d100      	bne.n	8011d26 <_strtod_l+0xa5a>
 8011d24:	e535      	b.n	8011792 <_strtod_l+0x4c6>
 8011d26:	2601      	movs	r6, #1
 8011d28:	4f65      	ldr	r7, [pc, #404]	; (8011ec0 <_strtod_l+0xbf4>)
 8011d2a:	4276      	negs	r6, r6
 8011d2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011d2e:	9804      	ldr	r0, [sp, #16]
 8011d30:	f002 fe00 	bl	8014934 <_Bfree>
 8011d34:	9908      	ldr	r1, [sp, #32]
 8011d36:	9804      	ldr	r0, [sp, #16]
 8011d38:	f002 fdfc 	bl	8014934 <_Bfree>
 8011d3c:	9906      	ldr	r1, [sp, #24]
 8011d3e:	9804      	ldr	r0, [sp, #16]
 8011d40:	f002 fdf8 	bl	8014934 <_Bfree>
 8011d44:	9905      	ldr	r1, [sp, #20]
 8011d46:	9804      	ldr	r0, [sp, #16]
 8011d48:	f002 fdf4 	bl	8014934 <_Bfree>
 8011d4c:	e60b      	b.n	8011966 <_strtod_l+0x69a>
 8011d4e:	2e01      	cmp	r6, #1
 8011d50:	d103      	bne.n	8011d5a <_strtod_l+0xa8e>
 8011d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d100      	bne.n	8011d5a <_strtod_l+0xa8e>
 8011d58:	e58e      	b.n	8011878 <_strtod_l+0x5ac>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	4c59      	ldr	r4, [pc, #356]	; (8011ec4 <_strtod_l+0xbf8>)
 8011d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8011d60:	940b      	str	r4, [sp, #44]	; 0x2c
 8011d62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011d64:	e01c      	b.n	8011da0 <_strtod_l+0xad4>
 8011d66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011d68:	4d50      	ldr	r5, [pc, #320]	; (8011eac <_strtod_l+0xbe0>)
 8011d6a:	e7ab      	b.n	8011cc4 <_strtod_l+0x9f8>
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	0020      	movs	r0, r4
 8011d70:	0029      	movs	r1, r5
 8011d72:	4b4e      	ldr	r3, [pc, #312]	; (8011eac <_strtod_l+0xbe0>)
 8011d74:	f7f0 faae 	bl	80022d4 <__aeabi_dmul>
 8011d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d7a:	0004      	movs	r4, r0
 8011d7c:	000b      	movs	r3, r1
 8011d7e:	000d      	movs	r5, r1
 8011d80:	2a00      	cmp	r2, #0
 8011d82:	d104      	bne.n	8011d8e <_strtod_l+0xac2>
 8011d84:	2280      	movs	r2, #128	; 0x80
 8011d86:	0612      	lsls	r2, r2, #24
 8011d88:	900a      	str	r0, [sp, #40]	; 0x28
 8011d8a:	188b      	adds	r3, r1, r2
 8011d8c:	e79e      	b.n	8011ccc <_strtod_l+0xa00>
 8011d8e:	0002      	movs	r2, r0
 8011d90:	920a      	str	r2, [sp, #40]	; 0x28
 8011d92:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d94:	e79b      	b.n	8011cce <_strtod_l+0xa02>
 8011d96:	2300      	movs	r3, #0
 8011d98:	4c43      	ldr	r4, [pc, #268]	; (8011ea8 <_strtod_l+0xbdc>)
 8011d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8011d9c:	940b      	str	r4, [sp, #44]	; 0x2c
 8011d9e:	2400      	movs	r4, #0
 8011da0:	4d41      	ldr	r5, [pc, #260]	; (8011ea8 <_strtod_l+0xbdc>)
 8011da2:	e794      	b.n	8011cce <_strtod_l+0xa02>
 8011da4:	2300      	movs	r3, #0
 8011da6:	4c47      	ldr	r4, [pc, #284]	; (8011ec4 <_strtod_l+0xbf8>)
 8011da8:	e7f7      	b.n	8011d9a <_strtod_l+0xace>
 8011daa:	23d4      	movs	r3, #212	; 0xd4
 8011dac:	049b      	lsls	r3, r3, #18
 8011dae:	18cf      	adds	r7, r1, r3
 8011db0:	9b07      	ldr	r3, [sp, #28]
 8011db2:	970e      	str	r7, [sp, #56]	; 0x38
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d1b9      	bne.n	8011d2c <_strtod_l+0xa60>
 8011db8:	4b3d      	ldr	r3, [pc, #244]	; (8011eb0 <_strtod_l+0xbe4>)
 8011dba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011dbc:	403b      	ands	r3, r7
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d1b4      	bne.n	8011d2c <_strtod_l+0xa60>
 8011dc2:	0020      	movs	r0, r4
 8011dc4:	0029      	movs	r1, r5
 8011dc6:	f7ee fbc7 	bl	8000558 <__aeabi_d2lz>
 8011dca:	f7ee fc01 	bl	80005d0 <__aeabi_l2d>
 8011dce:	0002      	movs	r2, r0
 8011dd0:	000b      	movs	r3, r1
 8011dd2:	0020      	movs	r0, r4
 8011dd4:	0029      	movs	r1, r5
 8011dd6:	f7f0 fd3f 	bl	8002858 <__aeabi_dsub>
 8011dda:	033b      	lsls	r3, r7, #12
 8011ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011dde:	0b1b      	lsrs	r3, r3, #12
 8011de0:	4333      	orrs	r3, r6
 8011de2:	4313      	orrs	r3, r2
 8011de4:	0004      	movs	r4, r0
 8011de6:	000d      	movs	r5, r1
 8011de8:	4a37      	ldr	r2, [pc, #220]	; (8011ec8 <_strtod_l+0xbfc>)
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d054      	beq.n	8011e98 <_strtod_l+0xbcc>
 8011dee:	4b37      	ldr	r3, [pc, #220]	; (8011ecc <_strtod_l+0xc00>)
 8011df0:	f7ee fb32 	bl	8000458 <__aeabi_dcmplt>
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d000      	beq.n	8011dfa <_strtod_l+0xb2e>
 8011df8:	e4d4      	b.n	80117a4 <_strtod_l+0x4d8>
 8011dfa:	0020      	movs	r0, r4
 8011dfc:	0029      	movs	r1, r5
 8011dfe:	4a34      	ldr	r2, [pc, #208]	; (8011ed0 <_strtod_l+0xc04>)
 8011e00:	4b2a      	ldr	r3, [pc, #168]	; (8011eac <_strtod_l+0xbe0>)
 8011e02:	f7ee fb3d 	bl	8000480 <__aeabi_dcmpgt>
 8011e06:	2800      	cmp	r0, #0
 8011e08:	d090      	beq.n	8011d2c <_strtod_l+0xa60>
 8011e0a:	e4cb      	b.n	80117a4 <_strtod_l+0x4d8>
 8011e0c:	9b07      	ldr	r3, [sp, #28]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d02b      	beq.n	8011e6a <_strtod_l+0xb9e>
 8011e12:	23d4      	movs	r3, #212	; 0xd4
 8011e14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e16:	04db      	lsls	r3, r3, #19
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	d826      	bhi.n	8011e6a <_strtod_l+0xb9e>
 8011e1c:	0020      	movs	r0, r4
 8011e1e:	0029      	movs	r1, r5
 8011e20:	4a2c      	ldr	r2, [pc, #176]	; (8011ed4 <_strtod_l+0xc08>)
 8011e22:	4b2d      	ldr	r3, [pc, #180]	; (8011ed8 <_strtod_l+0xc0c>)
 8011e24:	f7ee fb22 	bl	800046c <__aeabi_dcmple>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d017      	beq.n	8011e5c <_strtod_l+0xb90>
 8011e2c:	0020      	movs	r0, r4
 8011e2e:	0029      	movs	r1, r5
 8011e30:	f7ee fb74 	bl	800051c <__aeabi_d2uiz>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	d100      	bne.n	8011e3a <_strtod_l+0xb6e>
 8011e38:	3001      	adds	r0, #1
 8011e3a:	f7f1 f913 	bl	8003064 <__aeabi_ui2d>
 8011e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e40:	0004      	movs	r4, r0
 8011e42:	000b      	movs	r3, r1
 8011e44:	000d      	movs	r5, r1
 8011e46:	2a00      	cmp	r2, #0
 8011e48:	d122      	bne.n	8011e90 <_strtod_l+0xbc4>
 8011e4a:	2280      	movs	r2, #128	; 0x80
 8011e4c:	0612      	lsls	r2, r2, #24
 8011e4e:	188b      	adds	r3, r1, r2
 8011e50:	9016      	str	r0, [sp, #88]	; 0x58
 8011e52:	9317      	str	r3, [sp, #92]	; 0x5c
 8011e54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011e56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e58:	9212      	str	r2, [sp, #72]	; 0x48
 8011e5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8011e5c:	22d6      	movs	r2, #214	; 0xd6
 8011e5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011e60:	04d2      	lsls	r2, r2, #19
 8011e62:	189b      	adds	r3, r3, r2
 8011e64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8011e6a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011e6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011e6e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011e70:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8011e72:	f003 f8a1 	bl	8014fb8 <__ulp>
 8011e76:	0002      	movs	r2, r0
 8011e78:	000b      	movs	r3, r1
 8011e7a:	0030      	movs	r0, r6
 8011e7c:	0039      	movs	r1, r7
 8011e7e:	f7f0 fa29 	bl	80022d4 <__aeabi_dmul>
 8011e82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e86:	f7ef facb 	bl	8001420 <__aeabi_dadd>
 8011e8a:	0006      	movs	r6, r0
 8011e8c:	000f      	movs	r7, r1
 8011e8e:	e78f      	b.n	8011db0 <_strtod_l+0xae4>
 8011e90:	0002      	movs	r2, r0
 8011e92:	9216      	str	r2, [sp, #88]	; 0x58
 8011e94:	9317      	str	r3, [sp, #92]	; 0x5c
 8011e96:	e7dd      	b.n	8011e54 <_strtod_l+0xb88>
 8011e98:	4b10      	ldr	r3, [pc, #64]	; (8011edc <_strtod_l+0xc10>)
 8011e9a:	f7ee fadd 	bl	8000458 <__aeabi_dcmplt>
 8011e9e:	e7b2      	b.n	8011e06 <_strtod_l+0xb3a>
 8011ea0:	fff00000 	.word	0xfff00000
 8011ea4:	000fffff 	.word	0x000fffff
 8011ea8:	3ff00000 	.word	0x3ff00000
 8011eac:	3fe00000 	.word	0x3fe00000
 8011eb0:	7ff00000 	.word	0x7ff00000
 8011eb4:	7fe00000 	.word	0x7fe00000
 8011eb8:	fcb00000 	.word	0xfcb00000
 8011ebc:	7c9fffff 	.word	0x7c9fffff
 8011ec0:	7fefffff 	.word	0x7fefffff
 8011ec4:	bff00000 	.word	0xbff00000
 8011ec8:	94a03595 	.word	0x94a03595
 8011ecc:	3fdfffff 	.word	0x3fdfffff
 8011ed0:	35afe535 	.word	0x35afe535
 8011ed4:	ffc00000 	.word	0xffc00000
 8011ed8:	41dfffff 	.word	0x41dfffff
 8011edc:	3fcfffff 	.word	0x3fcfffff

08011ee0 <_strtod_r>:
 8011ee0:	b510      	push	{r4, lr}
 8011ee2:	4b02      	ldr	r3, [pc, #8]	; (8011eec <_strtod_r+0xc>)
 8011ee4:	f7ff f9f2 	bl	80112cc <_strtod_l>
 8011ee8:	bd10      	pop	{r4, pc}
 8011eea:	46c0      	nop			; (mov r8, r8)
 8011eec:	200000fc 	.word	0x200000fc

08011ef0 <strtod>:
 8011ef0:	b510      	push	{r4, lr}
 8011ef2:	4c04      	ldr	r4, [pc, #16]	; (8011f04 <strtod+0x14>)
 8011ef4:	000a      	movs	r2, r1
 8011ef6:	0001      	movs	r1, r0
 8011ef8:	4b03      	ldr	r3, [pc, #12]	; (8011f08 <strtod+0x18>)
 8011efa:	6820      	ldr	r0, [r4, #0]
 8011efc:	f7ff f9e6 	bl	80112cc <_strtod_l>
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	46c0      	nop			; (mov r8, r8)
 8011f04:	200002b4 	.word	0x200002b4
 8011f08:	200000fc 	.word	0x200000fc

08011f0c <_strtol_l.constprop.0>:
 8011f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f0e:	b087      	sub	sp, #28
 8011f10:	001e      	movs	r6, r3
 8011f12:	9005      	str	r0, [sp, #20]
 8011f14:	9101      	str	r1, [sp, #4]
 8011f16:	9202      	str	r2, [sp, #8]
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	d048      	beq.n	8011fae <_strtol_l.constprop.0+0xa2>
 8011f1c:	000b      	movs	r3, r1
 8011f1e:	2e24      	cmp	r6, #36	; 0x24
 8011f20:	d845      	bhi.n	8011fae <_strtol_l.constprop.0+0xa2>
 8011f22:	4a3b      	ldr	r2, [pc, #236]	; (8012010 <_strtol_l.constprop.0+0x104>)
 8011f24:	2108      	movs	r1, #8
 8011f26:	4694      	mov	ip, r2
 8011f28:	001a      	movs	r2, r3
 8011f2a:	4660      	mov	r0, ip
 8011f2c:	7814      	ldrb	r4, [r2, #0]
 8011f2e:	3301      	adds	r3, #1
 8011f30:	5d00      	ldrb	r0, [r0, r4]
 8011f32:	001d      	movs	r5, r3
 8011f34:	0007      	movs	r7, r0
 8011f36:	400f      	ands	r7, r1
 8011f38:	4208      	tst	r0, r1
 8011f3a:	d1f5      	bne.n	8011f28 <_strtol_l.constprop.0+0x1c>
 8011f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8011f3e:	d13d      	bne.n	8011fbc <_strtol_l.constprop.0+0xb0>
 8011f40:	2701      	movs	r7, #1
 8011f42:	781c      	ldrb	r4, [r3, #0]
 8011f44:	1c95      	adds	r5, r2, #2
 8011f46:	2e00      	cmp	r6, #0
 8011f48:	d05e      	beq.n	8012008 <_strtol_l.constprop.0+0xfc>
 8011f4a:	2e10      	cmp	r6, #16
 8011f4c:	d109      	bne.n	8011f62 <_strtol_l.constprop.0+0x56>
 8011f4e:	2c30      	cmp	r4, #48	; 0x30
 8011f50:	d107      	bne.n	8011f62 <_strtol_l.constprop.0+0x56>
 8011f52:	2220      	movs	r2, #32
 8011f54:	782b      	ldrb	r3, [r5, #0]
 8011f56:	4393      	bics	r3, r2
 8011f58:	2b58      	cmp	r3, #88	; 0x58
 8011f5a:	d150      	bne.n	8011ffe <_strtol_l.constprop.0+0xf2>
 8011f5c:	2610      	movs	r6, #16
 8011f5e:	786c      	ldrb	r4, [r5, #1]
 8011f60:	3502      	adds	r5, #2
 8011f62:	4b2c      	ldr	r3, [pc, #176]	; (8012014 <_strtol_l.constprop.0+0x108>)
 8011f64:	0031      	movs	r1, r6
 8011f66:	18fb      	adds	r3, r7, r3
 8011f68:	0018      	movs	r0, r3
 8011f6a:	9303      	str	r3, [sp, #12]
 8011f6c:	f7ee f96e 	bl	800024c <__aeabi_uidivmod>
 8011f70:	2200      	movs	r2, #0
 8011f72:	9104      	str	r1, [sp, #16]
 8011f74:	2101      	movs	r1, #1
 8011f76:	4684      	mov	ip, r0
 8011f78:	0010      	movs	r0, r2
 8011f7a:	4249      	negs	r1, r1
 8011f7c:	0023      	movs	r3, r4
 8011f7e:	3b30      	subs	r3, #48	; 0x30
 8011f80:	2b09      	cmp	r3, #9
 8011f82:	d903      	bls.n	8011f8c <_strtol_l.constprop.0+0x80>
 8011f84:	3b11      	subs	r3, #17
 8011f86:	2b19      	cmp	r3, #25
 8011f88:	d81d      	bhi.n	8011fc6 <_strtol_l.constprop.0+0xba>
 8011f8a:	330a      	adds	r3, #10
 8011f8c:	429e      	cmp	r6, r3
 8011f8e:	dd1e      	ble.n	8011fce <_strtol_l.constprop.0+0xc2>
 8011f90:	1c54      	adds	r4, r2, #1
 8011f92:	d009      	beq.n	8011fa8 <_strtol_l.constprop.0+0x9c>
 8011f94:	000a      	movs	r2, r1
 8011f96:	4584      	cmp	ip, r0
 8011f98:	d306      	bcc.n	8011fa8 <_strtol_l.constprop.0+0x9c>
 8011f9a:	d102      	bne.n	8011fa2 <_strtol_l.constprop.0+0x96>
 8011f9c:	9c04      	ldr	r4, [sp, #16]
 8011f9e:	429c      	cmp	r4, r3
 8011fa0:	db02      	blt.n	8011fa8 <_strtol_l.constprop.0+0x9c>
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	4370      	muls	r0, r6
 8011fa6:	1818      	adds	r0, r3, r0
 8011fa8:	782c      	ldrb	r4, [r5, #0]
 8011faa:	3501      	adds	r5, #1
 8011fac:	e7e6      	b.n	8011f7c <_strtol_l.constprop.0+0x70>
 8011fae:	f001 f9b5 	bl	801331c <__errno>
 8011fb2:	2316      	movs	r3, #22
 8011fb4:	6003      	str	r3, [r0, #0]
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	b007      	add	sp, #28
 8011fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fbc:	2c2b      	cmp	r4, #43	; 0x2b
 8011fbe:	d1c2      	bne.n	8011f46 <_strtol_l.constprop.0+0x3a>
 8011fc0:	781c      	ldrb	r4, [r3, #0]
 8011fc2:	1c95      	adds	r5, r2, #2
 8011fc4:	e7bf      	b.n	8011f46 <_strtol_l.constprop.0+0x3a>
 8011fc6:	0023      	movs	r3, r4
 8011fc8:	3b61      	subs	r3, #97	; 0x61
 8011fca:	2b19      	cmp	r3, #25
 8011fcc:	d9dd      	bls.n	8011f8a <_strtol_l.constprop.0+0x7e>
 8011fce:	1c53      	adds	r3, r2, #1
 8011fd0:	d109      	bne.n	8011fe6 <_strtol_l.constprop.0+0xda>
 8011fd2:	2322      	movs	r3, #34	; 0x22
 8011fd4:	9a05      	ldr	r2, [sp, #20]
 8011fd6:	9803      	ldr	r0, [sp, #12]
 8011fd8:	6013      	str	r3, [r2, #0]
 8011fda:	9b02      	ldr	r3, [sp, #8]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d0eb      	beq.n	8011fb8 <_strtol_l.constprop.0+0xac>
 8011fe0:	1e6b      	subs	r3, r5, #1
 8011fe2:	9301      	str	r3, [sp, #4]
 8011fe4:	e007      	b.n	8011ff6 <_strtol_l.constprop.0+0xea>
 8011fe6:	2f00      	cmp	r7, #0
 8011fe8:	d000      	beq.n	8011fec <_strtol_l.constprop.0+0xe0>
 8011fea:	4240      	negs	r0, r0
 8011fec:	9b02      	ldr	r3, [sp, #8]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d0e2      	beq.n	8011fb8 <_strtol_l.constprop.0+0xac>
 8011ff2:	2a00      	cmp	r2, #0
 8011ff4:	d1f4      	bne.n	8011fe0 <_strtol_l.constprop.0+0xd4>
 8011ff6:	9b02      	ldr	r3, [sp, #8]
 8011ff8:	9a01      	ldr	r2, [sp, #4]
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	e7dc      	b.n	8011fb8 <_strtol_l.constprop.0+0xac>
 8011ffe:	2430      	movs	r4, #48	; 0x30
 8012000:	2e00      	cmp	r6, #0
 8012002:	d1ae      	bne.n	8011f62 <_strtol_l.constprop.0+0x56>
 8012004:	3608      	adds	r6, #8
 8012006:	e7ac      	b.n	8011f62 <_strtol_l.constprop.0+0x56>
 8012008:	2c30      	cmp	r4, #48	; 0x30
 801200a:	d0a2      	beq.n	8011f52 <_strtol_l.constprop.0+0x46>
 801200c:	260a      	movs	r6, #10
 801200e:	e7a8      	b.n	8011f62 <_strtol_l.constprop.0+0x56>
 8012010:	080185a9 	.word	0x080185a9
 8012014:	7fffffff 	.word	0x7fffffff

08012018 <_strtol_r>:
 8012018:	b510      	push	{r4, lr}
 801201a:	f7ff ff77 	bl	8011f0c <_strtol_l.constprop.0>
 801201e:	bd10      	pop	{r4, pc}

08012020 <strtol>:
 8012020:	b510      	push	{r4, lr}
 8012022:	4c04      	ldr	r4, [pc, #16]	; (8012034 <strtol+0x14>)
 8012024:	0013      	movs	r3, r2
 8012026:	000a      	movs	r2, r1
 8012028:	0001      	movs	r1, r0
 801202a:	6820      	ldr	r0, [r4, #0]
 801202c:	f7ff ff6e 	bl	8011f0c <_strtol_l.constprop.0>
 8012030:	bd10      	pop	{r4, pc}
 8012032:	46c0      	nop			; (mov r8, r8)
 8012034:	200002b4 	.word	0x200002b4

08012038 <__cvt>:
 8012038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801203a:	001e      	movs	r6, r3
 801203c:	2300      	movs	r3, #0
 801203e:	0014      	movs	r4, r2
 8012040:	b08b      	sub	sp, #44	; 0x2c
 8012042:	429e      	cmp	r6, r3
 8012044:	da04      	bge.n	8012050 <__cvt+0x18>
 8012046:	2180      	movs	r1, #128	; 0x80
 8012048:	0609      	lsls	r1, r1, #24
 801204a:	1873      	adds	r3, r6, r1
 801204c:	001e      	movs	r6, r3
 801204e:	232d      	movs	r3, #45	; 0x2d
 8012050:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012052:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012054:	7013      	strb	r3, [r2, #0]
 8012056:	2320      	movs	r3, #32
 8012058:	2203      	movs	r2, #3
 801205a:	439f      	bics	r7, r3
 801205c:	2f46      	cmp	r7, #70	; 0x46
 801205e:	d007      	beq.n	8012070 <__cvt+0x38>
 8012060:	003b      	movs	r3, r7
 8012062:	3b45      	subs	r3, #69	; 0x45
 8012064:	4259      	negs	r1, r3
 8012066:	414b      	adcs	r3, r1
 8012068:	9910      	ldr	r1, [sp, #64]	; 0x40
 801206a:	3a01      	subs	r2, #1
 801206c:	18cb      	adds	r3, r1, r3
 801206e:	9310      	str	r3, [sp, #64]	; 0x40
 8012070:	ab09      	add	r3, sp, #36	; 0x24
 8012072:	9304      	str	r3, [sp, #16]
 8012074:	ab08      	add	r3, sp, #32
 8012076:	9303      	str	r3, [sp, #12]
 8012078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801207a:	9200      	str	r2, [sp, #0]
 801207c:	9302      	str	r3, [sp, #8]
 801207e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012080:	0022      	movs	r2, r4
 8012082:	9301      	str	r3, [sp, #4]
 8012084:	0033      	movs	r3, r6
 8012086:	f001 fa4b 	bl	8013520 <_dtoa_r>
 801208a:	0005      	movs	r5, r0
 801208c:	2f47      	cmp	r7, #71	; 0x47
 801208e:	d102      	bne.n	8012096 <__cvt+0x5e>
 8012090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012092:	07db      	lsls	r3, r3, #31
 8012094:	d528      	bpl.n	80120e8 <__cvt+0xb0>
 8012096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012098:	18eb      	adds	r3, r5, r3
 801209a:	9307      	str	r3, [sp, #28]
 801209c:	2f46      	cmp	r7, #70	; 0x46
 801209e:	d114      	bne.n	80120ca <__cvt+0x92>
 80120a0:	782b      	ldrb	r3, [r5, #0]
 80120a2:	2b30      	cmp	r3, #48	; 0x30
 80120a4:	d10c      	bne.n	80120c0 <__cvt+0x88>
 80120a6:	2200      	movs	r2, #0
 80120a8:	2300      	movs	r3, #0
 80120aa:	0020      	movs	r0, r4
 80120ac:	0031      	movs	r1, r6
 80120ae:	f7ee f9cd 	bl	800044c <__aeabi_dcmpeq>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d104      	bne.n	80120c0 <__cvt+0x88>
 80120b6:	2301      	movs	r3, #1
 80120b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80120ba:	1a9b      	subs	r3, r3, r2
 80120bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80120be:	6013      	str	r3, [r2, #0]
 80120c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80120c2:	9a07      	ldr	r2, [sp, #28]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	18d3      	adds	r3, r2, r3
 80120c8:	9307      	str	r3, [sp, #28]
 80120ca:	2200      	movs	r2, #0
 80120cc:	2300      	movs	r3, #0
 80120ce:	0020      	movs	r0, r4
 80120d0:	0031      	movs	r1, r6
 80120d2:	f7ee f9bb 	bl	800044c <__aeabi_dcmpeq>
 80120d6:	2800      	cmp	r0, #0
 80120d8:	d001      	beq.n	80120de <__cvt+0xa6>
 80120da:	9b07      	ldr	r3, [sp, #28]
 80120dc:	9309      	str	r3, [sp, #36]	; 0x24
 80120de:	2230      	movs	r2, #48	; 0x30
 80120e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120e2:	9907      	ldr	r1, [sp, #28]
 80120e4:	428b      	cmp	r3, r1
 80120e6:	d306      	bcc.n	80120f6 <__cvt+0xbe>
 80120e8:	0028      	movs	r0, r5
 80120ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80120ee:	1b5b      	subs	r3, r3, r5
 80120f0:	6013      	str	r3, [r2, #0]
 80120f2:	b00b      	add	sp, #44	; 0x2c
 80120f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f6:	1c59      	adds	r1, r3, #1
 80120f8:	9109      	str	r1, [sp, #36]	; 0x24
 80120fa:	701a      	strb	r2, [r3, #0]
 80120fc:	e7f0      	b.n	80120e0 <__cvt+0xa8>

080120fe <__exponent>:
 80120fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012100:	1c83      	adds	r3, r0, #2
 8012102:	b087      	sub	sp, #28
 8012104:	9303      	str	r3, [sp, #12]
 8012106:	0005      	movs	r5, r0
 8012108:	000c      	movs	r4, r1
 801210a:	232b      	movs	r3, #43	; 0x2b
 801210c:	7002      	strb	r2, [r0, #0]
 801210e:	2900      	cmp	r1, #0
 8012110:	da01      	bge.n	8012116 <__exponent+0x18>
 8012112:	424c      	negs	r4, r1
 8012114:	3302      	adds	r3, #2
 8012116:	706b      	strb	r3, [r5, #1]
 8012118:	2c09      	cmp	r4, #9
 801211a:	dd2f      	ble.n	801217c <__exponent+0x7e>
 801211c:	270a      	movs	r7, #10
 801211e:	ab04      	add	r3, sp, #16
 8012120:	1dde      	adds	r6, r3, #7
 8012122:	0020      	movs	r0, r4
 8012124:	0039      	movs	r1, r7
 8012126:	9601      	str	r6, [sp, #4]
 8012128:	f7ee f97a 	bl	8000420 <__aeabi_idivmod>
 801212c:	3e01      	subs	r6, #1
 801212e:	3130      	adds	r1, #48	; 0x30
 8012130:	0020      	movs	r0, r4
 8012132:	7031      	strb	r1, [r6, #0]
 8012134:	0039      	movs	r1, r7
 8012136:	9402      	str	r4, [sp, #8]
 8012138:	f7ee f88c 	bl	8000254 <__divsi3>
 801213c:	9b02      	ldr	r3, [sp, #8]
 801213e:	0004      	movs	r4, r0
 8012140:	2b63      	cmp	r3, #99	; 0x63
 8012142:	dcee      	bgt.n	8012122 <__exponent+0x24>
 8012144:	9b01      	ldr	r3, [sp, #4]
 8012146:	3430      	adds	r4, #48	; 0x30
 8012148:	1e9a      	subs	r2, r3, #2
 801214a:	0013      	movs	r3, r2
 801214c:	9903      	ldr	r1, [sp, #12]
 801214e:	7014      	strb	r4, [r2, #0]
 8012150:	a804      	add	r0, sp, #16
 8012152:	3007      	adds	r0, #7
 8012154:	4298      	cmp	r0, r3
 8012156:	d80c      	bhi.n	8012172 <__exponent+0x74>
 8012158:	2300      	movs	r3, #0
 801215a:	4282      	cmp	r2, r0
 801215c:	d804      	bhi.n	8012168 <__exponent+0x6a>
 801215e:	aa04      	add	r2, sp, #16
 8012160:	3309      	adds	r3, #9
 8012162:	189b      	adds	r3, r3, r2
 8012164:	9a01      	ldr	r2, [sp, #4]
 8012166:	1a9b      	subs	r3, r3, r2
 8012168:	9a03      	ldr	r2, [sp, #12]
 801216a:	18d3      	adds	r3, r2, r3
 801216c:	1b58      	subs	r0, r3, r5
 801216e:	b007      	add	sp, #28
 8012170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012172:	7818      	ldrb	r0, [r3, #0]
 8012174:	3301      	adds	r3, #1
 8012176:	7008      	strb	r0, [r1, #0]
 8012178:	3101      	adds	r1, #1
 801217a:	e7e9      	b.n	8012150 <__exponent+0x52>
 801217c:	2330      	movs	r3, #48	; 0x30
 801217e:	3430      	adds	r4, #48	; 0x30
 8012180:	70ab      	strb	r3, [r5, #2]
 8012182:	70ec      	strb	r4, [r5, #3]
 8012184:	1d2b      	adds	r3, r5, #4
 8012186:	e7f1      	b.n	801216c <__exponent+0x6e>

08012188 <_printf_float>:
 8012188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801218a:	b095      	sub	sp, #84	; 0x54
 801218c:	000c      	movs	r4, r1
 801218e:	9208      	str	r2, [sp, #32]
 8012190:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8012192:	9309      	str	r3, [sp, #36]	; 0x24
 8012194:	0007      	movs	r7, r0
 8012196:	f000 ffff 	bl	8013198 <_localeconv_r>
 801219a:	6803      	ldr	r3, [r0, #0]
 801219c:	0018      	movs	r0, r3
 801219e:	930c      	str	r3, [sp, #48]	; 0x30
 80121a0:	f7ed ffb2 	bl	8000108 <strlen>
 80121a4:	2300      	movs	r3, #0
 80121a6:	9312      	str	r3, [sp, #72]	; 0x48
 80121a8:	7e23      	ldrb	r3, [r4, #24]
 80121aa:	2207      	movs	r2, #7
 80121ac:	930a      	str	r3, [sp, #40]	; 0x28
 80121ae:	6823      	ldr	r3, [r4, #0]
 80121b0:	900d      	str	r0, [sp, #52]	; 0x34
 80121b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80121b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80121b6:	682b      	ldr	r3, [r5, #0]
 80121b8:	05c9      	lsls	r1, r1, #23
 80121ba:	d547      	bpl.n	801224c <_printf_float+0xc4>
 80121bc:	189b      	adds	r3, r3, r2
 80121be:	4393      	bics	r3, r2
 80121c0:	001a      	movs	r2, r3
 80121c2:	3208      	adds	r2, #8
 80121c4:	602a      	str	r2, [r5, #0]
 80121c6:	681e      	ldr	r6, [r3, #0]
 80121c8:	685d      	ldr	r5, [r3, #4]
 80121ca:	0032      	movs	r2, r6
 80121cc:	002b      	movs	r3, r5
 80121ce:	64a2      	str	r2, [r4, #72]	; 0x48
 80121d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80121d2:	2201      	movs	r2, #1
 80121d4:	006b      	lsls	r3, r5, #1
 80121d6:	085b      	lsrs	r3, r3, #1
 80121d8:	930e      	str	r3, [sp, #56]	; 0x38
 80121da:	0030      	movs	r0, r6
 80121dc:	4bab      	ldr	r3, [pc, #684]	; (801248c <_printf_float+0x304>)
 80121de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80121e0:	4252      	negs	r2, r2
 80121e2:	f7f0 febb 	bl	8002f5c <__aeabi_dcmpun>
 80121e6:	2800      	cmp	r0, #0
 80121e8:	d132      	bne.n	8012250 <_printf_float+0xc8>
 80121ea:	2201      	movs	r2, #1
 80121ec:	0030      	movs	r0, r6
 80121ee:	4ba7      	ldr	r3, [pc, #668]	; (801248c <_printf_float+0x304>)
 80121f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80121f2:	4252      	negs	r2, r2
 80121f4:	f7ee f93a 	bl	800046c <__aeabi_dcmple>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	d129      	bne.n	8012250 <_printf_float+0xc8>
 80121fc:	2200      	movs	r2, #0
 80121fe:	2300      	movs	r3, #0
 8012200:	0030      	movs	r0, r6
 8012202:	0029      	movs	r1, r5
 8012204:	f7ee f928 	bl	8000458 <__aeabi_dcmplt>
 8012208:	2800      	cmp	r0, #0
 801220a:	d003      	beq.n	8012214 <_printf_float+0x8c>
 801220c:	0023      	movs	r3, r4
 801220e:	222d      	movs	r2, #45	; 0x2d
 8012210:	3343      	adds	r3, #67	; 0x43
 8012212:	701a      	strb	r2, [r3, #0]
 8012214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012216:	4d9e      	ldr	r5, [pc, #632]	; (8012490 <_printf_float+0x308>)
 8012218:	2b47      	cmp	r3, #71	; 0x47
 801221a:	d900      	bls.n	801221e <_printf_float+0x96>
 801221c:	4d9d      	ldr	r5, [pc, #628]	; (8012494 <_printf_float+0x30c>)
 801221e:	2303      	movs	r3, #3
 8012220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012222:	6123      	str	r3, [r4, #16]
 8012224:	3301      	adds	r3, #1
 8012226:	439a      	bics	r2, r3
 8012228:	2300      	movs	r3, #0
 801222a:	6022      	str	r2, [r4, #0]
 801222c:	930b      	str	r3, [sp, #44]	; 0x2c
 801222e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012230:	0021      	movs	r1, r4
 8012232:	9300      	str	r3, [sp, #0]
 8012234:	0038      	movs	r0, r7
 8012236:	9b08      	ldr	r3, [sp, #32]
 8012238:	aa13      	add	r2, sp, #76	; 0x4c
 801223a:	f000 f9fb 	bl	8012634 <_printf_common>
 801223e:	3001      	adds	r0, #1
 8012240:	d000      	beq.n	8012244 <_printf_float+0xbc>
 8012242:	e0a3      	b.n	801238c <_printf_float+0x204>
 8012244:	2001      	movs	r0, #1
 8012246:	4240      	negs	r0, r0
 8012248:	b015      	add	sp, #84	; 0x54
 801224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801224c:	3307      	adds	r3, #7
 801224e:	e7b6      	b.n	80121be <_printf_float+0x36>
 8012250:	0032      	movs	r2, r6
 8012252:	002b      	movs	r3, r5
 8012254:	0030      	movs	r0, r6
 8012256:	0029      	movs	r1, r5
 8012258:	f7f0 fe80 	bl	8002f5c <__aeabi_dcmpun>
 801225c:	2800      	cmp	r0, #0
 801225e:	d00b      	beq.n	8012278 <_printf_float+0xf0>
 8012260:	2d00      	cmp	r5, #0
 8012262:	da03      	bge.n	801226c <_printf_float+0xe4>
 8012264:	0023      	movs	r3, r4
 8012266:	222d      	movs	r2, #45	; 0x2d
 8012268:	3343      	adds	r3, #67	; 0x43
 801226a:	701a      	strb	r2, [r3, #0]
 801226c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801226e:	4d8a      	ldr	r5, [pc, #552]	; (8012498 <_printf_float+0x310>)
 8012270:	2b47      	cmp	r3, #71	; 0x47
 8012272:	d9d4      	bls.n	801221e <_printf_float+0x96>
 8012274:	4d89      	ldr	r5, [pc, #548]	; (801249c <_printf_float+0x314>)
 8012276:	e7d2      	b.n	801221e <_printf_float+0x96>
 8012278:	2220      	movs	r2, #32
 801227a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801227c:	6863      	ldr	r3, [r4, #4]
 801227e:	4391      	bics	r1, r2
 8012280:	910e      	str	r1, [sp, #56]	; 0x38
 8012282:	1c5a      	adds	r2, r3, #1
 8012284:	d14a      	bne.n	801231c <_printf_float+0x194>
 8012286:	3307      	adds	r3, #7
 8012288:	6063      	str	r3, [r4, #4]
 801228a:	2380      	movs	r3, #128	; 0x80
 801228c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801228e:	00db      	lsls	r3, r3, #3
 8012290:	4313      	orrs	r3, r2
 8012292:	2200      	movs	r2, #0
 8012294:	9206      	str	r2, [sp, #24]
 8012296:	aa12      	add	r2, sp, #72	; 0x48
 8012298:	9205      	str	r2, [sp, #20]
 801229a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	9204      	str	r2, [sp, #16]
 80122a0:	aa11      	add	r2, sp, #68	; 0x44
 80122a2:	9203      	str	r2, [sp, #12]
 80122a4:	2223      	movs	r2, #35	; 0x23
 80122a6:	a908      	add	r1, sp, #32
 80122a8:	9301      	str	r3, [sp, #4]
 80122aa:	6863      	ldr	r3, [r4, #4]
 80122ac:	1852      	adds	r2, r2, r1
 80122ae:	9202      	str	r2, [sp, #8]
 80122b0:	9300      	str	r3, [sp, #0]
 80122b2:	0032      	movs	r2, r6
 80122b4:	002b      	movs	r3, r5
 80122b6:	0038      	movs	r0, r7
 80122b8:	f7ff febe 	bl	8012038 <__cvt>
 80122bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122be:	0005      	movs	r5, r0
 80122c0:	2b47      	cmp	r3, #71	; 0x47
 80122c2:	d109      	bne.n	80122d8 <_printf_float+0x150>
 80122c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80122c6:	1cda      	adds	r2, r3, #3
 80122c8:	db02      	blt.n	80122d0 <_printf_float+0x148>
 80122ca:	6862      	ldr	r2, [r4, #4]
 80122cc:	4293      	cmp	r3, r2
 80122ce:	dd49      	ble.n	8012364 <_printf_float+0x1dc>
 80122d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122d2:	3b02      	subs	r3, #2
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	930a      	str	r3, [sp, #40]	; 0x28
 80122d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80122dc:	2b65      	cmp	r3, #101	; 0x65
 80122de:	d824      	bhi.n	801232a <_printf_float+0x1a2>
 80122e0:	0020      	movs	r0, r4
 80122e2:	001a      	movs	r2, r3
 80122e4:	3901      	subs	r1, #1
 80122e6:	3050      	adds	r0, #80	; 0x50
 80122e8:	9111      	str	r1, [sp, #68]	; 0x44
 80122ea:	f7ff ff08 	bl	80120fe <__exponent>
 80122ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80122f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80122f2:	1813      	adds	r3, r2, r0
 80122f4:	6123      	str	r3, [r4, #16]
 80122f6:	2a01      	cmp	r2, #1
 80122f8:	dc02      	bgt.n	8012300 <_printf_float+0x178>
 80122fa:	6822      	ldr	r2, [r4, #0]
 80122fc:	07d2      	lsls	r2, r2, #31
 80122fe:	d501      	bpl.n	8012304 <_printf_float+0x17c>
 8012300:	3301      	adds	r3, #1
 8012302:	6123      	str	r3, [r4, #16]
 8012304:	2323      	movs	r3, #35	; 0x23
 8012306:	aa08      	add	r2, sp, #32
 8012308:	189b      	adds	r3, r3, r2
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d100      	bne.n	8012312 <_printf_float+0x18a>
 8012310:	e78d      	b.n	801222e <_printf_float+0xa6>
 8012312:	0023      	movs	r3, r4
 8012314:	222d      	movs	r2, #45	; 0x2d
 8012316:	3343      	adds	r3, #67	; 0x43
 8012318:	701a      	strb	r2, [r3, #0]
 801231a:	e788      	b.n	801222e <_printf_float+0xa6>
 801231c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801231e:	2a47      	cmp	r2, #71	; 0x47
 8012320:	d1b3      	bne.n	801228a <_printf_float+0x102>
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1b1      	bne.n	801228a <_printf_float+0x102>
 8012326:	3301      	adds	r3, #1
 8012328:	e7ae      	b.n	8012288 <_printf_float+0x100>
 801232a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801232c:	2b66      	cmp	r3, #102	; 0x66
 801232e:	d11b      	bne.n	8012368 <_printf_float+0x1e0>
 8012330:	6863      	ldr	r3, [r4, #4]
 8012332:	2900      	cmp	r1, #0
 8012334:	dd09      	ble.n	801234a <_printf_float+0x1c2>
 8012336:	6121      	str	r1, [r4, #16]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d102      	bne.n	8012342 <_printf_float+0x1ba>
 801233c:	6822      	ldr	r2, [r4, #0]
 801233e:	07d2      	lsls	r2, r2, #31
 8012340:	d50b      	bpl.n	801235a <_printf_float+0x1d2>
 8012342:	3301      	adds	r3, #1
 8012344:	185b      	adds	r3, r3, r1
 8012346:	6123      	str	r3, [r4, #16]
 8012348:	e007      	b.n	801235a <_printf_float+0x1d2>
 801234a:	2b00      	cmp	r3, #0
 801234c:	d103      	bne.n	8012356 <_printf_float+0x1ce>
 801234e:	2201      	movs	r2, #1
 8012350:	6821      	ldr	r1, [r4, #0]
 8012352:	4211      	tst	r1, r2
 8012354:	d000      	beq.n	8012358 <_printf_float+0x1d0>
 8012356:	1c9a      	adds	r2, r3, #2
 8012358:	6122      	str	r2, [r4, #16]
 801235a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801235c:	65a3      	str	r3, [r4, #88]	; 0x58
 801235e:	2300      	movs	r3, #0
 8012360:	930b      	str	r3, [sp, #44]	; 0x2c
 8012362:	e7cf      	b.n	8012304 <_printf_float+0x17c>
 8012364:	2367      	movs	r3, #103	; 0x67
 8012366:	930a      	str	r3, [sp, #40]	; 0x28
 8012368:	9911      	ldr	r1, [sp, #68]	; 0x44
 801236a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801236c:	4299      	cmp	r1, r3
 801236e:	db06      	blt.n	801237e <_printf_float+0x1f6>
 8012370:	6823      	ldr	r3, [r4, #0]
 8012372:	6121      	str	r1, [r4, #16]
 8012374:	07db      	lsls	r3, r3, #31
 8012376:	d5f0      	bpl.n	801235a <_printf_float+0x1d2>
 8012378:	3101      	adds	r1, #1
 801237a:	6121      	str	r1, [r4, #16]
 801237c:	e7ed      	b.n	801235a <_printf_float+0x1d2>
 801237e:	2201      	movs	r2, #1
 8012380:	2900      	cmp	r1, #0
 8012382:	dc01      	bgt.n	8012388 <_printf_float+0x200>
 8012384:	1892      	adds	r2, r2, r2
 8012386:	1a52      	subs	r2, r2, r1
 8012388:	189b      	adds	r3, r3, r2
 801238a:	e7dc      	b.n	8012346 <_printf_float+0x1be>
 801238c:	6822      	ldr	r2, [r4, #0]
 801238e:	0553      	lsls	r3, r2, #21
 8012390:	d408      	bmi.n	80123a4 <_printf_float+0x21c>
 8012392:	6923      	ldr	r3, [r4, #16]
 8012394:	002a      	movs	r2, r5
 8012396:	0038      	movs	r0, r7
 8012398:	9908      	ldr	r1, [sp, #32]
 801239a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801239c:	47a8      	blx	r5
 801239e:	3001      	adds	r0, #1
 80123a0:	d12a      	bne.n	80123f8 <_printf_float+0x270>
 80123a2:	e74f      	b.n	8012244 <_printf_float+0xbc>
 80123a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123a6:	2b65      	cmp	r3, #101	; 0x65
 80123a8:	d800      	bhi.n	80123ac <_printf_float+0x224>
 80123aa:	e0ec      	b.n	8012586 <_printf_float+0x3fe>
 80123ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80123ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80123b0:	2200      	movs	r2, #0
 80123b2:	2300      	movs	r3, #0
 80123b4:	f7ee f84a 	bl	800044c <__aeabi_dcmpeq>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d034      	beq.n	8012426 <_printf_float+0x29e>
 80123bc:	2301      	movs	r3, #1
 80123be:	0038      	movs	r0, r7
 80123c0:	4a37      	ldr	r2, [pc, #220]	; (80124a0 <_printf_float+0x318>)
 80123c2:	9908      	ldr	r1, [sp, #32]
 80123c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80123c6:	47a8      	blx	r5
 80123c8:	3001      	adds	r0, #1
 80123ca:	d100      	bne.n	80123ce <_printf_float+0x246>
 80123cc:	e73a      	b.n	8012244 <_printf_float+0xbc>
 80123ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80123d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80123d2:	429a      	cmp	r2, r3
 80123d4:	db02      	blt.n	80123dc <_printf_float+0x254>
 80123d6:	6823      	ldr	r3, [r4, #0]
 80123d8:	07db      	lsls	r3, r3, #31
 80123da:	d50d      	bpl.n	80123f8 <_printf_float+0x270>
 80123dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80123de:	0038      	movs	r0, r7
 80123e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123e4:	9908      	ldr	r1, [sp, #32]
 80123e6:	47a8      	blx	r5
 80123e8:	2500      	movs	r5, #0
 80123ea:	3001      	adds	r0, #1
 80123ec:	d100      	bne.n	80123f0 <_printf_float+0x268>
 80123ee:	e729      	b.n	8012244 <_printf_float+0xbc>
 80123f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80123f2:	3b01      	subs	r3, #1
 80123f4:	42ab      	cmp	r3, r5
 80123f6:	dc0a      	bgt.n	801240e <_printf_float+0x286>
 80123f8:	6823      	ldr	r3, [r4, #0]
 80123fa:	079b      	lsls	r3, r3, #30
 80123fc:	d500      	bpl.n	8012400 <_printf_float+0x278>
 80123fe:	e116      	b.n	801262e <_printf_float+0x4a6>
 8012400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012402:	68e0      	ldr	r0, [r4, #12]
 8012404:	4298      	cmp	r0, r3
 8012406:	db00      	blt.n	801240a <_printf_float+0x282>
 8012408:	e71e      	b.n	8012248 <_printf_float+0xc0>
 801240a:	0018      	movs	r0, r3
 801240c:	e71c      	b.n	8012248 <_printf_float+0xc0>
 801240e:	0022      	movs	r2, r4
 8012410:	2301      	movs	r3, #1
 8012412:	0038      	movs	r0, r7
 8012414:	9908      	ldr	r1, [sp, #32]
 8012416:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012418:	321a      	adds	r2, #26
 801241a:	47b0      	blx	r6
 801241c:	3001      	adds	r0, #1
 801241e:	d100      	bne.n	8012422 <_printf_float+0x29a>
 8012420:	e710      	b.n	8012244 <_printf_float+0xbc>
 8012422:	3501      	adds	r5, #1
 8012424:	e7e4      	b.n	80123f0 <_printf_float+0x268>
 8012426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012428:	2b00      	cmp	r3, #0
 801242a:	dc3b      	bgt.n	80124a4 <_printf_float+0x31c>
 801242c:	2301      	movs	r3, #1
 801242e:	0038      	movs	r0, r7
 8012430:	4a1b      	ldr	r2, [pc, #108]	; (80124a0 <_printf_float+0x318>)
 8012432:	9908      	ldr	r1, [sp, #32]
 8012434:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012436:	47b0      	blx	r6
 8012438:	3001      	adds	r0, #1
 801243a:	d100      	bne.n	801243e <_printf_float+0x2b6>
 801243c:	e702      	b.n	8012244 <_printf_float+0xbc>
 801243e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012440:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012442:	4313      	orrs	r3, r2
 8012444:	d102      	bne.n	801244c <_printf_float+0x2c4>
 8012446:	6823      	ldr	r3, [r4, #0]
 8012448:	07db      	lsls	r3, r3, #31
 801244a:	d5d5      	bpl.n	80123f8 <_printf_float+0x270>
 801244c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801244e:	0038      	movs	r0, r7
 8012450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012452:	9908      	ldr	r1, [sp, #32]
 8012454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012456:	47b0      	blx	r6
 8012458:	2300      	movs	r3, #0
 801245a:	3001      	adds	r0, #1
 801245c:	d100      	bne.n	8012460 <_printf_float+0x2d8>
 801245e:	e6f1      	b.n	8012244 <_printf_float+0xbc>
 8012460:	930a      	str	r3, [sp, #40]	; 0x28
 8012462:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012466:	425b      	negs	r3, r3
 8012468:	4293      	cmp	r3, r2
 801246a:	dc01      	bgt.n	8012470 <_printf_float+0x2e8>
 801246c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801246e:	e791      	b.n	8012394 <_printf_float+0x20c>
 8012470:	0022      	movs	r2, r4
 8012472:	2301      	movs	r3, #1
 8012474:	0038      	movs	r0, r7
 8012476:	9908      	ldr	r1, [sp, #32]
 8012478:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801247a:	321a      	adds	r2, #26
 801247c:	47b0      	blx	r6
 801247e:	3001      	adds	r0, #1
 8012480:	d100      	bne.n	8012484 <_printf_float+0x2fc>
 8012482:	e6df      	b.n	8012244 <_printf_float+0xbc>
 8012484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012486:	3301      	adds	r3, #1
 8012488:	e7ea      	b.n	8012460 <_printf_float+0x2d8>
 801248a:	46c0      	nop			; (mov r8, r8)
 801248c:	7fefffff 	.word	0x7fefffff
 8012490:	080186a9 	.word	0x080186a9
 8012494:	080186ad 	.word	0x080186ad
 8012498:	080186b1 	.word	0x080186b1
 801249c:	080186b5 	.word	0x080186b5
 80124a0:	080186b9 	.word	0x080186b9
 80124a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80124a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80124a8:	920a      	str	r2, [sp, #40]	; 0x28
 80124aa:	429a      	cmp	r2, r3
 80124ac:	dd00      	ble.n	80124b0 <_printf_float+0x328>
 80124ae:	930a      	str	r3, [sp, #40]	; 0x28
 80124b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	dc3d      	bgt.n	8012532 <_printf_float+0x3aa>
 80124b6:	2300      	movs	r3, #0
 80124b8:	930e      	str	r3, [sp, #56]	; 0x38
 80124ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124bc:	43db      	mvns	r3, r3
 80124be:	17db      	asrs	r3, r3, #31
 80124c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80124c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80124c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80124c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124ca:	4013      	ands	r3, r2
 80124cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124ce:	1ad3      	subs	r3, r2, r3
 80124d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124d2:	4293      	cmp	r3, r2
 80124d4:	dc36      	bgt.n	8012544 <_printf_float+0x3bc>
 80124d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80124da:	429a      	cmp	r2, r3
 80124dc:	db40      	blt.n	8012560 <_printf_float+0x3d8>
 80124de:	6823      	ldr	r3, [r4, #0]
 80124e0:	07db      	lsls	r3, r3, #31
 80124e2:	d43d      	bmi.n	8012560 <_printf_float+0x3d8>
 80124e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80124e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124ea:	1af3      	subs	r3, r6, r3
 80124ec:	1ab6      	subs	r6, r6, r2
 80124ee:	429e      	cmp	r6, r3
 80124f0:	dd00      	ble.n	80124f4 <_printf_float+0x36c>
 80124f2:	001e      	movs	r6, r3
 80124f4:	2e00      	cmp	r6, #0
 80124f6:	dc3c      	bgt.n	8012572 <_printf_float+0x3ea>
 80124f8:	2300      	movs	r3, #0
 80124fa:	930a      	str	r3, [sp, #40]	; 0x28
 80124fc:	43f3      	mvns	r3, r6
 80124fe:	17db      	asrs	r3, r3, #31
 8012500:	930b      	str	r3, [sp, #44]	; 0x2c
 8012502:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012506:	1a9b      	subs	r3, r3, r2
 8012508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801250a:	4032      	ands	r2, r6
 801250c:	1a9b      	subs	r3, r3, r2
 801250e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012510:	4293      	cmp	r3, r2
 8012512:	dc00      	bgt.n	8012516 <_printf_float+0x38e>
 8012514:	e770      	b.n	80123f8 <_printf_float+0x270>
 8012516:	0022      	movs	r2, r4
 8012518:	2301      	movs	r3, #1
 801251a:	0038      	movs	r0, r7
 801251c:	9908      	ldr	r1, [sp, #32]
 801251e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012520:	321a      	adds	r2, #26
 8012522:	47a8      	blx	r5
 8012524:	3001      	adds	r0, #1
 8012526:	d100      	bne.n	801252a <_printf_float+0x3a2>
 8012528:	e68c      	b.n	8012244 <_printf_float+0xbc>
 801252a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801252c:	3301      	adds	r3, #1
 801252e:	930a      	str	r3, [sp, #40]	; 0x28
 8012530:	e7e7      	b.n	8012502 <_printf_float+0x37a>
 8012532:	002a      	movs	r2, r5
 8012534:	0038      	movs	r0, r7
 8012536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012538:	9908      	ldr	r1, [sp, #32]
 801253a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801253c:	47b0      	blx	r6
 801253e:	3001      	adds	r0, #1
 8012540:	d1b9      	bne.n	80124b6 <_printf_float+0x32e>
 8012542:	e67f      	b.n	8012244 <_printf_float+0xbc>
 8012544:	0022      	movs	r2, r4
 8012546:	2301      	movs	r3, #1
 8012548:	0038      	movs	r0, r7
 801254a:	9908      	ldr	r1, [sp, #32]
 801254c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801254e:	321a      	adds	r2, #26
 8012550:	47b0      	blx	r6
 8012552:	3001      	adds	r0, #1
 8012554:	d100      	bne.n	8012558 <_printf_float+0x3d0>
 8012556:	e675      	b.n	8012244 <_printf_float+0xbc>
 8012558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801255a:	3301      	adds	r3, #1
 801255c:	930e      	str	r3, [sp, #56]	; 0x38
 801255e:	e7b0      	b.n	80124c2 <_printf_float+0x33a>
 8012560:	0038      	movs	r0, r7
 8012562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012566:	9908      	ldr	r1, [sp, #32]
 8012568:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801256a:	47b0      	blx	r6
 801256c:	3001      	adds	r0, #1
 801256e:	d1b9      	bne.n	80124e4 <_printf_float+0x35c>
 8012570:	e668      	b.n	8012244 <_printf_float+0xbc>
 8012572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012574:	0038      	movs	r0, r7
 8012576:	18ea      	adds	r2, r5, r3
 8012578:	9908      	ldr	r1, [sp, #32]
 801257a:	0033      	movs	r3, r6
 801257c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801257e:	47a8      	blx	r5
 8012580:	3001      	adds	r0, #1
 8012582:	d1b9      	bne.n	80124f8 <_printf_float+0x370>
 8012584:	e65e      	b.n	8012244 <_printf_float+0xbc>
 8012586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012588:	2b01      	cmp	r3, #1
 801258a:	dc02      	bgt.n	8012592 <_printf_float+0x40a>
 801258c:	2301      	movs	r3, #1
 801258e:	421a      	tst	r2, r3
 8012590:	d03a      	beq.n	8012608 <_printf_float+0x480>
 8012592:	2301      	movs	r3, #1
 8012594:	002a      	movs	r2, r5
 8012596:	0038      	movs	r0, r7
 8012598:	9908      	ldr	r1, [sp, #32]
 801259a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801259c:	47b0      	blx	r6
 801259e:	3001      	adds	r0, #1
 80125a0:	d100      	bne.n	80125a4 <_printf_float+0x41c>
 80125a2:	e64f      	b.n	8012244 <_printf_float+0xbc>
 80125a4:	0038      	movs	r0, r7
 80125a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125aa:	9908      	ldr	r1, [sp, #32]
 80125ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80125ae:	47b0      	blx	r6
 80125b0:	3001      	adds	r0, #1
 80125b2:	d100      	bne.n	80125b6 <_printf_float+0x42e>
 80125b4:	e646      	b.n	8012244 <_printf_float+0xbc>
 80125b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80125b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80125ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80125bc:	2200      	movs	r2, #0
 80125be:	001e      	movs	r6, r3
 80125c0:	2300      	movs	r3, #0
 80125c2:	f7ed ff43 	bl	800044c <__aeabi_dcmpeq>
 80125c6:	2800      	cmp	r0, #0
 80125c8:	d11c      	bne.n	8012604 <_printf_float+0x47c>
 80125ca:	0033      	movs	r3, r6
 80125cc:	1c6a      	adds	r2, r5, #1
 80125ce:	3b01      	subs	r3, #1
 80125d0:	0038      	movs	r0, r7
 80125d2:	9908      	ldr	r1, [sp, #32]
 80125d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80125d6:	47a8      	blx	r5
 80125d8:	3001      	adds	r0, #1
 80125da:	d10f      	bne.n	80125fc <_printf_float+0x474>
 80125dc:	e632      	b.n	8012244 <_printf_float+0xbc>
 80125de:	0022      	movs	r2, r4
 80125e0:	2301      	movs	r3, #1
 80125e2:	0038      	movs	r0, r7
 80125e4:	9908      	ldr	r1, [sp, #32]
 80125e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80125e8:	321a      	adds	r2, #26
 80125ea:	47b0      	blx	r6
 80125ec:	3001      	adds	r0, #1
 80125ee:	d100      	bne.n	80125f2 <_printf_float+0x46a>
 80125f0:	e628      	b.n	8012244 <_printf_float+0xbc>
 80125f2:	3501      	adds	r5, #1
 80125f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80125f6:	3b01      	subs	r3, #1
 80125f8:	42ab      	cmp	r3, r5
 80125fa:	dcf0      	bgt.n	80125de <_printf_float+0x456>
 80125fc:	0022      	movs	r2, r4
 80125fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012600:	3250      	adds	r2, #80	; 0x50
 8012602:	e6c8      	b.n	8012396 <_printf_float+0x20e>
 8012604:	2500      	movs	r5, #0
 8012606:	e7f5      	b.n	80125f4 <_printf_float+0x46c>
 8012608:	002a      	movs	r2, r5
 801260a:	e7e1      	b.n	80125d0 <_printf_float+0x448>
 801260c:	0022      	movs	r2, r4
 801260e:	2301      	movs	r3, #1
 8012610:	0038      	movs	r0, r7
 8012612:	9908      	ldr	r1, [sp, #32]
 8012614:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012616:	3219      	adds	r2, #25
 8012618:	47b0      	blx	r6
 801261a:	3001      	adds	r0, #1
 801261c:	d100      	bne.n	8012620 <_printf_float+0x498>
 801261e:	e611      	b.n	8012244 <_printf_float+0xbc>
 8012620:	3501      	adds	r5, #1
 8012622:	68e3      	ldr	r3, [r4, #12]
 8012624:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012626:	1a9b      	subs	r3, r3, r2
 8012628:	42ab      	cmp	r3, r5
 801262a:	dcef      	bgt.n	801260c <_printf_float+0x484>
 801262c:	e6e8      	b.n	8012400 <_printf_float+0x278>
 801262e:	2500      	movs	r5, #0
 8012630:	e7f7      	b.n	8012622 <_printf_float+0x49a>
 8012632:	46c0      	nop			; (mov r8, r8)

08012634 <_printf_common>:
 8012634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012636:	0016      	movs	r6, r2
 8012638:	9301      	str	r3, [sp, #4]
 801263a:	688a      	ldr	r2, [r1, #8]
 801263c:	690b      	ldr	r3, [r1, #16]
 801263e:	000c      	movs	r4, r1
 8012640:	9000      	str	r0, [sp, #0]
 8012642:	4293      	cmp	r3, r2
 8012644:	da00      	bge.n	8012648 <_printf_common+0x14>
 8012646:	0013      	movs	r3, r2
 8012648:	0022      	movs	r2, r4
 801264a:	6033      	str	r3, [r6, #0]
 801264c:	3243      	adds	r2, #67	; 0x43
 801264e:	7812      	ldrb	r2, [r2, #0]
 8012650:	2a00      	cmp	r2, #0
 8012652:	d001      	beq.n	8012658 <_printf_common+0x24>
 8012654:	3301      	adds	r3, #1
 8012656:	6033      	str	r3, [r6, #0]
 8012658:	6823      	ldr	r3, [r4, #0]
 801265a:	069b      	lsls	r3, r3, #26
 801265c:	d502      	bpl.n	8012664 <_printf_common+0x30>
 801265e:	6833      	ldr	r3, [r6, #0]
 8012660:	3302      	adds	r3, #2
 8012662:	6033      	str	r3, [r6, #0]
 8012664:	6822      	ldr	r2, [r4, #0]
 8012666:	2306      	movs	r3, #6
 8012668:	0015      	movs	r5, r2
 801266a:	401d      	ands	r5, r3
 801266c:	421a      	tst	r2, r3
 801266e:	d027      	beq.n	80126c0 <_printf_common+0x8c>
 8012670:	0023      	movs	r3, r4
 8012672:	3343      	adds	r3, #67	; 0x43
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	1e5a      	subs	r2, r3, #1
 8012678:	4193      	sbcs	r3, r2
 801267a:	6822      	ldr	r2, [r4, #0]
 801267c:	0692      	lsls	r2, r2, #26
 801267e:	d430      	bmi.n	80126e2 <_printf_common+0xae>
 8012680:	0022      	movs	r2, r4
 8012682:	9901      	ldr	r1, [sp, #4]
 8012684:	9800      	ldr	r0, [sp, #0]
 8012686:	9d08      	ldr	r5, [sp, #32]
 8012688:	3243      	adds	r2, #67	; 0x43
 801268a:	47a8      	blx	r5
 801268c:	3001      	adds	r0, #1
 801268e:	d025      	beq.n	80126dc <_printf_common+0xa8>
 8012690:	2206      	movs	r2, #6
 8012692:	6823      	ldr	r3, [r4, #0]
 8012694:	2500      	movs	r5, #0
 8012696:	4013      	ands	r3, r2
 8012698:	2b04      	cmp	r3, #4
 801269a:	d105      	bne.n	80126a8 <_printf_common+0x74>
 801269c:	6833      	ldr	r3, [r6, #0]
 801269e:	68e5      	ldr	r5, [r4, #12]
 80126a0:	1aed      	subs	r5, r5, r3
 80126a2:	43eb      	mvns	r3, r5
 80126a4:	17db      	asrs	r3, r3, #31
 80126a6:	401d      	ands	r5, r3
 80126a8:	68a3      	ldr	r3, [r4, #8]
 80126aa:	6922      	ldr	r2, [r4, #16]
 80126ac:	4293      	cmp	r3, r2
 80126ae:	dd01      	ble.n	80126b4 <_printf_common+0x80>
 80126b0:	1a9b      	subs	r3, r3, r2
 80126b2:	18ed      	adds	r5, r5, r3
 80126b4:	2600      	movs	r6, #0
 80126b6:	42b5      	cmp	r5, r6
 80126b8:	d120      	bne.n	80126fc <_printf_common+0xc8>
 80126ba:	2000      	movs	r0, #0
 80126bc:	e010      	b.n	80126e0 <_printf_common+0xac>
 80126be:	3501      	adds	r5, #1
 80126c0:	68e3      	ldr	r3, [r4, #12]
 80126c2:	6832      	ldr	r2, [r6, #0]
 80126c4:	1a9b      	subs	r3, r3, r2
 80126c6:	42ab      	cmp	r3, r5
 80126c8:	ddd2      	ble.n	8012670 <_printf_common+0x3c>
 80126ca:	0022      	movs	r2, r4
 80126cc:	2301      	movs	r3, #1
 80126ce:	9901      	ldr	r1, [sp, #4]
 80126d0:	9800      	ldr	r0, [sp, #0]
 80126d2:	9f08      	ldr	r7, [sp, #32]
 80126d4:	3219      	adds	r2, #25
 80126d6:	47b8      	blx	r7
 80126d8:	3001      	adds	r0, #1
 80126da:	d1f0      	bne.n	80126be <_printf_common+0x8a>
 80126dc:	2001      	movs	r0, #1
 80126de:	4240      	negs	r0, r0
 80126e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80126e2:	2030      	movs	r0, #48	; 0x30
 80126e4:	18e1      	adds	r1, r4, r3
 80126e6:	3143      	adds	r1, #67	; 0x43
 80126e8:	7008      	strb	r0, [r1, #0]
 80126ea:	0021      	movs	r1, r4
 80126ec:	1c5a      	adds	r2, r3, #1
 80126ee:	3145      	adds	r1, #69	; 0x45
 80126f0:	7809      	ldrb	r1, [r1, #0]
 80126f2:	18a2      	adds	r2, r4, r2
 80126f4:	3243      	adds	r2, #67	; 0x43
 80126f6:	3302      	adds	r3, #2
 80126f8:	7011      	strb	r1, [r2, #0]
 80126fa:	e7c1      	b.n	8012680 <_printf_common+0x4c>
 80126fc:	0022      	movs	r2, r4
 80126fe:	2301      	movs	r3, #1
 8012700:	9901      	ldr	r1, [sp, #4]
 8012702:	9800      	ldr	r0, [sp, #0]
 8012704:	9f08      	ldr	r7, [sp, #32]
 8012706:	321a      	adds	r2, #26
 8012708:	47b8      	blx	r7
 801270a:	3001      	adds	r0, #1
 801270c:	d0e6      	beq.n	80126dc <_printf_common+0xa8>
 801270e:	3601      	adds	r6, #1
 8012710:	e7d1      	b.n	80126b6 <_printf_common+0x82>
	...

08012714 <_printf_i>:
 8012714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012716:	b08b      	sub	sp, #44	; 0x2c
 8012718:	9206      	str	r2, [sp, #24]
 801271a:	000a      	movs	r2, r1
 801271c:	3243      	adds	r2, #67	; 0x43
 801271e:	9307      	str	r3, [sp, #28]
 8012720:	9005      	str	r0, [sp, #20]
 8012722:	9204      	str	r2, [sp, #16]
 8012724:	7e0a      	ldrb	r2, [r1, #24]
 8012726:	000c      	movs	r4, r1
 8012728:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801272a:	2a78      	cmp	r2, #120	; 0x78
 801272c:	d809      	bhi.n	8012742 <_printf_i+0x2e>
 801272e:	2a62      	cmp	r2, #98	; 0x62
 8012730:	d80b      	bhi.n	801274a <_printf_i+0x36>
 8012732:	2a00      	cmp	r2, #0
 8012734:	d100      	bne.n	8012738 <_printf_i+0x24>
 8012736:	e0be      	b.n	80128b6 <_printf_i+0x1a2>
 8012738:	497c      	ldr	r1, [pc, #496]	; (801292c <_printf_i+0x218>)
 801273a:	9103      	str	r1, [sp, #12]
 801273c:	2a58      	cmp	r2, #88	; 0x58
 801273e:	d100      	bne.n	8012742 <_printf_i+0x2e>
 8012740:	e093      	b.n	801286a <_printf_i+0x156>
 8012742:	0026      	movs	r6, r4
 8012744:	3642      	adds	r6, #66	; 0x42
 8012746:	7032      	strb	r2, [r6, #0]
 8012748:	e022      	b.n	8012790 <_printf_i+0x7c>
 801274a:	0010      	movs	r0, r2
 801274c:	3863      	subs	r0, #99	; 0x63
 801274e:	2815      	cmp	r0, #21
 8012750:	d8f7      	bhi.n	8012742 <_printf_i+0x2e>
 8012752:	f7ed fceb 	bl	800012c <__gnu_thumb1_case_shi>
 8012756:	0016      	.short	0x0016
 8012758:	fff6001f 	.word	0xfff6001f
 801275c:	fff6fff6 	.word	0xfff6fff6
 8012760:	001ffff6 	.word	0x001ffff6
 8012764:	fff6fff6 	.word	0xfff6fff6
 8012768:	fff6fff6 	.word	0xfff6fff6
 801276c:	003600a3 	.word	0x003600a3
 8012770:	fff60083 	.word	0xfff60083
 8012774:	00b4fff6 	.word	0x00b4fff6
 8012778:	0036fff6 	.word	0x0036fff6
 801277c:	fff6fff6 	.word	0xfff6fff6
 8012780:	0087      	.short	0x0087
 8012782:	0026      	movs	r6, r4
 8012784:	681a      	ldr	r2, [r3, #0]
 8012786:	3642      	adds	r6, #66	; 0x42
 8012788:	1d11      	adds	r1, r2, #4
 801278a:	6019      	str	r1, [r3, #0]
 801278c:	6813      	ldr	r3, [r2, #0]
 801278e:	7033      	strb	r3, [r6, #0]
 8012790:	2301      	movs	r3, #1
 8012792:	e0a2      	b.n	80128da <_printf_i+0x1c6>
 8012794:	6818      	ldr	r0, [r3, #0]
 8012796:	6809      	ldr	r1, [r1, #0]
 8012798:	1d02      	adds	r2, r0, #4
 801279a:	060d      	lsls	r5, r1, #24
 801279c:	d50b      	bpl.n	80127b6 <_printf_i+0xa2>
 801279e:	6805      	ldr	r5, [r0, #0]
 80127a0:	601a      	str	r2, [r3, #0]
 80127a2:	2d00      	cmp	r5, #0
 80127a4:	da03      	bge.n	80127ae <_printf_i+0x9a>
 80127a6:	232d      	movs	r3, #45	; 0x2d
 80127a8:	9a04      	ldr	r2, [sp, #16]
 80127aa:	426d      	negs	r5, r5
 80127ac:	7013      	strb	r3, [r2, #0]
 80127ae:	4b5f      	ldr	r3, [pc, #380]	; (801292c <_printf_i+0x218>)
 80127b0:	270a      	movs	r7, #10
 80127b2:	9303      	str	r3, [sp, #12]
 80127b4:	e01b      	b.n	80127ee <_printf_i+0xda>
 80127b6:	6805      	ldr	r5, [r0, #0]
 80127b8:	601a      	str	r2, [r3, #0]
 80127ba:	0649      	lsls	r1, r1, #25
 80127bc:	d5f1      	bpl.n	80127a2 <_printf_i+0x8e>
 80127be:	b22d      	sxth	r5, r5
 80127c0:	e7ef      	b.n	80127a2 <_printf_i+0x8e>
 80127c2:	680d      	ldr	r5, [r1, #0]
 80127c4:	6819      	ldr	r1, [r3, #0]
 80127c6:	1d08      	adds	r0, r1, #4
 80127c8:	6018      	str	r0, [r3, #0]
 80127ca:	062e      	lsls	r6, r5, #24
 80127cc:	d501      	bpl.n	80127d2 <_printf_i+0xbe>
 80127ce:	680d      	ldr	r5, [r1, #0]
 80127d0:	e003      	b.n	80127da <_printf_i+0xc6>
 80127d2:	066d      	lsls	r5, r5, #25
 80127d4:	d5fb      	bpl.n	80127ce <_printf_i+0xba>
 80127d6:	680d      	ldr	r5, [r1, #0]
 80127d8:	b2ad      	uxth	r5, r5
 80127da:	4b54      	ldr	r3, [pc, #336]	; (801292c <_printf_i+0x218>)
 80127dc:	2708      	movs	r7, #8
 80127de:	9303      	str	r3, [sp, #12]
 80127e0:	2a6f      	cmp	r2, #111	; 0x6f
 80127e2:	d000      	beq.n	80127e6 <_printf_i+0xd2>
 80127e4:	3702      	adds	r7, #2
 80127e6:	0023      	movs	r3, r4
 80127e8:	2200      	movs	r2, #0
 80127ea:	3343      	adds	r3, #67	; 0x43
 80127ec:	701a      	strb	r2, [r3, #0]
 80127ee:	6863      	ldr	r3, [r4, #4]
 80127f0:	60a3      	str	r3, [r4, #8]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	db03      	blt.n	80127fe <_printf_i+0xea>
 80127f6:	2104      	movs	r1, #4
 80127f8:	6822      	ldr	r2, [r4, #0]
 80127fa:	438a      	bics	r2, r1
 80127fc:	6022      	str	r2, [r4, #0]
 80127fe:	2d00      	cmp	r5, #0
 8012800:	d102      	bne.n	8012808 <_printf_i+0xf4>
 8012802:	9e04      	ldr	r6, [sp, #16]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d00c      	beq.n	8012822 <_printf_i+0x10e>
 8012808:	9e04      	ldr	r6, [sp, #16]
 801280a:	0028      	movs	r0, r5
 801280c:	0039      	movs	r1, r7
 801280e:	f7ed fd1d 	bl	800024c <__aeabi_uidivmod>
 8012812:	9b03      	ldr	r3, [sp, #12]
 8012814:	3e01      	subs	r6, #1
 8012816:	5c5b      	ldrb	r3, [r3, r1]
 8012818:	7033      	strb	r3, [r6, #0]
 801281a:	002b      	movs	r3, r5
 801281c:	0005      	movs	r5, r0
 801281e:	429f      	cmp	r7, r3
 8012820:	d9f3      	bls.n	801280a <_printf_i+0xf6>
 8012822:	2f08      	cmp	r7, #8
 8012824:	d109      	bne.n	801283a <_printf_i+0x126>
 8012826:	6823      	ldr	r3, [r4, #0]
 8012828:	07db      	lsls	r3, r3, #31
 801282a:	d506      	bpl.n	801283a <_printf_i+0x126>
 801282c:	6862      	ldr	r2, [r4, #4]
 801282e:	6923      	ldr	r3, [r4, #16]
 8012830:	429a      	cmp	r2, r3
 8012832:	dc02      	bgt.n	801283a <_printf_i+0x126>
 8012834:	2330      	movs	r3, #48	; 0x30
 8012836:	3e01      	subs	r6, #1
 8012838:	7033      	strb	r3, [r6, #0]
 801283a:	9b04      	ldr	r3, [sp, #16]
 801283c:	1b9b      	subs	r3, r3, r6
 801283e:	6123      	str	r3, [r4, #16]
 8012840:	9b07      	ldr	r3, [sp, #28]
 8012842:	0021      	movs	r1, r4
 8012844:	9300      	str	r3, [sp, #0]
 8012846:	9805      	ldr	r0, [sp, #20]
 8012848:	9b06      	ldr	r3, [sp, #24]
 801284a:	aa09      	add	r2, sp, #36	; 0x24
 801284c:	f7ff fef2 	bl	8012634 <_printf_common>
 8012850:	3001      	adds	r0, #1
 8012852:	d147      	bne.n	80128e4 <_printf_i+0x1d0>
 8012854:	2001      	movs	r0, #1
 8012856:	4240      	negs	r0, r0
 8012858:	b00b      	add	sp, #44	; 0x2c
 801285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801285c:	2220      	movs	r2, #32
 801285e:	6809      	ldr	r1, [r1, #0]
 8012860:	430a      	orrs	r2, r1
 8012862:	6022      	str	r2, [r4, #0]
 8012864:	2278      	movs	r2, #120	; 0x78
 8012866:	4932      	ldr	r1, [pc, #200]	; (8012930 <_printf_i+0x21c>)
 8012868:	9103      	str	r1, [sp, #12]
 801286a:	0021      	movs	r1, r4
 801286c:	3145      	adds	r1, #69	; 0x45
 801286e:	700a      	strb	r2, [r1, #0]
 8012870:	6819      	ldr	r1, [r3, #0]
 8012872:	6822      	ldr	r2, [r4, #0]
 8012874:	c920      	ldmia	r1!, {r5}
 8012876:	0610      	lsls	r0, r2, #24
 8012878:	d402      	bmi.n	8012880 <_printf_i+0x16c>
 801287a:	0650      	lsls	r0, r2, #25
 801287c:	d500      	bpl.n	8012880 <_printf_i+0x16c>
 801287e:	b2ad      	uxth	r5, r5
 8012880:	6019      	str	r1, [r3, #0]
 8012882:	07d3      	lsls	r3, r2, #31
 8012884:	d502      	bpl.n	801288c <_printf_i+0x178>
 8012886:	2320      	movs	r3, #32
 8012888:	4313      	orrs	r3, r2
 801288a:	6023      	str	r3, [r4, #0]
 801288c:	2710      	movs	r7, #16
 801288e:	2d00      	cmp	r5, #0
 8012890:	d1a9      	bne.n	80127e6 <_printf_i+0xd2>
 8012892:	2220      	movs	r2, #32
 8012894:	6823      	ldr	r3, [r4, #0]
 8012896:	4393      	bics	r3, r2
 8012898:	6023      	str	r3, [r4, #0]
 801289a:	e7a4      	b.n	80127e6 <_printf_i+0xd2>
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	680d      	ldr	r5, [r1, #0]
 80128a0:	1d10      	adds	r0, r2, #4
 80128a2:	6949      	ldr	r1, [r1, #20]
 80128a4:	6018      	str	r0, [r3, #0]
 80128a6:	6813      	ldr	r3, [r2, #0]
 80128a8:	062e      	lsls	r6, r5, #24
 80128aa:	d501      	bpl.n	80128b0 <_printf_i+0x19c>
 80128ac:	6019      	str	r1, [r3, #0]
 80128ae:	e002      	b.n	80128b6 <_printf_i+0x1a2>
 80128b0:	066d      	lsls	r5, r5, #25
 80128b2:	d5fb      	bpl.n	80128ac <_printf_i+0x198>
 80128b4:	8019      	strh	r1, [r3, #0]
 80128b6:	2300      	movs	r3, #0
 80128b8:	9e04      	ldr	r6, [sp, #16]
 80128ba:	6123      	str	r3, [r4, #16]
 80128bc:	e7c0      	b.n	8012840 <_printf_i+0x12c>
 80128be:	681a      	ldr	r2, [r3, #0]
 80128c0:	1d11      	adds	r1, r2, #4
 80128c2:	6019      	str	r1, [r3, #0]
 80128c4:	6816      	ldr	r6, [r2, #0]
 80128c6:	2100      	movs	r1, #0
 80128c8:	0030      	movs	r0, r6
 80128ca:	6862      	ldr	r2, [r4, #4]
 80128cc:	f000 fd5b 	bl	8013386 <memchr>
 80128d0:	2800      	cmp	r0, #0
 80128d2:	d001      	beq.n	80128d8 <_printf_i+0x1c4>
 80128d4:	1b80      	subs	r0, r0, r6
 80128d6:	6060      	str	r0, [r4, #4]
 80128d8:	6863      	ldr	r3, [r4, #4]
 80128da:	6123      	str	r3, [r4, #16]
 80128dc:	2300      	movs	r3, #0
 80128de:	9a04      	ldr	r2, [sp, #16]
 80128e0:	7013      	strb	r3, [r2, #0]
 80128e2:	e7ad      	b.n	8012840 <_printf_i+0x12c>
 80128e4:	0032      	movs	r2, r6
 80128e6:	6923      	ldr	r3, [r4, #16]
 80128e8:	9906      	ldr	r1, [sp, #24]
 80128ea:	9805      	ldr	r0, [sp, #20]
 80128ec:	9d07      	ldr	r5, [sp, #28]
 80128ee:	47a8      	blx	r5
 80128f0:	3001      	adds	r0, #1
 80128f2:	d0af      	beq.n	8012854 <_printf_i+0x140>
 80128f4:	6823      	ldr	r3, [r4, #0]
 80128f6:	079b      	lsls	r3, r3, #30
 80128f8:	d415      	bmi.n	8012926 <_printf_i+0x212>
 80128fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128fc:	68e0      	ldr	r0, [r4, #12]
 80128fe:	4298      	cmp	r0, r3
 8012900:	daaa      	bge.n	8012858 <_printf_i+0x144>
 8012902:	0018      	movs	r0, r3
 8012904:	e7a8      	b.n	8012858 <_printf_i+0x144>
 8012906:	0022      	movs	r2, r4
 8012908:	2301      	movs	r3, #1
 801290a:	9906      	ldr	r1, [sp, #24]
 801290c:	9805      	ldr	r0, [sp, #20]
 801290e:	9e07      	ldr	r6, [sp, #28]
 8012910:	3219      	adds	r2, #25
 8012912:	47b0      	blx	r6
 8012914:	3001      	adds	r0, #1
 8012916:	d09d      	beq.n	8012854 <_printf_i+0x140>
 8012918:	3501      	adds	r5, #1
 801291a:	68e3      	ldr	r3, [r4, #12]
 801291c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801291e:	1a9b      	subs	r3, r3, r2
 8012920:	42ab      	cmp	r3, r5
 8012922:	dcf0      	bgt.n	8012906 <_printf_i+0x1f2>
 8012924:	e7e9      	b.n	80128fa <_printf_i+0x1e6>
 8012926:	2500      	movs	r5, #0
 8012928:	e7f7      	b.n	801291a <_printf_i+0x206>
 801292a:	46c0      	nop			; (mov r8, r8)
 801292c:	080186bb 	.word	0x080186bb
 8012930:	080186cc 	.word	0x080186cc

08012934 <_scanf_float>:
 8012934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012936:	b08b      	sub	sp, #44	; 0x2c
 8012938:	0016      	movs	r6, r2
 801293a:	9002      	str	r0, [sp, #8]
 801293c:	22ae      	movs	r2, #174	; 0xae
 801293e:	2000      	movs	r0, #0
 8012940:	9307      	str	r3, [sp, #28]
 8012942:	688b      	ldr	r3, [r1, #8]
 8012944:	000f      	movs	r7, r1
 8012946:	1e59      	subs	r1, r3, #1
 8012948:	0052      	lsls	r2, r2, #1
 801294a:	9006      	str	r0, [sp, #24]
 801294c:	4291      	cmp	r1, r2
 801294e:	d905      	bls.n	801295c <_scanf_float+0x28>
 8012950:	3b5e      	subs	r3, #94	; 0x5e
 8012952:	3bff      	subs	r3, #255	; 0xff
 8012954:	9306      	str	r3, [sp, #24]
 8012956:	235e      	movs	r3, #94	; 0x5e
 8012958:	33ff      	adds	r3, #255	; 0xff
 801295a:	60bb      	str	r3, [r7, #8]
 801295c:	23f0      	movs	r3, #240	; 0xf0
 801295e:	683a      	ldr	r2, [r7, #0]
 8012960:	00db      	lsls	r3, r3, #3
 8012962:	4313      	orrs	r3, r2
 8012964:	603b      	str	r3, [r7, #0]
 8012966:	003b      	movs	r3, r7
 8012968:	2400      	movs	r4, #0
 801296a:	331c      	adds	r3, #28
 801296c:	001d      	movs	r5, r3
 801296e:	9304      	str	r3, [sp, #16]
 8012970:	9403      	str	r4, [sp, #12]
 8012972:	9409      	str	r4, [sp, #36]	; 0x24
 8012974:	9408      	str	r4, [sp, #32]
 8012976:	9401      	str	r4, [sp, #4]
 8012978:	9405      	str	r4, [sp, #20]
 801297a:	68ba      	ldr	r2, [r7, #8]
 801297c:	2a00      	cmp	r2, #0
 801297e:	d00a      	beq.n	8012996 <_scanf_float+0x62>
 8012980:	6833      	ldr	r3, [r6, #0]
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	2b4e      	cmp	r3, #78	; 0x4e
 8012986:	d844      	bhi.n	8012a12 <_scanf_float+0xde>
 8012988:	0018      	movs	r0, r3
 801298a:	2b40      	cmp	r3, #64	; 0x40
 801298c:	d82c      	bhi.n	80129e8 <_scanf_float+0xb4>
 801298e:	382b      	subs	r0, #43	; 0x2b
 8012990:	b2c1      	uxtb	r1, r0
 8012992:	290e      	cmp	r1, #14
 8012994:	d92a      	bls.n	80129ec <_scanf_float+0xb8>
 8012996:	9b01      	ldr	r3, [sp, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d003      	beq.n	80129a4 <_scanf_float+0x70>
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	4aa3      	ldr	r2, [pc, #652]	; (8012c2c <_scanf_float+0x2f8>)
 80129a0:	4013      	ands	r3, r2
 80129a2:	603b      	str	r3, [r7, #0]
 80129a4:	9b03      	ldr	r3, [sp, #12]
 80129a6:	3b01      	subs	r3, #1
 80129a8:	2b01      	cmp	r3, #1
 80129aa:	d900      	bls.n	80129ae <_scanf_float+0x7a>
 80129ac:	e0f9      	b.n	8012ba2 <_scanf_float+0x26e>
 80129ae:	24be      	movs	r4, #190	; 0xbe
 80129b0:	0064      	lsls	r4, r4, #1
 80129b2:	9b04      	ldr	r3, [sp, #16]
 80129b4:	429d      	cmp	r5, r3
 80129b6:	d900      	bls.n	80129ba <_scanf_float+0x86>
 80129b8:	e0e9      	b.n	8012b8e <_scanf_float+0x25a>
 80129ba:	2301      	movs	r3, #1
 80129bc:	9303      	str	r3, [sp, #12]
 80129be:	e183      	b.n	8012cc8 <_scanf_float+0x394>
 80129c0:	0018      	movs	r0, r3
 80129c2:	3861      	subs	r0, #97	; 0x61
 80129c4:	280d      	cmp	r0, #13
 80129c6:	d8e6      	bhi.n	8012996 <_scanf_float+0x62>
 80129c8:	f7ed fbb0 	bl	800012c <__gnu_thumb1_case_shi>
 80129cc:	ffe50083 	.word	0xffe50083
 80129d0:	ffe5ffe5 	.word	0xffe5ffe5
 80129d4:	00a200b6 	.word	0x00a200b6
 80129d8:	ffe5ffe5 	.word	0xffe5ffe5
 80129dc:	ffe50089 	.word	0xffe50089
 80129e0:	ffe5ffe5 	.word	0xffe5ffe5
 80129e4:	0065ffe5 	.word	0x0065ffe5
 80129e8:	3841      	subs	r0, #65	; 0x41
 80129ea:	e7eb      	b.n	80129c4 <_scanf_float+0x90>
 80129ec:	280e      	cmp	r0, #14
 80129ee:	d8d2      	bhi.n	8012996 <_scanf_float+0x62>
 80129f0:	f7ed fb9c 	bl	800012c <__gnu_thumb1_case_shi>
 80129f4:	ffd1004b 	.word	0xffd1004b
 80129f8:	0098004b 	.word	0x0098004b
 80129fc:	0020ffd1 	.word	0x0020ffd1
 8012a00:	00400040 	.word	0x00400040
 8012a04:	00400040 	.word	0x00400040
 8012a08:	00400040 	.word	0x00400040
 8012a0c:	00400040 	.word	0x00400040
 8012a10:	0040      	.short	0x0040
 8012a12:	2b6e      	cmp	r3, #110	; 0x6e
 8012a14:	d809      	bhi.n	8012a2a <_scanf_float+0xf6>
 8012a16:	2b60      	cmp	r3, #96	; 0x60
 8012a18:	d8d2      	bhi.n	80129c0 <_scanf_float+0x8c>
 8012a1a:	2b54      	cmp	r3, #84	; 0x54
 8012a1c:	d07d      	beq.n	8012b1a <_scanf_float+0x1e6>
 8012a1e:	2b59      	cmp	r3, #89	; 0x59
 8012a20:	d1b9      	bne.n	8012996 <_scanf_float+0x62>
 8012a22:	2c07      	cmp	r4, #7
 8012a24:	d1b7      	bne.n	8012996 <_scanf_float+0x62>
 8012a26:	2408      	movs	r4, #8
 8012a28:	e02c      	b.n	8012a84 <_scanf_float+0x150>
 8012a2a:	2b74      	cmp	r3, #116	; 0x74
 8012a2c:	d075      	beq.n	8012b1a <_scanf_float+0x1e6>
 8012a2e:	2b79      	cmp	r3, #121	; 0x79
 8012a30:	d0f7      	beq.n	8012a22 <_scanf_float+0xee>
 8012a32:	e7b0      	b.n	8012996 <_scanf_float+0x62>
 8012a34:	6839      	ldr	r1, [r7, #0]
 8012a36:	05c8      	lsls	r0, r1, #23
 8012a38:	d51c      	bpl.n	8012a74 <_scanf_float+0x140>
 8012a3a:	2380      	movs	r3, #128	; 0x80
 8012a3c:	4399      	bics	r1, r3
 8012a3e:	9b01      	ldr	r3, [sp, #4]
 8012a40:	6039      	str	r1, [r7, #0]
 8012a42:	3301      	adds	r3, #1
 8012a44:	9301      	str	r3, [sp, #4]
 8012a46:	9b06      	ldr	r3, [sp, #24]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d003      	beq.n	8012a54 <_scanf_float+0x120>
 8012a4c:	3b01      	subs	r3, #1
 8012a4e:	3201      	adds	r2, #1
 8012a50:	9306      	str	r3, [sp, #24]
 8012a52:	60ba      	str	r2, [r7, #8]
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	3b01      	subs	r3, #1
 8012a58:	60bb      	str	r3, [r7, #8]
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	613b      	str	r3, [r7, #16]
 8012a60:	6873      	ldr	r3, [r6, #4]
 8012a62:	3b01      	subs	r3, #1
 8012a64:	6073      	str	r3, [r6, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	dc00      	bgt.n	8012a6c <_scanf_float+0x138>
 8012a6a:	e086      	b.n	8012b7a <_scanf_float+0x246>
 8012a6c:	6833      	ldr	r3, [r6, #0]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	6033      	str	r3, [r6, #0]
 8012a72:	e782      	b.n	801297a <_scanf_float+0x46>
 8012a74:	9a03      	ldr	r2, [sp, #12]
 8012a76:	1912      	adds	r2, r2, r4
 8012a78:	2a00      	cmp	r2, #0
 8012a7a:	d18c      	bne.n	8012996 <_scanf_float+0x62>
 8012a7c:	683a      	ldr	r2, [r7, #0]
 8012a7e:	496c      	ldr	r1, [pc, #432]	; (8012c30 <_scanf_float+0x2fc>)
 8012a80:	400a      	ands	r2, r1
 8012a82:	603a      	str	r2, [r7, #0]
 8012a84:	702b      	strb	r3, [r5, #0]
 8012a86:	3501      	adds	r5, #1
 8012a88:	e7e4      	b.n	8012a54 <_scanf_float+0x120>
 8012a8a:	2180      	movs	r1, #128	; 0x80
 8012a8c:	683a      	ldr	r2, [r7, #0]
 8012a8e:	420a      	tst	r2, r1
 8012a90:	d081      	beq.n	8012996 <_scanf_float+0x62>
 8012a92:	438a      	bics	r2, r1
 8012a94:	e7f5      	b.n	8012a82 <_scanf_float+0x14e>
 8012a96:	9a03      	ldr	r2, [sp, #12]
 8012a98:	2a00      	cmp	r2, #0
 8012a9a:	d10f      	bne.n	8012abc <_scanf_float+0x188>
 8012a9c:	9a01      	ldr	r2, [sp, #4]
 8012a9e:	2a00      	cmp	r2, #0
 8012aa0:	d10f      	bne.n	8012ac2 <_scanf_float+0x18e>
 8012aa2:	683a      	ldr	r2, [r7, #0]
 8012aa4:	21e0      	movs	r1, #224	; 0xe0
 8012aa6:	0010      	movs	r0, r2
 8012aa8:	00c9      	lsls	r1, r1, #3
 8012aaa:	4008      	ands	r0, r1
 8012aac:	4288      	cmp	r0, r1
 8012aae:	d108      	bne.n	8012ac2 <_scanf_float+0x18e>
 8012ab0:	4960      	ldr	r1, [pc, #384]	; (8012c34 <_scanf_float+0x300>)
 8012ab2:	400a      	ands	r2, r1
 8012ab4:	603a      	str	r2, [r7, #0]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	9203      	str	r2, [sp, #12]
 8012aba:	e7e3      	b.n	8012a84 <_scanf_float+0x150>
 8012abc:	9a03      	ldr	r2, [sp, #12]
 8012abe:	2a02      	cmp	r2, #2
 8012ac0:	d059      	beq.n	8012b76 <_scanf_float+0x242>
 8012ac2:	2c01      	cmp	r4, #1
 8012ac4:	d002      	beq.n	8012acc <_scanf_float+0x198>
 8012ac6:	2c04      	cmp	r4, #4
 8012ac8:	d000      	beq.n	8012acc <_scanf_float+0x198>
 8012aca:	e764      	b.n	8012996 <_scanf_float+0x62>
 8012acc:	3401      	adds	r4, #1
 8012ace:	b2e4      	uxtb	r4, r4
 8012ad0:	e7d8      	b.n	8012a84 <_scanf_float+0x150>
 8012ad2:	9a03      	ldr	r2, [sp, #12]
 8012ad4:	2a01      	cmp	r2, #1
 8012ad6:	d000      	beq.n	8012ada <_scanf_float+0x1a6>
 8012ad8:	e75d      	b.n	8012996 <_scanf_float+0x62>
 8012ada:	2202      	movs	r2, #2
 8012adc:	e7ec      	b.n	8012ab8 <_scanf_float+0x184>
 8012ade:	2c00      	cmp	r4, #0
 8012ae0:	d110      	bne.n	8012b04 <_scanf_float+0x1d0>
 8012ae2:	9a01      	ldr	r2, [sp, #4]
 8012ae4:	2a00      	cmp	r2, #0
 8012ae6:	d000      	beq.n	8012aea <_scanf_float+0x1b6>
 8012ae8:	e758      	b.n	801299c <_scanf_float+0x68>
 8012aea:	683a      	ldr	r2, [r7, #0]
 8012aec:	21e0      	movs	r1, #224	; 0xe0
 8012aee:	0010      	movs	r0, r2
 8012af0:	00c9      	lsls	r1, r1, #3
 8012af2:	4008      	ands	r0, r1
 8012af4:	4288      	cmp	r0, r1
 8012af6:	d000      	beq.n	8012afa <_scanf_float+0x1c6>
 8012af8:	e754      	b.n	80129a4 <_scanf_float+0x70>
 8012afa:	494e      	ldr	r1, [pc, #312]	; (8012c34 <_scanf_float+0x300>)
 8012afc:	3401      	adds	r4, #1
 8012afe:	400a      	ands	r2, r1
 8012b00:	603a      	str	r2, [r7, #0]
 8012b02:	e7bf      	b.n	8012a84 <_scanf_float+0x150>
 8012b04:	21fd      	movs	r1, #253	; 0xfd
 8012b06:	1ee2      	subs	r2, r4, #3
 8012b08:	420a      	tst	r2, r1
 8012b0a:	d000      	beq.n	8012b0e <_scanf_float+0x1da>
 8012b0c:	e743      	b.n	8012996 <_scanf_float+0x62>
 8012b0e:	e7dd      	b.n	8012acc <_scanf_float+0x198>
 8012b10:	2c02      	cmp	r4, #2
 8012b12:	d000      	beq.n	8012b16 <_scanf_float+0x1e2>
 8012b14:	e73f      	b.n	8012996 <_scanf_float+0x62>
 8012b16:	2403      	movs	r4, #3
 8012b18:	e7b4      	b.n	8012a84 <_scanf_float+0x150>
 8012b1a:	2c06      	cmp	r4, #6
 8012b1c:	d000      	beq.n	8012b20 <_scanf_float+0x1ec>
 8012b1e:	e73a      	b.n	8012996 <_scanf_float+0x62>
 8012b20:	2407      	movs	r4, #7
 8012b22:	e7af      	b.n	8012a84 <_scanf_float+0x150>
 8012b24:	683a      	ldr	r2, [r7, #0]
 8012b26:	0591      	lsls	r1, r2, #22
 8012b28:	d400      	bmi.n	8012b2c <_scanf_float+0x1f8>
 8012b2a:	e734      	b.n	8012996 <_scanf_float+0x62>
 8012b2c:	4942      	ldr	r1, [pc, #264]	; (8012c38 <_scanf_float+0x304>)
 8012b2e:	400a      	ands	r2, r1
 8012b30:	603a      	str	r2, [r7, #0]
 8012b32:	9a01      	ldr	r2, [sp, #4]
 8012b34:	9205      	str	r2, [sp, #20]
 8012b36:	e7a5      	b.n	8012a84 <_scanf_float+0x150>
 8012b38:	21a0      	movs	r1, #160	; 0xa0
 8012b3a:	2080      	movs	r0, #128	; 0x80
 8012b3c:	683a      	ldr	r2, [r7, #0]
 8012b3e:	00c9      	lsls	r1, r1, #3
 8012b40:	4011      	ands	r1, r2
 8012b42:	00c0      	lsls	r0, r0, #3
 8012b44:	4281      	cmp	r1, r0
 8012b46:	d006      	beq.n	8012b56 <_scanf_float+0x222>
 8012b48:	4202      	tst	r2, r0
 8012b4a:	d100      	bne.n	8012b4e <_scanf_float+0x21a>
 8012b4c:	e723      	b.n	8012996 <_scanf_float+0x62>
 8012b4e:	9901      	ldr	r1, [sp, #4]
 8012b50:	2900      	cmp	r1, #0
 8012b52:	d100      	bne.n	8012b56 <_scanf_float+0x222>
 8012b54:	e726      	b.n	80129a4 <_scanf_float+0x70>
 8012b56:	0591      	lsls	r1, r2, #22
 8012b58:	d404      	bmi.n	8012b64 <_scanf_float+0x230>
 8012b5a:	9901      	ldr	r1, [sp, #4]
 8012b5c:	9805      	ldr	r0, [sp, #20]
 8012b5e:	9509      	str	r5, [sp, #36]	; 0x24
 8012b60:	1a09      	subs	r1, r1, r0
 8012b62:	9108      	str	r1, [sp, #32]
 8012b64:	4933      	ldr	r1, [pc, #204]	; (8012c34 <_scanf_float+0x300>)
 8012b66:	400a      	ands	r2, r1
 8012b68:	21c0      	movs	r1, #192	; 0xc0
 8012b6a:	0049      	lsls	r1, r1, #1
 8012b6c:	430a      	orrs	r2, r1
 8012b6e:	603a      	str	r2, [r7, #0]
 8012b70:	2200      	movs	r2, #0
 8012b72:	9201      	str	r2, [sp, #4]
 8012b74:	e786      	b.n	8012a84 <_scanf_float+0x150>
 8012b76:	2203      	movs	r2, #3
 8012b78:	e79e      	b.n	8012ab8 <_scanf_float+0x184>
 8012b7a:	23c0      	movs	r3, #192	; 0xc0
 8012b7c:	005b      	lsls	r3, r3, #1
 8012b7e:	0031      	movs	r1, r6
 8012b80:	58fb      	ldr	r3, [r7, r3]
 8012b82:	9802      	ldr	r0, [sp, #8]
 8012b84:	4798      	blx	r3
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d100      	bne.n	8012b8c <_scanf_float+0x258>
 8012b8a:	e6f6      	b.n	801297a <_scanf_float+0x46>
 8012b8c:	e703      	b.n	8012996 <_scanf_float+0x62>
 8012b8e:	3d01      	subs	r5, #1
 8012b90:	593b      	ldr	r3, [r7, r4]
 8012b92:	0032      	movs	r2, r6
 8012b94:	7829      	ldrb	r1, [r5, #0]
 8012b96:	9802      	ldr	r0, [sp, #8]
 8012b98:	4798      	blx	r3
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	3b01      	subs	r3, #1
 8012b9e:	613b      	str	r3, [r7, #16]
 8012ba0:	e707      	b.n	80129b2 <_scanf_float+0x7e>
 8012ba2:	1e63      	subs	r3, r4, #1
 8012ba4:	2b06      	cmp	r3, #6
 8012ba6:	d80e      	bhi.n	8012bc6 <_scanf_float+0x292>
 8012ba8:	9503      	str	r5, [sp, #12]
 8012baa:	2c02      	cmp	r4, #2
 8012bac:	d920      	bls.n	8012bf0 <_scanf_float+0x2bc>
 8012bae:	1b63      	subs	r3, r4, r5
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	9306      	str	r3, [sp, #24]
 8012bb4:	9b03      	ldr	r3, [sp, #12]
 8012bb6:	9a06      	ldr	r2, [sp, #24]
 8012bb8:	189b      	adds	r3, r3, r2
 8012bba:	b2db      	uxtb	r3, r3
 8012bbc:	2b03      	cmp	r3, #3
 8012bbe:	d827      	bhi.n	8012c10 <_scanf_float+0x2dc>
 8012bc0:	3c03      	subs	r4, #3
 8012bc2:	b2e4      	uxtb	r4, r4
 8012bc4:	1b2d      	subs	r5, r5, r4
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	05da      	lsls	r2, r3, #23
 8012bca:	d552      	bpl.n	8012c72 <_scanf_float+0x33e>
 8012bcc:	055b      	lsls	r3, r3, #21
 8012bce:	d535      	bpl.n	8012c3c <_scanf_float+0x308>
 8012bd0:	24be      	movs	r4, #190	; 0xbe
 8012bd2:	0064      	lsls	r4, r4, #1
 8012bd4:	9b04      	ldr	r3, [sp, #16]
 8012bd6:	429d      	cmp	r5, r3
 8012bd8:	d800      	bhi.n	8012bdc <_scanf_float+0x2a8>
 8012bda:	e6ee      	b.n	80129ba <_scanf_float+0x86>
 8012bdc:	3d01      	subs	r5, #1
 8012bde:	593b      	ldr	r3, [r7, r4]
 8012be0:	0032      	movs	r2, r6
 8012be2:	7829      	ldrb	r1, [r5, #0]
 8012be4:	9802      	ldr	r0, [sp, #8]
 8012be6:	4798      	blx	r3
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	3b01      	subs	r3, #1
 8012bec:	613b      	str	r3, [r7, #16]
 8012bee:	e7f1      	b.n	8012bd4 <_scanf_float+0x2a0>
 8012bf0:	24be      	movs	r4, #190	; 0xbe
 8012bf2:	0064      	lsls	r4, r4, #1
 8012bf4:	9b04      	ldr	r3, [sp, #16]
 8012bf6:	429d      	cmp	r5, r3
 8012bf8:	d800      	bhi.n	8012bfc <_scanf_float+0x2c8>
 8012bfa:	e6de      	b.n	80129ba <_scanf_float+0x86>
 8012bfc:	3d01      	subs	r5, #1
 8012bfe:	593b      	ldr	r3, [r7, r4]
 8012c00:	0032      	movs	r2, r6
 8012c02:	7829      	ldrb	r1, [r5, #0]
 8012c04:	9802      	ldr	r0, [sp, #8]
 8012c06:	4798      	blx	r3
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	3b01      	subs	r3, #1
 8012c0c:	613b      	str	r3, [r7, #16]
 8012c0e:	e7f1      	b.n	8012bf4 <_scanf_float+0x2c0>
 8012c10:	9b03      	ldr	r3, [sp, #12]
 8012c12:	0032      	movs	r2, r6
 8012c14:	3b01      	subs	r3, #1
 8012c16:	7819      	ldrb	r1, [r3, #0]
 8012c18:	9303      	str	r3, [sp, #12]
 8012c1a:	23be      	movs	r3, #190	; 0xbe
 8012c1c:	005b      	lsls	r3, r3, #1
 8012c1e:	58fb      	ldr	r3, [r7, r3]
 8012c20:	9802      	ldr	r0, [sp, #8]
 8012c22:	4798      	blx	r3
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	3b01      	subs	r3, #1
 8012c28:	613b      	str	r3, [r7, #16]
 8012c2a:	e7c3      	b.n	8012bb4 <_scanf_float+0x280>
 8012c2c:	fffffeff 	.word	0xfffffeff
 8012c30:	fffffe7f 	.word	0xfffffe7f
 8012c34:	fffff87f 	.word	0xfffff87f
 8012c38:	fffffd7f 	.word	0xfffffd7f
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	1e6c      	subs	r4, r5, #1
 8012c40:	7821      	ldrb	r1, [r4, #0]
 8012c42:	3b01      	subs	r3, #1
 8012c44:	613b      	str	r3, [r7, #16]
 8012c46:	2965      	cmp	r1, #101	; 0x65
 8012c48:	d00c      	beq.n	8012c64 <_scanf_float+0x330>
 8012c4a:	2945      	cmp	r1, #69	; 0x45
 8012c4c:	d00a      	beq.n	8012c64 <_scanf_float+0x330>
 8012c4e:	23be      	movs	r3, #190	; 0xbe
 8012c50:	005b      	lsls	r3, r3, #1
 8012c52:	58fb      	ldr	r3, [r7, r3]
 8012c54:	0032      	movs	r2, r6
 8012c56:	9802      	ldr	r0, [sp, #8]
 8012c58:	4798      	blx	r3
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	1eac      	subs	r4, r5, #2
 8012c5e:	3b01      	subs	r3, #1
 8012c60:	7821      	ldrb	r1, [r4, #0]
 8012c62:	613b      	str	r3, [r7, #16]
 8012c64:	23be      	movs	r3, #190	; 0xbe
 8012c66:	005b      	lsls	r3, r3, #1
 8012c68:	0032      	movs	r2, r6
 8012c6a:	58fb      	ldr	r3, [r7, r3]
 8012c6c:	9802      	ldr	r0, [sp, #8]
 8012c6e:	4798      	blx	r3
 8012c70:	0025      	movs	r5, r4
 8012c72:	683a      	ldr	r2, [r7, #0]
 8012c74:	2310      	movs	r3, #16
 8012c76:	0011      	movs	r1, r2
 8012c78:	4019      	ands	r1, r3
 8012c7a:	9103      	str	r1, [sp, #12]
 8012c7c:	421a      	tst	r2, r3
 8012c7e:	d15b      	bne.n	8012d38 <_scanf_float+0x404>
 8012c80:	22c0      	movs	r2, #192	; 0xc0
 8012c82:	7029      	strb	r1, [r5, #0]
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	00d2      	lsls	r2, r2, #3
 8012c88:	4013      	ands	r3, r2
 8012c8a:	2280      	movs	r2, #128	; 0x80
 8012c8c:	00d2      	lsls	r2, r2, #3
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d11d      	bne.n	8012cce <_scanf_float+0x39a>
 8012c92:	9b05      	ldr	r3, [sp, #20]
 8012c94:	9a01      	ldr	r2, [sp, #4]
 8012c96:	9901      	ldr	r1, [sp, #4]
 8012c98:	1a9a      	subs	r2, r3, r2
 8012c9a:	428b      	cmp	r3, r1
 8012c9c:	d124      	bne.n	8012ce8 <_scanf_float+0x3b4>
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	9904      	ldr	r1, [sp, #16]
 8012ca2:	9802      	ldr	r0, [sp, #8]
 8012ca4:	f7ff f91c 	bl	8011ee0 <_strtod_r>
 8012ca8:	9b07      	ldr	r3, [sp, #28]
 8012caa:	683a      	ldr	r2, [r7, #0]
 8012cac:	0004      	movs	r4, r0
 8012cae:	000d      	movs	r5, r1
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	0791      	lsls	r1, r2, #30
 8012cb4:	d525      	bpl.n	8012d02 <_scanf_float+0x3ce>
 8012cb6:	9907      	ldr	r1, [sp, #28]
 8012cb8:	1d1a      	adds	r2, r3, #4
 8012cba:	600a      	str	r2, [r1, #0]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	601c      	str	r4, [r3, #0]
 8012cc0:	605d      	str	r5, [r3, #4]
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	60fb      	str	r3, [r7, #12]
 8012cc8:	9803      	ldr	r0, [sp, #12]
 8012cca:	b00b      	add	sp, #44	; 0x2c
 8012ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cce:	9b08      	ldr	r3, [sp, #32]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d0e4      	beq.n	8012c9e <_scanf_float+0x36a>
 8012cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cd6:	9a03      	ldr	r2, [sp, #12]
 8012cd8:	1c59      	adds	r1, r3, #1
 8012cda:	9802      	ldr	r0, [sp, #8]
 8012cdc:	230a      	movs	r3, #10
 8012cde:	f7ff f99b 	bl	8012018 <_strtol_r>
 8012ce2:	9b08      	ldr	r3, [sp, #32]
 8012ce4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012ce6:	1ac2      	subs	r2, r0, r3
 8012ce8:	003b      	movs	r3, r7
 8012cea:	3370      	adds	r3, #112	; 0x70
 8012cec:	33ff      	adds	r3, #255	; 0xff
 8012cee:	429d      	cmp	r5, r3
 8012cf0:	d302      	bcc.n	8012cf8 <_scanf_float+0x3c4>
 8012cf2:	003d      	movs	r5, r7
 8012cf4:	356f      	adds	r5, #111	; 0x6f
 8012cf6:	35ff      	adds	r5, #255	; 0xff
 8012cf8:	0028      	movs	r0, r5
 8012cfa:	4910      	ldr	r1, [pc, #64]	; (8012d3c <_scanf_float+0x408>)
 8012cfc:	f000 f91a 	bl	8012f34 <siprintf>
 8012d00:	e7cd      	b.n	8012c9e <_scanf_float+0x36a>
 8012d02:	1d19      	adds	r1, r3, #4
 8012d04:	0752      	lsls	r2, r2, #29
 8012d06:	d502      	bpl.n	8012d0e <_scanf_float+0x3da>
 8012d08:	9a07      	ldr	r2, [sp, #28]
 8012d0a:	6011      	str	r1, [r2, #0]
 8012d0c:	e7d6      	b.n	8012cbc <_scanf_float+0x388>
 8012d0e:	9a07      	ldr	r2, [sp, #28]
 8012d10:	0020      	movs	r0, r4
 8012d12:	6011      	str	r1, [r2, #0]
 8012d14:	681e      	ldr	r6, [r3, #0]
 8012d16:	0022      	movs	r2, r4
 8012d18:	002b      	movs	r3, r5
 8012d1a:	0029      	movs	r1, r5
 8012d1c:	f7f0 f91e 	bl	8002f5c <__aeabi_dcmpun>
 8012d20:	2800      	cmp	r0, #0
 8012d22:	d004      	beq.n	8012d2e <_scanf_float+0x3fa>
 8012d24:	4806      	ldr	r0, [pc, #24]	; (8012d40 <_scanf_float+0x40c>)
 8012d26:	f000 fb49 	bl	80133bc <nanf>
 8012d2a:	6030      	str	r0, [r6, #0]
 8012d2c:	e7c9      	b.n	8012cc2 <_scanf_float+0x38e>
 8012d2e:	0020      	movs	r0, r4
 8012d30:	0029      	movs	r1, r5
 8012d32:	f7f0 fa05 	bl	8003140 <__aeabi_d2f>
 8012d36:	e7f8      	b.n	8012d2a <_scanf_float+0x3f6>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	e63f      	b.n	80129bc <_scanf_float+0x88>
 8012d3c:	080186dd 	.word	0x080186dd
 8012d40:	08018796 	.word	0x08018796

08012d44 <std>:
 8012d44:	2300      	movs	r3, #0
 8012d46:	b510      	push	{r4, lr}
 8012d48:	0004      	movs	r4, r0
 8012d4a:	6003      	str	r3, [r0, #0]
 8012d4c:	6043      	str	r3, [r0, #4]
 8012d4e:	6083      	str	r3, [r0, #8]
 8012d50:	8181      	strh	r1, [r0, #12]
 8012d52:	6643      	str	r3, [r0, #100]	; 0x64
 8012d54:	81c2      	strh	r2, [r0, #14]
 8012d56:	6103      	str	r3, [r0, #16]
 8012d58:	6143      	str	r3, [r0, #20]
 8012d5a:	6183      	str	r3, [r0, #24]
 8012d5c:	0019      	movs	r1, r3
 8012d5e:	2208      	movs	r2, #8
 8012d60:	305c      	adds	r0, #92	; 0x5c
 8012d62:	f000 f953 	bl	801300c <memset>
 8012d66:	4b0b      	ldr	r3, [pc, #44]	; (8012d94 <std+0x50>)
 8012d68:	6224      	str	r4, [r4, #32]
 8012d6a:	6263      	str	r3, [r4, #36]	; 0x24
 8012d6c:	4b0a      	ldr	r3, [pc, #40]	; (8012d98 <std+0x54>)
 8012d6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d70:	4b0a      	ldr	r3, [pc, #40]	; (8012d9c <std+0x58>)
 8012d72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d74:	4b0a      	ldr	r3, [pc, #40]	; (8012da0 <std+0x5c>)
 8012d76:	6323      	str	r3, [r4, #48]	; 0x30
 8012d78:	4b0a      	ldr	r3, [pc, #40]	; (8012da4 <std+0x60>)
 8012d7a:	429c      	cmp	r4, r3
 8012d7c:	d005      	beq.n	8012d8a <std+0x46>
 8012d7e:	4b0a      	ldr	r3, [pc, #40]	; (8012da8 <std+0x64>)
 8012d80:	429c      	cmp	r4, r3
 8012d82:	d002      	beq.n	8012d8a <std+0x46>
 8012d84:	4b09      	ldr	r3, [pc, #36]	; (8012dac <std+0x68>)
 8012d86:	429c      	cmp	r4, r3
 8012d88:	d103      	bne.n	8012d92 <std+0x4e>
 8012d8a:	0020      	movs	r0, r4
 8012d8c:	3058      	adds	r0, #88	; 0x58
 8012d8e:	f000 faef 	bl	8013370 <__retarget_lock_init_recursive>
 8012d92:	bd10      	pop	{r4, pc}
 8012d94:	08012f75 	.word	0x08012f75
 8012d98:	08012f9d 	.word	0x08012f9d
 8012d9c:	08012fd5 	.word	0x08012fd5
 8012da0:	08013001 	.word	0x08013001
 8012da4:	20005954 	.word	0x20005954
 8012da8:	200059bc 	.word	0x200059bc
 8012dac:	20005a24 	.word	0x20005a24

08012db0 <stdio_exit_handler>:
 8012db0:	b510      	push	{r4, lr}
 8012db2:	4a03      	ldr	r2, [pc, #12]	; (8012dc0 <stdio_exit_handler+0x10>)
 8012db4:	4903      	ldr	r1, [pc, #12]	; (8012dc4 <stdio_exit_handler+0x14>)
 8012db6:	4804      	ldr	r0, [pc, #16]	; (8012dc8 <stdio_exit_handler+0x18>)
 8012db8:	f000 f86c 	bl	8012e94 <_fwalk_sglue>
 8012dbc:	bd10      	pop	{r4, pc}
 8012dbe:	46c0      	nop			; (mov r8, r8)
 8012dc0:	200000f0 	.word	0x200000f0
 8012dc4:	08015615 	.word	0x08015615
 8012dc8:	20000268 	.word	0x20000268

08012dcc <cleanup_stdio>:
 8012dcc:	6841      	ldr	r1, [r0, #4]
 8012dce:	4b0b      	ldr	r3, [pc, #44]	; (8012dfc <cleanup_stdio+0x30>)
 8012dd0:	b510      	push	{r4, lr}
 8012dd2:	0004      	movs	r4, r0
 8012dd4:	4299      	cmp	r1, r3
 8012dd6:	d001      	beq.n	8012ddc <cleanup_stdio+0x10>
 8012dd8:	f002 fc1c 	bl	8015614 <_fflush_r>
 8012ddc:	68a1      	ldr	r1, [r4, #8]
 8012dde:	4b08      	ldr	r3, [pc, #32]	; (8012e00 <cleanup_stdio+0x34>)
 8012de0:	4299      	cmp	r1, r3
 8012de2:	d002      	beq.n	8012dea <cleanup_stdio+0x1e>
 8012de4:	0020      	movs	r0, r4
 8012de6:	f002 fc15 	bl	8015614 <_fflush_r>
 8012dea:	68e1      	ldr	r1, [r4, #12]
 8012dec:	4b05      	ldr	r3, [pc, #20]	; (8012e04 <cleanup_stdio+0x38>)
 8012dee:	4299      	cmp	r1, r3
 8012df0:	d002      	beq.n	8012df8 <cleanup_stdio+0x2c>
 8012df2:	0020      	movs	r0, r4
 8012df4:	f002 fc0e 	bl	8015614 <_fflush_r>
 8012df8:	bd10      	pop	{r4, pc}
 8012dfa:	46c0      	nop			; (mov r8, r8)
 8012dfc:	20005954 	.word	0x20005954
 8012e00:	200059bc 	.word	0x200059bc
 8012e04:	20005a24 	.word	0x20005a24

08012e08 <global_stdio_init.part.0>:
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	4b09      	ldr	r3, [pc, #36]	; (8012e30 <global_stdio_init.part.0+0x28>)
 8012e0c:	4a09      	ldr	r2, [pc, #36]	; (8012e34 <global_stdio_init.part.0+0x2c>)
 8012e0e:	2104      	movs	r1, #4
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	4809      	ldr	r0, [pc, #36]	; (8012e38 <global_stdio_init.part.0+0x30>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	f7ff ff95 	bl	8012d44 <std>
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	2109      	movs	r1, #9
 8012e1e:	4807      	ldr	r0, [pc, #28]	; (8012e3c <global_stdio_init.part.0+0x34>)
 8012e20:	f7ff ff90 	bl	8012d44 <std>
 8012e24:	2202      	movs	r2, #2
 8012e26:	2112      	movs	r1, #18
 8012e28:	4805      	ldr	r0, [pc, #20]	; (8012e40 <global_stdio_init.part.0+0x38>)
 8012e2a:	f7ff ff8b 	bl	8012d44 <std>
 8012e2e:	bd10      	pop	{r4, pc}
 8012e30:	20005a8c 	.word	0x20005a8c
 8012e34:	08012db1 	.word	0x08012db1
 8012e38:	20005954 	.word	0x20005954
 8012e3c:	200059bc 	.word	0x200059bc
 8012e40:	20005a24 	.word	0x20005a24

08012e44 <__sfp_lock_acquire>:
 8012e44:	b510      	push	{r4, lr}
 8012e46:	4802      	ldr	r0, [pc, #8]	; (8012e50 <__sfp_lock_acquire+0xc>)
 8012e48:	f000 fa93 	bl	8013372 <__retarget_lock_acquire_recursive>
 8012e4c:	bd10      	pop	{r4, pc}
 8012e4e:	46c0      	nop			; (mov r8, r8)
 8012e50:	20005a95 	.word	0x20005a95

08012e54 <__sfp_lock_release>:
 8012e54:	b510      	push	{r4, lr}
 8012e56:	4802      	ldr	r0, [pc, #8]	; (8012e60 <__sfp_lock_release+0xc>)
 8012e58:	f000 fa8c 	bl	8013374 <__retarget_lock_release_recursive>
 8012e5c:	bd10      	pop	{r4, pc}
 8012e5e:	46c0      	nop			; (mov r8, r8)
 8012e60:	20005a95 	.word	0x20005a95

08012e64 <__sinit>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	0004      	movs	r4, r0
 8012e68:	f7ff ffec 	bl	8012e44 <__sfp_lock_acquire>
 8012e6c:	6a23      	ldr	r3, [r4, #32]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d002      	beq.n	8012e78 <__sinit+0x14>
 8012e72:	f7ff ffef 	bl	8012e54 <__sfp_lock_release>
 8012e76:	bd10      	pop	{r4, pc}
 8012e78:	4b04      	ldr	r3, [pc, #16]	; (8012e8c <__sinit+0x28>)
 8012e7a:	6223      	str	r3, [r4, #32]
 8012e7c:	4b04      	ldr	r3, [pc, #16]	; (8012e90 <__sinit+0x2c>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1f6      	bne.n	8012e72 <__sinit+0xe>
 8012e84:	f7ff ffc0 	bl	8012e08 <global_stdio_init.part.0>
 8012e88:	e7f3      	b.n	8012e72 <__sinit+0xe>
 8012e8a:	46c0      	nop			; (mov r8, r8)
 8012e8c:	08012dcd 	.word	0x08012dcd
 8012e90:	20005a8c 	.word	0x20005a8c

08012e94 <_fwalk_sglue>:
 8012e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e96:	0014      	movs	r4, r2
 8012e98:	2600      	movs	r6, #0
 8012e9a:	9000      	str	r0, [sp, #0]
 8012e9c:	9101      	str	r1, [sp, #4]
 8012e9e:	68a5      	ldr	r5, [r4, #8]
 8012ea0:	6867      	ldr	r7, [r4, #4]
 8012ea2:	3f01      	subs	r7, #1
 8012ea4:	d504      	bpl.n	8012eb0 <_fwalk_sglue+0x1c>
 8012ea6:	6824      	ldr	r4, [r4, #0]
 8012ea8:	2c00      	cmp	r4, #0
 8012eaa:	d1f8      	bne.n	8012e9e <_fwalk_sglue+0xa>
 8012eac:	0030      	movs	r0, r6
 8012eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012eb0:	89ab      	ldrh	r3, [r5, #12]
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d908      	bls.n	8012ec8 <_fwalk_sglue+0x34>
 8012eb6:	220e      	movs	r2, #14
 8012eb8:	5eab      	ldrsh	r3, [r5, r2]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	d004      	beq.n	8012ec8 <_fwalk_sglue+0x34>
 8012ebe:	0029      	movs	r1, r5
 8012ec0:	9800      	ldr	r0, [sp, #0]
 8012ec2:	9b01      	ldr	r3, [sp, #4]
 8012ec4:	4798      	blx	r3
 8012ec6:	4306      	orrs	r6, r0
 8012ec8:	3568      	adds	r5, #104	; 0x68
 8012eca:	e7ea      	b.n	8012ea2 <_fwalk_sglue+0xe>

08012ecc <sniprintf>:
 8012ecc:	b40c      	push	{r2, r3}
 8012ece:	b530      	push	{r4, r5, lr}
 8012ed0:	4b17      	ldr	r3, [pc, #92]	; (8012f30 <sniprintf+0x64>)
 8012ed2:	000c      	movs	r4, r1
 8012ed4:	681d      	ldr	r5, [r3, #0]
 8012ed6:	b09d      	sub	sp, #116	; 0x74
 8012ed8:	2900      	cmp	r1, #0
 8012eda:	da08      	bge.n	8012eee <sniprintf+0x22>
 8012edc:	238b      	movs	r3, #139	; 0x8b
 8012ede:	2001      	movs	r0, #1
 8012ee0:	602b      	str	r3, [r5, #0]
 8012ee2:	4240      	negs	r0, r0
 8012ee4:	b01d      	add	sp, #116	; 0x74
 8012ee6:	bc30      	pop	{r4, r5}
 8012ee8:	bc08      	pop	{r3}
 8012eea:	b002      	add	sp, #8
 8012eec:	4718      	bx	r3
 8012eee:	2382      	movs	r3, #130	; 0x82
 8012ef0:	466a      	mov	r2, sp
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	8293      	strh	r3, [r2, #20]
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	9002      	str	r0, [sp, #8]
 8012efa:	9006      	str	r0, [sp, #24]
 8012efc:	4299      	cmp	r1, r3
 8012efe:	d000      	beq.n	8012f02 <sniprintf+0x36>
 8012f00:	1e4b      	subs	r3, r1, #1
 8012f02:	9304      	str	r3, [sp, #16]
 8012f04:	9307      	str	r3, [sp, #28]
 8012f06:	2301      	movs	r3, #1
 8012f08:	466a      	mov	r2, sp
 8012f0a:	425b      	negs	r3, r3
 8012f0c:	82d3      	strh	r3, [r2, #22]
 8012f0e:	0028      	movs	r0, r5
 8012f10:	ab21      	add	r3, sp, #132	; 0x84
 8012f12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012f14:	a902      	add	r1, sp, #8
 8012f16:	9301      	str	r3, [sp, #4]
 8012f18:	f002 f9f2 	bl	8015300 <_svfiprintf_r>
 8012f1c:	1c43      	adds	r3, r0, #1
 8012f1e:	da01      	bge.n	8012f24 <sniprintf+0x58>
 8012f20:	238b      	movs	r3, #139	; 0x8b
 8012f22:	602b      	str	r3, [r5, #0]
 8012f24:	2c00      	cmp	r4, #0
 8012f26:	d0dd      	beq.n	8012ee4 <sniprintf+0x18>
 8012f28:	2200      	movs	r2, #0
 8012f2a:	9b02      	ldr	r3, [sp, #8]
 8012f2c:	701a      	strb	r2, [r3, #0]
 8012f2e:	e7d9      	b.n	8012ee4 <sniprintf+0x18>
 8012f30:	200002b4 	.word	0x200002b4

08012f34 <siprintf>:
 8012f34:	b40e      	push	{r1, r2, r3}
 8012f36:	b500      	push	{lr}
 8012f38:	490b      	ldr	r1, [pc, #44]	; (8012f68 <siprintf+0x34>)
 8012f3a:	b09c      	sub	sp, #112	; 0x70
 8012f3c:	ab1d      	add	r3, sp, #116	; 0x74
 8012f3e:	9002      	str	r0, [sp, #8]
 8012f40:	9006      	str	r0, [sp, #24]
 8012f42:	9107      	str	r1, [sp, #28]
 8012f44:	9104      	str	r1, [sp, #16]
 8012f46:	4809      	ldr	r0, [pc, #36]	; (8012f6c <siprintf+0x38>)
 8012f48:	4909      	ldr	r1, [pc, #36]	; (8012f70 <siprintf+0x3c>)
 8012f4a:	cb04      	ldmia	r3!, {r2}
 8012f4c:	9105      	str	r1, [sp, #20]
 8012f4e:	6800      	ldr	r0, [r0, #0]
 8012f50:	a902      	add	r1, sp, #8
 8012f52:	9301      	str	r3, [sp, #4]
 8012f54:	f002 f9d4 	bl	8015300 <_svfiprintf_r>
 8012f58:	2200      	movs	r2, #0
 8012f5a:	9b02      	ldr	r3, [sp, #8]
 8012f5c:	701a      	strb	r2, [r3, #0]
 8012f5e:	b01c      	add	sp, #112	; 0x70
 8012f60:	bc08      	pop	{r3}
 8012f62:	b003      	add	sp, #12
 8012f64:	4718      	bx	r3
 8012f66:	46c0      	nop			; (mov r8, r8)
 8012f68:	7fffffff 	.word	0x7fffffff
 8012f6c:	200002b4 	.word	0x200002b4
 8012f70:	ffff0208 	.word	0xffff0208

08012f74 <__sread>:
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	000c      	movs	r4, r1
 8012f78:	250e      	movs	r5, #14
 8012f7a:	5f49      	ldrsh	r1, [r1, r5]
 8012f7c:	f000 f994 	bl	80132a8 <_read_r>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	db03      	blt.n	8012f8c <__sread+0x18>
 8012f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012f86:	181b      	adds	r3, r3, r0
 8012f88:	6563      	str	r3, [r4, #84]	; 0x54
 8012f8a:	bd70      	pop	{r4, r5, r6, pc}
 8012f8c:	89a3      	ldrh	r3, [r4, #12]
 8012f8e:	4a02      	ldr	r2, [pc, #8]	; (8012f98 <__sread+0x24>)
 8012f90:	4013      	ands	r3, r2
 8012f92:	81a3      	strh	r3, [r4, #12]
 8012f94:	e7f9      	b.n	8012f8a <__sread+0x16>
 8012f96:	46c0      	nop			; (mov r8, r8)
 8012f98:	ffffefff 	.word	0xffffefff

08012f9c <__swrite>:
 8012f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f9e:	001f      	movs	r7, r3
 8012fa0:	898b      	ldrh	r3, [r1, #12]
 8012fa2:	0005      	movs	r5, r0
 8012fa4:	000c      	movs	r4, r1
 8012fa6:	0016      	movs	r6, r2
 8012fa8:	05db      	lsls	r3, r3, #23
 8012faa:	d505      	bpl.n	8012fb8 <__swrite+0x1c>
 8012fac:	230e      	movs	r3, #14
 8012fae:	5ec9      	ldrsh	r1, [r1, r3]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	2302      	movs	r3, #2
 8012fb4:	f000 f964 	bl	8013280 <_lseek_r>
 8012fb8:	89a3      	ldrh	r3, [r4, #12]
 8012fba:	4a05      	ldr	r2, [pc, #20]	; (8012fd0 <__swrite+0x34>)
 8012fbc:	0028      	movs	r0, r5
 8012fbe:	4013      	ands	r3, r2
 8012fc0:	81a3      	strh	r3, [r4, #12]
 8012fc2:	0032      	movs	r2, r6
 8012fc4:	230e      	movs	r3, #14
 8012fc6:	5ee1      	ldrsh	r1, [r4, r3]
 8012fc8:	003b      	movs	r3, r7
 8012fca:	f000 f993 	bl	80132f4 <_write_r>
 8012fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fd0:	ffffefff 	.word	0xffffefff

08012fd4 <__sseek>:
 8012fd4:	b570      	push	{r4, r5, r6, lr}
 8012fd6:	000c      	movs	r4, r1
 8012fd8:	250e      	movs	r5, #14
 8012fda:	5f49      	ldrsh	r1, [r1, r5]
 8012fdc:	f000 f950 	bl	8013280 <_lseek_r>
 8012fe0:	89a3      	ldrh	r3, [r4, #12]
 8012fe2:	1c42      	adds	r2, r0, #1
 8012fe4:	d103      	bne.n	8012fee <__sseek+0x1a>
 8012fe6:	4a05      	ldr	r2, [pc, #20]	; (8012ffc <__sseek+0x28>)
 8012fe8:	4013      	ands	r3, r2
 8012fea:	81a3      	strh	r3, [r4, #12]
 8012fec:	bd70      	pop	{r4, r5, r6, pc}
 8012fee:	2280      	movs	r2, #128	; 0x80
 8012ff0:	0152      	lsls	r2, r2, #5
 8012ff2:	4313      	orrs	r3, r2
 8012ff4:	81a3      	strh	r3, [r4, #12]
 8012ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8012ff8:	e7f8      	b.n	8012fec <__sseek+0x18>
 8012ffa:	46c0      	nop			; (mov r8, r8)
 8012ffc:	ffffefff 	.word	0xffffefff

08013000 <__sclose>:
 8013000:	b510      	push	{r4, lr}
 8013002:	230e      	movs	r3, #14
 8013004:	5ec9      	ldrsh	r1, [r1, r3]
 8013006:	f000 f8cb 	bl	80131a0 <_close_r>
 801300a:	bd10      	pop	{r4, pc}

0801300c <memset>:
 801300c:	0003      	movs	r3, r0
 801300e:	1882      	adds	r2, r0, r2
 8013010:	4293      	cmp	r3, r2
 8013012:	d100      	bne.n	8013016 <memset+0xa>
 8013014:	4770      	bx	lr
 8013016:	7019      	strb	r1, [r3, #0]
 8013018:	3301      	adds	r3, #1
 801301a:	e7f9      	b.n	8013010 <memset+0x4>

0801301c <strcat>:
 801301c:	0002      	movs	r2, r0
 801301e:	b510      	push	{r4, lr}
 8013020:	7813      	ldrb	r3, [r2, #0]
 8013022:	0014      	movs	r4, r2
 8013024:	3201      	adds	r2, #1
 8013026:	2b00      	cmp	r3, #0
 8013028:	d1fa      	bne.n	8013020 <strcat+0x4>
 801302a:	5cca      	ldrb	r2, [r1, r3]
 801302c:	54e2      	strb	r2, [r4, r3]
 801302e:	3301      	adds	r3, #1
 8013030:	2a00      	cmp	r2, #0
 8013032:	d1fa      	bne.n	801302a <strcat+0xe>
 8013034:	bd10      	pop	{r4, pc}

08013036 <strchr>:
 8013036:	b2c9      	uxtb	r1, r1
 8013038:	7803      	ldrb	r3, [r0, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d004      	beq.n	8013048 <strchr+0x12>
 801303e:	428b      	cmp	r3, r1
 8013040:	d100      	bne.n	8013044 <strchr+0xe>
 8013042:	4770      	bx	lr
 8013044:	3001      	adds	r0, #1
 8013046:	e7f7      	b.n	8013038 <strchr+0x2>
 8013048:	424b      	negs	r3, r1
 801304a:	4159      	adcs	r1, r3
 801304c:	4249      	negs	r1, r1
 801304e:	4008      	ands	r0, r1
 8013050:	e7f7      	b.n	8013042 <strchr+0xc>

08013052 <strncmp>:
 8013052:	b530      	push	{r4, r5, lr}
 8013054:	0005      	movs	r5, r0
 8013056:	1e10      	subs	r0, r2, #0
 8013058:	d00b      	beq.n	8013072 <strncmp+0x20>
 801305a:	2400      	movs	r4, #0
 801305c:	3a01      	subs	r2, #1
 801305e:	5d2b      	ldrb	r3, [r5, r4]
 8013060:	5d08      	ldrb	r0, [r1, r4]
 8013062:	4283      	cmp	r3, r0
 8013064:	d104      	bne.n	8013070 <strncmp+0x1e>
 8013066:	42a2      	cmp	r2, r4
 8013068:	d002      	beq.n	8013070 <strncmp+0x1e>
 801306a:	3401      	adds	r4, #1
 801306c:	2b00      	cmp	r3, #0
 801306e:	d1f6      	bne.n	801305e <strncmp+0xc>
 8013070:	1a18      	subs	r0, r3, r0
 8013072:	bd30      	pop	{r4, r5, pc}

08013074 <strncpy>:
 8013074:	0003      	movs	r3, r0
 8013076:	b530      	push	{r4, r5, lr}
 8013078:	001d      	movs	r5, r3
 801307a:	2a00      	cmp	r2, #0
 801307c:	d006      	beq.n	801308c <strncpy+0x18>
 801307e:	780c      	ldrb	r4, [r1, #0]
 8013080:	3a01      	subs	r2, #1
 8013082:	3301      	adds	r3, #1
 8013084:	702c      	strb	r4, [r5, #0]
 8013086:	3101      	adds	r1, #1
 8013088:	2c00      	cmp	r4, #0
 801308a:	d1f5      	bne.n	8013078 <strncpy+0x4>
 801308c:	2100      	movs	r1, #0
 801308e:	189a      	adds	r2, r3, r2
 8013090:	4293      	cmp	r3, r2
 8013092:	d100      	bne.n	8013096 <strncpy+0x22>
 8013094:	bd30      	pop	{r4, r5, pc}
 8013096:	7019      	strb	r1, [r3, #0]
 8013098:	3301      	adds	r3, #1
 801309a:	e7f9      	b.n	8013090 <strncpy+0x1c>

0801309c <strtok>:
 801309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801309e:	4b16      	ldr	r3, [pc, #88]	; (80130f8 <strtok+0x5c>)
 80130a0:	0005      	movs	r5, r0
 80130a2:	681f      	ldr	r7, [r3, #0]
 80130a4:	000e      	movs	r6, r1
 80130a6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80130a8:	2c00      	cmp	r4, #0
 80130aa:	d11d      	bne.n	80130e8 <strtok+0x4c>
 80130ac:	2050      	movs	r0, #80	; 0x50
 80130ae:	f7fe f837 	bl	8011120 <malloc>
 80130b2:	1e02      	subs	r2, r0, #0
 80130b4:	6478      	str	r0, [r7, #68]	; 0x44
 80130b6:	d104      	bne.n	80130c2 <strtok+0x26>
 80130b8:	215b      	movs	r1, #91	; 0x5b
 80130ba:	4b10      	ldr	r3, [pc, #64]	; (80130fc <strtok+0x60>)
 80130bc:	4810      	ldr	r0, [pc, #64]	; (8013100 <strtok+0x64>)
 80130be:	f000 f981 	bl	80133c4 <__assert_func>
 80130c2:	6004      	str	r4, [r0, #0]
 80130c4:	6044      	str	r4, [r0, #4]
 80130c6:	6084      	str	r4, [r0, #8]
 80130c8:	60c4      	str	r4, [r0, #12]
 80130ca:	6104      	str	r4, [r0, #16]
 80130cc:	6144      	str	r4, [r0, #20]
 80130ce:	6184      	str	r4, [r0, #24]
 80130d0:	6284      	str	r4, [r0, #40]	; 0x28
 80130d2:	62c4      	str	r4, [r0, #44]	; 0x2c
 80130d4:	6304      	str	r4, [r0, #48]	; 0x30
 80130d6:	6344      	str	r4, [r0, #52]	; 0x34
 80130d8:	6384      	str	r4, [r0, #56]	; 0x38
 80130da:	63c4      	str	r4, [r0, #60]	; 0x3c
 80130dc:	6404      	str	r4, [r0, #64]	; 0x40
 80130de:	6444      	str	r4, [r0, #68]	; 0x44
 80130e0:	6484      	str	r4, [r0, #72]	; 0x48
 80130e2:	64c4      	str	r4, [r0, #76]	; 0x4c
 80130e4:	7704      	strb	r4, [r0, #28]
 80130e6:	6244      	str	r4, [r0, #36]	; 0x24
 80130e8:	0031      	movs	r1, r6
 80130ea:	0028      	movs	r0, r5
 80130ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80130ee:	2301      	movs	r3, #1
 80130f0:	f000 f808 	bl	8013104 <__strtok_r>
 80130f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130f6:	46c0      	nop			; (mov r8, r8)
 80130f8:	200002b4 	.word	0x200002b4
 80130fc:	080186e2 	.word	0x080186e2
 8013100:	080186f9 	.word	0x080186f9

08013104 <__strtok_r>:
 8013104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013106:	2800      	cmp	r0, #0
 8013108:	d102      	bne.n	8013110 <__strtok_r+0xc>
 801310a:	6810      	ldr	r0, [r2, #0]
 801310c:	2800      	cmp	r0, #0
 801310e:	d013      	beq.n	8013138 <__strtok_r+0x34>
 8013110:	0004      	movs	r4, r0
 8013112:	0020      	movs	r0, r4
 8013114:	000e      	movs	r6, r1
 8013116:	7805      	ldrb	r5, [r0, #0]
 8013118:	3401      	adds	r4, #1
 801311a:	7837      	ldrb	r7, [r6, #0]
 801311c:	2f00      	cmp	r7, #0
 801311e:	d104      	bne.n	801312a <__strtok_r+0x26>
 8013120:	2d00      	cmp	r5, #0
 8013122:	d10f      	bne.n	8013144 <__strtok_r+0x40>
 8013124:	0028      	movs	r0, r5
 8013126:	6015      	str	r5, [r2, #0]
 8013128:	e006      	b.n	8013138 <__strtok_r+0x34>
 801312a:	3601      	adds	r6, #1
 801312c:	42bd      	cmp	r5, r7
 801312e:	d1f4      	bne.n	801311a <__strtok_r+0x16>
 8013130:	2b00      	cmp	r3, #0
 8013132:	d1ee      	bne.n	8013112 <__strtok_r+0xe>
 8013134:	6014      	str	r4, [r2, #0]
 8013136:	7003      	strb	r3, [r0, #0]
 8013138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801313a:	002f      	movs	r7, r5
 801313c:	e00f      	b.n	801315e <__strtok_r+0x5a>
 801313e:	3301      	adds	r3, #1
 8013140:	2e00      	cmp	r6, #0
 8013142:	d104      	bne.n	801314e <__strtok_r+0x4a>
 8013144:	0023      	movs	r3, r4
 8013146:	3401      	adds	r4, #1
 8013148:	781d      	ldrb	r5, [r3, #0]
 801314a:	0027      	movs	r7, r4
 801314c:	000b      	movs	r3, r1
 801314e:	781e      	ldrb	r6, [r3, #0]
 8013150:	42b5      	cmp	r5, r6
 8013152:	d1f4      	bne.n	801313e <__strtok_r+0x3a>
 8013154:	2d00      	cmp	r5, #0
 8013156:	d0f0      	beq.n	801313a <__strtok_r+0x36>
 8013158:	2300      	movs	r3, #0
 801315a:	3c01      	subs	r4, #1
 801315c:	7023      	strb	r3, [r4, #0]
 801315e:	6017      	str	r7, [r2, #0]
 8013160:	e7ea      	b.n	8013138 <__strtok_r+0x34>

08013162 <strtok_r>:
 8013162:	b510      	push	{r4, lr}
 8013164:	2301      	movs	r3, #1
 8013166:	f7ff ffcd 	bl	8013104 <__strtok_r>
 801316a:	bd10      	pop	{r4, pc}

0801316c <strstr>:
 801316c:	780a      	ldrb	r2, [r1, #0]
 801316e:	b530      	push	{r4, r5, lr}
 8013170:	2a00      	cmp	r2, #0
 8013172:	d10c      	bne.n	801318e <strstr+0x22>
 8013174:	bd30      	pop	{r4, r5, pc}
 8013176:	429a      	cmp	r2, r3
 8013178:	d108      	bne.n	801318c <strstr+0x20>
 801317a:	2301      	movs	r3, #1
 801317c:	5ccc      	ldrb	r4, [r1, r3]
 801317e:	2c00      	cmp	r4, #0
 8013180:	d0f8      	beq.n	8013174 <strstr+0x8>
 8013182:	5cc5      	ldrb	r5, [r0, r3]
 8013184:	42a5      	cmp	r5, r4
 8013186:	d101      	bne.n	801318c <strstr+0x20>
 8013188:	3301      	adds	r3, #1
 801318a:	e7f7      	b.n	801317c <strstr+0x10>
 801318c:	3001      	adds	r0, #1
 801318e:	7803      	ldrb	r3, [r0, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d1f0      	bne.n	8013176 <strstr+0xa>
 8013194:	0018      	movs	r0, r3
 8013196:	e7ed      	b.n	8013174 <strstr+0x8>

08013198 <_localeconv_r>:
 8013198:	4800      	ldr	r0, [pc, #0]	; (801319c <_localeconv_r+0x4>)
 801319a:	4770      	bx	lr
 801319c:	200001ec 	.word	0x200001ec

080131a0 <_close_r>:
 80131a0:	2300      	movs	r3, #0
 80131a2:	b570      	push	{r4, r5, r6, lr}
 80131a4:	4d06      	ldr	r5, [pc, #24]	; (80131c0 <_close_r+0x20>)
 80131a6:	0004      	movs	r4, r0
 80131a8:	0008      	movs	r0, r1
 80131aa:	602b      	str	r3, [r5, #0]
 80131ac:	f7f5 fcfb 	bl	8008ba6 <_close>
 80131b0:	1c43      	adds	r3, r0, #1
 80131b2:	d103      	bne.n	80131bc <_close_r+0x1c>
 80131b4:	682b      	ldr	r3, [r5, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d000      	beq.n	80131bc <_close_r+0x1c>
 80131ba:	6023      	str	r3, [r4, #0]
 80131bc:	bd70      	pop	{r4, r5, r6, pc}
 80131be:	46c0      	nop			; (mov r8, r8)
 80131c0:	20005a90 	.word	0x20005a90

080131c4 <_reclaim_reent>:
 80131c4:	4b2d      	ldr	r3, [pc, #180]	; (801327c <_reclaim_reent+0xb8>)
 80131c6:	b570      	push	{r4, r5, r6, lr}
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	0004      	movs	r4, r0
 80131cc:	4283      	cmp	r3, r0
 80131ce:	d042      	beq.n	8013256 <_reclaim_reent+0x92>
 80131d0:	69c3      	ldr	r3, [r0, #28]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d00a      	beq.n	80131ec <_reclaim_reent+0x28>
 80131d6:	2500      	movs	r5, #0
 80131d8:	68db      	ldr	r3, [r3, #12]
 80131da:	42ab      	cmp	r3, r5
 80131dc:	d140      	bne.n	8013260 <_reclaim_reent+0x9c>
 80131de:	69e3      	ldr	r3, [r4, #28]
 80131e0:	6819      	ldr	r1, [r3, #0]
 80131e2:	2900      	cmp	r1, #0
 80131e4:	d002      	beq.n	80131ec <_reclaim_reent+0x28>
 80131e6:	0020      	movs	r0, r4
 80131e8:	f000 ffa8 	bl	801413c <_free_r>
 80131ec:	6961      	ldr	r1, [r4, #20]
 80131ee:	2900      	cmp	r1, #0
 80131f0:	d002      	beq.n	80131f8 <_reclaim_reent+0x34>
 80131f2:	0020      	movs	r0, r4
 80131f4:	f000 ffa2 	bl	801413c <_free_r>
 80131f8:	69e1      	ldr	r1, [r4, #28]
 80131fa:	2900      	cmp	r1, #0
 80131fc:	d002      	beq.n	8013204 <_reclaim_reent+0x40>
 80131fe:	0020      	movs	r0, r4
 8013200:	f000 ff9c 	bl	801413c <_free_r>
 8013204:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013206:	2900      	cmp	r1, #0
 8013208:	d002      	beq.n	8013210 <_reclaim_reent+0x4c>
 801320a:	0020      	movs	r0, r4
 801320c:	f000 ff96 	bl	801413c <_free_r>
 8013210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013212:	2900      	cmp	r1, #0
 8013214:	d002      	beq.n	801321c <_reclaim_reent+0x58>
 8013216:	0020      	movs	r0, r4
 8013218:	f000 ff90 	bl	801413c <_free_r>
 801321c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801321e:	2900      	cmp	r1, #0
 8013220:	d002      	beq.n	8013228 <_reclaim_reent+0x64>
 8013222:	0020      	movs	r0, r4
 8013224:	f000 ff8a 	bl	801413c <_free_r>
 8013228:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801322a:	2900      	cmp	r1, #0
 801322c:	d002      	beq.n	8013234 <_reclaim_reent+0x70>
 801322e:	0020      	movs	r0, r4
 8013230:	f000 ff84 	bl	801413c <_free_r>
 8013234:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013236:	2900      	cmp	r1, #0
 8013238:	d002      	beq.n	8013240 <_reclaim_reent+0x7c>
 801323a:	0020      	movs	r0, r4
 801323c:	f000 ff7e 	bl	801413c <_free_r>
 8013240:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013242:	2900      	cmp	r1, #0
 8013244:	d002      	beq.n	801324c <_reclaim_reent+0x88>
 8013246:	0020      	movs	r0, r4
 8013248:	f000 ff78 	bl	801413c <_free_r>
 801324c:	6a23      	ldr	r3, [r4, #32]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d001      	beq.n	8013256 <_reclaim_reent+0x92>
 8013252:	0020      	movs	r0, r4
 8013254:	4798      	blx	r3
 8013256:	bd70      	pop	{r4, r5, r6, pc}
 8013258:	5949      	ldr	r1, [r1, r5]
 801325a:	2900      	cmp	r1, #0
 801325c:	d108      	bne.n	8013270 <_reclaim_reent+0xac>
 801325e:	3504      	adds	r5, #4
 8013260:	69e3      	ldr	r3, [r4, #28]
 8013262:	68d9      	ldr	r1, [r3, #12]
 8013264:	2d80      	cmp	r5, #128	; 0x80
 8013266:	d1f7      	bne.n	8013258 <_reclaim_reent+0x94>
 8013268:	0020      	movs	r0, r4
 801326a:	f000 ff67 	bl	801413c <_free_r>
 801326e:	e7b6      	b.n	80131de <_reclaim_reent+0x1a>
 8013270:	680e      	ldr	r6, [r1, #0]
 8013272:	0020      	movs	r0, r4
 8013274:	f000 ff62 	bl	801413c <_free_r>
 8013278:	0031      	movs	r1, r6
 801327a:	e7ee      	b.n	801325a <_reclaim_reent+0x96>
 801327c:	200002b4 	.word	0x200002b4

08013280 <_lseek_r>:
 8013280:	b570      	push	{r4, r5, r6, lr}
 8013282:	0004      	movs	r4, r0
 8013284:	0008      	movs	r0, r1
 8013286:	0011      	movs	r1, r2
 8013288:	001a      	movs	r2, r3
 801328a:	2300      	movs	r3, #0
 801328c:	4d05      	ldr	r5, [pc, #20]	; (80132a4 <_lseek_r+0x24>)
 801328e:	602b      	str	r3, [r5, #0]
 8013290:	f7f5 fcaa 	bl	8008be8 <_lseek>
 8013294:	1c43      	adds	r3, r0, #1
 8013296:	d103      	bne.n	80132a0 <_lseek_r+0x20>
 8013298:	682b      	ldr	r3, [r5, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d000      	beq.n	80132a0 <_lseek_r+0x20>
 801329e:	6023      	str	r3, [r4, #0]
 80132a0:	bd70      	pop	{r4, r5, r6, pc}
 80132a2:	46c0      	nop			; (mov r8, r8)
 80132a4:	20005a90 	.word	0x20005a90

080132a8 <_read_r>:
 80132a8:	b570      	push	{r4, r5, r6, lr}
 80132aa:	0004      	movs	r4, r0
 80132ac:	0008      	movs	r0, r1
 80132ae:	0011      	movs	r1, r2
 80132b0:	001a      	movs	r2, r3
 80132b2:	2300      	movs	r3, #0
 80132b4:	4d05      	ldr	r5, [pc, #20]	; (80132cc <_read_r+0x24>)
 80132b6:	602b      	str	r3, [r5, #0]
 80132b8:	f7f5 fc3c 	bl	8008b34 <_read>
 80132bc:	1c43      	adds	r3, r0, #1
 80132be:	d103      	bne.n	80132c8 <_read_r+0x20>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d000      	beq.n	80132c8 <_read_r+0x20>
 80132c6:	6023      	str	r3, [r4, #0]
 80132c8:	bd70      	pop	{r4, r5, r6, pc}
 80132ca:	46c0      	nop			; (mov r8, r8)
 80132cc:	20005a90 	.word	0x20005a90

080132d0 <_sbrk_r>:
 80132d0:	2300      	movs	r3, #0
 80132d2:	b570      	push	{r4, r5, r6, lr}
 80132d4:	4d06      	ldr	r5, [pc, #24]	; (80132f0 <_sbrk_r+0x20>)
 80132d6:	0004      	movs	r4, r0
 80132d8:	0008      	movs	r0, r1
 80132da:	602b      	str	r3, [r5, #0]
 80132dc:	f7f5 fc90 	bl	8008c00 <_sbrk>
 80132e0:	1c43      	adds	r3, r0, #1
 80132e2:	d103      	bne.n	80132ec <_sbrk_r+0x1c>
 80132e4:	682b      	ldr	r3, [r5, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d000      	beq.n	80132ec <_sbrk_r+0x1c>
 80132ea:	6023      	str	r3, [r4, #0]
 80132ec:	bd70      	pop	{r4, r5, r6, pc}
 80132ee:	46c0      	nop			; (mov r8, r8)
 80132f0:	20005a90 	.word	0x20005a90

080132f4 <_write_r>:
 80132f4:	b570      	push	{r4, r5, r6, lr}
 80132f6:	0004      	movs	r4, r0
 80132f8:	0008      	movs	r0, r1
 80132fa:	0011      	movs	r1, r2
 80132fc:	001a      	movs	r2, r3
 80132fe:	2300      	movs	r3, #0
 8013300:	4d05      	ldr	r5, [pc, #20]	; (8013318 <_write_r+0x24>)
 8013302:	602b      	str	r3, [r5, #0]
 8013304:	f7f5 fc33 	bl	8008b6e <_write>
 8013308:	1c43      	adds	r3, r0, #1
 801330a:	d103      	bne.n	8013314 <_write_r+0x20>
 801330c:	682b      	ldr	r3, [r5, #0]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d000      	beq.n	8013314 <_write_r+0x20>
 8013312:	6023      	str	r3, [r4, #0]
 8013314:	bd70      	pop	{r4, r5, r6, pc}
 8013316:	46c0      	nop			; (mov r8, r8)
 8013318:	20005a90 	.word	0x20005a90

0801331c <__errno>:
 801331c:	4b01      	ldr	r3, [pc, #4]	; (8013324 <__errno+0x8>)
 801331e:	6818      	ldr	r0, [r3, #0]
 8013320:	4770      	bx	lr
 8013322:	46c0      	nop			; (mov r8, r8)
 8013324:	200002b4 	.word	0x200002b4

08013328 <__libc_init_array>:
 8013328:	b570      	push	{r4, r5, r6, lr}
 801332a:	2600      	movs	r6, #0
 801332c:	4c0c      	ldr	r4, [pc, #48]	; (8013360 <__libc_init_array+0x38>)
 801332e:	4d0d      	ldr	r5, [pc, #52]	; (8013364 <__libc_init_array+0x3c>)
 8013330:	1b64      	subs	r4, r4, r5
 8013332:	10a4      	asrs	r4, r4, #2
 8013334:	42a6      	cmp	r6, r4
 8013336:	d109      	bne.n	801334c <__libc_init_array+0x24>
 8013338:	2600      	movs	r6, #0
 801333a:	f003 fbef 	bl	8016b1c <_init>
 801333e:	4c0a      	ldr	r4, [pc, #40]	; (8013368 <__libc_init_array+0x40>)
 8013340:	4d0a      	ldr	r5, [pc, #40]	; (801336c <__libc_init_array+0x44>)
 8013342:	1b64      	subs	r4, r4, r5
 8013344:	10a4      	asrs	r4, r4, #2
 8013346:	42a6      	cmp	r6, r4
 8013348:	d105      	bne.n	8013356 <__libc_init_array+0x2e>
 801334a:	bd70      	pop	{r4, r5, r6, pc}
 801334c:	00b3      	lsls	r3, r6, #2
 801334e:	58eb      	ldr	r3, [r5, r3]
 8013350:	4798      	blx	r3
 8013352:	3601      	adds	r6, #1
 8013354:	e7ee      	b.n	8013334 <__libc_init_array+0xc>
 8013356:	00b3      	lsls	r3, r6, #2
 8013358:	58eb      	ldr	r3, [r5, r3]
 801335a:	4798      	blx	r3
 801335c:	3601      	adds	r6, #1
 801335e:	e7f2      	b.n	8013346 <__libc_init_array+0x1e>
 8013360:	08018a08 	.word	0x08018a08
 8013364:	08018a08 	.word	0x08018a08
 8013368:	08018a0c 	.word	0x08018a0c
 801336c:	08018a08 	.word	0x08018a08

08013370 <__retarget_lock_init_recursive>:
 8013370:	4770      	bx	lr

08013372 <__retarget_lock_acquire_recursive>:
 8013372:	4770      	bx	lr

08013374 <__retarget_lock_release_recursive>:
 8013374:	4770      	bx	lr

08013376 <strcpy>:
 8013376:	0003      	movs	r3, r0
 8013378:	780a      	ldrb	r2, [r1, #0]
 801337a:	3101      	adds	r1, #1
 801337c:	701a      	strb	r2, [r3, #0]
 801337e:	3301      	adds	r3, #1
 8013380:	2a00      	cmp	r2, #0
 8013382:	d1f9      	bne.n	8013378 <strcpy+0x2>
 8013384:	4770      	bx	lr

08013386 <memchr>:
 8013386:	b2c9      	uxtb	r1, r1
 8013388:	1882      	adds	r2, r0, r2
 801338a:	4290      	cmp	r0, r2
 801338c:	d101      	bne.n	8013392 <memchr+0xc>
 801338e:	2000      	movs	r0, #0
 8013390:	4770      	bx	lr
 8013392:	7803      	ldrb	r3, [r0, #0]
 8013394:	428b      	cmp	r3, r1
 8013396:	d0fb      	beq.n	8013390 <memchr+0xa>
 8013398:	3001      	adds	r0, #1
 801339a:	e7f6      	b.n	801338a <memchr+0x4>

0801339c <memcpy>:
 801339c:	2300      	movs	r3, #0
 801339e:	b510      	push	{r4, lr}
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d100      	bne.n	80133a6 <memcpy+0xa>
 80133a4:	bd10      	pop	{r4, pc}
 80133a6:	5ccc      	ldrb	r4, [r1, r3]
 80133a8:	54c4      	strb	r4, [r0, r3]
 80133aa:	3301      	adds	r3, #1
 80133ac:	e7f8      	b.n	80133a0 <memcpy+0x4>
	...

080133b0 <nan>:
 80133b0:	2000      	movs	r0, #0
 80133b2:	4901      	ldr	r1, [pc, #4]	; (80133b8 <nan+0x8>)
 80133b4:	4770      	bx	lr
 80133b6:	46c0      	nop			; (mov r8, r8)
 80133b8:	7ff80000 	.word	0x7ff80000

080133bc <nanf>:
 80133bc:	4800      	ldr	r0, [pc, #0]	; (80133c0 <nanf+0x4>)
 80133be:	4770      	bx	lr
 80133c0:	7fc00000 	.word	0x7fc00000

080133c4 <__assert_func>:
 80133c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80133c6:	0014      	movs	r4, r2
 80133c8:	001a      	movs	r2, r3
 80133ca:	4b09      	ldr	r3, [pc, #36]	; (80133f0 <__assert_func+0x2c>)
 80133cc:	0005      	movs	r5, r0
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	000e      	movs	r6, r1
 80133d2:	68d8      	ldr	r0, [r3, #12]
 80133d4:	4b07      	ldr	r3, [pc, #28]	; (80133f4 <__assert_func+0x30>)
 80133d6:	2c00      	cmp	r4, #0
 80133d8:	d101      	bne.n	80133de <__assert_func+0x1a>
 80133da:	4b07      	ldr	r3, [pc, #28]	; (80133f8 <__assert_func+0x34>)
 80133dc:	001c      	movs	r4, r3
 80133de:	4907      	ldr	r1, [pc, #28]	; (80133fc <__assert_func+0x38>)
 80133e0:	9301      	str	r3, [sp, #4]
 80133e2:	9402      	str	r4, [sp, #8]
 80133e4:	002b      	movs	r3, r5
 80133e6:	9600      	str	r6, [sp, #0]
 80133e8:	f002 f940 	bl	801566c <fiprintf>
 80133ec:	f002 f961 	bl	80156b2 <abort>
 80133f0:	200002b4 	.word	0x200002b4
 80133f4:	0801875b 	.word	0x0801875b
 80133f8:	08018796 	.word	0x08018796
 80133fc:	08018768 	.word	0x08018768

08013400 <quorem>:
 8013400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013402:	6902      	ldr	r2, [r0, #16]
 8013404:	690b      	ldr	r3, [r1, #16]
 8013406:	b089      	sub	sp, #36	; 0x24
 8013408:	0007      	movs	r7, r0
 801340a:	9104      	str	r1, [sp, #16]
 801340c:	2000      	movs	r0, #0
 801340e:	429a      	cmp	r2, r3
 8013410:	db69      	blt.n	80134e6 <quorem+0xe6>
 8013412:	3b01      	subs	r3, #1
 8013414:	009c      	lsls	r4, r3, #2
 8013416:	9301      	str	r3, [sp, #4]
 8013418:	000b      	movs	r3, r1
 801341a:	3314      	adds	r3, #20
 801341c:	9306      	str	r3, [sp, #24]
 801341e:	191b      	adds	r3, r3, r4
 8013420:	9305      	str	r3, [sp, #20]
 8013422:	003b      	movs	r3, r7
 8013424:	3314      	adds	r3, #20
 8013426:	9303      	str	r3, [sp, #12]
 8013428:	191c      	adds	r4, r3, r4
 801342a:	9b05      	ldr	r3, [sp, #20]
 801342c:	6826      	ldr	r6, [r4, #0]
 801342e:	681d      	ldr	r5, [r3, #0]
 8013430:	0030      	movs	r0, r6
 8013432:	3501      	adds	r5, #1
 8013434:	0029      	movs	r1, r5
 8013436:	f7ec fe83 	bl	8000140 <__udivsi3>
 801343a:	9002      	str	r0, [sp, #8]
 801343c:	42ae      	cmp	r6, r5
 801343e:	d329      	bcc.n	8013494 <quorem+0x94>
 8013440:	9b06      	ldr	r3, [sp, #24]
 8013442:	2600      	movs	r6, #0
 8013444:	469c      	mov	ip, r3
 8013446:	9d03      	ldr	r5, [sp, #12]
 8013448:	9606      	str	r6, [sp, #24]
 801344a:	4662      	mov	r2, ip
 801344c:	ca08      	ldmia	r2!, {r3}
 801344e:	6828      	ldr	r0, [r5, #0]
 8013450:	4694      	mov	ip, r2
 8013452:	9a02      	ldr	r2, [sp, #8]
 8013454:	b299      	uxth	r1, r3
 8013456:	4351      	muls	r1, r2
 8013458:	0c1b      	lsrs	r3, r3, #16
 801345a:	4353      	muls	r3, r2
 801345c:	1989      	adds	r1, r1, r6
 801345e:	0c0a      	lsrs	r2, r1, #16
 8013460:	189b      	adds	r3, r3, r2
 8013462:	9307      	str	r3, [sp, #28]
 8013464:	0c1e      	lsrs	r6, r3, #16
 8013466:	9b06      	ldr	r3, [sp, #24]
 8013468:	b282      	uxth	r2, r0
 801346a:	18d2      	adds	r2, r2, r3
 801346c:	466b      	mov	r3, sp
 801346e:	b289      	uxth	r1, r1
 8013470:	8b9b      	ldrh	r3, [r3, #28]
 8013472:	1a52      	subs	r2, r2, r1
 8013474:	0c01      	lsrs	r1, r0, #16
 8013476:	1ac9      	subs	r1, r1, r3
 8013478:	1413      	asrs	r3, r2, #16
 801347a:	18cb      	adds	r3, r1, r3
 801347c:	1419      	asrs	r1, r3, #16
 801347e:	b292      	uxth	r2, r2
 8013480:	041b      	lsls	r3, r3, #16
 8013482:	4313      	orrs	r3, r2
 8013484:	c508      	stmia	r5!, {r3}
 8013486:	9b05      	ldr	r3, [sp, #20]
 8013488:	9106      	str	r1, [sp, #24]
 801348a:	4563      	cmp	r3, ip
 801348c:	d2dd      	bcs.n	801344a <quorem+0x4a>
 801348e:	6823      	ldr	r3, [r4, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d030      	beq.n	80134f6 <quorem+0xf6>
 8013494:	0038      	movs	r0, r7
 8013496:	9904      	ldr	r1, [sp, #16]
 8013498:	f001 fcda 	bl	8014e50 <__mcmp>
 801349c:	2800      	cmp	r0, #0
 801349e:	db21      	blt.n	80134e4 <quorem+0xe4>
 80134a0:	0038      	movs	r0, r7
 80134a2:	2600      	movs	r6, #0
 80134a4:	9b02      	ldr	r3, [sp, #8]
 80134a6:	9c04      	ldr	r4, [sp, #16]
 80134a8:	3301      	adds	r3, #1
 80134aa:	9302      	str	r3, [sp, #8]
 80134ac:	3014      	adds	r0, #20
 80134ae:	3414      	adds	r4, #20
 80134b0:	6803      	ldr	r3, [r0, #0]
 80134b2:	cc02      	ldmia	r4!, {r1}
 80134b4:	b29d      	uxth	r5, r3
 80134b6:	19ad      	adds	r5, r5, r6
 80134b8:	b28a      	uxth	r2, r1
 80134ba:	1aaa      	subs	r2, r5, r2
 80134bc:	0c09      	lsrs	r1, r1, #16
 80134be:	0c1b      	lsrs	r3, r3, #16
 80134c0:	1a5b      	subs	r3, r3, r1
 80134c2:	1411      	asrs	r1, r2, #16
 80134c4:	185b      	adds	r3, r3, r1
 80134c6:	141e      	asrs	r6, r3, #16
 80134c8:	b292      	uxth	r2, r2
 80134ca:	041b      	lsls	r3, r3, #16
 80134cc:	4313      	orrs	r3, r2
 80134ce:	c008      	stmia	r0!, {r3}
 80134d0:	9b05      	ldr	r3, [sp, #20]
 80134d2:	42a3      	cmp	r3, r4
 80134d4:	d2ec      	bcs.n	80134b0 <quorem+0xb0>
 80134d6:	9b01      	ldr	r3, [sp, #4]
 80134d8:	9a03      	ldr	r2, [sp, #12]
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	18d3      	adds	r3, r2, r3
 80134de:	681a      	ldr	r2, [r3, #0]
 80134e0:	2a00      	cmp	r2, #0
 80134e2:	d015      	beq.n	8013510 <quorem+0x110>
 80134e4:	9802      	ldr	r0, [sp, #8]
 80134e6:	b009      	add	sp, #36	; 0x24
 80134e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134ea:	6823      	ldr	r3, [r4, #0]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d106      	bne.n	80134fe <quorem+0xfe>
 80134f0:	9b01      	ldr	r3, [sp, #4]
 80134f2:	3b01      	subs	r3, #1
 80134f4:	9301      	str	r3, [sp, #4]
 80134f6:	9b03      	ldr	r3, [sp, #12]
 80134f8:	3c04      	subs	r4, #4
 80134fa:	42a3      	cmp	r3, r4
 80134fc:	d3f5      	bcc.n	80134ea <quorem+0xea>
 80134fe:	9b01      	ldr	r3, [sp, #4]
 8013500:	613b      	str	r3, [r7, #16]
 8013502:	e7c7      	b.n	8013494 <quorem+0x94>
 8013504:	681a      	ldr	r2, [r3, #0]
 8013506:	2a00      	cmp	r2, #0
 8013508:	d106      	bne.n	8013518 <quorem+0x118>
 801350a:	9a01      	ldr	r2, [sp, #4]
 801350c:	3a01      	subs	r2, #1
 801350e:	9201      	str	r2, [sp, #4]
 8013510:	9a03      	ldr	r2, [sp, #12]
 8013512:	3b04      	subs	r3, #4
 8013514:	429a      	cmp	r2, r3
 8013516:	d3f5      	bcc.n	8013504 <quorem+0x104>
 8013518:	9b01      	ldr	r3, [sp, #4]
 801351a:	613b      	str	r3, [r7, #16]
 801351c:	e7e2      	b.n	80134e4 <quorem+0xe4>
	...

08013520 <_dtoa_r>:
 8013520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013522:	0014      	movs	r4, r2
 8013524:	001d      	movs	r5, r3
 8013526:	69c6      	ldr	r6, [r0, #28]
 8013528:	b09d      	sub	sp, #116	; 0x74
 801352a:	9408      	str	r4, [sp, #32]
 801352c:	9509      	str	r5, [sp, #36]	; 0x24
 801352e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013530:	9004      	str	r0, [sp, #16]
 8013532:	2e00      	cmp	r6, #0
 8013534:	d10f      	bne.n	8013556 <_dtoa_r+0x36>
 8013536:	2010      	movs	r0, #16
 8013538:	f7fd fdf2 	bl	8011120 <malloc>
 801353c:	9b04      	ldr	r3, [sp, #16]
 801353e:	1e02      	subs	r2, r0, #0
 8013540:	61d8      	str	r0, [r3, #28]
 8013542:	d104      	bne.n	801354e <_dtoa_r+0x2e>
 8013544:	21ef      	movs	r1, #239	; 0xef
 8013546:	4bc6      	ldr	r3, [pc, #792]	; (8013860 <_dtoa_r+0x340>)
 8013548:	48c6      	ldr	r0, [pc, #792]	; (8013864 <_dtoa_r+0x344>)
 801354a:	f7ff ff3b 	bl	80133c4 <__assert_func>
 801354e:	6046      	str	r6, [r0, #4]
 8013550:	6086      	str	r6, [r0, #8]
 8013552:	6006      	str	r6, [r0, #0]
 8013554:	60c6      	str	r6, [r0, #12]
 8013556:	9b04      	ldr	r3, [sp, #16]
 8013558:	69db      	ldr	r3, [r3, #28]
 801355a:	6819      	ldr	r1, [r3, #0]
 801355c:	2900      	cmp	r1, #0
 801355e:	d00b      	beq.n	8013578 <_dtoa_r+0x58>
 8013560:	685a      	ldr	r2, [r3, #4]
 8013562:	2301      	movs	r3, #1
 8013564:	4093      	lsls	r3, r2
 8013566:	604a      	str	r2, [r1, #4]
 8013568:	608b      	str	r3, [r1, #8]
 801356a:	9804      	ldr	r0, [sp, #16]
 801356c:	f001 f9e2 	bl	8014934 <_Bfree>
 8013570:	2200      	movs	r2, #0
 8013572:	9b04      	ldr	r3, [sp, #16]
 8013574:	69db      	ldr	r3, [r3, #28]
 8013576:	601a      	str	r2, [r3, #0]
 8013578:	2d00      	cmp	r5, #0
 801357a:	da1e      	bge.n	80135ba <_dtoa_r+0x9a>
 801357c:	2301      	movs	r3, #1
 801357e:	603b      	str	r3, [r7, #0]
 8013580:	006b      	lsls	r3, r5, #1
 8013582:	085b      	lsrs	r3, r3, #1
 8013584:	9309      	str	r3, [sp, #36]	; 0x24
 8013586:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013588:	4bb7      	ldr	r3, [pc, #732]	; (8013868 <_dtoa_r+0x348>)
 801358a:	4ab7      	ldr	r2, [pc, #732]	; (8013868 <_dtoa_r+0x348>)
 801358c:	403b      	ands	r3, r7
 801358e:	4293      	cmp	r3, r2
 8013590:	d116      	bne.n	80135c0 <_dtoa_r+0xa0>
 8013592:	4bb6      	ldr	r3, [pc, #728]	; (801386c <_dtoa_r+0x34c>)
 8013594:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013596:	6013      	str	r3, [r2, #0]
 8013598:	033b      	lsls	r3, r7, #12
 801359a:	0b1b      	lsrs	r3, r3, #12
 801359c:	4323      	orrs	r3, r4
 801359e:	d101      	bne.n	80135a4 <_dtoa_r+0x84>
 80135a0:	f000 fdb5 	bl	801410e <_dtoa_r+0xbee>
 80135a4:	4bb2      	ldr	r3, [pc, #712]	; (8013870 <_dtoa_r+0x350>)
 80135a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80135a8:	9306      	str	r3, [sp, #24]
 80135aa:	2a00      	cmp	r2, #0
 80135ac:	d002      	beq.n	80135b4 <_dtoa_r+0x94>
 80135ae:	4bb1      	ldr	r3, [pc, #708]	; (8013874 <_dtoa_r+0x354>)
 80135b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80135b2:	6013      	str	r3, [r2, #0]
 80135b4:	9806      	ldr	r0, [sp, #24]
 80135b6:	b01d      	add	sp, #116	; 0x74
 80135b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ba:	2300      	movs	r3, #0
 80135bc:	603b      	str	r3, [r7, #0]
 80135be:	e7e2      	b.n	8013586 <_dtoa_r+0x66>
 80135c0:	9a08      	ldr	r2, [sp, #32]
 80135c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135c4:	9210      	str	r2, [sp, #64]	; 0x40
 80135c6:	9311      	str	r3, [sp, #68]	; 0x44
 80135c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80135ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80135cc:	2200      	movs	r2, #0
 80135ce:	2300      	movs	r3, #0
 80135d0:	f7ec ff3c 	bl	800044c <__aeabi_dcmpeq>
 80135d4:	1e06      	subs	r6, r0, #0
 80135d6:	d009      	beq.n	80135ec <_dtoa_r+0xcc>
 80135d8:	2301      	movs	r3, #1
 80135da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80135dc:	6013      	str	r3, [r2, #0]
 80135de:	4ba6      	ldr	r3, [pc, #664]	; (8013878 <_dtoa_r+0x358>)
 80135e0:	9306      	str	r3, [sp, #24]
 80135e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d0e5      	beq.n	80135b4 <_dtoa_r+0x94>
 80135e8:	4ba4      	ldr	r3, [pc, #656]	; (801387c <_dtoa_r+0x35c>)
 80135ea:	e7e1      	b.n	80135b0 <_dtoa_r+0x90>
 80135ec:	ab1a      	add	r3, sp, #104	; 0x68
 80135ee:	9301      	str	r3, [sp, #4]
 80135f0:	ab1b      	add	r3, sp, #108	; 0x6c
 80135f2:	9300      	str	r3, [sp, #0]
 80135f4:	9804      	ldr	r0, [sp, #16]
 80135f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80135f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80135fa:	f001 fd45 	bl	8015088 <__d2b>
 80135fe:	007a      	lsls	r2, r7, #1
 8013600:	9005      	str	r0, [sp, #20]
 8013602:	0d52      	lsrs	r2, r2, #21
 8013604:	d100      	bne.n	8013608 <_dtoa_r+0xe8>
 8013606:	e07b      	b.n	8013700 <_dtoa_r+0x1e0>
 8013608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801360a:	9617      	str	r6, [sp, #92]	; 0x5c
 801360c:	0319      	lsls	r1, r3, #12
 801360e:	4b9c      	ldr	r3, [pc, #624]	; (8013880 <_dtoa_r+0x360>)
 8013610:	0b09      	lsrs	r1, r1, #12
 8013612:	430b      	orrs	r3, r1
 8013614:	499b      	ldr	r1, [pc, #620]	; (8013884 <_dtoa_r+0x364>)
 8013616:	1857      	adds	r7, r2, r1
 8013618:	9810      	ldr	r0, [sp, #64]	; 0x40
 801361a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801361c:	0019      	movs	r1, r3
 801361e:	2200      	movs	r2, #0
 8013620:	4b99      	ldr	r3, [pc, #612]	; (8013888 <_dtoa_r+0x368>)
 8013622:	f7ef f919 	bl	8002858 <__aeabi_dsub>
 8013626:	4a99      	ldr	r2, [pc, #612]	; (801388c <_dtoa_r+0x36c>)
 8013628:	4b99      	ldr	r3, [pc, #612]	; (8013890 <_dtoa_r+0x370>)
 801362a:	f7ee fe53 	bl	80022d4 <__aeabi_dmul>
 801362e:	4a99      	ldr	r2, [pc, #612]	; (8013894 <_dtoa_r+0x374>)
 8013630:	4b99      	ldr	r3, [pc, #612]	; (8013898 <_dtoa_r+0x378>)
 8013632:	f7ed fef5 	bl	8001420 <__aeabi_dadd>
 8013636:	0004      	movs	r4, r0
 8013638:	0038      	movs	r0, r7
 801363a:	000d      	movs	r5, r1
 801363c:	f7ef fce2 	bl	8003004 <__aeabi_i2d>
 8013640:	4a96      	ldr	r2, [pc, #600]	; (801389c <_dtoa_r+0x37c>)
 8013642:	4b97      	ldr	r3, [pc, #604]	; (80138a0 <_dtoa_r+0x380>)
 8013644:	f7ee fe46 	bl	80022d4 <__aeabi_dmul>
 8013648:	0002      	movs	r2, r0
 801364a:	000b      	movs	r3, r1
 801364c:	0020      	movs	r0, r4
 801364e:	0029      	movs	r1, r5
 8013650:	f7ed fee6 	bl	8001420 <__aeabi_dadd>
 8013654:	0004      	movs	r4, r0
 8013656:	000d      	movs	r5, r1
 8013658:	f7ef fc9e 	bl	8002f98 <__aeabi_d2iz>
 801365c:	2200      	movs	r2, #0
 801365e:	9003      	str	r0, [sp, #12]
 8013660:	2300      	movs	r3, #0
 8013662:	0020      	movs	r0, r4
 8013664:	0029      	movs	r1, r5
 8013666:	f7ec fef7 	bl	8000458 <__aeabi_dcmplt>
 801366a:	2800      	cmp	r0, #0
 801366c:	d00b      	beq.n	8013686 <_dtoa_r+0x166>
 801366e:	9803      	ldr	r0, [sp, #12]
 8013670:	f7ef fcc8 	bl	8003004 <__aeabi_i2d>
 8013674:	002b      	movs	r3, r5
 8013676:	0022      	movs	r2, r4
 8013678:	f7ec fee8 	bl	800044c <__aeabi_dcmpeq>
 801367c:	4243      	negs	r3, r0
 801367e:	4158      	adcs	r0, r3
 8013680:	9b03      	ldr	r3, [sp, #12]
 8013682:	1a1b      	subs	r3, r3, r0
 8013684:	9303      	str	r3, [sp, #12]
 8013686:	2301      	movs	r3, #1
 8013688:	9316      	str	r3, [sp, #88]	; 0x58
 801368a:	9b03      	ldr	r3, [sp, #12]
 801368c:	2b16      	cmp	r3, #22
 801368e:	d810      	bhi.n	80136b2 <_dtoa_r+0x192>
 8013690:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013692:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013694:	9a03      	ldr	r2, [sp, #12]
 8013696:	4b83      	ldr	r3, [pc, #524]	; (80138a4 <_dtoa_r+0x384>)
 8013698:	00d2      	lsls	r2, r2, #3
 801369a:	189b      	adds	r3, r3, r2
 801369c:	681a      	ldr	r2, [r3, #0]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	f7ec feda 	bl	8000458 <__aeabi_dcmplt>
 80136a4:	2800      	cmp	r0, #0
 80136a6:	d047      	beq.n	8013738 <_dtoa_r+0x218>
 80136a8:	9b03      	ldr	r3, [sp, #12]
 80136aa:	3b01      	subs	r3, #1
 80136ac:	9303      	str	r3, [sp, #12]
 80136ae:	2300      	movs	r3, #0
 80136b0:	9316      	str	r3, [sp, #88]	; 0x58
 80136b2:	2200      	movs	r2, #0
 80136b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80136b6:	920a      	str	r2, [sp, #40]	; 0x28
 80136b8:	1bdb      	subs	r3, r3, r7
 80136ba:	1e5a      	subs	r2, r3, #1
 80136bc:	d53e      	bpl.n	801373c <_dtoa_r+0x21c>
 80136be:	2201      	movs	r2, #1
 80136c0:	1ad3      	subs	r3, r2, r3
 80136c2:	930a      	str	r3, [sp, #40]	; 0x28
 80136c4:	2300      	movs	r3, #0
 80136c6:	930c      	str	r3, [sp, #48]	; 0x30
 80136c8:	9b03      	ldr	r3, [sp, #12]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	db38      	blt.n	8013740 <_dtoa_r+0x220>
 80136ce:	9a03      	ldr	r2, [sp, #12]
 80136d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136d2:	4694      	mov	ip, r2
 80136d4:	4463      	add	r3, ip
 80136d6:	930c      	str	r3, [sp, #48]	; 0x30
 80136d8:	2300      	movs	r3, #0
 80136da:	9213      	str	r2, [sp, #76]	; 0x4c
 80136dc:	930d      	str	r3, [sp, #52]	; 0x34
 80136de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80136e0:	2401      	movs	r4, #1
 80136e2:	2b09      	cmp	r3, #9
 80136e4:	d867      	bhi.n	80137b6 <_dtoa_r+0x296>
 80136e6:	2b05      	cmp	r3, #5
 80136e8:	dd02      	ble.n	80136f0 <_dtoa_r+0x1d0>
 80136ea:	2400      	movs	r4, #0
 80136ec:	3b04      	subs	r3, #4
 80136ee:	9322      	str	r3, [sp, #136]	; 0x88
 80136f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80136f2:	1e98      	subs	r0, r3, #2
 80136f4:	2803      	cmp	r0, #3
 80136f6:	d867      	bhi.n	80137c8 <_dtoa_r+0x2a8>
 80136f8:	f7ec fd0e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80136fc:	5b383a2b 	.word	0x5b383a2b
 8013700:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013702:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8013704:	18f6      	adds	r6, r6, r3
 8013706:	4b68      	ldr	r3, [pc, #416]	; (80138a8 <_dtoa_r+0x388>)
 8013708:	18f2      	adds	r2, r6, r3
 801370a:	2a20      	cmp	r2, #32
 801370c:	dd0f      	ble.n	801372e <_dtoa_r+0x20e>
 801370e:	2340      	movs	r3, #64	; 0x40
 8013710:	1a9b      	subs	r3, r3, r2
 8013712:	409f      	lsls	r7, r3
 8013714:	4b65      	ldr	r3, [pc, #404]	; (80138ac <_dtoa_r+0x38c>)
 8013716:	0038      	movs	r0, r7
 8013718:	18f3      	adds	r3, r6, r3
 801371a:	40dc      	lsrs	r4, r3
 801371c:	4320      	orrs	r0, r4
 801371e:	f7ef fca1 	bl	8003064 <__aeabi_ui2d>
 8013722:	2201      	movs	r2, #1
 8013724:	4b62      	ldr	r3, [pc, #392]	; (80138b0 <_dtoa_r+0x390>)
 8013726:	1e77      	subs	r7, r6, #1
 8013728:	18cb      	adds	r3, r1, r3
 801372a:	9217      	str	r2, [sp, #92]	; 0x5c
 801372c:	e776      	b.n	801361c <_dtoa_r+0xfc>
 801372e:	2320      	movs	r3, #32
 8013730:	0020      	movs	r0, r4
 8013732:	1a9b      	subs	r3, r3, r2
 8013734:	4098      	lsls	r0, r3
 8013736:	e7f2      	b.n	801371e <_dtoa_r+0x1fe>
 8013738:	9016      	str	r0, [sp, #88]	; 0x58
 801373a:	e7ba      	b.n	80136b2 <_dtoa_r+0x192>
 801373c:	920c      	str	r2, [sp, #48]	; 0x30
 801373e:	e7c3      	b.n	80136c8 <_dtoa_r+0x1a8>
 8013740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013742:	9a03      	ldr	r2, [sp, #12]
 8013744:	1a9b      	subs	r3, r3, r2
 8013746:	930a      	str	r3, [sp, #40]	; 0x28
 8013748:	4253      	negs	r3, r2
 801374a:	930d      	str	r3, [sp, #52]	; 0x34
 801374c:	2300      	movs	r3, #0
 801374e:	9313      	str	r3, [sp, #76]	; 0x4c
 8013750:	e7c5      	b.n	80136de <_dtoa_r+0x1be>
 8013752:	2300      	movs	r3, #0
 8013754:	930f      	str	r3, [sp, #60]	; 0x3c
 8013756:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013758:	930b      	str	r3, [sp, #44]	; 0x2c
 801375a:	9307      	str	r3, [sp, #28]
 801375c:	2b00      	cmp	r3, #0
 801375e:	dc13      	bgt.n	8013788 <_dtoa_r+0x268>
 8013760:	2301      	movs	r3, #1
 8013762:	001a      	movs	r2, r3
 8013764:	930b      	str	r3, [sp, #44]	; 0x2c
 8013766:	9307      	str	r3, [sp, #28]
 8013768:	9223      	str	r2, [sp, #140]	; 0x8c
 801376a:	e00d      	b.n	8013788 <_dtoa_r+0x268>
 801376c:	2301      	movs	r3, #1
 801376e:	e7f1      	b.n	8013754 <_dtoa_r+0x234>
 8013770:	2300      	movs	r3, #0
 8013772:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8013774:	930f      	str	r3, [sp, #60]	; 0x3c
 8013776:	4694      	mov	ip, r2
 8013778:	9b03      	ldr	r3, [sp, #12]
 801377a:	4463      	add	r3, ip
 801377c:	930b      	str	r3, [sp, #44]	; 0x2c
 801377e:	3301      	adds	r3, #1
 8013780:	9307      	str	r3, [sp, #28]
 8013782:	2b00      	cmp	r3, #0
 8013784:	dc00      	bgt.n	8013788 <_dtoa_r+0x268>
 8013786:	2301      	movs	r3, #1
 8013788:	9a04      	ldr	r2, [sp, #16]
 801378a:	2100      	movs	r1, #0
 801378c:	69d0      	ldr	r0, [r2, #28]
 801378e:	2204      	movs	r2, #4
 8013790:	0015      	movs	r5, r2
 8013792:	3514      	adds	r5, #20
 8013794:	429d      	cmp	r5, r3
 8013796:	d91b      	bls.n	80137d0 <_dtoa_r+0x2b0>
 8013798:	6041      	str	r1, [r0, #4]
 801379a:	9804      	ldr	r0, [sp, #16]
 801379c:	f001 f886 	bl	80148ac <_Balloc>
 80137a0:	9006      	str	r0, [sp, #24]
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d117      	bne.n	80137d6 <_dtoa_r+0x2b6>
 80137a6:	21b0      	movs	r1, #176	; 0xb0
 80137a8:	4b42      	ldr	r3, [pc, #264]	; (80138b4 <_dtoa_r+0x394>)
 80137aa:	482e      	ldr	r0, [pc, #184]	; (8013864 <_dtoa_r+0x344>)
 80137ac:	9a06      	ldr	r2, [sp, #24]
 80137ae:	31ff      	adds	r1, #255	; 0xff
 80137b0:	e6cb      	b.n	801354a <_dtoa_r+0x2a>
 80137b2:	2301      	movs	r3, #1
 80137b4:	e7dd      	b.n	8013772 <_dtoa_r+0x252>
 80137b6:	2300      	movs	r3, #0
 80137b8:	940f      	str	r4, [sp, #60]	; 0x3c
 80137ba:	9322      	str	r3, [sp, #136]	; 0x88
 80137bc:	3b01      	subs	r3, #1
 80137be:	930b      	str	r3, [sp, #44]	; 0x2c
 80137c0:	9307      	str	r3, [sp, #28]
 80137c2:	2200      	movs	r2, #0
 80137c4:	3313      	adds	r3, #19
 80137c6:	e7cf      	b.n	8013768 <_dtoa_r+0x248>
 80137c8:	2301      	movs	r3, #1
 80137ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80137cc:	3b02      	subs	r3, #2
 80137ce:	e7f6      	b.n	80137be <_dtoa_r+0x29e>
 80137d0:	3101      	adds	r1, #1
 80137d2:	0052      	lsls	r2, r2, #1
 80137d4:	e7dc      	b.n	8013790 <_dtoa_r+0x270>
 80137d6:	9b04      	ldr	r3, [sp, #16]
 80137d8:	9a06      	ldr	r2, [sp, #24]
 80137da:	69db      	ldr	r3, [r3, #28]
 80137dc:	601a      	str	r2, [r3, #0]
 80137de:	9b07      	ldr	r3, [sp, #28]
 80137e0:	2b0e      	cmp	r3, #14
 80137e2:	d900      	bls.n	80137e6 <_dtoa_r+0x2c6>
 80137e4:	e0e5      	b.n	80139b2 <_dtoa_r+0x492>
 80137e6:	2c00      	cmp	r4, #0
 80137e8:	d100      	bne.n	80137ec <_dtoa_r+0x2cc>
 80137ea:	e0e2      	b.n	80139b2 <_dtoa_r+0x492>
 80137ec:	9b03      	ldr	r3, [sp, #12]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	dd64      	ble.n	80138bc <_dtoa_r+0x39c>
 80137f2:	210f      	movs	r1, #15
 80137f4:	9a03      	ldr	r2, [sp, #12]
 80137f6:	4b2b      	ldr	r3, [pc, #172]	; (80138a4 <_dtoa_r+0x384>)
 80137f8:	400a      	ands	r2, r1
 80137fa:	00d2      	lsls	r2, r2, #3
 80137fc:	189b      	adds	r3, r3, r2
 80137fe:	681e      	ldr	r6, [r3, #0]
 8013800:	685f      	ldr	r7, [r3, #4]
 8013802:	9b03      	ldr	r3, [sp, #12]
 8013804:	2402      	movs	r4, #2
 8013806:	111d      	asrs	r5, r3, #4
 8013808:	05db      	lsls	r3, r3, #23
 801380a:	d50a      	bpl.n	8013822 <_dtoa_r+0x302>
 801380c:	4b2a      	ldr	r3, [pc, #168]	; (80138b8 <_dtoa_r+0x398>)
 801380e:	400d      	ands	r5, r1
 8013810:	6a1a      	ldr	r2, [r3, #32]
 8013812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013814:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013816:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013818:	f7ee f962 	bl	8001ae0 <__aeabi_ddiv>
 801381c:	9008      	str	r0, [sp, #32]
 801381e:	9109      	str	r1, [sp, #36]	; 0x24
 8013820:	3401      	adds	r4, #1
 8013822:	4b25      	ldr	r3, [pc, #148]	; (80138b8 <_dtoa_r+0x398>)
 8013824:	930e      	str	r3, [sp, #56]	; 0x38
 8013826:	2d00      	cmp	r5, #0
 8013828:	d108      	bne.n	801383c <_dtoa_r+0x31c>
 801382a:	9808      	ldr	r0, [sp, #32]
 801382c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801382e:	0032      	movs	r2, r6
 8013830:	003b      	movs	r3, r7
 8013832:	f7ee f955 	bl	8001ae0 <__aeabi_ddiv>
 8013836:	9008      	str	r0, [sp, #32]
 8013838:	9109      	str	r1, [sp, #36]	; 0x24
 801383a:	e05a      	b.n	80138f2 <_dtoa_r+0x3d2>
 801383c:	2301      	movs	r3, #1
 801383e:	421d      	tst	r5, r3
 8013840:	d009      	beq.n	8013856 <_dtoa_r+0x336>
 8013842:	18e4      	adds	r4, r4, r3
 8013844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013846:	0030      	movs	r0, r6
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	685b      	ldr	r3, [r3, #4]
 801384c:	0039      	movs	r1, r7
 801384e:	f7ee fd41 	bl	80022d4 <__aeabi_dmul>
 8013852:	0006      	movs	r6, r0
 8013854:	000f      	movs	r7, r1
 8013856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013858:	106d      	asrs	r5, r5, #1
 801385a:	3308      	adds	r3, #8
 801385c:	e7e2      	b.n	8013824 <_dtoa_r+0x304>
 801385e:	46c0      	nop			; (mov r8, r8)
 8013860:	080186e2 	.word	0x080186e2
 8013864:	080187a4 	.word	0x080187a4
 8013868:	7ff00000 	.word	0x7ff00000
 801386c:	0000270f 	.word	0x0000270f
 8013870:	080187a0 	.word	0x080187a0
 8013874:	080187a3 	.word	0x080187a3
 8013878:	080186b9 	.word	0x080186b9
 801387c:	080186ba 	.word	0x080186ba
 8013880:	3ff00000 	.word	0x3ff00000
 8013884:	fffffc01 	.word	0xfffffc01
 8013888:	3ff80000 	.word	0x3ff80000
 801388c:	636f4361 	.word	0x636f4361
 8013890:	3fd287a7 	.word	0x3fd287a7
 8013894:	8b60c8b3 	.word	0x8b60c8b3
 8013898:	3fc68a28 	.word	0x3fc68a28
 801389c:	509f79fb 	.word	0x509f79fb
 80138a0:	3fd34413 	.word	0x3fd34413
 80138a4:	080188f0 	.word	0x080188f0
 80138a8:	00000432 	.word	0x00000432
 80138ac:	00000412 	.word	0x00000412
 80138b0:	fe100000 	.word	0xfe100000
 80138b4:	080187fc 	.word	0x080187fc
 80138b8:	080188c8 	.word	0x080188c8
 80138bc:	9b03      	ldr	r3, [sp, #12]
 80138be:	2402      	movs	r4, #2
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d016      	beq.n	80138f2 <_dtoa_r+0x3d2>
 80138c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80138c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80138c8:	220f      	movs	r2, #15
 80138ca:	425d      	negs	r5, r3
 80138cc:	402a      	ands	r2, r5
 80138ce:	4bdd      	ldr	r3, [pc, #884]	; (8013c44 <_dtoa_r+0x724>)
 80138d0:	00d2      	lsls	r2, r2, #3
 80138d2:	189b      	adds	r3, r3, r2
 80138d4:	681a      	ldr	r2, [r3, #0]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	f7ee fcfc 	bl	80022d4 <__aeabi_dmul>
 80138dc:	2701      	movs	r7, #1
 80138de:	2300      	movs	r3, #0
 80138e0:	9008      	str	r0, [sp, #32]
 80138e2:	9109      	str	r1, [sp, #36]	; 0x24
 80138e4:	4ed8      	ldr	r6, [pc, #864]	; (8013c48 <_dtoa_r+0x728>)
 80138e6:	112d      	asrs	r5, r5, #4
 80138e8:	2d00      	cmp	r5, #0
 80138ea:	d000      	beq.n	80138ee <_dtoa_r+0x3ce>
 80138ec:	e091      	b.n	8013a12 <_dtoa_r+0x4f2>
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d1a1      	bne.n	8013836 <_dtoa_r+0x316>
 80138f2:	9e08      	ldr	r6, [sp, #32]
 80138f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80138f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d100      	bne.n	80138fe <_dtoa_r+0x3de>
 80138fc:	e094      	b.n	8013a28 <_dtoa_r+0x508>
 80138fe:	2200      	movs	r2, #0
 8013900:	0030      	movs	r0, r6
 8013902:	0039      	movs	r1, r7
 8013904:	4bd1      	ldr	r3, [pc, #836]	; (8013c4c <_dtoa_r+0x72c>)
 8013906:	f7ec fda7 	bl	8000458 <__aeabi_dcmplt>
 801390a:	2800      	cmp	r0, #0
 801390c:	d100      	bne.n	8013910 <_dtoa_r+0x3f0>
 801390e:	e08b      	b.n	8013a28 <_dtoa_r+0x508>
 8013910:	9b07      	ldr	r3, [sp, #28]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d100      	bne.n	8013918 <_dtoa_r+0x3f8>
 8013916:	e087      	b.n	8013a28 <_dtoa_r+0x508>
 8013918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801391a:	2b00      	cmp	r3, #0
 801391c:	dd45      	ble.n	80139aa <_dtoa_r+0x48a>
 801391e:	9b03      	ldr	r3, [sp, #12]
 8013920:	2200      	movs	r2, #0
 8013922:	3b01      	subs	r3, #1
 8013924:	930e      	str	r3, [sp, #56]	; 0x38
 8013926:	0030      	movs	r0, r6
 8013928:	4bc9      	ldr	r3, [pc, #804]	; (8013c50 <_dtoa_r+0x730>)
 801392a:	0039      	movs	r1, r7
 801392c:	f7ee fcd2 	bl	80022d4 <__aeabi_dmul>
 8013930:	9008      	str	r0, [sp, #32]
 8013932:	9109      	str	r1, [sp, #36]	; 0x24
 8013934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013936:	3401      	adds	r4, #1
 8013938:	0020      	movs	r0, r4
 801393a:	9e08      	ldr	r6, [sp, #32]
 801393c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801393e:	9312      	str	r3, [sp, #72]	; 0x48
 8013940:	f7ef fb60 	bl	8003004 <__aeabi_i2d>
 8013944:	0032      	movs	r2, r6
 8013946:	003b      	movs	r3, r7
 8013948:	f7ee fcc4 	bl	80022d4 <__aeabi_dmul>
 801394c:	2200      	movs	r2, #0
 801394e:	4bc1      	ldr	r3, [pc, #772]	; (8013c54 <_dtoa_r+0x734>)
 8013950:	f7ed fd66 	bl	8001420 <__aeabi_dadd>
 8013954:	4ac0      	ldr	r2, [pc, #768]	; (8013c58 <_dtoa_r+0x738>)
 8013956:	9014      	str	r0, [sp, #80]	; 0x50
 8013958:	9115      	str	r1, [sp, #84]	; 0x54
 801395a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801395c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801395e:	4694      	mov	ip, r2
 8013960:	9308      	str	r3, [sp, #32]
 8013962:	9409      	str	r4, [sp, #36]	; 0x24
 8013964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013966:	4463      	add	r3, ip
 8013968:	9318      	str	r3, [sp, #96]	; 0x60
 801396a:	9309      	str	r3, [sp, #36]	; 0x24
 801396c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801396e:	2b00      	cmp	r3, #0
 8013970:	d15e      	bne.n	8013a30 <_dtoa_r+0x510>
 8013972:	2200      	movs	r2, #0
 8013974:	4bb9      	ldr	r3, [pc, #740]	; (8013c5c <_dtoa_r+0x73c>)
 8013976:	0030      	movs	r0, r6
 8013978:	0039      	movs	r1, r7
 801397a:	f7ee ff6d 	bl	8002858 <__aeabi_dsub>
 801397e:	9a08      	ldr	r2, [sp, #32]
 8013980:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013982:	0004      	movs	r4, r0
 8013984:	000d      	movs	r5, r1
 8013986:	f7ec fd7b 	bl	8000480 <__aeabi_dcmpgt>
 801398a:	2800      	cmp	r0, #0
 801398c:	d000      	beq.n	8013990 <_dtoa_r+0x470>
 801398e:	e2b3      	b.n	8013ef8 <_dtoa_r+0x9d8>
 8013990:	48b3      	ldr	r0, [pc, #716]	; (8013c60 <_dtoa_r+0x740>)
 8013992:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013994:	4684      	mov	ip, r0
 8013996:	4461      	add	r1, ip
 8013998:	000b      	movs	r3, r1
 801399a:	0020      	movs	r0, r4
 801399c:	0029      	movs	r1, r5
 801399e:	9a08      	ldr	r2, [sp, #32]
 80139a0:	f7ec fd5a 	bl	8000458 <__aeabi_dcmplt>
 80139a4:	2800      	cmp	r0, #0
 80139a6:	d000      	beq.n	80139aa <_dtoa_r+0x48a>
 80139a8:	e2a3      	b.n	8013ef2 <_dtoa_r+0x9d2>
 80139aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80139ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80139ae:	9308      	str	r3, [sp, #32]
 80139b0:	9409      	str	r4, [sp, #36]	; 0x24
 80139b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	da00      	bge.n	80139ba <_dtoa_r+0x49a>
 80139b8:	e179      	b.n	8013cae <_dtoa_r+0x78e>
 80139ba:	9a03      	ldr	r2, [sp, #12]
 80139bc:	2a0e      	cmp	r2, #14
 80139be:	dd00      	ble.n	80139c2 <_dtoa_r+0x4a2>
 80139c0:	e175      	b.n	8013cae <_dtoa_r+0x78e>
 80139c2:	4ba0      	ldr	r3, [pc, #640]	; (8013c44 <_dtoa_r+0x724>)
 80139c4:	00d2      	lsls	r2, r2, #3
 80139c6:	189b      	adds	r3, r3, r2
 80139c8:	681e      	ldr	r6, [r3, #0]
 80139ca:	685f      	ldr	r7, [r3, #4]
 80139cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	db00      	blt.n	80139d4 <_dtoa_r+0x4b4>
 80139d2:	e0e5      	b.n	8013ba0 <_dtoa_r+0x680>
 80139d4:	9b07      	ldr	r3, [sp, #28]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	dd00      	ble.n	80139dc <_dtoa_r+0x4bc>
 80139da:	e0e1      	b.n	8013ba0 <_dtoa_r+0x680>
 80139dc:	d000      	beq.n	80139e0 <_dtoa_r+0x4c0>
 80139de:	e288      	b.n	8013ef2 <_dtoa_r+0x9d2>
 80139e0:	2200      	movs	r2, #0
 80139e2:	0030      	movs	r0, r6
 80139e4:	0039      	movs	r1, r7
 80139e6:	4b9d      	ldr	r3, [pc, #628]	; (8013c5c <_dtoa_r+0x73c>)
 80139e8:	f7ee fc74 	bl	80022d4 <__aeabi_dmul>
 80139ec:	9a08      	ldr	r2, [sp, #32]
 80139ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139f0:	f7ec fd50 	bl	8000494 <__aeabi_dcmpge>
 80139f4:	9e07      	ldr	r6, [sp, #28]
 80139f6:	0037      	movs	r7, r6
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d000      	beq.n	80139fe <_dtoa_r+0x4de>
 80139fc:	e25f      	b.n	8013ebe <_dtoa_r+0x99e>
 80139fe:	9b06      	ldr	r3, [sp, #24]
 8013a00:	9a06      	ldr	r2, [sp, #24]
 8013a02:	3301      	adds	r3, #1
 8013a04:	9308      	str	r3, [sp, #32]
 8013a06:	2331      	movs	r3, #49	; 0x31
 8013a08:	7013      	strb	r3, [r2, #0]
 8013a0a:	9b03      	ldr	r3, [sp, #12]
 8013a0c:	3301      	adds	r3, #1
 8013a0e:	9303      	str	r3, [sp, #12]
 8013a10:	e25a      	b.n	8013ec8 <_dtoa_r+0x9a8>
 8013a12:	423d      	tst	r5, r7
 8013a14:	d005      	beq.n	8013a22 <_dtoa_r+0x502>
 8013a16:	6832      	ldr	r2, [r6, #0]
 8013a18:	6873      	ldr	r3, [r6, #4]
 8013a1a:	f7ee fc5b 	bl	80022d4 <__aeabi_dmul>
 8013a1e:	003b      	movs	r3, r7
 8013a20:	3401      	adds	r4, #1
 8013a22:	106d      	asrs	r5, r5, #1
 8013a24:	3608      	adds	r6, #8
 8013a26:	e75f      	b.n	80138e8 <_dtoa_r+0x3c8>
 8013a28:	9b03      	ldr	r3, [sp, #12]
 8013a2a:	930e      	str	r3, [sp, #56]	; 0x38
 8013a2c:	9b07      	ldr	r3, [sp, #28]
 8013a2e:	e783      	b.n	8013938 <_dtoa_r+0x418>
 8013a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a32:	4b84      	ldr	r3, [pc, #528]	; (8013c44 <_dtoa_r+0x724>)
 8013a34:	3a01      	subs	r2, #1
 8013a36:	00d2      	lsls	r2, r2, #3
 8013a38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013a3a:	189b      	adds	r3, r3, r2
 8013a3c:	9c08      	ldr	r4, [sp, #32]
 8013a3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	685b      	ldr	r3, [r3, #4]
 8013a44:	2900      	cmp	r1, #0
 8013a46:	d051      	beq.n	8013aec <_dtoa_r+0x5cc>
 8013a48:	2000      	movs	r0, #0
 8013a4a:	4986      	ldr	r1, [pc, #536]	; (8013c64 <_dtoa_r+0x744>)
 8013a4c:	f7ee f848 	bl	8001ae0 <__aeabi_ddiv>
 8013a50:	0022      	movs	r2, r4
 8013a52:	002b      	movs	r3, r5
 8013a54:	f7ee ff00 	bl	8002858 <__aeabi_dsub>
 8013a58:	9a06      	ldr	r2, [sp, #24]
 8013a5a:	0004      	movs	r4, r0
 8013a5c:	4694      	mov	ip, r2
 8013a5e:	000d      	movs	r5, r1
 8013a60:	9b06      	ldr	r3, [sp, #24]
 8013a62:	9314      	str	r3, [sp, #80]	; 0x50
 8013a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a66:	4463      	add	r3, ip
 8013a68:	9318      	str	r3, [sp, #96]	; 0x60
 8013a6a:	0039      	movs	r1, r7
 8013a6c:	0030      	movs	r0, r6
 8013a6e:	f7ef fa93 	bl	8002f98 <__aeabi_d2iz>
 8013a72:	9012      	str	r0, [sp, #72]	; 0x48
 8013a74:	f7ef fac6 	bl	8003004 <__aeabi_i2d>
 8013a78:	0002      	movs	r2, r0
 8013a7a:	000b      	movs	r3, r1
 8013a7c:	0030      	movs	r0, r6
 8013a7e:	0039      	movs	r1, r7
 8013a80:	f7ee feea 	bl	8002858 <__aeabi_dsub>
 8013a84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013a86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013a88:	3301      	adds	r3, #1
 8013a8a:	9308      	str	r3, [sp, #32]
 8013a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a8e:	0006      	movs	r6, r0
 8013a90:	3330      	adds	r3, #48	; 0x30
 8013a92:	7013      	strb	r3, [r2, #0]
 8013a94:	0022      	movs	r2, r4
 8013a96:	002b      	movs	r3, r5
 8013a98:	000f      	movs	r7, r1
 8013a9a:	f7ec fcdd 	bl	8000458 <__aeabi_dcmplt>
 8013a9e:	2800      	cmp	r0, #0
 8013aa0:	d174      	bne.n	8013b8c <_dtoa_r+0x66c>
 8013aa2:	0032      	movs	r2, r6
 8013aa4:	003b      	movs	r3, r7
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	4968      	ldr	r1, [pc, #416]	; (8013c4c <_dtoa_r+0x72c>)
 8013aaa:	f7ee fed5 	bl	8002858 <__aeabi_dsub>
 8013aae:	0022      	movs	r2, r4
 8013ab0:	002b      	movs	r3, r5
 8013ab2:	f7ec fcd1 	bl	8000458 <__aeabi_dcmplt>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d000      	beq.n	8013abc <_dtoa_r+0x59c>
 8013aba:	e0d7      	b.n	8013c6c <_dtoa_r+0x74c>
 8013abc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013abe:	9a08      	ldr	r2, [sp, #32]
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	d100      	bne.n	8013ac6 <_dtoa_r+0x5a6>
 8013ac4:	e771      	b.n	80139aa <_dtoa_r+0x48a>
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	0020      	movs	r0, r4
 8013aca:	0029      	movs	r1, r5
 8013acc:	4b60      	ldr	r3, [pc, #384]	; (8013c50 <_dtoa_r+0x730>)
 8013ace:	f7ee fc01 	bl	80022d4 <__aeabi_dmul>
 8013ad2:	4b5f      	ldr	r3, [pc, #380]	; (8013c50 <_dtoa_r+0x730>)
 8013ad4:	0004      	movs	r4, r0
 8013ad6:	000d      	movs	r5, r1
 8013ad8:	0030      	movs	r0, r6
 8013ada:	0039      	movs	r1, r7
 8013adc:	2200      	movs	r2, #0
 8013ade:	f7ee fbf9 	bl	80022d4 <__aeabi_dmul>
 8013ae2:	9b08      	ldr	r3, [sp, #32]
 8013ae4:	0006      	movs	r6, r0
 8013ae6:	000f      	movs	r7, r1
 8013ae8:	9314      	str	r3, [sp, #80]	; 0x50
 8013aea:	e7be      	b.n	8013a6a <_dtoa_r+0x54a>
 8013aec:	0020      	movs	r0, r4
 8013aee:	0029      	movs	r1, r5
 8013af0:	f7ee fbf0 	bl	80022d4 <__aeabi_dmul>
 8013af4:	9a06      	ldr	r2, [sp, #24]
 8013af6:	9b06      	ldr	r3, [sp, #24]
 8013af8:	4694      	mov	ip, r2
 8013afa:	9308      	str	r3, [sp, #32]
 8013afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013afe:	9014      	str	r0, [sp, #80]	; 0x50
 8013b00:	9115      	str	r1, [sp, #84]	; 0x54
 8013b02:	4463      	add	r3, ip
 8013b04:	9319      	str	r3, [sp, #100]	; 0x64
 8013b06:	0030      	movs	r0, r6
 8013b08:	0039      	movs	r1, r7
 8013b0a:	f7ef fa45 	bl	8002f98 <__aeabi_d2iz>
 8013b0e:	9018      	str	r0, [sp, #96]	; 0x60
 8013b10:	f7ef fa78 	bl	8003004 <__aeabi_i2d>
 8013b14:	0002      	movs	r2, r0
 8013b16:	000b      	movs	r3, r1
 8013b18:	0030      	movs	r0, r6
 8013b1a:	0039      	movs	r1, r7
 8013b1c:	f7ee fe9c 	bl	8002858 <__aeabi_dsub>
 8013b20:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8013b22:	9b08      	ldr	r3, [sp, #32]
 8013b24:	3630      	adds	r6, #48	; 0x30
 8013b26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013b28:	701e      	strb	r6, [r3, #0]
 8013b2a:	3301      	adds	r3, #1
 8013b2c:	0004      	movs	r4, r0
 8013b2e:	000d      	movs	r5, r1
 8013b30:	9308      	str	r3, [sp, #32]
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d12d      	bne.n	8013b92 <_dtoa_r+0x672>
 8013b36:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013b38:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013b3a:	9a06      	ldr	r2, [sp, #24]
 8013b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b3e:	4694      	mov	ip, r2
 8013b40:	4463      	add	r3, ip
 8013b42:	2200      	movs	r2, #0
 8013b44:	9308      	str	r3, [sp, #32]
 8013b46:	4b47      	ldr	r3, [pc, #284]	; (8013c64 <_dtoa_r+0x744>)
 8013b48:	f7ed fc6a 	bl	8001420 <__aeabi_dadd>
 8013b4c:	0002      	movs	r2, r0
 8013b4e:	000b      	movs	r3, r1
 8013b50:	0020      	movs	r0, r4
 8013b52:	0029      	movs	r1, r5
 8013b54:	f7ec fc94 	bl	8000480 <__aeabi_dcmpgt>
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	d000      	beq.n	8013b5e <_dtoa_r+0x63e>
 8013b5c:	e086      	b.n	8013c6c <_dtoa_r+0x74c>
 8013b5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013b60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b62:	2000      	movs	r0, #0
 8013b64:	493f      	ldr	r1, [pc, #252]	; (8013c64 <_dtoa_r+0x744>)
 8013b66:	f7ee fe77 	bl	8002858 <__aeabi_dsub>
 8013b6a:	0002      	movs	r2, r0
 8013b6c:	000b      	movs	r3, r1
 8013b6e:	0020      	movs	r0, r4
 8013b70:	0029      	movs	r1, r5
 8013b72:	f7ec fc71 	bl	8000458 <__aeabi_dcmplt>
 8013b76:	2800      	cmp	r0, #0
 8013b78:	d100      	bne.n	8013b7c <_dtoa_r+0x65c>
 8013b7a:	e716      	b.n	80139aa <_dtoa_r+0x48a>
 8013b7c:	9b08      	ldr	r3, [sp, #32]
 8013b7e:	001a      	movs	r2, r3
 8013b80:	3a01      	subs	r2, #1
 8013b82:	9208      	str	r2, [sp, #32]
 8013b84:	7812      	ldrb	r2, [r2, #0]
 8013b86:	2a30      	cmp	r2, #48	; 0x30
 8013b88:	d0f8      	beq.n	8013b7c <_dtoa_r+0x65c>
 8013b8a:	9308      	str	r3, [sp, #32]
 8013b8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b8e:	9303      	str	r3, [sp, #12]
 8013b90:	e046      	b.n	8013c20 <_dtoa_r+0x700>
 8013b92:	2200      	movs	r2, #0
 8013b94:	4b2e      	ldr	r3, [pc, #184]	; (8013c50 <_dtoa_r+0x730>)
 8013b96:	f7ee fb9d 	bl	80022d4 <__aeabi_dmul>
 8013b9a:	0006      	movs	r6, r0
 8013b9c:	000f      	movs	r7, r1
 8013b9e:	e7b2      	b.n	8013b06 <_dtoa_r+0x5e6>
 8013ba0:	9b06      	ldr	r3, [sp, #24]
 8013ba2:	9a06      	ldr	r2, [sp, #24]
 8013ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8013ba6:	9b07      	ldr	r3, [sp, #28]
 8013ba8:	9c08      	ldr	r4, [sp, #32]
 8013baa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013bac:	3b01      	subs	r3, #1
 8013bae:	189b      	adds	r3, r3, r2
 8013bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013bb2:	0032      	movs	r2, r6
 8013bb4:	003b      	movs	r3, r7
 8013bb6:	0020      	movs	r0, r4
 8013bb8:	0029      	movs	r1, r5
 8013bba:	f7ed ff91 	bl	8001ae0 <__aeabi_ddiv>
 8013bbe:	f7ef f9eb 	bl	8002f98 <__aeabi_d2iz>
 8013bc2:	9007      	str	r0, [sp, #28]
 8013bc4:	f7ef fa1e 	bl	8003004 <__aeabi_i2d>
 8013bc8:	0032      	movs	r2, r6
 8013bca:	003b      	movs	r3, r7
 8013bcc:	f7ee fb82 	bl	80022d4 <__aeabi_dmul>
 8013bd0:	0002      	movs	r2, r0
 8013bd2:	000b      	movs	r3, r1
 8013bd4:	0020      	movs	r0, r4
 8013bd6:	0029      	movs	r1, r5
 8013bd8:	f7ee fe3e 	bl	8002858 <__aeabi_dsub>
 8013bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bde:	001a      	movs	r2, r3
 8013be0:	3201      	adds	r2, #1
 8013be2:	920a      	str	r2, [sp, #40]	; 0x28
 8013be4:	9208      	str	r2, [sp, #32]
 8013be6:	9a07      	ldr	r2, [sp, #28]
 8013be8:	3230      	adds	r2, #48	; 0x30
 8013bea:	701a      	strb	r2, [r3, #0]
 8013bec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d14f      	bne.n	8013c92 <_dtoa_r+0x772>
 8013bf2:	0002      	movs	r2, r0
 8013bf4:	000b      	movs	r3, r1
 8013bf6:	f7ed fc13 	bl	8001420 <__aeabi_dadd>
 8013bfa:	0032      	movs	r2, r6
 8013bfc:	003b      	movs	r3, r7
 8013bfe:	0004      	movs	r4, r0
 8013c00:	000d      	movs	r5, r1
 8013c02:	f7ec fc3d 	bl	8000480 <__aeabi_dcmpgt>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d12e      	bne.n	8013c68 <_dtoa_r+0x748>
 8013c0a:	0032      	movs	r2, r6
 8013c0c:	003b      	movs	r3, r7
 8013c0e:	0020      	movs	r0, r4
 8013c10:	0029      	movs	r1, r5
 8013c12:	f7ec fc1b 	bl	800044c <__aeabi_dcmpeq>
 8013c16:	2800      	cmp	r0, #0
 8013c18:	d002      	beq.n	8013c20 <_dtoa_r+0x700>
 8013c1a:	9b07      	ldr	r3, [sp, #28]
 8013c1c:	07de      	lsls	r6, r3, #31
 8013c1e:	d423      	bmi.n	8013c68 <_dtoa_r+0x748>
 8013c20:	9905      	ldr	r1, [sp, #20]
 8013c22:	9804      	ldr	r0, [sp, #16]
 8013c24:	f000 fe86 	bl	8014934 <_Bfree>
 8013c28:	2300      	movs	r3, #0
 8013c2a:	9a08      	ldr	r2, [sp, #32]
 8013c2c:	7013      	strb	r3, [r2, #0]
 8013c2e:	9b03      	ldr	r3, [sp, #12]
 8013c30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013c32:	3301      	adds	r3, #1
 8013c34:	6013      	str	r3, [r2, #0]
 8013c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d100      	bne.n	8013c3e <_dtoa_r+0x71e>
 8013c3c:	e4ba      	b.n	80135b4 <_dtoa_r+0x94>
 8013c3e:	9a08      	ldr	r2, [sp, #32]
 8013c40:	601a      	str	r2, [r3, #0]
 8013c42:	e4b7      	b.n	80135b4 <_dtoa_r+0x94>
 8013c44:	080188f0 	.word	0x080188f0
 8013c48:	080188c8 	.word	0x080188c8
 8013c4c:	3ff00000 	.word	0x3ff00000
 8013c50:	40240000 	.word	0x40240000
 8013c54:	401c0000 	.word	0x401c0000
 8013c58:	fcc00000 	.word	0xfcc00000
 8013c5c:	40140000 	.word	0x40140000
 8013c60:	7cc00000 	.word	0x7cc00000
 8013c64:	3fe00000 	.word	0x3fe00000
 8013c68:	9b03      	ldr	r3, [sp, #12]
 8013c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8013c6c:	9b08      	ldr	r3, [sp, #32]
 8013c6e:	9308      	str	r3, [sp, #32]
 8013c70:	3b01      	subs	r3, #1
 8013c72:	781a      	ldrb	r2, [r3, #0]
 8013c74:	2a39      	cmp	r2, #57	; 0x39
 8013c76:	d108      	bne.n	8013c8a <_dtoa_r+0x76a>
 8013c78:	9a06      	ldr	r2, [sp, #24]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d1f7      	bne.n	8013c6e <_dtoa_r+0x74e>
 8013c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c80:	9906      	ldr	r1, [sp, #24]
 8013c82:	3201      	adds	r2, #1
 8013c84:	920e      	str	r2, [sp, #56]	; 0x38
 8013c86:	2230      	movs	r2, #48	; 0x30
 8013c88:	700a      	strb	r2, [r1, #0]
 8013c8a:	781a      	ldrb	r2, [r3, #0]
 8013c8c:	3201      	adds	r2, #1
 8013c8e:	701a      	strb	r2, [r3, #0]
 8013c90:	e77c      	b.n	8013b8c <_dtoa_r+0x66c>
 8013c92:	2200      	movs	r2, #0
 8013c94:	4ba9      	ldr	r3, [pc, #676]	; (8013f3c <_dtoa_r+0xa1c>)
 8013c96:	f7ee fb1d 	bl	80022d4 <__aeabi_dmul>
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	0004      	movs	r4, r0
 8013ca0:	000d      	movs	r5, r1
 8013ca2:	f7ec fbd3 	bl	800044c <__aeabi_dcmpeq>
 8013ca6:	2800      	cmp	r0, #0
 8013ca8:	d100      	bne.n	8013cac <_dtoa_r+0x78c>
 8013caa:	e782      	b.n	8013bb2 <_dtoa_r+0x692>
 8013cac:	e7b8      	b.n	8013c20 <_dtoa_r+0x700>
 8013cae:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013cb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013cb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013cb4:	2f00      	cmp	r7, #0
 8013cb6:	d012      	beq.n	8013cde <_dtoa_r+0x7be>
 8013cb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013cba:	2a01      	cmp	r2, #1
 8013cbc:	dc6e      	bgt.n	8013d9c <_dtoa_r+0x87c>
 8013cbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013cc0:	2a00      	cmp	r2, #0
 8013cc2:	d065      	beq.n	8013d90 <_dtoa_r+0x870>
 8013cc4:	4a9e      	ldr	r2, [pc, #632]	; (8013f40 <_dtoa_r+0xa20>)
 8013cc6:	189b      	adds	r3, r3, r2
 8013cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cca:	2101      	movs	r1, #1
 8013ccc:	18d2      	adds	r2, r2, r3
 8013cce:	920a      	str	r2, [sp, #40]	; 0x28
 8013cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cd2:	9804      	ldr	r0, [sp, #16]
 8013cd4:	18d3      	adds	r3, r2, r3
 8013cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8013cd8:	f000 ff28 	bl	8014b2c <__i2b>
 8013cdc:	0007      	movs	r7, r0
 8013cde:	2c00      	cmp	r4, #0
 8013ce0:	d00e      	beq.n	8013d00 <_dtoa_r+0x7e0>
 8013ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	dd0b      	ble.n	8013d00 <_dtoa_r+0x7e0>
 8013ce8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cea:	0023      	movs	r3, r4
 8013cec:	4294      	cmp	r4, r2
 8013cee:	dd00      	ble.n	8013cf2 <_dtoa_r+0x7d2>
 8013cf0:	0013      	movs	r3, r2
 8013cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cf4:	1ae4      	subs	r4, r4, r3
 8013cf6:	1ad2      	subs	r2, r2, r3
 8013cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8013cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cfc:	1ad3      	subs	r3, r2, r3
 8013cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8013d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d01e      	beq.n	8013d44 <_dtoa_r+0x824>
 8013d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d05c      	beq.n	8013dc6 <_dtoa_r+0x8a6>
 8013d0c:	2d00      	cmp	r5, #0
 8013d0e:	dd10      	ble.n	8013d32 <_dtoa_r+0x812>
 8013d10:	0039      	movs	r1, r7
 8013d12:	002a      	movs	r2, r5
 8013d14:	9804      	ldr	r0, [sp, #16]
 8013d16:	f000 ffd1 	bl	8014cbc <__pow5mult>
 8013d1a:	9a05      	ldr	r2, [sp, #20]
 8013d1c:	0001      	movs	r1, r0
 8013d1e:	0007      	movs	r7, r0
 8013d20:	9804      	ldr	r0, [sp, #16]
 8013d22:	f000 ff1b 	bl	8014b5c <__multiply>
 8013d26:	0006      	movs	r6, r0
 8013d28:	9905      	ldr	r1, [sp, #20]
 8013d2a:	9804      	ldr	r0, [sp, #16]
 8013d2c:	f000 fe02 	bl	8014934 <_Bfree>
 8013d30:	9605      	str	r6, [sp, #20]
 8013d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d34:	1b5a      	subs	r2, r3, r5
 8013d36:	42ab      	cmp	r3, r5
 8013d38:	d004      	beq.n	8013d44 <_dtoa_r+0x824>
 8013d3a:	9905      	ldr	r1, [sp, #20]
 8013d3c:	9804      	ldr	r0, [sp, #16]
 8013d3e:	f000 ffbd 	bl	8014cbc <__pow5mult>
 8013d42:	9005      	str	r0, [sp, #20]
 8013d44:	2101      	movs	r1, #1
 8013d46:	9804      	ldr	r0, [sp, #16]
 8013d48:	f000 fef0 	bl	8014b2c <__i2b>
 8013d4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d4e:	0006      	movs	r6, r0
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	dd3a      	ble.n	8013dca <_dtoa_r+0x8aa>
 8013d54:	001a      	movs	r2, r3
 8013d56:	0001      	movs	r1, r0
 8013d58:	9804      	ldr	r0, [sp, #16]
 8013d5a:	f000 ffaf 	bl	8014cbc <__pow5mult>
 8013d5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d60:	0006      	movs	r6, r0
 8013d62:	2500      	movs	r5, #0
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	dc38      	bgt.n	8013dda <_dtoa_r+0x8ba>
 8013d68:	2500      	movs	r5, #0
 8013d6a:	9b08      	ldr	r3, [sp, #32]
 8013d6c:	42ab      	cmp	r3, r5
 8013d6e:	d130      	bne.n	8013dd2 <_dtoa_r+0x8b2>
 8013d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d72:	031b      	lsls	r3, r3, #12
 8013d74:	42ab      	cmp	r3, r5
 8013d76:	d12c      	bne.n	8013dd2 <_dtoa_r+0x8b2>
 8013d78:	4b72      	ldr	r3, [pc, #456]	; (8013f44 <_dtoa_r+0xa24>)
 8013d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d7c:	4213      	tst	r3, r2
 8013d7e:	d028      	beq.n	8013dd2 <_dtoa_r+0x8b2>
 8013d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d82:	3501      	adds	r5, #1
 8013d84:	3301      	adds	r3, #1
 8013d86:	930a      	str	r3, [sp, #40]	; 0x28
 8013d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d8a:	3301      	adds	r3, #1
 8013d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8013d8e:	e020      	b.n	8013dd2 <_dtoa_r+0x8b2>
 8013d90:	2336      	movs	r3, #54	; 0x36
 8013d92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013d94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013d96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013d98:	1a9b      	subs	r3, r3, r2
 8013d9a:	e795      	b.n	8013cc8 <_dtoa_r+0x7a8>
 8013d9c:	9b07      	ldr	r3, [sp, #28]
 8013d9e:	1e5d      	subs	r5, r3, #1
 8013da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013da2:	42ab      	cmp	r3, r5
 8013da4:	db07      	blt.n	8013db6 <_dtoa_r+0x896>
 8013da6:	1b5d      	subs	r5, r3, r5
 8013da8:	9b07      	ldr	r3, [sp, #28]
 8013daa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	da8b      	bge.n	8013cc8 <_dtoa_r+0x7a8>
 8013db0:	1ae4      	subs	r4, r4, r3
 8013db2:	2300      	movs	r3, #0
 8013db4:	e788      	b.n	8013cc8 <_dtoa_r+0x7a8>
 8013db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013dba:	1aeb      	subs	r3, r5, r3
 8013dbc:	18d3      	adds	r3, r2, r3
 8013dbe:	950d      	str	r5, [sp, #52]	; 0x34
 8013dc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8013dc2:	2500      	movs	r5, #0
 8013dc4:	e7f0      	b.n	8013da8 <_dtoa_r+0x888>
 8013dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013dc8:	e7b7      	b.n	8013d3a <_dtoa_r+0x81a>
 8013dca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013dcc:	2500      	movs	r5, #0
 8013dce:	2b01      	cmp	r3, #1
 8013dd0:	ddca      	ble.n	8013d68 <_dtoa_r+0x848>
 8013dd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013dd4:	2001      	movs	r0, #1
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d008      	beq.n	8013dec <_dtoa_r+0x8cc>
 8013dda:	6933      	ldr	r3, [r6, #16]
 8013ddc:	3303      	adds	r3, #3
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	18f3      	adds	r3, r6, r3
 8013de2:	6858      	ldr	r0, [r3, #4]
 8013de4:	f000 fe5a 	bl	8014a9c <__hi0bits>
 8013de8:	2320      	movs	r3, #32
 8013dea:	1a18      	subs	r0, r3, r0
 8013dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dee:	1818      	adds	r0, r3, r0
 8013df0:	0002      	movs	r2, r0
 8013df2:	231f      	movs	r3, #31
 8013df4:	401a      	ands	r2, r3
 8013df6:	4218      	tst	r0, r3
 8013df8:	d047      	beq.n	8013e8a <_dtoa_r+0x96a>
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	1a9b      	subs	r3, r3, r2
 8013dfe:	2b04      	cmp	r3, #4
 8013e00:	dd3f      	ble.n	8013e82 <_dtoa_r+0x962>
 8013e02:	231c      	movs	r3, #28
 8013e04:	1a9b      	subs	r3, r3, r2
 8013e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e08:	18e4      	adds	r4, r4, r3
 8013e0a:	18d2      	adds	r2, r2, r3
 8013e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8013e0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e10:	18d3      	adds	r3, r2, r3
 8013e12:	930c      	str	r3, [sp, #48]	; 0x30
 8013e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	dd05      	ble.n	8013e26 <_dtoa_r+0x906>
 8013e1a:	001a      	movs	r2, r3
 8013e1c:	9905      	ldr	r1, [sp, #20]
 8013e1e:	9804      	ldr	r0, [sp, #16]
 8013e20:	f000 ffa8 	bl	8014d74 <__lshift>
 8013e24:	9005      	str	r0, [sp, #20]
 8013e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	dd05      	ble.n	8013e38 <_dtoa_r+0x918>
 8013e2c:	0031      	movs	r1, r6
 8013e2e:	001a      	movs	r2, r3
 8013e30:	9804      	ldr	r0, [sp, #16]
 8013e32:	f000 ff9f 	bl	8014d74 <__lshift>
 8013e36:	0006      	movs	r6, r0
 8013e38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d027      	beq.n	8013e8e <_dtoa_r+0x96e>
 8013e3e:	0031      	movs	r1, r6
 8013e40:	9805      	ldr	r0, [sp, #20]
 8013e42:	f001 f805 	bl	8014e50 <__mcmp>
 8013e46:	2800      	cmp	r0, #0
 8013e48:	da21      	bge.n	8013e8e <_dtoa_r+0x96e>
 8013e4a:	9b03      	ldr	r3, [sp, #12]
 8013e4c:	220a      	movs	r2, #10
 8013e4e:	3b01      	subs	r3, #1
 8013e50:	9303      	str	r3, [sp, #12]
 8013e52:	9905      	ldr	r1, [sp, #20]
 8013e54:	2300      	movs	r3, #0
 8013e56:	9804      	ldr	r0, [sp, #16]
 8013e58:	f000 fd90 	bl	801497c <__multadd>
 8013e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e5e:	9005      	str	r0, [sp, #20]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d100      	bne.n	8013e66 <_dtoa_r+0x946>
 8013e64:	e15d      	b.n	8014122 <_dtoa_r+0xc02>
 8013e66:	2300      	movs	r3, #0
 8013e68:	0039      	movs	r1, r7
 8013e6a:	220a      	movs	r2, #10
 8013e6c:	9804      	ldr	r0, [sp, #16]
 8013e6e:	f000 fd85 	bl	801497c <__multadd>
 8013e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e74:	0007      	movs	r7, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	dc49      	bgt.n	8013f0e <_dtoa_r+0x9ee>
 8013e7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013e7c:	2b02      	cmp	r3, #2
 8013e7e:	dc0e      	bgt.n	8013e9e <_dtoa_r+0x97e>
 8013e80:	e045      	b.n	8013f0e <_dtoa_r+0x9ee>
 8013e82:	2b04      	cmp	r3, #4
 8013e84:	d0c6      	beq.n	8013e14 <_dtoa_r+0x8f4>
 8013e86:	331c      	adds	r3, #28
 8013e88:	e7bd      	b.n	8013e06 <_dtoa_r+0x8e6>
 8013e8a:	0013      	movs	r3, r2
 8013e8c:	e7fb      	b.n	8013e86 <_dtoa_r+0x966>
 8013e8e:	9b07      	ldr	r3, [sp, #28]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	dc36      	bgt.n	8013f02 <_dtoa_r+0x9e2>
 8013e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013e96:	2b02      	cmp	r3, #2
 8013e98:	dd33      	ble.n	8013f02 <_dtoa_r+0x9e2>
 8013e9a:	9b07      	ldr	r3, [sp, #28]
 8013e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d10c      	bne.n	8013ebe <_dtoa_r+0x99e>
 8013ea4:	0031      	movs	r1, r6
 8013ea6:	2205      	movs	r2, #5
 8013ea8:	9804      	ldr	r0, [sp, #16]
 8013eaa:	f000 fd67 	bl	801497c <__multadd>
 8013eae:	0006      	movs	r6, r0
 8013eb0:	0001      	movs	r1, r0
 8013eb2:	9805      	ldr	r0, [sp, #20]
 8013eb4:	f000 ffcc 	bl	8014e50 <__mcmp>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	dd00      	ble.n	8013ebe <_dtoa_r+0x99e>
 8013ebc:	e59f      	b.n	80139fe <_dtoa_r+0x4de>
 8013ebe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ec0:	43db      	mvns	r3, r3
 8013ec2:	9303      	str	r3, [sp, #12]
 8013ec4:	9b06      	ldr	r3, [sp, #24]
 8013ec6:	9308      	str	r3, [sp, #32]
 8013ec8:	2500      	movs	r5, #0
 8013eca:	0031      	movs	r1, r6
 8013ecc:	9804      	ldr	r0, [sp, #16]
 8013ece:	f000 fd31 	bl	8014934 <_Bfree>
 8013ed2:	2f00      	cmp	r7, #0
 8013ed4:	d100      	bne.n	8013ed8 <_dtoa_r+0x9b8>
 8013ed6:	e6a3      	b.n	8013c20 <_dtoa_r+0x700>
 8013ed8:	2d00      	cmp	r5, #0
 8013eda:	d005      	beq.n	8013ee8 <_dtoa_r+0x9c8>
 8013edc:	42bd      	cmp	r5, r7
 8013ede:	d003      	beq.n	8013ee8 <_dtoa_r+0x9c8>
 8013ee0:	0029      	movs	r1, r5
 8013ee2:	9804      	ldr	r0, [sp, #16]
 8013ee4:	f000 fd26 	bl	8014934 <_Bfree>
 8013ee8:	0039      	movs	r1, r7
 8013eea:	9804      	ldr	r0, [sp, #16]
 8013eec:	f000 fd22 	bl	8014934 <_Bfree>
 8013ef0:	e696      	b.n	8013c20 <_dtoa_r+0x700>
 8013ef2:	2600      	movs	r6, #0
 8013ef4:	0037      	movs	r7, r6
 8013ef6:	e7e2      	b.n	8013ebe <_dtoa_r+0x99e>
 8013ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013efa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013efc:	9303      	str	r3, [sp, #12]
 8013efe:	0037      	movs	r7, r6
 8013f00:	e57d      	b.n	80139fe <_dtoa_r+0x4de>
 8013f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d100      	bne.n	8013f0a <_dtoa_r+0x9ea>
 8013f08:	e0c3      	b.n	8014092 <_dtoa_r+0xb72>
 8013f0a:	9b07      	ldr	r3, [sp, #28]
 8013f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f0e:	2c00      	cmp	r4, #0
 8013f10:	dd05      	ble.n	8013f1e <_dtoa_r+0x9fe>
 8013f12:	0039      	movs	r1, r7
 8013f14:	0022      	movs	r2, r4
 8013f16:	9804      	ldr	r0, [sp, #16]
 8013f18:	f000 ff2c 	bl	8014d74 <__lshift>
 8013f1c:	0007      	movs	r7, r0
 8013f1e:	0038      	movs	r0, r7
 8013f20:	2d00      	cmp	r5, #0
 8013f22:	d024      	beq.n	8013f6e <_dtoa_r+0xa4e>
 8013f24:	6879      	ldr	r1, [r7, #4]
 8013f26:	9804      	ldr	r0, [sp, #16]
 8013f28:	f000 fcc0 	bl	80148ac <_Balloc>
 8013f2c:	1e04      	subs	r4, r0, #0
 8013f2e:	d111      	bne.n	8013f54 <_dtoa_r+0xa34>
 8013f30:	0022      	movs	r2, r4
 8013f32:	4b05      	ldr	r3, [pc, #20]	; (8013f48 <_dtoa_r+0xa28>)
 8013f34:	4805      	ldr	r0, [pc, #20]	; (8013f4c <_dtoa_r+0xa2c>)
 8013f36:	4906      	ldr	r1, [pc, #24]	; (8013f50 <_dtoa_r+0xa30>)
 8013f38:	f7ff fb07 	bl	801354a <_dtoa_r+0x2a>
 8013f3c:	40240000 	.word	0x40240000
 8013f40:	00000433 	.word	0x00000433
 8013f44:	7ff00000 	.word	0x7ff00000
 8013f48:	080187fc 	.word	0x080187fc
 8013f4c:	080187a4 	.word	0x080187a4
 8013f50:	000002ef 	.word	0x000002ef
 8013f54:	0039      	movs	r1, r7
 8013f56:	693a      	ldr	r2, [r7, #16]
 8013f58:	310c      	adds	r1, #12
 8013f5a:	3202      	adds	r2, #2
 8013f5c:	0092      	lsls	r2, r2, #2
 8013f5e:	300c      	adds	r0, #12
 8013f60:	f7ff fa1c 	bl	801339c <memcpy>
 8013f64:	2201      	movs	r2, #1
 8013f66:	0021      	movs	r1, r4
 8013f68:	9804      	ldr	r0, [sp, #16]
 8013f6a:	f000 ff03 	bl	8014d74 <__lshift>
 8013f6e:	9b06      	ldr	r3, [sp, #24]
 8013f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f72:	9307      	str	r3, [sp, #28]
 8013f74:	3b01      	subs	r3, #1
 8013f76:	189b      	adds	r3, r3, r2
 8013f78:	2201      	movs	r2, #1
 8013f7a:	003d      	movs	r5, r7
 8013f7c:	0007      	movs	r7, r0
 8013f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8013f80:	9b08      	ldr	r3, [sp, #32]
 8013f82:	4013      	ands	r3, r2
 8013f84:	930d      	str	r3, [sp, #52]	; 0x34
 8013f86:	0031      	movs	r1, r6
 8013f88:	9805      	ldr	r0, [sp, #20]
 8013f8a:	f7ff fa39 	bl	8013400 <quorem>
 8013f8e:	0029      	movs	r1, r5
 8013f90:	0004      	movs	r4, r0
 8013f92:	900b      	str	r0, [sp, #44]	; 0x2c
 8013f94:	9805      	ldr	r0, [sp, #20]
 8013f96:	f000 ff5b 	bl	8014e50 <__mcmp>
 8013f9a:	003a      	movs	r2, r7
 8013f9c:	900c      	str	r0, [sp, #48]	; 0x30
 8013f9e:	0031      	movs	r1, r6
 8013fa0:	9804      	ldr	r0, [sp, #16]
 8013fa2:	f000 ff71 	bl	8014e88 <__mdiff>
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	68c3      	ldr	r3, [r0, #12]
 8013faa:	3430      	adds	r4, #48	; 0x30
 8013fac:	9008      	str	r0, [sp, #32]
 8013fae:	920a      	str	r2, [sp, #40]	; 0x28
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d104      	bne.n	8013fbe <_dtoa_r+0xa9e>
 8013fb4:	0001      	movs	r1, r0
 8013fb6:	9805      	ldr	r0, [sp, #20]
 8013fb8:	f000 ff4a 	bl	8014e50 <__mcmp>
 8013fbc:	900a      	str	r0, [sp, #40]	; 0x28
 8013fbe:	9908      	ldr	r1, [sp, #32]
 8013fc0:	9804      	ldr	r0, [sp, #16]
 8013fc2:	f000 fcb7 	bl	8014934 <_Bfree>
 8013fc6:	9b07      	ldr	r3, [sp, #28]
 8013fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013fca:	3301      	adds	r3, #1
 8013fcc:	9308      	str	r3, [sp, #32]
 8013fce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013fd0:	4313      	orrs	r3, r2
 8013fd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fd4:	4313      	orrs	r3, r2
 8013fd6:	d109      	bne.n	8013fec <_dtoa_r+0xacc>
 8013fd8:	2c39      	cmp	r4, #57	; 0x39
 8013fda:	d022      	beq.n	8014022 <_dtoa_r+0xb02>
 8013fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	dd01      	ble.n	8013fe6 <_dtoa_r+0xac6>
 8013fe2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013fe4:	3431      	adds	r4, #49	; 0x31
 8013fe6:	9b07      	ldr	r3, [sp, #28]
 8013fe8:	701c      	strb	r4, [r3, #0]
 8013fea:	e76e      	b.n	8013eca <_dtoa_r+0x9aa>
 8013fec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	db04      	blt.n	8013ffc <_dtoa_r+0xadc>
 8013ff2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013ff4:	4313      	orrs	r3, r2
 8013ff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	d11e      	bne.n	801403a <_dtoa_r+0xb1a>
 8013ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	ddf1      	ble.n	8013fe6 <_dtoa_r+0xac6>
 8014002:	9905      	ldr	r1, [sp, #20]
 8014004:	2201      	movs	r2, #1
 8014006:	9804      	ldr	r0, [sp, #16]
 8014008:	f000 feb4 	bl	8014d74 <__lshift>
 801400c:	0031      	movs	r1, r6
 801400e:	9005      	str	r0, [sp, #20]
 8014010:	f000 ff1e 	bl	8014e50 <__mcmp>
 8014014:	2800      	cmp	r0, #0
 8014016:	dc02      	bgt.n	801401e <_dtoa_r+0xafe>
 8014018:	d1e5      	bne.n	8013fe6 <_dtoa_r+0xac6>
 801401a:	07e3      	lsls	r3, r4, #31
 801401c:	d5e3      	bpl.n	8013fe6 <_dtoa_r+0xac6>
 801401e:	2c39      	cmp	r4, #57	; 0x39
 8014020:	d1df      	bne.n	8013fe2 <_dtoa_r+0xac2>
 8014022:	2339      	movs	r3, #57	; 0x39
 8014024:	9a07      	ldr	r2, [sp, #28]
 8014026:	7013      	strb	r3, [r2, #0]
 8014028:	9b08      	ldr	r3, [sp, #32]
 801402a:	9308      	str	r3, [sp, #32]
 801402c:	3b01      	subs	r3, #1
 801402e:	781a      	ldrb	r2, [r3, #0]
 8014030:	2a39      	cmp	r2, #57	; 0x39
 8014032:	d063      	beq.n	80140fc <_dtoa_r+0xbdc>
 8014034:	3201      	adds	r2, #1
 8014036:	701a      	strb	r2, [r3, #0]
 8014038:	e747      	b.n	8013eca <_dtoa_r+0x9aa>
 801403a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801403c:	2b00      	cmp	r3, #0
 801403e:	dd03      	ble.n	8014048 <_dtoa_r+0xb28>
 8014040:	2c39      	cmp	r4, #57	; 0x39
 8014042:	d0ee      	beq.n	8014022 <_dtoa_r+0xb02>
 8014044:	3401      	adds	r4, #1
 8014046:	e7ce      	b.n	8013fe6 <_dtoa_r+0xac6>
 8014048:	9b07      	ldr	r3, [sp, #28]
 801404a:	9a07      	ldr	r2, [sp, #28]
 801404c:	701c      	strb	r4, [r3, #0]
 801404e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014050:	4293      	cmp	r3, r2
 8014052:	d03e      	beq.n	80140d2 <_dtoa_r+0xbb2>
 8014054:	2300      	movs	r3, #0
 8014056:	220a      	movs	r2, #10
 8014058:	9905      	ldr	r1, [sp, #20]
 801405a:	9804      	ldr	r0, [sp, #16]
 801405c:	f000 fc8e 	bl	801497c <__multadd>
 8014060:	2300      	movs	r3, #0
 8014062:	9005      	str	r0, [sp, #20]
 8014064:	220a      	movs	r2, #10
 8014066:	0029      	movs	r1, r5
 8014068:	9804      	ldr	r0, [sp, #16]
 801406a:	42bd      	cmp	r5, r7
 801406c:	d106      	bne.n	801407c <_dtoa_r+0xb5c>
 801406e:	f000 fc85 	bl	801497c <__multadd>
 8014072:	0005      	movs	r5, r0
 8014074:	0007      	movs	r7, r0
 8014076:	9b08      	ldr	r3, [sp, #32]
 8014078:	9307      	str	r3, [sp, #28]
 801407a:	e784      	b.n	8013f86 <_dtoa_r+0xa66>
 801407c:	f000 fc7e 	bl	801497c <__multadd>
 8014080:	0039      	movs	r1, r7
 8014082:	0005      	movs	r5, r0
 8014084:	2300      	movs	r3, #0
 8014086:	220a      	movs	r2, #10
 8014088:	9804      	ldr	r0, [sp, #16]
 801408a:	f000 fc77 	bl	801497c <__multadd>
 801408e:	0007      	movs	r7, r0
 8014090:	e7f1      	b.n	8014076 <_dtoa_r+0xb56>
 8014092:	9b07      	ldr	r3, [sp, #28]
 8014094:	930b      	str	r3, [sp, #44]	; 0x2c
 8014096:	2500      	movs	r5, #0
 8014098:	0031      	movs	r1, r6
 801409a:	9805      	ldr	r0, [sp, #20]
 801409c:	f7ff f9b0 	bl	8013400 <quorem>
 80140a0:	9b06      	ldr	r3, [sp, #24]
 80140a2:	3030      	adds	r0, #48	; 0x30
 80140a4:	5558      	strb	r0, [r3, r5]
 80140a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140a8:	3501      	adds	r5, #1
 80140aa:	0004      	movs	r4, r0
 80140ac:	42ab      	cmp	r3, r5
 80140ae:	dd07      	ble.n	80140c0 <_dtoa_r+0xba0>
 80140b0:	2300      	movs	r3, #0
 80140b2:	220a      	movs	r2, #10
 80140b4:	9905      	ldr	r1, [sp, #20]
 80140b6:	9804      	ldr	r0, [sp, #16]
 80140b8:	f000 fc60 	bl	801497c <__multadd>
 80140bc:	9005      	str	r0, [sp, #20]
 80140be:	e7eb      	b.n	8014098 <_dtoa_r+0xb78>
 80140c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140c2:	2301      	movs	r3, #1
 80140c4:	2a00      	cmp	r2, #0
 80140c6:	dd00      	ble.n	80140ca <_dtoa_r+0xbaa>
 80140c8:	0013      	movs	r3, r2
 80140ca:	2500      	movs	r5, #0
 80140cc:	9a06      	ldr	r2, [sp, #24]
 80140ce:	18d3      	adds	r3, r2, r3
 80140d0:	9308      	str	r3, [sp, #32]
 80140d2:	9905      	ldr	r1, [sp, #20]
 80140d4:	2201      	movs	r2, #1
 80140d6:	9804      	ldr	r0, [sp, #16]
 80140d8:	f000 fe4c 	bl	8014d74 <__lshift>
 80140dc:	0031      	movs	r1, r6
 80140de:	9005      	str	r0, [sp, #20]
 80140e0:	f000 feb6 	bl	8014e50 <__mcmp>
 80140e4:	2800      	cmp	r0, #0
 80140e6:	dc9f      	bgt.n	8014028 <_dtoa_r+0xb08>
 80140e8:	d101      	bne.n	80140ee <_dtoa_r+0xbce>
 80140ea:	07e4      	lsls	r4, r4, #31
 80140ec:	d49c      	bmi.n	8014028 <_dtoa_r+0xb08>
 80140ee:	9b08      	ldr	r3, [sp, #32]
 80140f0:	9308      	str	r3, [sp, #32]
 80140f2:	3b01      	subs	r3, #1
 80140f4:	781a      	ldrb	r2, [r3, #0]
 80140f6:	2a30      	cmp	r2, #48	; 0x30
 80140f8:	d0fa      	beq.n	80140f0 <_dtoa_r+0xbd0>
 80140fa:	e6e6      	b.n	8013eca <_dtoa_r+0x9aa>
 80140fc:	9a06      	ldr	r2, [sp, #24]
 80140fe:	429a      	cmp	r2, r3
 8014100:	d193      	bne.n	801402a <_dtoa_r+0xb0a>
 8014102:	9b03      	ldr	r3, [sp, #12]
 8014104:	3301      	adds	r3, #1
 8014106:	9303      	str	r3, [sp, #12]
 8014108:	2331      	movs	r3, #49	; 0x31
 801410a:	7013      	strb	r3, [r2, #0]
 801410c:	e6dd      	b.n	8013eca <_dtoa_r+0x9aa>
 801410e:	4b09      	ldr	r3, [pc, #36]	; (8014134 <_dtoa_r+0xc14>)
 8014110:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014112:	9306      	str	r3, [sp, #24]
 8014114:	4b08      	ldr	r3, [pc, #32]	; (8014138 <_dtoa_r+0xc18>)
 8014116:	2a00      	cmp	r2, #0
 8014118:	d001      	beq.n	801411e <_dtoa_r+0xbfe>
 801411a:	f7ff fa49 	bl	80135b0 <_dtoa_r+0x90>
 801411e:	f7ff fa49 	bl	80135b4 <_dtoa_r+0x94>
 8014122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014124:	2b00      	cmp	r3, #0
 8014126:	dcb6      	bgt.n	8014096 <_dtoa_r+0xb76>
 8014128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801412a:	2b02      	cmp	r3, #2
 801412c:	dd00      	ble.n	8014130 <_dtoa_r+0xc10>
 801412e:	e6b6      	b.n	8013e9e <_dtoa_r+0x97e>
 8014130:	e7b1      	b.n	8014096 <_dtoa_r+0xb76>
 8014132:	46c0      	nop			; (mov r8, r8)
 8014134:	08018797 	.word	0x08018797
 8014138:	0801879f 	.word	0x0801879f

0801413c <_free_r>:
 801413c:	b570      	push	{r4, r5, r6, lr}
 801413e:	0005      	movs	r5, r0
 8014140:	2900      	cmp	r1, #0
 8014142:	d010      	beq.n	8014166 <_free_r+0x2a>
 8014144:	1f0c      	subs	r4, r1, #4
 8014146:	6823      	ldr	r3, [r4, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	da00      	bge.n	801414e <_free_r+0x12>
 801414c:	18e4      	adds	r4, r4, r3
 801414e:	0028      	movs	r0, r5
 8014150:	f7fd f894 	bl	801127c <__malloc_lock>
 8014154:	4a1d      	ldr	r2, [pc, #116]	; (80141cc <_free_r+0x90>)
 8014156:	6813      	ldr	r3, [r2, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d105      	bne.n	8014168 <_free_r+0x2c>
 801415c:	6063      	str	r3, [r4, #4]
 801415e:	6014      	str	r4, [r2, #0]
 8014160:	0028      	movs	r0, r5
 8014162:	f7fd f893 	bl	801128c <__malloc_unlock>
 8014166:	bd70      	pop	{r4, r5, r6, pc}
 8014168:	42a3      	cmp	r3, r4
 801416a:	d908      	bls.n	801417e <_free_r+0x42>
 801416c:	6820      	ldr	r0, [r4, #0]
 801416e:	1821      	adds	r1, r4, r0
 8014170:	428b      	cmp	r3, r1
 8014172:	d1f3      	bne.n	801415c <_free_r+0x20>
 8014174:	6819      	ldr	r1, [r3, #0]
 8014176:	685b      	ldr	r3, [r3, #4]
 8014178:	1809      	adds	r1, r1, r0
 801417a:	6021      	str	r1, [r4, #0]
 801417c:	e7ee      	b.n	801415c <_free_r+0x20>
 801417e:	001a      	movs	r2, r3
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d001      	beq.n	801418a <_free_r+0x4e>
 8014186:	42a3      	cmp	r3, r4
 8014188:	d9f9      	bls.n	801417e <_free_r+0x42>
 801418a:	6811      	ldr	r1, [r2, #0]
 801418c:	1850      	adds	r0, r2, r1
 801418e:	42a0      	cmp	r0, r4
 8014190:	d10b      	bne.n	80141aa <_free_r+0x6e>
 8014192:	6820      	ldr	r0, [r4, #0]
 8014194:	1809      	adds	r1, r1, r0
 8014196:	1850      	adds	r0, r2, r1
 8014198:	6011      	str	r1, [r2, #0]
 801419a:	4283      	cmp	r3, r0
 801419c:	d1e0      	bne.n	8014160 <_free_r+0x24>
 801419e:	6818      	ldr	r0, [r3, #0]
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	1841      	adds	r1, r0, r1
 80141a4:	6011      	str	r1, [r2, #0]
 80141a6:	6053      	str	r3, [r2, #4]
 80141a8:	e7da      	b.n	8014160 <_free_r+0x24>
 80141aa:	42a0      	cmp	r0, r4
 80141ac:	d902      	bls.n	80141b4 <_free_r+0x78>
 80141ae:	230c      	movs	r3, #12
 80141b0:	602b      	str	r3, [r5, #0]
 80141b2:	e7d5      	b.n	8014160 <_free_r+0x24>
 80141b4:	6820      	ldr	r0, [r4, #0]
 80141b6:	1821      	adds	r1, r4, r0
 80141b8:	428b      	cmp	r3, r1
 80141ba:	d103      	bne.n	80141c4 <_free_r+0x88>
 80141bc:	6819      	ldr	r1, [r3, #0]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	1809      	adds	r1, r1, r0
 80141c2:	6021      	str	r1, [r4, #0]
 80141c4:	6063      	str	r3, [r4, #4]
 80141c6:	6054      	str	r4, [r2, #4]
 80141c8:	e7ca      	b.n	8014160 <_free_r+0x24>
 80141ca:	46c0      	nop			; (mov r8, r8)
 80141cc:	2000594c 	.word	0x2000594c

080141d0 <rshift>:
 80141d0:	0002      	movs	r2, r0
 80141d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141d4:	6904      	ldr	r4, [r0, #16]
 80141d6:	114b      	asrs	r3, r1, #5
 80141d8:	b085      	sub	sp, #20
 80141da:	3214      	adds	r2, #20
 80141dc:	9302      	str	r3, [sp, #8]
 80141de:	114d      	asrs	r5, r1, #5
 80141e0:	0013      	movs	r3, r2
 80141e2:	42ac      	cmp	r4, r5
 80141e4:	dd32      	ble.n	801424c <rshift+0x7c>
 80141e6:	261f      	movs	r6, #31
 80141e8:	000f      	movs	r7, r1
 80141ea:	114b      	asrs	r3, r1, #5
 80141ec:	009b      	lsls	r3, r3, #2
 80141ee:	00a5      	lsls	r5, r4, #2
 80141f0:	18d3      	adds	r3, r2, r3
 80141f2:	4037      	ands	r7, r6
 80141f4:	1955      	adds	r5, r2, r5
 80141f6:	9300      	str	r3, [sp, #0]
 80141f8:	9701      	str	r7, [sp, #4]
 80141fa:	4231      	tst	r1, r6
 80141fc:	d10d      	bne.n	801421a <rshift+0x4a>
 80141fe:	0016      	movs	r6, r2
 8014200:	0019      	movs	r1, r3
 8014202:	428d      	cmp	r5, r1
 8014204:	d836      	bhi.n	8014274 <rshift+0xa4>
 8014206:	9900      	ldr	r1, [sp, #0]
 8014208:	2300      	movs	r3, #0
 801420a:	3903      	subs	r1, #3
 801420c:	428d      	cmp	r5, r1
 801420e:	d302      	bcc.n	8014216 <rshift+0x46>
 8014210:	9b02      	ldr	r3, [sp, #8]
 8014212:	1ae4      	subs	r4, r4, r3
 8014214:	00a3      	lsls	r3, r4, #2
 8014216:	18d3      	adds	r3, r2, r3
 8014218:	e018      	b.n	801424c <rshift+0x7c>
 801421a:	2120      	movs	r1, #32
 801421c:	9e01      	ldr	r6, [sp, #4]
 801421e:	9f01      	ldr	r7, [sp, #4]
 8014220:	1b89      	subs	r1, r1, r6
 8014222:	9e00      	ldr	r6, [sp, #0]
 8014224:	9103      	str	r1, [sp, #12]
 8014226:	ce02      	ldmia	r6!, {r1}
 8014228:	4694      	mov	ip, r2
 801422a:	40f9      	lsrs	r1, r7
 801422c:	42b5      	cmp	r5, r6
 801422e:	d816      	bhi.n	801425e <rshift+0x8e>
 8014230:	9e00      	ldr	r6, [sp, #0]
 8014232:	2300      	movs	r3, #0
 8014234:	3601      	adds	r6, #1
 8014236:	42b5      	cmp	r5, r6
 8014238:	d303      	bcc.n	8014242 <rshift+0x72>
 801423a:	9b02      	ldr	r3, [sp, #8]
 801423c:	1ae3      	subs	r3, r4, r3
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	3b04      	subs	r3, #4
 8014242:	18d3      	adds	r3, r2, r3
 8014244:	6019      	str	r1, [r3, #0]
 8014246:	2900      	cmp	r1, #0
 8014248:	d000      	beq.n	801424c <rshift+0x7c>
 801424a:	3304      	adds	r3, #4
 801424c:	1a99      	subs	r1, r3, r2
 801424e:	1089      	asrs	r1, r1, #2
 8014250:	6101      	str	r1, [r0, #16]
 8014252:	4293      	cmp	r3, r2
 8014254:	d101      	bne.n	801425a <rshift+0x8a>
 8014256:	2300      	movs	r3, #0
 8014258:	6143      	str	r3, [r0, #20]
 801425a:	b005      	add	sp, #20
 801425c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801425e:	6837      	ldr	r7, [r6, #0]
 8014260:	9b03      	ldr	r3, [sp, #12]
 8014262:	409f      	lsls	r7, r3
 8014264:	430f      	orrs	r7, r1
 8014266:	4661      	mov	r1, ip
 8014268:	c180      	stmia	r1!, {r7}
 801426a:	468c      	mov	ip, r1
 801426c:	9b01      	ldr	r3, [sp, #4]
 801426e:	ce02      	ldmia	r6!, {r1}
 8014270:	40d9      	lsrs	r1, r3
 8014272:	e7db      	b.n	801422c <rshift+0x5c>
 8014274:	c980      	ldmia	r1!, {r7}
 8014276:	c680      	stmia	r6!, {r7}
 8014278:	e7c3      	b.n	8014202 <rshift+0x32>

0801427a <__hexdig_fun>:
 801427a:	0002      	movs	r2, r0
 801427c:	3a30      	subs	r2, #48	; 0x30
 801427e:	0003      	movs	r3, r0
 8014280:	2a09      	cmp	r2, #9
 8014282:	d802      	bhi.n	801428a <__hexdig_fun+0x10>
 8014284:	3b20      	subs	r3, #32
 8014286:	b2d8      	uxtb	r0, r3
 8014288:	4770      	bx	lr
 801428a:	0002      	movs	r2, r0
 801428c:	3a61      	subs	r2, #97	; 0x61
 801428e:	2a05      	cmp	r2, #5
 8014290:	d801      	bhi.n	8014296 <__hexdig_fun+0x1c>
 8014292:	3b47      	subs	r3, #71	; 0x47
 8014294:	e7f7      	b.n	8014286 <__hexdig_fun+0xc>
 8014296:	001a      	movs	r2, r3
 8014298:	3a41      	subs	r2, #65	; 0x41
 801429a:	2000      	movs	r0, #0
 801429c:	2a05      	cmp	r2, #5
 801429e:	d8f3      	bhi.n	8014288 <__hexdig_fun+0xe>
 80142a0:	3b27      	subs	r3, #39	; 0x27
 80142a2:	e7f0      	b.n	8014286 <__hexdig_fun+0xc>

080142a4 <__gethex>:
 80142a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142a6:	b089      	sub	sp, #36	; 0x24
 80142a8:	9307      	str	r3, [sp, #28]
 80142aa:	2302      	movs	r3, #2
 80142ac:	9201      	str	r2, [sp, #4]
 80142ae:	680a      	ldr	r2, [r1, #0]
 80142b0:	425b      	negs	r3, r3
 80142b2:	9003      	str	r0, [sp, #12]
 80142b4:	9106      	str	r1, [sp, #24]
 80142b6:	1c96      	adds	r6, r2, #2
 80142b8:	1a9b      	subs	r3, r3, r2
 80142ba:	199a      	adds	r2, r3, r6
 80142bc:	9600      	str	r6, [sp, #0]
 80142be:	9205      	str	r2, [sp, #20]
 80142c0:	9a00      	ldr	r2, [sp, #0]
 80142c2:	3601      	adds	r6, #1
 80142c4:	7810      	ldrb	r0, [r2, #0]
 80142c6:	2830      	cmp	r0, #48	; 0x30
 80142c8:	d0f7      	beq.n	80142ba <__gethex+0x16>
 80142ca:	f7ff ffd6 	bl	801427a <__hexdig_fun>
 80142ce:	2300      	movs	r3, #0
 80142d0:	001d      	movs	r5, r3
 80142d2:	9302      	str	r3, [sp, #8]
 80142d4:	4298      	cmp	r0, r3
 80142d6:	d11d      	bne.n	8014314 <__gethex+0x70>
 80142d8:	2201      	movs	r2, #1
 80142da:	49a6      	ldr	r1, [pc, #664]	; (8014574 <__gethex+0x2d0>)
 80142dc:	9800      	ldr	r0, [sp, #0]
 80142de:	f7fe feb8 	bl	8013052 <strncmp>
 80142e2:	0007      	movs	r7, r0
 80142e4:	42a8      	cmp	r0, r5
 80142e6:	d169      	bne.n	80143bc <__gethex+0x118>
 80142e8:	9b00      	ldr	r3, [sp, #0]
 80142ea:	0034      	movs	r4, r6
 80142ec:	7858      	ldrb	r0, [r3, #1]
 80142ee:	f7ff ffc4 	bl	801427a <__hexdig_fun>
 80142f2:	2301      	movs	r3, #1
 80142f4:	9302      	str	r3, [sp, #8]
 80142f6:	42a8      	cmp	r0, r5
 80142f8:	d02f      	beq.n	801435a <__gethex+0xb6>
 80142fa:	9600      	str	r6, [sp, #0]
 80142fc:	9b00      	ldr	r3, [sp, #0]
 80142fe:	7818      	ldrb	r0, [r3, #0]
 8014300:	2830      	cmp	r0, #48	; 0x30
 8014302:	d009      	beq.n	8014318 <__gethex+0x74>
 8014304:	f7ff ffb9 	bl	801427a <__hexdig_fun>
 8014308:	4242      	negs	r2, r0
 801430a:	4142      	adcs	r2, r0
 801430c:	2301      	movs	r3, #1
 801430e:	0035      	movs	r5, r6
 8014310:	9202      	str	r2, [sp, #8]
 8014312:	9305      	str	r3, [sp, #20]
 8014314:	9c00      	ldr	r4, [sp, #0]
 8014316:	e004      	b.n	8014322 <__gethex+0x7e>
 8014318:	9b00      	ldr	r3, [sp, #0]
 801431a:	3301      	adds	r3, #1
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	e7ed      	b.n	80142fc <__gethex+0x58>
 8014320:	3401      	adds	r4, #1
 8014322:	7820      	ldrb	r0, [r4, #0]
 8014324:	f7ff ffa9 	bl	801427a <__hexdig_fun>
 8014328:	1e07      	subs	r7, r0, #0
 801432a:	d1f9      	bne.n	8014320 <__gethex+0x7c>
 801432c:	2201      	movs	r2, #1
 801432e:	0020      	movs	r0, r4
 8014330:	4990      	ldr	r1, [pc, #576]	; (8014574 <__gethex+0x2d0>)
 8014332:	f7fe fe8e 	bl	8013052 <strncmp>
 8014336:	2800      	cmp	r0, #0
 8014338:	d10d      	bne.n	8014356 <__gethex+0xb2>
 801433a:	2d00      	cmp	r5, #0
 801433c:	d106      	bne.n	801434c <__gethex+0xa8>
 801433e:	3401      	adds	r4, #1
 8014340:	0025      	movs	r5, r4
 8014342:	7820      	ldrb	r0, [r4, #0]
 8014344:	f7ff ff99 	bl	801427a <__hexdig_fun>
 8014348:	2800      	cmp	r0, #0
 801434a:	d102      	bne.n	8014352 <__gethex+0xae>
 801434c:	1b2d      	subs	r5, r5, r4
 801434e:	00af      	lsls	r7, r5, #2
 8014350:	e003      	b.n	801435a <__gethex+0xb6>
 8014352:	3401      	adds	r4, #1
 8014354:	e7f5      	b.n	8014342 <__gethex+0x9e>
 8014356:	2d00      	cmp	r5, #0
 8014358:	d1f8      	bne.n	801434c <__gethex+0xa8>
 801435a:	2220      	movs	r2, #32
 801435c:	7823      	ldrb	r3, [r4, #0]
 801435e:	0026      	movs	r6, r4
 8014360:	4393      	bics	r3, r2
 8014362:	2b50      	cmp	r3, #80	; 0x50
 8014364:	d11d      	bne.n	80143a2 <__gethex+0xfe>
 8014366:	7863      	ldrb	r3, [r4, #1]
 8014368:	2b2b      	cmp	r3, #43	; 0x2b
 801436a:	d02c      	beq.n	80143c6 <__gethex+0x122>
 801436c:	2b2d      	cmp	r3, #45	; 0x2d
 801436e:	d02e      	beq.n	80143ce <__gethex+0x12a>
 8014370:	2300      	movs	r3, #0
 8014372:	1c66      	adds	r6, r4, #1
 8014374:	9304      	str	r3, [sp, #16]
 8014376:	7830      	ldrb	r0, [r6, #0]
 8014378:	f7ff ff7f 	bl	801427a <__hexdig_fun>
 801437c:	1e43      	subs	r3, r0, #1
 801437e:	b2db      	uxtb	r3, r3
 8014380:	2b18      	cmp	r3, #24
 8014382:	d82b      	bhi.n	80143dc <__gethex+0x138>
 8014384:	3810      	subs	r0, #16
 8014386:	0005      	movs	r5, r0
 8014388:	7870      	ldrb	r0, [r6, #1]
 801438a:	f7ff ff76 	bl	801427a <__hexdig_fun>
 801438e:	1e43      	subs	r3, r0, #1
 8014390:	b2db      	uxtb	r3, r3
 8014392:	3601      	adds	r6, #1
 8014394:	2b18      	cmp	r3, #24
 8014396:	d91c      	bls.n	80143d2 <__gethex+0x12e>
 8014398:	9b04      	ldr	r3, [sp, #16]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d000      	beq.n	80143a0 <__gethex+0xfc>
 801439e:	426d      	negs	r5, r5
 80143a0:	197f      	adds	r7, r7, r5
 80143a2:	9b06      	ldr	r3, [sp, #24]
 80143a4:	601e      	str	r6, [r3, #0]
 80143a6:	9b02      	ldr	r3, [sp, #8]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d019      	beq.n	80143e0 <__gethex+0x13c>
 80143ac:	2600      	movs	r6, #0
 80143ae:	9b05      	ldr	r3, [sp, #20]
 80143b0:	42b3      	cmp	r3, r6
 80143b2:	d100      	bne.n	80143b6 <__gethex+0x112>
 80143b4:	3606      	adds	r6, #6
 80143b6:	0030      	movs	r0, r6
 80143b8:	b009      	add	sp, #36	; 0x24
 80143ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143bc:	2301      	movs	r3, #1
 80143be:	2700      	movs	r7, #0
 80143c0:	9c00      	ldr	r4, [sp, #0]
 80143c2:	9302      	str	r3, [sp, #8]
 80143c4:	e7c9      	b.n	801435a <__gethex+0xb6>
 80143c6:	2300      	movs	r3, #0
 80143c8:	9304      	str	r3, [sp, #16]
 80143ca:	1ca6      	adds	r6, r4, #2
 80143cc:	e7d3      	b.n	8014376 <__gethex+0xd2>
 80143ce:	2301      	movs	r3, #1
 80143d0:	e7fa      	b.n	80143c8 <__gethex+0x124>
 80143d2:	230a      	movs	r3, #10
 80143d4:	435d      	muls	r5, r3
 80143d6:	182d      	adds	r5, r5, r0
 80143d8:	3d10      	subs	r5, #16
 80143da:	e7d5      	b.n	8014388 <__gethex+0xe4>
 80143dc:	0026      	movs	r6, r4
 80143de:	e7e0      	b.n	80143a2 <__gethex+0xfe>
 80143e0:	9b00      	ldr	r3, [sp, #0]
 80143e2:	9902      	ldr	r1, [sp, #8]
 80143e4:	1ae3      	subs	r3, r4, r3
 80143e6:	3b01      	subs	r3, #1
 80143e8:	2b07      	cmp	r3, #7
 80143ea:	dc0a      	bgt.n	8014402 <__gethex+0x15e>
 80143ec:	9803      	ldr	r0, [sp, #12]
 80143ee:	f000 fa5d 	bl	80148ac <_Balloc>
 80143f2:	1e05      	subs	r5, r0, #0
 80143f4:	d108      	bne.n	8014408 <__gethex+0x164>
 80143f6:	002a      	movs	r2, r5
 80143f8:	21e4      	movs	r1, #228	; 0xe4
 80143fa:	4b5f      	ldr	r3, [pc, #380]	; (8014578 <__gethex+0x2d4>)
 80143fc:	485f      	ldr	r0, [pc, #380]	; (801457c <__gethex+0x2d8>)
 80143fe:	f7fe ffe1 	bl	80133c4 <__assert_func>
 8014402:	3101      	adds	r1, #1
 8014404:	105b      	asrs	r3, r3, #1
 8014406:	e7ef      	b.n	80143e8 <__gethex+0x144>
 8014408:	0003      	movs	r3, r0
 801440a:	3314      	adds	r3, #20
 801440c:	9302      	str	r3, [sp, #8]
 801440e:	9305      	str	r3, [sp, #20]
 8014410:	2300      	movs	r3, #0
 8014412:	001e      	movs	r6, r3
 8014414:	9304      	str	r3, [sp, #16]
 8014416:	9b00      	ldr	r3, [sp, #0]
 8014418:	42a3      	cmp	r3, r4
 801441a:	d33f      	bcc.n	801449c <__gethex+0x1f8>
 801441c:	9c05      	ldr	r4, [sp, #20]
 801441e:	9b02      	ldr	r3, [sp, #8]
 8014420:	c440      	stmia	r4!, {r6}
 8014422:	1ae4      	subs	r4, r4, r3
 8014424:	10a4      	asrs	r4, r4, #2
 8014426:	0030      	movs	r0, r6
 8014428:	612c      	str	r4, [r5, #16]
 801442a:	f000 fb37 	bl	8014a9c <__hi0bits>
 801442e:	9b01      	ldr	r3, [sp, #4]
 8014430:	0164      	lsls	r4, r4, #5
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	1a26      	subs	r6, r4, r0
 8014436:	9300      	str	r3, [sp, #0]
 8014438:	429e      	cmp	r6, r3
 801443a:	dd51      	ble.n	80144e0 <__gethex+0x23c>
 801443c:	1af6      	subs	r6, r6, r3
 801443e:	0031      	movs	r1, r6
 8014440:	0028      	movs	r0, r5
 8014442:	f000 fecb 	bl	80151dc <__any_on>
 8014446:	1e04      	subs	r4, r0, #0
 8014448:	d016      	beq.n	8014478 <__gethex+0x1d4>
 801444a:	2401      	movs	r4, #1
 801444c:	231f      	movs	r3, #31
 801444e:	0020      	movs	r0, r4
 8014450:	1e72      	subs	r2, r6, #1
 8014452:	4013      	ands	r3, r2
 8014454:	4098      	lsls	r0, r3
 8014456:	0003      	movs	r3, r0
 8014458:	1151      	asrs	r1, r2, #5
 801445a:	9802      	ldr	r0, [sp, #8]
 801445c:	0089      	lsls	r1, r1, #2
 801445e:	5809      	ldr	r1, [r1, r0]
 8014460:	4219      	tst	r1, r3
 8014462:	d009      	beq.n	8014478 <__gethex+0x1d4>
 8014464:	42a2      	cmp	r2, r4
 8014466:	dd06      	ble.n	8014476 <__gethex+0x1d2>
 8014468:	0028      	movs	r0, r5
 801446a:	1eb1      	subs	r1, r6, #2
 801446c:	f000 feb6 	bl	80151dc <__any_on>
 8014470:	3402      	adds	r4, #2
 8014472:	2800      	cmp	r0, #0
 8014474:	d100      	bne.n	8014478 <__gethex+0x1d4>
 8014476:	2402      	movs	r4, #2
 8014478:	0031      	movs	r1, r6
 801447a:	0028      	movs	r0, r5
 801447c:	f7ff fea8 	bl	80141d0 <rshift>
 8014480:	19bf      	adds	r7, r7, r6
 8014482:	9b01      	ldr	r3, [sp, #4]
 8014484:	689b      	ldr	r3, [r3, #8]
 8014486:	42bb      	cmp	r3, r7
 8014488:	da3a      	bge.n	8014500 <__gethex+0x25c>
 801448a:	0029      	movs	r1, r5
 801448c:	9803      	ldr	r0, [sp, #12]
 801448e:	f000 fa51 	bl	8014934 <_Bfree>
 8014492:	2300      	movs	r3, #0
 8014494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014496:	26a3      	movs	r6, #163	; 0xa3
 8014498:	6013      	str	r3, [r2, #0]
 801449a:	e78c      	b.n	80143b6 <__gethex+0x112>
 801449c:	3c01      	subs	r4, #1
 801449e:	7823      	ldrb	r3, [r4, #0]
 80144a0:	2b2e      	cmp	r3, #46	; 0x2e
 80144a2:	d012      	beq.n	80144ca <__gethex+0x226>
 80144a4:	9b04      	ldr	r3, [sp, #16]
 80144a6:	2b20      	cmp	r3, #32
 80144a8:	d104      	bne.n	80144b4 <__gethex+0x210>
 80144aa:	9b05      	ldr	r3, [sp, #20]
 80144ac:	c340      	stmia	r3!, {r6}
 80144ae:	2600      	movs	r6, #0
 80144b0:	9305      	str	r3, [sp, #20]
 80144b2:	9604      	str	r6, [sp, #16]
 80144b4:	7820      	ldrb	r0, [r4, #0]
 80144b6:	f7ff fee0 	bl	801427a <__hexdig_fun>
 80144ba:	230f      	movs	r3, #15
 80144bc:	4018      	ands	r0, r3
 80144be:	9b04      	ldr	r3, [sp, #16]
 80144c0:	4098      	lsls	r0, r3
 80144c2:	3304      	adds	r3, #4
 80144c4:	4306      	orrs	r6, r0
 80144c6:	9304      	str	r3, [sp, #16]
 80144c8:	e7a5      	b.n	8014416 <__gethex+0x172>
 80144ca:	9b00      	ldr	r3, [sp, #0]
 80144cc:	42a3      	cmp	r3, r4
 80144ce:	d8e9      	bhi.n	80144a4 <__gethex+0x200>
 80144d0:	2201      	movs	r2, #1
 80144d2:	0020      	movs	r0, r4
 80144d4:	4927      	ldr	r1, [pc, #156]	; (8014574 <__gethex+0x2d0>)
 80144d6:	f7fe fdbc 	bl	8013052 <strncmp>
 80144da:	2800      	cmp	r0, #0
 80144dc:	d1e2      	bne.n	80144a4 <__gethex+0x200>
 80144de:	e79a      	b.n	8014416 <__gethex+0x172>
 80144e0:	9b00      	ldr	r3, [sp, #0]
 80144e2:	2400      	movs	r4, #0
 80144e4:	429e      	cmp	r6, r3
 80144e6:	dacc      	bge.n	8014482 <__gethex+0x1de>
 80144e8:	1b9e      	subs	r6, r3, r6
 80144ea:	0029      	movs	r1, r5
 80144ec:	0032      	movs	r2, r6
 80144ee:	9803      	ldr	r0, [sp, #12]
 80144f0:	f000 fc40 	bl	8014d74 <__lshift>
 80144f4:	0003      	movs	r3, r0
 80144f6:	3314      	adds	r3, #20
 80144f8:	0005      	movs	r5, r0
 80144fa:	1bbf      	subs	r7, r7, r6
 80144fc:	9302      	str	r3, [sp, #8]
 80144fe:	e7c0      	b.n	8014482 <__gethex+0x1de>
 8014500:	9b01      	ldr	r3, [sp, #4]
 8014502:	685e      	ldr	r6, [r3, #4]
 8014504:	42be      	cmp	r6, r7
 8014506:	dd70      	ble.n	80145ea <__gethex+0x346>
 8014508:	9b00      	ldr	r3, [sp, #0]
 801450a:	1bf6      	subs	r6, r6, r7
 801450c:	42b3      	cmp	r3, r6
 801450e:	dc37      	bgt.n	8014580 <__gethex+0x2dc>
 8014510:	9b01      	ldr	r3, [sp, #4]
 8014512:	68db      	ldr	r3, [r3, #12]
 8014514:	2b02      	cmp	r3, #2
 8014516:	d024      	beq.n	8014562 <__gethex+0x2be>
 8014518:	2b03      	cmp	r3, #3
 801451a:	d026      	beq.n	801456a <__gethex+0x2c6>
 801451c:	2b01      	cmp	r3, #1
 801451e:	d117      	bne.n	8014550 <__gethex+0x2ac>
 8014520:	9b00      	ldr	r3, [sp, #0]
 8014522:	42b3      	cmp	r3, r6
 8014524:	d114      	bne.n	8014550 <__gethex+0x2ac>
 8014526:	2b01      	cmp	r3, #1
 8014528:	d10b      	bne.n	8014542 <__gethex+0x29e>
 801452a:	9b01      	ldr	r3, [sp, #4]
 801452c:	9a07      	ldr	r2, [sp, #28]
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	2662      	movs	r6, #98	; 0x62
 8014532:	6013      	str	r3, [r2, #0]
 8014534:	2301      	movs	r3, #1
 8014536:	9a02      	ldr	r2, [sp, #8]
 8014538:	612b      	str	r3, [r5, #16]
 801453a:	6013      	str	r3, [r2, #0]
 801453c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801453e:	601d      	str	r5, [r3, #0]
 8014540:	e739      	b.n	80143b6 <__gethex+0x112>
 8014542:	9900      	ldr	r1, [sp, #0]
 8014544:	0028      	movs	r0, r5
 8014546:	3901      	subs	r1, #1
 8014548:	f000 fe48 	bl	80151dc <__any_on>
 801454c:	2800      	cmp	r0, #0
 801454e:	d1ec      	bne.n	801452a <__gethex+0x286>
 8014550:	0029      	movs	r1, r5
 8014552:	9803      	ldr	r0, [sp, #12]
 8014554:	f000 f9ee 	bl	8014934 <_Bfree>
 8014558:	2300      	movs	r3, #0
 801455a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801455c:	2650      	movs	r6, #80	; 0x50
 801455e:	6013      	str	r3, [r2, #0]
 8014560:	e729      	b.n	80143b6 <__gethex+0x112>
 8014562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014564:	2b00      	cmp	r3, #0
 8014566:	d1f3      	bne.n	8014550 <__gethex+0x2ac>
 8014568:	e7df      	b.n	801452a <__gethex+0x286>
 801456a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801456c:	2b00      	cmp	r3, #0
 801456e:	d1dc      	bne.n	801452a <__gethex+0x286>
 8014570:	e7ee      	b.n	8014550 <__gethex+0x2ac>
 8014572:	46c0      	nop			; (mov r8, r8)
 8014574:	08018550 	.word	0x08018550
 8014578:	080187fc 	.word	0x080187fc
 801457c:	0801880d 	.word	0x0801880d
 8014580:	1e77      	subs	r7, r6, #1
 8014582:	2c00      	cmp	r4, #0
 8014584:	d12f      	bne.n	80145e6 <__gethex+0x342>
 8014586:	2f00      	cmp	r7, #0
 8014588:	d004      	beq.n	8014594 <__gethex+0x2f0>
 801458a:	0039      	movs	r1, r7
 801458c:	0028      	movs	r0, r5
 801458e:	f000 fe25 	bl	80151dc <__any_on>
 8014592:	0004      	movs	r4, r0
 8014594:	231f      	movs	r3, #31
 8014596:	117a      	asrs	r2, r7, #5
 8014598:	401f      	ands	r7, r3
 801459a:	3b1e      	subs	r3, #30
 801459c:	40bb      	lsls	r3, r7
 801459e:	9902      	ldr	r1, [sp, #8]
 80145a0:	0092      	lsls	r2, r2, #2
 80145a2:	5852      	ldr	r2, [r2, r1]
 80145a4:	421a      	tst	r2, r3
 80145a6:	d001      	beq.n	80145ac <__gethex+0x308>
 80145a8:	2302      	movs	r3, #2
 80145aa:	431c      	orrs	r4, r3
 80145ac:	9b00      	ldr	r3, [sp, #0]
 80145ae:	0031      	movs	r1, r6
 80145b0:	1b9b      	subs	r3, r3, r6
 80145b2:	2602      	movs	r6, #2
 80145b4:	0028      	movs	r0, r5
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	f7ff fe0a 	bl	80141d0 <rshift>
 80145bc:	9b01      	ldr	r3, [sp, #4]
 80145be:	685f      	ldr	r7, [r3, #4]
 80145c0:	2c00      	cmp	r4, #0
 80145c2:	d041      	beq.n	8014648 <__gethex+0x3a4>
 80145c4:	9b01      	ldr	r3, [sp, #4]
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	2b02      	cmp	r3, #2
 80145ca:	d010      	beq.n	80145ee <__gethex+0x34a>
 80145cc:	2b03      	cmp	r3, #3
 80145ce:	d012      	beq.n	80145f6 <__gethex+0x352>
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	d106      	bne.n	80145e2 <__gethex+0x33e>
 80145d4:	07a2      	lsls	r2, r4, #30
 80145d6:	d504      	bpl.n	80145e2 <__gethex+0x33e>
 80145d8:	9a02      	ldr	r2, [sp, #8]
 80145da:	6812      	ldr	r2, [r2, #0]
 80145dc:	4314      	orrs	r4, r2
 80145de:	421c      	tst	r4, r3
 80145e0:	d10c      	bne.n	80145fc <__gethex+0x358>
 80145e2:	2310      	movs	r3, #16
 80145e4:	e02f      	b.n	8014646 <__gethex+0x3a2>
 80145e6:	2401      	movs	r4, #1
 80145e8:	e7d4      	b.n	8014594 <__gethex+0x2f0>
 80145ea:	2601      	movs	r6, #1
 80145ec:	e7e8      	b.n	80145c0 <__gethex+0x31c>
 80145ee:	2301      	movs	r3, #1
 80145f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145f2:	1a9b      	subs	r3, r3, r2
 80145f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80145f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d0f2      	beq.n	80145e2 <__gethex+0x33e>
 80145fc:	692b      	ldr	r3, [r5, #16]
 80145fe:	2000      	movs	r0, #0
 8014600:	9302      	str	r3, [sp, #8]
 8014602:	009b      	lsls	r3, r3, #2
 8014604:	9304      	str	r3, [sp, #16]
 8014606:	002b      	movs	r3, r5
 8014608:	9a04      	ldr	r2, [sp, #16]
 801460a:	3314      	adds	r3, #20
 801460c:	1899      	adds	r1, r3, r2
 801460e:	681a      	ldr	r2, [r3, #0]
 8014610:	1c54      	adds	r4, r2, #1
 8014612:	d01e      	beq.n	8014652 <__gethex+0x3ae>
 8014614:	3201      	adds	r2, #1
 8014616:	601a      	str	r2, [r3, #0]
 8014618:	002b      	movs	r3, r5
 801461a:	3314      	adds	r3, #20
 801461c:	2e02      	cmp	r6, #2
 801461e:	d141      	bne.n	80146a4 <__gethex+0x400>
 8014620:	9a01      	ldr	r2, [sp, #4]
 8014622:	9900      	ldr	r1, [sp, #0]
 8014624:	6812      	ldr	r2, [r2, #0]
 8014626:	3a01      	subs	r2, #1
 8014628:	428a      	cmp	r2, r1
 801462a:	d10b      	bne.n	8014644 <__gethex+0x3a0>
 801462c:	221f      	movs	r2, #31
 801462e:	9800      	ldr	r0, [sp, #0]
 8014630:	1149      	asrs	r1, r1, #5
 8014632:	4002      	ands	r2, r0
 8014634:	2001      	movs	r0, #1
 8014636:	0004      	movs	r4, r0
 8014638:	4094      	lsls	r4, r2
 801463a:	0089      	lsls	r1, r1, #2
 801463c:	58cb      	ldr	r3, [r1, r3]
 801463e:	4223      	tst	r3, r4
 8014640:	d000      	beq.n	8014644 <__gethex+0x3a0>
 8014642:	2601      	movs	r6, #1
 8014644:	2320      	movs	r3, #32
 8014646:	431e      	orrs	r6, r3
 8014648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801464a:	601d      	str	r5, [r3, #0]
 801464c:	9b07      	ldr	r3, [sp, #28]
 801464e:	601f      	str	r7, [r3, #0]
 8014650:	e6b1      	b.n	80143b6 <__gethex+0x112>
 8014652:	c301      	stmia	r3!, {r0}
 8014654:	4299      	cmp	r1, r3
 8014656:	d8da      	bhi.n	801460e <__gethex+0x36a>
 8014658:	68ab      	ldr	r3, [r5, #8]
 801465a:	9a02      	ldr	r2, [sp, #8]
 801465c:	429a      	cmp	r2, r3
 801465e:	db18      	blt.n	8014692 <__gethex+0x3ee>
 8014660:	6869      	ldr	r1, [r5, #4]
 8014662:	9803      	ldr	r0, [sp, #12]
 8014664:	3101      	adds	r1, #1
 8014666:	f000 f921 	bl	80148ac <_Balloc>
 801466a:	1e04      	subs	r4, r0, #0
 801466c:	d104      	bne.n	8014678 <__gethex+0x3d4>
 801466e:	0022      	movs	r2, r4
 8014670:	2184      	movs	r1, #132	; 0x84
 8014672:	4b1c      	ldr	r3, [pc, #112]	; (80146e4 <__gethex+0x440>)
 8014674:	481c      	ldr	r0, [pc, #112]	; (80146e8 <__gethex+0x444>)
 8014676:	e6c2      	b.n	80143fe <__gethex+0x15a>
 8014678:	0029      	movs	r1, r5
 801467a:	692a      	ldr	r2, [r5, #16]
 801467c:	310c      	adds	r1, #12
 801467e:	3202      	adds	r2, #2
 8014680:	0092      	lsls	r2, r2, #2
 8014682:	300c      	adds	r0, #12
 8014684:	f7fe fe8a 	bl	801339c <memcpy>
 8014688:	0029      	movs	r1, r5
 801468a:	9803      	ldr	r0, [sp, #12]
 801468c:	f000 f952 	bl	8014934 <_Bfree>
 8014690:	0025      	movs	r5, r4
 8014692:	692b      	ldr	r3, [r5, #16]
 8014694:	1c5a      	adds	r2, r3, #1
 8014696:	612a      	str	r2, [r5, #16]
 8014698:	2201      	movs	r2, #1
 801469a:	3304      	adds	r3, #4
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	18eb      	adds	r3, r5, r3
 80146a0:	605a      	str	r2, [r3, #4]
 80146a2:	e7b9      	b.n	8014618 <__gethex+0x374>
 80146a4:	692a      	ldr	r2, [r5, #16]
 80146a6:	9902      	ldr	r1, [sp, #8]
 80146a8:	428a      	cmp	r2, r1
 80146aa:	dd09      	ble.n	80146c0 <__gethex+0x41c>
 80146ac:	2101      	movs	r1, #1
 80146ae:	0028      	movs	r0, r5
 80146b0:	f7ff fd8e 	bl	80141d0 <rshift>
 80146b4:	9b01      	ldr	r3, [sp, #4]
 80146b6:	3701      	adds	r7, #1
 80146b8:	689b      	ldr	r3, [r3, #8]
 80146ba:	42bb      	cmp	r3, r7
 80146bc:	dac1      	bge.n	8014642 <__gethex+0x39e>
 80146be:	e6e4      	b.n	801448a <__gethex+0x1e6>
 80146c0:	221f      	movs	r2, #31
 80146c2:	9c00      	ldr	r4, [sp, #0]
 80146c4:	9900      	ldr	r1, [sp, #0]
 80146c6:	2601      	movs	r6, #1
 80146c8:	4014      	ands	r4, r2
 80146ca:	4211      	tst	r1, r2
 80146cc:	d0ba      	beq.n	8014644 <__gethex+0x3a0>
 80146ce:	9a04      	ldr	r2, [sp, #16]
 80146d0:	189b      	adds	r3, r3, r2
 80146d2:	3b04      	subs	r3, #4
 80146d4:	6818      	ldr	r0, [r3, #0]
 80146d6:	f000 f9e1 	bl	8014a9c <__hi0bits>
 80146da:	2320      	movs	r3, #32
 80146dc:	1b1b      	subs	r3, r3, r4
 80146de:	4298      	cmp	r0, r3
 80146e0:	dbe4      	blt.n	80146ac <__gethex+0x408>
 80146e2:	e7af      	b.n	8014644 <__gethex+0x3a0>
 80146e4:	080187fc 	.word	0x080187fc
 80146e8:	0801880d 	.word	0x0801880d

080146ec <L_shift>:
 80146ec:	2308      	movs	r3, #8
 80146ee:	b570      	push	{r4, r5, r6, lr}
 80146f0:	2520      	movs	r5, #32
 80146f2:	1a9a      	subs	r2, r3, r2
 80146f4:	0092      	lsls	r2, r2, #2
 80146f6:	1aad      	subs	r5, r5, r2
 80146f8:	6843      	ldr	r3, [r0, #4]
 80146fa:	6804      	ldr	r4, [r0, #0]
 80146fc:	001e      	movs	r6, r3
 80146fe:	40ae      	lsls	r6, r5
 8014700:	40d3      	lsrs	r3, r2
 8014702:	4334      	orrs	r4, r6
 8014704:	6004      	str	r4, [r0, #0]
 8014706:	6043      	str	r3, [r0, #4]
 8014708:	3004      	adds	r0, #4
 801470a:	4288      	cmp	r0, r1
 801470c:	d3f4      	bcc.n	80146f8 <L_shift+0xc>
 801470e:	bd70      	pop	{r4, r5, r6, pc}

08014710 <__match>:
 8014710:	b530      	push	{r4, r5, lr}
 8014712:	6803      	ldr	r3, [r0, #0]
 8014714:	780c      	ldrb	r4, [r1, #0]
 8014716:	3301      	adds	r3, #1
 8014718:	2c00      	cmp	r4, #0
 801471a:	d102      	bne.n	8014722 <__match+0x12>
 801471c:	6003      	str	r3, [r0, #0]
 801471e:	2001      	movs	r0, #1
 8014720:	bd30      	pop	{r4, r5, pc}
 8014722:	781a      	ldrb	r2, [r3, #0]
 8014724:	0015      	movs	r5, r2
 8014726:	3d41      	subs	r5, #65	; 0x41
 8014728:	2d19      	cmp	r5, #25
 801472a:	d800      	bhi.n	801472e <__match+0x1e>
 801472c:	3220      	adds	r2, #32
 801472e:	3101      	adds	r1, #1
 8014730:	42a2      	cmp	r2, r4
 8014732:	d0ef      	beq.n	8014714 <__match+0x4>
 8014734:	2000      	movs	r0, #0
 8014736:	e7f3      	b.n	8014720 <__match+0x10>

08014738 <__hexnan>:
 8014738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801473a:	680b      	ldr	r3, [r1, #0]
 801473c:	b08b      	sub	sp, #44	; 0x2c
 801473e:	9201      	str	r2, [sp, #4]
 8014740:	9901      	ldr	r1, [sp, #4]
 8014742:	115a      	asrs	r2, r3, #5
 8014744:	0092      	lsls	r2, r2, #2
 8014746:	188a      	adds	r2, r1, r2
 8014748:	9202      	str	r2, [sp, #8]
 801474a:	0019      	movs	r1, r3
 801474c:	221f      	movs	r2, #31
 801474e:	4011      	ands	r1, r2
 8014750:	9008      	str	r0, [sp, #32]
 8014752:	9106      	str	r1, [sp, #24]
 8014754:	4213      	tst	r3, r2
 8014756:	d002      	beq.n	801475e <__hexnan+0x26>
 8014758:	9b02      	ldr	r3, [sp, #8]
 801475a:	3304      	adds	r3, #4
 801475c:	9302      	str	r3, [sp, #8]
 801475e:	9b02      	ldr	r3, [sp, #8]
 8014760:	2500      	movs	r5, #0
 8014762:	1f1f      	subs	r7, r3, #4
 8014764:	003e      	movs	r6, r7
 8014766:	003c      	movs	r4, r7
 8014768:	9b08      	ldr	r3, [sp, #32]
 801476a:	603d      	str	r5, [r7, #0]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	9507      	str	r5, [sp, #28]
 8014770:	9305      	str	r3, [sp, #20]
 8014772:	9503      	str	r5, [sp, #12]
 8014774:	9b05      	ldr	r3, [sp, #20]
 8014776:	3301      	adds	r3, #1
 8014778:	9309      	str	r3, [sp, #36]	; 0x24
 801477a:	9b05      	ldr	r3, [sp, #20]
 801477c:	785b      	ldrb	r3, [r3, #1]
 801477e:	9304      	str	r3, [sp, #16]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d028      	beq.n	80147d6 <__hexnan+0x9e>
 8014784:	9804      	ldr	r0, [sp, #16]
 8014786:	f7ff fd78 	bl	801427a <__hexdig_fun>
 801478a:	2800      	cmp	r0, #0
 801478c:	d154      	bne.n	8014838 <__hexnan+0x100>
 801478e:	9b04      	ldr	r3, [sp, #16]
 8014790:	2b20      	cmp	r3, #32
 8014792:	d819      	bhi.n	80147c8 <__hexnan+0x90>
 8014794:	9b03      	ldr	r3, [sp, #12]
 8014796:	9a07      	ldr	r2, [sp, #28]
 8014798:	4293      	cmp	r3, r2
 801479a:	dd12      	ble.n	80147c2 <__hexnan+0x8a>
 801479c:	42b4      	cmp	r4, r6
 801479e:	d206      	bcs.n	80147ae <__hexnan+0x76>
 80147a0:	2d07      	cmp	r5, #7
 80147a2:	dc04      	bgt.n	80147ae <__hexnan+0x76>
 80147a4:	002a      	movs	r2, r5
 80147a6:	0031      	movs	r1, r6
 80147a8:	0020      	movs	r0, r4
 80147aa:	f7ff ff9f 	bl	80146ec <L_shift>
 80147ae:	9b01      	ldr	r3, [sp, #4]
 80147b0:	2508      	movs	r5, #8
 80147b2:	429c      	cmp	r4, r3
 80147b4:	d905      	bls.n	80147c2 <__hexnan+0x8a>
 80147b6:	1f26      	subs	r6, r4, #4
 80147b8:	2500      	movs	r5, #0
 80147ba:	0034      	movs	r4, r6
 80147bc:	9b03      	ldr	r3, [sp, #12]
 80147be:	6035      	str	r5, [r6, #0]
 80147c0:	9307      	str	r3, [sp, #28]
 80147c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147c4:	9305      	str	r3, [sp, #20]
 80147c6:	e7d5      	b.n	8014774 <__hexnan+0x3c>
 80147c8:	9b04      	ldr	r3, [sp, #16]
 80147ca:	2b29      	cmp	r3, #41	; 0x29
 80147cc:	d159      	bne.n	8014882 <__hexnan+0x14a>
 80147ce:	9b05      	ldr	r3, [sp, #20]
 80147d0:	9a08      	ldr	r2, [sp, #32]
 80147d2:	3302      	adds	r3, #2
 80147d4:	6013      	str	r3, [r2, #0]
 80147d6:	9b03      	ldr	r3, [sp, #12]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d052      	beq.n	8014882 <__hexnan+0x14a>
 80147dc:	42b4      	cmp	r4, r6
 80147de:	d206      	bcs.n	80147ee <__hexnan+0xb6>
 80147e0:	2d07      	cmp	r5, #7
 80147e2:	dc04      	bgt.n	80147ee <__hexnan+0xb6>
 80147e4:	002a      	movs	r2, r5
 80147e6:	0031      	movs	r1, r6
 80147e8:	0020      	movs	r0, r4
 80147ea:	f7ff ff7f 	bl	80146ec <L_shift>
 80147ee:	9b01      	ldr	r3, [sp, #4]
 80147f0:	429c      	cmp	r4, r3
 80147f2:	d935      	bls.n	8014860 <__hexnan+0x128>
 80147f4:	001a      	movs	r2, r3
 80147f6:	0023      	movs	r3, r4
 80147f8:	cb02      	ldmia	r3!, {r1}
 80147fa:	c202      	stmia	r2!, {r1}
 80147fc:	429f      	cmp	r7, r3
 80147fe:	d2fb      	bcs.n	80147f8 <__hexnan+0xc0>
 8014800:	9b02      	ldr	r3, [sp, #8]
 8014802:	1c62      	adds	r2, r4, #1
 8014804:	1ed9      	subs	r1, r3, #3
 8014806:	2304      	movs	r3, #4
 8014808:	4291      	cmp	r1, r2
 801480a:	d305      	bcc.n	8014818 <__hexnan+0xe0>
 801480c:	9b02      	ldr	r3, [sp, #8]
 801480e:	3b04      	subs	r3, #4
 8014810:	1b1b      	subs	r3, r3, r4
 8014812:	089b      	lsrs	r3, r3, #2
 8014814:	3301      	adds	r3, #1
 8014816:	009b      	lsls	r3, r3, #2
 8014818:	9a01      	ldr	r2, [sp, #4]
 801481a:	18d3      	adds	r3, r2, r3
 801481c:	2200      	movs	r2, #0
 801481e:	c304      	stmia	r3!, {r2}
 8014820:	429f      	cmp	r7, r3
 8014822:	d2fc      	bcs.n	801481e <__hexnan+0xe6>
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d104      	bne.n	8014834 <__hexnan+0xfc>
 801482a:	9b01      	ldr	r3, [sp, #4]
 801482c:	429f      	cmp	r7, r3
 801482e:	d126      	bne.n	801487e <__hexnan+0x146>
 8014830:	2301      	movs	r3, #1
 8014832:	603b      	str	r3, [r7, #0]
 8014834:	2005      	movs	r0, #5
 8014836:	e025      	b.n	8014884 <__hexnan+0x14c>
 8014838:	9b03      	ldr	r3, [sp, #12]
 801483a:	3501      	adds	r5, #1
 801483c:	3301      	adds	r3, #1
 801483e:	9303      	str	r3, [sp, #12]
 8014840:	2d08      	cmp	r5, #8
 8014842:	dd06      	ble.n	8014852 <__hexnan+0x11a>
 8014844:	9b01      	ldr	r3, [sp, #4]
 8014846:	429c      	cmp	r4, r3
 8014848:	d9bb      	bls.n	80147c2 <__hexnan+0x8a>
 801484a:	2300      	movs	r3, #0
 801484c:	2501      	movs	r5, #1
 801484e:	3c04      	subs	r4, #4
 8014850:	6023      	str	r3, [r4, #0]
 8014852:	220f      	movs	r2, #15
 8014854:	6823      	ldr	r3, [r4, #0]
 8014856:	4010      	ands	r0, r2
 8014858:	011b      	lsls	r3, r3, #4
 801485a:	4303      	orrs	r3, r0
 801485c:	6023      	str	r3, [r4, #0]
 801485e:	e7b0      	b.n	80147c2 <__hexnan+0x8a>
 8014860:	9b06      	ldr	r3, [sp, #24]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d0de      	beq.n	8014824 <__hexnan+0xec>
 8014866:	2320      	movs	r3, #32
 8014868:	9a06      	ldr	r2, [sp, #24]
 801486a:	9902      	ldr	r1, [sp, #8]
 801486c:	1a9b      	subs	r3, r3, r2
 801486e:	2201      	movs	r2, #1
 8014870:	4252      	negs	r2, r2
 8014872:	40da      	lsrs	r2, r3
 8014874:	3904      	subs	r1, #4
 8014876:	680b      	ldr	r3, [r1, #0]
 8014878:	4013      	ands	r3, r2
 801487a:	600b      	str	r3, [r1, #0]
 801487c:	e7d2      	b.n	8014824 <__hexnan+0xec>
 801487e:	3f04      	subs	r7, #4
 8014880:	e7d0      	b.n	8014824 <__hexnan+0xec>
 8014882:	2004      	movs	r0, #4
 8014884:	b00b      	add	sp, #44	; 0x2c
 8014886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014888 <__ascii_mbtowc>:
 8014888:	b082      	sub	sp, #8
 801488a:	2900      	cmp	r1, #0
 801488c:	d100      	bne.n	8014890 <__ascii_mbtowc+0x8>
 801488e:	a901      	add	r1, sp, #4
 8014890:	1e10      	subs	r0, r2, #0
 8014892:	d006      	beq.n	80148a2 <__ascii_mbtowc+0x1a>
 8014894:	2b00      	cmp	r3, #0
 8014896:	d006      	beq.n	80148a6 <__ascii_mbtowc+0x1e>
 8014898:	7813      	ldrb	r3, [r2, #0]
 801489a:	600b      	str	r3, [r1, #0]
 801489c:	7810      	ldrb	r0, [r2, #0]
 801489e:	1e43      	subs	r3, r0, #1
 80148a0:	4198      	sbcs	r0, r3
 80148a2:	b002      	add	sp, #8
 80148a4:	4770      	bx	lr
 80148a6:	2002      	movs	r0, #2
 80148a8:	4240      	negs	r0, r0
 80148aa:	e7fa      	b.n	80148a2 <__ascii_mbtowc+0x1a>

080148ac <_Balloc>:
 80148ac:	b570      	push	{r4, r5, r6, lr}
 80148ae:	69c5      	ldr	r5, [r0, #28]
 80148b0:	0006      	movs	r6, r0
 80148b2:	000c      	movs	r4, r1
 80148b4:	2d00      	cmp	r5, #0
 80148b6:	d10e      	bne.n	80148d6 <_Balloc+0x2a>
 80148b8:	2010      	movs	r0, #16
 80148ba:	f7fc fc31 	bl	8011120 <malloc>
 80148be:	1e02      	subs	r2, r0, #0
 80148c0:	61f0      	str	r0, [r6, #28]
 80148c2:	d104      	bne.n	80148ce <_Balloc+0x22>
 80148c4:	216b      	movs	r1, #107	; 0x6b
 80148c6:	4b19      	ldr	r3, [pc, #100]	; (801492c <_Balloc+0x80>)
 80148c8:	4819      	ldr	r0, [pc, #100]	; (8014930 <_Balloc+0x84>)
 80148ca:	f7fe fd7b 	bl	80133c4 <__assert_func>
 80148ce:	6045      	str	r5, [r0, #4]
 80148d0:	6085      	str	r5, [r0, #8]
 80148d2:	6005      	str	r5, [r0, #0]
 80148d4:	60c5      	str	r5, [r0, #12]
 80148d6:	69f5      	ldr	r5, [r6, #28]
 80148d8:	68eb      	ldr	r3, [r5, #12]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d013      	beq.n	8014906 <_Balloc+0x5a>
 80148de:	69f3      	ldr	r3, [r6, #28]
 80148e0:	00a2      	lsls	r2, r4, #2
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	189b      	adds	r3, r3, r2
 80148e6:	6818      	ldr	r0, [r3, #0]
 80148e8:	2800      	cmp	r0, #0
 80148ea:	d118      	bne.n	801491e <_Balloc+0x72>
 80148ec:	2101      	movs	r1, #1
 80148ee:	000d      	movs	r5, r1
 80148f0:	40a5      	lsls	r5, r4
 80148f2:	1d6a      	adds	r2, r5, #5
 80148f4:	0030      	movs	r0, r6
 80148f6:	0092      	lsls	r2, r2, #2
 80148f8:	f000 fee2 	bl	80156c0 <_calloc_r>
 80148fc:	2800      	cmp	r0, #0
 80148fe:	d00c      	beq.n	801491a <_Balloc+0x6e>
 8014900:	6044      	str	r4, [r0, #4]
 8014902:	6085      	str	r5, [r0, #8]
 8014904:	e00d      	b.n	8014922 <_Balloc+0x76>
 8014906:	2221      	movs	r2, #33	; 0x21
 8014908:	2104      	movs	r1, #4
 801490a:	0030      	movs	r0, r6
 801490c:	f000 fed8 	bl	80156c0 <_calloc_r>
 8014910:	69f3      	ldr	r3, [r6, #28]
 8014912:	60e8      	str	r0, [r5, #12]
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d1e1      	bne.n	80148de <_Balloc+0x32>
 801491a:	2000      	movs	r0, #0
 801491c:	bd70      	pop	{r4, r5, r6, pc}
 801491e:	6802      	ldr	r2, [r0, #0]
 8014920:	601a      	str	r2, [r3, #0]
 8014922:	2300      	movs	r3, #0
 8014924:	6103      	str	r3, [r0, #16]
 8014926:	60c3      	str	r3, [r0, #12]
 8014928:	e7f8      	b.n	801491c <_Balloc+0x70>
 801492a:	46c0      	nop			; (mov r8, r8)
 801492c:	080186e2 	.word	0x080186e2
 8014930:	0801886d 	.word	0x0801886d

08014934 <_Bfree>:
 8014934:	b570      	push	{r4, r5, r6, lr}
 8014936:	69c6      	ldr	r6, [r0, #28]
 8014938:	0005      	movs	r5, r0
 801493a:	000c      	movs	r4, r1
 801493c:	2e00      	cmp	r6, #0
 801493e:	d10e      	bne.n	801495e <_Bfree+0x2a>
 8014940:	2010      	movs	r0, #16
 8014942:	f7fc fbed 	bl	8011120 <malloc>
 8014946:	1e02      	subs	r2, r0, #0
 8014948:	61e8      	str	r0, [r5, #28]
 801494a:	d104      	bne.n	8014956 <_Bfree+0x22>
 801494c:	218f      	movs	r1, #143	; 0x8f
 801494e:	4b09      	ldr	r3, [pc, #36]	; (8014974 <_Bfree+0x40>)
 8014950:	4809      	ldr	r0, [pc, #36]	; (8014978 <_Bfree+0x44>)
 8014952:	f7fe fd37 	bl	80133c4 <__assert_func>
 8014956:	6046      	str	r6, [r0, #4]
 8014958:	6086      	str	r6, [r0, #8]
 801495a:	6006      	str	r6, [r0, #0]
 801495c:	60c6      	str	r6, [r0, #12]
 801495e:	2c00      	cmp	r4, #0
 8014960:	d007      	beq.n	8014972 <_Bfree+0x3e>
 8014962:	69eb      	ldr	r3, [r5, #28]
 8014964:	6862      	ldr	r2, [r4, #4]
 8014966:	68db      	ldr	r3, [r3, #12]
 8014968:	0092      	lsls	r2, r2, #2
 801496a:	189b      	adds	r3, r3, r2
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	6022      	str	r2, [r4, #0]
 8014970:	601c      	str	r4, [r3, #0]
 8014972:	bd70      	pop	{r4, r5, r6, pc}
 8014974:	080186e2 	.word	0x080186e2
 8014978:	0801886d 	.word	0x0801886d

0801497c <__multadd>:
 801497c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801497e:	000e      	movs	r6, r1
 8014980:	9001      	str	r0, [sp, #4]
 8014982:	000c      	movs	r4, r1
 8014984:	001d      	movs	r5, r3
 8014986:	2000      	movs	r0, #0
 8014988:	690f      	ldr	r7, [r1, #16]
 801498a:	3614      	adds	r6, #20
 801498c:	6833      	ldr	r3, [r6, #0]
 801498e:	3001      	adds	r0, #1
 8014990:	b299      	uxth	r1, r3
 8014992:	4351      	muls	r1, r2
 8014994:	0c1b      	lsrs	r3, r3, #16
 8014996:	4353      	muls	r3, r2
 8014998:	1949      	adds	r1, r1, r5
 801499a:	0c0d      	lsrs	r5, r1, #16
 801499c:	195b      	adds	r3, r3, r5
 801499e:	0c1d      	lsrs	r5, r3, #16
 80149a0:	b289      	uxth	r1, r1
 80149a2:	041b      	lsls	r3, r3, #16
 80149a4:	185b      	adds	r3, r3, r1
 80149a6:	c608      	stmia	r6!, {r3}
 80149a8:	4287      	cmp	r7, r0
 80149aa:	dcef      	bgt.n	801498c <__multadd+0x10>
 80149ac:	2d00      	cmp	r5, #0
 80149ae:	d022      	beq.n	80149f6 <__multadd+0x7a>
 80149b0:	68a3      	ldr	r3, [r4, #8]
 80149b2:	42bb      	cmp	r3, r7
 80149b4:	dc19      	bgt.n	80149ea <__multadd+0x6e>
 80149b6:	6861      	ldr	r1, [r4, #4]
 80149b8:	9801      	ldr	r0, [sp, #4]
 80149ba:	3101      	adds	r1, #1
 80149bc:	f7ff ff76 	bl	80148ac <_Balloc>
 80149c0:	1e06      	subs	r6, r0, #0
 80149c2:	d105      	bne.n	80149d0 <__multadd+0x54>
 80149c4:	0032      	movs	r2, r6
 80149c6:	21ba      	movs	r1, #186	; 0xba
 80149c8:	4b0c      	ldr	r3, [pc, #48]	; (80149fc <__multadd+0x80>)
 80149ca:	480d      	ldr	r0, [pc, #52]	; (8014a00 <__multadd+0x84>)
 80149cc:	f7fe fcfa 	bl	80133c4 <__assert_func>
 80149d0:	0021      	movs	r1, r4
 80149d2:	6922      	ldr	r2, [r4, #16]
 80149d4:	310c      	adds	r1, #12
 80149d6:	3202      	adds	r2, #2
 80149d8:	0092      	lsls	r2, r2, #2
 80149da:	300c      	adds	r0, #12
 80149dc:	f7fe fcde 	bl	801339c <memcpy>
 80149e0:	0021      	movs	r1, r4
 80149e2:	9801      	ldr	r0, [sp, #4]
 80149e4:	f7ff ffa6 	bl	8014934 <_Bfree>
 80149e8:	0034      	movs	r4, r6
 80149ea:	1d3b      	adds	r3, r7, #4
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	18e3      	adds	r3, r4, r3
 80149f0:	605d      	str	r5, [r3, #4]
 80149f2:	1c7b      	adds	r3, r7, #1
 80149f4:	6123      	str	r3, [r4, #16]
 80149f6:	0020      	movs	r0, r4
 80149f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80149fa:	46c0      	nop			; (mov r8, r8)
 80149fc:	080187fc 	.word	0x080187fc
 8014a00:	0801886d 	.word	0x0801886d

08014a04 <__s2b>:
 8014a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a06:	0006      	movs	r6, r0
 8014a08:	0018      	movs	r0, r3
 8014a0a:	000c      	movs	r4, r1
 8014a0c:	3008      	adds	r0, #8
 8014a0e:	2109      	movs	r1, #9
 8014a10:	9301      	str	r3, [sp, #4]
 8014a12:	0015      	movs	r5, r2
 8014a14:	f7eb fc1e 	bl	8000254 <__divsi3>
 8014a18:	2301      	movs	r3, #1
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	4283      	cmp	r3, r0
 8014a1e:	db0a      	blt.n	8014a36 <__s2b+0x32>
 8014a20:	0030      	movs	r0, r6
 8014a22:	f7ff ff43 	bl	80148ac <_Balloc>
 8014a26:	1e01      	subs	r1, r0, #0
 8014a28:	d108      	bne.n	8014a3c <__s2b+0x38>
 8014a2a:	000a      	movs	r2, r1
 8014a2c:	4b19      	ldr	r3, [pc, #100]	; (8014a94 <__s2b+0x90>)
 8014a2e:	481a      	ldr	r0, [pc, #104]	; (8014a98 <__s2b+0x94>)
 8014a30:	31d3      	adds	r1, #211	; 0xd3
 8014a32:	f7fe fcc7 	bl	80133c4 <__assert_func>
 8014a36:	005b      	lsls	r3, r3, #1
 8014a38:	3101      	adds	r1, #1
 8014a3a:	e7ef      	b.n	8014a1c <__s2b+0x18>
 8014a3c:	9b08      	ldr	r3, [sp, #32]
 8014a3e:	6143      	str	r3, [r0, #20]
 8014a40:	2301      	movs	r3, #1
 8014a42:	6103      	str	r3, [r0, #16]
 8014a44:	2d09      	cmp	r5, #9
 8014a46:	dd18      	ble.n	8014a7a <__s2b+0x76>
 8014a48:	0023      	movs	r3, r4
 8014a4a:	3309      	adds	r3, #9
 8014a4c:	001f      	movs	r7, r3
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	1964      	adds	r4, r4, r5
 8014a52:	783b      	ldrb	r3, [r7, #0]
 8014a54:	220a      	movs	r2, #10
 8014a56:	0030      	movs	r0, r6
 8014a58:	3b30      	subs	r3, #48	; 0x30
 8014a5a:	f7ff ff8f 	bl	801497c <__multadd>
 8014a5e:	3701      	adds	r7, #1
 8014a60:	0001      	movs	r1, r0
 8014a62:	42a7      	cmp	r7, r4
 8014a64:	d1f5      	bne.n	8014a52 <__s2b+0x4e>
 8014a66:	002c      	movs	r4, r5
 8014a68:	9b00      	ldr	r3, [sp, #0]
 8014a6a:	3c08      	subs	r4, #8
 8014a6c:	191c      	adds	r4, r3, r4
 8014a6e:	002f      	movs	r7, r5
 8014a70:	9b01      	ldr	r3, [sp, #4]
 8014a72:	429f      	cmp	r7, r3
 8014a74:	db04      	blt.n	8014a80 <__s2b+0x7c>
 8014a76:	0008      	movs	r0, r1
 8014a78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014a7a:	2509      	movs	r5, #9
 8014a7c:	340a      	adds	r4, #10
 8014a7e:	e7f6      	b.n	8014a6e <__s2b+0x6a>
 8014a80:	1b63      	subs	r3, r4, r5
 8014a82:	5ddb      	ldrb	r3, [r3, r7]
 8014a84:	220a      	movs	r2, #10
 8014a86:	0030      	movs	r0, r6
 8014a88:	3b30      	subs	r3, #48	; 0x30
 8014a8a:	f7ff ff77 	bl	801497c <__multadd>
 8014a8e:	3701      	adds	r7, #1
 8014a90:	0001      	movs	r1, r0
 8014a92:	e7ed      	b.n	8014a70 <__s2b+0x6c>
 8014a94:	080187fc 	.word	0x080187fc
 8014a98:	0801886d 	.word	0x0801886d

08014a9c <__hi0bits>:
 8014a9c:	0003      	movs	r3, r0
 8014a9e:	0c02      	lsrs	r2, r0, #16
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	4282      	cmp	r2, r0
 8014aa4:	d101      	bne.n	8014aaa <__hi0bits+0xe>
 8014aa6:	041b      	lsls	r3, r3, #16
 8014aa8:	3010      	adds	r0, #16
 8014aaa:	0e1a      	lsrs	r2, r3, #24
 8014aac:	d101      	bne.n	8014ab2 <__hi0bits+0x16>
 8014aae:	3008      	adds	r0, #8
 8014ab0:	021b      	lsls	r3, r3, #8
 8014ab2:	0f1a      	lsrs	r2, r3, #28
 8014ab4:	d101      	bne.n	8014aba <__hi0bits+0x1e>
 8014ab6:	3004      	adds	r0, #4
 8014ab8:	011b      	lsls	r3, r3, #4
 8014aba:	0f9a      	lsrs	r2, r3, #30
 8014abc:	d101      	bne.n	8014ac2 <__hi0bits+0x26>
 8014abe:	3002      	adds	r0, #2
 8014ac0:	009b      	lsls	r3, r3, #2
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	db03      	blt.n	8014ace <__hi0bits+0x32>
 8014ac6:	3001      	adds	r0, #1
 8014ac8:	005b      	lsls	r3, r3, #1
 8014aca:	d400      	bmi.n	8014ace <__hi0bits+0x32>
 8014acc:	2020      	movs	r0, #32
 8014ace:	4770      	bx	lr

08014ad0 <__lo0bits>:
 8014ad0:	6803      	ldr	r3, [r0, #0]
 8014ad2:	0001      	movs	r1, r0
 8014ad4:	2207      	movs	r2, #7
 8014ad6:	0018      	movs	r0, r3
 8014ad8:	4010      	ands	r0, r2
 8014ada:	4213      	tst	r3, r2
 8014adc:	d00d      	beq.n	8014afa <__lo0bits+0x2a>
 8014ade:	3a06      	subs	r2, #6
 8014ae0:	2000      	movs	r0, #0
 8014ae2:	4213      	tst	r3, r2
 8014ae4:	d105      	bne.n	8014af2 <__lo0bits+0x22>
 8014ae6:	3002      	adds	r0, #2
 8014ae8:	4203      	tst	r3, r0
 8014aea:	d003      	beq.n	8014af4 <__lo0bits+0x24>
 8014aec:	40d3      	lsrs	r3, r2
 8014aee:	0010      	movs	r0, r2
 8014af0:	600b      	str	r3, [r1, #0]
 8014af2:	4770      	bx	lr
 8014af4:	089b      	lsrs	r3, r3, #2
 8014af6:	600b      	str	r3, [r1, #0]
 8014af8:	e7fb      	b.n	8014af2 <__lo0bits+0x22>
 8014afa:	b29a      	uxth	r2, r3
 8014afc:	2a00      	cmp	r2, #0
 8014afe:	d101      	bne.n	8014b04 <__lo0bits+0x34>
 8014b00:	2010      	movs	r0, #16
 8014b02:	0c1b      	lsrs	r3, r3, #16
 8014b04:	b2da      	uxtb	r2, r3
 8014b06:	2a00      	cmp	r2, #0
 8014b08:	d101      	bne.n	8014b0e <__lo0bits+0x3e>
 8014b0a:	3008      	adds	r0, #8
 8014b0c:	0a1b      	lsrs	r3, r3, #8
 8014b0e:	071a      	lsls	r2, r3, #28
 8014b10:	d101      	bne.n	8014b16 <__lo0bits+0x46>
 8014b12:	3004      	adds	r0, #4
 8014b14:	091b      	lsrs	r3, r3, #4
 8014b16:	079a      	lsls	r2, r3, #30
 8014b18:	d101      	bne.n	8014b1e <__lo0bits+0x4e>
 8014b1a:	3002      	adds	r0, #2
 8014b1c:	089b      	lsrs	r3, r3, #2
 8014b1e:	07da      	lsls	r2, r3, #31
 8014b20:	d4e9      	bmi.n	8014af6 <__lo0bits+0x26>
 8014b22:	3001      	adds	r0, #1
 8014b24:	085b      	lsrs	r3, r3, #1
 8014b26:	d1e6      	bne.n	8014af6 <__lo0bits+0x26>
 8014b28:	2020      	movs	r0, #32
 8014b2a:	e7e2      	b.n	8014af2 <__lo0bits+0x22>

08014b2c <__i2b>:
 8014b2c:	b510      	push	{r4, lr}
 8014b2e:	000c      	movs	r4, r1
 8014b30:	2101      	movs	r1, #1
 8014b32:	f7ff febb 	bl	80148ac <_Balloc>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	d107      	bne.n	8014b4a <__i2b+0x1e>
 8014b3a:	2146      	movs	r1, #70	; 0x46
 8014b3c:	4c05      	ldr	r4, [pc, #20]	; (8014b54 <__i2b+0x28>)
 8014b3e:	0002      	movs	r2, r0
 8014b40:	4b05      	ldr	r3, [pc, #20]	; (8014b58 <__i2b+0x2c>)
 8014b42:	0020      	movs	r0, r4
 8014b44:	31ff      	adds	r1, #255	; 0xff
 8014b46:	f7fe fc3d 	bl	80133c4 <__assert_func>
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	6144      	str	r4, [r0, #20]
 8014b4e:	6103      	str	r3, [r0, #16]
 8014b50:	bd10      	pop	{r4, pc}
 8014b52:	46c0      	nop			; (mov r8, r8)
 8014b54:	0801886d 	.word	0x0801886d
 8014b58:	080187fc 	.word	0x080187fc

08014b5c <__multiply>:
 8014b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b5e:	0015      	movs	r5, r2
 8014b60:	690a      	ldr	r2, [r1, #16]
 8014b62:	692b      	ldr	r3, [r5, #16]
 8014b64:	000c      	movs	r4, r1
 8014b66:	b08b      	sub	sp, #44	; 0x2c
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	da01      	bge.n	8014b70 <__multiply+0x14>
 8014b6c:	002c      	movs	r4, r5
 8014b6e:	000d      	movs	r5, r1
 8014b70:	6927      	ldr	r7, [r4, #16]
 8014b72:	692e      	ldr	r6, [r5, #16]
 8014b74:	6861      	ldr	r1, [r4, #4]
 8014b76:	19bb      	adds	r3, r7, r6
 8014b78:	9303      	str	r3, [sp, #12]
 8014b7a:	68a3      	ldr	r3, [r4, #8]
 8014b7c:	19ba      	adds	r2, r7, r6
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	da00      	bge.n	8014b84 <__multiply+0x28>
 8014b82:	3101      	adds	r1, #1
 8014b84:	f7ff fe92 	bl	80148ac <_Balloc>
 8014b88:	9002      	str	r0, [sp, #8]
 8014b8a:	2800      	cmp	r0, #0
 8014b8c:	d106      	bne.n	8014b9c <__multiply+0x40>
 8014b8e:	21b1      	movs	r1, #177	; 0xb1
 8014b90:	4b48      	ldr	r3, [pc, #288]	; (8014cb4 <__multiply+0x158>)
 8014b92:	4849      	ldr	r0, [pc, #292]	; (8014cb8 <__multiply+0x15c>)
 8014b94:	9a02      	ldr	r2, [sp, #8]
 8014b96:	0049      	lsls	r1, r1, #1
 8014b98:	f7fe fc14 	bl	80133c4 <__assert_func>
 8014b9c:	9b02      	ldr	r3, [sp, #8]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	3314      	adds	r3, #20
 8014ba2:	469c      	mov	ip, r3
 8014ba4:	19bb      	adds	r3, r7, r6
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4463      	add	r3, ip
 8014baa:	9304      	str	r3, [sp, #16]
 8014bac:	4663      	mov	r3, ip
 8014bae:	9904      	ldr	r1, [sp, #16]
 8014bb0:	428b      	cmp	r3, r1
 8014bb2:	d32a      	bcc.n	8014c0a <__multiply+0xae>
 8014bb4:	0023      	movs	r3, r4
 8014bb6:	00bf      	lsls	r7, r7, #2
 8014bb8:	3314      	adds	r3, #20
 8014bba:	3514      	adds	r5, #20
 8014bbc:	9308      	str	r3, [sp, #32]
 8014bbe:	00b6      	lsls	r6, r6, #2
 8014bc0:	19db      	adds	r3, r3, r7
 8014bc2:	9305      	str	r3, [sp, #20]
 8014bc4:	19ab      	adds	r3, r5, r6
 8014bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8014bc8:	2304      	movs	r3, #4
 8014bca:	9306      	str	r3, [sp, #24]
 8014bcc:	0023      	movs	r3, r4
 8014bce:	9a05      	ldr	r2, [sp, #20]
 8014bd0:	3315      	adds	r3, #21
 8014bd2:	9501      	str	r5, [sp, #4]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d305      	bcc.n	8014be4 <__multiply+0x88>
 8014bd8:	1b13      	subs	r3, r2, r4
 8014bda:	3b15      	subs	r3, #21
 8014bdc:	089b      	lsrs	r3, r3, #2
 8014bde:	3301      	adds	r3, #1
 8014be0:	009b      	lsls	r3, r3, #2
 8014be2:	9306      	str	r3, [sp, #24]
 8014be4:	9b01      	ldr	r3, [sp, #4]
 8014be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014be8:	4293      	cmp	r3, r2
 8014bea:	d310      	bcc.n	8014c0e <__multiply+0xb2>
 8014bec:	9b03      	ldr	r3, [sp, #12]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	dd05      	ble.n	8014bfe <__multiply+0xa2>
 8014bf2:	9b04      	ldr	r3, [sp, #16]
 8014bf4:	3b04      	subs	r3, #4
 8014bf6:	9304      	str	r3, [sp, #16]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d056      	beq.n	8014cac <__multiply+0x150>
 8014bfe:	9b02      	ldr	r3, [sp, #8]
 8014c00:	9a03      	ldr	r2, [sp, #12]
 8014c02:	0018      	movs	r0, r3
 8014c04:	611a      	str	r2, [r3, #16]
 8014c06:	b00b      	add	sp, #44	; 0x2c
 8014c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c0a:	c304      	stmia	r3!, {r2}
 8014c0c:	e7cf      	b.n	8014bae <__multiply+0x52>
 8014c0e:	9b01      	ldr	r3, [sp, #4]
 8014c10:	6818      	ldr	r0, [r3, #0]
 8014c12:	b280      	uxth	r0, r0
 8014c14:	2800      	cmp	r0, #0
 8014c16:	d01e      	beq.n	8014c56 <__multiply+0xfa>
 8014c18:	4667      	mov	r7, ip
 8014c1a:	2500      	movs	r5, #0
 8014c1c:	9e08      	ldr	r6, [sp, #32]
 8014c1e:	ce02      	ldmia	r6!, {r1}
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	9307      	str	r3, [sp, #28]
 8014c24:	b28b      	uxth	r3, r1
 8014c26:	4343      	muls	r3, r0
 8014c28:	001a      	movs	r2, r3
 8014c2a:	466b      	mov	r3, sp
 8014c2c:	8b9b      	ldrh	r3, [r3, #28]
 8014c2e:	18d3      	adds	r3, r2, r3
 8014c30:	195b      	adds	r3, r3, r5
 8014c32:	0c0d      	lsrs	r5, r1, #16
 8014c34:	4345      	muls	r5, r0
 8014c36:	9a07      	ldr	r2, [sp, #28]
 8014c38:	0c11      	lsrs	r1, r2, #16
 8014c3a:	1869      	adds	r1, r5, r1
 8014c3c:	0c1a      	lsrs	r2, r3, #16
 8014c3e:	188a      	adds	r2, r1, r2
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	0c15      	lsrs	r5, r2, #16
 8014c44:	0412      	lsls	r2, r2, #16
 8014c46:	431a      	orrs	r2, r3
 8014c48:	9b05      	ldr	r3, [sp, #20]
 8014c4a:	c704      	stmia	r7!, {r2}
 8014c4c:	42b3      	cmp	r3, r6
 8014c4e:	d8e6      	bhi.n	8014c1e <__multiply+0xc2>
 8014c50:	4663      	mov	r3, ip
 8014c52:	9a06      	ldr	r2, [sp, #24]
 8014c54:	509d      	str	r5, [r3, r2]
 8014c56:	9b01      	ldr	r3, [sp, #4]
 8014c58:	6818      	ldr	r0, [r3, #0]
 8014c5a:	0c00      	lsrs	r0, r0, #16
 8014c5c:	d020      	beq.n	8014ca0 <__multiply+0x144>
 8014c5e:	4663      	mov	r3, ip
 8014c60:	0025      	movs	r5, r4
 8014c62:	4661      	mov	r1, ip
 8014c64:	2700      	movs	r7, #0
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	3514      	adds	r5, #20
 8014c6a:	682a      	ldr	r2, [r5, #0]
 8014c6c:	680e      	ldr	r6, [r1, #0]
 8014c6e:	b292      	uxth	r2, r2
 8014c70:	4342      	muls	r2, r0
 8014c72:	0c36      	lsrs	r6, r6, #16
 8014c74:	1992      	adds	r2, r2, r6
 8014c76:	19d2      	adds	r2, r2, r7
 8014c78:	0416      	lsls	r6, r2, #16
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	431e      	orrs	r6, r3
 8014c7e:	600e      	str	r6, [r1, #0]
 8014c80:	cd40      	ldmia	r5!, {r6}
 8014c82:	684b      	ldr	r3, [r1, #4]
 8014c84:	0c36      	lsrs	r6, r6, #16
 8014c86:	4346      	muls	r6, r0
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	0c12      	lsrs	r2, r2, #16
 8014c8c:	18f3      	adds	r3, r6, r3
 8014c8e:	189b      	adds	r3, r3, r2
 8014c90:	9a05      	ldr	r2, [sp, #20]
 8014c92:	0c1f      	lsrs	r7, r3, #16
 8014c94:	3104      	adds	r1, #4
 8014c96:	42aa      	cmp	r2, r5
 8014c98:	d8e7      	bhi.n	8014c6a <__multiply+0x10e>
 8014c9a:	4662      	mov	r2, ip
 8014c9c:	9906      	ldr	r1, [sp, #24]
 8014c9e:	5053      	str	r3, [r2, r1]
 8014ca0:	9b01      	ldr	r3, [sp, #4]
 8014ca2:	3304      	adds	r3, #4
 8014ca4:	9301      	str	r3, [sp, #4]
 8014ca6:	2304      	movs	r3, #4
 8014ca8:	449c      	add	ip, r3
 8014caa:	e79b      	b.n	8014be4 <__multiply+0x88>
 8014cac:	9b03      	ldr	r3, [sp, #12]
 8014cae:	3b01      	subs	r3, #1
 8014cb0:	9303      	str	r3, [sp, #12]
 8014cb2:	e79b      	b.n	8014bec <__multiply+0x90>
 8014cb4:	080187fc 	.word	0x080187fc
 8014cb8:	0801886d 	.word	0x0801886d

08014cbc <__pow5mult>:
 8014cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cbe:	2303      	movs	r3, #3
 8014cc0:	0015      	movs	r5, r2
 8014cc2:	0007      	movs	r7, r0
 8014cc4:	000e      	movs	r6, r1
 8014cc6:	401a      	ands	r2, r3
 8014cc8:	421d      	tst	r5, r3
 8014cca:	d008      	beq.n	8014cde <__pow5mult+0x22>
 8014ccc:	4925      	ldr	r1, [pc, #148]	; (8014d64 <__pow5mult+0xa8>)
 8014cce:	3a01      	subs	r2, #1
 8014cd0:	0092      	lsls	r2, r2, #2
 8014cd2:	5852      	ldr	r2, [r2, r1]
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	0031      	movs	r1, r6
 8014cd8:	f7ff fe50 	bl	801497c <__multadd>
 8014cdc:	0006      	movs	r6, r0
 8014cde:	10ad      	asrs	r5, r5, #2
 8014ce0:	d03d      	beq.n	8014d5e <__pow5mult+0xa2>
 8014ce2:	69fc      	ldr	r4, [r7, #28]
 8014ce4:	2c00      	cmp	r4, #0
 8014ce6:	d10f      	bne.n	8014d08 <__pow5mult+0x4c>
 8014ce8:	2010      	movs	r0, #16
 8014cea:	f7fc fa19 	bl	8011120 <malloc>
 8014cee:	1e02      	subs	r2, r0, #0
 8014cf0:	61f8      	str	r0, [r7, #28]
 8014cf2:	d105      	bne.n	8014d00 <__pow5mult+0x44>
 8014cf4:	21b4      	movs	r1, #180	; 0xb4
 8014cf6:	4b1c      	ldr	r3, [pc, #112]	; (8014d68 <__pow5mult+0xac>)
 8014cf8:	481c      	ldr	r0, [pc, #112]	; (8014d6c <__pow5mult+0xb0>)
 8014cfa:	31ff      	adds	r1, #255	; 0xff
 8014cfc:	f7fe fb62 	bl	80133c4 <__assert_func>
 8014d00:	6044      	str	r4, [r0, #4]
 8014d02:	6084      	str	r4, [r0, #8]
 8014d04:	6004      	str	r4, [r0, #0]
 8014d06:	60c4      	str	r4, [r0, #12]
 8014d08:	69fb      	ldr	r3, [r7, #28]
 8014d0a:	689c      	ldr	r4, [r3, #8]
 8014d0c:	9301      	str	r3, [sp, #4]
 8014d0e:	2c00      	cmp	r4, #0
 8014d10:	d108      	bne.n	8014d24 <__pow5mult+0x68>
 8014d12:	0038      	movs	r0, r7
 8014d14:	4916      	ldr	r1, [pc, #88]	; (8014d70 <__pow5mult+0xb4>)
 8014d16:	f7ff ff09 	bl	8014b2c <__i2b>
 8014d1a:	9b01      	ldr	r3, [sp, #4]
 8014d1c:	0004      	movs	r4, r0
 8014d1e:	6098      	str	r0, [r3, #8]
 8014d20:	2300      	movs	r3, #0
 8014d22:	6003      	str	r3, [r0, #0]
 8014d24:	2301      	movs	r3, #1
 8014d26:	421d      	tst	r5, r3
 8014d28:	d00a      	beq.n	8014d40 <__pow5mult+0x84>
 8014d2a:	0031      	movs	r1, r6
 8014d2c:	0022      	movs	r2, r4
 8014d2e:	0038      	movs	r0, r7
 8014d30:	f7ff ff14 	bl	8014b5c <__multiply>
 8014d34:	0031      	movs	r1, r6
 8014d36:	9001      	str	r0, [sp, #4]
 8014d38:	0038      	movs	r0, r7
 8014d3a:	f7ff fdfb 	bl	8014934 <_Bfree>
 8014d3e:	9e01      	ldr	r6, [sp, #4]
 8014d40:	106d      	asrs	r5, r5, #1
 8014d42:	d00c      	beq.n	8014d5e <__pow5mult+0xa2>
 8014d44:	6820      	ldr	r0, [r4, #0]
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d107      	bne.n	8014d5a <__pow5mult+0x9e>
 8014d4a:	0022      	movs	r2, r4
 8014d4c:	0021      	movs	r1, r4
 8014d4e:	0038      	movs	r0, r7
 8014d50:	f7ff ff04 	bl	8014b5c <__multiply>
 8014d54:	2300      	movs	r3, #0
 8014d56:	6020      	str	r0, [r4, #0]
 8014d58:	6003      	str	r3, [r0, #0]
 8014d5a:	0004      	movs	r4, r0
 8014d5c:	e7e2      	b.n	8014d24 <__pow5mult+0x68>
 8014d5e:	0030      	movs	r0, r6
 8014d60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014d62:	46c0      	nop			; (mov r8, r8)
 8014d64:	080189b8 	.word	0x080189b8
 8014d68:	080186e2 	.word	0x080186e2
 8014d6c:	0801886d 	.word	0x0801886d
 8014d70:	00000271 	.word	0x00000271

08014d74 <__lshift>:
 8014d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d76:	000c      	movs	r4, r1
 8014d78:	0017      	movs	r7, r2
 8014d7a:	6923      	ldr	r3, [r4, #16]
 8014d7c:	1155      	asrs	r5, r2, #5
 8014d7e:	b087      	sub	sp, #28
 8014d80:	18eb      	adds	r3, r5, r3
 8014d82:	9302      	str	r3, [sp, #8]
 8014d84:	3301      	adds	r3, #1
 8014d86:	9301      	str	r3, [sp, #4]
 8014d88:	6849      	ldr	r1, [r1, #4]
 8014d8a:	68a3      	ldr	r3, [r4, #8]
 8014d8c:	9004      	str	r0, [sp, #16]
 8014d8e:	9a01      	ldr	r2, [sp, #4]
 8014d90:	4293      	cmp	r3, r2
 8014d92:	db10      	blt.n	8014db6 <__lshift+0x42>
 8014d94:	9804      	ldr	r0, [sp, #16]
 8014d96:	f7ff fd89 	bl	80148ac <_Balloc>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	0002      	movs	r2, r0
 8014d9e:	0006      	movs	r6, r0
 8014da0:	0019      	movs	r1, r3
 8014da2:	3214      	adds	r2, #20
 8014da4:	4298      	cmp	r0, r3
 8014da6:	d10c      	bne.n	8014dc2 <__lshift+0x4e>
 8014da8:	31df      	adds	r1, #223	; 0xdf
 8014daa:	0032      	movs	r2, r6
 8014dac:	4b26      	ldr	r3, [pc, #152]	; (8014e48 <__lshift+0xd4>)
 8014dae:	4827      	ldr	r0, [pc, #156]	; (8014e4c <__lshift+0xd8>)
 8014db0:	31ff      	adds	r1, #255	; 0xff
 8014db2:	f7fe fb07 	bl	80133c4 <__assert_func>
 8014db6:	3101      	adds	r1, #1
 8014db8:	005b      	lsls	r3, r3, #1
 8014dba:	e7e8      	b.n	8014d8e <__lshift+0x1a>
 8014dbc:	0098      	lsls	r0, r3, #2
 8014dbe:	5011      	str	r1, [r2, r0]
 8014dc0:	3301      	adds	r3, #1
 8014dc2:	42ab      	cmp	r3, r5
 8014dc4:	dbfa      	blt.n	8014dbc <__lshift+0x48>
 8014dc6:	43eb      	mvns	r3, r5
 8014dc8:	17db      	asrs	r3, r3, #31
 8014dca:	401d      	ands	r5, r3
 8014dcc:	211f      	movs	r1, #31
 8014dce:	0023      	movs	r3, r4
 8014dd0:	0038      	movs	r0, r7
 8014dd2:	00ad      	lsls	r5, r5, #2
 8014dd4:	1955      	adds	r5, r2, r5
 8014dd6:	6922      	ldr	r2, [r4, #16]
 8014dd8:	3314      	adds	r3, #20
 8014dda:	0092      	lsls	r2, r2, #2
 8014ddc:	4008      	ands	r0, r1
 8014dde:	4684      	mov	ip, r0
 8014de0:	189a      	adds	r2, r3, r2
 8014de2:	420f      	tst	r7, r1
 8014de4:	d02a      	beq.n	8014e3c <__lshift+0xc8>
 8014de6:	3101      	adds	r1, #1
 8014de8:	1a09      	subs	r1, r1, r0
 8014dea:	9105      	str	r1, [sp, #20]
 8014dec:	2100      	movs	r1, #0
 8014dee:	9503      	str	r5, [sp, #12]
 8014df0:	4667      	mov	r7, ip
 8014df2:	6818      	ldr	r0, [r3, #0]
 8014df4:	40b8      	lsls	r0, r7
 8014df6:	4308      	orrs	r0, r1
 8014df8:	9903      	ldr	r1, [sp, #12]
 8014dfa:	c101      	stmia	r1!, {r0}
 8014dfc:	9103      	str	r1, [sp, #12]
 8014dfe:	9805      	ldr	r0, [sp, #20]
 8014e00:	cb02      	ldmia	r3!, {r1}
 8014e02:	40c1      	lsrs	r1, r0
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d8f3      	bhi.n	8014df0 <__lshift+0x7c>
 8014e08:	0020      	movs	r0, r4
 8014e0a:	3015      	adds	r0, #21
 8014e0c:	2304      	movs	r3, #4
 8014e0e:	4282      	cmp	r2, r0
 8014e10:	d304      	bcc.n	8014e1c <__lshift+0xa8>
 8014e12:	1b13      	subs	r3, r2, r4
 8014e14:	3b15      	subs	r3, #21
 8014e16:	089b      	lsrs	r3, r3, #2
 8014e18:	3301      	adds	r3, #1
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	50e9      	str	r1, [r5, r3]
 8014e1e:	2900      	cmp	r1, #0
 8014e20:	d002      	beq.n	8014e28 <__lshift+0xb4>
 8014e22:	9b02      	ldr	r3, [sp, #8]
 8014e24:	3302      	adds	r3, #2
 8014e26:	9301      	str	r3, [sp, #4]
 8014e28:	9b01      	ldr	r3, [sp, #4]
 8014e2a:	9804      	ldr	r0, [sp, #16]
 8014e2c:	3b01      	subs	r3, #1
 8014e2e:	0021      	movs	r1, r4
 8014e30:	6133      	str	r3, [r6, #16]
 8014e32:	f7ff fd7f 	bl	8014934 <_Bfree>
 8014e36:	0030      	movs	r0, r6
 8014e38:	b007      	add	sp, #28
 8014e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e3c:	cb02      	ldmia	r3!, {r1}
 8014e3e:	c502      	stmia	r5!, {r1}
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d8fb      	bhi.n	8014e3c <__lshift+0xc8>
 8014e44:	e7f0      	b.n	8014e28 <__lshift+0xb4>
 8014e46:	46c0      	nop			; (mov r8, r8)
 8014e48:	080187fc 	.word	0x080187fc
 8014e4c:	0801886d 	.word	0x0801886d

08014e50 <__mcmp>:
 8014e50:	b530      	push	{r4, r5, lr}
 8014e52:	690b      	ldr	r3, [r1, #16]
 8014e54:	6904      	ldr	r4, [r0, #16]
 8014e56:	0002      	movs	r2, r0
 8014e58:	1ae0      	subs	r0, r4, r3
 8014e5a:	429c      	cmp	r4, r3
 8014e5c:	d10e      	bne.n	8014e7c <__mcmp+0x2c>
 8014e5e:	3214      	adds	r2, #20
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	3114      	adds	r1, #20
 8014e64:	0014      	movs	r4, r2
 8014e66:	18c9      	adds	r1, r1, r3
 8014e68:	18d2      	adds	r2, r2, r3
 8014e6a:	3a04      	subs	r2, #4
 8014e6c:	3904      	subs	r1, #4
 8014e6e:	6815      	ldr	r5, [r2, #0]
 8014e70:	680b      	ldr	r3, [r1, #0]
 8014e72:	429d      	cmp	r5, r3
 8014e74:	d003      	beq.n	8014e7e <__mcmp+0x2e>
 8014e76:	2001      	movs	r0, #1
 8014e78:	429d      	cmp	r5, r3
 8014e7a:	d303      	bcc.n	8014e84 <__mcmp+0x34>
 8014e7c:	bd30      	pop	{r4, r5, pc}
 8014e7e:	4294      	cmp	r4, r2
 8014e80:	d3f3      	bcc.n	8014e6a <__mcmp+0x1a>
 8014e82:	e7fb      	b.n	8014e7c <__mcmp+0x2c>
 8014e84:	4240      	negs	r0, r0
 8014e86:	e7f9      	b.n	8014e7c <__mcmp+0x2c>

08014e88 <__mdiff>:
 8014e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e8a:	000e      	movs	r6, r1
 8014e8c:	0007      	movs	r7, r0
 8014e8e:	0011      	movs	r1, r2
 8014e90:	0030      	movs	r0, r6
 8014e92:	b087      	sub	sp, #28
 8014e94:	0014      	movs	r4, r2
 8014e96:	f7ff ffdb 	bl	8014e50 <__mcmp>
 8014e9a:	1e05      	subs	r5, r0, #0
 8014e9c:	d110      	bne.n	8014ec0 <__mdiff+0x38>
 8014e9e:	0001      	movs	r1, r0
 8014ea0:	0038      	movs	r0, r7
 8014ea2:	f7ff fd03 	bl	80148ac <_Balloc>
 8014ea6:	1e02      	subs	r2, r0, #0
 8014ea8:	d104      	bne.n	8014eb4 <__mdiff+0x2c>
 8014eaa:	4b3f      	ldr	r3, [pc, #252]	; (8014fa8 <__mdiff+0x120>)
 8014eac:	483f      	ldr	r0, [pc, #252]	; (8014fac <__mdiff+0x124>)
 8014eae:	4940      	ldr	r1, [pc, #256]	; (8014fb0 <__mdiff+0x128>)
 8014eb0:	f7fe fa88 	bl	80133c4 <__assert_func>
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	6145      	str	r5, [r0, #20]
 8014eb8:	6103      	str	r3, [r0, #16]
 8014eba:	0010      	movs	r0, r2
 8014ebc:	b007      	add	sp, #28
 8014ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	9301      	str	r3, [sp, #4]
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	db04      	blt.n	8014ed2 <__mdiff+0x4a>
 8014ec8:	0023      	movs	r3, r4
 8014eca:	0034      	movs	r4, r6
 8014ecc:	001e      	movs	r6, r3
 8014ece:	2300      	movs	r3, #0
 8014ed0:	9301      	str	r3, [sp, #4]
 8014ed2:	0038      	movs	r0, r7
 8014ed4:	6861      	ldr	r1, [r4, #4]
 8014ed6:	f7ff fce9 	bl	80148ac <_Balloc>
 8014eda:	1e02      	subs	r2, r0, #0
 8014edc:	d103      	bne.n	8014ee6 <__mdiff+0x5e>
 8014ede:	4b32      	ldr	r3, [pc, #200]	; (8014fa8 <__mdiff+0x120>)
 8014ee0:	4832      	ldr	r0, [pc, #200]	; (8014fac <__mdiff+0x124>)
 8014ee2:	4934      	ldr	r1, [pc, #208]	; (8014fb4 <__mdiff+0x12c>)
 8014ee4:	e7e4      	b.n	8014eb0 <__mdiff+0x28>
 8014ee6:	9b01      	ldr	r3, [sp, #4]
 8014ee8:	2700      	movs	r7, #0
 8014eea:	60c3      	str	r3, [r0, #12]
 8014eec:	6920      	ldr	r0, [r4, #16]
 8014eee:	3414      	adds	r4, #20
 8014ef0:	0083      	lsls	r3, r0, #2
 8014ef2:	18e3      	adds	r3, r4, r3
 8014ef4:	0021      	movs	r1, r4
 8014ef6:	9401      	str	r4, [sp, #4]
 8014ef8:	0034      	movs	r4, r6
 8014efa:	9302      	str	r3, [sp, #8]
 8014efc:	6933      	ldr	r3, [r6, #16]
 8014efe:	3414      	adds	r4, #20
 8014f00:	009b      	lsls	r3, r3, #2
 8014f02:	18e3      	adds	r3, r4, r3
 8014f04:	9303      	str	r3, [sp, #12]
 8014f06:	0013      	movs	r3, r2
 8014f08:	3314      	adds	r3, #20
 8014f0a:	469c      	mov	ip, r3
 8014f0c:	9305      	str	r3, [sp, #20]
 8014f0e:	9104      	str	r1, [sp, #16]
 8014f10:	9b04      	ldr	r3, [sp, #16]
 8014f12:	cc02      	ldmia	r4!, {r1}
 8014f14:	cb20      	ldmia	r3!, {r5}
 8014f16:	9304      	str	r3, [sp, #16]
 8014f18:	b2ab      	uxth	r3, r5
 8014f1a:	19df      	adds	r7, r3, r7
 8014f1c:	b28b      	uxth	r3, r1
 8014f1e:	1afb      	subs	r3, r7, r3
 8014f20:	0c09      	lsrs	r1, r1, #16
 8014f22:	0c2d      	lsrs	r5, r5, #16
 8014f24:	1a6d      	subs	r5, r5, r1
 8014f26:	1419      	asrs	r1, r3, #16
 8014f28:	1869      	adds	r1, r5, r1
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	140f      	asrs	r7, r1, #16
 8014f2e:	0409      	lsls	r1, r1, #16
 8014f30:	4319      	orrs	r1, r3
 8014f32:	4663      	mov	r3, ip
 8014f34:	c302      	stmia	r3!, {r1}
 8014f36:	469c      	mov	ip, r3
 8014f38:	9b03      	ldr	r3, [sp, #12]
 8014f3a:	42a3      	cmp	r3, r4
 8014f3c:	d8e8      	bhi.n	8014f10 <__mdiff+0x88>
 8014f3e:	0031      	movs	r1, r6
 8014f40:	9c03      	ldr	r4, [sp, #12]
 8014f42:	3115      	adds	r1, #21
 8014f44:	2304      	movs	r3, #4
 8014f46:	428c      	cmp	r4, r1
 8014f48:	d304      	bcc.n	8014f54 <__mdiff+0xcc>
 8014f4a:	1ba3      	subs	r3, r4, r6
 8014f4c:	3b15      	subs	r3, #21
 8014f4e:	089b      	lsrs	r3, r3, #2
 8014f50:	3301      	adds	r3, #1
 8014f52:	009b      	lsls	r3, r3, #2
 8014f54:	9901      	ldr	r1, [sp, #4]
 8014f56:	18cd      	adds	r5, r1, r3
 8014f58:	9905      	ldr	r1, [sp, #20]
 8014f5a:	002e      	movs	r6, r5
 8014f5c:	18cb      	adds	r3, r1, r3
 8014f5e:	469c      	mov	ip, r3
 8014f60:	9902      	ldr	r1, [sp, #8]
 8014f62:	428e      	cmp	r6, r1
 8014f64:	d310      	bcc.n	8014f88 <__mdiff+0x100>
 8014f66:	9e02      	ldr	r6, [sp, #8]
 8014f68:	1ee9      	subs	r1, r5, #3
 8014f6a:	2400      	movs	r4, #0
 8014f6c:	428e      	cmp	r6, r1
 8014f6e:	d304      	bcc.n	8014f7a <__mdiff+0xf2>
 8014f70:	0031      	movs	r1, r6
 8014f72:	3103      	adds	r1, #3
 8014f74:	1b49      	subs	r1, r1, r5
 8014f76:	0889      	lsrs	r1, r1, #2
 8014f78:	008c      	lsls	r4, r1, #2
 8014f7a:	191b      	adds	r3, r3, r4
 8014f7c:	3b04      	subs	r3, #4
 8014f7e:	6819      	ldr	r1, [r3, #0]
 8014f80:	2900      	cmp	r1, #0
 8014f82:	d00f      	beq.n	8014fa4 <__mdiff+0x11c>
 8014f84:	6110      	str	r0, [r2, #16]
 8014f86:	e798      	b.n	8014eba <__mdiff+0x32>
 8014f88:	ce02      	ldmia	r6!, {r1}
 8014f8a:	b28c      	uxth	r4, r1
 8014f8c:	19e4      	adds	r4, r4, r7
 8014f8e:	0c0f      	lsrs	r7, r1, #16
 8014f90:	1421      	asrs	r1, r4, #16
 8014f92:	1879      	adds	r1, r7, r1
 8014f94:	b2a4      	uxth	r4, r4
 8014f96:	140f      	asrs	r7, r1, #16
 8014f98:	0409      	lsls	r1, r1, #16
 8014f9a:	4321      	orrs	r1, r4
 8014f9c:	4664      	mov	r4, ip
 8014f9e:	c402      	stmia	r4!, {r1}
 8014fa0:	46a4      	mov	ip, r4
 8014fa2:	e7dd      	b.n	8014f60 <__mdiff+0xd8>
 8014fa4:	3801      	subs	r0, #1
 8014fa6:	e7e9      	b.n	8014f7c <__mdiff+0xf4>
 8014fa8:	080187fc 	.word	0x080187fc
 8014fac:	0801886d 	.word	0x0801886d
 8014fb0:	00000237 	.word	0x00000237
 8014fb4:	00000245 	.word	0x00000245

08014fb8 <__ulp>:
 8014fb8:	2000      	movs	r0, #0
 8014fba:	4b0b      	ldr	r3, [pc, #44]	; (8014fe8 <__ulp+0x30>)
 8014fbc:	4019      	ands	r1, r3
 8014fbe:	4b0b      	ldr	r3, [pc, #44]	; (8014fec <__ulp+0x34>)
 8014fc0:	18c9      	adds	r1, r1, r3
 8014fc2:	4281      	cmp	r1, r0
 8014fc4:	dc06      	bgt.n	8014fd4 <__ulp+0x1c>
 8014fc6:	4249      	negs	r1, r1
 8014fc8:	150b      	asrs	r3, r1, #20
 8014fca:	2b13      	cmp	r3, #19
 8014fcc:	dc03      	bgt.n	8014fd6 <__ulp+0x1e>
 8014fce:	2180      	movs	r1, #128	; 0x80
 8014fd0:	0309      	lsls	r1, r1, #12
 8014fd2:	4119      	asrs	r1, r3
 8014fd4:	4770      	bx	lr
 8014fd6:	3b14      	subs	r3, #20
 8014fd8:	2001      	movs	r0, #1
 8014fda:	2b1e      	cmp	r3, #30
 8014fdc:	dc02      	bgt.n	8014fe4 <__ulp+0x2c>
 8014fde:	2080      	movs	r0, #128	; 0x80
 8014fe0:	0600      	lsls	r0, r0, #24
 8014fe2:	40d8      	lsrs	r0, r3
 8014fe4:	2100      	movs	r1, #0
 8014fe6:	e7f5      	b.n	8014fd4 <__ulp+0x1c>
 8014fe8:	7ff00000 	.word	0x7ff00000
 8014fec:	fcc00000 	.word	0xfcc00000

08014ff0 <__b2d>:
 8014ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ff2:	0006      	movs	r6, r0
 8014ff4:	6903      	ldr	r3, [r0, #16]
 8014ff6:	3614      	adds	r6, #20
 8014ff8:	009b      	lsls	r3, r3, #2
 8014ffa:	18f3      	adds	r3, r6, r3
 8014ffc:	1f1d      	subs	r5, r3, #4
 8014ffe:	682c      	ldr	r4, [r5, #0]
 8015000:	000f      	movs	r7, r1
 8015002:	0020      	movs	r0, r4
 8015004:	9301      	str	r3, [sp, #4]
 8015006:	f7ff fd49 	bl	8014a9c <__hi0bits>
 801500a:	2220      	movs	r2, #32
 801500c:	1a12      	subs	r2, r2, r0
 801500e:	603a      	str	r2, [r7, #0]
 8015010:	0003      	movs	r3, r0
 8015012:	4a1c      	ldr	r2, [pc, #112]	; (8015084 <__b2d+0x94>)
 8015014:	280a      	cmp	r0, #10
 8015016:	dc15      	bgt.n	8015044 <__b2d+0x54>
 8015018:	210b      	movs	r1, #11
 801501a:	0027      	movs	r7, r4
 801501c:	1a09      	subs	r1, r1, r0
 801501e:	40cf      	lsrs	r7, r1
 8015020:	433a      	orrs	r2, r7
 8015022:	468c      	mov	ip, r1
 8015024:	0011      	movs	r1, r2
 8015026:	2200      	movs	r2, #0
 8015028:	42ae      	cmp	r6, r5
 801502a:	d202      	bcs.n	8015032 <__b2d+0x42>
 801502c:	9a01      	ldr	r2, [sp, #4]
 801502e:	3a08      	subs	r2, #8
 8015030:	6812      	ldr	r2, [r2, #0]
 8015032:	3315      	adds	r3, #21
 8015034:	409c      	lsls	r4, r3
 8015036:	4663      	mov	r3, ip
 8015038:	0027      	movs	r7, r4
 801503a:	40da      	lsrs	r2, r3
 801503c:	4317      	orrs	r7, r2
 801503e:	0038      	movs	r0, r7
 8015040:	b003      	add	sp, #12
 8015042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015044:	2700      	movs	r7, #0
 8015046:	42ae      	cmp	r6, r5
 8015048:	d202      	bcs.n	8015050 <__b2d+0x60>
 801504a:	9d01      	ldr	r5, [sp, #4]
 801504c:	3d08      	subs	r5, #8
 801504e:	682f      	ldr	r7, [r5, #0]
 8015050:	210b      	movs	r1, #11
 8015052:	4249      	negs	r1, r1
 8015054:	468c      	mov	ip, r1
 8015056:	449c      	add	ip, r3
 8015058:	2b0b      	cmp	r3, #11
 801505a:	d010      	beq.n	801507e <__b2d+0x8e>
 801505c:	4661      	mov	r1, ip
 801505e:	2320      	movs	r3, #32
 8015060:	408c      	lsls	r4, r1
 8015062:	1a5b      	subs	r3, r3, r1
 8015064:	0039      	movs	r1, r7
 8015066:	40d9      	lsrs	r1, r3
 8015068:	430c      	orrs	r4, r1
 801506a:	4322      	orrs	r2, r4
 801506c:	0011      	movs	r1, r2
 801506e:	2200      	movs	r2, #0
 8015070:	42b5      	cmp	r5, r6
 8015072:	d901      	bls.n	8015078 <__b2d+0x88>
 8015074:	3d04      	subs	r5, #4
 8015076:	682a      	ldr	r2, [r5, #0]
 8015078:	4664      	mov	r4, ip
 801507a:	40a7      	lsls	r7, r4
 801507c:	e7dd      	b.n	801503a <__b2d+0x4a>
 801507e:	4322      	orrs	r2, r4
 8015080:	0011      	movs	r1, r2
 8015082:	e7dc      	b.n	801503e <__b2d+0x4e>
 8015084:	3ff00000 	.word	0x3ff00000

08015088 <__d2b>:
 8015088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801508a:	2101      	movs	r1, #1
 801508c:	0014      	movs	r4, r2
 801508e:	001d      	movs	r5, r3
 8015090:	9f08      	ldr	r7, [sp, #32]
 8015092:	f7ff fc0b 	bl	80148ac <_Balloc>
 8015096:	1e06      	subs	r6, r0, #0
 8015098:	d105      	bne.n	80150a6 <__d2b+0x1e>
 801509a:	0032      	movs	r2, r6
 801509c:	4b24      	ldr	r3, [pc, #144]	; (8015130 <__d2b+0xa8>)
 801509e:	4825      	ldr	r0, [pc, #148]	; (8015134 <__d2b+0xac>)
 80150a0:	4925      	ldr	r1, [pc, #148]	; (8015138 <__d2b+0xb0>)
 80150a2:	f7fe f98f 	bl	80133c4 <__assert_func>
 80150a6:	032b      	lsls	r3, r5, #12
 80150a8:	006d      	lsls	r5, r5, #1
 80150aa:	0b1b      	lsrs	r3, r3, #12
 80150ac:	0d6d      	lsrs	r5, r5, #21
 80150ae:	d125      	bne.n	80150fc <__d2b+0x74>
 80150b0:	9301      	str	r3, [sp, #4]
 80150b2:	2c00      	cmp	r4, #0
 80150b4:	d028      	beq.n	8015108 <__d2b+0x80>
 80150b6:	4668      	mov	r0, sp
 80150b8:	9400      	str	r4, [sp, #0]
 80150ba:	f7ff fd09 	bl	8014ad0 <__lo0bits>
 80150be:	9b01      	ldr	r3, [sp, #4]
 80150c0:	9900      	ldr	r1, [sp, #0]
 80150c2:	2800      	cmp	r0, #0
 80150c4:	d01e      	beq.n	8015104 <__d2b+0x7c>
 80150c6:	2220      	movs	r2, #32
 80150c8:	001c      	movs	r4, r3
 80150ca:	1a12      	subs	r2, r2, r0
 80150cc:	4094      	lsls	r4, r2
 80150ce:	0022      	movs	r2, r4
 80150d0:	40c3      	lsrs	r3, r0
 80150d2:	430a      	orrs	r2, r1
 80150d4:	6172      	str	r2, [r6, #20]
 80150d6:	9301      	str	r3, [sp, #4]
 80150d8:	9c01      	ldr	r4, [sp, #4]
 80150da:	61b4      	str	r4, [r6, #24]
 80150dc:	1e63      	subs	r3, r4, #1
 80150de:	419c      	sbcs	r4, r3
 80150e0:	3401      	adds	r4, #1
 80150e2:	6134      	str	r4, [r6, #16]
 80150e4:	2d00      	cmp	r5, #0
 80150e6:	d017      	beq.n	8015118 <__d2b+0x90>
 80150e8:	2435      	movs	r4, #53	; 0x35
 80150ea:	4b14      	ldr	r3, [pc, #80]	; (801513c <__d2b+0xb4>)
 80150ec:	18ed      	adds	r5, r5, r3
 80150ee:	182d      	adds	r5, r5, r0
 80150f0:	603d      	str	r5, [r7, #0]
 80150f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f4:	1a24      	subs	r4, r4, r0
 80150f6:	601c      	str	r4, [r3, #0]
 80150f8:	0030      	movs	r0, r6
 80150fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80150fc:	2280      	movs	r2, #128	; 0x80
 80150fe:	0352      	lsls	r2, r2, #13
 8015100:	4313      	orrs	r3, r2
 8015102:	e7d5      	b.n	80150b0 <__d2b+0x28>
 8015104:	6171      	str	r1, [r6, #20]
 8015106:	e7e7      	b.n	80150d8 <__d2b+0x50>
 8015108:	a801      	add	r0, sp, #4
 801510a:	f7ff fce1 	bl	8014ad0 <__lo0bits>
 801510e:	9b01      	ldr	r3, [sp, #4]
 8015110:	2401      	movs	r4, #1
 8015112:	6173      	str	r3, [r6, #20]
 8015114:	3020      	adds	r0, #32
 8015116:	e7e4      	b.n	80150e2 <__d2b+0x5a>
 8015118:	4b09      	ldr	r3, [pc, #36]	; (8015140 <__d2b+0xb8>)
 801511a:	18c0      	adds	r0, r0, r3
 801511c:	4b09      	ldr	r3, [pc, #36]	; (8015144 <__d2b+0xbc>)
 801511e:	6038      	str	r0, [r7, #0]
 8015120:	18e3      	adds	r3, r4, r3
 8015122:	009b      	lsls	r3, r3, #2
 8015124:	18f3      	adds	r3, r6, r3
 8015126:	6958      	ldr	r0, [r3, #20]
 8015128:	f7ff fcb8 	bl	8014a9c <__hi0bits>
 801512c:	0164      	lsls	r4, r4, #5
 801512e:	e7e0      	b.n	80150f2 <__d2b+0x6a>
 8015130:	080187fc 	.word	0x080187fc
 8015134:	0801886d 	.word	0x0801886d
 8015138:	0000030f 	.word	0x0000030f
 801513c:	fffffbcd 	.word	0xfffffbcd
 8015140:	fffffbce 	.word	0xfffffbce
 8015144:	3fffffff 	.word	0x3fffffff

08015148 <__ratio>:
 8015148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801514a:	b087      	sub	sp, #28
 801514c:	000f      	movs	r7, r1
 801514e:	a904      	add	r1, sp, #16
 8015150:	0006      	movs	r6, r0
 8015152:	f7ff ff4d 	bl	8014ff0 <__b2d>
 8015156:	9000      	str	r0, [sp, #0]
 8015158:	9101      	str	r1, [sp, #4]
 801515a:	9c00      	ldr	r4, [sp, #0]
 801515c:	9d01      	ldr	r5, [sp, #4]
 801515e:	0038      	movs	r0, r7
 8015160:	a905      	add	r1, sp, #20
 8015162:	f7ff ff45 	bl	8014ff0 <__b2d>
 8015166:	9002      	str	r0, [sp, #8]
 8015168:	9103      	str	r1, [sp, #12]
 801516a:	9a02      	ldr	r2, [sp, #8]
 801516c:	9b03      	ldr	r3, [sp, #12]
 801516e:	6930      	ldr	r0, [r6, #16]
 8015170:	6939      	ldr	r1, [r7, #16]
 8015172:	9e04      	ldr	r6, [sp, #16]
 8015174:	1a40      	subs	r0, r0, r1
 8015176:	9905      	ldr	r1, [sp, #20]
 8015178:	0140      	lsls	r0, r0, #5
 801517a:	1a71      	subs	r1, r6, r1
 801517c:	1841      	adds	r1, r0, r1
 801517e:	0508      	lsls	r0, r1, #20
 8015180:	2900      	cmp	r1, #0
 8015182:	dd07      	ble.n	8015194 <__ratio+0x4c>
 8015184:	9901      	ldr	r1, [sp, #4]
 8015186:	1845      	adds	r5, r0, r1
 8015188:	0020      	movs	r0, r4
 801518a:	0029      	movs	r1, r5
 801518c:	f7ec fca8 	bl	8001ae0 <__aeabi_ddiv>
 8015190:	b007      	add	sp, #28
 8015192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015194:	9903      	ldr	r1, [sp, #12]
 8015196:	1a0b      	subs	r3, r1, r0
 8015198:	e7f6      	b.n	8015188 <__ratio+0x40>

0801519a <__copybits>:
 801519a:	b570      	push	{r4, r5, r6, lr}
 801519c:	0014      	movs	r4, r2
 801519e:	0005      	movs	r5, r0
 80151a0:	3901      	subs	r1, #1
 80151a2:	6913      	ldr	r3, [r2, #16]
 80151a4:	1149      	asrs	r1, r1, #5
 80151a6:	3101      	adds	r1, #1
 80151a8:	0089      	lsls	r1, r1, #2
 80151aa:	3414      	adds	r4, #20
 80151ac:	009b      	lsls	r3, r3, #2
 80151ae:	1841      	adds	r1, r0, r1
 80151b0:	18e3      	adds	r3, r4, r3
 80151b2:	42a3      	cmp	r3, r4
 80151b4:	d80d      	bhi.n	80151d2 <__copybits+0x38>
 80151b6:	0014      	movs	r4, r2
 80151b8:	3411      	adds	r4, #17
 80151ba:	2500      	movs	r5, #0
 80151bc:	429c      	cmp	r4, r3
 80151be:	d803      	bhi.n	80151c8 <__copybits+0x2e>
 80151c0:	1a9b      	subs	r3, r3, r2
 80151c2:	3b11      	subs	r3, #17
 80151c4:	089b      	lsrs	r3, r3, #2
 80151c6:	009d      	lsls	r5, r3, #2
 80151c8:	2300      	movs	r3, #0
 80151ca:	1940      	adds	r0, r0, r5
 80151cc:	4281      	cmp	r1, r0
 80151ce:	d803      	bhi.n	80151d8 <__copybits+0x3e>
 80151d0:	bd70      	pop	{r4, r5, r6, pc}
 80151d2:	cc40      	ldmia	r4!, {r6}
 80151d4:	c540      	stmia	r5!, {r6}
 80151d6:	e7ec      	b.n	80151b2 <__copybits+0x18>
 80151d8:	c008      	stmia	r0!, {r3}
 80151da:	e7f7      	b.n	80151cc <__copybits+0x32>

080151dc <__any_on>:
 80151dc:	0002      	movs	r2, r0
 80151de:	6900      	ldr	r0, [r0, #16]
 80151e0:	b510      	push	{r4, lr}
 80151e2:	3214      	adds	r2, #20
 80151e4:	114b      	asrs	r3, r1, #5
 80151e6:	4298      	cmp	r0, r3
 80151e8:	db13      	blt.n	8015212 <__any_on+0x36>
 80151ea:	dd0c      	ble.n	8015206 <__any_on+0x2a>
 80151ec:	241f      	movs	r4, #31
 80151ee:	0008      	movs	r0, r1
 80151f0:	4020      	ands	r0, r4
 80151f2:	4221      	tst	r1, r4
 80151f4:	d007      	beq.n	8015206 <__any_on+0x2a>
 80151f6:	0099      	lsls	r1, r3, #2
 80151f8:	588c      	ldr	r4, [r1, r2]
 80151fa:	0021      	movs	r1, r4
 80151fc:	40c1      	lsrs	r1, r0
 80151fe:	4081      	lsls	r1, r0
 8015200:	2001      	movs	r0, #1
 8015202:	428c      	cmp	r4, r1
 8015204:	d104      	bne.n	8015210 <__any_on+0x34>
 8015206:	009b      	lsls	r3, r3, #2
 8015208:	18d3      	adds	r3, r2, r3
 801520a:	4293      	cmp	r3, r2
 801520c:	d803      	bhi.n	8015216 <__any_on+0x3a>
 801520e:	2000      	movs	r0, #0
 8015210:	bd10      	pop	{r4, pc}
 8015212:	0003      	movs	r3, r0
 8015214:	e7f7      	b.n	8015206 <__any_on+0x2a>
 8015216:	3b04      	subs	r3, #4
 8015218:	6819      	ldr	r1, [r3, #0]
 801521a:	2900      	cmp	r1, #0
 801521c:	d0f5      	beq.n	801520a <__any_on+0x2e>
 801521e:	2001      	movs	r0, #1
 8015220:	e7f6      	b.n	8015210 <__any_on+0x34>

08015222 <__ascii_wctomb>:
 8015222:	0003      	movs	r3, r0
 8015224:	1e08      	subs	r0, r1, #0
 8015226:	d005      	beq.n	8015234 <__ascii_wctomb+0x12>
 8015228:	2aff      	cmp	r2, #255	; 0xff
 801522a:	d904      	bls.n	8015236 <__ascii_wctomb+0x14>
 801522c:	228a      	movs	r2, #138	; 0x8a
 801522e:	2001      	movs	r0, #1
 8015230:	601a      	str	r2, [r3, #0]
 8015232:	4240      	negs	r0, r0
 8015234:	4770      	bx	lr
 8015236:	2001      	movs	r0, #1
 8015238:	700a      	strb	r2, [r1, #0]
 801523a:	e7fb      	b.n	8015234 <__ascii_wctomb+0x12>

0801523c <__ssputs_r>:
 801523c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801523e:	b085      	sub	sp, #20
 8015240:	9301      	str	r3, [sp, #4]
 8015242:	9203      	str	r2, [sp, #12]
 8015244:	688e      	ldr	r6, [r1, #8]
 8015246:	9a01      	ldr	r2, [sp, #4]
 8015248:	0007      	movs	r7, r0
 801524a:	000c      	movs	r4, r1
 801524c:	680b      	ldr	r3, [r1, #0]
 801524e:	4296      	cmp	r6, r2
 8015250:	d831      	bhi.n	80152b6 <__ssputs_r+0x7a>
 8015252:	898a      	ldrh	r2, [r1, #12]
 8015254:	2190      	movs	r1, #144	; 0x90
 8015256:	00c9      	lsls	r1, r1, #3
 8015258:	420a      	tst	r2, r1
 801525a:	d029      	beq.n	80152b0 <__ssputs_r+0x74>
 801525c:	2003      	movs	r0, #3
 801525e:	6921      	ldr	r1, [r4, #16]
 8015260:	1a5b      	subs	r3, r3, r1
 8015262:	9302      	str	r3, [sp, #8]
 8015264:	6963      	ldr	r3, [r4, #20]
 8015266:	4343      	muls	r3, r0
 8015268:	0fdd      	lsrs	r5, r3, #31
 801526a:	18ed      	adds	r5, r5, r3
 801526c:	9b01      	ldr	r3, [sp, #4]
 801526e:	9802      	ldr	r0, [sp, #8]
 8015270:	3301      	adds	r3, #1
 8015272:	181b      	adds	r3, r3, r0
 8015274:	106d      	asrs	r5, r5, #1
 8015276:	42ab      	cmp	r3, r5
 8015278:	d900      	bls.n	801527c <__ssputs_r+0x40>
 801527a:	001d      	movs	r5, r3
 801527c:	0552      	lsls	r2, r2, #21
 801527e:	d529      	bpl.n	80152d4 <__ssputs_r+0x98>
 8015280:	0029      	movs	r1, r5
 8015282:	0038      	movs	r0, r7
 8015284:	f7fb ff78 	bl	8011178 <_malloc_r>
 8015288:	1e06      	subs	r6, r0, #0
 801528a:	d02d      	beq.n	80152e8 <__ssputs_r+0xac>
 801528c:	9a02      	ldr	r2, [sp, #8]
 801528e:	6921      	ldr	r1, [r4, #16]
 8015290:	f7fe f884 	bl	801339c <memcpy>
 8015294:	89a2      	ldrh	r2, [r4, #12]
 8015296:	4b19      	ldr	r3, [pc, #100]	; (80152fc <__ssputs_r+0xc0>)
 8015298:	401a      	ands	r2, r3
 801529a:	2380      	movs	r3, #128	; 0x80
 801529c:	4313      	orrs	r3, r2
 801529e:	81a3      	strh	r3, [r4, #12]
 80152a0:	9b02      	ldr	r3, [sp, #8]
 80152a2:	6126      	str	r6, [r4, #16]
 80152a4:	18f6      	adds	r6, r6, r3
 80152a6:	6026      	str	r6, [r4, #0]
 80152a8:	6165      	str	r5, [r4, #20]
 80152aa:	9e01      	ldr	r6, [sp, #4]
 80152ac:	1aed      	subs	r5, r5, r3
 80152ae:	60a5      	str	r5, [r4, #8]
 80152b0:	9b01      	ldr	r3, [sp, #4]
 80152b2:	429e      	cmp	r6, r3
 80152b4:	d900      	bls.n	80152b8 <__ssputs_r+0x7c>
 80152b6:	9e01      	ldr	r6, [sp, #4]
 80152b8:	0032      	movs	r2, r6
 80152ba:	9903      	ldr	r1, [sp, #12]
 80152bc:	6820      	ldr	r0, [r4, #0]
 80152be:	f000 f9e5 	bl	801568c <memmove>
 80152c2:	2000      	movs	r0, #0
 80152c4:	68a3      	ldr	r3, [r4, #8]
 80152c6:	1b9b      	subs	r3, r3, r6
 80152c8:	60a3      	str	r3, [r4, #8]
 80152ca:	6823      	ldr	r3, [r4, #0]
 80152cc:	199b      	adds	r3, r3, r6
 80152ce:	6023      	str	r3, [r4, #0]
 80152d0:	b005      	add	sp, #20
 80152d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152d4:	002a      	movs	r2, r5
 80152d6:	0038      	movs	r0, r7
 80152d8:	f000 fa1f 	bl	801571a <_realloc_r>
 80152dc:	1e06      	subs	r6, r0, #0
 80152de:	d1df      	bne.n	80152a0 <__ssputs_r+0x64>
 80152e0:	0038      	movs	r0, r7
 80152e2:	6921      	ldr	r1, [r4, #16]
 80152e4:	f7fe ff2a 	bl	801413c <_free_r>
 80152e8:	230c      	movs	r3, #12
 80152ea:	2001      	movs	r0, #1
 80152ec:	603b      	str	r3, [r7, #0]
 80152ee:	89a2      	ldrh	r2, [r4, #12]
 80152f0:	3334      	adds	r3, #52	; 0x34
 80152f2:	4313      	orrs	r3, r2
 80152f4:	81a3      	strh	r3, [r4, #12]
 80152f6:	4240      	negs	r0, r0
 80152f8:	e7ea      	b.n	80152d0 <__ssputs_r+0x94>
 80152fa:	46c0      	nop			; (mov r8, r8)
 80152fc:	fffffb7f 	.word	0xfffffb7f

08015300 <_svfiprintf_r>:
 8015300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015302:	b0a1      	sub	sp, #132	; 0x84
 8015304:	9003      	str	r0, [sp, #12]
 8015306:	001d      	movs	r5, r3
 8015308:	898b      	ldrh	r3, [r1, #12]
 801530a:	000f      	movs	r7, r1
 801530c:	0016      	movs	r6, r2
 801530e:	061b      	lsls	r3, r3, #24
 8015310:	d511      	bpl.n	8015336 <_svfiprintf_r+0x36>
 8015312:	690b      	ldr	r3, [r1, #16]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d10e      	bne.n	8015336 <_svfiprintf_r+0x36>
 8015318:	2140      	movs	r1, #64	; 0x40
 801531a:	f7fb ff2d 	bl	8011178 <_malloc_r>
 801531e:	6038      	str	r0, [r7, #0]
 8015320:	6138      	str	r0, [r7, #16]
 8015322:	2800      	cmp	r0, #0
 8015324:	d105      	bne.n	8015332 <_svfiprintf_r+0x32>
 8015326:	230c      	movs	r3, #12
 8015328:	9a03      	ldr	r2, [sp, #12]
 801532a:	3801      	subs	r0, #1
 801532c:	6013      	str	r3, [r2, #0]
 801532e:	b021      	add	sp, #132	; 0x84
 8015330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015332:	2340      	movs	r3, #64	; 0x40
 8015334:	617b      	str	r3, [r7, #20]
 8015336:	2300      	movs	r3, #0
 8015338:	ac08      	add	r4, sp, #32
 801533a:	6163      	str	r3, [r4, #20]
 801533c:	3320      	adds	r3, #32
 801533e:	7663      	strb	r3, [r4, #25]
 8015340:	3310      	adds	r3, #16
 8015342:	76a3      	strb	r3, [r4, #26]
 8015344:	9507      	str	r5, [sp, #28]
 8015346:	0035      	movs	r5, r6
 8015348:	782b      	ldrb	r3, [r5, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d001      	beq.n	8015352 <_svfiprintf_r+0x52>
 801534e:	2b25      	cmp	r3, #37	; 0x25
 8015350:	d148      	bne.n	80153e4 <_svfiprintf_r+0xe4>
 8015352:	1bab      	subs	r3, r5, r6
 8015354:	9305      	str	r3, [sp, #20]
 8015356:	42b5      	cmp	r5, r6
 8015358:	d00b      	beq.n	8015372 <_svfiprintf_r+0x72>
 801535a:	0032      	movs	r2, r6
 801535c:	0039      	movs	r1, r7
 801535e:	9803      	ldr	r0, [sp, #12]
 8015360:	f7ff ff6c 	bl	801523c <__ssputs_r>
 8015364:	3001      	adds	r0, #1
 8015366:	d100      	bne.n	801536a <_svfiprintf_r+0x6a>
 8015368:	e0af      	b.n	80154ca <_svfiprintf_r+0x1ca>
 801536a:	6963      	ldr	r3, [r4, #20]
 801536c:	9a05      	ldr	r2, [sp, #20]
 801536e:	189b      	adds	r3, r3, r2
 8015370:	6163      	str	r3, [r4, #20]
 8015372:	782b      	ldrb	r3, [r5, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d100      	bne.n	801537a <_svfiprintf_r+0x7a>
 8015378:	e0a7      	b.n	80154ca <_svfiprintf_r+0x1ca>
 801537a:	2201      	movs	r2, #1
 801537c:	2300      	movs	r3, #0
 801537e:	4252      	negs	r2, r2
 8015380:	6062      	str	r2, [r4, #4]
 8015382:	a904      	add	r1, sp, #16
 8015384:	3254      	adds	r2, #84	; 0x54
 8015386:	1852      	adds	r2, r2, r1
 8015388:	1c6e      	adds	r6, r5, #1
 801538a:	6023      	str	r3, [r4, #0]
 801538c:	60e3      	str	r3, [r4, #12]
 801538e:	60a3      	str	r3, [r4, #8]
 8015390:	7013      	strb	r3, [r2, #0]
 8015392:	65a3      	str	r3, [r4, #88]	; 0x58
 8015394:	4b55      	ldr	r3, [pc, #340]	; (80154ec <_svfiprintf_r+0x1ec>)
 8015396:	2205      	movs	r2, #5
 8015398:	0018      	movs	r0, r3
 801539a:	7831      	ldrb	r1, [r6, #0]
 801539c:	9305      	str	r3, [sp, #20]
 801539e:	f7fd fff2 	bl	8013386 <memchr>
 80153a2:	1c75      	adds	r5, r6, #1
 80153a4:	2800      	cmp	r0, #0
 80153a6:	d11f      	bne.n	80153e8 <_svfiprintf_r+0xe8>
 80153a8:	6822      	ldr	r2, [r4, #0]
 80153aa:	06d3      	lsls	r3, r2, #27
 80153ac:	d504      	bpl.n	80153b8 <_svfiprintf_r+0xb8>
 80153ae:	2353      	movs	r3, #83	; 0x53
 80153b0:	a904      	add	r1, sp, #16
 80153b2:	185b      	adds	r3, r3, r1
 80153b4:	2120      	movs	r1, #32
 80153b6:	7019      	strb	r1, [r3, #0]
 80153b8:	0713      	lsls	r3, r2, #28
 80153ba:	d504      	bpl.n	80153c6 <_svfiprintf_r+0xc6>
 80153bc:	2353      	movs	r3, #83	; 0x53
 80153be:	a904      	add	r1, sp, #16
 80153c0:	185b      	adds	r3, r3, r1
 80153c2:	212b      	movs	r1, #43	; 0x2b
 80153c4:	7019      	strb	r1, [r3, #0]
 80153c6:	7833      	ldrb	r3, [r6, #0]
 80153c8:	2b2a      	cmp	r3, #42	; 0x2a
 80153ca:	d016      	beq.n	80153fa <_svfiprintf_r+0xfa>
 80153cc:	0035      	movs	r5, r6
 80153ce:	2100      	movs	r1, #0
 80153d0:	200a      	movs	r0, #10
 80153d2:	68e3      	ldr	r3, [r4, #12]
 80153d4:	782a      	ldrb	r2, [r5, #0]
 80153d6:	1c6e      	adds	r6, r5, #1
 80153d8:	3a30      	subs	r2, #48	; 0x30
 80153da:	2a09      	cmp	r2, #9
 80153dc:	d94e      	bls.n	801547c <_svfiprintf_r+0x17c>
 80153de:	2900      	cmp	r1, #0
 80153e0:	d111      	bne.n	8015406 <_svfiprintf_r+0x106>
 80153e2:	e017      	b.n	8015414 <_svfiprintf_r+0x114>
 80153e4:	3501      	adds	r5, #1
 80153e6:	e7af      	b.n	8015348 <_svfiprintf_r+0x48>
 80153e8:	9b05      	ldr	r3, [sp, #20]
 80153ea:	6822      	ldr	r2, [r4, #0]
 80153ec:	1ac0      	subs	r0, r0, r3
 80153ee:	2301      	movs	r3, #1
 80153f0:	4083      	lsls	r3, r0
 80153f2:	4313      	orrs	r3, r2
 80153f4:	002e      	movs	r6, r5
 80153f6:	6023      	str	r3, [r4, #0]
 80153f8:	e7cc      	b.n	8015394 <_svfiprintf_r+0x94>
 80153fa:	9b07      	ldr	r3, [sp, #28]
 80153fc:	1d19      	adds	r1, r3, #4
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	9107      	str	r1, [sp, #28]
 8015402:	2b00      	cmp	r3, #0
 8015404:	db01      	blt.n	801540a <_svfiprintf_r+0x10a>
 8015406:	930b      	str	r3, [sp, #44]	; 0x2c
 8015408:	e004      	b.n	8015414 <_svfiprintf_r+0x114>
 801540a:	425b      	negs	r3, r3
 801540c:	60e3      	str	r3, [r4, #12]
 801540e:	2302      	movs	r3, #2
 8015410:	4313      	orrs	r3, r2
 8015412:	6023      	str	r3, [r4, #0]
 8015414:	782b      	ldrb	r3, [r5, #0]
 8015416:	2b2e      	cmp	r3, #46	; 0x2e
 8015418:	d10a      	bne.n	8015430 <_svfiprintf_r+0x130>
 801541a:	786b      	ldrb	r3, [r5, #1]
 801541c:	2b2a      	cmp	r3, #42	; 0x2a
 801541e:	d135      	bne.n	801548c <_svfiprintf_r+0x18c>
 8015420:	9b07      	ldr	r3, [sp, #28]
 8015422:	3502      	adds	r5, #2
 8015424:	1d1a      	adds	r2, r3, #4
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	9207      	str	r2, [sp, #28]
 801542a:	2b00      	cmp	r3, #0
 801542c:	db2b      	blt.n	8015486 <_svfiprintf_r+0x186>
 801542e:	9309      	str	r3, [sp, #36]	; 0x24
 8015430:	4e2f      	ldr	r6, [pc, #188]	; (80154f0 <_svfiprintf_r+0x1f0>)
 8015432:	2203      	movs	r2, #3
 8015434:	0030      	movs	r0, r6
 8015436:	7829      	ldrb	r1, [r5, #0]
 8015438:	f7fd ffa5 	bl	8013386 <memchr>
 801543c:	2800      	cmp	r0, #0
 801543e:	d006      	beq.n	801544e <_svfiprintf_r+0x14e>
 8015440:	2340      	movs	r3, #64	; 0x40
 8015442:	1b80      	subs	r0, r0, r6
 8015444:	4083      	lsls	r3, r0
 8015446:	6822      	ldr	r2, [r4, #0]
 8015448:	3501      	adds	r5, #1
 801544a:	4313      	orrs	r3, r2
 801544c:	6023      	str	r3, [r4, #0]
 801544e:	7829      	ldrb	r1, [r5, #0]
 8015450:	2206      	movs	r2, #6
 8015452:	4828      	ldr	r0, [pc, #160]	; (80154f4 <_svfiprintf_r+0x1f4>)
 8015454:	1c6e      	adds	r6, r5, #1
 8015456:	7621      	strb	r1, [r4, #24]
 8015458:	f7fd ff95 	bl	8013386 <memchr>
 801545c:	2800      	cmp	r0, #0
 801545e:	d03c      	beq.n	80154da <_svfiprintf_r+0x1da>
 8015460:	4b25      	ldr	r3, [pc, #148]	; (80154f8 <_svfiprintf_r+0x1f8>)
 8015462:	2b00      	cmp	r3, #0
 8015464:	d125      	bne.n	80154b2 <_svfiprintf_r+0x1b2>
 8015466:	2207      	movs	r2, #7
 8015468:	9b07      	ldr	r3, [sp, #28]
 801546a:	3307      	adds	r3, #7
 801546c:	4393      	bics	r3, r2
 801546e:	3308      	adds	r3, #8
 8015470:	9307      	str	r3, [sp, #28]
 8015472:	6963      	ldr	r3, [r4, #20]
 8015474:	9a04      	ldr	r2, [sp, #16]
 8015476:	189b      	adds	r3, r3, r2
 8015478:	6163      	str	r3, [r4, #20]
 801547a:	e764      	b.n	8015346 <_svfiprintf_r+0x46>
 801547c:	4343      	muls	r3, r0
 801547e:	0035      	movs	r5, r6
 8015480:	2101      	movs	r1, #1
 8015482:	189b      	adds	r3, r3, r2
 8015484:	e7a6      	b.n	80153d4 <_svfiprintf_r+0xd4>
 8015486:	2301      	movs	r3, #1
 8015488:	425b      	negs	r3, r3
 801548a:	e7d0      	b.n	801542e <_svfiprintf_r+0x12e>
 801548c:	2300      	movs	r3, #0
 801548e:	200a      	movs	r0, #10
 8015490:	001a      	movs	r2, r3
 8015492:	3501      	adds	r5, #1
 8015494:	6063      	str	r3, [r4, #4]
 8015496:	7829      	ldrb	r1, [r5, #0]
 8015498:	1c6e      	adds	r6, r5, #1
 801549a:	3930      	subs	r1, #48	; 0x30
 801549c:	2909      	cmp	r1, #9
 801549e:	d903      	bls.n	80154a8 <_svfiprintf_r+0x1a8>
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d0c5      	beq.n	8015430 <_svfiprintf_r+0x130>
 80154a4:	9209      	str	r2, [sp, #36]	; 0x24
 80154a6:	e7c3      	b.n	8015430 <_svfiprintf_r+0x130>
 80154a8:	4342      	muls	r2, r0
 80154aa:	0035      	movs	r5, r6
 80154ac:	2301      	movs	r3, #1
 80154ae:	1852      	adds	r2, r2, r1
 80154b0:	e7f1      	b.n	8015496 <_svfiprintf_r+0x196>
 80154b2:	aa07      	add	r2, sp, #28
 80154b4:	9200      	str	r2, [sp, #0]
 80154b6:	0021      	movs	r1, r4
 80154b8:	003a      	movs	r2, r7
 80154ba:	4b10      	ldr	r3, [pc, #64]	; (80154fc <_svfiprintf_r+0x1fc>)
 80154bc:	9803      	ldr	r0, [sp, #12]
 80154be:	f7fc fe63 	bl	8012188 <_printf_float>
 80154c2:	9004      	str	r0, [sp, #16]
 80154c4:	9b04      	ldr	r3, [sp, #16]
 80154c6:	3301      	adds	r3, #1
 80154c8:	d1d3      	bne.n	8015472 <_svfiprintf_r+0x172>
 80154ca:	89bb      	ldrh	r3, [r7, #12]
 80154cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80154ce:	065b      	lsls	r3, r3, #25
 80154d0:	d400      	bmi.n	80154d4 <_svfiprintf_r+0x1d4>
 80154d2:	e72c      	b.n	801532e <_svfiprintf_r+0x2e>
 80154d4:	2001      	movs	r0, #1
 80154d6:	4240      	negs	r0, r0
 80154d8:	e729      	b.n	801532e <_svfiprintf_r+0x2e>
 80154da:	aa07      	add	r2, sp, #28
 80154dc:	9200      	str	r2, [sp, #0]
 80154de:	0021      	movs	r1, r4
 80154e0:	003a      	movs	r2, r7
 80154e2:	4b06      	ldr	r3, [pc, #24]	; (80154fc <_svfiprintf_r+0x1fc>)
 80154e4:	9803      	ldr	r0, [sp, #12]
 80154e6:	f7fd f915 	bl	8012714 <_printf_i>
 80154ea:	e7ea      	b.n	80154c2 <_svfiprintf_r+0x1c2>
 80154ec:	080189c4 	.word	0x080189c4
 80154f0:	080189ca 	.word	0x080189ca
 80154f4:	080189ce 	.word	0x080189ce
 80154f8:	08012189 	.word	0x08012189
 80154fc:	0801523d 	.word	0x0801523d

08015500 <__sflush_r>:
 8015500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015502:	898b      	ldrh	r3, [r1, #12]
 8015504:	0005      	movs	r5, r0
 8015506:	000c      	movs	r4, r1
 8015508:	071a      	lsls	r2, r3, #28
 801550a:	d45c      	bmi.n	80155c6 <__sflush_r+0xc6>
 801550c:	684a      	ldr	r2, [r1, #4]
 801550e:	2a00      	cmp	r2, #0
 8015510:	dc04      	bgt.n	801551c <__sflush_r+0x1c>
 8015512:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8015514:	2a00      	cmp	r2, #0
 8015516:	dc01      	bgt.n	801551c <__sflush_r+0x1c>
 8015518:	2000      	movs	r0, #0
 801551a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801551c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801551e:	2f00      	cmp	r7, #0
 8015520:	d0fa      	beq.n	8015518 <__sflush_r+0x18>
 8015522:	2200      	movs	r2, #0
 8015524:	2080      	movs	r0, #128	; 0x80
 8015526:	682e      	ldr	r6, [r5, #0]
 8015528:	602a      	str	r2, [r5, #0]
 801552a:	001a      	movs	r2, r3
 801552c:	0140      	lsls	r0, r0, #5
 801552e:	6a21      	ldr	r1, [r4, #32]
 8015530:	4002      	ands	r2, r0
 8015532:	4203      	tst	r3, r0
 8015534:	d034      	beq.n	80155a0 <__sflush_r+0xa0>
 8015536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015538:	89a3      	ldrh	r3, [r4, #12]
 801553a:	075b      	lsls	r3, r3, #29
 801553c:	d506      	bpl.n	801554c <__sflush_r+0x4c>
 801553e:	6863      	ldr	r3, [r4, #4]
 8015540:	1ac0      	subs	r0, r0, r3
 8015542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015544:	2b00      	cmp	r3, #0
 8015546:	d001      	beq.n	801554c <__sflush_r+0x4c>
 8015548:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801554a:	1ac0      	subs	r0, r0, r3
 801554c:	0002      	movs	r2, r0
 801554e:	2300      	movs	r3, #0
 8015550:	0028      	movs	r0, r5
 8015552:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8015554:	6a21      	ldr	r1, [r4, #32]
 8015556:	47b8      	blx	r7
 8015558:	89a2      	ldrh	r2, [r4, #12]
 801555a:	1c43      	adds	r3, r0, #1
 801555c:	d106      	bne.n	801556c <__sflush_r+0x6c>
 801555e:	6829      	ldr	r1, [r5, #0]
 8015560:	291d      	cmp	r1, #29
 8015562:	d82c      	bhi.n	80155be <__sflush_r+0xbe>
 8015564:	4b2a      	ldr	r3, [pc, #168]	; (8015610 <__sflush_r+0x110>)
 8015566:	410b      	asrs	r3, r1
 8015568:	07db      	lsls	r3, r3, #31
 801556a:	d428      	bmi.n	80155be <__sflush_r+0xbe>
 801556c:	2300      	movs	r3, #0
 801556e:	6063      	str	r3, [r4, #4]
 8015570:	6923      	ldr	r3, [r4, #16]
 8015572:	6023      	str	r3, [r4, #0]
 8015574:	04d2      	lsls	r2, r2, #19
 8015576:	d505      	bpl.n	8015584 <__sflush_r+0x84>
 8015578:	1c43      	adds	r3, r0, #1
 801557a:	d102      	bne.n	8015582 <__sflush_r+0x82>
 801557c:	682b      	ldr	r3, [r5, #0]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d100      	bne.n	8015584 <__sflush_r+0x84>
 8015582:	6560      	str	r0, [r4, #84]	; 0x54
 8015584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015586:	602e      	str	r6, [r5, #0]
 8015588:	2900      	cmp	r1, #0
 801558a:	d0c5      	beq.n	8015518 <__sflush_r+0x18>
 801558c:	0023      	movs	r3, r4
 801558e:	3344      	adds	r3, #68	; 0x44
 8015590:	4299      	cmp	r1, r3
 8015592:	d002      	beq.n	801559a <__sflush_r+0x9a>
 8015594:	0028      	movs	r0, r5
 8015596:	f7fe fdd1 	bl	801413c <_free_r>
 801559a:	2000      	movs	r0, #0
 801559c:	6360      	str	r0, [r4, #52]	; 0x34
 801559e:	e7bc      	b.n	801551a <__sflush_r+0x1a>
 80155a0:	2301      	movs	r3, #1
 80155a2:	0028      	movs	r0, r5
 80155a4:	47b8      	blx	r7
 80155a6:	1c43      	adds	r3, r0, #1
 80155a8:	d1c6      	bne.n	8015538 <__sflush_r+0x38>
 80155aa:	682b      	ldr	r3, [r5, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d0c3      	beq.n	8015538 <__sflush_r+0x38>
 80155b0:	2b1d      	cmp	r3, #29
 80155b2:	d001      	beq.n	80155b8 <__sflush_r+0xb8>
 80155b4:	2b16      	cmp	r3, #22
 80155b6:	d101      	bne.n	80155bc <__sflush_r+0xbc>
 80155b8:	602e      	str	r6, [r5, #0]
 80155ba:	e7ad      	b.n	8015518 <__sflush_r+0x18>
 80155bc:	89a2      	ldrh	r2, [r4, #12]
 80155be:	2340      	movs	r3, #64	; 0x40
 80155c0:	4313      	orrs	r3, r2
 80155c2:	81a3      	strh	r3, [r4, #12]
 80155c4:	e7a9      	b.n	801551a <__sflush_r+0x1a>
 80155c6:	690e      	ldr	r6, [r1, #16]
 80155c8:	2e00      	cmp	r6, #0
 80155ca:	d0a5      	beq.n	8015518 <__sflush_r+0x18>
 80155cc:	680f      	ldr	r7, [r1, #0]
 80155ce:	600e      	str	r6, [r1, #0]
 80155d0:	1bba      	subs	r2, r7, r6
 80155d2:	9201      	str	r2, [sp, #4]
 80155d4:	2200      	movs	r2, #0
 80155d6:	079b      	lsls	r3, r3, #30
 80155d8:	d100      	bne.n	80155dc <__sflush_r+0xdc>
 80155da:	694a      	ldr	r2, [r1, #20]
 80155dc:	60a2      	str	r2, [r4, #8]
 80155de:	9b01      	ldr	r3, [sp, #4]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	dd99      	ble.n	8015518 <__sflush_r+0x18>
 80155e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80155e6:	0032      	movs	r2, r6
 80155e8:	001f      	movs	r7, r3
 80155ea:	0028      	movs	r0, r5
 80155ec:	9b01      	ldr	r3, [sp, #4]
 80155ee:	6a21      	ldr	r1, [r4, #32]
 80155f0:	47b8      	blx	r7
 80155f2:	2800      	cmp	r0, #0
 80155f4:	dc06      	bgt.n	8015604 <__sflush_r+0x104>
 80155f6:	2340      	movs	r3, #64	; 0x40
 80155f8:	2001      	movs	r0, #1
 80155fa:	89a2      	ldrh	r2, [r4, #12]
 80155fc:	4240      	negs	r0, r0
 80155fe:	4313      	orrs	r3, r2
 8015600:	81a3      	strh	r3, [r4, #12]
 8015602:	e78a      	b.n	801551a <__sflush_r+0x1a>
 8015604:	9b01      	ldr	r3, [sp, #4]
 8015606:	1836      	adds	r6, r6, r0
 8015608:	1a1b      	subs	r3, r3, r0
 801560a:	9301      	str	r3, [sp, #4]
 801560c:	e7e7      	b.n	80155de <__sflush_r+0xde>
 801560e:	46c0      	nop			; (mov r8, r8)
 8015610:	dfbffffe 	.word	0xdfbffffe

08015614 <_fflush_r>:
 8015614:	690b      	ldr	r3, [r1, #16]
 8015616:	b570      	push	{r4, r5, r6, lr}
 8015618:	0005      	movs	r5, r0
 801561a:	000c      	movs	r4, r1
 801561c:	2b00      	cmp	r3, #0
 801561e:	d102      	bne.n	8015626 <_fflush_r+0x12>
 8015620:	2500      	movs	r5, #0
 8015622:	0028      	movs	r0, r5
 8015624:	bd70      	pop	{r4, r5, r6, pc}
 8015626:	2800      	cmp	r0, #0
 8015628:	d004      	beq.n	8015634 <_fflush_r+0x20>
 801562a:	6a03      	ldr	r3, [r0, #32]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d101      	bne.n	8015634 <_fflush_r+0x20>
 8015630:	f7fd fc18 	bl	8012e64 <__sinit>
 8015634:	220c      	movs	r2, #12
 8015636:	5ea3      	ldrsh	r3, [r4, r2]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d0f1      	beq.n	8015620 <_fflush_r+0xc>
 801563c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801563e:	07d2      	lsls	r2, r2, #31
 8015640:	d404      	bmi.n	801564c <_fflush_r+0x38>
 8015642:	059b      	lsls	r3, r3, #22
 8015644:	d402      	bmi.n	801564c <_fflush_r+0x38>
 8015646:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015648:	f7fd fe93 	bl	8013372 <__retarget_lock_acquire_recursive>
 801564c:	0028      	movs	r0, r5
 801564e:	0021      	movs	r1, r4
 8015650:	f7ff ff56 	bl	8015500 <__sflush_r>
 8015654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015656:	0005      	movs	r5, r0
 8015658:	07db      	lsls	r3, r3, #31
 801565a:	d4e2      	bmi.n	8015622 <_fflush_r+0xe>
 801565c:	89a3      	ldrh	r3, [r4, #12]
 801565e:	059b      	lsls	r3, r3, #22
 8015660:	d4df      	bmi.n	8015622 <_fflush_r+0xe>
 8015662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015664:	f7fd fe86 	bl	8013374 <__retarget_lock_release_recursive>
 8015668:	e7db      	b.n	8015622 <_fflush_r+0xe>
	...

0801566c <fiprintf>:
 801566c:	b40e      	push	{r1, r2, r3}
 801566e:	b517      	push	{r0, r1, r2, r4, lr}
 8015670:	4c05      	ldr	r4, [pc, #20]	; (8015688 <fiprintf+0x1c>)
 8015672:	ab05      	add	r3, sp, #20
 8015674:	cb04      	ldmia	r3!, {r2}
 8015676:	0001      	movs	r1, r0
 8015678:	6820      	ldr	r0, [r4, #0]
 801567a:	9301      	str	r3, [sp, #4]
 801567c:	f000 f8a4 	bl	80157c8 <_vfiprintf_r>
 8015680:	bc1e      	pop	{r1, r2, r3, r4}
 8015682:	bc08      	pop	{r3}
 8015684:	b003      	add	sp, #12
 8015686:	4718      	bx	r3
 8015688:	200002b4 	.word	0x200002b4

0801568c <memmove>:
 801568c:	b510      	push	{r4, lr}
 801568e:	4288      	cmp	r0, r1
 8015690:	d902      	bls.n	8015698 <memmove+0xc>
 8015692:	188b      	adds	r3, r1, r2
 8015694:	4298      	cmp	r0, r3
 8015696:	d303      	bcc.n	80156a0 <memmove+0x14>
 8015698:	2300      	movs	r3, #0
 801569a:	e007      	b.n	80156ac <memmove+0x20>
 801569c:	5c8b      	ldrb	r3, [r1, r2]
 801569e:	5483      	strb	r3, [r0, r2]
 80156a0:	3a01      	subs	r2, #1
 80156a2:	d2fb      	bcs.n	801569c <memmove+0x10>
 80156a4:	bd10      	pop	{r4, pc}
 80156a6:	5ccc      	ldrb	r4, [r1, r3]
 80156a8:	54c4      	strb	r4, [r0, r3]
 80156aa:	3301      	adds	r3, #1
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d1fa      	bne.n	80156a6 <memmove+0x1a>
 80156b0:	e7f8      	b.n	80156a4 <memmove+0x18>

080156b2 <abort>:
 80156b2:	2006      	movs	r0, #6
 80156b4:	b510      	push	{r4, lr}
 80156b6:	f000 fa73 	bl	8015ba0 <raise>
 80156ba:	2001      	movs	r0, #1
 80156bc:	f7f3 fa2e 	bl	8008b1c <_exit>

080156c0 <_calloc_r>:
 80156c0:	b570      	push	{r4, r5, r6, lr}
 80156c2:	0c0b      	lsrs	r3, r1, #16
 80156c4:	0c15      	lsrs	r5, r2, #16
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d11e      	bne.n	8015708 <_calloc_r+0x48>
 80156ca:	2d00      	cmp	r5, #0
 80156cc:	d10c      	bne.n	80156e8 <_calloc_r+0x28>
 80156ce:	b289      	uxth	r1, r1
 80156d0:	b294      	uxth	r4, r2
 80156d2:	434c      	muls	r4, r1
 80156d4:	0021      	movs	r1, r4
 80156d6:	f7fb fd4f 	bl	8011178 <_malloc_r>
 80156da:	1e05      	subs	r5, r0, #0
 80156dc:	d01b      	beq.n	8015716 <_calloc_r+0x56>
 80156de:	0022      	movs	r2, r4
 80156e0:	2100      	movs	r1, #0
 80156e2:	f7fd fc93 	bl	801300c <memset>
 80156e6:	e016      	b.n	8015716 <_calloc_r+0x56>
 80156e8:	1c2b      	adds	r3, r5, #0
 80156ea:	1c0c      	adds	r4, r1, #0
 80156ec:	b289      	uxth	r1, r1
 80156ee:	b292      	uxth	r2, r2
 80156f0:	434a      	muls	r2, r1
 80156f2:	b2a1      	uxth	r1, r4
 80156f4:	b29c      	uxth	r4, r3
 80156f6:	434c      	muls	r4, r1
 80156f8:	0c13      	lsrs	r3, r2, #16
 80156fa:	18e4      	adds	r4, r4, r3
 80156fc:	0c23      	lsrs	r3, r4, #16
 80156fe:	d107      	bne.n	8015710 <_calloc_r+0x50>
 8015700:	0424      	lsls	r4, r4, #16
 8015702:	b292      	uxth	r2, r2
 8015704:	4314      	orrs	r4, r2
 8015706:	e7e5      	b.n	80156d4 <_calloc_r+0x14>
 8015708:	2d00      	cmp	r5, #0
 801570a:	d101      	bne.n	8015710 <_calloc_r+0x50>
 801570c:	1c14      	adds	r4, r2, #0
 801570e:	e7ed      	b.n	80156ec <_calloc_r+0x2c>
 8015710:	230c      	movs	r3, #12
 8015712:	2500      	movs	r5, #0
 8015714:	6003      	str	r3, [r0, #0]
 8015716:	0028      	movs	r0, r5
 8015718:	bd70      	pop	{r4, r5, r6, pc}

0801571a <_realloc_r>:
 801571a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801571c:	0007      	movs	r7, r0
 801571e:	000e      	movs	r6, r1
 8015720:	0014      	movs	r4, r2
 8015722:	2900      	cmp	r1, #0
 8015724:	d105      	bne.n	8015732 <_realloc_r+0x18>
 8015726:	0011      	movs	r1, r2
 8015728:	f7fb fd26 	bl	8011178 <_malloc_r>
 801572c:	0005      	movs	r5, r0
 801572e:	0028      	movs	r0, r5
 8015730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015732:	2a00      	cmp	r2, #0
 8015734:	d103      	bne.n	801573e <_realloc_r+0x24>
 8015736:	f7fe fd01 	bl	801413c <_free_r>
 801573a:	0025      	movs	r5, r4
 801573c:	e7f7      	b.n	801572e <_realloc_r+0x14>
 801573e:	f000 fa4f 	bl	8015be0 <_malloc_usable_size_r>
 8015742:	9001      	str	r0, [sp, #4]
 8015744:	4284      	cmp	r4, r0
 8015746:	d803      	bhi.n	8015750 <_realloc_r+0x36>
 8015748:	0035      	movs	r5, r6
 801574a:	0843      	lsrs	r3, r0, #1
 801574c:	42a3      	cmp	r3, r4
 801574e:	d3ee      	bcc.n	801572e <_realloc_r+0x14>
 8015750:	0021      	movs	r1, r4
 8015752:	0038      	movs	r0, r7
 8015754:	f7fb fd10 	bl	8011178 <_malloc_r>
 8015758:	1e05      	subs	r5, r0, #0
 801575a:	d0e8      	beq.n	801572e <_realloc_r+0x14>
 801575c:	9b01      	ldr	r3, [sp, #4]
 801575e:	0022      	movs	r2, r4
 8015760:	429c      	cmp	r4, r3
 8015762:	d900      	bls.n	8015766 <_realloc_r+0x4c>
 8015764:	001a      	movs	r2, r3
 8015766:	0031      	movs	r1, r6
 8015768:	0028      	movs	r0, r5
 801576a:	f7fd fe17 	bl	801339c <memcpy>
 801576e:	0031      	movs	r1, r6
 8015770:	0038      	movs	r0, r7
 8015772:	f7fe fce3 	bl	801413c <_free_r>
 8015776:	e7da      	b.n	801572e <_realloc_r+0x14>

08015778 <__sfputc_r>:
 8015778:	6893      	ldr	r3, [r2, #8]
 801577a:	b510      	push	{r4, lr}
 801577c:	3b01      	subs	r3, #1
 801577e:	6093      	str	r3, [r2, #8]
 8015780:	2b00      	cmp	r3, #0
 8015782:	da04      	bge.n	801578e <__sfputc_r+0x16>
 8015784:	6994      	ldr	r4, [r2, #24]
 8015786:	42a3      	cmp	r3, r4
 8015788:	db07      	blt.n	801579a <__sfputc_r+0x22>
 801578a:	290a      	cmp	r1, #10
 801578c:	d005      	beq.n	801579a <__sfputc_r+0x22>
 801578e:	6813      	ldr	r3, [r2, #0]
 8015790:	1c58      	adds	r0, r3, #1
 8015792:	6010      	str	r0, [r2, #0]
 8015794:	7019      	strb	r1, [r3, #0]
 8015796:	0008      	movs	r0, r1
 8015798:	bd10      	pop	{r4, pc}
 801579a:	f000 f931 	bl	8015a00 <__swbuf_r>
 801579e:	0001      	movs	r1, r0
 80157a0:	e7f9      	b.n	8015796 <__sfputc_r+0x1e>

080157a2 <__sfputs_r>:
 80157a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157a4:	0006      	movs	r6, r0
 80157a6:	000f      	movs	r7, r1
 80157a8:	0014      	movs	r4, r2
 80157aa:	18d5      	adds	r5, r2, r3
 80157ac:	42ac      	cmp	r4, r5
 80157ae:	d101      	bne.n	80157b4 <__sfputs_r+0x12>
 80157b0:	2000      	movs	r0, #0
 80157b2:	e007      	b.n	80157c4 <__sfputs_r+0x22>
 80157b4:	7821      	ldrb	r1, [r4, #0]
 80157b6:	003a      	movs	r2, r7
 80157b8:	0030      	movs	r0, r6
 80157ba:	f7ff ffdd 	bl	8015778 <__sfputc_r>
 80157be:	3401      	adds	r4, #1
 80157c0:	1c43      	adds	r3, r0, #1
 80157c2:	d1f3      	bne.n	80157ac <__sfputs_r+0xa>
 80157c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157c8 <_vfiprintf_r>:
 80157c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ca:	b0a1      	sub	sp, #132	; 0x84
 80157cc:	000f      	movs	r7, r1
 80157ce:	0015      	movs	r5, r2
 80157d0:	001e      	movs	r6, r3
 80157d2:	9003      	str	r0, [sp, #12]
 80157d4:	2800      	cmp	r0, #0
 80157d6:	d004      	beq.n	80157e2 <_vfiprintf_r+0x1a>
 80157d8:	6a03      	ldr	r3, [r0, #32]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d101      	bne.n	80157e2 <_vfiprintf_r+0x1a>
 80157de:	f7fd fb41 	bl	8012e64 <__sinit>
 80157e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157e4:	07db      	lsls	r3, r3, #31
 80157e6:	d405      	bmi.n	80157f4 <_vfiprintf_r+0x2c>
 80157e8:	89bb      	ldrh	r3, [r7, #12]
 80157ea:	059b      	lsls	r3, r3, #22
 80157ec:	d402      	bmi.n	80157f4 <_vfiprintf_r+0x2c>
 80157ee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80157f0:	f7fd fdbf 	bl	8013372 <__retarget_lock_acquire_recursive>
 80157f4:	89bb      	ldrh	r3, [r7, #12]
 80157f6:	071b      	lsls	r3, r3, #28
 80157f8:	d502      	bpl.n	8015800 <_vfiprintf_r+0x38>
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d113      	bne.n	8015828 <_vfiprintf_r+0x60>
 8015800:	0039      	movs	r1, r7
 8015802:	9803      	ldr	r0, [sp, #12]
 8015804:	f000 f93e 	bl	8015a84 <__swsetup_r>
 8015808:	2800      	cmp	r0, #0
 801580a:	d00d      	beq.n	8015828 <_vfiprintf_r+0x60>
 801580c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801580e:	07db      	lsls	r3, r3, #31
 8015810:	d503      	bpl.n	801581a <_vfiprintf_r+0x52>
 8015812:	2001      	movs	r0, #1
 8015814:	4240      	negs	r0, r0
 8015816:	b021      	add	sp, #132	; 0x84
 8015818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801581a:	89bb      	ldrh	r3, [r7, #12]
 801581c:	059b      	lsls	r3, r3, #22
 801581e:	d4f8      	bmi.n	8015812 <_vfiprintf_r+0x4a>
 8015820:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015822:	f7fd fda7 	bl	8013374 <__retarget_lock_release_recursive>
 8015826:	e7f4      	b.n	8015812 <_vfiprintf_r+0x4a>
 8015828:	2300      	movs	r3, #0
 801582a:	ac08      	add	r4, sp, #32
 801582c:	6163      	str	r3, [r4, #20]
 801582e:	3320      	adds	r3, #32
 8015830:	7663      	strb	r3, [r4, #25]
 8015832:	3310      	adds	r3, #16
 8015834:	76a3      	strb	r3, [r4, #26]
 8015836:	9607      	str	r6, [sp, #28]
 8015838:	002e      	movs	r6, r5
 801583a:	7833      	ldrb	r3, [r6, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d001      	beq.n	8015844 <_vfiprintf_r+0x7c>
 8015840:	2b25      	cmp	r3, #37	; 0x25
 8015842:	d148      	bne.n	80158d6 <_vfiprintf_r+0x10e>
 8015844:	1b73      	subs	r3, r6, r5
 8015846:	9305      	str	r3, [sp, #20]
 8015848:	42ae      	cmp	r6, r5
 801584a:	d00b      	beq.n	8015864 <_vfiprintf_r+0x9c>
 801584c:	002a      	movs	r2, r5
 801584e:	0039      	movs	r1, r7
 8015850:	9803      	ldr	r0, [sp, #12]
 8015852:	f7ff ffa6 	bl	80157a2 <__sfputs_r>
 8015856:	3001      	adds	r0, #1
 8015858:	d100      	bne.n	801585c <_vfiprintf_r+0x94>
 801585a:	e0af      	b.n	80159bc <_vfiprintf_r+0x1f4>
 801585c:	6963      	ldr	r3, [r4, #20]
 801585e:	9a05      	ldr	r2, [sp, #20]
 8015860:	189b      	adds	r3, r3, r2
 8015862:	6163      	str	r3, [r4, #20]
 8015864:	7833      	ldrb	r3, [r6, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d100      	bne.n	801586c <_vfiprintf_r+0xa4>
 801586a:	e0a7      	b.n	80159bc <_vfiprintf_r+0x1f4>
 801586c:	2201      	movs	r2, #1
 801586e:	2300      	movs	r3, #0
 8015870:	4252      	negs	r2, r2
 8015872:	6062      	str	r2, [r4, #4]
 8015874:	a904      	add	r1, sp, #16
 8015876:	3254      	adds	r2, #84	; 0x54
 8015878:	1852      	adds	r2, r2, r1
 801587a:	1c75      	adds	r5, r6, #1
 801587c:	6023      	str	r3, [r4, #0]
 801587e:	60e3      	str	r3, [r4, #12]
 8015880:	60a3      	str	r3, [r4, #8]
 8015882:	7013      	strb	r3, [r2, #0]
 8015884:	65a3      	str	r3, [r4, #88]	; 0x58
 8015886:	4b59      	ldr	r3, [pc, #356]	; (80159ec <_vfiprintf_r+0x224>)
 8015888:	2205      	movs	r2, #5
 801588a:	0018      	movs	r0, r3
 801588c:	7829      	ldrb	r1, [r5, #0]
 801588e:	9305      	str	r3, [sp, #20]
 8015890:	f7fd fd79 	bl	8013386 <memchr>
 8015894:	1c6e      	adds	r6, r5, #1
 8015896:	2800      	cmp	r0, #0
 8015898:	d11f      	bne.n	80158da <_vfiprintf_r+0x112>
 801589a:	6822      	ldr	r2, [r4, #0]
 801589c:	06d3      	lsls	r3, r2, #27
 801589e:	d504      	bpl.n	80158aa <_vfiprintf_r+0xe2>
 80158a0:	2353      	movs	r3, #83	; 0x53
 80158a2:	a904      	add	r1, sp, #16
 80158a4:	185b      	adds	r3, r3, r1
 80158a6:	2120      	movs	r1, #32
 80158a8:	7019      	strb	r1, [r3, #0]
 80158aa:	0713      	lsls	r3, r2, #28
 80158ac:	d504      	bpl.n	80158b8 <_vfiprintf_r+0xf0>
 80158ae:	2353      	movs	r3, #83	; 0x53
 80158b0:	a904      	add	r1, sp, #16
 80158b2:	185b      	adds	r3, r3, r1
 80158b4:	212b      	movs	r1, #43	; 0x2b
 80158b6:	7019      	strb	r1, [r3, #0]
 80158b8:	782b      	ldrb	r3, [r5, #0]
 80158ba:	2b2a      	cmp	r3, #42	; 0x2a
 80158bc:	d016      	beq.n	80158ec <_vfiprintf_r+0x124>
 80158be:	002e      	movs	r6, r5
 80158c0:	2100      	movs	r1, #0
 80158c2:	200a      	movs	r0, #10
 80158c4:	68e3      	ldr	r3, [r4, #12]
 80158c6:	7832      	ldrb	r2, [r6, #0]
 80158c8:	1c75      	adds	r5, r6, #1
 80158ca:	3a30      	subs	r2, #48	; 0x30
 80158cc:	2a09      	cmp	r2, #9
 80158ce:	d94e      	bls.n	801596e <_vfiprintf_r+0x1a6>
 80158d0:	2900      	cmp	r1, #0
 80158d2:	d111      	bne.n	80158f8 <_vfiprintf_r+0x130>
 80158d4:	e017      	b.n	8015906 <_vfiprintf_r+0x13e>
 80158d6:	3601      	adds	r6, #1
 80158d8:	e7af      	b.n	801583a <_vfiprintf_r+0x72>
 80158da:	9b05      	ldr	r3, [sp, #20]
 80158dc:	6822      	ldr	r2, [r4, #0]
 80158de:	1ac0      	subs	r0, r0, r3
 80158e0:	2301      	movs	r3, #1
 80158e2:	4083      	lsls	r3, r0
 80158e4:	4313      	orrs	r3, r2
 80158e6:	0035      	movs	r5, r6
 80158e8:	6023      	str	r3, [r4, #0]
 80158ea:	e7cc      	b.n	8015886 <_vfiprintf_r+0xbe>
 80158ec:	9b07      	ldr	r3, [sp, #28]
 80158ee:	1d19      	adds	r1, r3, #4
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	9107      	str	r1, [sp, #28]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	db01      	blt.n	80158fc <_vfiprintf_r+0x134>
 80158f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80158fa:	e004      	b.n	8015906 <_vfiprintf_r+0x13e>
 80158fc:	425b      	negs	r3, r3
 80158fe:	60e3      	str	r3, [r4, #12]
 8015900:	2302      	movs	r3, #2
 8015902:	4313      	orrs	r3, r2
 8015904:	6023      	str	r3, [r4, #0]
 8015906:	7833      	ldrb	r3, [r6, #0]
 8015908:	2b2e      	cmp	r3, #46	; 0x2e
 801590a:	d10a      	bne.n	8015922 <_vfiprintf_r+0x15a>
 801590c:	7873      	ldrb	r3, [r6, #1]
 801590e:	2b2a      	cmp	r3, #42	; 0x2a
 8015910:	d135      	bne.n	801597e <_vfiprintf_r+0x1b6>
 8015912:	9b07      	ldr	r3, [sp, #28]
 8015914:	3602      	adds	r6, #2
 8015916:	1d1a      	adds	r2, r3, #4
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	9207      	str	r2, [sp, #28]
 801591c:	2b00      	cmp	r3, #0
 801591e:	db2b      	blt.n	8015978 <_vfiprintf_r+0x1b0>
 8015920:	9309      	str	r3, [sp, #36]	; 0x24
 8015922:	4d33      	ldr	r5, [pc, #204]	; (80159f0 <_vfiprintf_r+0x228>)
 8015924:	2203      	movs	r2, #3
 8015926:	0028      	movs	r0, r5
 8015928:	7831      	ldrb	r1, [r6, #0]
 801592a:	f7fd fd2c 	bl	8013386 <memchr>
 801592e:	2800      	cmp	r0, #0
 8015930:	d006      	beq.n	8015940 <_vfiprintf_r+0x178>
 8015932:	2340      	movs	r3, #64	; 0x40
 8015934:	1b40      	subs	r0, r0, r5
 8015936:	4083      	lsls	r3, r0
 8015938:	6822      	ldr	r2, [r4, #0]
 801593a:	3601      	adds	r6, #1
 801593c:	4313      	orrs	r3, r2
 801593e:	6023      	str	r3, [r4, #0]
 8015940:	7831      	ldrb	r1, [r6, #0]
 8015942:	2206      	movs	r2, #6
 8015944:	482b      	ldr	r0, [pc, #172]	; (80159f4 <_vfiprintf_r+0x22c>)
 8015946:	1c75      	adds	r5, r6, #1
 8015948:	7621      	strb	r1, [r4, #24]
 801594a:	f7fd fd1c 	bl	8013386 <memchr>
 801594e:	2800      	cmp	r0, #0
 8015950:	d043      	beq.n	80159da <_vfiprintf_r+0x212>
 8015952:	4b29      	ldr	r3, [pc, #164]	; (80159f8 <_vfiprintf_r+0x230>)
 8015954:	2b00      	cmp	r3, #0
 8015956:	d125      	bne.n	80159a4 <_vfiprintf_r+0x1dc>
 8015958:	2207      	movs	r2, #7
 801595a:	9b07      	ldr	r3, [sp, #28]
 801595c:	3307      	adds	r3, #7
 801595e:	4393      	bics	r3, r2
 8015960:	3308      	adds	r3, #8
 8015962:	9307      	str	r3, [sp, #28]
 8015964:	6963      	ldr	r3, [r4, #20]
 8015966:	9a04      	ldr	r2, [sp, #16]
 8015968:	189b      	adds	r3, r3, r2
 801596a:	6163      	str	r3, [r4, #20]
 801596c:	e764      	b.n	8015838 <_vfiprintf_r+0x70>
 801596e:	4343      	muls	r3, r0
 8015970:	002e      	movs	r6, r5
 8015972:	2101      	movs	r1, #1
 8015974:	189b      	adds	r3, r3, r2
 8015976:	e7a6      	b.n	80158c6 <_vfiprintf_r+0xfe>
 8015978:	2301      	movs	r3, #1
 801597a:	425b      	negs	r3, r3
 801597c:	e7d0      	b.n	8015920 <_vfiprintf_r+0x158>
 801597e:	2300      	movs	r3, #0
 8015980:	200a      	movs	r0, #10
 8015982:	001a      	movs	r2, r3
 8015984:	3601      	adds	r6, #1
 8015986:	6063      	str	r3, [r4, #4]
 8015988:	7831      	ldrb	r1, [r6, #0]
 801598a:	1c75      	adds	r5, r6, #1
 801598c:	3930      	subs	r1, #48	; 0x30
 801598e:	2909      	cmp	r1, #9
 8015990:	d903      	bls.n	801599a <_vfiprintf_r+0x1d2>
 8015992:	2b00      	cmp	r3, #0
 8015994:	d0c5      	beq.n	8015922 <_vfiprintf_r+0x15a>
 8015996:	9209      	str	r2, [sp, #36]	; 0x24
 8015998:	e7c3      	b.n	8015922 <_vfiprintf_r+0x15a>
 801599a:	4342      	muls	r2, r0
 801599c:	002e      	movs	r6, r5
 801599e:	2301      	movs	r3, #1
 80159a0:	1852      	adds	r2, r2, r1
 80159a2:	e7f1      	b.n	8015988 <_vfiprintf_r+0x1c0>
 80159a4:	aa07      	add	r2, sp, #28
 80159a6:	9200      	str	r2, [sp, #0]
 80159a8:	0021      	movs	r1, r4
 80159aa:	003a      	movs	r2, r7
 80159ac:	4b13      	ldr	r3, [pc, #76]	; (80159fc <_vfiprintf_r+0x234>)
 80159ae:	9803      	ldr	r0, [sp, #12]
 80159b0:	f7fc fbea 	bl	8012188 <_printf_float>
 80159b4:	9004      	str	r0, [sp, #16]
 80159b6:	9b04      	ldr	r3, [sp, #16]
 80159b8:	3301      	adds	r3, #1
 80159ba:	d1d3      	bne.n	8015964 <_vfiprintf_r+0x19c>
 80159bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80159be:	07db      	lsls	r3, r3, #31
 80159c0:	d405      	bmi.n	80159ce <_vfiprintf_r+0x206>
 80159c2:	89bb      	ldrh	r3, [r7, #12]
 80159c4:	059b      	lsls	r3, r3, #22
 80159c6:	d402      	bmi.n	80159ce <_vfiprintf_r+0x206>
 80159c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80159ca:	f7fd fcd3 	bl	8013374 <__retarget_lock_release_recursive>
 80159ce:	89bb      	ldrh	r3, [r7, #12]
 80159d0:	065b      	lsls	r3, r3, #25
 80159d2:	d500      	bpl.n	80159d6 <_vfiprintf_r+0x20e>
 80159d4:	e71d      	b.n	8015812 <_vfiprintf_r+0x4a>
 80159d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80159d8:	e71d      	b.n	8015816 <_vfiprintf_r+0x4e>
 80159da:	aa07      	add	r2, sp, #28
 80159dc:	9200      	str	r2, [sp, #0]
 80159de:	0021      	movs	r1, r4
 80159e0:	003a      	movs	r2, r7
 80159e2:	4b06      	ldr	r3, [pc, #24]	; (80159fc <_vfiprintf_r+0x234>)
 80159e4:	9803      	ldr	r0, [sp, #12]
 80159e6:	f7fc fe95 	bl	8012714 <_printf_i>
 80159ea:	e7e3      	b.n	80159b4 <_vfiprintf_r+0x1ec>
 80159ec:	080189c4 	.word	0x080189c4
 80159f0:	080189ca 	.word	0x080189ca
 80159f4:	080189ce 	.word	0x080189ce
 80159f8:	08012189 	.word	0x08012189
 80159fc:	080157a3 	.word	0x080157a3

08015a00 <__swbuf_r>:
 8015a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a02:	0006      	movs	r6, r0
 8015a04:	000d      	movs	r5, r1
 8015a06:	0014      	movs	r4, r2
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d004      	beq.n	8015a16 <__swbuf_r+0x16>
 8015a0c:	6a03      	ldr	r3, [r0, #32]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d101      	bne.n	8015a16 <__swbuf_r+0x16>
 8015a12:	f7fd fa27 	bl	8012e64 <__sinit>
 8015a16:	69a3      	ldr	r3, [r4, #24]
 8015a18:	60a3      	str	r3, [r4, #8]
 8015a1a:	89a3      	ldrh	r3, [r4, #12]
 8015a1c:	071b      	lsls	r3, r3, #28
 8015a1e:	d528      	bpl.n	8015a72 <__swbuf_r+0x72>
 8015a20:	6923      	ldr	r3, [r4, #16]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d025      	beq.n	8015a72 <__swbuf_r+0x72>
 8015a26:	6923      	ldr	r3, [r4, #16]
 8015a28:	6820      	ldr	r0, [r4, #0]
 8015a2a:	b2ef      	uxtb	r7, r5
 8015a2c:	1ac0      	subs	r0, r0, r3
 8015a2e:	6963      	ldr	r3, [r4, #20]
 8015a30:	b2ed      	uxtb	r5, r5
 8015a32:	4283      	cmp	r3, r0
 8015a34:	dc05      	bgt.n	8015a42 <__swbuf_r+0x42>
 8015a36:	0021      	movs	r1, r4
 8015a38:	0030      	movs	r0, r6
 8015a3a:	f7ff fdeb 	bl	8015614 <_fflush_r>
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	d11d      	bne.n	8015a7e <__swbuf_r+0x7e>
 8015a42:	68a3      	ldr	r3, [r4, #8]
 8015a44:	3001      	adds	r0, #1
 8015a46:	3b01      	subs	r3, #1
 8015a48:	60a3      	str	r3, [r4, #8]
 8015a4a:	6823      	ldr	r3, [r4, #0]
 8015a4c:	1c5a      	adds	r2, r3, #1
 8015a4e:	6022      	str	r2, [r4, #0]
 8015a50:	701f      	strb	r7, [r3, #0]
 8015a52:	6963      	ldr	r3, [r4, #20]
 8015a54:	4283      	cmp	r3, r0
 8015a56:	d004      	beq.n	8015a62 <__swbuf_r+0x62>
 8015a58:	89a3      	ldrh	r3, [r4, #12]
 8015a5a:	07db      	lsls	r3, r3, #31
 8015a5c:	d507      	bpl.n	8015a6e <__swbuf_r+0x6e>
 8015a5e:	2d0a      	cmp	r5, #10
 8015a60:	d105      	bne.n	8015a6e <__swbuf_r+0x6e>
 8015a62:	0021      	movs	r1, r4
 8015a64:	0030      	movs	r0, r6
 8015a66:	f7ff fdd5 	bl	8015614 <_fflush_r>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	d107      	bne.n	8015a7e <__swbuf_r+0x7e>
 8015a6e:	0028      	movs	r0, r5
 8015a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a72:	0021      	movs	r1, r4
 8015a74:	0030      	movs	r0, r6
 8015a76:	f000 f805 	bl	8015a84 <__swsetup_r>
 8015a7a:	2800      	cmp	r0, #0
 8015a7c:	d0d3      	beq.n	8015a26 <__swbuf_r+0x26>
 8015a7e:	2501      	movs	r5, #1
 8015a80:	426d      	negs	r5, r5
 8015a82:	e7f4      	b.n	8015a6e <__swbuf_r+0x6e>

08015a84 <__swsetup_r>:
 8015a84:	4b30      	ldr	r3, [pc, #192]	; (8015b48 <__swsetup_r+0xc4>)
 8015a86:	b570      	push	{r4, r5, r6, lr}
 8015a88:	0005      	movs	r5, r0
 8015a8a:	6818      	ldr	r0, [r3, #0]
 8015a8c:	000c      	movs	r4, r1
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d004      	beq.n	8015a9c <__swsetup_r+0x18>
 8015a92:	6a03      	ldr	r3, [r0, #32]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d101      	bne.n	8015a9c <__swsetup_r+0x18>
 8015a98:	f7fd f9e4 	bl	8012e64 <__sinit>
 8015a9c:	230c      	movs	r3, #12
 8015a9e:	5ee2      	ldrsh	r2, [r4, r3]
 8015aa0:	b293      	uxth	r3, r2
 8015aa2:	0711      	lsls	r1, r2, #28
 8015aa4:	d423      	bmi.n	8015aee <__swsetup_r+0x6a>
 8015aa6:	06d9      	lsls	r1, r3, #27
 8015aa8:	d407      	bmi.n	8015aba <__swsetup_r+0x36>
 8015aaa:	2309      	movs	r3, #9
 8015aac:	2001      	movs	r0, #1
 8015aae:	602b      	str	r3, [r5, #0]
 8015ab0:	3337      	adds	r3, #55	; 0x37
 8015ab2:	4313      	orrs	r3, r2
 8015ab4:	81a3      	strh	r3, [r4, #12]
 8015ab6:	4240      	negs	r0, r0
 8015ab8:	bd70      	pop	{r4, r5, r6, pc}
 8015aba:	075b      	lsls	r3, r3, #29
 8015abc:	d513      	bpl.n	8015ae6 <__swsetup_r+0x62>
 8015abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ac0:	2900      	cmp	r1, #0
 8015ac2:	d008      	beq.n	8015ad6 <__swsetup_r+0x52>
 8015ac4:	0023      	movs	r3, r4
 8015ac6:	3344      	adds	r3, #68	; 0x44
 8015ac8:	4299      	cmp	r1, r3
 8015aca:	d002      	beq.n	8015ad2 <__swsetup_r+0x4e>
 8015acc:	0028      	movs	r0, r5
 8015ace:	f7fe fb35 	bl	801413c <_free_r>
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8015ad6:	2224      	movs	r2, #36	; 0x24
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	4393      	bics	r3, r2
 8015adc:	81a3      	strh	r3, [r4, #12]
 8015ade:	2300      	movs	r3, #0
 8015ae0:	6063      	str	r3, [r4, #4]
 8015ae2:	6923      	ldr	r3, [r4, #16]
 8015ae4:	6023      	str	r3, [r4, #0]
 8015ae6:	2308      	movs	r3, #8
 8015ae8:	89a2      	ldrh	r2, [r4, #12]
 8015aea:	4313      	orrs	r3, r2
 8015aec:	81a3      	strh	r3, [r4, #12]
 8015aee:	6923      	ldr	r3, [r4, #16]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d10b      	bne.n	8015b0c <__swsetup_r+0x88>
 8015af4:	21a0      	movs	r1, #160	; 0xa0
 8015af6:	2280      	movs	r2, #128	; 0x80
 8015af8:	89a3      	ldrh	r3, [r4, #12]
 8015afa:	0089      	lsls	r1, r1, #2
 8015afc:	0092      	lsls	r2, r2, #2
 8015afe:	400b      	ands	r3, r1
 8015b00:	4293      	cmp	r3, r2
 8015b02:	d003      	beq.n	8015b0c <__swsetup_r+0x88>
 8015b04:	0021      	movs	r1, r4
 8015b06:	0028      	movs	r0, r5
 8015b08:	f000 f89a 	bl	8015c40 <__smakebuf_r>
 8015b0c:	220c      	movs	r2, #12
 8015b0e:	5ea3      	ldrsh	r3, [r4, r2]
 8015b10:	2001      	movs	r0, #1
 8015b12:	001a      	movs	r2, r3
 8015b14:	b299      	uxth	r1, r3
 8015b16:	4002      	ands	r2, r0
 8015b18:	4203      	tst	r3, r0
 8015b1a:	d00f      	beq.n	8015b3c <__swsetup_r+0xb8>
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	60a2      	str	r2, [r4, #8]
 8015b20:	6962      	ldr	r2, [r4, #20]
 8015b22:	4252      	negs	r2, r2
 8015b24:	61a2      	str	r2, [r4, #24]
 8015b26:	2000      	movs	r0, #0
 8015b28:	6922      	ldr	r2, [r4, #16]
 8015b2a:	4282      	cmp	r2, r0
 8015b2c:	d1c4      	bne.n	8015ab8 <__swsetup_r+0x34>
 8015b2e:	0609      	lsls	r1, r1, #24
 8015b30:	d5c2      	bpl.n	8015ab8 <__swsetup_r+0x34>
 8015b32:	2240      	movs	r2, #64	; 0x40
 8015b34:	4313      	orrs	r3, r2
 8015b36:	81a3      	strh	r3, [r4, #12]
 8015b38:	3801      	subs	r0, #1
 8015b3a:	e7bd      	b.n	8015ab8 <__swsetup_r+0x34>
 8015b3c:	0788      	lsls	r0, r1, #30
 8015b3e:	d400      	bmi.n	8015b42 <__swsetup_r+0xbe>
 8015b40:	6962      	ldr	r2, [r4, #20]
 8015b42:	60a2      	str	r2, [r4, #8]
 8015b44:	e7ef      	b.n	8015b26 <__swsetup_r+0xa2>
 8015b46:	46c0      	nop			; (mov r8, r8)
 8015b48:	200002b4 	.word	0x200002b4

08015b4c <_raise_r>:
 8015b4c:	b570      	push	{r4, r5, r6, lr}
 8015b4e:	0004      	movs	r4, r0
 8015b50:	000d      	movs	r5, r1
 8015b52:	291f      	cmp	r1, #31
 8015b54:	d904      	bls.n	8015b60 <_raise_r+0x14>
 8015b56:	2316      	movs	r3, #22
 8015b58:	6003      	str	r3, [r0, #0]
 8015b5a:	2001      	movs	r0, #1
 8015b5c:	4240      	negs	r0, r0
 8015b5e:	bd70      	pop	{r4, r5, r6, pc}
 8015b60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d004      	beq.n	8015b70 <_raise_r+0x24>
 8015b66:	008a      	lsls	r2, r1, #2
 8015b68:	189b      	adds	r3, r3, r2
 8015b6a:	681a      	ldr	r2, [r3, #0]
 8015b6c:	2a00      	cmp	r2, #0
 8015b6e:	d108      	bne.n	8015b82 <_raise_r+0x36>
 8015b70:	0020      	movs	r0, r4
 8015b72:	f000 f831 	bl	8015bd8 <_getpid_r>
 8015b76:	002a      	movs	r2, r5
 8015b78:	0001      	movs	r1, r0
 8015b7a:	0020      	movs	r0, r4
 8015b7c:	f000 f81a 	bl	8015bb4 <_kill_r>
 8015b80:	e7ed      	b.n	8015b5e <_raise_r+0x12>
 8015b82:	2000      	movs	r0, #0
 8015b84:	2a01      	cmp	r2, #1
 8015b86:	d0ea      	beq.n	8015b5e <_raise_r+0x12>
 8015b88:	1c51      	adds	r1, r2, #1
 8015b8a:	d103      	bne.n	8015b94 <_raise_r+0x48>
 8015b8c:	2316      	movs	r3, #22
 8015b8e:	3001      	adds	r0, #1
 8015b90:	6023      	str	r3, [r4, #0]
 8015b92:	e7e4      	b.n	8015b5e <_raise_r+0x12>
 8015b94:	2400      	movs	r4, #0
 8015b96:	0028      	movs	r0, r5
 8015b98:	601c      	str	r4, [r3, #0]
 8015b9a:	4790      	blx	r2
 8015b9c:	0020      	movs	r0, r4
 8015b9e:	e7de      	b.n	8015b5e <_raise_r+0x12>

08015ba0 <raise>:
 8015ba0:	b510      	push	{r4, lr}
 8015ba2:	4b03      	ldr	r3, [pc, #12]	; (8015bb0 <raise+0x10>)
 8015ba4:	0001      	movs	r1, r0
 8015ba6:	6818      	ldr	r0, [r3, #0]
 8015ba8:	f7ff ffd0 	bl	8015b4c <_raise_r>
 8015bac:	bd10      	pop	{r4, pc}
 8015bae:	46c0      	nop			; (mov r8, r8)
 8015bb0:	200002b4 	.word	0x200002b4

08015bb4 <_kill_r>:
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	b570      	push	{r4, r5, r6, lr}
 8015bb8:	4d06      	ldr	r5, [pc, #24]	; (8015bd4 <_kill_r+0x20>)
 8015bba:	0004      	movs	r4, r0
 8015bbc:	0008      	movs	r0, r1
 8015bbe:	0011      	movs	r1, r2
 8015bc0:	602b      	str	r3, [r5, #0]
 8015bc2:	f7f2 ff9b 	bl	8008afc <_kill>
 8015bc6:	1c43      	adds	r3, r0, #1
 8015bc8:	d103      	bne.n	8015bd2 <_kill_r+0x1e>
 8015bca:	682b      	ldr	r3, [r5, #0]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d000      	beq.n	8015bd2 <_kill_r+0x1e>
 8015bd0:	6023      	str	r3, [r4, #0]
 8015bd2:	bd70      	pop	{r4, r5, r6, pc}
 8015bd4:	20005a90 	.word	0x20005a90

08015bd8 <_getpid_r>:
 8015bd8:	b510      	push	{r4, lr}
 8015bda:	f7f2 ff89 	bl	8008af0 <_getpid>
 8015bde:	bd10      	pop	{r4, pc}

08015be0 <_malloc_usable_size_r>:
 8015be0:	1f0b      	subs	r3, r1, #4
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	1f18      	subs	r0, r3, #4
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	da01      	bge.n	8015bee <_malloc_usable_size_r+0xe>
 8015bea:	580b      	ldr	r3, [r1, r0]
 8015bec:	18c0      	adds	r0, r0, r3
 8015bee:	4770      	bx	lr

08015bf0 <__swhatbuf_r>:
 8015bf0:	b570      	push	{r4, r5, r6, lr}
 8015bf2:	000e      	movs	r6, r1
 8015bf4:	001d      	movs	r5, r3
 8015bf6:	230e      	movs	r3, #14
 8015bf8:	5ec9      	ldrsh	r1, [r1, r3]
 8015bfa:	0014      	movs	r4, r2
 8015bfc:	b096      	sub	sp, #88	; 0x58
 8015bfe:	2900      	cmp	r1, #0
 8015c00:	da0c      	bge.n	8015c1c <__swhatbuf_r+0x2c>
 8015c02:	89b2      	ldrh	r2, [r6, #12]
 8015c04:	2380      	movs	r3, #128	; 0x80
 8015c06:	0011      	movs	r1, r2
 8015c08:	4019      	ands	r1, r3
 8015c0a:	421a      	tst	r2, r3
 8015c0c:	d013      	beq.n	8015c36 <__swhatbuf_r+0x46>
 8015c0e:	2100      	movs	r1, #0
 8015c10:	3b40      	subs	r3, #64	; 0x40
 8015c12:	2000      	movs	r0, #0
 8015c14:	6029      	str	r1, [r5, #0]
 8015c16:	6023      	str	r3, [r4, #0]
 8015c18:	b016      	add	sp, #88	; 0x58
 8015c1a:	bd70      	pop	{r4, r5, r6, pc}
 8015c1c:	466a      	mov	r2, sp
 8015c1e:	f000 f84d 	bl	8015cbc <_fstat_r>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	dbed      	blt.n	8015c02 <__swhatbuf_r+0x12>
 8015c26:	23f0      	movs	r3, #240	; 0xf0
 8015c28:	9901      	ldr	r1, [sp, #4]
 8015c2a:	021b      	lsls	r3, r3, #8
 8015c2c:	4019      	ands	r1, r3
 8015c2e:	4b03      	ldr	r3, [pc, #12]	; (8015c3c <__swhatbuf_r+0x4c>)
 8015c30:	18c9      	adds	r1, r1, r3
 8015c32:	424b      	negs	r3, r1
 8015c34:	4159      	adcs	r1, r3
 8015c36:	2380      	movs	r3, #128	; 0x80
 8015c38:	00db      	lsls	r3, r3, #3
 8015c3a:	e7ea      	b.n	8015c12 <__swhatbuf_r+0x22>
 8015c3c:	ffffe000 	.word	0xffffe000

08015c40 <__smakebuf_r>:
 8015c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c42:	2602      	movs	r6, #2
 8015c44:	898b      	ldrh	r3, [r1, #12]
 8015c46:	0005      	movs	r5, r0
 8015c48:	000c      	movs	r4, r1
 8015c4a:	4233      	tst	r3, r6
 8015c4c:	d006      	beq.n	8015c5c <__smakebuf_r+0x1c>
 8015c4e:	0023      	movs	r3, r4
 8015c50:	3347      	adds	r3, #71	; 0x47
 8015c52:	6023      	str	r3, [r4, #0]
 8015c54:	6123      	str	r3, [r4, #16]
 8015c56:	2301      	movs	r3, #1
 8015c58:	6163      	str	r3, [r4, #20]
 8015c5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8015c5c:	466a      	mov	r2, sp
 8015c5e:	ab01      	add	r3, sp, #4
 8015c60:	f7ff ffc6 	bl	8015bf0 <__swhatbuf_r>
 8015c64:	9900      	ldr	r1, [sp, #0]
 8015c66:	0007      	movs	r7, r0
 8015c68:	0028      	movs	r0, r5
 8015c6a:	f7fb fa85 	bl	8011178 <_malloc_r>
 8015c6e:	2800      	cmp	r0, #0
 8015c70:	d108      	bne.n	8015c84 <__smakebuf_r+0x44>
 8015c72:	220c      	movs	r2, #12
 8015c74:	5ea3      	ldrsh	r3, [r4, r2]
 8015c76:	059a      	lsls	r2, r3, #22
 8015c78:	d4ef      	bmi.n	8015c5a <__smakebuf_r+0x1a>
 8015c7a:	2203      	movs	r2, #3
 8015c7c:	4393      	bics	r3, r2
 8015c7e:	431e      	orrs	r6, r3
 8015c80:	81a6      	strh	r6, [r4, #12]
 8015c82:	e7e4      	b.n	8015c4e <__smakebuf_r+0xe>
 8015c84:	2380      	movs	r3, #128	; 0x80
 8015c86:	89a2      	ldrh	r2, [r4, #12]
 8015c88:	6020      	str	r0, [r4, #0]
 8015c8a:	4313      	orrs	r3, r2
 8015c8c:	81a3      	strh	r3, [r4, #12]
 8015c8e:	9b00      	ldr	r3, [sp, #0]
 8015c90:	6120      	str	r0, [r4, #16]
 8015c92:	6163      	str	r3, [r4, #20]
 8015c94:	9b01      	ldr	r3, [sp, #4]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d00c      	beq.n	8015cb4 <__smakebuf_r+0x74>
 8015c9a:	0028      	movs	r0, r5
 8015c9c:	230e      	movs	r3, #14
 8015c9e:	5ee1      	ldrsh	r1, [r4, r3]
 8015ca0:	f000 f81e 	bl	8015ce0 <_isatty_r>
 8015ca4:	2800      	cmp	r0, #0
 8015ca6:	d005      	beq.n	8015cb4 <__smakebuf_r+0x74>
 8015ca8:	2303      	movs	r3, #3
 8015caa:	89a2      	ldrh	r2, [r4, #12]
 8015cac:	439a      	bics	r2, r3
 8015cae:	3b02      	subs	r3, #2
 8015cb0:	4313      	orrs	r3, r2
 8015cb2:	81a3      	strh	r3, [r4, #12]
 8015cb4:	89a3      	ldrh	r3, [r4, #12]
 8015cb6:	433b      	orrs	r3, r7
 8015cb8:	81a3      	strh	r3, [r4, #12]
 8015cba:	e7ce      	b.n	8015c5a <__smakebuf_r+0x1a>

08015cbc <_fstat_r>:
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	b570      	push	{r4, r5, r6, lr}
 8015cc0:	4d06      	ldr	r5, [pc, #24]	; (8015cdc <_fstat_r+0x20>)
 8015cc2:	0004      	movs	r4, r0
 8015cc4:	0008      	movs	r0, r1
 8015cc6:	0011      	movs	r1, r2
 8015cc8:	602b      	str	r3, [r5, #0]
 8015cca:	f7f2 ff76 	bl	8008bba <_fstat>
 8015cce:	1c43      	adds	r3, r0, #1
 8015cd0:	d103      	bne.n	8015cda <_fstat_r+0x1e>
 8015cd2:	682b      	ldr	r3, [r5, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d000      	beq.n	8015cda <_fstat_r+0x1e>
 8015cd8:	6023      	str	r3, [r4, #0]
 8015cda:	bd70      	pop	{r4, r5, r6, pc}
 8015cdc:	20005a90 	.word	0x20005a90

08015ce0 <_isatty_r>:
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	b570      	push	{r4, r5, r6, lr}
 8015ce4:	4d06      	ldr	r5, [pc, #24]	; (8015d00 <_isatty_r+0x20>)
 8015ce6:	0004      	movs	r4, r0
 8015ce8:	0008      	movs	r0, r1
 8015cea:	602b      	str	r3, [r5, #0]
 8015cec:	f7f2 ff73 	bl	8008bd6 <_isatty>
 8015cf0:	1c43      	adds	r3, r0, #1
 8015cf2:	d103      	bne.n	8015cfc <_isatty_r+0x1c>
 8015cf4:	682b      	ldr	r3, [r5, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d000      	beq.n	8015cfc <_isatty_r+0x1c>
 8015cfa:	6023      	str	r3, [r4, #0]
 8015cfc:	bd70      	pop	{r4, r5, r6, pc}
 8015cfe:	46c0      	nop			; (mov r8, r8)
 8015d00:	20005a90 	.word	0x20005a90

08015d04 <pow>:
 8015d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d06:	0014      	movs	r4, r2
 8015d08:	001d      	movs	r5, r3
 8015d0a:	9000      	str	r0, [sp, #0]
 8015d0c:	9101      	str	r1, [sp, #4]
 8015d0e:	f000 f86f 	bl	8015df0 <__ieee754_pow>
 8015d12:	0022      	movs	r2, r4
 8015d14:	0006      	movs	r6, r0
 8015d16:	000f      	movs	r7, r1
 8015d18:	002b      	movs	r3, r5
 8015d1a:	0020      	movs	r0, r4
 8015d1c:	0029      	movs	r1, r5
 8015d1e:	f7ed f91d 	bl	8002f5c <__aeabi_dcmpun>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	d13f      	bne.n	8015da6 <pow+0xa2>
 8015d26:	9800      	ldr	r0, [sp, #0]
 8015d28:	9901      	ldr	r1, [sp, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	f7ea fb8d 	bl	800044c <__aeabi_dcmpeq>
 8015d32:	2800      	cmp	r0, #0
 8015d34:	d019      	beq.n	8015d6a <pow+0x66>
 8015d36:	2200      	movs	r2, #0
 8015d38:	2300      	movs	r3, #0
 8015d3a:	0020      	movs	r0, r4
 8015d3c:	0029      	movs	r1, r5
 8015d3e:	f7ea fb85 	bl	800044c <__aeabi_dcmpeq>
 8015d42:	2800      	cmp	r0, #0
 8015d44:	d146      	bne.n	8015dd4 <pow+0xd0>
 8015d46:	0020      	movs	r0, r4
 8015d48:	0029      	movs	r1, r5
 8015d4a:	f000 f849 	bl	8015de0 <finite>
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	d029      	beq.n	8015da6 <pow+0xa2>
 8015d52:	2200      	movs	r2, #0
 8015d54:	2300      	movs	r3, #0
 8015d56:	0020      	movs	r0, r4
 8015d58:	0029      	movs	r1, r5
 8015d5a:	f7ea fb7d 	bl	8000458 <__aeabi_dcmplt>
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	d021      	beq.n	8015da6 <pow+0xa2>
 8015d62:	f7fd fadb 	bl	801331c <__errno>
 8015d66:	2322      	movs	r3, #34	; 0x22
 8015d68:	e01c      	b.n	8015da4 <pow+0xa0>
 8015d6a:	0030      	movs	r0, r6
 8015d6c:	0039      	movs	r1, r7
 8015d6e:	f000 f837 	bl	8015de0 <finite>
 8015d72:	2800      	cmp	r0, #0
 8015d74:	d11b      	bne.n	8015dae <pow+0xaa>
 8015d76:	9800      	ldr	r0, [sp, #0]
 8015d78:	9901      	ldr	r1, [sp, #4]
 8015d7a:	f000 f831 	bl	8015de0 <finite>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d015      	beq.n	8015dae <pow+0xaa>
 8015d82:	0020      	movs	r0, r4
 8015d84:	0029      	movs	r1, r5
 8015d86:	f000 f82b 	bl	8015de0 <finite>
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	d00f      	beq.n	8015dae <pow+0xaa>
 8015d8e:	0032      	movs	r2, r6
 8015d90:	003b      	movs	r3, r7
 8015d92:	0030      	movs	r0, r6
 8015d94:	0039      	movs	r1, r7
 8015d96:	f7ed f8e1 	bl	8002f5c <__aeabi_dcmpun>
 8015d9a:	2800      	cmp	r0, #0
 8015d9c:	d0e1      	beq.n	8015d62 <pow+0x5e>
 8015d9e:	f7fd fabd 	bl	801331c <__errno>
 8015da2:	2321      	movs	r3, #33	; 0x21
 8015da4:	6003      	str	r3, [r0, #0]
 8015da6:	0030      	movs	r0, r6
 8015da8:	0039      	movs	r1, r7
 8015daa:	b003      	add	sp, #12
 8015dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dae:	2200      	movs	r2, #0
 8015db0:	2300      	movs	r3, #0
 8015db2:	0030      	movs	r0, r6
 8015db4:	0039      	movs	r1, r7
 8015db6:	f7ea fb49 	bl	800044c <__aeabi_dcmpeq>
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	d0f3      	beq.n	8015da6 <pow+0xa2>
 8015dbe:	9800      	ldr	r0, [sp, #0]
 8015dc0:	9901      	ldr	r1, [sp, #4]
 8015dc2:	f000 f80d 	bl	8015de0 <finite>
 8015dc6:	2800      	cmp	r0, #0
 8015dc8:	d0ed      	beq.n	8015da6 <pow+0xa2>
 8015dca:	0020      	movs	r0, r4
 8015dcc:	0029      	movs	r1, r5
 8015dce:	f000 f807 	bl	8015de0 <finite>
 8015dd2:	e7c4      	b.n	8015d5e <pow+0x5a>
 8015dd4:	2600      	movs	r6, #0
 8015dd6:	4f01      	ldr	r7, [pc, #4]	; (8015ddc <pow+0xd8>)
 8015dd8:	e7e5      	b.n	8015da6 <pow+0xa2>
 8015dda:	46c0      	nop			; (mov r8, r8)
 8015ddc:	3ff00000 	.word	0x3ff00000

08015de0 <finite>:
 8015de0:	4b02      	ldr	r3, [pc, #8]	; (8015dec <finite+0xc>)
 8015de2:	0048      	lsls	r0, r1, #1
 8015de4:	0840      	lsrs	r0, r0, #1
 8015de6:	18c0      	adds	r0, r0, r3
 8015de8:	0fc0      	lsrs	r0, r0, #31
 8015dea:	4770      	bx	lr
 8015dec:	80100000 	.word	0x80100000

08015df0 <__ieee754_pow>:
 8015df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015df2:	b095      	sub	sp, #84	; 0x54
 8015df4:	9202      	str	r2, [sp, #8]
 8015df6:	9303      	str	r3, [sp, #12]
 8015df8:	9b03      	ldr	r3, [sp, #12]
 8015dfa:	9a03      	ldr	r2, [sp, #12]
 8015dfc:	9304      	str	r3, [sp, #16]
 8015dfe:	9b02      	ldr	r3, [sp, #8]
 8015e00:	0056      	lsls	r6, r2, #1
 8015e02:	001a      	movs	r2, r3
 8015e04:	0876      	lsrs	r6, r6, #1
 8015e06:	0007      	movs	r7, r0
 8015e08:	000d      	movs	r5, r1
 8015e0a:	4332      	orrs	r2, r6
 8015e0c:	d119      	bne.n	8015e42 <__ieee754_pow+0x52>
 8015e0e:	2180      	movs	r1, #128	; 0x80
 8015e10:	0309      	lsls	r1, r1, #12
 8015e12:	4069      	eors	r1, r5
 8015e14:	0002      	movs	r2, r0
 8015e16:	000b      	movs	r3, r1
 8015e18:	1892      	adds	r2, r2, r2
 8015e1a:	415b      	adcs	r3, r3
 8015e1c:	4989      	ldr	r1, [pc, #548]	; (8016044 <__ieee754_pow+0x254>)
 8015e1e:	428b      	cmp	r3, r1
 8015e20:	d806      	bhi.n	8015e30 <__ieee754_pow+0x40>
 8015e22:	d001      	beq.n	8015e28 <__ieee754_pow+0x38>
 8015e24:	f000 fcb6 	bl	8016794 <__ieee754_pow+0x9a4>
 8015e28:	2a00      	cmp	r2, #0
 8015e2a:	d101      	bne.n	8015e30 <__ieee754_pow+0x40>
 8015e2c:	f000 fcb2 	bl	8016794 <__ieee754_pow+0x9a4>
 8015e30:	9a02      	ldr	r2, [sp, #8]
 8015e32:	9b03      	ldr	r3, [sp, #12]
 8015e34:	0038      	movs	r0, r7
 8015e36:	0029      	movs	r1, r5
 8015e38:	f7eb faf2 	bl	8001420 <__aeabi_dadd>
 8015e3c:	9000      	str	r0, [sp, #0]
 8015e3e:	9101      	str	r1, [sp, #4]
 8015e40:	e0ad      	b.n	8015f9e <__ieee754_pow+0x1ae>
 8015e42:	4a81      	ldr	r2, [pc, #516]	; (8016048 <__ieee754_pow+0x258>)
 8015e44:	004c      	lsls	r4, r1, #1
 8015e46:	9108      	str	r1, [sp, #32]
 8015e48:	9000      	str	r0, [sp, #0]
 8015e4a:	0864      	lsrs	r4, r4, #1
 8015e4c:	4294      	cmp	r4, r2
 8015e4e:	dc08      	bgt.n	8015e62 <__ieee754_pow+0x72>
 8015e50:	d101      	bne.n	8015e56 <__ieee754_pow+0x66>
 8015e52:	2800      	cmp	r0, #0
 8015e54:	d1ec      	bne.n	8015e30 <__ieee754_pow+0x40>
 8015e56:	4a7c      	ldr	r2, [pc, #496]	; (8016048 <__ieee754_pow+0x258>)
 8015e58:	4296      	cmp	r6, r2
 8015e5a:	dc02      	bgt.n	8015e62 <__ieee754_pow+0x72>
 8015e5c:	d10c      	bne.n	8015e78 <__ieee754_pow+0x88>
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d00a      	beq.n	8015e78 <__ieee754_pow+0x88>
 8015e62:	4b7a      	ldr	r3, [pc, #488]	; (801604c <__ieee754_pow+0x25c>)
 8015e64:	18eb      	adds	r3, r5, r3
 8015e66:	433b      	orrs	r3, r7
 8015e68:	d1e2      	bne.n	8015e30 <__ieee754_pow+0x40>
 8015e6a:	2180      	movs	r1, #128	; 0x80
 8015e6c:	9803      	ldr	r0, [sp, #12]
 8015e6e:	0309      	lsls	r1, r1, #12
 8015e70:	4048      	eors	r0, r1
 8015e72:	0003      	movs	r3, r0
 8015e74:	9a02      	ldr	r2, [sp, #8]
 8015e76:	e7cf      	b.n	8015e18 <__ieee754_pow+0x28>
 8015e78:	2200      	movs	r2, #0
 8015e7a:	9206      	str	r2, [sp, #24]
 8015e7c:	2d00      	cmp	r5, #0
 8015e7e:	da69      	bge.n	8015f54 <__ieee754_pow+0x164>
 8015e80:	4a73      	ldr	r2, [pc, #460]	; (8016050 <__ieee754_pow+0x260>)
 8015e82:	4296      	cmp	r6, r2
 8015e84:	dc64      	bgt.n	8015f50 <__ieee754_pow+0x160>
 8015e86:	4a73      	ldr	r2, [pc, #460]	; (8016054 <__ieee754_pow+0x264>)
 8015e88:	4296      	cmp	r6, r2
 8015e8a:	dd11      	ble.n	8015eb0 <__ieee754_pow+0xc0>
 8015e8c:	4972      	ldr	r1, [pc, #456]	; (8016058 <__ieee754_pow+0x268>)
 8015e8e:	1532      	asrs	r2, r6, #20
 8015e90:	1852      	adds	r2, r2, r1
 8015e92:	2a14      	cmp	r2, #20
 8015e94:	dd3c      	ble.n	8015f10 <__ieee754_pow+0x120>
 8015e96:	2134      	movs	r1, #52	; 0x34
 8015e98:	1a89      	subs	r1, r1, r2
 8015e9a:	9a02      	ldr	r2, [sp, #8]
 8015e9c:	40ca      	lsrs	r2, r1
 8015e9e:	0010      	movs	r0, r2
 8015ea0:	4088      	lsls	r0, r1
 8015ea2:	4298      	cmp	r0, r3
 8015ea4:	d104      	bne.n	8015eb0 <__ieee754_pow+0xc0>
 8015ea6:	2101      	movs	r1, #1
 8015ea8:	400a      	ands	r2, r1
 8015eaa:	1849      	adds	r1, r1, r1
 8015eac:	1a8a      	subs	r2, r1, r2
 8015eae:	9206      	str	r2, [sp, #24]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d03c      	beq.n	8015f2e <__ieee754_pow+0x13e>
 8015eb4:	0038      	movs	r0, r7
 8015eb6:	0029      	movs	r1, r5
 8015eb8:	f000 fca4 	bl	8016804 <fabs>
 8015ebc:	9000      	str	r0, [sp, #0]
 8015ebe:	9101      	str	r1, [sp, #4]
 8015ec0:	2f00      	cmp	r7, #0
 8015ec2:	d000      	beq.n	8015ec6 <__ieee754_pow+0xd6>
 8015ec4:	e094      	b.n	8015ff0 <__ieee754_pow+0x200>
 8015ec6:	2c00      	cmp	r4, #0
 8015ec8:	d005      	beq.n	8015ed6 <__ieee754_pow+0xe6>
 8015eca:	4a64      	ldr	r2, [pc, #400]	; (801605c <__ieee754_pow+0x26c>)
 8015ecc:	00ab      	lsls	r3, r5, #2
 8015ece:	089b      	lsrs	r3, r3, #2
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d000      	beq.n	8015ed6 <__ieee754_pow+0xe6>
 8015ed4:	e08c      	b.n	8015ff0 <__ieee754_pow+0x200>
 8015ed6:	9b04      	ldr	r3, [sp, #16]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	da07      	bge.n	8015eec <__ieee754_pow+0xfc>
 8015edc:	9a00      	ldr	r2, [sp, #0]
 8015ede:	9b01      	ldr	r3, [sp, #4]
 8015ee0:	2000      	movs	r0, #0
 8015ee2:	495e      	ldr	r1, [pc, #376]	; (801605c <__ieee754_pow+0x26c>)
 8015ee4:	f7eb fdfc 	bl	8001ae0 <__aeabi_ddiv>
 8015ee8:	9000      	str	r0, [sp, #0]
 8015eea:	9101      	str	r1, [sp, #4]
 8015eec:	9b08      	ldr	r3, [sp, #32]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	da55      	bge.n	8015f9e <__ieee754_pow+0x1ae>
 8015ef2:	4b56      	ldr	r3, [pc, #344]	; (801604c <__ieee754_pow+0x25c>)
 8015ef4:	18e4      	adds	r4, r4, r3
 8015ef6:	9b06      	ldr	r3, [sp, #24]
 8015ef8:	431c      	orrs	r4, r3
 8015efa:	d000      	beq.n	8015efe <__ieee754_pow+0x10e>
 8015efc:	e06c      	b.n	8015fd8 <__ieee754_pow+0x1e8>
 8015efe:	9a00      	ldr	r2, [sp, #0]
 8015f00:	9b01      	ldr	r3, [sp, #4]
 8015f02:	0010      	movs	r0, r2
 8015f04:	0019      	movs	r1, r3
 8015f06:	f7ec fca7 	bl	8002858 <__aeabi_dsub>
 8015f0a:	0002      	movs	r2, r0
 8015f0c:	000b      	movs	r3, r1
 8015f0e:	e01c      	b.n	8015f4a <__ieee754_pow+0x15a>
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d1cf      	bne.n	8015eb4 <__ieee754_pow+0xc4>
 8015f14:	3314      	adds	r3, #20
 8015f16:	1a9a      	subs	r2, r3, r2
 8015f18:	0033      	movs	r3, r6
 8015f1a:	4113      	asrs	r3, r2
 8015f1c:	0019      	movs	r1, r3
 8015f1e:	4091      	lsls	r1, r2
 8015f20:	42b1      	cmp	r1, r6
 8015f22:	d104      	bne.n	8015f2e <__ieee754_pow+0x13e>
 8015f24:	2201      	movs	r2, #1
 8015f26:	4013      	ands	r3, r2
 8015f28:	1892      	adds	r2, r2, r2
 8015f2a:	1ad3      	subs	r3, r2, r3
 8015f2c:	9306      	str	r3, [sp, #24]
 8015f2e:	4b4b      	ldr	r3, [pc, #300]	; (801605c <__ieee754_pow+0x26c>)
 8015f30:	429e      	cmp	r6, r3
 8015f32:	d138      	bne.n	8015fa6 <__ieee754_pow+0x1b6>
 8015f34:	0038      	movs	r0, r7
 8015f36:	0029      	movs	r1, r5
 8015f38:	9b04      	ldr	r3, [sp, #16]
 8015f3a:	9000      	str	r0, [sp, #0]
 8015f3c:	9101      	str	r1, [sp, #4]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	da2d      	bge.n	8015f9e <__ieee754_pow+0x1ae>
 8015f42:	003a      	movs	r2, r7
 8015f44:	002b      	movs	r3, r5
 8015f46:	2000      	movs	r0, #0
 8015f48:	4944      	ldr	r1, [pc, #272]	; (801605c <__ieee754_pow+0x26c>)
 8015f4a:	f7eb fdc9 	bl	8001ae0 <__aeabi_ddiv>
 8015f4e:	e775      	b.n	8015e3c <__ieee754_pow+0x4c>
 8015f50:	2202      	movs	r2, #2
 8015f52:	9206      	str	r2, [sp, #24]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d1ad      	bne.n	8015eb4 <__ieee754_pow+0xc4>
 8015f58:	4b3b      	ldr	r3, [pc, #236]	; (8016048 <__ieee754_pow+0x258>)
 8015f5a:	429e      	cmp	r6, r3
 8015f5c:	d1e7      	bne.n	8015f2e <__ieee754_pow+0x13e>
 8015f5e:	4b3b      	ldr	r3, [pc, #236]	; (801604c <__ieee754_pow+0x25c>)
 8015f60:	18e3      	adds	r3, r4, r3
 8015f62:	433b      	orrs	r3, r7
 8015f64:	d101      	bne.n	8015f6a <__ieee754_pow+0x17a>
 8015f66:	f000 fc15 	bl	8016794 <__ieee754_pow+0x9a4>
 8015f6a:	4b3a      	ldr	r3, [pc, #232]	; (8016054 <__ieee754_pow+0x264>)
 8015f6c:	429c      	cmp	r4, r3
 8015f6e:	dd09      	ble.n	8015f84 <__ieee754_pow+0x194>
 8015f70:	9b04      	ldr	r3, [sp, #16]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	da01      	bge.n	8015f7a <__ieee754_pow+0x18a>
 8015f76:	f000 fc11 	bl	801679c <__ieee754_pow+0x9ac>
 8015f7a:	9b02      	ldr	r3, [sp, #8]
 8015f7c:	9c03      	ldr	r4, [sp, #12]
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	9401      	str	r4, [sp, #4]
 8015f82:	e00c      	b.n	8015f9e <__ieee754_pow+0x1ae>
 8015f84:	9b04      	ldr	r3, [sp, #16]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	db01      	blt.n	8015f8e <__ieee754_pow+0x19e>
 8015f8a:	f000 fc07 	bl	801679c <__ieee754_pow+0x9ac>
 8015f8e:	2280      	movs	r2, #128	; 0x80
 8015f90:	0612      	lsls	r2, r2, #24
 8015f92:	4694      	mov	ip, r2
 8015f94:	9b02      	ldr	r3, [sp, #8]
 8015f96:	9300      	str	r3, [sp, #0]
 8015f98:	9b03      	ldr	r3, [sp, #12]
 8015f9a:	4463      	add	r3, ip
 8015f9c:	9301      	str	r3, [sp, #4]
 8015f9e:	9800      	ldr	r0, [sp, #0]
 8015fa0:	9901      	ldr	r1, [sp, #4]
 8015fa2:	b015      	add	sp, #84	; 0x54
 8015fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fa6:	2380      	movs	r3, #128	; 0x80
 8015fa8:	9a04      	ldr	r2, [sp, #16]
 8015faa:	05db      	lsls	r3, r3, #23
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d106      	bne.n	8015fbe <__ieee754_pow+0x1ce>
 8015fb0:	003a      	movs	r2, r7
 8015fb2:	002b      	movs	r3, r5
 8015fb4:	0038      	movs	r0, r7
 8015fb6:	0029      	movs	r1, r5
 8015fb8:	f7ec f98c 	bl	80022d4 <__aeabi_dmul>
 8015fbc:	e73e      	b.n	8015e3c <__ieee754_pow+0x4c>
 8015fbe:	4b28      	ldr	r3, [pc, #160]	; (8016060 <__ieee754_pow+0x270>)
 8015fc0:	9a04      	ldr	r2, [sp, #16]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d000      	beq.n	8015fc8 <__ieee754_pow+0x1d8>
 8015fc6:	e775      	b.n	8015eb4 <__ieee754_pow+0xc4>
 8015fc8:	2d00      	cmp	r5, #0
 8015fca:	da00      	bge.n	8015fce <__ieee754_pow+0x1de>
 8015fcc:	e772      	b.n	8015eb4 <__ieee754_pow+0xc4>
 8015fce:	0038      	movs	r0, r7
 8015fd0:	0029      	movs	r1, r5
 8015fd2:	f000 fcb7 	bl	8016944 <__ieee754_sqrt>
 8015fd6:	e731      	b.n	8015e3c <__ieee754_pow+0x4c>
 8015fd8:	9b06      	ldr	r3, [sp, #24]
 8015fda:	2b01      	cmp	r3, #1
 8015fdc:	d1df      	bne.n	8015f9e <__ieee754_pow+0x1ae>
 8015fde:	9800      	ldr	r0, [sp, #0]
 8015fe0:	2180      	movs	r1, #128	; 0x80
 8015fe2:	0002      	movs	r2, r0
 8015fe4:	9801      	ldr	r0, [sp, #4]
 8015fe6:	0609      	lsls	r1, r1, #24
 8015fe8:	1843      	adds	r3, r0, r1
 8015fea:	9200      	str	r2, [sp, #0]
 8015fec:	9301      	str	r3, [sp, #4]
 8015fee:	e7d6      	b.n	8015f9e <__ieee754_pow+0x1ae>
 8015ff0:	0feb      	lsrs	r3, r5, #31
 8015ff2:	3b01      	subs	r3, #1
 8015ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8015ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ff8:	9b06      	ldr	r3, [sp, #24]
 8015ffa:	4313      	orrs	r3, r2
 8015ffc:	d104      	bne.n	8016008 <__ieee754_pow+0x218>
 8015ffe:	003a      	movs	r2, r7
 8016000:	002b      	movs	r3, r5
 8016002:	0038      	movs	r0, r7
 8016004:	0029      	movs	r1, r5
 8016006:	e77e      	b.n	8015f06 <__ieee754_pow+0x116>
 8016008:	4b16      	ldr	r3, [pc, #88]	; (8016064 <__ieee754_pow+0x274>)
 801600a:	429e      	cmp	r6, r3
 801600c:	dc00      	bgt.n	8016010 <__ieee754_pow+0x220>
 801600e:	e0f1      	b.n	80161f4 <__ieee754_pow+0x404>
 8016010:	4b15      	ldr	r3, [pc, #84]	; (8016068 <__ieee754_pow+0x278>)
 8016012:	429e      	cmp	r6, r3
 8016014:	dd09      	ble.n	801602a <__ieee754_pow+0x23a>
 8016016:	4b0f      	ldr	r3, [pc, #60]	; (8016054 <__ieee754_pow+0x264>)
 8016018:	429c      	cmp	r4, r3
 801601a:	dc0c      	bgt.n	8016036 <__ieee754_pow+0x246>
 801601c:	9b04      	ldr	r3, [sp, #16]
 801601e:	2b00      	cmp	r3, #0
 8016020:	da0c      	bge.n	801603c <__ieee754_pow+0x24c>
 8016022:	2000      	movs	r0, #0
 8016024:	f000 fc86 	bl	8016934 <__math_oflow>
 8016028:	e708      	b.n	8015e3c <__ieee754_pow+0x4c>
 801602a:	4b10      	ldr	r3, [pc, #64]	; (801606c <__ieee754_pow+0x27c>)
 801602c:	429c      	cmp	r4, r3
 801602e:	ddf5      	ble.n	801601c <__ieee754_pow+0x22c>
 8016030:	4b0a      	ldr	r3, [pc, #40]	; (801605c <__ieee754_pow+0x26c>)
 8016032:	429c      	cmp	r4, r3
 8016034:	dd1c      	ble.n	8016070 <__ieee754_pow+0x280>
 8016036:	9b04      	ldr	r3, [sp, #16]
 8016038:	2b00      	cmp	r3, #0
 801603a:	dcf2      	bgt.n	8016022 <__ieee754_pow+0x232>
 801603c:	2000      	movs	r0, #0
 801603e:	f000 fc72 	bl	8016926 <__math_uflow>
 8016042:	e6fb      	b.n	8015e3c <__ieee754_pow+0x4c>
 8016044:	fff00000 	.word	0xfff00000
 8016048:	7ff00000 	.word	0x7ff00000
 801604c:	c0100000 	.word	0xc0100000
 8016050:	433fffff 	.word	0x433fffff
 8016054:	3fefffff 	.word	0x3fefffff
 8016058:	fffffc01 	.word	0xfffffc01
 801605c:	3ff00000 	.word	0x3ff00000
 8016060:	3fe00000 	.word	0x3fe00000
 8016064:	41e00000 	.word	0x41e00000
 8016068:	43f00000 	.word	0x43f00000
 801606c:	3feffffe 	.word	0x3feffffe
 8016070:	2200      	movs	r2, #0
 8016072:	9800      	ldr	r0, [sp, #0]
 8016074:	9901      	ldr	r1, [sp, #4]
 8016076:	4b53      	ldr	r3, [pc, #332]	; (80161c4 <__ieee754_pow+0x3d4>)
 8016078:	f7ec fbee 	bl	8002858 <__aeabi_dsub>
 801607c:	22c0      	movs	r2, #192	; 0xc0
 801607e:	4b52      	ldr	r3, [pc, #328]	; (80161c8 <__ieee754_pow+0x3d8>)
 8016080:	05d2      	lsls	r2, r2, #23
 8016082:	0004      	movs	r4, r0
 8016084:	000d      	movs	r5, r1
 8016086:	f7ec f925 	bl	80022d4 <__aeabi_dmul>
 801608a:	4a50      	ldr	r2, [pc, #320]	; (80161cc <__ieee754_pow+0x3dc>)
 801608c:	0006      	movs	r6, r0
 801608e:	000f      	movs	r7, r1
 8016090:	0020      	movs	r0, r4
 8016092:	0029      	movs	r1, r5
 8016094:	4b4e      	ldr	r3, [pc, #312]	; (80161d0 <__ieee754_pow+0x3e0>)
 8016096:	f7ec f91d 	bl	80022d4 <__aeabi_dmul>
 801609a:	2200      	movs	r2, #0
 801609c:	9000      	str	r0, [sp, #0]
 801609e:	9101      	str	r1, [sp, #4]
 80160a0:	4b4c      	ldr	r3, [pc, #304]	; (80161d4 <__ieee754_pow+0x3e4>)
 80160a2:	0020      	movs	r0, r4
 80160a4:	0029      	movs	r1, r5
 80160a6:	f7ec f915 	bl	80022d4 <__aeabi_dmul>
 80160aa:	0002      	movs	r2, r0
 80160ac:	000b      	movs	r3, r1
 80160ae:	484a      	ldr	r0, [pc, #296]	; (80161d8 <__ieee754_pow+0x3e8>)
 80160b0:	494a      	ldr	r1, [pc, #296]	; (80161dc <__ieee754_pow+0x3ec>)
 80160b2:	f7ec fbd1 	bl	8002858 <__aeabi_dsub>
 80160b6:	0022      	movs	r2, r4
 80160b8:	002b      	movs	r3, r5
 80160ba:	f7ec f90b 	bl	80022d4 <__aeabi_dmul>
 80160be:	0002      	movs	r2, r0
 80160c0:	000b      	movs	r3, r1
 80160c2:	2000      	movs	r0, #0
 80160c4:	4946      	ldr	r1, [pc, #280]	; (80161e0 <__ieee754_pow+0x3f0>)
 80160c6:	f7ec fbc7 	bl	8002858 <__aeabi_dsub>
 80160ca:	0022      	movs	r2, r4
 80160cc:	002b      	movs	r3, r5
 80160ce:	9004      	str	r0, [sp, #16]
 80160d0:	9105      	str	r1, [sp, #20]
 80160d2:	0020      	movs	r0, r4
 80160d4:	0029      	movs	r1, r5
 80160d6:	f7ec f8fd 	bl	80022d4 <__aeabi_dmul>
 80160da:	0002      	movs	r2, r0
 80160dc:	000b      	movs	r3, r1
 80160de:	9804      	ldr	r0, [sp, #16]
 80160e0:	9905      	ldr	r1, [sp, #20]
 80160e2:	f7ec f8f7 	bl	80022d4 <__aeabi_dmul>
 80160e6:	4a3f      	ldr	r2, [pc, #252]	; (80161e4 <__ieee754_pow+0x3f4>)
 80160e8:	4b37      	ldr	r3, [pc, #220]	; (80161c8 <__ieee754_pow+0x3d8>)
 80160ea:	f7ec f8f3 	bl	80022d4 <__aeabi_dmul>
 80160ee:	0002      	movs	r2, r0
 80160f0:	000b      	movs	r3, r1
 80160f2:	9800      	ldr	r0, [sp, #0]
 80160f4:	9901      	ldr	r1, [sp, #4]
 80160f6:	f7ec fbaf 	bl	8002858 <__aeabi_dsub>
 80160fa:	0002      	movs	r2, r0
 80160fc:	000b      	movs	r3, r1
 80160fe:	0004      	movs	r4, r0
 8016100:	000d      	movs	r5, r1
 8016102:	0030      	movs	r0, r6
 8016104:	0039      	movs	r1, r7
 8016106:	f7eb f98b 	bl	8001420 <__aeabi_dadd>
 801610a:	2000      	movs	r0, #0
 801610c:	0032      	movs	r2, r6
 801610e:	003b      	movs	r3, r7
 8016110:	9004      	str	r0, [sp, #16]
 8016112:	9105      	str	r1, [sp, #20]
 8016114:	f7ec fba0 	bl	8002858 <__aeabi_dsub>
 8016118:	0002      	movs	r2, r0
 801611a:	000b      	movs	r3, r1
 801611c:	0020      	movs	r0, r4
 801611e:	0029      	movs	r1, r5
 8016120:	f7ec fb9a 	bl	8002858 <__aeabi_dsub>
 8016124:	9b06      	ldr	r3, [sp, #24]
 8016126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016128:	3b01      	subs	r3, #1
 801612a:	0006      	movs	r6, r0
 801612c:	000f      	movs	r7, r1
 801612e:	4313      	orrs	r3, r2
 8016130:	d000      	beq.n	8016134 <__ieee754_pow+0x344>
 8016132:	e1dc      	b.n	80164ee <__ieee754_pow+0x6fe>
 8016134:	2300      	movs	r3, #0
 8016136:	4c2c      	ldr	r4, [pc, #176]	; (80161e8 <__ieee754_pow+0x3f8>)
 8016138:	9300      	str	r3, [sp, #0]
 801613a:	9401      	str	r4, [sp, #4]
 801613c:	9c02      	ldr	r4, [sp, #8]
 801613e:	9d03      	ldr	r5, [sp, #12]
 8016140:	9802      	ldr	r0, [sp, #8]
 8016142:	9903      	ldr	r1, [sp, #12]
 8016144:	2400      	movs	r4, #0
 8016146:	002b      	movs	r3, r5
 8016148:	0022      	movs	r2, r4
 801614a:	f7ec fb85 	bl	8002858 <__aeabi_dsub>
 801614e:	9a04      	ldr	r2, [sp, #16]
 8016150:	9b05      	ldr	r3, [sp, #20]
 8016152:	f7ec f8bf 	bl	80022d4 <__aeabi_dmul>
 8016156:	9a02      	ldr	r2, [sp, #8]
 8016158:	9b03      	ldr	r3, [sp, #12]
 801615a:	9006      	str	r0, [sp, #24]
 801615c:	9107      	str	r1, [sp, #28]
 801615e:	0030      	movs	r0, r6
 8016160:	0039      	movs	r1, r7
 8016162:	f7ec f8b7 	bl	80022d4 <__aeabi_dmul>
 8016166:	0002      	movs	r2, r0
 8016168:	000b      	movs	r3, r1
 801616a:	9806      	ldr	r0, [sp, #24]
 801616c:	9907      	ldr	r1, [sp, #28]
 801616e:	f7eb f957 	bl	8001420 <__aeabi_dadd>
 8016172:	0022      	movs	r2, r4
 8016174:	002b      	movs	r3, r5
 8016176:	0006      	movs	r6, r0
 8016178:	000f      	movs	r7, r1
 801617a:	9804      	ldr	r0, [sp, #16]
 801617c:	9905      	ldr	r1, [sp, #20]
 801617e:	f7ec f8a9 	bl	80022d4 <__aeabi_dmul>
 8016182:	0003      	movs	r3, r0
 8016184:	000c      	movs	r4, r1
 8016186:	9004      	str	r0, [sp, #16]
 8016188:	9105      	str	r1, [sp, #20]
 801618a:	9306      	str	r3, [sp, #24]
 801618c:	9407      	str	r4, [sp, #28]
 801618e:	0002      	movs	r2, r0
 8016190:	000b      	movs	r3, r1
 8016192:	0030      	movs	r0, r6
 8016194:	0039      	movs	r1, r7
 8016196:	f7eb f943 	bl	8001420 <__aeabi_dadd>
 801619a:	4b14      	ldr	r3, [pc, #80]	; (80161ec <__ieee754_pow+0x3fc>)
 801619c:	0005      	movs	r5, r0
 801619e:	000c      	movs	r4, r1
 80161a0:	9108      	str	r1, [sp, #32]
 80161a2:	4299      	cmp	r1, r3
 80161a4:	dc00      	bgt.n	80161a8 <__ieee754_pow+0x3b8>
 80161a6:	e2d4      	b.n	8016752 <__ieee754_pow+0x962>
 80161a8:	4b11      	ldr	r3, [pc, #68]	; (80161f0 <__ieee754_pow+0x400>)
 80161aa:	18cb      	adds	r3, r1, r3
 80161ac:	4303      	orrs	r3, r0
 80161ae:	d100      	bne.n	80161b2 <__ieee754_pow+0x3c2>
 80161b0:	e1d6      	b.n	8016560 <__ieee754_pow+0x770>
 80161b2:	9800      	ldr	r0, [sp, #0]
 80161b4:	9901      	ldr	r1, [sp, #4]
 80161b6:	2300      	movs	r3, #0
 80161b8:	2200      	movs	r2, #0
 80161ba:	f7ea f94d 	bl	8000458 <__aeabi_dcmplt>
 80161be:	1e43      	subs	r3, r0, #1
 80161c0:	4198      	sbcs	r0, r3
 80161c2:	e72f      	b.n	8016024 <__ieee754_pow+0x234>
 80161c4:	3ff00000 	.word	0x3ff00000
 80161c8:	3ff71547 	.word	0x3ff71547
 80161cc:	f85ddf44 	.word	0xf85ddf44
 80161d0:	3e54ae0b 	.word	0x3e54ae0b
 80161d4:	3fd00000 	.word	0x3fd00000
 80161d8:	55555555 	.word	0x55555555
 80161dc:	3fd55555 	.word	0x3fd55555
 80161e0:	3fe00000 	.word	0x3fe00000
 80161e4:	652b82fe 	.word	0x652b82fe
 80161e8:	bff00000 	.word	0xbff00000
 80161ec:	408fffff 	.word	0x408fffff
 80161f0:	bf700000 	.word	0xbf700000
 80161f4:	4bbf      	ldr	r3, [pc, #764]	; (80164f4 <__ieee754_pow+0x704>)
 80161f6:	2200      	movs	r2, #0
 80161f8:	422b      	tst	r3, r5
 80161fa:	d10a      	bne.n	8016212 <__ieee754_pow+0x422>
 80161fc:	9800      	ldr	r0, [sp, #0]
 80161fe:	9901      	ldr	r1, [sp, #4]
 8016200:	2200      	movs	r2, #0
 8016202:	4bbd      	ldr	r3, [pc, #756]	; (80164f8 <__ieee754_pow+0x708>)
 8016204:	f7ec f866 	bl	80022d4 <__aeabi_dmul>
 8016208:	2235      	movs	r2, #53	; 0x35
 801620a:	9000      	str	r0, [sp, #0]
 801620c:	9101      	str	r1, [sp, #4]
 801620e:	9c01      	ldr	r4, [sp, #4]
 8016210:	4252      	negs	r2, r2
 8016212:	49ba      	ldr	r1, [pc, #744]	; (80164fc <__ieee754_pow+0x70c>)
 8016214:	1523      	asrs	r3, r4, #20
 8016216:	185b      	adds	r3, r3, r1
 8016218:	189b      	adds	r3, r3, r2
 801621a:	0324      	lsls	r4, r4, #12
 801621c:	4db8      	ldr	r5, [pc, #736]	; (8016500 <__ieee754_pow+0x710>)
 801621e:	930d      	str	r3, [sp, #52]	; 0x34
 8016220:	4bb8      	ldr	r3, [pc, #736]	; (8016504 <__ieee754_pow+0x714>)
 8016222:	0b22      	lsrs	r2, r4, #12
 8016224:	4315      	orrs	r5, r2
 8016226:	2400      	movs	r4, #0
 8016228:	429a      	cmp	r2, r3
 801622a:	dd09      	ble.n	8016240 <__ieee754_pow+0x450>
 801622c:	4bb6      	ldr	r3, [pc, #728]	; (8016508 <__ieee754_pow+0x718>)
 801622e:	3401      	adds	r4, #1
 8016230:	429a      	cmp	r2, r3
 8016232:	dd05      	ble.n	8016240 <__ieee754_pow+0x450>
 8016234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016236:	191b      	adds	r3, r3, r4
 8016238:	2400      	movs	r4, #0
 801623a:	930d      	str	r3, [sp, #52]	; 0x34
 801623c:	4bb3      	ldr	r3, [pc, #716]	; (801650c <__ieee754_pow+0x71c>)
 801623e:	18ed      	adds	r5, r5, r3
 8016240:	4bb3      	ldr	r3, [pc, #716]	; (8016510 <__ieee754_pow+0x720>)
 8016242:	00e2      	lsls	r2, r4, #3
 8016244:	189b      	adds	r3, r3, r2
 8016246:	9800      	ldr	r0, [sp, #0]
 8016248:	9901      	ldr	r1, [sp, #4]
 801624a:	920f      	str	r2, [sp, #60]	; 0x3c
 801624c:	0029      	movs	r1, r5
 801624e:	681a      	ldr	r2, [r3, #0]
 8016250:	685b      	ldr	r3, [r3, #4]
 8016252:	0006      	movs	r6, r0
 8016254:	920a      	str	r2, [sp, #40]	; 0x28
 8016256:	930b      	str	r3, [sp, #44]	; 0x2c
 8016258:	f7ec fafe 	bl	8002858 <__aeabi_dsub>
 801625c:	0032      	movs	r2, r6
 801625e:	002b      	movs	r3, r5
 8016260:	9010      	str	r0, [sp, #64]	; 0x40
 8016262:	9111      	str	r1, [sp, #68]	; 0x44
 8016264:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016266:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016268:	f7eb f8da 	bl	8001420 <__aeabi_dadd>
 801626c:	0002      	movs	r2, r0
 801626e:	000b      	movs	r3, r1
 8016270:	2000      	movs	r0, #0
 8016272:	49a3      	ldr	r1, [pc, #652]	; (8016500 <__ieee754_pow+0x710>)
 8016274:	f7eb fc34 	bl	8001ae0 <__aeabi_ddiv>
 8016278:	0002      	movs	r2, r0
 801627a:	000b      	movs	r3, r1
 801627c:	9012      	str	r0, [sp, #72]	; 0x48
 801627e:	9113      	str	r1, [sp, #76]	; 0x4c
 8016280:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016282:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016284:	f7ec f826 	bl	80022d4 <__aeabi_dmul>
 8016288:	9008      	str	r0, [sp, #32]
 801628a:	9109      	str	r1, [sp, #36]	; 0x24
 801628c:	9a08      	ldr	r2, [sp, #32]
 801628e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016290:	9204      	str	r2, [sp, #16]
 8016292:	9305      	str	r3, [sp, #20]
 8016294:	2300      	movs	r3, #0
 8016296:	2180      	movs	r1, #128	; 0x80
 8016298:	2080      	movs	r0, #128	; 0x80
 801629a:	9304      	str	r3, [sp, #16]
 801629c:	9a04      	ldr	r2, [sp, #16]
 801629e:	9b05      	ldr	r3, [sp, #20]
 80162a0:	9200      	str	r2, [sp, #0]
 80162a2:	9301      	str	r3, [sp, #4]
 80162a4:	2200      	movs	r2, #0
 80162a6:	002f      	movs	r7, r5
 80162a8:	0589      	lsls	r1, r1, #22
 80162aa:	106d      	asrs	r5, r5, #1
 80162ac:	4329      	orrs	r1, r5
 80162ae:	0300      	lsls	r0, r0, #12
 80162b0:	1809      	adds	r1, r1, r0
 80162b2:	04a0      	lsls	r0, r4, #18
 80162b4:	180b      	adds	r3, r1, r0
 80162b6:	9800      	ldr	r0, [sp, #0]
 80162b8:	9901      	ldr	r1, [sp, #4]
 80162ba:	0014      	movs	r4, r2
 80162bc:	001d      	movs	r5, r3
 80162be:	f7ec f809 	bl	80022d4 <__aeabi_dmul>
 80162c2:	0002      	movs	r2, r0
 80162c4:	000b      	movs	r3, r1
 80162c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80162c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80162ca:	f7ec fac5 	bl	8002858 <__aeabi_dsub>
 80162ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162d2:	9010      	str	r0, [sp, #64]	; 0x40
 80162d4:	9111      	str	r1, [sp, #68]	; 0x44
 80162d6:	0020      	movs	r0, r4
 80162d8:	0029      	movs	r1, r5
 80162da:	f7ec fabd 	bl	8002858 <__aeabi_dsub>
 80162de:	0002      	movs	r2, r0
 80162e0:	000b      	movs	r3, r1
 80162e2:	0030      	movs	r0, r6
 80162e4:	0039      	movs	r1, r7
 80162e6:	f7ec fab7 	bl	8002858 <__aeabi_dsub>
 80162ea:	9a00      	ldr	r2, [sp, #0]
 80162ec:	9b01      	ldr	r3, [sp, #4]
 80162ee:	f7eb fff1 	bl	80022d4 <__aeabi_dmul>
 80162f2:	0002      	movs	r2, r0
 80162f4:	000b      	movs	r3, r1
 80162f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80162f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80162fa:	f7ec faad 	bl	8002858 <__aeabi_dsub>
 80162fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016302:	f7eb ffe7 	bl	80022d4 <__aeabi_dmul>
 8016306:	9a08      	ldr	r2, [sp, #32]
 8016308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801630a:	900a      	str	r0, [sp, #40]	; 0x28
 801630c:	910b      	str	r1, [sp, #44]	; 0x2c
 801630e:	0010      	movs	r0, r2
 8016310:	0019      	movs	r1, r3
 8016312:	f7eb ffdf 	bl	80022d4 <__aeabi_dmul>
 8016316:	0006      	movs	r6, r0
 8016318:	000f      	movs	r7, r1
 801631a:	4a7e      	ldr	r2, [pc, #504]	; (8016514 <__ieee754_pow+0x724>)
 801631c:	4b7e      	ldr	r3, [pc, #504]	; (8016518 <__ieee754_pow+0x728>)
 801631e:	f7eb ffd9 	bl	80022d4 <__aeabi_dmul>
 8016322:	4a7e      	ldr	r2, [pc, #504]	; (801651c <__ieee754_pow+0x72c>)
 8016324:	4b7e      	ldr	r3, [pc, #504]	; (8016520 <__ieee754_pow+0x730>)
 8016326:	f7eb f87b 	bl	8001420 <__aeabi_dadd>
 801632a:	0032      	movs	r2, r6
 801632c:	003b      	movs	r3, r7
 801632e:	f7eb ffd1 	bl	80022d4 <__aeabi_dmul>
 8016332:	4a7c      	ldr	r2, [pc, #496]	; (8016524 <__ieee754_pow+0x734>)
 8016334:	4b7c      	ldr	r3, [pc, #496]	; (8016528 <__ieee754_pow+0x738>)
 8016336:	f7eb f873 	bl	8001420 <__aeabi_dadd>
 801633a:	0032      	movs	r2, r6
 801633c:	003b      	movs	r3, r7
 801633e:	f7eb ffc9 	bl	80022d4 <__aeabi_dmul>
 8016342:	4a7a      	ldr	r2, [pc, #488]	; (801652c <__ieee754_pow+0x73c>)
 8016344:	4b7a      	ldr	r3, [pc, #488]	; (8016530 <__ieee754_pow+0x740>)
 8016346:	f7eb f86b 	bl	8001420 <__aeabi_dadd>
 801634a:	0032      	movs	r2, r6
 801634c:	003b      	movs	r3, r7
 801634e:	f7eb ffc1 	bl	80022d4 <__aeabi_dmul>
 8016352:	4a78      	ldr	r2, [pc, #480]	; (8016534 <__ieee754_pow+0x744>)
 8016354:	4b78      	ldr	r3, [pc, #480]	; (8016538 <__ieee754_pow+0x748>)
 8016356:	f7eb f863 	bl	8001420 <__aeabi_dadd>
 801635a:	0032      	movs	r2, r6
 801635c:	003b      	movs	r3, r7
 801635e:	f7eb ffb9 	bl	80022d4 <__aeabi_dmul>
 8016362:	4a76      	ldr	r2, [pc, #472]	; (801653c <__ieee754_pow+0x74c>)
 8016364:	4b76      	ldr	r3, [pc, #472]	; (8016540 <__ieee754_pow+0x750>)
 8016366:	f7eb f85b 	bl	8001420 <__aeabi_dadd>
 801636a:	0032      	movs	r2, r6
 801636c:	0004      	movs	r4, r0
 801636e:	000d      	movs	r5, r1
 8016370:	003b      	movs	r3, r7
 8016372:	0030      	movs	r0, r6
 8016374:	0039      	movs	r1, r7
 8016376:	f7eb ffad 	bl	80022d4 <__aeabi_dmul>
 801637a:	0002      	movs	r2, r0
 801637c:	000b      	movs	r3, r1
 801637e:	0020      	movs	r0, r4
 8016380:	0029      	movs	r1, r5
 8016382:	f7eb ffa7 	bl	80022d4 <__aeabi_dmul>
 8016386:	9a00      	ldr	r2, [sp, #0]
 8016388:	9b01      	ldr	r3, [sp, #4]
 801638a:	0004      	movs	r4, r0
 801638c:	000d      	movs	r5, r1
 801638e:	9808      	ldr	r0, [sp, #32]
 8016390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016392:	f7eb f845 	bl	8001420 <__aeabi_dadd>
 8016396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801639a:	f7eb ff9b 	bl	80022d4 <__aeabi_dmul>
 801639e:	0022      	movs	r2, r4
 80163a0:	002b      	movs	r3, r5
 80163a2:	f7eb f83d 	bl	8001420 <__aeabi_dadd>
 80163a6:	9a00      	ldr	r2, [sp, #0]
 80163a8:	9b01      	ldr	r3, [sp, #4]
 80163aa:	9010      	str	r0, [sp, #64]	; 0x40
 80163ac:	9111      	str	r1, [sp, #68]	; 0x44
 80163ae:	0010      	movs	r0, r2
 80163b0:	0019      	movs	r1, r3
 80163b2:	f7eb ff8f 	bl	80022d4 <__aeabi_dmul>
 80163b6:	2200      	movs	r2, #0
 80163b8:	4b62      	ldr	r3, [pc, #392]	; (8016544 <__ieee754_pow+0x754>)
 80163ba:	0004      	movs	r4, r0
 80163bc:	000d      	movs	r5, r1
 80163be:	f7eb f82f 	bl	8001420 <__aeabi_dadd>
 80163c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80163c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80163c6:	f7eb f82b 	bl	8001420 <__aeabi_dadd>
 80163ca:	2000      	movs	r0, #0
 80163cc:	000f      	movs	r7, r1
 80163ce:	0006      	movs	r6, r0
 80163d0:	0002      	movs	r2, r0
 80163d2:	000b      	movs	r3, r1
 80163d4:	9800      	ldr	r0, [sp, #0]
 80163d6:	9901      	ldr	r1, [sp, #4]
 80163d8:	f7eb ff7c 	bl	80022d4 <__aeabi_dmul>
 80163dc:	2200      	movs	r2, #0
 80163de:	9000      	str	r0, [sp, #0]
 80163e0:	9101      	str	r1, [sp, #4]
 80163e2:	4b58      	ldr	r3, [pc, #352]	; (8016544 <__ieee754_pow+0x754>)
 80163e4:	0030      	movs	r0, r6
 80163e6:	0039      	movs	r1, r7
 80163e8:	f7ec fa36 	bl	8002858 <__aeabi_dsub>
 80163ec:	0022      	movs	r2, r4
 80163ee:	002b      	movs	r3, r5
 80163f0:	f7ec fa32 	bl	8002858 <__aeabi_dsub>
 80163f4:	0002      	movs	r2, r0
 80163f6:	000b      	movs	r3, r1
 80163f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80163fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80163fc:	f7ec fa2c 	bl	8002858 <__aeabi_dsub>
 8016400:	9a08      	ldr	r2, [sp, #32]
 8016402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016404:	f7eb ff66 	bl	80022d4 <__aeabi_dmul>
 8016408:	0032      	movs	r2, r6
 801640a:	0004      	movs	r4, r0
 801640c:	000d      	movs	r5, r1
 801640e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016412:	003b      	movs	r3, r7
 8016414:	f7eb ff5e 	bl	80022d4 <__aeabi_dmul>
 8016418:	0002      	movs	r2, r0
 801641a:	000b      	movs	r3, r1
 801641c:	0020      	movs	r0, r4
 801641e:	0029      	movs	r1, r5
 8016420:	f7ea fffe 	bl	8001420 <__aeabi_dadd>
 8016424:	0004      	movs	r4, r0
 8016426:	000d      	movs	r5, r1
 8016428:	0002      	movs	r2, r0
 801642a:	000b      	movs	r3, r1
 801642c:	9800      	ldr	r0, [sp, #0]
 801642e:	9901      	ldr	r1, [sp, #4]
 8016430:	f7ea fff6 	bl	8001420 <__aeabi_dadd>
 8016434:	22e0      	movs	r2, #224	; 0xe0
 8016436:	2000      	movs	r0, #0
 8016438:	4b43      	ldr	r3, [pc, #268]	; (8016548 <__ieee754_pow+0x758>)
 801643a:	0612      	lsls	r2, r2, #24
 801643c:	0006      	movs	r6, r0
 801643e:	000f      	movs	r7, r1
 8016440:	f7eb ff48 	bl	80022d4 <__aeabi_dmul>
 8016444:	9008      	str	r0, [sp, #32]
 8016446:	9109      	str	r1, [sp, #36]	; 0x24
 8016448:	9a00      	ldr	r2, [sp, #0]
 801644a:	9b01      	ldr	r3, [sp, #4]
 801644c:	0030      	movs	r0, r6
 801644e:	0039      	movs	r1, r7
 8016450:	f7ec fa02 	bl	8002858 <__aeabi_dsub>
 8016454:	0002      	movs	r2, r0
 8016456:	000b      	movs	r3, r1
 8016458:	0020      	movs	r0, r4
 801645a:	0029      	movs	r1, r5
 801645c:	f7ec f9fc 	bl	8002858 <__aeabi_dsub>
 8016460:	4a3a      	ldr	r2, [pc, #232]	; (801654c <__ieee754_pow+0x75c>)
 8016462:	4b39      	ldr	r3, [pc, #228]	; (8016548 <__ieee754_pow+0x758>)
 8016464:	f7eb ff36 	bl	80022d4 <__aeabi_dmul>
 8016468:	4a39      	ldr	r2, [pc, #228]	; (8016550 <__ieee754_pow+0x760>)
 801646a:	0004      	movs	r4, r0
 801646c:	000d      	movs	r5, r1
 801646e:	0030      	movs	r0, r6
 8016470:	0039      	movs	r1, r7
 8016472:	4b38      	ldr	r3, [pc, #224]	; (8016554 <__ieee754_pow+0x764>)
 8016474:	f7eb ff2e 	bl	80022d4 <__aeabi_dmul>
 8016478:	0002      	movs	r2, r0
 801647a:	000b      	movs	r3, r1
 801647c:	0020      	movs	r0, r4
 801647e:	0029      	movs	r1, r5
 8016480:	f7ea ffce 	bl	8001420 <__aeabi_dadd>
 8016484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016486:	4b34      	ldr	r3, [pc, #208]	; (8016558 <__ieee754_pow+0x768>)
 8016488:	189b      	adds	r3, r3, r2
 801648a:	681a      	ldr	r2, [r3, #0]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	f7ea ffc7 	bl	8001420 <__aeabi_dadd>
 8016492:	9000      	str	r0, [sp, #0]
 8016494:	9101      	str	r1, [sp, #4]
 8016496:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016498:	f7ec fdb4 	bl	8003004 <__aeabi_i2d>
 801649c:	0004      	movs	r4, r0
 801649e:	000d      	movs	r5, r1
 80164a0:	9808      	ldr	r0, [sp, #32]
 80164a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164a6:	4b2d      	ldr	r3, [pc, #180]	; (801655c <__ieee754_pow+0x76c>)
 80164a8:	189b      	adds	r3, r3, r2
 80164aa:	681e      	ldr	r6, [r3, #0]
 80164ac:	685f      	ldr	r7, [r3, #4]
 80164ae:	9a00      	ldr	r2, [sp, #0]
 80164b0:	9b01      	ldr	r3, [sp, #4]
 80164b2:	f7ea ffb5 	bl	8001420 <__aeabi_dadd>
 80164b6:	0032      	movs	r2, r6
 80164b8:	003b      	movs	r3, r7
 80164ba:	f7ea ffb1 	bl	8001420 <__aeabi_dadd>
 80164be:	0022      	movs	r2, r4
 80164c0:	002b      	movs	r3, r5
 80164c2:	f7ea ffad 	bl	8001420 <__aeabi_dadd>
 80164c6:	2000      	movs	r0, #0
 80164c8:	0022      	movs	r2, r4
 80164ca:	002b      	movs	r3, r5
 80164cc:	9004      	str	r0, [sp, #16]
 80164ce:	9105      	str	r1, [sp, #20]
 80164d0:	f7ec f9c2 	bl	8002858 <__aeabi_dsub>
 80164d4:	0032      	movs	r2, r6
 80164d6:	003b      	movs	r3, r7
 80164d8:	f7ec f9be 	bl	8002858 <__aeabi_dsub>
 80164dc:	9a08      	ldr	r2, [sp, #32]
 80164de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164e0:	f7ec f9ba 	bl	8002858 <__aeabi_dsub>
 80164e4:	0002      	movs	r2, r0
 80164e6:	000b      	movs	r3, r1
 80164e8:	9800      	ldr	r0, [sp, #0]
 80164ea:	9901      	ldr	r1, [sp, #4]
 80164ec:	e618      	b.n	8016120 <__ieee754_pow+0x330>
 80164ee:	2300      	movs	r3, #0
 80164f0:	4c03      	ldr	r4, [pc, #12]	; (8016500 <__ieee754_pow+0x710>)
 80164f2:	e621      	b.n	8016138 <__ieee754_pow+0x348>
 80164f4:	7ff00000 	.word	0x7ff00000
 80164f8:	43400000 	.word	0x43400000
 80164fc:	fffffc01 	.word	0xfffffc01
 8016500:	3ff00000 	.word	0x3ff00000
 8016504:	0003988e 	.word	0x0003988e
 8016508:	000bb679 	.word	0x000bb679
 801650c:	fff00000 	.word	0xfff00000
 8016510:	080189d8 	.word	0x080189d8
 8016514:	4a454eef 	.word	0x4a454eef
 8016518:	3fca7e28 	.word	0x3fca7e28
 801651c:	93c9db65 	.word	0x93c9db65
 8016520:	3fcd864a 	.word	0x3fcd864a
 8016524:	a91d4101 	.word	0xa91d4101
 8016528:	3fd17460 	.word	0x3fd17460
 801652c:	518f264d 	.word	0x518f264d
 8016530:	3fd55555 	.word	0x3fd55555
 8016534:	db6fabff 	.word	0xdb6fabff
 8016538:	3fdb6db6 	.word	0x3fdb6db6
 801653c:	33333303 	.word	0x33333303
 8016540:	3fe33333 	.word	0x3fe33333
 8016544:	40080000 	.word	0x40080000
 8016548:	3feec709 	.word	0x3feec709
 801654c:	dc3a03fd 	.word	0xdc3a03fd
 8016550:	145b01f5 	.word	0x145b01f5
 8016554:	be3e2fe0 	.word	0xbe3e2fe0
 8016558:	080189f8 	.word	0x080189f8
 801655c:	080189e8 	.word	0x080189e8
 8016560:	4a90      	ldr	r2, [pc, #576]	; (80167a4 <__ieee754_pow+0x9b4>)
 8016562:	4b91      	ldr	r3, [pc, #580]	; (80167a8 <__ieee754_pow+0x9b8>)
 8016564:	0030      	movs	r0, r6
 8016566:	0039      	movs	r1, r7
 8016568:	f7ea ff5a 	bl	8001420 <__aeabi_dadd>
 801656c:	9a04      	ldr	r2, [sp, #16]
 801656e:	9b05      	ldr	r3, [sp, #20]
 8016570:	9002      	str	r0, [sp, #8]
 8016572:	9103      	str	r1, [sp, #12]
 8016574:	0028      	movs	r0, r5
 8016576:	0021      	movs	r1, r4
 8016578:	f7ec f96e 	bl	8002858 <__aeabi_dsub>
 801657c:	0002      	movs	r2, r0
 801657e:	000b      	movs	r3, r1
 8016580:	9802      	ldr	r0, [sp, #8]
 8016582:	9903      	ldr	r1, [sp, #12]
 8016584:	f7e9 ff7c 	bl	8000480 <__aeabi_dcmpgt>
 8016588:	2800      	cmp	r0, #0
 801658a:	d000      	beq.n	801658e <__ieee754_pow+0x79e>
 801658c:	e611      	b.n	80161b2 <__ieee754_pow+0x3c2>
 801658e:	2100      	movs	r1, #0
 8016590:	4a86      	ldr	r2, [pc, #536]	; (80167ac <__ieee754_pow+0x9bc>)
 8016592:	0063      	lsls	r3, r4, #1
 8016594:	085b      	lsrs	r3, r3, #1
 8016596:	9102      	str	r1, [sp, #8]
 8016598:	4293      	cmp	r3, r2
 801659a:	dd25      	ble.n	80165e8 <__ieee754_pow+0x7f8>
 801659c:	4a84      	ldr	r2, [pc, #528]	; (80167b0 <__ieee754_pow+0x9c0>)
 801659e:	151b      	asrs	r3, r3, #20
 80165a0:	189b      	adds	r3, r3, r2
 80165a2:	2280      	movs	r2, #128	; 0x80
 80165a4:	0352      	lsls	r2, r2, #13
 80165a6:	0011      	movs	r1, r2
 80165a8:	4119      	asrs	r1, r3
 80165aa:	190b      	adds	r3, r1, r4
 80165ac:	005c      	lsls	r4, r3, #1
 80165ae:	4981      	ldr	r1, [pc, #516]	; (80167b4 <__ieee754_pow+0x9c4>)
 80165b0:	4d81      	ldr	r5, [pc, #516]	; (80167b8 <__ieee754_pow+0x9c8>)
 80165b2:	0d64      	lsrs	r4, r4, #21
 80165b4:	1864      	adds	r4, r4, r1
 80165b6:	4125      	asrs	r5, r4
 80165b8:	401d      	ands	r5, r3
 80165ba:	031b      	lsls	r3, r3, #12
 80165bc:	0b1b      	lsrs	r3, r3, #12
 80165be:	4313      	orrs	r3, r2
 80165c0:	2214      	movs	r2, #20
 80165c2:	1b12      	subs	r2, r2, r4
 80165c4:	4113      	asrs	r3, r2
 80165c6:	9302      	str	r3, [sp, #8]
 80165c8:	9b08      	ldr	r3, [sp, #32]
 80165ca:	2000      	movs	r0, #0
 80165cc:	0029      	movs	r1, r5
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	da02      	bge.n	80165d8 <__ieee754_pow+0x7e8>
 80165d2:	9b02      	ldr	r3, [sp, #8]
 80165d4:	425b      	negs	r3, r3
 80165d6:	9302      	str	r3, [sp, #8]
 80165d8:	0002      	movs	r2, r0
 80165da:	000b      	movs	r3, r1
 80165dc:	9804      	ldr	r0, [sp, #16]
 80165de:	9905      	ldr	r1, [sp, #20]
 80165e0:	f7ec f93a 	bl	8002858 <__aeabi_dsub>
 80165e4:	9006      	str	r0, [sp, #24]
 80165e6:	9107      	str	r1, [sp, #28]
 80165e8:	9806      	ldr	r0, [sp, #24]
 80165ea:	9907      	ldr	r1, [sp, #28]
 80165ec:	0032      	movs	r2, r6
 80165ee:	003b      	movs	r3, r7
 80165f0:	f7ea ff16 	bl	8001420 <__aeabi_dadd>
 80165f4:	2000      	movs	r0, #0
 80165f6:	2200      	movs	r2, #0
 80165f8:	4b70      	ldr	r3, [pc, #448]	; (80167bc <__ieee754_pow+0x9cc>)
 80165fa:	9004      	str	r0, [sp, #16]
 80165fc:	9105      	str	r1, [sp, #20]
 80165fe:	f7eb fe69 	bl	80022d4 <__aeabi_dmul>
 8016602:	9a06      	ldr	r2, [sp, #24]
 8016604:	9b07      	ldr	r3, [sp, #28]
 8016606:	9008      	str	r0, [sp, #32]
 8016608:	9109      	str	r1, [sp, #36]	; 0x24
 801660a:	9804      	ldr	r0, [sp, #16]
 801660c:	9905      	ldr	r1, [sp, #20]
 801660e:	f7ec f923 	bl	8002858 <__aeabi_dsub>
 8016612:	0002      	movs	r2, r0
 8016614:	000b      	movs	r3, r1
 8016616:	0030      	movs	r0, r6
 8016618:	0039      	movs	r1, r7
 801661a:	f7ec f91d 	bl	8002858 <__aeabi_dsub>
 801661e:	4a68      	ldr	r2, [pc, #416]	; (80167c0 <__ieee754_pow+0x9d0>)
 8016620:	4b68      	ldr	r3, [pc, #416]	; (80167c4 <__ieee754_pow+0x9d4>)
 8016622:	f7eb fe57 	bl	80022d4 <__aeabi_dmul>
 8016626:	4a68      	ldr	r2, [pc, #416]	; (80167c8 <__ieee754_pow+0x9d8>)
 8016628:	0004      	movs	r4, r0
 801662a:	000d      	movs	r5, r1
 801662c:	9804      	ldr	r0, [sp, #16]
 801662e:	9905      	ldr	r1, [sp, #20]
 8016630:	4b66      	ldr	r3, [pc, #408]	; (80167cc <__ieee754_pow+0x9dc>)
 8016632:	f7eb fe4f 	bl	80022d4 <__aeabi_dmul>
 8016636:	0002      	movs	r2, r0
 8016638:	000b      	movs	r3, r1
 801663a:	0020      	movs	r0, r4
 801663c:	0029      	movs	r1, r5
 801663e:	f7ea feef 	bl	8001420 <__aeabi_dadd>
 8016642:	0004      	movs	r4, r0
 8016644:	000d      	movs	r5, r1
 8016646:	0002      	movs	r2, r0
 8016648:	000b      	movs	r3, r1
 801664a:	9808      	ldr	r0, [sp, #32]
 801664c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801664e:	f7ea fee7 	bl	8001420 <__aeabi_dadd>
 8016652:	9a08      	ldr	r2, [sp, #32]
 8016654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016656:	0006      	movs	r6, r0
 8016658:	000f      	movs	r7, r1
 801665a:	f7ec f8fd 	bl	8002858 <__aeabi_dsub>
 801665e:	0002      	movs	r2, r0
 8016660:	000b      	movs	r3, r1
 8016662:	0020      	movs	r0, r4
 8016664:	0029      	movs	r1, r5
 8016666:	f7ec f8f7 	bl	8002858 <__aeabi_dsub>
 801666a:	0032      	movs	r2, r6
 801666c:	9004      	str	r0, [sp, #16]
 801666e:	9105      	str	r1, [sp, #20]
 8016670:	003b      	movs	r3, r7
 8016672:	0030      	movs	r0, r6
 8016674:	0039      	movs	r1, r7
 8016676:	f7eb fe2d 	bl	80022d4 <__aeabi_dmul>
 801667a:	0004      	movs	r4, r0
 801667c:	000d      	movs	r5, r1
 801667e:	4a54      	ldr	r2, [pc, #336]	; (80167d0 <__ieee754_pow+0x9e0>)
 8016680:	4b54      	ldr	r3, [pc, #336]	; (80167d4 <__ieee754_pow+0x9e4>)
 8016682:	f7eb fe27 	bl	80022d4 <__aeabi_dmul>
 8016686:	4a54      	ldr	r2, [pc, #336]	; (80167d8 <__ieee754_pow+0x9e8>)
 8016688:	4b54      	ldr	r3, [pc, #336]	; (80167dc <__ieee754_pow+0x9ec>)
 801668a:	f7ec f8e5 	bl	8002858 <__aeabi_dsub>
 801668e:	0022      	movs	r2, r4
 8016690:	002b      	movs	r3, r5
 8016692:	f7eb fe1f 	bl	80022d4 <__aeabi_dmul>
 8016696:	4a52      	ldr	r2, [pc, #328]	; (80167e0 <__ieee754_pow+0x9f0>)
 8016698:	4b52      	ldr	r3, [pc, #328]	; (80167e4 <__ieee754_pow+0x9f4>)
 801669a:	f7ea fec1 	bl	8001420 <__aeabi_dadd>
 801669e:	0022      	movs	r2, r4
 80166a0:	002b      	movs	r3, r5
 80166a2:	f7eb fe17 	bl	80022d4 <__aeabi_dmul>
 80166a6:	4a50      	ldr	r2, [pc, #320]	; (80167e8 <__ieee754_pow+0x9f8>)
 80166a8:	4b50      	ldr	r3, [pc, #320]	; (80167ec <__ieee754_pow+0x9fc>)
 80166aa:	f7ec f8d5 	bl	8002858 <__aeabi_dsub>
 80166ae:	0022      	movs	r2, r4
 80166b0:	002b      	movs	r3, r5
 80166b2:	f7eb fe0f 	bl	80022d4 <__aeabi_dmul>
 80166b6:	4a4e      	ldr	r2, [pc, #312]	; (80167f0 <__ieee754_pow+0xa00>)
 80166b8:	4b4e      	ldr	r3, [pc, #312]	; (80167f4 <__ieee754_pow+0xa04>)
 80166ba:	f7ea feb1 	bl	8001420 <__aeabi_dadd>
 80166be:	0022      	movs	r2, r4
 80166c0:	002b      	movs	r3, r5
 80166c2:	f7eb fe07 	bl	80022d4 <__aeabi_dmul>
 80166c6:	0002      	movs	r2, r0
 80166c8:	000b      	movs	r3, r1
 80166ca:	0030      	movs	r0, r6
 80166cc:	0039      	movs	r1, r7
 80166ce:	f7ec f8c3 	bl	8002858 <__aeabi_dsub>
 80166d2:	0004      	movs	r4, r0
 80166d4:	000d      	movs	r5, r1
 80166d6:	0002      	movs	r2, r0
 80166d8:	000b      	movs	r3, r1
 80166da:	0030      	movs	r0, r6
 80166dc:	0039      	movs	r1, r7
 80166de:	f7eb fdf9 	bl	80022d4 <__aeabi_dmul>
 80166e2:	2380      	movs	r3, #128	; 0x80
 80166e4:	9006      	str	r0, [sp, #24]
 80166e6:	9107      	str	r1, [sp, #28]
 80166e8:	2200      	movs	r2, #0
 80166ea:	0020      	movs	r0, r4
 80166ec:	0029      	movs	r1, r5
 80166ee:	05db      	lsls	r3, r3, #23
 80166f0:	f7ec f8b2 	bl	8002858 <__aeabi_dsub>
 80166f4:	0002      	movs	r2, r0
 80166f6:	000b      	movs	r3, r1
 80166f8:	9806      	ldr	r0, [sp, #24]
 80166fa:	9907      	ldr	r1, [sp, #28]
 80166fc:	f7eb f9f0 	bl	8001ae0 <__aeabi_ddiv>
 8016700:	9a04      	ldr	r2, [sp, #16]
 8016702:	9b05      	ldr	r3, [sp, #20]
 8016704:	0004      	movs	r4, r0
 8016706:	000d      	movs	r5, r1
 8016708:	0030      	movs	r0, r6
 801670a:	0039      	movs	r1, r7
 801670c:	f7eb fde2 	bl	80022d4 <__aeabi_dmul>
 8016710:	9a04      	ldr	r2, [sp, #16]
 8016712:	9b05      	ldr	r3, [sp, #20]
 8016714:	f7ea fe84 	bl	8001420 <__aeabi_dadd>
 8016718:	0002      	movs	r2, r0
 801671a:	000b      	movs	r3, r1
 801671c:	0020      	movs	r0, r4
 801671e:	0029      	movs	r1, r5
 8016720:	f7ec f89a 	bl	8002858 <__aeabi_dsub>
 8016724:	0032      	movs	r2, r6
 8016726:	003b      	movs	r3, r7
 8016728:	f7ec f896 	bl	8002858 <__aeabi_dsub>
 801672c:	0002      	movs	r2, r0
 801672e:	000b      	movs	r3, r1
 8016730:	2000      	movs	r0, #0
 8016732:	4931      	ldr	r1, [pc, #196]	; (80167f8 <__ieee754_pow+0xa08>)
 8016734:	f7ec f890 	bl	8002858 <__aeabi_dsub>
 8016738:	9b02      	ldr	r3, [sp, #8]
 801673a:	051b      	lsls	r3, r3, #20
 801673c:	185b      	adds	r3, r3, r1
 801673e:	151a      	asrs	r2, r3, #20
 8016740:	2a00      	cmp	r2, #0
 8016742:	dc25      	bgt.n	8016790 <__ieee754_pow+0x9a0>
 8016744:	9a02      	ldr	r2, [sp, #8]
 8016746:	f000 f861 	bl	801680c <scalbn>
 801674a:	9a00      	ldr	r2, [sp, #0]
 801674c:	9b01      	ldr	r3, [sp, #4]
 801674e:	f7ff fc33 	bl	8015fb8 <__ieee754_pow+0x1c8>
 8016752:	4a2a      	ldr	r2, [pc, #168]	; (80167fc <__ieee754_pow+0xa0c>)
 8016754:	004b      	lsls	r3, r1, #1
 8016756:	085b      	lsrs	r3, r3, #1
 8016758:	4293      	cmp	r3, r2
 801675a:	dc00      	bgt.n	801675e <__ieee754_pow+0x96e>
 801675c:	e717      	b.n	801658e <__ieee754_pow+0x79e>
 801675e:	4b28      	ldr	r3, [pc, #160]	; (8016800 <__ieee754_pow+0xa10>)
 8016760:	18cb      	adds	r3, r1, r3
 8016762:	4303      	orrs	r3, r0
 8016764:	d008      	beq.n	8016778 <__ieee754_pow+0x988>
 8016766:	9800      	ldr	r0, [sp, #0]
 8016768:	9901      	ldr	r1, [sp, #4]
 801676a:	2300      	movs	r3, #0
 801676c:	2200      	movs	r2, #0
 801676e:	f7e9 fe73 	bl	8000458 <__aeabi_dcmplt>
 8016772:	1e43      	subs	r3, r0, #1
 8016774:	4198      	sbcs	r0, r3
 8016776:	e462      	b.n	801603e <__ieee754_pow+0x24e>
 8016778:	9a04      	ldr	r2, [sp, #16]
 801677a:	9b05      	ldr	r3, [sp, #20]
 801677c:	f7ec f86c 	bl	8002858 <__aeabi_dsub>
 8016780:	0032      	movs	r2, r6
 8016782:	003b      	movs	r3, r7
 8016784:	f7e9 fe86 	bl	8000494 <__aeabi_dcmpge>
 8016788:	2800      	cmp	r0, #0
 801678a:	d100      	bne.n	801678e <__ieee754_pow+0x99e>
 801678c:	e6ff      	b.n	801658e <__ieee754_pow+0x79e>
 801678e:	e7ea      	b.n	8016766 <__ieee754_pow+0x976>
 8016790:	0019      	movs	r1, r3
 8016792:	e7da      	b.n	801674a <__ieee754_pow+0x95a>
 8016794:	2300      	movs	r3, #0
 8016796:	4c18      	ldr	r4, [pc, #96]	; (80167f8 <__ieee754_pow+0xa08>)
 8016798:	f7ff fbf1 	bl	8015f7e <__ieee754_pow+0x18e>
 801679c:	2300      	movs	r3, #0
 801679e:	2400      	movs	r4, #0
 80167a0:	f7ff fbed 	bl	8015f7e <__ieee754_pow+0x18e>
 80167a4:	652b82fe 	.word	0x652b82fe
 80167a8:	3c971547 	.word	0x3c971547
 80167ac:	3fe00000 	.word	0x3fe00000
 80167b0:	fffffc02 	.word	0xfffffc02
 80167b4:	fffffc01 	.word	0xfffffc01
 80167b8:	fff00000 	.word	0xfff00000
 80167bc:	3fe62e43 	.word	0x3fe62e43
 80167c0:	fefa39ef 	.word	0xfefa39ef
 80167c4:	3fe62e42 	.word	0x3fe62e42
 80167c8:	0ca86c39 	.word	0x0ca86c39
 80167cc:	be205c61 	.word	0xbe205c61
 80167d0:	72bea4d0 	.word	0x72bea4d0
 80167d4:	3e663769 	.word	0x3e663769
 80167d8:	c5d26bf1 	.word	0xc5d26bf1
 80167dc:	3ebbbd41 	.word	0x3ebbbd41
 80167e0:	af25de2c 	.word	0xaf25de2c
 80167e4:	3f11566a 	.word	0x3f11566a
 80167e8:	16bebd93 	.word	0x16bebd93
 80167ec:	3f66c16c 	.word	0x3f66c16c
 80167f0:	5555553e 	.word	0x5555553e
 80167f4:	3fc55555 	.word	0x3fc55555
 80167f8:	3ff00000 	.word	0x3ff00000
 80167fc:	4090cbff 	.word	0x4090cbff
 8016800:	3f6f3400 	.word	0x3f6f3400

08016804 <fabs>:
 8016804:	0049      	lsls	r1, r1, #1
 8016806:	084b      	lsrs	r3, r1, #1
 8016808:	0019      	movs	r1, r3
 801680a:	4770      	bx	lr

0801680c <scalbn>:
 801680c:	b570      	push	{r4, r5, r6, lr}
 801680e:	0014      	movs	r4, r2
 8016810:	004a      	lsls	r2, r1, #1
 8016812:	000b      	movs	r3, r1
 8016814:	0d52      	lsrs	r2, r2, #21
 8016816:	d10f      	bne.n	8016838 <scalbn+0x2c>
 8016818:	004b      	lsls	r3, r1, #1
 801681a:	085b      	lsrs	r3, r3, #1
 801681c:	4303      	orrs	r3, r0
 801681e:	d011      	beq.n	8016844 <scalbn+0x38>
 8016820:	4b22      	ldr	r3, [pc, #136]	; (80168ac <scalbn+0xa0>)
 8016822:	2200      	movs	r2, #0
 8016824:	f7eb fd56 	bl	80022d4 <__aeabi_dmul>
 8016828:	4b21      	ldr	r3, [pc, #132]	; (80168b0 <scalbn+0xa4>)
 801682a:	429c      	cmp	r4, r3
 801682c:	da0b      	bge.n	8016846 <scalbn+0x3a>
 801682e:	4a21      	ldr	r2, [pc, #132]	; (80168b4 <scalbn+0xa8>)
 8016830:	4b21      	ldr	r3, [pc, #132]	; (80168b8 <scalbn+0xac>)
 8016832:	f7eb fd4f 	bl	80022d4 <__aeabi_dmul>
 8016836:	e005      	b.n	8016844 <scalbn+0x38>
 8016838:	4d20      	ldr	r5, [pc, #128]	; (80168bc <scalbn+0xb0>)
 801683a:	42aa      	cmp	r2, r5
 801683c:	d107      	bne.n	801684e <scalbn+0x42>
 801683e:	0002      	movs	r2, r0
 8016840:	f7ea fdee 	bl	8001420 <__aeabi_dadd>
 8016844:	bd70      	pop	{r4, r5, r6, pc}
 8016846:	000b      	movs	r3, r1
 8016848:	004a      	lsls	r2, r1, #1
 801684a:	0d52      	lsrs	r2, r2, #21
 801684c:	3a36      	subs	r2, #54	; 0x36
 801684e:	4d1c      	ldr	r5, [pc, #112]	; (80168c0 <scalbn+0xb4>)
 8016850:	42ac      	cmp	r4, r5
 8016852:	dd0a      	ble.n	801686a <scalbn+0x5e>
 8016854:	4c1b      	ldr	r4, [pc, #108]	; (80168c4 <scalbn+0xb8>)
 8016856:	4d1c      	ldr	r5, [pc, #112]	; (80168c8 <scalbn+0xbc>)
 8016858:	2900      	cmp	r1, #0
 801685a:	da01      	bge.n	8016860 <scalbn+0x54>
 801685c:	4c19      	ldr	r4, [pc, #100]	; (80168c4 <scalbn+0xb8>)
 801685e:	4d1b      	ldr	r5, [pc, #108]	; (80168cc <scalbn+0xc0>)
 8016860:	4a18      	ldr	r2, [pc, #96]	; (80168c4 <scalbn+0xb8>)
 8016862:	4b19      	ldr	r3, [pc, #100]	; (80168c8 <scalbn+0xbc>)
 8016864:	0020      	movs	r0, r4
 8016866:	0029      	movs	r1, r5
 8016868:	e7e3      	b.n	8016832 <scalbn+0x26>
 801686a:	18a2      	adds	r2, r4, r2
 801686c:	4c18      	ldr	r4, [pc, #96]	; (80168d0 <scalbn+0xc4>)
 801686e:	42a2      	cmp	r2, r4
 8016870:	dcf0      	bgt.n	8016854 <scalbn+0x48>
 8016872:	2a00      	cmp	r2, #0
 8016874:	dd05      	ble.n	8016882 <scalbn+0x76>
 8016876:	4c17      	ldr	r4, [pc, #92]	; (80168d4 <scalbn+0xc8>)
 8016878:	0512      	lsls	r2, r2, #20
 801687a:	4023      	ands	r3, r4
 801687c:	4313      	orrs	r3, r2
 801687e:	0019      	movs	r1, r3
 8016880:	e7e0      	b.n	8016844 <scalbn+0x38>
 8016882:	0014      	movs	r4, r2
 8016884:	3435      	adds	r4, #53	; 0x35
 8016886:	da08      	bge.n	801689a <scalbn+0x8e>
 8016888:	4c0a      	ldr	r4, [pc, #40]	; (80168b4 <scalbn+0xa8>)
 801688a:	4d0b      	ldr	r5, [pc, #44]	; (80168b8 <scalbn+0xac>)
 801688c:	2900      	cmp	r1, #0
 801688e:	da01      	bge.n	8016894 <scalbn+0x88>
 8016890:	4c08      	ldr	r4, [pc, #32]	; (80168b4 <scalbn+0xa8>)
 8016892:	4d11      	ldr	r5, [pc, #68]	; (80168d8 <scalbn+0xcc>)
 8016894:	4a07      	ldr	r2, [pc, #28]	; (80168b4 <scalbn+0xa8>)
 8016896:	4b08      	ldr	r3, [pc, #32]	; (80168b8 <scalbn+0xac>)
 8016898:	e7e4      	b.n	8016864 <scalbn+0x58>
 801689a:	4c0e      	ldr	r4, [pc, #56]	; (80168d4 <scalbn+0xc8>)
 801689c:	3236      	adds	r2, #54	; 0x36
 801689e:	4023      	ands	r3, r4
 80168a0:	0512      	lsls	r2, r2, #20
 80168a2:	431a      	orrs	r2, r3
 80168a4:	0011      	movs	r1, r2
 80168a6:	4b0d      	ldr	r3, [pc, #52]	; (80168dc <scalbn+0xd0>)
 80168a8:	2200      	movs	r2, #0
 80168aa:	e7c2      	b.n	8016832 <scalbn+0x26>
 80168ac:	43500000 	.word	0x43500000
 80168b0:	ffff3cb0 	.word	0xffff3cb0
 80168b4:	c2f8f359 	.word	0xc2f8f359
 80168b8:	01a56e1f 	.word	0x01a56e1f
 80168bc:	000007ff 	.word	0x000007ff
 80168c0:	0000c350 	.word	0x0000c350
 80168c4:	8800759c 	.word	0x8800759c
 80168c8:	7e37e43c 	.word	0x7e37e43c
 80168cc:	fe37e43c 	.word	0xfe37e43c
 80168d0:	000007fe 	.word	0x000007fe
 80168d4:	800fffff 	.word	0x800fffff
 80168d8:	81a56e1f 	.word	0x81a56e1f
 80168dc:	3c900000 	.word	0x3c900000

080168e0 <with_errno>:
 80168e0:	b570      	push	{r4, r5, r6, lr}
 80168e2:	000d      	movs	r5, r1
 80168e4:	0016      	movs	r6, r2
 80168e6:	0004      	movs	r4, r0
 80168e8:	f7fc fd18 	bl	801331c <__errno>
 80168ec:	0029      	movs	r1, r5
 80168ee:	6006      	str	r6, [r0, #0]
 80168f0:	0020      	movs	r0, r4
 80168f2:	bd70      	pop	{r4, r5, r6, pc}

080168f4 <xflow>:
 80168f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80168f6:	0015      	movs	r5, r2
 80168f8:	001c      	movs	r4, r3
 80168fa:	2800      	cmp	r0, #0
 80168fc:	d010      	beq.n	8016920 <xflow+0x2c>
 80168fe:	2380      	movs	r3, #128	; 0x80
 8016900:	0010      	movs	r0, r2
 8016902:	061b      	lsls	r3, r3, #24
 8016904:	18e1      	adds	r1, r4, r3
 8016906:	9000      	str	r0, [sp, #0]
 8016908:	9101      	str	r1, [sp, #4]
 801690a:	9a00      	ldr	r2, [sp, #0]
 801690c:	9b01      	ldr	r3, [sp, #4]
 801690e:	0028      	movs	r0, r5
 8016910:	0021      	movs	r1, r4
 8016912:	f7eb fcdf 	bl	80022d4 <__aeabi_dmul>
 8016916:	2222      	movs	r2, #34	; 0x22
 8016918:	f7ff ffe2 	bl	80168e0 <with_errno>
 801691c:	b003      	add	sp, #12
 801691e:	bd30      	pop	{r4, r5, pc}
 8016920:	0010      	movs	r0, r2
 8016922:	0019      	movs	r1, r3
 8016924:	e7ef      	b.n	8016906 <xflow+0x12>

08016926 <__math_uflow>:
 8016926:	2380      	movs	r3, #128	; 0x80
 8016928:	b510      	push	{r4, lr}
 801692a:	2200      	movs	r2, #0
 801692c:	055b      	lsls	r3, r3, #21
 801692e:	f7ff ffe1 	bl	80168f4 <xflow>
 8016932:	bd10      	pop	{r4, pc}

08016934 <__math_oflow>:
 8016934:	23e0      	movs	r3, #224	; 0xe0
 8016936:	b510      	push	{r4, lr}
 8016938:	2200      	movs	r2, #0
 801693a:	05db      	lsls	r3, r3, #23
 801693c:	f7ff ffda 	bl	80168f4 <xflow>
 8016940:	bd10      	pop	{r4, pc}
	...

08016944 <__ieee754_sqrt>:
 8016944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016946:	000a      	movs	r2, r1
 8016948:	000c      	movs	r4, r1
 801694a:	496f      	ldr	r1, [pc, #444]	; (8016b08 <__ieee754_sqrt+0x1c4>)
 801694c:	0005      	movs	r5, r0
 801694e:	0003      	movs	r3, r0
 8016950:	0008      	movs	r0, r1
 8016952:	b087      	sub	sp, #28
 8016954:	4020      	ands	r0, r4
 8016956:	4288      	cmp	r0, r1
 8016958:	d111      	bne.n	801697e <__ieee754_sqrt+0x3a>
 801695a:	002a      	movs	r2, r5
 801695c:	0023      	movs	r3, r4
 801695e:	0028      	movs	r0, r5
 8016960:	0021      	movs	r1, r4
 8016962:	f7eb fcb7 	bl	80022d4 <__aeabi_dmul>
 8016966:	0002      	movs	r2, r0
 8016968:	000b      	movs	r3, r1
 801696a:	0028      	movs	r0, r5
 801696c:	0021      	movs	r1, r4
 801696e:	f7ea fd57 	bl	8001420 <__aeabi_dadd>
 8016972:	0005      	movs	r5, r0
 8016974:	000c      	movs	r4, r1
 8016976:	0028      	movs	r0, r5
 8016978:	0021      	movs	r1, r4
 801697a:	b007      	add	sp, #28
 801697c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801697e:	2c00      	cmp	r4, #0
 8016980:	dc12      	bgt.n	80169a8 <__ieee754_sqrt+0x64>
 8016982:	0061      	lsls	r1, r4, #1
 8016984:	0849      	lsrs	r1, r1, #1
 8016986:	4329      	orrs	r1, r5
 8016988:	d0f5      	beq.n	8016976 <__ieee754_sqrt+0x32>
 801698a:	2100      	movs	r1, #0
 801698c:	428c      	cmp	r4, r1
 801698e:	d100      	bne.n	8016992 <__ieee754_sqrt+0x4e>
 8016990:	e09f      	b.n	8016ad2 <__ieee754_sqrt+0x18e>
 8016992:	002a      	movs	r2, r5
 8016994:	0023      	movs	r3, r4
 8016996:	0028      	movs	r0, r5
 8016998:	0021      	movs	r1, r4
 801699a:	f7eb ff5d 	bl	8002858 <__aeabi_dsub>
 801699e:	0002      	movs	r2, r0
 80169a0:	000b      	movs	r3, r1
 80169a2:	f7eb f89d 	bl	8001ae0 <__aeabi_ddiv>
 80169a6:	e7e4      	b.n	8016972 <__ieee754_sqrt+0x2e>
 80169a8:	1521      	asrs	r1, r4, #20
 80169aa:	d100      	bne.n	80169ae <__ieee754_sqrt+0x6a>
 80169ac:	e091      	b.n	8016ad2 <__ieee754_sqrt+0x18e>
 80169ae:	4857      	ldr	r0, [pc, #348]	; (8016b0c <__ieee754_sqrt+0x1c8>)
 80169b0:	0312      	lsls	r2, r2, #12
 80169b2:	180c      	adds	r4, r1, r0
 80169b4:	2080      	movs	r0, #128	; 0x80
 80169b6:	0b12      	lsrs	r2, r2, #12
 80169b8:	0340      	lsls	r0, r0, #13
 80169ba:	4310      	orrs	r0, r2
 80169bc:	07c9      	lsls	r1, r1, #31
 80169be:	d403      	bmi.n	80169c8 <__ieee754_sqrt+0x84>
 80169c0:	0fda      	lsrs	r2, r3, #31
 80169c2:	0040      	lsls	r0, r0, #1
 80169c4:	1810      	adds	r0, r2, r0
 80169c6:	005b      	lsls	r3, r3, #1
 80169c8:	2500      	movs	r5, #0
 80169ca:	1062      	asrs	r2, r4, #1
 80169cc:	0040      	lsls	r0, r0, #1
 80169ce:	2480      	movs	r4, #128	; 0x80
 80169d0:	9205      	str	r2, [sp, #20]
 80169d2:	0fda      	lsrs	r2, r3, #31
 80169d4:	1812      	adds	r2, r2, r0
 80169d6:	0029      	movs	r1, r5
 80169d8:	2016      	movs	r0, #22
 80169da:	005b      	lsls	r3, r3, #1
 80169dc:	03a4      	lsls	r4, r4, #14
 80169de:	190e      	adds	r6, r1, r4
 80169e0:	4296      	cmp	r6, r2
 80169e2:	dc02      	bgt.n	80169ea <__ieee754_sqrt+0xa6>
 80169e4:	1931      	adds	r1, r6, r4
 80169e6:	1b92      	subs	r2, r2, r6
 80169e8:	192d      	adds	r5, r5, r4
 80169ea:	0fde      	lsrs	r6, r3, #31
 80169ec:	0052      	lsls	r2, r2, #1
 80169ee:	3801      	subs	r0, #1
 80169f0:	18b2      	adds	r2, r6, r2
 80169f2:	005b      	lsls	r3, r3, #1
 80169f4:	0864      	lsrs	r4, r4, #1
 80169f6:	2800      	cmp	r0, #0
 80169f8:	d1f1      	bne.n	80169de <__ieee754_sqrt+0x9a>
 80169fa:	2620      	movs	r6, #32
 80169fc:	2780      	movs	r7, #128	; 0x80
 80169fe:	0004      	movs	r4, r0
 8016a00:	9604      	str	r6, [sp, #16]
 8016a02:	063f      	lsls	r7, r7, #24
 8016a04:	183e      	adds	r6, r7, r0
 8016a06:	46b4      	mov	ip, r6
 8016a08:	428a      	cmp	r2, r1
 8016a0a:	dc02      	bgt.n	8016a12 <__ieee754_sqrt+0xce>
 8016a0c:	d114      	bne.n	8016a38 <__ieee754_sqrt+0xf4>
 8016a0e:	429e      	cmp	r6, r3
 8016a10:	d812      	bhi.n	8016a38 <__ieee754_sqrt+0xf4>
 8016a12:	4660      	mov	r0, ip
 8016a14:	4666      	mov	r6, ip
 8016a16:	19c0      	adds	r0, r0, r7
 8016a18:	9100      	str	r1, [sp, #0]
 8016a1a:	2e00      	cmp	r6, #0
 8016a1c:	da03      	bge.n	8016a26 <__ieee754_sqrt+0xe2>
 8016a1e:	43c6      	mvns	r6, r0
 8016a20:	0ff6      	lsrs	r6, r6, #31
 8016a22:	198e      	adds	r6, r1, r6
 8016a24:	9600      	str	r6, [sp, #0]
 8016a26:	1a52      	subs	r2, r2, r1
 8016a28:	4563      	cmp	r3, ip
 8016a2a:	4189      	sbcs	r1, r1
 8016a2c:	4249      	negs	r1, r1
 8016a2e:	1a52      	subs	r2, r2, r1
 8016a30:	4661      	mov	r1, ip
 8016a32:	1a5b      	subs	r3, r3, r1
 8016a34:	9900      	ldr	r1, [sp, #0]
 8016a36:	19e4      	adds	r4, r4, r7
 8016a38:	0fde      	lsrs	r6, r3, #31
 8016a3a:	0052      	lsls	r2, r2, #1
 8016a3c:	18b2      	adds	r2, r6, r2
 8016a3e:	9e04      	ldr	r6, [sp, #16]
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	3e01      	subs	r6, #1
 8016a44:	087f      	lsrs	r7, r7, #1
 8016a46:	9604      	str	r6, [sp, #16]
 8016a48:	2e00      	cmp	r6, #0
 8016a4a:	d1db      	bne.n	8016a04 <__ieee754_sqrt+0xc0>
 8016a4c:	431a      	orrs	r2, r3
 8016a4e:	d01f      	beq.n	8016a90 <__ieee754_sqrt+0x14c>
 8016a50:	4e2f      	ldr	r6, [pc, #188]	; (8016b10 <__ieee754_sqrt+0x1cc>)
 8016a52:	4f30      	ldr	r7, [pc, #192]	; (8016b14 <__ieee754_sqrt+0x1d0>)
 8016a54:	6830      	ldr	r0, [r6, #0]
 8016a56:	6871      	ldr	r1, [r6, #4]
 8016a58:	683a      	ldr	r2, [r7, #0]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	9200      	str	r2, [sp, #0]
 8016a5e:	9301      	str	r3, [sp, #4]
 8016a60:	6832      	ldr	r2, [r6, #0]
 8016a62:	6873      	ldr	r3, [r6, #4]
 8016a64:	9202      	str	r2, [sp, #8]
 8016a66:	9303      	str	r3, [sp, #12]
 8016a68:	9a00      	ldr	r2, [sp, #0]
 8016a6a:	9b01      	ldr	r3, [sp, #4]
 8016a6c:	f7eb fef4 	bl	8002858 <__aeabi_dsub>
 8016a70:	0002      	movs	r2, r0
 8016a72:	000b      	movs	r3, r1
 8016a74:	9802      	ldr	r0, [sp, #8]
 8016a76:	9903      	ldr	r1, [sp, #12]
 8016a78:	f7e9 fcf8 	bl	800046c <__aeabi_dcmple>
 8016a7c:	2800      	cmp	r0, #0
 8016a7e:	d007      	beq.n	8016a90 <__ieee754_sqrt+0x14c>
 8016a80:	6830      	ldr	r0, [r6, #0]
 8016a82:	6871      	ldr	r1, [r6, #4]
 8016a84:	683a      	ldr	r2, [r7, #0]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	1c67      	adds	r7, r4, #1
 8016a8a:	d127      	bne.n	8016adc <__ieee754_sqrt+0x198>
 8016a8c:	9c04      	ldr	r4, [sp, #16]
 8016a8e:	3501      	adds	r5, #1
 8016a90:	4b21      	ldr	r3, [pc, #132]	; (8016b18 <__ieee754_sqrt+0x1d4>)
 8016a92:	1069      	asrs	r1, r5, #1
 8016a94:	18c9      	adds	r1, r1, r3
 8016a96:	0864      	lsrs	r4, r4, #1
 8016a98:	07ed      	lsls	r5, r5, #31
 8016a9a:	d502      	bpl.n	8016aa2 <__ieee754_sqrt+0x15e>
 8016a9c:	2380      	movs	r3, #128	; 0x80
 8016a9e:	061b      	lsls	r3, r3, #24
 8016aa0:	431c      	orrs	r4, r3
 8016aa2:	9b05      	ldr	r3, [sp, #20]
 8016aa4:	0025      	movs	r5, r4
 8016aa6:	0518      	lsls	r0, r3, #20
 8016aa8:	1843      	adds	r3, r0, r1
 8016aaa:	001c      	movs	r4, r3
 8016aac:	e763      	b.n	8016976 <__ieee754_sqrt+0x32>
 8016aae:	0ada      	lsrs	r2, r3, #11
 8016ab0:	3815      	subs	r0, #21
 8016ab2:	055b      	lsls	r3, r3, #21
 8016ab4:	2a00      	cmp	r2, #0
 8016ab6:	d0fa      	beq.n	8016aae <__ieee754_sqrt+0x16a>
 8016ab8:	2480      	movs	r4, #128	; 0x80
 8016aba:	0364      	lsls	r4, r4, #13
 8016abc:	4222      	tst	r2, r4
 8016abe:	d00a      	beq.n	8016ad6 <__ieee754_sqrt+0x192>
 8016ac0:	2420      	movs	r4, #32
 8016ac2:	001e      	movs	r6, r3
 8016ac4:	1a64      	subs	r4, r4, r1
 8016ac6:	40e6      	lsrs	r6, r4
 8016ac8:	1e4d      	subs	r5, r1, #1
 8016aca:	408b      	lsls	r3, r1
 8016acc:	4332      	orrs	r2, r6
 8016ace:	1b41      	subs	r1, r0, r5
 8016ad0:	e76d      	b.n	80169ae <__ieee754_sqrt+0x6a>
 8016ad2:	2000      	movs	r0, #0
 8016ad4:	e7ee      	b.n	8016ab4 <__ieee754_sqrt+0x170>
 8016ad6:	0052      	lsls	r2, r2, #1
 8016ad8:	3101      	adds	r1, #1
 8016ada:	e7ef      	b.n	8016abc <__ieee754_sqrt+0x178>
 8016adc:	f7ea fca0 	bl	8001420 <__aeabi_dadd>
 8016ae0:	6877      	ldr	r7, [r6, #4]
 8016ae2:	6836      	ldr	r6, [r6, #0]
 8016ae4:	0002      	movs	r2, r0
 8016ae6:	000b      	movs	r3, r1
 8016ae8:	0030      	movs	r0, r6
 8016aea:	0039      	movs	r1, r7
 8016aec:	f7e9 fcb4 	bl	8000458 <__aeabi_dcmplt>
 8016af0:	2800      	cmp	r0, #0
 8016af2:	d004      	beq.n	8016afe <__ieee754_sqrt+0x1ba>
 8016af4:	3402      	adds	r4, #2
 8016af6:	4263      	negs	r3, r4
 8016af8:	4163      	adcs	r3, r4
 8016afa:	18ed      	adds	r5, r5, r3
 8016afc:	e7c8      	b.n	8016a90 <__ieee754_sqrt+0x14c>
 8016afe:	2301      	movs	r3, #1
 8016b00:	3401      	adds	r4, #1
 8016b02:	439c      	bics	r4, r3
 8016b04:	e7c4      	b.n	8016a90 <__ieee754_sqrt+0x14c>
 8016b06:	46c0      	nop			; (mov r8, r8)
 8016b08:	7ff00000 	.word	0x7ff00000
 8016b0c:	fffffc01 	.word	0xfffffc01
 8016b10:	200002b8 	.word	0x200002b8
 8016b14:	200002c0 	.word	0x200002c0
 8016b18:	3fe00000 	.word	0x3fe00000

08016b1c <_init>:
 8016b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b1e:	46c0      	nop			; (mov r8, r8)
 8016b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b22:	bc08      	pop	{r3}
 8016b24:	469e      	mov	lr, r3
 8016b26:	4770      	bx	lr

08016b28 <_fini>:
 8016b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b2a:	46c0      	nop			; (mov r8, r8)
 8016b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b2e:	bc08      	pop	{r3}
 8016b30:	469e      	mov	lr, r3
 8016b32:	4770      	bx	lr
