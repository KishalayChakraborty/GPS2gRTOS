
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012480  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001938  08012540  08012540  00022540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e78  08013e78  00030308  2**0
                  CONTENTS
  4 .ARM          00000000  08013e78  08013e78  00030308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013e78  08013e78  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e78  08013e78  00023e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e7c  08013e7c  00023e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  08013e80  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006510  20000308  08014188  00030308  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006818  08014188  00036818  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040a50  00000000  00000000  00030373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e28  00000000  00000000  00070dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001b9a9  00000000  00000000  00076beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be0  00000000  00000000  00092598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000031ab  00000000  00000000  00094178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000621f  00000000  00000000  00097323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000395bf  00000000  00000000  0009d542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000abf1e  00000000  00000000  000d6b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007638  00000000  00000000  00182a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0018a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000308 	.word	0x20000308
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012528 	.word	0x08012528

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000030c 	.word	0x2000030c
 8000104:	08012528 	.word	0x08012528

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	080125f8 	.word	0x080125f8
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	08012638 	.word	0x08012638

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	08012678 	.word	0x08012678
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <Debug_Tx>:



static void Debug_Tx(char _out[]){

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003288:	220c      	movs	r2, #12
static void Debug_Tx(char _out[]){
 800328a:	b530      	push	{r4, r5, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800328c:	4d0b      	ldr	r5, [pc, #44]	; (80032bc <Debug_Tx+0x34>)
static void Debug_Tx(char _out[]){
 800328e:	b083      	sub	sp, #12
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003290:	682b      	ldr	r3, [r5, #0]
static void Debug_Tx(char _out[]){
 8003292:	0004      	movs	r4, r0
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003294:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003296:	f7fc ff37 	bl	8000108 <strlen>
 800329a:	0021      	movs	r1, r4
 800329c:	b282      	uxth	r2, r0
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <Debug_Tx+0x38>)
 80032a0:	0028      	movs	r0, r5
 80032a2:	f007 fcdb 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <Debug_Tx+0x3c>)
 80032a8:	a901      	add	r1, sp, #4
 80032aa:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80032ac:	2202      	movs	r2, #2
 80032ae:	230a      	movs	r3, #10
 80032b0:	0028      	movs	r0, r5
 80032b2:	f007 fcd3 	bl	800ac5c <HAL_UART_Transmit>


}
 80032b6:	b003      	add	sp, #12
 80032b8:	bd30      	pop	{r4, r5, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20004ba0 	.word	0x20004ba0
 80032c0:	00001388 	.word	0x00001388
 80032c4:	00000a0d 	.word	0x00000a0d

080032c8 <StartTask02>:
{
 80032c8:	b510      	push	{r4, lr}
while(1){osDelay(1);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f007 ffea 	bl	800b2a4 <osDelay>
 80032d0:	e7fb      	b.n	80032ca <StartTask02+0x2>
 80032d2:	46c0      	nop			; (mov r8, r8)

080032d4 <readAcc.isra.0>:





static float* readAcc(){
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}

	ACC_GYRO_data[0]=0;
 80032d6:	2300      	movs	r3, #0
static float* readAcc(){
 80032d8:	46de      	mov	lr, fp
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
 80032de:	4645      	mov	r5, r8
	ACC_GYRO_data[0]=0;
 80032e0:	4c4d      	ldr	r4, [pc, #308]	; (8003418 <readAcc.isra.0+0x144>)
static float* readAcc(){
 80032e2:	b5e0      	push	{r5, r6, r7, lr}
	ACC_GYRO_data[0]=0;
 80032e4:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=0;
 80032e6:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=0;
 80032e8:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=0;
 80032ea:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=0;
 80032ec:	6123      	str	r3, [r4, #16]
	ACC_GYRO_data[5]=0;
 80032ee:	6163      	str	r3, [r4, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80032f0:	23fa      	movs	r3, #250	; 0xfa
static float* readAcc(){
 80032f2:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	469b      	mov	fp, r3
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	2306      	movs	r3, #6
 80032fc:	4e47      	ldr	r6, [pc, #284]	; (800341c <readAcc.isra.0+0x148>)
 80032fe:	ad04      	add	r5, sp, #16
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	9500      	str	r5, [sp, #0]
 8003304:	223b      	movs	r2, #59	; 0x3b
 8003306:	21d0      	movs	r1, #208	; 0xd0
 8003308:	0030      	movs	r0, r6
 800330a:	3b05      	subs	r3, #5
 800330c:	f005 fcfa 	bl	8008d04 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003310:	8828      	ldrh	r0, [r5, #0]
 8003312:	4b43      	ldr	r3, [pc, #268]	; (8003420 <readAcc.isra.0+0x14c>)
 8003314:	ba42      	rev16	r2, r0
 8003316:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003318:	886b      	ldrh	r3, [r5, #2]
 800331a:	bac0      	revsh	r0, r0
 800331c:	ba5a      	rev16	r2, r3
 800331e:	bad9      	revsh	r1, r3
 8003320:	4b40      	ldr	r3, [pc, #256]	; (8003424 <readAcc.isra.0+0x150>)
 8003322:	4689      	mov	r9, r1
 8003324:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003326:	88ab      	ldrh	r3, [r5, #4]
 8003328:	ba5a      	rev16	r2, r3
 800332a:	bad9      	revsh	r1, r3
 800332c:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <readAcc.isra.0+0x154>)
 800332e:	468a      	mov	sl, r1
 8003330:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8003332:	4a3e      	ldr	r2, [pc, #248]	; (800342c <readAcc.isra.0+0x158>)
 8003334:	4690      	mov	r8, r2
 8003336:	f7ff fe65 	bl	8003004 <__aeabi_i2d>
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <readAcc.isra.0+0x15c>)
 800333c:	2200      	movs	r2, #0
 800333e:	f7fe ffc9 	bl	80022d4 <__aeabi_dmul>
 8003342:	f7ff fefd 	bl	8003140 <__aeabi_d2f>
 8003346:	4642      	mov	r2, r8
 8003348:	6010      	str	r0, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800334a:	4648      	mov	r0, r9
 800334c:	f7ff fe5a 	bl	8003004 <__aeabi_i2d>
 8003350:	4b37      	ldr	r3, [pc, #220]	; (8003430 <readAcc.isra.0+0x15c>)
 8003352:	2200      	movs	r2, #0
 8003354:	f7fe ffbe 	bl	80022d4 <__aeabi_dmul>
 8003358:	f7ff fef2 	bl	8003140 <__aeabi_d2f>
	Az = Accel_Z_RAW/16384.0;
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <readAcc.isra.0+0x160>)
	Ay = Accel_Y_RAW/16384.0;
 800335e:	4f36      	ldr	r7, [pc, #216]	; (8003438 <readAcc.isra.0+0x164>)
	Az = Accel_Z_RAW/16384.0;
 8003360:	4691      	mov	r9, r2
	Ay = Accel_Y_RAW/16384.0;
 8003362:	6038      	str	r0, [r7, #0]
	Az = Accel_Z_RAW/16384.0;
 8003364:	4650      	mov	r0, sl
 8003366:	f7ff fe4d 	bl	8003004 <__aeabi_i2d>
 800336a:	2200      	movs	r2, #0
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <readAcc.isra.0+0x15c>)
 800336e:	f7fe ffb1 	bl	80022d4 <__aeabi_dmul>
 8003372:	f7ff fee5 	bl	8003140 <__aeabi_d2f>
 8003376:	464a      	mov	r2, r9


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8003378:	2306      	movs	r3, #6
	Az = Accel_Z_RAW/16384.0;
 800337a:	6010      	str	r0, [r2, #0]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800337c:	465a      	mov	r2, fp
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	9500      	str	r5, [sp, #0]
 8003384:	2243      	movs	r2, #67	; 0x43
 8003386:	21d0      	movs	r1, #208	; 0xd0
 8003388:	0030      	movs	r0, r6
 800338a:	3b05      	subs	r3, #5
 800338c:	f005 fcba 	bl	8008d04 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003390:	8828      	ldrh	r0, [r5, #0]
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <readAcc.isra.0+0x168>)
 8003394:	886e      	ldrh	r6, [r5, #2]
 8003396:	ba42      	rev16	r2, r0
 8003398:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <readAcc.isra.0+0x16c>)
 800339c:	88ad      	ldrh	r5, [r5, #4]
 800339e:	ba72      	rev16	r2, r6
 80033a0:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <readAcc.isra.0+0x170>)
 80033a4:	ba6a      	rev16	r2, r5
 80033a6:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 80033a8:	bac0      	revsh	r0, r0
 80033aa:	f7ff fe2b 	bl	8003004 <__aeabi_i2d>
 80033ae:	2200      	movs	r2, #0
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <readAcc.isra.0+0x174>)
 80033b2:	f7fe fb95 	bl	8001ae0 <__aeabi_ddiv>
 80033b6:	f7ff fec3 	bl	8003140 <__aeabi_d2f>
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <readAcc.isra.0+0x178>)
 80033bc:	baf6      	revsh	r6, r6
 80033be:	4682      	mov	sl, r0
 80033c0:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80033c2:	0030      	movs	r0, r6
 80033c4:	f7ff fe1e 	bl	8003004 <__aeabi_i2d>
 80033c8:	2200      	movs	r2, #0
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <readAcc.isra.0+0x174>)
 80033cc:	f7fe fb88 	bl	8001ae0 <__aeabi_ddiv>
 80033d0:	f7ff feb6 	bl	8003140 <__aeabi_d2f>
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <readAcc.isra.0+0x17c>)
 80033d6:	baed      	revsh	r5, r5
 80033d8:	1c06      	adds	r6, r0, #0
 80033da:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80033dc:	0028      	movs	r0, r5
 80033de:	f7ff fe11 	bl	8003004 <__aeabi_i2d>
 80033e2:	2200      	movs	r2, #0
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <readAcc.isra.0+0x174>)
 80033e6:	f7fe fb7b 	bl	8001ae0 <__aeabi_ddiv>
 80033ea:	f7ff fea9 	bl	8003140 <__aeabi_d2f>
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <readAcc.isra.0+0x180>)
	ACC_GYRO_data[0]=Ax;
	ACC_GYRO_data[1]=Ay;
	ACC_GYRO_data[2]=Az;
	ACC_GYRO_data[3]=Gx;
	ACC_GYRO_data[4]=Gy;
 80033f0:	6126      	str	r6, [r4, #16]
	Gz = Gyro_Z_RAW/131.0;
 80033f2:	6018      	str	r0, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 80033f4:	4643      	mov	r3, r8
 80033f6:	681b      	ldr	r3, [r3, #0]
	ACC_GYRO_data[5]=Gz;
 80033f8:	6160      	str	r0, [r4, #20]
	ACC_GYRO_data[0]=Ax;
 80033fa:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=Ay;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=Az;
 8003400:	464b      	mov	r3, r9
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=Gx;
 8003406:	4653      	mov	r3, sl
 8003408:	60e3      	str	r3, [r4, #12]
	return(ACC_GYRO_data);

	//sprintf (buf, "%.2f", Ax);
}
 800340a:	b007      	add	sp, #28
 800340c:	bcf0      	pop	{r4, r5, r6, r7}
 800340e:	46bb      	mov	fp, r7
 8003410:	46b2      	mov	sl, r6
 8003412:	46a9      	mov	r9, r5
 8003414:	46a0      	mov	r8, r4
 8003416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003418:	20000324 	.word	0x20000324
 800341c:	20004974 	.word	0x20004974
 8003420:	20000358 	.word	0x20000358
 8003424:	2000035a 	.word	0x2000035a
 8003428:	2000035c 	.word	0x2000035c
 800342c:	20000360 	.word	0x20000360
 8003430:	3f100000 	.word	0x3f100000
 8003434:	20000368 	.word	0x20000368
 8003438:	20000364 	.word	0x20000364
 800343c:	20001f70 	.word	0x20001f70
 8003440:	20001f72 	.word	0x20001f72
 8003444:	20001f74 	.word	0x20001f74
 8003448:	40606000 	.word	0x40606000
 800344c:	20001f68 	.word	0x20001f68
 8003450:	20001f6c 	.word	0x20001f6c
 8003454:	20001f78 	.word	0x20001f78

08003458 <StartTask03>:
 8003458:	b510      	push	{r4, lr}
 800345a:	2001      	movs	r0, #1
 800345c:	f007 ff22 	bl	800b2a4 <osDelay>
 8003460:	e7fb      	b.n	800345a <StartTask03+0x2>
 8003462:	46c0      	nop			; (mov r8, r8)

08003464 <RestartGSM>:
	}
	return 1;
}

void RestartGSM()
{
 8003464:	b570      	push	{r4, r5, r6, lr}
	SET_GSM_VCC_EN(1);
	SET_PWRKEY(0);
	HAL_Delay(700);
 8003466:	25af      	movs	r5, #175	; 0xaf
	SET_PWRKEY(1);
	HAL_Delay(500);
 8003468:	26fa      	movs	r6, #250	; 0xfa
	}
}

static void SET_GSM_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800346a:	4c1f      	ldr	r4, [pc, #124]	; (80034e8 <RestartGSM+0x84>)
 800346c:	2201      	movs	r2, #1
 800346e:	0020      	movs	r0, r4
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	f005 f9c7 	bl	8008804 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 8003476:	00ad      	lsls	r5, r5, #2
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	0020      	movs	r0, r4
 800347e:	f005 f9c1 	bl	8008804 <HAL_GPIO_WritePin>
 8003482:	0028      	movs	r0, r5
 8003484:	f004 faf6 	bl	8007a74 <HAL_Delay>
	HAL_Delay(500);
 8003488:	0076      	lsls	r6, r6, #1
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800348a:	2201      	movs	r2, #1
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	0020      	movs	r0, r4
 8003490:	f005 f9b8 	bl	8008804 <HAL_GPIO_WritePin>
 8003494:	0030      	movs	r0, r6
 8003496:	f004 faed 	bl	8007a74 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800349a:	2200      	movs	r2, #0
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	0020      	movs	r0, r4
 80034a0:	f005 f9b0 	bl	8008804 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
	HAL_Delay(700);
 80034a4:	0028      	movs	r0, r5
 80034a6:	f004 fae5 	bl	8007a74 <HAL_Delay>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	0020      	movs	r0, r4
 80034b0:	f005 f9a8 	bl	8008804 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(0);
	HAL_Delay(700);
 80034b4:	0028      	movs	r0, r5
 80034b6:	f004 fadd 	bl	8007a74 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80034ba:	2201      	movs	r2, #1
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	0020      	movs	r0, r4
 80034c0:	f005 f9a0 	bl	8008804 <HAL_GPIO_WritePin>
	SET_PWRKEY(1);
	HAL_Delay(500);
 80034c4:	0030      	movs	r0, r6
 80034c6:	f004 fad5 	bl	8007a74 <HAL_Delay>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2140      	movs	r1, #64	; 0x40
 80034ce:	0020      	movs	r0, r4
 80034d0:	f005 f998 	bl	8008804 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(1);
	HAL_Delay(200);
 80034d4:	20c8      	movs	r0, #200	; 0xc8
 80034d6:	f004 facd 	bl	8007a74 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80034da:	2200      	movs	r2, #0
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	0020      	movs	r0, r4
 80034e0:	f005 f990 	bl	8008804 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
}
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	50000800 	.word	0x50000800

080034ec <SendGSMCode>:

void SendGSMCode(const char cmd[])
{
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	46c6      	mov	lr, r8

	memset(GSMData, 0, 990);
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80034f0:	270c      	movs	r7, #12
{
 80034f2:	0005      	movs	r5, r0
 80034f4:	b500      	push	{lr}
	memset(GSMData, 0, 990);
 80034f6:	2100      	movs	r1, #0
{
 80034f8:	b082      	sub	sp, #8
	memset(GSMData, 0, 990);
 80034fa:	4a24      	ldr	r2, [pc, #144]	; (800358c <SendGSMCode+0xa0>)
 80034fc:	4824      	ldr	r0, [pc, #144]	; (8003590 <SendGSMCode+0xa4>)
 80034fe:	f00b fa81 	bl	800ea04 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <SendGSMCode+0xa8>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003504:	4e24      	ldr	r6, [pc, #144]	; (8003598 <SendGSMCode+0xac>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003506:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003508:	2201      	movs	r2, #1
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800350a:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800350c:	4923      	ldr	r1, [pc, #140]	; (800359c <SendGSMCode+0xb0>)
 800350e:	0030      	movs	r0, r6
 8003510:	f007 fd72 	bl	800aff8 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 100);
 8003514:	4c22      	ldr	r4, [pc, #136]	; (80035a0 <SendGSMCode+0xb4>)
 8003516:	2264      	movs	r2, #100	; 0x64
 8003518:	2100      	movs	r1, #0
 800351a:	0020      	movs	r0, r4
 800351c:	f00b fa72 	bl	800ea04 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 8003520:	0028      	movs	r0, r5
 8003522:	f7fc fdf1 	bl	8000108 <strlen>
 8003526:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <SendGSMCode+0xb8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <SendGSMCode+0x46>
 800352e:	285a      	cmp	r0, #90	; 0x5a
 8003530:	d818      	bhi.n	8003564 <SendGSMCode+0x78>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 8003532:	0029      	movs	r1, r5
 8003534:	0020      	movs	r0, r4
 8003536:	f00b fb2b 	bl	800eb90 <stpcpy>
	strcat(GSMTXC, "\r\n");
 800353a:	491b      	ldr	r1, [pc, #108]	; (80035a8 <SendGSMCode+0xbc>)
 800353c:	2203      	movs	r2, #3
 800353e:	f00b fc33 	bl	800eda8 <memcpy>




static void GSM_Tx(const char _out[]){
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003542:	220c      	movs	r2, #12
 8003544:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003546:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003548:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800354a:	f7fc fddd 	bl	8000108 <strlen>
 800354e:	2396      	movs	r3, #150	; 0x96
 8003550:	b282      	uxth	r2, r0
 8003552:	0021      	movs	r1, r4
 8003554:	0030      	movs	r0, r6
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	f007 fb80 	bl	800ac5c <HAL_UART_Transmit>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
	// return GSM_Rx();
}
 800355c:	b002      	add	sp, #8
 800355e:	bc80      	pop	{r7}
 8003560:	46b8      	mov	r8, r7
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <SendGSMCode+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003566:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003568:	4698      	mov	r8, r3
 800356a:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800356c:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800356e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003570:	490f      	ldr	r1, [pc, #60]	; (80035b0 <SendGSMCode+0xc4>)
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <SendGSMCode+0xc8>)
 8003574:	f007 fb72 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <SendGSMCode+0xcc>)
 800357a:	a901      	add	r1, sp, #4
 800357c:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800357e:	2202      	movs	r2, #2
 8003580:	230a      	movs	r3, #10
 8003582:	4640      	mov	r0, r8
 8003584:	f007 fb6a 	bl	800ac5c <HAL_UART_Transmit>
}
 8003588:	e7d3      	b.n	8003532 <SendGSMCode+0x46>
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	000003de 	.word	0x000003de
 8003590:	200006c8 	.word	0x200006c8
 8003594:	20004b0c 	.word	0x20004b0c
 8003598:	20004a78 	.word	0x20004a78
 800359c:	200006c4 	.word	0x200006c4
 80035a0:	20001f04 	.word	0x20001f04
 80035a4:	200000c4 	.word	0x200000c4
 80035a8:	080126d8 	.word	0x080126d8
 80035ac:	20004ba0 	.word	0x20004ba0
 80035b0:	080126b8 	.word	0x080126b8
 80035b4:	00001388 	.word	0x00001388
 80035b8:	00000a0d 	.word	0x00000a0d

080035bc <SendGSMCodeL>:
	GSM_Tx(cmd);
	// return GSM_Rx();
}

void SendGSMCodeL(const char cmd[])
{
 80035bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035be:	46c6      	mov	lr, r8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80035c0:	270c      	movs	r7, #12
{
 80035c2:	0005      	movs	r5, r0
 80035c4:	b500      	push	{lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <SendGSMCodeL+0xa0>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80035c8:	4e25      	ldr	r6, [pc, #148]	; (8003660 <SendGSMCodeL+0xa4>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80035ca:	681b      	ldr	r3, [r3, #0]
{
 80035cc:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80035ce:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80035d0:	2201      	movs	r2, #1
 80035d2:	4924      	ldr	r1, [pc, #144]	; (8003664 <SendGSMCodeL+0xa8>)
 80035d4:	0030      	movs	r0, r6
 80035d6:	f007 fd0f 	bl	800aff8 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 80035da:	2100      	movs	r1, #0
 80035dc:	4a22      	ldr	r2, [pc, #136]	; (8003668 <SendGSMCodeL+0xac>)
 80035de:	4823      	ldr	r0, [pc, #140]	; (800366c <SendGSMCodeL+0xb0>)
 80035e0:	f00b fa10 	bl	800ea04 <memset>
	memset(GSMTXC, 0, 100);
 80035e4:	4c22      	ldr	r4, [pc, #136]	; (8003670 <SendGSMCodeL+0xb4>)
 80035e6:	2264      	movs	r2, #100	; 0x64
 80035e8:	2100      	movs	r1, #0
 80035ea:	0020      	movs	r0, r4
 80035ec:	f00b fa0a 	bl	800ea04 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 80035f0:	0028      	movs	r0, r5
 80035f2:	f7fc fd89 	bl	8000108 <strlen>
 80035f6:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <SendGSMCodeL+0xb8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <SendGSMCodeL+0x46>
 80035fe:	285a      	cmp	r0, #90	; 0x5a
 8003600:	d818      	bhi.n	8003634 <SendGSMCodeL+0x78>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 8003602:	0029      	movs	r1, r5
 8003604:	0020      	movs	r0, r4
 8003606:	f00b fac3 	bl	800eb90 <stpcpy>
	strcat(GSMTXC, "\r\n");
 800360a:	491b      	ldr	r1, [pc, #108]	; (8003678 <SendGSMCodeL+0xbc>)
 800360c:	2203      	movs	r2, #3
 800360e:	f00b fbcb 	bl	800eda8 <memcpy>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003612:	220c      	movs	r2, #12
 8003614:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003616:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003618:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800361a:	f7fc fd75 	bl	8000108 <strlen>
 800361e:	2396      	movs	r3, #150	; 0x96
 8003620:	b282      	uxth	r2, r0
 8003622:	0021      	movs	r1, r4
 8003624:	0030      	movs	r0, r6
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	f007 fb18 	bl	800ac5c <HAL_UART_Transmit>
	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);

	// return GSM_RxL();
}
 800362c:	b002      	add	sp, #8
 800362e:	bc80      	pop	{r7}
 8003630:	46b8      	mov	r8, r7
 8003632:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <SendGSMCodeL+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003636:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003638:	4698      	mov	r8, r3
 800363a:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800363c:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800363e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003640:	490f      	ldr	r1, [pc, #60]	; (8003680 <SendGSMCodeL+0xc4>)
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <SendGSMCodeL+0xc8>)
 8003644:	f007 fb0a 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <SendGSMCodeL+0xcc>)
 800364a:	a901      	add	r1, sp, #4
 800364c:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800364e:	2202      	movs	r2, #2
 8003650:	230a      	movs	r3, #10
 8003652:	4640      	mov	r0, r8
 8003654:	f007 fb02 	bl	800ac5c <HAL_UART_Transmit>
}
 8003658:	e7d3      	b.n	8003602 <SendGSMCodeL+0x46>
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	20004b0c 	.word	0x20004b0c
 8003660:	20004a78 	.word	0x20004a78
 8003664:	200006c4 	.word	0x200006c4
 8003668:	000003de 	.word	0x000003de
 800366c:	200006c8 	.word	0x200006c8
 8003670:	20001f04 	.word	0x20001f04
 8003674:	200000c4 	.word	0x200000c4
 8003678:	080126d8 	.word	0x080126d8
 800367c:	20004ba0 	.word	0x20004ba0
 8003680:	080126b8 	.word	0x080126b8
 8003684:	00001388 	.word	0x00001388
 8003688:	00000a0d 	.word	0x00000a0d

0800368c <SendGSMData>:

void SendGSMData(const char data[])
{
 800368c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800368e:	270c      	movs	r7, #12
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <SendGSMData+0x68>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003692:	4c19      	ldr	r4, [pc, #100]	; (80036f8 <SendGSMData+0x6c>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003694:	681b      	ldr	r3, [r3, #0]
{
 8003696:	b083      	sub	sp, #12
 8003698:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800369a:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800369c:	2201      	movs	r2, #1
 800369e:	0020      	movs	r0, r4
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <SendGSMData+0x70>)
 80036a2:	f007 fca9 	bl	800aff8 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 80036a6:	2100      	movs	r1, #0
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <SendGSMData+0x74>)
 80036aa:	4816      	ldr	r0, [pc, #88]	; (8003704 <SendGSMData+0x78>)
 80036ac:	f00b f9aa 	bl	800ea04 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 80036b0:	466b      	mov	r3, sp
 80036b2:	2202      	movs	r2, #2
 80036b4:	2100      	movs	r1, #0
 80036b6:	1d58      	adds	r0, r3, #5
 80036b8:	f00b f9a4 	bl	800ea04 <memset>
	end[0] = 0x1A;
 80036bc:	231a      	movs	r3, #26
	memset(end, 0, 3);
 80036be:	ae01      	add	r6, sp, #4
	end[0] = 0x1A;
 80036c0:	7033      	strb	r3, [r6, #0]
	//memset(_out,0,strlen(_out));
}

static void GSM_TxL(const char _out[]){

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036c2:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 80036c4:	0028      	movs	r0, r5
	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036c6:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 80036c8:	f7fc fd1e 	bl	8000108 <strlen>
 80036cc:	0029      	movs	r1, r5
 80036ce:	b282      	uxth	r2, r0
 80036d0:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <SendGSMData+0x7c>)
 80036d2:	0020      	movs	r0, r4
 80036d4:	f007 fac2 	bl	800ac5c <HAL_UART_Transmit>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036d8:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80036da:	0030      	movs	r0, r6
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036dc:	621f      	str	r7, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80036de:	f7fc fd13 	bl	8000108 <strlen>
 80036e2:	2396      	movs	r3, #150	; 0x96
 80036e4:	b282      	uxth	r2, r0
 80036e6:	0031      	movs	r1, r6
 80036e8:	0020      	movs	r0, r4
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	f007 fab6 	bl	800ac5c <HAL_UART_Transmit>
	// strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
	GSM_Tx((char *)end);

	// return GSM_Rx();
}
 80036f0:	b003      	add	sp, #12
 80036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f4:	20004b0c 	.word	0x20004b0c
 80036f8:	20004a78 	.word	0x20004a78
 80036fc:	200006c4 	.word	0x200006c4
 8003700:	000003de 	.word	0x000003de
 8003704:	200006c8 	.word	0x200006c8
 8003708:	00001388 	.word	0x00001388

0800370c <EndTransfer>:

void EndTransfer()
{
 800370c:	b570      	push	{r4, r5, r6, lr}

	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800370e:	260c      	movs	r6, #12
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <EndTransfer+0x50>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003712:	4c13      	ldr	r4, [pc, #76]	; (8003760 <EndTransfer+0x54>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003714:	681b      	ldr	r3, [r3, #0]
{
 8003716:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003718:	621e      	str	r6, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800371a:	2201      	movs	r2, #1
 800371c:	0020      	movs	r0, r4
 800371e:	4911      	ldr	r1, [pc, #68]	; (8003764 <EndTransfer+0x58>)
 8003720:	f007 fc6a 	bl	800aff8 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 990);
 8003724:	2100      	movs	r1, #0
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <EndTransfer+0x5c>)
 8003728:	4810      	ldr	r0, [pc, #64]	; (800376c <EndTransfer+0x60>)
 800372a:	f00b f96b 	bl	800ea04 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 800372e:	466b      	mov	r3, sp
 8003730:	2202      	movs	r2, #2
 8003732:	2100      	movs	r1, #0
 8003734:	1d58      	adds	r0, r3, #5
 8003736:	f00b f965 	bl	800ea04 <memset>
	end[0] = 0x1A;
 800373a:	231a      	movs	r3, #26
	memset(end, 0, 3);
 800373c:	ad01      	add	r5, sp, #4
	end[0] = 0x1A;
 800373e:	702b      	strb	r3, [r5, #0]
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003740:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003742:	0028      	movs	r0, r5
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003744:	621e      	str	r6, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003746:	f7fc fcdf 	bl	8000108 <strlen>
 800374a:	2396      	movs	r3, #150	; 0x96
 800374c:	b282      	uxth	r2, r0
 800374e:	0029      	movs	r1, r5
 8003750:	0020      	movs	r0, r4
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	f007 fa82 	bl	800ac5c <HAL_UART_Transmit>
	GSM_Tx((char *)end);
	// return GSM_Rx();
}
 8003758:	b002      	add	sp, #8
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	20004b0c 	.word	0x20004b0c
 8003760:	20004a78 	.word	0x20004a78
 8003764:	200006c4 	.word	0x200006c4
 8003768:	000003de 	.word	0x000003de
 800376c:	200006c8 	.word	0x200006c8

08003770 <waitForResponse>:
int waitForResponse(const char* expectedResponse, int timeout) {
	memset(GSMReply3, 0, 500);
 8003770:	22fa      	movs	r2, #250	; 0xfa
int waitForResponse(const char* expectedResponse, int timeout) {
 8003772:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(GSMReply3, 0, 500);
 8003774:	0052      	lsls	r2, r2, #1
int waitForResponse(const char* expectedResponse, int timeout) {
 8003776:	b083      	sub	sp, #12
 8003778:	0006      	movs	r6, r0
 800377a:	000d      	movs	r5, r1
	memset(GSMReply3, 0, 500);
 800377c:	481f      	ldr	r0, [pc, #124]	; (80037fc <waitForResponse+0x8c>)
 800377e:	2100      	movs	r1, #0
 8003780:	f00b f940 	bl	800ea04 <memset>
    int ret=0;

	int stT = HAL_GetTick();
 8003784:	f004 f970 	bl	8007a68 <HAL_GetTick>
 8003788:	4f1d      	ldr	r7, [pc, #116]	; (8003800 <waitForResponse+0x90>)
 800378a:	0004      	movs	r4, r0
	while (((HAL_GetTick() - stT) <= timeout)){
 800378c:	e005      	b.n	800379a <waitForResponse+0x2a>
		//HAL_UART_Receive(&huart1, (uint8_t*)(GSMReply3 + rxBufferIndex), 1, HAL_MAX_DELAY);
        //rxBufferIndex++;
		//strlen(GSMData)
        if (strstr(GSMData, expectedResponse) != NULL) {
 800378e:	0031      	movs	r1, r6
 8003790:	0038      	movs	r0, r7
 8003792:	f00b f9e7 	bl	800eb64 <strstr>
 8003796:	2800      	cmp	r0, #0
 8003798:	d12d      	bne.n	80037f6 <waitForResponse+0x86>
	while (((HAL_GetTick() - stT) <= timeout)){
 800379a:	f004 f965 	bl	8007a68 <HAL_GetTick>
 800379e:	1b00      	subs	r0, r0, r4
 80037a0:	42a8      	cmp	r0, r5
 80037a2:	d9f4      	bls.n	800378e <waitForResponse+0x1e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037a4:	260c      	movs	r6, #12
 80037a6:	4c17      	ldr	r4, [pc, #92]	; (8003804 <waitForResponse+0x94>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037a8:	2216      	movs	r2, #22
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037aa:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037ac:	4916      	ldr	r1, [pc, #88]	; (8003808 <waitForResponse+0x98>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037ae:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037b0:	0020      	movs	r0, r4
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <waitForResponse+0x9c>)
 80037b4:	f007 fa52 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80037b8:	466b      	mov	r3, sp
 80037ba:	4d15      	ldr	r5, [pc, #84]	; (8003810 <waitForResponse+0xa0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80037bc:	2202      	movs	r2, #2
 80037be:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 80037c0:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80037c2:	0020      	movs	r0, r4
 80037c4:	230a      	movs	r3, #10
 80037c6:	f007 fa49 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037ca:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037cc:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037ce:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037d0:	f7fc fc9a 	bl	8000108 <strlen>
 80037d4:	0039      	movs	r1, r7
 80037d6:	b282      	uxth	r2, r0
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <waitForResponse+0x9c>)
 80037da:	0020      	movs	r0, r4
 80037dc:	f007 fa3e 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80037e0:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80037e2:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80037e4:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80037e6:	0020      	movs	r0, r4
 80037e8:	230a      	movs	r3, #10
 80037ea:	a901      	add	r1, sp, #4
 80037ec:	f007 fa36 	bl	800ac5c <HAL_UART_Transmit>
    int ret=0;
 80037f0:	2000      	movs	r0, #0
        }
    }
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
	return ret;

}
 80037f2:	b003      	add	sp, #12
 80037f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        	ret=1;
 80037f6:	2001      	movs	r0, #1
	return ret;
 80037f8:	e7fb      	b.n	80037f2 <waitForResponse+0x82>
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	20001d0c 	.word	0x20001d0c
 8003800:	200006c8 	.word	0x200006c8
 8003804:	20004ba0 	.word	0x20004ba0
 8003808:	080127e0 	.word	0x080127e0
 800380c:	00001388 	.word	0x00001388
 8003810:	00000a0d 	.word	0x00000a0d

08003814 <GetGSMReply>:

char *GetGSMReply(int extra, const char *find, int gap, const char *LineEnd, const char *ErrorMsg, int timeout, const char *finChar)
{
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003816:	46de      	mov	lr, fp
 8003818:	464e      	mov	r6, r9
 800381a:	4645      	mov	r5, r8
 800381c:	4657      	mov	r7, sl
 800381e:	b5e0      	push	{r5, r6, r7, lr}
 8003820:	b087      	sub	sp, #28
 8003822:	469a      	mov	sl, r3
 8003824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003826:	9202      	str	r2, [sp, #8]
 8003828:	4699      	mov	r9, r3
	memset(GSMReply, 0, 100);
 800382a:	4b78      	ldr	r3, [pc, #480]	; (8003a0c <GetGSMReply+0x1f8>)
 800382c:	2264      	movs	r2, #100	; 0x64
 800382e:	0018      	movs	r0, r3
{
 8003830:	468b      	mov	fp, r1
	memset(GSMReply, 0, 100);
 8003832:	2100      	movs	r1, #0
 8003834:	9303      	str	r3, [sp, #12]
 8003836:	f00b f8e5 	bl	800ea04 <memset>
	memset(GSMInData, 0, 1000);
 800383a:	22fa      	movs	r2, #250	; 0xfa
 800383c:	4d74      	ldr	r5, [pc, #464]	; (8003a10 <GetGSMReply+0x1fc>)
 800383e:	2100      	movs	r1, #0
 8003840:	0092      	lsls	r2, r2, #2
 8003842:	0028      	movs	r0, r5
 8003844:	f00b f8de 	bl	800ea04 <memset>
	int stT = HAL_GetTick();
 8003848:	f004 f90e 	bl	8007a68 <HAL_GetTick>
 800384c:	4680      	mov	r8, r0
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800384e:	4b71      	ldr	r3, [pc, #452]	; (8003a14 <GetGSMReply+0x200>)
	while (((HAL_GetTick() - stT) <= timeout))
	{
		HAL_Delay(70);
		if (strlen(GSMData) > 0)
 8003850:	4e71      	ldr	r6, [pc, #452]	; (8003a18 <GetGSMReply+0x204>)
			}
			gsmER = 0;
		}
		else
		{
			gsmER++;
 8003852:	4c72      	ldr	r4, [pc, #456]	; (8003a1c <GetGSMReply+0x208>)
 8003854:	9301      	str	r3, [sp, #4]
	while (((HAL_GetTick() - stT) <= timeout))
 8003856:	f004 f907 	bl	8007a68 <HAL_GetTick>
 800385a:	4643      	mov	r3, r8
 800385c:	1ac0      	subs	r0, r0, r3
 800385e:	4581      	cmp	r9, r0
 8003860:	d31f      	bcc.n	80038a2 <GetGSMReply+0x8e>
		HAL_Delay(70);
 8003862:	2046      	movs	r0, #70	; 0x46
 8003864:	f004 f906 	bl	8007a74 <HAL_Delay>
		if (strlen(GSMData) > 0)
 8003868:	7837      	ldrb	r7, [r6, #0]
 800386a:	2f00      	cmp	r7, #0
 800386c:	d128      	bne.n	80038c0 <GetGSMReply+0xac>
			gsmER++;
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	6023      	str	r3, [r4, #0]
			if (gsmER > 9)
 8003874:	2b09      	cmp	r3, #9
 8003876:	ddee      	ble.n	8003856 <GetGSMReply+0x42>
			{
				RestartGSM();
 8003878:	f7ff fdf4 	bl	8003464 <RestartGSM>
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <GetGSMReply+0x20c>)
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800387e:	4869      	ldr	r0, [pc, #420]	; (8003a24 <GetGSMReply+0x210>)
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	230c      	movs	r3, #12
 8003884:	9901      	ldr	r1, [sp, #4]
 8003886:	6213      	str	r3, [r2, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003888:	6802      	ldr	r2, [r0, #0]
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800388a:	700f      	strb	r7, [r1, #0]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800388c:	6213      	str	r3, [r2, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800388e:	2201      	movs	r2, #1
 8003890:	f007 fbb2 	bl	800aff8 <HAL_UART_Receive_DMA>
				restartGSMuart();
				gsmER = 0;
 8003894:	6027      	str	r7, [r4, #0]
	while (((HAL_GetTick() - stT) <= timeout))
 8003896:	f004 f8e7 	bl	8007a68 <HAL_GetTick>
 800389a:	4643      	mov	r3, r8
 800389c:	1ac0      	subs	r0, r0, r3
 800389e:	4581      	cmp	r9, r0
 80038a0:	d2df      	bcs.n	8003862 <GetGSMReply+0x4e>
			}
		}
	}

	// Debug_Tx(GSMInData);
	if (strlen(GSMReply) < 1)
 80038a2:	9b03      	ldr	r3, [sp, #12]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d05c      	beq.n	8003964 <GetGSMReply+0x150>
		// Debug_Tx(GSMData);
		// Debug_Tx("****");
		// Debug_Tx(GSMReply);
		// Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 80038aa:	2064      	movs	r0, #100	; 0x64
 80038ac:	f004 f8e2 	bl	8007a74 <HAL_Delay>
	// if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
}
 80038b0:	9803      	ldr	r0, [sp, #12]
 80038b2:	b007      	add	sp, #28
 80038b4:	bcf0      	pop	{r4, r5, r6, r7}
 80038b6:	46bb      	mov	fp, r7
 80038b8:	46b2      	mov	sl, r6
 80038ba:	46a9      	mov	r9, r5
 80038bc:	46a0      	mov	r8, r4
 80038be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(GSMInData, GSMData);
 80038c0:	0031      	movs	r1, r6
 80038c2:	0028      	movs	r0, r5
 80038c4:	f00b fa5d 	bl	800ed82 <strcpy>
			char *pq = strstr(GSMInData, finChar);
 80038c8:	0028      	movs	r0, r5
 80038ca:	9912      	ldr	r1, [sp, #72]	; 0x48
 80038cc:	f00b f94a 	bl	800eb64 <strstr>
			if ((pq != NULL))
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d025      	beq.n	8003920 <GetGSMReply+0x10c>
				if ((strlen(find) < 1))
 80038d4:	465b      	mov	r3, fp
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d100      	bne.n	80038de <GetGSMReply+0xca>
 80038dc:	e08c      	b.n	80039f8 <GetGSMReply+0x1e4>
				char *p = strstr(GSMInData, find);
 80038de:	4659      	mov	r1, fp
 80038e0:	0028      	movs	r0, r5
 80038e2:	f00b f93f 	bl	800eb64 <strstr>
				if ((strlen(LineEnd) < 1))
 80038e6:	4653      	mov	r3, sl
 80038e8:	781b      	ldrb	r3, [r3, #0]
				char *p = strstr(GSMInData, find);
 80038ea:	0007      	movs	r7, r0
				if ((strlen(LineEnd) < 1))
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d100      	bne.n	80038f2 <GetGSMReply+0xde>
 80038f0:	e087      	b.n	8003a02 <GetGSMReply+0x1ee>
					if ((strstr(GSMInData, LineEnd) != NULL))
 80038f2:	4651      	mov	r1, sl
 80038f4:	0028      	movs	r0, r5
 80038f6:	f00b f935 	bl	800eb64 <strstr>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d00c      	beq.n	8003918 <GetGSMReply+0x104>
						if ((strlen(p + gap) > strlen(LineEnd)))
 80038fe:	9b02      	ldr	r3, [sp, #8]
 8003900:	469c      	mov	ip, r3
 8003902:	4467      	add	r7, ip
 8003904:	0038      	movs	r0, r7
 8003906:	f7fc fbff 	bl	8000108 <strlen>
 800390a:	9000      	str	r0, [sp, #0]
 800390c:	4650      	mov	r0, sl
 800390e:	f7fc fbfb 	bl	8000108 <strlen>
 8003912:	9b00      	ldr	r3, [sp, #0]
 8003914:	4283      	cmp	r3, r0
 8003916:	d85f      	bhi.n	80039d8 <GetGSMReply+0x1c4>
			gsmER = 0;
 8003918:	2200      	movs	r2, #0
 800391a:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <GetGSMReply+0x208>)
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e79a      	b.n	8003856 <GetGSMReply+0x42>
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 8003920:	0028      	movs	r0, r5
 8003922:	4941      	ldr	r1, [pc, #260]	; (8003a28 <GetGSMReply+0x214>)
 8003924:	f00b f91e 	bl	800eb64 <strstr>
 8003928:	2800      	cmp	r0, #0
 800392a:	d105      	bne.n	8003938 <GetGSMReply+0x124>
 800392c:	0028      	movs	r0, r5
 800392e:	493f      	ldr	r1, [pc, #252]	; (8003a2c <GetGSMReply+0x218>)
 8003930:	f00b f918 	bl	800eb64 <strstr>
 8003934:	2800      	cmp	r0, #0
 8003936:	d0ef      	beq.n	8003918 <GetGSMReply+0x104>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003938:	220c      	movs	r2, #12
 800393a:	4c3d      	ldr	r4, [pc, #244]	; (8003a30 <GetGSMReply+0x21c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800393c:	493d      	ldr	r1, [pc, #244]	; (8003a34 <GetGSMReply+0x220>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800393e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003940:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003942:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003944:	4b3c      	ldr	r3, [pc, #240]	; (8003a38 <GetGSMReply+0x224>)
 8003946:	3a03      	subs	r2, #3
 8003948:	f007 f988 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <GetGSMReply+0x228>)
 800394e:	a905      	add	r1, sp, #20
 8003950:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003952:	2202      	movs	r2, #2
 8003954:	230a      	movs	r3, #10
 8003956:	0020      	movs	r0, r4
 8003958:	f007 f980 	bl	800ac5c <HAL_UART_Transmit>
	if (strlen(GSMReply) < 1)
 800395c:	9b03      	ldr	r3, [sp, #12]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1a2      	bne.n	80038aa <GetGSMReply+0x96>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003964:	270c      	movs	r7, #12
 8003966:	4c32      	ldr	r4, [pc, #200]	; (8003a30 <GetGSMReply+0x21c>)
	char newline[2] = "\r\n";
 8003968:	4e34      	ldr	r6, [pc, #208]	; (8003a3c <GetGSMReply+0x228>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800396a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800396c:	2204      	movs	r2, #4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800396e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003970:	0020      	movs	r0, r4
 8003972:	4933      	ldr	r1, [pc, #204]	; (8003a40 <GetGSMReply+0x22c>)
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <GetGSMReply+0x224>)
 8003976:	f007 f971 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800397a:	ab04      	add	r3, sp, #16
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800397c:	a905      	add	r1, sp, #20
 800397e:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003980:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003982:	0020      	movs	r0, r4
 8003984:	230a      	movs	r3, #10
 8003986:	f007 f969 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800398a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800398c:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800398e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003990:	f7fc fbba 	bl	8000108 <strlen>
 8003994:	0029      	movs	r1, r5
 8003996:	b282      	uxth	r2, r0
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <GetGSMReply+0x224>)
 800399a:	0020      	movs	r0, r4
 800399c:	f007 f95e 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80039a0:	ab04      	add	r3, sp, #16
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80039a2:	a905      	add	r1, sp, #20
 80039a4:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80039a6:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80039a8:	0020      	movs	r0, r4
 80039aa:	230a      	movs	r3, #10
 80039ac:	f007 f956 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80039b0:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80039b2:	9810      	ldr	r0, [sp, #64]	; 0x40
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80039b4:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80039b6:	f7fc fba7 	bl	8000108 <strlen>
 80039ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80039bc:	b282      	uxth	r2, r0
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <GetGSMReply+0x224>)
 80039c0:	0020      	movs	r0, r4
 80039c2:	f007 f94b 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80039c6:	ab04      	add	r3, sp, #16
 80039c8:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80039ca:	2202      	movs	r2, #2
 80039cc:	230a      	movs	r3, #10
 80039ce:	0020      	movs	r0, r4
 80039d0:	a905      	add	r1, sp, #20
 80039d2:	f007 f943 	bl	800ac5c <HAL_UART_Transmit>
}
 80039d6:	e768      	b.n	80038aa <GetGSMReply+0x96>
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 80039d8:	0038      	movs	r0, r7
 80039da:	2200      	movs	r2, #0
 80039dc:	4651      	mov	r1, sl
 80039de:	f00b f8bc 	bl	800eb5a <strtok_r>
 80039e2:	0007      	movs	r7, r0
							if (strlen(p1) < 88)
 80039e4:	f7fc fb90 	bl	8000108 <strlen>
 80039e8:	2857      	cmp	r0, #87	; 0x57
 80039ea:	d895      	bhi.n	8003918 <GetGSMReply+0x104>
								strcpy(GSMReply, p1);
 80039ec:	1c42      	adds	r2, r0, #1
 80039ee:	0039      	movs	r1, r7
 80039f0:	9803      	ldr	r0, [sp, #12]
 80039f2:	f00b f9d9 	bl	800eda8 <memcpy>
								break;
 80039f6:	e754      	b.n	80038a2 <GetGSMReply+0x8e>
					strcpy(GSMReply, pq);
 80039f8:	0001      	movs	r1, r0
 80039fa:	9803      	ldr	r0, [sp, #12]
 80039fc:	f00b f9c1 	bl	800ed82 <strcpy>
					break;
 8003a00:	e74f      	b.n	80038a2 <GetGSMReply+0x8e>
					strcpy(GSMReply, p);
 8003a02:	0001      	movs	r1, r0
 8003a04:	9803      	ldr	r0, [sp, #12]
 8003a06:	f00b f9bc 	bl	800ed82 <strcpy>
					break;
 8003a0a:	e74a      	b.n	80038a2 <GetGSMReply+0x8e>
 8003a0c:	20001ca8 	.word	0x20001ca8
 8003a10:	200018c0 	.word	0x200018c0
 8003a14:	200006c4 	.word	0x200006c4
 8003a18:	200006c8 	.word	0x200006c8
 8003a1c:	2000474c 	.word	0x2000474c
 8003a20:	20004b0c 	.word	0x20004b0c
 8003a24:	20004a78 	.word	0x20004a78
 8003a28:	080127f8 	.word	0x080127f8
 8003a2c:	08012800 	.word	0x08012800
 8003a30:	20004ba0 	.word	0x20004ba0
 8003a34:	08012808 	.word	0x08012808
 8003a38:	00001388 	.word	0x00001388
 8003a3c:	00000a0d 	.word	0x00000a0d
 8003a40:	08012814 	.word	0x08012814

08003a44 <GSMSigQuality>:

int GSMSigQuality()
{
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	46c6      	mov	lr, r8
	GSMSignal = 0;
 8003a48:	2300      	movs	r3, #0
{
 8003a4a:	b500      	push	{lr}
	GSMSignal = 0;
 8003a4c:	4e44      	ldr	r6, [pc, #272]	; (8003b60 <GSMSigQuality+0x11c>)
{
 8003a4e:	b086      	sub	sp, #24
	SendGSMCode(" AT+CSQ");
 8003a50:	4844      	ldr	r0, [pc, #272]	; (8003b64 <GSMSigQuality+0x120>)
	GSMSignal = 0;
 8003a52:	6033      	str	r3, [r6, #0]
	SendGSMCode(" AT+CSQ");
 8003a54:	f7ff fd4a 	bl	80034ec <SendGSMCode>
	HAL_Delay(100);
 8003a58:	2064      	movs	r0, #100	; 0x64
 8003a5a:	f004 f80b 	bl	8007a74 <HAL_Delay>
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8003a5e:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <GSMSigQuality+0x124>)
 8003a60:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <GSMSigQuality+0x128>)
 8003a62:	9202      	str	r2, [sp, #8]
 8003a64:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <GSMSigQuality+0x12c>)
 8003a66:	4943      	ldr	r1, [pc, #268]	; (8003b74 <GSMSigQuality+0x130>)
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	9201      	str	r2, [sp, #4]
 8003a6e:	4a42      	ldr	r2, [pc, #264]	; (8003b78 <GSMSigQuality+0x134>)
 8003a70:	9200      	str	r2, [sp, #0]
 8003a72:	2205      	movs	r2, #5
 8003a74:	f7ff fece 	bl	8003814 <GetGSMReply>
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f009 ff35 	bl	800d8e8 <strtod>
 8003a7e:	f7ff fb5f 	bl	8003140 <__aeabi_d2f>

	if (GSMSignal > 5)
 8003a82:	493e      	ldr	r1, [pc, #248]	; (8003b7c <GSMSigQuality+0x138>)
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8003a84:	6030      	str	r0, [r6, #0]
	if (GSMSignal > 5)
 8003a86:	f7fc fd35 	bl	80004f4 <__aeabi_fcmpgt>
 8003a8a:	1e05      	subs	r5, r0, #0
 8003a8c:	d01d      	beq.n	8003aca <GSMSigQuality+0x86>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 8003a8e:	2201      	movs	r2, #1
 8003a90:	2102      	movs	r1, #2
 8003a92:	483b      	ldr	r0, [pc, #236]	; (8003b80 <GSMSigQuality+0x13c>)
 8003a94:	f004 feb6 	bl	8008804 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a98:	220c      	movs	r2, #12
 8003a9a:	4c3a      	ldr	r4, [pc, #232]	; (8003b84 <GSMSigQuality+0x140>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003a9c:	493a      	ldr	r1, [pc, #232]	; (8003b88 <GSMSigQuality+0x144>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a9e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003aa0:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003aa2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003aa4:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <GSMSigQuality+0x148>)
 8003aa6:	3a04      	subs	r2, #4
 8003aa8:	f007 f8d8 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003aac:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <GSMSigQuality+0x14c>)
 8003aae:	a905      	add	r1, sp, #20
 8003ab0:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	230a      	movs	r3, #10
 8003ab6:	0020      	movs	r0, r4
 8003ab8:	f007 f8d0 	bl	800ac5c <HAL_UART_Transmit>
			RestartGSM();
		restartGSMuart();
		Debug_Tx("GSMTRstarted");
		SET_LED_NET(0);
	}
	return (GSMSignal); // must be higher than 5 ,range 0-33
 8003abc:	6830      	ldr	r0, [r6, #0]
 8003abe:	f7fd fbf5 	bl	80012ac <__aeabi_f2iz>
}
 8003ac2:	b006      	add	sp, #24
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	46b8      	mov	r8, r7
 8003ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003aca:	270c      	movs	r7, #12
 8003acc:	4c2d      	ldr	r4, [pc, #180]	; (8003b84 <GSMSigQuality+0x140>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ace:	2207      	movs	r2, #7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ad0:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ad2:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ad4:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ad6:	492f      	ldr	r1, [pc, #188]	; (8003b94 <GSMSigQuality+0x150>)
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	; (8003b8c <GSMSigQuality+0x148>)
 8003ada:	f007 f8bf 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003ade:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <GSMSigQuality+0x14c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ae0:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 8003ae2:	4698      	mov	r8, r3
 8003ae4:	466b      	mov	r3, sp
 8003ae6:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ae8:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 8003aea:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003aec:	230a      	movs	r3, #10
 8003aee:	2202      	movs	r2, #2
 8003af0:	f007 f8b4 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003af4:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003af6:	220d      	movs	r2, #13
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003af8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003afa:	0020      	movs	r0, r4
 8003afc:	4926      	ldr	r1, [pc, #152]	; (8003b98 <GSMSigQuality+0x154>)
 8003afe:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <GSMSigQuality+0x148>)
 8003b00:	f007 f8ac 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003b04:	466b      	mov	r3, sp
 8003b06:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b08:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 8003b0a:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b0c:	0020      	movs	r0, r4
 8003b0e:	230a      	movs	r3, #10
 8003b10:	2202      	movs	r2, #2
 8003b12:	f007 f8a3 	bl	800ac5c <HAL_UART_Transmit>
		gprsok = 0;
 8003b16:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <GSMSigQuality+0x158>)
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b18:	4821      	ldr	r0, [pc, #132]	; (8003ba0 <GSMSigQuality+0x15c>)
 8003b1a:	601d      	str	r5, [r3, #0]
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b1c:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <GSMSigQuality+0x160>)
 8003b1e:	4922      	ldr	r1, [pc, #136]	; (8003ba8 <GSMSigQuality+0x164>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	700d      	strb	r5, [r1, #0]
 8003b24:	621f      	str	r7, [r3, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b26:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003b28:	2201      	movs	r2, #1
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b2a:	621f      	str	r7, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003b2c:	f007 fa64 	bl	800aff8 <HAL_UART_Receive_DMA>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b30:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003b32:	220c      	movs	r2, #12
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b34:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003b36:	0020      	movs	r0, r4
 8003b38:	491c      	ldr	r1, [pc, #112]	; (8003bac <GSMSigQuality+0x168>)
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <GSMSigQuality+0x148>)
 8003b3c:	f007 f88e 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003b40:	466b      	mov	r3, sp
 8003b42:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b44:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 8003b46:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b48:	0020      	movs	r0, r4
 8003b4a:	230a      	movs	r3, #10
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f007 f885 	bl	800ac5c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2102      	movs	r1, #2
 8003b56:	480a      	ldr	r0, [pc, #40]	; (8003b80 <GSMSigQuality+0x13c>)
 8003b58:	f004 fe54 	bl	8008804 <HAL_GPIO_WritePin>
 8003b5c:	e7ae      	b.n	8003abc <GSMSigQuality+0x78>
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	20001f00 	.word	0x20001f00
 8003b64:	0801281c 	.word	0x0801281c
 8003b68:	08012830 	.word	0x08012830
 8003b6c:	08012824 	.word	0x08012824
 8003b70:	200000c8 	.word	0x200000c8
 8003b74:	08012828 	.word	0x08012828
 8003b78:	08012834 	.word	0x08012834
 8003b7c:	40a00000 	.word	0x40a00000
 8003b80:	50000c00 	.word	0x50000c00
 8003b84:	20004ba0 	.word	0x20004ba0
 8003b88:	08012854 	.word	0x08012854
 8003b8c:	00001388 	.word	0x00001388
 8003b90:	00000a0d 	.word	0x00000a0d
 8003b94:	08012860 	.word	0x08012860
 8003b98:	08012868 	.word	0x08012868
 8003b9c:	200042d0 	.word	0x200042d0
 8003ba0:	20004a78 	.word	0x20004a78
 8003ba4:	20004b0c 	.word	0x20004b0c
 8003ba8:	200006c4 	.word	0x200006c4
 8003bac:	08012878 	.word	0x08012878

08003bb0 <GSMIMEI>:

	return (0);
}

char *GSMIMEI()
{
 8003bb0:	b500      	push	{lr}
	SendGSMCode(" AT+QGSN");
 8003bb2:	4809      	ldr	r0, [pc, #36]	; (8003bd8 <GSMIMEI+0x28>)
{
 8003bb4:	b085      	sub	sp, #20
	SendGSMCode(" AT+QGSN");
 8003bb6:	f7ff fc99 	bl	80034ec <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 8003bba:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <GSMIMEI+0x2c>)
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <GSMIMEI+0x30>)
 8003bbe:	9202      	str	r2, [sp, #8]
 8003bc0:	4a08      	ldr	r2, [pc, #32]	; (8003be4 <GSMIMEI+0x34>)
 8003bc2:	4909      	ldr	r1, [pc, #36]	; (8003be8 <GSMIMEI+0x38>)
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	9201      	str	r2, [sp, #4]
 8003bca:	4a08      	ldr	r2, [pc, #32]	; (8003bec <GSMIMEI+0x3c>)
 8003bcc:	9200      	str	r2, [sp, #0]
 8003bce:	2208      	movs	r2, #8
 8003bd0:	f7ff fe20 	bl	8003814 <GetGSMReply>
}
 8003bd4:	b005      	add	sp, #20
 8003bd6:	bd00      	pop	{pc}
 8003bd8:	080128c0 	.word	0x080128c0
 8003bdc:	08012b8c 	.word	0x08012b8c
 8003be0:	08012b80 	.word	0x08012b80
 8003be4:	200000c8 	.word	0x200000c8
 8003be8:	080128cc 	.word	0x080128cc
 8003bec:	080128d4 	.word	0x080128d4

08003bf0 <StartTCPConnection>:
*/
	return 0;
}

void StartTCPConnection(int n)
{
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	46ce      	mov	lr, r9
 8003bf4:	4647      	mov	r7, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003bf6:	220c      	movs	r2, #12
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	4d37      	ldr	r5, [pc, #220]	; (8003cd8 <StartTCPConnection+0xe8>)
 8003bfc:	b087      	sub	sp, #28
 8003bfe:	682b      	ldr	r3, [r5, #0]
 8003c00:	0006      	movs	r6, r0
 8003c02:	621a      	str	r2, [r3, #32]
 8003c04:	4691      	mov	r9, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003c06:	4935      	ldr	r1, [pc, #212]	; (8003cdc <StartTCPConnection+0xec>)
 8003c08:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <StartTCPConnection+0xf0>)
 8003c0a:	320e      	adds	r2, #14
 8003c0c:	0028      	movs	r0, r5
 8003c0e:	f007 f825 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003c12:	466b      	mov	r3, sp
 8003c14:	4f33      	ldr	r7, [pc, #204]	; (8003ce4 <StartTCPConnection+0xf4>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003c16:	a905      	add	r1, sp, #20
 8003c18:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003c1a:	829f      	strh	r7, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003c1c:	0028      	movs	r0, r5
 8003c1e:	230a      	movs	r3, #10
 8003c20:	f007 f81c 	bl	800ac5c <HAL_UART_Transmit>
	Debug_Tx("Conncting Session with IP:");
	Debug_Tx(ip[n]);
 8003c24:	00b3      	lsls	r3, r6, #2
 8003c26:	4698      	mov	r8, r3
 8003c28:	199b      	adds	r3, r3, r6
 8003c2a:	009a      	lsls	r2, r3, #2
 8003c2c:	189b      	adds	r3, r3, r2
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003c2e:	464a      	mov	r2, r9
 8003c30:	4c2d      	ldr	r4, [pc, #180]	; (8003ce8 <StartTCPConnection+0xf8>)
 8003c32:	18e4      	adds	r4, r4, r3
 8003c34:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003c36:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003c38:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003c3a:	f7fc fa65 	bl	8000108 <strlen>
 8003c3e:	0021      	movs	r1, r4
 8003c40:	b282      	uxth	r2, r0
 8003c42:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <StartTCPConnection+0xf0>)
 8003c44:	0028      	movs	r0, r5
 8003c46:	f007 f809 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003c4a:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003c4c:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003c4e:	829f      	strh	r7, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003c50:	0028      	movs	r0, r5
 8003c52:	230a      	movs	r3, #10
 8003c54:	a905      	add	r1, sp, #20
 8003c56:	f007 f801 	bl	800ac5c <HAL_UART_Transmit>
	int ck = 1;
	if (strlen(ip[n]) > 4)
 8003c5a:	0020      	movs	r0, r4
 8003c5c:	f7fc fa54 	bl	8000108 <strlen>
 8003c60:	2804      	cmp	r0, #4
 8003c62:	d804      	bhi.n	8003c6e <StartTCPConnection+0x7e>
		}
		else {tcp_stat[n]=0;}
	}


}
 8003c64:	b007      	add	sp, #28
 8003c66:	bcc0      	pop	{r6, r7}
 8003c68:	46b9      	mov	r9, r7
 8003c6a:	46b0      	mov	r8, r6
 8003c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(GSMDataC, 0, 100);
 8003c6e:	4d1f      	ldr	r5, [pc, #124]	; (8003cec <StartTCPConnection+0xfc>)
 8003c70:	2264      	movs	r2, #100	; 0x64
 8003c72:	2100      	movs	r1, #0
 8003c74:	0028      	movs	r0, r5
 8003c76:	f00a fec5 	bl	800ea04 <memset>
		sprintf(GSMDataC, (char *)" AT+QIOPEN=%d,\"TCP\",\"",n);
 8003c7a:	0032      	movs	r2, r6
 8003c7c:	491c      	ldr	r1, [pc, #112]	; (8003cf0 <StartTCPConnection+0x100>)
 8003c7e:	0028      	movs	r0, r5
 8003c80:	f00a fe54 	bl	800e92c <siprintf>
		strcat(GSMDataC,ip[n]);
 8003c84:	0021      	movs	r1, r4
 8003c86:	0028      	movs	r0, r5
 8003c88:	f00a fec4 	bl	800ea14 <strcat>
		tcp_stat[n]=0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4642      	mov	r2, r8
 8003c90:	4e18      	ldr	r6, [pc, #96]	; (8003cf4 <StartTCPConnection+0x104>)
		gprsok = 0;
 8003c92:	4c19      	ldr	r4, [pc, #100]	; (8003cf8 <StartTCPConnection+0x108>)
		tcp_stat[n]=0;
 8003c94:	5193      	str	r3, [r2, r6]
			SendGSMCode(GSMDataC);
 8003c96:	0028      	movs	r0, r5
		gprsok = 0;
 8003c98:	6023      	str	r3, [r4, #0]
			SendGSMCode(GSMDataC);
 8003c9a:	f7ff fc27 	bl	80034ec <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN 0 TCP Connection open ", gpsto_net, "CONNECT OK"));
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <StartTCPConnection+0x10c>)
 8003ca0:	4917      	ldr	r1, [pc, #92]	; (8003d00 <StartTCPConnection+0x110>)
 8003ca2:	9302      	str	r3, [sp, #8]
 8003ca4:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <StartTCPConnection+0x114>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2000      	movs	r0, #0
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <StartTCPConnection+0x118>)
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	000b      	movs	r3, r1
 8003cb4:	f7ff fdae 	bl	8003814 <GetGSMReply>
 8003cb8:	f7fc fa26 	bl	8000108 <strlen>
 8003cbc:	6020      	str	r0, [r4, #0]
		if(gprsok>0){
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d102      	bne.n	8003cc8 <StartTCPConnection+0xd8>
		else {tcp_stat[n]=0;}
 8003cc2:	4643      	mov	r3, r8
 8003cc4:	5198      	str	r0, [r3, r6]
}
 8003cc6:	e7cd      	b.n	8003c64 <StartTCPConnection+0x74>
			tcp_stat[n]=1;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	4642      	mov	r2, r8
			HAL_Delay(500);
 8003ccc:	20fa      	movs	r0, #250	; 0xfa
			tcp_stat[n]=1;
 8003cce:	5193      	str	r3, [r2, r6]
			HAL_Delay(500);
 8003cd0:	0040      	lsls	r0, r0, #1
 8003cd2:	f003 fecf 	bl	8007a74 <HAL_Delay>
 8003cd6:	e7c5      	b.n	8003c64 <StartTCPConnection+0x74>
 8003cd8:	20004ba0 	.word	0x20004ba0
 8003cdc:	08012b50 	.word	0x08012b50
 8003ce0:	00001388 	.word	0x00001388
 8003ce4:	00000a0d 	.word	0x00000a0d
 8003ce8:	200000d0 	.word	0x200000d0
 8003cec:	2000185c 	.word	0x2000185c
 8003cf0:	08012b6c 	.word	0x08012b6c
 8003cf4:	20004c8c 	.word	0x20004c8c
 8003cf8:	200042d0 	.word	0x200042d0
 8003cfc:	08012b84 	.word	0x08012b84
 8003d00:	08012ae4 	.word	0x08012ae4
 8003d04:	200000cc 	.word	0x200000cc
 8003d08:	08012b90 	.word	0x08012b90

08003d0c <StopTCPConnection>:
void StopTCPConnection(int n)
{
	int ck = 1;
	gprsok = 0;
 8003d0c:	2300      	movs	r3, #0
{
 8003d0e:	b570      	push	{r4, r5, r6, lr}
	if (strlen(ip[n]) > 4)
 8003d10:	0085      	lsls	r5, r0, #2
	gprsok = 0;
 8003d12:	4e16      	ldr	r6, [pc, #88]	; (8003d6c <StopTCPConnection+0x60>)
	if (strlen(ip[n]) > 4)
 8003d14:	182a      	adds	r2, r5, r0
	gprsok = 0;
 8003d16:	6033      	str	r3, [r6, #0]
	if (strlen(ip[n]) > 4)
 8003d18:	0091      	lsls	r1, r2, #2
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <StopTCPConnection+0x64>)
 8003d1c:	1852      	adds	r2, r2, r1
{
 8003d1e:	0004      	movs	r4, r0
 8003d20:	b084      	sub	sp, #16
	if (strlen(ip[n]) > 4)
 8003d22:	1898      	adds	r0, r3, r2
 8003d24:	f7fc f9f0 	bl	8000108 <strlen>
 8003d28:	2804      	cmp	r0, #4
 8003d2a:	d919      	bls.n	8003d60 <StopTCPConnection+0x54>
	{
		while ((ck > 0) && (gprsok < 1))
		{
			ck = ck - 1;
			sprintf(GSMDataC, (char *)" AT+QICLOSE=%d",n);
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <StopTCPConnection+0x68>)
 8003d2e:	0022      	movs	r2, r4
 8003d30:	001c      	movs	r4, r3
 8003d32:	0018      	movs	r0, r3
 8003d34:	4910      	ldr	r1, [pc, #64]	; (8003d78 <StopTCPConnection+0x6c>)
 8003d36:	f00a fdf9 	bl	800e92c <siprintf>
			SendGSMCode(GSMDataC);
 8003d3a:	0020      	movs	r0, r4
 8003d3c:	f7ff fbd6 	bl	80034ec <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <StopTCPConnection+0x70>)
 8003d42:	490f      	ldr	r1, [pc, #60]	; (8003d80 <StopTCPConnection+0x74>)
 8003d44:	9302      	str	r3, [sp, #8]
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <StopTCPConnection+0x78>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2005      	movs	r0, #5
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <StopTCPConnection+0x7c>)
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	000b      	movs	r3, r1
 8003d56:	f7ff fd5d 	bl	8003814 <GetGSMReply>
 8003d5a:	f7fc f9d5 	bl	8000108 <strlen>
 8003d5e:	6030      	str	r0, [r6, #0]

		}
	}
	tcp_stat[n]=0;
 8003d60:	2200      	movs	r2, #0
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <StopTCPConnection+0x80>)
 8003d64:	515a      	str	r2, [r3, r5]
}
 8003d66:	b004      	add	sp, #16
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	200042d0 	.word	0x200042d0
 8003d70:	200000d0 	.word	0x200000d0
 8003d74:	2000185c 	.word	0x2000185c
 8003d78:	08012bb8 	.word	0x08012bb8
 8003d7c:	08012bc8 	.word	0x08012bc8
 8003d80:	08012ae4 	.word	0x08012ae4
 8003d84:	200000c8 	.word	0x200000c8
 8003d88:	08012bd4 	.word	0x08012bd4
 8003d8c:	20004c8c 	.word	0x20004c8c

08003d90 <SendTCPdata>:
void SendTCPdata(char *data,int n)
{
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	46de      	mov	lr, fp
 8003d94:	4657      	mov	r7, sl
 8003d96:	464e      	mov	r6, r9
 8003d98:	4645      	mov	r5, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	b5e0      	push	{r5, r6, r7, lr}
 8003d9e:	4c97      	ldr	r4, [pc, #604]	; (8003ffc <SendTCPdata+0x26c>)
 8003da0:	b083      	sub	sp, #12
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	0007      	movs	r7, r0
 8003da6:	000e      	movs	r6, r1
 8003da8:	621a      	str	r2, [r3, #32]
 8003daa:	4691      	mov	r9, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003dac:	4994      	ldr	r1, [pc, #592]	; (8004000 <SendTCPdata+0x270>)
 8003dae:	4b95      	ldr	r3, [pc, #596]	; (8004004 <SendTCPdata+0x274>)
 8003db0:	3a01      	subs	r2, #1
 8003db2:	0020      	movs	r0, r4
 8003db4:	f006 ff52 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003db8:	4b93      	ldr	r3, [pc, #588]	; (8004008 <SendTCPdata+0x278>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003dba:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003dbc:	4698      	mov	r8, r3
 8003dbe:	466b      	mov	r3, sp
 8003dc0:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003dc2:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 8003dc4:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f006 ff47 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003dce:	464a      	mov	r2, r9
 8003dd0:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003dd2:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003dd4:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003dd6:	f7fc f997 	bl	8000108 <strlen>
 8003dda:	0039      	movs	r1, r7
 8003ddc:	b282      	uxth	r2, r0
 8003dde:	4b89      	ldr	r3, [pc, #548]	; (8004004 <SendTCPdata+0x274>)
 8003de0:	0020      	movs	r0, r4
 8003de2:	f006 ff3b 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003de6:	466b      	mov	r3, sp
 8003de8:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003dea:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003dec:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003dee:	0020      	movs	r0, r4
 8003df0:	230a      	movs	r3, #10
 8003df2:	2202      	movs	r2, #2
 8003df4:	f006 ff32 	bl	800ac5c <HAL_UART_Transmit>
	Debug_Tx("DATATOSEND:");Debug_Tx(data);
	HAL_Delay(3000);
 8003df8:	4884      	ldr	r0, [pc, #528]	; (800400c <SendTCPdata+0x27c>)
 8003dfa:	f003 fe3b 	bl	8007a74 <HAL_Delay>

	int ck = 1;
	if (strlen(ip[n]) > 4)
 8003dfe:	00b3      	lsls	r3, r6, #2
 8003e00:	469a      	mov	sl, r3
 8003e02:	199b      	adds	r3, r3, r6
 8003e04:	4d82      	ldr	r5, [pc, #520]	; (8004010 <SendTCPdata+0x280>)
 8003e06:	009a      	lsls	r2, r3, #2
 8003e08:	189b      	adds	r3, r3, r2
 8003e0a:	18ed      	adds	r5, r5, r3
 8003e0c:	0028      	movs	r0, r5
 8003e0e:	f7fc f97b 	bl	8000108 <strlen>
 8003e12:	2804      	cmp	r0, #4
 8003e14:	d93e      	bls.n	8003e94 <SendTCPdata+0x104>
	{
		if (tcp_stat[n] <1)	{ StartTCPConnection(n);}
 8003e16:	4652      	mov	r2, sl
 8003e18:	4b7e      	ldr	r3, [pc, #504]	; (8004014 <SendTCPdata+0x284>)
 8003e1a:	469b      	mov	fp, r3
 8003e1c:	58d3      	ldr	r3, [r2, r3]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dd3f      	ble.n	8003ea2 <SendTCPdata+0x112>
		if (tcp_stat[n] > 0)
		{
			ck = 1;
			gprsok = 0;
 8003e22:	4b7d      	ldr	r3, [pc, #500]	; (8004018 <SendTCPdata+0x288>)
			//while ((ck > 0) && (gprsok < 1))
			{
				ck = ck - 1;

				sprintf(GSMDataC, (char *)" AT+QISEND=%d",n);
 8003e24:	497d      	ldr	r1, [pc, #500]	; (800401c <SendTCPdata+0x28c>)
			gprsok = 0;
 8003e26:	4698      	mov	r8, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4699      	mov	r9, r3
 8003e2c:	4643      	mov	r3, r8
 8003e2e:	464a      	mov	r2, r9
 8003e30:	601a      	str	r2, [r3, #0]
				sprintf(GSMDataC, (char *)" AT+QISEND=%d",n);
 8003e32:	4b7b      	ldr	r3, [pc, #492]	; (8004020 <SendTCPdata+0x290>)
 8003e34:	0032      	movs	r2, r6
 8003e36:	469a      	mov	sl, r3
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f00a fd77 	bl	800e92c <siprintf>
				SendGSMCode(GSMDataC);
 8003e3e:	4650      	mov	r0, sl
 8003e40:	f7ff fb54 	bl	80034ec <SendGSMCode>
				gprsok = waitForResponse(">",3000);
 8003e44:	4877      	ldr	r0, [pc, #476]	; (8004024 <SendTCPdata+0x294>)
 8003e46:	4971      	ldr	r1, [pc, #452]	; (800400c <SendTCPdata+0x27c>)
 8003e48:	f7ff fc92 	bl	8003770 <waitForResponse>
 8003e4c:	4643      	mov	r3, r8
 8003e4e:	6018      	str	r0, [r3, #0]
				//gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data input1", 4000, ">"));
			}
			if (gprsok > 0)
 8003e50:	2800      	cmp	r0, #0
 8003e52:	dc00      	bgt.n	8003e56 <SendTCPdata+0xc6>
 8003e54:	e082      	b.n	8003f5c <SendTCPdata+0x1cc>
			{
				ck = 1;
				gprsok = 0;
 8003e56:	464a      	mov	r2, r9
				//while ((ck > 0) && (gprsok < 1))
				{
					ck = ck - 1;
					SendGSMData(data); // Debug_Tx(GSMData);
 8003e58:	0038      	movs	r0, r7
				gprsok = 0;
 8003e5a:	601a      	str	r2, [r3, #0]
					SendGSMData(data); // Debug_Tx(GSMData);
 8003e5c:	f7ff fc16 	bl	800368c <SendGSMData>
					gprsok = waitForResponse("SEND OK",3000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 8003e60:	4871      	ldr	r0, [pc, #452]	; (8004028 <SendTCPdata+0x298>)
 8003e62:	496a      	ldr	r1, [pc, #424]	; (800400c <SendTCPdata+0x27c>)
 8003e64:	f7ff fc84 	bl	8003770 <waitForResponse>
 8003e68:	4643      	mov	r3, r8
 8003e6a:	6018      	str	r0, [r3, #0]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e6c:	6823      	ldr	r3, [r4, #0]

								}
				if (gprsok<1){
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	dd4d      	ble.n	8003f0e <SendTCPdata+0x17e>
 8003e72:	220c      	movs	r2, #12
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e74:	496d      	ldr	r1, [pc, #436]	; (800402c <SendTCPdata+0x29c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e76:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e78:	0020      	movs	r0, r4
 8003e7a:	4b62      	ldr	r3, [pc, #392]	; (8004004 <SendTCPdata+0x274>)
 8003e7c:	3a04      	subs	r2, #4
 8003e7e:	f006 feed 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003e82:	466a      	mov	r2, sp
 8003e84:	4b60      	ldr	r3, [pc, #384]	; (8004008 <SendTCPdata+0x278>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e86:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 8003e88:	8093      	strh	r3, [r2, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e8a:	a901      	add	r1, sp, #4
 8003e8c:	230a      	movs	r3, #10
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f006 fee4 	bl	800ac5c <HAL_UART_Transmit>
			Debug_Tx(ip[n]);
			ResetTCP(n);
		}
	}

}
 8003e94:	b003      	add	sp, #12
 8003e96:	bcf0      	pop	{r4, r5, r6, r7}
 8003e98:	46bb      	mov	fp, r7
 8003e9a:	46b2      	mov	sl, r6
 8003e9c:	46a9      	mov	r9, r5
 8003e9e:	46a0      	mov	r8, r4
 8003ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tcp_stat[n] <1)	{ StartTCPConnection(n);}
 8003ea2:	0030      	movs	r0, r6
 8003ea4:	f7ff fea4 	bl	8003bf0 <StartTCPConnection>
		if (tcp_stat[n] > 0)
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	4652      	mov	r2, sl
 8003eac:	58d3      	ldr	r3, [r2, r3]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dcb7      	bgt.n	8003e22 <SendTCPdata+0x92>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003eb2:	464a      	mov	r2, r9
 8003eb4:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003eb6:	495e      	ldr	r1, [pc, #376]	; (8004030 <SendTCPdata+0x2a0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003eb8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003eba:	0020      	movs	r0, r4
 8003ebc:	2230      	movs	r2, #48	; 0x30
 8003ebe:	4b51      	ldr	r3, [pc, #324]	; (8004004 <SendTCPdata+0x274>)
 8003ec0:	f006 fecc 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003ec4:	466b      	mov	r3, sp
 8003ec6:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ec8:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003eca:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ecc:	0020      	movs	r0, r4
 8003ece:	230a      	movs	r3, #10
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f006 fec3 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ed6:	464a      	mov	r2, r9
 8003ed8:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003eda:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003edc:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ede:	f7fc f913 	bl	8000108 <strlen>
 8003ee2:	4b48      	ldr	r3, [pc, #288]	; (8004004 <SendTCPdata+0x274>)
 8003ee4:	b282      	uxth	r2, r0
 8003ee6:	0029      	movs	r1, r5
 8003ee8:	0020      	movs	r0, r4
 8003eea:	f006 feb7 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003eee:	466b      	mov	r3, sp
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ef4:	230a      	movs	r3, #10
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	a901      	add	r1, sp, #4
 8003efa:	0020      	movs	r0, r4
 8003efc:	f006 feae 	bl	800ac5c <HAL_UART_Transmit>
}

void ResetTCP(int n)
{
	//EndTransfer();
	StopTCPConnection(n);
 8003f00:	0030      	movs	r0, r6
 8003f02:	f7ff ff03 	bl	8003d0c <StopTCPConnection>
	StartTCPConnection(n);
 8003f06:	0030      	movs	r0, r6
 8003f08:	f7ff fe72 	bl	8003bf0 <StartTCPConnection>
}
 8003f0c:	e7c2      	b.n	8003e94 <SendTCPdata+0x104>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f0e:	270c      	movs	r7, #12
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f10:	2233      	movs	r2, #51	; 0x33
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f12:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f14:	0020      	movs	r0, r4
 8003f16:	4947      	ldr	r1, [pc, #284]	; (8004034 <SendTCPdata+0x2a4>)
 8003f18:	4b3a      	ldr	r3, [pc, #232]	; (8004004 <SendTCPdata+0x274>)
 8003f1a:	f006 fe9f 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f1e:	466b      	mov	r3, sp
 8003f20:	4e39      	ldr	r6, [pc, #228]	; (8004008 <SendTCPdata+0x278>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f22:	a901      	add	r1, sp, #4
 8003f24:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003f26:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f28:	0020      	movs	r0, r4
 8003f2a:	230a      	movs	r3, #10
 8003f2c:	f006 fe96 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f30:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f32:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f34:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f36:	f7fc f8e7 	bl	8000108 <strlen>
 8003f3a:	0029      	movs	r1, r5
 8003f3c:	b282      	uxth	r2, r0
 8003f3e:	4b31      	ldr	r3, [pc, #196]	; (8004004 <SendTCPdata+0x274>)
 8003f40:	0020      	movs	r0, r4
 8003f42:	f006 fe8b 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f46:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f48:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003f4a:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f4c:	a901      	add	r1, sp, #4
 8003f4e:	230a      	movs	r3, #10
 8003f50:	0020      	movs	r0, r4
 8003f52:	f006 fe83 	bl	800ac5c <HAL_UART_Transmit>
					EndTransfer();
 8003f56:	f7ff fbd9 	bl	800370c <EndTransfer>
 8003f5a:	e79b      	b.n	8003e94 <SendTCPdata+0x104>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f5c:	220c      	movs	r2, #12
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	4690      	mov	r8, r2
 8003f62:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f64:	4934      	ldr	r1, [pc, #208]	; (8004038 <SendTCPdata+0x2a8>)
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <SendTCPdata+0x274>)
 8003f68:	3218      	adds	r2, #24
 8003f6a:	0020      	movs	r0, r4
 8003f6c:	f006 fe76 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f70:	466b      	mov	r3, sp
 8003f72:	4f25      	ldr	r7, [pc, #148]	; (8004008 <SendTCPdata+0x278>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f74:	a901      	add	r1, sp, #4
 8003f76:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003f78:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	230a      	movs	r3, #10
 8003f7e:	f006 fe6d 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f82:	4642      	mov	r2, r8
 8003f84:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f86:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f88:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f8a:	f7fc f8bd 	bl	8000108 <strlen>
 8003f8e:	0029      	movs	r1, r5
 8003f90:	b282      	uxth	r2, r0
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <SendTCPdata+0x274>)
 8003f94:	0020      	movs	r0, r4
 8003f96:	f006 fe61 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f9a:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003fa0:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fa2:	0020      	movs	r0, r4
 8003fa4:	230a      	movs	r3, #10
 8003fa6:	f006 fe59 	bl	800ac5c <HAL_UART_Transmit>
				HAL_Delay(5000);
 8003faa:	4816      	ldr	r0, [pc, #88]	; (8004004 <SendTCPdata+0x274>)
 8003fac:	f003 fd62 	bl	8007a74 <HAL_Delay>
				EndTransfer();
 8003fb0:	f7ff fbac 	bl	800370c <EndTransfer>
				HAL_Delay(10000);
 8003fb4:	4821      	ldr	r0, [pc, #132]	; (800403c <SendTCPdata+0x2ac>)
 8003fb6:	f003 fd5d 	bl	8007a74 <HAL_Delay>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fba:	4642      	mov	r2, r8
 8003fbc:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fbe:	4920      	ldr	r1, [pc, #128]	; (8004040 <SendTCPdata+0x2b0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fc0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fc2:	0020      	movs	r0, r4
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <SendTCPdata+0x274>)
 8003fc6:	320c      	adds	r2, #12
 8003fc8:	f006 fe48 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003fcc:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fce:	a901      	add	r1, sp, #4
 8003fd0:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003fd2:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	230a      	movs	r3, #10
 8003fd8:	f006 fe40 	bl	800ac5c <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fdc:	4642      	mov	r2, r8
 8003fde:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fe0:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fe2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fe4:	f7fc f890 	bl	8000108 <strlen>
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <SendTCPdata+0x274>)
 8003fea:	b282      	uxth	r2, r0
 8003fec:	0029      	movs	r1, r5
 8003fee:	0020      	movs	r0, r4
 8003ff0:	f006 fe34 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003ff4:	466b      	mov	r3, sp
 8003ff6:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ff8:	e77c      	b.n	8003ef4 <SendTCPdata+0x164>
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	20004ba0 	.word	0x20004ba0
 8004000:	08012bf8 	.word	0x08012bf8
 8004004:	00001388 	.word	0x00001388
 8004008:	00000a0d 	.word	0x00000a0d
 800400c:	00000bb8 	.word	0x00000bb8
 8004010:	200000d0 	.word	0x200000d0
 8004014:	20004c8c 	.word	0x20004c8c
 8004018:	200042d0 	.word	0x200042d0
 800401c:	08012c04 	.word	0x08012c04
 8004020:	2000185c 	.word	0x2000185c
 8004024:	08012c14 	.word	0x08012c14
 8004028:	08012c18 	.word	0x08012c18
 800402c:	08012c54 	.word	0x08012c54
 8004030:	08012ca4 	.word	0x08012ca4
 8004034:	08012c20 	.word	0x08012c20
 8004038:	08012c60 	.word	0x08012c60
 800403c:	00002710 	.word	0x00002710
 8004040:	08012c88 	.word	0x08012c88

08004044 <GSMCellInfo>:
{
 8004044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004046:	46de      	mov	lr, fp
 8004048:	4657      	mov	r7, sl
 800404a:	464e      	mov	r6, r9
 800404c:	4645      	mov	r5, r8
	memset(SS0, 0, 4);
 800404e:	2300      	movs	r3, #0
{
 8004050:	b5e0      	push	{r5, r6, r7, lr}
	memset(SS0, 0, 4);
 8004052:	4cc2      	ldr	r4, [pc, #776]	; (800435c <GSMCellInfo+0x318>)
	memset(SS1, 0, 4);
 8004054:	4dc2      	ldr	r5, [pc, #776]	; (8004360 <GSMCellInfo+0x31c>)
	memset(SS2, 0, 4);
 8004056:	4ec3      	ldr	r6, [pc, #780]	; (8004364 <GSMCellInfo+0x320>)
	memset(SS3, 0, 4);
 8004058:	4fc3      	ldr	r7, [pc, #780]	; (8004368 <GSMCellInfo+0x324>)
	memset(SS4, 0, 4);
 800405a:	4ac4      	ldr	r2, [pc, #784]	; (800436c <GSMCellInfo+0x328>)
	memset(SS0, 0, 4);
 800405c:	8063      	strh	r3, [r4, #2]
	memset(SS1, 0, 4);
 800405e:	806b      	strh	r3, [r5, #2]
	memset(SS4, 0, 4);
 8004060:	8053      	strh	r3, [r2, #2]
	memset(SS2, 0, 4);
 8004062:	8073      	strh	r3, [r6, #2]
	memset(SS3, 0, 4);
 8004064:	807b      	strh	r3, [r7, #2]
	memset(MCC0, 0, 5);
 8004066:	4bc2      	ldr	r3, [pc, #776]	; (8004370 <GSMCellInfo+0x32c>)
{
 8004068:	b0a1      	sub	sp, #132	; 0x84
	memset(MCC0, 0, 5);
 800406a:	2100      	movs	r1, #0
	memset(SS4, 0, 4);
 800406c:	9218      	str	r2, [sp, #96]	; 0x60
	memset(MCC0, 0, 5);
 800406e:	1c98      	adds	r0, r3, #2
 8004070:	2203      	movs	r2, #3
 8004072:	4699      	mov	r9, r3
	memset(SS0, 0, 4);
 8004074:	941d      	str	r4, [sp, #116]	; 0x74
	memset(SS1, 0, 4);
 8004076:	951a      	str	r5, [sp, #104]	; 0x68
	memset(SS2, 0, 4);
 8004078:	961b      	str	r6, [sp, #108]	; 0x6c
	memset(SS3, 0, 4);
 800407a:	971c      	str	r7, [sp, #112]	; 0x70
	memset(MCC0, 0, 5);
 800407c:	f00a fcc2 	bl	800ea04 <memset>
	memset(MNC0, 0, 5);
 8004080:	4bbc      	ldr	r3, [pc, #752]	; (8004374 <GSMCellInfo+0x330>)
 8004082:	2203      	movs	r2, #3
 8004084:	2100      	movs	r1, #0
 8004086:	1c98      	adds	r0, r3, #2
 8004088:	469b      	mov	fp, r3
 800408a:	f00a fcbb 	bl	800ea04 <memset>
	memset(LAC0, 0, 6);
 800408e:	4bba      	ldr	r3, [pc, #744]	; (8004378 <GSMCellInfo+0x334>)
 8004090:	2204      	movs	r2, #4
 8004092:	1c98      	adds	r0, r3, #2
 8004094:	2100      	movs	r1, #0
 8004096:	9310      	str	r3, [sp, #64]	; 0x40
 8004098:	f00a fcb4 	bl	800ea04 <memset>
	memset(LAC1, 0, 6);
 800409c:	48b7      	ldr	r0, [pc, #732]	; (800437c <GSMCellInfo+0x338>)
 800409e:	2204      	movs	r2, #4
 80040a0:	2100      	movs	r1, #0
 80040a2:	9019      	str	r0, [sp, #100]	; 0x64
 80040a4:	3002      	adds	r0, #2
 80040a6:	f00a fcad 	bl	800ea04 <memset>
	memset(LAC2, 0, 6);
 80040aa:	49b5      	ldr	r1, [pc, #724]	; (8004380 <GSMCellInfo+0x33c>)
 80040ac:	2204      	movs	r2, #4
 80040ae:	9111      	str	r1, [sp, #68]	; 0x44
 80040b0:	1c88      	adds	r0, r1, #2
 80040b2:	2100      	movs	r1, #0
 80040b4:	f00a fca6 	bl	800ea04 <memset>
	memset(LAC3, 0, 6);
 80040b8:	4bb2      	ldr	r3, [pc, #712]	; (8004384 <GSMCellInfo+0x340>)
 80040ba:	2204      	movs	r2, #4
 80040bc:	1c98      	adds	r0, r3, #2
 80040be:	2100      	movs	r1, #0
 80040c0:	9312      	str	r3, [sp, #72]	; 0x48
 80040c2:	f00a fc9f 	bl	800ea04 <memset>
	memset(LAC4, 0, 6);
 80040c6:	4ab0      	ldr	r2, [pc, #704]	; (8004388 <GSMCellInfo+0x344>)
 80040c8:	2100      	movs	r1, #0
 80040ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80040cc:	1c90      	adds	r0, r2, #2
 80040ce:	2204      	movs	r2, #4
 80040d0:	f00a fc98 	bl	800ea04 <memset>
	memset(CID4, 0, 6);
 80040d4:	48ad      	ldr	r0, [pc, #692]	; (800438c <GSMCellInfo+0x348>)
 80040d6:	2204      	movs	r2, #4
 80040d8:	2100      	movs	r1, #0
 80040da:	9014      	str	r0, [sp, #80]	; 0x50
 80040dc:	3002      	adds	r0, #2
 80040de:	f00a fc91 	bl	800ea04 <memset>
	memset(CID3, 0, 6);
 80040e2:	4bab      	ldr	r3, [pc, #684]	; (8004390 <GSMCellInfo+0x34c>)
 80040e4:	2204      	movs	r2, #4
 80040e6:	1c98      	adds	r0, r3, #2
 80040e8:	2100      	movs	r1, #0
 80040ea:	9315      	str	r3, [sp, #84]	; 0x54
 80040ec:	f00a fc8a 	bl	800ea04 <memset>
	memset(CID2, 0, 6);
 80040f0:	49a8      	ldr	r1, [pc, #672]	; (8004394 <GSMCellInfo+0x350>)
 80040f2:	2204      	movs	r2, #4
 80040f4:	9116      	str	r1, [sp, #88]	; 0x58
 80040f6:	1c88      	adds	r0, r1, #2
 80040f8:	2100      	movs	r1, #0
 80040fa:	f00a fc83 	bl	800ea04 <memset>
	memset(CID1, 0, 6);
 80040fe:	4aa6      	ldr	r2, [pc, #664]	; (8004398 <GSMCellInfo+0x354>)
 8004100:	2100      	movs	r1, #0
 8004102:	9217      	str	r2, [sp, #92]	; 0x5c
 8004104:	1c90      	adds	r0, r2, #2
 8004106:	2204      	movs	r2, #4
 8004108:	f00a fc7c 	bl	800ea04 <memset>
	memset(CID0, 0, 6);
 800410c:	48a3      	ldr	r0, [pc, #652]	; (800439c <GSMCellInfo+0x358>)
 800410e:	2204      	movs	r2, #4
 8004110:	4680      	mov	r8, r0
 8004112:	2100      	movs	r1, #0
 8004114:	3002      	adds	r0, #2
 8004116:	f00a fc75 	bl	800ea04 <memset>
	strcpy(MCC0, "x\0");
 800411a:	2378      	movs	r3, #120	; 0x78
 800411c:	4648      	mov	r0, r9
	strcpy(LAC0, "x\0");
 800411e:	9910      	ldr	r1, [sp, #64]	; 0x40
	strcpy(MCC0, "x\0");
 8004120:	8003      	strh	r3, [r0, #0]
	strcpy(LAC0, "x\0");
 8004122:	800b      	strh	r3, [r1, #0]
	strcpy(MNC0, "x\0");
 8004124:	4658      	mov	r0, fp
	strcpy(CID0, "x\0");
 8004126:	4641      	mov	r1, r8
	strcpy(SS4, "x\0");
 8004128:	9a18      	ldr	r2, [sp, #96]	; 0x60
	strcpy(MNC0, "x\0");
 800412a:	8003      	strh	r3, [r0, #0]
	strcpy(SS4, "x\0");
 800412c:	8013      	strh	r3, [r2, #0]
	strcpy(LAC4, "x\0");
 800412e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	strcpy(CID0, "x\0");
 8004130:	800b      	strh	r3, [r1, #0]
	strcpy(LAC4, "x\0");
 8004132:	8013      	strh	r3, [r2, #0]
	memset(GSMData, 0, 800);
 8004134:	22c8      	movs	r2, #200	; 0xc8
	strcpy(SS0, "x\0");
 8004136:	8023      	strh	r3, [r4, #0]
	strcpy(LAC1, "x\0");
 8004138:	9819      	ldr	r0, [sp, #100]	; 0x64
	strcpy(CID1, "x\0");
 800413a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	strcpy(LAC2, "x\0");
 800413c:	9911      	ldr	r1, [sp, #68]	; 0x44
	strcpy(SS1, "x\0");
 800413e:	802b      	strh	r3, [r5, #0]
	strcpy(CID1, "x\0");
 8004140:	8023      	strh	r3, [r4, #0]
	strcpy(LAC1, "x\0");
 8004142:	8003      	strh	r3, [r0, #0]
	strcpy(LAC2, "x\0");
 8004144:	800b      	strh	r3, [r1, #0]
	strcpy(CID2, "x\0");
 8004146:	9d16      	ldr	r5, [sp, #88]	; 0x58
	strcpy(LAC3, "x\0");
 8004148:	9912      	ldr	r1, [sp, #72]	; 0x48
	strcpy(CID4, "x\0");
 800414a:	9814      	ldr	r0, [sp, #80]	; 0x50
	strcpy(CID3, "x\0");
 800414c:	9c15      	ldr	r4, [sp, #84]	; 0x54
	strcpy(CID2, "x\0");
 800414e:	802b      	strh	r3, [r5, #0]
	strcpy(LAC3, "x\0");
 8004150:	800b      	strh	r3, [r1, #0]
	strcpy(CID4, "x\0");
 8004152:	8003      	strh	r3, [r0, #0]
	strcpy(SS2, "x\0");
 8004154:	8033      	strh	r3, [r6, #0]
	strcpy(SS3, "x\0");
 8004156:	803b      	strh	r3, [r7, #0]
	strcpy(CID3, "x\0");
 8004158:	8023      	strh	r3, [r4, #0]
	memset(GSMData, 0, 800);
 800415a:	4b91      	ldr	r3, [pc, #580]	; (80043a0 <GSMCellInfo+0x35c>)
 800415c:	2100      	movs	r1, #0
 800415e:	0018      	movs	r0, r3
 8004160:	0092      	lsls	r2, r2, #2
 8004162:	469a      	mov	sl, r3
 8004164:	f00a fc4e 	bl	800ea04 <memset>
	SendGSMCodeL(" AT+QENG?");
 8004168:	488e      	ldr	r0, [pc, #568]	; (80043a4 <GSMCellInfo+0x360>)
 800416a:	f7ff fa27 	bl	80035bc <SendGSMCodeL>
	HAL_Delay(500);
 800416e:	20fa      	movs	r0, #250	; 0xfa
 8004170:	0040      	lsls	r0, r0, #1
 8004172:	f003 fc7f 	bl	8007a74 <HAL_Delay>
	char *m0 = strstr(GSMData, "+QENG: 0");
 8004176:	4650      	mov	r0, sl
 8004178:	498b      	ldr	r1, [pc, #556]	; (80043a8 <GSMCellInfo+0x364>)
 800417a:	f00a fcf3 	bl	800eb64 <strstr>
 800417e:	0005      	movs	r5, r0
 8004180:	901e      	str	r0, [sp, #120]	; 0x78
	if ((m0 != NULL) & (strlen(m0) > 1))
 8004182:	f7fb ffc1 	bl	8000108 <strlen>
 8004186:	2d00      	cmp	r5, #0
 8004188:	d100      	bne.n	800418c <GSMCellInfo+0x148>
 800418a:	e0d2      	b.n	8004332 <GSMCellInfo+0x2ee>
 800418c:	2801      	cmp	r0, #1
 800418e:	d800      	bhi.n	8004192 <GSMCellInfo+0x14e>
 8004190:	e0cf      	b.n	8004332 <GSMCellInfo+0x2ee>
 8004192:	4e86      	ldr	r6, [pc, #536]	; (80043ac <GSMCellInfo+0x368>)
 8004194:	0028      	movs	r0, r5
		while ((part = strtok_r(m0, ",", &m0)))
 8004196:	0031      	movs	r1, r6
 8004198:	aa1e      	add	r2, sp, #120	; 0x78
 800419a:	4f85      	ldr	r7, [pc, #532]	; (80043b0 <GSMCellInfo+0x36c>)
 800419c:	f00a fcdd 	bl	800eb5a <strtok_r>
		int k = 0;
 80041a0:	2400      	movs	r4, #0
 80041a2:	4645      	mov	r5, r8
		while ((part = strtok_r(m0, ",", &m0)))
 80041a4:	1e01      	subs	r1, r0, #0
 80041a6:	d00f      	beq.n	80041c8 <GSMCellInfo+0x184>
			if (k == 1)
 80041a8:	2c07      	cmp	r4, #7
 80041aa:	d805      	bhi.n	80041b8 <GSMCellInfo+0x174>
 80041ac:	00a3      	lsls	r3, r4, #2
 80041ae:	58fb      	ldr	r3, [r7, r3]
 80041b0:	469f      	mov	pc, r3
				strcpy(MCC0, part);
 80041b2:	4648      	mov	r0, r9
 80041b4:	f00a fde5 	bl	800ed82 <strcpy>
		while ((part = strtok_r(m0, ",", &m0)))
 80041b8:	981e      	ldr	r0, [sp, #120]	; 0x78
			k++;
 80041ba:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80041bc:	0031      	movs	r1, r6
 80041be:	aa1e      	add	r2, sp, #120	; 0x78
 80041c0:	f00a fccb 	bl	800eb5a <strtok_r>
 80041c4:	1e01      	subs	r1, r0, #0
 80041c6:	d1ef      	bne.n	80041a8 <GSMCellInfo+0x164>
 80041c8:	46a8      	mov	r8, r5
	char *m1 = strstr(GSMData, "+QENG: 1");
 80041ca:	4650      	mov	r0, sl
 80041cc:	4979      	ldr	r1, [pc, #484]	; (80043b4 <GSMCellInfo+0x370>)
 80041ce:	f00a fcc9 	bl	800eb64 <strstr>
 80041d2:	0004      	movs	r4, r0
 80041d4:	901f      	str	r0, [sp, #124]	; 0x7c
	if ((m1 != NULL) & (strlen(m1) > 1))
 80041d6:	f7fb ff97 	bl	8000108 <strlen>
 80041da:	2c00      	cmp	r4, #0
 80041dc:	d02b      	beq.n	8004236 <GSMCellInfo+0x1f2>
 80041de:	2801      	cmp	r0, #1
 80041e0:	d929      	bls.n	8004236 <GSMCellInfo+0x1f2>
 80041e2:	4b75      	ldr	r3, [pc, #468]	; (80043b8 <GSMCellInfo+0x374>)
 80041e4:	0020      	movs	r0, r4
		int k = 0;
 80041e6:	2500      	movs	r5, #0
 80041e8:	001c      	movs	r4, r3
 80041ea:	4e70      	ldr	r6, [pc, #448]	; (80043ac <GSMCellInfo+0x368>)
 80041ec:	af1f      	add	r7, sp, #124	; 0x7c
		while ((part = strtok_r(m1, ",", &m1)))
 80041ee:	0031      	movs	r1, r6
 80041f0:	003a      	movs	r2, r7
 80041f2:	f00a fcb2 	bl	800eb5a <strtok_r>
 80041f6:	1e01      	subs	r1, r0, #0
 80041f8:	d01d      	beq.n	8004236 <GSMCellInfo+0x1f2>
			if (k == 3)
 80041fa:	1eeb      	subs	r3, r5, #3
 80041fc:	2b25      	cmp	r3, #37	; 0x25
 80041fe:	d853      	bhi.n	80042a8 <GSMCellInfo+0x264>
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	58e3      	ldr	r3, [r4, r3]
 8004204:	469f      	mov	pc, r3
				strcpy(SS0, part);
 8004206:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004208:	f00a fdbb 	bl	800ed82 <strcpy>
			k++;
 800420c:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 800420e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004210:	e7d4      	b.n	80041bc <GSMCellInfo+0x178>
				strcpy(CID0, part);
 8004212:	0028      	movs	r0, r5
 8004214:	f00a fdb5 	bl	800ed82 <strcpy>
			k++;
 8004218:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 800421a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800421c:	e7ce      	b.n	80041bc <GSMCellInfo+0x178>
				strcpy(LAC0, part);
 800421e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004220:	f00a fdaf 	bl	800ed82 <strcpy>
			k++;
 8004224:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 8004226:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004228:	e7c8      	b.n	80041bc <GSMCellInfo+0x178>
				strcpy(MNC0, part);
 800422a:	4658      	mov	r0, fp
 800422c:	f00a fda9 	bl	800ed82 <strcpy>
			k++;
 8004230:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 8004232:	981e      	ldr	r0, [sp, #120]	; 0x78
 8004234:	e7c2      	b.n	80041bc <GSMCellInfo+0x178>
	memset(gsminfo, 0, 80);
 8004236:	4c61      	ldr	r4, [pc, #388]	; (80043bc <GSMCellInfo+0x378>)
 8004238:	2250      	movs	r2, #80	; 0x50
 800423a:	2100      	movs	r1, #0
 800423c:	0020      	movs	r0, r4
 800423e:	f00a fbe1 	bl	800ea04 <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <GSMCellInfo+0x37c>)
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	f7fd f831 	bl	80012ac <__aeabi_f2iz>
 800424a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800424c:	0002      	movs	r2, r0
 800424e:	930e      	str	r3, [sp, #56]	; 0x38
 8004250:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004252:	0020      	movs	r0, r4
 8004254:	930d      	str	r3, [sp, #52]	; 0x34
 8004256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004258:	495a      	ldr	r1, [pc, #360]	; (80043c4 <GSMCellInfo+0x380>)
 800425a:	930c      	str	r3, [sp, #48]	; 0x30
 800425c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800425e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004262:	930a      	str	r3, [sp, #40]	; 0x28
 8004264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004266:	9309      	str	r3, [sp, #36]	; 0x24
 8004268:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800426a:	9308      	str	r3, [sp, #32]
 800426c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800426e:	9307      	str	r3, [sp, #28]
 8004270:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004272:	9306      	str	r3, [sp, #24]
 8004274:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004276:	9305      	str	r3, [sp, #20]
 8004278:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800427e:	9303      	str	r3, [sp, #12]
 8004280:	4643      	mov	r3, r8
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	465b      	mov	r3, fp
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	464b      	mov	r3, r9
 800428e:	f00a fb4d 	bl	800e92c <siprintf>
}
 8004292:	0020      	movs	r0, r4
 8004294:	b021      	add	sp, #132	; 0x84
 8004296:	bcf0      	pop	{r4, r5, r6, r7}
 8004298:	46bb      	mov	fp, r7
 800429a:	46b2      	mov	sl, r6
 800429c:	46a9      	mov	r9, r5
 800429e:	46a0      	mov	r8, r4
 80042a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(SS1, part);
 80042a2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80042a4:	f00a fd6d 	bl	800ed82 <strcpy>
		while ((part = strtok_r(m1, ",", &m1)))
 80042a8:	981f      	ldr	r0, [sp, #124]	; 0x7c
			k++;
 80042aa:	3501      	adds	r5, #1
 80042ac:	e79f      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(CID4, part);
 80042ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 80042b0:	f00a fd67 	bl	800ed82 <strcpy>
			k++;
 80042b4:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80042b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80042b8:	e799      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(LAC4, part);
 80042ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80042bc:	f00a fd61 	bl	800ed82 <strcpy>
			k++;
 80042c0:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80042c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80042c4:	e793      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(SS4, part);
 80042c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80042c8:	f00a fd5b 	bl	800ed82 <strcpy>
			k++;
 80042cc:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80042ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80042d0:	e78d      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(CID3, part);
 80042d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80042d4:	f00a fd55 	bl	800ed82 <strcpy>
			k++;
 80042d8:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80042da:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80042dc:	e787      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(LAC3, part);
 80042de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80042e0:	f00a fd4f 	bl	800ed82 <strcpy>
			k++;
 80042e4:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80042e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80042e8:	e781      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(SS3, part);
 80042ea:	981c      	ldr	r0, [sp, #112]	; 0x70
 80042ec:	f00a fd49 	bl	800ed82 <strcpy>
			k++;
 80042f0:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80042f2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80042f4:	e77b      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(CID2, part);
 80042f6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80042f8:	f00a fd43 	bl	800ed82 <strcpy>
			k++;
 80042fc:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80042fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004300:	e775      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(LAC2, part);
 8004302:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004304:	f00a fd3d 	bl	800ed82 <strcpy>
			k++;
 8004308:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800430a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800430c:	e76f      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(SS2, part);
 800430e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004310:	f00a fd37 	bl	800ed82 <strcpy>
			k++;
 8004314:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004316:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004318:	e769      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(CID1, part);
 800431a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800431c:	f00a fd31 	bl	800ed82 <strcpy>
			k++;
 8004320:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004322:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004324:	e763      	b.n	80041ee <GSMCellInfo+0x1aa>
				strcpy(LAC1, part);
 8004326:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004328:	f00a fd2b 	bl	800ed82 <strcpy>
			k++;
 800432c:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800432e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004330:	e75d      	b.n	80041ee <GSMCellInfo+0x1aa>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004332:	220c      	movs	r2, #12
 8004334:	4c24      	ldr	r4, [pc, #144]	; (80043c8 <GSMCellInfo+0x384>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004336:	4925      	ldr	r1, [pc, #148]	; (80043cc <GSMCellInfo+0x388>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004338:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800433a:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800433c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <GSMCellInfo+0x38c>)
 8004340:	320a      	adds	r2, #10
 8004342:	f006 fc8b 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <GSMCellInfo+0x390>)
 8004348:	af1f      	add	r7, sp, #124	; 0x7c
 800434a:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800434c:	2202      	movs	r2, #2
 800434e:	230a      	movs	r3, #10
 8004350:	0039      	movs	r1, r7
 8004352:	0020      	movs	r0, r4
 8004354:	f006 fc82 	bl	800ac5c <HAL_UART_Transmit>
}
 8004358:	e737      	b.n	80041ca <GSMCellInfo+0x186>
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	200040e8 	.word	0x200040e8
 8004360:	200040ec 	.word	0x200040ec
 8004364:	200040f0 	.word	0x200040f0
 8004368:	200040f4 	.word	0x200040f4
 800436c:	200040f8 	.word	0x200040f8
 8004370:	2000205c 	.word	0x2000205c
 8004374:	20002064 	.word	0x20002064
 8004378:	20002030 	.word	0x20002030
 800437c:	20002038 	.word	0x20002038
 8004380:	20002040 	.word	0x20002040
 8004384:	20002048 	.word	0x20002048
 8004388:	20002050 	.word	0x20002050
 800438c:	2000038c 	.word	0x2000038c
 8004390:	20000384 	.word	0x20000384
 8004394:	2000037c 	.word	0x2000037c
 8004398:	20000374 	.word	0x20000374
 800439c:	2000036c 	.word	0x2000036c
 80043a0:	200006c8 	.word	0x200006c8
 80043a4:	08012cd8 	.word	0x08012cd8
 80043a8:	08012ce4 	.word	0x08012ce4
 80043ac:	08012824 	.word	0x08012824
 80043b0:	08012d48 	.word	0x08012d48
 80043b4:	08012d08 	.word	0x08012d08
 80043b8:	08012d68 	.word	0x08012d68
 80043bc:	20004750 	.word	0x20004750
 80043c0:	20001f00 	.word	0x20001f00
 80043c4:	08012d14 	.word	0x08012d14
 80043c8:	20004ba0 	.word	0x20004ba0
 80043cc:	08012cf0 	.word	0x08012cf0
 80043d0:	00001388 	.word	0x00001388
 80043d4:	00000a0d 	.word	0x00000a0d

080043d8 <ProcessTCPAll>:
}

void ProcessTCPAll(char *data, int n)
{
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043da:	46ce      	mov	lr, r9
 80043dc:	4647      	mov	r7, r8
 80043de:	b580      	push	{r7, lr}
	//int tcpSENDDATA = tic();

	if (tcp_stat[n] > 0)
 80043e0:	4b3c      	ldr	r3, [pc, #240]	; (80044d4 <ProcessTCPAll+0xfc>)
 80043e2:	008d      	lsls	r5, r1, #2
 80043e4:	58eb      	ldr	r3, [r5, r3]
{
 80043e6:	0006      	movs	r6, r0
 80043e8:	000c      	movs	r4, r1
 80043ea:	b083      	sub	sp, #12
	if (tcp_stat[n] > 0)
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dc0e      	bgt.n	800440e <ProcessTCPAll+0x36>
		Debug_Tx(ip[n]);
		SendTCPdata(data,n);
	}
	else
	{
		if (debug == 1)
 80043f0:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <ProcessTCPAll+0x100>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d03f      	beq.n	8004478 <ProcessTCPAll+0xa0>
	StopTCPConnection(n);
 80043f8:	0020      	movs	r0, r4
 80043fa:	f7ff fc87 	bl	8003d0c <StopTCPConnection>
	StartTCPConnection(n);
 80043fe:	0020      	movs	r0, r4
 8004400:	f7ff fbf6 	bl	8003bf0 <StartTCPConnection>
			Debug_Tx("Error: server Not connected ");
			Debug_Tx(ip[n]);
		}
		ResetTCP(n);
	}
}
 8004404:	b003      	add	sp, #12
 8004406:	bcc0      	pop	{r6, r7}
 8004408:	46b9      	mov	r9, r7
 800440a:	46b0      	mov	r8, r6
 800440c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800440e:	220c      	movs	r2, #12
 8004410:	4f32      	ldr	r7, [pc, #200]	; (80044dc <ProcessTCPAll+0x104>)
 8004412:	4691      	mov	r9, r2
 8004414:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004416:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004418:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800441a:	4931      	ldr	r1, [pc, #196]	; (80044e0 <ProcessTCPAll+0x108>)
 800441c:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <ProcessTCPAll+0x10c>)
 800441e:	3207      	adds	r2, #7
 8004420:	f006 fc1c 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <ProcessTCPAll+0x110>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004426:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8004428:	4698      	mov	r8, r3
 800442a:	466b      	mov	r3, sp
 800442c:	4642      	mov	r2, r8
		Debug_Tx(ip[n]);
 800442e:	192d      	adds	r5, r5, r4
 8004430:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004432:	0038      	movs	r0, r7
 8004434:	230a      	movs	r3, #10
 8004436:	2202      	movs	r2, #2
 8004438:	f006 fc10 	bl	800ac5c <HAL_UART_Transmit>
 800443c:	00aa      	lsls	r2, r5, #2
 800443e:	18ad      	adds	r5, r5, r2
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004440:	464a      	mov	r2, r9
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <ProcessTCPAll+0x114>)
 8004444:	195d      	adds	r5, r3, r5
 8004446:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004448:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800444a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800444c:	f7fb fe5c 	bl	8000108 <strlen>
 8004450:	0029      	movs	r1, r5
 8004452:	b282      	uxth	r2, r0
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <ProcessTCPAll+0x10c>)
 8004456:	0038      	movs	r0, r7
 8004458:	f006 fc00 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800445c:	466b      	mov	r3, sp
 800445e:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004460:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8004462:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004464:	0038      	movs	r0, r7
 8004466:	230a      	movs	r3, #10
 8004468:	2202      	movs	r2, #2
 800446a:	f006 fbf7 	bl	800ac5c <HAL_UART_Transmit>
		SendTCPdata(data,n);
 800446e:	0021      	movs	r1, r4
 8004470:	0030      	movs	r0, r6
 8004472:	f7ff fc8d 	bl	8003d90 <SendTCPdata>
 8004476:	e7c5      	b.n	8004404 <ProcessTCPAll+0x2c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004478:	220c      	movs	r2, #12
 800447a:	4e18      	ldr	r6, [pc, #96]	; (80044dc <ProcessTCPAll+0x104>)
 800447c:	4690      	mov	r8, r2
 800447e:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004480:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004482:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004484:	491a      	ldr	r1, [pc, #104]	; (80044f0 <ProcessTCPAll+0x118>)
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <ProcessTCPAll+0x10c>)
 8004488:	3210      	adds	r2, #16
 800448a:	f006 fbe7 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800448e:	466b      	mov	r3, sp
 8004490:	4f15      	ldr	r7, [pc, #84]	; (80044e8 <ProcessTCPAll+0x110>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004492:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8004494:	809f      	strh	r7, [r3, #4]
			Debug_Tx(ip[n]);
 8004496:	192d      	adds	r5, r5, r4
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004498:	230a      	movs	r3, #10
 800449a:	2202      	movs	r2, #2
 800449c:	0030      	movs	r0, r6
 800449e:	f006 fbdd 	bl	800ac5c <HAL_UART_Transmit>
 80044a2:	00aa      	lsls	r2, r5, #2
 80044a4:	18ad      	adds	r5, r5, r2
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80044a6:	4642      	mov	r2, r8
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <ProcessTCPAll+0x114>)
 80044aa:	195d      	adds	r5, r3, r5
 80044ac:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044ae:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80044b0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044b2:	f7fb fe29 	bl	8000108 <strlen>
 80044b6:	0029      	movs	r1, r5
 80044b8:	b282      	uxth	r2, r0
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <ProcessTCPAll+0x10c>)
 80044bc:	0030      	movs	r0, r6
 80044be:	f006 fbcd 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80044c2:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80044c4:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80044c6:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80044c8:	0030      	movs	r0, r6
 80044ca:	230a      	movs	r3, #10
 80044cc:	a901      	add	r1, sp, #4
 80044ce:	f006 fbc5 	bl	800ac5c <HAL_UART_Transmit>
}
 80044d2:	e791      	b.n	80043f8 <ProcessTCPAll+0x20>
 80044d4:	20004c8c 	.word	0x20004c8c
 80044d8:	200000c4 	.word	0x200000c4
 80044dc:	20004ba0 	.word	0x20004ba0
 80044e0:	08012e2c 	.word	0x08012e2c
 80044e4:	00001388 	.word	0x00001388
 80044e8:	00000a0d 	.word	0x00000a0d
 80044ec:	200000d0 	.word	0x200000d0
 80044f0:	08012e40 	.word	0x08012e40

080044f4 <SetupGPRS>:
	}
	return smsok;
}

void SetupGPRS(char *apn)
{
 80044f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f6:	4657      	mov	r7, sl
 80044f8:	464e      	mov	r6, r9
 80044fa:	4645      	mov	r5, r8
 80044fc:	46de      	mov	lr, fp

	int ck = 5;

	gprsok = 0;
 80044fe:	2300      	movs	r3, #0
{
 8004500:	b5e0      	push	{r5, r6, r7, lr}
 8004502:	4680      	mov	r8, r0
	gprsok = 0;
 8004504:	2505      	movs	r5, #5
 8004506:	4f33      	ldr	r7, [pc, #204]	; (80045d4 <SetupGPRS+0xe0>)
{
 8004508:	b08b      	sub	sp, #44	; 0x2c
	gprsok = 0;
 800450a:	603b      	str	r3, [r7, #0]
	while ((ck > 0) && (gprsok < 1))
 800450c:	4b32      	ldr	r3, [pc, #200]	; (80045d8 <SetupGPRS+0xe4>)
 800450e:	4c33      	ldr	r4, [pc, #204]	; (80045dc <SetupGPRS+0xe8>)
 8004510:	9306      	str	r3, [sp, #24]
 8004512:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <SetupGPRS+0xec>)
 8004514:	4e33      	ldr	r6, [pc, #204]	; (80045e4 <SetupGPRS+0xf0>)
 8004516:	469b      	mov	fp, r3
 8004518:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <SetupGPRS+0xf4>)
		{
			// gprsok=0;
			// HAL_Delay(4000);

			SendGSMCode(" AT+QIMODE=0");
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 800451a:	9705      	str	r7, [sp, #20]
 800451c:	469a      	mov	sl, r3
 800451e:	4b33      	ldr	r3, [pc, #204]	; (80045ec <SetupGPRS+0xf8>)
 8004520:	4699      	mov	r9, r3
 8004522:	4b33      	ldr	r3, [pc, #204]	; (80045f0 <SetupGPRS+0xfc>)
 8004524:	9307      	str	r3, [sp, #28]
			SendGSMCode(" AT+QIMODE=0");
 8004526:	4b33      	ldr	r3, [pc, #204]	; (80045f4 <SetupGPRS+0x100>)
 8004528:	9308      	str	r3, [sp, #32]
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <SetupGPRS+0x104>)
 800452c:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_Delay(2000);
 800452e:	20fa      	movs	r0, #250	; 0xfa
 8004530:	00c0      	lsls	r0, r0, #3
 8004532:	f003 fa9f 	bl	8007a74 <HAL_Delay>
		memset(GSMDataC, 0, 100);
 8004536:	0020      	movs	r0, r4
 8004538:	2100      	movs	r1, #0
 800453a:	2258      	movs	r2, #88	; 0x58
 800453c:	300c      	adds	r0, #12
 800453e:	f00a fa61 	bl	800ea04 <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 8004542:	0022      	movs	r2, r4
 8004544:	9b06      	ldr	r3, [sp, #24]
 8004546:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004548:	c283      	stmia	r2!, {r0, r1, r7}
		strcat(GSMDataC, apn);
 800454a:	0020      	movs	r0, r4
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 800454c:	881b      	ldrh	r3, [r3, #0]
		strcat(GSMDataC, apn);
 800454e:	4641      	mov	r1, r8
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 8004550:	81a3      	strh	r3, [r4, #12]
		strcat(GSMDataC, apn);
 8004552:	300e      	adds	r0, #14
 8004554:	f00a fb1c 	bl	800eb90 <stpcpy>
		strcat(GSMDataC, "\",\"\",\"\",0");
 8004558:	220a      	movs	r2, #10
 800455a:	4659      	mov	r1, fp
 800455c:	f00a fc24 	bl	800eda8 <memcpy>
		SendGSMCode(GSMDataC);
 8004560:	0020      	movs	r0, r4
 8004562:	f7fe ffc3 	bl	80034ec <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 8004566:	4653      	mov	r3, sl
 8004568:	9302      	str	r3, [sp, #8]
 800456a:	464b      	mov	r3, r9
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2200      	movs	r2, #0
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	9b07      	ldr	r3, [sp, #28]
 8004574:	0031      	movs	r1, r6
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2000      	movs	r0, #0
 800457a:	0033      	movs	r3, r6
 800457c:	f7ff f94a 	bl	8003814 <GetGSMReply>
 8004580:	f7fb fdc2 	bl	8000108 <strlen>
 8004584:	9b05      	ldr	r3, [sp, #20]
 8004586:	6018      	str	r0, [r3, #0]
		if (gprsok > 0)
 8004588:	2800      	cmp	r0, #0
 800458a:	d109      	bne.n	80045a0 <SetupGPRS+0xac>
	while ((ck > 0) && (gprsok < 1))
 800458c:	3d01      	subs	r5, #1
 800458e:	2d00      	cmp	r5, #0
 8004590:	d1cd      	bne.n	800452e <SetupGPRS+0x3a>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 8004592:	b00b      	add	sp, #44	; 0x2c
 8004594:	bcf0      	pop	{r4, r5, r6, r7}
 8004596:	46bb      	mov	fp, r7
 8004598:	46b2      	mov	sl, r6
 800459a:	46a9      	mov	r9, r5
 800459c:	46a0      	mov	r8, r4
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SendGSMCode(" AT+QIMODE=0");
 80045a0:	9808      	ldr	r0, [sp, #32]
 80045a2:	f7fe ffa3 	bl	80034ec <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 80045a6:	4653      	mov	r3, sl
 80045a8:	9302      	str	r3, [sp, #8]
 80045aa:	464b      	mov	r3, r9
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b4:	0031      	movs	r1, r6
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2000      	movs	r0, #0
 80045ba:	0033      	movs	r3, r6
 80045bc:	f7ff f92a 	bl	8003814 <GetGSMReply>
 80045c0:	f7fb fda2 	bl	8000108 <strlen>
 80045c4:	9b05      	ldr	r3, [sp, #20]
	while ((ck > 0) && (gprsok < 1))
 80045c6:	3d01      	subs	r5, #1
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 80045c8:	6018      	str	r0, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 80045ca:	2d00      	cmp	r5, #0
 80045cc:	d0e1      	beq.n	8004592 <SetupGPRS+0x9e>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	ddad      	ble.n	800452e <SetupGPRS+0x3a>
 80045d2:	e7de      	b.n	8004592 <SetupGPRS+0x9e>
 80045d4:	200042d0 	.word	0x200042d0
 80045d8:	08012e60 	.word	0x08012e60
 80045dc:	2000185c 	.word	0x2000185c
 80045e0:	08012e70 	.word	0x08012e70
 80045e4:	08012ae4 	.word	0x08012ae4
 80045e8:	08012b8c 	.word	0x08012b8c
 80045ec:	200000c8 	.word	0x200000c8
 80045f0:	08012e7c 	.word	0x08012e7c
 80045f4:	08012e9c 	.word	0x08012e9c
 80045f8:	08012eac 	.word	0x08012eac

080045fc <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 80045fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fe:	46de      	mov	lr, fp
 8004600:	4657      	mov	r7, sl
 8004602:	464e      	mov	r6, r9
 8004604:	4645      	mov	r5, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004606:	220c      	movs	r2, #12
 8004608:	b5e0      	push	{r5, r6, r7, lr}
 800460a:	4ea3      	ldr	r6, [pc, #652]	; (8004898 <ShiftGSMProfile+0x29c>)
 800460c:	b089      	sub	sp, #36	; 0x24
 800460e:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004610:	49a2      	ldr	r1, [pc, #648]	; (800489c <ShiftGSMProfile+0x2a0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004612:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004614:	0030      	movs	r0, r6
 8004616:	4ba2      	ldr	r3, [pc, #648]	; (80048a0 <ShiftGSMProfile+0x2a4>)
 8004618:	3224      	adds	r2, #36	; 0x24
 800461a:	f006 fb1f 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800461e:	4ba1      	ldr	r3, [pc, #644]	; (80048a4 <ShiftGSMProfile+0x2a8>)
 8004620:	af07      	add	r7, sp, #28
 8004622:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004624:	2202      	movs	r2, #2
 8004626:	230a      	movs	r3, #10
 8004628:	0039      	movs	r1, r7
 800462a:	0030      	movs	r0, r6
 800462c:	f006 fb16 	bl	800ac5c <HAL_UART_Transmit>
	// Debug_Tx(GSMSimOperator());

	// Debug_Tx("______________setup stk_____________________________");
	int ck = 10;
	ook = 0;
	while ((ck > 0) && (ook < 1))
 8004630:	4b9d      	ldr	r3, [pc, #628]	; (80048a8 <ShiftGSMProfile+0x2ac>)
	int ck = 10;
 8004632:	250a      	movs	r5, #10
 8004634:	4699      	mov	r9, r3
 8004636:	4b9d      	ldr	r3, [pc, #628]	; (80048ac <ShiftGSMProfile+0x2b0>)
 8004638:	4c9d      	ldr	r4, [pc, #628]	; (80048b0 <ShiftGSMProfile+0x2b4>)
 800463a:	469a      	mov	sl, r3
 800463c:	4b9d      	ldr	r3, [pc, #628]	; (80048b4 <ShiftGSMProfile+0x2b8>)
 800463e:	4698      	mov	r8, r3
 8004640:	4b9d      	ldr	r3, [pc, #628]	; (80048b8 <ShiftGSMProfile+0x2bc>)
 8004642:	469b      	mov	fp, r3
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004644:	4b9d      	ldr	r3, [pc, #628]	; (80048bc <ShiftGSMProfile+0x2c0>)
 8004646:	9305      	str	r3, [sp, #20]
 8004648:	e002      	b.n	8004650 <ShiftGSMProfile+0x54>
	while ((ck > 0) && (ook < 1))
 800464a:	2d00      	cmp	r5, #0
 800464c:	d100      	bne.n	8004650 <ShiftGSMProfile+0x54>
 800464e:	e093      	b.n	8004778 <ShiftGSMProfile+0x17c>
	{
		HAL_Delay(3000);
 8004650:	489b      	ldr	r0, [pc, #620]	; (80048c0 <ShiftGSMProfile+0x2c4>)
 8004652:	f003 fa0f 	bl	8007a74 <HAL_Delay>
		ck = ck - 1;
		SendGSMCode(" AT+QSTK=1");
 8004656:	4648      	mov	r0, r9
 8004658:	f7fe ff48 	bl	80034ec <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 800465c:	4653      	mov	r3, sl
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	4643      	mov	r3, r8
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2200      	movs	r2, #0
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	465b      	mov	r3, fp
 800466a:	0021      	movs	r1, r4
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	2000      	movs	r0, #0
 8004670:	0023      	movs	r3, r4
		ck = ck - 1;
 8004672:	3d01      	subs	r5, #1
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8004674:	f7ff f8ce 	bl	8003814 <GetGSMReply>
 8004678:	f7fb fd46 	bl	8000108 <strlen>
		if (ook > 0)
 800467c:	2800      	cmp	r0, #0
 800467e:	d0e4      	beq.n	800464a <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004680:	220c      	movs	r2, #12
 8004682:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004684:	9905      	ldr	r1, [sp, #20]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004686:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004688:	0030      	movs	r0, r6
 800468a:	4b85      	ldr	r3, [pc, #532]	; (80048a0 <ShiftGSMProfile+0x2a4>)
 800468c:	3229      	adds	r2, #41	; 0x29
 800468e:	f006 fae5 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004692:	4b84      	ldr	r3, [pc, #528]	; (80048a4 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004694:	2202      	movs	r2, #2
 8004696:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004698:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800469a:	0030      	movs	r0, r6
 800469c:	230a      	movs	r3, #10
 800469e:	f006 fadd 	bl	800ac5c <HAL_UART_Transmit>
		{
			Debug_Tx("______________Setup Menu_____________________________");
			ook = 0;
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 80046a2:	4888      	ldr	r0, [pc, #544]	; (80048c4 <ShiftGSMProfile+0x2c8>)
 80046a4:	f7fe ff22 	bl	80034ec <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", gpsto_net, "OK"));
 80046a8:	4653      	mov	r3, sl
 80046aa:	9302      	str	r3, [sp, #8]
 80046ac:	4643      	mov	r3, r8
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2200      	movs	r2, #0
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	4b84      	ldr	r3, [pc, #528]	; (80048c8 <ShiftGSMProfile+0x2cc>)
 80046b6:	0021      	movs	r1, r4
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2000      	movs	r0, #0
 80046bc:	0023      	movs	r3, r4
 80046be:	f7ff f8a9 	bl	8003814 <GetGSMReply>
 80046c2:	f7fb fd21 	bl	8000108 <strlen>
 80046c6:	9004      	str	r0, [sp, #16]
			HAL_Delay(3000);
 80046c8:	487d      	ldr	r0, [pc, #500]	; (80048c0 <ShiftGSMProfile+0x2c4>)
 80046ca:	f003 f9d3 	bl	8007a74 <HAL_Delay>
			if (ook > 0)
 80046ce:	9b04      	ldr	r3, [sp, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0ba      	beq.n	800464a <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80046d4:	220c      	movs	r2, #12
 80046d6:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046d8:	497c      	ldr	r1, [pc, #496]	; (80048cc <ShiftGSMProfile+0x2d0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80046da:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046dc:	0030      	movs	r0, r6
 80046de:	4b70      	ldr	r3, [pc, #448]	; (80048a0 <ShiftGSMProfile+0x2a4>)
 80046e0:	3231      	adds	r2, #49	; 0x31
 80046e2:	f006 fabb 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80046e6:	4b6f      	ldr	r3, [pc, #444]	; (80048a4 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80046e8:	2202      	movs	r2, #2
 80046ea:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 80046ec:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80046ee:	0030      	movs	r0, r6
 80046f0:	230a      	movs	r3, #10
 80046f2:	f006 fab3 	bl	800ac5c <HAL_UART_Transmit>
			{
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
				ook = 0;
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 80046f6:	4876      	ldr	r0, [pc, #472]	; (80048d0 <ShiftGSMProfile+0x2d4>)
 80046f8:	f7fe fef8 	bl	80034ec <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 80046fc:	4653      	mov	r3, sl
 80046fe:	9302      	str	r3, [sp, #8]
 8004700:	4643      	mov	r3, r8
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	4b72      	ldr	r3, [pc, #456]	; (80048d4 <ShiftGSMProfile+0x2d8>)
 800470a:	0021      	movs	r1, r4
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	2000      	movs	r0, #0
 8004710:	0023      	movs	r3, r4
 8004712:	f7ff f87f 	bl	8003814 <GetGSMReply>
 8004716:	f7fb fcf7 	bl	8000108 <strlen>
				if (ook > 0)
 800471a:	2800      	cmp	r0, #0
 800471c:	d095      	beq.n	800464a <ShiftGSMProfile+0x4e>
				{

					if (GSMProf == 0)
 800471e:	4b6e      	ldr	r3, [pc, #440]	; (80048d8 <ShiftGSMProfile+0x2dc>)
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d068      	beq.n	80047fa <ShiftGSMProfile+0x1fe>
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
						GSMProf = 1;
					}
					else if (GSMProf == 1)
 8004728:	2b01      	cmp	r3, #1
 800472a:	d100      	bne.n	800472e <ShiftGSMProfile+0x132>
 800472c:	e08f      	b.n	800484e <ShiftGSMProfile+0x252>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800472e:	220c      	movs	r2, #12
 8004730:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004732:	496a      	ldr	r1, [pc, #424]	; (80048dc <ShiftGSMProfile+0x2e0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004734:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004736:	0030      	movs	r0, r6
 8004738:	4b59      	ldr	r3, [pc, #356]	; (80048a0 <ShiftGSMProfile+0x2a4>)
 800473a:	3225      	adds	r2, #37	; 0x25
 800473c:	f006 fa8e 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004740:	4b58      	ldr	r3, [pc, #352]	; (80048a4 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004742:	2202      	movs	r2, #2
 8004744:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004746:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004748:	0030      	movs	r0, r6
 800474a:	230a      	movs	r3, #10
 800474c:	f006 fa86 	bl	800ac5c <HAL_UART_Transmit>
					}
					if (ook > 0)
					{
						Debug_Tx("_____________Refresh_____________________________");
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 8004750:	4863      	ldr	r0, [pc, #396]	; (80048e0 <ShiftGSMProfile+0x2e4>)
 8004752:	f7fe fecb 	bl	80034ec <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh", gpsto_net, "OK"));
 8004756:	4653      	mov	r3, sl
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	4643      	mov	r3, r8
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	4b60      	ldr	r3, [pc, #384]	; (80048e4 <ShiftGSMProfile+0x2e8>)
 8004764:	0021      	movs	r1, r4
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2000      	movs	r0, #0
 800476a:	0023      	movs	r3, r4
 800476c:	f7ff f852 	bl	8003814 <GetGSMReply>
 8004770:	f7fb fcca 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 8004774:	2d00      	cmp	r5, #0
 8004776:	d13d      	bne.n	80047f4 <ShiftGSMProfile+0x1f8>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004778:	220c      	movs	r2, #12
 800477a:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800477c:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800477e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004780:	4959      	ldr	r1, [pc, #356]	; (80048e8 <ShiftGSMProfile+0x2ec>)
 8004782:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <ShiftGSMProfile+0x2a4>)
 8004784:	3225      	adds	r2, #37	; 0x25
 8004786:	f006 fa69 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800478a:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800478c:	0039      	movs	r1, r7
 800478e:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8004790:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004792:	0030      	movs	r0, r6
 8004794:	230a      	movs	r3, #10
 8004796:	f006 fa61 	bl	800ac5c <HAL_UART_Transmit>
	ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+QPOWD=1");
 800479a:	4b54      	ldr	r3, [pc, #336]	; (80048ec <ShiftGSMProfile+0x2f0>)
 800479c:	0018      	movs	r0, r3
 800479e:	4698      	mov	r8, r3
 80047a0:	f7fe fea4 	bl	80034ec <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 80047a4:	4f52      	ldr	r7, [pc, #328]	; (80048f0 <ShiftGSMProfile+0x2f4>)
 80047a6:	4e53      	ldr	r6, [pc, #332]	; (80048f4 <ShiftGSMProfile+0x2f8>)
 80047a8:	9702      	str	r7, [sp, #8]
 80047aa:	6833      	ldr	r3, [r6, #0]
 80047ac:	4d52      	ldr	r5, [pc, #328]	; (80048f8 <ShiftGSMProfile+0x2fc>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	0021      	movs	r1, r4
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	200f      	movs	r0, #15
 80047b6:	0023      	movs	r3, r4
 80047b8:	9500      	str	r5, [sp, #0]
 80047ba:	f7ff f82b 	bl	8003814 <GetGSMReply>
 80047be:	f7fb fca3 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d10c      	bne.n	80047e0 <ShiftGSMProfile+0x1e4>
		SendGSMCode(" AT+QPOWD=1");
 80047c6:	4640      	mov	r0, r8
 80047c8:	f7fe fe90 	bl	80034ec <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 80047cc:	9702      	str	r7, [sp, #8]
 80047ce:	6833      	ldr	r3, [r6, #0]
 80047d0:	2200      	movs	r2, #0
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	0021      	movs	r1, r4
 80047d6:	0023      	movs	r3, r4
 80047d8:	200f      	movs	r0, #15
 80047da:	9500      	str	r5, [sp, #0]
 80047dc:	f7ff f81a 	bl	8003814 <GetGSMReply>
	}
	HAL_Delay(6000);
 80047e0:	4846      	ldr	r0, [pc, #280]	; (80048fc <ShiftGSMProfile+0x300>)
 80047e2:	f003 f947 	bl	8007a74 <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 80047e6:	b009      	add	sp, #36	; 0x24
 80047e8:	bcf0      	pop	{r4, r5, r6, r7}
 80047ea:	46bb      	mov	fp, r7
 80047ec:	46b2      	mov	sl, r6
 80047ee:	46a9      	mov	r9, r5
 80047f0:	46a0      	mov	r8, r4
 80047f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((ck > 0) && (ook < 1))
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d1bf      	bne.n	8004778 <ShiftGSMProfile+0x17c>
 80047f8:	e72a      	b.n	8004650 <ShiftGSMProfile+0x54>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80047fa:	220c      	movs	r2, #12
 80047fc:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80047fe:	4940      	ldr	r1, [pc, #256]	; (8004900 <ShiftGSMProfile+0x304>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004800:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004802:	0030      	movs	r0, r6
 8004804:	4b26      	ldr	r3, [pc, #152]	; (80048a0 <ShiftGSMProfile+0x2a4>)
 8004806:	3234      	adds	r2, #52	; 0x34
 8004808:	f006 fa28 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800480e:	2202      	movs	r2, #2
 8004810:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004812:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004814:	0030      	movs	r0, r6
 8004816:	230a      	movs	r3, #10
 8004818:	f006 fa20 	bl	800ac5c <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 800481c:	4839      	ldr	r0, [pc, #228]	; (8004904 <ShiftGSMProfile+0x308>)
 800481e:	f7fe fe65 	bl	80034ec <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
 8004822:	4653      	mov	r3, sl
 8004824:	9302      	str	r3, [sp, #8]
 8004826:	4643      	mov	r3, r8
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	4b36      	ldr	r3, [pc, #216]	; (8004908 <ShiftGSMProfile+0x30c>)
 8004830:	0021      	movs	r1, r4
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2000      	movs	r0, #0
 8004836:	0023      	movs	r3, r4
 8004838:	f7fe ffec 	bl	8003814 <GetGSMReply>
 800483c:	f7fb fc64 	bl	8000108 <strlen>
						GSMProf = 1;
 8004840:	2301      	movs	r3, #1
 8004842:	9a04      	ldr	r2, [sp, #16]
 8004844:	6013      	str	r3, [r2, #0]
					if (ook > 0)
 8004846:	2800      	cmp	r0, #0
 8004848:	d100      	bne.n	800484c <ShiftGSMProfile+0x250>
 800484a:	e6fe      	b.n	800464a <ShiftGSMProfile+0x4e>
 800484c:	e76f      	b.n	800472e <ShiftGSMProfile+0x132>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800484e:	220c      	movs	r2, #12
 8004850:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004852:	492e      	ldr	r1, [pc, #184]	; (800490c <ShiftGSMProfile+0x310>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004854:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004856:	0030      	movs	r0, r6
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <ShiftGSMProfile+0x2a4>)
 800485a:	3236      	adds	r2, #54	; 0x36
 800485c:	f006 f9fe 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004860:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004862:	2202      	movs	r2, #2
 8004864:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004866:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004868:	0030      	movs	r0, r6
 800486a:	230a      	movs	r3, #10
 800486c:	f006 f9f6 	bl	800ac5c <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 8004870:	4827      	ldr	r0, [pc, #156]	; (8004910 <ShiftGSMProfile+0x314>)
 8004872:	f7fe fe3b 	bl	80034ec <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", gpsto_net, "OK"));
 8004876:	4653      	mov	r3, sl
 8004878:	9302      	str	r3, [sp, #8]
 800487a:	4643      	mov	r3, r8
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <ShiftGSMProfile+0x318>)
 8004884:	0021      	movs	r1, r4
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2000      	movs	r0, #0
 800488a:	0023      	movs	r3, r4
 800488c:	f7fe ffc2 	bl	8003814 <GetGSMReply>
 8004890:	f7fb fc3a 	bl	8000108 <strlen>
 8004894:	2300      	movs	r3, #0
 8004896:	e7d4      	b.n	8004842 <ShiftGSMProfile+0x246>
 8004898:	20004ba0 	.word	0x20004ba0
 800489c:	08012ed0 	.word	0x08012ed0
 80048a0:	00001388 	.word	0x00001388
 80048a4:	00000a0d 	.word	0x00000a0d
 80048a8:	08012f04 	.word	0x08012f04
 80048ac:	08012b8c 	.word	0x08012b8c
 80048b0:	08012ae4 	.word	0x08012ae4
 80048b4:	200000cc 	.word	0x200000cc
 80048b8:	08012f10 	.word	0x08012f10
 80048bc:	08012f9c 	.word	0x08012f9c
 80048c0:	00000bb8 	.word	0x00000bb8
 80048c4:	08012fd4 	.word	0x08012fd4
 80048c8:	08012ffc 	.word	0x08012ffc
 80048cc:	0801301c 	.word	0x0801301c
 80048d0:	0801305c 	.word	0x0801305c
 80048d4:	0801307c 	.word	0x0801307c
 80048d8:	2000009c 	.word	0x2000009c
 80048dc:	080131c0 	.word	0x080131c0
 80048e0:	080131f4 	.word	0x080131f4
 80048e4:	0801321c 	.word	0x0801321c
 80048e8:	08012f2c 	.word	0x08012f2c
 80048ec:	08012f60 	.word	0x08012f60
 80048f0:	08012f6c 	.word	0x08012f6c
 80048f4:	200000c8 	.word	0x200000c8
 80048f8:	08012f80 	.word	0x08012f80
 80048fc:	00001770 	.word	0x00001770
 8004900:	080130a0 	.word	0x080130a0
 8004904:	080130e4 	.word	0x080130e4
 8004908:	08013110 	.word	0x08013110
 800490c:	08013130 	.word	0x08013130
 8004910:	08013174 	.word	0x08013174
 8004914:	080131a0 	.word	0x080131a0

08004918 <InitGSM>:

void InitGSM()
{
 8004918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800491a:	46de      	mov	lr, fp
 800491c:	4645      	mov	r5, r8
 800491e:	4657      	mov	r7, sl
 8004920:	464e      	mov	r6, r9
 8004922:	b5e0      	push	{r5, r6, r7, lr}
	// RestartGSM();
	HAL_Delay(5000);
 8004924:	48c6      	ldr	r0, [pc, #792]	; (8004c40 <InitGSM+0x328>)
{
 8004926:	b087      	sub	sp, #28
	HAL_Delay(5000);
 8004928:	f003 f8a4 	bl	8007a74 <HAL_Delay>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 800492c:	4bc5      	ldr	r3, [pc, #788]	; (8004c44 <InitGSM+0x32c>)
 800492e:	0018      	movs	r0, r3
 8004930:	4699      	mov	r9, r3
 8004932:	f7fe fddb 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 8004936:	4bc4      	ldr	r3, [pc, #784]	; (8004c48 <InitGSM+0x330>)
 8004938:	4fc4      	ldr	r7, [pc, #784]	; (8004c4c <InitGSM+0x334>)
 800493a:	9302      	str	r3, [sp, #8]
 800493c:	4cc4      	ldr	r4, [pc, #784]	; (8004c50 <InitGSM+0x338>)
 800493e:	4698      	mov	r8, r3
 8004940:	4dc4      	ldr	r5, [pc, #784]	; (8004c54 <InitGSM+0x33c>)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2200      	movs	r2, #0
 8004946:	0021      	movs	r1, r4
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	200f      	movs	r0, #15
 800494c:	0023      	movs	r3, r4
 800494e:	9500      	str	r5, [sp, #0]
 8004950:	f7fe ff60 	bl	8003814 <GetGSMReply>
 8004954:	f7fb fbd8 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 8004958:	2800      	cmp	r0, #0
 800495a:	d10d      	bne.n	8004978 <InitGSM+0x60>
		SendGSMCode(" ATE0");
 800495c:	4648      	mov	r0, r9
 800495e:	f7fe fdc5 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 8004962:	4643      	mov	r3, r8
 8004964:	9302      	str	r3, [sp, #8]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2200      	movs	r2, #0
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	0021      	movs	r1, r4
 800496e:	0023      	movs	r3, r4
 8004970:	200f      	movs	r0, #15
 8004972:	9500      	str	r5, [sp, #0]
 8004974:	f7fe ff4e 	bl	8003814 <GetGSMReply>
{
 8004978:	2302      	movs	r3, #2
 800497a:	469a      	mov	sl, r3
 800497c:	4db6      	ldr	r5, [pc, #728]	; (8004c58 <InitGSM+0x340>)
 800497e:	4eb7      	ldr	r6, [pc, #732]	; (8004c5c <InitGSM+0x344>)
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8004980:	0028      	movs	r0, r5
 8004982:	f7fe fdb3 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004986:	4643      	mov	r3, r8
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2200      	movs	r2, #0
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	0021      	movs	r1, r4
 8004992:	0023      	movs	r3, r4
 8004994:	200f      	movs	r0, #15
 8004996:	9600      	str	r6, [sp, #0]
 8004998:	f7fe ff3c 	bl	8003814 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 800499c:	4653      	mov	r3, sl
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d000      	beq.n	80049a4 <InitGSM+0x8c>
 80049a2:	e118      	b.n	8004bd6 <InitGSM+0x2be>
	}

	HAL_Delay(2000);
 80049a4:	20fa      	movs	r0, #250	; 0xfa
 80049a6:	00c0      	lsls	r0, r0, #3
 80049a8:	f003 f864 	bl	8007a74 <HAL_Delay>
	ShiftGSMProfile();
 80049ac:	f7ff fe26 	bl	80045fc <ShiftGSMProfile>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 80049b0:	4648      	mov	r0, r9
 80049b2:	f7fe fd9b 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 80049b6:	4643      	mov	r3, r8
 80049b8:	9302      	str	r3, [sp, #8]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2200      	movs	r2, #0
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	4ba7      	ldr	r3, [pc, #668]	; (8004c60 <InitGSM+0x348>)
 80049c2:	0021      	movs	r1, r4
 80049c4:	469a      	mov	sl, r3
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	200a      	movs	r0, #10
 80049ca:	0023      	movs	r3, r4
 80049cc:	f7fe ff22 	bl	8003814 <GetGSMReply>
 80049d0:	f7fb fb9a 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d10e      	bne.n	80049f6 <InitGSM+0xde>
		SendGSMCode(" ATE0");
 80049d8:	4648      	mov	r0, r9
 80049da:	f7fe fd87 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 80049de:	4643      	mov	r3, r8
 80049e0:	9302      	str	r3, [sp, #8]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2200      	movs	r2, #0
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	4653      	mov	r3, sl
 80049ea:	0021      	movs	r1, r4
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	200a      	movs	r0, #10
 80049f0:	0023      	movs	r3, r4
 80049f2:	f7fe ff0f 	bl	8003814 <GetGSMReply>
{
 80049f6:	2302      	movs	r3, #2
 80049f8:	4699      	mov	r9, r3
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 80049fa:	0028      	movs	r0, r5
 80049fc:	f7fe fd76 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004a00:	4643      	mov	r3, r8
 8004a02:	9302      	str	r3, [sp, #8]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	0021      	movs	r1, r4
 8004a0c:	0023      	movs	r3, r4
 8004a0e:	200a      	movs	r0, #10
 8004a10:	9600      	str	r6, [sp, #0]
 8004a12:	f7fe feff 	bl	8003814 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 8004a16:	464b      	mov	r3, r9
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d000      	beq.n	8004a1e <InitGSM+0x106>
 8004a1c:	e0d3      	b.n	8004bc6 <InitGSM+0x2ae>
 8004a1e:	4b91      	ldr	r3, [pc, #580]	; (8004c64 <InitGSM+0x34c>)
 8004a20:	260a      	movs	r6, #10
 8004a22:	469a      	mov	sl, r3
 8004a24:	4b90      	ldr	r3, [pc, #576]	; (8004c68 <InitGSM+0x350>)
 8004a26:	4699      	mov	r9, r3
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
		// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
		if (i > 0)
		{
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 8004a28:	4b90      	ldr	r3, [pc, #576]	; (8004c6c <InitGSM+0x354>)
 8004a2a:	469b      	mov	fp, r3
 8004a2c:	e002      	b.n	8004a34 <InitGSM+0x11c>
	while ((ck > 0) && (i < 1))
 8004a2e:	2e00      	cmp	r6, #0
 8004a30:	d100      	bne.n	8004a34 <InitGSM+0x11c>
 8004a32:	e0c1      	b.n	8004bb8 <InitGSM+0x2a0>
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 8004a34:	4650      	mov	r0, sl
 8004a36:	f7fe fd59 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 8004a3a:	4643      	mov	r3, r8
 8004a3c:	9302      	str	r3, [sp, #8]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2200      	movs	r2, #0
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	464b      	mov	r3, r9
 8004a46:	0021      	movs	r1, r4
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	2005      	movs	r0, #5
 8004a4c:	0023      	movs	r3, r4
 8004a4e:	f7fe fee1 	bl	8003814 <GetGSMReply>
 8004a52:	f7fb fb59 	bl	8000108 <strlen>
 8004a56:	0005      	movs	r5, r0
		HAL_Delay(1000);
 8004a58:	20fa      	movs	r0, #250	; 0xfa
 8004a5a:	0080      	lsls	r0, r0, #2
		ck = ck - 1;
 8004a5c:	3e01      	subs	r6, #1
		HAL_Delay(1000);
 8004a5e:	f003 f809 	bl	8007a74 <HAL_Delay>
		if (i > 0)
 8004a62:	2d00      	cmp	r5, #0
 8004a64:	d0e3      	beq.n	8004a2e <InitGSM+0x116>
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 8004a66:	4658      	mov	r0, fp
 8004a68:	f7fe fd40 	bl	80034ec <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	9302      	str	r3, [sp, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	4b7e      	ldr	r3, [pc, #504]	; (8004c70 <InitGSM+0x358>)
 8004a78:	0021      	movs	r1, r4
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	0023      	movs	r3, r4
 8004a80:	f7fe fec8 	bl	8003814 <GetGSMReply>
 8004a84:	f7fb fb40 	bl	8000108 <strlen>

			if (i > 0)
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d0d0      	beq.n	8004a2e <InitGSM+0x116>
			{
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 8004a8c:	4879      	ldr	r0, [pc, #484]	; (8004c74 <InitGSM+0x35c>)
 8004a8e:	f7fe fd2d 	bl	80034ec <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 8004a92:	4643      	mov	r3, r8
 8004a94:	9302      	str	r3, [sp, #8]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	4b76      	ldr	r3, [pc, #472]	; (8004c78 <InitGSM+0x360>)
 8004a9e:	0021      	movs	r1, r4
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	0023      	movs	r3, r4
 8004aa6:	f7fe feb5 	bl	8003814 <GetGSMReply>
 8004aaa:	f7fb fb2d 	bl	8000108 <strlen>

				if (i > 0)
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d0bd      	beq.n	8004a2e <InitGSM+0x116>
				{
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 8004ab2:	4872      	ldr	r0, [pc, #456]	; (8004c7c <InitGSM+0x364>)
 8004ab4:	f7fe fd1a 	bl	80034ec <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 8004ab8:	4643      	mov	r3, r8
 8004aba:	9302      	str	r3, [sp, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <InitGSM+0x368>)
 8004ac4:	0021      	movs	r1, r4
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2000      	movs	r0, #0
 8004aca:	0023      	movs	r3, r4
 8004acc:	f7fe fea2 	bl	8003814 <GetGSMReply>
 8004ad0:	f7fb fb1a 	bl	8000108 <strlen>
					if (i > 0)
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d0aa      	beq.n	8004a2e <InitGSM+0x116>
					{
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 8004ad8:	486a      	ldr	r0, [pc, #424]	; (8004c84 <InitGSM+0x36c>)
 8004ada:	f7fe fd07 	bl	80034ec <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 8004ade:	4643      	mov	r3, r8
 8004ae0:	9302      	str	r3, [sp, #8]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	4b67      	ldr	r3, [pc, #412]	; (8004c88 <InitGSM+0x370>)
 8004aea:	0021      	movs	r1, r4
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2000      	movs	r0, #0
 8004af0:	0023      	movs	r3, r4
 8004af2:	f7fe fe8f 	bl	8003814 <GetGSMReply>
 8004af6:	f7fb fb07 	bl	8000108 <strlen>
						if (i > 0)
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d097      	beq.n	8004a2e <InitGSM+0x116>
						{
							HAL_Delay(3000);
 8004afe:	4863      	ldr	r0, [pc, #396]	; (8004c8c <InitGSM+0x374>)
 8004b00:	f002 ffb8 	bl	8007a74 <HAL_Delay>
							// SendGSMCode(" AT+CSMP=17,167,0,16");
							// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CSMP=17,167,0,16  SMS Text mode parameter ",10));
							if (i > 0)
							{
								SendGSMCode(" AT+QENG=1,4");
 8004b04:	4862      	ldr	r0, [pc, #392]	; (8004c90 <InitGSM+0x378>)
 8004b06:	f7fe fcf1 	bl	80034ec <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 8004b0a:	4643      	mov	r3, r8
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2200      	movs	r2, #0
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <InitGSM+0x37c>)
 8004b16:	0021      	movs	r1, r4
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	0023      	movs	r3, r4
 8004b1e:	f7fe fe79 	bl	8003814 <GetGSMReply>
 8004b22:	f7fb faf1 	bl	8000108 <strlen>

								if (i > 0)
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d081      	beq.n	8004a2e <InitGSM+0x116>
								{

									HAL_Delay(1000);
 8004b2a:	20fa      	movs	r0, #250	; 0xfa
 8004b2c:	0080      	lsls	r0, r0, #2
 8004b2e:	f002 ffa1 	bl	8007a74 <HAL_Delay>
									if (GSMProf == 0)
 8004b32:	4b59      	ldr	r3, [pc, #356]	; (8004c98 <InitGSM+0x380>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004b34:	4d59      	ldr	r5, [pc, #356]	; (8004c9c <InitGSM+0x384>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d054      	beq.n	8004be6 <InitGSM+0x2ce>
									{
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
										SetupGPRS("taisysnet"); // taisysnet");
									}
									else if (GSMProf == 1)
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d068      	beq.n	8004c12 <InitGSM+0x2fa>
 8004b40:	ae05      	add	r6, sp, #20
									{
										Debug_Tx("_____________BSNL APN SET_____________________________");
										SetupGPRS("bsnlnet"); // taisysnet");
									}
									HAL_Delay(1000);
 8004b42:	20fa      	movs	r0, #250	; 0xfa
 8004b44:	0080      	lsls	r0, r0, #2
 8004b46:	f002 ff95 	bl	8007a74 <HAL_Delay>
 8004b4a:	220c      	movs	r2, #12
 8004b4c:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004b4e:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004b50:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004b52:	4953      	ldr	r1, [pc, #332]	; (8004ca0 <InitGSM+0x388>)
 8004b54:	4b3a      	ldr	r3, [pc, #232]	; (8004c40 <InitGSM+0x328>)
 8004b56:	322c      	adds	r2, #44	; 0x2c
 8004b58:	f006 f880 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004b5c:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <InitGSM+0x38c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004b5e:	0031      	movs	r1, r6
 8004b60:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8004b62:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004b64:	0028      	movs	r0, r5
 8004b66:	230a      	movs	r3, #10
 8004b68:	f006 f878 	bl	800ac5c <HAL_UART_Transmit>

									Debug_Tx("_____________Operator again_____________________________");
									// Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 8004b6c:	20fa      	movs	r0, #250	; 0xfa
 8004b6e:	0080      	lsls	r0, r0, #2
 8004b70:	f002 ff80 	bl	8007a74 <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8004b74:	4e4c      	ldr	r6, [pc, #304]	; (8004ca8 <InitGSM+0x390>)
 8004b76:	0030      	movs	r0, r6
 8004b78:	f7fe fcb8 	bl	80034ec <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8004b7c:	4643      	mov	r3, r8
 8004b7e:	9302      	str	r3, [sp, #8]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	4d4a      	ldr	r5, [pc, #296]	; (8004cac <InitGSM+0x394>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	0021      	movs	r1, r4
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	0023      	movs	r3, r4
 8004b8e:	9500      	str	r5, [sp, #0]
 8004b90:	f7fe fe40 	bl	8003814 <GetGSMReply>
									SetTCPMux();
									HAL_Delay(1000);
 8004b94:	20fa      	movs	r0, #250	; 0xfa
 8004b96:	0080      	lsls	r0, r0, #2
 8004b98:	f002 ff6c 	bl	8007a74 <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8004b9c:	0030      	movs	r0, r6
 8004b9e:	f7fe fca5 	bl	80034ec <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8004ba2:	4643      	mov	r3, r8
 8004ba4:	9302      	str	r3, [sp, #8]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	0021      	movs	r1, r4
 8004bae:	0023      	movs	r3, r4
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	9500      	str	r5, [sp, #0]
 8004bb4:	f7fe fe2e 	bl	8003814 <GetGSMReply>
					}
				}
			}
		}
	}
}
 8004bb8:	b007      	add	sp, #28
 8004bba:	bcf0      	pop	{r4, r5, r6, r7}
 8004bbc:	46bb      	mov	fp, r7
 8004bbe:	46b2      	mov	sl, r6
 8004bc0:	46a9      	mov	r9, r5
 8004bc2:	46a0      	mov	r8, r4
 8004bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004bc6:	f7fb fa9f 	bl	8000108 <strlen>
		ck = ck - 1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4699      	mov	r9, r3
	while ((ck > 0) && (i < 1))
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d100      	bne.n	8004bd4 <InitGSM+0x2bc>
 8004bd2:	e712      	b.n	80049fa <InitGSM+0xe2>
 8004bd4:	e723      	b.n	8004a1e <InitGSM+0x106>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004bd6:	f7fb fa97 	bl	8000108 <strlen>
		ck = ck - 1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	469a      	mov	sl, r3
	while ((ck > 0) && (i < 1))
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d100      	bne.n	8004be4 <InitGSM+0x2cc>
 8004be2:	e6cd      	b.n	8004980 <InitGSM+0x68>
 8004be4:	e6de      	b.n	80049a4 <InitGSM+0x8c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004be6:	220c      	movs	r2, #12
 8004be8:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004bea:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004bec:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004bee:	4930      	ldr	r1, [pc, #192]	; (8004cb0 <InitGSM+0x398>)
 8004bf0:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <InitGSM+0x328>)
 8004bf2:	322c      	adds	r2, #44	; 0x2c
 8004bf4:	f006 f832 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004bf8:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <InitGSM+0x38c>)
 8004bfa:	ae05      	add	r6, sp, #20
 8004bfc:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004bfe:	2202      	movs	r2, #2
 8004c00:	230a      	movs	r3, #10
 8004c02:	0031      	movs	r1, r6
 8004c04:	0028      	movs	r0, r5
 8004c06:	f006 f829 	bl	800ac5c <HAL_UART_Transmit>
										SetupGPRS("taisysnet"); // taisysnet");
 8004c0a:	482a      	ldr	r0, [pc, #168]	; (8004cb4 <InitGSM+0x39c>)
 8004c0c:	f7ff fc72 	bl	80044f4 <SetupGPRS>
 8004c10:	e797      	b.n	8004b42 <InitGSM+0x22a>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004c12:	220c      	movs	r2, #12
 8004c14:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004c16:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004c18:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004c1a:	4927      	ldr	r1, [pc, #156]	; (8004cb8 <InitGSM+0x3a0>)
 8004c1c:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <InitGSM+0x328>)
 8004c1e:	322a      	adds	r2, #42	; 0x2a
 8004c20:	f006 f81c 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004c24:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <InitGSM+0x38c>)
 8004c26:	ae05      	add	r6, sp, #20
 8004c28:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	230a      	movs	r3, #10
 8004c2e:	0031      	movs	r1, r6
 8004c30:	0028      	movs	r0, r5
 8004c32:	f006 f813 	bl	800ac5c <HAL_UART_Transmit>
										SetupGPRS("bsnlnet"); // taisysnet");
 8004c36:	4821      	ldr	r0, [pc, #132]	; (8004cbc <InitGSM+0x3a4>)
 8004c38:	f7ff fc5c 	bl	80044f4 <SetupGPRS>
 8004c3c:	e781      	b.n	8004b42 <InitGSM+0x22a>
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	00001388 	.word	0x00001388
 8004c44:	08013238 	.word	0x08013238
 8004c48:	08012b8c 	.word	0x08012b8c
 8004c4c:	200000c8 	.word	0x200000c8
 8004c50:	08012ae4 	.word	0x08012ae4
 8004c54:	08013240 	.word	0x08013240
 8004c58:	080127dc 	.word	0x080127dc
 8004c5c:	08013254 	.word	0x08013254
 8004c60:	08013268 	.word	0x08013268
 8004c64:	0801327c 	.word	0x0801327c
 8004c68:	08013288 	.word	0x08013288
 8004c6c:	080132b0 	.word	0x080132b0
 8004c70:	080132bc 	.word	0x080132bc
 8004c74:	080132e4 	.word	0x080132e4
 8004c78:	080132f0 	.word	0x080132f0
 8004c7c:	0801330c 	.word	0x0801330c
 8004c80:	08013318 	.word	0x08013318
 8004c84:	08013348 	.word	0x08013348
 8004c88:	08013358 	.word	0x08013358
 8004c8c:	00000bb8 	.word	0x00000bb8
 8004c90:	08013384 	.word	0x08013384
 8004c94:	08013394 	.word	0x08013394
 8004c98:	2000009c 	.word	0x2000009c
 8004c9c:	20004ba0 	.word	0x20004ba0
 8004ca0:	08013444 	.word	0x08013444
 8004ca4:	00000a0d 	.word	0x00000a0d
 8004ca8:	08012e00 	.word	0x08012e00
 8004cac:	08012e0c 	.word	0x08012e0c
 8004cb0:	080133bc 	.word	0x080133bc
 8004cb4:	080133f8 	.word	0x080133f8
 8004cb8:	08013404 	.word	0x08013404
 8004cbc:	0801343c 	.word	0x0801343c

08004cc0 <SPI_flash_get_device_ID>:

void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
}

void SPI_flash_get_device_ID( ) {
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	46de      	mov	lr, fp
 8004cc4:	4657      	mov	r7, sl
 8004cc6:	464e      	mov	r6, r9
 8004cc8:	4645      	mov	r5, r8
    SPI_flash_cs_low;
 8004cca:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_get_device_ID( ) {
 8004ccc:	b5e0      	push	{r5, r6, r7, lr}
    SPI_flash_cs_low;
 8004cce:	05db      	lsls	r3, r3, #23
void SPI_flash_get_device_ID( ) {
 8004cd0:	b0a3      	sub	sp, #140	; 0x8c
    SPI_flash_cs_low;
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2110      	movs	r1, #16
 8004cd8:	469a      	mov	sl, r3
 8004cda:	f003 fd93 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8004cde:	2390      	movs	r3, #144	; 0x90
 8004ce0:	ad09      	add	r5, sp, #36	; 0x24
 8004ce2:	702b      	strb	r3, [r5, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004ce4:	23fa      	movs	r3, #250	; 0xfa
 8004ce6:	4f62      	ldr	r7, [pc, #392]	; (8004e70 <SPI_flash_get_device_ID+0x1b0>)
 8004ce8:	0029      	movs	r1, r5
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	2201      	movs	r2, #1
 8004cee:	0038      	movs	r0, r7
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	f004 ffeb 	bl	8009ccc <HAL_SPI_Transmit>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8004cf6:	2300      	movs	r3, #0
    aa[1]=0;
    aa[2]=0;
    aa[3]=0;
    aa[4]=0;
 8004cf8:	ac06      	add	r4, sp, #24
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004cfa:	0021      	movs	r1, r4
    aa[0]=0;
 8004cfc:	9306      	str	r3, [sp, #24]
    aa[4]=0;
 8004cfe:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004d00:	2203      	movs	r2, #3
 8004d02:	464b      	mov	r3, r9
 8004d04:	0038      	movs	r0, r7
 8004d06:	f004 ffe1 	bl	8009ccc <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004d0a:	464a      	mov	r2, r9
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	0021      	movs	r1, r4
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	0038      	movs	r0, r7
 8004d14:	0022      	movs	r2, r4
 8004d16:	f005 f8a5 	bl	8009e64 <HAL_SPI_TransmitReceive>
    aa[5]=0;
    SPI_flash_sent_address (aa);
    SPI_flash_TransmitReceive(aa, 2);
    SPI_flash_cs_high;
 8004d1a:	4650      	mov	r0, sl
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2110      	movs	r1, #16
 8004d20:	f003 fd70 	bl	8008804 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8004d24:	7863      	ldrb	r3, [r4, #1]
 8004d26:	7822      	ldrb	r2, [r4, #0]
 8004d28:	4952      	ldr	r1, [pc, #328]	; (8004e74 <SPI_flash_get_device_ID+0x1b4>)
 8004d2a:	0028      	movs	r0, r5
 8004d2c:	f009 fdfe 	bl	800e92c <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d30:	4a51      	ldr	r2, [pc, #324]	; (8004e78 <SPI_flash_get_device_ID+0x1b8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004d32:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d34:	4690      	mov	r8, r2
 8004d36:	6813      	ldr	r3, [r2, #0]
 8004d38:	220c      	movs	r2, #12
 8004d3a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004d3c:	f7fb f9e4 	bl	8000108 <strlen>
 8004d40:	494e      	ldr	r1, [pc, #312]	; (8004e7c <SPI_flash_get_device_ID+0x1bc>)
 8004d42:	b282      	uxth	r2, r0
 8004d44:	468b      	mov	fp, r1
 8004d46:	000b      	movs	r3, r1
 8004d48:	4640      	mov	r0, r8
 8004d4a:	0029      	movs	r1, r5
 8004d4c:	f005 ff86 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004d50:	494b      	ldr	r1, [pc, #300]	; (8004e80 <SPI_flash_get_device_ID+0x1c0>)
 8004d52:	ae05      	add	r6, sp, #20
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004d54:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004d56:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004d58:	2202      	movs	r2, #2
 8004d5a:	0031      	movs	r1, r6
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	f005 ff7d 	bl	800ac5c <HAL_UART_Transmit>
    Debug_Tx((char*)bufd);

    SPI_flash_cs_low;
 8004d62:	4650      	mov	r0, sl
 8004d64:	2200      	movs	r2, #0
 8004d66:	2110      	movs	r1, #16
 8004d68:	f003 fd4c 	bl	8008804 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8004d6c:	239f      	movs	r3, #159	; 0x9f
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004d6e:	0031      	movs	r1, r6
 8004d70:	7033      	strb	r3, [r6, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	464b      	mov	r3, r9
 8004d76:	0038      	movs	r0, r7
 8004d78:	f004 ffa8 	bl	8009ccc <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004d7c:	2300      	movs	r3, #0
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004d7e:	4648      	mov	r0, r9
       aa[1]=0;
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
 8004d80:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004d82:	0022      	movs	r2, r4
 8004d84:	0021      	movs	r1, r4
       aa[0]=0;
 8004d86:	9306      	str	r3, [sp, #24]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004d88:	9000      	str	r0, [sp, #0]
 8004d8a:	3303      	adds	r3, #3
 8004d8c:	0038      	movs	r0, r7
 8004d8e:	f005 f869 	bl	8009e64 <HAL_SPI_TransmitReceive>
       aa[5]=0;
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
       SPI_flash_cs_high;
 8004d92:	4650      	mov	r0, sl
 8004d94:	2201      	movs	r2, #1
 8004d96:	2110      	movs	r1, #16
 8004d98:	f003 fd34 	bl	8008804 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8004d9c:	78a0      	ldrb	r0, [r4, #2]
 8004d9e:	7863      	ldrb	r3, [r4, #1]
 8004da0:	7822      	ldrb	r2, [r4, #0]
 8004da2:	4938      	ldr	r1, [pc, #224]	; (8004e84 <SPI_flash_get_device_ID+0x1c4>)
 8004da4:	9000      	str	r0, [sp, #0]
 8004da6:	0028      	movs	r0, r5
 8004da8:	f009 fdc0 	bl	800e92c <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004dac:	4640      	mov	r0, r8
 8004dae:	220c      	movs	r2, #12
 8004db0:	6803      	ldr	r3, [r0, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004db2:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004db4:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004db6:	f7fb f9a7 	bl	8000108 <strlen>
 8004dba:	465b      	mov	r3, fp
 8004dbc:	0029      	movs	r1, r5
 8004dbe:	b282      	uxth	r2, r0
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	f005 ff4b 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004dc6:	492e      	ldr	r1, [pc, #184]	; (8004e80 <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004dc8:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004dca:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004dcc:	2202      	movs	r2, #2
 8004dce:	0031      	movs	r1, r6
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f005 ff43 	bl	800ac5c <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);



       SPI_flash_cs_low;
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2110      	movs	r1, #16
 8004ddc:	f003 fd12 	bl	8008804 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8004de0:	234b      	movs	r3, #75	; 0x4b
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004de2:	0031      	movs	r1, r6
 8004de4:	7033      	strb	r3, [r6, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	464b      	mov	r3, r9
 8004dea:	0038      	movs	r0, r7
 8004dec:	f004 ff6e 	bl	8009ccc <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004df0:	2300      	movs	r3, #0
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
       aa[5]=0;
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8004df2:	0021      	movs	r1, r4
       aa[0]=0;
 8004df4:	9306      	str	r3, [sp, #24]
       aa[4]=0;
 8004df6:	80a3      	strh	r3, [r4, #4]
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8004df8:	2204      	movs	r2, #4
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	0038      	movs	r0, r7
 8004dfe:	f004 ff65 	bl	8009ccc <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004e02:	464b      	mov	r3, r9
 8004e04:	0022      	movs	r2, r4
 8004e06:	0021      	movs	r1, r4
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	0038      	movs	r0, r7
 8004e0c:	2306      	movs	r3, #6
 8004e0e:	f005 f829 	bl	8009e64 <HAL_SPI_TransmitReceive>
       SPI_flash_TransmitReceive(aa, 6);
       SPI_flash_cs_high;
 8004e12:	4650      	mov	r0, sl
 8004e14:	2201      	movs	r2, #1
 8004e16:	2110      	movs	r1, #16
 8004e18:	f003 fcf4 	bl	8008804 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 8004e1c:	7960      	ldrb	r0, [r4, #5]
 8004e1e:	7863      	ldrb	r3, [r4, #1]
 8004e20:	7822      	ldrb	r2, [r4, #0]
 8004e22:	9003      	str	r0, [sp, #12]
 8004e24:	7920      	ldrb	r0, [r4, #4]
 8004e26:	4918      	ldr	r1, [pc, #96]	; (8004e88 <SPI_flash_get_device_ID+0x1c8>)
 8004e28:	9002      	str	r0, [sp, #8]
 8004e2a:	78e0      	ldrb	r0, [r4, #3]
 8004e2c:	9001      	str	r0, [sp, #4]
 8004e2e:	78a0      	ldrb	r0, [r4, #2]
 8004e30:	9000      	str	r0, [sp, #0]
 8004e32:	0028      	movs	r0, r5
 8004e34:	f009 fd7a 	bl	800e92c <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e38:	4643      	mov	r3, r8
 8004e3a:	220c      	movs	r2, #12
 8004e3c:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004e3e:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e40:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004e42:	f7fb f961 	bl	8000108 <strlen>
 8004e46:	465b      	mov	r3, fp
 8004e48:	0029      	movs	r1, r5
 8004e4a:	b282      	uxth	r2, r0
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	f005 ff05 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004e52:	490b      	ldr	r1, [pc, #44]	; (8004e80 <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004e54:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004e56:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004e58:	2202      	movs	r2, #2
 8004e5a:	0031      	movs	r1, r6
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	f005 fefd 	bl	800ac5c <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);
}
 8004e62:	b023      	add	sp, #140	; 0x8c
 8004e64:	bcf0      	pop	{r4, r5, r6, r7}
 8004e66:	46bb      	mov	fp, r7
 8004e68:	46b2      	mov	sl, r6
 8004e6a:	46a9      	mov	r9, r5
 8004e6c:	46a0      	mov	r8, r4
 8004e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e70:	200049c8 	.word	0x200049c8
 8004e74:	08013480 	.word	0x08013480
 8004e78:	20004ba0 	.word	0x20004ba0
 8004e7c:	00001388 	.word	0x00001388
 8004e80:	00000a0d 	.word	0x00000a0d
 8004e84:	080134a0 	.word	0x080134a0
 8004e88:	080134bc 	.word	0x080134bc

08004e8c <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8004e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    SPI_flash_cs_low;
 8004e8e:	24a0      	movs	r4, #160	; 0xa0
 8004e90:	05e4      	lsls	r4, r4, #23
void SPI_flash_Sector_Erase(uint8_t* address) {
 8004e92:	b083      	sub	sp, #12
 8004e94:	0007      	movs	r7, r0
    SPI_flash_cs_low;
 8004e96:	2200      	movs	r2, #0
 8004e98:	0020      	movs	r0, r4
 8004e9a:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e9c:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 8004e9e:	f003 fcb1 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004ea2:	466a      	mov	r2, sp
 8004ea4:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004ea6:	4669      	mov	r1, sp
 8004ea8:	4d23      	ldr	r5, [pc, #140]	; (8004f38 <SPI_flash_Sector_Erase+0xac>)
 8004eaa:	00b6      	lsls	r6, r6, #2
 8004eac:	71d3      	strb	r3, [r2, #7]
 8004eae:	0028      	movs	r0, r5
 8004eb0:	0033      	movs	r3, r6
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	3107      	adds	r1, #7
 8004eb6:	f004 ff09 	bl	8009ccc <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004eba:	0020      	movs	r0, r4
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	2110      	movs	r1, #16
 8004ec0:	f003 fca0 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8004ec4:	0020      	movs	r0, r4
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2110      	movs	r1, #16
 8004eca:	f003 fc9b 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8004ece:	466a      	mov	r2, sp
 8004ed0:	2320      	movs	r3, #32
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004ed2:	4669      	mov	r1, sp
 8004ed4:	71d3      	strb	r3, [r2, #7]
 8004ed6:	0028      	movs	r0, r5
 8004ed8:	0033      	movs	r3, r6
 8004eda:	2201      	movs	r2, #1
 8004edc:	3107      	adds	r1, #7
 8004ede:	f004 fef5 	bl	8009ccc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004ee2:	0033      	movs	r3, r6
 8004ee4:	0039      	movs	r1, r7
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	0028      	movs	r0, r5
 8004eea:	f004 feef 	bl	8009ccc <HAL_SPI_Transmit>
    SPI_flash_sent_address (address);
    SPI_flash_cs_high;
 8004eee:	0020      	movs	r0, r4
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	f003 fc86 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8004ef8:	0020      	movs	r0, r4
 8004efa:	2200      	movs	r2, #0
 8004efc:	2110      	movs	r1, #16
 8004efe:	f003 fc81 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8004f02:	466a      	mov	r2, sp
 8004f04:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004f06:	4669      	mov	r1, sp
 8004f08:	71d3      	strb	r3, [r2, #7]
 8004f0a:	0028      	movs	r0, r5
 8004f0c:	0033      	movs	r3, r6
 8004f0e:	2201      	movs	r2, #1
 8004f10:	3107      	adds	r1, #7
 8004f12:	f004 fedb 	bl	8009ccc <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004f16:	0020      	movs	r0, r4
 8004f18:	2201      	movs	r2, #1
 8004f1a:	2110      	movs	r1, #16
 8004f1c:	f003 fc72 	bl	8008804 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004f20:	220c      	movs	r2, #12
 8004f22:	4806      	ldr	r0, [pc, #24]	; (8004f3c <SPI_flash_Sector_Erase+0xb0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8004f24:	4906      	ldr	r1, [pc, #24]	; (8004f40 <SPI_flash_Sector_Erase+0xb4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004f26:	6803      	ldr	r3, [r0, #0]
 8004f28:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8004f2a:	2396      	movs	r3, #150	; 0x96
 8004f2c:	0032      	movs	r2, r6
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	f005 ff06 	bl	800ad40 <HAL_UART_Receive>
    SPI_flash_Write_Disable();
    //HAL_Delay(100);
	Debug_Rx();
}
 8004f34:	b003      	add	sp, #12
 8004f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f38:	200049c8 	.word	0x200049c8
 8004f3c:	20004ba0 	.word	0x20004ba0
 8004f40:	20004c34 	.word	0x20004c34

08004f44 <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 8004f44:	b570      	push	{r4, r5, r6, lr}
    SPI_flash_cs_low;
 8004f46:	24a0      	movs	r4, #160	; 0xa0
 8004f48:	05e4      	lsls	r4, r4, #23
void SPI_flash_Chip_Erase(){
 8004f4a:	b082      	sub	sp, #8
    SPI_flash_cs_low;
 8004f4c:	0020      	movs	r0, r4
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004f52:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 8004f54:	f003 fc56 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004f58:	466a      	mov	r2, sp
 8004f5a:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004f5c:	4669      	mov	r1, sp
 8004f5e:	4d1c      	ldr	r5, [pc, #112]	; (8004fd0 <SPI_flash_Chip_Erase+0x8c>)
 8004f60:	00b6      	lsls	r6, r6, #2
 8004f62:	71d3      	strb	r3, [r2, #7]
 8004f64:	0028      	movs	r0, r5
 8004f66:	0033      	movs	r3, r6
 8004f68:	2201      	movs	r2, #1
 8004f6a:	3107      	adds	r1, #7
 8004f6c:	f004 feae 	bl	8009ccc <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004f70:	0020      	movs	r0, r4
 8004f72:	2201      	movs	r2, #1
 8004f74:	2110      	movs	r1, #16
 8004f76:	f003 fc45 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8004f7a:	0020      	movs	r0, r4
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2110      	movs	r1, #16
 8004f80:	f003 fc40 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 8004f84:	466a      	mov	r2, sp
 8004f86:	23c7      	movs	r3, #199	; 0xc7
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004f88:	4669      	mov	r1, sp
 8004f8a:	71d3      	strb	r3, [r2, #7]
 8004f8c:	0028      	movs	r0, r5
 8004f8e:	0033      	movs	r3, r6
 8004f90:	2201      	movs	r2, #1
 8004f92:	3107      	adds	r1, #7
 8004f94:	f004 fe9a 	bl	8009ccc <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004f98:	0020      	movs	r0, r4
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	2110      	movs	r1, #16
 8004f9e:	f003 fc31 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8004fa2:	0020      	movs	r0, r4
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	f003 fc2c 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8004fac:	466a      	mov	r2, sp
 8004fae:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004fb0:	4669      	mov	r1, sp
 8004fb2:	71d3      	strb	r3, [r2, #7]
 8004fb4:	0028      	movs	r0, r5
 8004fb6:	0033      	movs	r3, r6
 8004fb8:	2201      	movs	r2, #1
 8004fba:	3107      	adds	r1, #7
 8004fbc:	f004 fe86 	bl	8009ccc <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	2110      	movs	r1, #16
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	f003 fc1d 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
}
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	200049c8 	.word	0x200049c8

08004fd4 <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8004fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd6:	46ce      	mov	lr, r9
 8004fd8:	4647      	mov	r7, r8
    SPI_flash_cs_low;
 8004fda:	26a0      	movs	r6, #160	; 0xa0
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8004fdc:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 8004fde:	05f6      	lsls	r6, r6, #23
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	000f      	movs	r7, r1
 8004fe4:	4681      	mov	r9, r0
 8004fe6:	4690      	mov	r8, r2
    SPI_flash_cs_low;
 8004fe8:	0030      	movs	r0, r6
 8004fea:	2200      	movs	r2, #0
 8004fec:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004fee:	25fa      	movs	r5, #250	; 0xfa
    SPI_flash_cs_low;
 8004ff0:	f003 fc08 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004ff4:	466a      	mov	r2, sp
 8004ff6:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004ff8:	210f      	movs	r1, #15
 8004ffa:	4c29      	ldr	r4, [pc, #164]	; (80050a0 <SPI_flash_Page_Program+0xcc>)
 8004ffc:	00ad      	lsls	r5, r5, #2
 8004ffe:	73d3      	strb	r3, [r2, #15]
 8005000:	4469      	add	r1, sp
 8005002:	002b      	movs	r3, r5
 8005004:	2201      	movs	r2, #1
 8005006:	0020      	movs	r0, r4
 8005008:	f004 fe60 	bl	8009ccc <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 800500c:	0030      	movs	r0, r6
 800500e:	2201      	movs	r2, #1
 8005010:	2110      	movs	r1, #16
 8005012:	f003 fbf7 	bl	8008804 <HAL_GPIO_WritePin>
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8005016:	0030      	movs	r0, r6
 8005018:	2200      	movs	r2, #0
 800501a:	2110      	movs	r1, #16
 800501c:	f003 fbf2 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 8005020:	466a      	mov	r2, sp
 8005022:	2302      	movs	r3, #2
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005024:	210f      	movs	r1, #15
 8005026:	73d3      	strb	r3, [r2, #15]
 8005028:	4469      	add	r1, sp
 800502a:	002b      	movs	r3, r5
 800502c:	2201      	movs	r2, #1
 800502e:	0020      	movs	r0, r4
 8005030:	f004 fe4c 	bl	8009ccc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8005034:	002b      	movs	r3, r5
 8005036:	4649      	mov	r1, r9
 8005038:	2203      	movs	r2, #3
 800503a:	0020      	movs	r0, r4
 800503c:	f004 fe46 	bl	8009ccc <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8005040:	4643      	mov	r3, r8
 8005042:	003a      	movs	r2, r7
 8005044:	0039      	movs	r1, r7
 8005046:	0020      	movs	r0, r4
 8005048:	9500      	str	r5, [sp, #0]
 800504a:	f004 ff0b 	bl	8009e64 <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address (data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 800504e:	0030      	movs	r0, r6
 8005050:	2201      	movs	r2, #1
 8005052:	2110      	movs	r1, #16
 8005054:	f003 fbd6 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8005058:	0030      	movs	r0, r6
 800505a:	2200      	movs	r2, #0
 800505c:	2110      	movs	r1, #16
 800505e:	f003 fbd1 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8005062:	466a      	mov	r2, sp
 8005064:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005066:	210f      	movs	r1, #15
 8005068:	73d3      	strb	r3, [r2, #15]
 800506a:	4469      	add	r1, sp
 800506c:	002b      	movs	r3, r5
 800506e:	2201      	movs	r2, #1
 8005070:	0020      	movs	r0, r4
 8005072:	f004 fe2b 	bl	8009ccc <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8005076:	0030      	movs	r0, r6
 8005078:	2201      	movs	r2, #1
 800507a:	2110      	movs	r1, #16
 800507c:	f003 fbc2 	bl	8008804 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005080:	220c      	movs	r2, #12
 8005082:	4808      	ldr	r0, [pc, #32]	; (80050a4 <SPI_flash_Page_Program+0xd0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8005084:	4908      	ldr	r1, [pc, #32]	; (80050a8 <SPI_flash_Page_Program+0xd4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005086:	6803      	ldr	r3, [r0, #0]
 8005088:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 800508a:	2396      	movs	r3, #150	; 0x96
 800508c:	002a      	movs	r2, r5
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	f005 fe56 	bl	800ad40 <HAL_UART_Receive>
    SPI_flash_Write_Disable();

	Debug_Rx();
    //HAL_Delay(1);
}
 8005094:	b005      	add	sp, #20
 8005096:	bcc0      	pop	{r6, r7}
 8005098:	46b9      	mov	r9, r7
 800509a:	46b0      	mov	r8, r6
 800509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	200049c8 	.word	0x200049c8
 80050a4:	20004ba0 	.word	0x20004ba0
 80050a8:	20004c34 	.word	0x20004c34

080050ac <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 80050ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ae:	46ce      	mov	lr, r9
 80050b0:	4647      	mov	r7, r8
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 80050b2:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 80050b4:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 80050b6:	05db      	lsls	r3, r3, #23
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 80050b8:	b085      	sub	sp, #20
 80050ba:	000d      	movs	r5, r1
 80050bc:	4680      	mov	r8, r0
 80050be:	0016      	movs	r6, r2
    SPI_flash_cs_low;
 80050c0:	0018      	movs	r0, r3
 80050c2:	2200      	movs	r2, #0
 80050c4:	2110      	movs	r1, #16
 80050c6:	4699      	mov	r9, r3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80050c8:	27fa      	movs	r7, #250	; 0xfa
    SPI_flash_cs_low;
 80050ca:	f003 fb9b 	bl	8008804 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 80050ce:	210f      	movs	r1, #15
 80050d0:	2303      	movs	r3, #3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80050d2:	4c10      	ldr	r4, [pc, #64]	; (8005114 <SPI_flash_Read_Data+0x68>)
 80050d4:	4469      	add	r1, sp
 80050d6:	00bf      	lsls	r7, r7, #2
 80050d8:	700b      	strb	r3, [r1, #0]
 80050da:	2201      	movs	r2, #1
 80050dc:	003b      	movs	r3, r7
 80050de:	0020      	movs	r0, r4
 80050e0:	f004 fdf4 	bl	8009ccc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 80050e4:	003b      	movs	r3, r7
 80050e6:	4641      	mov	r1, r8
 80050e8:	2203      	movs	r2, #3
 80050ea:	0020      	movs	r0, r4
 80050ec:	f004 fdee 	bl	8009ccc <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 80050f0:	0033      	movs	r3, r6
 80050f2:	002a      	movs	r2, r5
 80050f4:	0029      	movs	r1, r5
 80050f6:	0020      	movs	r0, r4
 80050f8:	9700      	str	r7, [sp, #0]
 80050fa:	f004 feb3 	bl	8009e64 <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address(data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 80050fe:	2201      	movs	r2, #1
 8005100:	2110      	movs	r1, #16
 8005102:	4648      	mov	r0, r9
 8005104:	f003 fb7e 	bl	8008804 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8005108:	b005      	add	sp, #20
 800510a:	bcc0      	pop	{r6, r7}
 800510c:	46b9      	mov	r9, r7
 800510e:	46b0      	mov	r8, r6
 8005110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	200049c8 	.word	0x200049c8

08005118 <ReadQdata>:

}



int ReadQdata() {
 8005118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511a:	46d6      	mov	lr, sl
 800511c:	464f      	mov	r7, r9
 800511e:	4646      	mov	r6, r8
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 8005120:	2280      	movs	r2, #128	; 0x80
int ReadQdata() {
 8005122:	b5c0      	push	{r6, r7, lr}
	memset(ReadMData,0,4096);
 8005124:	4c3e      	ldr	r4, [pc, #248]	; (8005220 <ReadQdata+0x108>)
 8005126:	2100      	movs	r1, #0
int ReadQdata() {
 8005128:	b0c0      	sub	sp, #256	; 0x100
	memset(ReadMData,0,4096);
 800512a:	0152      	lsls	r2, r2, #5
 800512c:	0020      	movs	r0, r4
 800512e:	f009 fc69 	bl	800ea04 <memset>
	memset(ReadMDataS,0,4096);
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	4f3b      	ldr	r7, [pc, #236]	; (8005224 <ReadQdata+0x10c>)
 8005136:	0152      	lsls	r2, r2, #5
 8005138:	2100      	movs	r1, #0
 800513a:	0038      	movs	r0, r7
 800513c:	f009 fc62 	bl	800ea04 <memset>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8005140:	4b39      	ldr	r3, [pc, #228]	; (8005228 <ReadQdata+0x110>)
 8005142:	4698      	mov	r8, r3
 8005144:	4642      	mov	r2, r8
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	7852      	ldrb	r2, [r2, #1]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 800514e:	4a37      	ldr	r2, [pc, #220]	; (800522c <ReadQdata+0x114>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8005150:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 8005152:	4293      	cmp	r3, r2
 8005154:	dd50      	ble.n	80051f8 <ReadQdata+0xe0>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8005156:	4642      	mov	r2, r8
	WrtAdd[0]=addi/(256*256);
 8005158:	4641      	mov	r1, r8
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 800515a:	7892      	ldrb	r2, [r2, #2]
 800515c:	260f      	movs	r6, #15
 800515e:	18d3      	adds	r3, r2, r3
 8005160:	3b01      	subs	r3, #1
	WrtAdd[0]=addi/(256*256);
 8005162:	141a      	asrs	r2, r3, #16
 8005164:	700a      	strb	r2, [r1, #0]
		return 0;
	}
	incrimentAddress2(-1);
	int len=WrtAdd[1]%16;
	len=len+1;
	WrtAdd[1]=WrtAdd[1]/16;
 8005166:	22f0      	movs	r2, #240	; 0xf0
	WrtAdd[1]=(addi%(256*256))/256;
 8005168:	121b      	asrs	r3, r3, #8
	len=len+1;
 800516a:	401e      	ands	r6, r3
	WrtAdd[1]=WrtAdd[1]*16;
 800516c:	4013      	ands	r3, r2
 800516e:	704b      	strb	r3, [r1, #1]
	WrtAdd[2]=0;
 8005170:	2300      	movs	r3, #0
 8005172:	3601      	adds	r6, #1
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8005174:	0232      	lsls	r2, r6, #8
	WrtAdd[2]=0;
 8005176:	708b      	strb	r3, [r1, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8005178:	4640      	mov	r0, r8
 800517a:	0021      	movs	r1, r4
 800517c:	b292      	uxth	r2, r2
 800517e:	f7ff ff95 	bl	80050ac <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 8005182:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <ReadQdata+0x118>)
		memset(temp,0,256);
		for (int j=0;j<256;j++){
 8005184:	2580      	movs	r5, #128	; 0x80
 8005186:	469a      	mov	sl, r3
			if (temp[j]==255){
				temp[j]=0;
				break;
			}
		}
		temp[255]=0;
 8005188:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <ReadQdata+0x11c>)
 800518a:	3e01      	subs	r6, #1
 800518c:	4699      	mov	r9, r3
 800518e:	0236      	lsls	r6, r6, #8
 8005190:	1934      	adds	r4, r6, r4
		for (int j=0;j<256;j++){
 8005192:	006d      	lsls	r5, r5, #1
		memset(temp,0,256);
 8005194:	2100      	movs	r1, #0
 8005196:	22ff      	movs	r2, #255	; 0xff
 8005198:	4668      	mov	r0, sp
 800519a:	f009 fc33 	bl	800ea04 <memset>
		for (int j=0;j<256;j++){
 800519e:	4669      	mov	r1, sp
 80051a0:	2300      	movs	r3, #0
 80051a2:	e003      	b.n	80051ac <ReadQdata+0x94>
 80051a4:	3301      	adds	r3, #1
 80051a6:	3101      	adds	r1, #1
 80051a8:	42ab      	cmp	r3, r5
 80051aa:	d006      	beq.n	80051ba <ReadQdata+0xa2>
			temp[j]=ReadMData[(len-i)*256+j];
 80051ac:	5ce2      	ldrb	r2, [r4, r3]
 80051ae:	700a      	strb	r2, [r1, #0]
			if (temp[j]==255){
 80051b0:	2aff      	cmp	r2, #255	; 0xff
 80051b2:	d1f7      	bne.n	80051a4 <ReadQdata+0x8c>
				temp[j]=0;
 80051b4:	2200      	movs	r2, #0
 80051b6:	4669      	mov	r1, sp
 80051b8:	54ca      	strb	r2, [r1, r3]
		temp[255]=0;
 80051ba:	23ff      	movs	r3, #255	; 0xff
 80051bc:	2200      	movs	r2, #0
 80051be:	4669      	mov	r1, sp
 80051c0:	0038      	movs	r0, r7
 80051c2:	54ca      	strb	r2, [r1, r3]
		strcat(ReadMDataS,temp);
 80051c4:	f7fa ffa0 	bl	8000108 <strlen>
	for (int i=1;i<=len;i++){
 80051c8:	3e01      	subs	r6, #1
		strcat(ReadMDataS,temp);
 80051ca:	4669      	mov	r1, sp
 80051cc:	1838      	adds	r0, r7, r0
 80051ce:	f009 fcdf 	bl	800eb90 <stpcpy>
	for (int i=1;i<=len;i++){
 80051d2:	3c01      	subs	r4, #1
		strcat(ReadMDataS,"\r\n");
 80051d4:	2203      	movs	r2, #3
 80051d6:	4651      	mov	r1, sl
	for (int i=1;i<=len;i++){
 80051d8:	3eff      	subs	r6, #255	; 0xff
		strcat(ReadMDataS,"\r\n");
 80051da:	f009 fde5 	bl	800eda8 <memcpy>
	for (int i=1;i<=len;i++){
 80051de:	3cff      	subs	r4, #255	; 0xff
 80051e0:	454e      	cmp	r6, r9
 80051e2:	d1d7      	bne.n	8005194 <ReadQdata+0x7c>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 80051e4:	4640      	mov	r0, r8
 80051e6:	f7ff fe51 	bl	8004e8c <SPI_flash_Sector_Erase>
	return 1;
 80051ea:	2001      	movs	r0, #1
}
 80051ec:	b040      	add	sp, #256	; 0x100
 80051ee:	bce0      	pop	{r5, r6, r7}
 80051f0:	46ba      	mov	sl, r7
 80051f2:	46b1      	mov	r9, r6
 80051f4:	46a8      	mov	r8, r5
 80051f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80051f8:	220c      	movs	r2, #12
 80051fa:	4c0f      	ldr	r4, [pc, #60]	; (8005238 <ReadQdata+0x120>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80051fc:	490f      	ldr	r1, [pc, #60]	; (800523c <ReadQdata+0x124>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80051fe:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005200:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005202:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <ReadQdata+0x128>)
 8005206:	f005 fd29 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800520a:	466a      	mov	r2, sp
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <ReadQdata+0x12c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800520e:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 8005210:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005212:	0020      	movs	r0, r4
 8005214:	230a      	movs	r3, #10
 8005216:	2202      	movs	r2, #2
 8005218:	f005 fd20 	bl	800ac5c <HAL_UART_Transmit>
		return 0;
 800521c:	2000      	movs	r0, #0
}
 800521e:	e7e5      	b.n	80051ec <ReadQdata+0xd4>
 8005220:	20002098 	.word	0x20002098
 8005224:	20003098 	.word	0x20003098
 8005228:	200000c0 	.word	0x200000c0
 800522c:	000300ff 	.word	0x000300ff
 8005230:	080126d8 	.word	0x080126d8
 8005234:	ffffff00 	.word	0xffffff00
 8005238:	20004ba0 	.word	0x20004ba0
 800523c:	080134e0 	.word	0x080134e0
 8005240:	00001388 	.word	0x00001388
 8005244:	00000a0d 	.word	0x00000a0d

08005248 <InitMEMQ>:

void InitMEMQ(){
 8005248:	b570      	push	{r4, r5, r6, lr}
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 800524a:	4d24      	ldr	r5, [pc, #144]	; (80052dc <InitMEMQ+0x94>)
void InitMEMQ(){
 800524c:	b0c0      	sub	sp, #256	; 0x100
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 800524e:	782b      	ldrb	r3, [r5, #0]
 8005250:	786a      	ldrb	r2, [r5, #1]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 8005256:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <InitMEMQ+0x98>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8005258:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 800525a:	4293      	cmp	r3, r2
 800525c:	dd01      	ble.n	8005262 <InitMEMQ+0x1a>
		for(i=0;i<2;i++){
			ReadQdata();
		}
	}

}
 800525e:	b040      	add	sp, #256	; 0x100
 8005260:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005262:	220c      	movs	r2, #12
 8005264:	4c1f      	ldr	r4, [pc, #124]	; (80052e4 <InitMEMQ+0x9c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005266:	4920      	ldr	r1, [pc, #128]	; (80052e8 <InitMEMQ+0xa0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005268:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800526a:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800526c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800526e:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <InitMEMQ+0xa4>)
 8005270:	320f      	adds	r2, #15
 8005272:	f005 fcf3 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8005276:	466a      	mov	r2, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005278:	0020      	movs	r0, r4
		for(i=0;i<5;i++){
 800527a:	2400      	movs	r4, #0
	char newline[2] = "\r\n";
 800527c:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <InitMEMQ+0xa8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800527e:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 8005280:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005282:	230a      	movs	r3, #10
 8005284:	2202      	movs	r2, #2
 8005286:	f005 fce9 	bl	800ac5c <HAL_UART_Transmit>
 800528a:	4e1a      	ldr	r6, [pc, #104]	; (80052f4 <InitMEMQ+0xac>)
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 800528c:	0022      	movs	r2, r4
 800528e:	0023      	movs	r3, r4
 8005290:	0031      	movs	r1, r6
 8005292:	4668      	mov	r0, sp
 8005294:	f009 fb4a 	bl	800e92c <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 8005298:	4668      	mov	r0, sp
 800529a:	f7fa ff35 	bl	8000108 <strlen>
 800529e:	3001      	adds	r0, #1
 80052a0:	b282      	uxth	r2, r0
	if (len<255){
 80052a2:	2afe      	cmp	r2, #254	; 0xfe
 80052a4:	d907      	bls.n	80052b6 <InitMEMQ+0x6e>
		for(i=0;i<5;i++){
 80052a6:	3401      	adds	r4, #1
 80052a8:	2c05      	cmp	r4, #5
 80052aa:	d1ef      	bne.n	800528c <InitMEMQ+0x44>
			ReadQdata();
 80052ac:	f7ff ff34 	bl	8005118 <ReadQdata>
 80052b0:	f7ff ff32 	bl	8005118 <ReadQdata>
}
 80052b4:	e7d3      	b.n	800525e <InitMEMQ+0x16>
		SPI_flash_Page_Program(WrtAdd, data,len);
 80052b6:	4669      	mov	r1, sp
 80052b8:	0028      	movs	r0, r5
 80052ba:	f7ff fe8b 	bl	8004fd4 <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 80052be:	782b      	ldrb	r3, [r5, #0]
 80052c0:	786a      	ldrb	r2, [r5, #1]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	78aa      	ldrb	r2, [r5, #2]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	3301      	adds	r3, #1
 80052ce:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 80052d0:	141a      	asrs	r2, r3, #16
 80052d2:	702a      	strb	r2, [r5, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 80052d4:	121a      	asrs	r2, r3, #8
 80052d6:	706a      	strb	r2, [r5, #1]
	WrtAdd[2]=(addi)%256;
 80052d8:	70ab      	strb	r3, [r5, #2]
}
 80052da:	e7e4      	b.n	80052a6 <InitMEMQ+0x5e>
 80052dc:	200000c0 	.word	0x200000c0
 80052e0:	000300ff 	.word	0x000300ff
 80052e4:	20004ba0 	.word	0x20004ba0
 80052e8:	080134f0 	.word	0x080134f0
 80052ec:	00001388 	.word	0x00001388
 80052f0:	00000a0d 	.word	0x00000a0d
 80052f4:	0801350c 	.word	0x0801350c

080052f8 <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80052f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fa:	46de      	mov	lr, fp
 80052fc:	4657      	mov	r7, sl
 80052fe:	464e      	mov	r6, r9
 8005300:	4645      	mov	r5, r8
 8005302:	b5e0      	push	{r5, r6, r7, lr}
 8005304:	4c60      	ldr	r4, [pc, #384]	; (8005488 <writeConfig+0x190>)
 8005306:	4699      	mov	r9, r3
 8005308:	44a5      	add	sp, r4
 800530a:	9bd0      	ldr	r3, [sp, #832]	; 0x340
 800530c:	4692      	mov	sl, r2
 800530e:	4698      	mov	r8, r3
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 8005310:	4b5e      	ldr	r3, [pc, #376]	; (800548c <writeConfig+0x194>)
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8005312:	000f      	movs	r7, r1
	uint8_t add[]={0x00,0x00,0x00};
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	a902      	add	r1, sp, #8
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8005318:	9ece      	ldr	r6, [sp, #824]	; 0x338
 800531a:	9dcf      	ldr	r5, [sp, #828]	; 0x33c
	uint8_t add[]={0x00,0x00,0x00};
 800531c:	808a      	strh	r2, [r1, #4]

	SPI_flash_Read_Data(add , data1 , 256);
 800531e:	2280      	movs	r2, #128	; 0x80
	uint8_t add[]={0x00,0x00,0x00};
 8005320:	789b      	ldrb	r3, [r3, #2]
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8005322:	4683      	mov	fp, r0
	uint8_t add[]={0x00,0x00,0x00};
 8005324:	718b      	strb	r3, [r1, #6]
	SPI_flash_Read_Data(add , data1 , 256);
 8005326:	0052      	lsls	r2, r2, #1
 8005328:	a904      	add	r1, sp, #16
 800532a:	a803      	add	r0, sp, #12
 800532c:	f7ff febe 	bl	80050ac <SPI_flash_Read_Data>
	add[1]=0x01;
 8005330:	2301      	movs	r3, #1
 8005332:	aa02      	add	r2, sp, #8
 8005334:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data2 , 256);
 8005336:	2280      	movs	r2, #128	; 0x80
 8005338:	a944      	add	r1, sp, #272	; 0x110
 800533a:	0052      	lsls	r2, r2, #1
 800533c:	a803      	add	r0, sp, #12
 800533e:	f7ff feb5 	bl	80050ac <SPI_flash_Read_Data>
	add[1]=0x02;
 8005342:	2302      	movs	r3, #2
 8005344:	aa02      	add	r2, sp, #8
 8005346:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data3 , 256);
 8005348:	2280      	movs	r2, #128	; 0x80
 800534a:	a984      	add	r1, sp, #528	; 0x210
 800534c:	0052      	lsls	r2, r2, #1
 800534e:	a803      	add	r0, sp, #12
 8005350:	f7ff feac 	bl	80050ac <SPI_flash_Read_Data>



	int i=0;
	int j=0;
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8005354:	465b      	mov	r3, fp
	SPI_flash_Read_Data(add , data3 , 256);
 8005356:	2401      	movs	r4, #1
 8005358:	3b01      	subs	r3, #1
 800535a:	9301      	str	r3, [sp, #4]
		data1[j+i]=RegNo[i];
 800535c:	9b01      	ldr	r3, [sp, #4]
 800535e:	aa02      	add	r2, sp, #8
 8005360:	5d1b      	ldrb	r3, [r3, r4]
 8005362:	3207      	adds	r2, #7
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8005364:	4658      	mov	r0, fp
		data1[j+i]=RegNo[i];
 8005366:	5513      	strb	r3, [r2, r4]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8005368:	f7fa fece 	bl	8000108 <strlen>
 800536c:	42a0      	cmp	r0, r4
 800536e:	d302      	bcc.n	8005376 <writeConfig+0x7e>
 8005370:	3401      	adds	r4, #1
 8005372:	2c11      	cmp	r4, #17
 8005374:	d1f2      	bne.n	800535c <writeConfig+0x64>
 8005376:	2400      	movs	r4, #0
 8005378:	e001      	b.n	800537e <writeConfig+0x86>
	}
	j=j+RegNoLen;

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 800537a:	2c64      	cmp	r4, #100	; 0x64
 800537c:	d009      	beq.n	8005392 <writeConfig+0x9a>
		data1[j+i]=INSMS[i];
 800537e:	5d3a      	ldrb	r2, [r7, r4]
 8005380:	ab04      	add	r3, sp, #16
 8005382:	191b      	adds	r3, r3, r4
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8005384:	0038      	movs	r0, r7
		data1[j+i]=INSMS[i];
 8005386:	741a      	strb	r2, [r3, #16]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8005388:	3401      	adds	r4, #1
 800538a:	f7fa febd 	bl	8000108 <strlen>
 800538e:	42a0      	cmp	r0, r4
 8005390:	d2f3      	bcs.n	800537a <writeConfig+0x82>
 8005392:	2700      	movs	r7, #0
 8005394:	ac21      	add	r4, sp, #132	; 0x84
 8005396:	e001      	b.n	800539c <writeConfig+0xa4>
	}
	j=j+INSMSLen;

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8005398:	2f3c      	cmp	r7, #60	; 0x3c
 800539a:	d008      	beq.n	80053ae <writeConfig+0xb6>
		data1[j+i]=OUTSMS[i];
 800539c:	4653      	mov	r3, sl
 800539e:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 80053a0:	4650      	mov	r0, sl
		data1[j+i]=OUTSMS[i];
 80053a2:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 80053a4:	3701      	adds	r7, #1
 80053a6:	f7fa feaf 	bl	8000108 <strlen>
 80053aa:	42b8      	cmp	r0, r7
 80053ac:	d2f4      	bcs.n	8005398 <writeConfig+0xa0>
 80053ae:	ab02      	add	r3, sp, #8
 80053b0:	469c      	mov	ip, r3
 80053b2:	2301      	movs	r3, #1
 80053b4:	2408      	movs	r4, #8
 80053b6:	425b      	negs	r3, r3
 80053b8:	34ff      	adds	r4, #255	; 0xff
 80053ba:	444b      	add	r3, r9
 80053bc:	2701      	movs	r7, #1
 80053be:	469a      	mov	sl, r3
 80053c0:	4464      	add	r4, ip
 80053c2:	e002      	b.n	80053ca <writeConfig+0xd2>
	}
	j=0;
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 80053c4:	3701      	adds	r7, #1
 80053c6:	2f29      	cmp	r7, #41	; 0x29
 80053c8:	d007      	beq.n	80053da <writeConfig+0xe2>
		data2[j+i]=EmgIP[i];
 80053ca:	4653      	mov	r3, sl
 80053cc:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 80053ce:	4648      	mov	r0, r9
		data2[j+i]=EmgIP[i];
 80053d0:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 80053d2:	f7fa fe99 	bl	8000108 <strlen>
 80053d6:	42b8      	cmp	r0, r7
 80053d8:	d2f4      	bcs.n	80053c4 <writeConfig+0xcc>
 80053da:	2700      	movs	r7, #0
 80053dc:	ac4e      	add	r4, sp, #312	; 0x138
 80053de:	e001      	b.n	80053e4 <writeConfig+0xec>
	}
	j=j+EmgIPLen;

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 80053e0:	2f28      	cmp	r7, #40	; 0x28
 80053e2:	d007      	beq.n	80053f4 <writeConfig+0xfc>
		data2[j+i]=RegIP[i];
 80053e4:	5df3      	ldrb	r3, [r6, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 80053e6:	0030      	movs	r0, r6
		data2[j+i]=RegIP[i];
 80053e8:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 80053ea:	3701      	adds	r7, #1
 80053ec:	f7fa fe8c 	bl	8000108 <strlen>
 80053f0:	4287      	cmp	r7, r0
 80053f2:	d9f5      	bls.n	80053e0 <writeConfig+0xe8>
 80053f4:	2600      	movs	r6, #0
 80053f6:	ac58      	add	r4, sp, #352	; 0x160
 80053f8:	e001      	b.n	80053fe <writeConfig+0x106>
	}
	j=j+RegIPLen;


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 80053fa:	2e28      	cmp	r6, #40	; 0x28
 80053fc:	d007      	beq.n	800540e <writeConfig+0x116>
		data2[j+i]=TrackIP[i];
 80053fe:	5dab      	ldrb	r3, [r5, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8005400:	0028      	movs	r0, r5
		data2[j+i]=TrackIP[i];
 8005402:	55a3      	strb	r3, [r4, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8005404:	3601      	adds	r6, #1
 8005406:	f7fa fe7f 	bl	8000108 <strlen>
 800540a:	42b0      	cmp	r0, r6
 800540c:	d2f5      	bcs.n	80053fa <writeConfig+0x102>
 800540e:	ab02      	add	r3, sp, #8
 8005410:	469c      	mov	ip, r3
	}
	j=0;


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 8005412:	2702      	movs	r7, #2
 8005414:	4643      	mov	r3, r8
 8005416:	4d1e      	ldr	r5, [pc, #120]	; (8005490 <writeConfig+0x198>)
 8005418:	2401      	movs	r4, #1
 800541a:	4465      	add	r5, ip
 800541c:	1e5e      	subs	r6, r3, #1
 800541e:	37ff      	adds	r7, #255	; 0xff
 8005420:	e002      	b.n	8005428 <writeConfig+0x130>
 8005422:	3401      	adds	r4, #1
 8005424:	42bc      	cmp	r4, r7
 8005426:	d006      	beq.n	8005436 <writeConfig+0x13e>
		data3[j+i]=OtherData[i];
 8005428:	5d33      	ldrb	r3, [r6, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 800542a:	4640      	mov	r0, r8
		data3[j+i]=OtherData[i];
 800542c:	552b      	strb	r3, [r5, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 800542e:	f7fa fe6b 	bl	8000108 <strlen>
 8005432:	42a0      	cmp	r0, r4
 8005434:	d2f5      	bcs.n	8005422 <writeConfig+0x12a>
	}
	j=j+OtherDataLen;


	add[1]=0x00;
 8005436:	2300      	movs	r3, #0
 8005438:	aa02      	add	r2, sp, #8
 800543a:	7153      	strb	r3, [r2, #5]

	SPI_flash_Sector_Erase(add);
 800543c:	a803      	add	r0, sp, #12
 800543e:	f7ff fd25 	bl	8004e8c <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	a904      	add	r1, sp, #16
 8005446:	a803      	add	r0, sp, #12
 8005448:	0052      	lsls	r2, r2, #1
 800544a:	f7ff fdc3 	bl	8004fd4 <SPI_flash_Page_Program>
	add[1]=0x01;
 800544e:	2301      	movs	r3, #1
 8005450:	aa02      	add	r2, sp, #8
 8005452:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data2,256);
 8005454:	2280      	movs	r2, #128	; 0x80
 8005456:	a944      	add	r1, sp, #272	; 0x110
 8005458:	a803      	add	r0, sp, #12
 800545a:	0052      	lsls	r2, r2, #1
 800545c:	f7ff fdba 	bl	8004fd4 <SPI_flash_Page_Program>
	add[1]=0x02;
 8005460:	2302      	movs	r3, #2
 8005462:	aa02      	add	r2, sp, #8
 8005464:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data3,256);
 8005466:	2280      	movs	r2, #128	; 0x80
 8005468:	a803      	add	r0, sp, #12
 800546a:	0052      	lsls	r2, r2, #1
 800546c:	a984      	add	r1, sp, #528	; 0x210
 800546e:	f7ff fdb1 	bl	8004fd4 <SPI_flash_Page_Program>
	return 1;

}
 8005472:	2001      	movs	r0, #1
 8005474:	23c5      	movs	r3, #197	; 0xc5
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	449d      	add	sp, r3
 800547a:	bcf0      	pop	{r4, r5, r6, r7}
 800547c:	46bb      	mov	fp, r7
 800547e:	46b2      	mov	sl, r6
 8005480:	46a9      	mov	r9, r5
 8005482:	46a0      	mov	r8, r4
 8005484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	fffffcec 	.word	0xfffffcec
 800548c:	08012540 	.word	0x08012540
 8005490:	00000207 	.word	0x00000207

08005494 <readRegNo>:



char* readRegNo(){
 8005494:	b510      	push	{r4, lr}
 8005496:	b082      	sub	sp, #8
	uint8_t add4[]={0x00, 0x00,0x00};
 8005498:	4669      	mov	r1, sp
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <readRegNo+0x3c>)

    memset(dataR,0,256);
 800549c:	4c0d      	ldr	r4, [pc, #52]	; (80054d4 <readRegNo+0x40>)
	uint8_t add4[]={0x00, 0x00,0x00};
 800549e:	881a      	ldrh	r2, [r3, #0]
    memset(dataR,0,256);
 80054a0:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 80054a2:	808a      	strh	r2, [r1, #4]
    memset(dataR,0,256);
 80054a4:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 80054a6:	789b      	ldrb	r3, [r3, #2]
    memset(dataR,0,256);
 80054a8:	0052      	lsls	r2, r2, #1
	uint8_t add4[]={0x00, 0x00,0x00};
 80054aa:	718b      	strb	r3, [r1, #6]
    memset(dataR,0,256);
 80054ac:	2100      	movs	r1, #0
 80054ae:	f009 faa9 	bl	800ea04 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 80054b2:	a801      	add	r0, sp, #4
 80054b4:	2210      	movs	r2, #16
 80054b6:	0021      	movs	r1, r4
 80054b8:	f7ff fdf8 	bl	80050ac <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 80054bc:	0020      	movs	r0, r4
 80054be:	f7fa fe23 	bl	8000108 <strlen>
 80054c2:	2801      	cmp	r0, #1
 80054c4:	d800      	bhi.n	80054c8 <readRegNo+0x34>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
	}
	else{
		return "--Err RegNo--";
 80054c6:	4c04      	ldr	r4, [pc, #16]	; (80054d8 <readRegNo+0x44>)
	}

}
 80054c8:	0020      	movs	r0, r4
 80054ca:	b002      	add	sp, #8
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	08012540 	.word	0x08012540
 80054d4:	20004154 	.word	0x20004154
 80054d8:	080135e4 	.word	0x080135e4

080054dc <detectAcc>:


int detectAcc(){
 80054dc:	b570      	push	{r4, r5, r6, lr}
	readAcc();
 80054de:	f7fd fef9 	bl	80032d4 <readAcc.isra.0>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 80054e2:	4c14      	ldr	r4, [pc, #80]	; (8005534 <detectAcc+0x58>)
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	f7fb f888 	bl	80005fc <__aeabi_fadd>
 80054ec:	68a1      	ldr	r1, [r4, #8]
 80054ee:	f7fb f885 	bl	80005fc <__aeabi_fadd>
 80054f2:	4911      	ldr	r1, [pc, #68]	; (8005538 <detectAcc+0x5c>)
 80054f4:	1c05      	adds	r5, r0, #0
 80054f6:	f7fa fffd 	bl	80004f4 <__aeabi_fcmpgt>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d115      	bne.n	800552a <detectAcc+0x4e>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 80054fe:	490f      	ldr	r1, [pc, #60]	; (800553c <detectAcc+0x60>)
 8005500:	1c28      	adds	r0, r5, #0
 8005502:	f7fa ffe3 	bl	80004cc <__aeabi_fcmplt>
 8005506:	2800      	cmp	r0, #0
 8005508:	d111      	bne.n	800552e <detectAcc+0x52>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 800550a:	6921      	ldr	r1, [r4, #16]
 800550c:	68e0      	ldr	r0, [r4, #12]
 800550e:	f7fb f875 	bl	80005fc <__aeabi_fadd>
 8005512:	6961      	ldr	r1, [r4, #20]
 8005514:	f7fb f872 	bl	80005fc <__aeabi_fadd>
 8005518:	4907      	ldr	r1, [pc, #28]	; (8005538 <detectAcc+0x5c>)
 800551a:	f7fa ffeb 	bl	80004f4 <__aeabi_fcmpgt>


	return 0;
 800551e:	1e43      	subs	r3, r0, #1
 8005520:	4198      	sbcs	r0, r3
 8005522:	4243      	negs	r3, r0
 8005524:	2003      	movs	r0, #3
 8005526:	4018      	ands	r0, r3
}
 8005528:	bd70      	pop	{r4, r5, r6, pc}
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 800552a:	2001      	movs	r0, #1
 800552c:	e7fc      	b.n	8005528 <detectAcc+0x4c>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 800552e:	2002      	movs	r0, #2
 8005530:	e7fa      	b.n	8005528 <detectAcc+0x4c>
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	20000324 	.word	0x20000324
 8005538:	44fa0000 	.word	0x44fa0000
 800553c:	c4fa0000 	.word	0xc4fa0000

08005540 <initGPS>:
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 8005540:	2300      	movs	r3, #0
void initGPS(){
 8005542:	b570      	push	{r4, r5, r6, lr}
	GPSInfo.lat=0.0;
 8005544:	4c0d      	ldr	r4, [pc, #52]	; (800557c <initGPS+0x3c>)
	GPSInfo.pdop=0.0;
	GPSInfo.head=0.0;
	GPSInfo.speed=0.0;
	GPSInfo.fix=0;
	GPSInfo.sat=0;
	strcpy(GPSInfo.latD,"x");
 8005546:	2678      	movs	r6, #120	; 0x78
	strcpy(GPSInfo.lonD,"x");
 8005548:	0020      	movs	r0, r4
	GPSInfo.lat=0.0;
 800554a:	6023      	str	r3, [r4, #0]
	GPSInfo.lon=0.0;
 800554c:	6063      	str	r3, [r4, #4]
	GPSInfo.alt=0.0;
 800554e:	60a3      	str	r3, [r4, #8]
	GPSInfo.hdop=0.0;
 8005550:	60e3      	str	r3, [r4, #12]
	GPSInfo.pdop=0.0;
 8005552:	6123      	str	r3, [r4, #16]
	GPSInfo.head=0.0;
 8005554:	6163      	str	r3, [r4, #20]
	GPSInfo.speed=0.0;
 8005556:	61a3      	str	r3, [r4, #24]
	GPSInfo.fix=0;
 8005558:	2300      	movs	r3, #0
	strcpy(GPSInfo.lonD,"x");
 800555a:	4d09      	ldr	r5, [pc, #36]	; (8005580 <initGPS+0x40>)
	strcpy(GPSInfo.latD,"x");
 800555c:	8526      	strh	r6, [r4, #40]	; 0x28
	strcpy(GPSInfo.lonD,"x");
 800555e:	0029      	movs	r1, r5
 8005560:	2202      	movs	r2, #2
 8005562:	302b      	adds	r0, #43	; 0x2b
	GPSInfo.fix=0;
 8005564:	61e3      	str	r3, [r4, #28]
	GPSInfo.sat=0;
 8005566:	6223      	str	r3, [r4, #32]
	strcpy(GPSInfo.lonD,"x");
 8005568:	f009 fc1e 	bl	800eda8 <memcpy>
	strcpy(GPSInfo.time,"x");
	strcpy(GPSInfo.date,"x");
 800556c:	0020      	movs	r0, r4
 800556e:	0029      	movs	r1, r5
	strcpy(GPSInfo.time,"x");
 8005570:	85e6      	strh	r6, [r4, #46]	; 0x2e
	strcpy(GPSInfo.date,"x");
 8005572:	2202      	movs	r2, #2
 8005574:	303d      	adds	r0, #61	; 0x3d
 8005576:	f009 fc17 	bl	800eda8 <memcpy>
}
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	20000674 	.word	0x20000674
 8005580:	080135f4 	.word	0x080135f4

08005584 <getGPSString>:
void getGPSString(){
 8005584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005586:	46c6      	mov	lr, r8
 8005588:	b500      	push	{lr}
	memset(gpsDataRet,0,70);
 800558a:	4e29      	ldr	r6, [pc, #164]	; (8005630 <getGPSString+0xac>)
 800558c:	2246      	movs	r2, #70	; 0x46
 800558e:	2100      	movs	r1, #0
 8005590:	0030      	movs	r0, r6
void getGPSString(){
 8005592:	b096      	sub	sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 8005594:	f009 fa36 	bl	800ea04 <memset>

	if(GPSInfo.fix==1){
 8005598:	4c26      	ldr	r4, [pc, #152]	; (8005634 <getGPSString+0xb0>)
 800559a:	69e3      	ldr	r3, [r4, #28]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d040      	beq.n	8005622 <getGPSString+0x9e>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 80055a0:	2200      	movs	r2, #0
 80055a2:	2104      	movs	r1, #4
 80055a4:	4824      	ldr	r0, [pc, #144]	; (8005638 <getGPSString+0xb4>)
 80055a6:	f003 f92d 	bl	8008804 <HAL_GPIO_WritePin>
	}




	sprintf(gpsDataRet, "%1d,%s,%s,%0.6f,%1s,%0.6f,%s,%0.1f,%0.2f,%d,%0.1f,%0.1f,%0.1f",
 80055aa:	233d      	movs	r3, #61	; 0x3d
 80055ac:	68e0      	ldr	r0, [r4, #12]
 80055ae:	4698      	mov	r8, r3
 80055b0:	f7fd fd7e 	bl	80030b0 <__aeabi_f2d>
 80055b4:	69e7      	ldr	r7, [r4, #28]
 80055b6:	9014      	str	r0, [sp, #80]	; 0x50
 80055b8:	9115      	str	r1, [sp, #84]	; 0x54
 80055ba:	6920      	ldr	r0, [r4, #16]
 80055bc:	f7fd fd78 	bl	80030b0 <__aeabi_f2d>
 80055c0:	9012      	str	r0, [sp, #72]	; 0x48
 80055c2:	9113      	str	r1, [sp, #76]	; 0x4c
 80055c4:	68a0      	ldr	r0, [r4, #8]
 80055c6:	f7fd fd73 	bl	80030b0 <__aeabi_f2d>
 80055ca:	9010      	str	r0, [sp, #64]	; 0x40
 80055cc:	9111      	str	r1, [sp, #68]	; 0x44
 80055ce:	6a23      	ldr	r3, [r4, #32]
 80055d0:	4d1a      	ldr	r5, [pc, #104]	; (800563c <getGPSString+0xb8>)
 80055d2:	930e      	str	r3, [sp, #56]	; 0x38
 80055d4:	6960      	ldr	r0, [r4, #20]
 80055d6:	f7fd fd6b 	bl	80030b0 <__aeabi_f2d>
 80055da:	900c      	str	r0, [sp, #48]	; 0x30
 80055dc:	910d      	str	r1, [sp, #52]	; 0x34
 80055de:	69a0      	ldr	r0, [r4, #24]
 80055e0:	f7fd fd66 	bl	80030b0 <__aeabi_f2d>
 80055e4:	0023      	movs	r3, r4
 80055e6:	900a      	str	r0, [sp, #40]	; 0x28
 80055e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80055ea:	332b      	adds	r3, #43	; 0x2b
 80055ec:	9308      	str	r3, [sp, #32]
 80055ee:	6860      	ldr	r0, [r4, #4]
 80055f0:	f7fd fd5e 	bl	80030b0 <__aeabi_f2d>
 80055f4:	0023      	movs	r3, r4
 80055f6:	9006      	str	r0, [sp, #24]
 80055f8:	9107      	str	r1, [sp, #28]
 80055fa:	3328      	adds	r3, #40	; 0x28
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	f7fd fd56 	bl	80030b0 <__aeabi_f2d>
 8005604:	44a0      	add	r8, r4
 8005606:	342e      	adds	r4, #46	; 0x2e
 8005608:	9002      	str	r0, [sp, #8]
 800560a:	9103      	str	r1, [sp, #12]
 800560c:	4643      	mov	r3, r8
 800560e:	003a      	movs	r2, r7
 8005610:	0029      	movs	r1, r5
 8005612:	0030      	movs	r0, r6
 8005614:	9400      	str	r4, [sp, #0]
 8005616:	f009 f989 	bl	800e92c <siprintf>
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
}
 800561a:	b016      	add	sp, #88	; 0x58
 800561c:	bc80      	pop	{r7}
 800561e:	46b8      	mov	r8, r7
 8005620:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 8005622:	2201      	movs	r2, #1
 8005624:	2104      	movs	r1, #4
 8005626:	4804      	ldr	r0, [pc, #16]	; (8005638 <getGPSString+0xb4>)
 8005628:	f003 f8ec 	bl	8008804 <HAL_GPIO_WritePin>
}
 800562c:	e7bd      	b.n	80055aa <getGPSString+0x26>
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	200046bc 	.word	0x200046bc
 8005634:	20000674 	.word	0x20000674
 8005638:	50000c00 	.word	0x50000c00
 800563c:	080135f8 	.word	0x080135f8

08005640 <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 8005640:	b510      	push	{r4, lr}
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8005642:	212a      	movs	r1, #42	; 0x2a
uint8_t nmea_valid_checksum(const char *message) {
 8005644:	0004      	movs	r4, r0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8005646:	f009 f9f2 	bl	800ea2e <strchr>
 800564a:	2100      	movs	r1, #0
 800564c:	2210      	movs	r2, #16
 800564e:	3001      	adds	r0, #1
 8005650:	f008 f9e2 	bl	800da18 <strtol>

    char p;
    uint8_t sum = 0;
    ++message;
    while ((p = *message++) != '*') {
 8005654:	7863      	ldrb	r3, [r4, #1]
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8005656:	b2c1      	uxtb	r1, r0
    while ((p = *message++) != '*') {
 8005658:	2b2a      	cmp	r3, #42	; 0x2a
 800565a:	d00c      	beq.n	8005676 <nmea_valid_checksum+0x36>
    uint8_t sum = 0;
 800565c:	2200      	movs	r2, #0
 800565e:	3402      	adds	r4, #2
    while ((p = *message++) != '*') {
 8005660:	3401      	adds	r4, #1
        sum ^= p;
 8005662:	405a      	eors	r2, r3
    while ((p = *message++) != '*') {
 8005664:	1e63      	subs	r3, r4, #1
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b2a      	cmp	r3, #42	; 0x2a
 800566a:	d1f9      	bne.n	8005660 <nmea_valid_checksum+0x20>
    }

    if (sum != checksum) {
 800566c:	1a88      	subs	r0, r1, r2
 800566e:	4243      	negs	r3, r0
 8005670:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
}
 8005672:	b2c0      	uxtb	r0, r0
 8005674:	bd10      	pop	{r4, pc}
    uint8_t sum = 0;
 8005676:	2200      	movs	r2, #0
 8005678:	e7f8      	b.n	800566c <nmea_valid_checksum+0x2c>
 800567a:	46c0      	nop			; (mov r8, r8)

0800567c <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 800567c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567e:	46ce      	mov	lr, r9
 8005680:	4647      	mov	r7, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005682:	220c      	movs	r2, #12
 8005684:	b580      	push	{r7, lr}
 8005686:	4e36      	ldr	r6, [pc, #216]	; (8005760 <TestMEM+0xe4>)
 8005688:	b087      	sub	sp, #28
 800568a:	6833      	ldr	r3, [r6, #0]
	char newline[2] = "\r\n";
 800568c:	ad05      	add	r5, sp, #20
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800568e:	621a      	str	r2, [r3, #32]
 8005690:	4690      	mov	r8, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005692:	4934      	ldr	r1, [pc, #208]	; (8005764 <TestMEM+0xe8>)
 8005694:	4b34      	ldr	r3, [pc, #208]	; (8005768 <TestMEM+0xec>)
	char newline[2] = "\r\n";
 8005696:	4f35      	ldr	r7, [pc, #212]	; (800576c <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005698:	3215      	adds	r2, #21
 800569a:	0030      	movs	r0, r6
 800569c:	f005 fade 	bl	800ac5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80056a0:	230a      	movs	r3, #10
 80056a2:	2202      	movs	r2, #2
 80056a4:	0029      	movs	r1, r5
 80056a6:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 80056a8:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80056aa:	f005 fad7 	bl	800ac5c <HAL_UART_Transmit>
	int i=0;
	Debug_Tx("------------------Testing Memory:");
	for(i=0;i<1;i++){
		SPI_flash_get_device_ID( );
 80056ae:	f7ff fb07 	bl	8004cc0 <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 80056b2:	4c2f      	ldr	r4, [pc, #188]	; (8005770 <TestMEM+0xf4>)
 80056b4:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <TestMEM+0xf8>)
 80056b6:	0022      	movs	r2, r4
 80056b8:	320c      	adds	r2, #12
 80056ba:	4691      	mov	r9, r2
 80056bc:	2268      	movs	r2, #104	; 0x68
 80056be:	4694      	mov	ip, r2
 80056c0:	44a4      	add	ip, r4
 80056c2:	4662      	mov	r2, ip
 80056c4:	0021      	movs	r1, r4
 80056c6:	0020      	movs	r0, r4
 80056c8:	3134      	adds	r1, #52	; 0x34
 80056ca:	9202      	str	r2, [sp, #8]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	464a      	mov	r2, r9
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	3058      	adds	r0, #88	; 0x58
 80056d4:	f7ff fe10 	bl	80052f8 <writeConfig>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80056d8:	4642      	mov	r2, r8
 80056da:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80056dc:	4926      	ldr	r1, [pc, #152]	; (8005778 <TestMEM+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80056de:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80056e0:	0030      	movs	r0, r6
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <TestMEM+0xec>)
 80056e4:	3203      	adds	r2, #3
 80056e6:	f005 fab9 	bl	800ac5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80056ea:	230a      	movs	r3, #10
 80056ec:	2202      	movs	r2, #2
 80056ee:	0029      	movs	r1, r5
 80056f0:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 80056f2:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80056f4:	f005 fab2 	bl	800ac5c <HAL_UART_Transmit>
    memset(dataR,0,256);
 80056f8:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 80056fa:	8823      	ldrh	r3, [r4, #0]
    memset(dataR,0,256);
 80056fc:	2100      	movs	r1, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 80056fe:	802b      	strh	r3, [r5, #0]
 8005700:	78a3      	ldrb	r3, [r4, #2]
    memset(dataR,0,256);
 8005702:	4c1e      	ldr	r4, [pc, #120]	; (800577c <TestMEM+0x100>)
 8005704:	0052      	lsls	r2, r2, #1
 8005706:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 8005708:	70ab      	strb	r3, [r5, #2]
    memset(dataR,0,256);
 800570a:	f009 f97b 	bl	800ea04 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 800570e:	0028      	movs	r0, r5
 8005710:	2210      	movs	r2, #16
 8005712:	0021      	movs	r1, r4
 8005714:	f7ff fcca 	bl	80050ac <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8005718:	0020      	movs	r0, r4
 800571a:	f7fa fcf5 	bl	8000108 <strlen>
 800571e:	2801      	cmp	r0, #1
 8005720:	d800      	bhi.n	8005724 <TestMEM+0xa8>
		return "--Err RegNo--";
 8005722:	4c17      	ldr	r4, [pc, #92]	; (8005780 <TestMEM+0x104>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005724:	220c      	movs	r2, #12
 8005726:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005728:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800572a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800572c:	f7fa fcec 	bl	8000108 <strlen>
 8005730:	0021      	movs	r1, r4
 8005732:	b282      	uxth	r2, r0
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <TestMEM+0xec>)
 8005736:	0030      	movs	r0, r6
 8005738:	f005 fa90 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800573e:	2202      	movs	r2, #2
 8005740:	0029      	movs	r1, r5
	char newline[2] = "\r\n";
 8005742:	802b      	strh	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005744:	0030      	movs	r0, r6
 8005746:	230a      	movs	r3, #10
 8005748:	f005 fa88 	bl	800ac5c <HAL_UART_Transmit>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 800574c:	20fa      	movs	r0, #250	; 0xfa
 800574e:	00c0      	lsls	r0, r0, #3
 8005750:	f002 f990 	bl	8007a74 <HAL_Delay>

	}


}
 8005754:	b007      	add	sp, #28
 8005756:	bcc0      	pop	{r6, r7}
 8005758:	46b9      	mov	r9, r7
 800575a:	46b0      	mov	r8, r6
 800575c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	20004ba0 	.word	0x20004ba0
 8005764:	08013638 	.word	0x08013638
 8005768:	00001388 	.word	0x00001388
 800576c:	00000a0d 	.word	0x00000a0d
 8005770:	08012540 	.word	0x08012540
 8005774:	0801365c 	.word	0x0801365c
 8005778:	0801366c 	.word	0x0801366c
 800577c:	20004154 	.word	0x20004154
 8005780:	080135e4 	.word	0x080135e4

08005784 <SystemClock_Config>:
{
 8005784:	b500      	push	{lr}
 8005786:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005788:	2234      	movs	r2, #52	; 0x34
 800578a:	2100      	movs	r1, #0
 800578c:	a805      	add	r0, sp, #20
 800578e:	f009 f939 	bl	800ea04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005792:	2210      	movs	r2, #16
 8005794:	2100      	movs	r1, #0
 8005796:	a801      	add	r0, sp, #4
 8005798:	f009 f934 	bl	800ea04 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800579c:	2080      	movs	r0, #128	; 0x80
 800579e:	0080      	lsls	r0, r0, #2
 80057a0:	f003 fc46 	bl	8009030 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80057a4:	2302      	movs	r3, #2
 80057a6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057a8:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057aa:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057ac:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80057ae:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80057b2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057b4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80057b6:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b8:	f003 fc6a 	bl	8009090 <HAL_RCC_OscConfig>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d001      	beq.n	80057c4 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057c0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057c2:	e7fe      	b.n	80057c2 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057c4:	2307      	movs	r3, #7
 80057c6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80057c8:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80057ca:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057cc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80057ce:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80057d0:	2100      	movs	r1, #0
 80057d2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80057d4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80057d6:	f003 ff0b 	bl	80095f0 <HAL_RCC_ClockConfig>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d001      	beq.n	80057e2 <SystemClock_Config+0x5e>
 80057de:	b672      	cpsid	i
  while (1)
 80057e0:	e7fe      	b.n	80057e0 <SystemClock_Config+0x5c>
}
 80057e2:	b013      	add	sp, #76	; 0x4c
 80057e4:	bd00      	pop	{pc}
 80057e6:	46c0      	nop			; (mov r8, r8)

080057e8 <main>:
{
 80057e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ea:	46de      	mov	lr, fp
 80057ec:	4657      	mov	r7, sl
 80057ee:	464e      	mov	r6, r9
 80057f0:	4645      	mov	r5, r8
 80057f2:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057f4:	2704      	movs	r7, #4
{
 80057f6:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80057f8:	f002 f916 	bl	8007a28 <HAL_Init>
  SystemClock_Config();
 80057fc:	f7ff ffc2 	bl	8005784 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005800:	2214      	movs	r2, #20
 8005802:	2100      	movs	r1, #0
 8005804:	a807      	add	r0, sp, #28
 8005806:	f009 f8fd 	bl	800ea04 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800580a:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800580c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800580e:	4dd4      	ldr	r5, [pc, #848]	; (8005b60 <main+0x378>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005810:	4690      	mov	r8, r2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005812:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005814:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005816:	433b      	orrs	r3, r7
 8005818:	636b      	str	r3, [r5, #52]	; 0x34
 800581a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 800581c:	4cd1      	ldr	r4, [pc, #836]	; (8005b64 <main+0x37c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800581e:	403b      	ands	r3, r7
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005824:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005826:	0021      	movs	r1, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005828:	4313      	orrs	r3, r2
 800582a:	636b      	str	r3, [r5, #52]	; 0x34
 800582c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 800582e:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005830:	4013      	ands	r3, r2
 8005832:	9303      	str	r3, [sp, #12]
 8005834:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005836:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005838:	4333      	orrs	r3, r6
 800583a:	636b      	str	r3, [r5, #52]	; 0x34
 800583c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800583e:	4033      	ands	r3, r6
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005844:	2302      	movs	r3, #2
 8005846:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005848:	431a      	orrs	r2, r3
 800584a:	636a      	str	r2, [r5, #52]	; 0x34
 800584c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800584e:	4013      	ands	r3, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005850:	2208      	movs	r2, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005852:	9305      	str	r3, [sp, #20]
 8005854:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005856:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005858:	4691      	mov	r9, r2
 800585a:	4313      	orrs	r3, r2
 800585c:	636b      	str	r3, [r5, #52]	; 0x34
 800585e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005860:	4013      	ands	r3, r2
 8005862:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005864:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005866:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005868:	f002 ffcc 	bl	8008804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800586c:	2200      	movs	r2, #0
 800586e:	21c0      	movs	r1, #192	; 0xc0
 8005870:	48bd      	ldr	r0, [pc, #756]	; (8005b68 <main+0x380>)
 8005872:	f002 ffc7 	bl	8008804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8005876:	2200      	movs	r2, #0
 8005878:	2107      	movs	r1, #7
 800587a:	48bc      	ldr	r0, [pc, #752]	; (8005b6c <main+0x384>)
 800587c:	f002 ffc2 	bl	8008804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8005880:	238e      	movs	r3, #142	; 0x8e
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	2200      	movs	r2, #0
 8005886:	0019      	movs	r1, r3
 8005888:	48b9      	ldr	r0, [pc, #740]	; (8005b70 <main+0x388>)
 800588a:	469b      	mov	fp, r3
 800588c:	f002 ffba 	bl	8008804 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005890:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 8005892:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005894:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005896:	a907      	add	r1, sp, #28
 8005898:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800589a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800589e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a0:	f002 fea4 	bl	80085ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80058a4:	23f2      	movs	r3, #242	; 0xf2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058a6:	48b2      	ldr	r0, [pc, #712]	; (8005b70 <main+0x388>)
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80058a8:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058aa:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80058ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058ae:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058b2:	f002 fe9b 	bl	80085ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80058b6:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058b8:	48ad      	ldr	r0, [pc, #692]	; (8005b70 <main+0x388>)
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80058ba:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058bc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80058be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058c0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 80058c2:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058c4:	f002 fe92 	bl	80085ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80058c8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ca:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80058cc:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ce:	a907      	add	r1, sp, #28
 80058d0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80058d2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058d4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 80058d6:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058d8:	f002 fe88 	bl	80085ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80058dc:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058de:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80058e0:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e2:	a907      	add	r1, sp, #28
 80058e4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80058e6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058e8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ea:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ec:	f002 fe7e 	bl	80085ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 80058f0:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058f2:	489d      	ldr	r0, [pc, #628]	; (8005b68 <main+0x380>)
 80058f4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 80058f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058f8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058fe:	f002 fe75 	bl	80085ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8005902:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005904:	4899      	ldr	r0, [pc, #612]	; (8005b6c <main+0x384>)
 8005906:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8005908:	469a      	mov	sl, r3
 800590a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800590c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005910:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005912:	f002 fe6b 	bl	80085ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8005916:	465b      	mov	r3, fp
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005918:	4895      	ldr	r0, [pc, #596]	; (8005b70 <main+0x388>)
 800591a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 800591c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800591e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005920:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005922:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005924:	f002 fe62 	bl	80085ec <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005928:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800592a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800592c:	4333      	orrs	r3, r6
 800592e:	63ab      	str	r3, [r5, #56]	; 0x38
 8005930:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005932:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005934:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005936:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800593c:	f002 fc2e 	bl	800819c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005940:	2009      	movs	r0, #9
 8005942:	f002 fc5d 	bl	8008200 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8005946:	2200      	movs	r2, #0
 8005948:	2103      	movs	r1, #3
 800594a:	200a      	movs	r0, #10
 800594c:	f002 fc26 	bl	800819c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005950:	200a      	movs	r0, #10
 8005952:	f002 fc55 	bl	8008200 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 8005956:	2200      	movs	r2, #0
 8005958:	2103      	movs	r1, #3
 800595a:	200b      	movs	r0, #11
 800595c:	f002 fc1e 	bl	800819c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8005960:	200b      	movs	r0, #11
 8005962:	f002 fc4d 	bl	8008200 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8005966:	220c      	movs	r2, #12
 8005968:	2100      	movs	r1, #0
 800596a:	a807      	add	r0, sp, #28
 800596c:	f009 f84a 	bl	800ea04 <memset>
  hadc1.Instance = ADC1;
 8005970:	4d80      	ldr	r5, [pc, #512]	; (8005b74 <main+0x38c>)
 8005972:	4b81      	ldr	r3, [pc, #516]	; (8005b78 <main+0x390>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005974:	4642      	mov	r2, r8
  hadc1.Instance = ADC1;
 8005976:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	05db      	lsls	r3, r3, #23
 800597c:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	039b      	lsls	r3, r3, #14
 8005982:	612b      	str	r3, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005984:	2300      	movs	r3, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005986:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005988:	320c      	adds	r2, #12
 800598a:	54ab      	strb	r3, [r5, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800598c:	0028      	movs	r0, r5
  hadc1.Init.OversamplingMode = DISABLE;
 800598e:	3210      	adds	r2, #16
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005990:	832c      	strh	r4, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005992:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005994:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005996:	616f      	str	r7, [r5, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005998:	76ab      	strb	r3, [r5, #26]
  hadc1.Init.NbrOfConversion = 4;
 800599a:	61ef      	str	r7, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800599c:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800599e:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80059a0:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80059a2:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80059a4:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80059a6:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80059a8:	64ec      	str	r4, [r5, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80059aa:	f002 f881 	bl	8007ab0 <HAL_ADC_Init>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d001      	beq.n	80059b6 <main+0x1ce>
 80059b2:	b672      	cpsid	i
  while (1)
 80059b4:	e7fe      	b.n	80059b4 <main+0x1cc>
  sConfig.Channel = ADC_CHANNEL_1;
 80059b6:	4b71      	ldr	r3, [pc, #452]	; (8005b7c <main+0x394>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80059b8:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059ba:	a907      	add	r1, sp, #28
 80059bc:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80059be:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80059c0:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059c2:	f002 f9f1 	bl	8007da8 <HAL_ADC_ConfigChannel>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d001      	beq.n	80059ce <main+0x1e6>
 80059ca:	b672      	cpsid	i
  while (1)
 80059cc:	e7fe      	b.n	80059cc <main+0x1e4>
  sConfig.Channel = ADC_CHANNEL_9;
 80059ce:	4b6c      	ldr	r3, [pc, #432]	; (8005b80 <main+0x398>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059d0:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 80059d2:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80059d4:	464b      	mov	r3, r9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059d6:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80059d8:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059da:	f002 f9e5 	bl	8007da8 <HAL_ADC_ConfigChannel>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d001      	beq.n	80059e6 <main+0x1fe>
 80059e2:	b672      	cpsid	i
  while (1)
 80059e4:	e7fe      	b.n	80059e4 <main+0x1fc>
  sConfig.Channel = ADC_CHANNEL_11;
 80059e6:	4b67      	ldr	r3, [pc, #412]	; (8005b84 <main+0x39c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059e8:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 80059ea:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80059ec:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059ee:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80059f0:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059f2:	f002 f9d9 	bl	8007da8 <HAL_ADC_ConfigChannel>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d001      	beq.n	80059fe <main+0x216>
 80059fa:	b672      	cpsid	i
  while (1)
 80059fc:	e7fe      	b.n	80059fc <main+0x214>
  hi2c1.Instance = I2C1;
 80059fe:	4c62      	ldr	r4, [pc, #392]	; (8005b88 <main+0x3a0>)
 8005a00:	4b62      	ldr	r3, [pc, #392]	; (8005b8c <main+0x3a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8005a02:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8005a04:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8005a06:	4b62      	ldr	r3, [pc, #392]	; (8005b90 <main+0x3a8>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a08:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005a0a:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a0c:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a0e:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a10:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a12:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000E14;
 8005a14:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a16:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a18:	f002 ffe0 	bl	80089dc <HAL_I2C_Init>
 8005a1c:	1e01      	subs	r1, r0, #0
 8005a1e:	d001      	beq.n	8005a24 <main+0x23c>
 8005a20:	b672      	cpsid	i
  while (1)
 8005a22:	e7fe      	b.n	8005a22 <main+0x23a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a24:	0020      	movs	r0, r4
 8005a26:	f003 faaf 	bl	8008f88 <HAL_I2CEx_ConfigAnalogFilter>
 8005a2a:	1e01      	subs	r1, r0, #0
 8005a2c:	d001      	beq.n	8005a32 <main+0x24a>
 8005a2e:	b672      	cpsid	i
  while (1)
 8005a30:	e7fe      	b.n	8005a30 <main+0x248>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005a32:	0020      	movs	r0, r4
 8005a34:	f003 face 	bl	8008fd4 <HAL_I2CEx_ConfigDigitalFilter>
 8005a38:	1e02      	subs	r2, r0, #0
 8005a3a:	d001      	beq.n	8005a40 <main+0x258>
 8005a3c:	b672      	cpsid	i
  while (1)
 8005a3e:	e7fe      	b.n	8005a3e <main+0x256>
  hspi1.Instance = SPI1;
 8005a40:	4b54      	ldr	r3, [pc, #336]	; (8005b94 <main+0x3ac>)
 8005a42:	4955      	ldr	r1, [pc, #340]	; (8005b98 <main+0x3b0>)
 8005a44:	0018      	movs	r0, r3
 8005a46:	6019      	str	r1, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a48:	2382      	movs	r3, #130	; 0x82
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a4e:	23e0      	movs	r3, #224	; 0xe0
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8005a5e:	4653      	mov	r3, sl
 8005a60:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005a62:	464b      	mov	r3, r9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a64:	6082      	str	r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a66:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a68:	6142      	str	r2, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a6a:	6202      	str	r2, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a6c:	6242      	str	r2, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6e:	6282      	str	r2, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005a70:	6302      	str	r2, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005a72:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005a74:	f004 f884 	bl	8009b80 <HAL_SPI_Init>
 8005a78:	1e05      	subs	r5, r0, #0
 8005a7a:	d001      	beq.n	8005a80 <main+0x298>
 8005a7c:	b672      	cpsid	i
  while (1)
 8005a7e:	e7fe      	b.n	8005a7e <main+0x296>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a80:	0001      	movs	r1, r0
 8005a82:	220c      	movs	r2, #12
 8005a84:	a807      	add	r0, sp, #28
 8005a86:	f008 ffbd 	bl	800ea04 <memset>
  htim6.Instance = TIM6;
 8005a8a:	4c44      	ldr	r4, [pc, #272]	; (8005b9c <main+0x3b4>)
 8005a8c:	4b44      	ldr	r3, [pc, #272]	; (8005ba0 <main+0x3b8>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005a8e:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 8005a90:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 8000-1;
 8005a92:	4b44      	ldr	r3, [pc, #272]	; (8005ba4 <main+0x3bc>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a94:	60a5      	str	r5, [r4, #8]
  htim6.Init.Prescaler = 8000-1;
 8005a96:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 500-1;
 8005a98:	23f4      	movs	r3, #244	; 0xf4
 8005a9a:	33ff      	adds	r3, #255	; 0xff
 8005a9c:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a9e:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005aa0:	f004 fc36 	bl	800a310 <HAL_TIM_Base_Init>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d001      	beq.n	8005aac <main+0x2c4>
 8005aa8:	b672      	cpsid	i
  while (1)
 8005aaa:	e7fe      	b.n	8005aaa <main+0x2c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aac:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005aae:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005ab0:	a907      	add	r1, sp, #28
 8005ab2:	0020      	movs	r0, r4
 8005ab4:	f004 fc5c 	bl	800a370 <HAL_TIMEx_MasterConfigSynchronization>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d001      	beq.n	8005ac0 <main+0x2d8>
 8005abc:	b672      	cpsid	i
  while (1)
 8005abe:	e7fe      	b.n	8005abe <main+0x2d6>
  huart1.Instance = USART1;
 8005ac0:	4c39      	ldr	r4, [pc, #228]	; (8005ba8 <main+0x3c0>)
 8005ac2:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <main+0x3c4>)
  huart1.Init.BaudRate = 9600;
 8005ac4:	2696      	movs	r6, #150	; 0x96
  huart1.Instance = USART1;
 8005ac6:	6023      	str	r3, [r4, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ac8:	250c      	movs	r5, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005aca:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005acc:	0020      	movs	r0, r4
  huart1.Init.BaudRate = 9600;
 8005ace:	01b6      	lsls	r6, r6, #6
 8005ad0:	6066      	str	r6, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ad2:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ad4:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ad6:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ad8:	6165      	str	r5, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ada:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005adc:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ade:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ae0:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ae2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ae4:	f005 f9fe 	bl	800aee4 <HAL_UART_Init>
 8005ae8:	1e01      	subs	r1, r0, #0
 8005aea:	d001      	beq.n	8005af0 <main+0x308>
 8005aec:	b672      	cpsid	i
  while (1)
 8005aee:	e7fe      	b.n	8005aee <main+0x306>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005af0:	0020      	movs	r0, r4
 8005af2:	f005 faf1 	bl	800b0d8 <HAL_UARTEx_SetTxFifoThreshold>
 8005af6:	1e01      	subs	r1, r0, #0
 8005af8:	d001      	beq.n	8005afe <main+0x316>
 8005afa:	b672      	cpsid	i
  while (1)
 8005afc:	e7fe      	b.n	8005afc <main+0x314>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005afe:	0020      	movs	r0, r4
 8005b00:	f005 fb14 	bl	800b12c <HAL_UARTEx_SetRxFifoThreshold>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d001      	beq.n	8005b0c <main+0x324>
 8005b08:	b672      	cpsid	i
  while (1)
 8005b0a:	e7fe      	b.n	8005b0a <main+0x322>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005b0c:	0020      	movs	r0, r4
 8005b0e:	f005 fac7 	bl	800b0a0 <HAL_UARTEx_DisableFifoMode>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d001      	beq.n	8005b1a <main+0x332>
 8005b16:	b672      	cpsid	i
  while (1)
 8005b18:	e7fe      	b.n	8005b18 <main+0x330>
  huart2.Instance = USART2;
 8005b1a:	4c25      	ldr	r4, [pc, #148]	; (8005bb0 <main+0x3c8>)
 8005b1c:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <main+0x3cc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b1e:	60a0      	str	r0, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b20:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b22:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b24:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b26:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b28:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b2a:	6260      	str	r0, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b2c:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b2e:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 8005b30:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 8005b32:	6066      	str	r6, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b34:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b36:	f005 f9d5 	bl	800aee4 <HAL_UART_Init>
 8005b3a:	1e01      	subs	r1, r0, #0
 8005b3c:	d001      	beq.n	8005b42 <main+0x35a>
 8005b3e:	b672      	cpsid	i
  while (1)
 8005b40:	e7fe      	b.n	8005b40 <main+0x358>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b42:	0020      	movs	r0, r4
 8005b44:	f005 fac8 	bl	800b0d8 <HAL_UARTEx_SetTxFifoThreshold>
 8005b48:	1e01      	subs	r1, r0, #0
 8005b4a:	d001      	beq.n	8005b50 <main+0x368>
 8005b4c:	b672      	cpsid	i
  while (1)
 8005b4e:	e7fe      	b.n	8005b4e <main+0x366>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b50:	0020      	movs	r0, r4
 8005b52:	f005 faeb 	bl	800b12c <HAL_UARTEx_SetRxFifoThreshold>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d02e      	beq.n	8005bb8 <main+0x3d0>
 8005b5a:	b672      	cpsid	i
  while (1)
 8005b5c:	e7fe      	b.n	8005b5c <main+0x374>
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	40021000 	.word	0x40021000
 8005b64:	00008010 	.word	0x00008010
 8005b68:	50000800 	.word	0x50000800
 8005b6c:	50000c00 	.word	0x50000c00
 8005b70:	50000400 	.word	0x50000400
 8005b74:	200047a0 	.word	0x200047a0
 8005b78:	40012400 	.word	0x40012400
 8005b7c:	04000002 	.word	0x04000002
 8005b80:	24000200 	.word	0x24000200
 8005b84:	2c000800 	.word	0x2c000800
 8005b88:	20004974 	.word	0x20004974
 8005b8c:	40005400 	.word	0x40005400
 8005b90:	00000e14 	.word	0x00000e14
 8005b94:	200049c8 	.word	0x200049c8
 8005b98:	40013000 	.word	0x40013000
 8005b9c:	20004a2c 	.word	0x20004a2c
 8005ba0:	40001000 	.word	0x40001000
 8005ba4:	00001f3f 	.word	0x00001f3f
 8005ba8:	20004a78 	.word	0x20004a78
 8005bac:	40013800 	.word	0x40013800
 8005bb0:	20004b0c 	.word	0x20004b0c
 8005bb4:	40004400 	.word	0x40004400
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005bb8:	0020      	movs	r0, r4
 8005bba:	f005 fa71 	bl	800b0a0 <HAL_UARTEx_DisableFifoMode>
 8005bbe:	1e02      	subs	r2, r0, #0
 8005bc0:	d001      	beq.n	8005bc6 <main+0x3de>
 8005bc2:	b672      	cpsid	i
  while (1)
 8005bc4:	e7fe      	b.n	8005bc4 <main+0x3dc>
  huart3.Instance = USART3;
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <main+0x448>)
 8005bc8:	491a      	ldr	r1, [pc, #104]	; (8005c34 <main+0x44c>)
 8005bca:	0018      	movs	r0, r3
 8005bcc:	6019      	str	r1, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005bce:	605e      	str	r6, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005bd0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005bd2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005bd4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005bd6:	615d      	str	r5, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bd8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bda:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bdc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005be2:	f005 f97f 	bl	800aee4 <HAL_UART_Init>
 8005be6:	1e04      	subs	r4, r0, #0
 8005be8:	d001      	beq.n	8005bee <main+0x406>
 8005bea:	b672      	cpsid	i
  while (1)
 8005bec:	e7fe      	b.n	8005bec <main+0x404>
  osKernelInitialize();
 8005bee:	f005 fad5 	bl	800b19c <osKernelInitialize>
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	4a10      	ldr	r2, [pc, #64]	; (8005c38 <main+0x450>)
 8005bf6:	2010      	movs	r0, #16
 8005bf8:	f005 fb64 	bl	800b2c4 <osMessageQueueNew>
 8005bfc:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <main+0x454>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005bfe:	0021      	movs	r1, r4
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005c00:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005c02:	4a0f      	ldr	r2, [pc, #60]	; (8005c40 <main+0x458>)
 8005c04:	480f      	ldr	r0, [pc, #60]	; (8005c44 <main+0x45c>)
 8005c06:	f005 fafb 	bl	800b200 <osThreadNew>
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <main+0x460>)
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005c0c:	0021      	movs	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005c0e:	6018      	str	r0, [r3, #0]
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005c10:	4a0e      	ldr	r2, [pc, #56]	; (8005c4c <main+0x464>)
 8005c12:	480f      	ldr	r0, [pc, #60]	; (8005c50 <main+0x468>)
 8005c14:	f005 faf4 	bl	800b200 <osThreadNew>
 8005c18:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <main+0x46c>)
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005c1a:	0021      	movs	r1, r4
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005c1c:	6018      	str	r0, [r3, #0]
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005c1e:	4a0e      	ldr	r2, [pc, #56]	; (8005c58 <main+0x470>)
 8005c20:	480e      	ldr	r0, [pc, #56]	; (8005c5c <main+0x474>)
 8005c22:	f005 faed 	bl	800b200 <osThreadNew>
 8005c26:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <main+0x478>)
 8005c28:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8005c2a:	f005 facb 	bl	800b1c4 <osKernelStart>
  while (1)
 8005c2e:	e7fe      	b.n	8005c2e <main+0x446>
 8005c30:	20004ba0 	.word	0x20004ba0
 8005c34:	40004800 	.word	0x40004800
 8005c38:	080138d0 	.word	0x080138d0
 8005c3c:	20004c98 	.word	0x20004c98
 8005c40:	080138ac 	.word	0x080138ac
 8005c44:	0800717d 	.word	0x0800717d
 8005c48:	200042c4 	.word	0x200042c4
 8005c4c:	08013860 	.word	0x08013860
 8005c50:	080032c9 	.word	0x080032c9
 8005c54:	200006c0 	.word	0x200006c0
 8005c58:	08013888 	.word	0x08013888
 8005c5c:	08003459 	.word	0x08003459
 8005c60:	200040fc 	.word	0x200040fc

08005c64 <stor>:
float stor(const char* str) {
 8005c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c66:	46c6      	mov	lr, r8
 8005c68:	b500      	push	{lr}
    float sign = *str == '-' ? str++, -1 : 1;
 8005c6a:	7803      	ldrb	r3, [r0, #0]
float stor(const char* str) {
 8005c6c:	0005      	movs	r5, r0
 8005c6e:	b082      	sub	sp, #8
    float sign = *str == '-' ? str++, -1 : 1;
 8005c70:	2b2d      	cmp	r3, #45	; 0x2d
 8005c72:	d100      	bne.n	8005c76 <stor+0x12>
 8005c74:	e080      	b.n	8005d78 <stor+0x114>
 8005c76:	22fe      	movs	r2, #254	; 0xfe
 8005c78:	0592      	lsls	r2, r2, #22
 8005c7a:	4690      	mov	r8, r2
    while (*str >= '0' && *str <= '9') {
 8005c7c:	001e      	movs	r6, r3
 8005c7e:	3e30      	subs	r6, #48	; 0x30
 8005c80:	b2f2      	uxtb	r2, r6
    float result = 0;
 8005c82:	2400      	movs	r4, #0
    while (*str >= '0' && *str <= '9') {
 8005c84:	2a09      	cmp	r2, #9
 8005c86:	d812      	bhi.n	8005cae <stor+0x4a>
        result *= 10;
 8005c88:	4943      	ldr	r1, [pc, #268]	; (8005d98 <stor+0x134>)
 8005c8a:	1c20      	adds	r0, r4, #0
 8005c8c:	f7fb f820 	bl	8000cd0 <__aeabi_fmul>
 8005c90:	1c04      	adds	r4, r0, #0
        result += *str - '0';
 8005c92:	0030      	movs	r0, r6
 8005c94:	f7fb fb2a 	bl	80012ec <__aeabi_i2f>
        str++;
 8005c98:	3501      	adds	r5, #1
        result += *str - '0';
 8005c9a:	1c21      	adds	r1, r4, #0
 8005c9c:	f7fa fcae 	bl	80005fc <__aeabi_fadd>
    while (*str >= '0' && *str <= '9') {
 8005ca0:	782b      	ldrb	r3, [r5, #0]
        result += *str - '0';
 8005ca2:	1c04      	adds	r4, r0, #0
    while (*str >= '0' && *str <= '9') {
 8005ca4:	001e      	movs	r6, r3
 8005ca6:	3e30      	subs	r6, #48	; 0x30
 8005ca8:	b2f2      	uxtb	r2, r6
 8005caa:	2a09      	cmp	r2, #9
 8005cac:	d9ec      	bls.n	8005c88 <stor+0x24>
    if (*str == ',' || *str == '.') {
 8005cae:	2202      	movs	r2, #2
 8005cb0:	4393      	bics	r3, r2
 8005cb2:	2b2c      	cmp	r3, #44	; 0x2c
 8005cb4:	d00f      	beq.n	8005cd6 <stor+0x72>
    if (*str == 'e' || *str == 'E') {
 8005cb6:	002e      	movs	r6, r5
 8005cb8:	782f      	ldrb	r7, [r5, #0]
    result *= sign;
 8005cba:	4641      	mov	r1, r8
 8005cbc:	1c20      	adds	r0, r4, #0
 8005cbe:	f7fb f807 	bl	8000cd0 <__aeabi_fmul>
    if (*str == 'e' || *str == 'E') {
 8005cc2:	2320      	movs	r3, #32
    result *= sign;
 8005cc4:	4680      	mov	r8, r0
    if (*str == 'e' || *str == 'E') {
 8005cc6:	439f      	bics	r7, r3
 8005cc8:	2f45      	cmp	r7, #69	; 0x45
 8005cca:	d023      	beq.n	8005d14 <stor+0xb0>
}
 8005ccc:	4640      	mov	r0, r8
 8005cce:	b002      	add	sp, #8
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	46b8      	mov	r8, r7
 8005cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while (*str >= '0' && *str <= '9') {
 8005cd6:	786f      	ldrb	r7, [r5, #1]
        str++;
 8005cd8:	1c6e      	adds	r6, r5, #1
        while (*str >= '0' && *str <= '9') {
 8005cda:	0038      	movs	r0, r7
 8005cdc:	3830      	subs	r0, #48	; 0x30
 8005cde:	b2c3      	uxtb	r3, r0
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d8ea      	bhi.n	8005cba <stor+0x56>
        float multiplier = 0.1;
 8005ce4:	4d2d      	ldr	r5, [pc, #180]	; (8005d9c <stor+0x138>)
            result += (*str - '0') * multiplier;
 8005ce6:	f7fb fb01 	bl	80012ec <__aeabi_i2f>
 8005cea:	1c29      	adds	r1, r5, #0
 8005cec:	f7fa fff0 	bl	8000cd0 <__aeabi_fmul>
 8005cf0:	1c01      	adds	r1, r0, #0
 8005cf2:	1c20      	adds	r0, r4, #0
 8005cf4:	f7fa fc82 	bl	80005fc <__aeabi_fadd>
            multiplier /= 10;
 8005cf8:	4927      	ldr	r1, [pc, #156]	; (8005d98 <stor+0x134>)
            result += (*str - '0') * multiplier;
 8005cfa:	1c04      	adds	r4, r0, #0
            multiplier /= 10;
 8005cfc:	1c28      	adds	r0, r5, #0
 8005cfe:	f7fa fe1d 	bl	800093c <__aeabi_fdiv>
        while (*str >= '0' && *str <= '9') {
 8005d02:	7877      	ldrb	r7, [r6, #1]
            multiplier /= 10;
 8005d04:	1c05      	adds	r5, r0, #0
        while (*str >= '0' && *str <= '9') {
 8005d06:	0038      	movs	r0, r7
 8005d08:	3830      	subs	r0, #48	; 0x30
 8005d0a:	b2c3      	uxtb	r3, r0
            str++;
 8005d0c:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 8005d0e:	2b09      	cmp	r3, #9
 8005d10:	d9e9      	bls.n	8005ce6 <stor+0x82>
 8005d12:	e7d2      	b.n	8005cba <stor+0x56>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8005d14:	7874      	ldrb	r4, [r6, #1]
 8005d16:	2c2d      	cmp	r4, #45	; 0x2d
 8005d18:	d033      	beq.n	8005d82 <stor+0x11e>
        str++;
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <stor+0x13c>)
 8005d1e:	1c75      	adds	r5, r6, #1
 8005d20:	9200      	str	r2, [sp, #0]
 8005d22:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8005d24:	3c30      	subs	r4, #48	; 0x30
 8005d26:	b2e3      	uxtb	r3, r4
 8005d28:	2b09      	cmp	r3, #9
 8005d2a:	d832      	bhi.n	8005d92 <stor+0x12e>
        float power = 0;
 8005d2c:	2000      	movs	r0, #0
            power *= 10;
 8005d2e:	491a      	ldr	r1, [pc, #104]	; (8005d98 <stor+0x134>)
 8005d30:	f7fa ffce 	bl	8000cd0 <__aeabi_fmul>
 8005d34:	1c06      	adds	r6, r0, #0
            power += *str - '0';
 8005d36:	0020      	movs	r0, r4
 8005d38:	f7fb fad8 	bl	80012ec <__aeabi_i2f>
            str++;
 8005d3c:	3501      	adds	r5, #1
            power += *str - '0';
 8005d3e:	1c31      	adds	r1, r6, #0
 8005d40:	f7fa fc5c 	bl	80005fc <__aeabi_fadd>
        while (*str >= '0' && *str <= '9') {
 8005d44:	782c      	ldrb	r4, [r5, #0]
 8005d46:	3c30      	subs	r4, #48	; 0x30
 8005d48:	b2e3      	uxtb	r3, r4
 8005d4a:	2b09      	cmp	r3, #9
 8005d4c:	d9ef      	bls.n	8005d2e <stor+0xca>
        result *= pow(powerer, power);
 8005d4e:	f7fd f9af 	bl	80030b0 <__aeabi_f2d>
 8005d52:	0002      	movs	r2, r0
 8005d54:	000b      	movs	r3, r1
 8005d56:	9800      	ldr	r0, [sp, #0]
 8005d58:	9901      	ldr	r1, [sp, #4]
 8005d5a:	f00b fcd9 	bl	8011710 <pow>
 8005d5e:	0004      	movs	r4, r0
 8005d60:	000d      	movs	r5, r1
 8005d62:	4640      	mov	r0, r8
 8005d64:	f7fd f9a4 	bl	80030b0 <__aeabi_f2d>
 8005d68:	0022      	movs	r2, r4
 8005d6a:	002b      	movs	r3, r5
 8005d6c:	f7fc fab2 	bl	80022d4 <__aeabi_dmul>
 8005d70:	f7fd f9e6 	bl	8003140 <__aeabi_d2f>
 8005d74:	4680      	mov	r8, r0
    return result;
 8005d76:	e7a9      	b.n	8005ccc <stor+0x68>
    float sign = *str == '-' ? str++, -1 : 1;
 8005d78:	4a0a      	ldr	r2, [pc, #40]	; (8005da4 <stor+0x140>)
    while (*str >= '0' && *str <= '9') {
 8005d7a:	7843      	ldrb	r3, [r0, #1]
    float sign = *str == '-' ? str++, -1 : 1;
 8005d7c:	4690      	mov	r8, r2
 8005d7e:	3501      	adds	r5, #1
 8005d80:	e77c      	b.n	8005c7c <stor+0x18>
 8005d82:	22a0      	movs	r2, #160	; 0xa0
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <stor+0x144>)
 8005d86:	0612      	lsls	r2, r2, #24
 8005d88:	9200      	str	r2, [sp, #0]
 8005d8a:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8005d8c:	78b4      	ldrb	r4, [r6, #2]
        float powerer = *str == '-'? str++, 0.1 : 10;
 8005d8e:	1cb5      	adds	r5, r6, #2
 8005d90:	e7c8      	b.n	8005d24 <stor+0xc0>
        while (*str >= '0' && *str <= '9') {
 8005d92:	2200      	movs	r2, #0
 8005d94:	2300      	movs	r3, #0
 8005d96:	e7de      	b.n	8005d56 <stor+0xf2>
 8005d98:	41200000 	.word	0x41200000
 8005d9c:	3dcccccd 	.word	0x3dcccccd
 8005da0:	40240000 	.word	0x40240000
 8005da4:	bf800000 	.word	0xbf800000
 8005da8:	3fb99999 	.word	0x3fb99999

08005dac <getGNRMC>:
void getGNRMC(const char * ptra){
 8005dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dae:	46d6      	mov	lr, sl
 8005db0:	4646      	mov	r6, r8
 8005db2:	464f      	mov	r7, r9
 8005db4:	b5c0      	push	{r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8005db6:	4e56      	ldr	r6, [pc, #344]	; (8005f10 <getGNRMC+0x164>)
 8005db8:	0031      	movs	r1, r6
 8005dba:	f008 fe6b 	bl	800ea94 <strtok>
 8005dbe:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005dc0:	d026      	beq.n	8005e10 <getGNRMC+0x64>
  	        strcpy(GPSInfo.latD,token);
 8005dc2:	2328      	movs	r3, #40	; 0x28
 8005dc4:	4698      	mov	r8, r3
 8005dc6:	4f53      	ldr	r7, [pc, #332]	; (8005f14 <getGNRMC+0x168>)
	int i=0;
 8005dc8:	2500      	movs	r5, #0
  	        strcpy(GPSInfo.latD,token);
 8005dca:	44b8      	add	r8, r7
 8005dcc:	e00e      	b.n	8005dec <getGNRMC+0x40>
  	    if(i==3){ //Getting Latitude
 8005dce:	2d03      	cmp	r5, #3
 8005dd0:	d061      	beq.n	8005e96 <getGNRMC+0xea>
  	    if(i==4){ //Getting Latitude ind
 8005dd2:	2d04      	cmp	r5, #4
 8005dd4:	d128      	bne.n	8005e28 <getGNRMC+0x7c>
  	        strcpy(GPSInfo.latD,token);
 8005dd6:	0021      	movs	r1, r4
 8005dd8:	4640      	mov	r0, r8
 8005dda:	f008 ffd2 	bl	800ed82 <strcpy>
  	    token = strtok(NULL,",");
 8005dde:	0031      	movs	r1, r6
 8005de0:	2000      	movs	r0, #0
 8005de2:	f008 fe57 	bl	800ea94 <strtok>
        i++;
 8005de6:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8005de8:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005dea:	d011      	beq.n	8005e10 <getGNRMC+0x64>
  	    if(i==1){ //Getting time
 8005dec:	2d01      	cmp	r5, #1
 8005dee:	d014      	beq.n	8005e1a <getGNRMC+0x6e>
  	    if(i==10){ //Getting GPS status
 8005df0:	2d0a      	cmp	r5, #10
 8005df2:	d1ec      	bne.n	8005dce <getGNRMC+0x22>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8005df4:	214e      	movs	r1, #78	; 0x4e
 8005df6:	0020      	movs	r0, r4
 8005df8:	f008 fe19 	bl	800ea2e <strchr>
 8005dfc:	4243      	negs	r3, r0
 8005dfe:	4158      	adcs	r0, r3
  	    token = strtok(NULL,",");
 8005e00:	0031      	movs	r1, r6
 8005e02:	61f8      	str	r0, [r7, #28]
 8005e04:	2000      	movs	r0, #0
 8005e06:	f008 fe45 	bl	800ea94 <strtok>
        i++;
 8005e0a:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8005e0c:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005e0e:	d1ed      	bne.n	8005dec <getGNRMC+0x40>
}
 8005e10:	bce0      	pop	{r5, r6, r7}
 8005e12:	46ba      	mov	sl, r7
 8005e14:	46b1      	mov	r9, r6
 8005e16:	46a8      	mov	r8, r5
 8005e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	    	strncpy(GPSInfo.time,token,6);
 8005e1a:	483e      	ldr	r0, [pc, #248]	; (8005f14 <getGNRMC+0x168>)
 8005e1c:	2206      	movs	r2, #6
 8005e1e:	0021      	movs	r1, r4
 8005e20:	302e      	adds	r0, #46	; 0x2e
 8005e22:	f008 fe23 	bl	800ea6c <strncpy>
  	    if(i==5){ //Getting Longitude
 8005e26:	e7da      	b.n	8005dde <getGNRMC+0x32>
 8005e28:	2d05      	cmp	r5, #5
 8005e2a:	d120      	bne.n	8005e6e <getGNRMC+0xc2>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005e2c:	0020      	movs	r0, r4
 8005e2e:	f7ff ff19 	bl	8005c64 <stor>
    int dd1= ddmmmm/100;
 8005e32:	4939      	ldr	r1, [pc, #228]	; (8005f18 <getGNRMC+0x16c>)
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005e34:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8005e36:	f7fa fd81 	bl	800093c <__aeabi_fdiv>
 8005e3a:	f7fb fa37 	bl	80012ac <__aeabi_f2iz>
 8005e3e:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 8005e40:	2064      	movs	r0, #100	; 0x64
 8005e42:	4360      	muls	r0, r4
 8005e44:	f7fb fa52 	bl	80012ec <__aeabi_i2f>
 8005e48:	1c01      	adds	r1, r0, #0
 8005e4a:	4648      	mov	r0, r9
 8005e4c:	f7fb f88e 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 8005e50:	4932      	ldr	r1, [pc, #200]	; (8005f1c <getGNRMC+0x170>)
 8005e52:	f7fa fd73 	bl	800093c <__aeabi_fdiv>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <getGNRMC+0x168>)
    mm=mm/60;
 8005e58:	4681      	mov	r9, r0
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005e5a:	469a      	mov	sl, r3
    mm=(float)dd1+mm;
 8005e5c:	0020      	movs	r0, r4
 8005e5e:	f7fb fa45 	bl	80012ec <__aeabi_i2f>
 8005e62:	4649      	mov	r1, r9
 8005e64:	f7fa fbca 	bl	80005fc <__aeabi_fadd>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005e68:	4653      	mov	r3, sl
 8005e6a:	6058      	str	r0, [r3, #4]
  	    if(i==8){ //Getting Course
 8005e6c:	e7b7      	b.n	8005dde <getGNRMC+0x32>
  	    if(i==6){ //Getting Longitude ind
 8005e6e:	2d06      	cmp	r5, #6
 8005e70:	d105      	bne.n	8005e7e <getGNRMC+0xd2>
  	    	strcpy(GPSInfo.lonD,token);
 8005e72:	4828      	ldr	r0, [pc, #160]	; (8005f14 <getGNRMC+0x168>)
 8005e74:	0021      	movs	r1, r4
 8005e76:	302b      	adds	r0, #43	; 0x2b
 8005e78:	f008 ff83 	bl	800ed82 <strcpy>
  	    if(i==8){ //Getting Course
 8005e7c:	e7af      	b.n	8005dde <getGNRMC+0x32>
  	    if(i==9){ //Getting Date
 8005e7e:	2d09      	cmp	r5, #9
 8005e80:	d02d      	beq.n	8005ede <getGNRMC+0x132>
  	    if(i==7){ //Getting Speed
 8005e82:	2d07      	cmp	r5, #7
 8005e84:	d025      	beq.n	8005ed2 <getGNRMC+0x126>
  	    if(i==8){ //Getting Course
 8005e86:	2d08      	cmp	r5, #8
 8005e88:	d1a9      	bne.n	8005dde <getGNRMC+0x32>
  	        GPSInfo.head=stor(token);
 8005e8a:	0020      	movs	r0, r4
 8005e8c:	f7ff feea 	bl	8005c64 <stor>
 8005e90:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <getGNRMC+0x168>)
 8005e92:	6158      	str	r0, [r3, #20]
 8005e94:	e7a3      	b.n	8005dde <getGNRMC+0x32>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005e96:	0020      	movs	r0, r4
 8005e98:	f7ff fee4 	bl	8005c64 <stor>
    int dd1= ddmmmm/100;
 8005e9c:	491e      	ldr	r1, [pc, #120]	; (8005f18 <getGNRMC+0x16c>)
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005e9e:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8005ea0:	f7fa fd4c 	bl	800093c <__aeabi_fdiv>
 8005ea4:	f7fb fa02 	bl	80012ac <__aeabi_f2iz>
 8005ea8:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 8005eaa:	2064      	movs	r0, #100	; 0x64
 8005eac:	4360      	muls	r0, r4
 8005eae:	f7fb fa1d 	bl	80012ec <__aeabi_i2f>
 8005eb2:	1c01      	adds	r1, r0, #0
 8005eb4:	4648      	mov	r0, r9
 8005eb6:	f7fb f859 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 8005eba:	4918      	ldr	r1, [pc, #96]	; (8005f1c <getGNRMC+0x170>)
 8005ebc:	f7fa fd3e 	bl	800093c <__aeabi_fdiv>
 8005ec0:	4681      	mov	r9, r0
    mm=(float)dd1+mm;
 8005ec2:	0020      	movs	r0, r4
 8005ec4:	f7fb fa12 	bl	80012ec <__aeabi_i2f>
 8005ec8:	4649      	mov	r1, r9
 8005eca:	f7fa fb97 	bl	80005fc <__aeabi_fadd>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005ece:	6038      	str	r0, [r7, #0]
  	    if(i==6){ //Getting Longitude ind
 8005ed0:	e785      	b.n	8005dde <getGNRMC+0x32>
  	        GPSInfo.speed=stor(token);
 8005ed2:	0020      	movs	r0, r4
 8005ed4:	f7ff fec6 	bl	8005c64 <stor>
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <getGNRMC+0x168>)
 8005eda:	6198      	str	r0, [r3, #24]
  	    if(i==8){ //Getting Course
 8005edc:	e77f      	b.n	8005dde <getGNRMC+0x32>
  			memset(dd,0,10);
 8005ede:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <getGNRMC+0x174>)
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4699      	mov	r9, r3
 8005ee8:	f008 fd8c 	bl	800ea04 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8005eec:	2300      	movs	r3, #0
 8005eee:	4649      	mov	r1, r9
 8005ef0:	5ce2      	ldrb	r2, [r4, r3]
 8005ef2:	54ca      	strb	r2, [r1, r3]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d1f9      	bne.n	8005eee <getGNRMC+0x142>
  	        dd[4]='2';
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <getGNRMC+0x178>)
  	        strcpy(GPSInfo.date,dd);
 8005efc:	4805      	ldr	r0, [pc, #20]	; (8005f14 <getGNRMC+0x168>)
  	        dd[4]='2';
 8005efe:	808b      	strh	r3, [r1, #4]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8005f00:	7923      	ldrb	r3, [r4, #4]
  	        strcpy(GPSInfo.date,dd);
 8005f02:	303d      	adds	r0, #61	; 0x3d
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8005f04:	718b      	strb	r3, [r1, #6]
 8005f06:	7963      	ldrb	r3, [r4, #5]
 8005f08:	71cb      	strb	r3, [r1, #7]
  	        strcpy(GPSInfo.date,dd);
 8005f0a:	f008 ff3a 	bl	800ed82 <strcpy>
  	    if(i==8){ //Getting Course
 8005f0e:	e766      	b.n	8005dde <getGNRMC+0x32>
 8005f10:	08012824 	.word	0x08012824
 8005f14:	20000674 	.word	0x20000674
 8005f18:	42c80000 	.word	0x42c80000
 8005f1c:	42700000 	.word	0x42700000
 8005f20:	200042b8 	.word	0x200042b8
 8005f24:	00003032 	.word	0x00003032

08005f28 <getGNGSA>:
void getGNGSA(const  char * ptra){
 8005f28:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8005f2a:	4d11      	ldr	r5, [pc, #68]	; (8005f70 <getGNGSA+0x48>)
 8005f2c:	0029      	movs	r1, r5
 8005f2e:	f008 fdb1 	bl	800ea94 <strtok>
    while( token != NULL ) {
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d017      	beq.n	8005f66 <getGNGSA+0x3e>
	int i=0;
 8005f36:	2400      	movs	r4, #0
    	    GPSInfo.hdop=stor(token);
 8005f38:	4e0e      	ldr	r6, [pc, #56]	; (8005f74 <getGNGSA+0x4c>)
 8005f3a:	e006      	b.n	8005f4a <getGNGSA+0x22>
  	    token = strtok(NULL,",");
 8005f3c:	0029      	movs	r1, r5
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f008 fda8 	bl	800ea94 <strtok>
        i++;
 8005f44:	3401      	adds	r4, #1
    while( token != NULL ) {
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d00d      	beq.n	8005f66 <getGNGSA+0x3e>
        if(i==15){ //Getting PDOP
 8005f4a:	2c0f      	cmp	r4, #15
 8005f4c:	d00c      	beq.n	8005f68 <getGNGSA+0x40>
    	if(i==16){ //Getting HDOP
 8005f4e:	2c10      	cmp	r4, #16
 8005f50:	d1f4      	bne.n	8005f3c <getGNGSA+0x14>
    	    GPSInfo.hdop=stor(token);
 8005f52:	f7ff fe87 	bl	8005c64 <stor>
  	    token = strtok(NULL,",");
 8005f56:	0029      	movs	r1, r5
    	    GPSInfo.hdop=stor(token);
 8005f58:	60f0      	str	r0, [r6, #12]
  	    token = strtok(NULL,",");
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	f008 fd9a 	bl	800ea94 <strtok>
        i++;
 8005f60:	3401      	adds	r4, #1
    while( token != NULL ) {
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d1f1      	bne.n	8005f4a <getGNGSA+0x22>
}
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
    	    GPSInfo.pdop=stor(token);
 8005f68:	f7ff fe7c 	bl	8005c64 <stor>
 8005f6c:	6130      	str	r0, [r6, #16]
    	if(i==16){ //Getting HDOP
 8005f6e:	e7e5      	b.n	8005f3c <getGNGSA+0x14>
 8005f70:	08012824 	.word	0x08012824
 8005f74:	20000674 	.word	0x20000674

08005f78 <getGNGGA>:
void getGNGGA(const  char * ptra){
 8005f78:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8005f7a:	4d11      	ldr	r5, [pc, #68]	; (8005fc0 <getGNGGA+0x48>)
 8005f7c:	0029      	movs	r1, r5
 8005f7e:	f008 fd89 	bl	800ea94 <strtok>
    while( token != NULL ) {
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d017      	beq.n	8005fb6 <getGNGGA+0x3e>
	int i=0;
 8005f86:	2400      	movs	r4, #0
            GPSInfo.alt = stor(token);
 8005f88:	4e0e      	ldr	r6, [pc, #56]	; (8005fc4 <getGNGGA+0x4c>)
 8005f8a:	e006      	b.n	8005f9a <getGNGGA+0x22>
  	    token = strtok(NULL,",");
 8005f8c:	0029      	movs	r1, r5
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f008 fd80 	bl	800ea94 <strtok>
        i++;
 8005f94:	3401      	adds	r4, #1
    while( token != NULL ) {
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d00d      	beq.n	8005fb6 <getGNGGA+0x3e>
    	if(i==7){ //Getting Satellites no
 8005f9a:	2c07      	cmp	r4, #7
 8005f9c:	d00c      	beq.n	8005fb8 <getGNGGA+0x40>
    	if(i==9){ //Getting Saltitute
 8005f9e:	2c09      	cmp	r4, #9
 8005fa0:	d1f4      	bne.n	8005f8c <getGNGGA+0x14>
            GPSInfo.alt = stor(token);
 8005fa2:	f7ff fe5f 	bl	8005c64 <stor>
  	    token = strtok(NULL,",");
 8005fa6:	0029      	movs	r1, r5
            GPSInfo.alt = stor(token);
 8005fa8:	60b0      	str	r0, [r6, #8]
  	    token = strtok(NULL,",");
 8005faa:	2000      	movs	r0, #0
 8005fac:	f008 fd72 	bl	800ea94 <strtok>
        i++;
 8005fb0:	3401      	adds	r4, #1
    while( token != NULL ) {
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d1f1      	bne.n	8005f9a <getGNGGA+0x22>
}
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
            GPSInfo.sat = atoi(token);
 8005fb8:	f006 fda8 	bl	800cb0c <atoi>
 8005fbc:	6230      	str	r0, [r6, #32]
    	if(i==9){ //Getting Saltitute
 8005fbe:	e7e5      	b.n	8005f8c <getGNGGA+0x14>
 8005fc0:	08012824 	.word	0x08012824
 8005fc4:	20000674 	.word	0x20000674

08005fc8 <validateGPS>:
int validateGPS(const char * str){
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	0004      	movs	r4, r0
	int GPStyp=0;

	uint8_t checksum = 0;
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8005fcc:	f7ff fb38 	bl	8005640 <nmea_valid_checksum>
	        return 0;
 8005fd0:	2500      	movs	r5, #0
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8005fd2:	2801      	cmp	r0, #1
 8005fd4:	d10e      	bne.n	8005ff4 <validateGPS+0x2c>
	    }
	    if(strlen(str)<4){return 0;}
 8005fd6:	0020      	movs	r0, r4
 8005fd8:	f7fa f896 	bl	8000108 <strlen>
 8005fdc:	2803      	cmp	r0, #3
 8005fde:	d909      	bls.n	8005ff4 <validateGPS+0x2c>

	    if (strstr(str, "GNRMC") != NULL) {
 8005fe0:	0020      	movs	r0, r4
 8005fe2:	491d      	ldr	r1, [pc, #116]	; (8006058 <validateGPS+0x90>)
 8005fe4:	f008 fdbe 	bl	800eb64 <strstr>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d005      	beq.n	8005ff8 <validateGPS+0x30>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8005fec:	0020      	movs	r0, r4
 8005fee:	f7ff fedd 	bl	8005dac <getGNRMC>
 8005ff2:	3501      	adds	r5, #1
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
	    	GPStyp=6;
	    }
    return(GPStyp);
}
 8005ff4:	0028      	movs	r0, r5
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
	    else if (strstr(str, "GNGGA") != NULL) {
 8005ff8:	0020      	movs	r0, r4
 8005ffa:	4918      	ldr	r1, [pc, #96]	; (800605c <validateGPS+0x94>)
 8005ffc:	f008 fdb2 	bl	800eb64 <strstr>
 8006000:	2800      	cmp	r0, #0
 8006002:	d11e      	bne.n	8006042 <validateGPS+0x7a>
	    else if (strstr(str, "GNGSA") != NULL) {
 8006004:	0020      	movs	r0, r4
 8006006:	4916      	ldr	r1, [pc, #88]	; (8006060 <validateGPS+0x98>)
 8006008:	f008 fdac 	bl	800eb64 <strstr>
 800600c:	2800      	cmp	r0, #0
 800600e:	d11d      	bne.n	800604c <validateGPS+0x84>
	    else if (strstr(str, "GNGSV") != NULL) {
 8006010:	0020      	movs	r0, r4
 8006012:	4914      	ldr	r1, [pc, #80]	; (8006064 <validateGPS+0x9c>)
 8006014:	f008 fda6 	bl	800eb64 <strstr>
	    	GPStyp=4;
 8006018:	2504      	movs	r5, #4
	    else if (strstr(str, "GNGSV") != NULL) {
 800601a:	2800      	cmp	r0, #0
 800601c:	d1ea      	bne.n	8005ff4 <validateGPS+0x2c>
	    else if (strstr(str, "GNGLL") != NULL) {
 800601e:	0020      	movs	r0, r4
 8006020:	4911      	ldr	r1, [pc, #68]	; (8006068 <validateGPS+0xa0>)
 8006022:	f008 fd9f 	bl	800eb64 <strstr>
	    	GPStyp=5;
 8006026:	3501      	adds	r5, #1
	    else if (strstr(str, "GNGLL") != NULL) {
 8006028:	2800      	cmp	r0, #0
 800602a:	d1e3      	bne.n	8005ff4 <validateGPS+0x2c>
	    else if (strstr(str, "GNVTG") != NULL) {
 800602c:	0020      	movs	r0, r4
 800602e:	490f      	ldr	r1, [pc, #60]	; (800606c <validateGPS+0xa4>)
 8006030:	f008 fd98 	bl	800eb64 <strstr>
	    	GPStyp=6;
 8006034:	4243      	negs	r3, r0
 8006036:	4158      	adcs	r0, r3
 8006038:	4240      	negs	r0, r0
 800603a:	43a8      	bics	r0, r5
 800603c:	0005      	movs	r5, r0
 800603e:	3506      	adds	r5, #6
 8006040:	e7d8      	b.n	8005ff4 <validateGPS+0x2c>
	    	GPStyp=2; getGNGGA(str);
 8006042:	0020      	movs	r0, r4
 8006044:	f7ff ff98 	bl	8005f78 <getGNGGA>
 8006048:	2502      	movs	r5, #2
 800604a:	e7d3      	b.n	8005ff4 <validateGPS+0x2c>
	    	GPStyp=3;getGNGSA(str);
 800604c:	0020      	movs	r0, r4
 800604e:	f7ff ff6b 	bl	8005f28 <getGNGSA>
 8006052:	2503      	movs	r5, #3
 8006054:	e7ce      	b.n	8005ff4 <validateGPS+0x2c>
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	0801367c 	.word	0x0801367c
 800605c:	08013684 	.word	0x08013684
 8006060:	0801368c 	.word	0x0801368c
 8006064:	08013694 	.word	0x08013694
 8006068:	0801369c 	.word	0x0801369c
 800606c:	080136a4 	.word	0x080136a4

08006070 <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8006070:	b530      	push	{r4, r5, lr}
	    //Debug_Tx(gpsData);
		int valid=0 ;
		if(strlen((char*)gpsData)>5){
 8006072:	4d0e      	ldr	r5, [pc, #56]	; (80060ac <ProcessGPS+0x3c>)
void ProcessGPS(){
 8006074:	b083      	sub	sp, #12
		if(strlen((char*)gpsData)>5){
 8006076:	0028      	movs	r0, r5
 8006078:	f7fa f846 	bl	8000108 <strlen>
 800607c:	2805      	cmp	r0, #5
 800607e:	d801      	bhi.n	8006084 <ProcessGPS+0x14>
				valid=valid+validateGPS(token);
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
			}
			//free(token);
		}
}
 8006080:	b003      	add	sp, #12
 8006082:	bd30      	pop	{r4, r5, pc}
			char *tk= NULL;
 8006084:	2300      	movs	r3, #0
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8006086:	4c0a      	ldr	r4, [pc, #40]	; (80060b0 <ProcessGPS+0x40>)
 8006088:	0028      	movs	r0, r5
 800608a:	0021      	movs	r1, r4
 800608c:	aa01      	add	r2, sp, #4
			char *tk= NULL;
 800608e:	9301      	str	r3, [sp, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8006090:	f008 fd63 	bl	800eb5a <strtok_r>
			while( token != NULL ) {
 8006094:	2800      	cmp	r0, #0
 8006096:	d0f3      	beq.n	8006080 <ProcessGPS+0x10>
				valid=valid+validateGPS(token);
 8006098:	f7ff ff96 	bl	8005fc8 <validateGPS>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 800609c:	0021      	movs	r1, r4
 800609e:	2000      	movs	r0, #0
 80060a0:	aa01      	add	r2, sp, #4
 80060a2:	f008 fd5a 	bl	800eb5a <strtok_r>
			while( token != NULL ) {
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d1f6      	bne.n	8006098 <ProcessGPS+0x28>
 80060aa:	e7e9      	b.n	8006080 <ProcessGPS+0x10>
 80060ac:	200042d4 	.word	0x200042d4
 80060b0:	080126d8 	.word	0x080126d8

080060b4 <HAL_UART_TxCpltCallback>:
}
 80060b4:	4770      	bx	lr
 80060b6:	46c0      	nop			; (mov r8, r8)

080060b8 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80060b8:	b570      	push	{r4, r5, r6, lr}
	if(huart==&huart2){
 80060ba:	4c19      	ldr	r4, [pc, #100]	; (8006120 <HAL_UART_ErrorCallback+0x68>)
 80060bc:	42a0      	cmp	r0, r4
 80060be:	d013      	beq.n	80060e8 <HAL_UART_ErrorCallback+0x30>
	if(huart==&huart1){
 80060c0:	4b18      	ldr	r3, [pc, #96]	; (8006124 <HAL_UART_ErrorCallback+0x6c>)
 80060c2:	4298      	cmp	r0, r3
 80060c4:	d000      	beq.n	80060c8 <HAL_UART_ErrorCallback+0x10>
}
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
		if(DMAon==1){
 80060c8:	4b17      	ldr	r3, [pc, #92]	; (8006128 <HAL_UART_ErrorCallback+0x70>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d1fa      	bne.n	80060c6 <HAL_UART_ErrorCallback+0xe>
		GSMBuff[0]=0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	4916      	ldr	r1, [pc, #88]	; (800612c <HAL_UART_ErrorCallback+0x74>)
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80060d4:	6802      	ldr	r2, [r0, #0]
		GSMBuff[0]=0;
 80060d6:	700b      	strb	r3, [r1, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80060d8:	330c      	adds	r3, #12
 80060da:	6213      	str	r3, [r2, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	6213      	str	r3, [r2, #32]
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80060e0:	2201      	movs	r2, #1
 80060e2:	f004 ff89 	bl	800aff8 <HAL_UART_Receive_DMA>
}
 80060e6:	e7ee      	b.n	80060c6 <HAL_UART_ErrorCallback+0xe>
		if(dnlfile==0){
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <HAL_UART_ErrorCallback+0x78>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1ea      	bne.n	80060c6 <HAL_UART_ErrorCallback+0xe>
		if(DMAon==1){
 80060f0:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <HAL_UART_ErrorCallback+0x70>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d1e6      	bne.n	80060c6 <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80060f8:	4d0e      	ldr	r5, [pc, #56]	; (8006134 <HAL_UART_ErrorCallback+0x7c>)
 80060fa:	782b      	ldrb	r3, [r5, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <HAL_UART_ErrorCallback+0x5c>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006100:	220c      	movs	r2, #12
 8006102:	6823      	ldr	r3, [r4, #0]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006104:	0029      	movs	r1, r5
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006106:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006108:	22e1      	movs	r2, #225	; 0xe1
 800610a:	0020      	movs	r0, r4
 800610c:	0092      	lsls	r2, r2, #2
 800610e:	f004 ff73 	bl	800aff8 <HAL_UART_Receive_DMA>
 8006112:	e7d8      	b.n	80060c6 <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8006114:	2100      	movs	r1, #0
 8006116:	0028      	movs	r0, r5
 8006118:	4a07      	ldr	r2, [pc, #28]	; (8006138 <HAL_UART_ErrorCallback+0x80>)
 800611a:	f008 fc73 	bl	800ea04 <memset>
 800611e:	e7ef      	b.n	8006100 <HAL_UART_ErrorCallback+0x48>
 8006120:	20004b0c 	.word	0x20004b0c
 8006124:	20004a78 	.word	0x20004a78
 8006128:	20000094 	.word	0x20000094
 800612c:	200006c4 	.word	0x200006c4
 8006130:	200042c8 	.word	0x200042c8
 8006134:	200042d4 	.word	0x200042d4
 8006138:	000003e7 	.word	0x000003e7

0800613c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 800613c:	4b04      	ldr	r3, [pc, #16]	; (8006150 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800613e:	6802      	ldr	r2, [r0, #0]
{
 8006140:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8006142:	429a      	cmp	r2, r3
 8006144:	d000      	beq.n	8006148 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8006146:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8006148:	f001 fc82 	bl	8007a50 <HAL_IncTick>
}
 800614c:	e7fb      	b.n	8006146 <HAL_TIM_PeriodElapsedCallback+0xa>
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	40012c00 	.word	0x40012c00

08006154 <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 8006154:	b510      	push	{r4, lr}
 8006156:	b084      	sub	sp, #16
	SPI_flash_Chip_Erase();
 8006158:	f7fe fef4 	bl	8004f44 <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 800615c:	4809      	ldr	r0, [pc, #36]	; (8006184 <initFirstRun+0x30>)
 800615e:	f001 fc89 	bl	8007a74 <HAL_Delay>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8006162:	4c09      	ldr	r4, [pc, #36]	; (8006188 <initFirstRun+0x34>)
 8006164:	4b09      	ldr	r3, [pc, #36]	; (800618c <initFirstRun+0x38>)
 8006166:	0022      	movs	r2, r4
 8006168:	0021      	movs	r1, r4
 800616a:	4809      	ldr	r0, [pc, #36]	; (8006190 <initFirstRun+0x3c>)
 800616c:	3468      	adds	r4, #104	; 0x68
 800616e:	320c      	adds	r2, #12
 8006170:	3134      	adds	r1, #52	; 0x34
 8006172:	9402      	str	r4, [sp, #8]
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	3024      	adds	r0, #36	; 0x24
 800617a:	f7ff f8bd 	bl	80052f8 <writeConfig>
}
 800617e:	b004      	add	sp, #16
 8006180:	bd10      	pop	{r4, pc}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	00007530 	.word	0x00007530
 8006188:	08012540 	.word	0x08012540
 800618c:	080136ac 	.word	0x080136ac
 8006190:	080125c0 	.word	0x080125c0

08006194 <ReadAllGPIO>:
void ReadAllGPIO(){
 8006194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006196:	46de      	mov	lr, fp
 8006198:	4657      	mov	r7, sl
 800619a:	464e      	mov	r6, r9
 800619c:	4645      	mov	r5, r8
 800619e:	b5e0      	push	{r5, r6, r7, lr}
	memset(StatusStrng,0,20);
 80061a0:	4d60      	ldr	r5, [pc, #384]	; (8006324 <ReadAllGPIO+0x190>)
void ReadAllGPIO(){
 80061a2:	b08b      	sub	sp, #44	; 0x2c
	memset(StatusStrng,0,20);
 80061a4:	2214      	movs	r2, #20
 80061a6:	2100      	movs	r1, #0
 80061a8:	0028      	movs	r0, r5
 80061aa:	f008 fc2b 	bl	800ea04 <memset>
	memset(Dig_io,0,30);
 80061ae:	4e5e      	ldr	r6, [pc, #376]	; (8006328 <ReadAllGPIO+0x194>)
 80061b0:	221e      	movs	r2, #30
 80061b2:	2100      	movs	r1, #0
 80061b4:	0030      	movs	r0, r6
 80061b6:	f008 fc25 	bl	800ea04 <memset>
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	20a0      	movs	r0, #160	; 0xa0
 80061be:	0149      	lsls	r1, r1, #5
 80061c0:	05c0      	lsls	r0, r0, #23
 80061c2:	f002 fb19 	bl	80087f8 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80061c6:	2180      	movs	r1, #128	; 0x80
	Dig_in[0]=Read_DI_IN1();
 80061c8:	4c58      	ldr	r4, [pc, #352]	; (800632c <ReadAllGPIO+0x198>)
 80061ca:	0109      	lsls	r1, r1, #4
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 80061cc:	6020      	str	r0, [r4, #0]
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80061ce:	4858      	ldr	r0, [pc, #352]	; (8006330 <ReadAllGPIO+0x19c>)
 80061d0:	f002 fb12 	bl	80087f8 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80061d4:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80061d6:	6060      	str	r0, [r4, #4]
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80061d8:	0149      	lsls	r1, r1, #5
 80061da:	4855      	ldr	r0, [pc, #340]	; (8006330 <ReadAllGPIO+0x19c>)
 80061dc:	f002 fb0c 	bl	80087f8 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80061e0:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80061e2:	60a0      	str	r0, [r4, #8]
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80061e4:	0189      	lsls	r1, r1, #6
 80061e6:	4852      	ldr	r0, [pc, #328]	; (8006330 <ReadAllGPIO+0x19c>)
 80061e8:	f002 fb06 	bl	80087f8 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80061ec:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 80061ee:	4b51      	ldr	r3, [pc, #324]	; (8006334 <ReadAllGPIO+0x1a0>)
 80061f0:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80061f2:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80061f4:	484e      	ldr	r0, [pc, #312]	; (8006330 <ReadAllGPIO+0x19c>)
 80061f6:	469a      	mov	sl, r3
 80061f8:	f002 fafe 	bl	80087f8 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80061fc:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 80061fe:	4b4e      	ldr	r3, [pc, #312]	; (8006338 <ReadAllGPIO+0x1a4>)
 8006200:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8006202:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8006204:	484a      	ldr	r0, [pc, #296]	; (8006330 <ReadAllGPIO+0x19c>)
 8006206:	4699      	mov	r9, r3
 8006208:	f002 faf6 	bl	80087f8 <HAL_GPIO_ReadPin>
		else box='C';
 800620c:	3801      	subs	r0, #1
 800620e:	4243      	negs	r3, r0
 8006210:	4158      	adcs	r0, r3
 8006212:	230c      	movs	r3, #12
 8006214:	4240      	negs	r0, r0
 8006216:	4003      	ands	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006218:	2180      	movs	r1, #128	; 0x80
 800621a:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 800621c:	4a47      	ldr	r2, [pc, #284]	; (800633c <ReadAllGPIO+0x1a8>)
		else box='C';
 800621e:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006220:	0049      	lsls	r1, r1, #1
 8006222:	05c0      	lsls	r0, r0, #23
 8006224:	9208      	str	r2, [sp, #32]
 8006226:	7013      	strb	r3, [r2, #0]
 8006228:	f002 fae6 	bl	80087f8 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 800622c:	4b44      	ldr	r3, [pc, #272]	; (8006340 <ReadAllGPIO+0x1ac>)
	EXT_B=Read_EXT_B_SENSE();
 800622e:	4945      	ldr	r1, [pc, #276]	; (8006344 <ReadAllGPIO+0x1b0>)
 8006230:	6018      	str	r0, [r3, #0]
 8006232:	9309      	str	r3, [sp, #36]	; 0x24
	return (ADCvalue[2]*VSENSE*16);
 8006234:	4b44      	ldr	r3, [pc, #272]	; (8006348 <ReadAllGPIO+0x1b4>)
 8006236:	4845      	ldr	r0, [pc, #276]	; (800634c <ReadAllGPIO+0x1b8>)
 8006238:	681f      	ldr	r7, [r3, #0]
 800623a:	4680      	mov	r8, r0
 800623c:	6880      	ldr	r0, [r0, #8]
 800623e:	9106      	str	r1, [sp, #24]
 8006240:	f7fb f8a6 	bl	8001390 <__aeabi_ui2f>
 8006244:	1c39      	adds	r1, r7, #0
 8006246:	f7fa fd43 	bl	8000cd0 <__aeabi_fmul>
 800624a:	2183      	movs	r1, #131	; 0x83
 800624c:	05c9      	lsls	r1, r1, #23
 800624e:	f7fa fd3f 	bl	8000cd0 <__aeabi_fmul>
 8006252:	9906      	ldr	r1, [sp, #24]
 8006254:	6008      	str	r0, [r1, #0]
	INT_B=Read_INT_B_SENSE();
 8006256:	483e      	ldr	r0, [pc, #248]	; (8006350 <ReadAllGPIO+0x1bc>)
 8006258:	9007      	str	r0, [sp, #28]
	return (ADCvalue[3]*VSENSE*2);
 800625a:	4640      	mov	r0, r8
 800625c:	68c0      	ldr	r0, [r0, #12]
 800625e:	f7fb f897 	bl	8001390 <__aeabi_ui2f>
 8006262:	1c39      	adds	r1, r7, #0
 8006264:	f7fa fd34 	bl	8000cd0 <__aeabi_fmul>
 8006268:	1c01      	adds	r1, r0, #0
 800626a:	f7fa f9c7 	bl	80005fc <__aeabi_fadd>
 800626e:	9907      	ldr	r1, [sp, #28]
 8006270:	6008      	str	r0, [r1, #0]
	adc[0]=Read_ADC1();
 8006272:	4838      	ldr	r0, [pc, #224]	; (8006354 <ReadAllGPIO+0x1c0>)
 8006274:	4683      	mov	fp, r0
	float val=(float)ADCvalue[0];
 8006276:	4640      	mov	r0, r8
 8006278:	6800      	ldr	r0, [r0, #0]
 800627a:	f7fb f889 	bl	8001390 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 800627e:	1c39      	adds	r1, r7, #0
 8006280:	f7fa fd26 	bl	8000cd0 <__aeabi_fmul>
 8006284:	4934      	ldr	r1, [pc, #208]	; (8006358 <ReadAllGPIO+0x1c4>)
 8006286:	f7fa fd23 	bl	8000cd0 <__aeabi_fmul>
 800628a:	465b      	mov	r3, fp
 800628c:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 800628e:	4640      	mov	r0, r8
 8006290:	6840      	ldr	r0, [r0, #4]
 8006292:	f7fb f87d 	bl	8001390 <__aeabi_ui2f>
 8006296:	1c39      	adds	r1, r7, #0
 8006298:	f7fa fd1a 	bl	8000cd0 <__aeabi_fmul>
 800629c:	492e      	ldr	r1, [pc, #184]	; (8006358 <ReadAllGPIO+0x1c4>)
 800629e:	f7fa fd17 	bl	8000cd0 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 80062a2:	465f      	mov	r7, fp
	memset(StatusStrng,0,20);
 80062a4:	2214      	movs	r2, #20
	adc[1]=Read_ADC2();
 80062a6:	6078      	str	r0, [r7, #4]
	memset(StatusStrng,0,20);
 80062a8:	2100      	movs	r1, #0
 80062aa:	0028      	movs	r0, r5
 80062ac:	f008 fbaa 	bl	800ea04 <memset>
	memset(Dig_io,0,30);
 80062b0:	221e      	movs	r2, #30
 80062b2:	2100      	movs	r1, #0
 80062b4:	0030      	movs	r0, r6
 80062b6:	f008 fba5 	bl	800ea04 <memset>
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 80062ba:	4828      	ldr	r0, [pc, #160]	; (800635c <ReadAllGPIO+0x1c8>)
 80062bc:	6863      	ldr	r3, [r4, #4]
 80062be:	6800      	ldr	r0, [r0, #0]
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	9003      	str	r0, [sp, #12]
 80062c4:	4826      	ldr	r0, [pc, #152]	; (8006360 <ReadAllGPIO+0x1cc>)
 80062c6:	4927      	ldr	r1, [pc, #156]	; (8006364 <ReadAllGPIO+0x1d0>)
 80062c8:	6800      	ldr	r0, [r0, #0]
 80062ca:	9002      	str	r0, [sp, #8]
 80062cc:	4826      	ldr	r0, [pc, #152]	; (8006368 <ReadAllGPIO+0x1d4>)
 80062ce:	6800      	ldr	r0, [r0, #0]
 80062d0:	9001      	str	r0, [sp, #4]
 80062d2:	68a0      	ldr	r0, [r4, #8]
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 80062d4:	4654      	mov	r4, sl
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 80062d6:	9000      	str	r0, [sp, #0]
 80062d8:	0030      	movs	r0, r6
 80062da:	f008 fb27 	bl	800e92c <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 80062de:	6826      	ldr	r6, [r4, #0]
 80062e0:	464c      	mov	r4, r9
 80062e2:	9a08      	ldr	r2, [sp, #32]
 80062e4:	6827      	ldr	r7, [r4, #0]
 80062e6:	7813      	ldrb	r3, [r2, #0]
 80062e8:	9807      	ldr	r0, [sp, #28]
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ee:	4c1f      	ldr	r4, [pc, #124]	; (800636c <ReadAllGPIO+0x1d8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	6800      	ldr	r0, [r0, #0]
 80062f6:	f7fc fedb 	bl	80030b0 <__aeabi_f2d>
 80062fa:	9002      	str	r0, [sp, #8]
 80062fc:	9103      	str	r1, [sp, #12]
 80062fe:	9906      	ldr	r1, [sp, #24]
 8006300:	6808      	ldr	r0, [r1, #0]
 8006302:	f7fc fed5 	bl	80030b0 <__aeabi_f2d>
 8006306:	0033      	movs	r3, r6
 8006308:	9000      	str	r0, [sp, #0]
 800630a:	9101      	str	r1, [sp, #4]
 800630c:	003a      	movs	r2, r7
 800630e:	0021      	movs	r1, r4
 8006310:	0028      	movs	r0, r5
 8006312:	f008 fb0b 	bl	800e92c <siprintf>
}
 8006316:	b00b      	add	sp, #44	; 0x2c
 8006318:	bcf0      	pop	{r4, r5, r6, r7}
 800631a:	46bb      	mov	fp, r7
 800631c:	46b2      	mov	sl, r6
 800631e:	46a9      	mov	r9, r5
 8006320:	46a0      	mov	r8, r4
 8006322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006324:	20004100 	.word	0x20004100
 8006328:	2000060c 	.word	0x2000060c
 800632c:	20000600 	.word	0x20000600
 8006330:	50000400 	.word	0x50000400
 8006334:	20002058 	.word	0x20002058
 8006338:	2000033c 	.word	0x2000033c
 800633c:	20000090 	.word	0x20000090
 8006340:	200040e4 	.word	0x200040e4
 8006344:	20000634 	.word	0x20000634
 8006348:	200000b4 	.word	0x200000b4
 800634c:	20000340 	.word	0x20000340
 8006350:	2000201c 	.word	0x2000201c
 8006354:	20004148 	.word	0x20004148
 8006358:	41300000 	.word	0x41300000
 800635c:	20004c6c 	.word	0x20004c6c
 8006360:	20000630 	.word	0x20000630
 8006364:	080136bc 	.word	0x080136bc
 8006368:	2000062c 	.word	0x2000062c
 800636c:	080136d4 	.word	0x080136d4

08006370 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006370:	b570      	push	{r4, r5, r6, lr}
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8006372:	2104      	movs	r1, #4
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006374:	0004      	movs	r4, r0
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8006376:	482e      	ldr	r0, [pc, #184]	; (8006430 <HAL_UART_RxCpltCallback+0xc0>)
 8006378:	f002 fa4a 	bl	8008810 <HAL_GPIO_TogglePin>
	if(huart==&huart2){
 800637c:	4d2d      	ldr	r5, [pc, #180]	; (8006434 <HAL_UART_RxCpltCallback+0xc4>)
 800637e:	42ac      	cmp	r4, r5
 8006380:	d01a      	beq.n	80063b8 <HAL_UART_RxCpltCallback+0x48>
	if(huart==&huart1){
 8006382:	4d2d      	ldr	r5, [pc, #180]	; (8006438 <HAL_UART_RxCpltCallback+0xc8>)
 8006384:	42ac      	cmp	r4, r5
 8006386:	d000      	beq.n	800638a <HAL_UART_RxCpltCallback+0x1a>
}
 8006388:	bd70      	pop	{r4, r5, r6, pc}
		if(strlen((char*)GSMData)<1900){
 800638a:	4c2c      	ldr	r4, [pc, #176]	; (800643c <HAL_UART_RxCpltCallback+0xcc>)
 800638c:	0020      	movs	r0, r4
 800638e:	f7f9 febb 	bl	8000108 <strlen>
 8006392:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <HAL_UART_RxCpltCallback+0xd0>)
 8006394:	4298      	cmp	r0, r3
 8006396:	d803      	bhi.n	80063a0 <HAL_UART_RxCpltCallback+0x30>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8006398:	492a      	ldr	r1, [pc, #168]	; (8006444 <HAL_UART_RxCpltCallback+0xd4>)
 800639a:	780b      	ldrb	r3, [r1, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d123      	bne.n	80063e8 <HAL_UART_RxCpltCallback+0x78>
		if(DMAon==1){
 80063a0:	4b29      	ldr	r3, [pc, #164]	; (8006448 <HAL_UART_RxCpltCallback+0xd8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d1ef      	bne.n	8006388 <HAL_UART_RxCpltCallback+0x18>
		GSMBuff[0]=0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	4926      	ldr	r1, [pc, #152]	; (8006444 <HAL_UART_RxCpltCallback+0xd4>)
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80063ac:	2201      	movs	r2, #1
 80063ae:	0028      	movs	r0, r5
		GSMBuff[0]=0;
 80063b0:	700b      	strb	r3, [r1, #0]
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80063b2:	f004 fe21 	bl	800aff8 <HAL_UART_Receive_DMA>
}
 80063b6:	e7e7      	b.n	8006388 <HAL_UART_RxCpltCallback+0x18>
		if(dnlfile==0){
 80063b8:	4b24      	ldr	r3, [pc, #144]	; (800644c <HAL_UART_RxCpltCallback+0xdc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e3      	bne.n	8006388 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>10){
 80063c0:	4c23      	ldr	r4, [pc, #140]	; (8006450 <HAL_UART_RxCpltCallback+0xe0>)
 80063c2:	0020      	movs	r0, r4
 80063c4:	f7f9 fea0 	bl	8000108 <strlen>
 80063c8:	280a      	cmp	r0, #10
 80063ca:	d817      	bhi.n	80063fc <HAL_UART_RxCpltCallback+0x8c>
		if(DMAon==1){
 80063cc:	4b1e      	ldr	r3, [pc, #120]	; (8006448 <HAL_UART_RxCpltCallback+0xd8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d1d9      	bne.n	8006388 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80063d4:	7823      	ldrb	r3, [r4, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <HAL_UART_RxCpltCallback+0x80>
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 80063da:	22e1      	movs	r2, #225	; 0xe1
 80063dc:	0021      	movs	r1, r4
 80063de:	0028      	movs	r0, r5
 80063e0:	0092      	lsls	r2, r2, #2
 80063e2:	f004 fe09 	bl	800aff8 <HAL_UART_Receive_DMA>
 80063e6:	e7cf      	b.n	8006388 <HAL_UART_RxCpltCallback+0x18>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 80063e8:	1900      	adds	r0, r0, r4
 80063ea:	f008 fcca 	bl	800ed82 <strcpy>
 80063ee:	e7d7      	b.n	80063a0 <HAL_UART_RxCpltCallback+0x30>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80063f0:	2100      	movs	r1, #0
 80063f2:	0020      	movs	r0, r4
 80063f4:	4a17      	ldr	r2, [pc, #92]	; (8006454 <HAL_UART_RxCpltCallback+0xe4>)
 80063f6:	f008 fb05 	bl	800ea04 <memset>
 80063fa:	e7ee      	b.n	80063da <HAL_UART_RxCpltCallback+0x6a>
			ProcessGPS((char*)gpsData);
 80063fc:	0020      	movs	r0, r4
 80063fe:	f7ff fe37 	bl	8006070 <ProcessGPS>
			getGPSString();
 8006402:	f7ff f8bf 	bl	8005584 <getGPSString>
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 8006406:	2104      	movs	r1, #4
 8006408:	4809      	ldr	r0, [pc, #36]	; (8006430 <HAL_UART_RxCpltCallback+0xc0>)
 800640a:	f002 fa01 	bl	8008810 <HAL_GPIO_TogglePin>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 800640e:	4e12      	ldr	r6, [pc, #72]	; (8006458 <HAL_UART_RxCpltCallback+0xe8>)
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <HAL_UART_RxCpltCallback+0xb6>
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 8006416:	4b11      	ldr	r3, [pc, #68]	; (800645c <HAL_UART_RxCpltCallback+0xec>)
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	2800      	cmp	r0, #0
 800641c:	dd00      	ble.n	8006420 <HAL_UART_RxCpltCallback+0xb0>
 800641e:	6030      	str	r0, [r6, #0]
			ReadAllGPIO();
 8006420:	f7ff feb8 	bl	8006194 <ReadAllGPIO>
 8006424:	e7d2      	b.n	80063cc <HAL_UART_RxCpltCallback+0x5c>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8006426:	f7ff f859 	bl	80054dc <detectAcc>
 800642a:	4b0c      	ldr	r3, [pc, #48]	; (800645c <HAL_UART_RxCpltCallback+0xec>)
 800642c:	6018      	str	r0, [r3, #0]
 800642e:	e7f4      	b.n	800641a <HAL_UART_RxCpltCallback+0xaa>
 8006430:	50000c00 	.word	0x50000c00
 8006434:	20004b0c 	.word	0x20004b0c
 8006438:	20004a78 	.word	0x20004a78
 800643c:	200006c8 	.word	0x200006c8
 8006440:	0000076b 	.word	0x0000076b
 8006444:	200006c4 	.word	0x200006c4
 8006448:	20000094 	.word	0x20000094
 800644c:	200042c8 	.word	0x200042c8
 8006450:	200042d4 	.word	0x200042d4
 8006454:	000003e7 	.word	0x000003e7
 8006458:	20000354 	.word	0x20000354
 800645c:	20000350 	.word	0x20000350

08006460 <GetHead>:
void GetHead(){
 8006460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006462:	46de      	mov	lr, fp
 8006464:	464e      	mov	r6, r9
 8006466:	4645      	mov	r5, r8
 8006468:	4657      	mov	r7, sl
 800646a:	b5e0      	push	{r5, r6, r7, lr}
	memset(Head,0,100);
 800646c:	4dc8      	ldr	r5, [pc, #800]	; (8006790 <GetHead+0x330>)
 800646e:	2264      	movs	r2, #100	; 0x64
void GetHead(){
 8006470:	b085      	sub	sp, #20
	memset(Head,0,100);
 8006472:	2100      	movs	r1, #0
 8006474:	0028      	movs	r0, r5
 8006476:	f008 fac5 	bl	800ea04 <memset>
	strcpy(Head,InitStr);
 800647a:	49c6      	ldr	r1, [pc, #792]	; (8006794 <GetHead+0x334>)
 800647c:	0028      	movs	r0, r5
 800647e:	f008 fb87 	bl	800eb90 <stpcpy>
	strcat(Head,",");
 8006482:	232c      	movs	r3, #44	; 0x2c
	strcat(Head,VerStr);
 8006484:	49c4      	ldr	r1, [pc, #784]	; (8006798 <GetHead+0x338>)
	strcat(Head,",");
 8006486:	7003      	strb	r3, [r0, #0]
	strcat(Head,VerStr);
 8006488:	3001      	adds	r0, #1
 800648a:	f008 fb81 	bl	800eb90 <stpcpy>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 800648e:	4bc3      	ldr	r3, [pc, #780]	; (800679c <GetHead+0x33c>)
 8006490:	4ec3      	ldr	r6, [pc, #780]	; (80067a0 <GetHead+0x340>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	6833      	ldr	r3, [r6, #0]
	strcat(Head,VerStr);
 8006496:	9000      	str	r0, [sp, #0]
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 8006498:	3301      	adds	r3, #1
 800649a:	d000      	beq.n	800649e <GetHead+0x3e>
 800649c:	e0dd      	b.n	800665a <GetHead+0x1fa>
 800649e:	2a01      	cmp	r2, #1
 80064a0:	d000      	beq.n	80064a4 <GetHead+0x44>
 80064a2:	e0da      	b.n	800665a <GetHead+0x1fa>
 80064a4:	2301      	movs	r3, #1
 80064a6:	6033      	str	r3, [r6, #0]
 80064a8:	4bbe      	ldr	r3, [pc, #760]	; (80067a4 <GetHead+0x344>)
 80064aa:	469a      	mov	sl, r3
 80064ac:	2301      	movs	r3, #1
 80064ae:	4652      	mov	r2, sl
 80064b0:	425b      	negs	r3, r3
 80064b2:	6013      	str	r3, [r2, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 80064b4:	4bbc      	ldr	r3, [pc, #752]	; (80067a8 <GetHead+0x348>)
 80064b6:	4fbd      	ldr	r7, [pc, #756]	; (80067ac <GetHead+0x34c>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	d000      	beq.n	80064c2 <GetHead+0x62>
 80064c0:	e0bc      	b.n	800663c <GetHead+0x1dc>
 80064c2:	2a01      	cmp	r2, #1
 80064c4:	d000      	beq.n	80064c8 <GetHead+0x68>
 80064c6:	e0b9      	b.n	800663c <GetHead+0x1dc>
 80064c8:	2301      	movs	r3, #1
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4bb8      	ldr	r3, [pc, #736]	; (80067b0 <GetHead+0x350>)
 80064ce:	469b      	mov	fp, r3
 80064d0:	2301      	movs	r3, #1
 80064d2:	465a      	mov	r2, fp
 80064d4:	425b      	negs	r3, r3
 80064d6:	6013      	str	r3, [r2, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 80064d8:	4bb6      	ldr	r3, [pc, #728]	; (80067b4 <GetHead+0x354>)
 80064da:	49b7      	ldr	r1, [pc, #732]	; (80067b8 <GetHead+0x358>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	1c18      	adds	r0, r3, #0
 80064e0:	4699      	mov	r9, r3
 80064e2:	f7f9 fff3 	bl	80004cc <__aeabi_fcmplt>
 80064e6:	0001      	movs	r1, r0
 80064e8:	1e4b      	subs	r3, r1, #1
 80064ea:	4199      	sbcs	r1, r3
 80064ec:	4bb3      	ldr	r3, [pc, #716]	; (80067bc <GetHead+0x35c>)
 80064ee:	9102      	str	r1, [sp, #8]
 80064f0:	4698      	mov	r8, r3
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	425a      	negs	r2, r3
 80064f8:	4153      	adcs	r3, r2
 80064fa:	000a      	movs	r2, r1
 80064fc:	401a      	ands	r2, r3
 80064fe:	9201      	str	r2, [sp, #4]
 8006500:	420b      	tst	r3, r1
 8006502:	d000      	beq.n	8006506 <GetHead+0xa6>
 8006504:	e0b8      	b.n	8006678 <GetHead+0x218>
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 8006506:	4cae      	ldr	r4, [pc, #696]	; (80067c0 <GetHead+0x360>)
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	425a      	negs	r2, r3
 800650e:	4153      	adcs	r3, r2
 8006510:	b2db      	uxtb	r3, r3
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	4648      	mov	r0, r9
 8006516:	49a8      	ldr	r1, [pc, #672]	; (80067b8 <GetHead+0x358>)
 8006518:	f7f9 fff6 	bl	8000508 <__aeabi_fcmpge>
 800651c:	2300      	movs	r3, #0
 800651e:	2800      	cmp	r0, #0
 8006520:	d008      	beq.n	8006534 <GetHead+0xd4>
 8006522:	9a01      	ldr	r2, [sp, #4]
 8006524:	2301      	movs	r3, #1
 8006526:	2a00      	cmp	r2, #0
 8006528:	d004      	beq.n	8006534 <GetHead+0xd4>
 800652a:	2201      	movs	r2, #1
 800652c:	4641      	mov	r1, r8
 800652e:	4252      	negs	r2, r2
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	600a      	str	r2, [r1, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 8006534:	4aa3      	ldr	r2, [pc, #652]	; (80067c4 <GetHead+0x364>)
 8006536:	4691      	mov	r9, r2
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	3201      	adds	r2, #1
 800653c:	d176      	bne.n	800662c <GetHead+0x1cc>
 800653e:	9a02      	ldr	r2, [sp, #8]
 8006540:	2a00      	cmp	r2, #0
 8006542:	d073      	beq.n	800662c <GetHead+0x1cc>
 8006544:	2201      	movs	r2, #1
 8006546:	4649      	mov	r1, r9
 8006548:	600a      	str	r2, [r1, #0]
 800654a:	4a9f      	ldr	r2, [pc, #636]	; (80067c8 <GetHead+0x368>)
 800654c:	0011      	movs	r1, r2
 800654e:	9201      	str	r2, [sp, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	4252      	negs	r2, r2
 8006554:	600a      	str	r2, [r1, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <GetHead+0x106>
 800655a:	2301      	movs	r3, #1
 800655c:	9a01      	ldr	r2, [sp, #4]
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	464a      	mov	r2, r9
 8006562:	3b02      	subs	r3, #2
 8006564:	6013      	str	r3, [r2, #0]
	if(GSMSignal<=10){
 8006566:	4b99      	ldr	r3, [pc, #612]	; (80067cc <GetHead+0x36c>)
 8006568:	4999      	ldr	r1, [pc, #612]	; (80067d0 <GetHead+0x370>)
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	f7f9 ffb8 	bl	80004e0 <__aeabi_fcmple>
 8006570:	2800      	cmp	r0, #0
 8006572:	d000      	beq.n	8006576 <GetHead+0x116>
 8006574:	e087      	b.n	8006686 <GetHead+0x226>
	else if(getSpeed()>SpeedThr){
 8006576:	4b97      	ldr	r3, [pc, #604]	; (80067d4 <GetHead+0x374>)
	return GPSInfo.speed;
 8006578:	4a97      	ldr	r2, [pc, #604]	; (80067d8 <GetHead+0x378>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	6991      	ldr	r1, [r2, #24]
 800657e:	f7f9 ffa5 	bl	80004cc <__aeabi_fcmplt>
 8006582:	9002      	str	r0, [sp, #8]
 8006584:	2800      	cmp	r0, #0
 8006586:	d000      	beq.n	800658a <GetHead+0x12a>
 8006588:	e092      	b.n	80066b0 <GetHead+0x250>
	else if(EmergencyWireBreak>0){
 800658a:	4b94      	ldr	r3, [pc, #592]	; (80067dc <GetHead+0x37c>)
 800658c:	9303      	str	r3, [sp, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	dd00      	ble.n	8006596 <GetHead+0x136>
 8006594:	e095      	b.n	80066c2 <GetHead+0x262>
	else if(AccGyroStatus==1){
 8006596:	4b92      	ldr	r3, [pc, #584]	; (80067e0 <GetHead+0x380>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d100      	bne.n	80065a0 <GetHead+0x140>
 800659e:	e098      	b.n	80066d2 <GetHead+0x272>
	else if(AccGyroStatus==2){
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d100      	bne.n	80065a6 <GetHead+0x146>
 80065a4:	e09a      	b.n	80066dc <GetHead+0x27c>
	else if(AccGyroStatus==3){
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d100      	bne.n	80065ac <GetHead+0x14c>
 80065aa:	e0a3      	b.n	80066f4 <GetHead+0x294>
	else if(EmergencyStateON==1){
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d100      	bne.n	80065b4 <GetHead+0x154>
 80065b2:	e0a4      	b.n	80066fe <GetHead+0x29e>
	else if(EmergencyStateOFF==1){
 80065b4:	4653      	mov	r3, sl
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d100      	bne.n	80065be <GetHead+0x15e>
 80065bc:	e0a4      	b.n	8006708 <GetHead+0x2a8>
	else if(IgnitionTurnedON>0){
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dd00      	ble.n	80065c6 <GetHead+0x166>
 80065c4:	e08f      	b.n	80066e6 <GetHead+0x286>
	else if(IgnitionTurnedOFF>0){
 80065c6:	465b      	mov	r3, fp
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	dd00      	ble.n	80065d0 <GetHead+0x170>
 80065ce:	e0a0      	b.n	8006712 <GetHead+0x2b2>
	else if(BOX_STATE=='C'){
 80065d0:	4b84      	ldr	r3, [pc, #528]	; (80067e4 <GetHead+0x384>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b43      	cmp	r3, #67	; 0x43
 80065d6:	d100      	bne.n	80065da <GetHead+0x17a>
 80065d8:	e0ab      	b.n	8006732 <GetHead+0x2d2>
	else if(InternalBatterLow>0){
 80065da:	4643      	mov	r3, r8
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dd00      	ble.n	80065e4 <GetHead+0x184>
 80065e2:	e09e      	b.n	8006722 <GetHead+0x2c2>
	else if(InternalBatteryChargedAgain>0){
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	dd00      	ble.n	80065ec <GetHead+0x18c>
 80065ea:	e0a7      	b.n	800673c <GetHead+0x2dc>
	else if(MainBatteryDisconnect>0){
 80065ec:	464b      	mov	r3, r9
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dd00      	ble.n	80065f6 <GetHead+0x196>
 80065f4:	e0a9      	b.n	800674a <GetHead+0x2ea>
	else if(MainBatteryReconnect>0){
 80065f6:	9c01      	ldr	r4, [sp, #4]
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dd00      	ble.n	8006600 <GetHead+0x1a0>
 80065fe:	e0ac      	b.n	800675a <GetHead+0x2fa>
	else if(HistoryPVTData>0){
 8006600:	4e79      	ldr	r6, [pc, #484]	; (80067e8 <GetHead+0x388>)
 8006602:	6833      	ldr	r3, [r6, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	dd00      	ble.n	800660a <GetHead+0x1aa>
 8006608:	e0ae      	b.n	8006768 <GetHead+0x308>
	else if(HealthPacket>0){
 800660a:	4e78      	ldr	r6, [pc, #480]	; (80067ec <GetHead+0x38c>)
 800660c:	6833      	ldr	r3, [r6, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	dd00      	ble.n	8006614 <GetHead+0x1b4>
 8006612:	e0b0      	b.n	8006776 <GetHead+0x316>
	else if(OTAParameterChange>0){
 8006614:	4e76      	ldr	r6, [pc, #472]	; (80067f0 <GetHead+0x390>)
 8006616:	6833      	ldr	r3, [r6, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	dc00      	bgt.n	800661e <GetHead+0x1be>
 800661c:	e0b2      	b.n	8006784 <GetHead+0x324>
		strcat(Head,AlartStr_OTAParameterChange);
 800661e:	4975      	ldr	r1, [pc, #468]	; (80067f4 <GetHead+0x394>)
 8006620:	9800      	ldr	r0, [sp, #0]
 8006622:	f008 fbae 	bl	800ed82 <strcpy>
		OTAParameterChange=0;
 8006626:	2300      	movs	r3, #0
 8006628:	6033      	str	r3, [r6, #0]
 800662a:	e045      	b.n	80066b8 <GetHead+0x258>
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 800662c:	4a66      	ldr	r2, [pc, #408]	; (80067c8 <GetHead+0x368>)
 800662e:	9201      	str	r2, [sp, #4]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	3201      	adds	r2, #1
 8006634:	4251      	negs	r1, r2
 8006636:	414a      	adcs	r2, r1
 8006638:	4013      	ands	r3, r2
 800663a:	e78c      	b.n	8006556 <GetHead+0xf6>
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 800663c:	4b5c      	ldr	r3, [pc, #368]	; (80067b0 <GetHead+0x350>)
 800663e:	469b      	mov	fp, r3
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	d000      	beq.n	8006648 <GetHead+0x1e8>
 8006646:	e747      	b.n	80064d8 <GetHead+0x78>
 8006648:	2a00      	cmp	r2, #0
 800664a:	d000      	beq.n	800664e <GetHead+0x1ee>
 800664c:	e744      	b.n	80064d8 <GetHead+0x78>
 800664e:	2301      	movs	r3, #1
 8006650:	465a      	mov	r2, fp
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	3b02      	subs	r3, #2
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	e73e      	b.n	80064d8 <GetHead+0x78>
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 800665a:	4b52      	ldr	r3, [pc, #328]	; (80067a4 <GetHead+0x344>)
 800665c:	469a      	mov	sl, r3
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3301      	adds	r3, #1
 8006662:	d000      	beq.n	8006666 <GetHead+0x206>
 8006664:	e726      	b.n	80064b4 <GetHead+0x54>
 8006666:	2a00      	cmp	r2, #0
 8006668:	d000      	beq.n	800666c <GetHead+0x20c>
 800666a:	e723      	b.n	80064b4 <GetHead+0x54>
 800666c:	2301      	movs	r3, #1
 800666e:	4652      	mov	r2, sl
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	3b02      	subs	r3, #2
 8006674:	6033      	str	r3, [r6, #0]
 8006676:	e71d      	b.n	80064b4 <GetHead+0x54>
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8006678:	2301      	movs	r3, #1
 800667a:	4642      	mov	r2, r8
 800667c:	4c50      	ldr	r4, [pc, #320]	; (80067c0 <GetHead+0x360>)
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	3b02      	subs	r3, #2
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	e746      	b.n	8006514 <GetHead+0xb4>
		strcat(Head,AlartStr_HistoryPVTData);
 8006686:	495c      	ldr	r1, [pc, #368]	; (80067f8 <GetHead+0x398>)
 8006688:	9800      	ldr	r0, [sp, #0]
 800668a:	f008 fa81 	bl	800eb90 <stpcpy>
			strcat(Head,PacketStatusStrHist);
 800668e:	2203      	movs	r2, #3
 8006690:	495a      	ldr	r1, [pc, #360]	; (80067fc <GetHead+0x39c>)
 8006692:	f008 fb89 	bl	800eda8 <memcpy>
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 8006696:	4b5a      	ldr	r3, [pc, #360]	; (8006800 <GetHead+0x3a0>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	2a00      	cmp	r2, #0
 800669c:	dd01      	ble.n	80066a2 <GetHead+0x242>
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
}
 80066a2:	b005      	add	sp, #20
 80066a4:	bcf0      	pop	{r4, r5, r6, r7}
 80066a6:	46bb      	mov	fp, r7
 80066a8:	46b2      	mov	sl, r6
 80066aa:	46a9      	mov	r9, r5
 80066ac:	46a0      	mov	r8, r4
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(Head,AlartStr_OverSpeed);
 80066b0:	4954      	ldr	r1, [pc, #336]	; (8006804 <GetHead+0x3a4>)
 80066b2:	9800      	ldr	r0, [sp, #0]
 80066b4:	f008 fb65 	bl	800ed82 <strcpy>
		strcat(Head,PacketStatusStrLive);
 80066b8:	0028      	movs	r0, r5
 80066ba:	4953      	ldr	r1, [pc, #332]	; (8006808 <GetHead+0x3a8>)
 80066bc:	f008 f9aa 	bl	800ea14 <strcat>
 80066c0:	e7e9      	b.n	8006696 <GetHead+0x236>
		strcat(Head,AlartStr_EmergencyWireBreak);
 80066c2:	4952      	ldr	r1, [pc, #328]	; (800680c <GetHead+0x3ac>)
 80066c4:	9800      	ldr	r0, [sp, #0]
 80066c6:	f008 fb5c 	bl	800ed82 <strcpy>
		EmergencyWireBreak=0;
 80066ca:	9b03      	ldr	r3, [sp, #12]
 80066cc:	9a02      	ldr	r2, [sp, #8]
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e7f2      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_HarshAcceleration);
 80066d2:	494f      	ldr	r1, [pc, #316]	; (8006810 <GetHead+0x3b0>)
 80066d4:	9800      	ldr	r0, [sp, #0]
 80066d6:	f008 fb54 	bl	800ed82 <strcpy>
 80066da:	e7ed      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_HarshBreaking);
 80066dc:	494d      	ldr	r1, [pc, #308]	; (8006814 <GetHead+0x3b4>)
 80066de:	9800      	ldr	r0, [sp, #0]
 80066e0:	f008 fb4f 	bl	800ed82 <strcpy>
 80066e4:	e7e8      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedON);
 80066e6:	494c      	ldr	r1, [pc, #304]	; (8006818 <GetHead+0x3b8>)
 80066e8:	9800      	ldr	r0, [sp, #0]
 80066ea:	f008 fb4a 	bl	800ed82 <strcpy>
		IgnitionTurnedON=0;
 80066ee:	9b02      	ldr	r3, [sp, #8]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	e7e1      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_RashTurning);
 80066f4:	4949      	ldr	r1, [pc, #292]	; (800681c <GetHead+0x3bc>)
 80066f6:	9800      	ldr	r0, [sp, #0]
 80066f8:	f008 fb43 	bl	800ed82 <strcpy>
 80066fc:	e7dc      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateON);
 80066fe:	4948      	ldr	r1, [pc, #288]	; (8006820 <GetHead+0x3c0>)
 8006700:	9800      	ldr	r0, [sp, #0]
 8006702:	f008 fb3e 	bl	800ed82 <strcpy>
 8006706:	e7d7      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateOFF);
 8006708:	4946      	ldr	r1, [pc, #280]	; (8006824 <GetHead+0x3c4>)
 800670a:	9800      	ldr	r0, [sp, #0]
 800670c:	f008 fb39 	bl	800ed82 <strcpy>
 8006710:	e7d2      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 8006712:	4945      	ldr	r1, [pc, #276]	; (8006828 <GetHead+0x3c8>)
 8006714:	9800      	ldr	r0, [sp, #0]
 8006716:	f008 fb34 	bl	800ed82 <strcpy>
		IgnitionTurnedOFF=0;
 800671a:	2300      	movs	r3, #0
 800671c:	465a      	mov	r2, fp
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	e7ca      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatterLow);
 8006722:	4942      	ldr	r1, [pc, #264]	; (800682c <GetHead+0x3cc>)
 8006724:	9800      	ldr	r0, [sp, #0]
 8006726:	f008 fb2c 	bl	800ed82 <strcpy>
		InternalBatterLow=0;
 800672a:	2300      	movs	r3, #0
 800672c:	4642      	mov	r2, r8
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	e7c2      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_BoxTemper);
 8006732:	493f      	ldr	r1, [pc, #252]	; (8006830 <GetHead+0x3d0>)
 8006734:	9800      	ldr	r0, [sp, #0]
 8006736:	f008 fb24 	bl	800ed82 <strcpy>
 800673a:	e7bd      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 800673c:	493d      	ldr	r1, [pc, #244]	; (8006834 <GetHead+0x3d4>)
 800673e:	9800      	ldr	r0, [sp, #0]
 8006740:	f008 fb1f 	bl	800ed82 <strcpy>
		InternalBatteryChargedAgain=0;
 8006744:	2300      	movs	r3, #0
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	e7b6      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 800674a:	493b      	ldr	r1, [pc, #236]	; (8006838 <GetHead+0x3d8>)
 800674c:	9800      	ldr	r0, [sp, #0]
 800674e:	f008 fb18 	bl	800ed82 <strcpy>
		MainBatteryDisconnect=0;
 8006752:	2300      	movs	r3, #0
 8006754:	464a      	mov	r2, r9
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	e7ae      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryReconnect);
 800675a:	4938      	ldr	r1, [pc, #224]	; (800683c <GetHead+0x3dc>)
 800675c:	9800      	ldr	r0, [sp, #0]
 800675e:	f008 fb10 	bl	800ed82 <strcpy>
		MainBatteryReconnect=0;
 8006762:	2300      	movs	r3, #0
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	e7a7      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_HistoryPVTData);
 8006768:	4923      	ldr	r1, [pc, #140]	; (80067f8 <GetHead+0x398>)
 800676a:	9800      	ldr	r0, [sp, #0]
 800676c:	f008 fb09 	bl	800ed82 <strcpy>
		HistoryPVTData=0;
 8006770:	2300      	movs	r3, #0
 8006772:	6033      	str	r3, [r6, #0]
 8006774:	e7a0      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_HealthPacket);
 8006776:	4932      	ldr	r1, [pc, #200]	; (8006840 <GetHead+0x3e0>)
 8006778:	9800      	ldr	r0, [sp, #0]
 800677a:	f008 fb02 	bl	800ed82 <strcpy>
		HealthPacket=0;
 800677e:	2300      	movs	r3, #0
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	e799      	b.n	80066b8 <GetHead+0x258>
		strcat(Head,AlartStr_NormalPkt);
 8006784:	492f      	ldr	r1, [pc, #188]	; (8006844 <GetHead+0x3e4>)
 8006786:	9800      	ldr	r0, [sp, #0]
 8006788:	f008 fafb 	bl	800ed82 <strcpy>
 800678c:	e794      	b.n	80066b8 <GetHead+0x258>
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	20001f7c 	.word	0x20001f7c
 8006794:	200000a0 	.word	0x200000a0
 8006798:	200000b8 	.word	0x200000b8
 800679c:	200040e4 	.word	0x200040e4
 80067a0:	20000098 	.word	0x20000098
 80067a4:	20000638 	.word	0x20000638
 80067a8:	20002058 	.word	0x20002058
 80067ac:	20002024 	.word	0x20002024
 80067b0:	20002020 	.word	0x20002020
 80067b4:	2000201c 	.word	0x2000201c
 80067b8:	40400000 	.word	0x40400000
 80067bc:	20002028 	.word	0x20002028
 80067c0:	2000202c 	.word	0x2000202c
 80067c4:	2000206c 	.word	0x2000206c
 80067c8:	20002070 	.word	0x20002070
 80067cc:	20001f00 	.word	0x20001f00
 80067d0:	41200000 	.word	0x41200000
 80067d4:	200000b0 	.word	0x200000b0
 80067d8:	20000674 	.word	0x20000674
 80067dc:	2000063c 	.word	0x2000063c
 80067e0:	20000350 	.word	0x20000350
 80067e4:	20000090 	.word	0x20000090
 80067e8:	20001fe4 	.word	0x20001fe4
 80067ec:	20001fe0 	.word	0x20001fe0
 80067f0:	20002074 	.word	0x20002074
 80067f4:	20000078 	.word	0x20000078
 80067f8:	20000038 	.word	0x20000038
 80067fc:	08013884 	.word	0x08013884
 8006800:	20000354 	.word	0x20000354
 8006804:	20000080 	.word	0x20000080
 8006808:	200000ac 	.word	0x200000ac
 800680c:	20000018 	.word	0x20000018
 8006810:	20000020 	.word	0x20000020
 8006814:	20000028 	.word	0x20000028
 8006818:	20000048 	.word	0x20000048
 800681c:	20000088 	.word	0x20000088
 8006820:	20000010 	.word	0x20000010
 8006824:	20000008 	.word	0x20000008
 8006828:	20000040 	.word	0x20000040
 800682c:	20000050 	.word	0x20000050
 8006830:	20000000 	.word	0x20000000
 8006834:	20000058 	.word	0x20000058
 8006838:	20000060 	.word	0x20000060
 800683c:	20000068 	.word	0x20000068
 8006840:	20000030 	.word	0x20000030
 8006844:	20000070 	.word	0x20000070

08006848 <TestRun>:
void TestRun(){
 8006848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684a:	46de      	mov	lr, fp
 800684c:	4657      	mov	r7, sl
 800684e:	464e      	mov	r6, r9
 8006850:	4645      	mov	r5, r8
 8006852:	b5e0      	push	{r5, r6, r7, lr}
	if(errorlen>10){
 8006854:	4bf9      	ldr	r3, [pc, #996]	; (8006c3c <TestRun+0x3f4>)
void TestRun(){
 8006856:	b09d      	sub	sp, #116	; 0x74
	if(errorlen>10){
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b0a      	cmp	r3, #10
 800685c:	dd01      	ble.n	8006862 <TestRun+0x1a>
 800685e:	f000 fc75 	bl	800714c <TestRun+0x904>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006862:	260c      	movs	r6, #12
	printInt(seqNo);
 8006864:	4bf6      	ldr	r3, [pc, #984]	; (8006c40 <TestRun+0x3f8>)
	memset(printBuf,0,50);
 8006866:	4df7      	ldr	r5, [pc, #988]	; (8006c44 <TestRun+0x3fc>)
 8006868:	681c      	ldr	r4, [r3, #0]
 800686a:	2232      	movs	r2, #50	; 0x32
 800686c:	2100      	movs	r1, #0
 800686e:	0028      	movs	r0, r5
 8006870:	9319      	str	r3, [sp, #100]	; 0x64
 8006872:	f008 f8c7 	bl	800ea04 <memset>
	snprintf(printBuf, 6, "%d", x);
 8006876:	0023      	movs	r3, r4
 8006878:	2106      	movs	r1, #6
 800687a:	4af3      	ldr	r2, [pc, #972]	; (8006c48 <TestRun+0x400>)
 800687c:	0028      	movs	r0, r5
 800687e:	f008 f821 	bl	800e8c4 <sniprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006882:	4cf2      	ldr	r4, [pc, #968]	; (8006c4c <TestRun+0x404>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006884:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006886:	6823      	ldr	r3, [r4, #0]
	char newline[2] = "\r\n";
 8006888:	af1b      	add	r7, sp, #108	; 0x6c
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800688a:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800688c:	f7f9 fc3c 	bl	8000108 <strlen>
 8006890:	0029      	movs	r1, r5
 8006892:	b282      	uxth	r2, r0
 8006894:	4bee      	ldr	r3, [pc, #952]	; (8006c50 <TestRun+0x408>)
 8006896:	0020      	movs	r0, r4
 8006898:	f004 f9e0 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800689c:	4bed      	ldr	r3, [pc, #948]	; (8006c54 <TestRun+0x40c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800689e:	2202      	movs	r2, #2
 80068a0:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 80068a2:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80068a4:	0020      	movs	r0, r4
 80068a6:	230a      	movs	r3, #10
 80068a8:	f004 f9d8 	bl	800ac5c <HAL_UART_Transmit>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80068ac:	2180      	movs	r1, #128	; 0x80
 80068ae:	48ea      	ldr	r0, [pc, #936]	; (8006c58 <TestRun+0x410>)
 80068b0:	0189      	lsls	r1, r1, #6
 80068b2:	f001 ffa1 	bl	80087f8 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80068b6:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 80068b8:	4be8      	ldr	r3, [pc, #928]	; (8006c5c <TestRun+0x414>)
 80068ba:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80068bc:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80068be:	48e6      	ldr	r0, [pc, #920]	; (8006c58 <TestRun+0x410>)
 80068c0:	f001 ff9a 	bl	80087f8 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80068c4:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 80068c6:	4be6      	ldr	r3, [pc, #920]	; (8006c60 <TestRun+0x418>)
 80068c8:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80068ca:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80068cc:	48e2      	ldr	r0, [pc, #904]	; (8006c58 <TestRun+0x410>)
 80068ce:	f001 ff93 	bl	80087f8 <HAL_GPIO_ReadPin>
		else box='C';
 80068d2:	1e43      	subs	r3, r0, #1
 80068d4:	425a      	negs	r2, r3
 80068d6:	4153      	adcs	r3, r2
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80068d8:	2180      	movs	r1, #128	; 0x80
 80068da:	20a0      	movs	r0, #160	; 0xa0
		else box='C';
 80068dc:	425b      	negs	r3, r3
	BOX_STATE=Read_DI_BOX_STATE();
 80068de:	4ae1      	ldr	r2, [pc, #900]	; (8006c64 <TestRun+0x41c>)
 80068e0:	4033      	ands	r3, r6
 80068e2:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80068e4:	0049      	lsls	r1, r1, #1
 80068e6:	05c0      	lsls	r0, r0, #23
 80068e8:	7013      	strb	r3, [r2, #0]
 80068ea:	f001 ff85 	bl	80087f8 <HAL_GPIO_ReadPin>
	return (ADCvalue[2]*VSENSE*16);
 80068ee:	4ade      	ldr	r2, [pc, #888]	; (8006c68 <TestRun+0x420>)
	SOS_STATE=Read_DI_SOS_STATE();
 80068f0:	4bde      	ldr	r3, [pc, #888]	; (8006c6c <TestRun+0x424>)
 80068f2:	4690      	mov	r8, r2
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	4dde      	ldr	r5, [pc, #888]	; (8006c70 <TestRun+0x428>)
 80068f8:	4692      	mov	sl, r2
	EXT_B=Read_EXT_B_SENSE();
 80068fa:	4ade      	ldr	r2, [pc, #888]	; (8006c74 <TestRun+0x42c>)
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80068fc:	6018      	str	r0, [r3, #0]
	return (ADCvalue[2]*VSENSE*16);
 80068fe:	68a8      	ldr	r0, [r5, #8]
 8006900:	4691      	mov	r9, r2
 8006902:	f7fa fd45 	bl	8001390 <__aeabi_ui2f>
 8006906:	4651      	mov	r1, sl
 8006908:	f7fa f9e2 	bl	8000cd0 <__aeabi_fmul>
 800690c:	2183      	movs	r1, #131	; 0x83
 800690e:	05c9      	lsls	r1, r1, #23
 8006910:	f7fa f9de 	bl	8000cd0 <__aeabi_fmul>
 8006914:	464a      	mov	r2, r9
 8006916:	6010      	str	r0, [r2, #0]
	INT_B=Read_INT_B_SENSE();
 8006918:	4ad7      	ldr	r2, [pc, #860]	; (8006c78 <TestRun+0x430>)
	return (ADCvalue[3]*VSENSE*2);
 800691a:	68e8      	ldr	r0, [r5, #12]
 800691c:	4693      	mov	fp, r2
 800691e:	f7fa fd37 	bl	8001390 <__aeabi_ui2f>
 8006922:	4651      	mov	r1, sl
 8006924:	f7fa f9d4 	bl	8000cd0 <__aeabi_fmul>
 8006928:	1c01      	adds	r1, r0, #0
 800692a:	f7f9 fe67 	bl	80005fc <__aeabi_fadd>
 800692e:	465a      	mov	r2, fp
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006930:	6823      	ldr	r3, [r4, #0]
	INT_B=Read_INT_B_SENSE();
 8006932:	6010      	str	r0, [r2, #0]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006934:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006936:	2205      	movs	r2, #5
 8006938:	49d0      	ldr	r1, [pc, #832]	; (8006c7c <TestRun+0x434>)
 800693a:	4bc5      	ldr	r3, [pc, #788]	; (8006c50 <TestRun+0x408>)
 800693c:	0020      	movs	r0, r4
 800693e:	f004 f98d 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006942:	4bc4      	ldr	r3, [pc, #784]	; (8006c54 <TestRun+0x40c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006944:	2202      	movs	r2, #2
 8006946:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8006948:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800694a:	0020      	movs	r0, r4
 800694c:	230a      	movs	r3, #10
 800694e:	f004 f985 	bl	800ac5c <HAL_UART_Transmit>
	return ((float)(val*VSENSE*11));
 8006952:	4643      	mov	r3, r8
 8006954:	681b      	ldr	r3, [r3, #0]
	float val=(float)ADCvalue[0];
 8006956:	6828      	ldr	r0, [r5, #0]
	return ((float)(val*VSENSE*11));
 8006958:	4698      	mov	r8, r3
	float val=(float)ADCvalue[0];
 800695a:	f7fa fd19 	bl	8001390 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 800695e:	4641      	mov	r1, r8
 8006960:	f7fa f9b6 	bl	8000cd0 <__aeabi_fmul>
 8006964:	49c6      	ldr	r1, [pc, #792]	; (8006c80 <TestRun+0x438>)
 8006966:	f7fa f9b3 	bl	8000cd0 <__aeabi_fmul>
	adc[0]=Read_ADC1();
 800696a:	4ec6      	ldr	r6, [pc, #792]	; (8006c84 <TestRun+0x43c>)
 800696c:	6030      	str	r0, [r6, #0]
	return (ADCvalue[1]*VSENSE*11);
 800696e:	6868      	ldr	r0, [r5, #4]
 8006970:	f7fa fd0e 	bl	8001390 <__aeabi_ui2f>
 8006974:	4641      	mov	r1, r8
 8006976:	f7fa f9ab 	bl	8000cd0 <__aeabi_fmul>
 800697a:	49c1      	ldr	r1, [pc, #772]	; (8006c80 <TestRun+0x438>)
 800697c:	f7fa f9a8 	bl	8000cd0 <__aeabi_fmul>
	if(EXT_B>7){
 8006980:	464b      	mov	r3, r9
	adc[1]=Read_ADC2();
 8006982:	6070      	str	r0, [r6, #4]
	if(EXT_B>7){
 8006984:	49c0      	ldr	r1, [pc, #768]	; (8006c88 <TestRun+0x440>)
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	f7f9 fdb4 	bl	80004f4 <__aeabi_fcmpgt>
 800698c:	2800      	cmp	r0, #0
 800698e:	d000      	beq.n	8006992 <TestRun+0x14a>
 8006990:	e34d      	b.n	800702e <TestRun+0x7e6>
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
 8006992:	2200      	movs	r2, #0
 8006994:	2101      	movs	r1, #1
 8006996:	48bd      	ldr	r0, [pc, #756]	; (8006c8c <TestRun+0x444>)
 8006998:	f001 ff34 	bl	8008804 <HAL_GPIO_WritePin>
memset(INSMSno,0,30);
 800699c:	4bbc      	ldr	r3, [pc, #752]	; (8006c90 <TestRun+0x448>)
 800699e:	221e      	movs	r2, #30
 80069a0:	2100      	movs	r1, #0
 80069a2:	0018      	movs	r0, r3
 80069a4:	9311      	str	r3, [sp, #68]	; 0x44
 80069a6:	f008 f82d 	bl	800ea04 <memset>
memset(OUTSMSno,0,30);
 80069aa:	4bba      	ldr	r3, [pc, #744]	; (8006c94 <TestRun+0x44c>)
 80069ac:	221e      	movs	r2, #30
 80069ae:	2100      	movs	r1, #0
 80069b0:	0018      	movs	r0, r3
 80069b2:	9312      	str	r3, [sp, #72]	; 0x48
 80069b4:	f008 f826 	bl	800ea04 <memset>
memset(EmgIP,0,50);
 80069b8:	4bb7      	ldr	r3, [pc, #732]	; (8006c98 <TestRun+0x450>)
 80069ba:	2232      	movs	r2, #50	; 0x32
 80069bc:	2100      	movs	r1, #0
 80069be:	0018      	movs	r0, r3
 80069c0:	469b      	mov	fp, r3
 80069c2:	f008 f81f 	bl	800ea04 <memset>
memset(RegIP,0,50);
 80069c6:	4bb5      	ldr	r3, [pc, #724]	; (8006c9c <TestRun+0x454>)
 80069c8:	2232      	movs	r2, #50	; 0x32
 80069ca:	2100      	movs	r1, #0
 80069cc:	0018      	movs	r0, r3
 80069ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80069d0:	f008 f818 	bl	800ea04 <memset>
memset(TracIP,0,50);
 80069d4:	4bb2      	ldr	r3, [pc, #712]	; (8006ca0 <TestRun+0x458>)
 80069d6:	2232      	movs	r2, #50	; 0x32
 80069d8:	2100      	movs	r1, #0
 80069da:	0018      	movs	r0, r3
 80069dc:	9314      	str	r3, [sp, #80]	; 0x50
 80069de:	f008 f811 	bl	800ea04 <memset>
memset(simop,0,25);
 80069e2:	4bb0      	ldr	r3, [pc, #704]	; (8006ca4 <TestRun+0x45c>)
 80069e4:	2219      	movs	r2, #25
 80069e6:	2100      	movs	r1, #0
 80069e8:	0018      	movs	r0, r3
 80069ea:	9316      	str	r3, [sp, #88]	; 0x58
 80069ec:	f008 f80a 	bl	800ea04 <memset>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80069f0:	220c      	movs	r2, #12
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80069f2:	4e97      	ldr	r6, [pc, #604]	; (8006c50 <TestRun+0x408>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	4691      	mov	r9, r2
 80069f8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80069fa:	49ab      	ldr	r1, [pc, #684]	; (8006ca8 <TestRun+0x460>)
 80069fc:	0033      	movs	r3, r6
 80069fe:	3a07      	subs	r2, #7
 8006a00:	0020      	movs	r0, r4
 8006a02:	f004 f92b 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006a06:	4a93      	ldr	r2, [pc, #588]	; (8006c54 <TestRun+0x40c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006a08:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8006a0a:	4690      	mov	r8, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006a0c:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8006a0e:	803a      	strh	r2, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006a10:	0020      	movs	r0, r4
 8006a12:	2202      	movs	r2, #2
 8006a14:	f004 f922 	bl	800ac5c <HAL_UART_Transmit>

char* readINSMSno(){
	uint8_t add4[]={0x00, 0x00,0x00};
 8006a18:	4aa4      	ldr	r2, [pc, #656]	; (8006cac <TestRun+0x464>)
	add4[2]=RegNoLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006a1a:	4da5      	ldr	r5, [pc, #660]	; (8006cb0 <TestRun+0x468>)
	uint8_t add4[]={0x00, 0x00,0x00};
 8006a1c:	8813      	ldrh	r3, [r2, #0]
 8006a1e:	4692      	mov	sl, r2
 8006a20:	803b      	strh	r3, [r7, #0]
	add4[2]=RegNoLen;
 8006a22:	2310      	movs	r3, #16
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006a24:	2264      	movs	r2, #100	; 0x64
 8006a26:	0029      	movs	r1, r5
 8006a28:	0038      	movs	r0, r7
	add4[2]=RegNoLen;
 8006a2a:	70bb      	strb	r3, [r7, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006a2c:	f7fe fb3e 	bl	80050ac <SPI_flash_Read_Data>
strcpy(INSMSno,readINSMSno());
 8006a30:	0029      	movs	r1, r5
 8006a32:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006a34:	f008 f9a5 	bl	800ed82 <strcpy>
	return (char*) dataR;
}

char* readOUTSMSno(){

	uint8_t  add4[]={0x00, 0x00,0x00};
 8006a38:	4652      	mov	r2, sl
 8006a3a:	8813      	ldrh	r3, [r2, #0]
	add4[2]=RegNoLen+INSMSLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006a3c:	0029      	movs	r1, r5
	uint8_t  add4[]={0x00, 0x00,0x00};
 8006a3e:	803b      	strh	r3, [r7, #0]
	add4[2]=RegNoLen+INSMSLen;
 8006a40:	2374      	movs	r3, #116	; 0x74
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006a42:	223c      	movs	r2, #60	; 0x3c
 8006a44:	0038      	movs	r0, r7
	add4[2]=RegNoLen+INSMSLen;
 8006a46:	70bb      	strb	r3, [r7, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006a48:	f7fe fb30 	bl	80050ac <SPI_flash_Read_Data>
strcpy(OUTSMSno,readOUTSMSno());
 8006a4c:	0029      	movs	r1, r5
 8006a4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006a50:	f008 f997 	bl	800ed82 <strcpy>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006a54:	464a      	mov	r2, r9
 8006a56:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006a58:	4996      	ldr	r1, [pc, #600]	; (8006cb4 <TestRun+0x46c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006a5a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006a5c:	0020      	movs	r0, r4
 8006a5e:	0033      	movs	r3, r6
 8006a60:	3a05      	subs	r2, #5
 8006a62:	f004 f8fb 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006a66:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006a68:	230a      	movs	r3, #10
 8006a6a:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8006a6c:	803a      	strh	r2, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006a6e:	0020      	movs	r0, r4
 8006a70:	2202      	movs	r2, #2
 8006a72:	f004 f8f3 	bl	800ac5c <HAL_UART_Transmit>
	return (char*) dataR;
}

char* readEmgIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006a76:	4652      	mov	r2, sl
 8006a78:	8893      	ldrh	r3, [r2, #4]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006a7a:	0029      	movs	r1, r5
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006a7c:	803b      	strh	r3, [r7, #0]
 8006a7e:	7993      	ldrb	r3, [r2, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006a80:	0038      	movs	r0, r7
 8006a82:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006a84:	70bb      	strb	r3, [r7, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006a86:	f7fe fb11 	bl	80050ac <SPI_flash_Read_Data>
strcpy(EmgIP,readEmgIP());
 8006a8a:	0029      	movs	r1, r5
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	f008 f978 	bl	800ed82 <strcpy>
	return (char*) dataR;
}

char* readRegIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006a92:	4652      	mov	r2, sl
 8006a94:	8893      	ldrh	r3, [r2, #4]
	add4[2]=EmgIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006a96:	0029      	movs	r1, r5
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006a98:	803b      	strh	r3, [r7, #0]
	add4[2]=EmgIPLen;
 8006a9a:	2328      	movs	r3, #40	; 0x28
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006a9c:	2228      	movs	r2, #40	; 0x28
 8006a9e:	0038      	movs	r0, r7
	add4[2]=EmgIPLen;
 8006aa0:	70bb      	strb	r3, [r7, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006aa2:	f7fe fb03 	bl	80050ac <SPI_flash_Read_Data>
strcpy(RegIP,readRegIP());
 8006aa6:	0029      	movs	r1, r5
 8006aa8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006aaa:	f008 f96a 	bl	800ed82 <strcpy>
	return (char*) dataR;
}

char* readTracIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006aae:	4652      	mov	r2, sl
 8006ab0:	8893      	ldrh	r3, [r2, #4]
	add4[2]=EmgIPLen+RegIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006ab2:	0029      	movs	r1, r5
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006ab4:	803b      	strh	r3, [r7, #0]
	add4[2]=EmgIPLen+RegIPLen;
 8006ab6:	2350      	movs	r3, #80	; 0x50
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006ab8:	2228      	movs	r2, #40	; 0x28
 8006aba:	0038      	movs	r0, r7
	add4[2]=EmgIPLen+RegIPLen;
 8006abc:	70bb      	strb	r3, [r7, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006abe:	f7fe faf5 	bl	80050ac <SPI_flash_Read_Data>
strcpy(TracIP,readTracIP());
 8006ac2:	0029      	movs	r1, r5
 8006ac4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006ac6:	f008 f95c 	bl	800ed82 <strcpy>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006aca:	464a      	mov	r2, r9
 8006acc:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006ace:	497a      	ldr	r1, [pc, #488]	; (8006cb8 <TestRun+0x470>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006ad0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	0033      	movs	r3, r6
 8006ad6:	3a05      	subs	r2, #5
 8006ad8:	f004 f8c0 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006adc:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006ade:	230a      	movs	r3, #10
 8006ae0:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8006ae2:	803a      	strh	r2, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006ae4:	0020      	movs	r0, r4
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f004 f8b8 	bl	800ac5c <HAL_UART_Transmit>
	SendGSMCode("  AT+COPS?");
 8006aec:	4873      	ldr	r0, [pc, #460]	; (8006cbc <TestRun+0x474>)
 8006aee:	f7fc fcfd 	bl	80034ec <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8006af2:	4a73      	ldr	r2, [pc, #460]	; (8006cc0 <TestRun+0x478>)
 8006af4:	4b73      	ldr	r3, [pc, #460]	; (8006cc4 <TestRun+0x47c>)
 8006af6:	9202      	str	r2, [sp, #8]
 8006af8:	4a73      	ldr	r2, [pc, #460]	; (8006cc8 <TestRun+0x480>)
 8006afa:	4974      	ldr	r1, [pc, #464]	; (8006ccc <TestRun+0x484>)
 8006afc:	9601      	str	r6, [sp, #4]
 8006afe:	9200      	str	r2, [sp, #0]
 8006b00:	2000      	movs	r0, #0
 8006b02:	220c      	movs	r2, #12
 8006b04:	f7fc fe86 	bl	8003814 <GetGSMReply>
 8006b08:	0001      	movs	r1, r0
strcpy(simop, GSMSimOperator());
 8006b0a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006b0c:	f008 f939 	bl	800ed82 <strcpy>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006b10:	464a      	mov	r2, r9
 8006b12:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006b14:	496e      	ldr	r1, [pc, #440]	; (8006cd0 <TestRun+0x488>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006b16:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006b18:	0020      	movs	r0, r4
 8006b1a:	0033      	movs	r3, r6
 8006b1c:	3a07      	subs	r2, #7
 8006b1e:	f004 f89d 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006b22:	4643      	mov	r3, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006b24:	2202      	movs	r2, #2
 8006b26:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8006b28:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006b2a:	0020      	movs	r0, r4
 8006b2c:	230a      	movs	r3, #10
 8006b2e:	f004 f895 	bl	800ac5c <HAL_UART_Transmit>
	return HAL_GetTick();
 8006b32:	f000 ff99 	bl	8007a68 <HAL_GetTick>
	GSMCellInfo();
 8006b36:	f7fd fa85 	bl	8004044 <GSMCellInfo>
	GetHead();
 8006b3a:	f7ff fc91 	bl	8006460 <GetHead>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006b3e:	464a      	mov	r2, r9
 8006b40:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006b42:	4964      	ldr	r1, [pc, #400]	; (8006cd4 <TestRun+0x48c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006b44:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006b46:	0020      	movs	r0, r4
 8006b48:	0033      	movs	r3, r6
 8006b4a:	3a07      	subs	r2, #7
 8006b4c:	f004 f886 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006b50:	4643      	mov	r3, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006b52:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8006b54:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006b56:	0039      	movs	r1, r7
 8006b58:	230a      	movs	r3, #10
 8006b5a:	0020      	movs	r0, r4
 8006b5c:	f004 f87e 	bl	800ac5c <HAL_UART_Transmit>
	if (GPSInfo.fix>0)v='A';
 8006b60:	4b5d      	ldr	r3, [pc, #372]	; (8006cd8 <TestRun+0x490>)
 8006b62:	2656      	movs	r6, #86	; 0x56
 8006b64:	4698      	mov	r8, r3
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	dd00      	ble.n	8006b6e <TestRun+0x326>
 8006b6c:	3e15      	subs	r6, #21
	sprintf(gpsDataRet2, "%s,%s,%c,%0.6f,%1s,%0.6f,%1s,%0.1f,%0.1f,%0.1f,G",GPSInfo.date,GPSInfo.time,v,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.alt,GPSInfo.speed,GPSInfo.head);
 8006b6e:	232e      	movs	r3, #46	; 0x2e
 8006b70:	4443      	add	r3, r8
 8006b72:	4699      	mov	r9, r3
 8006b74:	233d      	movs	r3, #61	; 0x3d
 8006b76:	4642      	mov	r2, r8
 8006b78:	4443      	add	r3, r8
 8006b7a:	469a      	mov	sl, r3
 8006b7c:	4b57      	ldr	r3, [pc, #348]	; (8006cdc <TestRun+0x494>)
 8006b7e:	6950      	ldr	r0, [r2, #20]
 8006b80:	9311      	str	r3, [sp, #68]	; 0x44
 8006b82:	f7fc fa95 	bl	80030b0 <__aeabi_f2d>
 8006b86:	4642      	mov	r2, r8
 8006b88:	900e      	str	r0, [sp, #56]	; 0x38
 8006b8a:	910f      	str	r1, [sp, #60]	; 0x3c
 8006b8c:	6990      	ldr	r0, [r2, #24]
 8006b8e:	f7fc fa8f 	bl	80030b0 <__aeabi_f2d>
 8006b92:	4642      	mov	r2, r8
 8006b94:	900c      	str	r0, [sp, #48]	; 0x30
 8006b96:	910d      	str	r1, [sp, #52]	; 0x34
 8006b98:	6890      	ldr	r0, [r2, #8]
 8006b9a:	f7fc fa89 	bl	80030b0 <__aeabi_f2d>
 8006b9e:	4643      	mov	r3, r8
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	900a      	str	r0, [sp, #40]	; 0x28
 8006ba4:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ba6:	332b      	adds	r3, #43	; 0x2b
 8006ba8:	9308      	str	r3, [sp, #32]
 8006baa:	6850      	ldr	r0, [r2, #4]
 8006bac:	f7fc fa80 	bl	80030b0 <__aeabi_f2d>
 8006bb0:	4643      	mov	r3, r8
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	9006      	str	r0, [sp, #24]
 8006bb6:	9107      	str	r1, [sp, #28]
 8006bb8:	3328      	adds	r3, #40	; 0x28
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	6810      	ldr	r0, [r2, #0]
 8006bbe:	f7fc fa77 	bl	80030b0 <__aeabi_f2d>
 8006bc2:	4d47      	ldr	r5, [pc, #284]	; (8006ce0 <TestRun+0x498>)
 8006bc4:	9600      	str	r6, [sp, #0]
 8006bc6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006bc8:	4652      	mov	r2, sl
 8006bca:	9002      	str	r0, [sp, #8]
 8006bcc:	9103      	str	r1, [sp, #12]
 8006bce:	464b      	mov	r3, r9
 8006bd0:	0029      	movs	r1, r5
 8006bd2:	0030      	movs	r0, r6
 8006bd4:	f007 feaa 	bl	800e92c <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006bd8:	220c      	movs	r2, #12
 8006bda:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006bdc:	4941      	ldr	r1, [pc, #260]	; (8006ce4 <TestRun+0x49c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006bde:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006be0:	0020      	movs	r0, r4
 8006be2:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <TestRun+0x408>)
 8006be4:	3a07      	subs	r2, #7
 8006be6:	f004 f839 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006bea:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <TestRun+0x40c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006bec:	2202      	movs	r2, #2
 8006bee:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8006bf0:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006bf2:	0020      	movs	r0, r4
 8006bf4:	230a      	movs	r3, #10
 8006bf6:	f004 f831 	bl	800ac5c <HAL_UART_Transmit>
	memset(DataString_em1,0,150);
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <TestRun+0x4a0>)
 8006bfc:	2296      	movs	r2, #150	; 0x96
 8006bfe:	469a      	mov	sl, r3
 8006c00:	2100      	movs	r1, #0
 8006c02:	0018      	movs	r0, r3
 8006c04:	f007 fefe 	bl	800ea04 <memset>
	strcat(DataString_em1,"$,EPB,EMR,");
 8006c08:	4650      	mov	r0, sl
 8006c0a:	f7f9 fa7d 	bl	8000108 <strlen>
 8006c0e:	4653      	mov	r3, sl
 8006c10:	0005      	movs	r5, r0
 8006c12:	1818      	adds	r0, r3, r0
 8006c14:	4b35      	ldr	r3, [pc, #212]	; (8006cec <TestRun+0x4a4>)
 8006c16:	220a      	movs	r2, #10
 8006c18:	0019      	movs	r1, r3
 8006c1a:	350a      	adds	r5, #10
 8006c1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c1e:	f008 f8c3 	bl	800eda8 <memcpy>
 8006c22:	0028      	movs	r0, r5
	strcat(DataString_em1,IMEI);strcat(DataString_em1,",NM,");
 8006c24:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <TestRun+0x4a8>)
 8006c26:	4450      	add	r0, sl
 8006c28:	0019      	movs	r1, r3
 8006c2a:	9312      	str	r3, [sp, #72]	; 0x48
 8006c2c:	f007 ffb0 	bl	800eb90 <stpcpy>
 8006c30:	0005      	movs	r5, r0
 8006c32:	4b30      	ldr	r3, [pc, #192]	; (8006cf4 <TestRun+0x4ac>)
 8006c34:	2204      	movs	r2, #4
 8006c36:	0019      	movs	r1, r3
 8006c38:	9318      	str	r3, [sp, #96]	; 0x60
 8006c3a:	e05d      	b.n	8006cf8 <TestRun+0x4b0>
 8006c3c:	200042cc 	.word	0x200042cc
 8006c40:	20004c6c 	.word	0x20004c6c
 8006c44:	20004c38 	.word	0x20004c38
 8006c48:	08012bc4 	.word	0x08012bc4
 8006c4c:	20004ba0 	.word	0x20004ba0
 8006c50:	00001388 	.word	0x00001388
 8006c54:	00000a0d 	.word	0x00000a0d
 8006c58:	50000400 	.word	0x50000400
 8006c5c:	20002058 	.word	0x20002058
 8006c60:	2000033c 	.word	0x2000033c
 8006c64:	20000090 	.word	0x20000090
 8006c68:	200000b4 	.word	0x200000b4
 8006c6c:	200040e4 	.word	0x200040e4
 8006c70:	20000340 	.word	0x20000340
 8006c74:	20000634 	.word	0x20000634
 8006c78:	2000201c 	.word	0x2000201c
 8006c7c:	0801370c 	.word	0x0801370c
 8006c80:	41300000 	.word	0x41300000
 8006c84:	20004148 	.word	0x20004148
 8006c88:	40e00000 	.word	0x40e00000
 8006c8c:	50000c00 	.word	0x50000c00
 8006c90:	20001ffc 	.word	0x20001ffc
 8006c94:	20002078 	.word	0x20002078
 8006c98:	20000640 	.word	0x20000640
 8006c9c:	20004098 	.word	0x20004098
 8006ca0:	20004114 	.word	0x20004114
 8006ca4:	20004c70 	.word	0x20004c70
 8006ca8:	08013714 	.word	0x08013714
 8006cac:	08012540 	.word	0x08012540
 8006cb0:	20004154 	.word	0x20004154
 8006cb4:	0801371c 	.word	0x0801371c
 8006cb8:	08013724 	.word	0x08013724
 8006cbc:	08012888 	.word	0x08012888
 8006cc0:	08012b8c 	.word	0x08012b8c
 8006cc4:	08012b80 	.word	0x08012b80
 8006cc8:	0801289c 	.word	0x0801289c
 8006ccc:	08012894 	.word	0x08012894
 8006cd0:	0801372c 	.word	0x0801372c
 8006cd4:	08013734 	.word	0x08013734
 8006cd8:	20000674 	.word	0x20000674
 8006cdc:	20004704 	.word	0x20004704
 8006ce0:	0801373c 	.word	0x0801373c
 8006ce4:	08013770 	.word	0x08013770
 8006ce8:	200004c0 	.word	0x200004c0
 8006cec:	08013778 	.word	0x08013778
 8006cf0:	20001fe8 	.word	0x20001fe8
 8006cf4:	08013784 	.word	0x08013784
 8006cf8:	f008 f856 	bl	800eda8 <memcpy>
	strcat(DataString_em1,gpsDataRet2);strcat(DataString_em1,",");
 8006cfc:	0031      	movs	r1, r6
 8006cfe:	1d28      	adds	r0, r5, #4
 8006d00:	f007 ff46 	bl	800eb90 <stpcpy>
 8006d04:	232c      	movs	r3, #44	; 0x2c
	strcat(DataString_em1,Regno);strcat(DataString_em1,",0000000000,");
 8006d06:	49e0      	ldr	r1, [pc, #896]	; (8007088 <TestRun+0x840>)
	strcat(DataString_em1,gpsDataRet2);strcat(DataString_em1,",");
 8006d08:	7003      	strb	r3, [r0, #0]
	strcat(DataString_em1,Regno);strcat(DataString_em1,",0000000000,");
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	9114      	str	r1, [sp, #80]	; 0x50
 8006d0e:	f007 ff3f 	bl	800eb90 <stpcpy>
 8006d12:	4ede      	ldr	r6, [pc, #888]	; (800708c <TestRun+0x844>)
 8006d14:	220d      	movs	r2, #13
 8006d16:	0031      	movs	r1, r6
 8006d18:	f008 f846 	bl	800eda8 <memcpy>
    while (*s)
 8006d1c:	4653      	mov	r3, sl
 8006d1e:	781b      	ldrb	r3, [r3, #0]
    int c = 0;
 8006d20:	2200      	movs	r2, #0
    while (*s)
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <TestRun+0x4ea>
 8006d26:	4651      	mov	r1, sl
        c ^= *s++;
 8006d28:	3101      	adds	r1, #1
 8006d2a:	405a      	eors	r2, r3
    while (*s)
 8006d2c:	780b      	ldrb	r3, [r1, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1fa      	bne.n	8006d28 <TestRun+0x4e0>
	sprintf(checksum, "%02x",nmea0183_checksum(DataString_em1));
 8006d32:	4bd7      	ldr	r3, [pc, #860]	; (8007090 <TestRun+0x848>)
 8006d34:	49d7      	ldr	r1, [pc, #860]	; (8007094 <TestRun+0x84c>)
 8006d36:	0018      	movs	r0, r3
 8006d38:	4699      	mov	r9, r3
 8006d3a:	9115      	str	r1, [sp, #84]	; 0x54
 8006d3c:	f007 fdf6 	bl	800e92c <siprintf>
	strcat(DataString_em1,checksum);
 8006d40:	4650      	mov	r0, sl
 8006d42:	f7f9 f9e1 	bl	8000108 <strlen>
 8006d46:	4649      	mov	r1, r9
 8006d48:	4450      	add	r0, sl
 8006d4a:	f007 ff21 	bl	800eb90 <stpcpy>
	strcat(DataString_em1,",*\0");
 8006d4e:	4bd2      	ldr	r3, [pc, #840]	; (8007098 <TestRun+0x850>)
 8006d50:	2203      	movs	r2, #3
 8006d52:	0019      	movs	r1, r3
 8006d54:	3134      	adds	r1, #52	; 0x34
 8006d56:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d58:	f008 f826 	bl	800eda8 <memcpy>
	memset(DataString_em2,0,150);
 8006d5c:	4bcf      	ldr	r3, [pc, #828]	; (800709c <TestRun+0x854>)
 8006d5e:	2296      	movs	r2, #150	; 0x96
 8006d60:	469b      	mov	fp, r3
 8006d62:	2100      	movs	r1, #0
 8006d64:	0018      	movs	r0, r3
 8006d66:	f007 fe4d 	bl	800ea04 <memset>
	strcat(DataString_em2,"$,EPB,EMR,");
 8006d6a:	4658      	mov	r0, fp
 8006d6c:	f7f9 f9cc 	bl	8000108 <strlen>
 8006d70:	465b      	mov	r3, fp
 8006d72:	0005      	movs	r5, r0
 8006d74:	220a      	movs	r2, #10
 8006d76:	1818      	adds	r0, r3, r0
 8006d78:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006d7a:	f008 f815 	bl	800eda8 <memcpy>
 8006d7e:	0028      	movs	r0, r5
 8006d80:	300a      	adds	r0, #10
	strcat(DataString_em2,IMEI);strcat(DataString_em2,",NM,");
 8006d82:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d84:	4458      	add	r0, fp
 8006d86:	f007 ff03 	bl	800eb90 <stpcpy>
 8006d8a:	0005      	movs	r5, r0
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d90:	f008 f80a 	bl	800eda8 <memcpy>
	strcat(DataString_em2,gpsDataRet2);strcat(DataString_em2,",");
 8006d94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d96:	1d28      	adds	r0, r5, #4
 8006d98:	f007 fefa 	bl	800eb90 <stpcpy>
 8006d9c:	232c      	movs	r3, #44	; 0x2c
	strcat(DataString_em2,Regno);strcat(DataString_em2,",0000000000,");
 8006d9e:	9914      	ldr	r1, [sp, #80]	; 0x50
	strcat(DataString_em2,gpsDataRet2);strcat(DataString_em2,",");
 8006da0:	7003      	strb	r3, [r0, #0]
	strcat(DataString_em2,Regno);strcat(DataString_em2,",0000000000,");
 8006da2:	3001      	adds	r0, #1
 8006da4:	f007 fef4 	bl	800eb90 <stpcpy>
 8006da8:	220d      	movs	r2, #13
 8006daa:	0031      	movs	r1, r6
 8006dac:	f007 fffc 	bl	800eda8 <memcpy>
 8006db0:	465b      	mov	r3, fp
 8006db2:	781b      	ldrb	r3, [r3, #0]
    int c = 0;
 8006db4:	2200      	movs	r2, #0
    while (*s)
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <TestRun+0x57e>
 8006dba:	4659      	mov	r1, fp
        c ^= *s++;
 8006dbc:	3101      	adds	r1, #1
 8006dbe:	405a      	eors	r2, r3
    while (*s)
 8006dc0:	780b      	ldrb	r3, [r1, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1fa      	bne.n	8006dbc <TestRun+0x574>
	sprintf(checksum, "%02x",nmea0183_checksum(DataString_em2));
 8006dc6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006dc8:	4648      	mov	r0, r9
 8006dca:	f007 fdaf 	bl	800e92c <siprintf>
	strcat(DataString_em2,checksum);
 8006dce:	4658      	mov	r0, fp
 8006dd0:	f7f9 f99a 	bl	8000108 <strlen>
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4458      	add	r0, fp
 8006dd8:	f007 feda 	bl	800eb90 <stpcpy>
	strcat(DataString_em2,",*\0");
 8006ddc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006dde:	2203      	movs	r2, #3
 8006de0:	3134      	adds	r1, #52	; 0x34
 8006de2:	f007 ffe1 	bl	800eda8 <memcpy>
	sprintf(gpsDataRet2, "%0.6f%1s%0.6f%1s", GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD);
 8006de6:	4643      	mov	r3, r8
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	f7fc f961 	bl	80030b0 <__aeabi_f2d>
 8006dee:	4643      	mov	r3, r8
 8006df0:	332b      	adds	r3, #43	; 0x2b
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	4643      	mov	r3, r8
 8006df6:	0005      	movs	r5, r0
 8006df8:	6858      	ldr	r0, [r3, #4]
 8006dfa:	000e      	movs	r6, r1
 8006dfc:	f7fc f958 	bl	80030b0 <__aeabi_f2d>
 8006e00:	4643      	mov	r3, r8
 8006e02:	3328      	adds	r3, #40	; 0x28
 8006e04:	002a      	movs	r2, r5
 8006e06:	9002      	str	r0, [sp, #8]
 8006e08:	9103      	str	r1, [sp, #12]
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	49a4      	ldr	r1, [pc, #656]	; (80070a0 <TestRun+0x858>)
 8006e0e:	0033      	movs	r3, r6
 8006e10:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006e12:	f007 fd8b 	bl	800e92c <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006e16:	220c      	movs	r2, #12
 8006e18:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006e1a:	49a2      	ldr	r1, [pc, #648]	; (80070a4 <TestRun+0x85c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006e1c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006e1e:	0020      	movs	r0, r4
 8006e20:	4ba1      	ldr	r3, [pc, #644]	; (80070a8 <TestRun+0x860>)
 8006e22:	3a07      	subs	r2, #7
 8006e24:	f003 ff1a 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006e28:	4ba0      	ldr	r3, [pc, #640]	; (80070ac <TestRun+0x864>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8006e2e:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006e30:	0020      	movs	r0, r4
 8006e32:	230a      	movs	r3, #10
 8006e34:	f003 ff12 	bl	800ac5c <HAL_UART_Transmit>
	memset(data_LOGIN,0,100);
 8006e38:	4d9d      	ldr	r5, [pc, #628]	; (80070b0 <TestRun+0x868>)
 8006e3a:	2264      	movs	r2, #100	; 0x64
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	0028      	movs	r0, r5
 8006e40:	f007 fde0 	bl	800ea04 <memset>
	strcat(data_LOGIN,"$");
 8006e44:	0028      	movs	r0, r5
 8006e46:	f7f9 f95f 	bl	8000108 <strlen>
 8006e4a:	2324      	movs	r3, #36	; 0x24
 8006e4c:	4698      	mov	r8, r3
 8006e4e:	542b      	strb	r3, [r5, r0]
 8006e50:	3001      	adds	r0, #1
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8006e52:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006e54:	1828      	adds	r0, r5, r0
 8006e56:	f007 fe9b 	bl	800eb90 <stpcpy>
 8006e5a:	262c      	movs	r6, #44	; 0x2c
	strcat(data_LOGIN,"$");
 8006e5c:	4643      	mov	r3, r8
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006e5e:	9912      	ldr	r1, [sp, #72]	; 0x48
	strcat(data_LOGIN,"$");
 8006e60:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8006e62:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006e64:	3002      	adds	r0, #2
 8006e66:	f007 fe93 	bl	800eb90 <stpcpy>
	strcat(data_LOGIN,"$");
 8006e6a:	4643      	mov	r3, r8
 8006e6c:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006e6e:	4b91      	ldr	r3, [pc, #580]	; (80070b4 <TestRun+0x86c>)
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006e70:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006e72:	0019      	movs	r1, r3
 8006e74:	3002      	adds	r0, #2
 8006e76:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e78:	f007 fe8a 	bl	800eb90 <stpcpy>
	strcat(data_LOGIN,"$");
 8006e7c:	4643      	mov	r3, r8
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");strcat(data_LOGIN,gpsDataRet2);strcat(data_LOGIN,",");
 8006e7e:	9917      	ldr	r1, [sp, #92]	; 0x5c
	strcat(data_LOGIN,"$");
 8006e80:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006e82:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");strcat(data_LOGIN,gpsDataRet2);strcat(data_LOGIN,",");
 8006e84:	3002      	adds	r0, #2
 8006e86:	f007 fe83 	bl	800eb90 <stpcpy>
 8006e8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e8c:	7006      	strb	r6, [r0, #0]
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f007 fe7e 	bl	800eb90 <stpcpy>
 8006e94:	2202      	movs	r2, #2
 8006e96:	4988      	ldr	r1, [pc, #544]	; (80070b8 <TestRun+0x870>)
 8006e98:	f007 ff86 	bl	800eda8 <memcpy>
 8006e9c:	782b      	ldrb	r3, [r5, #0]
    int c = 0;
 8006e9e:	2200      	movs	r2, #0
    while (*s)
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <TestRun+0x668>
 8006ea4:	0029      	movs	r1, r5
        c ^= *s++;
 8006ea6:	3101      	adds	r1, #1
 8006ea8:	405a      	eors	r2, r3
    while (*s)
 8006eaa:	780b      	ldrb	r3, [r1, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1fa      	bne.n	8006ea6 <TestRun+0x65e>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 8006eb0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	f007 fd3a 	bl	800e92c <siprintf>
	strcat(data_LOGIN,checksum);
 8006eb8:	0028      	movs	r0, r5
 8006eba:	f7f9 f925 	bl	8000108 <strlen>
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	1828      	adds	r0, r5, r0
 8006ec2:	f007 fe65 	bl	800eb90 <stpcpy>
	strcat(data_LOGIN,",*\0");
 8006ec6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006ec8:	2203      	movs	r2, #3
 8006eca:	3134      	adds	r1, #52	; 0x34
 8006ecc:	f007 ff6c 	bl	800eda8 <memcpy>
    memset(checksum,0,3);
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4648      	mov	r0, r9
 8006ed6:	f007 fd95 	bl	800ea04 <memset>
    memset(DataString,0,300);
 8006eda:	2296      	movs	r2, #150	; 0x96
 8006edc:	4d77      	ldr	r5, [pc, #476]	; (80070bc <TestRun+0x874>)
 8006ede:	0052      	lsls	r2, r2, #1
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	0028      	movs	r0, r5
 8006ee4:	f007 fd8e 	bl	800ea04 <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8006ee8:	0028      	movs	r0, r5
 8006eea:	f7f9 f90d 	bl	8000108 <strlen>
 8006eee:	4974      	ldr	r1, [pc, #464]	; (80070c0 <TestRun+0x878>)
 8006ef0:	1828      	adds	r0, r5, r0
 8006ef2:	262c      	movs	r6, #44	; 0x2c
 8006ef4:	f007 fe4c 	bl	800eb90 <stpcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 8006ef8:	9912      	ldr	r1, [sp, #72]	; 0x48
	strcat(DataString,Head);strcat(DataString,",");
 8006efa:	7006      	strb	r6, [r0, #0]
	strcat(DataString,IMEI);strcat(DataString,",");
 8006efc:	3001      	adds	r0, #1
 8006efe:	f007 fe47 	bl	800eb90 <stpcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 8006f02:	9914      	ldr	r1, [sp, #80]	; 0x50
	strcat(DataString,IMEI);strcat(DataString,",");
 8006f04:	7006      	strb	r6, [r0, #0]
	strcat(DataString,Regno);strcat(DataString,",");
 8006f06:	3001      	adds	r0, #1
 8006f08:	f007 fe42 	bl	800eb90 <stpcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006f0c:	496d      	ldr	r1, [pc, #436]	; (80070c4 <TestRun+0x87c>)
	strcat(DataString,Regno);strcat(DataString,",");
 8006f0e:	7006      	strb	r6, [r0, #0]
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006f10:	3001      	adds	r0, #1
 8006f12:	f007 fe3d 	bl	800eb90 <stpcpy>
	strcat(DataString,simop);strcat(DataString,",");
 8006f16:	9916      	ldr	r1, [sp, #88]	; 0x58
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006f18:	7006      	strb	r6, [r0, #0]
	strcat(DataString,simop);strcat(DataString,",");
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	f007 fe38 	bl	800eb90 <stpcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006f20:	4969      	ldr	r1, [pc, #420]	; (80070c8 <TestRun+0x880>)
	strcat(DataString,simop);strcat(DataString,",");
 8006f22:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006f24:	3001      	adds	r0, #1
 8006f26:	f007 fe33 	bl	800eb90 <stpcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006f2a:	4968      	ldr	r1, [pc, #416]	; (80070cc <TestRun+0x884>)
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006f2c:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f007 fe2e 	bl	800eb90 <stpcpy>
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8006f34:	4966      	ldr	r1, [pc, #408]	; (80070d0 <TestRun+0x888>)
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006f36:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8006f38:	3001      	adds	r0, #1
 8006f3a:	f007 ff22 	bl	800ed82 <strcpy>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006f3e:	220c      	movs	r2, #12
 8006f40:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006f42:	4964      	ldr	r1, [pc, #400]	; (80070d4 <TestRun+0x88c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006f44:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006f46:	0020      	movs	r0, r4
 8006f48:	4b57      	ldr	r3, [pc, #348]	; (80070a8 <TestRun+0x860>)
 8006f4a:	3a07      	subs	r2, #7
 8006f4c:	f003 fe86 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006f50:	4b56      	ldr	r3, [pc, #344]	; (80070ac <TestRun+0x864>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006f52:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8006f54:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006f56:	0039      	movs	r1, r7
 8006f58:	230a      	movs	r3, #10
 8006f5a:	0020      	movs	r0, r4
 8006f5c:	f003 fe7e 	bl	800ac5c <HAL_UART_Transmit>
 8006f60:	782b      	ldrb	r3, [r5, #0]
    int c = 0;
 8006f62:	2200      	movs	r2, #0
    while (*s)
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <TestRun+0x72c>
 8006f68:	0029      	movs	r1, r5
        c ^= *s++;
 8006f6a:	3101      	adds	r1, #1
 8006f6c:	405a      	eors	r2, r3
    while (*s)
 8006f6e:	780b      	ldrb	r3, [r1, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1fa      	bne.n	8006f6a <TestRun+0x722>
    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 8006f74:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006f76:	4648      	mov	r0, r9
 8006f78:	f007 fcd8 	bl	800e92c <siprintf>
    strcat(DataString,checksum);
 8006f7c:	0028      	movs	r0, r5
 8006f7e:	f7f9 f8c3 	bl	8000108 <strlen>
 8006f82:	4649      	mov	r1, r9
 8006f84:	1828      	adds	r0, r5, r0
 8006f86:	f007 fe03 	bl	800eb90 <stpcpy>
    strcat(DataString,",*\0");
 8006f8a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	3134      	adds	r1, #52	; 0x34
 8006f90:	f007 ff0a 	bl	800eda8 <memcpy>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006f94:	220c      	movs	r2, #12
 8006f96:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006f98:	494f      	ldr	r1, [pc, #316]	; (80070d8 <TestRun+0x890>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006f9a:	621a      	str	r2, [r3, #32]
 8006f9c:	4690      	mov	r8, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006f9e:	4b42      	ldr	r3, [pc, #264]	; (80070a8 <TestRun+0x860>)
 8006fa0:	3a07      	subs	r2, #7
 8006fa2:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 8006fa4:	4e41      	ldr	r6, [pc, #260]	; (80070ac <TestRun+0x864>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006fa6:	f003 fe59 	bl	800ac5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006faa:	230a      	movs	r3, #10
 8006fac:	0039      	movs	r1, r7
 8006fae:	2202      	movs	r2, #2
 8006fb0:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 8006fb2:	803e      	strh	r6, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006fb4:	f003 fe52 	bl	800ac5c <HAL_UART_Transmit>
    if(GSMSignal > 5) 		{
 8006fb8:	4b48      	ldr	r3, [pc, #288]	; (80070dc <TestRun+0x894>)
 8006fba:	4949      	ldr	r1, [pc, #292]	; (80070e0 <TestRun+0x898>)
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	f7f9 fa99 	bl	80004f4 <__aeabi_fcmpgt>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d039      	beq.n	800703a <TestRun+0x7f2>
    		ProcessTCPAll( ReadMDataS,0);
 8006fc6:	4e47      	ldr	r6, [pc, #284]	; (80070e4 <TestRun+0x89c>)
 8006fc8:	e003      	b.n	8006fd2 <TestRun+0x78a>
 8006fca:	2100      	movs	r1, #0
 8006fcc:	0030      	movs	r0, r6
 8006fce:	f7fd fa03 	bl	80043d8 <ProcessTCPAll>
    	while(ReadQdata()>0){
 8006fd2:	f7fe f8a1 	bl	8005118 <ReadQdata>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	dcf7      	bgt.n	8006fca <TestRun+0x782>
 8006fda:	f000 fd45 	bl	8007a68 <HAL_GetTick>
     	ProcessTCPAll(DataString,0);
 8006fde:	0028      	movs	r0, r5
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	f7fd f9f9 	bl	80043d8 <ProcessTCPAll>
     	if(EmergencyStateON==1 && EmergencyStateOFF==-1){
 8006fe6:	4d40      	ldr	r5, [pc, #256]	; (80070e8 <TestRun+0x8a0>)
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d042      	beq.n	8007074 <TestRun+0x82c>
     	if(EmergencyStateON==-1 && EmergencyStateOFF==1){
 8006fee:	3301      	adds	r3, #1
 8006ff0:	d035      	beq.n	800705e <TestRun+0x816>
 8006ff2:	4b3e      	ldr	r3, [pc, #248]	; (80070ec <TestRun+0x8a4>)
     	RunCnt=0;
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006ff8:	220c      	movs	r2, #12
 8006ffa:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006ffc:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006ffe:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007000:	493b      	ldr	r1, [pc, #236]	; (80070f0 <TestRun+0x8a8>)
 8007002:	4b29      	ldr	r3, [pc, #164]	; (80070a8 <TestRun+0x860>)
 8007004:	f003 fe2a 	bl	800ac5c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8007008:	4b28      	ldr	r3, [pc, #160]	; (80070ac <TestRun+0x864>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800700a:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 800700c:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800700e:	0039      	movs	r1, r7
 8007010:	230a      	movs	r3, #10
 8007012:	0020      	movs	r0, r4
 8007014:	f003 fe22 	bl	800ac5c <HAL_UART_Transmit>
 	seqNo=seqNo+1;
 8007018:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800701a:	6813      	ldr	r3, [r2, #0]
 800701c:	3301      	adds	r3, #1
 800701e:	6013      	str	r3, [r2, #0]
}
 8007020:	b01d      	add	sp, #116	; 0x74
 8007022:	bcf0      	pop	{r4, r5, r6, r7}
 8007024:	46bb      	mov	fp, r7
 8007026:	46b2      	mov	sl, r6
 8007028:	46a9      	mov	r9, r5
 800702a:	46a0      	mov	r8, r4
 800702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 800702e:	2201      	movs	r2, #1
 8007030:	2101      	movs	r1, #1
 8007032:	4830      	ldr	r0, [pc, #192]	; (80070f4 <TestRun+0x8ac>)
 8007034:	f001 fbe6 	bl	8008804 <HAL_GPIO_WritePin>
}
 8007038:	e4b0      	b.n	800699c <TestRun+0x154>
    	if (debug==1){
 800703a:	4b2f      	ldr	r3, [pc, #188]	; (80070f8 <TestRun+0x8b0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d073      	beq.n	800712a <TestRun+0x8e2>
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 8007042:	0028      	movs	r0, r5
 8007044:	f7f9 f860 	bl	8000108 <strlen>
 8007048:	3001      	adds	r0, #1
 800704a:	b282      	uxth	r2, r0
	if (len<255){
 800704c:	2afe      	cmp	r2, #254	; 0xfe
 800704e:	d957      	bls.n	8007100 <TestRun+0x8b8>
    	RunCnt++;
 8007050:	4b26      	ldr	r3, [pc, #152]	; (80070ec <TestRun+0x8a4>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	3201      	adds	r2, #1
 8007056:	601a      	str	r2, [r3, #0]
    	if(RunCnt>10){
 8007058:	2a0a      	cmp	r2, #10
 800705a:	dccb      	bgt.n	8006ff4 <TestRun+0x7ac>
 800705c:	e7cc      	b.n	8006ff8 <TestRun+0x7b0>
     	if(EmergencyStateON==-1 && EmergencyStateOFF==1){
 800705e:	4d27      	ldr	r5, [pc, #156]	; (80070fc <TestRun+0x8b4>)
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d1c5      	bne.n	8006ff2 <TestRun+0x7aa>
         	ProcessTCPAll(DataString_em2,1);
 8007066:	2101      	movs	r1, #1
 8007068:	4658      	mov	r0, fp
 800706a:	f7fd f9b5 	bl	80043d8 <ProcessTCPAll>
         	EmergencyStateOFF=0;
 800706e:	2300      	movs	r3, #0
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	e7be      	b.n	8006ff2 <TestRun+0x7aa>
     	if(EmergencyStateON==1 && EmergencyStateOFF==-1){
 8007074:	4b21      	ldr	r3, [pc, #132]	; (80070fc <TestRun+0x8b4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	d1ba      	bne.n	8006ff2 <TestRun+0x7aa>
         	ProcessTCPAll(DataString_em1,1);
 800707c:	2101      	movs	r1, #1
 800707e:	4650      	mov	r0, sl
 8007080:	f7fd f9aa 	bl	80043d8 <ProcessTCPAll>
     	if(EmergencyStateON==-1 && EmergencyStateOFF==1){
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	e7b2      	b.n	8006fee <TestRun+0x7a6>
 8007088:	200040cc 	.word	0x200040cc
 800708c:	0801378c 	.word	0x0801378c
 8007090:	20004150 	.word	0x20004150
 8007094:	0801379c 	.word	0x0801379c
 8007098:	080125c0 	.word	0x080125c0
 800709c:	20000560 	.word	0x20000560
 80070a0:	080137a4 	.word	0x080137a4
 80070a4:	080137b8 	.word	0x080137b8
 80070a8:	00001388 	.word	0x00001388
 80070ac:	00000a0d 	.word	0x00000a0d
 80070b0:	20004254 	.word	0x20004254
 80070b4:	200000b8 	.word	0x200000b8
 80070b8:	08012824 	.word	0x08012824
 80070bc:	20000394 	.word	0x20000394
 80070c0:	20001f7c 	.word	0x20001f7c
 80070c4:	200046bc 	.word	0x200046bc
 80070c8:	20004100 	.word	0x20004100
 80070cc:	20004750 	.word	0x20004750
 80070d0:	2000060c 	.word	0x2000060c
 80070d4:	080137c0 	.word	0x080137c0
 80070d8:	080137c8 	.word	0x080137c8
 80070dc:	20001f00 	.word	0x20001f00
 80070e0:	40a00000 	.word	0x40a00000
 80070e4:	20003098 	.word	0x20003098
 80070e8:	20000098 	.word	0x20000098
 80070ec:	200040e0 	.word	0x200040e0
 80070f0:	080137f8 	.word	0x080137f8
 80070f4:	50000c00 	.word	0x50000c00
 80070f8:	200000c4 	.word	0x200000c4
 80070fc:	20000638 	.word	0x20000638
		SPI_flash_Page_Program(WrtAdd, data,len);
 8007100:	4b18      	ldr	r3, [pc, #96]	; (8007164 <TestRun+0x91c>)
 8007102:	0029      	movs	r1, r5
 8007104:	001d      	movs	r5, r3
 8007106:	0018      	movs	r0, r3
 8007108:	f7fd ff64 	bl	8004fd4 <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 800710c:	782b      	ldrb	r3, [r5, #0]
 800710e:	786a      	ldrb	r2, [r5, #1]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	189b      	adds	r3, r3, r2
 8007114:	78aa      	ldrb	r2, [r5, #2]
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	189b      	adds	r3, r3, r2
 800711a:	3301      	adds	r3, #1
 800711c:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 800711e:	141a      	asrs	r2, r3, #16
 8007120:	702a      	strb	r2, [r5, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8007122:	121a      	asrs	r2, r3, #8
 8007124:	706a      	strb	r2, [r5, #1]
	WrtAdd[2]=(addi)%256;
 8007126:	70ab      	strb	r3, [r5, #2]
}
 8007128:	e792      	b.n	8007050 <TestRun+0x808>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800712a:	4642      	mov	r2, r8
 800712c:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800712e:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007130:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007132:	490d      	ldr	r1, [pc, #52]	; (8007168 <TestRun+0x920>)
 8007134:	2227      	movs	r2, #39	; 0x27
 8007136:	4b0d      	ldr	r3, [pc, #52]	; (800716c <TestRun+0x924>)
 8007138:	f003 fd90 	bl	800ac5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800713c:	230a      	movs	r3, #10
 800713e:	2202      	movs	r2, #2
 8007140:	0039      	movs	r1, r7
 8007142:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 8007144:	803e      	strh	r6, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007146:	f003 fd89 	bl	800ac5c <HAL_UART_Transmit>
}
 800714a:	e77a      	b.n	8007042 <TestRun+0x7fa>
		Debug_Tx("GSMUART error rebooting device");
 800714c:	4808      	ldr	r0, [pc, #32]	; (8007170 <TestRun+0x928>)
 800714e:	f7fc f89b 	bl	8003288 <Debug_Tx>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007152:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007156:	4b07      	ldr	r3, [pc, #28]	; (8007174 <TestRun+0x92c>)
 8007158:	4a07      	ldr	r2, [pc, #28]	; (8007178 <TestRun+0x930>)
 800715a:	60da      	str	r2, [r3, #12]
 800715c:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007160:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8007162:	e7fd      	b.n	8007160 <TestRun+0x918>
 8007164:	200000c0 	.word	0x200000c0
 8007168:	080137d0 	.word	0x080137d0
 800716c:	00001388 	.word	0x00001388
 8007170:	080136ec 	.word	0x080136ec
 8007174:	e000ed00 	.word	0xe000ed00
 8007178:	05fa0004 	.word	0x05fa0004

0800717c <StartDefaultTask>:
{
 800717c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717e:	46c6      	mov	lr, r8
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8007180:	27fa      	movs	r7, #250	; 0xfa
 8007182:	2516      	movs	r5, #22
 8007184:	2601      	movs	r6, #1
 8007186:	b500      	push	{lr}
 8007188:	4c78      	ldr	r4, [pc, #480]	; (800736c <StartDefaultTask+0x1f0>)
 800718a:	b086      	sub	sp, #24
 800718c:	446d      	add	r5, sp
 800718e:	00bf      	lsls	r7, r7, #2
 8007190:	2301      	movs	r3, #1
 8007192:	9500      	str	r5, [sp, #0]
 8007194:	2275      	movs	r2, #117	; 0x75
 8007196:	21d0      	movs	r1, #208	; 0xd0
 8007198:	0020      	movs	r0, r4
 800719a:	9702      	str	r7, [sp, #8]
 800719c:	9601      	str	r6, [sp, #4]
 800719e:	f001 fdb1 	bl	8008d04 <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80071a2:	782b      	ldrb	r3, [r5, #0]
		Data = 0;
 80071a4:	2517      	movs	r5, #23
 80071a6:	446d      	add	r5, sp
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80071a8:	2b68      	cmp	r3, #104	; 0x68
 80071aa:	d100      	bne.n	80071ae <StartDefaultTask+0x32>
 80071ac:	e0ad      	b.n	800730a <StartDefaultTask+0x18e>
		Data = 0;
 80071ae:	2300      	movs	r3, #0
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80071b0:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 80071b2:	702b      	strb	r3, [r5, #0]
 80071b4:	4698      	mov	r8, r3
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80071b6:	21d0      	movs	r1, #208	; 0xd0
 80071b8:	3301      	adds	r3, #1
 80071ba:	0020      	movs	r0, r4
 80071bc:	9702      	str	r7, [sp, #8]
 80071be:	9601      	str	r6, [sp, #4]
 80071c0:	9500      	str	r5, [sp, #0]
 80071c2:	f001 fc65 	bl	8008a90 <HAL_I2C_Mem_Write>
				Data = 0x07;
 80071c6:	2307      	movs	r3, #7
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80071c8:	2219      	movs	r2, #25
				Data = 0x07;
 80071ca:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80071cc:	21d0      	movs	r1, #208	; 0xd0
 80071ce:	3b06      	subs	r3, #6
 80071d0:	0020      	movs	r0, r4
 80071d2:	9702      	str	r7, [sp, #8]
 80071d4:	9601      	str	r6, [sp, #4]
 80071d6:	9500      	str	r5, [sp, #0]
 80071d8:	f001 fc5a 	bl	8008a90 <HAL_I2C_Mem_Write>
				Data = 0x00;
 80071dc:	4643      	mov	r3, r8
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80071de:	221c      	movs	r2, #28
				Data = 0x00;
 80071e0:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80071e2:	21d0      	movs	r1, #208	; 0xd0
 80071e4:	3301      	adds	r3, #1
 80071e6:	0020      	movs	r0, r4
 80071e8:	9702      	str	r7, [sp, #8]
 80071ea:	9601      	str	r6, [sp, #4]
 80071ec:	9500      	str	r5, [sp, #0]
 80071ee:	f001 fc4f 	bl	8008a90 <HAL_I2C_Mem_Write>
				Data = 0x00;
 80071f2:	4643      	mov	r3, r8
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80071f4:	221b      	movs	r2, #27
				Data = 0x00;
 80071f6:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80071f8:	21d0      	movs	r1, #208	; 0xd0
 80071fa:	0020      	movs	r0, r4
 80071fc:	9702      	str	r7, [sp, #8]
 80071fe:	9601      	str	r6, [sp, #4]
 8007200:	9500      	str	r5, [sp, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	f001 fc44 	bl	8008a90 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 8007208:	4859      	ldr	r0, [pc, #356]	; (8007370 <StartDefaultTask+0x1f4>)
 800720a:	f7fc f83d 	bl	8003288 <Debug_Tx>
	ACC_GYRO_data[0]=0;
 800720e:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8007210:	2180      	movs	r1, #128	; 0x80
 8007212:	20a0      	movs	r0, #160	; 0xa0
 8007214:	4b57      	ldr	r3, [pc, #348]	; (8007374 <StartDefaultTask+0x1f8>)
 8007216:	0209      	lsls	r1, r1, #8
 8007218:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 800721a:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 800721c:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 800721e:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 8007220:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8007222:	615a      	str	r2, [r3, #20]
 8007224:	05c0      	lsls	r0, r0, #23
 8007226:	2201      	movs	r2, #1
 8007228:	f001 faec 	bl	8008804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800722c:	2201      	movs	r2, #1
 800722e:	2140      	movs	r1, #64	; 0x40
 8007230:	4851      	ldr	r0, [pc, #324]	; (8007378 <StartDefaultTask+0x1fc>)
 8007232:	f001 fae7 	bl	8008804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 8007236:	2201      	movs	r2, #1
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	484f      	ldr	r0, [pc, #316]	; (8007378 <StartDefaultTask+0x1fc>)
 800723c:	f001 fae2 	bl	8008804 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 8007240:	2204      	movs	r2, #4
 8007242:	494e      	ldr	r1, [pc, #312]	; (800737c <StartDefaultTask+0x200>)
 8007244:	484e      	ldr	r0, [pc, #312]	; (8007380 <StartDefaultTask+0x204>)
 8007246:	f000 ff4f 	bl	80080e8 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 800724a:	2201      	movs	r2, #1
 800724c:	2120      	movs	r1, #32
 800724e:	484d      	ldr	r0, [pc, #308]	; (8007384 <StartDefaultTask+0x208>)
 8007250:	f001 fad8 	bl	8008804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8007254:	2180      	movs	r1, #128	; 0x80
 8007256:	20a0      	movs	r0, #160	; 0xa0
 8007258:	2201      	movs	r2, #1
 800725a:	0209      	lsls	r1, r1, #8
 800725c:	05c0      	lsls	r0, r0, #23
 800725e:	f001 fad1 	bl	8008804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8007262:	2201      	movs	r2, #1
 8007264:	2140      	movs	r1, #64	; 0x40
 8007266:	4844      	ldr	r0, [pc, #272]	; (8007378 <StartDefaultTask+0x1fc>)
 8007268:	f001 facc 	bl	8008804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800726c:	2201      	movs	r2, #1
 800726e:	2180      	movs	r1, #128	; 0x80
 8007270:	4841      	ldr	r0, [pc, #260]	; (8007378 <StartDefaultTask+0x1fc>)
 8007272:	f001 fac7 	bl	8008804 <HAL_GPIO_WritePin>
GSMBuff[0]=0;
 8007276:	2300      	movs	r3, #0
 memset((char*)gpsData,0,1000);
 8007278:	22fa      	movs	r2, #250	; 0xfa
GSMBuff[0]=0;
 800727a:	4c43      	ldr	r4, [pc, #268]	; (8007388 <StartDefaultTask+0x20c>)
 memset((char*)gpsData,0,1000);
 800727c:	4d43      	ldr	r5, [pc, #268]	; (800738c <StartDefaultTask+0x210>)
GSMBuff[0]=0;
 800727e:	7023      	strb	r3, [r4, #0]
 memset((char*)gpsData,0,1000);
 8007280:	2100      	movs	r1, #0
 8007282:	0028      	movs	r0, r5
 8007284:	0092      	lsls	r2, r2, #2
 8007286:	f007 fbbd 	bl	800ea04 <memset>
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800728a:	260c      	movs	r6, #12
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 800728c:	22e1      	movs	r2, #225	; 0xe1
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800728e:	4840      	ldr	r0, [pc, #256]	; (8007390 <StartDefaultTask+0x214>)
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8007290:	0029      	movs	r1, r5
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007292:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8007294:	0092      	lsls	r2, r2, #2
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007296:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8007298:	f003 feae 	bl	800aff8 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800729c:	483d      	ldr	r0, [pc, #244]	; (8007394 <StartDefaultTask+0x218>)
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800729e:	0021      	movs	r1, r4
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80072a0:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80072a2:	2201      	movs	r2, #1
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80072a4:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80072a6:	f003 fea7 	bl	800aff8 <HAL_UART_Receive_DMA>
initGPS();
 80072aa:	f7fe f949 	bl	8005540 <initGPS>
initFirstRun();
 80072ae:	f7fe ff51 	bl	8006154 <initFirstRun>
InitMEMQ();
 80072b2:	f7fd ffc9 	bl	8005248 <InitMEMQ>
HAL_Delay(10000);
 80072b6:	4838      	ldr	r0, [pc, #224]	; (8007398 <StartDefaultTask+0x21c>)
 80072b8:	f000 fbdc 	bl	8007a74 <HAL_Delay>
InitGSM();
 80072bc:	f7fd fb2c 	bl	8004918 <InitGSM>
TestMEM();
 80072c0:	f7fe f9dc 	bl	800567c <TestMEM>
 memset(IMEI,0,20);
 80072c4:	4c35      	ldr	r4, [pc, #212]	; (800739c <StartDefaultTask+0x220>)
 80072c6:	2214      	movs	r2, #20
 80072c8:	2100      	movs	r1, #0
 80072ca:	0020      	movs	r0, r4
 80072cc:	f007 fb9a 	bl	800ea04 <memset>
 memset(Regno,0,20);
 80072d0:	4d33      	ldr	r5, [pc, #204]	; (80073a0 <StartDefaultTask+0x224>)
 80072d2:	2214      	movs	r2, #20
 80072d4:	2100      	movs	r1, #0
 80072d6:	0028      	movs	r0, r5
 80072d8:	f007 fb94 	bl	800ea04 <memset>
strcpy(IMEI,GSMIMEI());
 80072dc:	f7fc fc68 	bl	8003bb0 <GSMIMEI>
 80072e0:	0001      	movs	r1, r0
 80072e2:	0020      	movs	r0, r4
 80072e4:	f007 fd4d 	bl	800ed82 <strcpy>
 strcpy(Regno,readRegNo());
 80072e8:	f7fe f8d4 	bl	8005494 <readRegNo>
 80072ec:	0001      	movs	r1, r0
 80072ee:	0028      	movs	r0, r5
 80072f0:	f007 fd47 	bl	800ed82 <strcpy>
 Debug_Tx("IMEI:");
 80072f4:	482b      	ldr	r0, [pc, #172]	; (80073a4 <StartDefaultTask+0x228>)
 80072f6:	f7fb ffc7 	bl	8003288 <Debug_Tx>
	  Debug_Tx(IMEI);
 80072fa:	0020      	movs	r0, r4
 80072fc:	f7fb ffc4 	bl	8003288 <Debug_Tx>
  GSMSigQuality();
 8007300:	f7fc fba0 	bl	8003a44 <GSMSigQuality>
 TestRun();
 8007304:	f7ff faa0 	bl	8006848 <TestRun>
while (1){//DownloadFile();
 8007308:	e7fa      	b.n	8007300 <StartDefaultTask+0x184>
		Data = 0;
 800730a:	2300      	movs	r3, #0
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800730c:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 800730e:	702b      	strb	r3, [r5, #0]
 8007310:	4698      	mov	r8, r3
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8007312:	21d0      	movs	r1, #208	; 0xd0
 8007314:	0033      	movs	r3, r6
 8007316:	0020      	movs	r0, r4
 8007318:	9702      	str	r7, [sp, #8]
 800731a:	9601      	str	r6, [sp, #4]
 800731c:	9500      	str	r5, [sp, #0]
 800731e:	f001 fbb7 	bl	8008a90 <HAL_I2C_Mem_Write>
		Data = 0x07;
 8007322:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8007324:	2219      	movs	r2, #25
		Data = 0x07;
 8007326:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8007328:	21d0      	movs	r1, #208	; 0xd0
 800732a:	0033      	movs	r3, r6
 800732c:	0020      	movs	r0, r4
 800732e:	9702      	str	r7, [sp, #8]
 8007330:	9601      	str	r6, [sp, #4]
 8007332:	9500      	str	r5, [sp, #0]
 8007334:	f001 fbac 	bl	8008a90 <HAL_I2C_Mem_Write>
		Data = 0x00;
 8007338:	4643      	mov	r3, r8
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800733a:	221c      	movs	r2, #28
		Data = 0x00;
 800733c:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800733e:	21d0      	movs	r1, #208	; 0xd0
 8007340:	0033      	movs	r3, r6
 8007342:	0020      	movs	r0, r4
 8007344:	9702      	str	r7, [sp, #8]
 8007346:	9601      	str	r6, [sp, #4]
 8007348:	9500      	str	r5, [sp, #0]
 800734a:	f001 fba1 	bl	8008a90 <HAL_I2C_Mem_Write>
		Data = 0x00;
 800734e:	4643      	mov	r3, r8
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8007350:	221b      	movs	r2, #27
		Data = 0x00;
 8007352:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8007354:	21d0      	movs	r1, #208	; 0xd0
 8007356:	0033      	movs	r3, r6
 8007358:	0020      	movs	r0, r4
 800735a:	9702      	str	r7, [sp, #8]
 800735c:	9601      	str	r6, [sp, #4]
 800735e:	9500      	str	r5, [sp, #0]
 8007360:	f001 fb96 	bl	8008a90 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 8007364:	4810      	ldr	r0, [pc, #64]	; (80073a8 <StartDefaultTask+0x22c>)
 8007366:	f7fb ff8f 	bl	8003288 <Debug_Tx>
 800736a:	e750      	b.n	800720e <StartDefaultTask+0x92>
 800736c:	20004974 	.word	0x20004974
 8007370:	0801381c 	.word	0x0801381c
 8007374:	20000324 	.word	0x20000324
 8007378:	50000800 	.word	0x50000800
 800737c:	20000340 	.word	0x20000340
 8007380:	200047a0 	.word	0x200047a0
 8007384:	50000400 	.word	0x50000400
 8007388:	200006c4 	.word	0x200006c4
 800738c:	200042d4 	.word	0x200042d4
 8007390:	20004b0c 	.word	0x20004b0c
 8007394:	20004a78 	.word	0x20004a78
 8007398:	00002710 	.word	0x00002710
 800739c:	20001fe8 	.word	0x20001fe8
 80073a0:	200040cc 	.word	0x200040cc
 80073a4:	0801382c 	.word	0x0801382c
 80073a8:	08013808 	.word	0x08013808

080073ac <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80073ac:	b672      	cpsid	i
  while (1)
 80073ae:	e7fe      	b.n	80073ae <Error_Handler+0x2>

080073b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073b0:	2201      	movs	r2, #1
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <HAL_MspInit+0x40>)
{
 80073b4:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80073b8:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073ba:	4311      	orrs	r1, r2
 80073bc:	6419      	str	r1, [r3, #64]	; 0x40
 80073be:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 80073c0:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80073c4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c6:	9200      	str	r2, [sp, #0]
 80073c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073cc:	0549      	lsls	r1, r1, #21
 80073ce:	430a      	orrs	r2, r1
 80073d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80073d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80073d4:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80073d6:	400b      	ands	r3, r1
 80073d8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80073da:	2103      	movs	r1, #3
 80073dc:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 80073de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80073e0:	f000 fedc 	bl	800819c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80073e4:	20c0      	movs	r0, #192	; 0xc0
 80073e6:	00c0      	lsls	r0, r0, #3
 80073e8:	f000 fb56 	bl	8007a98 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073ec:	b003      	add	sp, #12
 80073ee:	bd00      	pop	{pc}
 80073f0:	40021000 	.word	0x40021000

080073f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	0004      	movs	r4, r0
 80073f8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073fa:	2214      	movs	r2, #20
 80073fc:	2100      	movs	r1, #0
 80073fe:	a803      	add	r0, sp, #12
 8007400:	f007 fb00 	bl	800ea04 <memset>
  if(hadc->Instance==ADC1)
 8007404:	4b26      	ldr	r3, [pc, #152]	; (80074a0 <HAL_ADC_MspInit+0xac>)
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d001      	beq.n	8007410 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800740c:	b008      	add	sp, #32
 800740e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8007410:	2180      	movs	r1, #128	; 0x80
 8007412:	4b24      	ldr	r3, [pc, #144]	; (80074a4 <HAL_ADC_MspInit+0xb0>)
 8007414:	0349      	lsls	r1, r1, #13
 8007416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007418:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 800741a:	430a      	orrs	r2, r1
 800741c:	641a      	str	r2, [r3, #64]	; 0x40
 800741e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 8007420:	2503      	movs	r5, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 8007422:	400a      	ands	r2, r1
 8007424:	9200      	str	r2, [sp, #0]
 8007426:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007428:	2201      	movs	r2, #1
 800742a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742c:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800742e:	4311      	orrs	r1, r2
 8007430:	6359      	str	r1, [r3, #52]	; 0x34
 8007432:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007434:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007436:	400a      	ands	r2, r1
 8007438:	9201      	str	r2, [sp, #4]
 800743a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800743c:	2202      	movs	r2, #2
 800743e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007440:	4311      	orrs	r1, r2
 8007442:	6359      	str	r1, [r3, #52]	; 0x34
 8007444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007446:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007448:	401a      	ands	r2, r3
 800744a:	9202      	str	r2, [sp, #8]
 800744c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 800744e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007450:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007452:	f001 f8cb 	bl	80085ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007458:	4814      	ldr	r0, [pc, #80]	; (80074ac <HAL_ADC_MspInit+0xb8>)
 800745a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 800745c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800745e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007460:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007462:	f001 f8c3 	bl	80085ec <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8007466:	4d12      	ldr	r5, [pc, #72]	; (80074b0 <HAL_ADC_MspInit+0xbc>)
 8007468:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800746a:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 800746c:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800746e:	2305      	movs	r3, #5
 8007470:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007472:	337b      	adds	r3, #123	; 0x7b
 8007474:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007476:	3381      	adds	r3, #129	; 0x81
 8007478:	33ff      	adds	r3, #255	; 0xff
 800747a:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007482:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007484:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007486:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007488:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800748a:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800748c:	f000 fee4 	bl	8008258 <HAL_DMA_Init>
 8007490:	2800      	cmp	r0, #0
 8007492:	d102      	bne.n	800749a <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007494:	6525      	str	r5, [r4, #80]	; 0x50
 8007496:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8007498:	e7b8      	b.n	800740c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800749a:	f7ff ff87 	bl	80073ac <Error_Handler>
 800749e:	e7f9      	b.n	8007494 <HAL_ADC_MspInit+0xa0>
 80074a0:	40012400 	.word	0x40012400
 80074a4:	40021000 	.word	0x40021000
 80074a8:	00000402 	.word	0x00000402
 80074ac:	50000400 	.word	0x50000400
 80074b0:	20004804 	.word	0x20004804
 80074b4:	40020008 	.word	0x40020008

080074b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80074b8:	b510      	push	{r4, lr}
 80074ba:	0004      	movs	r4, r0
 80074bc:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074be:	2214      	movs	r2, #20
 80074c0:	2100      	movs	r1, #0
 80074c2:	a802      	add	r0, sp, #8
 80074c4:	f007 fa9e 	bl	800ea04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80074c8:	221c      	movs	r2, #28
 80074ca:	2100      	movs	r1, #0
 80074cc:	a807      	add	r0, sp, #28
 80074ce:	f007 fa99 	bl	800ea04 <memset>
  if(hi2c->Instance==I2C1)
 80074d2:	4b18      	ldr	r3, [pc, #96]	; (8007534 <HAL_I2C_MspInit+0x7c>)
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d001      	beq.n	80074de <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80074da:	b00e      	add	sp, #56	; 0x38
 80074dc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80074de:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074e0:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80074e2:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074e4:	f002 f97a 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d120      	bne.n	800752e <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ec:	2302      	movs	r3, #2
 80074ee:	4c12      	ldr	r4, [pc, #72]	; (8007538 <HAL_I2C_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074f0:	4812      	ldr	r0, [pc, #72]	; (800753c <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074f4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074f6:	431a      	orrs	r2, r3
 80074f8:	6362      	str	r2, [r4, #52]	; 0x34
 80074fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80074fc:	4013      	ands	r3, r2
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8007502:	23c0      	movs	r3, #192	; 0xc0
 8007504:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007506:	3bae      	subs	r3, #174	; 0xae
 8007508:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800750a:	3b11      	subs	r3, #17
 800750c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800750e:	2300      	movs	r3, #0
 8007510:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8007512:	3306      	adds	r3, #6
 8007514:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007516:	f001 f869 	bl	80085ec <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800751a:	2280      	movs	r2, #128	; 0x80
 800751c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800751e:	0392      	lsls	r2, r2, #14
 8007520:	4313      	orrs	r3, r2
 8007522:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007524:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007526:	4013      	ands	r3, r2
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	9b01      	ldr	r3, [sp, #4]
}
 800752c:	e7d5      	b.n	80074da <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800752e:	f7ff ff3d 	bl	80073ac <Error_Handler>
 8007532:	e7db      	b.n	80074ec <HAL_I2C_MspInit+0x34>
 8007534:	40005400 	.word	0x40005400
 8007538:	40021000 	.word	0x40021000
 800753c:	50000400 	.word	0x50000400

08007540 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007540:	b510      	push	{r4, lr}
 8007542:	0004      	movs	r4, r0
 8007544:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007546:	2214      	movs	r2, #20
 8007548:	2100      	movs	r1, #0
 800754a:	a803      	add	r0, sp, #12
 800754c:	f007 fa5a 	bl	800ea04 <memset>
  if(hspi->Instance==SPI1)
 8007550:	4b10      	ldr	r3, [pc, #64]	; (8007594 <HAL_SPI_MspInit+0x54>)
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d001      	beq.n	800755c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007558:	b008      	add	sp, #32
 800755a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800755c:	2180      	movs	r1, #128	; 0x80
 800755e:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <HAL_SPI_MspInit+0x58>)
 8007560:	0149      	lsls	r1, r1, #5
 8007562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007564:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007566:	430a      	orrs	r2, r1
 8007568:	641a      	str	r2, [r3, #64]	; 0x40
 800756a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800756c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 800756e:	400a      	ands	r2, r1
 8007570:	9201      	str	r2, [sp, #4]
 8007572:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007574:	2201      	movs	r2, #1
 8007576:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007578:	4311      	orrs	r1, r2
 800757a:	6359      	str	r1, [r3, #52]	; 0x34
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800757e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007580:	401a      	ands	r2, r3
 8007582:	9202      	str	r2, [sp, #8]
 8007584:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8007586:	23e0      	movs	r3, #224	; 0xe0
 8007588:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800758a:	3bde      	subs	r3, #222	; 0xde
 800758c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800758e:	f001 f82d 	bl	80085ec <HAL_GPIO_Init>
}
 8007592:	e7e1      	b.n	8007558 <HAL_SPI_MspInit+0x18>
 8007594:	40013000 	.word	0x40013000
 8007598:	40021000 	.word	0x40021000

0800759c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800759c:	b500      	push	{lr}
  if(htim_base->Instance==TIM6)
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <HAL_TIM_Base_MspInit+0x34>)
 80075a0:	6802      	ldr	r2, [r0, #0]
{
 80075a2:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80075a8:	b003      	add	sp, #12
 80075aa:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075ac:	2310      	movs	r3, #16
 80075ae:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <HAL_TIM_Base_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80075b0:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075b2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80075b4:	4319      	orrs	r1, r3
 80075b6:	63d1      	str	r1, [r2, #60]	; 0x3c
 80075b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80075ba:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075bc:	4013      	ands	r3, r2
 80075be:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80075c0:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80075c4:	f000 fdea 	bl	800819c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80075c8:	2011      	movs	r0, #17
 80075ca:	f000 fe19 	bl	8008200 <HAL_NVIC_EnableIRQ>
}
 80075ce:	e7eb      	b.n	80075a8 <HAL_TIM_Base_MspInit+0xc>
 80075d0:	40001000 	.word	0x40001000
 80075d4:	40021000 	.word	0x40021000

080075d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	0004      	movs	r4, r0
 80075dc:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075de:	2214      	movs	r2, #20
 80075e0:	2100      	movs	r1, #0
 80075e2:	a806      	add	r0, sp, #24
 80075e4:	f007 fa0e 	bl	800ea04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80075e8:	221c      	movs	r2, #28
 80075ea:	2100      	movs	r1, #0
 80075ec:	a80b      	add	r0, sp, #44	; 0x2c
 80075ee:	f007 fa09 	bl	800ea04 <memset>
  if(huart->Instance==USART1)
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	4a6f      	ldr	r2, [pc, #444]	; (80077b4 <HAL_UART_MspInit+0x1dc>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d008      	beq.n	800760c <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80075fa:	4a6f      	ldr	r2, [pc, #444]	; (80077b8 <HAL_UART_MspInit+0x1e0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d04c      	beq.n	800769a <HAL_UART_MspInit+0xc2>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8007600:	4a6e      	ldr	r2, [pc, #440]	; (80077bc <HAL_UART_MspInit+0x1e4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d100      	bne.n	8007608 <HAL_UART_MspInit+0x30>
 8007606:	e08c      	b.n	8007722 <HAL_UART_MspInit+0x14a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007608:	b012      	add	sp, #72	; 0x48
 800760a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800760c:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800760e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007610:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007612:	f002 f8e3 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 8007616:	2800      	cmp	r0, #0
 8007618:	d000      	beq.n	800761c <HAL_UART_MspInit+0x44>
 800761a:	e0bf      	b.n	800779c <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800761c:	2180      	movs	r1, #128	; 0x80
 800761e:	4b68      	ldr	r3, [pc, #416]	; (80077c0 <HAL_UART_MspInit+0x1e8>)
 8007620:	01c9      	lsls	r1, r1, #7
 8007622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007624:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8007626:	430a      	orrs	r2, r1
 8007628:	641a      	str	r2, [r3, #64]	; 0x40
 800762a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762c:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800762e:	400a      	ands	r2, r1
 8007630:	9200      	str	r2, [sp, #0]
 8007632:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007634:	2201      	movs	r2, #1
 8007636:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007638:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800763a:	4311      	orrs	r1, r2
 800763c:	6359      	str	r1, [r3, #52]	; 0x34
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007640:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007642:	4013      	ands	r3, r2
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 8007648:	23c0      	movs	r3, #192	; 0xc0
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800764e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007650:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007652:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007654:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007656:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007658:	f000 ffc8 	bl	80085ec <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800765c:	4d59      	ldr	r5, [pc, #356]	; (80077c4 <HAL_UART_MspInit+0x1ec>)
 800765e:	4b5a      	ldr	r3, [pc, #360]	; (80077c8 <HAL_UART_MspInit+0x1f0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007660:	0028      	movs	r0, r5
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8007662:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8007664:	2332      	movs	r3, #50	; 0x32
 8007666:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007668:	334e      	adds	r3, #78	; 0x4e
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800766a:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800766c:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800766e:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007670:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007672:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007674:	61ee      	str	r6, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007676:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007678:	f000 fdee 	bl	8008258 <HAL_DMA_Init>
 800767c:	2800      	cmp	r0, #0
 800767e:	d000      	beq.n	8007682 <HAL_UART_MspInit+0xaa>
 8007680:	e089      	b.n	8007796 <HAL_UART_MspInit+0x1be>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007682:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007684:	2200      	movs	r2, #0
 8007686:	2103      	movs	r1, #3
 8007688:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800768a:	50e5      	str	r5, [r4, r3]
 800768c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800768e:	f000 fd85 	bl	800819c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007692:	201b      	movs	r0, #27
 8007694:	f000 fdb4 	bl	8008200 <HAL_NVIC_EnableIRQ>
 8007698:	e7b6      	b.n	8007608 <HAL_UART_MspInit+0x30>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800769a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800769c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800769e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076a0:	f002 f89c 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d17c      	bne.n	80077a2 <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 80076a8:	2180      	movs	r1, #128	; 0x80
 80076aa:	4b45      	ldr	r3, [pc, #276]	; (80077c0 <HAL_UART_MspInit+0x1e8>)
 80076ac:	0289      	lsls	r1, r1, #10
 80076ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076b0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80076b2:	430a      	orrs	r2, r1
 80076b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80076b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b8:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80076ba:	400a      	ands	r2, r1
 80076bc:	9202      	str	r2, [sp, #8]
 80076be:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076c0:	2201      	movs	r2, #1
 80076c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076c4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076c6:	4311      	orrs	r1, r2
 80076c8:	6359      	str	r1, [r3, #52]	; 0x34
 80076ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076cc:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ce:	4013      	ands	r3, r2
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 80076d4:	230c      	movs	r3, #12
 80076d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076d8:	3b0a      	subs	r3, #10
 80076da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076dc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076de:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80076e0:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076e2:	f000 ff83 	bl	80085ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80076e6:	4d39      	ldr	r5, [pc, #228]	; (80077cc <HAL_UART_MspInit+0x1f4>)
 80076e8:	4b39      	ldr	r3, [pc, #228]	; (80077d0 <HAL_UART_MspInit+0x1f8>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80076ea:	0028      	movs	r0, r5
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80076ec:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80076ee:	2334      	movs	r3, #52	; 0x34
 80076f0:	606b      	str	r3, [r5, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80076f2:	334c      	adds	r3, #76	; 0x4c
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80076f4:	60ae      	str	r6, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076f6:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80076f8:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076fa:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076fc:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80076fe:	61ee      	str	r6, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007700:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007702:	f000 fda9 	bl	8008258 <HAL_DMA_Init>
 8007706:	2800      	cmp	r0, #0
 8007708:	d14e      	bne.n	80077a8 <HAL_UART_MspInit+0x1d0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800770a:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800770c:	2200      	movs	r2, #0
 800770e:	2103      	movs	r1, #3
 8007710:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007712:	50e5      	str	r5, [r4, r3]
 8007714:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007716:	f000 fd41 	bl	800819c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800771a:	201c      	movs	r0, #28
 800771c:	f000 fd70 	bl	8008200 <HAL_NVIC_EnableIRQ>
 8007720:	e772      	b.n	8007608 <HAL_UART_MspInit+0x30>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007722:	2180      	movs	r1, #128	; 0x80
 8007724:	4b26      	ldr	r3, [pc, #152]	; (80077c0 <HAL_UART_MspInit+0x1e8>)
 8007726:	02c9      	lsls	r1, r1, #11
 8007728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800772a:	482a      	ldr	r0, [pc, #168]	; (80077d4 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800772c:	430a      	orrs	r2, r1
 800772e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007732:	400a      	ands	r2, r1
 8007734:	9204      	str	r2, [sp, #16]
 8007736:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007738:	2202      	movs	r2, #2
 800773a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800773c:	4311      	orrs	r1, r2
 800773e:	6359      	str	r1, [r3, #52]	; 0x34
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007742:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007744:	4013      	ands	r3, r2
 8007746:	9305      	str	r3, [sp, #20]
 8007748:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 800774a:	2305      	movs	r3, #5
 800774c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800774e:	3b01      	subs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007750:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007752:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007754:	f000 ff4a 	bl	80085ec <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8007758:	4d1f      	ldr	r5, [pc, #124]	; (80077d8 <HAL_UART_MspInit+0x200>)
 800775a:	4b20      	ldr	r3, [pc, #128]	; (80077dc <HAL_UART_MspInit+0x204>)
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800775c:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel4;
 800775e:	602b      	str	r3, [r5, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8007760:	2337      	movs	r3, #55	; 0x37
 8007762:	606b      	str	r3, [r5, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007764:	3b27      	subs	r3, #39	; 0x27
 8007766:	60ab      	str	r3, [r5, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007768:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800776a:	0028      	movs	r0, r5
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800776c:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800776e:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007770:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007772:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007774:	61eb      	str	r3, [r5, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007776:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8007778:	f000 fd6e 	bl	8008258 <HAL_DMA_Init>
 800777c:	2800      	cmp	r0, #0
 800777e:	d116      	bne.n	80077ae <HAL_UART_MspInit+0x1d6>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8007780:	2200      	movs	r2, #0
 8007782:	2103      	movs	r1, #3
 8007784:	201d      	movs	r0, #29
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8007786:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007788:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 800778a:	f000 fd07 	bl	800819c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800778e:	201d      	movs	r0, #29
 8007790:	f000 fd36 	bl	8008200 <HAL_NVIC_EnableIRQ>
}
 8007794:	e738      	b.n	8007608 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8007796:	f7ff fe09 	bl	80073ac <Error_Handler>
 800779a:	e772      	b.n	8007682 <HAL_UART_MspInit+0xaa>
      Error_Handler();
 800779c:	f7ff fe06 	bl	80073ac <Error_Handler>
 80077a0:	e73c      	b.n	800761c <HAL_UART_MspInit+0x44>
      Error_Handler();
 80077a2:	f7ff fe03 	bl	80073ac <Error_Handler>
 80077a6:	e77f      	b.n	80076a8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80077a8:	f7ff fe00 	bl	80073ac <Error_Handler>
 80077ac:	e7ad      	b.n	800770a <HAL_UART_MspInit+0x132>
      Error_Handler();
 80077ae:	f7ff fdfd 	bl	80073ac <Error_Handler>
 80077b2:	e7e5      	b.n	8007780 <HAL_UART_MspInit+0x1a8>
 80077b4:	40013800 	.word	0x40013800
 80077b8:	40004400 	.word	0x40004400
 80077bc:	40004800 	.word	0x40004800
 80077c0:	40021000 	.word	0x40021000
 80077c4:	20004860 	.word	0x20004860
 80077c8:	4002001c 	.word	0x4002001c
 80077cc:	200048bc 	.word	0x200048bc
 80077d0:	40020030 	.word	0x40020030
 80077d4:	50000400 	.word	0x50000400
 80077d8:	20004918 	.word	0x20004918
 80077dc:	40020044 	.word	0x40020044

080077e0 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80077e0:	2180      	movs	r1, #128	; 0x80
 80077e2:	4b21      	ldr	r3, [pc, #132]	; (8007868 <HAL_InitTick+0x88>)
{
 80077e4:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 80077e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e8:	0109      	lsls	r1, r1, #4
 80077ea:	430a      	orrs	r2, r1
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
 80077ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 80077f0:	b086      	sub	sp, #24
  __HAL_RCC_TIM1_CLK_ENABLE();
 80077f2:	400b      	ands	r3, r1
 80077f4:	9301      	str	r3, [sp, #4]
{
 80077f6:	0006      	movs	r6, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80077f8:	4669      	mov	r1, sp
 80077fa:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 80077fc:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80077fe:	f001 ffd3 	bl	80097a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d117      	bne.n	8007838 <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007808:	f001 ffba 	bl	8009780 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800780c:	4c17      	ldr	r4, [pc, #92]	; (800786c <HAL_InitTick+0x8c>)
 800780e:	4b18      	ldr	r3, [pc, #96]	; (8007870 <HAL_InitTick+0x90>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007810:	4918      	ldr	r1, [pc, #96]	; (8007874 <HAL_InitTick+0x94>)
  htim1.Instance = TIM1;
 8007812:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007814:	4b18      	ldr	r3, [pc, #96]	; (8007878 <HAL_InitTick+0x98>)
 8007816:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007818:	f7f8 fc92 	bl	8000140 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800781c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800781e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8007820:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8007822:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8007824:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007826:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007828:	61a3      	str	r3, [r4, #24]
  status = HAL_TIM_Base_Init(&htim1);
 800782a:	f002 fd71 	bl	800a310 <HAL_TIM_Base_Init>
 800782e:	1e05      	subs	r5, r0, #0
  if (status == HAL_OK)
 8007830:	d006      	beq.n	8007840 <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 8007832:	0028      	movs	r0, r5
 8007834:	b006      	add	sp, #24
 8007836:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007838:	f001 ffa2 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800783c:	0040      	lsls	r0, r0, #1
 800783e:	e7e5      	b.n	800780c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007840:	0020      	movs	r0, r4
 8007842:	f002 fc25 	bl	800a090 <HAL_TIM_Base_Start_IT>
 8007846:	1e05      	subs	r5, r0, #0
    if (status == HAL_OK)
 8007848:	d1f3      	bne.n	8007832 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800784a:	200d      	movs	r0, #13
 800784c:	f000 fcd8 	bl	8008200 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007850:	2e03      	cmp	r6, #3
 8007852:	d901      	bls.n	8007858 <HAL_InitTick+0x78>
        status = HAL_ERROR;
 8007854:	2501      	movs	r5, #1
 8007856:	e7ec      	b.n	8007832 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8007858:	2200      	movs	r2, #0
 800785a:	0031      	movs	r1, r6
 800785c:	200d      	movs	r0, #13
 800785e:	f000 fc9d 	bl	800819c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <HAL_InitTick+0x9c>)
 8007864:	601e      	str	r6, [r3, #0]
 8007866:	e7e4      	b.n	8007832 <HAL_InitTick+0x52>
 8007868:	40021000 	.word	0x40021000
 800786c:	20004c9c 	.word	0x20004c9c
 8007870:	40012c00 	.word	0x40012c00
 8007874:	000f4240 	.word	0x000f4240
 8007878:	000003e7 	.word	0x000003e7
 800787c:	20000124 	.word	0x20000124

08007880 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007880:	e7fe      	b.n	8007880 <NMI_Handler>
 8007882:	46c0      	nop			; (mov r8, r8)

08007884 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007884:	e7fe      	b.n	8007884 <HardFault_Handler>
 8007886:	46c0      	nop			; (mov r8, r8)

08007888 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007888:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800788a:	4802      	ldr	r0, [pc, #8]	; (8007894 <DMA1_Channel1_IRQHandler+0xc>)
 800788c:	f000 fe20 	bl	80084d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007890:	bd10      	pop	{r4, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	20004804 	.word	0x20004804

08007898 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007898:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800789a:	4803      	ldr	r0, [pc, #12]	; (80078a8 <DMA1_Channel2_3_IRQHandler+0x10>)
 800789c:	f000 fe18 	bl	80084d0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80078a0:	4802      	ldr	r0, [pc, #8]	; (80078ac <DMA1_Channel2_3_IRQHandler+0x14>)
 80078a2:	f000 fe15 	bl	80084d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80078a6:	bd10      	pop	{r4, pc}
 80078a8:	20004860 	.word	0x20004860
 80078ac:	200048bc 	.word	0x200048bc

080078b0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 80078b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80078b2:	4803      	ldr	r0, [pc, #12]	; (80078c0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 80078b4:	f000 fe0c 	bl	80084d0 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 80078b8:	4802      	ldr	r0, [pc, #8]	; (80078c4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 80078ba:	f000 fe65 	bl	8008588 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 80078be:	bd10      	pop	{r4, pc}
 80078c0:	20004918 	.word	0x20004918
 80078c4:	20004804 	.word	0x20004804

080078c8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80078c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80078ca:	4802      	ldr	r0, [pc, #8]	; (80078d4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80078cc:	f002 fc1a 	bl	800a104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	20004c9c 	.word	0x20004c9c

080078d8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80078d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80078da:	4802      	ldr	r0, [pc, #8]	; (80078e4 <TIM6_IRQHandler+0xc>)
 80078dc:	f002 fc12 	bl	800a104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	20004a2c 	.word	0x20004a2c

080078e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80078e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80078ea:	4802      	ldr	r0, [pc, #8]	; (80078f4 <USART1_IRQHandler+0xc>)
 80078ec:	f002 fe02 	bl	800a4f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	20004a78 	.word	0x20004a78

080078f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80078f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80078fa:	4802      	ldr	r0, [pc, #8]	; (8007904 <USART2_IRQHandler+0xc>)
 80078fc:	f002 fdfa 	bl	800a4f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007900:	bd10      	pop	{r4, pc}
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	20004b0c 	.word	0x20004b0c

08007908 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8007908:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800790a:	4802      	ldr	r0, [pc, #8]	; (8007914 <USART3_4_IRQHandler+0xc>)
 800790c:	f002 fdf2 	bl	800a4f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8007910:	bd10      	pop	{r4, pc}
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	20004ba0 	.word	0x20004ba0

08007918 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8007918:	2001      	movs	r0, #1
 800791a:	4770      	bx	lr

0800791c <_kill>:

int _kill(int pid, int sig)
{
 800791c:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800791e:	f007 fa03 	bl	800ed28 <__errno>
 8007922:	2316      	movs	r3, #22
 8007924:	6003      	str	r3, [r0, #0]
  return -1;
 8007926:	2001      	movs	r0, #1
}
 8007928:	4240      	negs	r0, r0
 800792a:	bd10      	pop	{r4, pc}

0800792c <_exit>:

void _exit (int status)
{
 800792c:	b510      	push	{r4, lr}
  errno = EINVAL;
 800792e:	f007 f9fb 	bl	800ed28 <__errno>
 8007932:	2316      	movs	r3, #22
 8007934:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8007936:	e7fe      	b.n	8007936 <_exit+0xa>

08007938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800793c:	dd07      	ble.n	800794e <_read+0x16>
 800793e:	000c      	movs	r4, r1
 8007940:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8007942:	e000      	b.n	8007946 <_read+0xe>
 8007944:	bf00      	nop
 8007946:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007948:	3401      	adds	r4, #1
 800794a:	42ac      	cmp	r4, r5
 800794c:	d1f9      	bne.n	8007942 <_read+0xa>
  }

  return len;
}
 800794e:	0030      	movs	r0, r6
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	46c0      	nop			; (mov r8, r8)

08007954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007958:	dd07      	ble.n	800796a <_write+0x16>
 800795a:	000c      	movs	r4, r1
 800795c:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 800795e:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007960:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8007962:	e000      	b.n	8007966 <_write+0x12>
 8007964:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007966:	42ac      	cmp	r4, r5
 8007968:	d1f9      	bne.n	800795e <_write+0xa>
  }
  return len;
}
 800796a:	0030      	movs	r0, r6
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	46c0      	nop			; (mov r8, r8)

08007970 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8007970:	2001      	movs	r0, #1
}
 8007972:	4240      	negs	r0, r0
 8007974:	4770      	bx	lr
 8007976:	46c0      	nop			; (mov r8, r8)

08007978 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8007978:	2380      	movs	r3, #128	; 0x80
 800797a:	019b      	lsls	r3, r3, #6
  return 0;
}
 800797c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800797e:	604b      	str	r3, [r1, #4]
}
 8007980:	4770      	bx	lr
 8007982:	46c0      	nop			; (mov r8, r8)

08007984 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8007984:	2001      	movs	r0, #1
 8007986:	4770      	bx	lr

08007988 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8007988:	2000      	movs	r0, #0
 800798a:	4770      	bx	lr

0800798c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800798c:	490c      	ldr	r1, [pc, #48]	; (80079c0 <_sbrk+0x34>)
 800798e:	4a0d      	ldr	r2, [pc, #52]	; (80079c4 <_sbrk+0x38>)
{
 8007990:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007992:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007994:	490c      	ldr	r1, [pc, #48]	; (80079c8 <_sbrk+0x3c>)
{
 8007996:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8007998:	6808      	ldr	r0, [r1, #0]
 800799a:	2800      	cmp	r0, #0
 800799c:	d004      	beq.n	80079a8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800799e:	18c3      	adds	r3, r0, r3
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d806      	bhi.n	80079b2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80079a4:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80079a6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80079a8:	4808      	ldr	r0, [pc, #32]	; (80079cc <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80079aa:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80079ac:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d9f8      	bls.n	80079a4 <_sbrk+0x18>
    errno = ENOMEM;
 80079b2:	f007 f9b9 	bl	800ed28 <__errno>
 80079b6:	230c      	movs	r3, #12
 80079b8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80079ba:	2001      	movs	r0, #1
 80079bc:	4240      	negs	r0, r0
 80079be:	e7f2      	b.n	80079a6 <_sbrk+0x1a>
 80079c0:	00000400 	.word	0x00000400
 80079c4:	20009000 	.word	0x20009000
 80079c8:	20004ce8 	.word	0x20004ce8
 80079cc:	20006818 	.word	0x20006818

080079d0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80079d0:	4770      	bx	lr
 80079d2:	46c0      	nop			; (mov r8, r8)

080079d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80079d4:	480d      	ldr	r0, [pc, #52]	; (8007a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80079d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80079d8:	f7ff fffa 	bl	80079d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80079dc:	480c      	ldr	r0, [pc, #48]	; (8007a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80079de:	490d      	ldr	r1, [pc, #52]	; (8007a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80079e0:	4a0d      	ldr	r2, [pc, #52]	; (8007a18 <LoopForever+0xe>)
  movs r3, #0
 80079e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80079e4:	e002      	b.n	80079ec <LoopCopyDataInit>

080079e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80079e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079ea:	3304      	adds	r3, #4

080079ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079f0:	d3f9      	bcc.n	80079e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079f2:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80079f4:	4c0a      	ldr	r4, [pc, #40]	; (8007a20 <LoopForever+0x16>)
  movs r3, #0
 80079f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079f8:	e001      	b.n	80079fe <LoopFillZerobss>

080079fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079fc:	3204      	adds	r2, #4

080079fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a00:	d3fb      	bcc.n	80079fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007a02:	f007 f997 	bl	800ed34 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007a06:	f7fd feef 	bl	80057e8 <main>

08007a0a <LoopForever>:

LoopForever:
  b LoopForever
 8007a0a:	e7fe      	b.n	8007a0a <LoopForever>
  ldr   r0, =_estack
 8007a0c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a14:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8007a18:	08013e80 	.word	0x08013e80
  ldr r2, =_sbss
 8007a1c:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8007a20:	20006818 	.word	0x20006818

08007a24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007a24:	e7fe      	b.n	8007a24 <ADC1_IRQHandler>
	...

08007a28 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	4a08      	ldr	r2, [pc, #32]	; (8007a4c <HAL_Init+0x24>)
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	6811      	ldr	r1, [r2, #0]
{
 8007a30:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a32:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a34:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a36:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a38:	f7ff fed2 	bl	80077e0 <HAL_InitTick>
 8007a3c:	1e04      	subs	r4, r0, #0
 8007a3e:	d002      	beq.n	8007a46 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8007a40:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8007a42:	0020      	movs	r0, r4
 8007a44:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8007a46:	f7ff fcb3 	bl	80073b0 <HAL_MspInit>
 8007a4a:	e7fa      	b.n	8007a42 <HAL_Init+0x1a>
 8007a4c:	40022000 	.word	0x40022000

08007a50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007a50:	4a03      	ldr	r2, [pc, #12]	; (8007a60 <HAL_IncTick+0x10>)
 8007a52:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <HAL_IncTick+0x14>)
 8007a54:	6811      	ldr	r1, [r2, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	185b      	adds	r3, r3, r1
 8007a5a:	6013      	str	r3, [r2, #0]
}
 8007a5c:	4770      	bx	lr
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	20004cec 	.word	0x20004cec
 8007a64:	20000120 	.word	0x20000120

08007a68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007a68:	4b01      	ldr	r3, [pc, #4]	; (8007a70 <HAL_GetTick+0x8>)
 8007a6a:	6818      	ldr	r0, [r3, #0]
}
 8007a6c:	4770      	bx	lr
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	20004cec 	.word	0x20004cec

08007a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007a78:	f7ff fff6 	bl	8007a68 <HAL_GetTick>
 8007a7c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a7e:	1c63      	adds	r3, r4, #1
 8007a80:	d002      	beq.n	8007a88 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a82:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <HAL_Delay+0x20>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a88:	f7ff ffee 	bl	8007a68 <HAL_GetTick>
 8007a8c:	1b40      	subs	r0, r0, r5
 8007a8e:	42a0      	cmp	r0, r4
 8007a90:	d3fa      	bcc.n	8007a88 <HAL_Delay+0x14>
  {
  }
}
 8007a92:	bd70      	pop	{r4, r5, r6, pc}
 8007a94:	20000120 	.word	0x20000120

08007a98 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007a98:	4a03      	ldr	r2, [pc, #12]	; (8007aa8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8007a9a:	4904      	ldr	r1, [pc, #16]	; (8007aac <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8007a9c:	6813      	ldr	r3, [r2, #0]
 8007a9e:	400b      	ands	r3, r1
 8007aa0:	4303      	orrs	r3, r0
 8007aa2:	6013      	str	r3, [r2, #0]
}
 8007aa4:	4770      	bx	lr
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	fffff9ff 	.word	0xfffff9ff

08007ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ab2:	46d6      	mov	lr, sl
 8007ab4:	464f      	mov	r7, r9
 8007ab6:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007ab8:	2300      	movs	r3, #0
{
 8007aba:	b5c0      	push	{r6, r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8007ac0:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8007ac2:	d100      	bne.n	8007ac6 <HAL_ADC_Init+0x16>
 8007ac4:	e0d8      	b.n	8007c78 <HAL_ADC_Init+0x1c8>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007ac6:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8007ac8:	2d00      	cmp	r5, #0
 8007aca:	d100      	bne.n	8007ace <HAL_ADC_Init+0x1e>
 8007acc:	e0a8      	b.n	8007c20 <HAL_ADC_Init+0x170>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007ace:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007ad0:	6825      	ldr	r5, [r4, #0]
 8007ad2:	055b      	lsls	r3, r3, #21
 8007ad4:	68aa      	ldr	r2, [r5, #8]
 8007ad6:	421a      	tst	r2, r3
 8007ad8:	d115      	bne.n	8007b06 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8007ada:	68aa      	ldr	r2, [r5, #8]
 8007adc:	497d      	ldr	r1, [pc, #500]	; (8007cd4 <HAL_ADC_Init+0x224>)
 8007ade:	400a      	ands	r2, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007ae4:	4b7c      	ldr	r3, [pc, #496]	; (8007cd8 <HAL_ADC_Init+0x228>)
 8007ae6:	497d      	ldr	r1, [pc, #500]	; (8007cdc <HAL_ADC_Init+0x22c>)
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	f7f8 fb29 	bl	8000140 <__udivsi3>
 8007aee:	3001      	adds	r0, #1
 8007af0:	0040      	lsls	r0, r0, #1
 8007af2:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 8007afa:	9b01      	ldr	r3, [sp, #4]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1f9      	bne.n	8007afa <HAL_ADC_Init+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b06:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b08:	2000      	movs	r0, #0
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	d400      	bmi.n	8007b10 <HAL_ADC_Init+0x60>
 8007b0e:	e07a      	b.n	8007c06 <HAL_ADC_Init+0x156>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b10:	68ab      	ldr	r3, [r5, #8]
 8007b12:	075b      	lsls	r3, r3, #29
 8007b14:	d50b      	bpl.n	8007b2e <HAL_ADC_Init+0x7e>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b16:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b18:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8007b1a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8007b22:	b002      	add	sp, #8
 8007b24:	bce0      	pop	{r5, r6, r7}
 8007b26:	46ba      	mov	sl, r7
 8007b28:	46b1      	mov	r9, r6
 8007b2a:	46a8      	mov	r8, r5
 8007b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b30:	06db      	lsls	r3, r3, #27
 8007b32:	d4f1      	bmi.n	8007b18 <HAL_ADC_Init+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8007b34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b36:	4a6a      	ldr	r2, [pc, #424]	; (8007ce0 <HAL_ADC_Init+0x230>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	3206      	adds	r2, #6
 8007b3c:	32ff      	adds	r2, #255	; 0xff
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007b42:	68ab      	ldr	r3, [r5, #8]
 8007b44:	07db      	lsls	r3, r3, #31
 8007b46:	d471      	bmi.n	8007c2c <HAL_ADC_Init+0x17c>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007b48:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007b4a:	68a2      	ldr	r2, [r4, #8]
 8007b4c:	1e7b      	subs	r3, r7, #1
 8007b4e:	419f      	sbcs	r7, r3
 8007b50:	68e3      	ldr	r3, [r4, #12]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007b52:	7ea6      	ldrb	r6, [r4, #26]
 8007b54:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007b56:	7e23      	ldrb	r3, [r4, #24]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007b58:	6921      	ldr	r1, [r4, #16]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007b5a:	039b      	lsls	r3, r3, #14
 8007b5c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007b5e:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007b60:	033f      	lsls	r7, r7, #12
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007b62:	03db      	lsls	r3, r3, #15
 8007b64:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007b66:	0373      	lsls	r3, r6, #13
 8007b68:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	da00      	bge.n	8007b70 <HAL_ADC_Init+0xc0>
 8007b6e:	e09f      	b.n	8007cb0 <HAL_ADC_Init+0x200>
 8007b70:	2380      	movs	r3, #128	; 0x80
 8007b72:	039b      	lsls	r3, r3, #14
 8007b74:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007b76:	232c      	movs	r3, #44	; 0x2c
 8007b78:	5ce3      	ldrb	r3, [r4, r3]
 8007b7a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	433b      	orrs	r3, r7
 8007b80:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b82:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007b84:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b86:	5de2      	ldrb	r2, [r4, r7]
 8007b88:	2a01      	cmp	r2, #1
 8007b8a:	d100      	bne.n	8007b8e <HAL_ADC_Init+0xde>
 8007b8c:	e094      	b.n	8007cb8 <HAL_ADC_Init+0x208>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	d005      	beq.n	8007ba0 <HAL_ADC_Init+0xf0>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007b94:	26e0      	movs	r6, #224	; 0xe0
 8007b96:	0076      	lsls	r6, r6, #1
 8007b98:	4032      	ands	r2, r6
 8007b9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b9c:	4332      	orrs	r2, r6
 8007b9e:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 8007ba0:	273c      	movs	r7, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8007ba2:	68ea      	ldr	r2, [r5, #12]
 8007ba4:	4e4f      	ldr	r6, [pc, #316]	; (8007ce4 <HAL_ADC_Init+0x234>)
 8007ba6:	4032      	ands	r2, r6
 8007ba8:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007baa:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8007bac:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007bae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8007bb0:	5de7      	ldrb	r7, [r4, r7]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007bb2:	0fb3      	lsrs	r3, r6, #30
 8007bb4:	079b      	lsls	r3, r3, #30
 8007bb6:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8007bb8:	46bc      	mov	ip, r7
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007bba:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8007bbc:	2f01      	cmp	r7, #1
 8007bbe:	d109      	bne.n	8007bd4 <HAL_ADC_Init+0x124>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8007bc0:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8007bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bc4:	433b      	orrs	r3, r7
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	4653      	mov	r3, sl
 8007bca:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8007bcc:	433a      	orrs	r2, r7
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	4663      	mov	r3, ip
 8007bd2:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8007bd4:	692b      	ldr	r3, [r5, #16]
 8007bd6:	4f44      	ldr	r7, [pc, #272]	; (8007ce8 <HAL_ADC_Init+0x238>)
 8007bd8:	403b      	ands	r3, r7
 8007bda:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007bdc:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8007bde:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007be0:	0073      	lsls	r3, r6, #1
 8007be2:	085b      	lsrs	r3, r3, #1
 8007be4:	05d2      	lsls	r2, r2, #23
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d021      	beq.n	8007c2e <HAL_ADC_Init+0x17e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007bea:	2380      	movs	r3, #128	; 0x80
 8007bec:	061b      	lsls	r3, r3, #24
 8007bee:	429e      	cmp	r6, r3
 8007bf0:	d01d      	beq.n	8007c2e <HAL_ADC_Init+0x17e>
        MODIFY_REG(ADC1_COMMON->CCR,
 8007bf2:	4a3e      	ldr	r2, [pc, #248]	; (8007cec <HAL_ADC_Init+0x23c>)
 8007bf4:	4f3e      	ldr	r7, [pc, #248]	; (8007cf0 <HAL_ADC_Init+0x240>)
 8007bf6:	6813      	ldr	r3, [r2, #0]
 8007bf8:	403b      	ands	r3, r7
 8007bfa:	27f0      	movs	r7, #240	; 0xf0
 8007bfc:	03bf      	lsls	r7, r7, #14
 8007bfe:	403e      	ands	r6, r7
 8007c00:	4333      	orrs	r3, r6
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	e013      	b.n	8007c2e <HAL_ADC_Init+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c06:	2210      	movs	r2, #16
 8007c08:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8007c0a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c10:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007c12:	3a0f      	subs	r2, #15
 8007c14:	4313      	orrs	r3, r2
 8007c16:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c18:	68ab      	ldr	r3, [r5, #8]
 8007c1a:	075b      	lsls	r3, r3, #29
 8007c1c:	d587      	bpl.n	8007b2e <HAL_ADC_Init+0x7e>
 8007c1e:	e77a      	b.n	8007b16 <HAL_ADC_Init+0x66>
    HAL_ADC_MspInit(hadc);
 8007c20:	f7ff fbe8 	bl	80073f4 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8007c24:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8007c26:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8007c28:	54e5      	strb	r5, [r4, r3]
 8007c2a:	e750      	b.n	8007ace <HAL_ADC_Init+0x1e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007c2c:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8007c2e:	2607      	movs	r6, #7
 8007c30:	2770      	movs	r7, #112	; 0x70
 8007c32:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007c34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007c36:	43b3      	bics	r3, r6
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	616b      	str	r3, [r5, #20]
 8007c3c:	696e      	ldr	r6, [r5, #20]
 8007c3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c40:	43be      	bics	r6, r7
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	4333      	orrs	r3, r6
 8007c46:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	d117      	bne.n	8007c7c <HAL_ADC_Init+0x1cc>
      SET_BIT(hadc->Instance->CHSELR,
 8007c4c:	2310      	movs	r3, #16
 8007c4e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007c50:	425b      	negs	r3, r3
 8007c52:	430b      	orrs	r3, r1
 8007c54:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007c56:	2307      	movs	r3, #7
 8007c58:	6969      	ldr	r1, [r5, #20]
 8007c5a:	400b      	ands	r3, r1
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d01e      	beq.n	8007c9e <HAL_ADC_Init+0x1ee>
      ADC_STATE_CLR_SET(hadc->State,
 8007c60:	2212      	movs	r2, #18
 8007c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8007c64:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8007c66:	4393      	bics	r3, r2
 8007c68:	3a02      	subs	r2, #2
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007c70:	3a0f      	subs	r2, #15
 8007c72:	4313      	orrs	r3, r2
 8007c74:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8007c76:	e754      	b.n	8007b22 <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8007c78:	2001      	movs	r0, #1
 8007c7a:	e752      	b.n	8007b22 <HAL_ADC_Init+0x72>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007c7c:	2380      	movs	r3, #128	; 0x80
 8007c7e:	039b      	lsls	r3, r3, #14
 8007c80:	4299      	cmp	r1, r3
 8007c82:	d1e8      	bne.n	8007c56 <HAL_ADC_Init+0x1a6>
      MODIFY_REG(hadc->Instance->CHSELR,
 8007c84:	211c      	movs	r1, #28
 8007c86:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007c88:	69e3      	ldr	r3, [r4, #28]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4019      	ands	r1, r3
 8007c90:	2310      	movs	r3, #16
 8007c92:	425b      	negs	r3, r3
 8007c94:	408b      	lsls	r3, r1
 8007c96:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	62ab      	str	r3, [r5, #40]	; 0x28
 8007c9c:	e7db      	b.n	8007c56 <HAL_ADC_Init+0x1a6>
      ADC_CLEAR_ERRORCODE(hadc);
 8007c9e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8007ca0:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8007ca2:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8007ca4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ca6:	4393      	bics	r3, r2
 8007ca8:	3a02      	subs	r2, #2
 8007caa:	4313      	orrs	r3, r2
 8007cac:	65a3      	str	r3, [r4, #88]	; 0x58
 8007cae:	e738      	b.n	8007b22 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007cb0:	004b      	lsls	r3, r1, #1
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	469c      	mov	ip, r3
 8007cb6:	e75e      	b.n	8007b76 <HAL_ADC_Init+0xc6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007cb8:	2e00      	cmp	r6, #0
 8007cba:	d103      	bne.n	8007cc4 <HAL_ADC_Init+0x214>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8007cbc:	2280      	movs	r2, #128	; 0x80
 8007cbe:	0252      	lsls	r2, r2, #9
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	e764      	b.n	8007b8e <HAL_ADC_Init+0xde>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cc4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8007cc6:	433e      	orrs	r6, r7
 8007cc8:	65a6      	str	r6, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cca:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8007ccc:	4332      	orrs	r2, r6
 8007cce:	65e2      	str	r2, [r4, #92]	; 0x5c
 8007cd0:	e75d      	b.n	8007b8e <HAL_ADC_Init+0xde>
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	6fffffe8 	.word	0x6fffffe8
 8007cd8:	2000011c 	.word	0x2000011c
 8007cdc:	00030d40 	.word	0x00030d40
 8007ce0:	fffffefd 	.word	0xfffffefd
 8007ce4:	fffe0201 	.word	0xfffe0201
 8007ce8:	1ffffc02 	.word	0x1ffffc02
 8007cec:	40012708 	.word	0x40012708
 8007cf0:	ffc3ffff 	.word	0xffc3ffff

08007cf4 <HAL_ADC_ConvCpltCallback>:
 8007cf4:	4770      	bx	lr
 8007cf6:	46c0      	nop			; (mov r8, r8)

08007cf8 <HAL_ADC_ConvHalfCpltCallback>:
 8007cf8:	4770      	bx	lr
 8007cfa:	46c0      	nop			; (mov r8, r8)

08007cfc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007cfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007d00:	f7ff fffa 	bl	8007cf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	46c0      	nop			; (mov r8, r8)

08007d08 <HAL_ADC_ErrorCallback>:
 8007d08:	4770      	bx	lr
 8007d0a:	46c0      	nop			; (mov r8, r8)

08007d0c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d0c:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8007d10:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d12:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007d14:	4313      	orrs	r3, r2
 8007d16:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007d18:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007d1a:	3a3c      	subs	r2, #60	; 0x3c
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d20:	f7ff fff2 	bl	8007d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d24:	bd10      	pop	{r4, pc}
 8007d26:	46c0      	nop			; (mov r8, r8)

08007d28 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007d28:	2150      	movs	r1, #80	; 0x50
{
 8007d2a:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8007d2e:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007d30:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007d32:	4211      	tst	r1, r2
 8007d34:	d10d      	bne.n	8007d52 <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d36:	2380      	movs	r3, #128	; 0x80
 8007d38:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8007d3e:	22c0      	movs	r2, #192	; 0xc0
 8007d40:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007d42:	6803      	ldr	r3, [r0, #0]
 8007d44:	0112      	lsls	r2, r2, #4
 8007d46:	68d9      	ldr	r1, [r3, #12]
 8007d48:	4211      	tst	r1, r2
 8007d4a:	d00a      	beq.n	8007d62 <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8007d4c:	f7ff ffd2 	bl	8007cf4 <HAL_ADC_ConvCpltCallback>
}
 8007d50:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d52:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007d54:	06d2      	lsls	r2, r2, #27
 8007d56:	d416      	bmi.n	8007d86 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d58:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d5e:	4790      	blx	r2
}
 8007d60:	e7f6      	b.n	8007d50 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007d62:	7e82      	ldrb	r2, [r0, #26]
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	d1f1      	bne.n	8007d4c <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	0712      	lsls	r2, r2, #28
 8007d6c:	d5ee      	bpl.n	8007d4c <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	0752      	lsls	r2, r2, #29
 8007d72:	d50b      	bpl.n	8007d8c <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d74:	2220      	movs	r2, #32
 8007d76:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d7c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007d7e:	3a1f      	subs	r2, #31
 8007d80:	4313      	orrs	r3, r2
 8007d82:	65c3      	str	r3, [r0, #92]	; 0x5c
 8007d84:	e7e2      	b.n	8007d4c <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 8007d86:	f7ff ffbf 	bl	8007d08 <HAL_ADC_ErrorCallback>
 8007d8a:	e7e1      	b.n	8007d50 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007d8c:	210c      	movs	r1, #12
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	438a      	bics	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8007d94:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007d96:	4a03      	ldr	r2, [pc, #12]	; (8007da4 <ADC_DMAConvCplt+0x7c>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	3204      	adds	r2, #4
 8007d9c:	32ff      	adds	r2, #255	; 0xff
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	6583      	str	r3, [r0, #88]	; 0x58
 8007da2:	e7d3      	b.n	8007d4c <ADC_DMAConvCplt+0x24>
 8007da4:	fffffefe 	.word	0xfffffefe

08007da8 <HAL_ADC_ConfigChannel>:
{
 8007da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007daa:	4645      	mov	r5, r8
 8007dac:	46de      	mov	lr, fp
 8007dae:	4657      	mov	r7, sl
 8007db0:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 8007db2:	2300      	movs	r3, #0
{
 8007db4:	b5e0      	push	{r5, r6, r7, lr}
 8007db6:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8007db8:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8007dba:	3354      	adds	r3, #84	; 0x54
 8007dbc:	5cc2      	ldrb	r2, [r0, r3]
{
 8007dbe:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007dc0:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8007dc2:	2a01      	cmp	r2, #1
 8007dc4:	d100      	bne.n	8007dc8 <HAL_ADC_ConfigChannel+0x20>
 8007dc6:	e091      	b.n	8007eec <HAL_ADC_ConfigChannel+0x144>
 8007dc8:	2001      	movs	r0, #1
 8007dca:	2204      	movs	r2, #4
 8007dcc:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	689e      	ldr	r6, [r3, #8]
 8007dd2:	4232      	tst	r2, r6
 8007dd4:	d00d      	beq.n	8007df2 <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dd8:	321c      	adds	r2, #28
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8007dde:	2354      	movs	r3, #84	; 0x54
 8007de0:	2200      	movs	r2, #0
 8007de2:	54e2      	strb	r2, [r4, r3]
}
 8007de4:	b005      	add	sp, #20
 8007de6:	bcf0      	pop	{r4, r5, r6, r7}
 8007de8:	46bb      	mov	fp, r7
 8007dea:	46b2      	mov	sl, r6
 8007dec:	46a9      	mov	r9, r5
 8007dee:	46a0      	mov	r8, r4
 8007df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8007df2:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007df4:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8007df6:	2e02      	cmp	r6, #2
 8007df8:	d05c      	beq.n	8007eb4 <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007dfa:	2780      	movs	r7, #128	; 0x80
 8007dfc:	063f      	lsls	r7, r7, #24
 8007dfe:	42bd      	cmp	r5, r7
 8007e00:	d051      	beq.n	8007ea6 <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007e02:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8007e04:	270f      	movs	r7, #15
 8007e06:	46aa      	mov	sl, r5
 8007e08:	251f      	movs	r5, #31
 8007e0a:	46ac      	mov	ip, r5
 8007e0c:	4035      	ands	r5, r6
 8007e0e:	40af      	lsls	r7, r5
 8007e10:	46a9      	mov	r9, r5
 8007e12:	43fd      	mvns	r5, r7
 8007e14:	9500      	str	r5, [sp, #0]
 8007e16:	4655      	mov	r5, sl
 8007e18:	43bd      	bics	r5, r7
 8007e1a:	46a8      	mov	r8, r5
 8007e1c:	680d      	ldr	r5, [r1, #0]
 8007e1e:	9701      	str	r7, [sp, #4]
 8007e20:	036f      	lsls	r7, r5, #13
 8007e22:	d16c      	bne.n	8007efe <HAL_ADC_ConfigChannel+0x156>
 8007e24:	4660      	mov	r0, ip
 8007e26:	0eaa      	lsrs	r2, r5, #26
 8007e28:	4010      	ands	r0, r2
 8007e2a:	0002      	movs	r2, r0
 8007e2c:	4648      	mov	r0, r9
 8007e2e:	4082      	lsls	r2, r0
 8007e30:	4640      	mov	r0, r8
 8007e32:	4310      	orrs	r0, r2
 8007e34:	4680      	mov	r8, r0
 8007e36:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007e38:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007e3a:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007e3c:	69e2      	ldr	r2, [r4, #28]
 8007e3e:	3601      	adds	r6, #1
 8007e40:	4296      	cmp	r6, r2
 8007e42:	d808      	bhi.n	8007e56 <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 8007e44:	464e      	mov	r6, r9
 8007e46:	00aa      	lsls	r2, r5, #2
 8007e48:	0f12      	lsrs	r2, r2, #28
 8007e4a:	40b2      	lsls	r2, r6
 8007e4c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e4e:	9e00      	ldr	r6, [sp, #0]
 8007e50:	4030      	ands	r0, r6
 8007e52:	4302      	orrs	r2, r0
 8007e54:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8007e56:	0228      	lsls	r0, r5, #8
 8007e58:	688a      	ldr	r2, [r1, #8]
 8007e5a:	0001      	movs	r1, r0
 8007e5c:	695e      	ldr	r6, [r3, #20]
 8007e5e:	4002      	ands	r2, r0
 8007e60:	4866      	ldr	r0, [pc, #408]	; (8007ffc <HAL_ADC_ConfigChannel+0x254>)
 8007e62:	438e      	bics	r6, r1
 8007e64:	4002      	ands	r2, r0
 8007e66:	4332      	orrs	r2, r6
 8007e68:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	db01      	blt.n	8007e72 <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e6e:	2000      	movs	r0, #0
}
 8007e70:	e7b5      	b.n	8007dde <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007e72:	21e0      	movs	r1, #224	; 0xe0
 8007e74:	4862      	ldr	r0, [pc, #392]	; (8008000 <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007e76:	4a63      	ldr	r2, [pc, #396]	; (8008004 <HAL_ADC_ConfigChannel+0x25c>)
 8007e78:	6803      	ldr	r3, [r0, #0]
 8007e7a:	0449      	lsls	r1, r1, #17
 8007e7c:	4019      	ands	r1, r3
 8007e7e:	4295      	cmp	r5, r2
 8007e80:	d051      	beq.n	8007f26 <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007e82:	4a61      	ldr	r2, [pc, #388]	; (8008008 <HAL_ADC_ConfigChannel+0x260>)
 8007e84:	4295      	cmp	r5, r2
 8007e86:	d045      	beq.n	8007f14 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007e88:	4a60      	ldr	r2, [pc, #384]	; (800800c <HAL_ADC_ConfigChannel+0x264>)
 8007e8a:	4295      	cmp	r5, r2
 8007e8c:	d1ef      	bne.n	8007e6e <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007e8e:	2280      	movs	r2, #128	; 0x80
 8007e90:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007e92:	4213      	tst	r3, r2
 8007e94:	d1eb      	bne.n	8007e6e <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007e96:	6803      	ldr	r3, [r0, #0]
 8007e98:	4d5d      	ldr	r5, [pc, #372]	; (8008010 <HAL_ADC_ConfigChannel+0x268>)
 8007e9a:	402b      	ands	r3, r5
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ea2:	2000      	movs	r0, #0
}
 8007ea4:	e79b      	b.n	8007dde <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007ea6:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007ea8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007eaa:	036a      	lsls	r2, r5, #13
 8007eac:	0b52      	lsrs	r2, r2, #13
 8007eae:	4302      	orrs	r2, r0
 8007eb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007eb2:	e7d0      	b.n	8007e56 <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007eb4:	2280      	movs	r2, #128	; 0x80
 8007eb6:	0612      	lsls	r2, r2, #24
 8007eb8:	4295      	cmp	r5, r2
 8007eba:	d019      	beq.n	8007ef0 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007ebc:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007ebe:	2a00      	cmp	r2, #0
 8007ec0:	dad5      	bge.n	8007e6e <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007ec2:	494f      	ldr	r1, [pc, #316]	; (8008000 <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007ec4:	484f      	ldr	r0, [pc, #316]	; (8008004 <HAL_ADC_ConfigChannel+0x25c>)
 8007ec6:	680b      	ldr	r3, [r1, #0]
 8007ec8:	4282      	cmp	r2, r0
 8007eca:	d029      	beq.n	8007f20 <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8007ecc:	484e      	ldr	r0, [pc, #312]	; (8008008 <HAL_ADC_ConfigChannel+0x260>)
 8007ece:	4282      	cmp	r2, r0
 8007ed0:	d04c      	beq.n	8007f6c <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007ed2:	484e      	ldr	r0, [pc, #312]	; (800800c <HAL_ADC_ConfigChannel+0x264>)
 8007ed4:	4282      	cmp	r2, r0
 8007ed6:	d1ca      	bne.n	8007e6e <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ed8:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007eda:	680a      	ldr	r2, [r1, #0]
 8007edc:	0440      	lsls	r0, r0, #17
 8007ede:	4003      	ands	r3, r0
 8007ee0:	484b      	ldr	r0, [pc, #300]	; (8008010 <HAL_ADC_ConfigChannel+0x268>)
 8007ee2:	4002      	ands	r2, r0
 8007ee4:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	600b      	str	r3, [r1, #0]
 8007eea:	e778      	b.n	8007dde <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8007eec:	2002      	movs	r0, #2
 8007eee:	e779      	b.n	8007de4 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8007ef0:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007ef2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007ef4:	0350      	lsls	r0, r2, #13
 8007ef6:	0b40      	lsrs	r0, r0, #13
 8007ef8:	4381      	bics	r1, r0
 8007efa:	6299      	str	r1, [r3, #40]	; 0x28
}
 8007efc:	e7df      	b.n	8007ebe <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007efe:	4228      	tst	r0, r5
 8007f00:	d199      	bne.n	8007e36 <HAL_ADC_ConfigChannel+0x8e>
 8007f02:	2702      	movs	r7, #2
 8007f04:	422f      	tst	r7, r5
 8007f06:	d02d      	beq.n	8007f64 <HAL_ADC_ConfigChannel+0x1bc>
 8007f08:	464a      	mov	r2, r9
 8007f0a:	4090      	lsls	r0, r2
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	4302      	orrs	r2, r0
 8007f10:	4690      	mov	r8, r2
 8007f12:	e790      	b.n	8007e36 <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007f14:	2280      	movs	r2, #128	; 0x80
 8007f16:	0452      	lsls	r2, r2, #17
 8007f18:	4213      	tst	r3, r2
 8007f1a:	d0bc      	beq.n	8007e96 <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e75e      	b.n	8007dde <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007f20:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007f22:	680a      	ldr	r2, [r1, #0]
 8007f24:	e7da      	b.n	8007edc <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007f26:	2280      	movs	r2, #128	; 0x80
 8007f28:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007f2a:	4213      	tst	r3, r2
 8007f2c:	d19f      	bne.n	8007e6e <HAL_ADC_ConfigChannel+0xc6>
 8007f2e:	6803      	ldr	r3, [r0, #0]
 8007f30:	4d37      	ldr	r5, [pc, #220]	; (8008010 <HAL_ADC_ConfigChannel+0x268>)
 8007f32:	402b      	ands	r3, r5
 8007f34:	430b      	orrs	r3, r1
 8007f36:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007f38:	4b36      	ldr	r3, [pc, #216]	; (8008014 <HAL_ADC_ConfigChannel+0x26c>)
 8007f3a:	6002      	str	r2, [r0, #0]
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	4936      	ldr	r1, [pc, #216]	; (8008018 <HAL_ADC_ConfigChannel+0x270>)
 8007f40:	f7f8 f8fe 	bl	8000140 <__udivsi3>
 8007f44:	3001      	adds	r0, #1
 8007f46:	0043      	lsls	r3, r0, #1
 8007f48:	181b      	adds	r3, r3, r0
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d08c      	beq.n	8007e6e <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1f9      	bne.n	8007f54 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f60:	2000      	movs	r0, #0
 8007f62:	e73c      	b.n	8007dde <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007f64:	422a      	tst	r2, r5
 8007f66:	d005      	beq.n	8007f74 <HAL_ADC_ConfigChannel+0x1cc>
 8007f68:	003a      	movs	r2, r7
 8007f6a:	e75f      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007f6c:	20c0      	movs	r0, #192	; 0xc0
 8007f6e:	680a      	ldr	r2, [r1, #0]
 8007f70:	0400      	lsls	r0, r0, #16
 8007f72:	e7b4      	b.n	8007ede <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007f74:	072a      	lsls	r2, r5, #28
 8007f76:	d501      	bpl.n	8007f7c <HAL_ADC_ConfigChannel+0x1d4>
 8007f78:	2203      	movs	r2, #3
 8007f7a:	e757      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007f7c:	06ea      	lsls	r2, r5, #27
 8007f7e:	d501      	bpl.n	8007f84 <HAL_ADC_ConfigChannel+0x1dc>
 8007f80:	2204      	movs	r2, #4
 8007f82:	e753      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007f84:	06aa      	lsls	r2, r5, #26
 8007f86:	d501      	bpl.n	8007f8c <HAL_ADC_ConfigChannel+0x1e4>
 8007f88:	2205      	movs	r2, #5
 8007f8a:	e74f      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007f8c:	066a      	lsls	r2, r5, #25
 8007f8e:	d501      	bpl.n	8007f94 <HAL_ADC_ConfigChannel+0x1ec>
 8007f90:	2206      	movs	r2, #6
 8007f92:	e74b      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007f94:	062a      	lsls	r2, r5, #24
 8007f96:	d501      	bpl.n	8007f9c <HAL_ADC_ConfigChannel+0x1f4>
 8007f98:	2207      	movs	r2, #7
 8007f9a:	e747      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007f9c:	05ea      	lsls	r2, r5, #23
 8007f9e:	d501      	bpl.n	8007fa4 <HAL_ADC_ConfigChannel+0x1fc>
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	e743      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007fa4:	05aa      	lsls	r2, r5, #22
 8007fa6:	d501      	bpl.n	8007fac <HAL_ADC_ConfigChannel+0x204>
 8007fa8:	2209      	movs	r2, #9
 8007faa:	e73f      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007fac:	056a      	lsls	r2, r5, #21
 8007fae:	d501      	bpl.n	8007fb4 <HAL_ADC_ConfigChannel+0x20c>
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	e73b      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007fb4:	052a      	lsls	r2, r5, #20
 8007fb6:	d501      	bpl.n	8007fbc <HAL_ADC_ConfigChannel+0x214>
 8007fb8:	220b      	movs	r2, #11
 8007fba:	e737      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007fbc:	04ea      	lsls	r2, r5, #19
 8007fbe:	d501      	bpl.n	8007fc4 <HAL_ADC_ConfigChannel+0x21c>
 8007fc0:	220c      	movs	r2, #12
 8007fc2:	e733      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007fc4:	04aa      	lsls	r2, r5, #18
 8007fc6:	d501      	bpl.n	8007fcc <HAL_ADC_ConfigChannel+0x224>
 8007fc8:	220d      	movs	r2, #13
 8007fca:	e72f      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007fcc:	046a      	lsls	r2, r5, #17
 8007fce:	d501      	bpl.n	8007fd4 <HAL_ADC_ConfigChannel+0x22c>
 8007fd0:	220e      	movs	r2, #14
 8007fd2:	e72b      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007fd4:	042a      	lsls	r2, r5, #16
 8007fd6:	d504      	bpl.n	8007fe2 <HAL_ADC_ConfigChannel+0x23a>
 8007fd8:	4652      	mov	r2, sl
 8007fda:	9801      	ldr	r0, [sp, #4]
 8007fdc:	4302      	orrs	r2, r0
 8007fde:	4690      	mov	r8, r2
 8007fe0:	e729      	b.n	8007e36 <HAL_ADC_ConfigChannel+0x8e>
 8007fe2:	03ea      	lsls	r2, r5, #15
 8007fe4:	d501      	bpl.n	8007fea <HAL_ADC_ConfigChannel+0x242>
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	e720      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007fea:	03aa      	lsls	r2, r5, #14
 8007fec:	d501      	bpl.n	8007ff2 <HAL_ADC_ConfigChannel+0x24a>
 8007fee:	2211      	movs	r2, #17
 8007ff0:	e71c      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007ff2:	036a      	lsls	r2, r5, #13
 8007ff4:	d400      	bmi.n	8007ff8 <HAL_ADC_ConfigChannel+0x250>
 8007ff6:	e71e      	b.n	8007e36 <HAL_ADC_ConfigChannel+0x8e>
 8007ff8:	2212      	movs	r2, #18
 8007ffa:	e717      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x84>
 8007ffc:	07ffff00 	.word	0x07ffff00
 8008000:	40012708 	.word	0x40012708
 8008004:	b0001000 	.word	0xb0001000
 8008008:	b8004000 	.word	0xb8004000
 800800c:	b4002000 	.word	0xb4002000
 8008010:	fe3fffff 	.word	0xfe3fffff
 8008014:	2000011c 	.word	0x2000011c
 8008018:	00030d40 	.word	0x00030d40

0800801c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 800801c:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800801e:	2201      	movs	r2, #1
{
 8008020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008022:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8008024:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008026:	6803      	ldr	r3, [r0, #0]
{
 8008028:	0004      	movs	r4, r0
 800802a:	6899      	ldr	r1, [r3, #8]
 800802c:	420a      	tst	r2, r1
 800802e:	d11f      	bne.n	8008070 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008030:	6898      	ldr	r0, [r3, #8]
 8008032:	4928      	ldr	r1, [pc, #160]	; (80080d4 <ADC_Enable+0xb8>)
 8008034:	4208      	tst	r0, r1
 8008036:	d11e      	bne.n	8008076 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8008038:	6899      	ldr	r1, [r3, #8]
 800803a:	4827      	ldr	r0, [pc, #156]	; (80080d8 <ADC_Enable+0xbc>)
 800803c:	4001      	ands	r1, r0
 800803e:	430a      	orrs	r2, r1
 8008040:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008042:	4b26      	ldr	r3, [pc, #152]	; (80080dc <ADC_Enable+0xc0>)
 8008044:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	d50f      	bpl.n	800806a <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800804a:	4b25      	ldr	r3, [pc, #148]	; (80080e0 <ADC_Enable+0xc4>)
 800804c:	4925      	ldr	r1, [pc, #148]	; (80080e4 <ADC_Enable+0xc8>)
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	f7f8 f876 	bl	8000140 <__udivsi3>
 8008054:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8008056:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8008058:	9b01      	ldr	r3, [sp, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <ADC_Enable+0x4e>
        wait_loop_index--;
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	3b01      	subs	r3, #1
 8008062:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8008064:	9b01      	ldr	r3, [sp, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f9      	bne.n	800805e <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800806a:	7e63      	ldrb	r3, [r4, #25]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10b      	bne.n	8008088 <ADC_Enable+0x6c>
  return HAL_OK;
 8008070:	2000      	movs	r0, #0
}
 8008072:	b003      	add	sp, #12
 8008074:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008076:	2110      	movs	r1, #16
 8008078:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800807a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800807c:	430b      	orrs	r3, r1
 800807e:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008080:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008082:	4313      	orrs	r3, r2
 8008084:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8008086:	e7f4      	b.n	8008072 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 8008088:	f7ff fcee 	bl	8007a68 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800808c:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800808e:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	07d2      	lsls	r2, r2, #31
 8008094:	d4ec      	bmi.n	8008070 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008096:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8008098:	4f0f      	ldr	r7, [pc, #60]	; (80080d8 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	4215      	tst	r5, r2
 800809e:	d103      	bne.n	80080a8 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	403a      	ands	r2, r7
 80080a4:	432a      	orrs	r2, r5
 80080a6:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80080a8:	f7ff fcde 	bl	8007a68 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80080ac:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80080ae:	1b80      	subs	r0, r0, r6
 80080b0:	2802      	cmp	r0, #2
 80080b2:	d902      	bls.n	80080ba <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4215      	tst	r5, r2
 80080b8:	d003      	beq.n	80080c2 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	4215      	tst	r5, r2
 80080be:	d0ec      	beq.n	800809a <ADC_Enable+0x7e>
 80080c0:	e7d6      	b.n	8008070 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080c2:	2210      	movs	r2, #16
 80080c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 80080c6:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080c8:	4313      	orrs	r3, r2
 80080ca:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80080ce:	432b      	orrs	r3, r5
 80080d0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80080d2:	e7ce      	b.n	8008072 <ADC_Enable+0x56>
 80080d4:	80000017 	.word	0x80000017
 80080d8:	7fffffe8 	.word	0x7fffffe8
 80080dc:	40012708 	.word	0x40012708
 80080e0:	2000011c 	.word	0x2000011c
 80080e4:	00030d40 	.word	0x00030d40

080080e8 <HAL_ADC_Start_DMA>:
{
 80080e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ea:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80080ec:	6805      	ldr	r5, [r0, #0]
{
 80080ee:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80080f0:	68ae      	ldr	r6, [r5, #8]
 80080f2:	4688      	mov	r8, r1
 80080f4:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 80080f6:	2002      	movs	r0, #2
{
 80080f8:	b500      	push	{lr}
 80080fa:	0776      	lsls	r6, r6, #29
 80080fc:	d414      	bmi.n	8008128 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 80080fe:	2254      	movs	r2, #84	; 0x54
 8008100:	5ca3      	ldrb	r3, [r4, r2]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d010      	beq.n	8008128 <HAL_ADC_Start_DMA+0x40>
 8008106:	2301      	movs	r3, #1
 8008108:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800810a:	68ea      	ldr	r2, [r5, #12]
 800810c:	4213      	tst	r3, r2
 800810e:	d106      	bne.n	800811e <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008110:	68aa      	ldr	r2, [r5, #8]
 8008112:	4213      	tst	r3, r2
 8008114:	d131      	bne.n	800817a <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8008116:	2201      	movs	r2, #1
 8008118:	68eb      	ldr	r3, [r5, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 800811e:	0020      	movs	r0, r4
 8008120:	f7ff ff7c 	bl	800801c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8008124:	2800      	cmp	r0, #0
 8008126:	d002      	beq.n	800812e <HAL_ADC_Start_DMA+0x46>
}
 8008128:	bc80      	pop	{r7}
 800812a:	46b8      	mov	r8, r7
 800812c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800812e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008130:	4b15      	ldr	r3, [pc, #84]	; (8008188 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008132:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8008134:	401a      	ands	r2, r3
 8008136:	2380      	movs	r3, #128	; 0x80
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	4313      	orrs	r3, r2
 800813c:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8008140:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008142:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008144:	4b12      	ldr	r3, [pc, #72]	; (8008190 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008146:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008148:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800814a:	4b12      	ldr	r3, [pc, #72]	; (8008194 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800814c:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800814e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008150:	231c      	movs	r3, #28
 8008152:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 8008154:	3338      	adds	r3, #56	; 0x38
 8008156:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008158:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800815a:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800815c:	4313      	orrs	r3, r2
 800815e:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008160:	4642      	mov	r2, r8
 8008162:	003b      	movs	r3, r7
 8008164:	3140      	adds	r1, #64	; 0x40
 8008166:	f000 f8ef 	bl	8008348 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800816a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800816c:	490a      	ldr	r1, [pc, #40]	; (8008198 <HAL_ADC_Start_DMA+0xb0>)
 800816e:	6893      	ldr	r3, [r2, #8]
 8008170:	400b      	ands	r3, r1
 8008172:	2104      	movs	r1, #4
 8008174:	430b      	orrs	r3, r1
 8008176:	6093      	str	r3, [r2, #8]
}
 8008178:	e7d6      	b.n	8008128 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 800817a:	68ab      	ldr	r3, [r5, #8]
 800817c:	4a06      	ldr	r2, [pc, #24]	; (8008198 <HAL_ADC_Start_DMA+0xb0>)
 800817e:	4013      	ands	r3, r2
 8008180:	4303      	orrs	r3, r0
 8008182:	60ab      	str	r3, [r5, #8]
}
 8008184:	e7c7      	b.n	8008116 <HAL_ADC_Start_DMA+0x2e>
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	fffff0fe 	.word	0xfffff0fe
 800818c:	08007d29 	.word	0x08007d29
 8008190:	08007cfd 	.word	0x08007cfd
 8008194:	08007d0d 	.word	0x08007d0d
 8008198:	7fffffe8 	.word	0x7fffffe8

0800819c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800819c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800819e:	2800      	cmp	r0, #0
 80081a0:	db14      	blt.n	80081cc <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081a2:	4b15      	ldr	r3, [pc, #84]	; (80081f8 <HAL_NVIC_SetPriority+0x5c>)
 80081a4:	2203      	movs	r2, #3
 80081a6:	469c      	mov	ip, r3
 80081a8:	23ff      	movs	r3, #255	; 0xff
 80081aa:	0884      	lsrs	r4, r0, #2
 80081ac:	4002      	ands	r2, r0
 80081ae:	0018      	movs	r0, r3
 80081b0:	26c0      	movs	r6, #192	; 0xc0
 80081b2:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80081b4:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081b6:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80081b8:	400b      	ands	r3, r1
 80081ba:	4093      	lsls	r3, r2
 80081bc:	00a4      	lsls	r4, r4, #2
 80081be:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081c0:	00b6      	lsls	r6, r6, #2
 80081c2:	59a5      	ldr	r5, [r4, r6]
 80081c4:	4385      	bics	r5, r0
 80081c6:	432b      	orrs	r3, r5
 80081c8:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081cc:	4a0b      	ldr	r2, [pc, #44]	; (80081fc <HAL_NVIC_SetPriority+0x60>)
 80081ce:	230f      	movs	r3, #15
 80081d0:	4694      	mov	ip, r2
 80081d2:	2203      	movs	r2, #3
 80081d4:	4003      	ands	r3, r0
 80081d6:	4010      	ands	r0, r2
 80081d8:	32fc      	adds	r2, #252	; 0xfc
 80081da:	0015      	movs	r5, r2
 80081dc:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80081de:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081e0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80081e2:	400a      	ands	r2, r1
 80081e4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081e6:	3b08      	subs	r3, #8
 80081e8:	089b      	lsrs	r3, r3, #2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4463      	add	r3, ip
 80081ee:	69dc      	ldr	r4, [r3, #28]
 80081f0:	43ac      	bics	r4, r5
 80081f2:	4322      	orrs	r2, r4
 80081f4:	61da      	str	r2, [r3, #28]
 80081f6:	e7e8      	b.n	80081ca <HAL_NVIC_SetPriority+0x2e>
 80081f8:	e000e100 	.word	0xe000e100
 80081fc:	e000ed00 	.word	0xe000ed00

08008200 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008200:	2800      	cmp	r0, #0
 8008202:	db05      	blt.n	8008210 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008204:	221f      	movs	r2, #31
 8008206:	2301      	movs	r3, #1
 8008208:	4002      	ands	r2, r0
 800820a:	4093      	lsls	r3, r2
 800820c:	4a01      	ldr	r2, [pc, #4]	; (8008214 <HAL_NVIC_EnableIRQ+0x14>)
 800820e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008210:	4770      	bx	lr
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	e000e100 	.word	0xe000e100

08008218 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008218:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800821a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800821c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800821e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008220:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8008222:	2c00      	cmp	r4, #0
 8008224:	d002      	beq.n	800822c <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008226:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8008228:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800822a:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800822c:	241c      	movs	r4, #28
 800822e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008230:	4e08      	ldr	r6, [pc, #32]	; (8008254 <DMA_SetConfig+0x3c>)
 8008232:	4025      	ands	r5, r4
 8008234:	3c1b      	subs	r4, #27
 8008236:	40ac      	lsls	r4, r5
 8008238:	6877      	ldr	r7, [r6, #4]
 800823a:	433c      	orrs	r4, r7
 800823c:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800823e:	6804      	ldr	r4, [r0, #0]
 8008240:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008242:	6883      	ldr	r3, [r0, #8]
 8008244:	2b10      	cmp	r3, #16
 8008246:	d002      	beq.n	800824e <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8008248:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800824a:	60e2      	str	r2, [r4, #12]
  }
}
 800824c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 800824e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008250:	60e1      	str	r1, [r4, #12]
 8008252:	e7fb      	b.n	800824c <DMA_SetConfig+0x34>
 8008254:	40020000 	.word	0x40020000

08008258 <HAL_DMA_Init>:
{
 8008258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800825a:	46c6      	mov	lr, r8
 800825c:	0004      	movs	r4, r0
 800825e:	b500      	push	{lr}
  if (hdma == NULL)
 8008260:	2800      	cmp	r0, #0
 8008262:	d062      	beq.n	800832a <HAL_DMA_Init+0xd2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008264:	6805      	ldr	r5, [r0, #0]
 8008266:	4b32      	ldr	r3, [pc, #200]	; (8008330 <HAL_DMA_Init+0xd8>)
 8008268:	2114      	movs	r1, #20
 800826a:	18e8      	adds	r0, r5, r3
 800826c:	f7f7 ff68 	bl	8000140 <__udivsi3>
 8008270:	0083      	lsls	r3, r0, #2
 8008272:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8008274:	2202      	movs	r2, #2
 8008276:	2325      	movs	r3, #37	; 0x25
 8008278:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	4a2d      	ldr	r2, [pc, #180]	; (8008334 <HAL_DMA_Init+0xdc>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800827e:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008280:	4013      	ands	r3, r2
 8008282:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8008284:	68e3      	ldr	r3, [r4, #12]
 8008286:	6921      	ldr	r1, [r4, #16]
 8008288:	4333      	orrs	r3, r6
 800828a:	430b      	orrs	r3, r1
 800828c:	6961      	ldr	r1, [r4, #20]
 800828e:	682a      	ldr	r2, [r5, #0]
 8008290:	430b      	orrs	r3, r1
 8008292:	69a1      	ldr	r1, [r4, #24]
 8008294:	430b      	orrs	r3, r1
 8008296:	69e1      	ldr	r1, [r4, #28]
 8008298:	430b      	orrs	r3, r1
 800829a:	6a21      	ldr	r1, [r4, #32]
 800829c:	430b      	orrs	r3, r1
 800829e:	4313      	orrs	r3, r2
 80082a0:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80082a2:	4b25      	ldr	r3, [pc, #148]	; (8008338 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80082a4:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80082a6:	469c      	mov	ip, r3
 80082a8:	4460      	add	r0, ip
 80082aa:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80082ac:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082ae:	4b23      	ldr	r3, [pc, #140]	; (800833c <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80082b0:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082b2:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80082b4:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80082b6:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082b8:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80082ba:	f7f7 ff41 	bl	8000140 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80082be:	231f      	movs	r3, #31
 80082c0:	2201      	movs	r2, #1
 80082c2:	4003      	ands	r3, r0
 80082c4:	0010      	movs	r0, r2
 80082c6:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082c8:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80082ca:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082cc:	01db      	lsls	r3, r3, #7
 80082ce:	429e      	cmp	r6, r3
 80082d0:	d021      	beq.n	8008316 <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082d2:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082d4:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082d6:	6861      	ldr	r1, [r4, #4]
 80082d8:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80082da:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082dc:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082de:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80082e0:	2903      	cmp	r1, #3
 80082e2:	d81d      	bhi.n	8008320 <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80082e4:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082e6:	4916      	ldr	r1, [pc, #88]	; (8008340 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80082e8:	4d16      	ldr	r5, [pc, #88]	; (8008344 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082ea:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4003      	ands	r3, r0
 80082f0:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80082f2:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082f4:	0089      	lsls	r1, r1, #2
 80082f6:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80082f8:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80082fa:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80082fc:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082fe:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008300:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8008302:	2225      	movs	r2, #37	; 0x25
 8008304:	2101      	movs	r1, #1
  return HAL_OK;
 8008306:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008308:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800830a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800830c:	3a01      	subs	r2, #1
 800830e:	54a3      	strb	r3, [r4, r2]
}
 8008310:	bc80      	pop	{r7}
 8008312:	46b8      	mov	r8, r7
 8008314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008316:	2300      	movs	r3, #0
 8008318:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800831a:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800831c:	4643      	mov	r3, r8
 800831e:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8008324:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008326:	65a3      	str	r3, [r4, #88]	; 0x58
 8008328:	e7ea      	b.n	8008300 <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 800832a:	2001      	movs	r0, #1
 800832c:	e7f0      	b.n	8008310 <HAL_DMA_Init+0xb8>
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	bffdfff8 	.word	0xbffdfff8
 8008334:	ffff800f 	.word	0xffff800f
 8008338:	10008200 	.word	0x10008200
 800833c:	40020880 	.word	0x40020880
 8008340:	1000823f 	.word	0x1000823f
 8008344:	40020940 	.word	0x40020940

08008348 <HAL_DMA_Start_IT>:
{
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800834c:	2024      	movs	r0, #36	; 0x24
 800834e:	5c25      	ldrb	r5, [r4, r0]
 8008350:	2d01      	cmp	r5, #1
 8008352:	d035      	beq.n	80083c0 <HAL_DMA_Start_IT+0x78>
 8008354:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8008356:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 8008358:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 800835a:	5da5      	ldrb	r5, [r4, r6]
 800835c:	b2ef      	uxtb	r7, r5
 800835e:	2d01      	cmp	r5, #1
 8008360:	d005      	beq.n	800836e <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008362:	2380      	movs	r3, #128	; 0x80
 8008364:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8008366:	2300      	movs	r3, #0
 8008368:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 800836a:	2001      	movs	r0, #1
}
 800836c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800836e:	3822      	subs	r0, #34	; 0x22
 8008370:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008372:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008374:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008376:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8008378:	6828      	ldr	r0, [r5, #0]
 800837a:	43b8      	bics	r0, r7
 800837c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800837e:	0020      	movs	r0, r4
 8008380:	f7ff ff4a 	bl	8008218 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8008384:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008386:	2b00      	cmp	r3, #0
 8008388:	d01c      	beq.n	80083c4 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800838a:	220e      	movs	r2, #14
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	4313      	orrs	r3, r2
 8008390:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008392:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008394:	6813      	ldr	r3, [r2, #0]
 8008396:	03db      	lsls	r3, r3, #15
 8008398:	d504      	bpl.n	80083a4 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800839a:	2380      	movs	r3, #128	; 0x80
 800839c:	6811      	ldr	r1, [r2, #0]
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	430b      	orrs	r3, r1
 80083a2:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80083a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d004      	beq.n	80083b4 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80083aa:	2280      	movs	r2, #128	; 0x80
 80083ac:	6819      	ldr	r1, [r3, #0]
 80083ae:	0052      	lsls	r2, r2, #1
 80083b0:	430a      	orrs	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80083b4:	2201      	movs	r2, #1
 80083b6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083b8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80083ba:	4313      	orrs	r3, r2
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	e7d5      	b.n	800836c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80083c0:	2002      	movs	r0, #2
 80083c2:	e7d3      	b.n	800836c <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083c4:	2204      	movs	r2, #4
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	4393      	bics	r3, r2
 80083ca:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	3206      	adds	r2, #6
 80083d0:	4313      	orrs	r3, r2
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	e7dd      	b.n	8008392 <HAL_DMA_Start_IT+0x4a>
 80083d6:	46c0      	nop			; (mov r8, r8)

080083d8 <HAL_DMA_Abort>:
{
 80083d8:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 80083da:	2800      	cmp	r0, #0
 80083dc:	d034      	beq.n	8008448 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80083de:	2325      	movs	r3, #37	; 0x25
 80083e0:	5cc3      	ldrb	r3, [r0, r3]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d129      	bne.n	800843a <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083e6:	210e      	movs	r1, #14
 80083e8:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083ea:	4c18      	ldr	r4, [pc, #96]	; (800844c <HAL_DMA_Abort+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083ec:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80083ee:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083f0:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083f2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083f4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083f6:	680b      	ldr	r3, [r1, #0]
 80083f8:	4023      	ands	r3, r4
 80083fa:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80083fc:	2301      	movs	r3, #1
 80083fe:	6811      	ldr	r1, [r2, #0]
 8008400:	4399      	bics	r1, r3
 8008402:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8008404:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008406:	4912      	ldr	r1, [pc, #72]	; (8008450 <HAL_DMA_Abort+0x78>)
 8008408:	4032      	ands	r2, r6
 800840a:	4093      	lsls	r3, r2
 800840c:	684d      	ldr	r5, [r1, #4]
 800840e:	432b      	orrs	r3, r5
 8008410:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008412:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008414:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008416:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8008418:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4022      	ands	r2, r4
 8008422:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008424:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008426:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008428:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800842a:	2325      	movs	r3, #37	; 0x25
 800842c:	2201      	movs	r2, #1
 800842e:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8008430:	2200      	movs	r2, #0
 8008432:	3b01      	subs	r3, #1
 8008434:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8008436:	2000      	movs	r0, #0
}
 8008438:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800843a:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 800843c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800843e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8008440:	3320      	adds	r3, #32
 8008442:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8008444:	2001      	movs	r0, #1
 8008446:	e7f7      	b.n	8008438 <HAL_DMA_Abort+0x60>
    return HAL_ERROR;
 8008448:	2001      	movs	r0, #1
 800844a:	e7f5      	b.n	8008438 <HAL_DMA_Abort+0x60>
 800844c:	fffffeff 	.word	0xfffffeff
 8008450:	40020000 	.word	0x40020000

08008454 <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008454:	2325      	movs	r3, #37	; 0x25
{
 8008456:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008458:	5cc3      	ldrb	r3, [r0, r3]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d003      	beq.n	8008466 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800845e:	2304      	movs	r3, #4
 8008460:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8008462:	2001      	movs	r0, #1
}
 8008464:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008466:	210e      	movs	r1, #14
 8008468:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800846a:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800846c:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800846e:	4c16      	ldr	r4, [pc, #88]	; (80084c8 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008470:	438b      	bics	r3, r1
 8008472:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008474:	2301      	movs	r3, #1
 8008476:	6811      	ldr	r1, [r2, #0]
 8008478:	4399      	bics	r1, r3
 800847a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800847c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800847e:	680a      	ldr	r2, [r1, #0]
 8008480:	4022      	ands	r2, r4
 8008482:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8008484:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008486:	4911      	ldr	r1, [pc, #68]	; (80084cc <HAL_DMA_Abort_IT+0x78>)
 8008488:	4032      	ands	r2, r6
 800848a:	4093      	lsls	r3, r2
 800848c:	684d      	ldr	r5, [r1, #4]
 800848e:	432b      	orrs	r3, r5
 8008490:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008492:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008494:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008496:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8008498:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800849a:	2b00      	cmp	r3, #0
 800849c:	d005      	beq.n	80084aa <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4022      	ands	r2, r4
 80084a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80084a6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80084a8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80084aa:	2325      	movs	r3, #37	; 0x25
 80084ac:	2201      	movs	r2, #1
 80084ae:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80084b0:	2200      	movs	r2, #0
 80084b2:	3b01      	subs	r3, #1
 80084b4:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80084b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80084bc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80084be:	2000      	movs	r0, #0
 80084c0:	e7d0      	b.n	8008464 <HAL_DMA_Abort_IT+0x10>
 80084c2:	2000      	movs	r0, #0
 80084c4:	e7ce      	b.n	8008464 <HAL_DMA_Abort_IT+0x10>
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	fffffeff 	.word	0xfffffeff
 80084cc:	40020000 	.word	0x40020000

080084d0 <HAL_DMA_IRQHandler>:
{
 80084d0:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80084d2:	211c      	movs	r1, #28
 80084d4:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 80084d6:	4b2b      	ldr	r3, [pc, #172]	; (8008584 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 80084d8:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 80084da:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80084dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80084de:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80084e0:	400b      	ands	r3, r1
 80084e2:	0021      	movs	r1, r4
 80084e4:	4099      	lsls	r1, r3
 80084e6:	420a      	tst	r2, r1
 80084e8:	d010      	beq.n	800850c <HAL_DMA_IRQHandler+0x3c>
 80084ea:	422c      	tst	r4, r5
 80084ec:	d00e      	beq.n	800850c <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084ee:	6833      	ldr	r3, [r6, #0]
 80084f0:	069b      	lsls	r3, r3, #26
 80084f2:	d402      	bmi.n	80084fa <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084f4:	6833      	ldr	r3, [r6, #0]
 80084f6:	43a3      	bics	r3, r4
 80084f8:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80084fa:	4b22      	ldr	r3, [pc, #136]	; (8008584 <HAL_DMA_IRQHandler+0xb4>)
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	4311      	orrs	r1, r2
 8008500:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8008502:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008504:	2b00      	cmp	r3, #0
 8008506:	d000      	beq.n	800850a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8008508:	4798      	blx	r3
}
 800850a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800850c:	2402      	movs	r4, #2
 800850e:	0021      	movs	r1, r4
 8008510:	4099      	lsls	r1, r3
 8008512:	420a      	tst	r2, r1
 8008514:	d017      	beq.n	8008546 <HAL_DMA_IRQHandler+0x76>
 8008516:	422c      	tst	r4, r5
 8008518:	d015      	beq.n	8008546 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800851a:	6833      	ldr	r3, [r6, #0]
 800851c:	069b      	lsls	r3, r3, #26
 800851e:	d406      	bmi.n	800852e <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008520:	220a      	movs	r2, #10
 8008522:	6833      	ldr	r3, [r6, #0]
 8008524:	4393      	bics	r3, r2
 8008526:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8008528:	2325      	movs	r3, #37	; 0x25
 800852a:	3a09      	subs	r2, #9
 800852c:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800852e:	4b15      	ldr	r3, [pc, #84]	; (8008584 <HAL_DMA_IRQHandler+0xb4>)
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	4311      	orrs	r1, r2
 8008534:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8008536:	2200      	movs	r2, #0
 8008538:	2324      	movs	r3, #36	; 0x24
 800853a:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800853c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0e3      	beq.n	800850a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8008542:	4798      	blx	r3
  return;
 8008544:	e7e1      	b.n	800850a <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008546:	2108      	movs	r1, #8
 8008548:	000c      	movs	r4, r1
 800854a:	409c      	lsls	r4, r3
 800854c:	4222      	tst	r2, r4
 800854e:	d0dc      	beq.n	800850a <HAL_DMA_IRQHandler+0x3a>
 8008550:	4229      	tst	r1, r5
 8008552:	d0da      	beq.n	800850a <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008554:	6832      	ldr	r2, [r6, #0]
 8008556:	3106      	adds	r1, #6
 8008558:	438a      	bics	r2, r1
 800855a:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800855c:	2201      	movs	r2, #1
 800855e:	0015      	movs	r5, r2
 8008560:	409d      	lsls	r5, r3
 8008562:	002b      	movs	r3, r5
 8008564:	4907      	ldr	r1, [pc, #28]	; (8008584 <HAL_DMA_IRQHandler+0xb4>)
 8008566:	684c      	ldr	r4, [r1, #4]
 8008568:	4323      	orrs	r3, r4
 800856a:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800856c:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800856e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8008570:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8008572:	2200      	movs	r2, #0
 8008574:	3b01      	subs	r3, #1
 8008576:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8008578:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0c5      	beq.n	800850a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800857e:	4798      	blx	r3
  return;
 8008580:	e7c3      	b.n	800850a <HAL_DMA_IRQHandler+0x3a>
 8008582:	46c0      	nop			; (mov r8, r8)
 8008584:	40020000 	.word	0x40020000

08008588 <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8008588:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800858a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800858c:	6819      	ldr	r1, [r3, #0]
{
 800858e:	b570      	push	{r4, r5, r6, lr}
 8008590:	0004      	movs	r4, r0
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8008592:	420a      	tst	r2, r1
 8008594:	d00f      	beq.n	80085b6 <HAL_DMAEx_MUX_IRQHandler+0x2e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008596:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8008598:	4d13      	ldr	r5, [pc, #76]	; (80085e8 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 800859a:	6801      	ldr	r1, [r0, #0]
 800859c:	4029      	ands	r1, r5
 800859e:	6001      	str	r1, [r0, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80085a2:	2380      	movs	r3, #128	; 0x80
 80085a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4313      	orrs	r3, r2
 80085aa:	63e3      	str	r3, [r4, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80085ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <HAL_DMAEx_MUX_IRQHandler+0x2e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80085b2:	0020      	movs	r0, r4
 80085b4:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80085b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d013      	beq.n	80085e4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80085bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80085be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80085c0:	6810      	ldr	r0, [r2, #0]
 80085c2:	4201      	tst	r1, r0
 80085c4:	d00e      	beq.n	80085e4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	4d07      	ldr	r5, [pc, #28]	; (80085e8 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 80085ca:	4028      	ands	r0, r5
 80085cc:	6018      	str	r0, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80085ce:	2380      	movs	r3, #128	; 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085d0:	6051      	str	r1, [r2, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80085d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	4313      	orrs	r3, r2
 80085d8:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80085da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80085e0:	0020      	movs	r0, r4
 80085e2:	4798      	blx	r3
      }
    }
  }
}
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	fffffeff 	.word	0xfffffeff

080085ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ee:	46de      	mov	lr, fp
 80085f0:	4657      	mov	r7, sl
 80085f2:	464e      	mov	r6, r9
 80085f4:	4645      	mov	r5, r8
 80085f6:	b5e0      	push	{r5, r6, r7, lr}
 80085f8:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085fa:	6809      	ldr	r1, [r1, #0]
 80085fc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80085fe:	2300      	movs	r3, #0
{
 8008600:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008602:	2900      	cmp	r1, #0
 8008604:	d07a      	beq.n	80086fc <HAL_GPIO_Init+0x110>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008606:	2601      	movs	r6, #1
 8008608:	000c      	movs	r4, r1
 800860a:	409e      	lsls	r6, r3
 800860c:	4034      	ands	r4, r6
 800860e:	46a2      	mov	sl, r4

    if (iocurrent != 0x00u)
 8008610:	4231      	tst	r1, r6
 8008612:	d06d      	beq.n	80086f0 <HAL_GPIO_Init+0x104>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008614:	465c      	mov	r4, fp
 8008616:	2503      	movs	r5, #3
 8008618:	6864      	ldr	r4, [r4, #4]
 800861a:	4025      	ands	r5, r4
 800861c:	46ac      	mov	ip, r5
 800861e:	3d01      	subs	r5, #1
 8008620:	2d01      	cmp	r5, #1
 8008622:	d800      	bhi.n	8008626 <HAL_GPIO_Init+0x3a>
 8008624:	e071      	b.n	800870a <HAL_GPIO_Init+0x11e>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008626:	4665      	mov	r5, ip
 8008628:	2d03      	cmp	r5, #3
 800862a:	d000      	beq.n	800862e <HAL_GPIO_Init+0x42>
 800862c:	e0b4      	b.n	8008798 <HAL_GPIO_Init+0x1ac>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800862e:	4666      	mov	r6, ip
 8008630:	4096      	lsls	r6, r2
 8008632:	43f5      	mvns	r5, r6
 8008634:	9500      	str	r5, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008636:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008638:	9d00      	ldr	r5, [sp, #0]
 800863a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800863c:	432e      	orrs	r6, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800863e:	25c0      	movs	r5, #192	; 0xc0
 8008640:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8008642:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008644:	422c      	tst	r4, r5
 8008646:	d053      	beq.n	80086f0 <HAL_GPIO_Init+0x104>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008648:	4e67      	ldr	r6, [pc, #412]	; (80087e8 <HAL_GPIO_Init+0x1fc>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800864a:	2703      	movs	r7, #3
 800864c:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 800864e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008650:	401f      	ands	r7, r3
 8008652:	00ff      	lsls	r7, r7, #3
 8008654:	00ad      	lsls	r5, r5, #2
 8008656:	4465      	add	r5, ip
 8008658:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 800865a:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800865c:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 800865e:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008660:	4666      	mov	r6, ip
 8008662:	40b7      	lsls	r7, r6
 8008664:	003e      	movs	r6, r7
 8008666:	464f      	mov	r7, r9
 8008668:	43b7      	bics	r7, r6
 800866a:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800866c:	27a0      	movs	r7, #160	; 0xa0
 800866e:	05ff      	lsls	r7, r7, #23
 8008670:	42b8      	cmp	r0, r7
 8008672:	d012      	beq.n	800869a <HAL_GPIO_Init+0xae>
 8008674:	4f5d      	ldr	r7, [pc, #372]	; (80087ec <HAL_GPIO_Init+0x200>)
 8008676:	42b8      	cmp	r0, r7
 8008678:	d100      	bne.n	800867c <HAL_GPIO_Init+0x90>
 800867a:	e0a5      	b.n	80087c8 <HAL_GPIO_Init+0x1dc>
 800867c:	4f5c      	ldr	r7, [pc, #368]	; (80087f0 <HAL_GPIO_Init+0x204>)
 800867e:	42b8      	cmp	r0, r7
 8008680:	d100      	bne.n	8008684 <HAL_GPIO_Init+0x98>
 8008682:	e0a9      	b.n	80087d8 <HAL_GPIO_Init+0x1ec>
 8008684:	4f5b      	ldr	r7, [pc, #364]	; (80087f4 <HAL_GPIO_Init+0x208>)
 8008686:	42b8      	cmp	r0, r7
 8008688:	d100      	bne.n	800868c <HAL_GPIO_Init+0xa0>
 800868a:	e096      	b.n	80087ba <HAL_GPIO_Init+0x1ce>
 800868c:	4666      	mov	r6, ip
 800868e:	2705      	movs	r7, #5
 8008690:	40b7      	lsls	r7, r6
 8008692:	003e      	movs	r6, r7
 8008694:	464f      	mov	r7, r9
 8008696:	4337      	orrs	r7, r6
 8008698:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800869a:	464e      	mov	r6, r9
 800869c:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
 800869e:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80086a0:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 80086a2:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR1;
 80086a4:	4d50      	ldr	r5, [pc, #320]	; (80087e8 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80086a6:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 80086a8:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 80086aa:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80086ac:	423c      	tst	r4, r7
 80086ae:	d000      	beq.n	80086b2 <HAL_GPIO_Init+0xc6>
 80086b0:	e080      	b.n	80087b4 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 80086b2:	4035      	ands	r5, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80086b4:	2780      	movs	r7, #128	; 0x80
        EXTI->RTSR1 = temp;
 80086b6:	4e4c      	ldr	r6, [pc, #304]	; (80087e8 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80086b8:	03bf      	lsls	r7, r7, #14
        EXTI->RTSR1 = temp;
 80086ba:	6035      	str	r5, [r6, #0]
        temp = EXTI->FTSR1;
 80086bc:	6875      	ldr	r5, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80086be:	423c      	tst	r4, r7
 80086c0:	d000      	beq.n	80086c4 <HAL_GPIO_Init+0xd8>
 80086c2:	e074      	b.n	80087ae <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 80086c4:	4646      	mov	r6, r8
 80086c6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80086c8:	4e47      	ldr	r6, [pc, #284]	; (80087e8 <HAL_GPIO_Init+0x1fc>)
 80086ca:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80086cc:	2584      	movs	r5, #132	; 0x84
 80086ce:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80086d0:	03a7      	lsls	r7, r4, #14
 80086d2:	d469      	bmi.n	80087a8 <HAL_GPIO_Init+0x1bc>
        temp &= ~(iocurrent);
 80086d4:	4646      	mov	r6, r8
 80086d6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80086d8:	2784      	movs	r7, #132	; 0x84
 80086da:	4e43      	ldr	r6, [pc, #268]	; (80087e8 <HAL_GPIO_Init+0x1fc>)
 80086dc:	51f5      	str	r5, [r6, r7]

        temp = EXTI->IMR1;
 80086de:	2580      	movs	r5, #128	; 0x80
 80086e0:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80086e2:	03e4      	lsls	r4, r4, #15
 80086e4:	d45d      	bmi.n	80087a2 <HAL_GPIO_Init+0x1b6>
        temp &= ~(iocurrent);
 80086e6:	4646      	mov	r6, r8
 80086e8:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80086ea:	2580      	movs	r5, #128	; 0x80
 80086ec:	4c3e      	ldr	r4, [pc, #248]	; (80087e8 <HAL_GPIO_Init+0x1fc>)
 80086ee:	5166      	str	r6, [r4, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086f0:	000c      	movs	r4, r1
      }
    }

    position++;
 80086f2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086f4:	40dc      	lsrs	r4, r3
 80086f6:	3202      	adds	r2, #2
 80086f8:	2c00      	cmp	r4, #0
 80086fa:	d184      	bne.n	8008606 <HAL_GPIO_Init+0x1a>
  }
}
 80086fc:	b003      	add	sp, #12
 80086fe:	bcf0      	pop	{r4, r5, r6, r7}
 8008700:	46bb      	mov	fp, r7
 8008702:	46b2      	mov	sl, r6
 8008704:	46a9      	mov	r9, r5
 8008706:	46a0      	mov	r8, r4
 8008708:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 800870a:	6885      	ldr	r5, [r0, #8]
 800870c:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800870e:	2503      	movs	r5, #3
 8008710:	4095      	lsls	r5, r2
 8008712:	46a8      	mov	r8, r5
 8008714:	43ed      	mvns	r5, r5
 8008716:	464f      	mov	r7, r9
 8008718:	9500      	str	r5, [sp, #0]
 800871a:	4645      	mov	r5, r8
 800871c:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800871e:	465d      	mov	r5, fp
 8008720:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008722:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008724:	002f      	movs	r7, r5
 8008726:	4097      	lsls	r7, r2
 8008728:	46b8      	mov	r8, r7
 800872a:	464f      	mov	r7, r9
 800872c:	4645      	mov	r5, r8
 800872e:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8008730:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008732:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008734:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008736:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008738:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800873a:	0926      	lsrs	r6, r4, #4
 800873c:	402e      	ands	r6, r5
 800873e:	409e      	lsls	r6, r3
 8008740:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8008742:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8008744:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008746:	9d00      	ldr	r5, [sp, #0]
 8008748:	402e      	ands	r6, r5
 800874a:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800874c:	465e      	mov	r6, fp
 800874e:	68b6      	ldr	r6, [r6, #8]
 8008750:	4647      	mov	r7, r8
 8008752:	4096      	lsls	r6, r2
 8008754:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8008756:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008758:	4667      	mov	r7, ip
 800875a:	4666      	mov	r6, ip
 800875c:	4096      	lsls	r6, r2
 800875e:	2f02      	cmp	r7, #2
 8008760:	d000      	beq.n	8008764 <HAL_GPIO_Init+0x178>
 8008762:	e768      	b.n	8008636 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3u];
 8008764:	08dd      	lsrs	r5, r3, #3
 8008766:	00ad      	lsls	r5, r5, #2
 8008768:	46ac      	mov	ip, r5
 800876a:	4484      	add	ip, r0
 800876c:	4665      	mov	r5, ip
 800876e:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008770:	2507      	movs	r5, #7
 8008772:	401d      	ands	r5, r3
 8008774:	00ad      	lsls	r5, r5, #2
 8008776:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8008778:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800877a:	250f      	movs	r5, #15
 800877c:	4647      	mov	r7, r8
 800877e:	40bd      	lsls	r5, r7
 8008780:	9f01      	ldr	r7, [sp, #4]
 8008782:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008784:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008786:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008788:	4647      	mov	r7, r8
 800878a:	692d      	ldr	r5, [r5, #16]
 800878c:	40bd      	lsls	r5, r7
 800878e:	9f01      	ldr	r7, [sp, #4]
 8008790:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8008792:	4665      	mov	r5, ip
 8008794:	622f      	str	r7, [r5, #32]
 8008796:	e74e      	b.n	8008636 <HAL_GPIO_Init+0x4a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008798:	2503      	movs	r5, #3
 800879a:	4095      	lsls	r5, r2
 800879c:	43ed      	mvns	r5, r5
 800879e:	9500      	str	r5, [sp, #0]
 80087a0:	e7d0      	b.n	8008744 <HAL_GPIO_Init+0x158>
          temp |= iocurrent;
 80087a2:	4656      	mov	r6, sl
 80087a4:	432e      	orrs	r6, r5
 80087a6:	e7a0      	b.n	80086ea <HAL_GPIO_Init+0xfe>
          temp |= iocurrent;
 80087a8:	4657      	mov	r7, sl
 80087aa:	433d      	orrs	r5, r7
 80087ac:	e794      	b.n	80086d8 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 80087ae:	4657      	mov	r7, sl
 80087b0:	433d      	orrs	r5, r7
 80087b2:	e789      	b.n	80086c8 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 80087b4:	4657      	mov	r7, sl
 80087b6:	433d      	orrs	r5, r7
 80087b8:	e77c      	b.n	80086b4 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80087ba:	4667      	mov	r7, ip
 80087bc:	2603      	movs	r6, #3
 80087be:	40be      	lsls	r6, r7
 80087c0:	464f      	mov	r7, r9
 80087c2:	4337      	orrs	r7, r6
 80087c4:	46b9      	mov	r9, r7
 80087c6:	e768      	b.n	800869a <HAL_GPIO_Init+0xae>
 80087c8:	4666      	mov	r6, ip
 80087ca:	2701      	movs	r7, #1
 80087cc:	40b7      	lsls	r7, r6
 80087ce:	003e      	movs	r6, r7
 80087d0:	464f      	mov	r7, r9
 80087d2:	4337      	orrs	r7, r6
 80087d4:	46b9      	mov	r9, r7
 80087d6:	e760      	b.n	800869a <HAL_GPIO_Init+0xae>
 80087d8:	4667      	mov	r7, ip
 80087da:	2602      	movs	r6, #2
 80087dc:	40be      	lsls	r6, r7
 80087de:	464f      	mov	r7, r9
 80087e0:	4337      	orrs	r7, r6
 80087e2:	46b9      	mov	r9, r7
 80087e4:	e759      	b.n	800869a <HAL_GPIO_Init+0xae>
 80087e6:	46c0      	nop			; (mov r8, r8)
 80087e8:	40021800 	.word	0x40021800
 80087ec:	50000400 	.word	0x50000400
 80087f0:	50000800 	.word	0x50000800
 80087f4:	50000c00 	.word	0x50000c00

080087f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80087f8:	6900      	ldr	r0, [r0, #16]
 80087fa:	4008      	ands	r0, r1
 80087fc:	1e43      	subs	r3, r0, #1
 80087fe:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8008800:	b2c0      	uxtb	r0, r0
}
 8008802:	4770      	bx	lr

08008804 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008804:	2a00      	cmp	r2, #0
 8008806:	d001      	beq.n	800880c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008808:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800880a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800880c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800880e:	e7fc      	b.n	800880a <HAL_GPIO_WritePin+0x6>

08008810 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008810:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008812:	0013      	movs	r3, r2
 8008814:	400b      	ands	r3, r1
 8008816:	041b      	lsls	r3, r3, #16
 8008818:	4391      	bics	r1, r2
 800881a:	430b      	orrs	r3, r1
 800881c:	6183      	str	r3, [r0, #24]
}
 800881e:	4770      	bx	lr

08008820 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008822:	0017      	movs	r7, r2
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008824:	2210      	movs	r2, #16
{
 8008826:	46c6      	mov	lr, r8
 8008828:	000c      	movs	r4, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800882a:	0011      	movs	r1, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800882c:	6803      	ldr	r3, [r0, #0]
{
 800882e:	0005      	movs	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8008830:	699e      	ldr	r6, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008832:	2000      	movs	r0, #0
{
 8008834:	b500      	push	{lr}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008836:	4031      	ands	r1, r6
 8008838:	4232      	tst	r2, r6
 800883a:	d011      	beq.n	8008860 <I2C_IsErrorOccurred+0x40>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800883c:	61da      	str	r2, [r3, #28]
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 800883e:	3232      	adds	r2, #50	; 0x32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008840:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 8008842:	4690      	mov	r8, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	4216      	tst	r6, r2
 8008848:	d104      	bne.n	8008854 <I2C_IsErrorOccurred+0x34>
      if (Timeout != HAL_MAX_DELAY)
 800884a:	1c61      	adds	r1, r4, #1
 800884c:	d145      	bne.n	80088da <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800884e:	699a      	ldr	r2, [r3, #24]
 8008850:	4216      	tst	r6, r2
 8008852:	d0fc      	beq.n	800884e <I2C_IsErrorOccurred+0x2e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008854:	2220      	movs	r2, #32
 8008856:	2100      	movs	r1, #0
 8008858:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800885a:	2204      	movs	r2, #4

    status = HAL_ERROR;
 800885c:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 800885e:	4311      	orrs	r1, r2
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008860:	2480      	movs	r4, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8008862:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008864:	0064      	lsls	r4, r4, #1
 8008866:	4222      	tst	r2, r4
 8008868:	d02c      	beq.n	80088c4 <I2C_IsErrorOccurred+0xa4>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800886a:	2001      	movs	r0, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800886c:	61dc      	str	r4, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800886e:	4301      	orrs	r1, r0

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008870:	0550      	lsls	r0, r2, #21
 8008872:	d504      	bpl.n	800887e <I2C_IsErrorOccurred+0x5e>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008874:	2008      	movs	r0, #8
 8008876:	4301      	orrs	r1, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008878:	2080      	movs	r0, #128	; 0x80
 800887a:	00c0      	lsls	r0, r0, #3
 800887c:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800887e:	0592      	lsls	r2, r2, #22
 8008880:	d504      	bpl.n	800888c <I2C_IsErrorOccurred+0x6c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008882:	2202      	movs	r2, #2
 8008884:	4311      	orrs	r1, r2

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008886:	32ff      	adds	r2, #255	; 0xff
 8008888:	32ff      	adds	r2, #255	; 0xff
 800888a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	0792      	lsls	r2, r2, #30
 8008890:	d501      	bpl.n	8008896 <I2C_IsErrorOccurred+0x76>
    hi2c->Instance->TXDR = 0x00U;
 8008892:	2200      	movs	r2, #0
 8008894:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008896:	2201      	movs	r2, #1
 8008898:	6998      	ldr	r0, [r3, #24]
 800889a:	4202      	tst	r2, r0
 800889c:	d019      	beq.n	80088d2 <I2C_IsErrorOccurred+0xb2>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	4822      	ldr	r0, [pc, #136]	; (800892c <I2C_IsErrorOccurred+0x10c>)
 80088a2:	4002      	ands	r2, r0
 80088a4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80088a6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80088a8:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80088aa:	430b      	orrs	r3, r1
 80088ac:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80088ae:	2341      	movs	r3, #65	; 0x41
 80088b0:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b2:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088b4:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b6:	3222      	adds	r2, #34	; 0x22
 80088b8:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 80088ba:	3a02      	subs	r2, #2
 80088bc:	54ab      	strb	r3, [r5, r2]
  }

  return status;
}
 80088be:	bc80      	pop	{r7}
 80088c0:	46b8      	mov	r8, r7
 80088c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80088c4:	0554      	lsls	r4, r2, #21
 80088c6:	d4d5      	bmi.n	8008874 <I2C_IsErrorOccurred+0x54>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80088c8:	0592      	lsls	r2, r2, #22
 80088ca:	d4da      	bmi.n	8008882 <I2C_IsErrorOccurred+0x62>
  if (status != HAL_OK)
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0f6      	beq.n	80088be <I2C_IsErrorOccurred+0x9e>
 80088d0:	e7dc      	b.n	800888c <I2C_IsErrorOccurred+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80088d2:	6998      	ldr	r0, [r3, #24]
 80088d4:	4302      	orrs	r2, r0
 80088d6:	619a      	str	r2, [r3, #24]
 80088d8:	e7e1      	b.n	800889e <I2C_IsErrorOccurred+0x7e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088da:	f7ff f8c5 	bl	8007a68 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80088de:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088e0:	1bc0      	subs	r0, r0, r7
 80088e2:	42a0      	cmp	r0, r4
 80088e4:	d801      	bhi.n	80088ea <I2C_IsErrorOccurred+0xca>
 80088e6:	2c00      	cmp	r4, #0
 80088e8:	d1ac      	bne.n	8008844 <I2C_IsErrorOccurred+0x24>
          tmp2 = hi2c->Mode;
 80088ea:	4642      	mov	r2, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80088ec:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80088ee:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088f0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80088f2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088f4:	0409      	lsls	r1, r1, #16
 80088f6:	d50c      	bpl.n	8008912 <I2C_IsErrorOccurred+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088fc:	4208      	tst	r0, r1
 80088fe:	d108      	bne.n	8008912 <I2C_IsErrorOccurred+0xf2>
              (tmp1 != I2C_CR2_STOP) && \
 8008900:	2a20      	cmp	r2, #32
 8008902:	d006      	beq.n	8008912 <I2C_IsErrorOccurred+0xf2>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	4311      	orrs	r1, r2
 8008908:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 800890a:	f7ff f8ad 	bl	8007a68 <HAL_GetTick>
 800890e:	0007      	movs	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	699a      	ldr	r2, [r3, #24]
 8008914:	4216      	tst	r6, r2
 8008916:	d195      	bne.n	8008844 <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008918:	f7ff f8a6 	bl	8007a68 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800891c:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800891e:	1bc0      	subs	r0, r0, r7
 8008920:	2819      	cmp	r0, #25
 8008922:	d9f6      	bls.n	8008912 <I2C_IsErrorOccurred+0xf2>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008924:	2120      	movs	r1, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	e797      	b.n	800885a <I2C_IsErrorOccurred+0x3a>
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	fe00e800 	.word	0xfe00e800

08008930 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	0004      	movs	r4, r0
 8008934:	000d      	movs	r5, r1
 8008936:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008938:	2702      	movs	r7, #2
 800893a:	e008      	b.n	800894e <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800893c:	0032      	movs	r2, r6
 800893e:	0029      	movs	r1, r5
 8008940:	0020      	movs	r0, r4
 8008942:	f7ff ff6d 	bl	8008820 <I2C_IsErrorOccurred>
 8008946:	2800      	cmp	r0, #0
 8008948:	d107      	bne.n	800895a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 800894a:	1c6b      	adds	r3, r5, #1
 800894c:	d107      	bne.n	800895e <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	421f      	tst	r7, r3
 8008954:	d0f2      	beq.n	800893c <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 8008956:	2000      	movs	r0, #0
}
 8008958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800895a:	2001      	movs	r0, #1
 800895c:	e7fc      	b.n	8008958 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895e:	f7ff f883 	bl	8007a68 <HAL_GetTick>
 8008962:	1b80      	subs	r0, r0, r6
 8008964:	42a8      	cmp	r0, r5
 8008966:	d801      	bhi.n	800896c <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8008968:	2d00      	cmp	r5, #0
 800896a:	d1f0      	bne.n	800894e <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800896c:	2220      	movs	r2, #32
 800896e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8008970:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008972:	4313      	orrs	r3, r2
 8008974:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008976:	2341      	movs	r3, #65	; 0x41
 8008978:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800897a:	2300      	movs	r3, #0
 800897c:	3222      	adds	r2, #34	; 0x22
 800897e:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8008980:	3a02      	subs	r2, #2
 8008982:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8008984:	e7e8      	b.n	8008958 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8008986:	46c0      	nop			; (mov r8, r8)

08008988 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	0005      	movs	r5, r0
 800898c:	000c      	movs	r4, r1
 800898e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008990:	2720      	movs	r7, #32
 8008992:	e00d      	b.n	80089b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008994:	0032      	movs	r2, r6
 8008996:	0021      	movs	r1, r4
 8008998:	0028      	movs	r0, r5
 800899a:	f7ff ff41 	bl	8008820 <I2C_IsErrorOccurred>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d119      	bne.n	80089d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a2:	f7ff f861 	bl	8007a68 <HAL_GetTick>
 80089a6:	1b80      	subs	r0, r0, r6
 80089a8:	42a0      	cmp	r0, r4
 80089aa:	d807      	bhi.n	80089bc <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80089ac:	2c00      	cmp	r4, #0
 80089ae:	d005      	beq.n	80089bc <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	421f      	tst	r7, r3
 80089b6:	d0ed      	beq.n	8008994 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
  return HAL_OK;
 80089b8:	2000      	movs	r0, #0
}
 80089ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089bc:	2220      	movs	r2, #32
 80089be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80089c0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089c2:	4313      	orrs	r3, r2
 80089c4:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80089c6:	2341      	movs	r3, #65	; 0x41
 80089c8:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	3222      	adds	r2, #34	; 0x22
 80089ce:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 80089d0:	3a02      	subs	r2, #2
 80089d2:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 80089d4:	e7f1      	b.n	80089ba <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
      return HAL_ERROR;
 80089d6:	2001      	movs	r0, #1
 80089d8:	e7ef      	b.n	80089ba <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80089da:	46c0      	nop			; (mov r8, r8)

080089dc <HAL_I2C_Init>:
{
 80089dc:	b510      	push	{r4, lr}
 80089de:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80089e0:	d04d      	beq.n	8008a7e <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089e2:	2341      	movs	r3, #65	; 0x41
 80089e4:	5cc3      	ldrb	r3, [r0, r3]
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d043      	beq.n	8008a74 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80089ec:	2341      	movs	r3, #65	; 0x41
 80089ee:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80089f0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80089f2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	438a      	bics	r2, r1
 80089fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80089fc:	4921      	ldr	r1, [pc, #132]	; (8008a84 <HAL_I2C_Init+0xa8>)
 80089fe:	6862      	ldr	r2, [r4, #4]
 8008a00:	400a      	ands	r2, r1
 8008a02:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	4920      	ldr	r1, [pc, #128]	; (8008a88 <HAL_I2C_Init+0xac>)
 8008a08:	400a      	ands	r2, r1
 8008a0a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a0c:	68e2      	ldr	r2, [r4, #12]
 8008a0e:	2a01      	cmp	r2, #1
 8008a10:	d02a      	beq.n	8008a68 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a12:	2184      	movs	r1, #132	; 0x84
 8008a14:	68a0      	ldr	r0, [r4, #8]
 8008a16:	0209      	lsls	r1, r1, #8
 8008a18:	4301      	orrs	r1, r0
 8008a1a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a1c:	2a02      	cmp	r2, #2
 8008a1e:	d102      	bne.n	8008a26 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008a20:	2280      	movs	r2, #128	; 0x80
 8008a22:	0112      	lsls	r2, r2, #4
 8008a24:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008a26:	6859      	ldr	r1, [r3, #4]
 8008a28:	4a18      	ldr	r2, [pc, #96]	; (8008a8c <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 8008a2a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	4915      	ldr	r1, [pc, #84]	; (8008a88 <HAL_I2C_Init+0xac>)
 8008a34:	400a      	ands	r2, r1
 8008a36:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a38:	6961      	ldr	r1, [r4, #20]
 8008a3a:	6922      	ldr	r2, [r4, #16]
 8008a3c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008a3e:	69a1      	ldr	r1, [r4, #24]
 8008a40:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a42:	430a      	orrs	r2, r1
 8008a44:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008a46:	6a21      	ldr	r1, [r4, #32]
 8008a48:	69e2      	ldr	r2, [r4, #28]
 8008a4a:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8008a4c:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008a4e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a56:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008a58:	2241      	movs	r2, #65	; 0x41
 8008a5a:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a5c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008a5e:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a60:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a62:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a64:	54a3      	strb	r3, [r4, r2]
}
 8008a66:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a68:	2280      	movs	r2, #128	; 0x80
 8008a6a:	68a1      	ldr	r1, [r4, #8]
 8008a6c:	0212      	lsls	r2, r2, #8
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a72:	e7d8      	b.n	8008a26 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8008a74:	3340      	adds	r3, #64	; 0x40
 8008a76:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8008a78:	f7fe fd1e 	bl	80074b8 <HAL_I2C_MspInit>
 8008a7c:	e7b6      	b.n	80089ec <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7f1      	b.n	8008a66 <HAL_I2C_Init+0x8a>
 8008a82:	46c0      	nop			; (mov r8, r8)
 8008a84:	f0ffffff 	.word	0xf0ffffff
 8008a88:	ffff7fff 	.word	0xffff7fff
 8008a8c:	02008000 	.word	0x02008000

08008a90 <HAL_I2C_Mem_Write>:
{
 8008a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a92:	4645      	mov	r5, r8
 8008a94:	46de      	mov	lr, fp
 8008a96:	4657      	mov	r7, sl
 8008a98:	464e      	mov	r6, r9
 8008a9a:	b5e0      	push	{r5, r6, r7, lr}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	4699      	mov	r9, r3
 8008aa0:	ab0c      	add	r3, sp, #48	; 0x30
 8008aa2:	9201      	str	r2, [sp, #4]
 8008aa4:	cb04      	ldmia	r3!, {r2}
 8008aa6:	0004      	movs	r4, r0
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	4688      	mov	r8, r1
 8008aac:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aae:	2341      	movs	r3, #65	; 0x41
 8008ab0:	5cc3      	ldrb	r3, [r0, r3]
{
 8008ab2:	4692      	mov	sl, r2
 8008ab4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d000      	beq.n	8008abc <HAL_I2C_Mem_Write+0x2c>
 8008aba:	e0a7      	b.n	8008c0c <HAL_I2C_Mem_Write+0x17c>
    if ((pData == NULL) || (Size == 0U))
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d100      	bne.n	8008ac2 <HAL_I2C_Mem_Write+0x32>
 8008ac0:	e099      	b.n	8008bf6 <HAL_I2C_Mem_Write+0x166>
 8008ac2:	465b      	mov	r3, fp
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d100      	bne.n	8008aca <HAL_I2C_Mem_Write+0x3a>
 8008ac8:	e095      	b.n	8008bf6 <HAL_I2C_Mem_Write+0x166>
    __HAL_LOCK(hi2c);
 8008aca:	2340      	movs	r3, #64	; 0x40
 8008acc:	5cc2      	ldrb	r2, [r0, r3]
 8008ace:	2a01      	cmp	r2, #1
 8008ad0:	d100      	bne.n	8008ad4 <HAL_I2C_Mem_Write+0x44>
 8008ad2:	e09b      	b.n	8008c0c <HAL_I2C_Mem_Write+0x17c>
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008ad8:	f7fe ffc6 	bl	8007a68 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008adc:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8008ade:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ae0:	0236      	lsls	r6, r6, #8
 8008ae2:	e005      	b.n	8008af0 <HAL_I2C_Mem_Write+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae4:	f7fe ffc0 	bl	8007a68 <HAL_GetTick>
 8008ae8:	1bc0      	subs	r0, r0, r7
 8008aea:	2819      	cmp	r0, #25
 8008aec:	d900      	bls.n	8008af0 <HAL_I2C_Mem_Write+0x60>
 8008aee:	e08f      	b.n	8008c10 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	6993      	ldr	r3, [r2, #24]
 8008af4:	0019      	movs	r1, r3
 8008af6:	4031      	ands	r1, r6
 8008af8:	4233      	tst	r3, r6
 8008afa:	d1f3      	bne.n	8008ae4 <HAL_I2C_Mem_Write+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008afc:	2341      	movs	r3, #65	; 0x41
 8008afe:	2021      	movs	r0, #33	; 0x21
 8008b00:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b02:	3301      	adds	r3, #1
 8008b04:	301f      	adds	r0, #31
 8008b06:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8008b08:	4653      	mov	r3, sl
 8008b0a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b0c:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b0e:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8008b10:	8563      	strh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b12:	4643      	mov	r3, r8
 8008b14:	059b      	lsls	r3, r3, #22
 8008b16:	0d9b      	lsrs	r3, r3, #22
 8008b18:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b1a:	464b      	mov	r3, r9
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b1c:	4874      	ldr	r0, [pc, #464]	; (8008cf0 <HAL_I2C_Mem_Write+0x260>)
    hi2c->XferISR   = NULL;
 8008b1e:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b20:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b22:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b24:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b26:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	430b      	orrs	r3, r1
 8008b2e:	4971      	ldr	r1, [pc, #452]	; (8008cf4 <HAL_I2C_Mem_Write+0x264>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b30:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b32:	430b      	orrs	r3, r1
 8008b34:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b36:	0029      	movs	r1, r5
 8008b38:	003a      	movs	r2, r7
 8008b3a:	f7ff fef9 	bl	8008930 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d000      	beq.n	8008b44 <HAL_I2C_Mem_Write+0xb4>
 8008b42:	e0ab      	b.n	8008c9c <HAL_I2C_Mem_Write+0x20c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b44:	464b      	mov	r3, r9
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d000      	beq.n	8008b4c <HAL_I2C_Mem_Write+0xbc>
 8008b4a:	e06e      	b.n	8008c2a <HAL_I2C_Mem_Write+0x19a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b4c:	466b      	mov	r3, sp
 8008b4e:	6822      	ldr	r2, [r4, #0]
 8008b50:	791b      	ldrb	r3, [r3, #4]
 8008b52:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b54:	2680      	movs	r6, #128	; 0x80
 8008b56:	e002      	b.n	8008b5e <HAL_I2C_Mem_Write+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8008b58:	1c6b      	adds	r3, r5, #1
 8008b5a:	d000      	beq.n	8008b5e <HAL_I2C_Mem_Write+0xce>
 8008b5c:	e08c      	b.n	8008c78 <HAL_I2C_Mem_Write+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b5e:	6993      	ldr	r3, [r2, #24]
 8008b60:	421e      	tst	r6, r3
 8008b62:	d0f9      	beq.n	8008b58 <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b66:	2bff      	cmp	r3, #255	; 0xff
 8008b68:	d800      	bhi.n	8008b6c <HAL_I2C_Mem_Write+0xdc>
 8008b6a:	e09c      	b.n	8008ca6 <HAL_I2C_Mem_Write+0x216>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b6c:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b6e:	4962      	ldr	r1, [pc, #392]	; (8008cf8 <HAL_I2C_Mem_Write+0x268>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b70:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b72:	6853      	ldr	r3, [r2, #4]
 8008b74:	400b      	ands	r3, r1
 8008b76:	4641      	mov	r1, r8
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	4960      	ldr	r1, [pc, #384]	; (8008cfc <HAL_I2C_Mem_Write+0x26c>)
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	6053      	str	r3, [r2, #4]
 8008b80:	4b5d      	ldr	r3, [pc, #372]	; (8008cf8 <HAL_I2C_Mem_Write+0x268>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b82:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b84:	4699      	mov	r9, r3
 8008b86:	2380      	movs	r3, #128	; 0x80
 8008b88:	049b      	lsls	r3, r3, #18
 8008b8a:	469a      	mov	sl, r3
 8008b8c:	e003      	b.n	8008b96 <HAL_I2C_Mem_Write+0x106>
    } while (hi2c->XferCount > 0U);
 8008b8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d100      	bne.n	8008b96 <HAL_I2C_Mem_Write+0x106>
 8008b94:	e097      	b.n	8008cc6 <HAL_I2C_Mem_Write+0x236>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b96:	003a      	movs	r2, r7
 8008b98:	0029      	movs	r1, r5
 8008b9a:	0020      	movs	r0, r4
 8008b9c:	f7ff fec8 	bl	8008930 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d140      	bne.n	8008c26 <HAL_I2C_Mem_Write+0x196>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8008baa:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bac:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008bae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008bb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008bb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bba:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	d0e3      	beq.n	8008b8e <HAL_I2C_Mem_Write+0xfe>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e1      	bne.n	8008b8e <HAL_I2C_Mem_Write+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bca:	6993      	ldr	r3, [r2, #24]
 8008bcc:	421e      	tst	r6, r3
 8008bce:	d104      	bne.n	8008bda <HAL_I2C_Mem_Write+0x14a>
    if (Timeout != HAL_MAX_DELAY)
 8008bd0:	1c6b      	adds	r3, r5, #1
 8008bd2:	d139      	bne.n	8008c48 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bd4:	6993      	ldr	r3, [r2, #24]
 8008bd6:	421e      	tst	r6, r3
 8008bd8:	d0fa      	beq.n	8008bd0 <HAL_I2C_Mem_Write+0x140>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008bdc:	2bff      	cmp	r3, #255	; 0xff
 8008bde:	d93c      	bls.n	8008c5a <HAL_I2C_Mem_Write+0x1ca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008be0:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008be2:	4649      	mov	r1, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008be4:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008be6:	6853      	ldr	r3, [r2, #4]
 8008be8:	400b      	ands	r3, r1
 8008bea:	4641      	mov	r1, r8
 8008bec:	430b      	orrs	r3, r1
 8008bee:	4943      	ldr	r1, [pc, #268]	; (8008cfc <HAL_I2C_Mem_Write+0x26c>)
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008bf4:	e7cb      	b.n	8008b8e <HAL_I2C_Mem_Write+0xfe>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008bf6:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8008bf8:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008bfe:	b003      	add	sp, #12
 8008c00:	bcf0      	pop	{r4, r5, r6, r7}
 8008c02:	46bb      	mov	fp, r7
 8008c04:	46b2      	mov	sl, r6
 8008c06:	46a9      	mov	r9, r5
 8008c08:	46a0      	mov	r8, r4
 8008c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008c0c:	2002      	movs	r0, #2
 8008c0e:	e7f6      	b.n	8008bfe <HAL_I2C_Mem_Write+0x16e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c10:	2220      	movs	r2, #32
 8008c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008c14:	4313      	orrs	r3, r2
 8008c16:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c18:	2341      	movs	r3, #65	; 0x41
 8008c1a:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	3222      	adds	r2, #34	; 0x22
 8008c20:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8008c22:	3a02      	subs	r2, #2
 8008c24:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8008c26:	2001      	movs	r0, #1
 8008c28:	e7e9      	b.n	8008bfe <HAL_I2C_Mem_Write+0x16e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c2a:	9e01      	ldr	r6, [sp, #4]
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	0a32      	lsrs	r2, r6, #8
 8008c30:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c32:	0029      	movs	r1, r5
 8008c34:	003a      	movs	r2, r7
 8008c36:	0020      	movs	r0, r4
 8008c38:	f7ff fe7a 	bl	8008930 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d12d      	bne.n	8008c9c <HAL_I2C_Mem_Write+0x20c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	b2f3      	uxtb	r3, r6
 8008c44:	6293      	str	r3, [r2, #40]	; 0x28
 8008c46:	e785      	b.n	8008b54 <HAL_I2C_Mem_Write+0xc4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c48:	f7fe ff0e 	bl	8007a68 <HAL_GetTick>
 8008c4c:	1bc0      	subs	r0, r0, r7
 8008c4e:	4285      	cmp	r5, r0
 8008c50:	d3de      	bcc.n	8008c10 <HAL_I2C_Mem_Write+0x180>
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	d0dc      	beq.n	8008c10 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c56:	6822      	ldr	r2, [r4, #0]
 8008c58:	e7bc      	b.n	8008bd4 <HAL_I2C_Mem_Write+0x144>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c5a:	4648      	mov	r0, r9
          hi2c->XferSize = hi2c->XferCount;
 8008c5c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c5e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008c60:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c62:	4003      	ands	r3, r0
 8008c64:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8008c66:	8521      	strh	r1, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c68:	b2c9      	uxtb	r1, r1
 8008c6a:	0409      	lsls	r1, r1, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c6c:	4303      	orrs	r3, r0
 8008c6e:	430b      	orrs	r3, r1
 8008c70:	4651      	mov	r1, sl
 8008c72:	430b      	orrs	r3, r1
 8008c74:	6053      	str	r3, [r2, #4]
}
 8008c76:	e78a      	b.n	8008b8e <HAL_I2C_Mem_Write+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c78:	f7fe fef6 	bl	8007a68 <HAL_GetTick>
 8008c7c:	1bc0      	subs	r0, r0, r7
 8008c7e:	4285      	cmp	r5, r0
 8008c80:	d303      	bcc.n	8008c8a <HAL_I2C_Mem_Write+0x1fa>
 8008c82:	2d00      	cmp	r5, #0
 8008c84:	d001      	beq.n	8008c8a <HAL_I2C_Mem_Write+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c86:	6822      	ldr	r2, [r4, #0]
 8008c88:	e769      	b.n	8008b5e <HAL_I2C_Mem_Write+0xce>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c92:	2341      	movs	r3, #65	; 0x41
 8008c94:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c96:	2200      	movs	r2, #0
 8008c98:	3301      	adds	r3, #1
 8008c9a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	2200      	movs	r2, #0
      return HAL_ERROR;
 8008ca0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8008ca2:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8008ca4:	e7ab      	b.n	8008bfe <HAL_I2C_Mem_Write+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 8008ca6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ca8:	4813      	ldr	r0, [pc, #76]	; (8008cf8 <HAL_I2C_Mem_Write+0x268>)
 8008caa:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8008cac:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008cae:	4001      	ands	r1, r0
 8008cb0:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 8008cb2:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008cb4:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008cb6:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008cb8:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	2180      	movs	r1, #128	; 0x80
 8008cbe:	0489      	lsls	r1, r1, #18
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	6053      	str	r3, [r2, #4]
}
 8008cc4:	e75c      	b.n	8008b80 <HAL_I2C_Mem_Write+0xf0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cc6:	003a      	movs	r2, r7
 8008cc8:	0029      	movs	r1, r5
 8008cca:	0020      	movs	r0, r4
 8008ccc:	f7ff fe5c 	bl	8008988 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d1a8      	bne.n	8008c26 <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cd4:	2120      	movs	r1, #32
 8008cd6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8008cd8:	4d09      	ldr	r5, [pc, #36]	; (8008d00 <HAL_I2C_Mem_Write+0x270>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cda:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	402a      	ands	r2, r5
 8008ce0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ce2:	2341      	movs	r3, #65	; 0x41
 8008ce4:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8008cea:	3b02      	subs	r3, #2
 8008cec:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8008cee:	e786      	b.n	8008bfe <HAL_I2C_Mem_Write+0x16e>
 8008cf0:	fc009800 	.word	0xfc009800
 8008cf4:	01002000 	.word	0x01002000
 8008cf8:	fc009c00 	.word	0xfc009c00
 8008cfc:	01ff0000 	.word	0x01ff0000
 8008d00:	fe00e800 	.word	0xfe00e800

08008d04 <HAL_I2C_Mem_Read>:
{
 8008d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d06:	4645      	mov	r5, r8
 8008d08:	46de      	mov	lr, fp
 8008d0a:	4657      	mov	r7, sl
 8008d0c:	464e      	mov	r6, r9
 8008d0e:	b5e0      	push	{r5, r6, r7, lr}
 8008d10:	b083      	sub	sp, #12
 8008d12:	4699      	mov	r9, r3
 8008d14:	ab0c      	add	r3, sp, #48	; 0x30
 8008d16:	9201      	str	r2, [sp, #4]
 8008d18:	cb04      	ldmia	r3!, {r2}
 8008d1a:	0005      	movs	r5, r0
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	4688      	mov	r8, r1
 8008d20:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d22:	2341      	movs	r3, #65	; 0x41
 8008d24:	5cc3      	ldrb	r3, [r0, r3]
{
 8008d26:	4692      	mov	sl, r2
 8008d28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d000      	beq.n	8008d30 <HAL_I2C_Mem_Read+0x2c>
 8008d2e:	e090      	b.n	8008e52 <HAL_I2C_Mem_Read+0x14e>
    if ((pData == NULL) || (Size == 0U))
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	d100      	bne.n	8008d36 <HAL_I2C_Mem_Read+0x32>
 8008d34:	e082      	b.n	8008e3c <HAL_I2C_Mem_Read+0x138>
 8008d36:	465b      	mov	r3, fp
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d100      	bne.n	8008d3e <HAL_I2C_Mem_Read+0x3a>
 8008d3c:	e07e      	b.n	8008e3c <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 8008d3e:	2340      	movs	r3, #64	; 0x40
 8008d40:	5cc2      	ldrb	r2, [r0, r3]
 8008d42:	2a01      	cmp	r2, #1
 8008d44:	d100      	bne.n	8008d48 <HAL_I2C_Mem_Read+0x44>
 8008d46:	e084      	b.n	8008e52 <HAL_I2C_Mem_Read+0x14e>
 8008d48:	2201      	movs	r2, #1
 8008d4a:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008d4c:	f7fe fe8c 	bl	8007a68 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d50:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8008d52:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d54:	0236      	lsls	r6, r6, #8
 8008d56:	e005      	b.n	8008d64 <HAL_I2C_Mem_Read+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d58:	f7fe fe86 	bl	8007a68 <HAL_GetTick>
 8008d5c:	1bc0      	subs	r0, r0, r7
 8008d5e:	2819      	cmp	r0, #25
 8008d60:	d900      	bls.n	8008d64 <HAL_I2C_Mem_Read+0x60>
 8008d62:	e07f      	b.n	8008e64 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d64:	682a      	ldr	r2, [r5, #0]
 8008d66:	6993      	ldr	r3, [r2, #24]
 8008d68:	0019      	movs	r1, r3
 8008d6a:	4031      	ands	r1, r6
 8008d6c:	4233      	tst	r3, r6
 8008d6e:	d1f3      	bne.n	8008d58 <HAL_I2C_Mem_Read+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008d70:	2341      	movs	r3, #65	; 0x41
 8008d72:	2022      	movs	r0, #34	; 0x22
 8008d74:	54e8      	strb	r0, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d76:	3301      	adds	r3, #1
 8008d78:	301e      	adds	r0, #30
 8008d7a:	54e8      	strb	r0, [r5, r3]
    hi2c->pBuffPtr  = pData;
 8008d7c:	4653      	mov	r3, sl
 8008d7e:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount = Size;
 8008d80:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d82:	6469      	str	r1, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 8008d84:	856b      	strh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d86:	4643      	mov	r3, r8
 8008d88:	059b      	lsls	r3, r3, #22
 8008d8a:	0d9b      	lsrs	r3, r3, #22
 8008d8c:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d8e:	464b      	mov	r3, r9
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d90:	4877      	ldr	r0, [pc, #476]	; (8008f70 <HAL_I2C_Mem_Read+0x26c>)
    hi2c->XferISR   = NULL;
 8008d92:	6369      	str	r1, [r5, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d94:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d96:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d98:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d9a:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	4641      	mov	r1, r8
 8008da0:	430b      	orrs	r3, r1
 8008da2:	2180      	movs	r1, #128	; 0x80
 8008da4:	0189      	lsls	r1, r1, #6
 8008da6:	430b      	orrs	r3, r1
 8008da8:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008daa:	0021      	movs	r1, r4
 8008dac:	003a      	movs	r2, r7
 8008dae:	0028      	movs	r0, r5
 8008db0:	f7ff fdbe 	bl	8008930 <I2C_WaitOnTXISFlagUntilTimeout>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d000      	beq.n	8008dba <HAL_I2C_Mem_Read+0xb6>
 8008db8:	e0d3      	b.n	8008f62 <HAL_I2C_Mem_Read+0x25e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008dba:	464b      	mov	r3, r9
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d000      	beq.n	8008dc2 <HAL_I2C_Mem_Read+0xbe>
 8008dc0:	e07a      	b.n	8008eb8 <HAL_I2C_Mem_Read+0x1b4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008dc2:	466b      	mov	r3, sp
 8008dc4:	682a      	ldr	r2, [r5, #0]
 8008dc6:	791b      	ldrb	r3, [r3, #4]
 8008dc8:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dca:	2640      	movs	r6, #64	; 0x40
 8008dcc:	e002      	b.n	8008dd4 <HAL_I2C_Mem_Read+0xd0>
    if (Timeout != HAL_MAX_DELAY)
 8008dce:	1c63      	adds	r3, r4, #1
 8008dd0:	d000      	beq.n	8008dd4 <HAL_I2C_Mem_Read+0xd0>
 8008dd2:	e0a5      	b.n	8008f20 <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dd4:	6993      	ldr	r3, [r2, #24]
 8008dd6:	421e      	tst	r6, r3
 8008dd8:	d0f9      	beq.n	8008dce <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dda:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008ddc:	2bff      	cmp	r3, #255	; 0xff
 8008dde:	d800      	bhi.n	8008de2 <HAL_I2C_Mem_Read+0xde>
 8008de0:	e0a7      	b.n	8008f32 <HAL_I2C_Mem_Read+0x22e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008de2:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008de4:	4962      	ldr	r1, [pc, #392]	; (8008f70 <HAL_I2C_Mem_Read+0x26c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008de6:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008de8:	6853      	ldr	r3, [r2, #4]
 8008dea:	400b      	ands	r3, r1
 8008dec:	4641      	mov	r1, r8
 8008dee:	430b      	orrs	r3, r1
 8008df0:	4960      	ldr	r1, [pc, #384]	; (8008f74 <HAL_I2C_Mem_Read+0x270>)
 8008df2:	430b      	orrs	r3, r1
 8008df4:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008df6:	2380      	movs	r3, #128	; 0x80
 8008df8:	4699      	mov	r9, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008dfa:	4b5f      	ldr	r3, [pc, #380]	; (8008f78 <HAL_I2C_Mem_Read+0x274>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dfc:	2604      	movs	r6, #4
  MODIFY_REG(hi2c->Instance->CR2, \
 8008dfe:	469a      	mov	sl, r3
 8008e00:	e001      	b.n	8008e06 <HAL_I2C_Mem_Read+0x102>
    if (Timeout != HAL_MAX_DELAY)
 8008e02:	1c63      	adds	r3, r4, #1
 8008e04:	d127      	bne.n	8008e56 <HAL_I2C_Mem_Read+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e06:	6993      	ldr	r3, [r2, #24]
 8008e08:	421e      	tst	r6, r3
 8008e0a:	d0fa      	beq.n	8008e02 <HAL_I2C_Mem_Read+0xfe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e10:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8008e12:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8008e14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8008e16:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008e18:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8008e1a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008e1c:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8008e1e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 8008e20:	856a      	strh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8008e22:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e24:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	d001      	beq.n	8008e32 <HAL_I2C_Mem_Read+0x12e>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d02c      	beq.n	8008e8c <HAL_I2C_Mem_Read+0x188>
    } while (hi2c->XferCount > 0U);
 8008e32:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d04e      	beq.n	8008ed6 <HAL_I2C_Mem_Read+0x1d2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e38:	682a      	ldr	r2, [r5, #0]
 8008e3a:	e7e4      	b.n	8008e06 <HAL_I2C_Mem_Read+0x102>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e3c:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8008e3e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	646b      	str	r3, [r5, #68]	; 0x44
}
 8008e44:	b003      	add	sp, #12
 8008e46:	bcf0      	pop	{r4, r5, r6, r7}
 8008e48:	46bb      	mov	fp, r7
 8008e4a:	46b2      	mov	sl, r6
 8008e4c:	46a9      	mov	r9, r5
 8008e4e:	46a0      	mov	r8, r4
 8008e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008e52:	2002      	movs	r0, #2
 8008e54:	e7f6      	b.n	8008e44 <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e56:	f7fe fe07 	bl	8007a68 <HAL_GetTick>
 8008e5a:	1bc0      	subs	r0, r0, r7
 8008e5c:	4284      	cmp	r4, r0
 8008e5e:	d301      	bcc.n	8008e64 <HAL_I2C_Mem_Read+0x160>
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	d1e9      	bne.n	8008e38 <HAL_I2C_Mem_Read+0x134>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e64:	2220      	movs	r2, #32
 8008e66:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          return HAL_ERROR;
 8008e68:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e6e:	2341      	movs	r3, #65	; 0x41
 8008e70:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	3222      	adds	r2, #34	; 0x22
 8008e76:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8008e78:	3a02      	subs	r2, #2
 8008e7a:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8008e7c:	e7e2      	b.n	8008e44 <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e7e:	f7fe fdf3 	bl	8007a68 <HAL_GetTick>
 8008e82:	1bc0      	subs	r0, r0, r7
 8008e84:	4284      	cmp	r4, r0
 8008e86:	d3ed      	bcc.n	8008e64 <HAL_I2C_Mem_Read+0x160>
 8008e88:	2c00      	cmp	r4, #0
 8008e8a:	d0eb      	beq.n	8008e64 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e8c:	682a      	ldr	r2, [r5, #0]
 8008e8e:	e001      	b.n	8008e94 <HAL_I2C_Mem_Read+0x190>
    if (Timeout != HAL_MAX_DELAY)
 8008e90:	1c63      	adds	r3, r4, #1
 8008e92:	d1f4      	bne.n	8008e7e <HAL_I2C_Mem_Read+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e94:	4649      	mov	r1, r9
 8008e96:	6993      	ldr	r3, [r2, #24]
 8008e98:	4219      	tst	r1, r3
 8008e9a:	d0f9      	beq.n	8008e90 <HAL_I2C_Mem_Read+0x18c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e9c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008e9e:	2bff      	cmp	r3, #255	; 0xff
 8008ea0:	d92e      	bls.n	8008f00 <HAL_I2C_Mem_Read+0x1fc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ea2:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ea4:	4651      	mov	r1, sl
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ea6:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ea8:	6853      	ldr	r3, [r2, #4]
 8008eaa:	400b      	ands	r3, r1
 8008eac:	4641      	mov	r1, r8
 8008eae:	430b      	orrs	r3, r1
 8008eb0:	4932      	ldr	r1, [pc, #200]	; (8008f7c <HAL_I2C_Mem_Read+0x278>)
 8008eb2:	430b      	orrs	r3, r1
 8008eb4:	6053      	str	r3, [r2, #4]
}
 8008eb6:	e7bc      	b.n	8008e32 <HAL_I2C_Mem_Read+0x12e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008eb8:	9e01      	ldr	r6, [sp, #4]
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	0a32      	lsrs	r2, r6, #8
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec0:	0021      	movs	r1, r4
 8008ec2:	003a      	movs	r2, r7
 8008ec4:	0028      	movs	r0, r5
 8008ec6:	f7ff fd33 	bl	8008930 <I2C_WaitOnTXISFlagUntilTimeout>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d149      	bne.n	8008f62 <HAL_I2C_Mem_Read+0x25e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ece:	682a      	ldr	r2, [r5, #0]
 8008ed0:	b2f3      	uxtb	r3, r6
 8008ed2:	6293      	str	r3, [r2, #40]	; 0x28
 8008ed4:	e779      	b.n	8008dca <HAL_I2C_Mem_Read+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ed6:	003a      	movs	r2, r7
 8008ed8:	0021      	movs	r1, r4
 8008eda:	0028      	movs	r0, r5
 8008edc:	f7ff fd54 	bl	8008988 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d143      	bne.n	8008f6c <HAL_I2C_Mem_Read+0x268>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ee4:	2120      	movs	r1, #32
 8008ee6:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8008ee8:	4c25      	ldr	r4, [pc, #148]	; (8008f80 <HAL_I2C_Mem_Read+0x27c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008eea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	4022      	ands	r2, r4
 8008ef0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ef2:	2341      	movs	r3, #65	; 0x41
 8008ef4:	54e9      	strb	r1, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	54e8      	strb	r0, [r5, r3]
    __HAL_UNLOCK(hi2c);
 8008efa:	3b02      	subs	r3, #2
 8008efc:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 8008efe:	e7a1      	b.n	8008e44 <HAL_I2C_Mem_Read+0x140>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f00:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8008f02:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f04:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f0e:	4303      	orrs	r3, r0
 8008f10:	4650      	mov	r0, sl
 8008f12:	4001      	ands	r1, r0
 8008f14:	430b      	orrs	r3, r1
 8008f16:	2180      	movs	r1, #128	; 0x80
 8008f18:	0489      	lsls	r1, r1, #18
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	6053      	str	r3, [r2, #4]
}
 8008f1e:	e788      	b.n	8008e32 <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f20:	f7fe fda2 	bl	8007a68 <HAL_GetTick>
 8008f24:	1bc0      	subs	r0, r0, r7
 8008f26:	4284      	cmp	r4, r0
 8008f28:	d312      	bcc.n	8008f50 <HAL_I2C_Mem_Read+0x24c>
 8008f2a:	2c00      	cmp	r4, #0
 8008f2c:	d010      	beq.n	8008f50 <HAL_I2C_Mem_Read+0x24c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f2e:	682a      	ldr	r2, [r5, #0]
 8008f30:	e750      	b.n	8008dd4 <HAL_I2C_Mem_Read+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 8008f32:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f34:	480e      	ldr	r0, [pc, #56]	; (8008f70 <HAL_I2C_Mem_Read+0x26c>)
 8008f36:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8008f38:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f3a:	4001      	ands	r1, r0
 8008f3c:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 8008f3e:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f40:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f42:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f44:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f46:	430b      	orrs	r3, r1
 8008f48:	490e      	ldr	r1, [pc, #56]	; (8008f84 <HAL_I2C_Mem_Read+0x280>)
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	6053      	str	r3, [r2, #4]
}
 8008f4e:	e752      	b.n	8008df6 <HAL_I2C_Mem_Read+0xf2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f50:	2220      	movs	r2, #32
 8008f52:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008f54:	4313      	orrs	r3, r2
 8008f56:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f58:	2341      	movs	r3, #65	; 0x41
 8008f5a:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	3301      	adds	r3, #1
 8008f60:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 8008f62:	2340      	movs	r3, #64	; 0x40
 8008f64:	2200      	movs	r2, #0
      return HAL_ERROR;
 8008f66:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8008f68:	54ea      	strb	r2, [r5, r3]
      return HAL_ERROR;
 8008f6a:	e76b      	b.n	8008e44 <HAL_I2C_Mem_Read+0x140>
      return HAL_ERROR;
 8008f6c:	2001      	movs	r0, #1
 8008f6e:	e769      	b.n	8008e44 <HAL_I2C_Mem_Read+0x140>
 8008f70:	fc009800 	.word	0xfc009800
 8008f74:	01ff2400 	.word	0x01ff2400
 8008f78:	fc009c00 	.word	0xfc009c00
 8008f7c:	01ff0000 	.word	0x01ff0000
 8008f80:	fe00e800 	.word	0xfe00e800
 8008f84:	02002400 	.word	0x02002400

08008f88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f88:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f8a:	2441      	movs	r4, #65	; 0x41
 8008f8c:	5d03      	ldrb	r3, [r0, r4]
{
 8008f8e:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f90:	b2dd      	uxtb	r5, r3
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	d11a      	bne.n	8008fcc <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f96:	2640      	movs	r6, #64	; 0x40
 8008f98:	5d83      	ldrb	r3, [r0, r6]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d016      	beq.n	8008fcc <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f9e:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fa0:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fa2:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8008fa4:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fa6:	490a      	ldr	r1, [pc, #40]	; (8008fd0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	43ba      	bics	r2, r7
 8008fac:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	400a      	ands	r2, r1
 8008fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fb4:	4662      	mov	r2, ip
 8008fb6:	6819      	ldr	r1, [r3, #0]
 8008fb8:	4311      	orrs	r1, r2
 8008fba:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	433a      	orrs	r2, r7
 8008fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008fc4:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8008fc6:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8008fc8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008fcc:	2002      	movs	r0, #2
 8008fce:	e7fc      	b.n	8008fca <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8008fd0:	ffffefff 	.word	0xffffefff

08008fd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd6:	46ce      	mov	lr, r9
 8008fd8:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fda:	2441      	movs	r4, #65	; 0x41
{
 8008fdc:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fde:	5d03      	ldrb	r3, [r0, r4]
 8008fe0:	b2dd      	uxtb	r5, r3
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	d11f      	bne.n	8009026 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fe6:	2640      	movs	r6, #64	; 0x40
 8008fe8:	5d83      	ldrb	r3, [r0, r6]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d01b      	beq.n	8009026 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fee:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ff0:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ff2:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8008ff4:	6802      	ldr	r2, [r0, #0]
 8008ff6:	46b9      	mov	r9, r7
 8008ff8:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ffa:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8008ffc:	43bb      	bics	r3, r7
 8008ffe:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8009000:	6813      	ldr	r3, [r2, #0]
 8009002:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8009004:	4647      	mov	r7, r8
 8009006:	4b09      	ldr	r3, [pc, #36]	; (800902c <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8009008:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 800900a:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800900c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800900e:	4649      	mov	r1, r9
 8009010:	6813      	ldr	r3, [r2, #0]
 8009012:	430b      	orrs	r3, r1
 8009014:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009016:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009018:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 800901a:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 800901c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800901e:	bcc0      	pop	{r6, r7}
 8009020:	46b9      	mov	r9, r7
 8009022:	46b0      	mov	r8, r6
 8009024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009026:	2002      	movs	r0, #2
 8009028:	e7f9      	b.n	800901e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	fffff0ff 	.word	0xfffff0ff

08009030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009030:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009032:	4c13      	ldr	r4, [pc, #76]	; (8009080 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8009034:	4a13      	ldr	r2, [pc, #76]	; (8009084 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8009036:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8009038:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800903a:	4013      	ands	r3, r2
 800903c:	4303      	orrs	r3, r0
 800903e:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009040:	2380      	movs	r3, #128	; 0x80
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4298      	cmp	r0, r3
 8009046:	d001      	beq.n	800904c <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8009048:	0028      	movs	r0, r5
 800904a:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800904c:	4b0e      	ldr	r3, [pc, #56]	; (8009088 <HAL_PWREx_ControlVoltageScaling+0x58>)
 800904e:	490f      	ldr	r1, [pc, #60]	; (800908c <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	0058      	lsls	r0, r3, #1
 8009054:	18c0      	adds	r0, r0, r3
 8009056:	0040      	lsls	r0, r0, #1
 8009058:	f7f7 f872 	bl	8000140 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800905c:	2280      	movs	r2, #128	; 0x80
 800905e:	6963      	ldr	r3, [r4, #20]
 8009060:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009062:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009064:	4213      	tst	r3, r2
 8009066:	d102      	bne.n	800906e <HAL_PWREx_ControlVoltageScaling+0x3e>
 8009068:	e7ee      	b.n	8009048 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 800906a:	2800      	cmp	r0, #0
 800906c:	d005      	beq.n	800907a <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800906e:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8009070:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009072:	4213      	tst	r3, r2
 8009074:	d1f9      	bne.n	800906a <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8009076:	2500      	movs	r5, #0
 8009078:	e7e6      	b.n	8009048 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 800907a:	2503      	movs	r5, #3
 800907c:	e7e4      	b.n	8009048 <HAL_PWREx_ControlVoltageScaling+0x18>
 800907e:	46c0      	nop			; (mov r8, r8)
 8009080:	40007000 	.word	0x40007000
 8009084:	fffff9ff 	.word	0xfffff9ff
 8009088:	2000011c 	.word	0x2000011c
 800908c:	000f4240 	.word	0x000f4240

08009090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009092:	46ce      	mov	lr, r9
 8009094:	4647      	mov	r7, r8
 8009096:	b580      	push	{r7, lr}
 8009098:	0004      	movs	r4, r0
 800909a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800909c:	2800      	cmp	r0, #0
 800909e:	d100      	bne.n	80090a2 <HAL_RCC_OscConfig+0x12>
 80090a0:	e0f4      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090a2:	6803      	ldr	r3, [r0, #0]
 80090a4:	07da      	lsls	r2, r3, #31
 80090a6:	d531      	bpl.n	800910c <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090a8:	2238      	movs	r2, #56	; 0x38
 80090aa:	49c7      	ldr	r1, [pc, #796]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 80090ac:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090ae:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090b0:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80090b2:	2a10      	cmp	r2, #16
 80090b4:	d100      	bne.n	80090b8 <HAL_RCC_OscConfig+0x28>
 80090b6:	e0ef      	b.n	8009298 <HAL_RCC_OscConfig+0x208>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80090b8:	2a08      	cmp	r2, #8
 80090ba:	d100      	bne.n	80090be <HAL_RCC_OscConfig+0x2e>
 80090bc:	e0f0      	b.n	80092a0 <HAL_RCC_OscConfig+0x210>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090be:	2280      	movs	r2, #128	; 0x80
 80090c0:	6863      	ldr	r3, [r4, #4]
 80090c2:	0252      	lsls	r2, r2, #9
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d100      	bne.n	80090ca <HAL_RCC_OscConfig+0x3a>
 80090c8:	e0fd      	b.n	80092c6 <HAL_RCC_OscConfig+0x236>
 80090ca:	21a0      	movs	r1, #160	; 0xa0
 80090cc:	02c9      	lsls	r1, r1, #11
 80090ce:	428b      	cmp	r3, r1
 80090d0:	d100      	bne.n	80090d4 <HAL_RCC_OscConfig+0x44>
 80090d2:	e1d0      	b.n	8009476 <HAL_RCC_OscConfig+0x3e6>
 80090d4:	4dbc      	ldr	r5, [pc, #752]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 80090d6:	49bd      	ldr	r1, [pc, #756]	; (80093cc <HAL_RCC_OscConfig+0x33c>)
 80090d8:	682a      	ldr	r2, [r5, #0]
 80090da:	400a      	ands	r2, r1
 80090dc:	602a      	str	r2, [r5, #0]
 80090de:	682a      	ldr	r2, [r5, #0]
 80090e0:	49bb      	ldr	r1, [pc, #748]	; (80093d0 <HAL_RCC_OscConfig+0x340>)
 80090e2:	400a      	ands	r2, r1
 80090e4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d000      	beq.n	80090ec <HAL_RCC_OscConfig+0x5c>
 80090ea:	e0f0      	b.n	80092ce <HAL_RCC_OscConfig+0x23e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ec:	f7fe fcbc 	bl	8007a68 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80090f0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80090f2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80090f4:	02bf      	lsls	r7, r7, #10
 80090f6:	e005      	b.n	8009104 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090f8:	f7fe fcb6 	bl	8007a68 <HAL_GetTick>
 80090fc:	1b80      	subs	r0, r0, r6
 80090fe:	2864      	cmp	r0, #100	; 0x64
 8009100:	d900      	bls.n	8009104 <HAL_RCC_OscConfig+0x74>
 8009102:	e138      	b.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	423b      	tst	r3, r7
 8009108:	d1f6      	bne.n	80090f8 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	079a      	lsls	r2, r3, #30
 800910e:	d52b      	bpl.n	8009168 <HAL_RCC_OscConfig+0xd8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009110:	2338      	movs	r3, #56	; 0x38
 8009112:	4aad      	ldr	r2, [pc, #692]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 8009114:	6891      	ldr	r1, [r2, #8]
 8009116:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009118:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800911a:	2b10      	cmp	r3, #16
 800911c:	d100      	bne.n	8009120 <HAL_RCC_OscConfig+0x90>
 800911e:	e0e7      	b.n	80092f0 <HAL_RCC_OscConfig+0x260>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009120:	2b00      	cmp	r3, #0
 8009122:	d000      	beq.n	8009126 <HAL_RCC_OscConfig+0x96>
 8009124:	e0e9      	b.n	80092fa <HAL_RCC_OscConfig+0x26a>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009126:	6813      	ldr	r3, [r2, #0]
 8009128:	055b      	lsls	r3, r3, #21
 800912a:	d500      	bpl.n	800912e <HAL_RCC_OscConfig+0x9e>
 800912c:	e0aa      	b.n	8009284 <HAL_RCC_OscConfig+0x1f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800912e:	6851      	ldr	r1, [r2, #4]
 8009130:	6963      	ldr	r3, [r4, #20]
 8009132:	48a8      	ldr	r0, [pc, #672]	; (80093d4 <HAL_RCC_OscConfig+0x344>)
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	4001      	ands	r1, r0
 8009138:	430b      	orrs	r3, r1
 800913a:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800913c:	4aa2      	ldr	r2, [pc, #648]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 800913e:	49a6      	ldr	r1, [pc, #664]	; (80093d8 <HAL_RCC_OscConfig+0x348>)
 8009140:	6813      	ldr	r3, [r2, #0]
 8009142:	400b      	ands	r3, r1
 8009144:	6921      	ldr	r1, [r4, #16]
 8009146:	430b      	orrs	r3, r1
 8009148:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	4aa3      	ldr	r2, [pc, #652]	; (80093dc <HAL_RCC_OscConfig+0x34c>)
 800914e:	049b      	lsls	r3, r3, #18
 8009150:	0f5b      	lsrs	r3, r3, #29
 8009152:	40da      	lsrs	r2, r3
 8009154:	49a2      	ldr	r1, [pc, #648]	; (80093e0 <HAL_RCC_OscConfig+0x350>)
 8009156:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009158:	4ba2      	ldr	r3, [pc, #648]	; (80093e4 <HAL_RCC_OscConfig+0x354>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	f7fe fb40 	bl	80077e0 <HAL_InitTick>
 8009160:	2800      	cmp	r0, #0
 8009162:	d000      	beq.n	8009166 <HAL_RCC_OscConfig+0xd6>
 8009164:	e092      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	071a      	lsls	r2, r3, #28
 800916a:	d46d      	bmi.n	8009248 <HAL_RCC_OscConfig+0x1b8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800916c:	075b      	lsls	r3, r3, #29
 800916e:	d545      	bpl.n	80091fc <HAL_RCC_OscConfig+0x16c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009170:	2338      	movs	r3, #56	; 0x38
 8009172:	4a95      	ldr	r2, [pc, #596]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 8009174:	6891      	ldr	r1, [r2, #8]
 8009176:	400b      	ands	r3, r1
 8009178:	2b20      	cmp	r3, #32
 800917a:	d100      	bne.n	800917e <HAL_RCC_OscConfig+0xee>
 800917c:	e0e3      	b.n	8009346 <HAL_RCC_OscConfig+0x2b6>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800917e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8009180:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009182:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009184:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8009186:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009188:	4219      	tst	r1, r3
 800918a:	d108      	bne.n	800919e <HAL_RCC_OscConfig+0x10e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800918c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800918e:	4319      	orrs	r1, r3
 8009190:	63d1      	str	r1, [r2, #60]	; 0x3c
 8009192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009194:	4013      	ands	r3, r2
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800919a:	2301      	movs	r3, #1
 800919c:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800919e:	2780      	movs	r7, #128	; 0x80
 80091a0:	4e91      	ldr	r6, [pc, #580]	; (80093e8 <HAL_RCC_OscConfig+0x358>)
 80091a2:	007f      	lsls	r7, r7, #1
 80091a4:	6833      	ldr	r3, [r6, #0]
 80091a6:	423b      	tst	r3, r7
 80091a8:	d100      	bne.n	80091ac <HAL_RCC_OscConfig+0x11c>
 80091aa:	e0d5      	b.n	8009358 <HAL_RCC_OscConfig+0x2c8>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091ac:	68a3      	ldr	r3, [r4, #8]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d100      	bne.n	80091b4 <HAL_RCC_OscConfig+0x124>
 80091b2:	e123      	b.n	80093fc <HAL_RCC_OscConfig+0x36c>
 80091b4:	2b05      	cmp	r3, #5
 80091b6:	d100      	bne.n	80091ba <HAL_RCC_OscConfig+0x12a>
 80091b8:	e1ba      	b.n	8009530 <HAL_RCC_OscConfig+0x4a0>
 80091ba:	2101      	movs	r1, #1
 80091bc:	4e82      	ldr	r6, [pc, #520]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 80091be:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80091c0:	438a      	bics	r2, r1
 80091c2:	65f2      	str	r2, [r6, #92]	; 0x5c
 80091c4:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80091c6:	3103      	adds	r1, #3
 80091c8:	438a      	bics	r2, r1
 80091ca:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d000      	beq.n	80091d2 <HAL_RCC_OscConfig+0x142>
 80091d0:	e118      	b.n	8009404 <HAL_RCC_OscConfig+0x374>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d2:	f7fe fc49 	bl	8007a68 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091d6:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80091d8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091da:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091dc:	4d83      	ldr	r5, [pc, #524]	; (80093ec <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091de:	e005      	b.n	80091ec <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091e0:	f7fe fc42 	bl	8007a68 <HAL_GetTick>
 80091e4:	1bc0      	subs	r0, r0, r7
 80091e6:	42a8      	cmp	r0, r5
 80091e8:	d900      	bls.n	80091ec <HAL_RCC_OscConfig+0x15c>
 80091ea:	e0c4      	b.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091ec:	4642      	mov	r2, r8
 80091ee:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80091f0:	421a      	tst	r2, r3
 80091f2:	d1f5      	bne.n	80091e0 <HAL_RCC_OscConfig+0x150>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80091f4:	464b      	mov	r3, r9
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d100      	bne.n	80091fc <HAL_RCC_OscConfig+0x16c>
 80091fa:	e155      	b.n	80094a8 <HAL_RCC_OscConfig+0x418>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80091fc:	69e3      	ldr	r3, [r4, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d020      	beq.n	8009244 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009202:	2238      	movs	r2, #56	; 0x38
 8009204:	4d70      	ldr	r5, [pc, #448]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 8009206:	68a9      	ldr	r1, [r5, #8]
 8009208:	400a      	ands	r2, r1
 800920a:	2a10      	cmp	r2, #16
 800920c:	d100      	bne.n	8009210 <HAL_RCC_OscConfig+0x180>
 800920e:	e10b      	b.n	8009428 <HAL_RCC_OscConfig+0x398>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009210:	2b02      	cmp	r3, #2
 8009212:	d100      	bne.n	8009216 <HAL_RCC_OscConfig+0x186>
 8009214:	e14e      	b.n	80094b4 <HAL_RCC_OscConfig+0x424>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	4a75      	ldr	r2, [pc, #468]	; (80093f0 <HAL_RCC_OscConfig+0x360>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800921a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800921c:	4013      	ands	r3, r2
 800921e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009220:	f7fe fc22 	bl	8007a68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009224:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8009226:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009228:	e005      	b.n	8009236 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800922a:	f7fe fc1d 	bl	8007a68 <HAL_GetTick>
 800922e:	1b00      	subs	r0, r0, r4
 8009230:	2802      	cmp	r0, #2
 8009232:	d900      	bls.n	8009236 <HAL_RCC_OscConfig+0x1a6>
 8009234:	e09f      	b.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	4233      	tst	r3, r6
 800923a:	d1f6      	bne.n	800922a <HAL_RCC_OscConfig+0x19a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800923c:	68eb      	ldr	r3, [r5, #12]
 800923e:	4a6d      	ldr	r2, [pc, #436]	; (80093f4 <HAL_RCC_OscConfig+0x364>)
 8009240:	4013      	ands	r3, r2
 8009242:	60eb      	str	r3, [r5, #12]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8009244:	2000      	movs	r0, #0
 8009246:	e022      	b.n	800928e <HAL_RCC_OscConfig+0x1fe>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009248:	2238      	movs	r2, #56	; 0x38
 800924a:	4d5f      	ldr	r5, [pc, #380]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 800924c:	68a9      	ldr	r1, [r5, #8]
 800924e:	400a      	ands	r2, r1
 8009250:	2a18      	cmp	r2, #24
 8009252:	d02f      	beq.n	80092b4 <HAL_RCC_OscConfig+0x224>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009254:	69a3      	ldr	r3, [r4, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d100      	bne.n	800925c <HAL_RCC_OscConfig+0x1cc>
 800925a:	e08e      	b.n	800937a <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_LSI_ENABLE();
 800925c:	2201      	movs	r2, #1
 800925e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009260:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8009262:	4313      	orrs	r3, r2
 8009264:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009266:	f7fe fbff 	bl	8007a68 <HAL_GetTick>
 800926a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800926c:	e005      	b.n	800927a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800926e:	f7fe fbfb 	bl	8007a68 <HAL_GetTick>
 8009272:	1b80      	subs	r0, r0, r6
 8009274:	2802      	cmp	r0, #2
 8009276:	d900      	bls.n	800927a <HAL_RCC_OscConfig+0x1ea>
 8009278:	e07d      	b.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800927a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800927c:	421f      	tst	r7, r3
 800927e:	d0f6      	beq.n	800926e <HAL_RCC_OscConfig+0x1de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	e773      	b.n	800916c <HAL_RCC_OscConfig+0xdc>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009284:	68e3      	ldr	r3, [r4, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d000      	beq.n	800928c <HAL_RCC_OscConfig+0x1fc>
 800928a:	e750      	b.n	800912e <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 800928c:	2001      	movs	r0, #1
}
 800928e:	b003      	add	sp, #12
 8009290:	bcc0      	pop	{r6, r7}
 8009292:	46b9      	mov	r9, r7
 8009294:	46b0      	mov	r8, r6
 8009296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009298:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800929a:	0789      	lsls	r1, r1, #30
 800929c:	d000      	beq.n	80092a0 <HAL_RCC_OscConfig+0x210>
 800929e:	e70e      	b.n	80090be <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a0:	4a49      	ldr	r2, [pc, #292]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 80092a2:	6812      	ldr	r2, [r2, #0]
 80092a4:	0392      	lsls	r2, r2, #14
 80092a6:	d400      	bmi.n	80092aa <HAL_RCC_OscConfig+0x21a>
 80092a8:	e730      	b.n	800910c <HAL_RCC_OscConfig+0x7c>
 80092aa:	6862      	ldr	r2, [r4, #4]
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d000      	beq.n	80092b2 <HAL_RCC_OscConfig+0x222>
 80092b0:	e72c      	b.n	800910c <HAL_RCC_OscConfig+0x7c>
 80092b2:	e7eb      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80092b4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80092b6:	0792      	lsls	r2, r2, #30
 80092b8:	d400      	bmi.n	80092bc <HAL_RCC_OscConfig+0x22c>
 80092ba:	e757      	b.n	800916c <HAL_RCC_OscConfig+0xdc>
 80092bc:	69a2      	ldr	r2, [r4, #24]
 80092be:	2a00      	cmp	r2, #0
 80092c0:	d000      	beq.n	80092c4 <HAL_RCC_OscConfig+0x234>
 80092c2:	e753      	b.n	800916c <HAL_RCC_OscConfig+0xdc>
 80092c4:	e7e2      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092c6:	4a40      	ldr	r2, [pc, #256]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 80092c8:	6811      	ldr	r1, [r2, #0]
 80092ca:	430b      	orrs	r3, r1
 80092cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80092ce:	f7fe fbcb 	bl	8007a68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80092d2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80092d4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80092d6:	4f3c      	ldr	r7, [pc, #240]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
 80092d8:	02b6      	lsls	r6, r6, #10
 80092da:	e004      	b.n	80092e6 <HAL_RCC_OscConfig+0x256>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092dc:	f7fe fbc4 	bl	8007a68 <HAL_GetTick>
 80092e0:	1b40      	subs	r0, r0, r5
 80092e2:	2864      	cmp	r0, #100	; 0x64
 80092e4:	d847      	bhi.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	4233      	tst	r3, r6
 80092ea:	d0f7      	beq.n	80092dc <HAL_RCC_OscConfig+0x24c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	e70d      	b.n	800910c <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80092f0:	3b0d      	subs	r3, #13
 80092f2:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d100      	bne.n	80092fa <HAL_RCC_OscConfig+0x26a>
 80092f8:	e0c7      	b.n	800948a <HAL_RCC_OscConfig+0x3fa>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092fa:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80092fc:	4d32      	ldr	r5, [pc, #200]	; (80093c8 <HAL_RCC_OscConfig+0x338>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d04e      	beq.n	80093a0 <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	4a34      	ldr	r2, [pc, #208]	; (80093d8 <HAL_RCC_OscConfig+0x348>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009306:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009308:	4013      	ands	r3, r2
 800930a:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800930c:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800930e:	4313      	orrs	r3, r2
 8009310:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8009312:	2380      	movs	r3, #128	; 0x80
 8009314:	682a      	ldr	r2, [r5, #0]
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	4313      	orrs	r3, r2
 800931a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800931c:	f7fe fba4 	bl	8007a68 <HAL_GetTick>
 8009320:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009322:	e004      	b.n	800932e <HAL_RCC_OscConfig+0x29e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009324:	f7fe fba0 	bl	8007a68 <HAL_GetTick>
 8009328:	1b80      	subs	r0, r0, r6
 800932a:	2802      	cmp	r0, #2
 800932c:	d823      	bhi.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800932e:	682b      	ldr	r3, [r5, #0]
 8009330:	423b      	tst	r3, r7
 8009332:	d0f7      	beq.n	8009324 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009334:	686a      	ldr	r2, [r5, #4]
 8009336:	6963      	ldr	r3, [r4, #20]
 8009338:	4926      	ldr	r1, [pc, #152]	; (80093d4 <HAL_RCC_OscConfig+0x344>)
 800933a:	021b      	lsls	r3, r3, #8
 800933c:	400a      	ands	r2, r1
 800933e:	4313      	orrs	r3, r2
 8009340:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	e710      	b.n	8009168 <HAL_RCC_OscConfig+0xd8>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009346:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8009348:	079b      	lsls	r3, r3, #30
 800934a:	d400      	bmi.n	800934e <HAL_RCC_OscConfig+0x2be>
 800934c:	e756      	b.n	80091fc <HAL_RCC_OscConfig+0x16c>
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d000      	beq.n	8009356 <HAL_RCC_OscConfig+0x2c6>
 8009354:	e752      	b.n	80091fc <HAL_RCC_OscConfig+0x16c>
 8009356:	e799      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	433b      	orrs	r3, r7
 800935c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800935e:	f7fe fb83 	bl	8007a68 <HAL_GetTick>
 8009362:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009364:	6833      	ldr	r3, [r6, #0]
 8009366:	423b      	tst	r3, r7
 8009368:	d000      	beq.n	800936c <HAL_RCC_OscConfig+0x2dc>
 800936a:	e71f      	b.n	80091ac <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800936c:	f7fe fb7c 	bl	8007a68 <HAL_GetTick>
 8009370:	1b40      	subs	r0, r0, r5
 8009372:	2802      	cmp	r0, #2
 8009374:	d9f6      	bls.n	8009364 <HAL_RCC_OscConfig+0x2d4>
            return HAL_TIMEOUT;
 8009376:	2003      	movs	r0, #3
 8009378:	e789      	b.n	800928e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_LSI_DISABLE();
 800937a:	2201      	movs	r2, #1
 800937c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800937e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8009380:	4393      	bics	r3, r2
 8009382:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009384:	f7fe fb70 	bl	8007a68 <HAL_GetTick>
 8009388:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800938a:	e004      	b.n	8009396 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800938c:	f7fe fb6c 	bl	8007a68 <HAL_GetTick>
 8009390:	1b80      	subs	r0, r0, r6
 8009392:	2802      	cmp	r0, #2
 8009394:	d8ef      	bhi.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009396:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009398:	421f      	tst	r7, r3
 800939a:	d1f7      	bne.n	800938c <HAL_RCC_OscConfig+0x2fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	e6e5      	b.n	800916c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	4a15      	ldr	r2, [pc, #84]	; (80093f8 <HAL_RCC_OscConfig+0x368>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80093a4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 80093a6:	4013      	ands	r3, r2
 80093a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80093aa:	f7fe fb5d 	bl	8007a68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80093ae:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80093b0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80093b2:	e004      	b.n	80093be <HAL_RCC_OscConfig+0x32e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093b4:	f7fe fb58 	bl	8007a68 <HAL_GetTick>
 80093b8:	1b80      	subs	r0, r0, r6
 80093ba:	2802      	cmp	r0, #2
 80093bc:	d8db      	bhi.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	423b      	tst	r3, r7
 80093c2:	d1f7      	bne.n	80093b4 <HAL_RCC_OscConfig+0x324>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	e6cf      	b.n	8009168 <HAL_RCC_OscConfig+0xd8>
 80093c8:	40021000 	.word	0x40021000
 80093cc:	fffeffff 	.word	0xfffeffff
 80093d0:	fffbffff 	.word	0xfffbffff
 80093d4:	ffff80ff 	.word	0xffff80ff
 80093d8:	ffffc7ff 	.word	0xffffc7ff
 80093dc:	00f42400 	.word	0x00f42400
 80093e0:	2000011c 	.word	0x2000011c
 80093e4:	20000124 	.word	0x20000124
 80093e8:	40007000 	.word	0x40007000
 80093ec:	00001388 	.word	0x00001388
 80093f0:	feffffff 	.word	0xfeffffff
 80093f4:	effefffc 	.word	0xeffefffc
 80093f8:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093fc:	4951      	ldr	r1, [pc, #324]	; (8009544 <HAL_RCC_OscConfig+0x4b4>)
 80093fe:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8009400:	4313      	orrs	r3, r2
 8009402:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8009404:	f7fe fb30 	bl	8007a68 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009408:	4b4e      	ldr	r3, [pc, #312]	; (8009544 <HAL_RCC_OscConfig+0x4b4>)
        tickstart = HAL_GetTick();
 800940a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800940c:	4698      	mov	r8, r3
 800940e:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009410:	4d4d      	ldr	r5, [pc, #308]	; (8009548 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009412:	e004      	b.n	800941e <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009414:	f7fe fb28 	bl	8007a68 <HAL_GetTick>
 8009418:	1b80      	subs	r0, r0, r6
 800941a:	42a8      	cmp	r0, r5
 800941c:	d8ab      	bhi.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800941e:	4643      	mov	r3, r8
 8009420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009422:	421f      	tst	r7, r3
 8009424:	d0f6      	beq.n	8009414 <HAL_RCC_OscConfig+0x384>
 8009426:	e6e5      	b.n	80091f4 <HAL_RCC_OscConfig+0x164>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009428:	2b01      	cmp	r3, #1
 800942a:	d100      	bne.n	800942e <HAL_RCC_OscConfig+0x39e>
 800942c:	e72e      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800942e:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8009430:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009432:	6a21      	ldr	r1, [r4, #32]
 8009434:	4013      	ands	r3, r2
 8009436:	428b      	cmp	r3, r1
 8009438:	d000      	beq.n	800943c <HAL_RCC_OscConfig+0x3ac>
 800943a:	e727      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800943c:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800943e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009440:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009442:	428b      	cmp	r3, r1
 8009444:	d000      	beq.n	8009448 <HAL_RCC_OscConfig+0x3b8>
 8009446:	e721      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009448:	21fe      	movs	r1, #254	; 0xfe
 800944a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800944c:	01c9      	lsls	r1, r1, #7
 800944e:	4011      	ands	r1, r2
 8009450:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009452:	4299      	cmp	r1, r3
 8009454:	d000      	beq.n	8009458 <HAL_RCC_OscConfig+0x3c8>
 8009456:	e719      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009458:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800945a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800945c:	039b      	lsls	r3, r3, #14
 800945e:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009460:	428b      	cmp	r3, r1
 8009462:	d000      	beq.n	8009466 <HAL_RCC_OscConfig+0x3d6>
 8009464:	e712      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009466:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009468:	0f52      	lsrs	r2, r2, #29
 800946a:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800946c:	429a      	cmp	r2, r3
 800946e:	d000      	beq.n	8009472 <HAL_RCC_OscConfig+0x3e2>
 8009470:	e70c      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
  return HAL_OK;
 8009472:	2000      	movs	r0, #0
 8009474:	e70b      	b.n	800928e <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009476:	2180      	movs	r1, #128	; 0x80
 8009478:	4b32      	ldr	r3, [pc, #200]	; (8009544 <HAL_RCC_OscConfig+0x4b4>)
 800947a:	02c9      	lsls	r1, r1, #11
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	4301      	orrs	r1, r0
 8009480:	6019      	str	r1, [r3, #0]
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009488:	e721      	b.n	80092ce <HAL_RCC_OscConfig+0x23e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800948a:	6813      	ldr	r3, [r2, #0]
 800948c:	055b      	lsls	r3, r3, #21
 800948e:	d503      	bpl.n	8009498 <HAL_RCC_OscConfig+0x408>
 8009490:	68e3      	ldr	r3, [r4, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d100      	bne.n	8009498 <HAL_RCC_OscConfig+0x408>
 8009496:	e6f9      	b.n	800928c <HAL_RCC_OscConfig+0x1fc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009498:	6851      	ldr	r1, [r2, #4]
 800949a:	6963      	ldr	r3, [r4, #20]
 800949c:	482b      	ldr	r0, [pc, #172]	; (800954c <HAL_RCC_OscConfig+0x4bc>)
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	4001      	ands	r1, r0
 80094a2:	430b      	orrs	r3, r1
 80094a4:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80094a6:	e657      	b.n	8009158 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_PWR_CLK_DISABLE();
 80094a8:	4a26      	ldr	r2, [pc, #152]	; (8009544 <HAL_RCC_OscConfig+0x4b4>)
 80094aa:	4929      	ldr	r1, [pc, #164]	; (8009550 <HAL_RCC_OscConfig+0x4c0>)
 80094ac:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80094ae:	400b      	ands	r3, r1
 80094b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80094b2:	e6a3      	b.n	80091fc <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	4a27      	ldr	r2, [pc, #156]	; (8009554 <HAL_RCC_OscConfig+0x4c4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094b8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80094ba:	4013      	ands	r3, r2
 80094bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80094be:	f7fe fad3 	bl	8007a68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094c2:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80094c4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094c6:	e005      	b.n	80094d4 <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094c8:	f7fe face 	bl	8007a68 <HAL_GetTick>
 80094cc:	1b80      	subs	r0, r0, r6
 80094ce:	2802      	cmp	r0, #2
 80094d0:	d900      	bls.n	80094d4 <HAL_RCC_OscConfig+0x444>
 80094d2:	e750      	b.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	423b      	tst	r3, r7
 80094d8:	d1f6      	bne.n	80094c8 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094dc:	6a23      	ldr	r3, [r4, #32]
 80094de:	68ea      	ldr	r2, [r5, #12]
 80094e0:	430b      	orrs	r3, r1
 80094e2:	491d      	ldr	r1, [pc, #116]	; (8009558 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094e4:	4e17      	ldr	r6, [pc, #92]	; (8009544 <HAL_RCC_OscConfig+0x4b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094e6:	400a      	ands	r2, r1
 80094e8:	4313      	orrs	r3, r2
 80094ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80094ec:	4313      	orrs	r3, r2
 80094ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80094f0:	4313      	orrs	r3, r2
 80094f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80094f4:	0212      	lsls	r2, r2, #8
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80094fa:	2380      	movs	r3, #128	; 0x80
 80094fc:	682a      	ldr	r2, [r5, #0]
 80094fe:	045b      	lsls	r3, r3, #17
 8009500:	4313      	orrs	r3, r2
 8009502:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009504:	2380      	movs	r3, #128	; 0x80
 8009506:	68ea      	ldr	r2, [r5, #12]
 8009508:	055b      	lsls	r3, r3, #21
 800950a:	4313      	orrs	r3, r2
 800950c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800950e:	f7fe faab 	bl	8007a68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009512:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8009514:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009516:	04ad      	lsls	r5, r5, #18
 8009518:	e005      	b.n	8009526 <HAL_RCC_OscConfig+0x496>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800951a:	f7fe faa5 	bl	8007a68 <HAL_GetTick>
 800951e:	1b00      	subs	r0, r0, r4
 8009520:	2802      	cmp	r0, #2
 8009522:	d900      	bls.n	8009526 <HAL_RCC_OscConfig+0x496>
 8009524:	e727      	b.n	8009376 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009526:	6833      	ldr	r3, [r6, #0]
 8009528:	422b      	tst	r3, r5
 800952a:	d0f6      	beq.n	800951a <HAL_RCC_OscConfig+0x48a>
  return HAL_OK;
 800952c:	2000      	movs	r0, #0
 800952e:	e6ae      	b.n	800928e <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009530:	2104      	movs	r1, #4
 8009532:	4b04      	ldr	r3, [pc, #16]	; (8009544 <HAL_RCC_OscConfig+0x4b4>)
 8009534:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009536:	430a      	orrs	r2, r1
 8009538:	65da      	str	r2, [r3, #92]	; 0x5c
 800953a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800953c:	3903      	subs	r1, #3
 800953e:	430a      	orrs	r2, r1
 8009540:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009542:	e75f      	b.n	8009404 <HAL_RCC_OscConfig+0x374>
 8009544:	40021000 	.word	0x40021000
 8009548:	00001388 	.word	0x00001388
 800954c:	ffff80ff 	.word	0xffff80ff
 8009550:	efffffff 	.word	0xefffffff
 8009554:	feffffff 	.word	0xfeffffff
 8009558:	1fc1808c 	.word	0x1fc1808c

0800955c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800955c:	2338      	movs	r3, #56	; 0x38
 800955e:	4a21      	ldr	r2, [pc, #132]	; (80095e4 <HAL_RCC_GetSysClockFreq+0x88>)
{
 8009560:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009562:	6891      	ldr	r1, [r2, #8]
 8009564:	420b      	tst	r3, r1
 8009566:	d105      	bne.n	8009574 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009568:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800956a:	481f      	ldr	r0, [pc, #124]	; (80095e8 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800956c:	049b      	lsls	r3, r3, #18
 800956e:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009570:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8009572:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009574:	6891      	ldr	r1, [r2, #8]
 8009576:	4019      	ands	r1, r3
 8009578:	2908      	cmp	r1, #8
 800957a:	d012      	beq.n	80095a2 <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800957c:	6891      	ldr	r1, [r2, #8]
 800957e:	4019      	ands	r1, r3
 8009580:	2910      	cmp	r1, #16
 8009582:	d010      	beq.n	80095a6 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009584:	6891      	ldr	r1, [r2, #8]
 8009586:	4019      	ands	r1, r3
 8009588:	2920      	cmp	r1, #32
 800958a:	d022      	beq.n	80095d2 <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800958c:	6892      	ldr	r2, [r2, #8]
 800958e:	4013      	ands	r3, r2
    sysclockfreq = 0U;
 8009590:	3b18      	subs	r3, #24
 8009592:	0018      	movs	r0, r3
 8009594:	4243      	negs	r3, r0
 8009596:	4158      	adcs	r0, r3
 8009598:	23fa      	movs	r3, #250	; 0xfa
 800959a:	4240      	negs	r0, r0
 800959c:	01db      	lsls	r3, r3, #7
 800959e:	4018      	ands	r0, r3
 80095a0:	e7e7      	b.n	8009572 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80095a2:	4812      	ldr	r0, [pc, #72]	; (80095ec <HAL_RCC_GetSysClockFreq+0x90>)
 80095a4:	e7e5      	b.n	8009572 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80095a6:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095a8:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80095aa:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80095ac:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095ae:	0649      	lsls	r1, r1, #25
 80095b0:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80095b2:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095b4:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80095b6:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 80095b8:	079b      	lsls	r3, r3, #30
 80095ba:	d00d      	beq.n	80095d8 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80095bc:	480a      	ldr	r0, [pc, #40]	; (80095e8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80095be:	f7f6 fdbf 	bl	8000140 <__udivsi3>
 80095c2:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80095c4:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <HAL_RCC_GetSysClockFreq+0x88>)
 80095c6:	68d9      	ldr	r1, [r3, #12]
 80095c8:	0f49      	lsrs	r1, r1, #29
 80095ca:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80095cc:	f7f6 fdb8 	bl	8000140 <__udivsi3>
 80095d0:	e7cf      	b.n	8009572 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80095d2:	2080      	movs	r0, #128	; 0x80
 80095d4:	0200      	lsls	r0, r0, #8
 80095d6:	e7cc      	b.n	8009572 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095d8:	4804      	ldr	r0, [pc, #16]	; (80095ec <HAL_RCC_GetSysClockFreq+0x90>)
 80095da:	f7f6 fdb1 	bl	8000140 <__udivsi3>
 80095de:	4360      	muls	r0, r4
        break;
 80095e0:	e7f0      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x68>
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	40021000 	.word	0x40021000
 80095e8:	00f42400 	.word	0x00f42400
 80095ec:	007a1200 	.word	0x007a1200

080095f0 <HAL_RCC_ClockConfig>:
{
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	46ce      	mov	lr, r9
 80095f4:	4647      	mov	r7, r8
 80095f6:	0005      	movs	r5, r0
 80095f8:	000c      	movs	r4, r1
 80095fa:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d026      	beq.n	800964e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009600:	2207      	movs	r2, #7
 8009602:	4e57      	ldr	r6, [pc, #348]	; (8009760 <HAL_RCC_ClockConfig+0x170>)
 8009604:	6833      	ldr	r3, [r6, #0]
 8009606:	4013      	ands	r3, r2
 8009608:	428b      	cmp	r3, r1
 800960a:	d35e      	bcc.n	80096ca <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	079a      	lsls	r2, r3, #30
 8009610:	d50e      	bpl.n	8009630 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009612:	075a      	lsls	r2, r3, #29
 8009614:	d505      	bpl.n	8009622 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009616:	22e0      	movs	r2, #224	; 0xe0
 8009618:	4952      	ldr	r1, [pc, #328]	; (8009764 <HAL_RCC_ClockConfig+0x174>)
 800961a:	01d2      	lsls	r2, r2, #7
 800961c:	6888      	ldr	r0, [r1, #8]
 800961e:	4302      	orrs	r2, r0
 8009620:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009622:	4950      	ldr	r1, [pc, #320]	; (8009764 <HAL_RCC_ClockConfig+0x174>)
 8009624:	4850      	ldr	r0, [pc, #320]	; (8009768 <HAL_RCC_ClockConfig+0x178>)
 8009626:	688a      	ldr	r2, [r1, #8]
 8009628:	4002      	ands	r2, r0
 800962a:	68a8      	ldr	r0, [r5, #8]
 800962c:	4302      	orrs	r2, r0
 800962e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009630:	07db      	lsls	r3, r3, #31
 8009632:	d52b      	bpl.n	800968c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009634:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009636:	4a4b      	ldr	r2, [pc, #300]	; (8009764 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009638:	2b01      	cmp	r3, #1
 800963a:	d100      	bne.n	800963e <HAL_RCC_ClockConfig+0x4e>
 800963c:	e07c      	b.n	8009738 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800963e:	2b02      	cmp	r3, #2
 8009640:	d007      	beq.n	8009652 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009642:	2b00      	cmp	r3, #0
 8009644:	d000      	beq.n	8009648 <HAL_RCC_ClockConfig+0x58>
 8009646:	e07d      	b.n	8009744 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	0552      	lsls	r2, r2, #21
 800964c:	d404      	bmi.n	8009658 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800964e:	2001      	movs	r0, #1
 8009650:	e037      	b.n	80096c2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009652:	6812      	ldr	r2, [r2, #0]
 8009654:	0192      	lsls	r2, r2, #6
 8009656:	d5fa      	bpl.n	800964e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009658:	2107      	movs	r1, #7
 800965a:	4e42      	ldr	r6, [pc, #264]	; (8009764 <HAL_RCC_ClockConfig+0x174>)
 800965c:	68b2      	ldr	r2, [r6, #8]
 800965e:	438a      	bics	r2, r1
 8009660:	4313      	orrs	r3, r2
 8009662:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009664:	f7fe fa00 	bl	8007a68 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009668:	2338      	movs	r3, #56	; 0x38
 800966a:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800966c:	4b3f      	ldr	r3, [pc, #252]	; (800976c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800966e:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009670:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009672:	e004      	b.n	800967e <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009674:	f7fe f9f8 	bl	8007a68 <HAL_GetTick>
 8009678:	1bc0      	subs	r0, r0, r7
 800967a:	4548      	cmp	r0, r9
 800967c:	d83b      	bhi.n	80096f6 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800967e:	4643      	mov	r3, r8
 8009680:	68b2      	ldr	r2, [r6, #8]
 8009682:	401a      	ands	r2, r3
 8009684:	686b      	ldr	r3, [r5, #4]
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	429a      	cmp	r2, r3
 800968a:	d1f3      	bne.n	8009674 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800968c:	2207      	movs	r2, #7
 800968e:	4e34      	ldr	r6, [pc, #208]	; (8009760 <HAL_RCC_ClockConfig+0x170>)
 8009690:	6833      	ldr	r3, [r6, #0]
 8009692:	4013      	ands	r3, r2
 8009694:	42a3      	cmp	r3, r4
 8009696:	d838      	bhi.n	800970a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	075b      	lsls	r3, r3, #29
 800969c:	d42d      	bmi.n	80096fa <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800969e:	f7ff ff5d 	bl	800955c <HAL_RCC_GetSysClockFreq>
 80096a2:	4b30      	ldr	r3, [pc, #192]	; (8009764 <HAL_RCC_ClockConfig+0x174>)
 80096a4:	4a32      	ldr	r2, [pc, #200]	; (8009770 <HAL_RCC_ClockConfig+0x180>)
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	4932      	ldr	r1, [pc, #200]	; (8009774 <HAL_RCC_ClockConfig+0x184>)
 80096aa:	051b      	lsls	r3, r3, #20
 80096ac:	0f1b      	lsrs	r3, r3, #28
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	589b      	ldr	r3, [r3, r2]
 80096b2:	221f      	movs	r2, #31
 80096b4:	4013      	ands	r3, r2
 80096b6:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 80096b8:	4b2f      	ldr	r3, [pc, #188]	; (8009778 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80096ba:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	f7fe f88f 	bl	80077e0 <HAL_InitTick>
}
 80096c2:	bcc0      	pop	{r6, r7}
 80096c4:	46b9      	mov	r9, r7
 80096c6:	46b0      	mov	r8, r6
 80096c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096ca:	6833      	ldr	r3, [r6, #0]
 80096cc:	4393      	bics	r3, r2
 80096ce:	430b      	orrs	r3, r1
 80096d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80096d2:	f7fe f9c9 	bl	8007a68 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80096d6:	2307      	movs	r3, #7
 80096d8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096da:	4b24      	ldr	r3, [pc, #144]	; (800976c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80096dc:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096de:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80096e0:	4642      	mov	r2, r8
 80096e2:	6833      	ldr	r3, [r6, #0]
 80096e4:	4013      	ands	r3, r2
 80096e6:	42a3      	cmp	r3, r4
 80096e8:	d100      	bne.n	80096ec <HAL_RCC_ClockConfig+0xfc>
 80096ea:	e78f      	b.n	800960c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096ec:	f7fe f9bc 	bl	8007a68 <HAL_GetTick>
 80096f0:	1bc0      	subs	r0, r0, r7
 80096f2:	4548      	cmp	r0, r9
 80096f4:	d9f4      	bls.n	80096e0 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80096f6:	2003      	movs	r0, #3
 80096f8:	e7e3      	b.n	80096c2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80096fa:	4a1a      	ldr	r2, [pc, #104]	; (8009764 <HAL_RCC_ClockConfig+0x174>)
 80096fc:	491f      	ldr	r1, [pc, #124]	; (800977c <HAL_RCC_ClockConfig+0x18c>)
 80096fe:	6893      	ldr	r3, [r2, #8]
 8009700:	400b      	ands	r3, r1
 8009702:	68e9      	ldr	r1, [r5, #12]
 8009704:	430b      	orrs	r3, r1
 8009706:	6093      	str	r3, [r2, #8]
 8009708:	e7c9      	b.n	800969e <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800970a:	6833      	ldr	r3, [r6, #0]
 800970c:	4393      	bics	r3, r2
 800970e:	4323      	orrs	r3, r4
 8009710:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8009712:	f7fe f9a9 	bl	8007a68 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009716:	2307      	movs	r3, #7
 8009718:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800971a:	4b14      	ldr	r3, [pc, #80]	; (800976c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800971c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800971e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009720:	4642      	mov	r2, r8
 8009722:	6833      	ldr	r3, [r6, #0]
 8009724:	4013      	ands	r3, r2
 8009726:	42a3      	cmp	r3, r4
 8009728:	d0b6      	beq.n	8009698 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800972a:	f7fe f99d 	bl	8007a68 <HAL_GetTick>
 800972e:	1bc0      	subs	r0, r0, r7
 8009730:	4548      	cmp	r0, r9
 8009732:	d9f5      	bls.n	8009720 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8009734:	2003      	movs	r0, #3
 8009736:	e7c4      	b.n	80096c2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009738:	6812      	ldr	r2, [r2, #0]
 800973a:	0392      	lsls	r2, r2, #14
 800973c:	d500      	bpl.n	8009740 <HAL_RCC_ClockConfig+0x150>
 800973e:	e78b      	b.n	8009658 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8009740:	2001      	movs	r0, #1
 8009742:	e7be      	b.n	80096c2 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009744:	2b03      	cmp	r3, #3
 8009746:	d005      	beq.n	8009754 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009748:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800974a:	0792      	lsls	r2, r2, #30
 800974c:	d500      	bpl.n	8009750 <HAL_RCC_ClockConfig+0x160>
 800974e:	e783      	b.n	8009658 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8009750:	2001      	movs	r0, #1
 8009752:	e7b6      	b.n	80096c2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009754:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8009756:	0792      	lsls	r2, r2, #30
 8009758:	d500      	bpl.n	800975c <HAL_RCC_ClockConfig+0x16c>
 800975a:	e77d      	b.n	8009658 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800975c:	2001      	movs	r0, #1
 800975e:	e7b0      	b.n	80096c2 <HAL_RCC_ClockConfig+0xd2>
 8009760:	40022000 	.word	0x40022000
 8009764:	40021000 	.word	0x40021000
 8009768:	fffff0ff 	.word	0xfffff0ff
 800976c:	00001388 	.word	0x00001388
 8009770:	080138e8 	.word	0x080138e8
 8009774:	2000011c 	.word	0x2000011c
 8009778:	20000124 	.word	0x20000124
 800977c:	ffff8fff 	.word	0xffff8fff

08009780 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009780:	4b06      	ldr	r3, [pc, #24]	; (800979c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009782:	4907      	ldr	r1, [pc, #28]	; (80097a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009784:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8009786:	4a07      	ldr	r2, [pc, #28]	; (80097a4 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009788:	045b      	lsls	r3, r3, #17
 800978a:	0f5b      	lsrs	r3, r3, #29
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	585b      	ldr	r3, [r3, r1]
 8009790:	211f      	movs	r1, #31
 8009792:	6810      	ldr	r0, [r2, #0]
 8009794:	400b      	ands	r3, r1
 8009796:	40d8      	lsrs	r0, r3
}
 8009798:	4770      	bx	lr
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	40021000 	.word	0x40021000
 80097a0:	08013928 	.word	0x08013928
 80097a4:	2000011c 	.word	0x2000011c

080097a8 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80097a8:	2307      	movs	r3, #7
{
 80097aa:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80097ac:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097ae:	4a09      	ldr	r2, [pc, #36]	; (80097d4 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80097b0:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097b2:	6894      	ldr	r4, [r2, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80097b4:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097b6:	401c      	ands	r4, r3
 80097b8:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80097ba:	6894      	ldr	r4, [r2, #8]
 80097bc:	402c      	ands	r4, r5
 80097be:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80097c0:	24e0      	movs	r4, #224	; 0xe0
 80097c2:	6892      	ldr	r2, [r2, #8]
 80097c4:	01e4      	lsls	r4, r4, #7
 80097c6:	4022      	ands	r2, r4
 80097c8:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80097ca:	4a03      	ldr	r2, [pc, #12]	; (80097d8 <HAL_RCC_GetClockConfig+0x30>)
 80097cc:	6812      	ldr	r2, [r2, #0]
 80097ce:	4013      	ands	r3, r2
 80097d0:	600b      	str	r3, [r1, #0]
}
 80097d2:	bd30      	pop	{r4, r5, pc}
 80097d4:	40021000 	.word	0x40021000
 80097d8:	40022000 	.word	0x40022000

080097dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097de:	46ce      	mov	lr, r9
 80097e0:	4647      	mov	r7, r8
 80097e2:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097e4:	6803      	ldr	r3, [r0, #0]
{
 80097e6:	0004      	movs	r4, r0
 80097e8:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097ea:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097ec:	039a      	lsls	r2, r3, #14
 80097ee:	d550      	bpl.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097f0:	2280      	movs	r2, #128	; 0x80
 80097f2:	4b56      	ldr	r3, [pc, #344]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80097f4:	0552      	lsls	r2, r2, #21
 80097f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80097f8:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097fa:	4211      	tst	r1, r2
 80097fc:	d100      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80097fe:	e082      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009800:	2780      	movs	r7, #128	; 0x80
 8009802:	4d53      	ldr	r5, [pc, #332]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8009804:	007f      	lsls	r7, r7, #1
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	433b      	orrs	r3, r7
 800980a:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800980c:	f7fe f92c 	bl	8007a68 <HAL_GetTick>
 8009810:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009812:	e005      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009814:	f7fe f928 	bl	8007a68 <HAL_GetTick>
 8009818:	1b80      	subs	r0, r0, r6
 800981a:	2802      	cmp	r0, #2
 800981c:	d900      	bls.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800981e:	e07c      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	423b      	tst	r3, r7
 8009824:	d0f6      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009826:	4d49      	ldr	r5, [pc, #292]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009828:	23c0      	movs	r3, #192	; 0xc0
 800982a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	0011      	movs	r1, r2
 8009830:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009832:	421a      	tst	r2, r3
 8009834:	d021      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8009836:	69a0      	ldr	r0, [r4, #24]
 8009838:	4288      	cmp	r0, r1
 800983a:	d01f      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800983c:	2180      	movs	r1, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800983e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8009840:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 8009842:	0249      	lsls	r1, r1, #9
 8009844:	4331      	orrs	r1, r6
 8009846:	65e9      	str	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009848:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800984a:	4a42      	ldr	r2, [pc, #264]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x178>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 800984c:	4e42      	ldr	r6, [pc, #264]	; (8009958 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800984e:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009850:	4031      	ands	r1, r6
 8009852:	65e9      	str	r1, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009854:	65ea      	str	r2, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009856:	07db      	lsls	r3, r3, #31
 8009858:	d400      	bmi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800985a:	e075      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800985c:	f7fe f904 	bl	8007a68 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009860:	4b3e      	ldr	r3, [pc, #248]	; (800995c <HAL_RCCEx_PeriphCLKConfig+0x180>)
        tickstart = HAL_GetTick();
 8009862:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009864:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009866:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009868:	e004      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x98>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800986a:	f7fe f8fd 	bl	8007a68 <HAL_GetTick>
 800986e:	1b80      	subs	r0, r0, r6
 8009870:	4548      	cmp	r0, r9
 8009872:	d852      	bhi.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x13e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009874:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8009876:	421f      	tst	r7, r3
 8009878:	d0f7      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800987a:	69a1      	ldr	r1, [r4, #24]
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800987c:	4a33      	ldr	r2, [pc, #204]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800987e:	4835      	ldr	r0, [pc, #212]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8009880:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8009882:	4003      	ands	r3, r0
 8009884:	430b      	orrs	r3, r1
 8009886:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009888:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800988a:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 800988c:	2b01      	cmp	r3, #1
 800988e:	d048      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	07da      	lsls	r2, r3, #31
 8009894:	d506      	bpl.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009896:	2503      	movs	r5, #3
 8009898:	492c      	ldr	r1, [pc, #176]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800989a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800989c:	43aa      	bics	r2, r5
 800989e:	6865      	ldr	r5, [r4, #4]
 80098a0:	432a      	orrs	r2, r5
 80098a2:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80098a4:	079a      	lsls	r2, r3, #30
 80098a6:	d506      	bpl.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80098a8:	250c      	movs	r5, #12
 80098aa:	4928      	ldr	r1, [pc, #160]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80098ac:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80098ae:	43aa      	bics	r2, r5
 80098b0:	68a5      	ldr	r5, [r4, #8]
 80098b2:	432a      	orrs	r2, r5
 80098b4:	654a      	str	r2, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098b6:	069a      	lsls	r2, r3, #26
 80098b8:	d506      	bpl.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098ba:	4924      	ldr	r1, [pc, #144]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80098bc:	4d28      	ldr	r5, [pc, #160]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80098be:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80098c0:	402a      	ands	r2, r5
 80098c2:	68e5      	ldr	r5, [r4, #12]
 80098c4:	432a      	orrs	r2, r5
 80098c6:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098c8:	045a      	lsls	r2, r3, #17
 80098ca:	d50a      	bpl.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098cc:	491f      	ldr	r1, [pc, #124]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80098ce:	6965      	ldr	r5, [r4, #20]
 80098d0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80098d2:	0092      	lsls	r2, r2, #2
 80098d4:	0892      	lsrs	r2, r2, #2
 80098d6:	432a      	orrs	r2, r5
 80098d8:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80098da:	2280      	movs	r2, #128	; 0x80
 80098dc:	05d2      	lsls	r2, r2, #23
 80098de:	4295      	cmp	r5, r2
 80098e0:	d026      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x154>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80098e2:	051b      	lsls	r3, r3, #20
 80098e4:	d50a      	bpl.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80098e6:	4a19      	ldr	r2, [pc, #100]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80098e8:	6921      	ldr	r1, [r4, #16]
 80098ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80098ec:	4c1d      	ldr	r4, [pc, #116]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80098ee:	4023      	ands	r3, r4
 80098f0:	430b      	orrs	r3, r1
 80098f2:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80098f4:	2380      	movs	r3, #128	; 0x80
 80098f6:	01db      	lsls	r3, r3, #7
 80098f8:	4299      	cmp	r1, r3
 80098fa:	d01f      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x160>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80098fc:	b003      	add	sp, #12
 80098fe:	bcc0      	pop	{r6, r7}
 8009900:	46b9      	mov	r9, r7
 8009902:	46b0      	mov	r8, r6
 8009904:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8009906:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009908:	4311      	orrs	r1, r2
 800990a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800990c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800990e:	4013      	ands	r3, r2
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009914:	2301      	movs	r3, #1
 8009916:	4698      	mov	r8, r3
 8009918:	e772      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 800991a:	4643      	mov	r3, r8
      status = ret;
 800991c:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 800991e:	2b01      	cmp	r3, #1
 8009920:	d1b6      	bne.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009922:	4a0a      	ldr	r2, [pc, #40]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009924:	4910      	ldr	r1, [pc, #64]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8009926:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009928:	400b      	ands	r3, r1
 800992a:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	e7b0      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009930:	2280      	movs	r2, #128	; 0x80
 8009932:	68cd      	ldr	r5, [r1, #12]
 8009934:	0252      	lsls	r2, r2, #9
 8009936:	432a      	orrs	r2, r5
 8009938:	60ca      	str	r2, [r1, #12]
 800993a:	e7d2      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800993c:	2380      	movs	r3, #128	; 0x80
 800993e:	68d1      	ldr	r1, [r2, #12]
 8009940:	025b      	lsls	r3, r3, #9
 8009942:	430b      	orrs	r3, r1
 8009944:	60d3      	str	r3, [r2, #12]
  return status;
 8009946:	e7d9      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009948:	0001      	movs	r1, r0
 800994a:	e797      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800994c:	40021000 	.word	0x40021000
 8009950:	40007000 	.word	0x40007000
 8009954:	fffffcff 	.word	0xfffffcff
 8009958:	fffeffff 	.word	0xfffeffff
 800995c:	00001388 	.word	0x00001388
 8009960:	ffffcfff 	.word	0xffffcfff
 8009964:	ffff3fff 	.word	0xffff3fff
 8009968:	efffffff 	.word	0xefffffff

0800996c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800996c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800996e:	46de      	mov	lr, fp
 8009970:	4657      	mov	r7, sl
 8009972:	464e      	mov	r6, r9
 8009974:	4645      	mov	r5, r8
 8009976:	b5e0      	push	{r5, r6, r7, lr}
 8009978:	b083      	sub	sp, #12
 800997a:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800997c:	466b      	mov	r3, sp
 800997e:	1cdf      	adds	r7, r3, #3
 8009980:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8009982:	0015      	movs	r5, r2
 8009984:	4681      	mov	r9, r0
 8009986:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 8009988:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800998a:	f7fe f86d 	bl	8007a68 <HAL_GetTick>
 800998e:	1976      	adds	r6, r6, r5
 8009990:	1a33      	subs	r3, r6, r0
 8009992:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8009994:	f7fe f868 	bl	8007a68 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009998:	464b      	mov	r3, r9
 800999a:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800999c:	26c0      	movs	r6, #192	; 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800999e:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099a0:	4b34      	ldr	r3, [pc, #208]	; (8009a74 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 80099a2:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099a4:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80099a6:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099a8:	009a      	lsls	r2, r3, #2
 80099aa:	18d2      	adds	r2, r2, r3
 80099ac:	00d3      	lsls	r3, r2, #3
 80099ae:	1a9b      	subs	r3, r3, r2
 80099b0:	4642      	mov	r2, r8
 80099b2:	0d1b      	lsrs	r3, r3, #20
 80099b4:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 80099b6:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099b8:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80099ba:	e001      	b.n	80099c0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80099bc:	1c6b      	adds	r3, r5, #1
 80099be:	d10b      	bne.n	80099d8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80099c0:	6893      	ldr	r3, [r2, #8]
 80099c2:	4223      	tst	r3, r4
 80099c4:	d01d      	beq.n	8009a02 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80099c6:	42b4      	cmp	r4, r6
 80099c8:	d1f8      	bne.n	80099bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 80099ca:	4653      	mov	r3, sl
 80099cc:	7b1b      	ldrb	r3, [r3, #12]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 80099d2:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 80099d4:	1c6b      	adds	r3, r5, #1
 80099d6:	d0f3      	beq.n	80099c0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099d8:	f7fe f846 	bl	8007a68 <HAL_GetTick>
 80099dc:	465b      	mov	r3, fp
 80099de:	1ac0      	subs	r0, r0, r3
 80099e0:	4540      	cmp	r0, r8
 80099e2:	d216      	bcs.n	8009a12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099e4:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80099e6:	1e5a      	subs	r2, r3, #1
 80099e8:	4193      	sbcs	r3, r2
 80099ea:	4642      	mov	r2, r8
 80099ec:	425b      	negs	r3, r3
 80099ee:	401a      	ands	r2, r3
      }
      count--;
 80099f0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80099f2:	4690      	mov	r8, r2
      count--;
 80099f4:	3b01      	subs	r3, #1
 80099f6:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099f8:	464b      	mov	r3, r9
 80099fa:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80099fc:	6893      	ldr	r3, [r2, #8]
 80099fe:	4223      	tst	r3, r4
 8009a00:	d1e1      	bne.n	80099c6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8009a02:	2000      	movs	r0, #0
}
 8009a04:	b003      	add	sp, #12
 8009a06:	bcf0      	pop	{r4, r5, r6, r7}
 8009a08:	46bb      	mov	fp, r7
 8009a0a:	46b2      	mov	sl, r6
 8009a0c:	46a9      	mov	r9, r5
 8009a0e:	46a0      	mov	r8, r4
 8009a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a12:	464b      	mov	r3, r9
 8009a14:	21e0      	movs	r1, #224	; 0xe0
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a1c:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a1e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a20:	2282      	movs	r2, #130	; 0x82
 8009a22:	6849      	ldr	r1, [r1, #4]
 8009a24:	0052      	lsls	r2, r2, #1
 8009a26:	4291      	cmp	r1, r2
 8009a28:	d015      	beq.n	8009a56 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a2a:	464a      	mov	r2, r9
 8009a2c:	2180      	movs	r1, #128	; 0x80
 8009a2e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009a30:	0189      	lsls	r1, r1, #6
 8009a32:	428a      	cmp	r2, r1
 8009a34:	d106      	bne.n	8009a44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 8009a36:	6819      	ldr	r1, [r3, #0]
 8009a38:	480f      	ldr	r0, [pc, #60]	; (8009a78 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 8009a3a:	4001      	ands	r1, r0
 8009a3c:	6019      	str	r1, [r3, #0]
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009a44:	235d      	movs	r3, #93	; 0x5d
 8009a46:	2201      	movs	r2, #1
 8009a48:	4649      	mov	r1, r9
 8009a4a:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8009a50:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8009a52:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8009a54:	e7d6      	b.n	8009a04 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a56:	464a      	mov	r2, r9
 8009a58:	2180      	movs	r1, #128	; 0x80
 8009a5a:	6892      	ldr	r2, [r2, #8]
 8009a5c:	0209      	lsls	r1, r1, #8
 8009a5e:	428a      	cmp	r2, r1
 8009a60:	d003      	beq.n	8009a6a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a62:	2180      	movs	r1, #128	; 0x80
 8009a64:	00c9      	lsls	r1, r1, #3
 8009a66:	428a      	cmp	r2, r1
 8009a68:	d1df      	bne.n	8009a2a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 8009a6a:	2140      	movs	r1, #64	; 0x40
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	438a      	bics	r2, r1
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	e7da      	b.n	8009a2a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 8009a74:	2000011c 	.word	0x2000011c
 8009a78:	ffffdfff 	.word	0xffffdfff

08009a7c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8009a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a7e:	46c6      	mov	lr, r8
 8009a80:	b500      	push	{lr}
 8009a82:	000c      	movs	r4, r1
 8009a84:	0016      	movs	r6, r2
 8009a86:	b082      	sub	sp, #8
 8009a88:	0007      	movs	r7, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a8a:	f7fd ffed 	bl	8007a68 <HAL_GetTick>
 8009a8e:	1936      	adds	r6, r6, r4
 8009a90:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8009a92:	f7fd ffe9 	bl	8007a68 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a96:	2580      	movs	r5, #128	; 0x80
  tmp_tickstart = HAL_GetTick();
 8009a98:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a9a:	4b26      	ldr	r3, [pc, #152]	; (8009b34 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	015b      	lsls	r3, r3, #5
 8009aa0:	0d1b      	lsrs	r3, r3, #20
 8009aa2:	4373      	muls	r3, r6
 8009aa4:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	e001      	b.n	8009aae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
    if (Timeout != HAL_MAX_DELAY)
 8009aaa:	1c63      	adds	r3, r4, #1
 8009aac:	d107      	bne.n	8009abe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009aae:	6893      	ldr	r3, [r2, #8]
 8009ab0:	421d      	tst	r5, r3
 8009ab2:	d1fa      	bne.n	8009aaa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  return HAL_OK;
 8009ab4:	2000      	movs	r0, #0
}
 8009ab6:	b002      	add	sp, #8
 8009ab8:	bc80      	pop	{r7}
 8009aba:	46b8      	mov	r8, r7
 8009abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009abe:	f7fd ffd3 	bl	8007a68 <HAL_GetTick>
 8009ac2:	4643      	mov	r3, r8
 8009ac4:	1ac0      	subs	r0, r0, r3
 8009ac6:	42b0      	cmp	r0, r6
 8009ac8:	d208      	bcs.n	8009adc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 8009aca:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009acc:	1e5a      	subs	r2, r3, #1
 8009ace:	4193      	sbcs	r3, r2
 8009ad0:	425b      	negs	r3, r3
 8009ad2:	401e      	ands	r6, r3
      count--;
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	e7e4      	b.n	8009aa6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009adc:	21e0      	movs	r1, #224	; 0xe0
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	438a      	bics	r2, r1
 8009ae4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae6:	2282      	movs	r2, #130	; 0x82
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	0052      	lsls	r2, r2, #1
 8009aec:	4291      	cmp	r1, r2
 8009aee:	d013      	beq.n	8009b18 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009af0:	2180      	movs	r1, #128	; 0x80
 8009af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af4:	0189      	lsls	r1, r1, #6
 8009af6:	428a      	cmp	r2, r1
 8009af8:	d106      	bne.n	8009b08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	480e      	ldr	r0, [pc, #56]	; (8009b38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8009afe:	4001      	ands	r1, r0
 8009b00:	6019      	str	r1, [r3, #0]
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009b08:	235d      	movs	r3, #93	; 0x5d
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8009b0e:	2200      	movs	r2, #0
 8009b10:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8009b12:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8009b14:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8009b16:	e7ce      	b.n	8009ab6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b18:	2180      	movs	r1, #128	; 0x80
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	0209      	lsls	r1, r1, #8
 8009b1e:	428a      	cmp	r2, r1
 8009b20:	d003      	beq.n	8009b2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b22:	2180      	movs	r1, #128	; 0x80
 8009b24:	00c9      	lsls	r1, r1, #3
 8009b26:	428a      	cmp	r2, r1
 8009b28:	d1e2      	bne.n	8009af0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 8009b2a:	2140      	movs	r1, #64	; 0x40
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	438a      	bics	r2, r1
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	e7dd      	b.n	8009af0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8009b34:	2000011c 	.word	0x2000011c
 8009b38:	ffffdfff 	.word	0xffffdfff

08009b3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b3c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b3e:	0013      	movs	r3, r2
{
 8009b40:	000d      	movs	r5, r1
 8009b42:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b44:	000a      	movs	r2, r1
 8009b46:	21c0      	movs	r1, #192	; 0xc0
 8009b48:	0149      	lsls	r1, r1, #5
{
 8009b4a:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b4c:	f7ff ff0e 	bl	800996c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d10f      	bne.n	8009b74 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b54:	0032      	movs	r2, r6
 8009b56:	0029      	movs	r1, r5
 8009b58:	0020      	movs	r0, r4
 8009b5a:	f7ff ff8f 	bl	8009a7c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d108      	bne.n	8009b74 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b62:	21c0      	movs	r1, #192	; 0xc0
 8009b64:	0033      	movs	r3, r6
 8009b66:	002a      	movs	r2, r5
 8009b68:	0020      	movs	r0, r4
 8009b6a:	00c9      	lsls	r1, r1, #3
 8009b6c:	f7ff fefe 	bl	800996c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d004      	beq.n	8009b7e <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b74:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8009b76:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	6623      	str	r3, [r4, #96]	; 0x60
  }

  return HAL_OK;
}
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}

08009b80 <HAL_SPI_Init>:
{
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	46de      	mov	lr, fp
 8009b84:	4657      	mov	r7, sl
 8009b86:	464e      	mov	r6, r9
 8009b88:	4645      	mov	r5, r8
 8009b8a:	0004      	movs	r4, r0
 8009b8c:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d100      	bne.n	8009b94 <HAL_SPI_Init+0x14>
 8009b92:	e094      	b.n	8009cbe <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b94:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b96:	2d00      	cmp	r5, #0
 8009b98:	d06b      	beq.n	8009c72 <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b9e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ba4:	335d      	adds	r3, #93	; 0x5d
 8009ba6:	5ce3      	ldrb	r3, [r4, r3]
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d06e      	beq.n	8009c8c <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009bae:	235d      	movs	r3, #93	; 0x5d
 8009bb0:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8009bb2:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8009bb4:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8009bb6:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bb8:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8009bba:	6813      	ldr	r3, [r2, #0]
 8009bbc:	438b      	bics	r3, r1
 8009bbe:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bc0:	23e0      	movs	r3, #224	; 0xe0
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	4298      	cmp	r0, r3
 8009bc6:	d968      	bls.n	8009c9a <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009bc8:	23f0      	movs	r3, #240	; 0xf0
 8009bca:	011b      	lsls	r3, r3, #4
 8009bcc:	4298      	cmp	r0, r3
 8009bce:	d000      	beq.n	8009bd2 <HAL_SPI_Init+0x52>
 8009bd0:	e077      	b.n	8009cc2 <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bd2:	2380      	movs	r3, #128	; 0x80
 8009bd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009bd6:	019b      	lsls	r3, r3, #6
 8009bd8:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009bda:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bdc:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009bde:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009be0:	2682      	movs	r6, #130	; 0x82
 8009be2:	2784      	movs	r7, #132	; 0x84
 8009be4:	6863      	ldr	r3, [r4, #4]
 8009be6:	0076      	lsls	r6, r6, #1
 8009be8:	4033      	ands	r3, r6
 8009bea:	68a6      	ldr	r6, [r4, #8]
 8009bec:	023f      	lsls	r7, r7, #8
 8009bee:	403e      	ands	r6, r7
 8009bf0:	2702      	movs	r7, #2
 8009bf2:	4333      	orrs	r3, r6
 8009bf4:	6926      	ldr	r6, [r4, #16]
 8009bf6:	69a1      	ldr	r1, [r4, #24]
 8009bf8:	403e      	ands	r6, r7
 8009bfa:	4333      	orrs	r3, r6
 8009bfc:	2601      	movs	r6, #1
 8009bfe:	6967      	ldr	r7, [r4, #20]
 8009c00:	46b2      	mov	sl, r6
 8009c02:	4037      	ands	r7, r6
 8009c04:	433b      	orrs	r3, r7
 8009c06:	2780      	movs	r7, #128	; 0x80
 8009c08:	00bf      	lsls	r7, r7, #2
 8009c0a:	400f      	ands	r7, r1
 8009c0c:	433b      	orrs	r3, r7
 8009c0e:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c10:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c12:	46b8      	mov	r8, r7
 8009c14:	2738      	movs	r7, #56	; 0x38
 8009c16:	46b9      	mov	r9, r7
 8009c18:	4647      	mov	r7, r8
 8009c1a:	464e      	mov	r6, r9
 8009c1c:	4037      	ands	r7, r6
 8009c1e:	6a26      	ldr	r6, [r4, #32]
 8009c20:	433b      	orrs	r3, r7
 8009c22:	46b0      	mov	r8, r6
 8009c24:	2680      	movs	r6, #128	; 0x80
 8009c26:	4647      	mov	r7, r8
 8009c28:	4037      	ands	r7, r6
 8009c2a:	4666      	mov	r6, ip
 8009c2c:	433b      	orrs	r3, r7
 8009c2e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c30:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c32:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c36:	4033      	ands	r3, r6
 8009c38:	26f0      	movs	r6, #240	; 0xf0
 8009c3a:	0136      	lsls	r6, r6, #4
 8009c3c:	4030      	ands	r0, r6
 8009c3e:	4303      	orrs	r3, r0
 8009c40:	2004      	movs	r0, #4
 8009c42:	4001      	ands	r1, r0
 8009c44:	430b      	orrs	r3, r1
 8009c46:	2110      	movs	r1, #16
 8009c48:	4029      	ands	r1, r5
 8009c4a:	430b      	orrs	r3, r1
 8009c4c:	4659      	mov	r1, fp
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c52:	69d3      	ldr	r3, [r2, #28]
 8009c54:	491c      	ldr	r1, [pc, #112]	; (8009cc8 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8009c56:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c58:	400b      	ands	r3, r1
 8009c5a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c5c:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009c5e:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c60:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c62:	335d      	adds	r3, #93	; 0x5d
 8009c64:	54e2      	strb	r2, [r4, r3]
}
 8009c66:	bcf0      	pop	{r4, r5, r6, r7}
 8009c68:	46bb      	mov	fp, r7
 8009c6a:	46b2      	mov	sl, r6
 8009c6c:	46a9      	mov	r9, r5
 8009c6e:	46a0      	mov	r8, r4
 8009c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c72:	2382      	movs	r3, #130	; 0x82
 8009c74:	6842      	ldr	r2, [r0, #4]
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d091      	beq.n	8009ba0 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c7c:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c7e:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c80:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c82:	335d      	adds	r3, #93	; 0x5d
 8009c84:	5ce3      	ldrb	r3, [r4, r3]
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d190      	bne.n	8009bae <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8009c8c:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009c8e:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8009c90:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8009c92:	f7fd fc55 	bl	8007540 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c96:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009c98:	e789      	b.n	8009bae <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c9a:	4298      	cmp	r0, r3
 8009c9c:	d006      	beq.n	8009cac <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c9e:	2380      	movs	r3, #128	; 0x80
 8009ca0:	015b      	lsls	r3, r3, #5
 8009ca2:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	469c      	mov	ip, r3
 8009ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009caa:	e799      	b.n	8009be0 <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cac:	2380      	movs	r3, #128	; 0x80
 8009cae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009cb0:	019b      	lsls	r3, r3, #6
 8009cb2:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cb4:	2380      	movs	r3, #128	; 0x80
 8009cb6:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cb8:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cba:	469b      	mov	fp, r3
 8009cbc:	e790      	b.n	8009be0 <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	e7d1      	b.n	8009c66 <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	469b      	mov	fp, r3
 8009cc6:	e7ed      	b.n	8009ca4 <HAL_SPI_Init+0x124>
 8009cc8:	fffff7ff 	.word	0xfffff7ff

08009ccc <HAL_SPI_Transmit>:
{
 8009ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cce:	46c6      	mov	lr, r8
 8009cd0:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8009cd2:	235c      	movs	r3, #92	; 0x5c
{
 8009cd4:	b500      	push	{lr}
 8009cd6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8009cd8:	5cc2      	ldrb	r2, [r0, r3]
{
 8009cda:	0004      	movs	r4, r0
 8009cdc:	000d      	movs	r5, r1
 8009cde:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8009ce0:	2a01      	cmp	r2, #1
 8009ce2:	d060      	beq.n	8009da6 <HAL_SPI_Transmit+0xda>
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009ce8:	f7fd febe 	bl	8007a68 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8009cec:	225d      	movs	r2, #93	; 0x5d
 8009cee:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8009cf0:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009cf2:	b2d8      	uxtb	r0, r3
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d00a      	beq.n	8009d0e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8009cf8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009cfa:	235d      	movs	r3, #93	; 0x5d
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8009d00:	2200      	movs	r2, #0
 8009d02:	3b01      	subs	r3, #1
 8009d04:	54e2      	strb	r2, [r4, r3]
}
 8009d06:	b002      	add	sp, #8
 8009d08:	bc80      	pop	{r7}
 8009d0a:	46b8      	mov	r8, r7
 8009d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	d0f3      	beq.n	8009cfa <HAL_SPI_Transmit+0x2e>
 8009d12:	4643      	mov	r3, r8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d0f0      	beq.n	8009cfa <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d1c:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8009d1e:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d20:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 8009d22:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009d24:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8009d26:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d28:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009d2a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009d2c:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8009d2e:	3202      	adds	r2, #2
 8009d30:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8009d32:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009d34:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d36:	2380      	movs	r3, #128	; 0x80
 8009d38:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8009d3a:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d05a      	beq.n	8009df8 <HAL_SPI_Transmit+0x12c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d42:	2340      	movs	r3, #64	; 0x40
 8009d44:	6802      	ldr	r2, [r0, #0]
 8009d46:	4213      	tst	r3, r2
 8009d48:	d102      	bne.n	8009d50 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8009d4a:	6802      	ldr	r2, [r0, #0]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d50:	23e0      	movs	r3, #224	; 0xe0
 8009d52:	68e2      	ldr	r2, [r4, #12]
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d927      	bls.n	8009daa <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d5a:	6863      	ldr	r3, [r4, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d055      	beq.n	8009e0c <HAL_SPI_Transmit+0x140>
 8009d60:	4643      	mov	r3, r8
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d052      	beq.n	8009e0c <HAL_SPI_Transmit+0x140>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d66:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8009d68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d6a:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10d      	bne.n	8009d8c <HAL_SPI_Transmit+0xc0>
 8009d70:	e05f      	b.n	8009e32 <HAL_SPI_Transmit+0x166>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d74:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d76:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d78:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8009d7a:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d7c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009d7e:	3d01      	subs	r5, #1
 8009d80:	b2ad      	uxth	r5, r5
 8009d82:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8009d84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d053      	beq.n	8009e32 <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d8a:	6820      	ldr	r0, [r4, #0]
 8009d8c:	4642      	mov	r2, r8
 8009d8e:	6883      	ldr	r3, [r0, #8]
 8009d90:	421a      	tst	r2, r3
 8009d92:	d1ee      	bne.n	8009d72 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d94:	f7fd fe68 	bl	8007a68 <HAL_GetTick>
 8009d98:	1bc0      	subs	r0, r0, r7
 8009d9a:	42b0      	cmp	r0, r6
 8009d9c:	d3f2      	bcc.n	8009d84 <HAL_SPI_Transmit+0xb8>
 8009d9e:	1c73      	adds	r3, r6, #1
 8009da0:	d0f0      	beq.n	8009d84 <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 8009da2:	2003      	movs	r0, #3
 8009da4:	e7a9      	b.n	8009cfa <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8009da6:	2002      	movs	r0, #2
 8009da8:	e7ad      	b.n	8009d06 <HAL_SPI_Transmit+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009daa:	6863      	ldr	r3, [r4, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d036      	beq.n	8009e1e <HAL_SPI_Transmit+0x152>
 8009db0:	4643      	mov	r3, r8
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d033      	beq.n	8009e1e <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009db6:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8009db8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009dba:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10d      	bne.n	8009ddc <HAL_SPI_Transmit+0x110>
 8009dc0:	e037      	b.n	8009e32 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009dc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009dc4:	7812      	ldrb	r2, [r2, #0]
 8009dc6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8009dc8:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009dcc:	3d01      	subs	r5, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dce:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8009dd0:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dd2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009dd4:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8009dd6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d02a      	beq.n	8009e32 <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ddc:	4641      	mov	r1, r8
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	4211      	tst	r1, r2
 8009de4:	d1ed      	bne.n	8009dc2 <HAL_SPI_Transmit+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009de6:	f7fd fe3f 	bl	8007a68 <HAL_GetTick>
 8009dea:	1bc0      	subs	r0, r0, r7
 8009dec:	42b0      	cmp	r0, r6
 8009dee:	d3f2      	bcc.n	8009dd6 <HAL_SPI_Transmit+0x10a>
 8009df0:	1c73      	adds	r3, r6, #1
 8009df2:	d0f0      	beq.n	8009dd6 <HAL_SPI_Transmit+0x10a>
          errorcode = HAL_TIMEOUT;
 8009df4:	2003      	movs	r0, #3
 8009df6:	e780      	b.n	8009cfa <HAL_SPI_Transmit+0x2e>
    __HAL_SPI_DISABLE(hspi);
 8009df8:	2240      	movs	r2, #64	; 0x40
 8009dfa:	6803      	ldr	r3, [r0, #0]
 8009dfc:	4393      	bics	r3, r2
 8009dfe:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8009e00:	2380      	movs	r3, #128	; 0x80
 8009e02:	6802      	ldr	r2, [r0, #0]
 8009e04:	01db      	lsls	r3, r3, #7
 8009e06:	4313      	orrs	r3, r2
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	e79a      	b.n	8009d42 <HAL_SPI_Transmit+0x76>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e0c:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e0e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e10:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8009e12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e14:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009e16:	3b01      	subs	r3, #1
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e1c:	e7a3      	b.n	8009d66 <HAL_SPI_Transmit+0x9a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e1e:	782b      	ldrb	r3, [r5, #0]
 8009e20:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e24:	3301      	adds	r3, #1
 8009e26:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009e28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e30:	e7c1      	b.n	8009db6 <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e32:	003a      	movs	r2, r7
 8009e34:	0031      	movs	r1, r6
 8009e36:	0020      	movs	r0, r4
 8009e38:	f7ff fe80 	bl	8009b3c <SPI_EndRxTxTransaction>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d001      	beq.n	8009e44 <HAL_SPI_Transmit+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e40:	2320      	movs	r3, #32
 8009e42:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e44:	68a3      	ldr	r3, [r4, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <HAL_SPI_Transmit+0x18c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	9201      	str	r2, [sp, #4]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e58:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009e5a:	1e43      	subs	r3, r0, #1
 8009e5c:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8009e5e:	b2c0      	uxtb	r0, r0
error:
 8009e60:	e74b      	b.n	8009cfa <HAL_SPI_Transmit+0x2e>
 8009e62:	46c0      	nop			; (mov r8, r8)

08009e64 <HAL_SPI_TransmitReceive>:
{
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	4647      	mov	r7, r8
 8009e68:	46ce      	mov	lr, r9
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8009e6e:	235c      	movs	r3, #92	; 0x5c
{
 8009e70:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8009e72:	5cc2      	ldrb	r2, [r0, r3]
{
 8009e74:	0004      	movs	r4, r0
 8009e76:	4688      	mov	r8, r1
 8009e78:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8009e7a:	2a01      	cmp	r2, #1
 8009e7c:	d100      	bne.n	8009e80 <HAL_SPI_TransmitReceive+0x1c>
 8009e7e:	e095      	b.n	8009fac <HAL_SPI_TransmitReceive+0x148>
 8009e80:	2201      	movs	r2, #1
 8009e82:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009e84:	f7fd fdf0 	bl	8007a68 <HAL_GetTick>
  tmp_state           = hspi->State;
 8009e88:	235d      	movs	r3, #93	; 0x5d
 8009e8a:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8009e8c:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 8009e8e:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8009e90:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d013      	beq.n	8009ebe <HAL_SPI_TransmitReceive+0x5a>
 8009e96:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8009e98:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d009      	beq.n	8009eb4 <HAL_SPI_TransmitReceive+0x50>
  hspi->State = HAL_SPI_STATE_READY;
 8009ea0:	235d      	movs	r3, #93	; 0x5d
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	54e2      	strb	r2, [r4, r3]
}
 8009eac:	bcc0      	pop	{r6, r7}
 8009eae:	46b9      	mov	r9, r7
 8009eb0:	46b0      	mov	r8, r6
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009eb4:	68a3      	ldr	r3, [r4, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f2      	bne.n	8009ea0 <HAL_SPI_TransmitReceive+0x3c>
 8009eba:	2904      	cmp	r1, #4
 8009ebc:	d1f0      	bne.n	8009ea0 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ebe:	4643      	mov	r3, r8
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d075      	beq.n	8009fb0 <HAL_SPI_TransmitReceive+0x14c>
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d072      	beq.n	8009fb0 <HAL_SPI_TransmitReceive+0x14c>
 8009eca:	2f00      	cmp	r7, #0
 8009ecc:	d070      	beq.n	8009fb0 <HAL_SPI_TransmitReceive+0x14c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009ece:	235d      	movs	r3, #93	; 0x5d
 8009ed0:	5ce1      	ldrb	r1, [r4, r3]
 8009ed2:	2904      	cmp	r1, #4
 8009ed4:	d001      	beq.n	8009eda <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ed6:	2105      	movs	r1, #5
 8009ed8:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009eda:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009edc:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ede:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009ee0:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ee2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8009ee4:	5267      	strh	r7, [r4, r1]
  hspi->RxXferSize  = Size;
 8009ee6:	3902      	subs	r1, #2
 8009ee8:	5267      	strh	r7, [r4, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009eea:	4641      	mov	r1, r8
  hspi->RxISR       = NULL;
 8009eec:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009eee:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ef0:	23e0      	movs	r3, #224	; 0xe0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ef2:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ef4:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferCount = Size;
 8009ef6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009ef8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	4299      	cmp	r1, r3
 8009efe:	d965      	bls.n	8009fcc <HAL_SPI_TransmitReceive+0x168>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	4862      	ldr	r0, [pc, #392]	; (800a08c <HAL_SPI_TransmitReceive+0x228>)
 8009f04:	6859      	ldr	r1, [r3, #4]
 8009f06:	4001      	ands	r1, r0
 8009f08:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f0a:	2140      	movs	r1, #64	; 0x40
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	4201      	tst	r1, r0
 8009f10:	d102      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	4301      	orrs	r1, r0
 8009f16:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	d000      	beq.n	8009f1e <HAL_SPI_TransmitReceive+0xba>
 8009f1c:	e0af      	b.n	800a07e <HAL_SPI_TransmitReceive+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f1e:	4642      	mov	r2, r8
 8009f20:	8812      	ldrh	r2, [r2, #0]
 8009f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f24:	4643      	mov	r3, r8
 8009f26:	3302      	adds	r3, #2
 8009f28:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009f2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009f32:	2301      	movs	r3, #1
 8009f34:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f36:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f38:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f3a:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <HAL_SPI_TransmitReceive+0xe4>
 8009f42:	5be3      	ldrh	r3, [r4, r7]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d035      	beq.n	8009fb4 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f48:	4641      	mov	r1, r8
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	689a      	ldr	r2, [r3, #8]
 8009f4e:	4211      	tst	r1, r2
 8009f50:	d010      	beq.n	8009f74 <HAL_SPI_TransmitReceive+0x110>
 8009f52:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009f54:	2a00      	cmp	r2, #0
 8009f56:	d00d      	beq.n	8009f74 <HAL_SPI_TransmitReceive+0x110>
 8009f58:	464a      	mov	r2, r9
 8009f5a:	2a01      	cmp	r2, #1
 8009f5c:	d10a      	bne.n	8009f74 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009f60:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f62:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f64:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f66:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009f68:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009f6a:	3a01      	subs	r2, #1
 8009f6c:	b292      	uxth	r2, r2
 8009f6e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8009f70:	2200      	movs	r2, #0
 8009f72:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f74:	2101      	movs	r1, #1
 8009f76:	0008      	movs	r0, r1
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	4010      	ands	r0, r2
 8009f7c:	4211      	tst	r1, r2
 8009f7e:	d00c      	beq.n	8009f9a <HAL_SPI_TransmitReceive+0x136>
 8009f80:	5be2      	ldrh	r2, [r4, r7]
 8009f82:	2a00      	cmp	r2, #0
 8009f84:	d009      	beq.n	8009f9a <HAL_SPI_TransmitReceive+0x136>
        txallowed = 1U;
 8009f86:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f8e:	3302      	adds	r3, #2
 8009f90:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009f92:	5be3      	ldrh	r3, [r4, r7]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	53e3      	strh	r3, [r4, r7]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f9a:	f7fd fd65 	bl	8007a68 <HAL_GetTick>
 8009f9e:	1b80      	subs	r0, r0, r6
 8009fa0:	42a8      	cmp	r0, r5
 8009fa2:	d3cb      	bcc.n	8009f3c <HAL_SPI_TransmitReceive+0xd8>
 8009fa4:	1c6b      	adds	r3, r5, #1
 8009fa6:	d0c9      	beq.n	8009f3c <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 8009fa8:	2003      	movs	r0, #3
 8009faa:	e779      	b.n	8009ea0 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8009fac:	2002      	movs	r0, #2
 8009fae:	e77d      	b.n	8009eac <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_ERROR;
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	e775      	b.n	8009ea0 <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fb4:	0032      	movs	r2, r6
 8009fb6:	0029      	movs	r1, r5
 8009fb8:	0020      	movs	r0, r4
 8009fba:	f7ff fdbf 	bl	8009b3c <SPI_EndRxTxTransaction>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d100      	bne.n	8009fc4 <HAL_SPI_TransmitReceive+0x160>
 8009fc2:	e76d      	b.n	8009ea0 <HAL_SPI_TransmitReceive+0x3c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fc4:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8009fc6:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fc8:	6623      	str	r3, [r4, #96]	; 0x60
 8009fca:	e769      	b.n	8009ea0 <HAL_SPI_TransmitReceive+0x3c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fcc:	2180      	movs	r1, #128	; 0x80
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	0149      	lsls	r1, r1, #5
 8009fd2:	6858      	ldr	r0, [r3, #4]
 8009fd4:	4301      	orrs	r1, r0
 8009fd6:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fd8:	2140      	movs	r1, #64	; 0x40
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	4201      	tst	r1, r0
 8009fde:	d102      	bne.n	8009fe6 <HAL_SPI_TransmitReceive+0x182>
    __HAL_SPI_ENABLE(hspi);
 8009fe0:	6818      	ldr	r0, [r3, #0]
 8009fe2:	4301      	orrs	r1, r0
 8009fe4:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	d14d      	bne.n	800a086 <HAL_SPI_TransmitReceive+0x222>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009fea:	4642      	mov	r2, r8
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ff0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009ff6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009ffe:	2301      	movs	r3, #1
 800a000:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a002:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a004:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a006:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a008:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d102      	bne.n	800a014 <HAL_SPI_TransmitReceive+0x1b0>
 800a00e:	5be3      	ldrh	r3, [r4, r7]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0cf      	beq.n	8009fb4 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a014:	4641      	mov	r1, r8
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	689a      	ldr	r2, [r3, #8]
 800a01a:	4211      	tst	r1, r2
 800a01c:	d012      	beq.n	800a044 <HAL_SPI_TransmitReceive+0x1e0>
 800a01e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a020:	2a00      	cmp	r2, #0
 800a022:	d00f      	beq.n	800a044 <HAL_SPI_TransmitReceive+0x1e0>
 800a024:	464a      	mov	r2, r9
 800a026:	2a01      	cmp	r2, #1
 800a028:	d10c      	bne.n	800a044 <HAL_SPI_TransmitReceive+0x1e0>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a02a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a02c:	7812      	ldrb	r2, [r2, #0]
 800a02e:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 800a030:	2200      	movs	r2, #0
 800a032:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 800a034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a036:	3301      	adds	r3, #1
 800a038:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a03a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a03c:	3b01      	subs	r3, #1
 800a03e:	b29b      	uxth	r3, r3
 800a040:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	2101      	movs	r1, #1
 800a046:	0008      	movs	r0, r1
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	4010      	ands	r0, r2
 800a04c:	4211      	tst	r1, r2
 800a04e:	d00d      	beq.n	800a06c <HAL_SPI_TransmitReceive+0x208>
 800a050:	5be2      	ldrh	r2, [r4, r7]
 800a052:	2a00      	cmp	r2, #0
 800a054:	d00a      	beq.n	800a06c <HAL_SPI_TransmitReceive+0x208>
        txallowed = 1U;
 800a056:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a058:	7b1b      	ldrb	r3, [r3, #12]
 800a05a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a05c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 800a05e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a060:	3301      	adds	r3, #1
 800a062:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800a064:	5be3      	ldrh	r3, [r4, r7]
 800a066:	3b01      	subs	r3, #1
 800a068:	b29b      	uxth	r3, r3
 800a06a:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a06c:	f7fd fcfc 	bl	8007a68 <HAL_GetTick>
 800a070:	1b80      	subs	r0, r0, r6
 800a072:	42a8      	cmp	r0, r5
 800a074:	d3c8      	bcc.n	800a008 <HAL_SPI_TransmitReceive+0x1a4>
 800a076:	1c6b      	adds	r3, r5, #1
 800a078:	d0c6      	beq.n	800a008 <HAL_SPI_TransmitReceive+0x1a4>
        errorcode = HAL_TIMEOUT;
 800a07a:	2003      	movs	r0, #3
 800a07c:	e710      	b.n	8009ea0 <HAL_SPI_TransmitReceive+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a07e:	2f01      	cmp	r7, #1
 800a080:	d000      	beq.n	800a084 <HAL_SPI_TransmitReceive+0x220>
 800a082:	e756      	b.n	8009f32 <HAL_SPI_TransmitReceive+0xce>
 800a084:	e74b      	b.n	8009f1e <HAL_SPI_TransmitReceive+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a086:	2f01      	cmp	r7, #1
 800a088:	d1b9      	bne.n	8009ffe <HAL_SPI_TransmitReceive+0x19a>
 800a08a:	e7ae      	b.n	8009fea <HAL_SPI_TransmitReceive+0x186>
 800a08c:	ffffefff 	.word	0xffffefff

0800a090 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a090:	223d      	movs	r2, #61	; 0x3d
 800a092:	5c81      	ldrb	r1, [r0, r2]
{
 800a094:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 800a096:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800a098:	2901      	cmp	r1, #1
 800a09a:	d112      	bne.n	800a0c2 <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a09c:	3101      	adds	r1, #1
 800a09e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	4302      	orrs	r2, r0
 800a0a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a8:	4a0e      	ldr	r2, [pc, #56]	; (800a0e4 <HAL_TIM_Base_Start_IT+0x54>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d00a      	beq.n	800a0c4 <HAL_TIM_Base_Start_IT+0x34>
 800a0ae:	4a0e      	ldr	r2, [pc, #56]	; (800a0e8 <HAL_TIM_Base_Start_IT+0x58>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d007      	beq.n	800a0c4 <HAL_TIM_Base_Start_IT+0x34>
 800a0b4:	4a0d      	ldr	r2, [pc, #52]	; (800a0ec <HAL_TIM_Base_Start_IT+0x5c>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d004      	beq.n	800a0c4 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	4302      	orrs	r2, r0
  }

  /* Return function status */
  return HAL_OK;
 800a0be:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800a0c0:	601a      	str	r2, [r3, #0]
}
 800a0c2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	490a      	ldr	r1, [pc, #40]	; (800a0f0 <HAL_TIM_Base_Start_IT+0x60>)
 800a0c8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ca:	2a06      	cmp	r2, #6
 800a0cc:	d008      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x50>
 800a0ce:	3907      	subs	r1, #7
 800a0d0:	428a      	cmp	r2, r1
 800a0d2:	d005      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x50>
      __HAL_TIM_ENABLE(htim);
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800a0d8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e7f0      	b.n	800a0c2 <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e7ee      	b.n	800a0c2 <HAL_TIM_Base_Start_IT+0x32>
 800a0e4:	40012c00 	.word	0x40012c00
 800a0e8:	40000400 	.word	0x40000400
 800a0ec:	40014000 	.word	0x40014000
 800a0f0:	00010007 	.word	0x00010007

0800a0f4 <HAL_TIM_OC_DelayElapsedCallback>:
 800a0f4:	4770      	bx	lr
 800a0f6:	46c0      	nop			; (mov r8, r8)

0800a0f8 <HAL_TIM_IC_CaptureCallback>:
 800a0f8:	4770      	bx	lr
 800a0fa:	46c0      	nop			; (mov r8, r8)

0800a0fc <HAL_TIM_PWM_PulseFinishedCallback>:
 800a0fc:	4770      	bx	lr
 800a0fe:	46c0      	nop			; (mov r8, r8)

0800a100 <HAL_TIM_TriggerCallback>:
 800a100:	4770      	bx	lr
 800a102:	46c0      	nop			; (mov r8, r8)

0800a104 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a104:	2202      	movs	r2, #2
 800a106:	6803      	ldr	r3, [r0, #0]
{
 800a108:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a10a:	6919      	ldr	r1, [r3, #16]
{
 800a10c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a10e:	420a      	tst	r2, r1
 800a110:	d003      	beq.n	800a11a <HAL_TIM_IRQHandler+0x16>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a112:	68d9      	ldr	r1, [r3, #12]
 800a114:	420a      	tst	r2, r1
 800a116:	d000      	beq.n	800a11a <HAL_TIM_IRQHandler+0x16>
 800a118:	e06e      	b.n	800a1f8 <HAL_TIM_IRQHandler+0xf4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a11a:	2204      	movs	r2, #4
 800a11c:	6919      	ldr	r1, [r3, #16]
 800a11e:	420a      	tst	r2, r1
 800a120:	d002      	beq.n	800a128 <HAL_TIM_IRQHandler+0x24>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a122:	68d9      	ldr	r1, [r3, #12]
 800a124:	420a      	tst	r2, r1
 800a126:	d154      	bne.n	800a1d2 <HAL_TIM_IRQHandler+0xce>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a128:	2208      	movs	r2, #8
 800a12a:	6919      	ldr	r1, [r3, #16]
 800a12c:	420a      	tst	r2, r1
 800a12e:	d002      	beq.n	800a136 <HAL_TIM_IRQHandler+0x32>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a130:	68d9      	ldr	r1, [r3, #12]
 800a132:	420a      	tst	r2, r1
 800a134:	d13c      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0xac>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a136:	2210      	movs	r2, #16
 800a138:	6919      	ldr	r1, [r3, #16]
 800a13a:	420a      	tst	r2, r1
 800a13c:	d002      	beq.n	800a144 <HAL_TIM_IRQHandler+0x40>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a13e:	68d9      	ldr	r1, [r3, #12]
 800a140:	420a      	tst	r2, r1
 800a142:	d122      	bne.n	800a18a <HAL_TIM_IRQHandler+0x86>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a144:	2201      	movs	r2, #1
 800a146:	6919      	ldr	r1, [r3, #16]
 800a148:	420a      	tst	r2, r1
 800a14a:	d002      	beq.n	800a152 <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a14c:	68d9      	ldr	r1, [r3, #12]
 800a14e:	420a      	tst	r2, r1
 800a150:	d168      	bne.n	800a224 <HAL_TIM_IRQHandler+0x120>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a152:	2280      	movs	r2, #128	; 0x80
 800a154:	6919      	ldr	r1, [r3, #16]
 800a156:	420a      	tst	r2, r1
 800a158:	d002      	beq.n	800a160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a15a:	68d9      	ldr	r1, [r3, #12]
 800a15c:	420a      	tst	r2, r1
 800a15e:	d168      	bne.n	800a232 <HAL_TIM_IRQHandler+0x12e>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a160:	691a      	ldr	r2, [r3, #16]
 800a162:	05d2      	lsls	r2, r2, #23
 800a164:	d502      	bpl.n	800a16c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a166:	68da      	ldr	r2, [r3, #12]
 800a168:	0612      	lsls	r2, r2, #24
 800a16a:	d46a      	bmi.n	800a242 <HAL_TIM_IRQHandler+0x13e>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a16c:	2240      	movs	r2, #64	; 0x40
 800a16e:	6919      	ldr	r1, [r3, #16]
 800a170:	420a      	tst	r2, r1
 800a172:	d002      	beq.n	800a17a <HAL_TIM_IRQHandler+0x76>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a174:	68d9      	ldr	r1, [r3, #12]
 800a176:	420a      	tst	r2, r1
 800a178:	d16a      	bne.n	800a250 <HAL_TIM_IRQHandler+0x14c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a17a:	2220      	movs	r2, #32
 800a17c:	6919      	ldr	r1, [r3, #16]
 800a17e:	420a      	tst	r2, r1
 800a180:	d002      	beq.n	800a188 <HAL_TIM_IRQHandler+0x84>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a182:	68d9      	ldr	r1, [r3, #12]
 800a184:	420a      	tst	r2, r1
 800a186:	d147      	bne.n	800a218 <HAL_TIM_IRQHandler+0x114>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a188:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a18a:	3a21      	subs	r2, #33	; 0x21
 800a18c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a18e:	3219      	adds	r2, #25
 800a190:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a192:	69da      	ldr	r2, [r3, #28]
 800a194:	23c0      	movs	r3, #192	; 0xc0
 800a196:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a198:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a19a:	421a      	tst	r2, r3
 800a19c:	d168      	bne.n	800a270 <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a19e:	f7ff ffa9 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a2:	0020      	movs	r0, r4
 800a1a4:	f7ff ffaa 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	e7c9      	b.n	800a144 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1b0:	3a11      	subs	r2, #17
 800a1b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1b4:	320d      	adds	r2, #13
 800a1b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1b8:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ba:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1bc:	079b      	lsls	r3, r3, #30
 800a1be:	d154      	bne.n	800a26a <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c0:	f7ff ff98 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c4:	0020      	movs	r0, r4
 800a1c6:	f7ff ff99 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	e7b1      	b.n	800a136 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a1d2:	3a09      	subs	r2, #9
 800a1d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1d6:	3207      	adds	r2, #7
 800a1d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1da:	699a      	ldr	r2, [r3, #24]
 800a1dc:	23c0      	movs	r3, #192	; 0xc0
 800a1de:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a1e0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1e2:	421a      	tst	r2, r3
 800a1e4:	d13e      	bne.n	800a264 <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1e6:	f7ff ff85 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ea:	0020      	movs	r0, r4
 800a1ec:	f7ff ff86 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	e797      	b.n	800a128 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1f8:	3a05      	subs	r2, #5
 800a1fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1fc:	3204      	adds	r2, #4
 800a1fe:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	079b      	lsls	r3, r3, #30
 800a204:	d12b      	bne.n	800a25e <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a206:	f7ff ff75 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a20a:	0020      	movs	r0, r4
 800a20c:	f7ff ff76 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a210:	2300      	movs	r3, #0
 800a212:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	e780      	b.n	800a11a <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a218:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 800a21a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a21c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a21e:	f000 f8e1 	bl	800a3e4 <HAL_TIMEx_CommutCallback>
}
 800a222:	e7b1      	b.n	800a188 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a224:	3a03      	subs	r2, #3
 800a226:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a228:	0020      	movs	r0, r4
 800a22a:	f7fb ff87 	bl	800613c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	e78f      	b.n	800a152 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a232:	3a02      	subs	r2, #2
 800a234:	3aff      	subs	r2, #255	; 0xff
 800a236:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a238:	0020      	movs	r0, r4
 800a23a:	f000 f8d5 	bl	800a3e8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	e78e      	b.n	800a160 <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a242:	4a0d      	ldr	r2, [pc, #52]	; (800a278 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 800a244:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a246:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a248:	f000 f8d0 	bl	800a3ec <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	e78d      	b.n	800a16c <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a250:	3a81      	subs	r2, #129	; 0x81
 800a252:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a254:	0020      	movs	r0, r4
 800a256:	f7ff ff53 	bl	800a100 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	e78d      	b.n	800a17a <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 800a25e:	f7ff ff4b 	bl	800a0f8 <HAL_TIM_IC_CaptureCallback>
 800a262:	e7d5      	b.n	800a210 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800a264:	f7ff ff48 	bl	800a0f8 <HAL_TIM_IC_CaptureCallback>
 800a268:	e7c2      	b.n	800a1f0 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 800a26a:	f7ff ff45 	bl	800a0f8 <HAL_TIM_IC_CaptureCallback>
 800a26e:	e7ac      	b.n	800a1ca <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a270:	f7ff ff42 	bl	800a0f8 <HAL_TIM_IC_CaptureCallback>
 800a274:	e798      	b.n	800a1a8 <HAL_TIM_IRQHandler+0xa4>
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	fffffeff 	.word	0xfffffeff

0800a27c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a27c:	4a1d      	ldr	r2, [pc, #116]	; (800a2f4 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 800a27e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a280:	4290      	cmp	r0, r2
 800a282:	d023      	beq.n	800a2cc <TIM_Base_SetConfig+0x50>
 800a284:	4a1c      	ldr	r2, [pc, #112]	; (800a2f8 <TIM_Base_SetConfig+0x7c>)
 800a286:	4290      	cmp	r0, r2
 800a288:	d017      	beq.n	800a2ba <TIM_Base_SetConfig+0x3e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a28a:	4a1c      	ldr	r2, [pc, #112]	; (800a2fc <TIM_Base_SetConfig+0x80>)
 800a28c:	4290      	cmp	r0, r2
 800a28e:	d018      	beq.n	800a2c2 <TIM_Base_SetConfig+0x46>
 800a290:	4a1b      	ldr	r2, [pc, #108]	; (800a300 <TIM_Base_SetConfig+0x84>)
 800a292:	4290      	cmp	r0, r2
 800a294:	d01e      	beq.n	800a2d4 <TIM_Base_SetConfig+0x58>
 800a296:	4a1b      	ldr	r2, [pc, #108]	; (800a304 <TIM_Base_SetConfig+0x88>)
 800a298:	4290      	cmp	r0, r2
 800a29a:	d01b      	beq.n	800a2d4 <TIM_Base_SetConfig+0x58>
 800a29c:	4a1a      	ldr	r2, [pc, #104]	; (800a308 <TIM_Base_SetConfig+0x8c>)
 800a29e:	4290      	cmp	r0, r2
 800a2a0:	d018      	beq.n	800a2d4 <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2a2:	2280      	movs	r2, #128	; 0x80
 800a2a4:	4393      	bics	r3, r2
 800a2a6:	694a      	ldr	r2, [r1, #20]
 800a2a8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a2aa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2ac:	688b      	ldr	r3, [r1, #8]
 800a2ae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2b0:	680b      	ldr	r3, [r1, #0]
 800a2b2:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	6143      	str	r3, [r0, #20]
}
 800a2b8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2ba:	2270      	movs	r2, #112	; 0x70
 800a2bc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800a2be:	684a      	ldr	r2, [r1, #4]
 800a2c0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2c2:	4a12      	ldr	r2, [pc, #72]	; (800a30c <TIM_Base_SetConfig+0x90>)
 800a2c4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2c6:	68ca      	ldr	r2, [r1, #12]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	e7ea      	b.n	800a2a2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2cc:	2270      	movs	r2, #112	; 0x70
 800a2ce:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800a2d0:	684a      	ldr	r2, [r1, #4]
 800a2d2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2d4:	4a0d      	ldr	r2, [pc, #52]	; (800a30c <TIM_Base_SetConfig+0x90>)
 800a2d6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2d8:	68ca      	ldr	r2, [r1, #12]
 800a2da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2dc:	2280      	movs	r2, #128	; 0x80
 800a2de:	4393      	bics	r3, r2
 800a2e0:	694a      	ldr	r2, [r1, #20]
 800a2e2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a2e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2e6:	688b      	ldr	r3, [r1, #8]
 800a2e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a2ea:	680b      	ldr	r3, [r1, #0]
 800a2ec:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800a2ee:	690b      	ldr	r3, [r1, #16]
 800a2f0:	6303      	str	r3, [r0, #48]	; 0x30
 800a2f2:	e7df      	b.n	800a2b4 <TIM_Base_SetConfig+0x38>
 800a2f4:	40012c00 	.word	0x40012c00
 800a2f8:	40000400 	.word	0x40000400
 800a2fc:	40002000 	.word	0x40002000
 800a300:	40014000 	.word	0x40014000
 800a304:	40014400 	.word	0x40014400
 800a308:	40014800 	.word	0x40014800
 800a30c:	fffffcff 	.word	0xfffffcff

0800a310 <HAL_TIM_Base_Init>:
{
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800a314:	d02a      	beq.n	800a36c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a316:	233d      	movs	r3, #61	; 0x3d
 800a318:	5cc3      	ldrb	r3, [r0, r3]
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d020      	beq.n	800a362 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a320:	2302      	movs	r3, #2
 800a322:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a324:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800a326:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a328:	c901      	ldmia	r1!, {r0}
 800a32a:	f7ff ffa7 	bl	800a27c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a32e:	2301      	movs	r3, #1
 800a330:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 800a332:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a334:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a336:	3a0a      	subs	r2, #10
 800a338:	54a3      	strb	r3, [r4, r2]
 800a33a:	3201      	adds	r2, #1
 800a33c:	54a3      	strb	r3, [r4, r2]
 800a33e:	3201      	adds	r2, #1
 800a340:	54a3      	strb	r3, [r4, r2]
 800a342:	3201      	adds	r2, #1
 800a344:	54a3      	strb	r3, [r4, r2]
 800a346:	3201      	adds	r2, #1
 800a348:	54a3      	strb	r3, [r4, r2]
 800a34a:	3201      	adds	r2, #1
 800a34c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a34e:	3201      	adds	r2, #1
 800a350:	54a3      	strb	r3, [r4, r2]
 800a352:	3201      	adds	r2, #1
 800a354:	54a3      	strb	r3, [r4, r2]
 800a356:	3201      	adds	r2, #1
 800a358:	54a3      	strb	r3, [r4, r2]
 800a35a:	3201      	adds	r2, #1
 800a35c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800a35e:	5563      	strb	r3, [r4, r5]
}
 800a360:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800a362:	333c      	adds	r3, #60	; 0x3c
 800a364:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800a366:	f7fd f919 	bl	800759c <HAL_TIM_Base_MspInit>
 800a36a:	e7d9      	b.n	800a320 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800a36c:	2001      	movs	r0, #1
 800a36e:	e7f7      	b.n	800a360 <HAL_TIM_Base_Init+0x50>

0800a370 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a370:	233c      	movs	r3, #60	; 0x3c
{
 800a372:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800a374:	5cc3      	ldrb	r3, [r0, r3]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d02a      	beq.n	800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a37a:	233d      	movs	r3, #61	; 0x3d
 800a37c:	2202      	movs	r2, #2
 800a37e:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a380:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a382:	4d14      	ldr	r5, [pc, #80]	; (800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 800a384:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a386:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a388:	42aa      	cmp	r2, r5
 800a38a:	d017      	beq.n	800a3bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a38c:	2570      	movs	r5, #112	; 0x70
 800a38e:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a390:	680d      	ldr	r5, [r1, #0]
 800a392:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a394:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a396:	4b10      	ldr	r3, [pc, #64]	; (800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800a398:	429a      	cmp	r2, r3
 800a39a:	d002      	beq.n	800a3a2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800a39c:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d104      	bne.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3a2:	2380      	movs	r3, #128	; 0x80
 800a3a4:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3a6:	688b      	ldr	r3, [r1, #8]
 800a3a8:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3aa:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3ac:	233d      	movs	r3, #61	; 0x3d
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800a3b8:	2000      	movs	r0, #0
}
 800a3ba:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3bc:	4d08      	ldr	r5, [pc, #32]	; (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800a3be:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3c0:	684d      	ldr	r5, [r1, #4]
 800a3c2:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3c4:	2570      	movs	r5, #112	; 0x70
 800a3c6:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3c8:	680d      	ldr	r5, [r1, #0]
 800a3ca:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800a3cc:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3ce:	e7e8      	b.n	800a3a2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 800a3d0:	2002      	movs	r0, #2
 800a3d2:	e7f2      	b.n	800a3ba <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800a3d4:	40012c00 	.word	0x40012c00
 800a3d8:	40000400 	.word	0x40000400
 800a3dc:	40014000 	.word	0x40014000
 800a3e0:	ff0fffff 	.word	0xff0fffff

0800a3e4 <HAL_TIMEx_CommutCallback>:
 800a3e4:	4770      	bx	lr
 800a3e6:	46c0      	nop			; (mov r8, r8)

0800a3e8 <HAL_TIMEx_BreakCallback>:
 800a3e8:	4770      	bx	lr
 800a3ea:	46c0      	nop			; (mov r8, r8)

0800a3ec <HAL_TIMEx_Break2Callback>:
 800a3ec:	4770      	bx	lr
 800a3ee:	46c0      	nop			; (mov r8, r8)

0800a3f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3f0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3f2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3fc:	6801      	ldr	r1, [r0, #0]
 800a3fe:	4d13      	ldr	r5, [pc, #76]	; (800a44c <UART_EndRxTransfer+0x5c>)
 800a400:	680b      	ldr	r3, [r1, #0]
 800a402:	402b      	ands	r3, r5
 800a404:	600b      	str	r3, [r1, #0]
 800a406:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a40a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a40e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a412:	6802      	ldr	r2, [r0, #0]
 800a414:	4c0e      	ldr	r4, [pc, #56]	; (800a450 <UART_EndRxTransfer+0x60>)
 800a416:	6893      	ldr	r3, [r2, #8]
 800a418:	4023      	ands	r3, r4
 800a41a:	6093      	str	r3, [r2, #8]
 800a41c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a420:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a422:	2b01      	cmp	r3, #1
 800a424:	d10a      	bne.n	800a43c <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a426:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a42a:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a42e:	2410      	movs	r4, #16
 800a430:	6802      	ldr	r2, [r0, #0]
 800a432:	6813      	ldr	r3, [r2, #0]
 800a434:	43a3      	bics	r3, r4
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a43c:	238c      	movs	r3, #140	; 0x8c
 800a43e:	2220      	movs	r2, #32
 800a440:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a442:	2300      	movs	r3, #0
 800a444:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a446:	6743      	str	r3, [r0, #116]	; 0x74
}
 800a448:	bd30      	pop	{r4, r5, pc}
 800a44a:	46c0      	nop			; (mov r8, r8)
 800a44c:	fffffedf 	.word	0xfffffedf
 800a450:	effffffe 	.word	0xeffffffe

0800a454 <HAL_UART_RxHalfCpltCallback>:
 800a454:	4770      	bx	lr
 800a456:	46c0      	nop			; (mov r8, r8)

0800a458 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a45a:	2188      	movs	r1, #136	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a45c:	238c      	movs	r3, #140	; 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a45e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a460:	5865      	ldr	r5, [r4, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a462:	58e0      	ldr	r0, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	0612      	lsls	r2, r2, #24
 800a46a:	d501      	bpl.n	800a470 <UART_DMAError+0x18>
 800a46c:	2d21      	cmp	r5, #33	; 0x21
 800a46e:	d014      	beq.n	800a49a <UART_DMAError+0x42>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	065b      	lsls	r3, r3, #25
 800a474:	d501      	bpl.n	800a47a <UART_DMAError+0x22>
 800a476:	2822      	cmp	r0, #34	; 0x22
 800a478:	d008      	beq.n	800a48c <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a47a:	2290      	movs	r2, #144	; 0x90
 800a47c:	2110      	movs	r1, #16
 800a47e:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a480:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a482:	430b      	orrs	r3, r1
 800a484:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 800a486:	f7fb fe17 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->RxXferCount = 0U;
 800a48c:	235e      	movs	r3, #94	; 0x5e
 800a48e:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 800a490:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 800a492:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 800a494:	f7ff ffac 	bl	800a3f0 <UART_EndRxTransfer>
 800a498:	e7ef      	b.n	800a47a <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800a49a:	2356      	movs	r3, #86	; 0x56
 800a49c:	2200      	movs	r2, #0
 800a49e:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4a4:	3201      	adds	r2, #1
 800a4a6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a4aa:	27c0      	movs	r7, #192	; 0xc0
 800a4ac:	6825      	ldr	r5, [r4, #0]
 800a4ae:	682b      	ldr	r3, [r5, #0]
 800a4b0:	43bb      	bics	r3, r7
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4b8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4bc:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a4c0:	6822      	ldr	r2, [r4, #0]
 800a4c2:	4e05      	ldr	r6, [pc, #20]	; (800a4d8 <UART_DMAError+0x80>)
 800a4c4:	6893      	ldr	r3, [r2, #8]
 800a4c6:	4033      	ands	r3, r6
 800a4c8:	6093      	str	r3, [r2, #8]
 800a4ca:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 800a4ce:	2320      	movs	r3, #32
 800a4d0:	5063      	str	r3, [r4, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a4d2:	6823      	ldr	r3, [r4, #0]
}
 800a4d4:	e7cc      	b.n	800a470 <UART_DMAError+0x18>
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	ff7fffff 	.word	0xff7fffff

0800a4dc <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	225e      	movs	r2, #94	; 0x5e
{
 800a4e0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800a4e4:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800a4e6:	3a08      	subs	r2, #8
 800a4e8:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4ea:	f7fb fde5 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ee:	bd10      	pop	{r4, pc}

0800a4f0 <HAL_UARTEx_RxEventCallback>:
}
 800a4f0:	4770      	bx	lr
 800a4f2:	46c0      	nop			; (mov r8, r8)

0800a4f4 <HAL_UART_IRQHandler>:
{
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	4645      	mov	r5, r8
 800a4f8:	46de      	mov	lr, fp
 800a4fa:	4657      	mov	r7, sl
 800a4fc:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a4fe:	6802      	ldr	r2, [r0, #0]
{
 800a500:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a502:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a504:	4db3      	ldr	r5, [pc, #716]	; (800a7d4 <HAL_UART_IRQHandler+0x2e0>)
{
 800a506:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a508:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a50a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800a50c:	422b      	tst	r3, r5
 800a50e:	d100      	bne.n	800a512 <HAL_UART_IRQHandler+0x1e>
 800a510:	e0cb      	b.n	800a6aa <HAL_UART_IRQHandler+0x1b6>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a512:	4eb1      	ldr	r6, [pc, #708]	; (800a7d8 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a514:	4db1      	ldr	r5, [pc, #708]	; (800a7dc <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a516:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a518:	4005      	ands	r5, r0
 800a51a:	4335      	orrs	r5, r6
 800a51c:	d157      	bne.n	800a5ce <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a51e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800a520:	2d01      	cmp	r5, #1
 800a522:	d026      	beq.n	800a572 <HAL_UART_IRQHandler+0x7e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a524:	2580      	movs	r5, #128	; 0x80
 800a526:	036d      	lsls	r5, r5, #13
 800a528:	422b      	tst	r3, r5
 800a52a:	d002      	beq.n	800a532 <HAL_UART_IRQHandler+0x3e>
 800a52c:	024e      	lsls	r6, r1, #9
 800a52e:	d500      	bpl.n	800a532 <HAL_UART_IRQHandler+0x3e>
 800a530:	e0e2      	b.n	800a6f8 <HAL_UART_IRQHandler+0x204>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a532:	2280      	movs	r2, #128	; 0x80
 800a534:	421a      	tst	r2, r3
 800a536:	d006      	beq.n	800a546 <HAL_UART_IRQHandler+0x52>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a538:	2580      	movs	r5, #128	; 0x80
 800a53a:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a53c:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a53e:	4029      	ands	r1, r5
 800a540:	430a      	orrs	r2, r1
 800a542:	d000      	beq.n	800a546 <HAL_UART_IRQHandler+0x52>
 800a544:	e0d1      	b.n	800a6ea <HAL_UART_IRQHandler+0x1f6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a546:	2240      	movs	r2, #64	; 0x40
 800a548:	421a      	tst	r2, r3
 800a54a:	d002      	beq.n	800a552 <HAL_UART_IRQHandler+0x5e>
 800a54c:	4202      	tst	r2, r0
 800a54e:	d000      	beq.n	800a552 <HAL_UART_IRQHandler+0x5e>
 800a550:	e0db      	b.n	800a70a <HAL_UART_IRQHandler+0x216>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a552:	021a      	lsls	r2, r3, #8
 800a554:	d502      	bpl.n	800a55c <HAL_UART_IRQHandler+0x68>
 800a556:	0042      	lsls	r2, r0, #1
 800a558:	d500      	bpl.n	800a55c <HAL_UART_IRQHandler+0x68>
 800a55a:	e0ea      	b.n	800a732 <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a55c:	01db      	lsls	r3, r3, #7
 800a55e:	d502      	bpl.n	800a566 <HAL_UART_IRQHandler+0x72>
 800a560:	2800      	cmp	r0, #0
 800a562:	da00      	bge.n	800a566 <HAL_UART_IRQHandler+0x72>
 800a564:	e12d      	b.n	800a7c2 <HAL_UART_IRQHandler+0x2ce>
}
 800a566:	bcf0      	pop	{r4, r5, r6, r7}
 800a568:	46bb      	mov	fp, r7
 800a56a:	46b2      	mov	sl, r6
 800a56c:	46a9      	mov	r9, r5
 800a56e:	46a0      	mov	r8, r4
 800a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a572:	2610      	movs	r6, #16
 800a574:	421e      	tst	r6, r3
 800a576:	d0d5      	beq.n	800a524 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a578:	4206      	tst	r6, r0
 800a57a:	d0d3      	beq.n	800a524 <HAL_UART_IRQHandler+0x30>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a57c:	2340      	movs	r3, #64	; 0x40
 800a57e:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a580:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a582:	6892      	ldr	r2, [r2, #8]
 800a584:	4010      	ands	r0, r2
 800a586:	4213      	tst	r3, r2
 800a588:	d100      	bne.n	800a58c <HAL_UART_IRQHandler+0x98>
 800a58a:	e0dd      	b.n	800a748 <HAL_UART_IRQHandler+0x254>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a58c:	2280      	movs	r2, #128	; 0x80
 800a58e:	4694      	mov	ip, r2
 800a590:	58a2      	ldr	r2, [r4, r2]
 800a592:	6810      	ldr	r0, [r2, #0]
 800a594:	6842      	ldr	r2, [r0, #4]
 800a596:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a598:	2a00      	cmp	r2, #0
 800a59a:	d0e4      	beq.n	800a566 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a59c:	215c      	movs	r1, #92	; 0x5c
 800a59e:	468b      	mov	fp, r1
 800a5a0:	5a61      	ldrh	r1, [r4, r1]
 800a5a2:	4291      	cmp	r1, r2
 800a5a4:	d9df      	bls.n	800a566 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 800a5a6:	275e      	movs	r7, #94	; 0x5e
 800a5a8:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	0017      	movs	r7, r2
 800a5ae:	6800      	ldr	r0, [r0, #0]
 800a5b0:	4007      	ands	r7, r0
 800a5b2:	46b8      	mov	r8, r7
 800a5b4:	4202      	tst	r2, r0
 800a5b6:	d100      	bne.n	800a5ba <HAL_UART_IRQHandler+0xc6>
 800a5b8:	e118      	b.n	800a7ec <HAL_UART_IRQHandler+0x2f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5be:	335c      	adds	r3, #92	; 0x5c
 800a5c0:	5ae3      	ldrh	r3, [r4, r3]
 800a5c2:	0020      	movs	r0, r4
 800a5c4:	1ac9      	subs	r1, r1, r3
 800a5c6:	b289      	uxth	r1, r1
 800a5c8:	f7ff ff92 	bl	800a4f0 <HAL_UARTEx_RxEventCallback>
 800a5cc:	e7cb      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5ce:	2501      	movs	r5, #1
 800a5d0:	421d      	tst	r5, r3
 800a5d2:	d008      	beq.n	800a5e6 <HAL_UART_IRQHandler+0xf2>
 800a5d4:	05c7      	lsls	r7, r0, #23
 800a5d6:	d506      	bpl.n	800a5e6 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5d8:	2790      	movs	r7, #144	; 0x90
 800a5da:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5dc:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5de:	59e7      	ldr	r7, [r4, r7]
 800a5e0:	433d      	orrs	r5, r7
 800a5e2:	4667      	mov	r7, ip
 800a5e4:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5e6:	2502      	movs	r5, #2
 800a5e8:	421d      	tst	r5, r3
 800a5ea:	d06d      	beq.n	800a6c8 <HAL_UART_IRQHandler+0x1d4>
 800a5ec:	07cf      	lsls	r7, r1, #31
 800a5ee:	d50b      	bpl.n	800a608 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5f0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5f2:	358e      	adds	r5, #142	; 0x8e
 800a5f4:	2704      	movs	r7, #4
 800a5f6:	46ac      	mov	ip, r5
 800a5f8:	5965      	ldr	r5, [r4, r5]
 800a5fa:	46b8      	mov	r8, r7
 800a5fc:	433d      	orrs	r5, r7
 800a5fe:	4667      	mov	r7, ip
 800a600:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a602:	4645      	mov	r5, r8
 800a604:	421d      	tst	r5, r3
 800a606:	d163      	bne.n	800a6d0 <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a608:	2708      	movs	r7, #8
 800a60a:	421f      	tst	r7, r3
 800a60c:	d008      	beq.n	800a620 <HAL_UART_IRQHandler+0x12c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a60e:	2520      	movs	r5, #32
 800a610:	4005      	ands	r5, r0
 800a612:	4335      	orrs	r5, r6
 800a614:	d004      	beq.n	800a620 <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a616:	2690      	movs	r6, #144	; 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a618:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a61a:	59a5      	ldr	r5, [r4, r6]
 800a61c:	433d      	orrs	r5, r7
 800a61e:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a620:	2580      	movs	r5, #128	; 0x80
 800a622:	012d      	lsls	r5, r5, #4
 800a624:	422b      	tst	r3, r5
 800a626:	d007      	beq.n	800a638 <HAL_UART_IRQHandler+0x144>
 800a628:	0146      	lsls	r6, r0, #5
 800a62a:	d505      	bpl.n	800a638 <HAL_UART_IRQHandler+0x144>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a62c:	2690      	movs	r6, #144	; 0x90
 800a62e:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a630:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a632:	59a5      	ldr	r5, [r4, r6]
 800a634:	433d      	orrs	r5, r7
 800a636:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a638:	2590      	movs	r5, #144	; 0x90
 800a63a:	5965      	ldr	r5, [r4, r5]
 800a63c:	2d00      	cmp	r5, #0
 800a63e:	d100      	bne.n	800a642 <HAL_UART_IRQHandler+0x14e>
 800a640:	e791      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a642:	2520      	movs	r5, #32
 800a644:	421d      	tst	r5, r3
 800a646:	d005      	beq.n	800a654 <HAL_UART_IRQHandler+0x160>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a648:	2380      	movs	r3, #128	; 0x80
 800a64a:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a64c:	4005      	ands	r5, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a64e:	400b      	ands	r3, r1
 800a650:	431d      	orrs	r5, r3
 800a652:	d172      	bne.n	800a73a <HAL_UART_IRQHandler+0x246>
      errorcode = huart->ErrorCode;
 800a654:	2690      	movs	r6, #144	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a656:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a658:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 800a65a:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a65c:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a65e:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a660:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 800a662:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a664:	431d      	orrs	r5, r3
 800a666:	d100      	bne.n	800a66a <HAL_UART_IRQHandler+0x176>
 800a668:	e0af      	b.n	800a7ca <HAL_UART_IRQHandler+0x2d6>
        UART_EndRxTransfer(huart);
 800a66a:	f7ff fec1 	bl	800a3f0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	421f      	tst	r7, r3
 800a674:	d045      	beq.n	800a702 <HAL_UART_IRQHandler+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a676:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a67a:	2301      	movs	r3, #1
 800a67c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a680:	6822      	ldr	r2, [r4, #0]
 800a682:	6893      	ldr	r3, [r2, #8]
 800a684:	43bb      	bics	r3, r7
 800a686:	6093      	str	r3, [r2, #8]
 800a688:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800a68c:	2580      	movs	r5, #128	; 0x80
 800a68e:	5960      	ldr	r0, [r4, r5]
 800a690:	2800      	cmp	r0, #0
 800a692:	d036      	beq.n	800a702 <HAL_UART_IRQHandler+0x20e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a694:	4b52      	ldr	r3, [pc, #328]	; (800a7e0 <HAL_UART_IRQHandler+0x2ec>)
 800a696:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a698:	f7fd fedc 	bl	8008454 <HAL_DMA_Abort_IT>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d100      	bne.n	800a6a2 <HAL_UART_IRQHandler+0x1ae>
 800a6a0:	e761      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6a2:	5960      	ldr	r0, [r4, r5]
 800a6a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a6a6:	4798      	blx	r3
 800a6a8:	e75d      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6aa:	2520      	movs	r5, #32
 800a6ac:	421d      	tst	r5, r3
 800a6ae:	d100      	bne.n	800a6b2 <HAL_UART_IRQHandler+0x1be>
 800a6b0:	e735      	b.n	800a51e <HAL_UART_IRQHandler+0x2a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6b2:	2680      	movs	r6, #128	; 0x80
 800a6b4:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6b6:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6b8:	400e      	ands	r6, r1
 800a6ba:	4335      	orrs	r5, r6
 800a6bc:	d100      	bne.n	800a6c0 <HAL_UART_IRQHandler+0x1cc>
 800a6be:	e72e      	b.n	800a51e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800a6c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d115      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x1fe>
 800a6c6:	e74e      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6c8:	075d      	lsls	r5, r3, #29
 800a6ca:	d59d      	bpl.n	800a608 <HAL_UART_IRQHandler+0x114>
 800a6cc:	07cd      	lsls	r5, r1, #31
 800a6ce:	d59b      	bpl.n	800a608 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6d0:	2504      	movs	r5, #4
 800a6d2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6d4:	358c      	adds	r5, #140	; 0x8c
 800a6d6:	46a9      	mov	r9, r5
 800a6d8:	5965      	ldr	r5, [r4, r5]
 800a6da:	46a8      	mov	r8, r5
 800a6dc:	2502      	movs	r5, #2
 800a6de:	4647      	mov	r7, r8
 800a6e0:	432f      	orrs	r7, r5
 800a6e2:	003d      	movs	r5, r7
 800a6e4:	464f      	mov	r7, r9
 800a6e6:	51e5      	str	r5, [r4, r7]
 800a6e8:	e78e      	b.n	800a608 <HAL_UART_IRQHandler+0x114>
    if (huart->TxISR != NULL)
 800a6ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d100      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x1fe>
 800a6f0:	e739      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 800a6f2:	0020      	movs	r0, r4
 800a6f4:	4798      	blx	r3
 800a6f6:	e736      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_WakeupCallback(huart);
 800a6f8:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a6fa:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a6fc:	f000 fcca 	bl	800b094 <HAL_UARTEx_WakeupCallback>
    return;
 800a700:	e731      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
            HAL_UART_ErrorCallback(huart);
 800a702:	0020      	movs	r0, r4
 800a704:	f7fb fcd8 	bl	80060b8 <HAL_UART_ErrorCallback>
 800a708:	e72d      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a70a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a70e:	2301      	movs	r3, #1
 800a710:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a714:	6821      	ldr	r1, [r4, #0]
 800a716:	680b      	ldr	r3, [r1, #0]
 800a718:	4393      	bics	r3, r2
 800a71a:	600b      	str	r3, [r1, #0]
 800a71c:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a720:	2388      	movs	r3, #136	; 0x88
 800a722:	3a20      	subs	r2, #32
 800a724:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a726:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a728:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800a72a:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800a72c:	f7fb fcc2 	bl	80060b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a730:	e719      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a732:	0020      	movs	r0, r4
 800a734:	f000 fcb2 	bl	800b09c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800a738:	e715      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
        if (huart->RxISR != NULL)
 800a73a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d089      	beq.n	800a654 <HAL_UART_IRQHandler+0x160>
          huart->RxISR(huart);
 800a740:	0020      	movs	r0, r4
 800a742:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a744:	6822      	ldr	r2, [r4, #0]
 800a746:	e785      	b.n	800a654 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a748:	235c      	movs	r3, #92	; 0x5c
 800a74a:	225e      	movs	r2, #94	; 0x5e
 800a74c:	5ae1      	ldrh	r1, [r4, r3]
 800a74e:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 800a750:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a752:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 800a754:	2a00      	cmp	r2, #0
 800a756:	d100      	bne.n	800a75a <HAL_UART_IRQHandler+0x266>
 800a758:	e705      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a75a:	1ac9      	subs	r1, r1, r3
 800a75c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a75e:	2900      	cmp	r1, #0
 800a760:	d100      	bne.n	800a764 <HAL_UART_IRQHandler+0x270>
 800a762:	e700      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a764:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a768:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a76c:	6822      	ldr	r2, [r4, #0]
 800a76e:	6813      	ldr	r3, [r2, #0]
 800a770:	4698      	mov	r8, r3
 800a772:	4647      	mov	r7, r8
 800a774:	4b1b      	ldr	r3, [pc, #108]	; (800a7e4 <HAL_UART_IRQHandler+0x2f0>)
 800a776:	401f      	ands	r7, r3
 800a778:	6017      	str	r7, [r2, #0]
 800a77a:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a77e:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a782:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a786:	6822      	ldr	r2, [r4, #0]
 800a788:	6893      	ldr	r3, [r2, #8]
 800a78a:	4698      	mov	r8, r3
 800a78c:	4647      	mov	r7, r8
 800a78e:	4b16      	ldr	r3, [pc, #88]	; (800a7e8 <HAL_UART_IRQHandler+0x2f4>)
 800a790:	401f      	ands	r7, r3
 800a792:	6097      	str	r7, [r2, #8]
 800a794:	f389 8810 	msr	PRIMASK, r9
        huart->RxState = HAL_UART_STATE_READY;
 800a798:	238c      	movs	r3, #140	; 0x8c
 800a79a:	2220      	movs	r2, #32
 800a79c:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a79e:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800a7a0:	6760      	str	r0, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7a2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7a6:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	6813      	ldr	r3, [r2, #0]
 800a7ae:	43b3      	bics	r3, r6
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7b6:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7b8:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7ba:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7bc:	f7ff fe98 	bl	800a4f0 <HAL_UARTEx_RxEventCallback>
 800a7c0:	e6d1      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a7c2:	0020      	movs	r0, r4
 800a7c4:	f000 fc68 	bl	800b098 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800a7c8:	e6cd      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
        HAL_UART_ErrorCallback(huart);
 800a7ca:	f7fb fc75 	bl	80060b8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ce:	51a5      	str	r5, [r4, r6]
 800a7d0:	e6c9      	b.n	800a566 <HAL_UART_IRQHandler+0x72>
 800a7d2:	46c0      	nop			; (mov r8, r8)
 800a7d4:	0000080f 	.word	0x0000080f
 800a7d8:	10000001 	.word	0x10000001
 800a7dc:	04000120 	.word	0x04000120
 800a7e0:	0800a4dd 	.word	0x0800a4dd
 800a7e4:	fffffedf 	.word	0xfffffedf
 800a7e8:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ec:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7f0:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	4f17      	ldr	r7, [pc, #92]	; (800a854 <HAL_UART_IRQHandler+0x360>)
 800a7f8:	6801      	ldr	r1, [r0, #0]
 800a7fa:	4039      	ands	r1, r7
 800a7fc:	6001      	str	r1, [r0, #0]
 800a7fe:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a802:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a806:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a80a:	6820      	ldr	r0, [r4, #0]
 800a80c:	6881      	ldr	r1, [r0, #8]
 800a80e:	43a9      	bics	r1, r5
 800a810:	6081      	str	r1, [r0, #8]
 800a812:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a816:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a81a:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81e:	6820      	ldr	r0, [r4, #0]
 800a820:	6881      	ldr	r1, [r0, #8]
 800a822:	4399      	bics	r1, r3
 800a824:	6081      	str	r1, [r0, #8]
 800a826:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 800a82a:	334c      	adds	r3, #76	; 0x4c
 800a82c:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a82e:	4643      	mov	r3, r8
 800a830:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a832:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a836:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a83a:	6822      	ldr	r2, [r4, #0]
 800a83c:	6813      	ldr	r3, [r2, #0]
 800a83e:	43b3      	bics	r3, r6
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a846:	4663      	mov	r3, ip
 800a848:	58e0      	ldr	r0, [r4, r3]
 800a84a:	f7fd fdc5 	bl	80083d8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a84e:	465b      	mov	r3, fp
 800a850:	5ae1      	ldrh	r1, [r4, r3]
 800a852:	e6b2      	b.n	800a5ba <HAL_UART_IRQHandler+0xc6>
 800a854:	fffffeff 	.word	0xfffffeff

0800a858 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a858:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a85a:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800a85c:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a85e:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a860:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a862:	2b01      	cmp	r3, #1
 800a864:	d002      	beq.n	800a86c <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800a866:	f7ff fdf5 	bl	800a454 <HAL_UART_RxHalfCpltCallback>
}
 800a86a:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a86c:	335b      	adds	r3, #91	; 0x5b
 800a86e:	5ac1      	ldrh	r1, [r0, r3]
 800a870:	0849      	lsrs	r1, r1, #1
 800a872:	f7ff fe3d 	bl	800a4f0 <HAL_UARTEx_RxEventCallback>
 800a876:	e7f8      	b.n	800a86a <UART_DMARxHalfCplt+0x12>

0800a878 <UART_DMAReceiveCplt>:
{
 800a878:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a87a:	681b      	ldr	r3, [r3, #0]
{
 800a87c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	2320      	movs	r3, #32
 800a882:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a884:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a886:	4011      	ands	r1, r2
 800a888:	4213      	tst	r3, r2
 800a88a:	d127      	bne.n	800a8dc <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 800a88c:	225e      	movs	r2, #94	; 0x5e
 800a88e:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a890:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a894:	3a5d      	subs	r2, #93	; 0x5d
 800a896:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a89a:	6804      	ldr	r4, [r0, #0]
 800a89c:	4e1c      	ldr	r6, [pc, #112]	; (800a910 <UART_DMAReceiveCplt+0x98>)
 800a89e:	6821      	ldr	r1, [r4, #0]
 800a8a0:	4031      	ands	r1, r6
 800a8a2:	6021      	str	r1, [r4, #0]
 800a8a4:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ac:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b0:	6804      	ldr	r4, [r0, #0]
 800a8b2:	68a1      	ldr	r1, [r4, #8]
 800a8b4:	4391      	bics	r1, r2
 800a8b6:	60a1      	str	r1, [r4, #8]
 800a8b8:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8bc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8c0:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8c4:	2540      	movs	r5, #64	; 0x40
 800a8c6:	6801      	ldr	r1, [r0, #0]
 800a8c8:	688a      	ldr	r2, [r1, #8]
 800a8ca:	43aa      	bics	r2, r5
 800a8cc:	608a      	str	r2, [r1, #8]
 800a8ce:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 800a8d2:	228c      	movs	r2, #140	; 0x8c
 800a8d4:	5083      	str	r3, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d00c      	beq.n	800a8f6 <UART_DMAReceiveCplt+0x7e>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d002      	beq.n	800a8ec <UART_DMAReceiveCplt+0x74>
    HAL_UART_RxCpltCallback(huart);
 800a8e6:	f7fb fd43 	bl	8006370 <HAL_UART_RxCpltCallback>
}
 800a8ea:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ec:	335b      	adds	r3, #91	; 0x5b
 800a8ee:	5ac1      	ldrh	r1, [r0, r3]
 800a8f0:	f7ff fdfe 	bl	800a4f0 <HAL_UARTEx_RxEventCallback>
 800a8f4:	e7f9      	b.n	800a8ea <UART_DMAReceiveCplt+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8fa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8fe:	2410      	movs	r4, #16
 800a900:	6802      	ldr	r2, [r0, #0]
 800a902:	6813      	ldr	r3, [r2, #0]
 800a904:	43a3      	bics	r3, r4
 800a906:	6013      	str	r3, [r2, #0]
 800a908:	f381 8810 	msr	PRIMASK, r1
}
 800a90c:	e7e6      	b.n	800a8dc <UART_DMAReceiveCplt+0x64>
 800a90e:	46c0      	nop			; (mov r8, r8)
 800a910:	fffffeff 	.word	0xfffffeff

0800a914 <UART_SetConfig>:
{
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a918:	6925      	ldr	r5, [r4, #16]
 800a91a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a91c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a91e:	432a      	orrs	r2, r5
 800a920:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a922:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a924:	69c0      	ldr	r0, [r0, #28]
 800a926:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a928:	4d4d      	ldr	r5, [pc, #308]	; (800aa60 <UART_SetConfig+0x14c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a92a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a92c:	4029      	ands	r1, r5
 800a92e:	430a      	orrs	r2, r1
 800a930:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	494b      	ldr	r1, [pc, #300]	; (800aa64 <UART_SetConfig+0x150>)
    tmpreg |= huart->Init.OneBitSampling;
 800a936:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a938:	400a      	ands	r2, r1
 800a93a:	68e1      	ldr	r1, [r4, #12]
 800a93c:	430a      	orrs	r2, r1
 800a93e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a940:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a942:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800a944:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a946:	4d48      	ldr	r5, [pc, #288]	; (800aa68 <UART_SetConfig+0x154>)
 800a948:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a94a:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a94c:	430a      	orrs	r2, r1
 800a94e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a954:	43aa      	bics	r2, r5
 800a956:	430a      	orrs	r2, r1
 800a958:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a95a:	4a44      	ldr	r2, [pc, #272]	; (800aa6c <UART_SetConfig+0x158>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d035      	beq.n	800a9cc <UART_SetConfig+0xb8>
 800a960:	4a43      	ldr	r2, [pc, #268]	; (800aa70 <UART_SetConfig+0x15c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00c      	beq.n	800a980 <UART_SetConfig+0x6c>
 800a966:	4a43      	ldr	r2, [pc, #268]	; (800aa74 <UART_SetConfig+0x160>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d036      	beq.n	800a9da <UART_SetConfig+0xc6>
 800a96c:	4a42      	ldr	r2, [pc, #264]	; (800aa78 <UART_SetConfig+0x164>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d033      	beq.n	800a9da <UART_SetConfig+0xc6>
    switch (clocksource)
 800a972:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800a974:	4b41      	ldr	r3, [pc, #260]	; (800aa7c <UART_SetConfig+0x168>)
 800a976:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800a97c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800a97e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a980:	4b3f      	ldr	r3, [pc, #252]	; (800aa80 <UART_SetConfig+0x16c>)
 800a982:	4a40      	ldr	r2, [pc, #256]	; (800aa84 <UART_SetConfig+0x170>)
 800a984:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800a986:	230c      	movs	r3, #12
 800a988:	402b      	ands	r3, r5
 800a98a:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a98c:	2380      	movs	r3, #128	; 0x80
 800a98e:	021b      	lsls	r3, r3, #8
 800a990:	4298      	cmp	r0, r3
 800a992:	d02f      	beq.n	800a9f4 <UART_SetConfig+0xe0>
    switch (clocksource)
 800a994:	2a04      	cmp	r2, #4
 800a996:	d056      	beq.n	800aa46 <UART_SetConfig+0x132>
 800a998:	d851      	bhi.n	800aa3e <UART_SetConfig+0x12a>
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	d021      	beq.n	800a9e2 <UART_SetConfig+0xce>
 800a99e:	2a02      	cmp	r2, #2
 800a9a0:	d1e7      	bne.n	800a972 <UART_SetConfig+0x5e>
        pclk = (uint32_t) HSI_VALUE;
 800a9a2:	4839      	ldr	r0, [pc, #228]	; (800aa88 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9a4:	4b39      	ldr	r3, [pc, #228]	; (800aa8c <UART_SetConfig+0x178>)
 800a9a6:	0049      	lsls	r1, r1, #1
 800a9a8:	5ac9      	ldrh	r1, [r1, r3]
 800a9aa:	f7f5 fbc9 	bl	8000140 <__udivsi3>
 800a9ae:	6865      	ldr	r5, [r4, #4]
 800a9b0:	086b      	lsrs	r3, r5, #1
 800a9b2:	18c0      	adds	r0, r0, r3
 800a9b4:	0029      	movs	r1, r5
 800a9b6:	f7f5 fbc3 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9ba:	0002      	movs	r2, r0
 800a9bc:	4b34      	ldr	r3, [pc, #208]	; (800aa90 <UART_SetConfig+0x17c>)
 800a9be:	3a10      	subs	r2, #16
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d8d6      	bhi.n	800a972 <UART_SetConfig+0x5e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	60d8      	str	r0, [r3, #12]
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e7d3      	b.n	800a974 <UART_SetConfig+0x60>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9cc:	4b2c      	ldr	r3, [pc, #176]	; (800aa80 <UART_SetConfig+0x16c>)
 800a9ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d909      	bls.n	800a9ee <UART_SetConfig+0xda>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9da:	2380      	movs	r3, #128	; 0x80
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	4298      	cmp	r0, r3
 800a9e0:	d03a      	beq.n	800aa58 <UART_SetConfig+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9e2:	f7fe fecd 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d0ee      	beq.n	800a9c8 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a9ec:	e7da      	b.n	800a9a4 <UART_SetConfig+0x90>
 800a9ee:	4a29      	ldr	r2, [pc, #164]	; (800aa94 <UART_SetConfig+0x180>)
 800a9f0:	5cd2      	ldrb	r2, [r2, r3]
 800a9f2:	e7cb      	b.n	800a98c <UART_SetConfig+0x78>
    switch (clocksource)
 800a9f4:	2a04      	cmp	r2, #4
 800a9f6:	d029      	beq.n	800aa4c <UART_SetConfig+0x138>
 800a9f8:	d81e      	bhi.n	800aa38 <UART_SetConfig+0x124>
 800a9fa:	2a00      	cmp	r2, #0
 800a9fc:	d02c      	beq.n	800aa58 <UART_SetConfig+0x144>
 800a9fe:	2a02      	cmp	r2, #2
 800aa00:	d1b7      	bne.n	800a972 <UART_SetConfig+0x5e>
 800aa02:	4821      	ldr	r0, [pc, #132]	; (800aa88 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa04:	4b21      	ldr	r3, [pc, #132]	; (800aa8c <UART_SetConfig+0x178>)
 800aa06:	0049      	lsls	r1, r1, #1
 800aa08:	5ac9      	ldrh	r1, [r1, r3]
 800aa0a:	f7f5 fb99 	bl	8000140 <__udivsi3>
 800aa0e:	6865      	ldr	r5, [r4, #4]
 800aa10:	0040      	lsls	r0, r0, #1
 800aa12:	086b      	lsrs	r3, r5, #1
 800aa14:	18c0      	adds	r0, r0, r3
 800aa16:	0029      	movs	r1, r5
 800aa18:	f7f5 fb92 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa1c:	0002      	movs	r2, r0
 800aa1e:	4b1c      	ldr	r3, [pc, #112]	; (800aa90 <UART_SetConfig+0x17c>)
 800aa20:	3a10      	subs	r2, #16
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d8a5      	bhi.n	800a972 <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa26:	4b1c      	ldr	r3, [pc, #112]	; (800aa98 <UART_SetConfig+0x184>)
        huart->Instance->BRR = brrtemp;
 800aa28:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa2a:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa2c:	0700      	lsls	r0, r0, #28
 800aa2e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800aa30:	4303      	orrs	r3, r0
 800aa32:	60d3      	str	r3, [r2, #12]
 800aa34:	2000      	movs	r0, #0
 800aa36:	e79d      	b.n	800a974 <UART_SetConfig+0x60>
    switch (clocksource)
 800aa38:	2a08      	cmp	r2, #8
 800aa3a:	d0e3      	beq.n	800aa04 <UART_SetConfig+0xf0>
 800aa3c:	e799      	b.n	800a972 <UART_SetConfig+0x5e>
    switch (clocksource)
 800aa3e:	0018      	movs	r0, r3
 800aa40:	2a08      	cmp	r2, #8
 800aa42:	d0af      	beq.n	800a9a4 <UART_SetConfig+0x90>
 800aa44:	e795      	b.n	800a972 <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 800aa46:	f7fe fd89 	bl	800955c <HAL_RCC_GetSysClockFreq>
        break;
 800aa4a:	e7cc      	b.n	800a9e6 <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetSysClockFreq();
 800aa4c:	f7fe fd86 	bl	800955c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d0b9      	beq.n	800a9c8 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa56:	e7d5      	b.n	800aa04 <UART_SetConfig+0xf0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa58:	f7fe fe92 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
        break;
 800aa5c:	e7f8      	b.n	800aa50 <UART_SetConfig+0x13c>
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	cfff69f3 	.word	0xcfff69f3
 800aa64:	ffffcfff 	.word	0xffffcfff
 800aa68:	11fff4ff 	.word	0x11fff4ff
 800aa6c:	40013800 	.word	0x40013800
 800aa70:	40004400 	.word	0x40004400
 800aa74:	40004800 	.word	0x40004800
 800aa78:	40004c00 	.word	0x40004c00
 800aa7c:	00010001 	.word	0x00010001
 800aa80:	40021000 	.word	0x40021000
 800aa84:	0801394c 	.word	0x0801394c
 800aa88:	00f42400 	.word	0x00f42400
 800aa8c:	0801395c 	.word	0x0801395c
 800aa90:	0000ffef 	.word	0x0000ffef
 800aa94:	08013948 	.word	0x08013948
 800aa98:	0000fff0 	.word	0x0000fff0

0800aa9c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800aa9e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaa0:	07da      	lsls	r2, r3, #31
 800aaa2:	d506      	bpl.n	800aab2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aaa4:	6801      	ldr	r1, [r0, #0]
 800aaa6:	4c28      	ldr	r4, [pc, #160]	; (800ab48 <UART_AdvFeatureConfig+0xac>)
 800aaa8:	684a      	ldr	r2, [r1, #4]
 800aaaa:	4022      	ands	r2, r4
 800aaac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800aaae:	4322      	orrs	r2, r4
 800aab0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aab2:	079a      	lsls	r2, r3, #30
 800aab4:	d506      	bpl.n	800aac4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aab6:	6801      	ldr	r1, [r0, #0]
 800aab8:	4c24      	ldr	r4, [pc, #144]	; (800ab4c <UART_AdvFeatureConfig+0xb0>)
 800aaba:	684a      	ldr	r2, [r1, #4]
 800aabc:	4022      	ands	r2, r4
 800aabe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800aac0:	4322      	orrs	r2, r4
 800aac2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aac4:	075a      	lsls	r2, r3, #29
 800aac6:	d506      	bpl.n	800aad6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aac8:	6801      	ldr	r1, [r0, #0]
 800aaca:	4c21      	ldr	r4, [pc, #132]	; (800ab50 <UART_AdvFeatureConfig+0xb4>)
 800aacc:	684a      	ldr	r2, [r1, #4]
 800aace:	4022      	ands	r2, r4
 800aad0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800aad2:	4322      	orrs	r2, r4
 800aad4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aad6:	071a      	lsls	r2, r3, #28
 800aad8:	d506      	bpl.n	800aae8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aada:	6801      	ldr	r1, [r0, #0]
 800aadc:	4c1d      	ldr	r4, [pc, #116]	; (800ab54 <UART_AdvFeatureConfig+0xb8>)
 800aade:	684a      	ldr	r2, [r1, #4]
 800aae0:	4022      	ands	r2, r4
 800aae2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800aae4:	4322      	orrs	r2, r4
 800aae6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aae8:	06da      	lsls	r2, r3, #27
 800aaea:	d506      	bpl.n	800aafa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aaec:	6801      	ldr	r1, [r0, #0]
 800aaee:	4c1a      	ldr	r4, [pc, #104]	; (800ab58 <UART_AdvFeatureConfig+0xbc>)
 800aaf0:	688a      	ldr	r2, [r1, #8]
 800aaf2:	4022      	ands	r2, r4
 800aaf4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800aaf6:	4322      	orrs	r2, r4
 800aaf8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aafa:	069a      	lsls	r2, r3, #26
 800aafc:	d506      	bpl.n	800ab0c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aafe:	6801      	ldr	r1, [r0, #0]
 800ab00:	4c16      	ldr	r4, [pc, #88]	; (800ab5c <UART_AdvFeatureConfig+0xc0>)
 800ab02:	688a      	ldr	r2, [r1, #8]
 800ab04:	4022      	ands	r2, r4
 800ab06:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800ab08:	4322      	orrs	r2, r4
 800ab0a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab0c:	065a      	lsls	r2, r3, #25
 800ab0e:	d50a      	bpl.n	800ab26 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab10:	6801      	ldr	r1, [r0, #0]
 800ab12:	4d13      	ldr	r5, [pc, #76]	; (800ab60 <UART_AdvFeatureConfig+0xc4>)
 800ab14:	684a      	ldr	r2, [r1, #4]
 800ab16:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800ab18:	402a      	ands	r2, r5
 800ab1a:	4322      	orrs	r2, r4
 800ab1c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab1e:	2280      	movs	r2, #128	; 0x80
 800ab20:	0352      	lsls	r2, r2, #13
 800ab22:	4294      	cmp	r4, r2
 800ab24:	d009      	beq.n	800ab3a <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab26:	061b      	lsls	r3, r3, #24
 800ab28:	d506      	bpl.n	800ab38 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab2a:	6802      	ldr	r2, [r0, #0]
 800ab2c:	490d      	ldr	r1, [pc, #52]	; (800ab64 <UART_AdvFeatureConfig+0xc8>)
 800ab2e:	6853      	ldr	r3, [r2, #4]
 800ab30:	400b      	ands	r3, r1
 800ab32:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ab34:	430b      	orrs	r3, r1
 800ab36:	6053      	str	r3, [r2, #4]
}
 800ab38:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab3a:	684a      	ldr	r2, [r1, #4]
 800ab3c:	4c0a      	ldr	r4, [pc, #40]	; (800ab68 <UART_AdvFeatureConfig+0xcc>)
 800ab3e:	4022      	ands	r2, r4
 800ab40:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800ab42:	4322      	orrs	r2, r4
 800ab44:	604a      	str	r2, [r1, #4]
 800ab46:	e7ee      	b.n	800ab26 <UART_AdvFeatureConfig+0x8a>
 800ab48:	fffdffff 	.word	0xfffdffff
 800ab4c:	fffeffff 	.word	0xfffeffff
 800ab50:	fffbffff 	.word	0xfffbffff
 800ab54:	ffff7fff 	.word	0xffff7fff
 800ab58:	ffffefff 	.word	0xffffefff
 800ab5c:	ffffdfff 	.word	0xffffdfff
 800ab60:	ffefffff 	.word	0xffefffff
 800ab64:	fff7ffff 	.word	0xfff7ffff
 800ab68:	ff9fffff 	.word	0xff9fffff

0800ab6c <UART_WaitOnFlagUntilTimeout>:
{
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	4657      	mov	r7, sl
 800ab70:	464e      	mov	r6, r9
 800ab72:	4645      	mov	r5, r8
 800ab74:	46de      	mov	lr, fp
 800ab76:	b5e0      	push	{r5, r6, r7, lr}
 800ab78:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab7e:	2280      	movs	r2, #128	; 0x80
 800ab80:	0112      	lsls	r2, r2, #4
{
 800ab82:	4699      	mov	r9, r3
 800ab84:	4680      	mov	r8, r0
 800ab86:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab88:	4693      	mov	fp, r2
{
 800ab8a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab8c:	6803      	ldr	r3, [r0, #0]
 800ab8e:	e001      	b.n	800ab94 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800ab90:	1c7a      	adds	r2, r7, #1
 800ab92:	d10d      	bne.n	800abb0 <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab94:	69dc      	ldr	r4, [r3, #28]
 800ab96:	402c      	ands	r4, r5
 800ab98:	1b64      	subs	r4, r4, r5
 800ab9a:	4262      	negs	r2, r4
 800ab9c:	4154      	adcs	r4, r2
 800ab9e:	42b4      	cmp	r4, r6
 800aba0:	d0f6      	beq.n	800ab90 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800aba2:	2000      	movs	r0, #0
}
 800aba4:	bcf0      	pop	{r4, r5, r6, r7}
 800aba6:	46bb      	mov	fp, r7
 800aba8:	46b2      	mov	sl, r6
 800abaa:	46a9      	mov	r9, r5
 800abac:	46a0      	mov	r8, r4
 800abae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abb0:	f7fc ff5a 	bl	8007a68 <HAL_GetTick>
 800abb4:	464b      	mov	r3, r9
 800abb6:	1ac0      	subs	r0, r0, r3
 800abb8:	42b8      	cmp	r0, r7
 800abba:	d831      	bhi.n	800ac20 <UART_WaitOnFlagUntilTimeout+0xb4>
 800abbc:	2f00      	cmp	r7, #0
 800abbe:	d02f      	beq.n	800ac20 <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abc0:	4643      	mov	r3, r8
 800abc2:	4651      	mov	r1, sl
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	4211      	tst	r1, r2
 800abca:	d0e3      	beq.n	800ab94 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abcc:	4659      	mov	r1, fp
 800abce:	69da      	ldr	r2, [r3, #28]
 800abd0:	420a      	tst	r2, r1
 800abd2:	d0df      	beq.n	800ab94 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abd4:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abd6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abda:	2201      	movs	r2, #1
 800abdc:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800abe0:	4643      	mov	r3, r8
 800abe2:	6819      	ldr	r1, [r3, #0]
 800abe4:	4c1c      	ldr	r4, [pc, #112]	; (800ac58 <UART_WaitOnFlagUntilTimeout+0xec>)
 800abe6:	680b      	ldr	r3, [r1, #0]
 800abe8:	4023      	ands	r3, r4
 800abea:	600b      	str	r3, [r1, #0]
 800abec:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abf0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abf4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abf8:	4643      	mov	r3, r8
 800abfa:	6819      	ldr	r1, [r3, #0]
 800abfc:	688b      	ldr	r3, [r1, #8]
 800abfe:	4393      	bics	r3, r2
 800ac00:	608b      	str	r3, [r1, #8]
 800ac02:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800ac06:	2320      	movs	r3, #32
 800ac08:	4641      	mov	r1, r8
 800ac0a:	3287      	adds	r2, #135	; 0x87
 800ac0c:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800ac0e:	3204      	adds	r2, #4
 800ac10:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac12:	3204      	adds	r2, #4
 800ac14:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 800ac16:	2200      	movs	r2, #0
 800ac18:	3364      	adds	r3, #100	; 0x64
          return HAL_TIMEOUT;
 800ac1a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800ac1c:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 800ac1e:	e7c1      	b.n	800aba4 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac20:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac24:	2201      	movs	r2, #1
 800ac26:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac2a:	4643      	mov	r3, r8
 800ac2c:	6819      	ldr	r1, [r3, #0]
 800ac2e:	4c0a      	ldr	r4, [pc, #40]	; (800ac58 <UART_WaitOnFlagUntilTimeout+0xec>)
 800ac30:	680b      	ldr	r3, [r1, #0]
 800ac32:	4023      	ands	r3, r4
 800ac34:	600b      	str	r3, [r1, #0]
 800ac36:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac3a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac3e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac42:	4643      	mov	r3, r8
 800ac44:	6819      	ldr	r1, [r3, #0]
 800ac46:	688b      	ldr	r3, [r1, #8]
 800ac48:	4393      	bics	r3, r2
 800ac4a:	608b      	str	r3, [r1, #8]
 800ac4c:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800ac50:	2320      	movs	r3, #32
 800ac52:	4641      	mov	r1, r8
 800ac54:	3287      	adds	r2, #135	; 0x87
 800ac56:	e7db      	b.n	800ac10 <UART_WaitOnFlagUntilTimeout+0xa4>
 800ac58:	fffffe5f 	.word	0xfffffe5f

0800ac5c <HAL_UART_Transmit>:
{
 800ac5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5e:	4647      	mov	r7, r8
 800ac60:	46ce      	mov	lr, r9
 800ac62:	b580      	push	{r7, lr}
 800ac64:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800ac66:	2388      	movs	r3, #136	; 0x88
 800ac68:	58c3      	ldr	r3, [r0, r3]
{
 800ac6a:	0004      	movs	r4, r0
 800ac6c:	000d      	movs	r5, r1
 800ac6e:	0016      	movs	r6, r2
 800ac70:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800ac72:	2b20      	cmp	r3, #32
 800ac74:	d14d      	bne.n	800ad12 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800ac76:	2900      	cmp	r1, #0
 800ac78:	d045      	beq.n	800ad06 <HAL_UART_Transmit+0xaa>
 800ac7a:	2a00      	cmp	r2, #0
 800ac7c:	d043      	beq.n	800ad06 <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac7e:	2380      	movs	r3, #128	; 0x80
 800ac80:	6882      	ldr	r2, [r0, #8]
 800ac82:	015b      	lsls	r3, r3, #5
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d104      	bne.n	800ac92 <HAL_UART_Transmit+0x36>
 800ac88:	6903      	ldr	r3, [r0, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800ac8e:	07cb      	lsls	r3, r1, #31
 800ac90:	d439      	bmi.n	800ad06 <HAL_UART_Transmit+0xaa>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac92:	2390      	movs	r3, #144	; 0x90
 800ac94:	2200      	movs	r2, #0
 800ac96:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac98:	3b08      	subs	r3, #8
 800ac9a:	3221      	adds	r2, #33	; 0x21
 800ac9c:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800ac9e:	f7fc fee3 	bl	8007a68 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800aca2:	2354      	movs	r3, #84	; 0x54
 800aca4:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800aca6:	3302      	adds	r3, #2
      pdata16bits = NULL;
 800aca8:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 800acaa:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acac:	2380      	movs	r3, #128	; 0x80
 800acae:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800acb0:	4680      	mov	r8, r0
      pdata16bits = NULL;
 800acb2:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acb4:	015b      	lsls	r3, r3, #5
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d03c      	beq.n	800ad34 <HAL_UART_Transmit+0xd8>
    while (huart->TxXferCount > 0U)
 800acba:	2356      	movs	r3, #86	; 0x56
 800acbc:	5ae3      	ldrh	r3, [r4, r3]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d02b      	beq.n	800ad1a <HAL_UART_Transmit+0xbe>
      huart->TxXferCount--;
 800acc2:	2656      	movs	r6, #86	; 0x56
 800acc4:	e00a      	b.n	800acdc <HAL_UART_Transmit+0x80>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800acc6:	782a      	ldrb	r2, [r5, #0]
 800acc8:	6823      	ldr	r3, [r4, #0]
        pdata8bits++;
 800acca:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800accc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800acce:	5ba2      	ldrh	r2, [r4, r6]
 800acd0:	3a01      	subs	r2, #1
 800acd2:	b292      	uxth	r2, r2
 800acd4:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 800acd6:	5ba3      	ldrh	r3, [r4, r6]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01e      	beq.n	800ad1a <HAL_UART_Transmit+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acdc:	4643      	mov	r3, r8
 800acde:	2200      	movs	r2, #0
 800ace0:	2180      	movs	r1, #128	; 0x80
 800ace2:	0020      	movs	r0, r4
 800ace4:	9700      	str	r7, [sp, #0]
 800ace6:	f7ff ff41 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800acea:	2800      	cmp	r0, #0
 800acec:	d113      	bne.n	800ad16 <HAL_UART_Transmit+0xba>
      if (pdata8bits == NULL)
 800acee:	2d00      	cmp	r5, #0
 800acf0:	d1e9      	bne.n	800acc6 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800acf2:	464b      	mov	r3, r9
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	6822      	ldr	r2, [r4, #0]
 800acf8:	05db      	lsls	r3, r3, #23
 800acfa:	0ddb      	lsrs	r3, r3, #23
 800acfc:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800acfe:	2302      	movs	r3, #2
 800ad00:	469c      	mov	ip, r3
 800ad02:	44e1      	add	r9, ip
 800ad04:	e7e3      	b.n	800acce <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800ad06:	2001      	movs	r0, #1
}
 800ad08:	b003      	add	sp, #12
 800ad0a:	bcc0      	pop	{r6, r7}
 800ad0c:	46b9      	mov	r9, r7
 800ad0e:	46b0      	mov	r8, r6
 800ad10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800ad12:	2002      	movs	r0, #2
 800ad14:	e7f8      	b.n	800ad08 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800ad16:	2003      	movs	r0, #3
 800ad18:	e7f6      	b.n	800ad08 <HAL_UART_Transmit+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad1a:	4643      	mov	r3, r8
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2140      	movs	r1, #64	; 0x40
 800ad20:	0020      	movs	r0, r4
 800ad22:	9700      	str	r7, [sp, #0]
 800ad24:	f7ff ff22 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d1f4      	bne.n	800ad16 <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 800ad2c:	2388      	movs	r3, #136	; 0x88
 800ad2e:	2220      	movs	r2, #32
 800ad30:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800ad32:	e7e9      	b.n	800ad08 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1bf      	bne.n	800acba <HAL_UART_Transmit+0x5e>
 800ad3a:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800ad3c:	2500      	movs	r5, #0
 800ad3e:	e7bc      	b.n	800acba <HAL_UART_Transmit+0x5e>

0800ad40 <HAL_UART_Receive>:
{
 800ad40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad42:	464f      	mov	r7, r9
 800ad44:	4646      	mov	r6, r8
 800ad46:	46d6      	mov	lr, sl
 800ad48:	b5c0      	push	{r6, r7, lr}
 800ad4a:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad4c:	238c      	movs	r3, #140	; 0x8c
 800ad4e:	58c3      	ldr	r3, [r0, r3]
{
 800ad50:	0004      	movs	r4, r0
 800ad52:	000d      	movs	r5, r1
 800ad54:	0016      	movs	r6, r2
 800ad56:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d15a      	bne.n	800ae12 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 800ad5c:	2900      	cmp	r1, #0
 800ad5e:	d051      	beq.n	800ae04 <HAL_UART_Receive+0xc4>
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	d04f      	beq.n	800ae04 <HAL_UART_Receive+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad64:	2380      	movs	r3, #128	; 0x80
 800ad66:	6882      	ldr	r2, [r0, #8]
 800ad68:	015b      	lsls	r3, r3, #5
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d104      	bne.n	800ad78 <HAL_UART_Receive+0x38>
 800ad6e:	6903      	ldr	r3, [r0, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <HAL_UART_Receive+0x38>
      if ((((uint32_t)pData) & 1U) != 0U)
 800ad74:	07cb      	lsls	r3, r1, #31
 800ad76:	d445      	bmi.n	800ae04 <HAL_UART_Receive+0xc4>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	2290      	movs	r2, #144	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad7c:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad7e:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad80:	3a04      	subs	r2, #4
 800ad82:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad84:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 800ad86:	f7fc fe6f 	bl	8007a68 <HAL_GetTick>
    huart->RxXferSize  = Size;
 800ad8a:	235c      	movs	r3, #92	; 0x5c
    UART_MASK_COMPUTATION(huart);
 800ad8c:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 800ad8e:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 800ad90:	3302      	adds	r3, #2
 800ad92:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 800ad94:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800ad96:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 800ad98:	0152      	lsls	r2, r2, #5
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d051      	beq.n	800ae42 <HAL_UART_Receive+0x102>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d139      	bne.n	800ae16 <HAL_UART_Receive+0xd6>
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	425a      	negs	r2, r3
 800ada6:	4153      	adcs	r3, r2
 800ada8:	01db      	lsls	r3, r3, #7
 800adaa:	4698      	mov	r8, r3
 800adac:	237f      	movs	r3, #127	; 0x7f
 800adae:	469c      	mov	ip, r3
 800adb0:	44e0      	add	r8, ip
 800adb2:	2360      	movs	r3, #96	; 0x60
 800adb4:	4642      	mov	r2, r8
 800adb6:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 800adb8:	2300      	movs	r3, #0
 800adba:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 800adbc:	235e      	movs	r3, #94	; 0x5e
 800adbe:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 800adc0:	265e      	movs	r6, #94	; 0x5e
    while (huart->RxXferCount > 0U)
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <HAL_UART_Receive+0x9a>
 800adc6:	e035      	b.n	800ae34 <HAL_UART_Receive+0xf4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800adc8:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800adca:	3501      	adds	r5, #1
      huart->RxXferCount--;
 800adcc:	5ba2      	ldrh	r2, [r4, r6]
 800adce:	3a01      	subs	r2, #1
 800add0:	b292      	uxth	r2, r2
 800add2:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 800add4:	5ba3      	ldrh	r3, [r4, r6]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d02c      	beq.n	800ae34 <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800adda:	464b      	mov	r3, r9
 800addc:	2200      	movs	r2, #0
 800adde:	2120      	movs	r1, #32
 800ade0:	0020      	movs	r0, r4
 800ade2:	9700      	str	r7, [sp, #0]
 800ade4:	f7ff fec2 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d128      	bne.n	800ae3e <HAL_UART_Receive+0xfe>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800adec:	4642      	mov	r2, r8
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf2:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 800adf4:	2d00      	cmp	r5, #0
 800adf6:	d1e7      	bne.n	800adc8 <HAL_UART_Receive+0x88>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800adf8:	4652      	mov	r2, sl
 800adfa:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 800adfc:	2302      	movs	r3, #2
 800adfe:	469c      	mov	ip, r3
 800ae00:	44e2      	add	sl, ip
 800ae02:	e7e3      	b.n	800adcc <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 800ae04:	2001      	movs	r0, #1
}
 800ae06:	b002      	add	sp, #8
 800ae08:	bce0      	pop	{r5, r6, r7}
 800ae0a:	46ba      	mov	sl, r7
 800ae0c:	46b1      	mov	r9, r6
 800ae0e:	46a8      	mov	r8, r5
 800ae10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800ae12:	2002      	movs	r0, #2
 800ae14:	e7f7      	b.n	800ae06 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800ae16:	2280      	movs	r2, #128	; 0x80
 800ae18:	2100      	movs	r1, #0
 800ae1a:	0552      	lsls	r2, r2, #21
 800ae1c:	4688      	mov	r8, r1
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d1c7      	bne.n	800adb2 <HAL_UART_Receive+0x72>
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	425a      	negs	r2, r3
 800ae26:	4153      	adcs	r3, r2
 800ae28:	019b      	lsls	r3, r3, #6
 800ae2a:	4698      	mov	r8, r3
 800ae2c:	233f      	movs	r3, #63	; 0x3f
 800ae2e:	469c      	mov	ip, r3
 800ae30:	44e0      	add	r8, ip
 800ae32:	e7be      	b.n	800adb2 <HAL_UART_Receive+0x72>
    huart->RxState = HAL_UART_STATE_READY;
 800ae34:	238c      	movs	r3, #140	; 0x8c
 800ae36:	2220      	movs	r2, #32
    return HAL_OK;
 800ae38:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 800ae3a:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800ae3c:	e7e3      	b.n	800ae06 <HAL_UART_Receive+0xc6>
        return HAL_TIMEOUT;
 800ae3e:	2003      	movs	r0, #3
 800ae40:	e7e1      	b.n	800ae06 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800ae42:	6923      	ldr	r3, [r4, #16]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d106      	bne.n	800ae56 <HAL_UART_Receive+0x116>
 800ae48:	2260      	movs	r2, #96	; 0x60
 800ae4a:	4b07      	ldr	r3, [pc, #28]	; (800ae68 <HAL_UART_Receive+0x128>)
 800ae4c:	46aa      	mov	sl, r5
 800ae4e:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 800ae50:	2500      	movs	r5, #0
 800ae52:	52a3      	strh	r3, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae54:	e7b2      	b.n	800adbc <HAL_UART_Receive+0x7c>
    UART_MASK_COMPUTATION(huart);
 800ae56:	2360      	movs	r3, #96	; 0x60
 800ae58:	22ff      	movs	r2, #255	; 0xff
 800ae5a:	52e2      	strh	r2, [r4, r3]
 800ae5c:	339f      	adds	r3, #159	; 0x9f
 800ae5e:	4698      	mov	r8, r3
      pdata16bits = NULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	469a      	mov	sl, r3
 800ae64:	e7aa      	b.n	800adbc <HAL_UART_Receive+0x7c>
 800ae66:	46c0      	nop			; (mov r8, r8)
 800ae68:	000001ff 	.word	0x000001ff

0800ae6c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	2390      	movs	r3, #144	; 0x90
{
 800ae70:	b530      	push	{r4, r5, lr}
 800ae72:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae74:	50c2      	str	r2, [r0, r3]
{
 800ae76:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 800ae78:	f7fc fdf6 	bl	8007a68 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae7c:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800ae7e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae80:	6811      	ldr	r1, [r2, #0]
 800ae82:	0709      	lsls	r1, r1, #28
 800ae84:	d40f      	bmi.n	800aea6 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae86:	6812      	ldr	r2, [r2, #0]
 800ae88:	0752      	lsls	r2, r2, #29
 800ae8a:	d41b      	bmi.n	800aec4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800ae8c:	2320      	movs	r3, #32
 800ae8e:	2288      	movs	r2, #136	; 0x88
 800ae90:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ae92:	3204      	adds	r2, #4
 800ae94:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae96:	2300      	movs	r3, #0
  return HAL_OK;
 800ae98:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800ae9a:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae9c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae9e:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800aea0:	54a3      	strb	r3, [r4, r2]
}
 800aea2:	b003      	add	sp, #12
 800aea4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aea6:	2180      	movs	r1, #128	; 0x80
 800aea8:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <UART_CheckIdleState+0x74>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	0389      	lsls	r1, r1, #14
 800aeb0:	0003      	movs	r3, r0
 800aeb2:	0020      	movs	r0, r4
 800aeb4:	f7ff fe5a 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d10e      	bne.n	800aeda <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aebc:	6822      	ldr	r2, [r4, #0]
 800aebe:	6812      	ldr	r2, [r2, #0]
 800aec0:	0752      	lsls	r2, r2, #29
 800aec2:	d5e3      	bpl.n	800ae8c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aec4:	2180      	movs	r1, #128	; 0x80
 800aec6:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <UART_CheckIdleState+0x74>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	0020      	movs	r0, r4
 800aece:	002b      	movs	r3, r5
 800aed0:	03c9      	lsls	r1, r1, #15
 800aed2:	f7ff fe4b 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d0d8      	beq.n	800ae8c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800aeda:	2003      	movs	r0, #3
 800aedc:	e7e1      	b.n	800aea2 <UART_CheckIdleState+0x36>
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	01ffffff 	.word	0x01ffffff

0800aee4 <HAL_UART_Init>:
{
 800aee4:	b510      	push	{r4, lr}
 800aee6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800aee8:	d028      	beq.n	800af3c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800aeea:	2388      	movs	r3, #136	; 0x88
 800aeec:	58c3      	ldr	r3, [r0, r3]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d026      	beq.n	800af40 <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 800aef2:	2388      	movs	r3, #136	; 0x88
 800aef4:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800aef6:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800aef8:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800aefa:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aefc:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800aefe:	6813      	ldr	r3, [r2, #0]
 800af00:	438b      	bics	r3, r1
 800af02:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af04:	f7ff fd06 	bl	800a914 <UART_SetConfig>
 800af08:	2801      	cmp	r0, #1
 800af0a:	d017      	beq.n	800af3c <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d110      	bne.n	800af34 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	490d      	ldr	r1, [pc, #52]	; (800af4c <HAL_UART_Init+0x68>)
 800af16:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800af18:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af1a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af1c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af20:	689a      	ldr	r2, [r3, #8]
 800af22:	438a      	bics	r2, r1
 800af24:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	3929      	subs	r1, #41	; 0x29
 800af2a:	430a      	orrs	r2, r1
 800af2c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800af2e:	f7ff ff9d 	bl	800ae6c <UART_CheckIdleState>
}
 800af32:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800af34:	0020      	movs	r0, r4
 800af36:	f7ff fdb1 	bl	800aa9c <UART_AdvFeatureConfig>
 800af3a:	e7ea      	b.n	800af12 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800af3c:	2001      	movs	r0, #1
 800af3e:	e7f8      	b.n	800af32 <HAL_UART_Init+0x4e>
    huart->Lock = HAL_UNLOCKED;
 800af40:	2284      	movs	r2, #132	; 0x84
 800af42:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800af44:	f7fc fb48 	bl	80075d8 <HAL_UART_MspInit>
 800af48:	e7d3      	b.n	800aef2 <HAL_UART_Init+0xe>
 800af4a:	46c0      	nop			; (mov r8, r8)
 800af4c:	ffffb7ff 	.word	0xffffb7ff

0800af50 <UART_Start_Receive_DMA>:
{
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 800af54:	225c      	movs	r2, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 800af56:	6581      	str	r1, [r0, #88]	; 0x58
{
 800af58:	000d      	movs	r5, r1
  huart->RxXferSize = Size;
 800af5a:	5283      	strh	r3, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af5c:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af5e:	2790      	movs	r7, #144	; 0x90
 800af60:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af62:	268c      	movs	r6, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af64:	51c2      	str	r2, [r0, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af66:	5181      	str	r1, [r0, r6]
  if (huart->hdmarx != NULL)
 800af68:	315e      	adds	r1, #94	; 0x5e
{
 800af6a:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 800af6c:	5840      	ldr	r0, [r0, r1]
 800af6e:	2800      	cmp	r0, #0
 800af70:	d00d      	beq.n	800af8e <UART_Start_Receive_DMA+0x3e>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af72:	491e      	ldr	r1, [pc, #120]	; (800afec <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800af74:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af76:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af78:	491d      	ldr	r1, [pc, #116]	; (800aff0 <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af7a:	002a      	movs	r2, r5
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af7c:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af7e:	491d      	ldr	r1, [pc, #116]	; (800aff4 <UART_Start_Receive_DMA+0xa4>)
 800af80:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af82:	6821      	ldr	r1, [r4, #0]
 800af84:	3124      	adds	r1, #36	; 0x24
 800af86:	f7fd f9df 	bl	8008348 <HAL_DMA_Start_IT>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d127      	bne.n	800afde <UART_Start_Receive_DMA+0x8e>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d117      	bne.n	800afc4 <UART_Start_Receive_DMA+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af94:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af98:	2301      	movs	r3, #1
 800af9a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af9e:	6821      	ldr	r1, [r4, #0]
 800afa0:	688a      	ldr	r2, [r1, #8]
 800afa2:	431a      	orrs	r2, r3
 800afa4:	608a      	str	r2, [r1, #8]
 800afa6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afaa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afae:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb2:	2040      	movs	r0, #64	; 0x40
 800afb4:	6822      	ldr	r2, [r4, #0]
 800afb6:	6893      	ldr	r3, [r2, #8]
 800afb8:	4303      	orrs	r3, r0
 800afba:	6093      	str	r3, [r2, #8]
 800afbc:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800afc0:	2000      	movs	r0, #0
}
 800afc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afc8:	2301      	movs	r3, #1
 800afca:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afce:	6822      	ldr	r2, [r4, #0]
 800afd0:	33ff      	adds	r3, #255	; 0xff
 800afd2:	6810      	ldr	r0, [r2, #0]
 800afd4:	4303      	orrs	r3, r0
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	f381 8810 	msr	PRIMASK, r1
}
 800afdc:	e7da      	b.n	800af94 <UART_Start_Receive_DMA+0x44>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afde:	2310      	movs	r3, #16
 800afe0:	51e3      	str	r3, [r4, r7]
      huart->RxState = HAL_UART_STATE_READY;
 800afe2:	3310      	adds	r3, #16
      return HAL_ERROR;
 800afe4:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800afe6:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 800afe8:	e7eb      	b.n	800afc2 <UART_Start_Receive_DMA+0x72>
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	0800a879 	.word	0x0800a879
 800aff0:	0800a859 	.word	0x0800a859
 800aff4:	0800a459 	.word	0x0800a459

0800aff8 <HAL_UART_Receive_DMA>:
{
 800aff8:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800affa:	208c      	movs	r0, #140	; 0x8c
 800affc:	5818      	ldr	r0, [r3, r0]
{
 800affe:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b000:	2820      	cmp	r0, #32
 800b002:	d127      	bne.n	800b054 <HAL_UART_Receive_DMA+0x5c>
    if ((pData == NULL) || (Size == 0U))
 800b004:	2900      	cmp	r1, #0
 800b006:	d023      	beq.n	800b050 <HAL_UART_Receive_DMA+0x58>
 800b008:	2a00      	cmp	r2, #0
 800b00a:	d021      	beq.n	800b050 <HAL_UART_Receive_DMA+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b00c:	2080      	movs	r0, #128	; 0x80
 800b00e:	689c      	ldr	r4, [r3, #8]
 800b010:	0140      	lsls	r0, r0, #5
 800b012:	4284      	cmp	r4, r0
 800b014:	d105      	bne.n	800b022 <HAL_UART_Receive_DMA+0x2a>
 800b016:	6918      	ldr	r0, [r3, #16]
 800b018:	2800      	cmp	r0, #0
 800b01a:	d102      	bne.n	800b022 <HAL_UART_Receive_DMA+0x2a>
      return HAL_ERROR;
 800b01c:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800b01e:	07cc      	lsls	r4, r1, #31
 800b020:	d417      	bmi.n	800b052 <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b022:	2000      	movs	r0, #0
 800b024:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	6840      	ldr	r0, [r0, #4]
 800b02a:	0200      	lsls	r0, r0, #8
 800b02c:	d50c      	bpl.n	800b048 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b02e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b032:	2001      	movs	r0, #1
 800b034:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b038:	2080      	movs	r0, #128	; 0x80
 800b03a:	681c      	ldr	r4, [r3, #0]
 800b03c:	04c0      	lsls	r0, r0, #19
 800b03e:	6825      	ldr	r5, [r4, #0]
 800b040:	4328      	orrs	r0, r5
 800b042:	6020      	str	r0, [r4, #0]
 800b044:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b048:	0018      	movs	r0, r3
 800b04a:	f7ff ff81 	bl	800af50 <UART_Start_Receive_DMA>
 800b04e:	e000      	b.n	800b052 <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 800b050:	2001      	movs	r0, #1
}
 800b052:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800b054:	2002      	movs	r0, #2
 800b056:	e7fc      	b.n	800b052 <HAL_UART_Receive_DMA+0x5a>

0800b058 <UARTEx_SetNbDataToProcess.part.0>:
  * @note The RX FIFO depth and the TX FIFO depth is extracted from
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b05a:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b05c:	4f0b      	ldr	r7, [pc, #44]	; (800b08c <UARTEx_SetNbDataToProcess.part.0+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b05e:	689c      	ldr	r4, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b060:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800b062:	0005      	movs	r5, r0
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b064:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b066:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b068:	4e09      	ldr	r6, [pc, #36]	; (800b090 <UARTEx_SetNbDataToProcess.part.0+0x38>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b06a:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b06c:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b06e:	f7f5 f8f1 	bl	8000254 <__divsi3>
 800b072:	236a      	movs	r3, #106	; 0x6a
 800b074:	52e8      	strh	r0, [r5, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b076:	0123      	lsls	r3, r4, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b078:	0f5b      	lsrs	r3, r3, #29
 800b07a:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800b07c:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b07e:	00c0      	lsls	r0, r0, #3
 800b080:	f7f5 f8e8 	bl	8000254 <__divsi3>
 800b084:	2368      	movs	r3, #104	; 0x68
 800b086:	52e8      	strh	r0, [r5, r3]
  }
}
 800b088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	0801397c 	.word	0x0801397c
 800b090:	08013974 	.word	0x08013974

0800b094 <HAL_UARTEx_WakeupCallback>:
}
 800b094:	4770      	bx	lr
 800b096:	46c0      	nop			; (mov r8, r8)

0800b098 <HAL_UARTEx_RxFifoFullCallback>:
 800b098:	4770      	bx	lr
 800b09a:	46c0      	nop			; (mov r8, r8)

0800b09c <HAL_UARTEx_TxFifoEmptyCallback>:
 800b09c:	4770      	bx	lr
 800b09e:	46c0      	nop			; (mov r8, r8)

0800b0a0 <HAL_UARTEx_DisableFifoMode>:
{
 800b0a0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b0a2:	2484      	movs	r4, #132	; 0x84
 800b0a4:	5d03      	ldrb	r3, [r0, r4]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d012      	beq.n	800b0d0 <HAL_UARTEx_DisableFifoMode+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 800b0aa:	2588      	movs	r5, #136	; 0x88
 800b0ac:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800b0ae:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800b0b0:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0b2:	6803      	ldr	r3, [r0, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b0b6:	6819      	ldr	r1, [r3, #0]
 800b0b8:	43b1      	bics	r1, r6
 800b0ba:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0bc:	4905      	ldr	r1, [pc, #20]	; (800b0d4 <HAL_UARTEx_DisableFifoMode+0x34>)
 800b0be:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0c4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800b0ca:	5501      	strb	r1, [r0, r4]
  return HAL_OK;
 800b0cc:	2000      	movs	r0, #0
}
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800b0d0:	2002      	movs	r0, #2
 800b0d2:	e7fc      	b.n	800b0ce <HAL_UARTEx_DisableFifoMode+0x2e>
 800b0d4:	dfffffff 	.word	0xdfffffff

0800b0d8 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800b0d8:	2384      	movs	r3, #132	; 0x84
{
 800b0da:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b0dc:	5cc3      	ldrb	r3, [r0, r3]
{
 800b0de:	0004      	movs	r4, r0
 800b0e0:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d01e      	beq.n	800b124 <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b0e6:	2388      	movs	r3, #136	; 0x88
 800b0e8:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0ea:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b0ec:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0ee:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	3923      	subs	r1, #35	; 0x23
 800b0f4:	438b      	bics	r3, r1
 800b0f6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0f8:	68ab      	ldr	r3, [r5, #8]
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	08d9      	lsrs	r1, r3, #3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0fe:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b100:	4311      	orrs	r1, r2
 800b102:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00a      	beq.n	800b11e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b108:	f7ff ffa6 	bl	800b058 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800b10c:	2388      	movs	r3, #136	; 0x88
 800b10e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b110:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b112:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800b114:	2200      	movs	r2, #0
  return HAL_OK;
 800b116:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800b118:	3b04      	subs	r3, #4
 800b11a:	54e2      	strb	r2, [r4, r3]
}
 800b11c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b11e:	4b02      	ldr	r3, [pc, #8]	; (800b128 <HAL_UARTEx_SetTxFifoThreshold+0x50>)
 800b120:	6683      	str	r3, [r0, #104]	; 0x68
 800b122:	e7f3      	b.n	800b10c <HAL_UARTEx_SetTxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 800b124:	2002      	movs	r0, #2
 800b126:	e7f9      	b.n	800b11c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800b128:	00010001 	.word	0x00010001

0800b12c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b12c:	2384      	movs	r3, #132	; 0x84
{
 800b12e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b130:	5cc3      	ldrb	r3, [r0, r3]
{
 800b132:	0004      	movs	r4, r0
 800b134:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800b136:	2b01      	cmp	r3, #1
 800b138:	d01e      	beq.n	800b178 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b13a:	2388      	movs	r3, #136	; 0x88
 800b13c:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b13e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b140:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b142:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	3923      	subs	r1, #35	; 0x23
 800b148:	438b      	bics	r3, r1
 800b14a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b14c:	68a9      	ldr	r1, [r5, #8]
 800b14e:	4b0b      	ldr	r3, [pc, #44]	; (800b17c <HAL_UARTEx_SetRxFifoThreshold+0x50>)
 800b150:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b152:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b154:	4311      	orrs	r1, r2
 800b156:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b15c:	f7ff ff7c 	bl	800b058 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800b160:	2388      	movs	r3, #136	; 0x88
 800b162:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b164:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b166:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800b168:	2200      	movs	r2, #0
  return HAL_OK;
 800b16a:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800b16c:	3b04      	subs	r3, #4
 800b16e:	54e2      	strb	r2, [r4, r3]
}
 800b170:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b172:	4b03      	ldr	r3, [pc, #12]	; (800b180 <HAL_UARTEx_SetRxFifoThreshold+0x54>)
 800b174:	6683      	str	r3, [r0, #104]	; 0x68
 800b176:	e7f3      	b.n	800b160 <HAL_UARTEx_SetRxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 800b178:	2002      	movs	r0, #2
 800b17a:	e7f9      	b.n	800b170 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800b17c:	f1ffffff 	.word	0xf1ffffff
 800b180:	00010001 	.word	0x00010001

0800b184 <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 800b184:	4b04      	ldr	r3, [pc, #16]	; (800b198 <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 800b186:	b510      	push	{r4, lr}
  SysTick->CTRL;
 800b188:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b18a:	f001 f8a7 	bl	800c2dc <xTaskGetSchedulerState>
 800b18e:	2801      	cmp	r0, #1
 800b190:	d001      	beq.n	800b196 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 800b192:	f001 fb7f 	bl	800c894 <xPortSysTickHandler>
  }
}
 800b196:	bd10      	pop	{r4, pc}
 800b198:	e000e010 	.word	0xe000e010

0800b19c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b19c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d106      	bne.n	800b1b2 <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b1a4:	4b06      	ldr	r3, [pc, #24]	; (800b1c0 <osKernelInitialize+0x24>)
 800b1a6:	6818      	ldr	r0, [r3, #0]
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d105      	bne.n	800b1b8 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 800b1b0:	4770      	bx	lr
    stat = osErrorISR;
 800b1b2:	2006      	movs	r0, #6
 800b1b4:	4240      	negs	r0, r0
 800b1b6:	e7fb      	b.n	800b1b0 <osKernelInitialize+0x14>
      stat = osError;
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	4240      	negs	r0, r0
  return (stat);
 800b1bc:	e7f8      	b.n	800b1b0 <osKernelInitialize+0x14>
 800b1be:	46c0      	nop			; (mov r8, r8)
 800b1c0:	20004f98 	.word	0x20004f98

0800b1c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b1c4:	b510      	push	{r4, lr}
 800b1c6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d111      	bne.n	800b1f2 <osKernelStart+0x2e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b1ce:	4a0a      	ldr	r2, [pc, #40]	; (800b1f8 <osKernelStart+0x34>)
 800b1d0:	6813      	ldr	r3, [r2, #0]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d10a      	bne.n	800b1ec <osKernelStart+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b1d6:	4909      	ldr	r1, [pc, #36]	; (800b1fc <osKernelStart+0x38>)
 800b1d8:	69cb      	ldr	r3, [r1, #28]
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	0a1b      	lsrs	r3, r3, #8
 800b1de:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b1e4:	f000 fdc6 	bl	800bd74 <vTaskStartScheduler>
      stat = osOK;
 800b1e8:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800b1ea:	bd10      	pop	{r4, pc}
      stat = osError;
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	4240      	negs	r0, r0
  return (stat);
 800b1f0:	e7fb      	b.n	800b1ea <osKernelStart+0x26>
    stat = osErrorISR;
 800b1f2:	2006      	movs	r0, #6
 800b1f4:	4240      	negs	r0, r0
 800b1f6:	e7f8      	b.n	800b1ea <osKernelStart+0x26>
 800b1f8:	20004f98 	.word	0x20004f98
 800b1fc:	e000ed00 	.word	0xe000ed00

0800b200 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b202:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b204:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b206:	b087      	sub	sp, #28
 800b208:	0005      	movs	r5, r0
  hTask = NULL;
 800b20a:	9205      	str	r2, [sp, #20]
 800b20c:	f3ef 8205 	mrs	r2, IPSR
  return(result);
 800b210:	2000      	movs	r0, #0

  if (!IS_IRQ() && (func != NULL)) {
 800b212:	2a00      	cmp	r2, #0
 800b214:	d124      	bne.n	800b260 <osThreadNew+0x60>
 800b216:	2d00      	cmp	r5, #0
 800b218:	d022      	beq.n	800b260 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b21a:	2c00      	cmp	r4, #0
 800b21c:	d028      	beq.n	800b270 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b21e:	69a3      	ldr	r3, [r4, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d11f      	bne.n	800b264 <osThreadNew+0x64>
 800b224:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b226:	6862      	ldr	r2, [r4, #4]
 800b228:	07d2      	lsls	r2, r2, #31
 800b22a:	d41f      	bmi.n	800b26c <osThreadNew+0x6c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b22c:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 800b22e:	2280      	movs	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 800b230:	2e00      	cmp	r6, #0
 800b232:	d000      	beq.n	800b236 <osThreadNew+0x36>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b234:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b236:	6820      	ldr	r0, [r4, #0]
 800b238:	4684      	mov	ip, r0
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b23a:	68a0      	ldr	r0, [r4, #8]
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d027      	beq.n	800b290 <osThreadNew+0x90>
 800b240:	68e7      	ldr	r7, [r4, #12]
 800b242:	2fa7      	cmp	r7, #167	; 0xa7
 800b244:	d912      	bls.n	800b26c <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b246:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b248:	2c00      	cmp	r4, #0
 800b24a:	d00f      	beq.n	800b26c <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b24c:	2e00      	cmp	r6, #0
 800b24e:	d00d      	beq.n	800b26c <osThreadNew+0x6c>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b250:	9002      	str	r0, [sp, #8]
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	0028      	movs	r0, r5
 800b256:	000b      	movs	r3, r1
 800b258:	9401      	str	r4, [sp, #4]
 800b25a:	4661      	mov	r1, ip
 800b25c:	f000 fd2e 	bl	800bcbc <xTaskCreateStatic>
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800b260:	b007      	add	sp, #28
 800b262:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b264:	1e5a      	subs	r2, r3, #1
 800b266:	2a37      	cmp	r2, #55	; 0x37
 800b268:	d9dd      	bls.n	800b226 <osThreadNew+0x26>
 800b26a:	e7f9      	b.n	800b260 <osThreadNew+0x60>
        return (NULL);
 800b26c:	2000      	movs	r0, #0
 800b26e:	e7f7      	b.n	800b260 <osThreadNew+0x60>
 800b270:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 800b272:	2318      	movs	r3, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b274:	a805      	add	r0, sp, #20
 800b276:	9001      	str	r0, [sp, #4]
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	0028      	movs	r0, r5
 800b27c:	000b      	movs	r3, r1
 800b27e:	0021      	movs	r1, r4
 800b280:	f000 fd44 	bl	800bd0c <xTaskCreate>
 800b284:	0003      	movs	r3, r0
 800b286:	2000      	movs	r0, #0
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d1e9      	bne.n	800b260 <osThreadNew+0x60>
  return ((osThreadId_t)hTask);
 800b28c:	9805      	ldr	r0, [sp, #20]
 800b28e:	e7e7      	b.n	800b260 <osThreadNew+0x60>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b290:	68e6      	ldr	r6, [r4, #12]
 800b292:	2e00      	cmp	r6, #0
 800b294:	d1e4      	bne.n	800b260 <osThreadNew+0x60>
 800b296:	6924      	ldr	r4, [r4, #16]
 800b298:	2c00      	cmp	r4, #0
 800b29a:	d1e1      	bne.n	800b260 <osThreadNew+0x60>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b29c:	4664      	mov	r4, ip
 800b29e:	b292      	uxth	r2, r2
 800b2a0:	e7e8      	b.n	800b274 <osThreadNew+0x74>
 800b2a2:	46c0      	nop			; (mov r8, r8)

0800b2a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b2a4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2a6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d107      	bne.n	800b2be <osDelay+0x1a>
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 800b2ae:	2400      	movs	r4, #0

    if (ticks != 0U) {
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d101      	bne.n	800b2b8 <osDelay+0x14>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800b2b4:	0020      	movs	r0, r4
 800b2b6:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 800b2b8:	f000 ff00 	bl	800c0bc <vTaskDelay>
 800b2bc:	e7fa      	b.n	800b2b4 <osDelay+0x10>
    stat = osErrorISR;
 800b2be:	2406      	movs	r4, #6
 800b2c0:	4264      	negs	r4, r4
 800b2c2:	e7f7      	b.n	800b2b4 <osDelay+0x10>

0800b2c4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c6:	0014      	movs	r4, r2
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b2ce:	2d00      	cmp	r5, #0
 800b2d0:	d113      	bne.n	800b2fa <osMessageQueueNew+0x36>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d011      	beq.n	800b2fa <osMessageQueueNew+0x36>
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	d00f      	beq.n	800b2fa <osMessageQueueNew+0x36>
    mem = -1;

    if (attr != NULL) {
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	d021      	beq.n	800b322 <osMessageQueueNew+0x5e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2de:	6893      	ldr	r3, [r2, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00e      	beq.n	800b302 <osMessageQueueNew+0x3e>
 800b2e4:	68d2      	ldr	r2, [r2, #12]
 800b2e6:	2a4f      	cmp	r2, #79	; 0x4f
 800b2e8:	d907      	bls.n	800b2fa <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2ea:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	d004      	beq.n	800b2fa <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2f0:	000e      	movs	r6, r1
 800b2f2:	4346      	muls	r6, r0
 800b2f4:	6967      	ldr	r7, [r4, #20]
 800b2f6:	42b7      	cmp	r7, r6
 800b2f8:	d21d      	bcs.n	800b336 <osMessageQueueNew+0x72>
  hQueue = NULL;
 800b2fa:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b2fc:	0028      	movs	r0, r5
 800b2fe:	b003      	add	sp, #12
 800b300:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b302:	68d3      	ldr	r3, [r2, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1f8      	bne.n	800b2fa <osMessageQueueNew+0x36>
 800b308:	6913      	ldr	r3, [r2, #16]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1f5      	bne.n	800b2fa <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b30e:	6953      	ldr	r3, [r2, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1f2      	bne.n	800b2fa <osMessageQueueNew+0x36>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b314:	2200      	movs	r2, #0
 800b316:	f000 f99b 	bl	800b650 <xQueueGenericCreate>
 800b31a:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b31c:	d0ed      	beq.n	800b2fa <osMessageQueueNew+0x36>
        name = attr->name;
 800b31e:	6824      	ldr	r4, [r4, #0]
 800b320:	e004      	b.n	800b32c <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b322:	2200      	movs	r2, #0
 800b324:	f000 f994 	bl	800b650 <xQueueGenericCreate>
 800b328:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b32a:	d0e6      	beq.n	800b2fa <osMessageQueueNew+0x36>
      vQueueAddToRegistry (hQueue, name);
 800b32c:	0021      	movs	r1, r4
 800b32e:	0028      	movs	r0, r5
 800b330:	f000 fb28 	bl	800b984 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b334:	e7e2      	b.n	800b2fc <osMessageQueueNew+0x38>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b336:	9500      	str	r5, [sp, #0]
 800b338:	f000 f954 	bl	800b5e4 <xQueueGenericCreateStatic>
 800b33c:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b33e:	d0dc      	beq.n	800b2fa <osMessageQueueNew+0x36>
        name = attr->name;
 800b340:	6824      	ldr	r4, [r4, #0]
 800b342:	e7f3      	b.n	800b32c <osMessageQueueNew+0x68>

0800b344 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b344:	4b03      	ldr	r3, [pc, #12]	; (800b354 <vApplicationGetIdleTaskMemory+0x10>)
 800b346:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b348:	4b03      	ldr	r3, [pc, #12]	; (800b358 <vApplicationGetIdleTaskMemory+0x14>)
 800b34a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b34c:	2380      	movs	r3, #128	; 0x80
 800b34e:	6013      	str	r3, [r2, #0]
}
 800b350:	4770      	bx	lr
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	20004ef0 	.word	0x20004ef0
 800b358:	20004cf0 	.word	0x20004cf0

0800b35c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b35c:	4b03      	ldr	r3, [pc, #12]	; (800b36c <vApplicationGetTimerTaskMemory+0x10>)
 800b35e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b360:	4b03      	ldr	r3, [pc, #12]	; (800b370 <vApplicationGetTimerTaskMemory+0x14>)
 800b362:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b364:	2380      	movs	r3, #128	; 0x80
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	6013      	str	r3, [r2, #0]
}
 800b36a:	4770      	bx	lr
 800b36c:	2000539c 	.word	0x2000539c
 800b370:	20004f9c 	.word	0x20004f9c

0800b374 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b374:	0003      	movs	r3, r0
 800b376:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b378:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b37a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b37c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b37e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b380:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b382:	4252      	negs	r2, r2
 800b384:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b386:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b388:	4770      	bx	lr
 800b38a:	46c0      	nop			; (mov r8, r8)

0800b38c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b38c:	2300      	movs	r3, #0
 800b38e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b390:	4770      	bx	lr
 800b392:	46c0      	nop			; (mov r8, r8)

0800b394 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b394:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b396:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b398:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b39a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b39c:	689a      	ldr	r2, [r3, #8]
 800b39e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3a0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b3a2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b3a4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	6003      	str	r3, [r0, #0]
}
 800b3aa:	4770      	bx	lr

0800b3ac <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3ac:	0003      	movs	r3, r0
{
 800b3ae:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3b0:	680d      	ldr	r5, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3b2:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800b3b4:	1c6a      	adds	r2, r5, #1
 800b3b6:	d00d      	beq.n	800b3d4 <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3b8:	001c      	movs	r4, r3
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	42aa      	cmp	r2, r5
 800b3c0:	d9fa      	bls.n	800b3b8 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3c2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3c4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b3c6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800b3c8:	608c      	str	r4, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800b3ca:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800b3cc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800b3ce:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b3d0:	6003      	str	r3, [r0, #0]
}
 800b3d2:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3d4:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3d6:	6863      	ldr	r3, [r4, #4]
 800b3d8:	e7f3      	b.n	800b3c2 <vListInsert+0x16>
 800b3da:	46c0      	nop			; (mov r8, r8)

0800b3dc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3dc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3de:	6841      	ldr	r1, [r0, #4]
 800b3e0:	6882      	ldr	r2, [r0, #8]
 800b3e2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3e6:	6859      	ldr	r1, [r3, #4]
 800b3e8:	4281      	cmp	r1, r0
 800b3ea:	d006      	beq.n	800b3fa <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	3a01      	subs	r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b3f6:	6818      	ldr	r0, [r3, #0]
}
 800b3f8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3fa:	605a      	str	r2, [r3, #4]
 800b3fc:	e7f6      	b.n	800b3ec <uxListRemove+0x10>
 800b3fe:	46c0      	nop			; (mov r8, r8)

0800b400 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	0016      	movs	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b404:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800b406:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b408:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	d106      	bne.n	800b41c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b40e:	6806      	ldr	r6, [r0, #0]
 800b410:	2e00      	cmp	r6, #0
 800b412:	d028      	beq.n	800b466 <prvCopyDataToQueue+0x66>
 800b414:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800b416:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b418:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b41c:	2e00      	cmp	r6, #0
 800b41e:	d10e      	bne.n	800b43e <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b420:	6840      	ldr	r0, [r0, #4]
 800b422:	f003 fcc1 	bl	800eda8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b426:	6863      	ldr	r3, [r4, #4]
 800b428:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b42a:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b42c:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b42e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b430:	4293      	cmp	r3, r2
 800b432:	d3ef      	bcc.n	800b414 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b434:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800b436:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b438:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b43a:	3501      	adds	r5, #1
 800b43c:	e7ec      	b.n	800b418 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b43e:	68c0      	ldr	r0, [r0, #12]
 800b440:	f003 fcb2 	bl	800eda8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b444:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b446:	68e3      	ldr	r3, [r4, #12]
 800b448:	4251      	negs	r1, r2
 800b44a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b44c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b44e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b450:	4293      	cmp	r3, r2
 800b452:	d202      	bcs.n	800b45a <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b454:	68a3      	ldr	r3, [r4, #8]
 800b456:	185b      	adds	r3, r3, r1
 800b458:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b45a:	2e02      	cmp	r6, #2
 800b45c:	d1da      	bne.n	800b414 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b45e:	2d00      	cmp	r5, #0
 800b460:	d1d9      	bne.n	800b416 <prvCopyDataToQueue+0x16>
 800b462:	3501      	adds	r5, #1
 800b464:	e7d7      	b.n	800b416 <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b466:	6880      	ldr	r0, [r0, #8]
 800b468:	f000 ff48 	bl	800c2fc <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b46c:	3501      	adds	r5, #1
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b46e:	60a6      	str	r6, [r4, #8]
 800b470:	e7d2      	b.n	800b418 <prvCopyDataToQueue+0x18>
 800b472:	46c0      	nop			; (mov r8, r8)

0800b474 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	0005      	movs	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b478:	f001 f9c2 	bl	800c800 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b47c:	2345      	movs	r3, #69	; 0x45
 800b47e:	5cec      	ldrb	r4, [r5, r3]
 800b480:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b482:	2c00      	cmp	r4, #0
 800b484:	dd16      	ble.n	800b4b4 <prvUnlockQueue+0x40>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b486:	002e      	movs	r6, r5
 800b488:	3624      	adds	r6, #36	; 0x24
 800b48a:	e004      	b.n	800b496 <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b48c:	3c01      	subs	r4, #1
 800b48e:	b2e2      	uxtb	r2, r4
 800b490:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b492:	2a00      	cmp	r2, #0
 800b494:	d00e      	beq.n	800b4b4 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00b      	beq.n	800b4b4 <prvUnlockQueue+0x40>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b49c:	0030      	movs	r0, r6
 800b49e:	f000 fe91 	bl	800c1c4 <xTaskRemoveFromEventList>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d0f2      	beq.n	800b48c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800b4a6:	3c01      	subs	r4, #1
 800b4a8:	f000 ff12 	bl	800c2d0 <vTaskMissedYield>
			--cTxLock;
 800b4ac:	b2e2      	uxtb	r2, r4
 800b4ae:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4b0:	2a00      	cmp	r2, #0
 800b4b2:	d1f0      	bne.n	800b496 <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4b4:	2345      	movs	r3, #69	; 0x45
 800b4b6:	22ff      	movs	r2, #255	; 0xff
 800b4b8:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 800b4ba:	f001 f9ad 	bl	800c818 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b4be:	f001 f99f 	bl	800c800 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b4c2:	2344      	movs	r3, #68	; 0x44
 800b4c4:	5cec      	ldrb	r4, [r5, r3]
 800b4c6:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4c8:	2c00      	cmp	r4, #0
 800b4ca:	dd16      	ble.n	800b4fa <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4cc:	002e      	movs	r6, r5
 800b4ce:	3610      	adds	r6, #16
 800b4d0:	e004      	b.n	800b4dc <prvUnlockQueue+0x68>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4d2:	3c01      	subs	r4, #1
 800b4d4:	b2e2      	uxtb	r2, r4
 800b4d6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4d8:	2a00      	cmp	r2, #0
 800b4da:	d00e      	beq.n	800b4fa <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4dc:	692b      	ldr	r3, [r5, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00b      	beq.n	800b4fa <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4e2:	0030      	movs	r0, r6
 800b4e4:	f000 fe6e 	bl	800c1c4 <xTaskRemoveFromEventList>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d0f2      	beq.n	800b4d2 <prvUnlockQueue+0x5e>
					vTaskMissedYield();
 800b4ec:	3c01      	subs	r4, #1
 800b4ee:	f000 feef 	bl	800c2d0 <vTaskMissedYield>
				--cRxLock;
 800b4f2:	b2e2      	uxtb	r2, r4
 800b4f4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4f6:	2a00      	cmp	r2, #0
 800b4f8:	d1f0      	bne.n	800b4dc <prvUnlockQueue+0x68>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4fa:	2344      	movs	r3, #68	; 0x44
 800b4fc:	22ff      	movs	r2, #255	; 0xff
 800b4fe:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 800b500:	f001 f98a 	bl	800c818 <vPortExitCritical>
}
 800b504:	bd70      	pop	{r4, r5, r6, pc}
 800b506:	46c0      	nop			; (mov r8, r8)

0800b508 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50a:	0006      	movs	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b50c:	0008      	movs	r0, r1
 800b50e:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b510:	3050      	adds	r0, #80	; 0x50
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800b512:	000d      	movs	r5, r1
 800b514:	0017      	movs	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b516:	f001 fa3b 	bl	800c990 <pvPortMalloc>
 800b51a:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 800b51c:	d027      	beq.n	800b56e <xQueueGenericCreate.part.0+0x66>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b51e:	2346      	movs	r3, #70	; 0x46
 800b520:	2200      	movs	r2, #0
 800b522:	54c2      	strb	r2, [r0, r3]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b524:	0003      	movs	r3, r0
 800b526:	2d00      	cmp	r5, #0
 800b528:	d123      	bne.n	800b572 <xQueueGenericCreate.part.0+0x6a>
 800b52a:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800b52c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b52e:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800b530:	f001 f966 	bl	800c800 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b534:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b536:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b538:	6821      	ldr	r1, [r4, #0]
 800b53a:	4353      	muls	r3, r2
 800b53c:	18c8      	adds	r0, r1, r3
 800b53e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b540:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b542:	1a9b      	subs	r3, r3, r2
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b544:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 800b546:	2244      	movs	r2, #68	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b548:	18c9      	adds	r1, r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
 800b54a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b54c:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b54e:	0020      	movs	r0, r4
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b550:	60e1      	str	r1, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b552:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800b554:	3201      	adds	r2, #1
 800b556:	54a3      	strb	r3, [r4, r2]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b558:	3010      	adds	r0, #16
 800b55a:	f7ff ff0b 	bl	800b374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b55e:	0020      	movs	r0, r4
 800b560:	3024      	adds	r0, #36	; 0x24
 800b562:	f7ff ff07 	bl	800b374 <vListInitialise>
	taskEXIT_CRITICAL();
 800b566:	f001 f957 	bl	800c818 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 800b56a:	234c      	movs	r3, #76	; 0x4c
 800b56c:	54e7      	strb	r7, [r4, r3]
	}
 800b56e:	0020      	movs	r0, r4
 800b570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b572:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b574:	e7d9      	b.n	800b52a <xQueueGenericCreate.part.0+0x22>
 800b576:	46c0      	nop			; (mov r8, r8)

0800b578 <xQueueGenericReset>:
{
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	0004      	movs	r4, r0
 800b57c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800b57e:	2800      	cmp	r0, #0
 800b580:	d01b      	beq.n	800b5ba <xQueueGenericReset+0x42>
	taskENTER_CRITICAL();
 800b582:	f001 f93d 	bl	800c800 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b586:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b588:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b58a:	6822      	ldr	r2, [r4, #0]
 800b58c:	434b      	muls	r3, r1
 800b58e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b590:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b592:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b594:	18d2      	adds	r2, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b596:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b598:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b59a:	23ff      	movs	r3, #255	; 0xff
 800b59c:	2244      	movs	r2, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b59e:	2000      	movs	r0, #0
 800b5a0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b5a2:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800b5a4:	3201      	adds	r2, #1
 800b5a6:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 800b5a8:	2d00      	cmp	r5, #0
 800b5aa:	d108      	bne.n	800b5be <xQueueGenericReset+0x46>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10e      	bne.n	800b5d0 <xQueueGenericReset+0x58>
	taskEXIT_CRITICAL();
 800b5b2:	f001 f931 	bl	800c818 <vPortExitCritical>
}
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800b5ba:	b672      	cpsid	i
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericReset+0x44>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b5be:	0020      	movs	r0, r4
 800b5c0:	3010      	adds	r0, #16
 800b5c2:	f7ff fed7 	bl	800b374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b5c6:	0020      	movs	r0, r4
 800b5c8:	3024      	adds	r0, #36	; 0x24
 800b5ca:	f7ff fed3 	bl	800b374 <vListInitialise>
 800b5ce:	e7f0      	b.n	800b5b2 <xQueueGenericReset+0x3a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5d0:	0020      	movs	r0, r4
 800b5d2:	3010      	adds	r0, #16
 800b5d4:	f000 fdf6 	bl	800c1c4 <xTaskRemoveFromEventList>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d0ea      	beq.n	800b5b2 <xQueueGenericReset+0x3a>
					queueYIELD_IF_USING_PREEMPTION();
 800b5dc:	f001 f904 	bl	800c7e8 <vPortYield>
 800b5e0:	e7e7      	b.n	800b5b2 <xQueueGenericReset+0x3a>
 800b5e2:	46c0      	nop			; (mov r8, r8)

0800b5e4 <xQueueGenericCreateStatic>:
	{
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	ac06      	add	r4, sp, #24
 800b5ea:	001d      	movs	r5, r3
 800b5ec:	7824      	ldrb	r4, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d101      	bne.n	800b5f6 <xQueueGenericCreateStatic+0x12>
 800b5f2:	b672      	cpsid	i
 800b5f4:	e7fe      	b.n	800b5f4 <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5fa:	2a00      	cmp	r2, #0
 800b5fc:	d00c      	beq.n	800b618 <xQueueGenericCreateStatic+0x34>
 800b5fe:	2900      	cmp	r1, #0
 800b600:	d008      	beq.n	800b614 <xQueueGenericCreateStatic+0x30>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b602:	2350      	movs	r3, #80	; 0x50
 800b604:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b606:	9b01      	ldr	r3, [sp, #4]
 800b608:	2b50      	cmp	r3, #80	; 0x50
 800b60a:	d00f      	beq.n	800b62c <xQueueGenericCreateStatic+0x48>
 800b60c:	b672      	cpsid	i
 800b60e:	e7fe      	b.n	800b60e <xQueueGenericCreateStatic+0x2a>
		configASSERT( pxStaticQueue != NULL );
 800b610:	b672      	cpsid	i
 800b612:	e7fe      	b.n	800b612 <xQueueGenericCreateStatic+0x2e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b614:	b672      	cpsid	i
 800b616:	e7fe      	b.n	800b616 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b618:	2900      	cmp	r1, #0
 800b61a:	d117      	bne.n	800b64c <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b61c:	2350      	movs	r3, #80	; 0x50
 800b61e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b620:	9b01      	ldr	r3, [sp, #4]
 800b622:	2b50      	cmp	r3, #80	; 0x50
 800b624:	d1f2      	bne.n	800b60c <xQueueGenericCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b626:	002a      	movs	r2, r5
 800b628:	9b01      	ldr	r3, [sp, #4]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b62a:	e000      	b.n	800b62e <xQueueGenericCreateStatic+0x4a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b62c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b62e:	2346      	movs	r3, #70	; 0x46
 800b630:	2601      	movs	r6, #1
 800b632:	54ee      	strb	r6, [r5, r3]
	pxNewQueue->uxLength = uxQueueLength;
 800b634:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b636:	6429      	str	r1, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b638:	0028      	movs	r0, r5
 800b63a:	2101      	movs	r1, #1
 800b63c:	602a      	str	r2, [r5, #0]
 800b63e:	f7ff ff9b 	bl	800b578 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b642:	234c      	movs	r3, #76	; 0x4c
	}
 800b644:	0028      	movs	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 800b646:	54ec      	strb	r4, [r5, r3]
	}
 800b648:	b002      	add	sp, #8
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b64c:	b672      	cpsid	i
 800b64e:	e7fe      	b.n	800b64e <xQueueGenericCreateStatic+0x6a>

0800b650 <xQueueGenericCreate>:
	{
 800b650:	b510      	push	{r4, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b652:	2800      	cmp	r0, #0
 800b654:	d101      	bne.n	800b65a <xQueueGenericCreate+0xa>
 800b656:	b672      	cpsid	i
 800b658:	e7fe      	b.n	800b658 <xQueueGenericCreate+0x8>
 800b65a:	f7ff ff55 	bl	800b508 <xQueueGenericCreate.part.0>
	}
 800b65e:	bd10      	pop	{r4, pc}

0800b660 <xQueueGenericSend>:
{
 800b660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b662:	46ce      	mov	lr, r9
 800b664:	4647      	mov	r7, r8
 800b666:	b580      	push	{r7, lr}
 800b668:	b085      	sub	sp, #20
 800b66a:	0004      	movs	r4, r0
 800b66c:	4689      	mov	r9, r1
 800b66e:	001d      	movs	r5, r3
 800b670:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800b672:	2800      	cmp	r0, #0
 800b674:	d04c      	beq.n	800b710 <xQueueGenericSend+0xb0>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b676:	2900      	cmp	r1, #0
 800b678:	d045      	beq.n	800b706 <xQueueGenericSend+0xa6>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b67a:	2d02      	cmp	r5, #2
 800b67c:	d104      	bne.n	800b688 <xQueueGenericSend+0x28>
 800b67e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b680:	2b01      	cmp	r3, #1
 800b682:	d001      	beq.n	800b688 <xQueueGenericSend+0x28>
 800b684:	b672      	cpsid	i
 800b686:	e7fe      	b.n	800b686 <xQueueGenericSend+0x26>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b688:	f000 fe28 	bl	800c2dc <xTaskGetSchedulerState>
 800b68c:	1e06      	subs	r6, r0, #0
 800b68e:	d041      	beq.n	800b714 <xQueueGenericSend+0xb4>
 800b690:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b692:	2300      	movs	r3, #0
 800b694:	2744      	movs	r7, #68	; 0x44
 800b696:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800b698:	f001 f8b2 	bl	800c800 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b69c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b69e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d352      	bcc.n	800b74a <xQueueGenericSend+0xea>
 800b6a4:	2d02      	cmp	r5, #2
 800b6a6:	d050      	beq.n	800b74a <xQueueGenericSend+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6a8:	9b01      	ldr	r3, [sp, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d05f      	beq.n	800b76e <xQueueGenericSend+0x10e>
				else if( xEntryTimeSet == pdFALSE )
 800b6ae:	2e00      	cmp	r6, #0
 800b6b0:	d047      	beq.n	800b742 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 800b6b2:	f001 f8b1 	bl	800c818 <vPortExitCritical>
		vTaskSuspendAll();
 800b6b6:	f000 fb9d 	bl	800bdf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6ba:	f001 f8a1 	bl	800c800 <vPortEnterCritical>
 800b6be:	5de3      	ldrb	r3, [r4, r7]
 800b6c0:	b25b      	sxtb	r3, r3
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	d101      	bne.n	800b6ca <xQueueGenericSend+0x6a>
 800b6c6:	4643      	mov	r3, r8
 800b6c8:	55e3      	strb	r3, [r4, r7]
 800b6ca:	2345      	movs	r3, #69	; 0x45
 800b6cc:	5ce2      	ldrb	r2, [r4, r3]
 800b6ce:	b252      	sxtb	r2, r2
 800b6d0:	3201      	adds	r2, #1
 800b6d2:	d101      	bne.n	800b6d8 <xQueueGenericSend+0x78>
 800b6d4:	4642      	mov	r2, r8
 800b6d6:	54e2      	strb	r2, [r4, r3]
 800b6d8:	f001 f89e 	bl	800c818 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6dc:	a901      	add	r1, sp, #4
 800b6de:	a802      	add	r0, sp, #8
 800b6e0:	f000 fdbc 	bl	800c25c <xTaskCheckForTimeOut>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d146      	bne.n	800b776 <xQueueGenericSend+0x116>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6e8:	f001 f88a 	bl	800c800 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b6ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d014      	beq.n	800b71e <xQueueGenericSend+0xbe>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b6f4:	f001 f890 	bl	800c818 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b6f8:	0020      	movs	r0, r4
 800b6fa:	f7ff febb 	bl	800b474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6fe:	f000 fcd1 	bl	800c0a4 <xTaskResumeAll>
 800b702:	2601      	movs	r6, #1
 800b704:	e7c8      	b.n	800b698 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b706:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d0b6      	beq.n	800b67a <xQueueGenericSend+0x1a>
 800b70c:	b672      	cpsid	i
 800b70e:	e7fe      	b.n	800b70e <xQueueGenericSend+0xae>
	configASSERT( pxQueue );
 800b710:	b672      	cpsid	i
 800b712:	e7fe      	b.n	800b712 <xQueueGenericSend+0xb2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b714:	9b01      	ldr	r3, [sp, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0bb      	beq.n	800b692 <xQueueGenericSend+0x32>
 800b71a:	b672      	cpsid	i
 800b71c:	e7fe      	b.n	800b71c <xQueueGenericSend+0xbc>
	taskEXIT_CRITICAL();
 800b71e:	f001 f87b 	bl	800c818 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b722:	0020      	movs	r0, r4
 800b724:	9901      	ldr	r1, [sp, #4]
 800b726:	3010      	adds	r0, #16
 800b728:	f000 fd22 	bl	800c170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b72c:	0020      	movs	r0, r4
 800b72e:	f7ff fea1 	bl	800b474 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b732:	f000 fcb7 	bl	800c0a4 <xTaskResumeAll>
 800b736:	2800      	cmp	r0, #0
 800b738:	d1e3      	bne.n	800b702 <xQueueGenericSend+0xa2>
					portYIELD_WITHIN_API();
 800b73a:	f001 f855 	bl	800c7e8 <vPortYield>
 800b73e:	2601      	movs	r6, #1
 800b740:	e7aa      	b.n	800b698 <xQueueGenericSend+0x38>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b742:	a802      	add	r0, sp, #8
 800b744:	f000 fd7e 	bl	800c244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b748:	e7b3      	b.n	800b6b2 <xQueueGenericSend+0x52>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b74a:	002a      	movs	r2, r5
 800b74c:	4649      	mov	r1, r9
 800b74e:	0020      	movs	r0, r4
 800b750:	f7ff fe56 	bl	800b400 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b756:	2b00      	cmp	r3, #0
 800b758:	d117      	bne.n	800b78a <xQueueGenericSend+0x12a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d112      	bne.n	800b784 <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800b75e:	f001 f85b 	bl	800c818 <vPortExitCritical>
				return pdPASS;
 800b762:	2001      	movs	r0, #1
}
 800b764:	b005      	add	sp, #20
 800b766:	bcc0      	pop	{r6, r7}
 800b768:	46b9      	mov	r9, r7
 800b76a:	46b0      	mov	r8, r6
 800b76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800b76e:	f001 f853 	bl	800c818 <vPortExitCritical>
					return errQUEUE_FULL;
 800b772:	2000      	movs	r0, #0
 800b774:	e7f6      	b.n	800b764 <xQueueGenericSend+0x104>
			prvUnlockQueue( pxQueue );
 800b776:	0020      	movs	r0, r4
 800b778:	f7ff fe7c 	bl	800b474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b77c:	f000 fc92 	bl	800c0a4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800b780:	2000      	movs	r0, #0
 800b782:	e7ef      	b.n	800b764 <xQueueGenericSend+0x104>
							queueYIELD_IF_USING_PREEMPTION();
 800b784:	f001 f830 	bl	800c7e8 <vPortYield>
 800b788:	e7e9      	b.n	800b75e <xQueueGenericSend+0xfe>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b78a:	0020      	movs	r0, r4
 800b78c:	3024      	adds	r0, #36	; 0x24
 800b78e:	f000 fd19 	bl	800c1c4 <xTaskRemoveFromEventList>
 800b792:	e7e2      	b.n	800b75a <xQueueGenericSend+0xfa>

0800b794 <xQueueGenericSendFromISR>:
{
 800b794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b796:	464f      	mov	r7, r9
 800b798:	4646      	mov	r6, r8
 800b79a:	46d6      	mov	lr, sl
 800b79c:	0004      	movs	r4, r0
 800b79e:	b5c0      	push	{r6, r7, lr}
 800b7a0:	001d      	movs	r5, r3
 800b7a2:	000f      	movs	r7, r1
 800b7a4:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d037      	beq.n	800b81a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7aa:	2900      	cmp	r1, #0
 800b7ac:	d017      	beq.n	800b7de <xQueueGenericSendFromISR+0x4a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7ae:	2d02      	cmp	r5, #2
 800b7b0:	d104      	bne.n	800b7bc <xQueueGenericSendFromISR+0x28>
 800b7b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d017      	beq.n	800b7e8 <xQueueGenericSendFromISR+0x54>
 800b7b8:	b672      	cpsid	i
 800b7ba:	e7fe      	b.n	800b7ba <xQueueGenericSendFromISR+0x26>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7bc:	f001 f83a 	bl	800c834 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b7c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7c4:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d312      	bcc.n	800b7f0 <xQueueGenericSendFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 800b7ca:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	f001 f835 	bl	800c83c <vClearInterruptMaskFromISR>
}
 800b7d2:	0028      	movs	r0, r5
 800b7d4:	bce0      	pop	{r5, r6, r7}
 800b7d6:	46ba      	mov	sl, r7
 800b7d8:	46b1      	mov	r9, r6
 800b7da:	46a8      	mov	r8, r5
 800b7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0e4      	beq.n	800b7ae <xQueueGenericSendFromISR+0x1a>
 800b7e4:	b672      	cpsid	i
 800b7e6:	e7fe      	b.n	800b7e6 <xQueueGenericSendFromISR+0x52>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7e8:	f001 f824 	bl	800c834 <ulSetInterruptMaskFromISR>
 800b7ec:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7f0:	2345      	movs	r3, #69	; 0x45
 800b7f2:	469a      	mov	sl, r3
 800b7f4:	5ce3      	ldrb	r3, [r4, r3]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7f6:	002a      	movs	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7f8:	b25b      	sxtb	r3, r3
 800b7fa:	4699      	mov	r9, r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7fc:	0039      	movs	r1, r7
 800b7fe:	0020      	movs	r0, r4
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b802:	f7ff fdfd 	bl	800b400 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b806:	464b      	mov	r3, r9
 800b808:	3301      	adds	r3, #1
 800b80a:	d008      	beq.n	800b81e <xQueueGenericSendFromISR+0x8a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b80c:	464b      	mov	r3, r9
 800b80e:	4652      	mov	r2, sl
 800b810:	3301      	adds	r3, #1
 800b812:	b25b      	sxtb	r3, r3
			xReturn = pdPASS;
 800b814:	2501      	movs	r5, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b816:	54a3      	strb	r3, [r4, r2]
 800b818:	e7d8      	b.n	800b7cc <xQueueGenericSendFromISR+0x38>
	configASSERT( pxQueue );
 800b81a:	b672      	cpsid	i
 800b81c:	e7fe      	b.n	800b81c <xQueueGenericSendFromISR+0x88>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b81e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800b820:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0d2      	beq.n	800b7cc <xQueueGenericSendFromISR+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b826:	0020      	movs	r0, r4
 800b828:	3024      	adds	r0, #36	; 0x24
 800b82a:	f000 fccb 	bl	800c1c4 <xTaskRemoveFromEventList>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d0cc      	beq.n	800b7cc <xQueueGenericSendFromISR+0x38>
							if( pxHigherPriorityTaskWoken != NULL )
 800b832:	2e00      	cmp	r6, #0
 800b834:	d0ca      	beq.n	800b7cc <xQueueGenericSendFromISR+0x38>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b836:	6035      	str	r5, [r6, #0]
 800b838:	e7c8      	b.n	800b7cc <xQueueGenericSendFromISR+0x38>
 800b83a:	46c0      	nop			; (mov r8, r8)

0800b83c <xQueueReceive>:
{
 800b83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b83e:	46ce      	mov	lr, r9
 800b840:	4647      	mov	r7, r8
 800b842:	b580      	push	{r7, lr}
 800b844:	b085      	sub	sp, #20
 800b846:	0004      	movs	r4, r0
 800b848:	000d      	movs	r5, r1
 800b84a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d100      	bne.n	800b852 <xQueueReceive+0x16>
 800b850:	e074      	b.n	800b93c <xQueueReceive+0x100>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b852:	2900      	cmp	r1, #0
 800b854:	d04a      	beq.n	800b8ec <xQueueReceive+0xb0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b856:	f000 fd41 	bl	800c2dc <xTaskGetSchedulerState>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d04b      	beq.n	800b8f6 <xQueueReceive+0xba>
		taskENTER_CRITICAL();
 800b85e:	f000 ffcf 	bl	800c800 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b864:	4699      	mov	r9, r3
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b866:	2b00      	cmp	r3, #0
 800b868:	d16a      	bne.n	800b940 <xQueueReceive+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b86a:	9b01      	ldr	r3, [sp, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d035      	beq.n	800b8dc <xQueueReceive+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b870:	a802      	add	r0, sp, #8
 800b872:	f000 fce7 	bl	800c244 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 800b876:	2300      	movs	r3, #0
 800b878:	2744      	movs	r7, #68	; 0x44
 800b87a:	4698      	mov	r8, r3
 800b87c:	2645      	movs	r6, #69	; 0x45
		taskEXIT_CRITICAL();
 800b87e:	f000 ffcb 	bl	800c818 <vPortExitCritical>
		vTaskSuspendAll();
 800b882:	f000 fab7 	bl	800bdf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b886:	f000 ffbb 	bl	800c800 <vPortEnterCritical>
 800b88a:	5de3      	ldrb	r3, [r4, r7]
 800b88c:	b25b      	sxtb	r3, r3
 800b88e:	3301      	adds	r3, #1
 800b890:	d101      	bne.n	800b896 <xQueueReceive+0x5a>
 800b892:	4643      	mov	r3, r8
 800b894:	55e3      	strb	r3, [r4, r7]
 800b896:	5da3      	ldrb	r3, [r4, r6]
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	3301      	adds	r3, #1
 800b89c:	d101      	bne.n	800b8a2 <xQueueReceive+0x66>
 800b89e:	4643      	mov	r3, r8
 800b8a0:	55a3      	strb	r3, [r4, r6]
 800b8a2:	f000 ffb9 	bl	800c818 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8a6:	a901      	add	r1, sp, #4
 800b8a8:	a802      	add	r0, sp, #8
 800b8aa:	f000 fcd7 	bl	800c25c <xTaskCheckForTimeOut>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d126      	bne.n	800b900 <xQueueReceive+0xc4>
	taskENTER_CRITICAL();
 800b8b2:	f000 ffa5 	bl	800c800 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d02e      	beq.n	800b91a <xQueueReceive+0xde>
	taskEXIT_CRITICAL();
 800b8bc:	f000 ffac 	bl	800c818 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b8c0:	0020      	movs	r0, r4
 800b8c2:	f7ff fdd7 	bl	800b474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8c6:	f000 fbed 	bl	800c0a4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800b8ca:	f000 ff99 	bl	800c800 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b8d0:	4699      	mov	r9, r3
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d134      	bne.n	800b940 <xQueueReceive+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8d6:	9b01      	ldr	r3, [sp, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1d0      	bne.n	800b87e <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 800b8dc:	f000 ff9c 	bl	800c818 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b8e0:	2000      	movs	r0, #0
}
 800b8e2:	b005      	add	sp, #20
 800b8e4:	bcc0      	pop	{r6, r7}
 800b8e6:	46b9      	mov	r9, r7
 800b8e8:	46b0      	mov	r8, r6
 800b8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d0b1      	beq.n	800b856 <xQueueReceive+0x1a>
 800b8f2:	b672      	cpsid	i
 800b8f4:	e7fe      	b.n	800b8f4 <xQueueReceive+0xb8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d0b0      	beq.n	800b85e <xQueueReceive+0x22>
 800b8fc:	b672      	cpsid	i
 800b8fe:	e7fe      	b.n	800b8fe <xQueueReceive+0xc2>
			prvUnlockQueue( pxQueue );
 800b900:	0020      	movs	r0, r4
 800b902:	f7ff fdb7 	bl	800b474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b906:	f000 fbcd 	bl	800c0a4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800b90a:	f000 ff79 	bl	800c800 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b90e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b910:	2b00      	cmp	r3, #0
 800b912:	d0e3      	beq.n	800b8dc <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 800b914:	f000 ff80 	bl	800c818 <vPortExitCritical>
		taskENTER_CRITICAL();
 800b918:	e7d7      	b.n	800b8ca <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 800b91a:	f000 ff7d 	bl	800c818 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b91e:	0020      	movs	r0, r4
 800b920:	9901      	ldr	r1, [sp, #4]
 800b922:	3024      	adds	r0, #36	; 0x24
 800b924:	f000 fc24 	bl	800c170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b928:	0020      	movs	r0, r4
 800b92a:	f7ff fda3 	bl	800b474 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b92e:	f000 fbb9 	bl	800c0a4 <xTaskResumeAll>
 800b932:	2800      	cmp	r0, #0
 800b934:	d1c9      	bne.n	800b8ca <xQueueReceive+0x8e>
					portYIELD_WITHIN_API();
 800b936:	f000 ff57 	bl	800c7e8 <vPortYield>
		taskENTER_CRITICAL();
 800b93a:	e7c6      	b.n	800b8ca <xQueueReceive+0x8e>
	configASSERT( ( pxQueue ) );
 800b93c:	b672      	cpsid	i
 800b93e:	e7fe      	b.n	800b93e <xQueueReceive+0x102>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b940:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b942:	2a00      	cmp	r2, #0
 800b944:	d00a      	beq.n	800b95c <xQueueReceive+0x120>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b946:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b948:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b94a:	1889      	adds	r1, r1, r2
 800b94c:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b94e:	4299      	cmp	r1, r3
 800b950:	d301      	bcc.n	800b956 <xQueueReceive+0x11a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b952:	6821      	ldr	r1, [r4, #0]
 800b954:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b956:	0028      	movs	r0, r5
 800b958:	f003 fa26 	bl	800eda8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b95c:	464b      	mov	r3, r9
 800b95e:	3b01      	subs	r3, #1
 800b960:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b962:	6923      	ldr	r3, [r4, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d103      	bne.n	800b970 <xQueueReceive+0x134>
				taskEXIT_CRITICAL();
 800b968:	f000 ff56 	bl	800c818 <vPortExitCritical>
				return pdPASS;
 800b96c:	2001      	movs	r0, #1
 800b96e:	e7b8      	b.n	800b8e2 <xQueueReceive+0xa6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b970:	0020      	movs	r0, r4
 800b972:	3010      	adds	r0, #16
 800b974:	f000 fc26 	bl	800c1c4 <xTaskRemoveFromEventList>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d0f5      	beq.n	800b968 <xQueueReceive+0x12c>
						queueYIELD_IF_USING_PREEMPTION();
 800b97c:	f000 ff34 	bl	800c7e8 <vPortYield>
 800b980:	e7f2      	b.n	800b968 <xQueueReceive+0x12c>
 800b982:	46c0      	nop			; (mov r8, r8)

0800b984 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b984:	b530      	push	{r4, r5, lr}
 800b986:	4d08      	ldr	r5, [pc, #32]	; (800b9a8 <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b988:	2300      	movs	r3, #0
 800b98a:	002a      	movs	r2, r5
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b98c:	6814      	ldr	r4, [r2, #0]
 800b98e:	2c00      	cmp	r4, #0
 800b990:	d004      	beq.n	800b99c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b992:	3301      	adds	r3, #1
 800b994:	3208      	adds	r2, #8
 800b996:	2b08      	cmp	r3, #8
 800b998:	d1f8      	bne.n	800b98c <vQueueAddToRegistry+0x8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b99a:	bd30      	pop	{r4, r5, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b99c:	00db      	lsls	r3, r3, #3
 800b99e:	50e9      	str	r1, [r5, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b9a0:	18ed      	adds	r5, r5, r3
 800b9a2:	6068      	str	r0, [r5, #4]
				break;
 800b9a4:	e7f9      	b.n	800b99a <vQueueAddToRegistry+0x16>
 800b9a6:	46c0      	nop			; (mov r8, r8)
 800b9a8:	20005444 	.word	0x20005444

0800b9ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9ac:	b570      	push	{r4, r5, r6, lr}
 800b9ae:	0004      	movs	r4, r0
 800b9b0:	0016      	movs	r6, r2
 800b9b2:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b9b4:	f000 ff24 	bl	800c800 <vPortEnterCritical>
 800b9b8:	2244      	movs	r2, #68	; 0x44
 800b9ba:	5ca3      	ldrb	r3, [r4, r2]
 800b9bc:	b25b      	sxtb	r3, r3
 800b9be:	3301      	adds	r3, #1
 800b9c0:	d101      	bne.n	800b9c6 <vQueueWaitForMessageRestricted+0x1a>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	54a3      	strb	r3, [r4, r2]
 800b9c6:	2245      	movs	r2, #69	; 0x45
 800b9c8:	5ca3      	ldrb	r3, [r4, r2]
 800b9ca:	b25b      	sxtb	r3, r3
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	d101      	bne.n	800b9d4 <vQueueWaitForMessageRestricted+0x28>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	54a3      	strb	r3, [r4, r2]
 800b9d4:	f000 ff20 	bl	800c818 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b9d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b9de:	0020      	movs	r0, r4
 800b9e0:	f7ff fd48 	bl	800b474 <prvUnlockQueue>
	}
 800b9e4:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b9e6:	0020      	movs	r0, r4
 800b9e8:	0032      	movs	r2, r6
 800b9ea:	0029      	movs	r1, r5
 800b9ec:	3024      	adds	r0, #36	; 0x24
 800b9ee:	f000 fbd1 	bl	800c194 <vTaskPlaceOnEventListRestricted>
 800b9f2:	e7f4      	b.n	800b9de <vQueueWaitForMessageRestricted+0x32>

0800b9f4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9f6:	46c6      	mov	lr, r8
 800b9f8:	b500      	push	{lr}
 800b9fa:	0005      	movs	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9fc:	f000 ff00 	bl	800c800 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba00:	4a32      	ldr	r2, [pc, #200]	; (800bacc <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 800ba02:	4f33      	ldr	r7, [pc, #204]	; (800bad0 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 800ba04:	6813      	ldr	r3, [r2, #0]
 800ba06:	3301      	adds	r3, #1
 800ba08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d02b      	beq.n	800ba68 <prvAddNewTaskToReadyList+0x74>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba10:	4c30      	ldr	r4, [pc, #192]	; (800bad4 <prvAddNewTaskToReadyList+0xe0>)
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d01f      	beq.n	800ba58 <prvAddNewTaskToReadyList+0x64>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba18:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ba1a:	4e2f      	ldr	r6, [pc, #188]	; (800bad8 <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba1c:	492f      	ldr	r1, [pc, #188]	; (800badc <prvAddNewTaskToReadyList+0xe8>)
 800ba1e:	680b      	ldr	r3, [r1, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	600b      	str	r3, [r1, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba24:	646b      	str	r3, [r5, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba26:	4b2e      	ldr	r3, [pc, #184]	; (800bae0 <prvAddNewTaskToReadyList+0xec>)
 800ba28:	6819      	ldr	r1, [r3, #0]
 800ba2a:	4291      	cmp	r1, r2
 800ba2c:	d200      	bcs.n	800ba30 <prvAddNewTaskToReadyList+0x3c>
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	0093      	lsls	r3, r2, #2
 800ba32:	189b      	adds	r3, r3, r2
 800ba34:	0098      	lsls	r0, r3, #2
 800ba36:	1d29      	adds	r1, r5, #4
 800ba38:	1830      	adds	r0, r6, r0
 800ba3a:	f7ff fcab 	bl	800b394 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba3e:	f000 feeb 	bl	800c818 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <prvAddNewTaskToReadyList+0x5e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d312      	bcc.n	800ba78 <prvAddNewTaskToReadyList+0x84>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba52:	bc80      	pop	{r7}
 800ba54:	46b8      	mov	r8, r7
 800ba56:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ba5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d800      	bhi.n	800ba64 <prvAddNewTaskToReadyList+0x70>
					pxCurrentTCB = pxNewTCB;
 800ba62:	603d      	str	r5, [r7, #0]
 800ba64:	4e1c      	ldr	r6, [pc, #112]	; (800bad8 <prvAddNewTaskToReadyList+0xe4>)
 800ba66:	e7d9      	b.n	800ba1c <prvAddNewTaskToReadyList+0x28>
			pxCurrentTCB = pxNewTCB;
 800ba68:	603d      	str	r5, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba6a:	6813      	ldr	r3, [r2, #0]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d006      	beq.n	800ba7e <prvAddNewTaskToReadyList+0x8a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba70:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ba72:	4e19      	ldr	r6, [pc, #100]	; (800bad8 <prvAddNewTaskToReadyList+0xe4>)
 800ba74:	4c17      	ldr	r4, [pc, #92]	; (800bad4 <prvAddNewTaskToReadyList+0xe0>)
 800ba76:	e7d1      	b.n	800ba1c <prvAddNewTaskToReadyList+0x28>
			taskYIELD_IF_USING_PREEMPTION();
 800ba78:	f000 feb6 	bl	800c7e8 <vPortYield>
}
 800ba7c:	e7e9      	b.n	800ba52 <prvAddNewTaskToReadyList+0x5e>
 800ba7e:	238c      	movs	r3, #140	; 0x8c
 800ba80:	4e15      	ldr	r6, [pc, #84]	; (800bad8 <prvAddNewTaskToReadyList+0xe4>)
 800ba82:	00db      	lsls	r3, r3, #3
 800ba84:	4698      	mov	r8, r3
 800ba86:	0034      	movs	r4, r6
 800ba88:	44b0      	add	r8, r6
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba8a:	0020      	movs	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba8c:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba8e:	f7ff fc71 	bl	800b374 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba92:	45a0      	cmp	r8, r4
 800ba94:	d1f9      	bne.n	800ba8a <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba96:	4b13      	ldr	r3, [pc, #76]	; (800bae4 <prvAddNewTaskToReadyList+0xf0>)
 800ba98:	4698      	mov	r8, r3
 800ba9a:	0018      	movs	r0, r3
 800ba9c:	f7ff fc6a 	bl	800b374 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800baa0:	4c11      	ldr	r4, [pc, #68]	; (800bae8 <prvAddNewTaskToReadyList+0xf4>)
 800baa2:	0020      	movs	r0, r4
 800baa4:	f7ff fc66 	bl	800b374 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800baa8:	4810      	ldr	r0, [pc, #64]	; (800baec <prvAddNewTaskToReadyList+0xf8>)
 800baaa:	f7ff fc63 	bl	800b374 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800baae:	4810      	ldr	r0, [pc, #64]	; (800baf0 <prvAddNewTaskToReadyList+0xfc>)
 800bab0:	f7ff fc60 	bl	800b374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bab4:	480f      	ldr	r0, [pc, #60]	; (800baf4 <prvAddNewTaskToReadyList+0x100>)
 800bab6:	f7ff fc5d 	bl	800b374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800baba:	4642      	mov	r2, r8
 800babc:	4b0e      	ldr	r3, [pc, #56]	; (800baf8 <prvAddNewTaskToReadyList+0x104>)
 800babe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bac0:	4b0e      	ldr	r3, [pc, #56]	; (800bafc <prvAddNewTaskToReadyList+0x108>)
		prvAddTaskToReadyList( pxNewTCB );
 800bac2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bac4:	601c      	str	r4, [r3, #0]
 800bac6:	4c03      	ldr	r4, [pc, #12]	; (800bad4 <prvAddNewTaskToReadyList+0xe0>)
}
 800bac8:	e7a8      	b.n	800ba1c <prvAddNewTaskToReadyList+0x28>
 800baca:	46c0      	nop			; (mov r8, r8)
 800bacc:	200058f0 	.word	0x200058f0
 800bad0:	20005484 	.word	0x20005484
 800bad4:	2000594c 	.word	0x2000594c
 800bad8:	20005490 	.word	0x20005490
 800badc:	200058fc 	.word	0x200058fc
 800bae0:	20005900 	.word	0x20005900
 800bae4:	20005904 	.word	0x20005904
 800bae8:	20005918 	.word	0x20005918
 800baec:	20005938 	.word	0x20005938
 800baf0:	20005964 	.word	0x20005964
 800baf4:	20005950 	.word	0x20005950
 800baf8:	20005488 	.word	0x20005488
 800bafc:	2000548c 	.word	0x2000548c

0800bb00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	0006      	movs	r6, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb04:	4b14      	ldr	r3, [pc, #80]	; (800bb58 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb06:	4c15      	ldr	r4, [pc, #84]	; (800bb5c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800bb08:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb0a:	6820      	ldr	r0, [r4, #0]
{
 800bb0c:	000d      	movs	r5, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb0e:	3004      	adds	r0, #4
 800bb10:	f7ff fc64 	bl	800b3dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb14:	1c73      	adds	r3, r6, #1
 800bb16:	d017      	beq.n	800bb48 <prvAddCurrentTaskToDelayedList+0x48>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb18:	6823      	ldr	r3, [r4, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb1a:	19be      	adds	r6, r7, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb1c:	605e      	str	r6, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800bb1e:	42b7      	cmp	r7, r6
 800bb20:	d80b      	bhi.n	800bb3a <prvAddCurrentTaskToDelayedList+0x3a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb22:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <prvAddCurrentTaskToDelayedList+0x60>)
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	6821      	ldr	r1, [r4, #0]
 800bb28:	3104      	adds	r1, #4
 800bb2a:	f7ff fc3f 	bl	800b3ac <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb2e:	4b0d      	ldr	r3, [pc, #52]	; (800bb64 <prvAddCurrentTaskToDelayedList+0x64>)
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	42b2      	cmp	r2, r6
 800bb34:	d900      	bls.n	800bb38 <prvAddCurrentTaskToDelayedList+0x38>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800bb36:	601e      	str	r6, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb3a:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <prvAddCurrentTaskToDelayedList+0x68>)
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	6821      	ldr	r1, [r4, #0]
 800bb40:	3104      	adds	r1, #4
 800bb42:	f7ff fc33 	bl	800b3ac <vListInsert>
 800bb46:	e7f7      	b.n	800bb38 <prvAddCurrentTaskToDelayedList+0x38>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb48:	2d00      	cmp	r5, #0
 800bb4a:	d0e5      	beq.n	800bb18 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb4c:	6821      	ldr	r1, [r4, #0]
 800bb4e:	4807      	ldr	r0, [pc, #28]	; (800bb6c <prvAddCurrentTaskToDelayedList+0x6c>)
 800bb50:	3104      	adds	r1, #4
 800bb52:	f7ff fc1f 	bl	800b394 <vListInsertEnd>
 800bb56:	e7ef      	b.n	800bb38 <prvAddCurrentTaskToDelayedList+0x38>
 800bb58:	20005978 	.word	0x20005978
 800bb5c:	20005484 	.word	0x20005484
 800bb60:	20005488 	.word	0x20005488
 800bb64:	2000592c 	.word	0x2000592c
 800bb68:	2000548c 	.word	0x2000548c
 800bb6c:	20005950 	.word	0x20005950

0800bb70 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb72:	46d6      	mov	lr, sl
 800bb74:	464f      	mov	r7, r9
 800bb76:	4646      	mov	r6, r8
 800bb78:	b5c0      	push	{r6, r7, lr}
 800bb7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb7c:	0094      	lsls	r4, r2, #2
 800bb7e:	0022      	movs	r2, r4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bb80:	4681      	mov	r9, r0
 800bb82:	000f      	movs	r7, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb84:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800bb86:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bb88:	469a      	mov	sl, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb8a:	f002 ff3b 	bl	800ea04 <memset>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb8e:	2207      	movs	r2, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bb92:	3c04      	subs	r4, #4
 800bb94:	191b      	adds	r3, r3, r4
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb96:	4393      	bics	r3, r2
 800bb98:	4698      	mov	r8, r3
	if( pcName != NULL )
 800bb9a:	2f00      	cmp	r7, #0
 800bb9c:	d040      	beq.n	800bc20 <prvInitialiseNewTask.constprop.0+0xb0>
 800bb9e:	002b      	movs	r3, r5
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bba0:	2400      	movs	r4, #0
 800bba2:	3334      	adds	r3, #52	; 0x34
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bba4:	5d3e      	ldrb	r6, [r7, r4]
 800bba6:	551e      	strb	r6, [r3, r4]
			if( pcName[ x ] == ( char ) 0x00 )
 800bba8:	2e00      	cmp	r6, #0
 800bbaa:	d002      	beq.n	800bbb2 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbac:	3401      	adds	r4, #1
 800bbae:	2c10      	cmp	r4, #16
 800bbb0:	d1f8      	bne.n	800bba4 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bbb2:	2343      	movs	r3, #67	; 0x43
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bbb8:	9c08      	ldr	r4, [sp, #32]
 800bbba:	2c37      	cmp	r4, #55	; 0x37
 800bbbc:	d900      	bls.n	800bbc0 <prvInitialiseNewTask.constprop.0+0x50>
 800bbbe:	2437      	movs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800bbc0:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bbc2:	1d28      	adds	r0, r5, #4
	pxNewTCB->uxPriority = uxPriority;
 800bbc4:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800bbc6:	64ec      	str	r4, [r5, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bbc8:	652e      	str	r6, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bbca:	f7ff fbdf 	bl	800b38c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bbce:	0028      	movs	r0, r5
 800bbd0:	3018      	adds	r0, #24
 800bbd2:	f7ff fbdb 	bl	800b38c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbd6:	2338      	movs	r3, #56	; 0x38
 800bbd8:	1b1b      	subs	r3, r3, r4
 800bbda:	61ab      	str	r3, [r5, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800bbdc:	23a0      	movs	r3, #160	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bbde:	0028      	movs	r0, r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bbe0:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bbe2:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800bbe4:	50ee      	str	r6, [r5, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbe6:	3304      	adds	r3, #4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bbe8:	224c      	movs	r2, #76	; 0x4c
 800bbea:	2100      	movs	r1, #0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbec:	54ee      	strb	r6, [r5, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bbee:	3054      	adds	r0, #84	; 0x54
 800bbf0:	f002 ff08 	bl	800ea04 <memset>
 800bbf4:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bbf6:	4649      	mov	r1, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bbf8:	001a      	movs	r2, r3
 800bbfa:	65ab      	str	r3, [r5, #88]	; 0x58
 800bbfc:	3268      	adds	r2, #104	; 0x68
 800bbfe:	33d0      	adds	r3, #208	; 0xd0
 800bc00:	65ea      	str	r2, [r5, #92]	; 0x5c
 800bc02:	662b      	str	r3, [r5, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc04:	4652      	mov	r2, sl
 800bc06:	4640      	mov	r0, r8
 800bc08:	f000 fddc 	bl	800c7c4 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800bc0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc0e:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d000      	beq.n	800bc16 <prvInitialiseNewTask.constprop.0+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc14:	601d      	str	r5, [r3, #0]
}
 800bc16:	bce0      	pop	{r5, r6, r7}
 800bc18:	46ba      	mov	sl, r7
 800bc1a:	46b1      	mov	r9, r6
 800bc1c:	46a8      	mov	r8, r5
 800bc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bc20:	2334      	movs	r3, #52	; 0x34
 800bc22:	54ef      	strb	r7, [r5, r3]
 800bc24:	e7c8      	b.n	800bbb8 <prvInitialiseNewTask.constprop.0+0x48>
 800bc26:	46c0      	nop			; (mov r8, r8)
 800bc28:	200066d4 	.word	0x200066d4

0800bc2c <prvIdleTask>:
{
 800bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2e:	4647      	mov	r7, r8
 800bc30:	46ce      	mov	lr, r9
 800bc32:	4b1e      	ldr	r3, [pc, #120]	; (800bcac <prvIdleTask+0x80>)
 800bc34:	b580      	push	{r7, lr}
 800bc36:	4698      	mov	r8, r3
 800bc38:	4b1d      	ldr	r3, [pc, #116]	; (800bcb0 <prvIdleTask+0x84>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc3a:	27a5      	movs	r7, #165	; 0xa5
 800bc3c:	4699      	mov	r9, r3
 800bc3e:	4d1d      	ldr	r5, [pc, #116]	; (800bcb4 <prvIdleTask+0x88>)
 800bc40:	4e1d      	ldr	r6, [pc, #116]	; (800bcb8 <prvIdleTask+0x8c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc42:	682b      	ldr	r3, [r5, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d025      	beq.n	800bc94 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 800bc48:	f000 fdda 	bl	800c800 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4c:	4643      	mov	r3, r8
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc52:	1d20      	adds	r0, r4, #4
 800bc54:	f7ff fbc2 	bl	800b3dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc58:	6833      	ldr	r3, [r6, #0]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc5e:	682b      	ldr	r3, [r5, #0]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800bc64:	f000 fdd8 	bl	800c818 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc68:	0020      	movs	r0, r4
 800bc6a:	3054      	adds	r0, #84	; 0x54
 800bc6c:	f002 ffb0 	bl	800ebd0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc70:	5de3      	ldrb	r3, [r4, r7]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d005      	beq.n	800bc82 <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d013      	beq.n	800bca2 <prvIdleTask+0x76>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d0e1      	beq.n	800bc42 <prvIdleTask+0x16>
 800bc7e:	b672      	cpsid	i
 800bc80:	e7fe      	b.n	800bc80 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 800bc82:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bc84:	f000 ff18 	bl	800cab8 <vPortFree>
				vPortFree( pxTCB );
 800bc88:	0020      	movs	r0, r4
 800bc8a:	f000 ff15 	bl	800cab8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc8e:	682b      	ldr	r3, [r5, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1d9      	bne.n	800bc48 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc94:	464b      	mov	r3, r9
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d9d2      	bls.n	800bc42 <prvIdleTask+0x16>
				taskYIELD();
 800bc9c:	f000 fda4 	bl	800c7e8 <vPortYield>
 800bca0:	e7cf      	b.n	800bc42 <prvIdleTask+0x16>
				vPortFree( pxTCB );
 800bca2:	0020      	movs	r0, r4
 800bca4:	f000 ff08 	bl	800cab8 <vPortFree>
 800bca8:	e7cb      	b.n	800bc42 <prvIdleTask+0x16>
 800bcaa:	46c0      	nop			; (mov r8, r8)
 800bcac:	20005964 	.word	0x20005964
 800bcb0:	20005490 	.word	0x20005490
 800bcb4:	200058f4 	.word	0x200058f4
 800bcb8:	200058f0 	.word	0x200058f0

0800bcbc <xTaskCreateStatic>:
	{
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 800bcc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bcc2:	2c00      	cmp	r4, #0
 800bcc4:	d00b      	beq.n	800bcde <xTaskCreateStatic+0x22>
		configASSERT( pxTaskBuffer != NULL );
 800bcc6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bcc8:	2c00      	cmp	r4, #0
 800bcca:	d006      	beq.n	800bcda <xTaskCreateStatic+0x1e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800bccc:	24a8      	movs	r4, #168	; 0xa8
 800bcce:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bcd0:	9c05      	ldr	r4, [sp, #20]
 800bcd2:	2ca8      	cmp	r4, #168	; 0xa8
 800bcd4:	d005      	beq.n	800bce2 <xTaskCreateStatic+0x26>
 800bcd6:	b672      	cpsid	i
 800bcd8:	e7fe      	b.n	800bcd8 <xTaskCreateStatic+0x1c>
		configASSERT( pxTaskBuffer != NULL );
 800bcda:	b672      	cpsid	i
 800bcdc:	e7fe      	b.n	800bcdc <xTaskCreateStatic+0x20>
		configASSERT( puxStackBuffer != NULL );
 800bcde:	b672      	cpsid	i
 800bce0:	e7fe      	b.n	800bce0 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bce2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bce4:	9c05      	ldr	r4, [sp, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bce6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bce8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcea:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcec:	24a5      	movs	r4, #165	; 0xa5
 800bcee:	2502      	movs	r5, #2
 800bcf0:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcf2:	ac04      	add	r4, sp, #16
 800bcf4:	9401      	str	r4, [sp, #4]
 800bcf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bcf8:	9602      	str	r6, [sp, #8]
 800bcfa:	9400      	str	r4, [sp, #0]
 800bcfc:	f7ff ff38 	bl	800bb70 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd00:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd02:	f7ff fe77 	bl	800b9f4 <prvAddNewTaskToReadyList>
		return xReturn;
 800bd06:	9804      	ldr	r0, [sp, #16]
	}
 800bd08:	b006      	add	sp, #24
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}

0800bd0c <xTaskCreate>:
	{
 800bd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd0e:	46ce      	mov	lr, r9
 800bd10:	4647      	mov	r7, r8
 800bd12:	b580      	push	{r7, lr}
 800bd14:	0007      	movs	r7, r0
 800bd16:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd18:	0090      	lsls	r0, r2, #2
	{
 800bd1a:	4688      	mov	r8, r1
 800bd1c:	0015      	movs	r5, r2
 800bd1e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd20:	f000 fe36 	bl	800c990 <pvPortMalloc>
 800bd24:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 800bd26:	d01c      	beq.n	800bd62 <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd28:	20a8      	movs	r0, #168	; 0xa8
 800bd2a:	f000 fe31 	bl	800c990 <pvPortMalloc>
 800bd2e:	1e06      	subs	r6, r0, #0
				if( pxNewTCB != NULL )
 800bd30:	d01a      	beq.n	800bd68 <xTaskCreate+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd32:	23a5      	movs	r3, #165	; 0xa5
 800bd34:	2200      	movs	r2, #0
					pxNewTCB->pxStack = pxStack;
 800bd36:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd38:	54c2      	strb	r2, [r0, r3]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd3c:	002a      	movs	r2, r5
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd42:	4641      	mov	r1, r8
 800bd44:	9002      	str	r0, [sp, #8]
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	0038      	movs	r0, r7
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	f7ff ff10 	bl	800bb70 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd50:	0030      	movs	r0, r6
 800bd52:	f7ff fe4f 	bl	800b9f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd56:	2001      	movs	r0, #1
	}
 800bd58:	b005      	add	sp, #20
 800bd5a:	bcc0      	pop	{r6, r7}
 800bd5c:	46b9      	mov	r9, r7
 800bd5e:	46b0      	mov	r8, r6
 800bd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd62:	2001      	movs	r0, #1
 800bd64:	4240      	negs	r0, r0
		return xReturn;
 800bd66:	e7f7      	b.n	800bd58 <xTaskCreate+0x4c>
					vPortFree( pxStack );
 800bd68:	0020      	movs	r0, r4
 800bd6a:	f000 fea5 	bl	800cab8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd6e:	2001      	movs	r0, #1
 800bd70:	4240      	negs	r0, r0
 800bd72:	e7f1      	b.n	800bd58 <xTaskCreate+0x4c>

0800bd74 <vTaskStartScheduler>:
{
 800bd74:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd76:	2400      	movs	r4, #0
{
 800bd78:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd7a:	aa07      	add	r2, sp, #28
 800bd7c:	a906      	add	r1, sp, #24
 800bd7e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd80:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd82:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd84:	f7ff fade 	bl	800b344 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd88:	9b05      	ldr	r3, [sp, #20]
 800bd8a:	9a07      	ldr	r2, [sp, #28]
 800bd8c:	9302      	str	r3, [sp, #8]
 800bd8e:	9b06      	ldr	r3, [sp, #24]
 800bd90:	4911      	ldr	r1, [pc, #68]	; (800bdd8 <vTaskStartScheduler+0x64>)
 800bd92:	9301      	str	r3, [sp, #4]
 800bd94:	4811      	ldr	r0, [pc, #68]	; (800bddc <vTaskStartScheduler+0x68>)
 800bd96:	2300      	movs	r3, #0
 800bd98:	9400      	str	r4, [sp, #0]
 800bd9a:	f7ff ff8f 	bl	800bcbc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d013      	beq.n	800bdca <vTaskStartScheduler+0x56>
			xReturn = xTimerCreateTimerTask();
 800bda2:	f000 fb17 	bl	800c3d4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800bda6:	2801      	cmp	r0, #1
 800bda8:	d111      	bne.n	800bdce <vTaskStartScheduler+0x5a>
		portDISABLE_INTERRUPTS();
 800bdaa:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bdac:	4b0c      	ldr	r3, [pc, #48]	; (800bde0 <vTaskStartScheduler+0x6c>)
 800bdae:	4a0d      	ldr	r2, [pc, #52]	; (800bde4 <vTaskStartScheduler+0x70>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3354      	adds	r3, #84	; 0x54
 800bdb4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	4b0b      	ldr	r3, [pc, #44]	; (800bde8 <vTaskStartScheduler+0x74>)
 800bdba:	4252      	negs	r2, r2
 800bdbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bdbe:	4b0b      	ldr	r3, [pc, #44]	; (800bdec <vTaskStartScheduler+0x78>)
 800bdc0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bdc2:	4b0b      	ldr	r3, [pc, #44]	; (800bdf0 <vTaskStartScheduler+0x7c>)
 800bdc4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800bdc6:	f000 fd91 	bl	800c8ec <xPortStartScheduler>
}
 800bdca:	b008      	add	sp, #32
 800bdcc:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d1fb      	bne.n	800bdca <vTaskStartScheduler+0x56>
 800bdd2:	b672      	cpsid	i
 800bdd4:	e7fe      	b.n	800bdd4 <vTaskStartScheduler+0x60>
 800bdd6:	46c0      	nop			; (mov r8, r8)
 800bdd8:	08013984 	.word	0x08013984
 800bddc:	0800bc2d 	.word	0x0800bc2d
 800bde0:	20005484 	.word	0x20005484
 800bde4:	200002f0 	.word	0x200002f0
 800bde8:	2000592c 	.word	0x2000592c
 800bdec:	2000594c 	.word	0x2000594c
 800bdf0:	20005978 	.word	0x20005978

0800bdf4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800bdf4:	4a02      	ldr	r2, [pc, #8]	; (800be00 <vTaskSuspendAll+0xc>)
 800bdf6:	6813      	ldr	r3, [r2, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	6013      	str	r3, [r2, #0]
}
 800bdfc:	4770      	bx	lr
 800bdfe:	46c0      	nop			; (mov r8, r8)
 800be00:	200058f8 	.word	0x200058f8

0800be04 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800be04:	4b01      	ldr	r3, [pc, #4]	; (800be0c <xTaskGetTickCount+0x8>)
 800be06:	6818      	ldr	r0, [r3, #0]
}
 800be08:	4770      	bx	lr
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	20005978 	.word	0x20005978

0800be10 <xTaskIncrementTick>:
{
 800be10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be12:	46de      	mov	lr, fp
 800be14:	4657      	mov	r7, sl
 800be16:	464e      	mov	r6, r9
 800be18:	4645      	mov	r5, r8
 800be1a:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be1c:	4b51      	ldr	r3, [pc, #324]	; (800bf64 <xTaskIncrementTick+0x154>)
{
 800be1e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d148      	bne.n	800beb8 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be26:	4b50      	ldr	r3, [pc, #320]	; (800bf68 <xTaskIncrementTick+0x158>)
 800be28:	681d      	ldr	r5, [r3, #0]
 800be2a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800be2c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be2e:	2d00      	cmp	r5, #0
 800be30:	d050      	beq.n	800bed4 <xTaskIncrementTick+0xc4>
 800be32:	4b4e      	ldr	r3, [pc, #312]	; (800bf6c <xTaskIncrementTick+0x15c>)
 800be34:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be36:	9b01      	ldr	r3, [sp, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	429d      	cmp	r5, r3
 800be3c:	d351      	bcc.n	800bee2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be3e:	4f4c      	ldr	r7, [pc, #304]	; (800bf70 <xTaskIncrementTick+0x160>)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d100      	bne.n	800be4a <xTaskIncrementTick+0x3a>
 800be48:	e078      	b.n	800bf3c <xTaskIncrementTick+0x12c>
BaseType_t xSwitchRequired = pdFALSE;
 800be4a:	2300      	movs	r3, #0
 800be4c:	4698      	mov	r8, r3
 800be4e:	4b49      	ldr	r3, [pc, #292]	; (800bf74 <xTaskIncrementTick+0x164>)
 800be50:	469a      	mov	sl, r3
 800be52:	4b49      	ldr	r3, [pc, #292]	; (800bf78 <xTaskIncrementTick+0x168>)
 800be54:	469b      	mov	fp, r3
					prvAddTaskToReadyList( pxTCB );
 800be56:	4b49      	ldr	r3, [pc, #292]	; (800bf7c <xTaskIncrementTick+0x16c>)
 800be58:	4699      	mov	r9, r3
 800be5a:	e024      	b.n	800bea6 <xTaskIncrementTick+0x96>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be5c:	1d26      	adds	r6, r4, #4
 800be5e:	0030      	movs	r0, r6
 800be60:	f7ff fabc 	bl	800b3dc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be66:	2b00      	cmp	r3, #0
 800be68:	d003      	beq.n	800be72 <xTaskIncrementTick+0x62>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be6a:	0020      	movs	r0, r4
 800be6c:	3018      	adds	r0, #24
 800be6e:	f7ff fab5 	bl	800b3dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be72:	464a      	mov	r2, r9
 800be74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	4293      	cmp	r3, r2
 800be7a:	d901      	bls.n	800be80 <xTaskIncrementTick+0x70>
 800be7c:	464a      	mov	r2, r9
 800be7e:	6013      	str	r3, [r2, #0]
 800be80:	0098      	lsls	r0, r3, #2
 800be82:	18c0      	adds	r0, r0, r3
 800be84:	0080      	lsls	r0, r0, #2
 800be86:	0031      	movs	r1, r6
 800be88:	4450      	add	r0, sl
 800be8a:	f7ff fa83 	bl	800b394 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be8e:	465b      	mov	r3, fp
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800be94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be96:	429a      	cmp	r2, r3
 800be98:	d301      	bcc.n	800be9e <xTaskIncrementTick+0x8e>
							xSwitchRequired = pdTRUE;
 800be9a:	2301      	movs	r3, #1
 800be9c:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d050      	beq.n	800bf48 <xTaskIncrementTick+0x138>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800beac:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800beae:	429d      	cmp	r5, r3
 800beb0:	d2d4      	bcs.n	800be5c <xTaskIncrementTick+0x4c>
						xNextTaskUnblockTime = xItemValue;
 800beb2:	9a01      	ldr	r2, [sp, #4]
 800beb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800beb6:	e01a      	b.n	800beee <xTaskIncrementTick+0xde>
		++xPendedTicks;
 800beb8:	4a31      	ldr	r2, [pc, #196]	; (800bf80 <xTaskIncrementTick+0x170>)
 800beba:	6813      	ldr	r3, [r2, #0]
 800bebc:	3301      	adds	r3, #1
 800bebe:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	4698      	mov	r8, r3
}
 800bec4:	4640      	mov	r0, r8
 800bec6:	b003      	add	sp, #12
 800bec8:	bcf0      	pop	{r4, r5, r6, r7}
 800beca:	46bb      	mov	fp, r7
 800becc:	46b2      	mov	sl, r6
 800bece:	46a9      	mov	r9, r5
 800bed0:	46a0      	mov	r8, r4
 800bed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			taskSWITCH_DELAYED_LISTS();
 800bed4:	4b26      	ldr	r3, [pc, #152]	; (800bf70 <xTaskIncrementTick+0x160>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	6812      	ldr	r2, [r2, #0]
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d01a      	beq.n	800bf14 <xTaskIncrementTick+0x104>
 800bede:	b672      	cpsid	i
 800bee0:	e7fe      	b.n	800bee0 <xTaskIncrementTick+0xd0>
BaseType_t xSwitchRequired = pdFALSE;
 800bee2:	2300      	movs	r3, #0
 800bee4:	4698      	mov	r8, r3
 800bee6:	4b23      	ldr	r3, [pc, #140]	; (800bf74 <xTaskIncrementTick+0x164>)
 800bee8:	469a      	mov	sl, r3
 800beea:	4b23      	ldr	r3, [pc, #140]	; (800bf78 <xTaskIncrementTick+0x168>)
 800beec:	469b      	mov	fp, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800beee:	465b      	mov	r3, fp
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef4:	0093      	lsls	r3, r2, #2
 800bef6:	189b      	adds	r3, r3, r2
 800bef8:	4652      	mov	r2, sl
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	58d3      	ldr	r3, [r2, r3]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d901      	bls.n	800bf06 <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 800bf02:	2301      	movs	r3, #1
 800bf04:	4698      	mov	r8, r3
			if( xYieldPending != pdFALSE )
 800bf06:	4b1f      	ldr	r3, [pc, #124]	; (800bf84 <xTaskIncrementTick+0x174>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0da      	beq.n	800bec4 <xTaskIncrementTick+0xb4>
				xSwitchRequired = pdTRUE;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	4698      	mov	r8, r3
 800bf12:	e7d7      	b.n	800bec4 <xTaskIncrementTick+0xb4>
			taskSWITCH_DELAYED_LISTS();
 800bf14:	4a1c      	ldr	r2, [pc, #112]	; (800bf88 <xTaskIncrementTick+0x178>)
 800bf16:	6819      	ldr	r1, [r3, #0]
 800bf18:	6810      	ldr	r0, [r2, #0]
 800bf1a:	6018      	str	r0, [r3, #0]
 800bf1c:	6011      	str	r1, [r2, #0]
 800bf1e:	491b      	ldr	r1, [pc, #108]	; (800bf8c <xTaskIncrementTick+0x17c>)
 800bf20:	680a      	ldr	r2, [r1, #0]
 800bf22:	3201      	adds	r2, #1
 800bf24:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	6812      	ldr	r2, [r2, #0]
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	d111      	bne.n	800bf52 <xTaskIncrementTick+0x142>
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <xTaskIncrementTick+0x15c>)
 800bf30:	001a      	movs	r2, r3
 800bf32:	9301      	str	r3, [sp, #4]
 800bf34:	2301      	movs	r3, #1
 800bf36:	425b      	negs	r3, r3
 800bf38:	6013      	str	r3, [r2, #0]
 800bf3a:	e77c      	b.n	800be36 <xTaskIncrementTick+0x26>
BaseType_t xSwitchRequired = pdFALSE;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4698      	mov	r8, r3
 800bf40:	4b0c      	ldr	r3, [pc, #48]	; (800bf74 <xTaskIncrementTick+0x164>)
 800bf42:	469a      	mov	sl, r3
 800bf44:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <xTaskIncrementTick+0x168>)
 800bf46:	469b      	mov	fp, r3
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf48:	2301      	movs	r3, #1
 800bf4a:	9a01      	ldr	r2, [sp, #4]
 800bf4c:	425b      	negs	r3, r3
 800bf4e:	6013      	str	r3, [r2, #0]
					break;
 800bf50:	e7cd      	b.n	800beee <xTaskIncrementTick+0xde>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf52:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf54:	4a05      	ldr	r2, [pc, #20]	; (800bf6c <xTaskIncrementTick+0x15c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf56:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf58:	9201      	str	r2, [sp, #4]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	6013      	str	r3, [r2, #0]
}
 800bf60:	e769      	b.n	800be36 <xTaskIncrementTick+0x26>
 800bf62:	46c0      	nop			; (mov r8, r8)
 800bf64:	200058f8 	.word	0x200058f8
 800bf68:	20005978 	.word	0x20005978
 800bf6c:	2000592c 	.word	0x2000592c
 800bf70:	20005488 	.word	0x20005488
 800bf74:	20005490 	.word	0x20005490
 800bf78:	20005484 	.word	0x20005484
 800bf7c:	20005900 	.word	0x20005900
 800bf80:	20005934 	.word	0x20005934
 800bf84:	2000597c 	.word	0x2000597c
 800bf88:	2000548c 	.word	0x2000548c
 800bf8c:	20005930 	.word	0x20005930

0800bf90 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf92:	46de      	mov	lr, fp
 800bf94:	4657      	mov	r7, sl
 800bf96:	464e      	mov	r6, r9
 800bf98:	4645      	mov	r5, r8
 800bf9a:	b5e0      	push	{r5, r6, r7, lr}
	taskENTER_CRITICAL();
 800bf9c:	f000 fc30 	bl	800c800 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bfa0:	4b36      	ldr	r3, [pc, #216]	; (800c07c <xTaskResumeAll.part.0+0xec>)
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	3a01      	subs	r2, #1
 800bfa6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d154      	bne.n	800c058 <xTaskResumeAll.part.0+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfae:	4b34      	ldr	r3, [pc, #208]	; (800c080 <xTaskResumeAll.part.0+0xf0>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d050      	beq.n	800c058 <xTaskResumeAll.part.0+0xc8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfb6:	4e33      	ldr	r6, [pc, #204]	; (800c084 <xTaskResumeAll.part.0+0xf4>)
 800bfb8:	6833      	ldr	r3, [r6, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d05a      	beq.n	800c074 <xTaskResumeAll.part.0+0xe4>
 800bfbe:	4b32      	ldr	r3, [pc, #200]	; (800c088 <xTaskResumeAll.part.0+0xf8>)
 800bfc0:	4f32      	ldr	r7, [pc, #200]	; (800c08c <xTaskResumeAll.part.0+0xfc>)
 800bfc2:	4699      	mov	r9, r3
 800bfc4:	4b32      	ldr	r3, [pc, #200]	; (800c090 <xTaskResumeAll.part.0+0x100>)
 800bfc6:	4698      	mov	r8, r3
 800bfc8:	4b32      	ldr	r3, [pc, #200]	; (800c094 <xTaskResumeAll.part.0+0x104>)
 800bfca:	469a      	mov	sl, r3
						xYieldPending = pdTRUE;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	469b      	mov	fp, r3
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd0:	68f3      	ldr	r3, [r6, #12]
 800bfd2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfd4:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfd6:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfd8:	3018      	adds	r0, #24
 800bfda:	f7ff f9ff 	bl	800b3dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfde:	0028      	movs	r0, r5
 800bfe0:	f7ff f9fc 	bl	800b3dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfe4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d900      	bls.n	800bfee <xTaskResumeAll.part.0+0x5e>
 800bfec:	603b      	str	r3, [r7, #0]
 800bfee:	0098      	lsls	r0, r3, #2
 800bff0:	18c0      	adds	r0, r0, r3
 800bff2:	0080      	lsls	r0, r0, #2
 800bff4:	0029      	movs	r1, r5
 800bff6:	4448      	add	r0, r9
 800bff8:	f7ff f9cc 	bl	800b394 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bffc:	4643      	mov	r3, r8
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c004:	429a      	cmp	r2, r3
 800c006:	d302      	bcc.n	800c00e <xTaskResumeAll.part.0+0x7e>
						xYieldPending = pdTRUE;
 800c008:	4653      	mov	r3, sl
 800c00a:	465a      	mov	r2, fp
 800c00c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c00e:	6833      	ldr	r3, [r6, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1dd      	bne.n	800bfd0 <xTaskResumeAll.part.0+0x40>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c014:	4b20      	ldr	r3, [pc, #128]	; (800c098 <xTaskResumeAll.part.0+0x108>)
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	6812      	ldr	r2, [r2, #0]
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	d026      	beq.n	800c06c <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	4b1d      	ldr	r3, [pc, #116]	; (800c09c <xTaskResumeAll.part.0+0x10c>)
 800c028:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c02a:	4e1d      	ldr	r6, [pc, #116]	; (800c0a0 <xTaskResumeAll.part.0+0x110>)
 800c02c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c02e:	2c00      	cmp	r4, #0
 800c030:	d00a      	beq.n	800c048 <xTaskResumeAll.part.0+0xb8>
								xYieldPending = pdTRUE;
 800c032:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c034:	f7ff feec 	bl	800be10 <xTaskIncrementTick>
 800c038:	2800      	cmp	r0, #0
 800c03a:	d001      	beq.n	800c040 <xTaskResumeAll.part.0+0xb0>
								xYieldPending = pdTRUE;
 800c03c:	4653      	mov	r3, sl
 800c03e:	601d      	str	r5, [r3, #0]
							--xPendedCounts;
 800c040:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c042:	2c00      	cmp	r4, #0
 800c044:	d1f6      	bne.n	800c034 <xTaskResumeAll.part.0+0xa4>
						xPendedTicks = 0;
 800c046:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800c048:	4653      	mov	r3, sl
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <xTaskResumeAll.part.0+0xc8>
					taskYIELD_IF_USING_PREEMPTION();
 800c050:	f000 fbca 	bl	800c7e8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800c054:	2401      	movs	r4, #1
 800c056:	e000      	b.n	800c05a <xTaskResumeAll.part.0+0xca>
BaseType_t xAlreadyYielded = pdFALSE;
 800c058:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c05a:	f000 fbdd 	bl	800c818 <vPortExitCritical>
}
 800c05e:	0020      	movs	r0, r4
 800c060:	bcf0      	pop	{r4, r5, r6, r7}
 800c062:	46bb      	mov	fp, r7
 800c064:	46b2      	mov	sl, r6
 800c066:	46a9      	mov	r9, r5
 800c068:	46a0      	mov	r8, r4
 800c06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800c06c:	4b0b      	ldr	r3, [pc, #44]	; (800c09c <xTaskResumeAll.part.0+0x10c>)
 800c06e:	3a01      	subs	r2, #1
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	e7da      	b.n	800c02a <xTaskResumeAll.part.0+0x9a>
 800c074:	4b07      	ldr	r3, [pc, #28]	; (800c094 <xTaskResumeAll.part.0+0x104>)
 800c076:	469a      	mov	sl, r3
 800c078:	e7d7      	b.n	800c02a <xTaskResumeAll.part.0+0x9a>
 800c07a:	46c0      	nop			; (mov r8, r8)
 800c07c:	200058f8 	.word	0x200058f8
 800c080:	200058f0 	.word	0x200058f0
 800c084:	20005938 	.word	0x20005938
 800c088:	20005490 	.word	0x20005490
 800c08c:	20005900 	.word	0x20005900
 800c090:	20005484 	.word	0x20005484
 800c094:	2000597c 	.word	0x2000597c
 800c098:	20005488 	.word	0x20005488
 800c09c:	2000592c 	.word	0x2000592c
 800c0a0:	20005934 	.word	0x20005934

0800c0a4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800c0a4:	4b04      	ldr	r3, [pc, #16]	; (800c0b8 <xTaskResumeAll+0x14>)
{
 800c0a6:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <xTaskResumeAll+0xe>
 800c0ae:	b672      	cpsid	i
 800c0b0:	e7fe      	b.n	800c0b0 <xTaskResumeAll+0xc>
 800c0b2:	f7ff ff6d 	bl	800bf90 <xTaskResumeAll.part.0>
}
 800c0b6:	bd10      	pop	{r4, pc}
 800c0b8:	200058f8 	.word	0x200058f8

0800c0bc <vTaskDelay>:
	{
 800c0bc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d014      	beq.n	800c0ec <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 800c0c2:	4c0c      	ldr	r4, [pc, #48]	; (800c0f4 <vTaskDelay+0x38>)
 800c0c4:	6823      	ldr	r3, [r4, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <vTaskDelay+0x12>
 800c0ca:	b672      	cpsid	i
 800c0cc:	e7fe      	b.n	800c0cc <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	f7ff fd13 	bl	800bb00 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <vTaskDelay+0x28>
 800c0e0:	b672      	cpsid	i
 800c0e2:	e7fe      	b.n	800c0e2 <vTaskDelay+0x26>
 800c0e4:	f7ff ff54 	bl	800bf90 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d101      	bne.n	800c0f0 <vTaskDelay+0x34>
			portYIELD_WITHIN_API();
 800c0ec:	f000 fb7c 	bl	800c7e8 <vPortYield>
	}
 800c0f0:	bd10      	pop	{r4, pc}
 800c0f2:	46c0      	nop			; (mov r8, r8)
 800c0f4:	200058f8 	.word	0x200058f8

0800c0f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0f8:	4b17      	ldr	r3, [pc, #92]	; (800c158 <vTaskSwitchContext+0x60>)
{
 800c0fa:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800c102:	2201      	movs	r2, #1
 800c104:	4b15      	ldr	r3, [pc, #84]	; (800c15c <vTaskSwitchContext+0x64>)
 800c106:	601a      	str	r2, [r3, #0]
}
 800c108:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
 800c10a:	4a14      	ldr	r2, [pc, #80]	; (800c15c <vTaskSwitchContext+0x64>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c10c:	4c14      	ldr	r4, [pc, #80]	; (800c160 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 800c10e:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	4814      	ldr	r0, [pc, #80]	; (800c164 <vTaskSwitchContext+0x6c>)
 800c114:	e002      	b.n	800c11c <vTaskSwitchContext+0x24>
 800c116:	2b00      	cmp	r3, #0
 800c118:	d019      	beq.n	800c14e <vTaskSwitchContext+0x56>
 800c11a:	3b01      	subs	r3, #1
 800c11c:	0099      	lsls	r1, r3, #2
 800c11e:	18ca      	adds	r2, r1, r3
 800c120:	0092      	lsls	r2, r2, #2
 800c122:	5882      	ldr	r2, [r0, r2]
 800c124:	2a00      	cmp	r2, #0
 800c126:	d0f6      	beq.n	800c116 <vTaskSwitchContext+0x1e>
 800c128:	18c9      	adds	r1, r1, r3
 800c12a:	0089      	lsls	r1, r1, #2
 800c12c:	1845      	adds	r5, r0, r1
 800c12e:	686a      	ldr	r2, [r5, #4]
 800c130:	3108      	adds	r1, #8
 800c132:	6852      	ldr	r2, [r2, #4]
 800c134:	1840      	adds	r0, r0, r1
 800c136:	606a      	str	r2, [r5, #4]
 800c138:	4282      	cmp	r2, r0
 800c13a:	d00a      	beq.n	800c152 <vTaskSwitchContext+0x5a>
 800c13c:	68d1      	ldr	r1, [r2, #12]
 800c13e:	4a0a      	ldr	r2, [pc, #40]	; (800c168 <vTaskSwitchContext+0x70>)
 800c140:	6011      	str	r1, [r2, #0]
 800c142:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c144:	6813      	ldr	r3, [r2, #0]
 800c146:	4a09      	ldr	r2, [pc, #36]	; (800c16c <vTaskSwitchContext+0x74>)
 800c148:	3354      	adds	r3, #84	; 0x54
 800c14a:	6013      	str	r3, [r2, #0]
}
 800c14c:	e7dc      	b.n	800c108 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14e:	b672      	cpsid	i
 800c150:	e7fe      	b.n	800c150 <vTaskSwitchContext+0x58>
 800c152:	6852      	ldr	r2, [r2, #4]
 800c154:	606a      	str	r2, [r5, #4]
 800c156:	e7f1      	b.n	800c13c <vTaskSwitchContext+0x44>
 800c158:	200058f8 	.word	0x200058f8
 800c15c:	2000597c 	.word	0x2000597c
 800c160:	20005900 	.word	0x20005900
 800c164:	20005490 	.word	0x20005490
 800c168:	20005484 	.word	0x20005484
 800c16c:	200002f0 	.word	0x200002f0

0800c170 <vTaskPlaceOnEventList>:
{
 800c170:	b510      	push	{r4, lr}
 800c172:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800c174:	2800      	cmp	r0, #0
 800c176:	d009      	beq.n	800c18c <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <vTaskPlaceOnEventList+0x20>)
 800c17a:	6819      	ldr	r1, [r3, #0]
 800c17c:	3118      	adds	r1, #24
 800c17e:	f7ff f915 	bl	800b3ac <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c182:	2101      	movs	r1, #1
 800c184:	0020      	movs	r0, r4
 800c186:	f7ff fcbb 	bl	800bb00 <prvAddCurrentTaskToDelayedList>
}
 800c18a:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 800c18c:	b672      	cpsid	i
 800c18e:	e7fe      	b.n	800c18e <vTaskPlaceOnEventList+0x1e>
 800c190:	20005484 	.word	0x20005484

0800c194 <vTaskPlaceOnEventListRestricted>:
	{
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	000d      	movs	r5, r1
 800c198:	0014      	movs	r4, r2
		configASSERT( pxEventList );
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d00d      	beq.n	800c1ba <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c19e:	4b08      	ldr	r3, [pc, #32]	; (800c1c0 <vTaskPlaceOnEventListRestricted+0x2c>)
 800c1a0:	6819      	ldr	r1, [r3, #0]
 800c1a2:	3118      	adds	r1, #24
 800c1a4:	f7ff f8f6 	bl	800b394 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800c1a8:	2c00      	cmp	r4, #0
 800c1aa:	d001      	beq.n	800c1b0 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
 800c1ac:	2501      	movs	r5, #1
 800c1ae:	426d      	negs	r5, r5
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c1b0:	0028      	movs	r0, r5
 800c1b2:	0021      	movs	r1, r4
 800c1b4:	f7ff fca4 	bl	800bb00 <prvAddCurrentTaskToDelayedList>
	}
 800c1b8:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800c1ba:	b672      	cpsid	i
 800c1bc:	e7fe      	b.n	800c1bc <vTaskPlaceOnEventListRestricted+0x28>
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	20005484 	.word	0x20005484

0800c1c4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c4:	68c3      	ldr	r3, [r0, #12]
{
 800c1c6:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c1ca:	2c00      	cmp	r4, #0
 800c1cc:	d02b      	beq.n	800c226 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c1ce:	0025      	movs	r5, r4
 800c1d0:	3518      	adds	r5, #24
 800c1d2:	0028      	movs	r0, r5
 800c1d4:	f7ff f902 	bl	800b3dc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1d8:	4b14      	ldr	r3, [pc, #80]	; (800c22c <xTaskRemoveFromEventList+0x68>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00f      	beq.n	800c200 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1e0:	0029      	movs	r1, r5
 800c1e2:	4813      	ldr	r0, [pc, #76]	; (800c230 <xTaskRemoveFromEventList+0x6c>)
 800c1e4:	f7ff f8d6 	bl	800b394 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1e8:	4b12      	ldr	r3, [pc, #72]	; (800c234 <xTaskRemoveFromEventList+0x70>)
 800c1ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c1ec:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 800c1ee:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d903      	bls.n	800c1fe <xTaskRemoveFromEventList+0x3a>
		xYieldPending = pdTRUE;
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	4b0f      	ldr	r3, [pc, #60]	; (800c238 <xTaskRemoveFromEventList+0x74>)
		xReturn = pdTRUE;
 800c1fa:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800c1fc:	601a      	str	r2, [r3, #0]
}
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c200:	1d25      	adds	r5, r4, #4
 800c202:	0028      	movs	r0, r5
 800c204:	f7ff f8ea 	bl	800b3dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c208:	4a0c      	ldr	r2, [pc, #48]	; (800c23c <xTaskRemoveFromEventList+0x78>)
 800c20a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c20c:	6811      	ldr	r1, [r2, #0]
 800c20e:	428b      	cmp	r3, r1
 800c210:	d900      	bls.n	800c214 <xTaskRemoveFromEventList+0x50>
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	0098      	lsls	r0, r3, #2
 800c216:	18c0      	adds	r0, r0, r3
 800c218:	4b09      	ldr	r3, [pc, #36]	; (800c240 <xTaskRemoveFromEventList+0x7c>)
 800c21a:	0080      	lsls	r0, r0, #2
 800c21c:	0029      	movs	r1, r5
 800c21e:	18c0      	adds	r0, r0, r3
 800c220:	f7ff f8b8 	bl	800b394 <vListInsertEnd>
 800c224:	e7e0      	b.n	800c1e8 <xTaskRemoveFromEventList+0x24>
	configASSERT( pxUnblockedTCB );
 800c226:	b672      	cpsid	i
 800c228:	e7fe      	b.n	800c228 <xTaskRemoveFromEventList+0x64>
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	200058f8 	.word	0x200058f8
 800c230:	20005938 	.word	0x20005938
 800c234:	20005484 	.word	0x20005484
 800c238:	2000597c 	.word	0x2000597c
 800c23c:	20005900 	.word	0x20005900
 800c240:	20005490 	.word	0x20005490

0800c244 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c244:	4b03      	ldr	r3, [pc, #12]	; (800c254 <vTaskInternalSetTimeOutState+0x10>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c24a:	4b03      	ldr	r3, [pc, #12]	; (800c258 <vTaskInternalSetTimeOutState+0x14>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6043      	str	r3, [r0, #4]
}
 800c250:	4770      	bx	lr
 800c252:	46c0      	nop			; (mov r8, r8)
 800c254:	20005930 	.word	0x20005930
 800c258:	20005978 	.word	0x20005978

0800c25c <xTaskCheckForTimeOut>:
{
 800c25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c25e:	46c6      	mov	lr, r8
 800c260:	0004      	movs	r4, r0
 800c262:	000d      	movs	r5, r1
 800c264:	b500      	push	{lr}
	configASSERT( pxTimeOut );
 800c266:	2800      	cmp	r0, #0
 800c268:	d025      	beq.n	800c2b6 <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 800c26a:	2900      	cmp	r1, #0
 800c26c:	d021      	beq.n	800c2b2 <xTaskCheckForTimeOut+0x56>
	taskENTER_CRITICAL();
 800c26e:	f000 fac7 	bl	800c800 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c272:	4a15      	ldr	r2, [pc, #84]	; (800c2c8 <xTaskCheckForTimeOut+0x6c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800c274:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800c276:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800c278:	1c58      	adds	r0, r3, #1
 800c27a:	d01e      	beq.n	800c2ba <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c27c:	4f13      	ldr	r7, [pc, #76]	; (800c2cc <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c27e:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c280:	683e      	ldr	r6, [r7, #0]
 800c282:	46b0      	mov	r8, r6
 800c284:	6826      	ldr	r6, [r4, #0]
 800c286:	4546      	cmp	r6, r8
 800c288:	d002      	beq.n	800c290 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 800c28a:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c28c:	4288      	cmp	r0, r1
 800c28e:	d90a      	bls.n	800c2a6 <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c290:	1a0e      	subs	r6, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c292:	42b3      	cmp	r3, r6
 800c294:	d913      	bls.n	800c2be <xTaskCheckForTimeOut+0x62>
			xReturn = pdFALSE;
 800c296:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 800c298:	1a5b      	subs	r3, r3, r1
 800c29a:	181b      	adds	r3, r3, r0
 800c29c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2a2:	6813      	ldr	r3, [r2, #0]
 800c2a4:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800c2a6:	f000 fab7 	bl	800c818 <vPortExitCritical>
}
 800c2aa:	0030      	movs	r0, r6
 800c2ac:	bc80      	pop	{r7}
 800c2ae:	46b8      	mov	r8, r7
 800c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800c2b2:	b672      	cpsid	i
 800c2b4:	e7fe      	b.n	800c2b4 <xTaskCheckForTimeOut+0x58>
	configASSERT( pxTimeOut );
 800c2b6:	b672      	cpsid	i
 800c2b8:	e7fe      	b.n	800c2b8 <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
 800c2ba:	2600      	movs	r6, #0
 800c2bc:	e7f3      	b.n	800c2a6 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
 800c2be:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800c2c0:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800c2c2:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800c2c4:	e7ef      	b.n	800c2a6 <xTaskCheckForTimeOut+0x4a>
 800c2c6:	46c0      	nop			; (mov r8, r8)
 800c2c8:	20005978 	.word	0x20005978
 800c2cc:	20005930 	.word	0x20005930

0800c2d0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	4b01      	ldr	r3, [pc, #4]	; (800c2d8 <vTaskMissedYield+0x8>)
 800c2d4:	601a      	str	r2, [r3, #0]
}
 800c2d6:	4770      	bx	lr
 800c2d8:	2000597c 	.word	0x2000597c

0800c2dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c2dc:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2de:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d004      	beq.n	800c2f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2e6:	4b04      	ldr	r3, [pc, #16]	; (800c2f8 <xTaskGetSchedulerState+0x1c>)
 800c2e8:	6818      	ldr	r0, [r3, #0]
 800c2ea:	4243      	negs	r3, r0
 800c2ec:	4158      	adcs	r0, r3
 800c2ee:	0040      	lsls	r0, r0, #1
	}
 800c2f0:	4770      	bx	lr
 800c2f2:	46c0      	nop			; (mov r8, r8)
 800c2f4:	2000594c 	.word	0x2000594c
 800c2f8:	200058f8 	.word	0x200058f8

0800c2fc <xTaskPriorityDisinherit>:
	{
 800c2fc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d010      	beq.n	800c324 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB == pxCurrentTCB );
 800c302:	4b16      	ldr	r3, [pc, #88]	; (800c35c <xTaskPriorityDisinherit+0x60>)
 800c304:	681c      	ldr	r4, [r3, #0]
 800c306:	4284      	cmp	r4, r0
 800c308:	d001      	beq.n	800c30e <xTaskPriorityDisinherit+0x12>
 800c30a:	b672      	cpsid	i
 800c30c:	e7fe      	b.n	800c30c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800c30e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c310:	2b00      	cmp	r3, #0
 800c312:	d009      	beq.n	800c328 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c314:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c316:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800c318:	3b01      	subs	r3, #1
 800c31a:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c31c:	4291      	cmp	r1, r2
 800c31e:	d001      	beq.n	800c324 <xTaskPriorityDisinherit+0x28>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c320:	2b00      	cmp	r3, #0
 800c322:	d003      	beq.n	800c32c <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 800c324:	2000      	movs	r0, #0
	}
 800c326:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800c328:	b672      	cpsid	i
 800c32a:	e7fe      	b.n	800c32a <xTaskPriorityDisinherit+0x2e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c32c:	1d25      	adds	r5, r4, #4
 800c32e:	0028      	movs	r0, r5
 800c330:	f7ff f854 	bl	800b3dc <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c334:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c336:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c338:	1ad2      	subs	r2, r2, r3
 800c33a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c33c:	4a08      	ldr	r2, [pc, #32]	; (800c360 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c33e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800c340:	6811      	ldr	r1, [r2, #0]
 800c342:	428b      	cmp	r3, r1
 800c344:	d900      	bls.n	800c348 <xTaskPriorityDisinherit+0x4c>
 800c346:	6013      	str	r3, [r2, #0]
 800c348:	0098      	lsls	r0, r3, #2
 800c34a:	18c0      	adds	r0, r0, r3
 800c34c:	4b05      	ldr	r3, [pc, #20]	; (800c364 <xTaskPriorityDisinherit+0x68>)
 800c34e:	0080      	lsls	r0, r0, #2
 800c350:	18c0      	adds	r0, r0, r3
 800c352:	0029      	movs	r1, r5
 800c354:	f7ff f81e 	bl	800b394 <vListInsertEnd>
					xReturn = pdTRUE;
 800c358:	2001      	movs	r0, #1
		return xReturn;
 800c35a:	e7e4      	b.n	800c326 <xTaskPriorityDisinherit+0x2a>
 800c35c:	20005484 	.word	0x20005484
 800c360:	20005900 	.word	0x20005900
 800c364:	20005490 	.word	0x20005490

0800c368 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c36a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c36c:	f000 fa48 	bl	800c800 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c370:	4c10      	ldr	r4, [pc, #64]	; (800c3b4 <prvCheckForValidListAndQueue+0x4c>)
 800c372:	6825      	ldr	r5, [r4, #0]
 800c374:	2d00      	cmp	r5, #0
 800c376:	d003      	beq.n	800c380 <prvCheckForValidListAndQueue+0x18>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c378:	f000 fa4e 	bl	800c818 <vPortExitCritical>
}
 800c37c:	b003      	add	sp, #12
 800c37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 800c380:	4f0d      	ldr	r7, [pc, #52]	; (800c3b8 <prvCheckForValidListAndQueue+0x50>)
 800c382:	0038      	movs	r0, r7
 800c384:	f7fe fff6 	bl	800b374 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c388:	4e0c      	ldr	r6, [pc, #48]	; (800c3bc <prvCheckForValidListAndQueue+0x54>)
 800c38a:	0030      	movs	r0, r6
 800c38c:	f7fe fff2 	bl	800b374 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c390:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c392:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c394:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c396:	4b0b      	ldr	r3, [pc, #44]	; (800c3c4 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c398:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c39a:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c39c:	4a0a      	ldr	r2, [pc, #40]	; (800c3c8 <prvCheckForValidListAndQueue+0x60>)
 800c39e:	4b0b      	ldr	r3, [pc, #44]	; (800c3cc <prvCheckForValidListAndQueue+0x64>)
 800c3a0:	9500      	str	r5, [sp, #0]
 800c3a2:	f7ff f91f 	bl	800b5e4 <xQueueGenericCreateStatic>
 800c3a6:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d0e5      	beq.n	800c378 <prvCheckForValidListAndQueue+0x10>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3ac:	4908      	ldr	r1, [pc, #32]	; (800c3d0 <prvCheckForValidListAndQueue+0x68>)
 800c3ae:	f7ff fae9 	bl	800b984 <vQueueAddToRegistry>
 800c3b2:	e7e1      	b.n	800c378 <prvCheckForValidListAndQueue+0x10>
 800c3b4:	20005aa4 	.word	0x20005aa4
 800c3b8:	20005a28 	.word	0x20005a28
 800c3bc:	20005a3c 	.word	0x20005a3c
 800c3c0:	20005980 	.word	0x20005980
 800c3c4:	20005984 	.word	0x20005984
 800c3c8:	20005988 	.word	0x20005988
 800c3cc:	20005a54 	.word	0x20005a54
 800c3d0:	0801398c 	.word	0x0801398c

0800c3d4 <xTimerCreateTimerTask>:
{
 800c3d4:	b500      	push	{lr}
 800c3d6:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 800c3d8:	f7ff ffc6 	bl	800c368 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c3dc:	4b10      	ldr	r3, [pc, #64]	; (800c420 <xTimerCreateTimerTask+0x4c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d01a      	beq.n	800c41a <xTimerCreateTimerTask+0x46>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c3e4:	2300      	movs	r3, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c3e6:	aa07      	add	r2, sp, #28
 800c3e8:	a906      	add	r1, sp, #24
 800c3ea:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c3ec:	9305      	str	r3, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c3ee:	9306      	str	r3, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c3f0:	f7fe ffb4 	bl	800b35c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c3f4:	9b05      	ldr	r3, [sp, #20]
 800c3f6:	9a07      	ldr	r2, [sp, #28]
 800c3f8:	9302      	str	r3, [sp, #8]
 800c3fa:	9b06      	ldr	r3, [sp, #24]
 800c3fc:	4909      	ldr	r1, [pc, #36]	; (800c424 <xTimerCreateTimerTask+0x50>)
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	2302      	movs	r3, #2
 800c402:	4809      	ldr	r0, [pc, #36]	; (800c428 <xTimerCreateTimerTask+0x54>)
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	2300      	movs	r3, #0
 800c408:	f7ff fc58 	bl	800bcbc <xTaskCreateStatic>
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <xTimerCreateTimerTask+0x58>)
 800c40e:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c410:	2800      	cmp	r0, #0
 800c412:	d002      	beq.n	800c41a <xTimerCreateTimerTask+0x46>
}
 800c414:	2001      	movs	r0, #1
 800c416:	b009      	add	sp, #36	; 0x24
 800c418:	bd00      	pop	{pc}
	configASSERT( xReturn );
 800c41a:	b672      	cpsid	i
 800c41c:	e7fe      	b.n	800c41c <xTimerCreateTimerTask+0x48>
 800c41e:	46c0      	nop			; (mov r8, r8)
 800c420:	20005aa4 	.word	0x20005aa4
 800c424:	08013994 	.word	0x08013994
 800c428:	0800c50d 	.word	0x0800c50d
 800c42c:	20005aa8 	.word	0x20005aa8

0800c430 <xTimerGenericCommand>:
{
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	001c      	movs	r4, r3
 800c434:	b084      	sub	sp, #16
	configASSERT( xTimer );
 800c436:	2800      	cmp	r0, #0
 800c438:	d016      	beq.n	800c468 <xTimerGenericCommand+0x38>
	if( xTimerQueue != NULL )
 800c43a:	4e13      	ldr	r6, [pc, #76]	; (800c488 <xTimerGenericCommand+0x58>)
 800c43c:	6835      	ldr	r5, [r6, #0]
 800c43e:	2d00      	cmp	r5, #0
 800c440:	d00f      	beq.n	800c462 <xTimerGenericCommand+0x32>
		xMessage.xMessageID = xCommandID;
 800c442:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c444:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c446:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c448:	2905      	cmp	r1, #5
 800c44a:	dc0f      	bgt.n	800c46c <xTimerGenericCommand+0x3c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c44c:	f7ff ff46 	bl	800c2dc <xTaskGetSchedulerState>
 800c450:	2802      	cmp	r0, #2
 800c452:	d012      	beq.n	800c47a <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c454:	2300      	movs	r3, #0
 800c456:	2200      	movs	r2, #0
 800c458:	4669      	mov	r1, sp
 800c45a:	6830      	ldr	r0, [r6, #0]
 800c45c:	f7ff f900 	bl	800b660 <xQueueGenericSend>
 800c460:	e000      	b.n	800c464 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 800c462:	2000      	movs	r0, #0
}
 800c464:	b004      	add	sp, #16
 800c466:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( xTimer );
 800c468:	b672      	cpsid	i
 800c46a:	e7fe      	b.n	800c46a <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c46c:	2300      	movs	r3, #0
 800c46e:	0022      	movs	r2, r4
 800c470:	4669      	mov	r1, sp
 800c472:	0028      	movs	r0, r5
 800c474:	f7ff f98e 	bl	800b794 <xQueueGenericSendFromISR>
 800c478:	e7f4      	b.n	800c464 <xTimerGenericCommand+0x34>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c47a:	2300      	movs	r3, #0
 800c47c:	4669      	mov	r1, sp
 800c47e:	6830      	ldr	r0, [r6, #0]
 800c480:	9a08      	ldr	r2, [sp, #32]
 800c482:	f7ff f8ed 	bl	800b660 <xQueueGenericSend>
 800c486:	e7ed      	b.n	800c464 <xTimerGenericCommand+0x34>
 800c488:	20005aa4 	.word	0x20005aa4

0800c48c <prvSwitchTimerLists>:
{
 800c48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c48e:	4647      	mov	r7, r8
 800c490:	46ce      	mov	lr, r9
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c492:	2328      	movs	r3, #40	; 0x28
{
 800c494:	b580      	push	{r7, lr}
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c496:	4698      	mov	r8, r3
 800c498:	2704      	movs	r7, #4
 800c49a:	4e1a      	ldr	r6, [pc, #104]	; (800c504 <prvSwitchTimerLists+0x78>)
{
 800c49c:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c49e:	e00e      	b.n	800c4be <prvSwitchTimerLists+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4a0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4a2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4a4:	681a      	ldr	r2, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4a6:	1d25      	adds	r5, r4, #4
 800c4a8:	0028      	movs	r0, r5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4aa:	4691      	mov	r9, r2
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4ac:	f7fe ff96 	bl	800b3dc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4b0:	6a23      	ldr	r3, [r4, #32]
 800c4b2:	0020      	movs	r0, r4
 800c4b4:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4b6:	4643      	mov	r3, r8
 800c4b8:	5ce3      	ldrb	r3, [r4, r3]
 800c4ba:	421f      	tst	r7, r3
 800c4bc:	d10c      	bne.n	800c4d8 <prvSwitchTimerLists+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4be:	6833      	ldr	r3, [r6, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	d1ec      	bne.n	800c4a0 <prvSwitchTimerLists+0x14>
	pxCurrentTimerList = pxOverflowTimerList;
 800c4c6:	4a10      	ldr	r2, [pc, #64]	; (800c508 <prvSwitchTimerLists+0x7c>)
 800c4c8:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c4ca:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800c4cc:	6031      	str	r1, [r6, #0]
}
 800c4ce:	b003      	add	sp, #12
 800c4d0:	bcc0      	pop	{r6, r7}
 800c4d2:	46b9      	mov	r9, r7
 800c4d4:	46b0      	mov	r8, r6
 800c4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4d8:	69a3      	ldr	r3, [r4, #24]
 800c4da:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800c4dc:	4599      	cmp	r9, r3
 800c4de:	d206      	bcs.n	800c4ee <prvSwitchTimerLists+0x62>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4e0:	0029      	movs	r1, r5
 800c4e2:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4e4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4e6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4e8:	f7fe ff60 	bl	800b3ac <vListInsert>
 800c4ec:	e7e7      	b.n	800c4be <prvSwitchTimerLists+0x32>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	464a      	mov	r2, r9
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	0020      	movs	r0, r4
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	f7ff ff9a 	bl	800c430 <xTimerGenericCommand>
				configASSERT( xResult );
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d1de      	bne.n	800c4be <prvSwitchTimerLists+0x32>
 800c500:	b672      	cpsid	i
 800c502:	e7fe      	b.n	800c502 <prvSwitchTimerLists+0x76>
 800c504:	20005980 	.word	0x20005980
 800c508:	20005984 	.word	0x20005984

0800c50c <prvTimerTask>:
{
 800c50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50e:	4645      	mov	r5, r8
 800c510:	4657      	mov	r7, sl
 800c512:	464e      	mov	r6, r9
 800c514:	46de      	mov	lr, fp
 800c516:	b5e0      	push	{r5, r6, r7, lr}
 800c518:	4b8f      	ldr	r3, [pc, #572]	; (800c758 <prvTimerTask+0x24c>)
 800c51a:	b089      	sub	sp, #36	; 0x24
 800c51c:	4699      	mov	r9, r3
 800c51e:	4b8f      	ldr	r3, [pc, #572]	; (800c75c <prvTimerTask+0x250>)
 800c520:	4f8f      	ldr	r7, [pc, #572]	; (800c760 <prvTimerTask+0x254>)
 800c522:	9303      	str	r3, [sp, #12]
 800c524:	4b8f      	ldr	r3, [pc, #572]	; (800c764 <prvTimerTask+0x258>)
 800c526:	4d90      	ldr	r5, [pc, #576]	; (800c768 <prvTimerTask+0x25c>)
 800c528:	9302      	str	r3, [sp, #8]
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c52a:	2328      	movs	r3, #40	; 0x28
 800c52c:	4698      	mov	r8, r3
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c52e:	464b      	mov	r3, r9
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681e      	ldr	r6, [r3, #0]
 800c534:	2e00      	cmp	r6, #0
 800c536:	d100      	bne.n	800c53a <prvTimerTask+0x2e>
 800c538:	e090      	b.n	800c65c <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800c53e:	f7ff fc59 	bl	800bdf4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c542:	f7ff fc5f 	bl	800be04 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c546:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c548:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800c54a:	4283      	cmp	r3, r0
 800c54c:	d900      	bls.n	800c550 <prvTimerTask+0x44>
 800c54e:	e09f      	b.n	800c690 <prvTimerTask+0x184>
	xLastTime = xTimeNow;
 800c550:	6038      	str	r0, [r7, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c552:	4286      	cmp	r6, r0
 800c554:	d800      	bhi.n	800c558 <prvTimerTask+0x4c>
 800c556:	e0a4      	b.n	800c6a2 <prvTimerTask+0x196>
 800c558:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c55a:	6828      	ldr	r0, [r5, #0]
 800c55c:	1b31      	subs	r1, r6, r4
 800c55e:	f7ff fa25 	bl	800b9ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c562:	f7ff fd9f 	bl	800c0a4 <xTaskResumeAll>
 800c566:	2800      	cmp	r0, #0
 800c568:	d100      	bne.n	800c56c <prvTimerTask+0x60>
 800c56a:	e08e      	b.n	800c68a <prvTimerTask+0x17e>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c56c:	2302      	movs	r3, #2
 800c56e:	469b      	mov	fp, r3
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c570:	3b01      	subs	r3, #1
 800c572:	469a      	mov	sl, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c574:	2200      	movs	r2, #0
 800c576:	6828      	ldr	r0, [r5, #0]
 800c578:	a904      	add	r1, sp, #16
 800c57a:	f7ff f95f 	bl	800b83c <xQueueReceive>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d0d5      	beq.n	800c52e <prvTimerTask+0x22>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c582:	9b04      	ldr	r3, [sp, #16]
 800c584:	2b00      	cmp	r3, #0
 800c586:	db61      	blt.n	800c64c <prvTimerTask+0x140>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c588:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c58a:	6963      	ldr	r3, [r4, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c590:	1d20      	adds	r0, r4, #4
 800c592:	f7fe ff23 	bl	800b3dc <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800c596:	f7ff fc35 	bl	800be04 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c59a:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c59c:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800c59e:	4298      	cmp	r0, r3
 800c5a0:	d37c      	bcc.n	800c69c <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 800c5a2:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800c5a4:	603e      	str	r6, [r7, #0]
			switch( xMessage.xMessageID )
 800c5a6:	2b09      	cmp	r3, #9
 800c5a8:	d8e4      	bhi.n	800c574 <prvTimerTask+0x68>
 800c5aa:	9a02      	ldr	r2, [sp, #8]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	58d3      	ldr	r3, [r2, r3]
 800c5b0:	469f      	mov	pc, r3
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5b2:	4643      	mov	r3, r8
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	5ce3      	ldrb	r3, [r4, r3]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	4642      	mov	r2, r8
 800c5bc:	54a3      	strb	r3, [r4, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c5be:	69a1      	ldr	r1, [r4, #24]
 800c5c0:	9b05      	ldr	r3, [sp, #20]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5c2:	6124      	str	r4, [r4, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c5c4:	185a      	adds	r2, r3, r1
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5c6:	6062      	str	r2, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 800c5c8:	42b2      	cmp	r2, r6
 800c5ca:	d900      	bls.n	800c5ce <prvTimerTask+0xc2>
 800c5cc:	e085      	b.n	800c6da <prvTimerTask+0x1ce>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ce:	1af3      	subs	r3, r6, r3
 800c5d0:	4299      	cmp	r1, r3
 800c5d2:	d900      	bls.n	800c5d6 <prvTimerTask+0xca>
 800c5d4:	e0a3      	b.n	800c71e <prvTimerTask+0x212>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5d6:	6a23      	ldr	r3, [r4, #32]
 800c5d8:	0020      	movs	r0, r4
 800c5da:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5dc:	4643      	mov	r3, r8
 800c5de:	5ce3      	ldrb	r3, [r4, r3]
 800c5e0:	075b      	lsls	r3, r3, #29
 800c5e2:	d5c7      	bpl.n	800c574 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c5e4:	69a3      	ldr	r3, [r4, #24]
 800c5e6:	9a05      	ldr	r2, [sp, #20]
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	18d2      	adds	r2, r2, r3
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	0020      	movs	r0, r4
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	f7ff ff1d 	bl	800c430 <xTimerGenericCommand>
							configASSERT( xResult );
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d1bc      	bne.n	800c574 <prvTimerTask+0x68>
 800c5fa:	b672      	cpsid	i
 800c5fc:	e7fe      	b.n	800c5fc <prvTimerTask+0xf0>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5fe:	4643      	mov	r3, r8
 800c600:	2201      	movs	r2, #1
 800c602:	5ce3      	ldrb	r3, [r4, r3]
 800c604:	4313      	orrs	r3, r2
 800c606:	4642      	mov	r2, r8
 800c608:	54a3      	strb	r3, [r4, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c60a:	9b05      	ldr	r3, [sp, #20]
 800c60c:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d100      	bne.n	800c614 <prvTimerTask+0x108>
 800c612:	e098      	b.n	800c746 <prvTimerTask+0x23a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c614:	199b      	adds	r3, r3, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c616:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c618:	6124      	str	r4, [r4, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c61a:	1d21      	adds	r1, r4, #4
	if( xNextExpiryTime <= xTimeNow )
 800c61c:	42b3      	cmp	r3, r6
 800c61e:	d867      	bhi.n	800c6f0 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c620:	9b03      	ldr	r3, [sp, #12]
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	f7fe fec2 	bl	800b3ac <vListInsert>
	return xProcessTimerNow;
 800c628:	e7a4      	b.n	800c574 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c62a:	4643      	mov	r3, r8
 800c62c:	4652      	mov	r2, sl
 800c62e:	5ce3      	ldrb	r3, [r4, r3]
 800c630:	4393      	bics	r3, r2
 800c632:	4642      	mov	r2, r8
 800c634:	54a3      	strb	r3, [r4, r2]
					break;
 800c636:	e79d      	b.n	800c574 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c638:	4643      	mov	r3, r8
 800c63a:	465a      	mov	r2, fp
 800c63c:	5ce3      	ldrb	r3, [r4, r3]
 800c63e:	421a      	tst	r2, r3
 800c640:	d05b      	beq.n	800c6fa <prvTimerTask+0x1ee>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c642:	4652      	mov	r2, sl
 800c644:	4393      	bics	r3, r2
 800c646:	4642      	mov	r2, r8
 800c648:	54a3      	strb	r3, [r4, r2]
 800c64a:	e793      	b.n	800c574 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c64c:	9b05      	ldr	r3, [sp, #20]
 800c64e:	9907      	ldr	r1, [sp, #28]
 800c650:	9806      	ldr	r0, [sp, #24]
 800c652:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c654:	9b04      	ldr	r3, [sp, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	db8c      	blt.n	800c574 <prvTimerTask+0x68>
 800c65a:	e795      	b.n	800c588 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 800c65c:	f7ff fbca 	bl	800bdf4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c660:	f7ff fbd0 	bl	800be04 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c664:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c666:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800c668:	4283      	cmp	r3, r0
 800c66a:	d811      	bhi.n	800c690 <prvTimerTask+0x184>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c66c:	9b03      	ldr	r3, [sp, #12]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c66e:	6828      	ldr	r0, [r5, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c670:	681b      	ldr	r3, [r3, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c672:	1b31      	subs	r1, r6, r4
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c674:	681a      	ldr	r2, [r3, #0]
	xLastTime = xTimeNow;
 800c676:	603c      	str	r4, [r7, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c678:	4253      	negs	r3, r2
 800c67a:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c67c:	f7ff f996 	bl	800b9ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c680:	f7ff fd10 	bl	800c0a4 <xTaskResumeAll>
 800c684:	2800      	cmp	r0, #0
 800c686:	d000      	beq.n	800c68a <prvTimerTask+0x17e>
 800c688:	e770      	b.n	800c56c <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 800c68a:	f000 f8ad 	bl	800c7e8 <vPortYield>
 800c68e:	e76d      	b.n	800c56c <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800c690:	f7ff fefc 	bl	800c48c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c694:	603c      	str	r4, [r7, #0]
			( void ) xTaskResumeAll();
 800c696:	f7ff fd05 	bl	800c0a4 <xTaskResumeAll>
 800c69a:	e767      	b.n	800c56c <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800c69c:	f7ff fef6 	bl	800c48c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6a0:	e77f      	b.n	800c5a2 <prvTimerTask+0x96>
				( void ) xTaskResumeAll();
 800c6a2:	f7ff fcff 	bl	800c0a4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a6:	464b      	mov	r3, r9
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	469a      	mov	sl, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6b0:	2304      	movs	r3, #4
 800c6b2:	4453      	add	r3, sl
 800c6b4:	0018      	movs	r0, r3
 800c6b6:	469b      	mov	fp, r3
 800c6b8:	f7fe fe90 	bl	800b3dc <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6bc:	4653      	mov	r3, sl
 800c6be:	4642      	mov	r2, r8
 800c6c0:	5c9b      	ldrb	r3, [r3, r2]
 800c6c2:	075a      	lsls	r2, r3, #29
 800c6c4:	d41d      	bmi.n	800c702 <prvTimerTask+0x1f6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	4641      	mov	r1, r8
 800c6ca:	4393      	bics	r3, r2
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	5453      	strb	r3, [r2, r1]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6d0:	4653      	mov	r3, sl
 800c6d2:	4650      	mov	r0, sl
 800c6d4:	6a1b      	ldr	r3, [r3, #32]
 800c6d6:	4798      	blx	r3
}
 800c6d8:	e748      	b.n	800c56c <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6da:	42b3      	cmp	r3, r6
 800c6dc:	d902      	bls.n	800c6e4 <prvTimerTask+0x1d8>
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d800      	bhi.n	800c6e4 <prvTimerTask+0x1d8>
 800c6e2:	e778      	b.n	800c5d6 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	1d21      	adds	r1, r4, #4
 800c6e8:	6818      	ldr	r0, [r3, #0]
 800c6ea:	f7fe fe5f 	bl	800b3ac <vListInsert>
	return xProcessTimerNow;
 800c6ee:	e741      	b.n	800c574 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6f0:	464b      	mov	r3, r9
 800c6f2:	6818      	ldr	r0, [r3, #0]
 800c6f4:	f7fe fe5a 	bl	800b3ac <vListInsert>
 800c6f8:	e73c      	b.n	800c574 <prvTimerTask+0x68>
							vPortFree( pxTimer );
 800c6fa:	0020      	movs	r0, r4
 800c6fc:	f000 f9dc 	bl	800cab8 <vPortFree>
 800c700:	e738      	b.n	800c574 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c702:	4653      	mov	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c704:	4651      	mov	r1, sl
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c706:	699a      	ldr	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c708:	6109      	str	r1, [r1, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c70a:	18b3      	adds	r3, r6, r2
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c70c:	604b      	str	r3, [r1, #4]
	if( xNextExpiryTime <= xTimeNow )
 800c70e:	42a3      	cmp	r3, r4
 800c710:	d90b      	bls.n	800c72a <prvTimerTask+0x21e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c712:	464b      	mov	r3, r9
 800c714:	4659      	mov	r1, fp
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	f7fe fe48 	bl	800b3ac <vListInsert>
	return xProcessTimerNow;
 800c71c:	e7d8      	b.n	800c6d0 <prvTimerTask+0x1c4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	1d21      	adds	r1, r4, #4
 800c722:	6818      	ldr	r0, [r3, #0]
 800c724:	f7fe fe42 	bl	800b3ac <vListInsert>
	return xProcessTimerNow;
 800c728:	e724      	b.n	800c574 <prvTimerTask+0x68>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c72a:	1ba4      	subs	r4, r4, r6
 800c72c:	42a2      	cmp	r2, r4
 800c72e:	d80c      	bhi.n	800c74a <prvTimerTask+0x23e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c730:	2300      	movs	r3, #0
 800c732:	0032      	movs	r2, r6
 800c734:	2100      	movs	r1, #0
 800c736:	4650      	mov	r0, sl
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	f7ff fe79 	bl	800c430 <xTimerGenericCommand>
			configASSERT( xResult );
 800c73e:	2800      	cmp	r0, #0
 800c740:	d1c6      	bne.n	800c6d0 <prvTimerTask+0x1c4>
 800c742:	b672      	cpsid	i
 800c744:	e7fe      	b.n	800c744 <prvTimerTask+0x238>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c746:	b672      	cpsid	i
 800c748:	e7fe      	b.n	800c748 <prvTimerTask+0x23c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	4659      	mov	r1, fp
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	f7fe fe2c 	bl	800b3ac <vListInsert>
	return xProcessTimerNow;
 800c754:	e7bc      	b.n	800c6d0 <prvTimerTask+0x1c4>
 800c756:	46c0      	nop			; (mov r8, r8)
 800c758:	20005980 	.word	0x20005980
 800c75c:	20005984 	.word	0x20005984
 800c760:	20005a50 	.word	0x20005a50
 800c764:	0801399c 	.word	0x0801399c
 800c768:	20005aa4 	.word	0x20005aa4

0800c76c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800c76c:	2300      	movs	r3, #0
{
 800c76e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800c770:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c772:	4b06      	ldr	r3, [pc, #24]	; (800c78c <prvTaskExitError+0x20>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3301      	adds	r3, #1
 800c778:	d001      	beq.n	800c77e <prvTaskExitError+0x12>
 800c77a:	b672      	cpsid	i
 800c77c:	e7fe      	b.n	800c77c <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800c77e:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c780:	9b01      	ldr	r3, [sp, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d0fc      	beq.n	800c780 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c786:	b002      	add	sp, #8
 800c788:	4770      	bx	lr
 800c78a:	46c0      	nop			; (mov r8, r8)
 800c78c:	20000128 	.word	0x20000128

0800c790 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800c790:	4a0b      	ldr	r2, [pc, #44]	; (800c7c0 <pxCurrentTCBConst2>)
 800c792:	6813      	ldr	r3, [r2, #0]
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	3020      	adds	r0, #32
 800c798:	f380 8809 	msr	PSP, r0
 800c79c:	2002      	movs	r0, #2
 800c79e:	f380 8814 	msr	CONTROL, r0
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800c7a8:	46ae      	mov	lr, r5
 800c7aa:	bc08      	pop	{r3}
 800c7ac:	bc04      	pop	{r2}
 800c7ae:	b662      	cpsie	i
 800c7b0:	4718      	bx	r3
 800c7b2:	46c0      	nop			; (mov r8, r8)
 800c7b4:	46c0      	nop			; (mov r8, r8)
 800c7b6:	46c0      	nop			; (mov r8, r8)
 800c7b8:	46c0      	nop			; (mov r8, r8)
 800c7ba:	46c0      	nop			; (mov r8, r8)
 800c7bc:	46c0      	nop			; (mov r8, r8)
 800c7be:	46c0      	nop			; (mov r8, r8)

0800c7c0 <pxCurrentTCBConst2>:
 800c7c0:	20005484 	.word	0x20005484

0800c7c4 <pxPortInitialiseStack>:
{
 800c7c4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7c6:	2480      	movs	r4, #128	; 0x80
 800c7c8:	1f03      	subs	r3, r0, #4
 800c7ca:	0464      	lsls	r4, r4, #17
 800c7cc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800c7ce:	3b04      	subs	r3, #4
 800c7d0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7d2:	4903      	ldr	r1, [pc, #12]	; (800c7e0 <pxPortInitialiseStack+0x1c>)
 800c7d4:	3b04      	subs	r3, #4
 800c7d6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7d8:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800c7da:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7dc:	601a      	str	r2, [r3, #0]
}
 800c7de:	bd10      	pop	{r4, pc}
 800c7e0:	0800c76d 	.word	0x0800c76d

0800c7e4 <SVC_Handler>:
}
 800c7e4:	4770      	bx	lr
 800c7e6:	46c0      	nop			; (mov r8, r8)

0800c7e8 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7e8:	2280      	movs	r2, #128	; 0x80
 800c7ea:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <vPortYield+0x14>)
 800c7ec:	0552      	lsls	r2, r2, #21
 800c7ee:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c7f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c7f4:	f3bf 8f6f 	isb	sy
}
 800c7f8:	4770      	bx	lr
 800c7fa:	46c0      	nop			; (mov r8, r8)
 800c7fc:	e000ed04 	.word	0xe000ed04

0800c800 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800c800:	b672      	cpsid	i
	uxCriticalNesting++;
 800c802:	4a04      	ldr	r2, [pc, #16]	; (800c814 <vPortEnterCritical+0x14>)
 800c804:	6813      	ldr	r3, [r2, #0]
 800c806:	3301      	adds	r3, #1
 800c808:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c80a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c80e:	f3bf 8f6f 	isb	sy
}
 800c812:	4770      	bx	lr
 800c814:	20000128 	.word	0x20000128

0800c818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800c818:	4a05      	ldr	r2, [pc, #20]	; (800c830 <vPortExitCritical+0x18>)
 800c81a:	6813      	ldr	r3, [r2, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <vPortExitCritical+0xc>
 800c820:	b672      	cpsid	i
 800c822:	e7fe      	b.n	800c822 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 800c824:	3b01      	subs	r3, #1
 800c826:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d100      	bne.n	800c82e <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 800c82c:	b662      	cpsie	i
	}
}
 800c82e:	4770      	bx	lr
 800c830:	20000128 	.word	0x20000128

0800c834 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c834:	f3ef 8010 	mrs	r0, PRIMASK
 800c838:	b672      	cpsid	i
 800c83a:	4770      	bx	lr

0800c83c <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c83c:	f380 8810 	msr	PRIMASK, r0
 800c840:	4770      	bx	lr
 800c842:	46c0      	nop			; (mov r8, r8)
	...

0800c850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c850:	f3ef 8009 	mrs	r0, PSP
 800c854:	4b0e      	ldr	r3, [pc, #56]	; (800c890 <pxCurrentTCBConst>)
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	3820      	subs	r0, #32
 800c85a:	6010      	str	r0, [r2, #0]
 800c85c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c85e:	4644      	mov	r4, r8
 800c860:	464d      	mov	r5, r9
 800c862:	4656      	mov	r6, sl
 800c864:	465f      	mov	r7, fp
 800c866:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c868:	b508      	push	{r3, lr}
 800c86a:	b672      	cpsid	i
 800c86c:	f7ff fc44 	bl	800c0f8 <vTaskSwitchContext>
 800c870:	b662      	cpsie	i
 800c872:	bc0c      	pop	{r2, r3}
 800c874:	6811      	ldr	r1, [r2, #0]
 800c876:	6808      	ldr	r0, [r1, #0]
 800c878:	3010      	adds	r0, #16
 800c87a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c87c:	46a0      	mov	r8, r4
 800c87e:	46a9      	mov	r9, r5
 800c880:	46b2      	mov	sl, r6
 800c882:	46bb      	mov	fp, r7
 800c884:	f380 8809 	msr	PSP, r0
 800c888:	3820      	subs	r0, #32
 800c88a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c88c:	4718      	bx	r3
 800c88e:	46c0      	nop			; (mov r8, r8)

0800c890 <pxCurrentTCBConst>:
 800c890:	20005484 	.word	0x20005484

0800c894 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c894:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c896:	f7ff ffcd 	bl	800c834 <ulSetInterruptMaskFromISR>
 800c89a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c89c:	f7ff fab8 	bl	800be10 <xTaskIncrementTick>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d003      	beq.n	800c8ac <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8a4:	2280      	movs	r2, #128	; 0x80
 800c8a6:	4b03      	ldr	r3, [pc, #12]	; (800c8b4 <xPortSysTickHandler+0x20>)
 800c8a8:	0552      	lsls	r2, r2, #21
 800c8aa:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c8ac:	0020      	movs	r0, r4
 800c8ae:	f7ff ffc5 	bl	800c83c <vClearInterruptMaskFromISR>
}
 800c8b2:	bd10      	pop	{r4, pc}
 800c8b4:	e000ed04 	.word	0xe000ed04

0800c8b8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8b8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8ba:	21fa      	movs	r1, #250	; 0xfa
{
 800c8bc:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8be:	4a07      	ldr	r2, [pc, #28]	; (800c8dc <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8c0:	4c07      	ldr	r4, [pc, #28]	; (800c8e0 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8c2:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8c4:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8c8:	4b06      	ldr	r3, [pc, #24]	; (800c8e4 <vPortSetupTimerInterrupt+0x2c>)
 800c8ca:	6818      	ldr	r0, [r3, #0]
 800c8cc:	f7f3 fc38 	bl	8000140 <__udivsi3>
 800c8d0:	4b05      	ldr	r3, [pc, #20]	; (800c8e8 <vPortSetupTimerInterrupt+0x30>)
 800c8d2:	3801      	subs	r0, #1
 800c8d4:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c8d6:	2307      	movs	r3, #7
 800c8d8:	6023      	str	r3, [r4, #0]
}
 800c8da:	bd10      	pop	{r4, pc}
 800c8dc:	e000e018 	.word	0xe000e018
 800c8e0:	e000e010 	.word	0xe000e010
 800c8e4:	2000011c 	.word	0x2000011c
 800c8e8:	e000e014 	.word	0xe000e014

0800c8ec <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8ec:	22ff      	movs	r2, #255	; 0xff
 800c8ee:	4b11      	ldr	r3, [pc, #68]	; (800c934 <xPortStartScheduler+0x48>)
 800c8f0:	0412      	lsls	r2, r2, #16
 800c8f2:	6819      	ldr	r1, [r3, #0]
{
 800c8f4:	b530      	push	{r4, r5, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8f6:	430a      	orrs	r2, r1
 800c8f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8fa:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 800c8fc:	2500      	movs	r5, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8fe:	6819      	ldr	r1, [r3, #0]
 800c900:	0612      	lsls	r2, r2, #24
 800c902:	430a      	orrs	r2, r1
{
 800c904:	b083      	sub	sp, #12
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c906:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800c908:	f7ff ffd6 	bl	800c8b8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c90c:	4c0a      	ldr	r4, [pc, #40]	; (800c938 <xPortStartScheduler+0x4c>)
 800c90e:	6025      	str	r5, [r4, #0]
	vPortStartFirstTask();
 800c910:	f7ff ff3e 	bl	800c790 <vPortStartFirstTask>
	vTaskSwitchContext();
 800c914:	f7ff fbf0 	bl	800c0f8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800c918:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0UL;
 800c91a:	9501      	str	r5, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800c91c:	3301      	adds	r3, #1
 800c91e:	d001      	beq.n	800c924 <xPortStartScheduler+0x38>
 800c920:	b672      	cpsid	i
 800c922:	e7fe      	b.n	800c922 <xPortStartScheduler+0x36>
	portDISABLE_INTERRUPTS();
 800c924:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c926:	9b01      	ldr	r3, [sp, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d0fc      	beq.n	800c926 <xPortStartScheduler+0x3a>
}
 800c92c:	2000      	movs	r0, #0
 800c92e:	b003      	add	sp, #12
 800c930:	bd30      	pop	{r4, r5, pc}
 800c932:	46c0      	nop			; (mov r8, r8)
 800c934:	e000ed20 	.word	0xe000ed20
 800c938:	20000128 	.word	0x20000128

0800c93c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c93c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c93e:	4b12      	ldr	r3, [pc, #72]	; (800c988 <prvInsertBlockIntoFreeList+0x4c>)
 800c940:	001a      	movs	r2, r3
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4283      	cmp	r3, r0
 800c946:	d3fb      	bcc.n	800c940 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c948:	6851      	ldr	r1, [r2, #4]
 800c94a:	1854      	adds	r4, r2, r1
 800c94c:	42a0      	cmp	r0, r4
 800c94e:	d012      	beq.n	800c976 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c950:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c952:	1844      	adds	r4, r0, r1
 800c954:	42a3      	cmp	r3, r4
 800c956:	d005      	beq.n	800c964 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c958:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c95a:	4282      	cmp	r2, r0
 800c95c:	d000      	beq.n	800c960 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c95e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c960:	bd10      	pop	{r4, pc}
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c962:	0010      	movs	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c964:	4c09      	ldr	r4, [pc, #36]	; (800c98c <prvInsertBlockIntoFreeList+0x50>)
 800c966:	6824      	ldr	r4, [r4, #0]
 800c968:	42a3      	cmp	r3, r4
 800c96a:	d0f5      	beq.n	800c958 <prvInsertBlockIntoFreeList+0x1c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c96c:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c96e:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c970:	1861      	adds	r1, r4, r1
 800c972:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c974:	e7f0      	b.n	800c958 <prvInsertBlockIntoFreeList+0x1c>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c976:	6840      	ldr	r0, [r0, #4]
 800c978:	1809      	adds	r1, r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c97a:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c97c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c97e:	4283      	cmp	r3, r0
 800c980:	d0ef      	beq.n	800c962 <prvInsertBlockIntoFreeList+0x26>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c982:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800c984:	e7ec      	b.n	800c960 <prvInsertBlockIntoFreeList+0x24>
 800c986:	46c0      	nop			; (mov r8, r8)
 800c988:	200066c4 	.word	0x200066c4
 800c98c:	20005aac 	.word	0x20005aac

0800c990 <pvPortMalloc>:
{
 800c990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c992:	46c6      	mov	lr, r8
 800c994:	b500      	push	{lr}
 800c996:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800c998:	f7ff fa2c 	bl	800bdf4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c99c:	4b3f      	ldr	r3, [pc, #252]	; (800ca9c <pvPortMalloc+0x10c>)
 800c99e:	469c      	mov	ip, r3
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d054      	beq.n	800ca50 <pvPortMalloc+0xc0>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9a6:	4b3e      	ldr	r3, [pc, #248]	; (800caa0 <pvPortMalloc+0x110>)
 800c9a8:	681d      	ldr	r5, [r3, #0]
 800c9aa:	4225      	tst	r5, r4
 800c9ac:	d12c      	bne.n	800ca08 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 800c9ae:	2c00      	cmp	r4, #0
 800c9b0:	d02a      	beq.n	800ca08 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 800c9b2:	0021      	movs	r1, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9b4:	2307      	movs	r3, #7
				xWantedSize += xHeapStructSize;
 800c9b6:	3108      	adds	r1, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9b8:	420b      	tst	r3, r1
 800c9ba:	d001      	beq.n	800c9c0 <pvPortMalloc+0x30>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9bc:	4399      	bics	r1, r3
 800c9be:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9c0:	2900      	cmp	r1, #0
 800c9c2:	d021      	beq.n	800ca08 <pvPortMalloc+0x78>
 800c9c4:	4f37      	ldr	r7, [pc, #220]	; (800caa4 <pvPortMalloc+0x114>)
 800c9c6:	683e      	ldr	r6, [r7, #0]
 800c9c8:	428e      	cmp	r6, r1
 800c9ca:	d31d      	bcc.n	800ca08 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 800c9cc:	4836      	ldr	r0, [pc, #216]	; (800caa8 <pvPortMalloc+0x118>)
 800c9ce:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9d0:	e004      	b.n	800c9dc <pvPortMalloc+0x4c>
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d004      	beq.n	800c9e2 <pvPortMalloc+0x52>
 800c9d8:	0020      	movs	r0, r4
 800c9da:	001c      	movs	r4, r3
 800c9dc:	6862      	ldr	r2, [r4, #4]
 800c9de:	428a      	cmp	r2, r1
 800c9e0:	d3f7      	bcc.n	800c9d2 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800c9e2:	4663      	mov	r3, ip
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	42a3      	cmp	r3, r4
 800c9e8:	d00e      	beq.n	800ca08 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9ea:	6803      	ldr	r3, [r0, #0]
 800c9ec:	469c      	mov	ip, r3
 800c9ee:	2308      	movs	r3, #8
 800c9f0:	4698      	mov	r8, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9f2:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9f4:	44e0      	add	r8, ip
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9f6:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9f8:	1a53      	subs	r3, r2, r1
 800c9fa:	2b10      	cmp	r3, #16
 800c9fc:	d911      	bls.n	800ca22 <pvPortMalloc+0x92>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9fe:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca00:	0742      	lsls	r2, r0, #29
 800ca02:	d009      	beq.n	800ca18 <pvPortMalloc+0x88>
 800ca04:	b672      	cpsid	i
 800ca06:	e7fe      	b.n	800ca06 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 800ca08:	f7ff fb4c 	bl	800c0a4 <xTaskResumeAll>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4698      	mov	r8, r3
}
 800ca10:	4640      	mov	r0, r8
 800ca12:	bc80      	pop	{r7}
 800ca14:	46b8      	mov	r8, r7
 800ca16:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca18:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca1a:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca1c:	f7ff ff8e 	bl	800c93c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca20:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca22:	4b22      	ldr	r3, [pc, #136]	; (800caac <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca24:	1ab6      	subs	r6, r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca26:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca28:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca2a:	428e      	cmp	r6, r1
 800ca2c:	d30e      	bcc.n	800ca4c <pvPortMalloc+0xbc>
					pxBlock->pxNextFreeBlock = NULL;
 800ca2e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca30:	4315      	orrs	r5, r2
					xNumberOfSuccessfulAllocations++;
 800ca32:	4a1f      	ldr	r2, [pc, #124]	; (800cab0 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 800ca34:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800ca36:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca38:	6065      	str	r5, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800ca3e:	f7ff fb31 	bl	800c0a4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca42:	4643      	mov	r3, r8
 800ca44:	075b      	lsls	r3, r3, #29
 800ca46:	d0e3      	beq.n	800ca10 <pvPortMalloc+0x80>
 800ca48:	b672      	cpsid	i
 800ca4a:	e7fe      	b.n	800ca4a <pvPortMalloc+0xba>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca4c:	601e      	str	r6, [r3, #0]
 800ca4e:	e7ee      	b.n	800ca2e <pvPortMalloc+0x9e>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca50:	2107      	movs	r1, #7
	uxAddress = ( size_t ) ucHeap;
 800ca52:	4b18      	ldr	r3, [pc, #96]	; (800cab4 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca54:	4219      	tst	r1, r3
 800ca56:	d119      	bne.n	800ca8c <pvPortMalloc+0xfc>
 800ca58:	22c0      	movs	r2, #192	; 0xc0
 800ca5a:	0019      	movs	r1, r3
 800ca5c:	0112      	lsls	r2, r2, #4
 800ca5e:	189a      	adds	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 800ca60:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca62:	4d11      	ldr	r5, [pc, #68]	; (800caa8 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800ca64:	3a08      	subs	r2, #8
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca66:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca68:	6068      	str	r0, [r5, #4]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca6a:	2507      	movs	r5, #7
 800ca6c:	43aa      	bics	r2, r5
	pxEnd = ( void * ) uxAddress;
 800ca6e:	4665      	mov	r5, ip
 800ca70:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca72:	2580      	movs	r5, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca74:	1ad3      	subs	r3, r2, r3
	pxEnd->pxNextFreeBlock = NULL;
 800ca76:	6010      	str	r0, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca78:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca7a:	c10c      	stmia	r1!, {r2, r3}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca7c:	4a0b      	ldr	r2, [pc, #44]	; (800caac <pvPortMalloc+0x11c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca7e:	062d      	lsls	r5, r5, #24
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca80:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca82:	4a08      	ldr	r2, [pc, #32]	; (800caa4 <pvPortMalloc+0x114>)
 800ca84:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca86:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <pvPortMalloc+0x110>)
 800ca88:	601d      	str	r5, [r3, #0]
}
 800ca8a:	e78e      	b.n	800c9aa <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca8c:	22c0      	movs	r2, #192	; 0xc0
 800ca8e:	1dd8      	adds	r0, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca90:	0112      	lsls	r2, r2, #4
 800ca92:	189a      	adds	r2, r3, r2
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca94:	0003      	movs	r3, r0
 800ca96:	438b      	bics	r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca98:	0019      	movs	r1, r3
 800ca9a:	e7e1      	b.n	800ca60 <pvPortMalloc+0xd0>
 800ca9c:	20005aac 	.word	0x20005aac
 800caa0:	200066b0 	.word	0x200066b0
 800caa4:	200066b4 	.word	0x200066b4
 800caa8:	200066c4 	.word	0x200066c4
 800caac:	200066b8 	.word	0x200066b8
 800cab0:	200066bc 	.word	0x200066bc
 800cab4:	20005ab0 	.word	0x20005ab0

0800cab8 <vPortFree>:
{
 800cab8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800caba:	2800      	cmp	r0, #0
 800cabc:	d01f      	beq.n	800cafe <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cabe:	4a10      	ldr	r2, [pc, #64]	; (800cb00 <vPortFree+0x48>)
 800cac0:	3808      	subs	r0, #8
 800cac2:	6843      	ldr	r3, [r0, #4]
 800cac4:	6812      	ldr	r2, [r2, #0]
 800cac6:	0004      	movs	r4, r0
 800cac8:	421a      	tst	r2, r3
 800caca:	d004      	beq.n	800cad6 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cacc:	6801      	ldr	r1, [r0, #0]
 800cace:	2900      	cmp	r1, #0
 800cad0:	d003      	beq.n	800cada <vPortFree+0x22>
 800cad2:	b672      	cpsid	i
 800cad4:	e7fe      	b.n	800cad4 <vPortFree+0x1c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cad6:	b672      	cpsid	i
 800cad8:	e7fe      	b.n	800cad8 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cada:	4393      	bics	r3, r2
 800cadc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800cade:	f7ff f989 	bl	800bdf4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cae2:	4a08      	ldr	r2, [pc, #32]	; (800cb04 <vPortFree+0x4c>)
 800cae4:	6863      	ldr	r3, [r4, #4]
 800cae6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cae8:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800caea:	185b      	adds	r3, r3, r1
 800caec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caee:	f7ff ff25 	bl	800c93c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800caf2:	4a05      	ldr	r2, [pc, #20]	; (800cb08 <vPortFree+0x50>)
 800caf4:	6813      	ldr	r3, [r2, #0]
 800caf6:	3301      	adds	r3, #1
 800caf8:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800cafa:	f7ff fad3 	bl	800c0a4 <xTaskResumeAll>
}
 800cafe:	bd10      	pop	{r4, pc}
 800cb00:	200066b0 	.word	0x200066b0
 800cb04:	200066b4 	.word	0x200066b4
 800cb08:	200066c0 	.word	0x200066c0

0800cb0c <atoi>:
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	220a      	movs	r2, #10
 800cb10:	2100      	movs	r1, #0
 800cb12:	f000 ff81 	bl	800da18 <strtol>
 800cb16:	bd10      	pop	{r4, pc}

0800cb18 <malloc>:
 800cb18:	b510      	push	{r4, lr}
 800cb1a:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <malloc+0x10>)
 800cb1c:	0001      	movs	r1, r0
 800cb1e:	6818      	ldr	r0, [r3, #0]
 800cb20:	f000 f826 	bl	800cb70 <_malloc_r>
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	46c0      	nop			; (mov r8, r8)
 800cb28:	200002f0 	.word	0x200002f0

0800cb2c <sbrk_aligned>:
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	4e0f      	ldr	r6, [pc, #60]	; (800cb6c <sbrk_aligned+0x40>)
 800cb30:	000d      	movs	r5, r1
 800cb32:	6831      	ldr	r1, [r6, #0]
 800cb34:	0004      	movs	r4, r0
 800cb36:	2900      	cmp	r1, #0
 800cb38:	d102      	bne.n	800cb40 <sbrk_aligned+0x14>
 800cb3a:	f002 f8cf 	bl	800ecdc <_sbrk_r>
 800cb3e:	6030      	str	r0, [r6, #0]
 800cb40:	0029      	movs	r1, r5
 800cb42:	0020      	movs	r0, r4
 800cb44:	f002 f8ca 	bl	800ecdc <_sbrk_r>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d00a      	beq.n	800cb62 <sbrk_aligned+0x36>
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	1cc5      	adds	r5, r0, #3
 800cb50:	439d      	bics	r5, r3
 800cb52:	42a8      	cmp	r0, r5
 800cb54:	d007      	beq.n	800cb66 <sbrk_aligned+0x3a>
 800cb56:	1a29      	subs	r1, r5, r0
 800cb58:	0020      	movs	r0, r4
 800cb5a:	f002 f8bf 	bl	800ecdc <_sbrk_r>
 800cb5e:	3001      	adds	r0, #1
 800cb60:	d101      	bne.n	800cb66 <sbrk_aligned+0x3a>
 800cb62:	2501      	movs	r5, #1
 800cb64:	426d      	negs	r5, r5
 800cb66:	0028      	movs	r0, r5
 800cb68:	bd70      	pop	{r4, r5, r6, pc}
 800cb6a:	46c0      	nop			; (mov r8, r8)
 800cb6c:	200066d0 	.word	0x200066d0

0800cb70 <_malloc_r>:
 800cb70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb72:	2203      	movs	r2, #3
 800cb74:	1ccb      	adds	r3, r1, #3
 800cb76:	4393      	bics	r3, r2
 800cb78:	3308      	adds	r3, #8
 800cb7a:	0006      	movs	r6, r0
 800cb7c:	001f      	movs	r7, r3
 800cb7e:	2b0c      	cmp	r3, #12
 800cb80:	d238      	bcs.n	800cbf4 <_malloc_r+0x84>
 800cb82:	270c      	movs	r7, #12
 800cb84:	42b9      	cmp	r1, r7
 800cb86:	d837      	bhi.n	800cbf8 <_malloc_r+0x88>
 800cb88:	0030      	movs	r0, r6
 800cb8a:	f000 f873 	bl	800cc74 <__malloc_lock>
 800cb8e:	4b38      	ldr	r3, [pc, #224]	; (800cc70 <_malloc_r+0x100>)
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	001c      	movs	r4, r3
 800cb96:	2c00      	cmp	r4, #0
 800cb98:	d133      	bne.n	800cc02 <_malloc_r+0x92>
 800cb9a:	0039      	movs	r1, r7
 800cb9c:	0030      	movs	r0, r6
 800cb9e:	f7ff ffc5 	bl	800cb2c <sbrk_aligned>
 800cba2:	0004      	movs	r4, r0
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d15e      	bne.n	800cc66 <_malloc_r+0xf6>
 800cba8:	9b00      	ldr	r3, [sp, #0]
 800cbaa:	681c      	ldr	r4, [r3, #0]
 800cbac:	0025      	movs	r5, r4
 800cbae:	2d00      	cmp	r5, #0
 800cbb0:	d14e      	bne.n	800cc50 <_malloc_r+0xe0>
 800cbb2:	2c00      	cmp	r4, #0
 800cbb4:	d051      	beq.n	800cc5a <_malloc_r+0xea>
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	0029      	movs	r1, r5
 800cbba:	18e3      	adds	r3, r4, r3
 800cbbc:	0030      	movs	r0, r6
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	f002 f88c 	bl	800ecdc <_sbrk_r>
 800cbc4:	9b01      	ldr	r3, [sp, #4]
 800cbc6:	4283      	cmp	r3, r0
 800cbc8:	d147      	bne.n	800cc5a <_malloc_r+0xea>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	0030      	movs	r0, r6
 800cbce:	1aff      	subs	r7, r7, r3
 800cbd0:	0039      	movs	r1, r7
 800cbd2:	f7ff ffab 	bl	800cb2c <sbrk_aligned>
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	d03f      	beq.n	800cc5a <_malloc_r+0xea>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	19db      	adds	r3, r3, r7
 800cbde:	6023      	str	r3, [r4, #0]
 800cbe0:	9b00      	ldr	r3, [sp, #0]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d040      	beq.n	800cc6a <_malloc_r+0xfa>
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	42a2      	cmp	r2, r4
 800cbec:	d133      	bne.n	800cc56 <_malloc_r+0xe6>
 800cbee:	2200      	movs	r2, #0
 800cbf0:	605a      	str	r2, [r3, #4]
 800cbf2:	e014      	b.n	800cc1e <_malloc_r+0xae>
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dac5      	bge.n	800cb84 <_malloc_r+0x14>
 800cbf8:	230c      	movs	r3, #12
 800cbfa:	2500      	movs	r5, #0
 800cbfc:	6033      	str	r3, [r6, #0]
 800cbfe:	0028      	movs	r0, r5
 800cc00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc02:	6821      	ldr	r1, [r4, #0]
 800cc04:	1bc9      	subs	r1, r1, r7
 800cc06:	d420      	bmi.n	800cc4a <_malloc_r+0xda>
 800cc08:	290b      	cmp	r1, #11
 800cc0a:	d918      	bls.n	800cc3e <_malloc_r+0xce>
 800cc0c:	19e2      	adds	r2, r4, r7
 800cc0e:	6027      	str	r7, [r4, #0]
 800cc10:	42a3      	cmp	r3, r4
 800cc12:	d112      	bne.n	800cc3a <_malloc_r+0xca>
 800cc14:	9b00      	ldr	r3, [sp, #0]
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	6863      	ldr	r3, [r4, #4]
 800cc1a:	6011      	str	r1, [r2, #0]
 800cc1c:	6053      	str	r3, [r2, #4]
 800cc1e:	0030      	movs	r0, r6
 800cc20:	0025      	movs	r5, r4
 800cc22:	f000 f82f 	bl	800cc84 <__malloc_unlock>
 800cc26:	2207      	movs	r2, #7
 800cc28:	350b      	adds	r5, #11
 800cc2a:	1d23      	adds	r3, r4, #4
 800cc2c:	4395      	bics	r5, r2
 800cc2e:	1aea      	subs	r2, r5, r3
 800cc30:	429d      	cmp	r5, r3
 800cc32:	d0e4      	beq.n	800cbfe <_malloc_r+0x8e>
 800cc34:	1b5b      	subs	r3, r3, r5
 800cc36:	50a3      	str	r3, [r4, r2]
 800cc38:	e7e1      	b.n	800cbfe <_malloc_r+0x8e>
 800cc3a:	605a      	str	r2, [r3, #4]
 800cc3c:	e7ec      	b.n	800cc18 <_malloc_r+0xa8>
 800cc3e:	6862      	ldr	r2, [r4, #4]
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	d1d5      	bne.n	800cbf0 <_malloc_r+0x80>
 800cc44:	9b00      	ldr	r3, [sp, #0]
 800cc46:	601a      	str	r2, [r3, #0]
 800cc48:	e7e9      	b.n	800cc1e <_malloc_r+0xae>
 800cc4a:	0023      	movs	r3, r4
 800cc4c:	6864      	ldr	r4, [r4, #4]
 800cc4e:	e7a2      	b.n	800cb96 <_malloc_r+0x26>
 800cc50:	002c      	movs	r4, r5
 800cc52:	686d      	ldr	r5, [r5, #4]
 800cc54:	e7ab      	b.n	800cbae <_malloc_r+0x3e>
 800cc56:	0013      	movs	r3, r2
 800cc58:	e7c4      	b.n	800cbe4 <_malloc_r+0x74>
 800cc5a:	230c      	movs	r3, #12
 800cc5c:	0030      	movs	r0, r6
 800cc5e:	6033      	str	r3, [r6, #0]
 800cc60:	f000 f810 	bl	800cc84 <__malloc_unlock>
 800cc64:	e7cb      	b.n	800cbfe <_malloc_r+0x8e>
 800cc66:	6027      	str	r7, [r4, #0]
 800cc68:	e7d9      	b.n	800cc1e <_malloc_r+0xae>
 800cc6a:	605b      	str	r3, [r3, #4]
 800cc6c:	deff      	udf	#255	; 0xff
 800cc6e:	46c0      	nop			; (mov r8, r8)
 800cc70:	200066cc 	.word	0x200066cc

0800cc74 <__malloc_lock>:
 800cc74:	b510      	push	{r4, lr}
 800cc76:	4802      	ldr	r0, [pc, #8]	; (800cc80 <__malloc_lock+0xc>)
 800cc78:	f002 f881 	bl	800ed7e <__retarget_lock_acquire_recursive>
 800cc7c:	bd10      	pop	{r4, pc}
 800cc7e:	46c0      	nop			; (mov r8, r8)
 800cc80:	20006814 	.word	0x20006814

0800cc84 <__malloc_unlock>:
 800cc84:	b510      	push	{r4, lr}
 800cc86:	4802      	ldr	r0, [pc, #8]	; (800cc90 <__malloc_unlock+0xc>)
 800cc88:	f002 f87a 	bl	800ed80 <__retarget_lock_release_recursive>
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	46c0      	nop			; (mov r8, r8)
 800cc90:	20006814 	.word	0x20006814

0800cc94 <sulp>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	0016      	movs	r6, r2
 800cc98:	000d      	movs	r5, r1
 800cc9a:	f003 fe93 	bl	80109c4 <__ulp>
 800cc9e:	2e00      	cmp	r6, #0
 800cca0:	d00d      	beq.n	800ccbe <sulp+0x2a>
 800cca2:	236b      	movs	r3, #107	; 0x6b
 800cca4:	006a      	lsls	r2, r5, #1
 800cca6:	0d52      	lsrs	r2, r2, #21
 800cca8:	1a9b      	subs	r3, r3, r2
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	dd07      	ble.n	800ccbe <sulp+0x2a>
 800ccae:	2400      	movs	r4, #0
 800ccb0:	4a03      	ldr	r2, [pc, #12]	; (800ccc0 <sulp+0x2c>)
 800ccb2:	051b      	lsls	r3, r3, #20
 800ccb4:	189d      	adds	r5, r3, r2
 800ccb6:	002b      	movs	r3, r5
 800ccb8:	0022      	movs	r2, r4
 800ccba:	f7f5 fb0b 	bl	80022d4 <__aeabi_dmul>
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	3ff00000 	.word	0x3ff00000

0800ccc4 <_strtod_l>:
 800ccc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccc6:	b0a1      	sub	sp, #132	; 0x84
 800ccc8:	9219      	str	r2, [sp, #100]	; 0x64
 800ccca:	2200      	movs	r2, #0
 800cccc:	2600      	movs	r6, #0
 800ccce:	2700      	movs	r7, #0
 800ccd0:	9004      	str	r0, [sp, #16]
 800ccd2:	9107      	str	r1, [sp, #28]
 800ccd4:	921c      	str	r2, [sp, #112]	; 0x70
 800ccd6:	911b      	str	r1, [sp, #108]	; 0x6c
 800ccd8:	780a      	ldrb	r2, [r1, #0]
 800ccda:	2a2b      	cmp	r2, #43	; 0x2b
 800ccdc:	d055      	beq.n	800cd8a <_strtod_l+0xc6>
 800ccde:	d841      	bhi.n	800cd64 <_strtod_l+0xa0>
 800cce0:	2a0d      	cmp	r2, #13
 800cce2:	d83b      	bhi.n	800cd5c <_strtod_l+0x98>
 800cce4:	2a08      	cmp	r2, #8
 800cce6:	d83b      	bhi.n	800cd60 <_strtod_l+0x9c>
 800cce8:	2a00      	cmp	r2, #0
 800ccea:	d044      	beq.n	800cd76 <_strtod_l+0xb2>
 800ccec:	2200      	movs	r2, #0
 800ccee:	920f      	str	r2, [sp, #60]	; 0x3c
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ccf4:	9109      	str	r1, [sp, #36]	; 0x24
 800ccf6:	782a      	ldrb	r2, [r5, #0]
 800ccf8:	2a30      	cmp	r2, #48	; 0x30
 800ccfa:	d000      	beq.n	800ccfe <_strtod_l+0x3a>
 800ccfc:	e085      	b.n	800ce0a <_strtod_l+0x146>
 800ccfe:	786a      	ldrb	r2, [r5, #1]
 800cd00:	3120      	adds	r1, #32
 800cd02:	438a      	bics	r2, r1
 800cd04:	2a58      	cmp	r2, #88	; 0x58
 800cd06:	d000      	beq.n	800cd0a <_strtod_l+0x46>
 800cd08:	e075      	b.n	800cdf6 <_strtod_l+0x132>
 800cd0a:	9302      	str	r3, [sp, #8]
 800cd0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd0e:	4a97      	ldr	r2, [pc, #604]	; (800cf6c <_strtod_l+0x2a8>)
 800cd10:	9301      	str	r3, [sp, #4]
 800cd12:	ab1c      	add	r3, sp, #112	; 0x70
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	9804      	ldr	r0, [sp, #16]
 800cd18:	ab1d      	add	r3, sp, #116	; 0x74
 800cd1a:	a91b      	add	r1, sp, #108	; 0x6c
 800cd1c:	f002 ffc8 	bl	800fcb0 <__gethex>
 800cd20:	230f      	movs	r3, #15
 800cd22:	0002      	movs	r2, r0
 800cd24:	401a      	ands	r2, r3
 800cd26:	0004      	movs	r4, r0
 800cd28:	9205      	str	r2, [sp, #20]
 800cd2a:	4218      	tst	r0, r3
 800cd2c:	d005      	beq.n	800cd3a <_strtod_l+0x76>
 800cd2e:	2a06      	cmp	r2, #6
 800cd30:	d12d      	bne.n	800cd8e <_strtod_l+0xca>
 800cd32:	1c6b      	adds	r3, r5, #1
 800cd34:	931b      	str	r3, [sp, #108]	; 0x6c
 800cd36:	2300      	movs	r3, #0
 800cd38:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <_strtod_l+0x82>
 800cd40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd44:	6013      	str	r3, [r2, #0]
 800cd46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01b      	beq.n	800cd84 <_strtod_l+0xc0>
 800cd4c:	2380      	movs	r3, #128	; 0x80
 800cd4e:	0032      	movs	r2, r6
 800cd50:	061b      	lsls	r3, r3, #24
 800cd52:	18fb      	adds	r3, r7, r3
 800cd54:	0010      	movs	r0, r2
 800cd56:	0019      	movs	r1, r3
 800cd58:	b021      	add	sp, #132	; 0x84
 800cd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd5c:	2a20      	cmp	r2, #32
 800cd5e:	d1c5      	bne.n	800ccec <_strtod_l+0x28>
 800cd60:	3101      	adds	r1, #1
 800cd62:	e7b8      	b.n	800ccd6 <_strtod_l+0x12>
 800cd64:	2a2d      	cmp	r2, #45	; 0x2d
 800cd66:	d1c1      	bne.n	800ccec <_strtod_l+0x28>
 800cd68:	3a2c      	subs	r2, #44	; 0x2c
 800cd6a:	920f      	str	r2, [sp, #60]	; 0x3c
 800cd6c:	1c4a      	adds	r2, r1, #1
 800cd6e:	921b      	str	r2, [sp, #108]	; 0x6c
 800cd70:	784a      	ldrb	r2, [r1, #1]
 800cd72:	2a00      	cmp	r2, #0
 800cd74:	d1bc      	bne.n	800ccf0 <_strtod_l+0x2c>
 800cd76:	9b07      	ldr	r3, [sp, #28]
 800cd78:	931b      	str	r3, [sp, #108]	; 0x6c
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1dd      	bne.n	800cd40 <_strtod_l+0x7c>
 800cd84:	0032      	movs	r2, r6
 800cd86:	003b      	movs	r3, r7
 800cd88:	e7e4      	b.n	800cd54 <_strtod_l+0x90>
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	e7ed      	b.n	800cd6a <_strtod_l+0xa6>
 800cd8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cd90:	2a00      	cmp	r2, #0
 800cd92:	d007      	beq.n	800cda4 <_strtod_l+0xe0>
 800cd94:	2135      	movs	r1, #53	; 0x35
 800cd96:	a81e      	add	r0, sp, #120	; 0x78
 800cd98:	f003 ff05 	bl	8010ba6 <__copybits>
 800cd9c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd9e:	9804      	ldr	r0, [sp, #16]
 800cda0:	f003 face 	bl	8010340 <_Bfree>
 800cda4:	9805      	ldr	r0, [sp, #20]
 800cda6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cda8:	3801      	subs	r0, #1
 800cdaa:	2804      	cmp	r0, #4
 800cdac:	d806      	bhi.n	800cdbc <_strtod_l+0xf8>
 800cdae:	f7f3 f9b3 	bl	8000118 <__gnu_thumb1_case_uqi>
 800cdb2:	0312      	.short	0x0312
 800cdb4:	1e1c      	.short	0x1e1c
 800cdb6:	12          	.byte	0x12
 800cdb7:	00          	.byte	0x00
 800cdb8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cdba:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800cdbc:	05e4      	lsls	r4, r4, #23
 800cdbe:	d502      	bpl.n	800cdc6 <_strtod_l+0x102>
 800cdc0:	2380      	movs	r3, #128	; 0x80
 800cdc2:	061b      	lsls	r3, r3, #24
 800cdc4:	431f      	orrs	r7, r3
 800cdc6:	4b6a      	ldr	r3, [pc, #424]	; (800cf70 <_strtod_l+0x2ac>)
 800cdc8:	423b      	tst	r3, r7
 800cdca:	d1b6      	bne.n	800cd3a <_strtod_l+0x76>
 800cdcc:	f001 ffac 	bl	800ed28 <__errno>
 800cdd0:	2322      	movs	r3, #34	; 0x22
 800cdd2:	6003      	str	r3, [r0, #0]
 800cdd4:	e7b1      	b.n	800cd3a <_strtod_l+0x76>
 800cdd6:	4967      	ldr	r1, [pc, #412]	; (800cf74 <_strtod_l+0x2b0>)
 800cdd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cdda:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cddc:	400a      	ands	r2, r1
 800cdde:	4966      	ldr	r1, [pc, #408]	; (800cf78 <_strtod_l+0x2b4>)
 800cde0:	185b      	adds	r3, r3, r1
 800cde2:	051b      	lsls	r3, r3, #20
 800cde4:	431a      	orrs	r2, r3
 800cde6:	0017      	movs	r7, r2
 800cde8:	e7e8      	b.n	800cdbc <_strtod_l+0xf8>
 800cdea:	4f61      	ldr	r7, [pc, #388]	; (800cf70 <_strtod_l+0x2ac>)
 800cdec:	e7e6      	b.n	800cdbc <_strtod_l+0xf8>
 800cdee:	2601      	movs	r6, #1
 800cdf0:	4f62      	ldr	r7, [pc, #392]	; (800cf7c <_strtod_l+0x2b8>)
 800cdf2:	4276      	negs	r6, r6
 800cdf4:	e7e2      	b.n	800cdbc <_strtod_l+0xf8>
 800cdf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdf8:	1c5a      	adds	r2, r3, #1
 800cdfa:	921b      	str	r2, [sp, #108]	; 0x6c
 800cdfc:	785b      	ldrb	r3, [r3, #1]
 800cdfe:	2b30      	cmp	r3, #48	; 0x30
 800ce00:	d0f9      	beq.n	800cdf6 <_strtod_l+0x132>
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d099      	beq.n	800cd3a <_strtod_l+0x76>
 800ce06:	2301      	movs	r3, #1
 800ce08:	9309      	str	r3, [sp, #36]	; 0x24
 800ce0a:	2500      	movs	r5, #0
 800ce0c:	220a      	movs	r2, #10
 800ce0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce10:	950d      	str	r5, [sp, #52]	; 0x34
 800ce12:	9310      	str	r3, [sp, #64]	; 0x40
 800ce14:	9508      	str	r5, [sp, #32]
 800ce16:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ce18:	7804      	ldrb	r4, [r0, #0]
 800ce1a:	0023      	movs	r3, r4
 800ce1c:	3b30      	subs	r3, #48	; 0x30
 800ce1e:	b2d9      	uxtb	r1, r3
 800ce20:	2909      	cmp	r1, #9
 800ce22:	d927      	bls.n	800ce74 <_strtod_l+0x1b0>
 800ce24:	2201      	movs	r2, #1
 800ce26:	4956      	ldr	r1, [pc, #344]	; (800cf80 <_strtod_l+0x2bc>)
 800ce28:	f001 fe0f 	bl	800ea4a <strncmp>
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d031      	beq.n	800ce94 <_strtod_l+0x1d0>
 800ce30:	2000      	movs	r0, #0
 800ce32:	0023      	movs	r3, r4
 800ce34:	4684      	mov	ip, r0
 800ce36:	9a08      	ldr	r2, [sp, #32]
 800ce38:	900c      	str	r0, [sp, #48]	; 0x30
 800ce3a:	9205      	str	r2, [sp, #20]
 800ce3c:	2220      	movs	r2, #32
 800ce3e:	0019      	movs	r1, r3
 800ce40:	4391      	bics	r1, r2
 800ce42:	000a      	movs	r2, r1
 800ce44:	2100      	movs	r1, #0
 800ce46:	9106      	str	r1, [sp, #24]
 800ce48:	2a45      	cmp	r2, #69	; 0x45
 800ce4a:	d000      	beq.n	800ce4e <_strtod_l+0x18a>
 800ce4c:	e0c2      	b.n	800cfd4 <_strtod_l+0x310>
 800ce4e:	9b05      	ldr	r3, [sp, #20]
 800ce50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce52:	4303      	orrs	r3, r0
 800ce54:	4313      	orrs	r3, r2
 800ce56:	428b      	cmp	r3, r1
 800ce58:	d08d      	beq.n	800cd76 <_strtod_l+0xb2>
 800ce5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce5c:	9307      	str	r3, [sp, #28]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce62:	9b07      	ldr	r3, [sp, #28]
 800ce64:	785b      	ldrb	r3, [r3, #1]
 800ce66:	2b2b      	cmp	r3, #43	; 0x2b
 800ce68:	d071      	beq.n	800cf4e <_strtod_l+0x28a>
 800ce6a:	000c      	movs	r4, r1
 800ce6c:	2b2d      	cmp	r3, #45	; 0x2d
 800ce6e:	d174      	bne.n	800cf5a <_strtod_l+0x296>
 800ce70:	2401      	movs	r4, #1
 800ce72:	e06d      	b.n	800cf50 <_strtod_l+0x28c>
 800ce74:	9908      	ldr	r1, [sp, #32]
 800ce76:	2908      	cmp	r1, #8
 800ce78:	dc09      	bgt.n	800ce8e <_strtod_l+0x1ca>
 800ce7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ce7c:	4351      	muls	r1, r2
 800ce7e:	185b      	adds	r3, r3, r1
 800ce80:	930d      	str	r3, [sp, #52]	; 0x34
 800ce82:	9b08      	ldr	r3, [sp, #32]
 800ce84:	3001      	adds	r0, #1
 800ce86:	3301      	adds	r3, #1
 800ce88:	9308      	str	r3, [sp, #32]
 800ce8a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ce8c:	e7c3      	b.n	800ce16 <_strtod_l+0x152>
 800ce8e:	4355      	muls	r5, r2
 800ce90:	195d      	adds	r5, r3, r5
 800ce92:	e7f6      	b.n	800ce82 <_strtod_l+0x1be>
 800ce94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce96:	1c5a      	adds	r2, r3, #1
 800ce98:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce9a:	9a08      	ldr	r2, [sp, #32]
 800ce9c:	785b      	ldrb	r3, [r3, #1]
 800ce9e:	2a00      	cmp	r2, #0
 800cea0:	d03a      	beq.n	800cf18 <_strtod_l+0x254>
 800cea2:	900c      	str	r0, [sp, #48]	; 0x30
 800cea4:	9205      	str	r2, [sp, #20]
 800cea6:	001a      	movs	r2, r3
 800cea8:	3a30      	subs	r2, #48	; 0x30
 800ceaa:	2a09      	cmp	r2, #9
 800ceac:	d912      	bls.n	800ced4 <_strtod_l+0x210>
 800ceae:	2201      	movs	r2, #1
 800ceb0:	4694      	mov	ip, r2
 800ceb2:	e7c3      	b.n	800ce3c <_strtod_l+0x178>
 800ceb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	1c5a      	adds	r2, r3, #1
 800ceba:	921b      	str	r2, [sp, #108]	; 0x6c
 800cebc:	785b      	ldrb	r3, [r3, #1]
 800cebe:	2b30      	cmp	r3, #48	; 0x30
 800cec0:	d0f8      	beq.n	800ceb4 <_strtod_l+0x1f0>
 800cec2:	001a      	movs	r2, r3
 800cec4:	3a31      	subs	r2, #49	; 0x31
 800cec6:	2a08      	cmp	r2, #8
 800cec8:	d83c      	bhi.n	800cf44 <_strtod_l+0x280>
 800ceca:	900c      	str	r0, [sp, #48]	; 0x30
 800cecc:	2000      	movs	r0, #0
 800cece:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ced0:	9005      	str	r0, [sp, #20]
 800ced2:	9210      	str	r2, [sp, #64]	; 0x40
 800ced4:	001a      	movs	r2, r3
 800ced6:	1c41      	adds	r1, r0, #1
 800ced8:	3a30      	subs	r2, #48	; 0x30
 800ceda:	2b30      	cmp	r3, #48	; 0x30
 800cedc:	d016      	beq.n	800cf0c <_strtod_l+0x248>
 800cede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cee0:	185b      	adds	r3, r3, r1
 800cee2:	930c      	str	r3, [sp, #48]	; 0x30
 800cee4:	9b05      	ldr	r3, [sp, #20]
 800cee6:	210a      	movs	r1, #10
 800cee8:	469c      	mov	ip, r3
 800ceea:	4484      	add	ip, r0
 800ceec:	4563      	cmp	r3, ip
 800ceee:	d115      	bne.n	800cf1c <_strtod_l+0x258>
 800cef0:	9905      	ldr	r1, [sp, #20]
 800cef2:	9b05      	ldr	r3, [sp, #20]
 800cef4:	3101      	adds	r1, #1
 800cef6:	1809      	adds	r1, r1, r0
 800cef8:	181b      	adds	r3, r3, r0
 800cefa:	9105      	str	r1, [sp, #20]
 800cefc:	2b08      	cmp	r3, #8
 800cefe:	dc19      	bgt.n	800cf34 <_strtod_l+0x270>
 800cf00:	230a      	movs	r3, #10
 800cf02:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cf04:	434b      	muls	r3, r1
 800cf06:	2100      	movs	r1, #0
 800cf08:	18d3      	adds	r3, r2, r3
 800cf0a:	930d      	str	r3, [sp, #52]	; 0x34
 800cf0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf0e:	0008      	movs	r0, r1
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf14:	785b      	ldrb	r3, [r3, #1]
 800cf16:	e7c6      	b.n	800cea6 <_strtod_l+0x1e2>
 800cf18:	9808      	ldr	r0, [sp, #32]
 800cf1a:	e7d0      	b.n	800cebe <_strtod_l+0x1fa>
 800cf1c:	1c5c      	adds	r4, r3, #1
 800cf1e:	2b08      	cmp	r3, #8
 800cf20:	dc04      	bgt.n	800cf2c <_strtod_l+0x268>
 800cf22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf24:	434b      	muls	r3, r1
 800cf26:	930d      	str	r3, [sp, #52]	; 0x34
 800cf28:	0023      	movs	r3, r4
 800cf2a:	e7df      	b.n	800ceec <_strtod_l+0x228>
 800cf2c:	2c10      	cmp	r4, #16
 800cf2e:	dcfb      	bgt.n	800cf28 <_strtod_l+0x264>
 800cf30:	434d      	muls	r5, r1
 800cf32:	e7f9      	b.n	800cf28 <_strtod_l+0x264>
 800cf34:	9b05      	ldr	r3, [sp, #20]
 800cf36:	2100      	movs	r1, #0
 800cf38:	2b10      	cmp	r3, #16
 800cf3a:	dce7      	bgt.n	800cf0c <_strtod_l+0x248>
 800cf3c:	230a      	movs	r3, #10
 800cf3e:	435d      	muls	r5, r3
 800cf40:	1955      	adds	r5, r2, r5
 800cf42:	e7e3      	b.n	800cf0c <_strtod_l+0x248>
 800cf44:	2200      	movs	r2, #0
 800cf46:	920c      	str	r2, [sp, #48]	; 0x30
 800cf48:	9205      	str	r2, [sp, #20]
 800cf4a:	3201      	adds	r2, #1
 800cf4c:	e7b0      	b.n	800ceb0 <_strtod_l+0x1ec>
 800cf4e:	2400      	movs	r4, #0
 800cf50:	9b07      	ldr	r3, [sp, #28]
 800cf52:	3302      	adds	r3, #2
 800cf54:	931b      	str	r3, [sp, #108]	; 0x6c
 800cf56:	9b07      	ldr	r3, [sp, #28]
 800cf58:	789b      	ldrb	r3, [r3, #2]
 800cf5a:	001a      	movs	r2, r3
 800cf5c:	3a30      	subs	r2, #48	; 0x30
 800cf5e:	2a09      	cmp	r2, #9
 800cf60:	d914      	bls.n	800cf8c <_strtod_l+0x2c8>
 800cf62:	9a07      	ldr	r2, [sp, #28]
 800cf64:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf66:	2200      	movs	r2, #0
 800cf68:	e033      	b.n	800cfd2 <_strtod_l+0x30e>
 800cf6a:	46c0      	nop			; (mov r8, r8)
 800cf6c:	080139c8 	.word	0x080139c8
 800cf70:	7ff00000 	.word	0x7ff00000
 800cf74:	ffefffff 	.word	0xffefffff
 800cf78:	00000433 	.word	0x00000433
 800cf7c:	7fffffff 	.word	0x7fffffff
 800cf80:	080139c4 	.word	0x080139c4
 800cf84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf86:	1c5a      	adds	r2, r3, #1
 800cf88:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf8a:	785b      	ldrb	r3, [r3, #1]
 800cf8c:	2b30      	cmp	r3, #48	; 0x30
 800cf8e:	d0f9      	beq.n	800cf84 <_strtod_l+0x2c0>
 800cf90:	2200      	movs	r2, #0
 800cf92:	9206      	str	r2, [sp, #24]
 800cf94:	001a      	movs	r2, r3
 800cf96:	3a31      	subs	r2, #49	; 0x31
 800cf98:	2a08      	cmp	r2, #8
 800cf9a:	d81b      	bhi.n	800cfd4 <_strtod_l+0x310>
 800cf9c:	3b30      	subs	r3, #48	; 0x30
 800cf9e:	930e      	str	r3, [sp, #56]	; 0x38
 800cfa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfa2:	9306      	str	r3, [sp, #24]
 800cfa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfa6:	1c59      	adds	r1, r3, #1
 800cfa8:	911b      	str	r1, [sp, #108]	; 0x6c
 800cfaa:	785b      	ldrb	r3, [r3, #1]
 800cfac:	001a      	movs	r2, r3
 800cfae:	3a30      	subs	r2, #48	; 0x30
 800cfb0:	2a09      	cmp	r2, #9
 800cfb2:	d93a      	bls.n	800d02a <_strtod_l+0x366>
 800cfb4:	9a06      	ldr	r2, [sp, #24]
 800cfb6:	1a8a      	subs	r2, r1, r2
 800cfb8:	49b2      	ldr	r1, [pc, #712]	; (800d284 <_strtod_l+0x5c0>)
 800cfba:	9106      	str	r1, [sp, #24]
 800cfbc:	2a08      	cmp	r2, #8
 800cfbe:	dc04      	bgt.n	800cfca <_strtod_l+0x306>
 800cfc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfc2:	9206      	str	r2, [sp, #24]
 800cfc4:	428a      	cmp	r2, r1
 800cfc6:	dd00      	ble.n	800cfca <_strtod_l+0x306>
 800cfc8:	9106      	str	r1, [sp, #24]
 800cfca:	2c00      	cmp	r4, #0
 800cfcc:	d002      	beq.n	800cfd4 <_strtod_l+0x310>
 800cfce:	9a06      	ldr	r2, [sp, #24]
 800cfd0:	4252      	negs	r2, r2
 800cfd2:	9206      	str	r2, [sp, #24]
 800cfd4:	9a05      	ldr	r2, [sp, #20]
 800cfd6:	2a00      	cmp	r2, #0
 800cfd8:	d14d      	bne.n	800d076 <_strtod_l+0x3b2>
 800cfda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfdc:	4310      	orrs	r0, r2
 800cfde:	d000      	beq.n	800cfe2 <_strtod_l+0x31e>
 800cfe0:	e6ab      	b.n	800cd3a <_strtod_l+0x76>
 800cfe2:	4662      	mov	r2, ip
 800cfe4:	2a00      	cmp	r2, #0
 800cfe6:	d000      	beq.n	800cfea <_strtod_l+0x326>
 800cfe8:	e6c5      	b.n	800cd76 <_strtod_l+0xb2>
 800cfea:	2b69      	cmp	r3, #105	; 0x69
 800cfec:	d027      	beq.n	800d03e <_strtod_l+0x37a>
 800cfee:	dc23      	bgt.n	800d038 <_strtod_l+0x374>
 800cff0:	2b49      	cmp	r3, #73	; 0x49
 800cff2:	d024      	beq.n	800d03e <_strtod_l+0x37a>
 800cff4:	2b4e      	cmp	r3, #78	; 0x4e
 800cff6:	d000      	beq.n	800cffa <_strtod_l+0x336>
 800cff8:	e6bd      	b.n	800cd76 <_strtod_l+0xb2>
 800cffa:	49a3      	ldr	r1, [pc, #652]	; (800d288 <_strtod_l+0x5c4>)
 800cffc:	a81b      	add	r0, sp, #108	; 0x6c
 800cffe:	f003 f88d 	bl	801011c <__match>
 800d002:	2800      	cmp	r0, #0
 800d004:	d100      	bne.n	800d008 <_strtod_l+0x344>
 800d006:	e6b6      	b.n	800cd76 <_strtod_l+0xb2>
 800d008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2b28      	cmp	r3, #40	; 0x28
 800d00e:	d12c      	bne.n	800d06a <_strtod_l+0x3a6>
 800d010:	499e      	ldr	r1, [pc, #632]	; (800d28c <_strtod_l+0x5c8>)
 800d012:	aa1e      	add	r2, sp, #120	; 0x78
 800d014:	a81b      	add	r0, sp, #108	; 0x6c
 800d016:	f003 f895 	bl	8010144 <__hexnan>
 800d01a:	2805      	cmp	r0, #5
 800d01c:	d125      	bne.n	800d06a <_strtod_l+0x3a6>
 800d01e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d020:	4a9b      	ldr	r2, [pc, #620]	; (800d290 <_strtod_l+0x5cc>)
 800d022:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d024:	431a      	orrs	r2, r3
 800d026:	0017      	movs	r7, r2
 800d028:	e687      	b.n	800cd3a <_strtod_l+0x76>
 800d02a:	220a      	movs	r2, #10
 800d02c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d02e:	434a      	muls	r2, r1
 800d030:	18d2      	adds	r2, r2, r3
 800d032:	3a30      	subs	r2, #48	; 0x30
 800d034:	920e      	str	r2, [sp, #56]	; 0x38
 800d036:	e7b5      	b.n	800cfa4 <_strtod_l+0x2e0>
 800d038:	2b6e      	cmp	r3, #110	; 0x6e
 800d03a:	d0de      	beq.n	800cffa <_strtod_l+0x336>
 800d03c:	e69b      	b.n	800cd76 <_strtod_l+0xb2>
 800d03e:	4995      	ldr	r1, [pc, #596]	; (800d294 <_strtod_l+0x5d0>)
 800d040:	a81b      	add	r0, sp, #108	; 0x6c
 800d042:	f003 f86b 	bl	801011c <__match>
 800d046:	2800      	cmp	r0, #0
 800d048:	d100      	bne.n	800d04c <_strtod_l+0x388>
 800d04a:	e694      	b.n	800cd76 <_strtod_l+0xb2>
 800d04c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d04e:	4992      	ldr	r1, [pc, #584]	; (800d298 <_strtod_l+0x5d4>)
 800d050:	3b01      	subs	r3, #1
 800d052:	a81b      	add	r0, sp, #108	; 0x6c
 800d054:	931b      	str	r3, [sp, #108]	; 0x6c
 800d056:	f003 f861 	bl	801011c <__match>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d102      	bne.n	800d064 <_strtod_l+0x3a0>
 800d05e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d060:	3301      	adds	r3, #1
 800d062:	931b      	str	r3, [sp, #108]	; 0x6c
 800d064:	2600      	movs	r6, #0
 800d066:	4f8a      	ldr	r7, [pc, #552]	; (800d290 <_strtod_l+0x5cc>)
 800d068:	e667      	b.n	800cd3a <_strtod_l+0x76>
 800d06a:	488c      	ldr	r0, [pc, #560]	; (800d29c <_strtod_l+0x5d8>)
 800d06c:	f001 fea6 	bl	800edbc <nan>
 800d070:	0006      	movs	r6, r0
 800d072:	000f      	movs	r7, r1
 800d074:	e661      	b.n	800cd3a <_strtod_l+0x76>
 800d076:	9b06      	ldr	r3, [sp, #24]
 800d078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d07a:	1a9b      	subs	r3, r3, r2
 800d07c:	9309      	str	r3, [sp, #36]	; 0x24
 800d07e:	9b08      	ldr	r3, [sp, #32]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d101      	bne.n	800d088 <_strtod_l+0x3c4>
 800d084:	9b05      	ldr	r3, [sp, #20]
 800d086:	9308      	str	r3, [sp, #32]
 800d088:	9c05      	ldr	r4, [sp, #20]
 800d08a:	2c10      	cmp	r4, #16
 800d08c:	dd00      	ble.n	800d090 <_strtod_l+0x3cc>
 800d08e:	2410      	movs	r4, #16
 800d090:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d092:	f7f5 ffe7 	bl	8003064 <__aeabi_ui2d>
 800d096:	9b05      	ldr	r3, [sp, #20]
 800d098:	0006      	movs	r6, r0
 800d09a:	000f      	movs	r7, r1
 800d09c:	2b09      	cmp	r3, #9
 800d09e:	dd15      	ble.n	800d0cc <_strtod_l+0x408>
 800d0a0:	0022      	movs	r2, r4
 800d0a2:	4b7f      	ldr	r3, [pc, #508]	; (800d2a0 <_strtod_l+0x5dc>)
 800d0a4:	3a09      	subs	r2, #9
 800d0a6:	00d2      	lsls	r2, r2, #3
 800d0a8:	189b      	adds	r3, r3, r2
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f7f5 f911 	bl	80022d4 <__aeabi_dmul>
 800d0b2:	0006      	movs	r6, r0
 800d0b4:	0028      	movs	r0, r5
 800d0b6:	000f      	movs	r7, r1
 800d0b8:	f7f5 ffd4 	bl	8003064 <__aeabi_ui2d>
 800d0bc:	0002      	movs	r2, r0
 800d0be:	000b      	movs	r3, r1
 800d0c0:	0030      	movs	r0, r6
 800d0c2:	0039      	movs	r1, r7
 800d0c4:	f7f4 f9ac 	bl	8001420 <__aeabi_dadd>
 800d0c8:	0006      	movs	r6, r0
 800d0ca:	000f      	movs	r7, r1
 800d0cc:	9b05      	ldr	r3, [sp, #20]
 800d0ce:	2b0f      	cmp	r3, #15
 800d0d0:	dc39      	bgt.n	800d146 <_strtod_l+0x482>
 800d0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d100      	bne.n	800d0da <_strtod_l+0x416>
 800d0d8:	e62f      	b.n	800cd3a <_strtod_l+0x76>
 800d0da:	dd24      	ble.n	800d126 <_strtod_l+0x462>
 800d0dc:	2b16      	cmp	r3, #22
 800d0de:	dc09      	bgt.n	800d0f4 <_strtod_l+0x430>
 800d0e0:	496f      	ldr	r1, [pc, #444]	; (800d2a0 <_strtod_l+0x5dc>)
 800d0e2:	00db      	lsls	r3, r3, #3
 800d0e4:	18c9      	adds	r1, r1, r3
 800d0e6:	0032      	movs	r2, r6
 800d0e8:	6808      	ldr	r0, [r1, #0]
 800d0ea:	6849      	ldr	r1, [r1, #4]
 800d0ec:	003b      	movs	r3, r7
 800d0ee:	f7f5 f8f1 	bl	80022d4 <__aeabi_dmul>
 800d0f2:	e7bd      	b.n	800d070 <_strtod_l+0x3ac>
 800d0f4:	2325      	movs	r3, #37	; 0x25
 800d0f6:	9a05      	ldr	r2, [sp, #20]
 800d0f8:	1a9b      	subs	r3, r3, r2
 800d0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	db22      	blt.n	800d146 <_strtod_l+0x482>
 800d100:	240f      	movs	r4, #15
 800d102:	9b05      	ldr	r3, [sp, #20]
 800d104:	4d66      	ldr	r5, [pc, #408]	; (800d2a0 <_strtod_l+0x5dc>)
 800d106:	1ae4      	subs	r4, r4, r3
 800d108:	00e1      	lsls	r1, r4, #3
 800d10a:	1869      	adds	r1, r5, r1
 800d10c:	0032      	movs	r2, r6
 800d10e:	6808      	ldr	r0, [r1, #0]
 800d110:	6849      	ldr	r1, [r1, #4]
 800d112:	003b      	movs	r3, r7
 800d114:	f7f5 f8de 	bl	80022d4 <__aeabi_dmul>
 800d118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11a:	1b1c      	subs	r4, r3, r4
 800d11c:	00e4      	lsls	r4, r4, #3
 800d11e:	192d      	adds	r5, r5, r4
 800d120:	682a      	ldr	r2, [r5, #0]
 800d122:	686b      	ldr	r3, [r5, #4]
 800d124:	e7e3      	b.n	800d0ee <_strtod_l+0x42a>
 800d126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d128:	3316      	adds	r3, #22
 800d12a:	db0c      	blt.n	800d146 <_strtod_l+0x482>
 800d12c:	9906      	ldr	r1, [sp, #24]
 800d12e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d130:	4b5b      	ldr	r3, [pc, #364]	; (800d2a0 <_strtod_l+0x5dc>)
 800d132:	1a52      	subs	r2, r2, r1
 800d134:	00d2      	lsls	r2, r2, #3
 800d136:	189b      	adds	r3, r3, r2
 800d138:	0030      	movs	r0, r6
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	0039      	movs	r1, r7
 800d140:	f7f4 fcce 	bl	8001ae0 <__aeabi_ddiv>
 800d144:	e794      	b.n	800d070 <_strtod_l+0x3ac>
 800d146:	9b05      	ldr	r3, [sp, #20]
 800d148:	1b1c      	subs	r4, r3, r4
 800d14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d14c:	18e4      	adds	r4, r4, r3
 800d14e:	2c00      	cmp	r4, #0
 800d150:	dd72      	ble.n	800d238 <_strtod_l+0x574>
 800d152:	220f      	movs	r2, #15
 800d154:	0023      	movs	r3, r4
 800d156:	4013      	ands	r3, r2
 800d158:	4214      	tst	r4, r2
 800d15a:	d00a      	beq.n	800d172 <_strtod_l+0x4ae>
 800d15c:	4950      	ldr	r1, [pc, #320]	; (800d2a0 <_strtod_l+0x5dc>)
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	18c9      	adds	r1, r1, r3
 800d162:	0032      	movs	r2, r6
 800d164:	6808      	ldr	r0, [r1, #0]
 800d166:	6849      	ldr	r1, [r1, #4]
 800d168:	003b      	movs	r3, r7
 800d16a:	f7f5 f8b3 	bl	80022d4 <__aeabi_dmul>
 800d16e:	0006      	movs	r6, r0
 800d170:	000f      	movs	r7, r1
 800d172:	230f      	movs	r3, #15
 800d174:	439c      	bics	r4, r3
 800d176:	d04a      	beq.n	800d20e <_strtod_l+0x54a>
 800d178:	3326      	adds	r3, #38	; 0x26
 800d17a:	33ff      	adds	r3, #255	; 0xff
 800d17c:	429c      	cmp	r4, r3
 800d17e:	dd22      	ble.n	800d1c6 <_strtod_l+0x502>
 800d180:	2300      	movs	r3, #0
 800d182:	9305      	str	r3, [sp, #20]
 800d184:	9306      	str	r3, [sp, #24]
 800d186:	930d      	str	r3, [sp, #52]	; 0x34
 800d188:	9308      	str	r3, [sp, #32]
 800d18a:	2322      	movs	r3, #34	; 0x22
 800d18c:	2600      	movs	r6, #0
 800d18e:	9a04      	ldr	r2, [sp, #16]
 800d190:	4f3f      	ldr	r7, [pc, #252]	; (800d290 <_strtod_l+0x5cc>)
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d196:	42b3      	cmp	r3, r6
 800d198:	d100      	bne.n	800d19c <_strtod_l+0x4d8>
 800d19a:	e5ce      	b.n	800cd3a <_strtod_l+0x76>
 800d19c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d19e:	9804      	ldr	r0, [sp, #16]
 800d1a0:	f003 f8ce 	bl	8010340 <_Bfree>
 800d1a4:	9908      	ldr	r1, [sp, #32]
 800d1a6:	9804      	ldr	r0, [sp, #16]
 800d1a8:	f003 f8ca 	bl	8010340 <_Bfree>
 800d1ac:	9906      	ldr	r1, [sp, #24]
 800d1ae:	9804      	ldr	r0, [sp, #16]
 800d1b0:	f003 f8c6 	bl	8010340 <_Bfree>
 800d1b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d1b6:	9804      	ldr	r0, [sp, #16]
 800d1b8:	f003 f8c2 	bl	8010340 <_Bfree>
 800d1bc:	9905      	ldr	r1, [sp, #20]
 800d1be:	9804      	ldr	r0, [sp, #16]
 800d1c0:	f003 f8be 	bl	8010340 <_Bfree>
 800d1c4:	e5b9      	b.n	800cd3a <_strtod_l+0x76>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	0030      	movs	r0, r6
 800d1ca:	0039      	movs	r1, r7
 800d1cc:	4d35      	ldr	r5, [pc, #212]	; (800d2a4 <_strtod_l+0x5e0>)
 800d1ce:	1124      	asrs	r4, r4, #4
 800d1d0:	9307      	str	r3, [sp, #28]
 800d1d2:	2c01      	cmp	r4, #1
 800d1d4:	dc1e      	bgt.n	800d214 <_strtod_l+0x550>
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d001      	beq.n	800d1de <_strtod_l+0x51a>
 800d1da:	0006      	movs	r6, r0
 800d1dc:	000f      	movs	r7, r1
 800d1de:	4b32      	ldr	r3, [pc, #200]	; (800d2a8 <_strtod_l+0x5e4>)
 800d1e0:	9a07      	ldr	r2, [sp, #28]
 800d1e2:	18ff      	adds	r7, r7, r3
 800d1e4:	4b2f      	ldr	r3, [pc, #188]	; (800d2a4 <_strtod_l+0x5e0>)
 800d1e6:	00d2      	lsls	r2, r2, #3
 800d1e8:	189d      	adds	r5, r3, r2
 800d1ea:	6828      	ldr	r0, [r5, #0]
 800d1ec:	6869      	ldr	r1, [r5, #4]
 800d1ee:	0032      	movs	r2, r6
 800d1f0:	003b      	movs	r3, r7
 800d1f2:	f7f5 f86f 	bl	80022d4 <__aeabi_dmul>
 800d1f6:	4b26      	ldr	r3, [pc, #152]	; (800d290 <_strtod_l+0x5cc>)
 800d1f8:	4a2c      	ldr	r2, [pc, #176]	; (800d2ac <_strtod_l+0x5e8>)
 800d1fa:	0006      	movs	r6, r0
 800d1fc:	400b      	ands	r3, r1
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d8be      	bhi.n	800d180 <_strtod_l+0x4bc>
 800d202:	4a2b      	ldr	r2, [pc, #172]	; (800d2b0 <_strtod_l+0x5ec>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d913      	bls.n	800d230 <_strtod_l+0x56c>
 800d208:	2601      	movs	r6, #1
 800d20a:	4f2a      	ldr	r7, [pc, #168]	; (800d2b4 <_strtod_l+0x5f0>)
 800d20c:	4276      	negs	r6, r6
 800d20e:	2300      	movs	r3, #0
 800d210:	9307      	str	r3, [sp, #28]
 800d212:	e088      	b.n	800d326 <_strtod_l+0x662>
 800d214:	2201      	movs	r2, #1
 800d216:	4214      	tst	r4, r2
 800d218:	d004      	beq.n	800d224 <_strtod_l+0x560>
 800d21a:	682a      	ldr	r2, [r5, #0]
 800d21c:	686b      	ldr	r3, [r5, #4]
 800d21e:	f7f5 f859 	bl	80022d4 <__aeabi_dmul>
 800d222:	2301      	movs	r3, #1
 800d224:	9a07      	ldr	r2, [sp, #28]
 800d226:	1064      	asrs	r4, r4, #1
 800d228:	3201      	adds	r2, #1
 800d22a:	9207      	str	r2, [sp, #28]
 800d22c:	3508      	adds	r5, #8
 800d22e:	e7d0      	b.n	800d1d2 <_strtod_l+0x50e>
 800d230:	23d4      	movs	r3, #212	; 0xd4
 800d232:	049b      	lsls	r3, r3, #18
 800d234:	18cf      	adds	r7, r1, r3
 800d236:	e7ea      	b.n	800d20e <_strtod_l+0x54a>
 800d238:	2c00      	cmp	r4, #0
 800d23a:	d0e8      	beq.n	800d20e <_strtod_l+0x54a>
 800d23c:	4264      	negs	r4, r4
 800d23e:	230f      	movs	r3, #15
 800d240:	0022      	movs	r2, r4
 800d242:	401a      	ands	r2, r3
 800d244:	421c      	tst	r4, r3
 800d246:	d00a      	beq.n	800d25e <_strtod_l+0x59a>
 800d248:	4b15      	ldr	r3, [pc, #84]	; (800d2a0 <_strtod_l+0x5dc>)
 800d24a:	00d2      	lsls	r2, r2, #3
 800d24c:	189b      	adds	r3, r3, r2
 800d24e:	0030      	movs	r0, r6
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	0039      	movs	r1, r7
 800d256:	f7f4 fc43 	bl	8001ae0 <__aeabi_ddiv>
 800d25a:	0006      	movs	r6, r0
 800d25c:	000f      	movs	r7, r1
 800d25e:	1124      	asrs	r4, r4, #4
 800d260:	d0d5      	beq.n	800d20e <_strtod_l+0x54a>
 800d262:	2c1f      	cmp	r4, #31
 800d264:	dd28      	ble.n	800d2b8 <_strtod_l+0x5f4>
 800d266:	2300      	movs	r3, #0
 800d268:	9305      	str	r3, [sp, #20]
 800d26a:	9306      	str	r3, [sp, #24]
 800d26c:	930d      	str	r3, [sp, #52]	; 0x34
 800d26e:	9308      	str	r3, [sp, #32]
 800d270:	2322      	movs	r3, #34	; 0x22
 800d272:	9a04      	ldr	r2, [sp, #16]
 800d274:	2600      	movs	r6, #0
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d27a:	2700      	movs	r7, #0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d18d      	bne.n	800d19c <_strtod_l+0x4d8>
 800d280:	e55b      	b.n	800cd3a <_strtod_l+0x76>
 800d282:	46c0      	nop			; (mov r8, r8)
 800d284:	00004e1f 	.word	0x00004e1f
 800d288:	08013b26 	.word	0x08013b26
 800d28c:	080139dc 	.word	0x080139dc
 800d290:	7ff00000 	.word	0x7ff00000
 800d294:	08013b1e 	.word	0x08013b1e
 800d298:	08013c0a 	.word	0x08013c0a
 800d29c:	08013c06 	.word	0x08013c06
 800d2a0:	08013d60 	.word	0x08013d60
 800d2a4:	08013d38 	.word	0x08013d38
 800d2a8:	fcb00000 	.word	0xfcb00000
 800d2ac:	7ca00000 	.word	0x7ca00000
 800d2b0:	7c900000 	.word	0x7c900000
 800d2b4:	7fefffff 	.word	0x7fefffff
 800d2b8:	2310      	movs	r3, #16
 800d2ba:	0022      	movs	r2, r4
 800d2bc:	401a      	ands	r2, r3
 800d2be:	9207      	str	r2, [sp, #28]
 800d2c0:	421c      	tst	r4, r3
 800d2c2:	d001      	beq.n	800d2c8 <_strtod_l+0x604>
 800d2c4:	335a      	adds	r3, #90	; 0x5a
 800d2c6:	9307      	str	r3, [sp, #28]
 800d2c8:	0030      	movs	r0, r6
 800d2ca:	0039      	movs	r1, r7
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	4dc4      	ldr	r5, [pc, #784]	; (800d5e0 <_strtod_l+0x91c>)
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	4214      	tst	r4, r2
 800d2d4:	d004      	beq.n	800d2e0 <_strtod_l+0x61c>
 800d2d6:	682a      	ldr	r2, [r5, #0]
 800d2d8:	686b      	ldr	r3, [r5, #4]
 800d2da:	f7f4 fffb 	bl	80022d4 <__aeabi_dmul>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	1064      	asrs	r4, r4, #1
 800d2e2:	3508      	adds	r5, #8
 800d2e4:	2c00      	cmp	r4, #0
 800d2e6:	d1f3      	bne.n	800d2d0 <_strtod_l+0x60c>
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d001      	beq.n	800d2f0 <_strtod_l+0x62c>
 800d2ec:	0006      	movs	r6, r0
 800d2ee:	000f      	movs	r7, r1
 800d2f0:	9b07      	ldr	r3, [sp, #28]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00f      	beq.n	800d316 <_strtod_l+0x652>
 800d2f6:	236b      	movs	r3, #107	; 0x6b
 800d2f8:	007a      	lsls	r2, r7, #1
 800d2fa:	0d52      	lsrs	r2, r2, #21
 800d2fc:	0039      	movs	r1, r7
 800d2fe:	1a9b      	subs	r3, r3, r2
 800d300:	2b00      	cmp	r3, #0
 800d302:	dd08      	ble.n	800d316 <_strtod_l+0x652>
 800d304:	2b1f      	cmp	r3, #31
 800d306:	dc00      	bgt.n	800d30a <_strtod_l+0x646>
 800d308:	e121      	b.n	800d54e <_strtod_l+0x88a>
 800d30a:	2600      	movs	r6, #0
 800d30c:	2b34      	cmp	r3, #52	; 0x34
 800d30e:	dc00      	bgt.n	800d312 <_strtod_l+0x64e>
 800d310:	e116      	b.n	800d540 <_strtod_l+0x87c>
 800d312:	27dc      	movs	r7, #220	; 0xdc
 800d314:	04bf      	lsls	r7, r7, #18
 800d316:	2200      	movs	r2, #0
 800d318:	2300      	movs	r3, #0
 800d31a:	0030      	movs	r0, r6
 800d31c:	0039      	movs	r1, r7
 800d31e:	f7f3 f895 	bl	800044c <__aeabi_dcmpeq>
 800d322:	2800      	cmp	r0, #0
 800d324:	d19f      	bne.n	800d266 <_strtod_l+0x5a2>
 800d326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d328:	9a08      	ldr	r2, [sp, #32]
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d32e:	9b05      	ldr	r3, [sp, #20]
 800d330:	9804      	ldr	r0, [sp, #16]
 800d332:	f003 f86d 	bl	8010410 <__s2b>
 800d336:	900d      	str	r0, [sp, #52]	; 0x34
 800d338:	2800      	cmp	r0, #0
 800d33a:	d100      	bne.n	800d33e <_strtod_l+0x67a>
 800d33c:	e720      	b.n	800d180 <_strtod_l+0x4bc>
 800d33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d340:	9906      	ldr	r1, [sp, #24]
 800d342:	17da      	asrs	r2, r3, #31
 800d344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d346:	1a5b      	subs	r3, r3, r1
 800d348:	401a      	ands	r2, r3
 800d34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d34c:	9215      	str	r2, [sp, #84]	; 0x54
 800d34e:	43db      	mvns	r3, r3
 800d350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d352:	17db      	asrs	r3, r3, #31
 800d354:	401a      	ands	r2, r3
 800d356:	2300      	movs	r3, #0
 800d358:	9218      	str	r2, [sp, #96]	; 0x60
 800d35a:	9305      	str	r3, [sp, #20]
 800d35c:	9306      	str	r3, [sp, #24]
 800d35e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d360:	9804      	ldr	r0, [sp, #16]
 800d362:	6859      	ldr	r1, [r3, #4]
 800d364:	f002 ffa8 	bl	80102b8 <_Balloc>
 800d368:	9008      	str	r0, [sp, #32]
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d100      	bne.n	800d370 <_strtod_l+0x6ac>
 800d36e:	e70c      	b.n	800d18a <_strtod_l+0x4c6>
 800d370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d372:	300c      	adds	r0, #12
 800d374:	0019      	movs	r1, r3
 800d376:	691a      	ldr	r2, [r3, #16]
 800d378:	310c      	adds	r1, #12
 800d37a:	3202      	adds	r2, #2
 800d37c:	0092      	lsls	r2, r2, #2
 800d37e:	f001 fd13 	bl	800eda8 <memcpy>
 800d382:	ab1e      	add	r3, sp, #120	; 0x78
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	ab1d      	add	r3, sp, #116	; 0x74
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	0032      	movs	r2, r6
 800d38c:	003b      	movs	r3, r7
 800d38e:	9804      	ldr	r0, [sp, #16]
 800d390:	9610      	str	r6, [sp, #64]	; 0x40
 800d392:	9711      	str	r7, [sp, #68]	; 0x44
 800d394:	f003 fb7e 	bl	8010a94 <__d2b>
 800d398:	901c      	str	r0, [sp, #112]	; 0x70
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d100      	bne.n	800d3a0 <_strtod_l+0x6dc>
 800d39e:	e6f4      	b.n	800d18a <_strtod_l+0x4c6>
 800d3a0:	2101      	movs	r1, #1
 800d3a2:	9804      	ldr	r0, [sp, #16]
 800d3a4:	f003 f8c8 	bl	8010538 <__i2b>
 800d3a8:	9006      	str	r0, [sp, #24]
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d100      	bne.n	800d3b0 <_strtod_l+0x6ec>
 800d3ae:	e6ec      	b.n	800d18a <_strtod_l+0x4c6>
 800d3b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d3b6:	1ad4      	subs	r4, r2, r3
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	db01      	blt.n	800d3c0 <_strtod_l+0x6fc>
 800d3bc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d3be:	195d      	adds	r5, r3, r5
 800d3c0:	9907      	ldr	r1, [sp, #28]
 800d3c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d3c4:	1a5b      	subs	r3, r3, r1
 800d3c6:	2136      	movs	r1, #54	; 0x36
 800d3c8:	189b      	adds	r3, r3, r2
 800d3ca:	1a8a      	subs	r2, r1, r2
 800d3cc:	4985      	ldr	r1, [pc, #532]	; (800d5e4 <_strtod_l+0x920>)
 800d3ce:	2001      	movs	r0, #1
 800d3d0:	468c      	mov	ip, r1
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	9114      	str	r1, [sp, #80]	; 0x50
 800d3d8:	9012      	str	r0, [sp, #72]	; 0x48
 800d3da:	4563      	cmp	r3, ip
 800d3dc:	da07      	bge.n	800d3ee <_strtod_l+0x72a>
 800d3de:	4661      	mov	r1, ip
 800d3e0:	1ac9      	subs	r1, r1, r3
 800d3e2:	1a52      	subs	r2, r2, r1
 800d3e4:	291f      	cmp	r1, #31
 800d3e6:	dd00      	ble.n	800d3ea <_strtod_l+0x726>
 800d3e8:	e0b6      	b.n	800d558 <_strtod_l+0x894>
 800d3ea:	4088      	lsls	r0, r1
 800d3ec:	9012      	str	r0, [sp, #72]	; 0x48
 800d3ee:	18ab      	adds	r3, r5, r2
 800d3f0:	930c      	str	r3, [sp, #48]	; 0x30
 800d3f2:	18a4      	adds	r4, r4, r2
 800d3f4:	9b07      	ldr	r3, [sp, #28]
 800d3f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3f8:	191c      	adds	r4, r3, r4
 800d3fa:	002b      	movs	r3, r5
 800d3fc:	4295      	cmp	r5, r2
 800d3fe:	dd00      	ble.n	800d402 <_strtod_l+0x73e>
 800d400:	0013      	movs	r3, r2
 800d402:	42a3      	cmp	r3, r4
 800d404:	dd00      	ble.n	800d408 <_strtod_l+0x744>
 800d406:	0023      	movs	r3, r4
 800d408:	2b00      	cmp	r3, #0
 800d40a:	dd04      	ble.n	800d416 <_strtod_l+0x752>
 800d40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d40e:	1ae4      	subs	r4, r4, r3
 800d410:	1ad2      	subs	r2, r2, r3
 800d412:	920c      	str	r2, [sp, #48]	; 0x30
 800d414:	1aed      	subs	r5, r5, r3
 800d416:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d418:	2b00      	cmp	r3, #0
 800d41a:	dd17      	ble.n	800d44c <_strtod_l+0x788>
 800d41c:	001a      	movs	r2, r3
 800d41e:	9906      	ldr	r1, [sp, #24]
 800d420:	9804      	ldr	r0, [sp, #16]
 800d422:	f003 f951 	bl	80106c8 <__pow5mult>
 800d426:	9006      	str	r0, [sp, #24]
 800d428:	2800      	cmp	r0, #0
 800d42a:	d100      	bne.n	800d42e <_strtod_l+0x76a>
 800d42c:	e6ad      	b.n	800d18a <_strtod_l+0x4c6>
 800d42e:	0001      	movs	r1, r0
 800d430:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d432:	9804      	ldr	r0, [sp, #16]
 800d434:	f003 f898 	bl	8010568 <__multiply>
 800d438:	900e      	str	r0, [sp, #56]	; 0x38
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d100      	bne.n	800d440 <_strtod_l+0x77c>
 800d43e:	e6a4      	b.n	800d18a <_strtod_l+0x4c6>
 800d440:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d442:	9804      	ldr	r0, [sp, #16]
 800d444:	f002 ff7c 	bl	8010340 <_Bfree>
 800d448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d44a:	931c      	str	r3, [sp, #112]	; 0x70
 800d44c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d44e:	2b00      	cmp	r3, #0
 800d450:	dd00      	ble.n	800d454 <_strtod_l+0x790>
 800d452:	e087      	b.n	800d564 <_strtod_l+0x8a0>
 800d454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d456:	2b00      	cmp	r3, #0
 800d458:	dd08      	ble.n	800d46c <_strtod_l+0x7a8>
 800d45a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d45c:	9908      	ldr	r1, [sp, #32]
 800d45e:	9804      	ldr	r0, [sp, #16]
 800d460:	f003 f932 	bl	80106c8 <__pow5mult>
 800d464:	9008      	str	r0, [sp, #32]
 800d466:	2800      	cmp	r0, #0
 800d468:	d100      	bne.n	800d46c <_strtod_l+0x7a8>
 800d46a:	e68e      	b.n	800d18a <_strtod_l+0x4c6>
 800d46c:	2c00      	cmp	r4, #0
 800d46e:	dd08      	ble.n	800d482 <_strtod_l+0x7be>
 800d470:	0022      	movs	r2, r4
 800d472:	9908      	ldr	r1, [sp, #32]
 800d474:	9804      	ldr	r0, [sp, #16]
 800d476:	f003 f983 	bl	8010780 <__lshift>
 800d47a:	9008      	str	r0, [sp, #32]
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d100      	bne.n	800d482 <_strtod_l+0x7be>
 800d480:	e683      	b.n	800d18a <_strtod_l+0x4c6>
 800d482:	2d00      	cmp	r5, #0
 800d484:	dd08      	ble.n	800d498 <_strtod_l+0x7d4>
 800d486:	002a      	movs	r2, r5
 800d488:	9906      	ldr	r1, [sp, #24]
 800d48a:	9804      	ldr	r0, [sp, #16]
 800d48c:	f003 f978 	bl	8010780 <__lshift>
 800d490:	9006      	str	r0, [sp, #24]
 800d492:	2800      	cmp	r0, #0
 800d494:	d100      	bne.n	800d498 <_strtod_l+0x7d4>
 800d496:	e678      	b.n	800d18a <_strtod_l+0x4c6>
 800d498:	9a08      	ldr	r2, [sp, #32]
 800d49a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d49c:	9804      	ldr	r0, [sp, #16]
 800d49e:	f003 f9f9 	bl	8010894 <__mdiff>
 800d4a2:	9005      	str	r0, [sp, #20]
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d100      	bne.n	800d4aa <_strtod_l+0x7e6>
 800d4a8:	e66f      	b.n	800d18a <_strtod_l+0x4c6>
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	68c3      	ldr	r3, [r0, #12]
 800d4ae:	9906      	ldr	r1, [sp, #24]
 800d4b0:	60c2      	str	r2, [r0, #12]
 800d4b2:	930c      	str	r3, [sp, #48]	; 0x30
 800d4b4:	f003 f9d2 	bl	801085c <__mcmp>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	da5d      	bge.n	800d578 <_strtod_l+0x8b4>
 800d4bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4be:	4333      	orrs	r3, r6
 800d4c0:	d000      	beq.n	800d4c4 <_strtod_l+0x800>
 800d4c2:	e088      	b.n	800d5d6 <_strtod_l+0x912>
 800d4c4:	033b      	lsls	r3, r7, #12
 800d4c6:	d000      	beq.n	800d4ca <_strtod_l+0x806>
 800d4c8:	e085      	b.n	800d5d6 <_strtod_l+0x912>
 800d4ca:	22d6      	movs	r2, #214	; 0xd6
 800d4cc:	4b46      	ldr	r3, [pc, #280]	; (800d5e8 <_strtod_l+0x924>)
 800d4ce:	04d2      	lsls	r2, r2, #19
 800d4d0:	403b      	ands	r3, r7
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d97f      	bls.n	800d5d6 <_strtod_l+0x912>
 800d4d6:	9b05      	ldr	r3, [sp, #20]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d103      	bne.n	800d4e6 <_strtod_l+0x822>
 800d4de:	9b05      	ldr	r3, [sp, #20]
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	dd77      	ble.n	800d5d6 <_strtod_l+0x912>
 800d4e6:	9905      	ldr	r1, [sp, #20]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	9804      	ldr	r0, [sp, #16]
 800d4ec:	f003 f948 	bl	8010780 <__lshift>
 800d4f0:	9906      	ldr	r1, [sp, #24]
 800d4f2:	9005      	str	r0, [sp, #20]
 800d4f4:	f003 f9b2 	bl	801085c <__mcmp>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	dd6c      	ble.n	800d5d6 <_strtod_l+0x912>
 800d4fc:	9907      	ldr	r1, [sp, #28]
 800d4fe:	003b      	movs	r3, r7
 800d500:	4a39      	ldr	r2, [pc, #228]	; (800d5e8 <_strtod_l+0x924>)
 800d502:	2900      	cmp	r1, #0
 800d504:	d100      	bne.n	800d508 <_strtod_l+0x844>
 800d506:	e094      	b.n	800d632 <_strtod_l+0x96e>
 800d508:	0011      	movs	r1, r2
 800d50a:	20d6      	movs	r0, #214	; 0xd6
 800d50c:	4039      	ands	r1, r7
 800d50e:	04c0      	lsls	r0, r0, #19
 800d510:	4281      	cmp	r1, r0
 800d512:	dd00      	ble.n	800d516 <_strtod_l+0x852>
 800d514:	e08d      	b.n	800d632 <_strtod_l+0x96e>
 800d516:	23dc      	movs	r3, #220	; 0xdc
 800d518:	049b      	lsls	r3, r3, #18
 800d51a:	4299      	cmp	r1, r3
 800d51c:	dc00      	bgt.n	800d520 <_strtod_l+0x85c>
 800d51e:	e6a7      	b.n	800d270 <_strtod_l+0x5ac>
 800d520:	0030      	movs	r0, r6
 800d522:	0039      	movs	r1, r7
 800d524:	4b31      	ldr	r3, [pc, #196]	; (800d5ec <_strtod_l+0x928>)
 800d526:	2200      	movs	r2, #0
 800d528:	f7f4 fed4 	bl	80022d4 <__aeabi_dmul>
 800d52c:	4b2e      	ldr	r3, [pc, #184]	; (800d5e8 <_strtod_l+0x924>)
 800d52e:	0006      	movs	r6, r0
 800d530:	000f      	movs	r7, r1
 800d532:	420b      	tst	r3, r1
 800d534:	d000      	beq.n	800d538 <_strtod_l+0x874>
 800d536:	e631      	b.n	800d19c <_strtod_l+0x4d8>
 800d538:	2322      	movs	r3, #34	; 0x22
 800d53a:	9a04      	ldr	r2, [sp, #16]
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	e62d      	b.n	800d19c <_strtod_l+0x4d8>
 800d540:	234b      	movs	r3, #75	; 0x4b
 800d542:	1a9a      	subs	r2, r3, r2
 800d544:	3b4c      	subs	r3, #76	; 0x4c
 800d546:	4093      	lsls	r3, r2
 800d548:	4019      	ands	r1, r3
 800d54a:	000f      	movs	r7, r1
 800d54c:	e6e3      	b.n	800d316 <_strtod_l+0x652>
 800d54e:	2201      	movs	r2, #1
 800d550:	4252      	negs	r2, r2
 800d552:	409a      	lsls	r2, r3
 800d554:	4016      	ands	r6, r2
 800d556:	e6de      	b.n	800d316 <_strtod_l+0x652>
 800d558:	4925      	ldr	r1, [pc, #148]	; (800d5f0 <_strtod_l+0x92c>)
 800d55a:	1acb      	subs	r3, r1, r3
 800d55c:	0001      	movs	r1, r0
 800d55e:	4099      	lsls	r1, r3
 800d560:	9114      	str	r1, [sp, #80]	; 0x50
 800d562:	e743      	b.n	800d3ec <_strtod_l+0x728>
 800d564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d566:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d568:	9804      	ldr	r0, [sp, #16]
 800d56a:	f003 f909 	bl	8010780 <__lshift>
 800d56e:	901c      	str	r0, [sp, #112]	; 0x70
 800d570:	2800      	cmp	r0, #0
 800d572:	d000      	beq.n	800d576 <_strtod_l+0x8b2>
 800d574:	e76e      	b.n	800d454 <_strtod_l+0x790>
 800d576:	e608      	b.n	800d18a <_strtod_l+0x4c6>
 800d578:	970e      	str	r7, [sp, #56]	; 0x38
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d177      	bne.n	800d66e <_strtod_l+0x9aa>
 800d57e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d580:	033b      	lsls	r3, r7, #12
 800d582:	0b1b      	lsrs	r3, r3, #12
 800d584:	2a00      	cmp	r2, #0
 800d586:	d039      	beq.n	800d5fc <_strtod_l+0x938>
 800d588:	4a1a      	ldr	r2, [pc, #104]	; (800d5f4 <_strtod_l+0x930>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d139      	bne.n	800d602 <_strtod_l+0x93e>
 800d58e:	2101      	movs	r1, #1
 800d590:	9b07      	ldr	r3, [sp, #28]
 800d592:	4249      	negs	r1, r1
 800d594:	0032      	movs	r2, r6
 800d596:	0008      	movs	r0, r1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00b      	beq.n	800d5b4 <_strtod_l+0x8f0>
 800d59c:	24d4      	movs	r4, #212	; 0xd4
 800d59e:	4b12      	ldr	r3, [pc, #72]	; (800d5e8 <_strtod_l+0x924>)
 800d5a0:	0008      	movs	r0, r1
 800d5a2:	403b      	ands	r3, r7
 800d5a4:	04e4      	lsls	r4, r4, #19
 800d5a6:	42a3      	cmp	r3, r4
 800d5a8:	d804      	bhi.n	800d5b4 <_strtod_l+0x8f0>
 800d5aa:	306c      	adds	r0, #108	; 0x6c
 800d5ac:	0d1b      	lsrs	r3, r3, #20
 800d5ae:	1ac3      	subs	r3, r0, r3
 800d5b0:	4099      	lsls	r1, r3
 800d5b2:	0008      	movs	r0, r1
 800d5b4:	4282      	cmp	r2, r0
 800d5b6:	d124      	bne.n	800d602 <_strtod_l+0x93e>
 800d5b8:	4b0f      	ldr	r3, [pc, #60]	; (800d5f8 <_strtod_l+0x934>)
 800d5ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d5bc:	4299      	cmp	r1, r3
 800d5be:	d102      	bne.n	800d5c6 <_strtod_l+0x902>
 800d5c0:	3201      	adds	r2, #1
 800d5c2:	d100      	bne.n	800d5c6 <_strtod_l+0x902>
 800d5c4:	e5e1      	b.n	800d18a <_strtod_l+0x4c6>
 800d5c6:	4b08      	ldr	r3, [pc, #32]	; (800d5e8 <_strtod_l+0x924>)
 800d5c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5ca:	2600      	movs	r6, #0
 800d5cc:	401a      	ands	r2, r3
 800d5ce:	0013      	movs	r3, r2
 800d5d0:	2280      	movs	r2, #128	; 0x80
 800d5d2:	0352      	lsls	r2, r2, #13
 800d5d4:	189f      	adds	r7, r3, r2
 800d5d6:	9b07      	ldr	r3, [sp, #28]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1a1      	bne.n	800d520 <_strtod_l+0x85c>
 800d5dc:	e5de      	b.n	800d19c <_strtod_l+0x4d8>
 800d5de:	46c0      	nop			; (mov r8, r8)
 800d5e0:	080139f0 	.word	0x080139f0
 800d5e4:	fffffc02 	.word	0xfffffc02
 800d5e8:	7ff00000 	.word	0x7ff00000
 800d5ec:	39500000 	.word	0x39500000
 800d5f0:	fffffbe2 	.word	0xfffffbe2
 800d5f4:	000fffff 	.word	0x000fffff
 800d5f8:	7fefffff 	.word	0x7fefffff
 800d5fc:	4333      	orrs	r3, r6
 800d5fe:	d100      	bne.n	800d602 <_strtod_l+0x93e>
 800d600:	e77c      	b.n	800d4fc <_strtod_l+0x838>
 800d602:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d604:	2b00      	cmp	r3, #0
 800d606:	d01d      	beq.n	800d644 <_strtod_l+0x980>
 800d608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d60a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d60c:	4213      	tst	r3, r2
 800d60e:	d0e2      	beq.n	800d5d6 <_strtod_l+0x912>
 800d610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d612:	0030      	movs	r0, r6
 800d614:	0039      	movs	r1, r7
 800d616:	9a07      	ldr	r2, [sp, #28]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d017      	beq.n	800d64c <_strtod_l+0x988>
 800d61c:	f7ff fb3a 	bl	800cc94 <sulp>
 800d620:	0002      	movs	r2, r0
 800d622:	000b      	movs	r3, r1
 800d624:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d626:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d628:	f7f3 fefa 	bl	8001420 <__aeabi_dadd>
 800d62c:	0006      	movs	r6, r0
 800d62e:	000f      	movs	r7, r1
 800d630:	e7d1      	b.n	800d5d6 <_strtod_l+0x912>
 800d632:	2601      	movs	r6, #1
 800d634:	4013      	ands	r3, r2
 800d636:	4a98      	ldr	r2, [pc, #608]	; (800d898 <_strtod_l+0xbd4>)
 800d638:	4276      	negs	r6, r6
 800d63a:	189b      	adds	r3, r3, r2
 800d63c:	4a97      	ldr	r2, [pc, #604]	; (800d89c <_strtod_l+0xbd8>)
 800d63e:	431a      	orrs	r2, r3
 800d640:	0017      	movs	r7, r2
 800d642:	e7c8      	b.n	800d5d6 <_strtod_l+0x912>
 800d644:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d646:	4233      	tst	r3, r6
 800d648:	d0c5      	beq.n	800d5d6 <_strtod_l+0x912>
 800d64a:	e7e1      	b.n	800d610 <_strtod_l+0x94c>
 800d64c:	f7ff fb22 	bl	800cc94 <sulp>
 800d650:	0002      	movs	r2, r0
 800d652:	000b      	movs	r3, r1
 800d654:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d656:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d658:	f7f5 f8fe 	bl	8002858 <__aeabi_dsub>
 800d65c:	2200      	movs	r2, #0
 800d65e:	2300      	movs	r3, #0
 800d660:	0006      	movs	r6, r0
 800d662:	000f      	movs	r7, r1
 800d664:	f7f2 fef2 	bl	800044c <__aeabi_dcmpeq>
 800d668:	2800      	cmp	r0, #0
 800d66a:	d0b4      	beq.n	800d5d6 <_strtod_l+0x912>
 800d66c:	e600      	b.n	800d270 <_strtod_l+0x5ac>
 800d66e:	9906      	ldr	r1, [sp, #24]
 800d670:	9805      	ldr	r0, [sp, #20]
 800d672:	f003 fa6f 	bl	8010b54 <__ratio>
 800d676:	2380      	movs	r3, #128	; 0x80
 800d678:	2200      	movs	r2, #0
 800d67a:	05db      	lsls	r3, r3, #23
 800d67c:	0004      	movs	r4, r0
 800d67e:	000d      	movs	r5, r1
 800d680:	f7f2 fef4 	bl	800046c <__aeabi_dcmple>
 800d684:	2800      	cmp	r0, #0
 800d686:	d06d      	beq.n	800d764 <_strtod_l+0xaa0>
 800d688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d000      	beq.n	800d690 <_strtod_l+0x9cc>
 800d68e:	e07e      	b.n	800d78e <_strtod_l+0xaca>
 800d690:	2e00      	cmp	r6, #0
 800d692:	d158      	bne.n	800d746 <_strtod_l+0xa82>
 800d694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d696:	031b      	lsls	r3, r3, #12
 800d698:	d000      	beq.n	800d69c <_strtod_l+0x9d8>
 800d69a:	e07f      	b.n	800d79c <_strtod_l+0xad8>
 800d69c:	2200      	movs	r2, #0
 800d69e:	0020      	movs	r0, r4
 800d6a0:	0029      	movs	r1, r5
 800d6a2:	4b7f      	ldr	r3, [pc, #508]	; (800d8a0 <_strtod_l+0xbdc>)
 800d6a4:	f7f2 fed8 	bl	8000458 <__aeabi_dcmplt>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d158      	bne.n	800d75e <_strtod_l+0xa9a>
 800d6ac:	0020      	movs	r0, r4
 800d6ae:	0029      	movs	r1, r5
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	4b7c      	ldr	r3, [pc, #496]	; (800d8a4 <_strtod_l+0xbe0>)
 800d6b4:	f7f4 fe0e 	bl	80022d4 <__aeabi_dmul>
 800d6b8:	0004      	movs	r4, r0
 800d6ba:	000d      	movs	r5, r1
 800d6bc:	2380      	movs	r3, #128	; 0x80
 800d6be:	061b      	lsls	r3, r3, #24
 800d6c0:	940a      	str	r4, [sp, #40]	; 0x28
 800d6c2:	18eb      	adds	r3, r5, r3
 800d6c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6ca:	9212      	str	r2, [sp, #72]	; 0x48
 800d6cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d6ce:	4a76      	ldr	r2, [pc, #472]	; (800d8a8 <_strtod_l+0xbe4>)
 800d6d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	9314      	str	r3, [sp, #80]	; 0x50
 800d6d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d6d8:	4b74      	ldr	r3, [pc, #464]	; (800d8ac <_strtod_l+0xbe8>)
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d000      	beq.n	800d6e0 <_strtod_l+0xa1c>
 800d6de:	e091      	b.n	800d804 <_strtod_l+0xb40>
 800d6e0:	4a73      	ldr	r2, [pc, #460]	; (800d8b0 <_strtod_l+0xbec>)
 800d6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6e4:	4694      	mov	ip, r2
 800d6e6:	4463      	add	r3, ip
 800d6e8:	001f      	movs	r7, r3
 800d6ea:	0030      	movs	r0, r6
 800d6ec:	0019      	movs	r1, r3
 800d6ee:	f003 f969 	bl	80109c4 <__ulp>
 800d6f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6f6:	f7f4 fded 	bl	80022d4 <__aeabi_dmul>
 800d6fa:	0032      	movs	r2, r6
 800d6fc:	003b      	movs	r3, r7
 800d6fe:	f7f3 fe8f 	bl	8001420 <__aeabi_dadd>
 800d702:	4a69      	ldr	r2, [pc, #420]	; (800d8a8 <_strtod_l+0xbe4>)
 800d704:	4b6b      	ldr	r3, [pc, #428]	; (800d8b4 <_strtod_l+0xbf0>)
 800d706:	0006      	movs	r6, r0
 800d708:	400a      	ands	r2, r1
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d949      	bls.n	800d7a2 <_strtod_l+0xade>
 800d70e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d710:	4b69      	ldr	r3, [pc, #420]	; (800d8b8 <_strtod_l+0xbf4>)
 800d712:	429a      	cmp	r2, r3
 800d714:	d103      	bne.n	800d71e <_strtod_l+0xa5a>
 800d716:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d718:	3301      	adds	r3, #1
 800d71a:	d100      	bne.n	800d71e <_strtod_l+0xa5a>
 800d71c:	e535      	b.n	800d18a <_strtod_l+0x4c6>
 800d71e:	2601      	movs	r6, #1
 800d720:	4f65      	ldr	r7, [pc, #404]	; (800d8b8 <_strtod_l+0xbf4>)
 800d722:	4276      	negs	r6, r6
 800d724:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d726:	9804      	ldr	r0, [sp, #16]
 800d728:	f002 fe0a 	bl	8010340 <_Bfree>
 800d72c:	9908      	ldr	r1, [sp, #32]
 800d72e:	9804      	ldr	r0, [sp, #16]
 800d730:	f002 fe06 	bl	8010340 <_Bfree>
 800d734:	9906      	ldr	r1, [sp, #24]
 800d736:	9804      	ldr	r0, [sp, #16]
 800d738:	f002 fe02 	bl	8010340 <_Bfree>
 800d73c:	9905      	ldr	r1, [sp, #20]
 800d73e:	9804      	ldr	r0, [sp, #16]
 800d740:	f002 fdfe 	bl	8010340 <_Bfree>
 800d744:	e60b      	b.n	800d35e <_strtod_l+0x69a>
 800d746:	2e01      	cmp	r6, #1
 800d748:	d103      	bne.n	800d752 <_strtod_l+0xa8e>
 800d74a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d100      	bne.n	800d752 <_strtod_l+0xa8e>
 800d750:	e58e      	b.n	800d270 <_strtod_l+0x5ac>
 800d752:	2300      	movs	r3, #0
 800d754:	4c59      	ldr	r4, [pc, #356]	; (800d8bc <_strtod_l+0xbf8>)
 800d756:	930a      	str	r3, [sp, #40]	; 0x28
 800d758:	940b      	str	r4, [sp, #44]	; 0x2c
 800d75a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d75c:	e01c      	b.n	800d798 <_strtod_l+0xad4>
 800d75e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d760:	4d50      	ldr	r5, [pc, #320]	; (800d8a4 <_strtod_l+0xbe0>)
 800d762:	e7ab      	b.n	800d6bc <_strtod_l+0x9f8>
 800d764:	2200      	movs	r2, #0
 800d766:	0020      	movs	r0, r4
 800d768:	0029      	movs	r1, r5
 800d76a:	4b4e      	ldr	r3, [pc, #312]	; (800d8a4 <_strtod_l+0xbe0>)
 800d76c:	f7f4 fdb2 	bl	80022d4 <__aeabi_dmul>
 800d770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d772:	0004      	movs	r4, r0
 800d774:	000b      	movs	r3, r1
 800d776:	000d      	movs	r5, r1
 800d778:	2a00      	cmp	r2, #0
 800d77a:	d104      	bne.n	800d786 <_strtod_l+0xac2>
 800d77c:	2280      	movs	r2, #128	; 0x80
 800d77e:	0612      	lsls	r2, r2, #24
 800d780:	900a      	str	r0, [sp, #40]	; 0x28
 800d782:	188b      	adds	r3, r1, r2
 800d784:	e79e      	b.n	800d6c4 <_strtod_l+0xa00>
 800d786:	0002      	movs	r2, r0
 800d788:	920a      	str	r2, [sp, #40]	; 0x28
 800d78a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d78c:	e79b      	b.n	800d6c6 <_strtod_l+0xa02>
 800d78e:	2300      	movs	r3, #0
 800d790:	4c43      	ldr	r4, [pc, #268]	; (800d8a0 <_strtod_l+0xbdc>)
 800d792:	930a      	str	r3, [sp, #40]	; 0x28
 800d794:	940b      	str	r4, [sp, #44]	; 0x2c
 800d796:	2400      	movs	r4, #0
 800d798:	4d41      	ldr	r5, [pc, #260]	; (800d8a0 <_strtod_l+0xbdc>)
 800d79a:	e794      	b.n	800d6c6 <_strtod_l+0xa02>
 800d79c:	2300      	movs	r3, #0
 800d79e:	4c47      	ldr	r4, [pc, #284]	; (800d8bc <_strtod_l+0xbf8>)
 800d7a0:	e7f7      	b.n	800d792 <_strtod_l+0xace>
 800d7a2:	23d4      	movs	r3, #212	; 0xd4
 800d7a4:	049b      	lsls	r3, r3, #18
 800d7a6:	18cf      	adds	r7, r1, r3
 800d7a8:	9b07      	ldr	r3, [sp, #28]
 800d7aa:	970e      	str	r7, [sp, #56]	; 0x38
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1b9      	bne.n	800d724 <_strtod_l+0xa60>
 800d7b0:	4b3d      	ldr	r3, [pc, #244]	; (800d8a8 <_strtod_l+0xbe4>)
 800d7b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d7b4:	403b      	ands	r3, r7
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d1b4      	bne.n	800d724 <_strtod_l+0xa60>
 800d7ba:	0020      	movs	r0, r4
 800d7bc:	0029      	movs	r1, r5
 800d7be:	f7f2 fecb 	bl	8000558 <__aeabi_d2lz>
 800d7c2:	f7f2 ff05 	bl	80005d0 <__aeabi_l2d>
 800d7c6:	0002      	movs	r2, r0
 800d7c8:	000b      	movs	r3, r1
 800d7ca:	0020      	movs	r0, r4
 800d7cc:	0029      	movs	r1, r5
 800d7ce:	f7f5 f843 	bl	8002858 <__aeabi_dsub>
 800d7d2:	033b      	lsls	r3, r7, #12
 800d7d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7d6:	0b1b      	lsrs	r3, r3, #12
 800d7d8:	4333      	orrs	r3, r6
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	0004      	movs	r4, r0
 800d7de:	000d      	movs	r5, r1
 800d7e0:	4a37      	ldr	r2, [pc, #220]	; (800d8c0 <_strtod_l+0xbfc>)
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d054      	beq.n	800d890 <_strtod_l+0xbcc>
 800d7e6:	4b37      	ldr	r3, [pc, #220]	; (800d8c4 <_strtod_l+0xc00>)
 800d7e8:	f7f2 fe36 	bl	8000458 <__aeabi_dcmplt>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d000      	beq.n	800d7f2 <_strtod_l+0xb2e>
 800d7f0:	e4d4      	b.n	800d19c <_strtod_l+0x4d8>
 800d7f2:	0020      	movs	r0, r4
 800d7f4:	0029      	movs	r1, r5
 800d7f6:	4a34      	ldr	r2, [pc, #208]	; (800d8c8 <_strtod_l+0xc04>)
 800d7f8:	4b2a      	ldr	r3, [pc, #168]	; (800d8a4 <_strtod_l+0xbe0>)
 800d7fa:	f7f2 fe41 	bl	8000480 <__aeabi_dcmpgt>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d090      	beq.n	800d724 <_strtod_l+0xa60>
 800d802:	e4cb      	b.n	800d19c <_strtod_l+0x4d8>
 800d804:	9b07      	ldr	r3, [sp, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d02b      	beq.n	800d862 <_strtod_l+0xb9e>
 800d80a:	23d4      	movs	r3, #212	; 0xd4
 800d80c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d80e:	04db      	lsls	r3, r3, #19
 800d810:	429a      	cmp	r2, r3
 800d812:	d826      	bhi.n	800d862 <_strtod_l+0xb9e>
 800d814:	0020      	movs	r0, r4
 800d816:	0029      	movs	r1, r5
 800d818:	4a2c      	ldr	r2, [pc, #176]	; (800d8cc <_strtod_l+0xc08>)
 800d81a:	4b2d      	ldr	r3, [pc, #180]	; (800d8d0 <_strtod_l+0xc0c>)
 800d81c:	f7f2 fe26 	bl	800046c <__aeabi_dcmple>
 800d820:	2800      	cmp	r0, #0
 800d822:	d017      	beq.n	800d854 <_strtod_l+0xb90>
 800d824:	0020      	movs	r0, r4
 800d826:	0029      	movs	r1, r5
 800d828:	f7f2 fe78 	bl	800051c <__aeabi_d2uiz>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d100      	bne.n	800d832 <_strtod_l+0xb6e>
 800d830:	3001      	adds	r0, #1
 800d832:	f7f5 fc17 	bl	8003064 <__aeabi_ui2d>
 800d836:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d838:	0004      	movs	r4, r0
 800d83a:	000b      	movs	r3, r1
 800d83c:	000d      	movs	r5, r1
 800d83e:	2a00      	cmp	r2, #0
 800d840:	d122      	bne.n	800d888 <_strtod_l+0xbc4>
 800d842:	2280      	movs	r2, #128	; 0x80
 800d844:	0612      	lsls	r2, r2, #24
 800d846:	188b      	adds	r3, r1, r2
 800d848:	9016      	str	r0, [sp, #88]	; 0x58
 800d84a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d84c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d84e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d850:	9212      	str	r2, [sp, #72]	; 0x48
 800d852:	9313      	str	r3, [sp, #76]	; 0x4c
 800d854:	22d6      	movs	r2, #214	; 0xd6
 800d856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d858:	04d2      	lsls	r2, r2, #19
 800d85a:	189b      	adds	r3, r3, r2
 800d85c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d85e:	1a9b      	subs	r3, r3, r2
 800d860:	9313      	str	r3, [sp, #76]	; 0x4c
 800d862:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d864:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d866:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d868:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d86a:	f003 f8ab 	bl	80109c4 <__ulp>
 800d86e:	0002      	movs	r2, r0
 800d870:	000b      	movs	r3, r1
 800d872:	0030      	movs	r0, r6
 800d874:	0039      	movs	r1, r7
 800d876:	f7f4 fd2d 	bl	80022d4 <__aeabi_dmul>
 800d87a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d87c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d87e:	f7f3 fdcf 	bl	8001420 <__aeabi_dadd>
 800d882:	0006      	movs	r6, r0
 800d884:	000f      	movs	r7, r1
 800d886:	e78f      	b.n	800d7a8 <_strtod_l+0xae4>
 800d888:	0002      	movs	r2, r0
 800d88a:	9216      	str	r2, [sp, #88]	; 0x58
 800d88c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d88e:	e7dd      	b.n	800d84c <_strtod_l+0xb88>
 800d890:	4b10      	ldr	r3, [pc, #64]	; (800d8d4 <_strtod_l+0xc10>)
 800d892:	f7f2 fde1 	bl	8000458 <__aeabi_dcmplt>
 800d896:	e7b2      	b.n	800d7fe <_strtod_l+0xb3a>
 800d898:	fff00000 	.word	0xfff00000
 800d89c:	000fffff 	.word	0x000fffff
 800d8a0:	3ff00000 	.word	0x3ff00000
 800d8a4:	3fe00000 	.word	0x3fe00000
 800d8a8:	7ff00000 	.word	0x7ff00000
 800d8ac:	7fe00000 	.word	0x7fe00000
 800d8b0:	fcb00000 	.word	0xfcb00000
 800d8b4:	7c9fffff 	.word	0x7c9fffff
 800d8b8:	7fefffff 	.word	0x7fefffff
 800d8bc:	bff00000 	.word	0xbff00000
 800d8c0:	94a03595 	.word	0x94a03595
 800d8c4:	3fdfffff 	.word	0x3fdfffff
 800d8c8:	35afe535 	.word	0x35afe535
 800d8cc:	ffc00000 	.word	0xffc00000
 800d8d0:	41dfffff 	.word	0x41dfffff
 800d8d4:	3fcfffff 	.word	0x3fcfffff

0800d8d8 <_strtod_r>:
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	4b02      	ldr	r3, [pc, #8]	; (800d8e4 <_strtod_r+0xc>)
 800d8dc:	f7ff f9f2 	bl	800ccc4 <_strtod_l>
 800d8e0:	bd10      	pop	{r4, pc}
 800d8e2:	46c0      	nop			; (mov r8, r8)
 800d8e4:	20000138 	.word	0x20000138

0800d8e8 <strtod>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	4c04      	ldr	r4, [pc, #16]	; (800d8fc <strtod+0x14>)
 800d8ec:	000a      	movs	r2, r1
 800d8ee:	0001      	movs	r1, r0
 800d8f0:	4b03      	ldr	r3, [pc, #12]	; (800d900 <strtod+0x18>)
 800d8f2:	6820      	ldr	r0, [r4, #0]
 800d8f4:	f7ff f9e6 	bl	800ccc4 <_strtod_l>
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	46c0      	nop			; (mov r8, r8)
 800d8fc:	200002f0 	.word	0x200002f0
 800d900:	20000138 	.word	0x20000138

0800d904 <_strtol_l.constprop.0>:
 800d904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d906:	b087      	sub	sp, #28
 800d908:	001e      	movs	r6, r3
 800d90a:	9005      	str	r0, [sp, #20]
 800d90c:	9101      	str	r1, [sp, #4]
 800d90e:	9202      	str	r2, [sp, #8]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d048      	beq.n	800d9a6 <_strtol_l.constprop.0+0xa2>
 800d914:	000b      	movs	r3, r1
 800d916:	2e24      	cmp	r6, #36	; 0x24
 800d918:	d845      	bhi.n	800d9a6 <_strtol_l.constprop.0+0xa2>
 800d91a:	4a3b      	ldr	r2, [pc, #236]	; (800da08 <_strtol_l.constprop.0+0x104>)
 800d91c:	2108      	movs	r1, #8
 800d91e:	4694      	mov	ip, r2
 800d920:	001a      	movs	r2, r3
 800d922:	4660      	mov	r0, ip
 800d924:	7814      	ldrb	r4, [r2, #0]
 800d926:	3301      	adds	r3, #1
 800d928:	5d00      	ldrb	r0, [r0, r4]
 800d92a:	001d      	movs	r5, r3
 800d92c:	0007      	movs	r7, r0
 800d92e:	400f      	ands	r7, r1
 800d930:	4208      	tst	r0, r1
 800d932:	d1f5      	bne.n	800d920 <_strtol_l.constprop.0+0x1c>
 800d934:	2c2d      	cmp	r4, #45	; 0x2d
 800d936:	d13d      	bne.n	800d9b4 <_strtol_l.constprop.0+0xb0>
 800d938:	2701      	movs	r7, #1
 800d93a:	781c      	ldrb	r4, [r3, #0]
 800d93c:	1c95      	adds	r5, r2, #2
 800d93e:	2e00      	cmp	r6, #0
 800d940:	d05e      	beq.n	800da00 <_strtol_l.constprop.0+0xfc>
 800d942:	2e10      	cmp	r6, #16
 800d944:	d109      	bne.n	800d95a <_strtol_l.constprop.0+0x56>
 800d946:	2c30      	cmp	r4, #48	; 0x30
 800d948:	d107      	bne.n	800d95a <_strtol_l.constprop.0+0x56>
 800d94a:	2220      	movs	r2, #32
 800d94c:	782b      	ldrb	r3, [r5, #0]
 800d94e:	4393      	bics	r3, r2
 800d950:	2b58      	cmp	r3, #88	; 0x58
 800d952:	d150      	bne.n	800d9f6 <_strtol_l.constprop.0+0xf2>
 800d954:	2610      	movs	r6, #16
 800d956:	786c      	ldrb	r4, [r5, #1]
 800d958:	3502      	adds	r5, #2
 800d95a:	4b2c      	ldr	r3, [pc, #176]	; (800da0c <_strtol_l.constprop.0+0x108>)
 800d95c:	0031      	movs	r1, r6
 800d95e:	18fb      	adds	r3, r7, r3
 800d960:	0018      	movs	r0, r3
 800d962:	9303      	str	r3, [sp, #12]
 800d964:	f7f2 fc72 	bl	800024c <__aeabi_uidivmod>
 800d968:	2200      	movs	r2, #0
 800d96a:	9104      	str	r1, [sp, #16]
 800d96c:	2101      	movs	r1, #1
 800d96e:	4684      	mov	ip, r0
 800d970:	0010      	movs	r0, r2
 800d972:	4249      	negs	r1, r1
 800d974:	0023      	movs	r3, r4
 800d976:	3b30      	subs	r3, #48	; 0x30
 800d978:	2b09      	cmp	r3, #9
 800d97a:	d903      	bls.n	800d984 <_strtol_l.constprop.0+0x80>
 800d97c:	3b11      	subs	r3, #17
 800d97e:	2b19      	cmp	r3, #25
 800d980:	d81d      	bhi.n	800d9be <_strtol_l.constprop.0+0xba>
 800d982:	330a      	adds	r3, #10
 800d984:	429e      	cmp	r6, r3
 800d986:	dd1e      	ble.n	800d9c6 <_strtol_l.constprop.0+0xc2>
 800d988:	1c54      	adds	r4, r2, #1
 800d98a:	d009      	beq.n	800d9a0 <_strtol_l.constprop.0+0x9c>
 800d98c:	000a      	movs	r2, r1
 800d98e:	4584      	cmp	ip, r0
 800d990:	d306      	bcc.n	800d9a0 <_strtol_l.constprop.0+0x9c>
 800d992:	d102      	bne.n	800d99a <_strtol_l.constprop.0+0x96>
 800d994:	9c04      	ldr	r4, [sp, #16]
 800d996:	429c      	cmp	r4, r3
 800d998:	db02      	blt.n	800d9a0 <_strtol_l.constprop.0+0x9c>
 800d99a:	2201      	movs	r2, #1
 800d99c:	4370      	muls	r0, r6
 800d99e:	1818      	adds	r0, r3, r0
 800d9a0:	782c      	ldrb	r4, [r5, #0]
 800d9a2:	3501      	adds	r5, #1
 800d9a4:	e7e6      	b.n	800d974 <_strtol_l.constprop.0+0x70>
 800d9a6:	f001 f9bf 	bl	800ed28 <__errno>
 800d9aa:	2316      	movs	r3, #22
 800d9ac:	6003      	str	r3, [r0, #0]
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	b007      	add	sp, #28
 800d9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9b4:	2c2b      	cmp	r4, #43	; 0x2b
 800d9b6:	d1c2      	bne.n	800d93e <_strtol_l.constprop.0+0x3a>
 800d9b8:	781c      	ldrb	r4, [r3, #0]
 800d9ba:	1c95      	adds	r5, r2, #2
 800d9bc:	e7bf      	b.n	800d93e <_strtol_l.constprop.0+0x3a>
 800d9be:	0023      	movs	r3, r4
 800d9c0:	3b61      	subs	r3, #97	; 0x61
 800d9c2:	2b19      	cmp	r3, #25
 800d9c4:	d9dd      	bls.n	800d982 <_strtol_l.constprop.0+0x7e>
 800d9c6:	1c53      	adds	r3, r2, #1
 800d9c8:	d109      	bne.n	800d9de <_strtol_l.constprop.0+0xda>
 800d9ca:	2322      	movs	r3, #34	; 0x22
 800d9cc:	9a05      	ldr	r2, [sp, #20]
 800d9ce:	9803      	ldr	r0, [sp, #12]
 800d9d0:	6013      	str	r3, [r2, #0]
 800d9d2:	9b02      	ldr	r3, [sp, #8]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0eb      	beq.n	800d9b0 <_strtol_l.constprop.0+0xac>
 800d9d8:	1e6b      	subs	r3, r5, #1
 800d9da:	9301      	str	r3, [sp, #4]
 800d9dc:	e007      	b.n	800d9ee <_strtol_l.constprop.0+0xea>
 800d9de:	2f00      	cmp	r7, #0
 800d9e0:	d000      	beq.n	800d9e4 <_strtol_l.constprop.0+0xe0>
 800d9e2:	4240      	negs	r0, r0
 800d9e4:	9b02      	ldr	r3, [sp, #8]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d0e2      	beq.n	800d9b0 <_strtol_l.constprop.0+0xac>
 800d9ea:	2a00      	cmp	r2, #0
 800d9ec:	d1f4      	bne.n	800d9d8 <_strtol_l.constprop.0+0xd4>
 800d9ee:	9b02      	ldr	r3, [sp, #8]
 800d9f0:	9a01      	ldr	r2, [sp, #4]
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	e7dc      	b.n	800d9b0 <_strtol_l.constprop.0+0xac>
 800d9f6:	2430      	movs	r4, #48	; 0x30
 800d9f8:	2e00      	cmp	r6, #0
 800d9fa:	d1ae      	bne.n	800d95a <_strtol_l.constprop.0+0x56>
 800d9fc:	3608      	adds	r6, #8
 800d9fe:	e7ac      	b.n	800d95a <_strtol_l.constprop.0+0x56>
 800da00:	2c30      	cmp	r4, #48	; 0x30
 800da02:	d0a2      	beq.n	800d94a <_strtol_l.constprop.0+0x46>
 800da04:	260a      	movs	r6, #10
 800da06:	e7a8      	b.n	800d95a <_strtol_l.constprop.0+0x56>
 800da08:	08013a19 	.word	0x08013a19
 800da0c:	7fffffff 	.word	0x7fffffff

0800da10 <_strtol_r>:
 800da10:	b510      	push	{r4, lr}
 800da12:	f7ff ff77 	bl	800d904 <_strtol_l.constprop.0>
 800da16:	bd10      	pop	{r4, pc}

0800da18 <strtol>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	4c04      	ldr	r4, [pc, #16]	; (800da2c <strtol+0x14>)
 800da1c:	0013      	movs	r3, r2
 800da1e:	000a      	movs	r2, r1
 800da20:	0001      	movs	r1, r0
 800da22:	6820      	ldr	r0, [r4, #0]
 800da24:	f7ff ff6e 	bl	800d904 <_strtol_l.constprop.0>
 800da28:	bd10      	pop	{r4, pc}
 800da2a:	46c0      	nop			; (mov r8, r8)
 800da2c:	200002f0 	.word	0x200002f0

0800da30 <__cvt>:
 800da30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da32:	001e      	movs	r6, r3
 800da34:	2300      	movs	r3, #0
 800da36:	0014      	movs	r4, r2
 800da38:	b08b      	sub	sp, #44	; 0x2c
 800da3a:	429e      	cmp	r6, r3
 800da3c:	da04      	bge.n	800da48 <__cvt+0x18>
 800da3e:	2180      	movs	r1, #128	; 0x80
 800da40:	0609      	lsls	r1, r1, #24
 800da42:	1873      	adds	r3, r6, r1
 800da44:	001e      	movs	r6, r3
 800da46:	232d      	movs	r3, #45	; 0x2d
 800da48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800da4c:	7013      	strb	r3, [r2, #0]
 800da4e:	2320      	movs	r3, #32
 800da50:	2203      	movs	r2, #3
 800da52:	439f      	bics	r7, r3
 800da54:	2f46      	cmp	r7, #70	; 0x46
 800da56:	d007      	beq.n	800da68 <__cvt+0x38>
 800da58:	003b      	movs	r3, r7
 800da5a:	3b45      	subs	r3, #69	; 0x45
 800da5c:	4259      	negs	r1, r3
 800da5e:	414b      	adcs	r3, r1
 800da60:	9910      	ldr	r1, [sp, #64]	; 0x40
 800da62:	3a01      	subs	r2, #1
 800da64:	18cb      	adds	r3, r1, r3
 800da66:	9310      	str	r3, [sp, #64]	; 0x40
 800da68:	ab09      	add	r3, sp, #36	; 0x24
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	ab08      	add	r3, sp, #32
 800da6e:	9303      	str	r3, [sp, #12]
 800da70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da72:	9200      	str	r2, [sp, #0]
 800da74:	9302      	str	r3, [sp, #8]
 800da76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da78:	0022      	movs	r2, r4
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	0033      	movs	r3, r6
 800da7e:	f001 fa55 	bl	800ef2c <_dtoa_r>
 800da82:	0005      	movs	r5, r0
 800da84:	2f47      	cmp	r7, #71	; 0x47
 800da86:	d102      	bne.n	800da8e <__cvt+0x5e>
 800da88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da8a:	07db      	lsls	r3, r3, #31
 800da8c:	d528      	bpl.n	800dae0 <__cvt+0xb0>
 800da8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da90:	18eb      	adds	r3, r5, r3
 800da92:	9307      	str	r3, [sp, #28]
 800da94:	2f46      	cmp	r7, #70	; 0x46
 800da96:	d114      	bne.n	800dac2 <__cvt+0x92>
 800da98:	782b      	ldrb	r3, [r5, #0]
 800da9a:	2b30      	cmp	r3, #48	; 0x30
 800da9c:	d10c      	bne.n	800dab8 <__cvt+0x88>
 800da9e:	2200      	movs	r2, #0
 800daa0:	2300      	movs	r3, #0
 800daa2:	0020      	movs	r0, r4
 800daa4:	0031      	movs	r1, r6
 800daa6:	f7f2 fcd1 	bl	800044c <__aeabi_dcmpeq>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d104      	bne.n	800dab8 <__cvt+0x88>
 800daae:	2301      	movs	r3, #1
 800dab0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dab2:	1a9b      	subs	r3, r3, r2
 800dab4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800daba:	9a07      	ldr	r2, [sp, #28]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	18d3      	adds	r3, r2, r3
 800dac0:	9307      	str	r3, [sp, #28]
 800dac2:	2200      	movs	r2, #0
 800dac4:	2300      	movs	r3, #0
 800dac6:	0020      	movs	r0, r4
 800dac8:	0031      	movs	r1, r6
 800daca:	f7f2 fcbf 	bl	800044c <__aeabi_dcmpeq>
 800dace:	2800      	cmp	r0, #0
 800dad0:	d001      	beq.n	800dad6 <__cvt+0xa6>
 800dad2:	9b07      	ldr	r3, [sp, #28]
 800dad4:	9309      	str	r3, [sp, #36]	; 0x24
 800dad6:	2230      	movs	r2, #48	; 0x30
 800dad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dada:	9907      	ldr	r1, [sp, #28]
 800dadc:	428b      	cmp	r3, r1
 800dade:	d306      	bcc.n	800daee <__cvt+0xbe>
 800dae0:	0028      	movs	r0, r5
 800dae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dae4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dae6:	1b5b      	subs	r3, r3, r5
 800dae8:	6013      	str	r3, [r2, #0]
 800daea:	b00b      	add	sp, #44	; 0x2c
 800daec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daee:	1c59      	adds	r1, r3, #1
 800daf0:	9109      	str	r1, [sp, #36]	; 0x24
 800daf2:	701a      	strb	r2, [r3, #0]
 800daf4:	e7f0      	b.n	800dad8 <__cvt+0xa8>

0800daf6 <__exponent>:
 800daf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf8:	1c83      	adds	r3, r0, #2
 800dafa:	b087      	sub	sp, #28
 800dafc:	9303      	str	r3, [sp, #12]
 800dafe:	0005      	movs	r5, r0
 800db00:	000c      	movs	r4, r1
 800db02:	232b      	movs	r3, #43	; 0x2b
 800db04:	7002      	strb	r2, [r0, #0]
 800db06:	2900      	cmp	r1, #0
 800db08:	da01      	bge.n	800db0e <__exponent+0x18>
 800db0a:	424c      	negs	r4, r1
 800db0c:	3302      	adds	r3, #2
 800db0e:	706b      	strb	r3, [r5, #1]
 800db10:	2c09      	cmp	r4, #9
 800db12:	dd2f      	ble.n	800db74 <__exponent+0x7e>
 800db14:	270a      	movs	r7, #10
 800db16:	ab04      	add	r3, sp, #16
 800db18:	1dde      	adds	r6, r3, #7
 800db1a:	0020      	movs	r0, r4
 800db1c:	0039      	movs	r1, r7
 800db1e:	9601      	str	r6, [sp, #4]
 800db20:	f7f2 fc7e 	bl	8000420 <__aeabi_idivmod>
 800db24:	3e01      	subs	r6, #1
 800db26:	3130      	adds	r1, #48	; 0x30
 800db28:	0020      	movs	r0, r4
 800db2a:	7031      	strb	r1, [r6, #0]
 800db2c:	0039      	movs	r1, r7
 800db2e:	9402      	str	r4, [sp, #8]
 800db30:	f7f2 fb90 	bl	8000254 <__divsi3>
 800db34:	9b02      	ldr	r3, [sp, #8]
 800db36:	0004      	movs	r4, r0
 800db38:	2b63      	cmp	r3, #99	; 0x63
 800db3a:	dcee      	bgt.n	800db1a <__exponent+0x24>
 800db3c:	9b01      	ldr	r3, [sp, #4]
 800db3e:	3430      	adds	r4, #48	; 0x30
 800db40:	1e9a      	subs	r2, r3, #2
 800db42:	0013      	movs	r3, r2
 800db44:	9903      	ldr	r1, [sp, #12]
 800db46:	7014      	strb	r4, [r2, #0]
 800db48:	a804      	add	r0, sp, #16
 800db4a:	3007      	adds	r0, #7
 800db4c:	4298      	cmp	r0, r3
 800db4e:	d80c      	bhi.n	800db6a <__exponent+0x74>
 800db50:	2300      	movs	r3, #0
 800db52:	4282      	cmp	r2, r0
 800db54:	d804      	bhi.n	800db60 <__exponent+0x6a>
 800db56:	aa04      	add	r2, sp, #16
 800db58:	3309      	adds	r3, #9
 800db5a:	189b      	adds	r3, r3, r2
 800db5c:	9a01      	ldr	r2, [sp, #4]
 800db5e:	1a9b      	subs	r3, r3, r2
 800db60:	9a03      	ldr	r2, [sp, #12]
 800db62:	18d3      	adds	r3, r2, r3
 800db64:	1b58      	subs	r0, r3, r5
 800db66:	b007      	add	sp, #28
 800db68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db6a:	7818      	ldrb	r0, [r3, #0]
 800db6c:	3301      	adds	r3, #1
 800db6e:	7008      	strb	r0, [r1, #0]
 800db70:	3101      	adds	r1, #1
 800db72:	e7e9      	b.n	800db48 <__exponent+0x52>
 800db74:	2330      	movs	r3, #48	; 0x30
 800db76:	3430      	adds	r4, #48	; 0x30
 800db78:	70ab      	strb	r3, [r5, #2]
 800db7a:	70ec      	strb	r4, [r5, #3]
 800db7c:	1d2b      	adds	r3, r5, #4
 800db7e:	e7f1      	b.n	800db64 <__exponent+0x6e>

0800db80 <_printf_float>:
 800db80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db82:	b095      	sub	sp, #84	; 0x54
 800db84:	000c      	movs	r4, r1
 800db86:	9208      	str	r2, [sp, #32]
 800db88:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800db8a:	9309      	str	r3, [sp, #36]	; 0x24
 800db8c:	0007      	movs	r7, r0
 800db8e:	f001 f809 	bl	800eba4 <_localeconv_r>
 800db92:	6803      	ldr	r3, [r0, #0]
 800db94:	0018      	movs	r0, r3
 800db96:	930c      	str	r3, [sp, #48]	; 0x30
 800db98:	f7f2 fab6 	bl	8000108 <strlen>
 800db9c:	2300      	movs	r3, #0
 800db9e:	9312      	str	r3, [sp, #72]	; 0x48
 800dba0:	7e23      	ldrb	r3, [r4, #24]
 800dba2:	2207      	movs	r2, #7
 800dba4:	930a      	str	r3, [sp, #40]	; 0x28
 800dba6:	6823      	ldr	r3, [r4, #0]
 800dba8:	900d      	str	r0, [sp, #52]	; 0x34
 800dbaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbae:	682b      	ldr	r3, [r5, #0]
 800dbb0:	05c9      	lsls	r1, r1, #23
 800dbb2:	d547      	bpl.n	800dc44 <_printf_float+0xc4>
 800dbb4:	189b      	adds	r3, r3, r2
 800dbb6:	4393      	bics	r3, r2
 800dbb8:	001a      	movs	r2, r3
 800dbba:	3208      	adds	r2, #8
 800dbbc:	602a      	str	r2, [r5, #0]
 800dbbe:	681e      	ldr	r6, [r3, #0]
 800dbc0:	685d      	ldr	r5, [r3, #4]
 800dbc2:	0032      	movs	r2, r6
 800dbc4:	002b      	movs	r3, r5
 800dbc6:	64a2      	str	r2, [r4, #72]	; 0x48
 800dbc8:	64e3      	str	r3, [r4, #76]	; 0x4c
 800dbca:	2201      	movs	r2, #1
 800dbcc:	006b      	lsls	r3, r5, #1
 800dbce:	085b      	lsrs	r3, r3, #1
 800dbd0:	930e      	str	r3, [sp, #56]	; 0x38
 800dbd2:	0030      	movs	r0, r6
 800dbd4:	4bab      	ldr	r3, [pc, #684]	; (800de84 <_printf_float+0x304>)
 800dbd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dbd8:	4252      	negs	r2, r2
 800dbda:	f7f5 f9bf 	bl	8002f5c <__aeabi_dcmpun>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d132      	bne.n	800dc48 <_printf_float+0xc8>
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	0030      	movs	r0, r6
 800dbe6:	4ba7      	ldr	r3, [pc, #668]	; (800de84 <_printf_float+0x304>)
 800dbe8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dbea:	4252      	negs	r2, r2
 800dbec:	f7f2 fc3e 	bl	800046c <__aeabi_dcmple>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d129      	bne.n	800dc48 <_printf_float+0xc8>
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	0030      	movs	r0, r6
 800dbfa:	0029      	movs	r1, r5
 800dbfc:	f7f2 fc2c 	bl	8000458 <__aeabi_dcmplt>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d003      	beq.n	800dc0c <_printf_float+0x8c>
 800dc04:	0023      	movs	r3, r4
 800dc06:	222d      	movs	r2, #45	; 0x2d
 800dc08:	3343      	adds	r3, #67	; 0x43
 800dc0a:	701a      	strb	r2, [r3, #0]
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc0e:	4d9e      	ldr	r5, [pc, #632]	; (800de88 <_printf_float+0x308>)
 800dc10:	2b47      	cmp	r3, #71	; 0x47
 800dc12:	d900      	bls.n	800dc16 <_printf_float+0x96>
 800dc14:	4d9d      	ldr	r5, [pc, #628]	; (800de8c <_printf_float+0x30c>)
 800dc16:	2303      	movs	r3, #3
 800dc18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc1a:	6123      	str	r3, [r4, #16]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	439a      	bics	r2, r3
 800dc20:	2300      	movs	r3, #0
 800dc22:	6022      	str	r2, [r4, #0]
 800dc24:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc28:	0021      	movs	r1, r4
 800dc2a:	9300      	str	r3, [sp, #0]
 800dc2c:	0038      	movs	r0, r7
 800dc2e:	9b08      	ldr	r3, [sp, #32]
 800dc30:	aa13      	add	r2, sp, #76	; 0x4c
 800dc32:	f000 f9fb 	bl	800e02c <_printf_common>
 800dc36:	3001      	adds	r0, #1
 800dc38:	d000      	beq.n	800dc3c <_printf_float+0xbc>
 800dc3a:	e0a3      	b.n	800dd84 <_printf_float+0x204>
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	4240      	negs	r0, r0
 800dc40:	b015      	add	sp, #84	; 0x54
 800dc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc44:	3307      	adds	r3, #7
 800dc46:	e7b6      	b.n	800dbb6 <_printf_float+0x36>
 800dc48:	0032      	movs	r2, r6
 800dc4a:	002b      	movs	r3, r5
 800dc4c:	0030      	movs	r0, r6
 800dc4e:	0029      	movs	r1, r5
 800dc50:	f7f5 f984 	bl	8002f5c <__aeabi_dcmpun>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d00b      	beq.n	800dc70 <_printf_float+0xf0>
 800dc58:	2d00      	cmp	r5, #0
 800dc5a:	da03      	bge.n	800dc64 <_printf_float+0xe4>
 800dc5c:	0023      	movs	r3, r4
 800dc5e:	222d      	movs	r2, #45	; 0x2d
 800dc60:	3343      	adds	r3, #67	; 0x43
 800dc62:	701a      	strb	r2, [r3, #0]
 800dc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc66:	4d8a      	ldr	r5, [pc, #552]	; (800de90 <_printf_float+0x310>)
 800dc68:	2b47      	cmp	r3, #71	; 0x47
 800dc6a:	d9d4      	bls.n	800dc16 <_printf_float+0x96>
 800dc6c:	4d89      	ldr	r5, [pc, #548]	; (800de94 <_printf_float+0x314>)
 800dc6e:	e7d2      	b.n	800dc16 <_printf_float+0x96>
 800dc70:	2220      	movs	r2, #32
 800dc72:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dc74:	6863      	ldr	r3, [r4, #4]
 800dc76:	4391      	bics	r1, r2
 800dc78:	910e      	str	r1, [sp, #56]	; 0x38
 800dc7a:	1c5a      	adds	r2, r3, #1
 800dc7c:	d14a      	bne.n	800dd14 <_printf_float+0x194>
 800dc7e:	3307      	adds	r3, #7
 800dc80:	6063      	str	r3, [r4, #4]
 800dc82:	2380      	movs	r3, #128	; 0x80
 800dc84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc86:	00db      	lsls	r3, r3, #3
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	9206      	str	r2, [sp, #24]
 800dc8e:	aa12      	add	r2, sp, #72	; 0x48
 800dc90:	9205      	str	r2, [sp, #20]
 800dc92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc94:	6023      	str	r3, [r4, #0]
 800dc96:	9204      	str	r2, [sp, #16]
 800dc98:	aa11      	add	r2, sp, #68	; 0x44
 800dc9a:	9203      	str	r2, [sp, #12]
 800dc9c:	2223      	movs	r2, #35	; 0x23
 800dc9e:	a908      	add	r1, sp, #32
 800dca0:	9301      	str	r3, [sp, #4]
 800dca2:	6863      	ldr	r3, [r4, #4]
 800dca4:	1852      	adds	r2, r2, r1
 800dca6:	9202      	str	r2, [sp, #8]
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	0032      	movs	r2, r6
 800dcac:	002b      	movs	r3, r5
 800dcae:	0038      	movs	r0, r7
 800dcb0:	f7ff febe 	bl	800da30 <__cvt>
 800dcb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcb6:	0005      	movs	r5, r0
 800dcb8:	2b47      	cmp	r3, #71	; 0x47
 800dcba:	d109      	bne.n	800dcd0 <_printf_float+0x150>
 800dcbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcbe:	1cda      	adds	r2, r3, #3
 800dcc0:	db02      	blt.n	800dcc8 <_printf_float+0x148>
 800dcc2:	6862      	ldr	r2, [r4, #4]
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	dd49      	ble.n	800dd5c <_printf_float+0x1dc>
 800dcc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcca:	3b02      	subs	r3, #2
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	930a      	str	r3, [sp, #40]	; 0x28
 800dcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dcd4:	2b65      	cmp	r3, #101	; 0x65
 800dcd6:	d824      	bhi.n	800dd22 <_printf_float+0x1a2>
 800dcd8:	0020      	movs	r0, r4
 800dcda:	001a      	movs	r2, r3
 800dcdc:	3901      	subs	r1, #1
 800dcde:	3050      	adds	r0, #80	; 0x50
 800dce0:	9111      	str	r1, [sp, #68]	; 0x44
 800dce2:	f7ff ff08 	bl	800daf6 <__exponent>
 800dce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dce8:	900b      	str	r0, [sp, #44]	; 0x2c
 800dcea:	1813      	adds	r3, r2, r0
 800dcec:	6123      	str	r3, [r4, #16]
 800dcee:	2a01      	cmp	r2, #1
 800dcf0:	dc02      	bgt.n	800dcf8 <_printf_float+0x178>
 800dcf2:	6822      	ldr	r2, [r4, #0]
 800dcf4:	07d2      	lsls	r2, r2, #31
 800dcf6:	d501      	bpl.n	800dcfc <_printf_float+0x17c>
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	6123      	str	r3, [r4, #16]
 800dcfc:	2323      	movs	r3, #35	; 0x23
 800dcfe:	aa08      	add	r2, sp, #32
 800dd00:	189b      	adds	r3, r3, r2
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d100      	bne.n	800dd0a <_printf_float+0x18a>
 800dd08:	e78d      	b.n	800dc26 <_printf_float+0xa6>
 800dd0a:	0023      	movs	r3, r4
 800dd0c:	222d      	movs	r2, #45	; 0x2d
 800dd0e:	3343      	adds	r3, #67	; 0x43
 800dd10:	701a      	strb	r2, [r3, #0]
 800dd12:	e788      	b.n	800dc26 <_printf_float+0xa6>
 800dd14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd16:	2a47      	cmp	r2, #71	; 0x47
 800dd18:	d1b3      	bne.n	800dc82 <_printf_float+0x102>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1b1      	bne.n	800dc82 <_printf_float+0x102>
 800dd1e:	3301      	adds	r3, #1
 800dd20:	e7ae      	b.n	800dc80 <_printf_float+0x100>
 800dd22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd24:	2b66      	cmp	r3, #102	; 0x66
 800dd26:	d11b      	bne.n	800dd60 <_printf_float+0x1e0>
 800dd28:	6863      	ldr	r3, [r4, #4]
 800dd2a:	2900      	cmp	r1, #0
 800dd2c:	dd09      	ble.n	800dd42 <_printf_float+0x1c2>
 800dd2e:	6121      	str	r1, [r4, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d102      	bne.n	800dd3a <_printf_float+0x1ba>
 800dd34:	6822      	ldr	r2, [r4, #0]
 800dd36:	07d2      	lsls	r2, r2, #31
 800dd38:	d50b      	bpl.n	800dd52 <_printf_float+0x1d2>
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	185b      	adds	r3, r3, r1
 800dd3e:	6123      	str	r3, [r4, #16]
 800dd40:	e007      	b.n	800dd52 <_printf_float+0x1d2>
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d103      	bne.n	800dd4e <_printf_float+0x1ce>
 800dd46:	2201      	movs	r2, #1
 800dd48:	6821      	ldr	r1, [r4, #0]
 800dd4a:	4211      	tst	r1, r2
 800dd4c:	d000      	beq.n	800dd50 <_printf_float+0x1d0>
 800dd4e:	1c9a      	adds	r2, r3, #2
 800dd50:	6122      	str	r2, [r4, #16]
 800dd52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd54:	65a3      	str	r3, [r4, #88]	; 0x58
 800dd56:	2300      	movs	r3, #0
 800dd58:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd5a:	e7cf      	b.n	800dcfc <_printf_float+0x17c>
 800dd5c:	2367      	movs	r3, #103	; 0x67
 800dd5e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd60:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dd62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd64:	4299      	cmp	r1, r3
 800dd66:	db06      	blt.n	800dd76 <_printf_float+0x1f6>
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	6121      	str	r1, [r4, #16]
 800dd6c:	07db      	lsls	r3, r3, #31
 800dd6e:	d5f0      	bpl.n	800dd52 <_printf_float+0x1d2>
 800dd70:	3101      	adds	r1, #1
 800dd72:	6121      	str	r1, [r4, #16]
 800dd74:	e7ed      	b.n	800dd52 <_printf_float+0x1d2>
 800dd76:	2201      	movs	r2, #1
 800dd78:	2900      	cmp	r1, #0
 800dd7a:	dc01      	bgt.n	800dd80 <_printf_float+0x200>
 800dd7c:	1892      	adds	r2, r2, r2
 800dd7e:	1a52      	subs	r2, r2, r1
 800dd80:	189b      	adds	r3, r3, r2
 800dd82:	e7dc      	b.n	800dd3e <_printf_float+0x1be>
 800dd84:	6822      	ldr	r2, [r4, #0]
 800dd86:	0553      	lsls	r3, r2, #21
 800dd88:	d408      	bmi.n	800dd9c <_printf_float+0x21c>
 800dd8a:	6923      	ldr	r3, [r4, #16]
 800dd8c:	002a      	movs	r2, r5
 800dd8e:	0038      	movs	r0, r7
 800dd90:	9908      	ldr	r1, [sp, #32]
 800dd92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd94:	47a8      	blx	r5
 800dd96:	3001      	adds	r0, #1
 800dd98:	d12a      	bne.n	800ddf0 <_printf_float+0x270>
 800dd9a:	e74f      	b.n	800dc3c <_printf_float+0xbc>
 800dd9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd9e:	2b65      	cmp	r3, #101	; 0x65
 800dda0:	d800      	bhi.n	800dda4 <_printf_float+0x224>
 800dda2:	e0ec      	b.n	800df7e <_printf_float+0x3fe>
 800dda4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dda6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dda8:	2200      	movs	r2, #0
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f7f2 fb4e 	bl	800044c <__aeabi_dcmpeq>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d034      	beq.n	800de1e <_printf_float+0x29e>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	0038      	movs	r0, r7
 800ddb8:	4a37      	ldr	r2, [pc, #220]	; (800de98 <_printf_float+0x318>)
 800ddba:	9908      	ldr	r1, [sp, #32]
 800ddbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ddbe:	47a8      	blx	r5
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d100      	bne.n	800ddc6 <_printf_float+0x246>
 800ddc4:	e73a      	b.n	800dc3c <_printf_float+0xbc>
 800ddc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ddc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	db02      	blt.n	800ddd4 <_printf_float+0x254>
 800ddce:	6823      	ldr	r3, [r4, #0]
 800ddd0:	07db      	lsls	r3, r3, #31
 800ddd2:	d50d      	bpl.n	800ddf0 <_printf_float+0x270>
 800ddd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ddd6:	0038      	movs	r0, r7
 800ddd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dddc:	9908      	ldr	r1, [sp, #32]
 800ddde:	47a8      	blx	r5
 800dde0:	2500      	movs	r5, #0
 800dde2:	3001      	adds	r0, #1
 800dde4:	d100      	bne.n	800dde8 <_printf_float+0x268>
 800dde6:	e729      	b.n	800dc3c <_printf_float+0xbc>
 800dde8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddea:	3b01      	subs	r3, #1
 800ddec:	42ab      	cmp	r3, r5
 800ddee:	dc0a      	bgt.n	800de06 <_printf_float+0x286>
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	079b      	lsls	r3, r3, #30
 800ddf4:	d500      	bpl.n	800ddf8 <_printf_float+0x278>
 800ddf6:	e116      	b.n	800e026 <_printf_float+0x4a6>
 800ddf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ddfa:	68e0      	ldr	r0, [r4, #12]
 800ddfc:	4298      	cmp	r0, r3
 800ddfe:	db00      	blt.n	800de02 <_printf_float+0x282>
 800de00:	e71e      	b.n	800dc40 <_printf_float+0xc0>
 800de02:	0018      	movs	r0, r3
 800de04:	e71c      	b.n	800dc40 <_printf_float+0xc0>
 800de06:	0022      	movs	r2, r4
 800de08:	2301      	movs	r3, #1
 800de0a:	0038      	movs	r0, r7
 800de0c:	9908      	ldr	r1, [sp, #32]
 800de0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800de10:	321a      	adds	r2, #26
 800de12:	47b0      	blx	r6
 800de14:	3001      	adds	r0, #1
 800de16:	d100      	bne.n	800de1a <_printf_float+0x29a>
 800de18:	e710      	b.n	800dc3c <_printf_float+0xbc>
 800de1a:	3501      	adds	r5, #1
 800de1c:	e7e4      	b.n	800dde8 <_printf_float+0x268>
 800de1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de20:	2b00      	cmp	r3, #0
 800de22:	dc3b      	bgt.n	800de9c <_printf_float+0x31c>
 800de24:	2301      	movs	r3, #1
 800de26:	0038      	movs	r0, r7
 800de28:	4a1b      	ldr	r2, [pc, #108]	; (800de98 <_printf_float+0x318>)
 800de2a:	9908      	ldr	r1, [sp, #32]
 800de2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800de2e:	47b0      	blx	r6
 800de30:	3001      	adds	r0, #1
 800de32:	d100      	bne.n	800de36 <_printf_float+0x2b6>
 800de34:	e702      	b.n	800dc3c <_printf_float+0xbc>
 800de36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de3a:	4313      	orrs	r3, r2
 800de3c:	d102      	bne.n	800de44 <_printf_float+0x2c4>
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	07db      	lsls	r3, r3, #31
 800de42:	d5d5      	bpl.n	800ddf0 <_printf_float+0x270>
 800de44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de46:	0038      	movs	r0, r7
 800de48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de4a:	9908      	ldr	r1, [sp, #32]
 800de4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800de4e:	47b0      	blx	r6
 800de50:	2300      	movs	r3, #0
 800de52:	3001      	adds	r0, #1
 800de54:	d100      	bne.n	800de58 <_printf_float+0x2d8>
 800de56:	e6f1      	b.n	800dc3c <_printf_float+0xbc>
 800de58:	930a      	str	r3, [sp, #40]	; 0x28
 800de5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de5e:	425b      	negs	r3, r3
 800de60:	4293      	cmp	r3, r2
 800de62:	dc01      	bgt.n	800de68 <_printf_float+0x2e8>
 800de64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de66:	e791      	b.n	800dd8c <_printf_float+0x20c>
 800de68:	0022      	movs	r2, r4
 800de6a:	2301      	movs	r3, #1
 800de6c:	0038      	movs	r0, r7
 800de6e:	9908      	ldr	r1, [sp, #32]
 800de70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800de72:	321a      	adds	r2, #26
 800de74:	47b0      	blx	r6
 800de76:	3001      	adds	r0, #1
 800de78:	d100      	bne.n	800de7c <_printf_float+0x2fc>
 800de7a:	e6df      	b.n	800dc3c <_printf_float+0xbc>
 800de7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de7e:	3301      	adds	r3, #1
 800de80:	e7ea      	b.n	800de58 <_printf_float+0x2d8>
 800de82:	46c0      	nop			; (mov r8, r8)
 800de84:	7fefffff 	.word	0x7fefffff
 800de88:	08013b19 	.word	0x08013b19
 800de8c:	08013b1d 	.word	0x08013b1d
 800de90:	08013b21 	.word	0x08013b21
 800de94:	08013b25 	.word	0x08013b25
 800de98:	08013b29 	.word	0x08013b29
 800de9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dea0:	920a      	str	r2, [sp, #40]	; 0x28
 800dea2:	429a      	cmp	r2, r3
 800dea4:	dd00      	ble.n	800dea8 <_printf_float+0x328>
 800dea6:	930a      	str	r3, [sp, #40]	; 0x28
 800dea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deaa:	2b00      	cmp	r3, #0
 800deac:	dc3d      	bgt.n	800df2a <_printf_float+0x3aa>
 800deae:	2300      	movs	r3, #0
 800deb0:	930e      	str	r3, [sp, #56]	; 0x38
 800deb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb4:	43db      	mvns	r3, r3
 800deb6:	17db      	asrs	r3, r3, #31
 800deb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800deba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800debc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800debe:	930b      	str	r3, [sp, #44]	; 0x2c
 800dec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dec2:	4013      	ands	r3, r2
 800dec4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dec6:	1ad3      	subs	r3, r2, r3
 800dec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800deca:	4293      	cmp	r3, r2
 800decc:	dc36      	bgt.n	800df3c <_printf_float+0x3bc>
 800dece:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ded0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ded2:	429a      	cmp	r2, r3
 800ded4:	db40      	blt.n	800df58 <_printf_float+0x3d8>
 800ded6:	6823      	ldr	r3, [r4, #0]
 800ded8:	07db      	lsls	r3, r3, #31
 800deda:	d43d      	bmi.n	800df58 <_printf_float+0x3d8>
 800dedc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800dede:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dee2:	1af3      	subs	r3, r6, r3
 800dee4:	1ab6      	subs	r6, r6, r2
 800dee6:	429e      	cmp	r6, r3
 800dee8:	dd00      	ble.n	800deec <_printf_float+0x36c>
 800deea:	001e      	movs	r6, r3
 800deec:	2e00      	cmp	r6, #0
 800deee:	dc3c      	bgt.n	800df6a <_printf_float+0x3ea>
 800def0:	2300      	movs	r3, #0
 800def2:	930a      	str	r3, [sp, #40]	; 0x28
 800def4:	43f3      	mvns	r3, r6
 800def6:	17db      	asrs	r3, r3, #31
 800def8:	930b      	str	r3, [sp, #44]	; 0x2c
 800defa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800defc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800defe:	1a9b      	subs	r3, r3, r2
 800df00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df02:	4032      	ands	r2, r6
 800df04:	1a9b      	subs	r3, r3, r2
 800df06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df08:	4293      	cmp	r3, r2
 800df0a:	dc00      	bgt.n	800df0e <_printf_float+0x38e>
 800df0c:	e770      	b.n	800ddf0 <_printf_float+0x270>
 800df0e:	0022      	movs	r2, r4
 800df10:	2301      	movs	r3, #1
 800df12:	0038      	movs	r0, r7
 800df14:	9908      	ldr	r1, [sp, #32]
 800df16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df18:	321a      	adds	r2, #26
 800df1a:	47a8      	blx	r5
 800df1c:	3001      	adds	r0, #1
 800df1e:	d100      	bne.n	800df22 <_printf_float+0x3a2>
 800df20:	e68c      	b.n	800dc3c <_printf_float+0xbc>
 800df22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df24:	3301      	adds	r3, #1
 800df26:	930a      	str	r3, [sp, #40]	; 0x28
 800df28:	e7e7      	b.n	800defa <_printf_float+0x37a>
 800df2a:	002a      	movs	r2, r5
 800df2c:	0038      	movs	r0, r7
 800df2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df30:	9908      	ldr	r1, [sp, #32]
 800df32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df34:	47b0      	blx	r6
 800df36:	3001      	adds	r0, #1
 800df38:	d1b9      	bne.n	800deae <_printf_float+0x32e>
 800df3a:	e67f      	b.n	800dc3c <_printf_float+0xbc>
 800df3c:	0022      	movs	r2, r4
 800df3e:	2301      	movs	r3, #1
 800df40:	0038      	movs	r0, r7
 800df42:	9908      	ldr	r1, [sp, #32]
 800df44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df46:	321a      	adds	r2, #26
 800df48:	47b0      	blx	r6
 800df4a:	3001      	adds	r0, #1
 800df4c:	d100      	bne.n	800df50 <_printf_float+0x3d0>
 800df4e:	e675      	b.n	800dc3c <_printf_float+0xbc>
 800df50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df52:	3301      	adds	r3, #1
 800df54:	930e      	str	r3, [sp, #56]	; 0x38
 800df56:	e7b0      	b.n	800deba <_printf_float+0x33a>
 800df58:	0038      	movs	r0, r7
 800df5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df5e:	9908      	ldr	r1, [sp, #32]
 800df60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df62:	47b0      	blx	r6
 800df64:	3001      	adds	r0, #1
 800df66:	d1b9      	bne.n	800dedc <_printf_float+0x35c>
 800df68:	e668      	b.n	800dc3c <_printf_float+0xbc>
 800df6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df6c:	0038      	movs	r0, r7
 800df6e:	18ea      	adds	r2, r5, r3
 800df70:	9908      	ldr	r1, [sp, #32]
 800df72:	0033      	movs	r3, r6
 800df74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df76:	47a8      	blx	r5
 800df78:	3001      	adds	r0, #1
 800df7a:	d1b9      	bne.n	800def0 <_printf_float+0x370>
 800df7c:	e65e      	b.n	800dc3c <_printf_float+0xbc>
 800df7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df80:	2b01      	cmp	r3, #1
 800df82:	dc02      	bgt.n	800df8a <_printf_float+0x40a>
 800df84:	2301      	movs	r3, #1
 800df86:	421a      	tst	r2, r3
 800df88:	d03a      	beq.n	800e000 <_printf_float+0x480>
 800df8a:	2301      	movs	r3, #1
 800df8c:	002a      	movs	r2, r5
 800df8e:	0038      	movs	r0, r7
 800df90:	9908      	ldr	r1, [sp, #32]
 800df92:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df94:	47b0      	blx	r6
 800df96:	3001      	adds	r0, #1
 800df98:	d100      	bne.n	800df9c <_printf_float+0x41c>
 800df9a:	e64f      	b.n	800dc3c <_printf_float+0xbc>
 800df9c:	0038      	movs	r0, r7
 800df9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfa2:	9908      	ldr	r1, [sp, #32]
 800dfa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dfa6:	47b0      	blx	r6
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	d100      	bne.n	800dfae <_printf_float+0x42e>
 800dfac:	e646      	b.n	800dc3c <_printf_float+0xbc>
 800dfae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dfb0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dfb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	001e      	movs	r6, r3
 800dfb8:	2300      	movs	r3, #0
 800dfba:	f7f2 fa47 	bl	800044c <__aeabi_dcmpeq>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d11c      	bne.n	800dffc <_printf_float+0x47c>
 800dfc2:	0033      	movs	r3, r6
 800dfc4:	1c6a      	adds	r2, r5, #1
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	0038      	movs	r0, r7
 800dfca:	9908      	ldr	r1, [sp, #32]
 800dfcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dfce:	47a8      	blx	r5
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d10f      	bne.n	800dff4 <_printf_float+0x474>
 800dfd4:	e632      	b.n	800dc3c <_printf_float+0xbc>
 800dfd6:	0022      	movs	r2, r4
 800dfd8:	2301      	movs	r3, #1
 800dfda:	0038      	movs	r0, r7
 800dfdc:	9908      	ldr	r1, [sp, #32]
 800dfde:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dfe0:	321a      	adds	r2, #26
 800dfe2:	47b0      	blx	r6
 800dfe4:	3001      	adds	r0, #1
 800dfe6:	d100      	bne.n	800dfea <_printf_float+0x46a>
 800dfe8:	e628      	b.n	800dc3c <_printf_float+0xbc>
 800dfea:	3501      	adds	r5, #1
 800dfec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfee:	3b01      	subs	r3, #1
 800dff0:	42ab      	cmp	r3, r5
 800dff2:	dcf0      	bgt.n	800dfd6 <_printf_float+0x456>
 800dff4:	0022      	movs	r2, r4
 800dff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dff8:	3250      	adds	r2, #80	; 0x50
 800dffa:	e6c8      	b.n	800dd8e <_printf_float+0x20e>
 800dffc:	2500      	movs	r5, #0
 800dffe:	e7f5      	b.n	800dfec <_printf_float+0x46c>
 800e000:	002a      	movs	r2, r5
 800e002:	e7e1      	b.n	800dfc8 <_printf_float+0x448>
 800e004:	0022      	movs	r2, r4
 800e006:	2301      	movs	r3, #1
 800e008:	0038      	movs	r0, r7
 800e00a:	9908      	ldr	r1, [sp, #32]
 800e00c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e00e:	3219      	adds	r2, #25
 800e010:	47b0      	blx	r6
 800e012:	3001      	adds	r0, #1
 800e014:	d100      	bne.n	800e018 <_printf_float+0x498>
 800e016:	e611      	b.n	800dc3c <_printf_float+0xbc>
 800e018:	3501      	adds	r5, #1
 800e01a:	68e3      	ldr	r3, [r4, #12]
 800e01c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e01e:	1a9b      	subs	r3, r3, r2
 800e020:	42ab      	cmp	r3, r5
 800e022:	dcef      	bgt.n	800e004 <_printf_float+0x484>
 800e024:	e6e8      	b.n	800ddf8 <_printf_float+0x278>
 800e026:	2500      	movs	r5, #0
 800e028:	e7f7      	b.n	800e01a <_printf_float+0x49a>
 800e02a:	46c0      	nop			; (mov r8, r8)

0800e02c <_printf_common>:
 800e02c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e02e:	0016      	movs	r6, r2
 800e030:	9301      	str	r3, [sp, #4]
 800e032:	688a      	ldr	r2, [r1, #8]
 800e034:	690b      	ldr	r3, [r1, #16]
 800e036:	000c      	movs	r4, r1
 800e038:	9000      	str	r0, [sp, #0]
 800e03a:	4293      	cmp	r3, r2
 800e03c:	da00      	bge.n	800e040 <_printf_common+0x14>
 800e03e:	0013      	movs	r3, r2
 800e040:	0022      	movs	r2, r4
 800e042:	6033      	str	r3, [r6, #0]
 800e044:	3243      	adds	r2, #67	; 0x43
 800e046:	7812      	ldrb	r2, [r2, #0]
 800e048:	2a00      	cmp	r2, #0
 800e04a:	d001      	beq.n	800e050 <_printf_common+0x24>
 800e04c:	3301      	adds	r3, #1
 800e04e:	6033      	str	r3, [r6, #0]
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	069b      	lsls	r3, r3, #26
 800e054:	d502      	bpl.n	800e05c <_printf_common+0x30>
 800e056:	6833      	ldr	r3, [r6, #0]
 800e058:	3302      	adds	r3, #2
 800e05a:	6033      	str	r3, [r6, #0]
 800e05c:	6822      	ldr	r2, [r4, #0]
 800e05e:	2306      	movs	r3, #6
 800e060:	0015      	movs	r5, r2
 800e062:	401d      	ands	r5, r3
 800e064:	421a      	tst	r2, r3
 800e066:	d027      	beq.n	800e0b8 <_printf_common+0x8c>
 800e068:	0023      	movs	r3, r4
 800e06a:	3343      	adds	r3, #67	; 0x43
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	1e5a      	subs	r2, r3, #1
 800e070:	4193      	sbcs	r3, r2
 800e072:	6822      	ldr	r2, [r4, #0]
 800e074:	0692      	lsls	r2, r2, #26
 800e076:	d430      	bmi.n	800e0da <_printf_common+0xae>
 800e078:	0022      	movs	r2, r4
 800e07a:	9901      	ldr	r1, [sp, #4]
 800e07c:	9800      	ldr	r0, [sp, #0]
 800e07e:	9d08      	ldr	r5, [sp, #32]
 800e080:	3243      	adds	r2, #67	; 0x43
 800e082:	47a8      	blx	r5
 800e084:	3001      	adds	r0, #1
 800e086:	d025      	beq.n	800e0d4 <_printf_common+0xa8>
 800e088:	2206      	movs	r2, #6
 800e08a:	6823      	ldr	r3, [r4, #0]
 800e08c:	2500      	movs	r5, #0
 800e08e:	4013      	ands	r3, r2
 800e090:	2b04      	cmp	r3, #4
 800e092:	d105      	bne.n	800e0a0 <_printf_common+0x74>
 800e094:	6833      	ldr	r3, [r6, #0]
 800e096:	68e5      	ldr	r5, [r4, #12]
 800e098:	1aed      	subs	r5, r5, r3
 800e09a:	43eb      	mvns	r3, r5
 800e09c:	17db      	asrs	r3, r3, #31
 800e09e:	401d      	ands	r5, r3
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	6922      	ldr	r2, [r4, #16]
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	dd01      	ble.n	800e0ac <_printf_common+0x80>
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	18ed      	adds	r5, r5, r3
 800e0ac:	2600      	movs	r6, #0
 800e0ae:	42b5      	cmp	r5, r6
 800e0b0:	d120      	bne.n	800e0f4 <_printf_common+0xc8>
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	e010      	b.n	800e0d8 <_printf_common+0xac>
 800e0b6:	3501      	adds	r5, #1
 800e0b8:	68e3      	ldr	r3, [r4, #12]
 800e0ba:	6832      	ldr	r2, [r6, #0]
 800e0bc:	1a9b      	subs	r3, r3, r2
 800e0be:	42ab      	cmp	r3, r5
 800e0c0:	ddd2      	ble.n	800e068 <_printf_common+0x3c>
 800e0c2:	0022      	movs	r2, r4
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	9901      	ldr	r1, [sp, #4]
 800e0c8:	9800      	ldr	r0, [sp, #0]
 800e0ca:	9f08      	ldr	r7, [sp, #32]
 800e0cc:	3219      	adds	r2, #25
 800e0ce:	47b8      	blx	r7
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d1f0      	bne.n	800e0b6 <_printf_common+0x8a>
 800e0d4:	2001      	movs	r0, #1
 800e0d6:	4240      	negs	r0, r0
 800e0d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e0da:	2030      	movs	r0, #48	; 0x30
 800e0dc:	18e1      	adds	r1, r4, r3
 800e0de:	3143      	adds	r1, #67	; 0x43
 800e0e0:	7008      	strb	r0, [r1, #0]
 800e0e2:	0021      	movs	r1, r4
 800e0e4:	1c5a      	adds	r2, r3, #1
 800e0e6:	3145      	adds	r1, #69	; 0x45
 800e0e8:	7809      	ldrb	r1, [r1, #0]
 800e0ea:	18a2      	adds	r2, r4, r2
 800e0ec:	3243      	adds	r2, #67	; 0x43
 800e0ee:	3302      	adds	r3, #2
 800e0f0:	7011      	strb	r1, [r2, #0]
 800e0f2:	e7c1      	b.n	800e078 <_printf_common+0x4c>
 800e0f4:	0022      	movs	r2, r4
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	9901      	ldr	r1, [sp, #4]
 800e0fa:	9800      	ldr	r0, [sp, #0]
 800e0fc:	9f08      	ldr	r7, [sp, #32]
 800e0fe:	321a      	adds	r2, #26
 800e100:	47b8      	blx	r7
 800e102:	3001      	adds	r0, #1
 800e104:	d0e6      	beq.n	800e0d4 <_printf_common+0xa8>
 800e106:	3601      	adds	r6, #1
 800e108:	e7d1      	b.n	800e0ae <_printf_common+0x82>
	...

0800e10c <_printf_i>:
 800e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10e:	b08b      	sub	sp, #44	; 0x2c
 800e110:	9206      	str	r2, [sp, #24]
 800e112:	000a      	movs	r2, r1
 800e114:	3243      	adds	r2, #67	; 0x43
 800e116:	9307      	str	r3, [sp, #28]
 800e118:	9005      	str	r0, [sp, #20]
 800e11a:	9204      	str	r2, [sp, #16]
 800e11c:	7e0a      	ldrb	r2, [r1, #24]
 800e11e:	000c      	movs	r4, r1
 800e120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e122:	2a78      	cmp	r2, #120	; 0x78
 800e124:	d809      	bhi.n	800e13a <_printf_i+0x2e>
 800e126:	2a62      	cmp	r2, #98	; 0x62
 800e128:	d80b      	bhi.n	800e142 <_printf_i+0x36>
 800e12a:	2a00      	cmp	r2, #0
 800e12c:	d100      	bne.n	800e130 <_printf_i+0x24>
 800e12e:	e0be      	b.n	800e2ae <_printf_i+0x1a2>
 800e130:	497c      	ldr	r1, [pc, #496]	; (800e324 <_printf_i+0x218>)
 800e132:	9103      	str	r1, [sp, #12]
 800e134:	2a58      	cmp	r2, #88	; 0x58
 800e136:	d100      	bne.n	800e13a <_printf_i+0x2e>
 800e138:	e093      	b.n	800e262 <_printf_i+0x156>
 800e13a:	0026      	movs	r6, r4
 800e13c:	3642      	adds	r6, #66	; 0x42
 800e13e:	7032      	strb	r2, [r6, #0]
 800e140:	e022      	b.n	800e188 <_printf_i+0x7c>
 800e142:	0010      	movs	r0, r2
 800e144:	3863      	subs	r0, #99	; 0x63
 800e146:	2815      	cmp	r0, #21
 800e148:	d8f7      	bhi.n	800e13a <_printf_i+0x2e>
 800e14a:	f7f1 ffef 	bl	800012c <__gnu_thumb1_case_shi>
 800e14e:	0016      	.short	0x0016
 800e150:	fff6001f 	.word	0xfff6001f
 800e154:	fff6fff6 	.word	0xfff6fff6
 800e158:	001ffff6 	.word	0x001ffff6
 800e15c:	fff6fff6 	.word	0xfff6fff6
 800e160:	fff6fff6 	.word	0xfff6fff6
 800e164:	003600a3 	.word	0x003600a3
 800e168:	fff60083 	.word	0xfff60083
 800e16c:	00b4fff6 	.word	0x00b4fff6
 800e170:	0036fff6 	.word	0x0036fff6
 800e174:	fff6fff6 	.word	0xfff6fff6
 800e178:	0087      	.short	0x0087
 800e17a:	0026      	movs	r6, r4
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	3642      	adds	r6, #66	; 0x42
 800e180:	1d11      	adds	r1, r2, #4
 800e182:	6019      	str	r1, [r3, #0]
 800e184:	6813      	ldr	r3, [r2, #0]
 800e186:	7033      	strb	r3, [r6, #0]
 800e188:	2301      	movs	r3, #1
 800e18a:	e0a2      	b.n	800e2d2 <_printf_i+0x1c6>
 800e18c:	6818      	ldr	r0, [r3, #0]
 800e18e:	6809      	ldr	r1, [r1, #0]
 800e190:	1d02      	adds	r2, r0, #4
 800e192:	060d      	lsls	r5, r1, #24
 800e194:	d50b      	bpl.n	800e1ae <_printf_i+0xa2>
 800e196:	6805      	ldr	r5, [r0, #0]
 800e198:	601a      	str	r2, [r3, #0]
 800e19a:	2d00      	cmp	r5, #0
 800e19c:	da03      	bge.n	800e1a6 <_printf_i+0x9a>
 800e19e:	232d      	movs	r3, #45	; 0x2d
 800e1a0:	9a04      	ldr	r2, [sp, #16]
 800e1a2:	426d      	negs	r5, r5
 800e1a4:	7013      	strb	r3, [r2, #0]
 800e1a6:	4b5f      	ldr	r3, [pc, #380]	; (800e324 <_printf_i+0x218>)
 800e1a8:	270a      	movs	r7, #10
 800e1aa:	9303      	str	r3, [sp, #12]
 800e1ac:	e01b      	b.n	800e1e6 <_printf_i+0xda>
 800e1ae:	6805      	ldr	r5, [r0, #0]
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	0649      	lsls	r1, r1, #25
 800e1b4:	d5f1      	bpl.n	800e19a <_printf_i+0x8e>
 800e1b6:	b22d      	sxth	r5, r5
 800e1b8:	e7ef      	b.n	800e19a <_printf_i+0x8e>
 800e1ba:	680d      	ldr	r5, [r1, #0]
 800e1bc:	6819      	ldr	r1, [r3, #0]
 800e1be:	1d08      	adds	r0, r1, #4
 800e1c0:	6018      	str	r0, [r3, #0]
 800e1c2:	062e      	lsls	r6, r5, #24
 800e1c4:	d501      	bpl.n	800e1ca <_printf_i+0xbe>
 800e1c6:	680d      	ldr	r5, [r1, #0]
 800e1c8:	e003      	b.n	800e1d2 <_printf_i+0xc6>
 800e1ca:	066d      	lsls	r5, r5, #25
 800e1cc:	d5fb      	bpl.n	800e1c6 <_printf_i+0xba>
 800e1ce:	680d      	ldr	r5, [r1, #0]
 800e1d0:	b2ad      	uxth	r5, r5
 800e1d2:	4b54      	ldr	r3, [pc, #336]	; (800e324 <_printf_i+0x218>)
 800e1d4:	2708      	movs	r7, #8
 800e1d6:	9303      	str	r3, [sp, #12]
 800e1d8:	2a6f      	cmp	r2, #111	; 0x6f
 800e1da:	d000      	beq.n	800e1de <_printf_i+0xd2>
 800e1dc:	3702      	adds	r7, #2
 800e1de:	0023      	movs	r3, r4
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	3343      	adds	r3, #67	; 0x43
 800e1e4:	701a      	strb	r2, [r3, #0]
 800e1e6:	6863      	ldr	r3, [r4, #4]
 800e1e8:	60a3      	str	r3, [r4, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	db03      	blt.n	800e1f6 <_printf_i+0xea>
 800e1ee:	2104      	movs	r1, #4
 800e1f0:	6822      	ldr	r2, [r4, #0]
 800e1f2:	438a      	bics	r2, r1
 800e1f4:	6022      	str	r2, [r4, #0]
 800e1f6:	2d00      	cmp	r5, #0
 800e1f8:	d102      	bne.n	800e200 <_printf_i+0xf4>
 800e1fa:	9e04      	ldr	r6, [sp, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00c      	beq.n	800e21a <_printf_i+0x10e>
 800e200:	9e04      	ldr	r6, [sp, #16]
 800e202:	0028      	movs	r0, r5
 800e204:	0039      	movs	r1, r7
 800e206:	f7f2 f821 	bl	800024c <__aeabi_uidivmod>
 800e20a:	9b03      	ldr	r3, [sp, #12]
 800e20c:	3e01      	subs	r6, #1
 800e20e:	5c5b      	ldrb	r3, [r3, r1]
 800e210:	7033      	strb	r3, [r6, #0]
 800e212:	002b      	movs	r3, r5
 800e214:	0005      	movs	r5, r0
 800e216:	429f      	cmp	r7, r3
 800e218:	d9f3      	bls.n	800e202 <_printf_i+0xf6>
 800e21a:	2f08      	cmp	r7, #8
 800e21c:	d109      	bne.n	800e232 <_printf_i+0x126>
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	07db      	lsls	r3, r3, #31
 800e222:	d506      	bpl.n	800e232 <_printf_i+0x126>
 800e224:	6862      	ldr	r2, [r4, #4]
 800e226:	6923      	ldr	r3, [r4, #16]
 800e228:	429a      	cmp	r2, r3
 800e22a:	dc02      	bgt.n	800e232 <_printf_i+0x126>
 800e22c:	2330      	movs	r3, #48	; 0x30
 800e22e:	3e01      	subs	r6, #1
 800e230:	7033      	strb	r3, [r6, #0]
 800e232:	9b04      	ldr	r3, [sp, #16]
 800e234:	1b9b      	subs	r3, r3, r6
 800e236:	6123      	str	r3, [r4, #16]
 800e238:	9b07      	ldr	r3, [sp, #28]
 800e23a:	0021      	movs	r1, r4
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	9805      	ldr	r0, [sp, #20]
 800e240:	9b06      	ldr	r3, [sp, #24]
 800e242:	aa09      	add	r2, sp, #36	; 0x24
 800e244:	f7ff fef2 	bl	800e02c <_printf_common>
 800e248:	3001      	adds	r0, #1
 800e24a:	d147      	bne.n	800e2dc <_printf_i+0x1d0>
 800e24c:	2001      	movs	r0, #1
 800e24e:	4240      	negs	r0, r0
 800e250:	b00b      	add	sp, #44	; 0x2c
 800e252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e254:	2220      	movs	r2, #32
 800e256:	6809      	ldr	r1, [r1, #0]
 800e258:	430a      	orrs	r2, r1
 800e25a:	6022      	str	r2, [r4, #0]
 800e25c:	2278      	movs	r2, #120	; 0x78
 800e25e:	4932      	ldr	r1, [pc, #200]	; (800e328 <_printf_i+0x21c>)
 800e260:	9103      	str	r1, [sp, #12]
 800e262:	0021      	movs	r1, r4
 800e264:	3145      	adds	r1, #69	; 0x45
 800e266:	700a      	strb	r2, [r1, #0]
 800e268:	6819      	ldr	r1, [r3, #0]
 800e26a:	6822      	ldr	r2, [r4, #0]
 800e26c:	c920      	ldmia	r1!, {r5}
 800e26e:	0610      	lsls	r0, r2, #24
 800e270:	d402      	bmi.n	800e278 <_printf_i+0x16c>
 800e272:	0650      	lsls	r0, r2, #25
 800e274:	d500      	bpl.n	800e278 <_printf_i+0x16c>
 800e276:	b2ad      	uxth	r5, r5
 800e278:	6019      	str	r1, [r3, #0]
 800e27a:	07d3      	lsls	r3, r2, #31
 800e27c:	d502      	bpl.n	800e284 <_printf_i+0x178>
 800e27e:	2320      	movs	r3, #32
 800e280:	4313      	orrs	r3, r2
 800e282:	6023      	str	r3, [r4, #0]
 800e284:	2710      	movs	r7, #16
 800e286:	2d00      	cmp	r5, #0
 800e288:	d1a9      	bne.n	800e1de <_printf_i+0xd2>
 800e28a:	2220      	movs	r2, #32
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	4393      	bics	r3, r2
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	e7a4      	b.n	800e1de <_printf_i+0xd2>
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	680d      	ldr	r5, [r1, #0]
 800e298:	1d10      	adds	r0, r2, #4
 800e29a:	6949      	ldr	r1, [r1, #20]
 800e29c:	6018      	str	r0, [r3, #0]
 800e29e:	6813      	ldr	r3, [r2, #0]
 800e2a0:	062e      	lsls	r6, r5, #24
 800e2a2:	d501      	bpl.n	800e2a8 <_printf_i+0x19c>
 800e2a4:	6019      	str	r1, [r3, #0]
 800e2a6:	e002      	b.n	800e2ae <_printf_i+0x1a2>
 800e2a8:	066d      	lsls	r5, r5, #25
 800e2aa:	d5fb      	bpl.n	800e2a4 <_printf_i+0x198>
 800e2ac:	8019      	strh	r1, [r3, #0]
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	9e04      	ldr	r6, [sp, #16]
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	e7c0      	b.n	800e238 <_printf_i+0x12c>
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	1d11      	adds	r1, r2, #4
 800e2ba:	6019      	str	r1, [r3, #0]
 800e2bc:	6816      	ldr	r6, [r2, #0]
 800e2be:	2100      	movs	r1, #0
 800e2c0:	0030      	movs	r0, r6
 800e2c2:	6862      	ldr	r2, [r4, #4]
 800e2c4:	f000 fd65 	bl	800ed92 <memchr>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	d001      	beq.n	800e2d0 <_printf_i+0x1c4>
 800e2cc:	1b80      	subs	r0, r0, r6
 800e2ce:	6060      	str	r0, [r4, #4]
 800e2d0:	6863      	ldr	r3, [r4, #4]
 800e2d2:	6123      	str	r3, [r4, #16]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	9a04      	ldr	r2, [sp, #16]
 800e2d8:	7013      	strb	r3, [r2, #0]
 800e2da:	e7ad      	b.n	800e238 <_printf_i+0x12c>
 800e2dc:	0032      	movs	r2, r6
 800e2de:	6923      	ldr	r3, [r4, #16]
 800e2e0:	9906      	ldr	r1, [sp, #24]
 800e2e2:	9805      	ldr	r0, [sp, #20]
 800e2e4:	9d07      	ldr	r5, [sp, #28]
 800e2e6:	47a8      	blx	r5
 800e2e8:	3001      	adds	r0, #1
 800e2ea:	d0af      	beq.n	800e24c <_printf_i+0x140>
 800e2ec:	6823      	ldr	r3, [r4, #0]
 800e2ee:	079b      	lsls	r3, r3, #30
 800e2f0:	d415      	bmi.n	800e31e <_printf_i+0x212>
 800e2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f4:	68e0      	ldr	r0, [r4, #12]
 800e2f6:	4298      	cmp	r0, r3
 800e2f8:	daaa      	bge.n	800e250 <_printf_i+0x144>
 800e2fa:	0018      	movs	r0, r3
 800e2fc:	e7a8      	b.n	800e250 <_printf_i+0x144>
 800e2fe:	0022      	movs	r2, r4
 800e300:	2301      	movs	r3, #1
 800e302:	9906      	ldr	r1, [sp, #24]
 800e304:	9805      	ldr	r0, [sp, #20]
 800e306:	9e07      	ldr	r6, [sp, #28]
 800e308:	3219      	adds	r2, #25
 800e30a:	47b0      	blx	r6
 800e30c:	3001      	adds	r0, #1
 800e30e:	d09d      	beq.n	800e24c <_printf_i+0x140>
 800e310:	3501      	adds	r5, #1
 800e312:	68e3      	ldr	r3, [r4, #12]
 800e314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e316:	1a9b      	subs	r3, r3, r2
 800e318:	42ab      	cmp	r3, r5
 800e31a:	dcf0      	bgt.n	800e2fe <_printf_i+0x1f2>
 800e31c:	e7e9      	b.n	800e2f2 <_printf_i+0x1e6>
 800e31e:	2500      	movs	r5, #0
 800e320:	e7f7      	b.n	800e312 <_printf_i+0x206>
 800e322:	46c0      	nop			; (mov r8, r8)
 800e324:	08013b2b 	.word	0x08013b2b
 800e328:	08013b3c 	.word	0x08013b3c

0800e32c <_scanf_float>:
 800e32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e32e:	b08b      	sub	sp, #44	; 0x2c
 800e330:	0016      	movs	r6, r2
 800e332:	9002      	str	r0, [sp, #8]
 800e334:	22ae      	movs	r2, #174	; 0xae
 800e336:	2000      	movs	r0, #0
 800e338:	9307      	str	r3, [sp, #28]
 800e33a:	688b      	ldr	r3, [r1, #8]
 800e33c:	000f      	movs	r7, r1
 800e33e:	1e59      	subs	r1, r3, #1
 800e340:	0052      	lsls	r2, r2, #1
 800e342:	9006      	str	r0, [sp, #24]
 800e344:	4291      	cmp	r1, r2
 800e346:	d905      	bls.n	800e354 <_scanf_float+0x28>
 800e348:	3b5e      	subs	r3, #94	; 0x5e
 800e34a:	3bff      	subs	r3, #255	; 0xff
 800e34c:	9306      	str	r3, [sp, #24]
 800e34e:	235e      	movs	r3, #94	; 0x5e
 800e350:	33ff      	adds	r3, #255	; 0xff
 800e352:	60bb      	str	r3, [r7, #8]
 800e354:	23f0      	movs	r3, #240	; 0xf0
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	4313      	orrs	r3, r2
 800e35c:	603b      	str	r3, [r7, #0]
 800e35e:	003b      	movs	r3, r7
 800e360:	2400      	movs	r4, #0
 800e362:	331c      	adds	r3, #28
 800e364:	001d      	movs	r5, r3
 800e366:	9304      	str	r3, [sp, #16]
 800e368:	9403      	str	r4, [sp, #12]
 800e36a:	9409      	str	r4, [sp, #36]	; 0x24
 800e36c:	9408      	str	r4, [sp, #32]
 800e36e:	9401      	str	r4, [sp, #4]
 800e370:	9405      	str	r4, [sp, #20]
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	2a00      	cmp	r2, #0
 800e376:	d00a      	beq.n	800e38e <_scanf_float+0x62>
 800e378:	6833      	ldr	r3, [r6, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b4e      	cmp	r3, #78	; 0x4e
 800e37e:	d844      	bhi.n	800e40a <_scanf_float+0xde>
 800e380:	0018      	movs	r0, r3
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	d82c      	bhi.n	800e3e0 <_scanf_float+0xb4>
 800e386:	382b      	subs	r0, #43	; 0x2b
 800e388:	b2c1      	uxtb	r1, r0
 800e38a:	290e      	cmp	r1, #14
 800e38c:	d92a      	bls.n	800e3e4 <_scanf_float+0xb8>
 800e38e:	9b01      	ldr	r3, [sp, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d003      	beq.n	800e39c <_scanf_float+0x70>
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	4aa3      	ldr	r2, [pc, #652]	; (800e624 <_scanf_float+0x2f8>)
 800e398:	4013      	ands	r3, r2
 800e39a:	603b      	str	r3, [r7, #0]
 800e39c:	9b03      	ldr	r3, [sp, #12]
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d900      	bls.n	800e3a6 <_scanf_float+0x7a>
 800e3a4:	e0f9      	b.n	800e59a <_scanf_float+0x26e>
 800e3a6:	24be      	movs	r4, #190	; 0xbe
 800e3a8:	0064      	lsls	r4, r4, #1
 800e3aa:	9b04      	ldr	r3, [sp, #16]
 800e3ac:	429d      	cmp	r5, r3
 800e3ae:	d900      	bls.n	800e3b2 <_scanf_float+0x86>
 800e3b0:	e0e9      	b.n	800e586 <_scanf_float+0x25a>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	9303      	str	r3, [sp, #12]
 800e3b6:	e183      	b.n	800e6c0 <_scanf_float+0x394>
 800e3b8:	0018      	movs	r0, r3
 800e3ba:	3861      	subs	r0, #97	; 0x61
 800e3bc:	280d      	cmp	r0, #13
 800e3be:	d8e6      	bhi.n	800e38e <_scanf_float+0x62>
 800e3c0:	f7f1 feb4 	bl	800012c <__gnu_thumb1_case_shi>
 800e3c4:	ffe50083 	.word	0xffe50083
 800e3c8:	ffe5ffe5 	.word	0xffe5ffe5
 800e3cc:	00a200b6 	.word	0x00a200b6
 800e3d0:	ffe5ffe5 	.word	0xffe5ffe5
 800e3d4:	ffe50089 	.word	0xffe50089
 800e3d8:	ffe5ffe5 	.word	0xffe5ffe5
 800e3dc:	0065ffe5 	.word	0x0065ffe5
 800e3e0:	3841      	subs	r0, #65	; 0x41
 800e3e2:	e7eb      	b.n	800e3bc <_scanf_float+0x90>
 800e3e4:	280e      	cmp	r0, #14
 800e3e6:	d8d2      	bhi.n	800e38e <_scanf_float+0x62>
 800e3e8:	f7f1 fea0 	bl	800012c <__gnu_thumb1_case_shi>
 800e3ec:	ffd1004b 	.word	0xffd1004b
 800e3f0:	0098004b 	.word	0x0098004b
 800e3f4:	0020ffd1 	.word	0x0020ffd1
 800e3f8:	00400040 	.word	0x00400040
 800e3fc:	00400040 	.word	0x00400040
 800e400:	00400040 	.word	0x00400040
 800e404:	00400040 	.word	0x00400040
 800e408:	0040      	.short	0x0040
 800e40a:	2b6e      	cmp	r3, #110	; 0x6e
 800e40c:	d809      	bhi.n	800e422 <_scanf_float+0xf6>
 800e40e:	2b60      	cmp	r3, #96	; 0x60
 800e410:	d8d2      	bhi.n	800e3b8 <_scanf_float+0x8c>
 800e412:	2b54      	cmp	r3, #84	; 0x54
 800e414:	d07d      	beq.n	800e512 <_scanf_float+0x1e6>
 800e416:	2b59      	cmp	r3, #89	; 0x59
 800e418:	d1b9      	bne.n	800e38e <_scanf_float+0x62>
 800e41a:	2c07      	cmp	r4, #7
 800e41c:	d1b7      	bne.n	800e38e <_scanf_float+0x62>
 800e41e:	2408      	movs	r4, #8
 800e420:	e02c      	b.n	800e47c <_scanf_float+0x150>
 800e422:	2b74      	cmp	r3, #116	; 0x74
 800e424:	d075      	beq.n	800e512 <_scanf_float+0x1e6>
 800e426:	2b79      	cmp	r3, #121	; 0x79
 800e428:	d0f7      	beq.n	800e41a <_scanf_float+0xee>
 800e42a:	e7b0      	b.n	800e38e <_scanf_float+0x62>
 800e42c:	6839      	ldr	r1, [r7, #0]
 800e42e:	05c8      	lsls	r0, r1, #23
 800e430:	d51c      	bpl.n	800e46c <_scanf_float+0x140>
 800e432:	2380      	movs	r3, #128	; 0x80
 800e434:	4399      	bics	r1, r3
 800e436:	9b01      	ldr	r3, [sp, #4]
 800e438:	6039      	str	r1, [r7, #0]
 800e43a:	3301      	adds	r3, #1
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	9b06      	ldr	r3, [sp, #24]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d003      	beq.n	800e44c <_scanf_float+0x120>
 800e444:	3b01      	subs	r3, #1
 800e446:	3201      	adds	r2, #1
 800e448:	9306      	str	r3, [sp, #24]
 800e44a:	60ba      	str	r2, [r7, #8]
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	3b01      	subs	r3, #1
 800e450:	60bb      	str	r3, [r7, #8]
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	3301      	adds	r3, #1
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	6873      	ldr	r3, [r6, #4]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	6073      	str	r3, [r6, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	dc00      	bgt.n	800e464 <_scanf_float+0x138>
 800e462:	e086      	b.n	800e572 <_scanf_float+0x246>
 800e464:	6833      	ldr	r3, [r6, #0]
 800e466:	3301      	adds	r3, #1
 800e468:	6033      	str	r3, [r6, #0]
 800e46a:	e782      	b.n	800e372 <_scanf_float+0x46>
 800e46c:	9a03      	ldr	r2, [sp, #12]
 800e46e:	1912      	adds	r2, r2, r4
 800e470:	2a00      	cmp	r2, #0
 800e472:	d18c      	bne.n	800e38e <_scanf_float+0x62>
 800e474:	683a      	ldr	r2, [r7, #0]
 800e476:	496c      	ldr	r1, [pc, #432]	; (800e628 <_scanf_float+0x2fc>)
 800e478:	400a      	ands	r2, r1
 800e47a:	603a      	str	r2, [r7, #0]
 800e47c:	702b      	strb	r3, [r5, #0]
 800e47e:	3501      	adds	r5, #1
 800e480:	e7e4      	b.n	800e44c <_scanf_float+0x120>
 800e482:	2180      	movs	r1, #128	; 0x80
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	420a      	tst	r2, r1
 800e488:	d081      	beq.n	800e38e <_scanf_float+0x62>
 800e48a:	438a      	bics	r2, r1
 800e48c:	e7f5      	b.n	800e47a <_scanf_float+0x14e>
 800e48e:	9a03      	ldr	r2, [sp, #12]
 800e490:	2a00      	cmp	r2, #0
 800e492:	d10f      	bne.n	800e4b4 <_scanf_float+0x188>
 800e494:	9a01      	ldr	r2, [sp, #4]
 800e496:	2a00      	cmp	r2, #0
 800e498:	d10f      	bne.n	800e4ba <_scanf_float+0x18e>
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	21e0      	movs	r1, #224	; 0xe0
 800e49e:	0010      	movs	r0, r2
 800e4a0:	00c9      	lsls	r1, r1, #3
 800e4a2:	4008      	ands	r0, r1
 800e4a4:	4288      	cmp	r0, r1
 800e4a6:	d108      	bne.n	800e4ba <_scanf_float+0x18e>
 800e4a8:	4960      	ldr	r1, [pc, #384]	; (800e62c <_scanf_float+0x300>)
 800e4aa:	400a      	ands	r2, r1
 800e4ac:	603a      	str	r2, [r7, #0]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	9203      	str	r2, [sp, #12]
 800e4b2:	e7e3      	b.n	800e47c <_scanf_float+0x150>
 800e4b4:	9a03      	ldr	r2, [sp, #12]
 800e4b6:	2a02      	cmp	r2, #2
 800e4b8:	d059      	beq.n	800e56e <_scanf_float+0x242>
 800e4ba:	2c01      	cmp	r4, #1
 800e4bc:	d002      	beq.n	800e4c4 <_scanf_float+0x198>
 800e4be:	2c04      	cmp	r4, #4
 800e4c0:	d000      	beq.n	800e4c4 <_scanf_float+0x198>
 800e4c2:	e764      	b.n	800e38e <_scanf_float+0x62>
 800e4c4:	3401      	adds	r4, #1
 800e4c6:	b2e4      	uxtb	r4, r4
 800e4c8:	e7d8      	b.n	800e47c <_scanf_float+0x150>
 800e4ca:	9a03      	ldr	r2, [sp, #12]
 800e4cc:	2a01      	cmp	r2, #1
 800e4ce:	d000      	beq.n	800e4d2 <_scanf_float+0x1a6>
 800e4d0:	e75d      	b.n	800e38e <_scanf_float+0x62>
 800e4d2:	2202      	movs	r2, #2
 800e4d4:	e7ec      	b.n	800e4b0 <_scanf_float+0x184>
 800e4d6:	2c00      	cmp	r4, #0
 800e4d8:	d110      	bne.n	800e4fc <_scanf_float+0x1d0>
 800e4da:	9a01      	ldr	r2, [sp, #4]
 800e4dc:	2a00      	cmp	r2, #0
 800e4de:	d000      	beq.n	800e4e2 <_scanf_float+0x1b6>
 800e4e0:	e758      	b.n	800e394 <_scanf_float+0x68>
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	21e0      	movs	r1, #224	; 0xe0
 800e4e6:	0010      	movs	r0, r2
 800e4e8:	00c9      	lsls	r1, r1, #3
 800e4ea:	4008      	ands	r0, r1
 800e4ec:	4288      	cmp	r0, r1
 800e4ee:	d000      	beq.n	800e4f2 <_scanf_float+0x1c6>
 800e4f0:	e754      	b.n	800e39c <_scanf_float+0x70>
 800e4f2:	494e      	ldr	r1, [pc, #312]	; (800e62c <_scanf_float+0x300>)
 800e4f4:	3401      	adds	r4, #1
 800e4f6:	400a      	ands	r2, r1
 800e4f8:	603a      	str	r2, [r7, #0]
 800e4fa:	e7bf      	b.n	800e47c <_scanf_float+0x150>
 800e4fc:	21fd      	movs	r1, #253	; 0xfd
 800e4fe:	1ee2      	subs	r2, r4, #3
 800e500:	420a      	tst	r2, r1
 800e502:	d000      	beq.n	800e506 <_scanf_float+0x1da>
 800e504:	e743      	b.n	800e38e <_scanf_float+0x62>
 800e506:	e7dd      	b.n	800e4c4 <_scanf_float+0x198>
 800e508:	2c02      	cmp	r4, #2
 800e50a:	d000      	beq.n	800e50e <_scanf_float+0x1e2>
 800e50c:	e73f      	b.n	800e38e <_scanf_float+0x62>
 800e50e:	2403      	movs	r4, #3
 800e510:	e7b4      	b.n	800e47c <_scanf_float+0x150>
 800e512:	2c06      	cmp	r4, #6
 800e514:	d000      	beq.n	800e518 <_scanf_float+0x1ec>
 800e516:	e73a      	b.n	800e38e <_scanf_float+0x62>
 800e518:	2407      	movs	r4, #7
 800e51a:	e7af      	b.n	800e47c <_scanf_float+0x150>
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	0591      	lsls	r1, r2, #22
 800e520:	d400      	bmi.n	800e524 <_scanf_float+0x1f8>
 800e522:	e734      	b.n	800e38e <_scanf_float+0x62>
 800e524:	4942      	ldr	r1, [pc, #264]	; (800e630 <_scanf_float+0x304>)
 800e526:	400a      	ands	r2, r1
 800e528:	603a      	str	r2, [r7, #0]
 800e52a:	9a01      	ldr	r2, [sp, #4]
 800e52c:	9205      	str	r2, [sp, #20]
 800e52e:	e7a5      	b.n	800e47c <_scanf_float+0x150>
 800e530:	21a0      	movs	r1, #160	; 0xa0
 800e532:	2080      	movs	r0, #128	; 0x80
 800e534:	683a      	ldr	r2, [r7, #0]
 800e536:	00c9      	lsls	r1, r1, #3
 800e538:	4011      	ands	r1, r2
 800e53a:	00c0      	lsls	r0, r0, #3
 800e53c:	4281      	cmp	r1, r0
 800e53e:	d006      	beq.n	800e54e <_scanf_float+0x222>
 800e540:	4202      	tst	r2, r0
 800e542:	d100      	bne.n	800e546 <_scanf_float+0x21a>
 800e544:	e723      	b.n	800e38e <_scanf_float+0x62>
 800e546:	9901      	ldr	r1, [sp, #4]
 800e548:	2900      	cmp	r1, #0
 800e54a:	d100      	bne.n	800e54e <_scanf_float+0x222>
 800e54c:	e726      	b.n	800e39c <_scanf_float+0x70>
 800e54e:	0591      	lsls	r1, r2, #22
 800e550:	d404      	bmi.n	800e55c <_scanf_float+0x230>
 800e552:	9901      	ldr	r1, [sp, #4]
 800e554:	9805      	ldr	r0, [sp, #20]
 800e556:	9509      	str	r5, [sp, #36]	; 0x24
 800e558:	1a09      	subs	r1, r1, r0
 800e55a:	9108      	str	r1, [sp, #32]
 800e55c:	4933      	ldr	r1, [pc, #204]	; (800e62c <_scanf_float+0x300>)
 800e55e:	400a      	ands	r2, r1
 800e560:	21c0      	movs	r1, #192	; 0xc0
 800e562:	0049      	lsls	r1, r1, #1
 800e564:	430a      	orrs	r2, r1
 800e566:	603a      	str	r2, [r7, #0]
 800e568:	2200      	movs	r2, #0
 800e56a:	9201      	str	r2, [sp, #4]
 800e56c:	e786      	b.n	800e47c <_scanf_float+0x150>
 800e56e:	2203      	movs	r2, #3
 800e570:	e79e      	b.n	800e4b0 <_scanf_float+0x184>
 800e572:	23c0      	movs	r3, #192	; 0xc0
 800e574:	005b      	lsls	r3, r3, #1
 800e576:	0031      	movs	r1, r6
 800e578:	58fb      	ldr	r3, [r7, r3]
 800e57a:	9802      	ldr	r0, [sp, #8]
 800e57c:	4798      	blx	r3
 800e57e:	2800      	cmp	r0, #0
 800e580:	d100      	bne.n	800e584 <_scanf_float+0x258>
 800e582:	e6f6      	b.n	800e372 <_scanf_float+0x46>
 800e584:	e703      	b.n	800e38e <_scanf_float+0x62>
 800e586:	3d01      	subs	r5, #1
 800e588:	593b      	ldr	r3, [r7, r4]
 800e58a:	0032      	movs	r2, r6
 800e58c:	7829      	ldrb	r1, [r5, #0]
 800e58e:	9802      	ldr	r0, [sp, #8]
 800e590:	4798      	blx	r3
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	3b01      	subs	r3, #1
 800e596:	613b      	str	r3, [r7, #16]
 800e598:	e707      	b.n	800e3aa <_scanf_float+0x7e>
 800e59a:	1e63      	subs	r3, r4, #1
 800e59c:	2b06      	cmp	r3, #6
 800e59e:	d80e      	bhi.n	800e5be <_scanf_float+0x292>
 800e5a0:	9503      	str	r5, [sp, #12]
 800e5a2:	2c02      	cmp	r4, #2
 800e5a4:	d920      	bls.n	800e5e8 <_scanf_float+0x2bc>
 800e5a6:	1b63      	subs	r3, r4, r5
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	9306      	str	r3, [sp, #24]
 800e5ac:	9b03      	ldr	r3, [sp, #12]
 800e5ae:	9a06      	ldr	r2, [sp, #24]
 800e5b0:	189b      	adds	r3, r3, r2
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	2b03      	cmp	r3, #3
 800e5b6:	d827      	bhi.n	800e608 <_scanf_float+0x2dc>
 800e5b8:	3c03      	subs	r4, #3
 800e5ba:	b2e4      	uxtb	r4, r4
 800e5bc:	1b2d      	subs	r5, r5, r4
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	05da      	lsls	r2, r3, #23
 800e5c2:	d552      	bpl.n	800e66a <_scanf_float+0x33e>
 800e5c4:	055b      	lsls	r3, r3, #21
 800e5c6:	d535      	bpl.n	800e634 <_scanf_float+0x308>
 800e5c8:	24be      	movs	r4, #190	; 0xbe
 800e5ca:	0064      	lsls	r4, r4, #1
 800e5cc:	9b04      	ldr	r3, [sp, #16]
 800e5ce:	429d      	cmp	r5, r3
 800e5d0:	d800      	bhi.n	800e5d4 <_scanf_float+0x2a8>
 800e5d2:	e6ee      	b.n	800e3b2 <_scanf_float+0x86>
 800e5d4:	3d01      	subs	r5, #1
 800e5d6:	593b      	ldr	r3, [r7, r4]
 800e5d8:	0032      	movs	r2, r6
 800e5da:	7829      	ldrb	r1, [r5, #0]
 800e5dc:	9802      	ldr	r0, [sp, #8]
 800e5de:	4798      	blx	r3
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	613b      	str	r3, [r7, #16]
 800e5e6:	e7f1      	b.n	800e5cc <_scanf_float+0x2a0>
 800e5e8:	24be      	movs	r4, #190	; 0xbe
 800e5ea:	0064      	lsls	r4, r4, #1
 800e5ec:	9b04      	ldr	r3, [sp, #16]
 800e5ee:	429d      	cmp	r5, r3
 800e5f0:	d800      	bhi.n	800e5f4 <_scanf_float+0x2c8>
 800e5f2:	e6de      	b.n	800e3b2 <_scanf_float+0x86>
 800e5f4:	3d01      	subs	r5, #1
 800e5f6:	593b      	ldr	r3, [r7, r4]
 800e5f8:	0032      	movs	r2, r6
 800e5fa:	7829      	ldrb	r1, [r5, #0]
 800e5fc:	9802      	ldr	r0, [sp, #8]
 800e5fe:	4798      	blx	r3
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	3b01      	subs	r3, #1
 800e604:	613b      	str	r3, [r7, #16]
 800e606:	e7f1      	b.n	800e5ec <_scanf_float+0x2c0>
 800e608:	9b03      	ldr	r3, [sp, #12]
 800e60a:	0032      	movs	r2, r6
 800e60c:	3b01      	subs	r3, #1
 800e60e:	7819      	ldrb	r1, [r3, #0]
 800e610:	9303      	str	r3, [sp, #12]
 800e612:	23be      	movs	r3, #190	; 0xbe
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	58fb      	ldr	r3, [r7, r3]
 800e618:	9802      	ldr	r0, [sp, #8]
 800e61a:	4798      	blx	r3
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	3b01      	subs	r3, #1
 800e620:	613b      	str	r3, [r7, #16]
 800e622:	e7c3      	b.n	800e5ac <_scanf_float+0x280>
 800e624:	fffffeff 	.word	0xfffffeff
 800e628:	fffffe7f 	.word	0xfffffe7f
 800e62c:	fffff87f 	.word	0xfffff87f
 800e630:	fffffd7f 	.word	0xfffffd7f
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	1e6c      	subs	r4, r5, #1
 800e638:	7821      	ldrb	r1, [r4, #0]
 800e63a:	3b01      	subs	r3, #1
 800e63c:	613b      	str	r3, [r7, #16]
 800e63e:	2965      	cmp	r1, #101	; 0x65
 800e640:	d00c      	beq.n	800e65c <_scanf_float+0x330>
 800e642:	2945      	cmp	r1, #69	; 0x45
 800e644:	d00a      	beq.n	800e65c <_scanf_float+0x330>
 800e646:	23be      	movs	r3, #190	; 0xbe
 800e648:	005b      	lsls	r3, r3, #1
 800e64a:	58fb      	ldr	r3, [r7, r3]
 800e64c:	0032      	movs	r2, r6
 800e64e:	9802      	ldr	r0, [sp, #8]
 800e650:	4798      	blx	r3
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	1eac      	subs	r4, r5, #2
 800e656:	3b01      	subs	r3, #1
 800e658:	7821      	ldrb	r1, [r4, #0]
 800e65a:	613b      	str	r3, [r7, #16]
 800e65c:	23be      	movs	r3, #190	; 0xbe
 800e65e:	005b      	lsls	r3, r3, #1
 800e660:	0032      	movs	r2, r6
 800e662:	58fb      	ldr	r3, [r7, r3]
 800e664:	9802      	ldr	r0, [sp, #8]
 800e666:	4798      	blx	r3
 800e668:	0025      	movs	r5, r4
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	2310      	movs	r3, #16
 800e66e:	0011      	movs	r1, r2
 800e670:	4019      	ands	r1, r3
 800e672:	9103      	str	r1, [sp, #12]
 800e674:	421a      	tst	r2, r3
 800e676:	d15b      	bne.n	800e730 <_scanf_float+0x404>
 800e678:	22c0      	movs	r2, #192	; 0xc0
 800e67a:	7029      	strb	r1, [r5, #0]
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	00d2      	lsls	r2, r2, #3
 800e680:	4013      	ands	r3, r2
 800e682:	2280      	movs	r2, #128	; 0x80
 800e684:	00d2      	lsls	r2, r2, #3
 800e686:	4293      	cmp	r3, r2
 800e688:	d11d      	bne.n	800e6c6 <_scanf_float+0x39a>
 800e68a:	9b05      	ldr	r3, [sp, #20]
 800e68c:	9a01      	ldr	r2, [sp, #4]
 800e68e:	9901      	ldr	r1, [sp, #4]
 800e690:	1a9a      	subs	r2, r3, r2
 800e692:	428b      	cmp	r3, r1
 800e694:	d124      	bne.n	800e6e0 <_scanf_float+0x3b4>
 800e696:	2200      	movs	r2, #0
 800e698:	9904      	ldr	r1, [sp, #16]
 800e69a:	9802      	ldr	r0, [sp, #8]
 800e69c:	f7ff f91c 	bl	800d8d8 <_strtod_r>
 800e6a0:	9b07      	ldr	r3, [sp, #28]
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	0004      	movs	r4, r0
 800e6a6:	000d      	movs	r5, r1
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	0791      	lsls	r1, r2, #30
 800e6ac:	d525      	bpl.n	800e6fa <_scanf_float+0x3ce>
 800e6ae:	9907      	ldr	r1, [sp, #28]
 800e6b0:	1d1a      	adds	r2, r3, #4
 800e6b2:	600a      	str	r2, [r1, #0]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	601c      	str	r4, [r3, #0]
 800e6b8:	605d      	str	r5, [r3, #4]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	60fb      	str	r3, [r7, #12]
 800e6c0:	9803      	ldr	r0, [sp, #12]
 800e6c2:	b00b      	add	sp, #44	; 0x2c
 800e6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6c6:	9b08      	ldr	r3, [sp, #32]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d0e4      	beq.n	800e696 <_scanf_float+0x36a>
 800e6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ce:	9a03      	ldr	r2, [sp, #12]
 800e6d0:	1c59      	adds	r1, r3, #1
 800e6d2:	9802      	ldr	r0, [sp, #8]
 800e6d4:	230a      	movs	r3, #10
 800e6d6:	f7ff f99b 	bl	800da10 <_strtol_r>
 800e6da:	9b08      	ldr	r3, [sp, #32]
 800e6dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e6de:	1ac2      	subs	r2, r0, r3
 800e6e0:	003b      	movs	r3, r7
 800e6e2:	3370      	adds	r3, #112	; 0x70
 800e6e4:	33ff      	adds	r3, #255	; 0xff
 800e6e6:	429d      	cmp	r5, r3
 800e6e8:	d302      	bcc.n	800e6f0 <_scanf_float+0x3c4>
 800e6ea:	003d      	movs	r5, r7
 800e6ec:	356f      	adds	r5, #111	; 0x6f
 800e6ee:	35ff      	adds	r5, #255	; 0xff
 800e6f0:	0028      	movs	r0, r5
 800e6f2:	4910      	ldr	r1, [pc, #64]	; (800e734 <_scanf_float+0x408>)
 800e6f4:	f000 f91a 	bl	800e92c <siprintf>
 800e6f8:	e7cd      	b.n	800e696 <_scanf_float+0x36a>
 800e6fa:	1d19      	adds	r1, r3, #4
 800e6fc:	0752      	lsls	r2, r2, #29
 800e6fe:	d502      	bpl.n	800e706 <_scanf_float+0x3da>
 800e700:	9a07      	ldr	r2, [sp, #28]
 800e702:	6011      	str	r1, [r2, #0]
 800e704:	e7d6      	b.n	800e6b4 <_scanf_float+0x388>
 800e706:	9a07      	ldr	r2, [sp, #28]
 800e708:	0020      	movs	r0, r4
 800e70a:	6011      	str	r1, [r2, #0]
 800e70c:	681e      	ldr	r6, [r3, #0]
 800e70e:	0022      	movs	r2, r4
 800e710:	002b      	movs	r3, r5
 800e712:	0029      	movs	r1, r5
 800e714:	f7f4 fc22 	bl	8002f5c <__aeabi_dcmpun>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d004      	beq.n	800e726 <_scanf_float+0x3fa>
 800e71c:	4806      	ldr	r0, [pc, #24]	; (800e738 <_scanf_float+0x40c>)
 800e71e:	f000 fb53 	bl	800edc8 <nanf>
 800e722:	6030      	str	r0, [r6, #0]
 800e724:	e7c9      	b.n	800e6ba <_scanf_float+0x38e>
 800e726:	0020      	movs	r0, r4
 800e728:	0029      	movs	r1, r5
 800e72a:	f7f4 fd09 	bl	8003140 <__aeabi_d2f>
 800e72e:	e7f8      	b.n	800e722 <_scanf_float+0x3f6>
 800e730:	2300      	movs	r3, #0
 800e732:	e63f      	b.n	800e3b4 <_scanf_float+0x88>
 800e734:	08013b4d 	.word	0x08013b4d
 800e738:	08013c06 	.word	0x08013c06

0800e73c <std>:
 800e73c:	2300      	movs	r3, #0
 800e73e:	b510      	push	{r4, lr}
 800e740:	0004      	movs	r4, r0
 800e742:	6003      	str	r3, [r0, #0]
 800e744:	6043      	str	r3, [r0, #4]
 800e746:	6083      	str	r3, [r0, #8]
 800e748:	8181      	strh	r1, [r0, #12]
 800e74a:	6643      	str	r3, [r0, #100]	; 0x64
 800e74c:	81c2      	strh	r2, [r0, #14]
 800e74e:	6103      	str	r3, [r0, #16]
 800e750:	6143      	str	r3, [r0, #20]
 800e752:	6183      	str	r3, [r0, #24]
 800e754:	0019      	movs	r1, r3
 800e756:	2208      	movs	r2, #8
 800e758:	305c      	adds	r0, #92	; 0x5c
 800e75a:	f000 f953 	bl	800ea04 <memset>
 800e75e:	4b0b      	ldr	r3, [pc, #44]	; (800e78c <std+0x50>)
 800e760:	6224      	str	r4, [r4, #32]
 800e762:	6263      	str	r3, [r4, #36]	; 0x24
 800e764:	4b0a      	ldr	r3, [pc, #40]	; (800e790 <std+0x54>)
 800e766:	62a3      	str	r3, [r4, #40]	; 0x28
 800e768:	4b0a      	ldr	r3, [pc, #40]	; (800e794 <std+0x58>)
 800e76a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e76c:	4b0a      	ldr	r3, [pc, #40]	; (800e798 <std+0x5c>)
 800e76e:	6323      	str	r3, [r4, #48]	; 0x30
 800e770:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <std+0x60>)
 800e772:	429c      	cmp	r4, r3
 800e774:	d005      	beq.n	800e782 <std+0x46>
 800e776:	4b0a      	ldr	r3, [pc, #40]	; (800e7a0 <std+0x64>)
 800e778:	429c      	cmp	r4, r3
 800e77a:	d002      	beq.n	800e782 <std+0x46>
 800e77c:	4b09      	ldr	r3, [pc, #36]	; (800e7a4 <std+0x68>)
 800e77e:	429c      	cmp	r4, r3
 800e780:	d103      	bne.n	800e78a <std+0x4e>
 800e782:	0020      	movs	r0, r4
 800e784:	3058      	adds	r0, #88	; 0x58
 800e786:	f000 faf9 	bl	800ed7c <__retarget_lock_init_recursive>
 800e78a:	bd10      	pop	{r4, pc}
 800e78c:	0800e96d 	.word	0x0800e96d
 800e790:	0800e995 	.word	0x0800e995
 800e794:	0800e9cd 	.word	0x0800e9cd
 800e798:	0800e9f9 	.word	0x0800e9f9
 800e79c:	200066d4 	.word	0x200066d4
 800e7a0:	2000673c 	.word	0x2000673c
 800e7a4:	200067a4 	.word	0x200067a4

0800e7a8 <stdio_exit_handler>:
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	4a03      	ldr	r2, [pc, #12]	; (800e7b8 <stdio_exit_handler+0x10>)
 800e7ac:	4903      	ldr	r1, [pc, #12]	; (800e7bc <stdio_exit_handler+0x14>)
 800e7ae:	4804      	ldr	r0, [pc, #16]	; (800e7c0 <stdio_exit_handler+0x18>)
 800e7b0:	f000 f86c 	bl	800e88c <_fwalk_sglue>
 800e7b4:	bd10      	pop	{r4, pc}
 800e7b6:	46c0      	nop			; (mov r8, r8)
 800e7b8:	2000012c 	.word	0x2000012c
 800e7bc:	08011021 	.word	0x08011021
 800e7c0:	200002a4 	.word	0x200002a4

0800e7c4 <cleanup_stdio>:
 800e7c4:	6841      	ldr	r1, [r0, #4]
 800e7c6:	4b0b      	ldr	r3, [pc, #44]	; (800e7f4 <cleanup_stdio+0x30>)
 800e7c8:	b510      	push	{r4, lr}
 800e7ca:	0004      	movs	r4, r0
 800e7cc:	4299      	cmp	r1, r3
 800e7ce:	d001      	beq.n	800e7d4 <cleanup_stdio+0x10>
 800e7d0:	f002 fc26 	bl	8011020 <_fflush_r>
 800e7d4:	68a1      	ldr	r1, [r4, #8]
 800e7d6:	4b08      	ldr	r3, [pc, #32]	; (800e7f8 <cleanup_stdio+0x34>)
 800e7d8:	4299      	cmp	r1, r3
 800e7da:	d002      	beq.n	800e7e2 <cleanup_stdio+0x1e>
 800e7dc:	0020      	movs	r0, r4
 800e7de:	f002 fc1f 	bl	8011020 <_fflush_r>
 800e7e2:	68e1      	ldr	r1, [r4, #12]
 800e7e4:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <cleanup_stdio+0x38>)
 800e7e6:	4299      	cmp	r1, r3
 800e7e8:	d002      	beq.n	800e7f0 <cleanup_stdio+0x2c>
 800e7ea:	0020      	movs	r0, r4
 800e7ec:	f002 fc18 	bl	8011020 <_fflush_r>
 800e7f0:	bd10      	pop	{r4, pc}
 800e7f2:	46c0      	nop			; (mov r8, r8)
 800e7f4:	200066d4 	.word	0x200066d4
 800e7f8:	2000673c 	.word	0x2000673c
 800e7fc:	200067a4 	.word	0x200067a4

0800e800 <global_stdio_init.part.0>:
 800e800:	b510      	push	{r4, lr}
 800e802:	4b09      	ldr	r3, [pc, #36]	; (800e828 <global_stdio_init.part.0+0x28>)
 800e804:	4a09      	ldr	r2, [pc, #36]	; (800e82c <global_stdio_init.part.0+0x2c>)
 800e806:	2104      	movs	r1, #4
 800e808:	601a      	str	r2, [r3, #0]
 800e80a:	4809      	ldr	r0, [pc, #36]	; (800e830 <global_stdio_init.part.0+0x30>)
 800e80c:	2200      	movs	r2, #0
 800e80e:	f7ff ff95 	bl	800e73c <std>
 800e812:	2201      	movs	r2, #1
 800e814:	2109      	movs	r1, #9
 800e816:	4807      	ldr	r0, [pc, #28]	; (800e834 <global_stdio_init.part.0+0x34>)
 800e818:	f7ff ff90 	bl	800e73c <std>
 800e81c:	2202      	movs	r2, #2
 800e81e:	2112      	movs	r1, #18
 800e820:	4805      	ldr	r0, [pc, #20]	; (800e838 <global_stdio_init.part.0+0x38>)
 800e822:	f7ff ff8b 	bl	800e73c <std>
 800e826:	bd10      	pop	{r4, pc}
 800e828:	2000680c 	.word	0x2000680c
 800e82c:	0800e7a9 	.word	0x0800e7a9
 800e830:	200066d4 	.word	0x200066d4
 800e834:	2000673c 	.word	0x2000673c
 800e838:	200067a4 	.word	0x200067a4

0800e83c <__sfp_lock_acquire>:
 800e83c:	b510      	push	{r4, lr}
 800e83e:	4802      	ldr	r0, [pc, #8]	; (800e848 <__sfp_lock_acquire+0xc>)
 800e840:	f000 fa9d 	bl	800ed7e <__retarget_lock_acquire_recursive>
 800e844:	bd10      	pop	{r4, pc}
 800e846:	46c0      	nop			; (mov r8, r8)
 800e848:	20006815 	.word	0x20006815

0800e84c <__sfp_lock_release>:
 800e84c:	b510      	push	{r4, lr}
 800e84e:	4802      	ldr	r0, [pc, #8]	; (800e858 <__sfp_lock_release+0xc>)
 800e850:	f000 fa96 	bl	800ed80 <__retarget_lock_release_recursive>
 800e854:	bd10      	pop	{r4, pc}
 800e856:	46c0      	nop			; (mov r8, r8)
 800e858:	20006815 	.word	0x20006815

0800e85c <__sinit>:
 800e85c:	b510      	push	{r4, lr}
 800e85e:	0004      	movs	r4, r0
 800e860:	f7ff ffec 	bl	800e83c <__sfp_lock_acquire>
 800e864:	6a23      	ldr	r3, [r4, #32]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <__sinit+0x14>
 800e86a:	f7ff ffef 	bl	800e84c <__sfp_lock_release>
 800e86e:	bd10      	pop	{r4, pc}
 800e870:	4b04      	ldr	r3, [pc, #16]	; (800e884 <__sinit+0x28>)
 800e872:	6223      	str	r3, [r4, #32]
 800e874:	4b04      	ldr	r3, [pc, #16]	; (800e888 <__sinit+0x2c>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1f6      	bne.n	800e86a <__sinit+0xe>
 800e87c:	f7ff ffc0 	bl	800e800 <global_stdio_init.part.0>
 800e880:	e7f3      	b.n	800e86a <__sinit+0xe>
 800e882:	46c0      	nop			; (mov r8, r8)
 800e884:	0800e7c5 	.word	0x0800e7c5
 800e888:	2000680c 	.word	0x2000680c

0800e88c <_fwalk_sglue>:
 800e88c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e88e:	0014      	movs	r4, r2
 800e890:	2600      	movs	r6, #0
 800e892:	9000      	str	r0, [sp, #0]
 800e894:	9101      	str	r1, [sp, #4]
 800e896:	68a5      	ldr	r5, [r4, #8]
 800e898:	6867      	ldr	r7, [r4, #4]
 800e89a:	3f01      	subs	r7, #1
 800e89c:	d504      	bpl.n	800e8a8 <_fwalk_sglue+0x1c>
 800e89e:	6824      	ldr	r4, [r4, #0]
 800e8a0:	2c00      	cmp	r4, #0
 800e8a2:	d1f8      	bne.n	800e896 <_fwalk_sglue+0xa>
 800e8a4:	0030      	movs	r0, r6
 800e8a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e8a8:	89ab      	ldrh	r3, [r5, #12]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d908      	bls.n	800e8c0 <_fwalk_sglue+0x34>
 800e8ae:	220e      	movs	r2, #14
 800e8b0:	5eab      	ldrsh	r3, [r5, r2]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	d004      	beq.n	800e8c0 <_fwalk_sglue+0x34>
 800e8b6:	0029      	movs	r1, r5
 800e8b8:	9800      	ldr	r0, [sp, #0]
 800e8ba:	9b01      	ldr	r3, [sp, #4]
 800e8bc:	4798      	blx	r3
 800e8be:	4306      	orrs	r6, r0
 800e8c0:	3568      	adds	r5, #104	; 0x68
 800e8c2:	e7ea      	b.n	800e89a <_fwalk_sglue+0xe>

0800e8c4 <sniprintf>:
 800e8c4:	b40c      	push	{r2, r3}
 800e8c6:	b530      	push	{r4, r5, lr}
 800e8c8:	4b17      	ldr	r3, [pc, #92]	; (800e928 <sniprintf+0x64>)
 800e8ca:	000c      	movs	r4, r1
 800e8cc:	681d      	ldr	r5, [r3, #0]
 800e8ce:	b09d      	sub	sp, #116	; 0x74
 800e8d0:	2900      	cmp	r1, #0
 800e8d2:	da08      	bge.n	800e8e6 <sniprintf+0x22>
 800e8d4:	238b      	movs	r3, #139	; 0x8b
 800e8d6:	2001      	movs	r0, #1
 800e8d8:	602b      	str	r3, [r5, #0]
 800e8da:	4240      	negs	r0, r0
 800e8dc:	b01d      	add	sp, #116	; 0x74
 800e8de:	bc30      	pop	{r4, r5}
 800e8e0:	bc08      	pop	{r3}
 800e8e2:	b002      	add	sp, #8
 800e8e4:	4718      	bx	r3
 800e8e6:	2382      	movs	r3, #130	; 0x82
 800e8e8:	466a      	mov	r2, sp
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	8293      	strh	r3, [r2, #20]
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	9002      	str	r0, [sp, #8]
 800e8f2:	9006      	str	r0, [sp, #24]
 800e8f4:	4299      	cmp	r1, r3
 800e8f6:	d000      	beq.n	800e8fa <sniprintf+0x36>
 800e8f8:	1e4b      	subs	r3, r1, #1
 800e8fa:	9304      	str	r3, [sp, #16]
 800e8fc:	9307      	str	r3, [sp, #28]
 800e8fe:	2301      	movs	r3, #1
 800e900:	466a      	mov	r2, sp
 800e902:	425b      	negs	r3, r3
 800e904:	82d3      	strh	r3, [r2, #22]
 800e906:	0028      	movs	r0, r5
 800e908:	ab21      	add	r3, sp, #132	; 0x84
 800e90a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e90c:	a902      	add	r1, sp, #8
 800e90e:	9301      	str	r3, [sp, #4]
 800e910:	f002 f9fc 	bl	8010d0c <_svfiprintf_r>
 800e914:	1c43      	adds	r3, r0, #1
 800e916:	da01      	bge.n	800e91c <sniprintf+0x58>
 800e918:	238b      	movs	r3, #139	; 0x8b
 800e91a:	602b      	str	r3, [r5, #0]
 800e91c:	2c00      	cmp	r4, #0
 800e91e:	d0dd      	beq.n	800e8dc <sniprintf+0x18>
 800e920:	2200      	movs	r2, #0
 800e922:	9b02      	ldr	r3, [sp, #8]
 800e924:	701a      	strb	r2, [r3, #0]
 800e926:	e7d9      	b.n	800e8dc <sniprintf+0x18>
 800e928:	200002f0 	.word	0x200002f0

0800e92c <siprintf>:
 800e92c:	b40e      	push	{r1, r2, r3}
 800e92e:	b500      	push	{lr}
 800e930:	490b      	ldr	r1, [pc, #44]	; (800e960 <siprintf+0x34>)
 800e932:	b09c      	sub	sp, #112	; 0x70
 800e934:	ab1d      	add	r3, sp, #116	; 0x74
 800e936:	9002      	str	r0, [sp, #8]
 800e938:	9006      	str	r0, [sp, #24]
 800e93a:	9107      	str	r1, [sp, #28]
 800e93c:	9104      	str	r1, [sp, #16]
 800e93e:	4809      	ldr	r0, [pc, #36]	; (800e964 <siprintf+0x38>)
 800e940:	4909      	ldr	r1, [pc, #36]	; (800e968 <siprintf+0x3c>)
 800e942:	cb04      	ldmia	r3!, {r2}
 800e944:	9105      	str	r1, [sp, #20]
 800e946:	6800      	ldr	r0, [r0, #0]
 800e948:	a902      	add	r1, sp, #8
 800e94a:	9301      	str	r3, [sp, #4]
 800e94c:	f002 f9de 	bl	8010d0c <_svfiprintf_r>
 800e950:	2200      	movs	r2, #0
 800e952:	9b02      	ldr	r3, [sp, #8]
 800e954:	701a      	strb	r2, [r3, #0]
 800e956:	b01c      	add	sp, #112	; 0x70
 800e958:	bc08      	pop	{r3}
 800e95a:	b003      	add	sp, #12
 800e95c:	4718      	bx	r3
 800e95e:	46c0      	nop			; (mov r8, r8)
 800e960:	7fffffff 	.word	0x7fffffff
 800e964:	200002f0 	.word	0x200002f0
 800e968:	ffff0208 	.word	0xffff0208

0800e96c <__sread>:
 800e96c:	b570      	push	{r4, r5, r6, lr}
 800e96e:	000c      	movs	r4, r1
 800e970:	250e      	movs	r5, #14
 800e972:	5f49      	ldrsh	r1, [r1, r5]
 800e974:	f000 f99e 	bl	800ecb4 <_read_r>
 800e978:	2800      	cmp	r0, #0
 800e97a:	db03      	blt.n	800e984 <__sread+0x18>
 800e97c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e97e:	181b      	adds	r3, r3, r0
 800e980:	6563      	str	r3, [r4, #84]	; 0x54
 800e982:	bd70      	pop	{r4, r5, r6, pc}
 800e984:	89a3      	ldrh	r3, [r4, #12]
 800e986:	4a02      	ldr	r2, [pc, #8]	; (800e990 <__sread+0x24>)
 800e988:	4013      	ands	r3, r2
 800e98a:	81a3      	strh	r3, [r4, #12]
 800e98c:	e7f9      	b.n	800e982 <__sread+0x16>
 800e98e:	46c0      	nop			; (mov r8, r8)
 800e990:	ffffefff 	.word	0xffffefff

0800e994 <__swrite>:
 800e994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e996:	001f      	movs	r7, r3
 800e998:	898b      	ldrh	r3, [r1, #12]
 800e99a:	0005      	movs	r5, r0
 800e99c:	000c      	movs	r4, r1
 800e99e:	0016      	movs	r6, r2
 800e9a0:	05db      	lsls	r3, r3, #23
 800e9a2:	d505      	bpl.n	800e9b0 <__swrite+0x1c>
 800e9a4:	230e      	movs	r3, #14
 800e9a6:	5ec9      	ldrsh	r1, [r1, r3]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	2302      	movs	r3, #2
 800e9ac:	f000 f96e 	bl	800ec8c <_lseek_r>
 800e9b0:	89a3      	ldrh	r3, [r4, #12]
 800e9b2:	4a05      	ldr	r2, [pc, #20]	; (800e9c8 <__swrite+0x34>)
 800e9b4:	0028      	movs	r0, r5
 800e9b6:	4013      	ands	r3, r2
 800e9b8:	81a3      	strh	r3, [r4, #12]
 800e9ba:	0032      	movs	r2, r6
 800e9bc:	230e      	movs	r3, #14
 800e9be:	5ee1      	ldrsh	r1, [r4, r3]
 800e9c0:	003b      	movs	r3, r7
 800e9c2:	f000 f99d 	bl	800ed00 <_write_r>
 800e9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9c8:	ffffefff 	.word	0xffffefff

0800e9cc <__sseek>:
 800e9cc:	b570      	push	{r4, r5, r6, lr}
 800e9ce:	000c      	movs	r4, r1
 800e9d0:	250e      	movs	r5, #14
 800e9d2:	5f49      	ldrsh	r1, [r1, r5]
 800e9d4:	f000 f95a 	bl	800ec8c <_lseek_r>
 800e9d8:	89a3      	ldrh	r3, [r4, #12]
 800e9da:	1c42      	adds	r2, r0, #1
 800e9dc:	d103      	bne.n	800e9e6 <__sseek+0x1a>
 800e9de:	4a05      	ldr	r2, [pc, #20]	; (800e9f4 <__sseek+0x28>)
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	81a3      	strh	r3, [r4, #12]
 800e9e4:	bd70      	pop	{r4, r5, r6, pc}
 800e9e6:	2280      	movs	r2, #128	; 0x80
 800e9e8:	0152      	lsls	r2, r2, #5
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	81a3      	strh	r3, [r4, #12]
 800e9ee:	6560      	str	r0, [r4, #84]	; 0x54
 800e9f0:	e7f8      	b.n	800e9e4 <__sseek+0x18>
 800e9f2:	46c0      	nop			; (mov r8, r8)
 800e9f4:	ffffefff 	.word	0xffffefff

0800e9f8 <__sclose>:
 800e9f8:	b510      	push	{r4, lr}
 800e9fa:	230e      	movs	r3, #14
 800e9fc:	5ec9      	ldrsh	r1, [r1, r3]
 800e9fe:	f000 f8d5 	bl	800ebac <_close_r>
 800ea02:	bd10      	pop	{r4, pc}

0800ea04 <memset>:
 800ea04:	0003      	movs	r3, r0
 800ea06:	1882      	adds	r2, r0, r2
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d100      	bne.n	800ea0e <memset+0xa>
 800ea0c:	4770      	bx	lr
 800ea0e:	7019      	strb	r1, [r3, #0]
 800ea10:	3301      	adds	r3, #1
 800ea12:	e7f9      	b.n	800ea08 <memset+0x4>

0800ea14 <strcat>:
 800ea14:	0002      	movs	r2, r0
 800ea16:	b510      	push	{r4, lr}
 800ea18:	7813      	ldrb	r3, [r2, #0]
 800ea1a:	0014      	movs	r4, r2
 800ea1c:	3201      	adds	r2, #1
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1fa      	bne.n	800ea18 <strcat+0x4>
 800ea22:	5cca      	ldrb	r2, [r1, r3]
 800ea24:	54e2      	strb	r2, [r4, r3]
 800ea26:	3301      	adds	r3, #1
 800ea28:	2a00      	cmp	r2, #0
 800ea2a:	d1fa      	bne.n	800ea22 <strcat+0xe>
 800ea2c:	bd10      	pop	{r4, pc}

0800ea2e <strchr>:
 800ea2e:	b2c9      	uxtb	r1, r1
 800ea30:	7803      	ldrb	r3, [r0, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d004      	beq.n	800ea40 <strchr+0x12>
 800ea36:	428b      	cmp	r3, r1
 800ea38:	d100      	bne.n	800ea3c <strchr+0xe>
 800ea3a:	4770      	bx	lr
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	e7f7      	b.n	800ea30 <strchr+0x2>
 800ea40:	424b      	negs	r3, r1
 800ea42:	4159      	adcs	r1, r3
 800ea44:	4249      	negs	r1, r1
 800ea46:	4008      	ands	r0, r1
 800ea48:	e7f7      	b.n	800ea3a <strchr+0xc>

0800ea4a <strncmp>:
 800ea4a:	b530      	push	{r4, r5, lr}
 800ea4c:	0005      	movs	r5, r0
 800ea4e:	1e10      	subs	r0, r2, #0
 800ea50:	d00b      	beq.n	800ea6a <strncmp+0x20>
 800ea52:	2400      	movs	r4, #0
 800ea54:	3a01      	subs	r2, #1
 800ea56:	5d2b      	ldrb	r3, [r5, r4]
 800ea58:	5d08      	ldrb	r0, [r1, r4]
 800ea5a:	4283      	cmp	r3, r0
 800ea5c:	d104      	bne.n	800ea68 <strncmp+0x1e>
 800ea5e:	42a2      	cmp	r2, r4
 800ea60:	d002      	beq.n	800ea68 <strncmp+0x1e>
 800ea62:	3401      	adds	r4, #1
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d1f6      	bne.n	800ea56 <strncmp+0xc>
 800ea68:	1a18      	subs	r0, r3, r0
 800ea6a:	bd30      	pop	{r4, r5, pc}

0800ea6c <strncpy>:
 800ea6c:	0003      	movs	r3, r0
 800ea6e:	b530      	push	{r4, r5, lr}
 800ea70:	001d      	movs	r5, r3
 800ea72:	2a00      	cmp	r2, #0
 800ea74:	d006      	beq.n	800ea84 <strncpy+0x18>
 800ea76:	780c      	ldrb	r4, [r1, #0]
 800ea78:	3a01      	subs	r2, #1
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	702c      	strb	r4, [r5, #0]
 800ea7e:	3101      	adds	r1, #1
 800ea80:	2c00      	cmp	r4, #0
 800ea82:	d1f5      	bne.n	800ea70 <strncpy+0x4>
 800ea84:	2100      	movs	r1, #0
 800ea86:	189a      	adds	r2, r3, r2
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d100      	bne.n	800ea8e <strncpy+0x22>
 800ea8c:	bd30      	pop	{r4, r5, pc}
 800ea8e:	7019      	strb	r1, [r3, #0]
 800ea90:	3301      	adds	r3, #1
 800ea92:	e7f9      	b.n	800ea88 <strncpy+0x1c>

0800ea94 <strtok>:
 800ea94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea96:	4b16      	ldr	r3, [pc, #88]	; (800eaf0 <strtok+0x5c>)
 800ea98:	0005      	movs	r5, r0
 800ea9a:	681f      	ldr	r7, [r3, #0]
 800ea9c:	000e      	movs	r6, r1
 800ea9e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800eaa0:	2c00      	cmp	r4, #0
 800eaa2:	d11d      	bne.n	800eae0 <strtok+0x4c>
 800eaa4:	2050      	movs	r0, #80	; 0x50
 800eaa6:	f7fe f837 	bl	800cb18 <malloc>
 800eaaa:	1e02      	subs	r2, r0, #0
 800eaac:	6478      	str	r0, [r7, #68]	; 0x44
 800eaae:	d104      	bne.n	800eaba <strtok+0x26>
 800eab0:	215b      	movs	r1, #91	; 0x5b
 800eab2:	4b10      	ldr	r3, [pc, #64]	; (800eaf4 <strtok+0x60>)
 800eab4:	4810      	ldr	r0, [pc, #64]	; (800eaf8 <strtok+0x64>)
 800eab6:	f000 f98b 	bl	800edd0 <__assert_func>
 800eaba:	6004      	str	r4, [r0, #0]
 800eabc:	6044      	str	r4, [r0, #4]
 800eabe:	6084      	str	r4, [r0, #8]
 800eac0:	60c4      	str	r4, [r0, #12]
 800eac2:	6104      	str	r4, [r0, #16]
 800eac4:	6144      	str	r4, [r0, #20]
 800eac6:	6184      	str	r4, [r0, #24]
 800eac8:	6284      	str	r4, [r0, #40]	; 0x28
 800eaca:	62c4      	str	r4, [r0, #44]	; 0x2c
 800eacc:	6304      	str	r4, [r0, #48]	; 0x30
 800eace:	6344      	str	r4, [r0, #52]	; 0x34
 800ead0:	6384      	str	r4, [r0, #56]	; 0x38
 800ead2:	63c4      	str	r4, [r0, #60]	; 0x3c
 800ead4:	6404      	str	r4, [r0, #64]	; 0x40
 800ead6:	6444      	str	r4, [r0, #68]	; 0x44
 800ead8:	6484      	str	r4, [r0, #72]	; 0x48
 800eada:	64c4      	str	r4, [r0, #76]	; 0x4c
 800eadc:	7704      	strb	r4, [r0, #28]
 800eade:	6244      	str	r4, [r0, #36]	; 0x24
 800eae0:	0031      	movs	r1, r6
 800eae2:	0028      	movs	r0, r5
 800eae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eae6:	2301      	movs	r3, #1
 800eae8:	f000 f808 	bl	800eafc <__strtok_r>
 800eaec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaee:	46c0      	nop			; (mov r8, r8)
 800eaf0:	200002f0 	.word	0x200002f0
 800eaf4:	08013b52 	.word	0x08013b52
 800eaf8:	08013b69 	.word	0x08013b69

0800eafc <__strtok_r>:
 800eafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d102      	bne.n	800eb08 <__strtok_r+0xc>
 800eb02:	6810      	ldr	r0, [r2, #0]
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d013      	beq.n	800eb30 <__strtok_r+0x34>
 800eb08:	0004      	movs	r4, r0
 800eb0a:	0020      	movs	r0, r4
 800eb0c:	000e      	movs	r6, r1
 800eb0e:	7805      	ldrb	r5, [r0, #0]
 800eb10:	3401      	adds	r4, #1
 800eb12:	7837      	ldrb	r7, [r6, #0]
 800eb14:	2f00      	cmp	r7, #0
 800eb16:	d104      	bne.n	800eb22 <__strtok_r+0x26>
 800eb18:	2d00      	cmp	r5, #0
 800eb1a:	d10f      	bne.n	800eb3c <__strtok_r+0x40>
 800eb1c:	0028      	movs	r0, r5
 800eb1e:	6015      	str	r5, [r2, #0]
 800eb20:	e006      	b.n	800eb30 <__strtok_r+0x34>
 800eb22:	3601      	adds	r6, #1
 800eb24:	42bd      	cmp	r5, r7
 800eb26:	d1f4      	bne.n	800eb12 <__strtok_r+0x16>
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1ee      	bne.n	800eb0a <__strtok_r+0xe>
 800eb2c:	6014      	str	r4, [r2, #0]
 800eb2e:	7003      	strb	r3, [r0, #0]
 800eb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb32:	002f      	movs	r7, r5
 800eb34:	e00f      	b.n	800eb56 <__strtok_r+0x5a>
 800eb36:	3301      	adds	r3, #1
 800eb38:	2e00      	cmp	r6, #0
 800eb3a:	d104      	bne.n	800eb46 <__strtok_r+0x4a>
 800eb3c:	0023      	movs	r3, r4
 800eb3e:	3401      	adds	r4, #1
 800eb40:	781d      	ldrb	r5, [r3, #0]
 800eb42:	0027      	movs	r7, r4
 800eb44:	000b      	movs	r3, r1
 800eb46:	781e      	ldrb	r6, [r3, #0]
 800eb48:	42b5      	cmp	r5, r6
 800eb4a:	d1f4      	bne.n	800eb36 <__strtok_r+0x3a>
 800eb4c:	2d00      	cmp	r5, #0
 800eb4e:	d0f0      	beq.n	800eb32 <__strtok_r+0x36>
 800eb50:	2300      	movs	r3, #0
 800eb52:	3c01      	subs	r4, #1
 800eb54:	7023      	strb	r3, [r4, #0]
 800eb56:	6017      	str	r7, [r2, #0]
 800eb58:	e7ea      	b.n	800eb30 <__strtok_r+0x34>

0800eb5a <strtok_r>:
 800eb5a:	b510      	push	{r4, lr}
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	f7ff ffcd 	bl	800eafc <__strtok_r>
 800eb62:	bd10      	pop	{r4, pc}

0800eb64 <strstr>:
 800eb64:	780a      	ldrb	r2, [r1, #0]
 800eb66:	b530      	push	{r4, r5, lr}
 800eb68:	2a00      	cmp	r2, #0
 800eb6a:	d10c      	bne.n	800eb86 <strstr+0x22>
 800eb6c:	bd30      	pop	{r4, r5, pc}
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d108      	bne.n	800eb84 <strstr+0x20>
 800eb72:	2301      	movs	r3, #1
 800eb74:	5ccc      	ldrb	r4, [r1, r3]
 800eb76:	2c00      	cmp	r4, #0
 800eb78:	d0f8      	beq.n	800eb6c <strstr+0x8>
 800eb7a:	5cc5      	ldrb	r5, [r0, r3]
 800eb7c:	42a5      	cmp	r5, r4
 800eb7e:	d101      	bne.n	800eb84 <strstr+0x20>
 800eb80:	3301      	adds	r3, #1
 800eb82:	e7f7      	b.n	800eb74 <strstr+0x10>
 800eb84:	3001      	adds	r0, #1
 800eb86:	7803      	ldrb	r3, [r0, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1f0      	bne.n	800eb6e <strstr+0xa>
 800eb8c:	0018      	movs	r0, r3
 800eb8e:	e7ed      	b.n	800eb6c <strstr+0x8>

0800eb90 <stpcpy>:
 800eb90:	0003      	movs	r3, r0
 800eb92:	780a      	ldrb	r2, [r1, #0]
 800eb94:	0018      	movs	r0, r3
 800eb96:	701a      	strb	r2, [r3, #0]
 800eb98:	3101      	adds	r1, #1
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	2a00      	cmp	r2, #0
 800eb9e:	d1f8      	bne.n	800eb92 <stpcpy+0x2>
 800eba0:	4770      	bx	lr
	...

0800eba4 <_localeconv_r>:
 800eba4:	4800      	ldr	r0, [pc, #0]	; (800eba8 <_localeconv_r+0x4>)
 800eba6:	4770      	bx	lr
 800eba8:	20000228 	.word	0x20000228

0800ebac <_close_r>:
 800ebac:	2300      	movs	r3, #0
 800ebae:	b570      	push	{r4, r5, r6, lr}
 800ebb0:	4d06      	ldr	r5, [pc, #24]	; (800ebcc <_close_r+0x20>)
 800ebb2:	0004      	movs	r4, r0
 800ebb4:	0008      	movs	r0, r1
 800ebb6:	602b      	str	r3, [r5, #0]
 800ebb8:	f7f8 feda 	bl	8007970 <_close>
 800ebbc:	1c43      	adds	r3, r0, #1
 800ebbe:	d103      	bne.n	800ebc8 <_close_r+0x1c>
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d000      	beq.n	800ebc8 <_close_r+0x1c>
 800ebc6:	6023      	str	r3, [r4, #0]
 800ebc8:	bd70      	pop	{r4, r5, r6, pc}
 800ebca:	46c0      	nop			; (mov r8, r8)
 800ebcc:	20006810 	.word	0x20006810

0800ebd0 <_reclaim_reent>:
 800ebd0:	4b2d      	ldr	r3, [pc, #180]	; (800ec88 <_reclaim_reent+0xb8>)
 800ebd2:	b570      	push	{r4, r5, r6, lr}
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	0004      	movs	r4, r0
 800ebd8:	4283      	cmp	r3, r0
 800ebda:	d042      	beq.n	800ec62 <_reclaim_reent+0x92>
 800ebdc:	69c3      	ldr	r3, [r0, #28]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00a      	beq.n	800ebf8 <_reclaim_reent+0x28>
 800ebe2:	2500      	movs	r5, #0
 800ebe4:	68db      	ldr	r3, [r3, #12]
 800ebe6:	42ab      	cmp	r3, r5
 800ebe8:	d140      	bne.n	800ec6c <_reclaim_reent+0x9c>
 800ebea:	69e3      	ldr	r3, [r4, #28]
 800ebec:	6819      	ldr	r1, [r3, #0]
 800ebee:	2900      	cmp	r1, #0
 800ebf0:	d002      	beq.n	800ebf8 <_reclaim_reent+0x28>
 800ebf2:	0020      	movs	r0, r4
 800ebf4:	f000 ffa8 	bl	800fb48 <_free_r>
 800ebf8:	6961      	ldr	r1, [r4, #20]
 800ebfa:	2900      	cmp	r1, #0
 800ebfc:	d002      	beq.n	800ec04 <_reclaim_reent+0x34>
 800ebfe:	0020      	movs	r0, r4
 800ec00:	f000 ffa2 	bl	800fb48 <_free_r>
 800ec04:	69e1      	ldr	r1, [r4, #28]
 800ec06:	2900      	cmp	r1, #0
 800ec08:	d002      	beq.n	800ec10 <_reclaim_reent+0x40>
 800ec0a:	0020      	movs	r0, r4
 800ec0c:	f000 ff9c 	bl	800fb48 <_free_r>
 800ec10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ec12:	2900      	cmp	r1, #0
 800ec14:	d002      	beq.n	800ec1c <_reclaim_reent+0x4c>
 800ec16:	0020      	movs	r0, r4
 800ec18:	f000 ff96 	bl	800fb48 <_free_r>
 800ec1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec1e:	2900      	cmp	r1, #0
 800ec20:	d002      	beq.n	800ec28 <_reclaim_reent+0x58>
 800ec22:	0020      	movs	r0, r4
 800ec24:	f000 ff90 	bl	800fb48 <_free_r>
 800ec28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec2a:	2900      	cmp	r1, #0
 800ec2c:	d002      	beq.n	800ec34 <_reclaim_reent+0x64>
 800ec2e:	0020      	movs	r0, r4
 800ec30:	f000 ff8a 	bl	800fb48 <_free_r>
 800ec34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ec36:	2900      	cmp	r1, #0
 800ec38:	d002      	beq.n	800ec40 <_reclaim_reent+0x70>
 800ec3a:	0020      	movs	r0, r4
 800ec3c:	f000 ff84 	bl	800fb48 <_free_r>
 800ec40:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ec42:	2900      	cmp	r1, #0
 800ec44:	d002      	beq.n	800ec4c <_reclaim_reent+0x7c>
 800ec46:	0020      	movs	r0, r4
 800ec48:	f000 ff7e 	bl	800fb48 <_free_r>
 800ec4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ec4e:	2900      	cmp	r1, #0
 800ec50:	d002      	beq.n	800ec58 <_reclaim_reent+0x88>
 800ec52:	0020      	movs	r0, r4
 800ec54:	f000 ff78 	bl	800fb48 <_free_r>
 800ec58:	6a23      	ldr	r3, [r4, #32]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d001      	beq.n	800ec62 <_reclaim_reent+0x92>
 800ec5e:	0020      	movs	r0, r4
 800ec60:	4798      	blx	r3
 800ec62:	bd70      	pop	{r4, r5, r6, pc}
 800ec64:	5949      	ldr	r1, [r1, r5]
 800ec66:	2900      	cmp	r1, #0
 800ec68:	d108      	bne.n	800ec7c <_reclaim_reent+0xac>
 800ec6a:	3504      	adds	r5, #4
 800ec6c:	69e3      	ldr	r3, [r4, #28]
 800ec6e:	68d9      	ldr	r1, [r3, #12]
 800ec70:	2d80      	cmp	r5, #128	; 0x80
 800ec72:	d1f7      	bne.n	800ec64 <_reclaim_reent+0x94>
 800ec74:	0020      	movs	r0, r4
 800ec76:	f000 ff67 	bl	800fb48 <_free_r>
 800ec7a:	e7b6      	b.n	800ebea <_reclaim_reent+0x1a>
 800ec7c:	680e      	ldr	r6, [r1, #0]
 800ec7e:	0020      	movs	r0, r4
 800ec80:	f000 ff62 	bl	800fb48 <_free_r>
 800ec84:	0031      	movs	r1, r6
 800ec86:	e7ee      	b.n	800ec66 <_reclaim_reent+0x96>
 800ec88:	200002f0 	.word	0x200002f0

0800ec8c <_lseek_r>:
 800ec8c:	b570      	push	{r4, r5, r6, lr}
 800ec8e:	0004      	movs	r4, r0
 800ec90:	0008      	movs	r0, r1
 800ec92:	0011      	movs	r1, r2
 800ec94:	001a      	movs	r2, r3
 800ec96:	2300      	movs	r3, #0
 800ec98:	4d05      	ldr	r5, [pc, #20]	; (800ecb0 <_lseek_r+0x24>)
 800ec9a:	602b      	str	r3, [r5, #0]
 800ec9c:	f7f8 fe74 	bl	8007988 <_lseek>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	d103      	bne.n	800ecac <_lseek_r+0x20>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d000      	beq.n	800ecac <_lseek_r+0x20>
 800ecaa:	6023      	str	r3, [r4, #0]
 800ecac:	bd70      	pop	{r4, r5, r6, pc}
 800ecae:	46c0      	nop			; (mov r8, r8)
 800ecb0:	20006810 	.word	0x20006810

0800ecb4 <_read_r>:
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	0004      	movs	r4, r0
 800ecb8:	0008      	movs	r0, r1
 800ecba:	0011      	movs	r1, r2
 800ecbc:	001a      	movs	r2, r3
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	4d05      	ldr	r5, [pc, #20]	; (800ecd8 <_read_r+0x24>)
 800ecc2:	602b      	str	r3, [r5, #0]
 800ecc4:	f7f8 fe38 	bl	8007938 <_read>
 800ecc8:	1c43      	adds	r3, r0, #1
 800ecca:	d103      	bne.n	800ecd4 <_read_r+0x20>
 800eccc:	682b      	ldr	r3, [r5, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d000      	beq.n	800ecd4 <_read_r+0x20>
 800ecd2:	6023      	str	r3, [r4, #0]
 800ecd4:	bd70      	pop	{r4, r5, r6, pc}
 800ecd6:	46c0      	nop			; (mov r8, r8)
 800ecd8:	20006810 	.word	0x20006810

0800ecdc <_sbrk_r>:
 800ecdc:	2300      	movs	r3, #0
 800ecde:	b570      	push	{r4, r5, r6, lr}
 800ece0:	4d06      	ldr	r5, [pc, #24]	; (800ecfc <_sbrk_r+0x20>)
 800ece2:	0004      	movs	r4, r0
 800ece4:	0008      	movs	r0, r1
 800ece6:	602b      	str	r3, [r5, #0]
 800ece8:	f7f8 fe50 	bl	800798c <_sbrk>
 800ecec:	1c43      	adds	r3, r0, #1
 800ecee:	d103      	bne.n	800ecf8 <_sbrk_r+0x1c>
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d000      	beq.n	800ecf8 <_sbrk_r+0x1c>
 800ecf6:	6023      	str	r3, [r4, #0]
 800ecf8:	bd70      	pop	{r4, r5, r6, pc}
 800ecfa:	46c0      	nop			; (mov r8, r8)
 800ecfc:	20006810 	.word	0x20006810

0800ed00 <_write_r>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	0004      	movs	r4, r0
 800ed04:	0008      	movs	r0, r1
 800ed06:	0011      	movs	r1, r2
 800ed08:	001a      	movs	r2, r3
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	4d05      	ldr	r5, [pc, #20]	; (800ed24 <_write_r+0x24>)
 800ed0e:	602b      	str	r3, [r5, #0]
 800ed10:	f7f8 fe20 	bl	8007954 <_write>
 800ed14:	1c43      	adds	r3, r0, #1
 800ed16:	d103      	bne.n	800ed20 <_write_r+0x20>
 800ed18:	682b      	ldr	r3, [r5, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d000      	beq.n	800ed20 <_write_r+0x20>
 800ed1e:	6023      	str	r3, [r4, #0]
 800ed20:	bd70      	pop	{r4, r5, r6, pc}
 800ed22:	46c0      	nop			; (mov r8, r8)
 800ed24:	20006810 	.word	0x20006810

0800ed28 <__errno>:
 800ed28:	4b01      	ldr	r3, [pc, #4]	; (800ed30 <__errno+0x8>)
 800ed2a:	6818      	ldr	r0, [r3, #0]
 800ed2c:	4770      	bx	lr
 800ed2e:	46c0      	nop			; (mov r8, r8)
 800ed30:	200002f0 	.word	0x200002f0

0800ed34 <__libc_init_array>:
 800ed34:	b570      	push	{r4, r5, r6, lr}
 800ed36:	2600      	movs	r6, #0
 800ed38:	4c0c      	ldr	r4, [pc, #48]	; (800ed6c <__libc_init_array+0x38>)
 800ed3a:	4d0d      	ldr	r5, [pc, #52]	; (800ed70 <__libc_init_array+0x3c>)
 800ed3c:	1b64      	subs	r4, r4, r5
 800ed3e:	10a4      	asrs	r4, r4, #2
 800ed40:	42a6      	cmp	r6, r4
 800ed42:	d109      	bne.n	800ed58 <__libc_init_array+0x24>
 800ed44:	2600      	movs	r6, #0
 800ed46:	f003 fbef 	bl	8012528 <_init>
 800ed4a:	4c0a      	ldr	r4, [pc, #40]	; (800ed74 <__libc_init_array+0x40>)
 800ed4c:	4d0a      	ldr	r5, [pc, #40]	; (800ed78 <__libc_init_array+0x44>)
 800ed4e:	1b64      	subs	r4, r4, r5
 800ed50:	10a4      	asrs	r4, r4, #2
 800ed52:	42a6      	cmp	r6, r4
 800ed54:	d105      	bne.n	800ed62 <__libc_init_array+0x2e>
 800ed56:	bd70      	pop	{r4, r5, r6, pc}
 800ed58:	00b3      	lsls	r3, r6, #2
 800ed5a:	58eb      	ldr	r3, [r5, r3]
 800ed5c:	4798      	blx	r3
 800ed5e:	3601      	adds	r6, #1
 800ed60:	e7ee      	b.n	800ed40 <__libc_init_array+0xc>
 800ed62:	00b3      	lsls	r3, r6, #2
 800ed64:	58eb      	ldr	r3, [r5, r3]
 800ed66:	4798      	blx	r3
 800ed68:	3601      	adds	r6, #1
 800ed6a:	e7f2      	b.n	800ed52 <__libc_init_array+0x1e>
 800ed6c:	08013e78 	.word	0x08013e78
 800ed70:	08013e78 	.word	0x08013e78
 800ed74:	08013e7c 	.word	0x08013e7c
 800ed78:	08013e78 	.word	0x08013e78

0800ed7c <__retarget_lock_init_recursive>:
 800ed7c:	4770      	bx	lr

0800ed7e <__retarget_lock_acquire_recursive>:
 800ed7e:	4770      	bx	lr

0800ed80 <__retarget_lock_release_recursive>:
 800ed80:	4770      	bx	lr

0800ed82 <strcpy>:
 800ed82:	0003      	movs	r3, r0
 800ed84:	780a      	ldrb	r2, [r1, #0]
 800ed86:	3101      	adds	r1, #1
 800ed88:	701a      	strb	r2, [r3, #0]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	2a00      	cmp	r2, #0
 800ed8e:	d1f9      	bne.n	800ed84 <strcpy+0x2>
 800ed90:	4770      	bx	lr

0800ed92 <memchr>:
 800ed92:	b2c9      	uxtb	r1, r1
 800ed94:	1882      	adds	r2, r0, r2
 800ed96:	4290      	cmp	r0, r2
 800ed98:	d101      	bne.n	800ed9e <memchr+0xc>
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	4770      	bx	lr
 800ed9e:	7803      	ldrb	r3, [r0, #0]
 800eda0:	428b      	cmp	r3, r1
 800eda2:	d0fb      	beq.n	800ed9c <memchr+0xa>
 800eda4:	3001      	adds	r0, #1
 800eda6:	e7f6      	b.n	800ed96 <memchr+0x4>

0800eda8 <memcpy>:
 800eda8:	2300      	movs	r3, #0
 800edaa:	b510      	push	{r4, lr}
 800edac:	429a      	cmp	r2, r3
 800edae:	d100      	bne.n	800edb2 <memcpy+0xa>
 800edb0:	bd10      	pop	{r4, pc}
 800edb2:	5ccc      	ldrb	r4, [r1, r3]
 800edb4:	54c4      	strb	r4, [r0, r3]
 800edb6:	3301      	adds	r3, #1
 800edb8:	e7f8      	b.n	800edac <memcpy+0x4>
	...

0800edbc <nan>:
 800edbc:	2000      	movs	r0, #0
 800edbe:	4901      	ldr	r1, [pc, #4]	; (800edc4 <nan+0x8>)
 800edc0:	4770      	bx	lr
 800edc2:	46c0      	nop			; (mov r8, r8)
 800edc4:	7ff80000 	.word	0x7ff80000

0800edc8 <nanf>:
 800edc8:	4800      	ldr	r0, [pc, #0]	; (800edcc <nanf+0x4>)
 800edca:	4770      	bx	lr
 800edcc:	7fc00000 	.word	0x7fc00000

0800edd0 <__assert_func>:
 800edd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800edd2:	0014      	movs	r4, r2
 800edd4:	001a      	movs	r2, r3
 800edd6:	4b09      	ldr	r3, [pc, #36]	; (800edfc <__assert_func+0x2c>)
 800edd8:	0005      	movs	r5, r0
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	000e      	movs	r6, r1
 800edde:	68d8      	ldr	r0, [r3, #12]
 800ede0:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <__assert_func+0x30>)
 800ede2:	2c00      	cmp	r4, #0
 800ede4:	d101      	bne.n	800edea <__assert_func+0x1a>
 800ede6:	4b07      	ldr	r3, [pc, #28]	; (800ee04 <__assert_func+0x34>)
 800ede8:	001c      	movs	r4, r3
 800edea:	4907      	ldr	r1, [pc, #28]	; (800ee08 <__assert_func+0x38>)
 800edec:	9301      	str	r3, [sp, #4]
 800edee:	9402      	str	r4, [sp, #8]
 800edf0:	002b      	movs	r3, r5
 800edf2:	9600      	str	r6, [sp, #0]
 800edf4:	f002 f940 	bl	8011078 <fiprintf>
 800edf8:	f002 f961 	bl	80110be <abort>
 800edfc:	200002f0 	.word	0x200002f0
 800ee00:	08013bcb 	.word	0x08013bcb
 800ee04:	08013c06 	.word	0x08013c06
 800ee08:	08013bd8 	.word	0x08013bd8

0800ee0c <quorem>:
 800ee0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee0e:	6902      	ldr	r2, [r0, #16]
 800ee10:	690b      	ldr	r3, [r1, #16]
 800ee12:	b089      	sub	sp, #36	; 0x24
 800ee14:	0007      	movs	r7, r0
 800ee16:	9104      	str	r1, [sp, #16]
 800ee18:	2000      	movs	r0, #0
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	db69      	blt.n	800eef2 <quorem+0xe6>
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	009c      	lsls	r4, r3, #2
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	000b      	movs	r3, r1
 800ee26:	3314      	adds	r3, #20
 800ee28:	9306      	str	r3, [sp, #24]
 800ee2a:	191b      	adds	r3, r3, r4
 800ee2c:	9305      	str	r3, [sp, #20]
 800ee2e:	003b      	movs	r3, r7
 800ee30:	3314      	adds	r3, #20
 800ee32:	9303      	str	r3, [sp, #12]
 800ee34:	191c      	adds	r4, r3, r4
 800ee36:	9b05      	ldr	r3, [sp, #20]
 800ee38:	6826      	ldr	r6, [r4, #0]
 800ee3a:	681d      	ldr	r5, [r3, #0]
 800ee3c:	0030      	movs	r0, r6
 800ee3e:	3501      	adds	r5, #1
 800ee40:	0029      	movs	r1, r5
 800ee42:	f7f1 f97d 	bl	8000140 <__udivsi3>
 800ee46:	9002      	str	r0, [sp, #8]
 800ee48:	42ae      	cmp	r6, r5
 800ee4a:	d329      	bcc.n	800eea0 <quorem+0x94>
 800ee4c:	9b06      	ldr	r3, [sp, #24]
 800ee4e:	2600      	movs	r6, #0
 800ee50:	469c      	mov	ip, r3
 800ee52:	9d03      	ldr	r5, [sp, #12]
 800ee54:	9606      	str	r6, [sp, #24]
 800ee56:	4662      	mov	r2, ip
 800ee58:	ca08      	ldmia	r2!, {r3}
 800ee5a:	6828      	ldr	r0, [r5, #0]
 800ee5c:	4694      	mov	ip, r2
 800ee5e:	9a02      	ldr	r2, [sp, #8]
 800ee60:	b299      	uxth	r1, r3
 800ee62:	4351      	muls	r1, r2
 800ee64:	0c1b      	lsrs	r3, r3, #16
 800ee66:	4353      	muls	r3, r2
 800ee68:	1989      	adds	r1, r1, r6
 800ee6a:	0c0a      	lsrs	r2, r1, #16
 800ee6c:	189b      	adds	r3, r3, r2
 800ee6e:	9307      	str	r3, [sp, #28]
 800ee70:	0c1e      	lsrs	r6, r3, #16
 800ee72:	9b06      	ldr	r3, [sp, #24]
 800ee74:	b282      	uxth	r2, r0
 800ee76:	18d2      	adds	r2, r2, r3
 800ee78:	466b      	mov	r3, sp
 800ee7a:	b289      	uxth	r1, r1
 800ee7c:	8b9b      	ldrh	r3, [r3, #28]
 800ee7e:	1a52      	subs	r2, r2, r1
 800ee80:	0c01      	lsrs	r1, r0, #16
 800ee82:	1ac9      	subs	r1, r1, r3
 800ee84:	1413      	asrs	r3, r2, #16
 800ee86:	18cb      	adds	r3, r1, r3
 800ee88:	1419      	asrs	r1, r3, #16
 800ee8a:	b292      	uxth	r2, r2
 800ee8c:	041b      	lsls	r3, r3, #16
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	c508      	stmia	r5!, {r3}
 800ee92:	9b05      	ldr	r3, [sp, #20]
 800ee94:	9106      	str	r1, [sp, #24]
 800ee96:	4563      	cmp	r3, ip
 800ee98:	d2dd      	bcs.n	800ee56 <quorem+0x4a>
 800ee9a:	6823      	ldr	r3, [r4, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d030      	beq.n	800ef02 <quorem+0xf6>
 800eea0:	0038      	movs	r0, r7
 800eea2:	9904      	ldr	r1, [sp, #16]
 800eea4:	f001 fcda 	bl	801085c <__mcmp>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	db21      	blt.n	800eef0 <quorem+0xe4>
 800eeac:	0038      	movs	r0, r7
 800eeae:	2600      	movs	r6, #0
 800eeb0:	9b02      	ldr	r3, [sp, #8]
 800eeb2:	9c04      	ldr	r4, [sp, #16]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	9302      	str	r3, [sp, #8]
 800eeb8:	3014      	adds	r0, #20
 800eeba:	3414      	adds	r4, #20
 800eebc:	6803      	ldr	r3, [r0, #0]
 800eebe:	cc02      	ldmia	r4!, {r1}
 800eec0:	b29d      	uxth	r5, r3
 800eec2:	19ad      	adds	r5, r5, r6
 800eec4:	b28a      	uxth	r2, r1
 800eec6:	1aaa      	subs	r2, r5, r2
 800eec8:	0c09      	lsrs	r1, r1, #16
 800eeca:	0c1b      	lsrs	r3, r3, #16
 800eecc:	1a5b      	subs	r3, r3, r1
 800eece:	1411      	asrs	r1, r2, #16
 800eed0:	185b      	adds	r3, r3, r1
 800eed2:	141e      	asrs	r6, r3, #16
 800eed4:	b292      	uxth	r2, r2
 800eed6:	041b      	lsls	r3, r3, #16
 800eed8:	4313      	orrs	r3, r2
 800eeda:	c008      	stmia	r0!, {r3}
 800eedc:	9b05      	ldr	r3, [sp, #20]
 800eede:	42a3      	cmp	r3, r4
 800eee0:	d2ec      	bcs.n	800eebc <quorem+0xb0>
 800eee2:	9b01      	ldr	r3, [sp, #4]
 800eee4:	9a03      	ldr	r2, [sp, #12]
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	18d3      	adds	r3, r2, r3
 800eeea:	681a      	ldr	r2, [r3, #0]
 800eeec:	2a00      	cmp	r2, #0
 800eeee:	d015      	beq.n	800ef1c <quorem+0x110>
 800eef0:	9802      	ldr	r0, [sp, #8]
 800eef2:	b009      	add	sp, #36	; 0x24
 800eef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef6:	6823      	ldr	r3, [r4, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d106      	bne.n	800ef0a <quorem+0xfe>
 800eefc:	9b01      	ldr	r3, [sp, #4]
 800eefe:	3b01      	subs	r3, #1
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	9b03      	ldr	r3, [sp, #12]
 800ef04:	3c04      	subs	r4, #4
 800ef06:	42a3      	cmp	r3, r4
 800ef08:	d3f5      	bcc.n	800eef6 <quorem+0xea>
 800ef0a:	9b01      	ldr	r3, [sp, #4]
 800ef0c:	613b      	str	r3, [r7, #16]
 800ef0e:	e7c7      	b.n	800eea0 <quorem+0x94>
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	2a00      	cmp	r2, #0
 800ef14:	d106      	bne.n	800ef24 <quorem+0x118>
 800ef16:	9a01      	ldr	r2, [sp, #4]
 800ef18:	3a01      	subs	r2, #1
 800ef1a:	9201      	str	r2, [sp, #4]
 800ef1c:	9a03      	ldr	r2, [sp, #12]
 800ef1e:	3b04      	subs	r3, #4
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d3f5      	bcc.n	800ef10 <quorem+0x104>
 800ef24:	9b01      	ldr	r3, [sp, #4]
 800ef26:	613b      	str	r3, [r7, #16]
 800ef28:	e7e2      	b.n	800eef0 <quorem+0xe4>
	...

0800ef2c <_dtoa_r>:
 800ef2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef2e:	0014      	movs	r4, r2
 800ef30:	001d      	movs	r5, r3
 800ef32:	69c6      	ldr	r6, [r0, #28]
 800ef34:	b09d      	sub	sp, #116	; 0x74
 800ef36:	9408      	str	r4, [sp, #32]
 800ef38:	9509      	str	r5, [sp, #36]	; 0x24
 800ef3a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800ef3c:	9004      	str	r0, [sp, #16]
 800ef3e:	2e00      	cmp	r6, #0
 800ef40:	d10f      	bne.n	800ef62 <_dtoa_r+0x36>
 800ef42:	2010      	movs	r0, #16
 800ef44:	f7fd fde8 	bl	800cb18 <malloc>
 800ef48:	9b04      	ldr	r3, [sp, #16]
 800ef4a:	1e02      	subs	r2, r0, #0
 800ef4c:	61d8      	str	r0, [r3, #28]
 800ef4e:	d104      	bne.n	800ef5a <_dtoa_r+0x2e>
 800ef50:	21ef      	movs	r1, #239	; 0xef
 800ef52:	4bc6      	ldr	r3, [pc, #792]	; (800f26c <_dtoa_r+0x340>)
 800ef54:	48c6      	ldr	r0, [pc, #792]	; (800f270 <_dtoa_r+0x344>)
 800ef56:	f7ff ff3b 	bl	800edd0 <__assert_func>
 800ef5a:	6046      	str	r6, [r0, #4]
 800ef5c:	6086      	str	r6, [r0, #8]
 800ef5e:	6006      	str	r6, [r0, #0]
 800ef60:	60c6      	str	r6, [r0, #12]
 800ef62:	9b04      	ldr	r3, [sp, #16]
 800ef64:	69db      	ldr	r3, [r3, #28]
 800ef66:	6819      	ldr	r1, [r3, #0]
 800ef68:	2900      	cmp	r1, #0
 800ef6a:	d00b      	beq.n	800ef84 <_dtoa_r+0x58>
 800ef6c:	685a      	ldr	r2, [r3, #4]
 800ef6e:	2301      	movs	r3, #1
 800ef70:	4093      	lsls	r3, r2
 800ef72:	604a      	str	r2, [r1, #4]
 800ef74:	608b      	str	r3, [r1, #8]
 800ef76:	9804      	ldr	r0, [sp, #16]
 800ef78:	f001 f9e2 	bl	8010340 <_Bfree>
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	9b04      	ldr	r3, [sp, #16]
 800ef80:	69db      	ldr	r3, [r3, #28]
 800ef82:	601a      	str	r2, [r3, #0]
 800ef84:	2d00      	cmp	r5, #0
 800ef86:	da1e      	bge.n	800efc6 <_dtoa_r+0x9a>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	603b      	str	r3, [r7, #0]
 800ef8c:	006b      	lsls	r3, r5, #1
 800ef8e:	085b      	lsrs	r3, r3, #1
 800ef90:	9309      	str	r3, [sp, #36]	; 0x24
 800ef92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ef94:	4bb7      	ldr	r3, [pc, #732]	; (800f274 <_dtoa_r+0x348>)
 800ef96:	4ab7      	ldr	r2, [pc, #732]	; (800f274 <_dtoa_r+0x348>)
 800ef98:	403b      	ands	r3, r7
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d116      	bne.n	800efcc <_dtoa_r+0xa0>
 800ef9e:	4bb6      	ldr	r3, [pc, #728]	; (800f278 <_dtoa_r+0x34c>)
 800efa0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800efa2:	6013      	str	r3, [r2, #0]
 800efa4:	033b      	lsls	r3, r7, #12
 800efa6:	0b1b      	lsrs	r3, r3, #12
 800efa8:	4323      	orrs	r3, r4
 800efaa:	d101      	bne.n	800efb0 <_dtoa_r+0x84>
 800efac:	f000 fdb5 	bl	800fb1a <_dtoa_r+0xbee>
 800efb0:	4bb2      	ldr	r3, [pc, #712]	; (800f27c <_dtoa_r+0x350>)
 800efb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800efb4:	9306      	str	r3, [sp, #24]
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	d002      	beq.n	800efc0 <_dtoa_r+0x94>
 800efba:	4bb1      	ldr	r3, [pc, #708]	; (800f280 <_dtoa_r+0x354>)
 800efbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800efbe:	6013      	str	r3, [r2, #0]
 800efc0:	9806      	ldr	r0, [sp, #24]
 800efc2:	b01d      	add	sp, #116	; 0x74
 800efc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc6:	2300      	movs	r3, #0
 800efc8:	603b      	str	r3, [r7, #0]
 800efca:	e7e2      	b.n	800ef92 <_dtoa_r+0x66>
 800efcc:	9a08      	ldr	r2, [sp, #32]
 800efce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efd0:	9210      	str	r2, [sp, #64]	; 0x40
 800efd2:	9311      	str	r3, [sp, #68]	; 0x44
 800efd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800efd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800efd8:	2200      	movs	r2, #0
 800efda:	2300      	movs	r3, #0
 800efdc:	f7f1 fa36 	bl	800044c <__aeabi_dcmpeq>
 800efe0:	1e06      	subs	r6, r0, #0
 800efe2:	d009      	beq.n	800eff8 <_dtoa_r+0xcc>
 800efe4:	2301      	movs	r3, #1
 800efe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800efe8:	6013      	str	r3, [r2, #0]
 800efea:	4ba6      	ldr	r3, [pc, #664]	; (800f284 <_dtoa_r+0x358>)
 800efec:	9306      	str	r3, [sp, #24]
 800efee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d0e5      	beq.n	800efc0 <_dtoa_r+0x94>
 800eff4:	4ba4      	ldr	r3, [pc, #656]	; (800f288 <_dtoa_r+0x35c>)
 800eff6:	e7e1      	b.n	800efbc <_dtoa_r+0x90>
 800eff8:	ab1a      	add	r3, sp, #104	; 0x68
 800effa:	9301      	str	r3, [sp, #4]
 800effc:	ab1b      	add	r3, sp, #108	; 0x6c
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	9804      	ldr	r0, [sp, #16]
 800f002:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f006:	f001 fd45 	bl	8010a94 <__d2b>
 800f00a:	007a      	lsls	r2, r7, #1
 800f00c:	9005      	str	r0, [sp, #20]
 800f00e:	0d52      	lsrs	r2, r2, #21
 800f010:	d100      	bne.n	800f014 <_dtoa_r+0xe8>
 800f012:	e07b      	b.n	800f10c <_dtoa_r+0x1e0>
 800f014:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f016:	9617      	str	r6, [sp, #92]	; 0x5c
 800f018:	0319      	lsls	r1, r3, #12
 800f01a:	4b9c      	ldr	r3, [pc, #624]	; (800f28c <_dtoa_r+0x360>)
 800f01c:	0b09      	lsrs	r1, r1, #12
 800f01e:	430b      	orrs	r3, r1
 800f020:	499b      	ldr	r1, [pc, #620]	; (800f290 <_dtoa_r+0x364>)
 800f022:	1857      	adds	r7, r2, r1
 800f024:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f026:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f028:	0019      	movs	r1, r3
 800f02a:	2200      	movs	r2, #0
 800f02c:	4b99      	ldr	r3, [pc, #612]	; (800f294 <_dtoa_r+0x368>)
 800f02e:	f7f3 fc13 	bl	8002858 <__aeabi_dsub>
 800f032:	4a99      	ldr	r2, [pc, #612]	; (800f298 <_dtoa_r+0x36c>)
 800f034:	4b99      	ldr	r3, [pc, #612]	; (800f29c <_dtoa_r+0x370>)
 800f036:	f7f3 f94d 	bl	80022d4 <__aeabi_dmul>
 800f03a:	4a99      	ldr	r2, [pc, #612]	; (800f2a0 <_dtoa_r+0x374>)
 800f03c:	4b99      	ldr	r3, [pc, #612]	; (800f2a4 <_dtoa_r+0x378>)
 800f03e:	f7f2 f9ef 	bl	8001420 <__aeabi_dadd>
 800f042:	0004      	movs	r4, r0
 800f044:	0038      	movs	r0, r7
 800f046:	000d      	movs	r5, r1
 800f048:	f7f3 ffdc 	bl	8003004 <__aeabi_i2d>
 800f04c:	4a96      	ldr	r2, [pc, #600]	; (800f2a8 <_dtoa_r+0x37c>)
 800f04e:	4b97      	ldr	r3, [pc, #604]	; (800f2ac <_dtoa_r+0x380>)
 800f050:	f7f3 f940 	bl	80022d4 <__aeabi_dmul>
 800f054:	0002      	movs	r2, r0
 800f056:	000b      	movs	r3, r1
 800f058:	0020      	movs	r0, r4
 800f05a:	0029      	movs	r1, r5
 800f05c:	f7f2 f9e0 	bl	8001420 <__aeabi_dadd>
 800f060:	0004      	movs	r4, r0
 800f062:	000d      	movs	r5, r1
 800f064:	f7f3 ff98 	bl	8002f98 <__aeabi_d2iz>
 800f068:	2200      	movs	r2, #0
 800f06a:	9003      	str	r0, [sp, #12]
 800f06c:	2300      	movs	r3, #0
 800f06e:	0020      	movs	r0, r4
 800f070:	0029      	movs	r1, r5
 800f072:	f7f1 f9f1 	bl	8000458 <__aeabi_dcmplt>
 800f076:	2800      	cmp	r0, #0
 800f078:	d00b      	beq.n	800f092 <_dtoa_r+0x166>
 800f07a:	9803      	ldr	r0, [sp, #12]
 800f07c:	f7f3 ffc2 	bl	8003004 <__aeabi_i2d>
 800f080:	002b      	movs	r3, r5
 800f082:	0022      	movs	r2, r4
 800f084:	f7f1 f9e2 	bl	800044c <__aeabi_dcmpeq>
 800f088:	4243      	negs	r3, r0
 800f08a:	4158      	adcs	r0, r3
 800f08c:	9b03      	ldr	r3, [sp, #12]
 800f08e:	1a1b      	subs	r3, r3, r0
 800f090:	9303      	str	r3, [sp, #12]
 800f092:	2301      	movs	r3, #1
 800f094:	9316      	str	r3, [sp, #88]	; 0x58
 800f096:	9b03      	ldr	r3, [sp, #12]
 800f098:	2b16      	cmp	r3, #22
 800f09a:	d810      	bhi.n	800f0be <_dtoa_r+0x192>
 800f09c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f09e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f0a0:	9a03      	ldr	r2, [sp, #12]
 800f0a2:	4b83      	ldr	r3, [pc, #524]	; (800f2b0 <_dtoa_r+0x384>)
 800f0a4:	00d2      	lsls	r2, r2, #3
 800f0a6:	189b      	adds	r3, r3, r2
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	f7f1 f9d4 	bl	8000458 <__aeabi_dcmplt>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d047      	beq.n	800f144 <_dtoa_r+0x218>
 800f0b4:	9b03      	ldr	r3, [sp, #12]
 800f0b6:	3b01      	subs	r3, #1
 800f0b8:	9303      	str	r3, [sp, #12]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	9316      	str	r3, [sp, #88]	; 0x58
 800f0be:	2200      	movs	r2, #0
 800f0c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f0c2:	920a      	str	r2, [sp, #40]	; 0x28
 800f0c4:	1bdb      	subs	r3, r3, r7
 800f0c6:	1e5a      	subs	r2, r3, #1
 800f0c8:	d53e      	bpl.n	800f148 <_dtoa_r+0x21c>
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f0d4:	9b03      	ldr	r3, [sp, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	db38      	blt.n	800f14c <_dtoa_r+0x220>
 800f0da:	9a03      	ldr	r2, [sp, #12]
 800f0dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0de:	4694      	mov	ip, r2
 800f0e0:	4463      	add	r3, ip
 800f0e2:	930c      	str	r3, [sp, #48]	; 0x30
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	9213      	str	r2, [sp, #76]	; 0x4c
 800f0e8:	930d      	str	r3, [sp, #52]	; 0x34
 800f0ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f0ec:	2401      	movs	r4, #1
 800f0ee:	2b09      	cmp	r3, #9
 800f0f0:	d867      	bhi.n	800f1c2 <_dtoa_r+0x296>
 800f0f2:	2b05      	cmp	r3, #5
 800f0f4:	dd02      	ble.n	800f0fc <_dtoa_r+0x1d0>
 800f0f6:	2400      	movs	r4, #0
 800f0f8:	3b04      	subs	r3, #4
 800f0fa:	9322      	str	r3, [sp, #136]	; 0x88
 800f0fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f0fe:	1e98      	subs	r0, r3, #2
 800f100:	2803      	cmp	r0, #3
 800f102:	d867      	bhi.n	800f1d4 <_dtoa_r+0x2a8>
 800f104:	f7f1 f808 	bl	8000118 <__gnu_thumb1_case_uqi>
 800f108:	5b383a2b 	.word	0x5b383a2b
 800f10c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f10e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800f110:	18f6      	adds	r6, r6, r3
 800f112:	4b68      	ldr	r3, [pc, #416]	; (800f2b4 <_dtoa_r+0x388>)
 800f114:	18f2      	adds	r2, r6, r3
 800f116:	2a20      	cmp	r2, #32
 800f118:	dd0f      	ble.n	800f13a <_dtoa_r+0x20e>
 800f11a:	2340      	movs	r3, #64	; 0x40
 800f11c:	1a9b      	subs	r3, r3, r2
 800f11e:	409f      	lsls	r7, r3
 800f120:	4b65      	ldr	r3, [pc, #404]	; (800f2b8 <_dtoa_r+0x38c>)
 800f122:	0038      	movs	r0, r7
 800f124:	18f3      	adds	r3, r6, r3
 800f126:	40dc      	lsrs	r4, r3
 800f128:	4320      	orrs	r0, r4
 800f12a:	f7f3 ff9b 	bl	8003064 <__aeabi_ui2d>
 800f12e:	2201      	movs	r2, #1
 800f130:	4b62      	ldr	r3, [pc, #392]	; (800f2bc <_dtoa_r+0x390>)
 800f132:	1e77      	subs	r7, r6, #1
 800f134:	18cb      	adds	r3, r1, r3
 800f136:	9217      	str	r2, [sp, #92]	; 0x5c
 800f138:	e776      	b.n	800f028 <_dtoa_r+0xfc>
 800f13a:	2320      	movs	r3, #32
 800f13c:	0020      	movs	r0, r4
 800f13e:	1a9b      	subs	r3, r3, r2
 800f140:	4098      	lsls	r0, r3
 800f142:	e7f2      	b.n	800f12a <_dtoa_r+0x1fe>
 800f144:	9016      	str	r0, [sp, #88]	; 0x58
 800f146:	e7ba      	b.n	800f0be <_dtoa_r+0x192>
 800f148:	920c      	str	r2, [sp, #48]	; 0x30
 800f14a:	e7c3      	b.n	800f0d4 <_dtoa_r+0x1a8>
 800f14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f14e:	9a03      	ldr	r2, [sp, #12]
 800f150:	1a9b      	subs	r3, r3, r2
 800f152:	930a      	str	r3, [sp, #40]	; 0x28
 800f154:	4253      	negs	r3, r2
 800f156:	930d      	str	r3, [sp, #52]	; 0x34
 800f158:	2300      	movs	r3, #0
 800f15a:	9313      	str	r3, [sp, #76]	; 0x4c
 800f15c:	e7c5      	b.n	800f0ea <_dtoa_r+0x1be>
 800f15e:	2300      	movs	r3, #0
 800f160:	930f      	str	r3, [sp, #60]	; 0x3c
 800f162:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f164:	930b      	str	r3, [sp, #44]	; 0x2c
 800f166:	9307      	str	r3, [sp, #28]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	dc13      	bgt.n	800f194 <_dtoa_r+0x268>
 800f16c:	2301      	movs	r3, #1
 800f16e:	001a      	movs	r2, r3
 800f170:	930b      	str	r3, [sp, #44]	; 0x2c
 800f172:	9307      	str	r3, [sp, #28]
 800f174:	9223      	str	r2, [sp, #140]	; 0x8c
 800f176:	e00d      	b.n	800f194 <_dtoa_r+0x268>
 800f178:	2301      	movs	r3, #1
 800f17a:	e7f1      	b.n	800f160 <_dtoa_r+0x234>
 800f17c:	2300      	movs	r3, #0
 800f17e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f180:	930f      	str	r3, [sp, #60]	; 0x3c
 800f182:	4694      	mov	ip, r2
 800f184:	9b03      	ldr	r3, [sp, #12]
 800f186:	4463      	add	r3, ip
 800f188:	930b      	str	r3, [sp, #44]	; 0x2c
 800f18a:	3301      	adds	r3, #1
 800f18c:	9307      	str	r3, [sp, #28]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	dc00      	bgt.n	800f194 <_dtoa_r+0x268>
 800f192:	2301      	movs	r3, #1
 800f194:	9a04      	ldr	r2, [sp, #16]
 800f196:	2100      	movs	r1, #0
 800f198:	69d0      	ldr	r0, [r2, #28]
 800f19a:	2204      	movs	r2, #4
 800f19c:	0015      	movs	r5, r2
 800f19e:	3514      	adds	r5, #20
 800f1a0:	429d      	cmp	r5, r3
 800f1a2:	d91b      	bls.n	800f1dc <_dtoa_r+0x2b0>
 800f1a4:	6041      	str	r1, [r0, #4]
 800f1a6:	9804      	ldr	r0, [sp, #16]
 800f1a8:	f001 f886 	bl	80102b8 <_Balloc>
 800f1ac:	9006      	str	r0, [sp, #24]
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d117      	bne.n	800f1e2 <_dtoa_r+0x2b6>
 800f1b2:	21b0      	movs	r1, #176	; 0xb0
 800f1b4:	4b42      	ldr	r3, [pc, #264]	; (800f2c0 <_dtoa_r+0x394>)
 800f1b6:	482e      	ldr	r0, [pc, #184]	; (800f270 <_dtoa_r+0x344>)
 800f1b8:	9a06      	ldr	r2, [sp, #24]
 800f1ba:	31ff      	adds	r1, #255	; 0xff
 800f1bc:	e6cb      	b.n	800ef56 <_dtoa_r+0x2a>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e7dd      	b.n	800f17e <_dtoa_r+0x252>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	940f      	str	r4, [sp, #60]	; 0x3c
 800f1c6:	9322      	str	r3, [sp, #136]	; 0x88
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1cc:	9307      	str	r3, [sp, #28]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	3313      	adds	r3, #19
 800f1d2:	e7cf      	b.n	800f174 <_dtoa_r+0x248>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1d8:	3b02      	subs	r3, #2
 800f1da:	e7f6      	b.n	800f1ca <_dtoa_r+0x29e>
 800f1dc:	3101      	adds	r1, #1
 800f1de:	0052      	lsls	r2, r2, #1
 800f1e0:	e7dc      	b.n	800f19c <_dtoa_r+0x270>
 800f1e2:	9b04      	ldr	r3, [sp, #16]
 800f1e4:	9a06      	ldr	r2, [sp, #24]
 800f1e6:	69db      	ldr	r3, [r3, #28]
 800f1e8:	601a      	str	r2, [r3, #0]
 800f1ea:	9b07      	ldr	r3, [sp, #28]
 800f1ec:	2b0e      	cmp	r3, #14
 800f1ee:	d900      	bls.n	800f1f2 <_dtoa_r+0x2c6>
 800f1f0:	e0e5      	b.n	800f3be <_dtoa_r+0x492>
 800f1f2:	2c00      	cmp	r4, #0
 800f1f4:	d100      	bne.n	800f1f8 <_dtoa_r+0x2cc>
 800f1f6:	e0e2      	b.n	800f3be <_dtoa_r+0x492>
 800f1f8:	9b03      	ldr	r3, [sp, #12]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	dd64      	ble.n	800f2c8 <_dtoa_r+0x39c>
 800f1fe:	210f      	movs	r1, #15
 800f200:	9a03      	ldr	r2, [sp, #12]
 800f202:	4b2b      	ldr	r3, [pc, #172]	; (800f2b0 <_dtoa_r+0x384>)
 800f204:	400a      	ands	r2, r1
 800f206:	00d2      	lsls	r2, r2, #3
 800f208:	189b      	adds	r3, r3, r2
 800f20a:	681e      	ldr	r6, [r3, #0]
 800f20c:	685f      	ldr	r7, [r3, #4]
 800f20e:	9b03      	ldr	r3, [sp, #12]
 800f210:	2402      	movs	r4, #2
 800f212:	111d      	asrs	r5, r3, #4
 800f214:	05db      	lsls	r3, r3, #23
 800f216:	d50a      	bpl.n	800f22e <_dtoa_r+0x302>
 800f218:	4b2a      	ldr	r3, [pc, #168]	; (800f2c4 <_dtoa_r+0x398>)
 800f21a:	400d      	ands	r5, r1
 800f21c:	6a1a      	ldr	r2, [r3, #32]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f220:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f222:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f224:	f7f2 fc5c 	bl	8001ae0 <__aeabi_ddiv>
 800f228:	9008      	str	r0, [sp, #32]
 800f22a:	9109      	str	r1, [sp, #36]	; 0x24
 800f22c:	3401      	adds	r4, #1
 800f22e:	4b25      	ldr	r3, [pc, #148]	; (800f2c4 <_dtoa_r+0x398>)
 800f230:	930e      	str	r3, [sp, #56]	; 0x38
 800f232:	2d00      	cmp	r5, #0
 800f234:	d108      	bne.n	800f248 <_dtoa_r+0x31c>
 800f236:	9808      	ldr	r0, [sp, #32]
 800f238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f23a:	0032      	movs	r2, r6
 800f23c:	003b      	movs	r3, r7
 800f23e:	f7f2 fc4f 	bl	8001ae0 <__aeabi_ddiv>
 800f242:	9008      	str	r0, [sp, #32]
 800f244:	9109      	str	r1, [sp, #36]	; 0x24
 800f246:	e05a      	b.n	800f2fe <_dtoa_r+0x3d2>
 800f248:	2301      	movs	r3, #1
 800f24a:	421d      	tst	r5, r3
 800f24c:	d009      	beq.n	800f262 <_dtoa_r+0x336>
 800f24e:	18e4      	adds	r4, r4, r3
 800f250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f252:	0030      	movs	r0, r6
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	0039      	movs	r1, r7
 800f25a:	f7f3 f83b 	bl	80022d4 <__aeabi_dmul>
 800f25e:	0006      	movs	r6, r0
 800f260:	000f      	movs	r7, r1
 800f262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f264:	106d      	asrs	r5, r5, #1
 800f266:	3308      	adds	r3, #8
 800f268:	e7e2      	b.n	800f230 <_dtoa_r+0x304>
 800f26a:	46c0      	nop			; (mov r8, r8)
 800f26c:	08013b52 	.word	0x08013b52
 800f270:	08013c14 	.word	0x08013c14
 800f274:	7ff00000 	.word	0x7ff00000
 800f278:	0000270f 	.word	0x0000270f
 800f27c:	08013c10 	.word	0x08013c10
 800f280:	08013c13 	.word	0x08013c13
 800f284:	08013b29 	.word	0x08013b29
 800f288:	08013b2a 	.word	0x08013b2a
 800f28c:	3ff00000 	.word	0x3ff00000
 800f290:	fffffc01 	.word	0xfffffc01
 800f294:	3ff80000 	.word	0x3ff80000
 800f298:	636f4361 	.word	0x636f4361
 800f29c:	3fd287a7 	.word	0x3fd287a7
 800f2a0:	8b60c8b3 	.word	0x8b60c8b3
 800f2a4:	3fc68a28 	.word	0x3fc68a28
 800f2a8:	509f79fb 	.word	0x509f79fb
 800f2ac:	3fd34413 	.word	0x3fd34413
 800f2b0:	08013d60 	.word	0x08013d60
 800f2b4:	00000432 	.word	0x00000432
 800f2b8:	00000412 	.word	0x00000412
 800f2bc:	fe100000 	.word	0xfe100000
 800f2c0:	08013c6c 	.word	0x08013c6c
 800f2c4:	08013d38 	.word	0x08013d38
 800f2c8:	9b03      	ldr	r3, [sp, #12]
 800f2ca:	2402      	movs	r4, #2
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d016      	beq.n	800f2fe <_dtoa_r+0x3d2>
 800f2d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f2d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f2d4:	220f      	movs	r2, #15
 800f2d6:	425d      	negs	r5, r3
 800f2d8:	402a      	ands	r2, r5
 800f2da:	4bdd      	ldr	r3, [pc, #884]	; (800f650 <_dtoa_r+0x724>)
 800f2dc:	00d2      	lsls	r2, r2, #3
 800f2de:	189b      	adds	r3, r3, r2
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	f7f2 fff6 	bl	80022d4 <__aeabi_dmul>
 800f2e8:	2701      	movs	r7, #1
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	9008      	str	r0, [sp, #32]
 800f2ee:	9109      	str	r1, [sp, #36]	; 0x24
 800f2f0:	4ed8      	ldr	r6, [pc, #864]	; (800f654 <_dtoa_r+0x728>)
 800f2f2:	112d      	asrs	r5, r5, #4
 800f2f4:	2d00      	cmp	r5, #0
 800f2f6:	d000      	beq.n	800f2fa <_dtoa_r+0x3ce>
 800f2f8:	e091      	b.n	800f41e <_dtoa_r+0x4f2>
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1a1      	bne.n	800f242 <_dtoa_r+0x316>
 800f2fe:	9e08      	ldr	r6, [sp, #32]
 800f300:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f302:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f304:	2b00      	cmp	r3, #0
 800f306:	d100      	bne.n	800f30a <_dtoa_r+0x3de>
 800f308:	e094      	b.n	800f434 <_dtoa_r+0x508>
 800f30a:	2200      	movs	r2, #0
 800f30c:	0030      	movs	r0, r6
 800f30e:	0039      	movs	r1, r7
 800f310:	4bd1      	ldr	r3, [pc, #836]	; (800f658 <_dtoa_r+0x72c>)
 800f312:	f7f1 f8a1 	bl	8000458 <__aeabi_dcmplt>
 800f316:	2800      	cmp	r0, #0
 800f318:	d100      	bne.n	800f31c <_dtoa_r+0x3f0>
 800f31a:	e08b      	b.n	800f434 <_dtoa_r+0x508>
 800f31c:	9b07      	ldr	r3, [sp, #28]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d100      	bne.n	800f324 <_dtoa_r+0x3f8>
 800f322:	e087      	b.n	800f434 <_dtoa_r+0x508>
 800f324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f326:	2b00      	cmp	r3, #0
 800f328:	dd45      	ble.n	800f3b6 <_dtoa_r+0x48a>
 800f32a:	9b03      	ldr	r3, [sp, #12]
 800f32c:	2200      	movs	r2, #0
 800f32e:	3b01      	subs	r3, #1
 800f330:	930e      	str	r3, [sp, #56]	; 0x38
 800f332:	0030      	movs	r0, r6
 800f334:	4bc9      	ldr	r3, [pc, #804]	; (800f65c <_dtoa_r+0x730>)
 800f336:	0039      	movs	r1, r7
 800f338:	f7f2 ffcc 	bl	80022d4 <__aeabi_dmul>
 800f33c:	9008      	str	r0, [sp, #32]
 800f33e:	9109      	str	r1, [sp, #36]	; 0x24
 800f340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f342:	3401      	adds	r4, #1
 800f344:	0020      	movs	r0, r4
 800f346:	9e08      	ldr	r6, [sp, #32]
 800f348:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f34a:	9312      	str	r3, [sp, #72]	; 0x48
 800f34c:	f7f3 fe5a 	bl	8003004 <__aeabi_i2d>
 800f350:	0032      	movs	r2, r6
 800f352:	003b      	movs	r3, r7
 800f354:	f7f2 ffbe 	bl	80022d4 <__aeabi_dmul>
 800f358:	2200      	movs	r2, #0
 800f35a:	4bc1      	ldr	r3, [pc, #772]	; (800f660 <_dtoa_r+0x734>)
 800f35c:	f7f2 f860 	bl	8001420 <__aeabi_dadd>
 800f360:	4ac0      	ldr	r2, [pc, #768]	; (800f664 <_dtoa_r+0x738>)
 800f362:	9014      	str	r0, [sp, #80]	; 0x50
 800f364:	9115      	str	r1, [sp, #84]	; 0x54
 800f366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f368:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f36a:	4694      	mov	ip, r2
 800f36c:	9308      	str	r3, [sp, #32]
 800f36e:	9409      	str	r4, [sp, #36]	; 0x24
 800f370:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f372:	4463      	add	r3, ip
 800f374:	9318      	str	r3, [sp, #96]	; 0x60
 800f376:	9309      	str	r3, [sp, #36]	; 0x24
 800f378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d15e      	bne.n	800f43c <_dtoa_r+0x510>
 800f37e:	2200      	movs	r2, #0
 800f380:	4bb9      	ldr	r3, [pc, #740]	; (800f668 <_dtoa_r+0x73c>)
 800f382:	0030      	movs	r0, r6
 800f384:	0039      	movs	r1, r7
 800f386:	f7f3 fa67 	bl	8002858 <__aeabi_dsub>
 800f38a:	9a08      	ldr	r2, [sp, #32]
 800f38c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f38e:	0004      	movs	r4, r0
 800f390:	000d      	movs	r5, r1
 800f392:	f7f1 f875 	bl	8000480 <__aeabi_dcmpgt>
 800f396:	2800      	cmp	r0, #0
 800f398:	d000      	beq.n	800f39c <_dtoa_r+0x470>
 800f39a:	e2b3      	b.n	800f904 <_dtoa_r+0x9d8>
 800f39c:	48b3      	ldr	r0, [pc, #716]	; (800f66c <_dtoa_r+0x740>)
 800f39e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f3a0:	4684      	mov	ip, r0
 800f3a2:	4461      	add	r1, ip
 800f3a4:	000b      	movs	r3, r1
 800f3a6:	0020      	movs	r0, r4
 800f3a8:	0029      	movs	r1, r5
 800f3aa:	9a08      	ldr	r2, [sp, #32]
 800f3ac:	f7f1 f854 	bl	8000458 <__aeabi_dcmplt>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d000      	beq.n	800f3b6 <_dtoa_r+0x48a>
 800f3b4:	e2a3      	b.n	800f8fe <_dtoa_r+0x9d2>
 800f3b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f3ba:	9308      	str	r3, [sp, #32]
 800f3bc:	9409      	str	r4, [sp, #36]	; 0x24
 800f3be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	da00      	bge.n	800f3c6 <_dtoa_r+0x49a>
 800f3c4:	e179      	b.n	800f6ba <_dtoa_r+0x78e>
 800f3c6:	9a03      	ldr	r2, [sp, #12]
 800f3c8:	2a0e      	cmp	r2, #14
 800f3ca:	dd00      	ble.n	800f3ce <_dtoa_r+0x4a2>
 800f3cc:	e175      	b.n	800f6ba <_dtoa_r+0x78e>
 800f3ce:	4ba0      	ldr	r3, [pc, #640]	; (800f650 <_dtoa_r+0x724>)
 800f3d0:	00d2      	lsls	r2, r2, #3
 800f3d2:	189b      	adds	r3, r3, r2
 800f3d4:	681e      	ldr	r6, [r3, #0]
 800f3d6:	685f      	ldr	r7, [r3, #4]
 800f3d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	db00      	blt.n	800f3e0 <_dtoa_r+0x4b4>
 800f3de:	e0e5      	b.n	800f5ac <_dtoa_r+0x680>
 800f3e0:	9b07      	ldr	r3, [sp, #28]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	dd00      	ble.n	800f3e8 <_dtoa_r+0x4bc>
 800f3e6:	e0e1      	b.n	800f5ac <_dtoa_r+0x680>
 800f3e8:	d000      	beq.n	800f3ec <_dtoa_r+0x4c0>
 800f3ea:	e288      	b.n	800f8fe <_dtoa_r+0x9d2>
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	0030      	movs	r0, r6
 800f3f0:	0039      	movs	r1, r7
 800f3f2:	4b9d      	ldr	r3, [pc, #628]	; (800f668 <_dtoa_r+0x73c>)
 800f3f4:	f7f2 ff6e 	bl	80022d4 <__aeabi_dmul>
 800f3f8:	9a08      	ldr	r2, [sp, #32]
 800f3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3fc:	f7f1 f84a 	bl	8000494 <__aeabi_dcmpge>
 800f400:	9e07      	ldr	r6, [sp, #28]
 800f402:	0037      	movs	r7, r6
 800f404:	2800      	cmp	r0, #0
 800f406:	d000      	beq.n	800f40a <_dtoa_r+0x4de>
 800f408:	e25f      	b.n	800f8ca <_dtoa_r+0x99e>
 800f40a:	9b06      	ldr	r3, [sp, #24]
 800f40c:	9a06      	ldr	r2, [sp, #24]
 800f40e:	3301      	adds	r3, #1
 800f410:	9308      	str	r3, [sp, #32]
 800f412:	2331      	movs	r3, #49	; 0x31
 800f414:	7013      	strb	r3, [r2, #0]
 800f416:	9b03      	ldr	r3, [sp, #12]
 800f418:	3301      	adds	r3, #1
 800f41a:	9303      	str	r3, [sp, #12]
 800f41c:	e25a      	b.n	800f8d4 <_dtoa_r+0x9a8>
 800f41e:	423d      	tst	r5, r7
 800f420:	d005      	beq.n	800f42e <_dtoa_r+0x502>
 800f422:	6832      	ldr	r2, [r6, #0]
 800f424:	6873      	ldr	r3, [r6, #4]
 800f426:	f7f2 ff55 	bl	80022d4 <__aeabi_dmul>
 800f42a:	003b      	movs	r3, r7
 800f42c:	3401      	adds	r4, #1
 800f42e:	106d      	asrs	r5, r5, #1
 800f430:	3608      	adds	r6, #8
 800f432:	e75f      	b.n	800f2f4 <_dtoa_r+0x3c8>
 800f434:	9b03      	ldr	r3, [sp, #12]
 800f436:	930e      	str	r3, [sp, #56]	; 0x38
 800f438:	9b07      	ldr	r3, [sp, #28]
 800f43a:	e783      	b.n	800f344 <_dtoa_r+0x418>
 800f43c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f43e:	4b84      	ldr	r3, [pc, #528]	; (800f650 <_dtoa_r+0x724>)
 800f440:	3a01      	subs	r2, #1
 800f442:	00d2      	lsls	r2, r2, #3
 800f444:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f446:	189b      	adds	r3, r3, r2
 800f448:	9c08      	ldr	r4, [sp, #32]
 800f44a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	2900      	cmp	r1, #0
 800f452:	d051      	beq.n	800f4f8 <_dtoa_r+0x5cc>
 800f454:	2000      	movs	r0, #0
 800f456:	4986      	ldr	r1, [pc, #536]	; (800f670 <_dtoa_r+0x744>)
 800f458:	f7f2 fb42 	bl	8001ae0 <__aeabi_ddiv>
 800f45c:	0022      	movs	r2, r4
 800f45e:	002b      	movs	r3, r5
 800f460:	f7f3 f9fa 	bl	8002858 <__aeabi_dsub>
 800f464:	9a06      	ldr	r2, [sp, #24]
 800f466:	0004      	movs	r4, r0
 800f468:	4694      	mov	ip, r2
 800f46a:	000d      	movs	r5, r1
 800f46c:	9b06      	ldr	r3, [sp, #24]
 800f46e:	9314      	str	r3, [sp, #80]	; 0x50
 800f470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f472:	4463      	add	r3, ip
 800f474:	9318      	str	r3, [sp, #96]	; 0x60
 800f476:	0039      	movs	r1, r7
 800f478:	0030      	movs	r0, r6
 800f47a:	f7f3 fd8d 	bl	8002f98 <__aeabi_d2iz>
 800f47e:	9012      	str	r0, [sp, #72]	; 0x48
 800f480:	f7f3 fdc0 	bl	8003004 <__aeabi_i2d>
 800f484:	0002      	movs	r2, r0
 800f486:	000b      	movs	r3, r1
 800f488:	0030      	movs	r0, r6
 800f48a:	0039      	movs	r1, r7
 800f48c:	f7f3 f9e4 	bl	8002858 <__aeabi_dsub>
 800f490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f492:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f494:	3301      	adds	r3, #1
 800f496:	9308      	str	r3, [sp, #32]
 800f498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f49a:	0006      	movs	r6, r0
 800f49c:	3330      	adds	r3, #48	; 0x30
 800f49e:	7013      	strb	r3, [r2, #0]
 800f4a0:	0022      	movs	r2, r4
 800f4a2:	002b      	movs	r3, r5
 800f4a4:	000f      	movs	r7, r1
 800f4a6:	f7f0 ffd7 	bl	8000458 <__aeabi_dcmplt>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	d174      	bne.n	800f598 <_dtoa_r+0x66c>
 800f4ae:	0032      	movs	r2, r6
 800f4b0:	003b      	movs	r3, r7
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	4968      	ldr	r1, [pc, #416]	; (800f658 <_dtoa_r+0x72c>)
 800f4b6:	f7f3 f9cf 	bl	8002858 <__aeabi_dsub>
 800f4ba:	0022      	movs	r2, r4
 800f4bc:	002b      	movs	r3, r5
 800f4be:	f7f0 ffcb 	bl	8000458 <__aeabi_dcmplt>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d000      	beq.n	800f4c8 <_dtoa_r+0x59c>
 800f4c6:	e0d7      	b.n	800f678 <_dtoa_r+0x74c>
 800f4c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f4ca:	9a08      	ldr	r2, [sp, #32]
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d100      	bne.n	800f4d2 <_dtoa_r+0x5a6>
 800f4d0:	e771      	b.n	800f3b6 <_dtoa_r+0x48a>
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	0020      	movs	r0, r4
 800f4d6:	0029      	movs	r1, r5
 800f4d8:	4b60      	ldr	r3, [pc, #384]	; (800f65c <_dtoa_r+0x730>)
 800f4da:	f7f2 fefb 	bl	80022d4 <__aeabi_dmul>
 800f4de:	4b5f      	ldr	r3, [pc, #380]	; (800f65c <_dtoa_r+0x730>)
 800f4e0:	0004      	movs	r4, r0
 800f4e2:	000d      	movs	r5, r1
 800f4e4:	0030      	movs	r0, r6
 800f4e6:	0039      	movs	r1, r7
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f7f2 fef3 	bl	80022d4 <__aeabi_dmul>
 800f4ee:	9b08      	ldr	r3, [sp, #32]
 800f4f0:	0006      	movs	r6, r0
 800f4f2:	000f      	movs	r7, r1
 800f4f4:	9314      	str	r3, [sp, #80]	; 0x50
 800f4f6:	e7be      	b.n	800f476 <_dtoa_r+0x54a>
 800f4f8:	0020      	movs	r0, r4
 800f4fa:	0029      	movs	r1, r5
 800f4fc:	f7f2 feea 	bl	80022d4 <__aeabi_dmul>
 800f500:	9a06      	ldr	r2, [sp, #24]
 800f502:	9b06      	ldr	r3, [sp, #24]
 800f504:	4694      	mov	ip, r2
 800f506:	9308      	str	r3, [sp, #32]
 800f508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f50a:	9014      	str	r0, [sp, #80]	; 0x50
 800f50c:	9115      	str	r1, [sp, #84]	; 0x54
 800f50e:	4463      	add	r3, ip
 800f510:	9319      	str	r3, [sp, #100]	; 0x64
 800f512:	0030      	movs	r0, r6
 800f514:	0039      	movs	r1, r7
 800f516:	f7f3 fd3f 	bl	8002f98 <__aeabi_d2iz>
 800f51a:	9018      	str	r0, [sp, #96]	; 0x60
 800f51c:	f7f3 fd72 	bl	8003004 <__aeabi_i2d>
 800f520:	0002      	movs	r2, r0
 800f522:	000b      	movs	r3, r1
 800f524:	0030      	movs	r0, r6
 800f526:	0039      	movs	r1, r7
 800f528:	f7f3 f996 	bl	8002858 <__aeabi_dsub>
 800f52c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f52e:	9b08      	ldr	r3, [sp, #32]
 800f530:	3630      	adds	r6, #48	; 0x30
 800f532:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f534:	701e      	strb	r6, [r3, #0]
 800f536:	3301      	adds	r3, #1
 800f538:	0004      	movs	r4, r0
 800f53a:	000d      	movs	r5, r1
 800f53c:	9308      	str	r3, [sp, #32]
 800f53e:	4293      	cmp	r3, r2
 800f540:	d12d      	bne.n	800f59e <_dtoa_r+0x672>
 800f542:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f544:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f546:	9a06      	ldr	r2, [sp, #24]
 800f548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f54a:	4694      	mov	ip, r2
 800f54c:	4463      	add	r3, ip
 800f54e:	2200      	movs	r2, #0
 800f550:	9308      	str	r3, [sp, #32]
 800f552:	4b47      	ldr	r3, [pc, #284]	; (800f670 <_dtoa_r+0x744>)
 800f554:	f7f1 ff64 	bl	8001420 <__aeabi_dadd>
 800f558:	0002      	movs	r2, r0
 800f55a:	000b      	movs	r3, r1
 800f55c:	0020      	movs	r0, r4
 800f55e:	0029      	movs	r1, r5
 800f560:	f7f0 ff8e 	bl	8000480 <__aeabi_dcmpgt>
 800f564:	2800      	cmp	r0, #0
 800f566:	d000      	beq.n	800f56a <_dtoa_r+0x63e>
 800f568:	e086      	b.n	800f678 <_dtoa_r+0x74c>
 800f56a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f56c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f56e:	2000      	movs	r0, #0
 800f570:	493f      	ldr	r1, [pc, #252]	; (800f670 <_dtoa_r+0x744>)
 800f572:	f7f3 f971 	bl	8002858 <__aeabi_dsub>
 800f576:	0002      	movs	r2, r0
 800f578:	000b      	movs	r3, r1
 800f57a:	0020      	movs	r0, r4
 800f57c:	0029      	movs	r1, r5
 800f57e:	f7f0 ff6b 	bl	8000458 <__aeabi_dcmplt>
 800f582:	2800      	cmp	r0, #0
 800f584:	d100      	bne.n	800f588 <_dtoa_r+0x65c>
 800f586:	e716      	b.n	800f3b6 <_dtoa_r+0x48a>
 800f588:	9b08      	ldr	r3, [sp, #32]
 800f58a:	001a      	movs	r2, r3
 800f58c:	3a01      	subs	r2, #1
 800f58e:	9208      	str	r2, [sp, #32]
 800f590:	7812      	ldrb	r2, [r2, #0]
 800f592:	2a30      	cmp	r2, #48	; 0x30
 800f594:	d0f8      	beq.n	800f588 <_dtoa_r+0x65c>
 800f596:	9308      	str	r3, [sp, #32]
 800f598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f59a:	9303      	str	r3, [sp, #12]
 800f59c:	e046      	b.n	800f62c <_dtoa_r+0x700>
 800f59e:	2200      	movs	r2, #0
 800f5a0:	4b2e      	ldr	r3, [pc, #184]	; (800f65c <_dtoa_r+0x730>)
 800f5a2:	f7f2 fe97 	bl	80022d4 <__aeabi_dmul>
 800f5a6:	0006      	movs	r6, r0
 800f5a8:	000f      	movs	r7, r1
 800f5aa:	e7b2      	b.n	800f512 <_dtoa_r+0x5e6>
 800f5ac:	9b06      	ldr	r3, [sp, #24]
 800f5ae:	9a06      	ldr	r2, [sp, #24]
 800f5b0:	930a      	str	r3, [sp, #40]	; 0x28
 800f5b2:	9b07      	ldr	r3, [sp, #28]
 800f5b4:	9c08      	ldr	r4, [sp, #32]
 800f5b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	189b      	adds	r3, r3, r2
 800f5bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5be:	0032      	movs	r2, r6
 800f5c0:	003b      	movs	r3, r7
 800f5c2:	0020      	movs	r0, r4
 800f5c4:	0029      	movs	r1, r5
 800f5c6:	f7f2 fa8b 	bl	8001ae0 <__aeabi_ddiv>
 800f5ca:	f7f3 fce5 	bl	8002f98 <__aeabi_d2iz>
 800f5ce:	9007      	str	r0, [sp, #28]
 800f5d0:	f7f3 fd18 	bl	8003004 <__aeabi_i2d>
 800f5d4:	0032      	movs	r2, r6
 800f5d6:	003b      	movs	r3, r7
 800f5d8:	f7f2 fe7c 	bl	80022d4 <__aeabi_dmul>
 800f5dc:	0002      	movs	r2, r0
 800f5de:	000b      	movs	r3, r1
 800f5e0:	0020      	movs	r0, r4
 800f5e2:	0029      	movs	r1, r5
 800f5e4:	f7f3 f938 	bl	8002858 <__aeabi_dsub>
 800f5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5ea:	001a      	movs	r2, r3
 800f5ec:	3201      	adds	r2, #1
 800f5ee:	920a      	str	r2, [sp, #40]	; 0x28
 800f5f0:	9208      	str	r2, [sp, #32]
 800f5f2:	9a07      	ldr	r2, [sp, #28]
 800f5f4:	3230      	adds	r2, #48	; 0x30
 800f5f6:	701a      	strb	r2, [r3, #0]
 800f5f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d14f      	bne.n	800f69e <_dtoa_r+0x772>
 800f5fe:	0002      	movs	r2, r0
 800f600:	000b      	movs	r3, r1
 800f602:	f7f1 ff0d 	bl	8001420 <__aeabi_dadd>
 800f606:	0032      	movs	r2, r6
 800f608:	003b      	movs	r3, r7
 800f60a:	0004      	movs	r4, r0
 800f60c:	000d      	movs	r5, r1
 800f60e:	f7f0 ff37 	bl	8000480 <__aeabi_dcmpgt>
 800f612:	2800      	cmp	r0, #0
 800f614:	d12e      	bne.n	800f674 <_dtoa_r+0x748>
 800f616:	0032      	movs	r2, r6
 800f618:	003b      	movs	r3, r7
 800f61a:	0020      	movs	r0, r4
 800f61c:	0029      	movs	r1, r5
 800f61e:	f7f0 ff15 	bl	800044c <__aeabi_dcmpeq>
 800f622:	2800      	cmp	r0, #0
 800f624:	d002      	beq.n	800f62c <_dtoa_r+0x700>
 800f626:	9b07      	ldr	r3, [sp, #28]
 800f628:	07de      	lsls	r6, r3, #31
 800f62a:	d423      	bmi.n	800f674 <_dtoa_r+0x748>
 800f62c:	9905      	ldr	r1, [sp, #20]
 800f62e:	9804      	ldr	r0, [sp, #16]
 800f630:	f000 fe86 	bl	8010340 <_Bfree>
 800f634:	2300      	movs	r3, #0
 800f636:	9a08      	ldr	r2, [sp, #32]
 800f638:	7013      	strb	r3, [r2, #0]
 800f63a:	9b03      	ldr	r3, [sp, #12]
 800f63c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f63e:	3301      	adds	r3, #1
 800f640:	6013      	str	r3, [r2, #0]
 800f642:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f644:	2b00      	cmp	r3, #0
 800f646:	d100      	bne.n	800f64a <_dtoa_r+0x71e>
 800f648:	e4ba      	b.n	800efc0 <_dtoa_r+0x94>
 800f64a:	9a08      	ldr	r2, [sp, #32]
 800f64c:	601a      	str	r2, [r3, #0]
 800f64e:	e4b7      	b.n	800efc0 <_dtoa_r+0x94>
 800f650:	08013d60 	.word	0x08013d60
 800f654:	08013d38 	.word	0x08013d38
 800f658:	3ff00000 	.word	0x3ff00000
 800f65c:	40240000 	.word	0x40240000
 800f660:	401c0000 	.word	0x401c0000
 800f664:	fcc00000 	.word	0xfcc00000
 800f668:	40140000 	.word	0x40140000
 800f66c:	7cc00000 	.word	0x7cc00000
 800f670:	3fe00000 	.word	0x3fe00000
 800f674:	9b03      	ldr	r3, [sp, #12]
 800f676:	930e      	str	r3, [sp, #56]	; 0x38
 800f678:	9b08      	ldr	r3, [sp, #32]
 800f67a:	9308      	str	r3, [sp, #32]
 800f67c:	3b01      	subs	r3, #1
 800f67e:	781a      	ldrb	r2, [r3, #0]
 800f680:	2a39      	cmp	r2, #57	; 0x39
 800f682:	d108      	bne.n	800f696 <_dtoa_r+0x76a>
 800f684:	9a06      	ldr	r2, [sp, #24]
 800f686:	429a      	cmp	r2, r3
 800f688:	d1f7      	bne.n	800f67a <_dtoa_r+0x74e>
 800f68a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f68c:	9906      	ldr	r1, [sp, #24]
 800f68e:	3201      	adds	r2, #1
 800f690:	920e      	str	r2, [sp, #56]	; 0x38
 800f692:	2230      	movs	r2, #48	; 0x30
 800f694:	700a      	strb	r2, [r1, #0]
 800f696:	781a      	ldrb	r2, [r3, #0]
 800f698:	3201      	adds	r2, #1
 800f69a:	701a      	strb	r2, [r3, #0]
 800f69c:	e77c      	b.n	800f598 <_dtoa_r+0x66c>
 800f69e:	2200      	movs	r2, #0
 800f6a0:	4ba9      	ldr	r3, [pc, #676]	; (800f948 <_dtoa_r+0xa1c>)
 800f6a2:	f7f2 fe17 	bl	80022d4 <__aeabi_dmul>
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	0004      	movs	r4, r0
 800f6ac:	000d      	movs	r5, r1
 800f6ae:	f7f0 fecd 	bl	800044c <__aeabi_dcmpeq>
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	d100      	bne.n	800f6b8 <_dtoa_r+0x78c>
 800f6b6:	e782      	b.n	800f5be <_dtoa_r+0x692>
 800f6b8:	e7b8      	b.n	800f62c <_dtoa_r+0x700>
 800f6ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f6bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f6be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f6c0:	2f00      	cmp	r7, #0
 800f6c2:	d012      	beq.n	800f6ea <_dtoa_r+0x7be>
 800f6c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f6c6:	2a01      	cmp	r2, #1
 800f6c8:	dc6e      	bgt.n	800f7a8 <_dtoa_r+0x87c>
 800f6ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f6cc:	2a00      	cmp	r2, #0
 800f6ce:	d065      	beq.n	800f79c <_dtoa_r+0x870>
 800f6d0:	4a9e      	ldr	r2, [pc, #632]	; (800f94c <_dtoa_r+0xa20>)
 800f6d2:	189b      	adds	r3, r3, r2
 800f6d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6d6:	2101      	movs	r1, #1
 800f6d8:	18d2      	adds	r2, r2, r3
 800f6da:	920a      	str	r2, [sp, #40]	; 0x28
 800f6dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6de:	9804      	ldr	r0, [sp, #16]
 800f6e0:	18d3      	adds	r3, r2, r3
 800f6e2:	930c      	str	r3, [sp, #48]	; 0x30
 800f6e4:	f000 ff28 	bl	8010538 <__i2b>
 800f6e8:	0007      	movs	r7, r0
 800f6ea:	2c00      	cmp	r4, #0
 800f6ec:	d00e      	beq.n	800f70c <_dtoa_r+0x7e0>
 800f6ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	dd0b      	ble.n	800f70c <_dtoa_r+0x7e0>
 800f6f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6f6:	0023      	movs	r3, r4
 800f6f8:	4294      	cmp	r4, r2
 800f6fa:	dd00      	ble.n	800f6fe <_dtoa_r+0x7d2>
 800f6fc:	0013      	movs	r3, r2
 800f6fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f700:	1ae4      	subs	r4, r4, r3
 800f702:	1ad2      	subs	r2, r2, r3
 800f704:	920a      	str	r2, [sp, #40]	; 0x28
 800f706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f708:	1ad3      	subs	r3, r2, r3
 800f70a:	930c      	str	r3, [sp, #48]	; 0x30
 800f70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d01e      	beq.n	800f750 <_dtoa_r+0x824>
 800f712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f714:	2b00      	cmp	r3, #0
 800f716:	d05c      	beq.n	800f7d2 <_dtoa_r+0x8a6>
 800f718:	2d00      	cmp	r5, #0
 800f71a:	dd10      	ble.n	800f73e <_dtoa_r+0x812>
 800f71c:	0039      	movs	r1, r7
 800f71e:	002a      	movs	r2, r5
 800f720:	9804      	ldr	r0, [sp, #16]
 800f722:	f000 ffd1 	bl	80106c8 <__pow5mult>
 800f726:	9a05      	ldr	r2, [sp, #20]
 800f728:	0001      	movs	r1, r0
 800f72a:	0007      	movs	r7, r0
 800f72c:	9804      	ldr	r0, [sp, #16]
 800f72e:	f000 ff1b 	bl	8010568 <__multiply>
 800f732:	0006      	movs	r6, r0
 800f734:	9905      	ldr	r1, [sp, #20]
 800f736:	9804      	ldr	r0, [sp, #16]
 800f738:	f000 fe02 	bl	8010340 <_Bfree>
 800f73c:	9605      	str	r6, [sp, #20]
 800f73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f740:	1b5a      	subs	r2, r3, r5
 800f742:	42ab      	cmp	r3, r5
 800f744:	d004      	beq.n	800f750 <_dtoa_r+0x824>
 800f746:	9905      	ldr	r1, [sp, #20]
 800f748:	9804      	ldr	r0, [sp, #16]
 800f74a:	f000 ffbd 	bl	80106c8 <__pow5mult>
 800f74e:	9005      	str	r0, [sp, #20]
 800f750:	2101      	movs	r1, #1
 800f752:	9804      	ldr	r0, [sp, #16]
 800f754:	f000 fef0 	bl	8010538 <__i2b>
 800f758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f75a:	0006      	movs	r6, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dd3a      	ble.n	800f7d6 <_dtoa_r+0x8aa>
 800f760:	001a      	movs	r2, r3
 800f762:	0001      	movs	r1, r0
 800f764:	9804      	ldr	r0, [sp, #16]
 800f766:	f000 ffaf 	bl	80106c8 <__pow5mult>
 800f76a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f76c:	0006      	movs	r6, r0
 800f76e:	2500      	movs	r5, #0
 800f770:	2b01      	cmp	r3, #1
 800f772:	dc38      	bgt.n	800f7e6 <_dtoa_r+0x8ba>
 800f774:	2500      	movs	r5, #0
 800f776:	9b08      	ldr	r3, [sp, #32]
 800f778:	42ab      	cmp	r3, r5
 800f77a:	d130      	bne.n	800f7de <_dtoa_r+0x8b2>
 800f77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f77e:	031b      	lsls	r3, r3, #12
 800f780:	42ab      	cmp	r3, r5
 800f782:	d12c      	bne.n	800f7de <_dtoa_r+0x8b2>
 800f784:	4b72      	ldr	r3, [pc, #456]	; (800f950 <_dtoa_r+0xa24>)
 800f786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f788:	4213      	tst	r3, r2
 800f78a:	d028      	beq.n	800f7de <_dtoa_r+0x8b2>
 800f78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f78e:	3501      	adds	r5, #1
 800f790:	3301      	adds	r3, #1
 800f792:	930a      	str	r3, [sp, #40]	; 0x28
 800f794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f796:	3301      	adds	r3, #1
 800f798:	930c      	str	r3, [sp, #48]	; 0x30
 800f79a:	e020      	b.n	800f7de <_dtoa_r+0x8b2>
 800f79c:	2336      	movs	r3, #54	; 0x36
 800f79e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f7a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f7a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f7a4:	1a9b      	subs	r3, r3, r2
 800f7a6:	e795      	b.n	800f6d4 <_dtoa_r+0x7a8>
 800f7a8:	9b07      	ldr	r3, [sp, #28]
 800f7aa:	1e5d      	subs	r5, r3, #1
 800f7ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7ae:	42ab      	cmp	r3, r5
 800f7b0:	db07      	blt.n	800f7c2 <_dtoa_r+0x896>
 800f7b2:	1b5d      	subs	r5, r3, r5
 800f7b4:	9b07      	ldr	r3, [sp, #28]
 800f7b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	da8b      	bge.n	800f6d4 <_dtoa_r+0x7a8>
 800f7bc:	1ae4      	subs	r4, r4, r3
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e788      	b.n	800f6d4 <_dtoa_r+0x7a8>
 800f7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7c6:	1aeb      	subs	r3, r5, r3
 800f7c8:	18d3      	adds	r3, r2, r3
 800f7ca:	950d      	str	r5, [sp, #52]	; 0x34
 800f7cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800f7ce:	2500      	movs	r5, #0
 800f7d0:	e7f0      	b.n	800f7b4 <_dtoa_r+0x888>
 800f7d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7d4:	e7b7      	b.n	800f746 <_dtoa_r+0x81a>
 800f7d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f7d8:	2500      	movs	r5, #0
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	ddca      	ble.n	800f774 <_dtoa_r+0x848>
 800f7de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f7e0:	2001      	movs	r0, #1
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d008      	beq.n	800f7f8 <_dtoa_r+0x8cc>
 800f7e6:	6933      	ldr	r3, [r6, #16]
 800f7e8:	3303      	adds	r3, #3
 800f7ea:	009b      	lsls	r3, r3, #2
 800f7ec:	18f3      	adds	r3, r6, r3
 800f7ee:	6858      	ldr	r0, [r3, #4]
 800f7f0:	f000 fe5a 	bl	80104a8 <__hi0bits>
 800f7f4:	2320      	movs	r3, #32
 800f7f6:	1a18      	subs	r0, r3, r0
 800f7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7fa:	1818      	adds	r0, r3, r0
 800f7fc:	0002      	movs	r2, r0
 800f7fe:	231f      	movs	r3, #31
 800f800:	401a      	ands	r2, r3
 800f802:	4218      	tst	r0, r3
 800f804:	d047      	beq.n	800f896 <_dtoa_r+0x96a>
 800f806:	3301      	adds	r3, #1
 800f808:	1a9b      	subs	r3, r3, r2
 800f80a:	2b04      	cmp	r3, #4
 800f80c:	dd3f      	ble.n	800f88e <_dtoa_r+0x962>
 800f80e:	231c      	movs	r3, #28
 800f810:	1a9b      	subs	r3, r3, r2
 800f812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f814:	18e4      	adds	r4, r4, r3
 800f816:	18d2      	adds	r2, r2, r3
 800f818:	920a      	str	r2, [sp, #40]	; 0x28
 800f81a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f81c:	18d3      	adds	r3, r2, r3
 800f81e:	930c      	str	r3, [sp, #48]	; 0x30
 800f820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f822:	2b00      	cmp	r3, #0
 800f824:	dd05      	ble.n	800f832 <_dtoa_r+0x906>
 800f826:	001a      	movs	r2, r3
 800f828:	9905      	ldr	r1, [sp, #20]
 800f82a:	9804      	ldr	r0, [sp, #16]
 800f82c:	f000 ffa8 	bl	8010780 <__lshift>
 800f830:	9005      	str	r0, [sp, #20]
 800f832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f834:	2b00      	cmp	r3, #0
 800f836:	dd05      	ble.n	800f844 <_dtoa_r+0x918>
 800f838:	0031      	movs	r1, r6
 800f83a:	001a      	movs	r2, r3
 800f83c:	9804      	ldr	r0, [sp, #16]
 800f83e:	f000 ff9f 	bl	8010780 <__lshift>
 800f842:	0006      	movs	r6, r0
 800f844:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f846:	2b00      	cmp	r3, #0
 800f848:	d027      	beq.n	800f89a <_dtoa_r+0x96e>
 800f84a:	0031      	movs	r1, r6
 800f84c:	9805      	ldr	r0, [sp, #20]
 800f84e:	f001 f805 	bl	801085c <__mcmp>
 800f852:	2800      	cmp	r0, #0
 800f854:	da21      	bge.n	800f89a <_dtoa_r+0x96e>
 800f856:	9b03      	ldr	r3, [sp, #12]
 800f858:	220a      	movs	r2, #10
 800f85a:	3b01      	subs	r3, #1
 800f85c:	9303      	str	r3, [sp, #12]
 800f85e:	9905      	ldr	r1, [sp, #20]
 800f860:	2300      	movs	r3, #0
 800f862:	9804      	ldr	r0, [sp, #16]
 800f864:	f000 fd90 	bl	8010388 <__multadd>
 800f868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f86a:	9005      	str	r0, [sp, #20]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d100      	bne.n	800f872 <_dtoa_r+0x946>
 800f870:	e15d      	b.n	800fb2e <_dtoa_r+0xc02>
 800f872:	2300      	movs	r3, #0
 800f874:	0039      	movs	r1, r7
 800f876:	220a      	movs	r2, #10
 800f878:	9804      	ldr	r0, [sp, #16]
 800f87a:	f000 fd85 	bl	8010388 <__multadd>
 800f87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f880:	0007      	movs	r7, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	dc49      	bgt.n	800f91a <_dtoa_r+0x9ee>
 800f886:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f888:	2b02      	cmp	r3, #2
 800f88a:	dc0e      	bgt.n	800f8aa <_dtoa_r+0x97e>
 800f88c:	e045      	b.n	800f91a <_dtoa_r+0x9ee>
 800f88e:	2b04      	cmp	r3, #4
 800f890:	d0c6      	beq.n	800f820 <_dtoa_r+0x8f4>
 800f892:	331c      	adds	r3, #28
 800f894:	e7bd      	b.n	800f812 <_dtoa_r+0x8e6>
 800f896:	0013      	movs	r3, r2
 800f898:	e7fb      	b.n	800f892 <_dtoa_r+0x966>
 800f89a:	9b07      	ldr	r3, [sp, #28]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	dc36      	bgt.n	800f90e <_dtoa_r+0x9e2>
 800f8a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	dd33      	ble.n	800f90e <_dtoa_r+0x9e2>
 800f8a6:	9b07      	ldr	r3, [sp, #28]
 800f8a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d10c      	bne.n	800f8ca <_dtoa_r+0x99e>
 800f8b0:	0031      	movs	r1, r6
 800f8b2:	2205      	movs	r2, #5
 800f8b4:	9804      	ldr	r0, [sp, #16]
 800f8b6:	f000 fd67 	bl	8010388 <__multadd>
 800f8ba:	0006      	movs	r6, r0
 800f8bc:	0001      	movs	r1, r0
 800f8be:	9805      	ldr	r0, [sp, #20]
 800f8c0:	f000 ffcc 	bl	801085c <__mcmp>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	dd00      	ble.n	800f8ca <_dtoa_r+0x99e>
 800f8c8:	e59f      	b.n	800f40a <_dtoa_r+0x4de>
 800f8ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f8cc:	43db      	mvns	r3, r3
 800f8ce:	9303      	str	r3, [sp, #12]
 800f8d0:	9b06      	ldr	r3, [sp, #24]
 800f8d2:	9308      	str	r3, [sp, #32]
 800f8d4:	2500      	movs	r5, #0
 800f8d6:	0031      	movs	r1, r6
 800f8d8:	9804      	ldr	r0, [sp, #16]
 800f8da:	f000 fd31 	bl	8010340 <_Bfree>
 800f8de:	2f00      	cmp	r7, #0
 800f8e0:	d100      	bne.n	800f8e4 <_dtoa_r+0x9b8>
 800f8e2:	e6a3      	b.n	800f62c <_dtoa_r+0x700>
 800f8e4:	2d00      	cmp	r5, #0
 800f8e6:	d005      	beq.n	800f8f4 <_dtoa_r+0x9c8>
 800f8e8:	42bd      	cmp	r5, r7
 800f8ea:	d003      	beq.n	800f8f4 <_dtoa_r+0x9c8>
 800f8ec:	0029      	movs	r1, r5
 800f8ee:	9804      	ldr	r0, [sp, #16]
 800f8f0:	f000 fd26 	bl	8010340 <_Bfree>
 800f8f4:	0039      	movs	r1, r7
 800f8f6:	9804      	ldr	r0, [sp, #16]
 800f8f8:	f000 fd22 	bl	8010340 <_Bfree>
 800f8fc:	e696      	b.n	800f62c <_dtoa_r+0x700>
 800f8fe:	2600      	movs	r6, #0
 800f900:	0037      	movs	r7, r6
 800f902:	e7e2      	b.n	800f8ca <_dtoa_r+0x99e>
 800f904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f906:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f908:	9303      	str	r3, [sp, #12]
 800f90a:	0037      	movs	r7, r6
 800f90c:	e57d      	b.n	800f40a <_dtoa_r+0x4de>
 800f90e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f910:	2b00      	cmp	r3, #0
 800f912:	d100      	bne.n	800f916 <_dtoa_r+0x9ea>
 800f914:	e0c3      	b.n	800fa9e <_dtoa_r+0xb72>
 800f916:	9b07      	ldr	r3, [sp, #28]
 800f918:	930b      	str	r3, [sp, #44]	; 0x2c
 800f91a:	2c00      	cmp	r4, #0
 800f91c:	dd05      	ble.n	800f92a <_dtoa_r+0x9fe>
 800f91e:	0039      	movs	r1, r7
 800f920:	0022      	movs	r2, r4
 800f922:	9804      	ldr	r0, [sp, #16]
 800f924:	f000 ff2c 	bl	8010780 <__lshift>
 800f928:	0007      	movs	r7, r0
 800f92a:	0038      	movs	r0, r7
 800f92c:	2d00      	cmp	r5, #0
 800f92e:	d024      	beq.n	800f97a <_dtoa_r+0xa4e>
 800f930:	6879      	ldr	r1, [r7, #4]
 800f932:	9804      	ldr	r0, [sp, #16]
 800f934:	f000 fcc0 	bl	80102b8 <_Balloc>
 800f938:	1e04      	subs	r4, r0, #0
 800f93a:	d111      	bne.n	800f960 <_dtoa_r+0xa34>
 800f93c:	0022      	movs	r2, r4
 800f93e:	4b05      	ldr	r3, [pc, #20]	; (800f954 <_dtoa_r+0xa28>)
 800f940:	4805      	ldr	r0, [pc, #20]	; (800f958 <_dtoa_r+0xa2c>)
 800f942:	4906      	ldr	r1, [pc, #24]	; (800f95c <_dtoa_r+0xa30>)
 800f944:	f7ff fb07 	bl	800ef56 <_dtoa_r+0x2a>
 800f948:	40240000 	.word	0x40240000
 800f94c:	00000433 	.word	0x00000433
 800f950:	7ff00000 	.word	0x7ff00000
 800f954:	08013c6c 	.word	0x08013c6c
 800f958:	08013c14 	.word	0x08013c14
 800f95c:	000002ef 	.word	0x000002ef
 800f960:	0039      	movs	r1, r7
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	310c      	adds	r1, #12
 800f966:	3202      	adds	r2, #2
 800f968:	0092      	lsls	r2, r2, #2
 800f96a:	300c      	adds	r0, #12
 800f96c:	f7ff fa1c 	bl	800eda8 <memcpy>
 800f970:	2201      	movs	r2, #1
 800f972:	0021      	movs	r1, r4
 800f974:	9804      	ldr	r0, [sp, #16]
 800f976:	f000 ff03 	bl	8010780 <__lshift>
 800f97a:	9b06      	ldr	r3, [sp, #24]
 800f97c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f97e:	9307      	str	r3, [sp, #28]
 800f980:	3b01      	subs	r3, #1
 800f982:	189b      	adds	r3, r3, r2
 800f984:	2201      	movs	r2, #1
 800f986:	003d      	movs	r5, r7
 800f988:	0007      	movs	r7, r0
 800f98a:	930e      	str	r3, [sp, #56]	; 0x38
 800f98c:	9b08      	ldr	r3, [sp, #32]
 800f98e:	4013      	ands	r3, r2
 800f990:	930d      	str	r3, [sp, #52]	; 0x34
 800f992:	0031      	movs	r1, r6
 800f994:	9805      	ldr	r0, [sp, #20]
 800f996:	f7ff fa39 	bl	800ee0c <quorem>
 800f99a:	0029      	movs	r1, r5
 800f99c:	0004      	movs	r4, r0
 800f99e:	900b      	str	r0, [sp, #44]	; 0x2c
 800f9a0:	9805      	ldr	r0, [sp, #20]
 800f9a2:	f000 ff5b 	bl	801085c <__mcmp>
 800f9a6:	003a      	movs	r2, r7
 800f9a8:	900c      	str	r0, [sp, #48]	; 0x30
 800f9aa:	0031      	movs	r1, r6
 800f9ac:	9804      	ldr	r0, [sp, #16]
 800f9ae:	f000 ff71 	bl	8010894 <__mdiff>
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	68c3      	ldr	r3, [r0, #12]
 800f9b6:	3430      	adds	r4, #48	; 0x30
 800f9b8:	9008      	str	r0, [sp, #32]
 800f9ba:	920a      	str	r2, [sp, #40]	; 0x28
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d104      	bne.n	800f9ca <_dtoa_r+0xa9e>
 800f9c0:	0001      	movs	r1, r0
 800f9c2:	9805      	ldr	r0, [sp, #20]
 800f9c4:	f000 ff4a 	bl	801085c <__mcmp>
 800f9c8:	900a      	str	r0, [sp, #40]	; 0x28
 800f9ca:	9908      	ldr	r1, [sp, #32]
 800f9cc:	9804      	ldr	r0, [sp, #16]
 800f9ce:	f000 fcb7 	bl	8010340 <_Bfree>
 800f9d2:	9b07      	ldr	r3, [sp, #28]
 800f9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	9308      	str	r3, [sp, #32]
 800f9da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	d109      	bne.n	800f9f8 <_dtoa_r+0xacc>
 800f9e4:	2c39      	cmp	r4, #57	; 0x39
 800f9e6:	d022      	beq.n	800fa2e <_dtoa_r+0xb02>
 800f9e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	dd01      	ble.n	800f9f2 <_dtoa_r+0xac6>
 800f9ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f9f0:	3431      	adds	r4, #49	; 0x31
 800f9f2:	9b07      	ldr	r3, [sp, #28]
 800f9f4:	701c      	strb	r4, [r3, #0]
 800f9f6:	e76e      	b.n	800f8d6 <_dtoa_r+0x9aa>
 800f9f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	db04      	blt.n	800fa08 <_dtoa_r+0xadc>
 800f9fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fa00:	4313      	orrs	r3, r2
 800fa02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa04:	4313      	orrs	r3, r2
 800fa06:	d11e      	bne.n	800fa46 <_dtoa_r+0xb1a>
 800fa08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	ddf1      	ble.n	800f9f2 <_dtoa_r+0xac6>
 800fa0e:	9905      	ldr	r1, [sp, #20]
 800fa10:	2201      	movs	r2, #1
 800fa12:	9804      	ldr	r0, [sp, #16]
 800fa14:	f000 feb4 	bl	8010780 <__lshift>
 800fa18:	0031      	movs	r1, r6
 800fa1a:	9005      	str	r0, [sp, #20]
 800fa1c:	f000 ff1e 	bl	801085c <__mcmp>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	dc02      	bgt.n	800fa2a <_dtoa_r+0xafe>
 800fa24:	d1e5      	bne.n	800f9f2 <_dtoa_r+0xac6>
 800fa26:	07e3      	lsls	r3, r4, #31
 800fa28:	d5e3      	bpl.n	800f9f2 <_dtoa_r+0xac6>
 800fa2a:	2c39      	cmp	r4, #57	; 0x39
 800fa2c:	d1df      	bne.n	800f9ee <_dtoa_r+0xac2>
 800fa2e:	2339      	movs	r3, #57	; 0x39
 800fa30:	9a07      	ldr	r2, [sp, #28]
 800fa32:	7013      	strb	r3, [r2, #0]
 800fa34:	9b08      	ldr	r3, [sp, #32]
 800fa36:	9308      	str	r3, [sp, #32]
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	781a      	ldrb	r2, [r3, #0]
 800fa3c:	2a39      	cmp	r2, #57	; 0x39
 800fa3e:	d063      	beq.n	800fb08 <_dtoa_r+0xbdc>
 800fa40:	3201      	adds	r2, #1
 800fa42:	701a      	strb	r2, [r3, #0]
 800fa44:	e747      	b.n	800f8d6 <_dtoa_r+0x9aa>
 800fa46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	dd03      	ble.n	800fa54 <_dtoa_r+0xb28>
 800fa4c:	2c39      	cmp	r4, #57	; 0x39
 800fa4e:	d0ee      	beq.n	800fa2e <_dtoa_r+0xb02>
 800fa50:	3401      	adds	r4, #1
 800fa52:	e7ce      	b.n	800f9f2 <_dtoa_r+0xac6>
 800fa54:	9b07      	ldr	r3, [sp, #28]
 800fa56:	9a07      	ldr	r2, [sp, #28]
 800fa58:	701c      	strb	r4, [r3, #0]
 800fa5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d03e      	beq.n	800fade <_dtoa_r+0xbb2>
 800fa60:	2300      	movs	r3, #0
 800fa62:	220a      	movs	r2, #10
 800fa64:	9905      	ldr	r1, [sp, #20]
 800fa66:	9804      	ldr	r0, [sp, #16]
 800fa68:	f000 fc8e 	bl	8010388 <__multadd>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	9005      	str	r0, [sp, #20]
 800fa70:	220a      	movs	r2, #10
 800fa72:	0029      	movs	r1, r5
 800fa74:	9804      	ldr	r0, [sp, #16]
 800fa76:	42bd      	cmp	r5, r7
 800fa78:	d106      	bne.n	800fa88 <_dtoa_r+0xb5c>
 800fa7a:	f000 fc85 	bl	8010388 <__multadd>
 800fa7e:	0005      	movs	r5, r0
 800fa80:	0007      	movs	r7, r0
 800fa82:	9b08      	ldr	r3, [sp, #32]
 800fa84:	9307      	str	r3, [sp, #28]
 800fa86:	e784      	b.n	800f992 <_dtoa_r+0xa66>
 800fa88:	f000 fc7e 	bl	8010388 <__multadd>
 800fa8c:	0039      	movs	r1, r7
 800fa8e:	0005      	movs	r5, r0
 800fa90:	2300      	movs	r3, #0
 800fa92:	220a      	movs	r2, #10
 800fa94:	9804      	ldr	r0, [sp, #16]
 800fa96:	f000 fc77 	bl	8010388 <__multadd>
 800fa9a:	0007      	movs	r7, r0
 800fa9c:	e7f1      	b.n	800fa82 <_dtoa_r+0xb56>
 800fa9e:	9b07      	ldr	r3, [sp, #28]
 800faa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800faa2:	2500      	movs	r5, #0
 800faa4:	0031      	movs	r1, r6
 800faa6:	9805      	ldr	r0, [sp, #20]
 800faa8:	f7ff f9b0 	bl	800ee0c <quorem>
 800faac:	9b06      	ldr	r3, [sp, #24]
 800faae:	3030      	adds	r0, #48	; 0x30
 800fab0:	5558      	strb	r0, [r3, r5]
 800fab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fab4:	3501      	adds	r5, #1
 800fab6:	0004      	movs	r4, r0
 800fab8:	42ab      	cmp	r3, r5
 800faba:	dd07      	ble.n	800facc <_dtoa_r+0xba0>
 800fabc:	2300      	movs	r3, #0
 800fabe:	220a      	movs	r2, #10
 800fac0:	9905      	ldr	r1, [sp, #20]
 800fac2:	9804      	ldr	r0, [sp, #16]
 800fac4:	f000 fc60 	bl	8010388 <__multadd>
 800fac8:	9005      	str	r0, [sp, #20]
 800faca:	e7eb      	b.n	800faa4 <_dtoa_r+0xb78>
 800facc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800face:	2301      	movs	r3, #1
 800fad0:	2a00      	cmp	r2, #0
 800fad2:	dd00      	ble.n	800fad6 <_dtoa_r+0xbaa>
 800fad4:	0013      	movs	r3, r2
 800fad6:	2500      	movs	r5, #0
 800fad8:	9a06      	ldr	r2, [sp, #24]
 800fada:	18d3      	adds	r3, r2, r3
 800fadc:	9308      	str	r3, [sp, #32]
 800fade:	9905      	ldr	r1, [sp, #20]
 800fae0:	2201      	movs	r2, #1
 800fae2:	9804      	ldr	r0, [sp, #16]
 800fae4:	f000 fe4c 	bl	8010780 <__lshift>
 800fae8:	0031      	movs	r1, r6
 800faea:	9005      	str	r0, [sp, #20]
 800faec:	f000 feb6 	bl	801085c <__mcmp>
 800faf0:	2800      	cmp	r0, #0
 800faf2:	dc9f      	bgt.n	800fa34 <_dtoa_r+0xb08>
 800faf4:	d101      	bne.n	800fafa <_dtoa_r+0xbce>
 800faf6:	07e4      	lsls	r4, r4, #31
 800faf8:	d49c      	bmi.n	800fa34 <_dtoa_r+0xb08>
 800fafa:	9b08      	ldr	r3, [sp, #32]
 800fafc:	9308      	str	r3, [sp, #32]
 800fafe:	3b01      	subs	r3, #1
 800fb00:	781a      	ldrb	r2, [r3, #0]
 800fb02:	2a30      	cmp	r2, #48	; 0x30
 800fb04:	d0fa      	beq.n	800fafc <_dtoa_r+0xbd0>
 800fb06:	e6e6      	b.n	800f8d6 <_dtoa_r+0x9aa>
 800fb08:	9a06      	ldr	r2, [sp, #24]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d193      	bne.n	800fa36 <_dtoa_r+0xb0a>
 800fb0e:	9b03      	ldr	r3, [sp, #12]
 800fb10:	3301      	adds	r3, #1
 800fb12:	9303      	str	r3, [sp, #12]
 800fb14:	2331      	movs	r3, #49	; 0x31
 800fb16:	7013      	strb	r3, [r2, #0]
 800fb18:	e6dd      	b.n	800f8d6 <_dtoa_r+0x9aa>
 800fb1a:	4b09      	ldr	r3, [pc, #36]	; (800fb40 <_dtoa_r+0xc14>)
 800fb1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fb1e:	9306      	str	r3, [sp, #24]
 800fb20:	4b08      	ldr	r3, [pc, #32]	; (800fb44 <_dtoa_r+0xc18>)
 800fb22:	2a00      	cmp	r2, #0
 800fb24:	d001      	beq.n	800fb2a <_dtoa_r+0xbfe>
 800fb26:	f7ff fa49 	bl	800efbc <_dtoa_r+0x90>
 800fb2a:	f7ff fa49 	bl	800efc0 <_dtoa_r+0x94>
 800fb2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	dcb6      	bgt.n	800faa2 <_dtoa_r+0xb76>
 800fb34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb36:	2b02      	cmp	r3, #2
 800fb38:	dd00      	ble.n	800fb3c <_dtoa_r+0xc10>
 800fb3a:	e6b6      	b.n	800f8aa <_dtoa_r+0x97e>
 800fb3c:	e7b1      	b.n	800faa2 <_dtoa_r+0xb76>
 800fb3e:	46c0      	nop			; (mov r8, r8)
 800fb40:	08013c07 	.word	0x08013c07
 800fb44:	08013c0f 	.word	0x08013c0f

0800fb48 <_free_r>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	0005      	movs	r5, r0
 800fb4c:	2900      	cmp	r1, #0
 800fb4e:	d010      	beq.n	800fb72 <_free_r+0x2a>
 800fb50:	1f0c      	subs	r4, r1, #4
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	da00      	bge.n	800fb5a <_free_r+0x12>
 800fb58:	18e4      	adds	r4, r4, r3
 800fb5a:	0028      	movs	r0, r5
 800fb5c:	f7fd f88a 	bl	800cc74 <__malloc_lock>
 800fb60:	4a1d      	ldr	r2, [pc, #116]	; (800fbd8 <_free_r+0x90>)
 800fb62:	6813      	ldr	r3, [r2, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d105      	bne.n	800fb74 <_free_r+0x2c>
 800fb68:	6063      	str	r3, [r4, #4]
 800fb6a:	6014      	str	r4, [r2, #0]
 800fb6c:	0028      	movs	r0, r5
 800fb6e:	f7fd f889 	bl	800cc84 <__malloc_unlock>
 800fb72:	bd70      	pop	{r4, r5, r6, pc}
 800fb74:	42a3      	cmp	r3, r4
 800fb76:	d908      	bls.n	800fb8a <_free_r+0x42>
 800fb78:	6820      	ldr	r0, [r4, #0]
 800fb7a:	1821      	adds	r1, r4, r0
 800fb7c:	428b      	cmp	r3, r1
 800fb7e:	d1f3      	bne.n	800fb68 <_free_r+0x20>
 800fb80:	6819      	ldr	r1, [r3, #0]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	1809      	adds	r1, r1, r0
 800fb86:	6021      	str	r1, [r4, #0]
 800fb88:	e7ee      	b.n	800fb68 <_free_r+0x20>
 800fb8a:	001a      	movs	r2, r3
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <_free_r+0x4e>
 800fb92:	42a3      	cmp	r3, r4
 800fb94:	d9f9      	bls.n	800fb8a <_free_r+0x42>
 800fb96:	6811      	ldr	r1, [r2, #0]
 800fb98:	1850      	adds	r0, r2, r1
 800fb9a:	42a0      	cmp	r0, r4
 800fb9c:	d10b      	bne.n	800fbb6 <_free_r+0x6e>
 800fb9e:	6820      	ldr	r0, [r4, #0]
 800fba0:	1809      	adds	r1, r1, r0
 800fba2:	1850      	adds	r0, r2, r1
 800fba4:	6011      	str	r1, [r2, #0]
 800fba6:	4283      	cmp	r3, r0
 800fba8:	d1e0      	bne.n	800fb6c <_free_r+0x24>
 800fbaa:	6818      	ldr	r0, [r3, #0]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	1841      	adds	r1, r0, r1
 800fbb0:	6011      	str	r1, [r2, #0]
 800fbb2:	6053      	str	r3, [r2, #4]
 800fbb4:	e7da      	b.n	800fb6c <_free_r+0x24>
 800fbb6:	42a0      	cmp	r0, r4
 800fbb8:	d902      	bls.n	800fbc0 <_free_r+0x78>
 800fbba:	230c      	movs	r3, #12
 800fbbc:	602b      	str	r3, [r5, #0]
 800fbbe:	e7d5      	b.n	800fb6c <_free_r+0x24>
 800fbc0:	6820      	ldr	r0, [r4, #0]
 800fbc2:	1821      	adds	r1, r4, r0
 800fbc4:	428b      	cmp	r3, r1
 800fbc6:	d103      	bne.n	800fbd0 <_free_r+0x88>
 800fbc8:	6819      	ldr	r1, [r3, #0]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	1809      	adds	r1, r1, r0
 800fbce:	6021      	str	r1, [r4, #0]
 800fbd0:	6063      	str	r3, [r4, #4]
 800fbd2:	6054      	str	r4, [r2, #4]
 800fbd4:	e7ca      	b.n	800fb6c <_free_r+0x24>
 800fbd6:	46c0      	nop			; (mov r8, r8)
 800fbd8:	200066cc 	.word	0x200066cc

0800fbdc <rshift>:
 800fbdc:	0002      	movs	r2, r0
 800fbde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbe0:	6904      	ldr	r4, [r0, #16]
 800fbe2:	114b      	asrs	r3, r1, #5
 800fbe4:	b085      	sub	sp, #20
 800fbe6:	3214      	adds	r2, #20
 800fbe8:	9302      	str	r3, [sp, #8]
 800fbea:	114d      	asrs	r5, r1, #5
 800fbec:	0013      	movs	r3, r2
 800fbee:	42ac      	cmp	r4, r5
 800fbf0:	dd32      	ble.n	800fc58 <rshift+0x7c>
 800fbf2:	261f      	movs	r6, #31
 800fbf4:	000f      	movs	r7, r1
 800fbf6:	114b      	asrs	r3, r1, #5
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	00a5      	lsls	r5, r4, #2
 800fbfc:	18d3      	adds	r3, r2, r3
 800fbfe:	4037      	ands	r7, r6
 800fc00:	1955      	adds	r5, r2, r5
 800fc02:	9300      	str	r3, [sp, #0]
 800fc04:	9701      	str	r7, [sp, #4]
 800fc06:	4231      	tst	r1, r6
 800fc08:	d10d      	bne.n	800fc26 <rshift+0x4a>
 800fc0a:	0016      	movs	r6, r2
 800fc0c:	0019      	movs	r1, r3
 800fc0e:	428d      	cmp	r5, r1
 800fc10:	d836      	bhi.n	800fc80 <rshift+0xa4>
 800fc12:	9900      	ldr	r1, [sp, #0]
 800fc14:	2300      	movs	r3, #0
 800fc16:	3903      	subs	r1, #3
 800fc18:	428d      	cmp	r5, r1
 800fc1a:	d302      	bcc.n	800fc22 <rshift+0x46>
 800fc1c:	9b02      	ldr	r3, [sp, #8]
 800fc1e:	1ae4      	subs	r4, r4, r3
 800fc20:	00a3      	lsls	r3, r4, #2
 800fc22:	18d3      	adds	r3, r2, r3
 800fc24:	e018      	b.n	800fc58 <rshift+0x7c>
 800fc26:	2120      	movs	r1, #32
 800fc28:	9e01      	ldr	r6, [sp, #4]
 800fc2a:	9f01      	ldr	r7, [sp, #4]
 800fc2c:	1b89      	subs	r1, r1, r6
 800fc2e:	9e00      	ldr	r6, [sp, #0]
 800fc30:	9103      	str	r1, [sp, #12]
 800fc32:	ce02      	ldmia	r6!, {r1}
 800fc34:	4694      	mov	ip, r2
 800fc36:	40f9      	lsrs	r1, r7
 800fc38:	42b5      	cmp	r5, r6
 800fc3a:	d816      	bhi.n	800fc6a <rshift+0x8e>
 800fc3c:	9e00      	ldr	r6, [sp, #0]
 800fc3e:	2300      	movs	r3, #0
 800fc40:	3601      	adds	r6, #1
 800fc42:	42b5      	cmp	r5, r6
 800fc44:	d303      	bcc.n	800fc4e <rshift+0x72>
 800fc46:	9b02      	ldr	r3, [sp, #8]
 800fc48:	1ae3      	subs	r3, r4, r3
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	3b04      	subs	r3, #4
 800fc4e:	18d3      	adds	r3, r2, r3
 800fc50:	6019      	str	r1, [r3, #0]
 800fc52:	2900      	cmp	r1, #0
 800fc54:	d000      	beq.n	800fc58 <rshift+0x7c>
 800fc56:	3304      	adds	r3, #4
 800fc58:	1a99      	subs	r1, r3, r2
 800fc5a:	1089      	asrs	r1, r1, #2
 800fc5c:	6101      	str	r1, [r0, #16]
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d101      	bne.n	800fc66 <rshift+0x8a>
 800fc62:	2300      	movs	r3, #0
 800fc64:	6143      	str	r3, [r0, #20]
 800fc66:	b005      	add	sp, #20
 800fc68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc6a:	6837      	ldr	r7, [r6, #0]
 800fc6c:	9b03      	ldr	r3, [sp, #12]
 800fc6e:	409f      	lsls	r7, r3
 800fc70:	430f      	orrs	r7, r1
 800fc72:	4661      	mov	r1, ip
 800fc74:	c180      	stmia	r1!, {r7}
 800fc76:	468c      	mov	ip, r1
 800fc78:	9b01      	ldr	r3, [sp, #4]
 800fc7a:	ce02      	ldmia	r6!, {r1}
 800fc7c:	40d9      	lsrs	r1, r3
 800fc7e:	e7db      	b.n	800fc38 <rshift+0x5c>
 800fc80:	c980      	ldmia	r1!, {r7}
 800fc82:	c680      	stmia	r6!, {r7}
 800fc84:	e7c3      	b.n	800fc0e <rshift+0x32>

0800fc86 <__hexdig_fun>:
 800fc86:	0002      	movs	r2, r0
 800fc88:	3a30      	subs	r2, #48	; 0x30
 800fc8a:	0003      	movs	r3, r0
 800fc8c:	2a09      	cmp	r2, #9
 800fc8e:	d802      	bhi.n	800fc96 <__hexdig_fun+0x10>
 800fc90:	3b20      	subs	r3, #32
 800fc92:	b2d8      	uxtb	r0, r3
 800fc94:	4770      	bx	lr
 800fc96:	0002      	movs	r2, r0
 800fc98:	3a61      	subs	r2, #97	; 0x61
 800fc9a:	2a05      	cmp	r2, #5
 800fc9c:	d801      	bhi.n	800fca2 <__hexdig_fun+0x1c>
 800fc9e:	3b47      	subs	r3, #71	; 0x47
 800fca0:	e7f7      	b.n	800fc92 <__hexdig_fun+0xc>
 800fca2:	001a      	movs	r2, r3
 800fca4:	3a41      	subs	r2, #65	; 0x41
 800fca6:	2000      	movs	r0, #0
 800fca8:	2a05      	cmp	r2, #5
 800fcaa:	d8f3      	bhi.n	800fc94 <__hexdig_fun+0xe>
 800fcac:	3b27      	subs	r3, #39	; 0x27
 800fcae:	e7f0      	b.n	800fc92 <__hexdig_fun+0xc>

0800fcb0 <__gethex>:
 800fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcb2:	b089      	sub	sp, #36	; 0x24
 800fcb4:	9307      	str	r3, [sp, #28]
 800fcb6:	2302      	movs	r3, #2
 800fcb8:	9201      	str	r2, [sp, #4]
 800fcba:	680a      	ldr	r2, [r1, #0]
 800fcbc:	425b      	negs	r3, r3
 800fcbe:	9003      	str	r0, [sp, #12]
 800fcc0:	9106      	str	r1, [sp, #24]
 800fcc2:	1c96      	adds	r6, r2, #2
 800fcc4:	1a9b      	subs	r3, r3, r2
 800fcc6:	199a      	adds	r2, r3, r6
 800fcc8:	9600      	str	r6, [sp, #0]
 800fcca:	9205      	str	r2, [sp, #20]
 800fccc:	9a00      	ldr	r2, [sp, #0]
 800fcce:	3601      	adds	r6, #1
 800fcd0:	7810      	ldrb	r0, [r2, #0]
 800fcd2:	2830      	cmp	r0, #48	; 0x30
 800fcd4:	d0f7      	beq.n	800fcc6 <__gethex+0x16>
 800fcd6:	f7ff ffd6 	bl	800fc86 <__hexdig_fun>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	001d      	movs	r5, r3
 800fcde:	9302      	str	r3, [sp, #8]
 800fce0:	4298      	cmp	r0, r3
 800fce2:	d11d      	bne.n	800fd20 <__gethex+0x70>
 800fce4:	2201      	movs	r2, #1
 800fce6:	49a6      	ldr	r1, [pc, #664]	; (800ff80 <__gethex+0x2d0>)
 800fce8:	9800      	ldr	r0, [sp, #0]
 800fcea:	f7fe feae 	bl	800ea4a <strncmp>
 800fcee:	0007      	movs	r7, r0
 800fcf0:	42a8      	cmp	r0, r5
 800fcf2:	d169      	bne.n	800fdc8 <__gethex+0x118>
 800fcf4:	9b00      	ldr	r3, [sp, #0]
 800fcf6:	0034      	movs	r4, r6
 800fcf8:	7858      	ldrb	r0, [r3, #1]
 800fcfa:	f7ff ffc4 	bl	800fc86 <__hexdig_fun>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	9302      	str	r3, [sp, #8]
 800fd02:	42a8      	cmp	r0, r5
 800fd04:	d02f      	beq.n	800fd66 <__gethex+0xb6>
 800fd06:	9600      	str	r6, [sp, #0]
 800fd08:	9b00      	ldr	r3, [sp, #0]
 800fd0a:	7818      	ldrb	r0, [r3, #0]
 800fd0c:	2830      	cmp	r0, #48	; 0x30
 800fd0e:	d009      	beq.n	800fd24 <__gethex+0x74>
 800fd10:	f7ff ffb9 	bl	800fc86 <__hexdig_fun>
 800fd14:	4242      	negs	r2, r0
 800fd16:	4142      	adcs	r2, r0
 800fd18:	2301      	movs	r3, #1
 800fd1a:	0035      	movs	r5, r6
 800fd1c:	9202      	str	r2, [sp, #8]
 800fd1e:	9305      	str	r3, [sp, #20]
 800fd20:	9c00      	ldr	r4, [sp, #0]
 800fd22:	e004      	b.n	800fd2e <__gethex+0x7e>
 800fd24:	9b00      	ldr	r3, [sp, #0]
 800fd26:	3301      	adds	r3, #1
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	e7ed      	b.n	800fd08 <__gethex+0x58>
 800fd2c:	3401      	adds	r4, #1
 800fd2e:	7820      	ldrb	r0, [r4, #0]
 800fd30:	f7ff ffa9 	bl	800fc86 <__hexdig_fun>
 800fd34:	1e07      	subs	r7, r0, #0
 800fd36:	d1f9      	bne.n	800fd2c <__gethex+0x7c>
 800fd38:	2201      	movs	r2, #1
 800fd3a:	0020      	movs	r0, r4
 800fd3c:	4990      	ldr	r1, [pc, #576]	; (800ff80 <__gethex+0x2d0>)
 800fd3e:	f7fe fe84 	bl	800ea4a <strncmp>
 800fd42:	2800      	cmp	r0, #0
 800fd44:	d10d      	bne.n	800fd62 <__gethex+0xb2>
 800fd46:	2d00      	cmp	r5, #0
 800fd48:	d106      	bne.n	800fd58 <__gethex+0xa8>
 800fd4a:	3401      	adds	r4, #1
 800fd4c:	0025      	movs	r5, r4
 800fd4e:	7820      	ldrb	r0, [r4, #0]
 800fd50:	f7ff ff99 	bl	800fc86 <__hexdig_fun>
 800fd54:	2800      	cmp	r0, #0
 800fd56:	d102      	bne.n	800fd5e <__gethex+0xae>
 800fd58:	1b2d      	subs	r5, r5, r4
 800fd5a:	00af      	lsls	r7, r5, #2
 800fd5c:	e003      	b.n	800fd66 <__gethex+0xb6>
 800fd5e:	3401      	adds	r4, #1
 800fd60:	e7f5      	b.n	800fd4e <__gethex+0x9e>
 800fd62:	2d00      	cmp	r5, #0
 800fd64:	d1f8      	bne.n	800fd58 <__gethex+0xa8>
 800fd66:	2220      	movs	r2, #32
 800fd68:	7823      	ldrb	r3, [r4, #0]
 800fd6a:	0026      	movs	r6, r4
 800fd6c:	4393      	bics	r3, r2
 800fd6e:	2b50      	cmp	r3, #80	; 0x50
 800fd70:	d11d      	bne.n	800fdae <__gethex+0xfe>
 800fd72:	7863      	ldrb	r3, [r4, #1]
 800fd74:	2b2b      	cmp	r3, #43	; 0x2b
 800fd76:	d02c      	beq.n	800fdd2 <__gethex+0x122>
 800fd78:	2b2d      	cmp	r3, #45	; 0x2d
 800fd7a:	d02e      	beq.n	800fdda <__gethex+0x12a>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	1c66      	adds	r6, r4, #1
 800fd80:	9304      	str	r3, [sp, #16]
 800fd82:	7830      	ldrb	r0, [r6, #0]
 800fd84:	f7ff ff7f 	bl	800fc86 <__hexdig_fun>
 800fd88:	1e43      	subs	r3, r0, #1
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	2b18      	cmp	r3, #24
 800fd8e:	d82b      	bhi.n	800fde8 <__gethex+0x138>
 800fd90:	3810      	subs	r0, #16
 800fd92:	0005      	movs	r5, r0
 800fd94:	7870      	ldrb	r0, [r6, #1]
 800fd96:	f7ff ff76 	bl	800fc86 <__hexdig_fun>
 800fd9a:	1e43      	subs	r3, r0, #1
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	3601      	adds	r6, #1
 800fda0:	2b18      	cmp	r3, #24
 800fda2:	d91c      	bls.n	800fdde <__gethex+0x12e>
 800fda4:	9b04      	ldr	r3, [sp, #16]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d000      	beq.n	800fdac <__gethex+0xfc>
 800fdaa:	426d      	negs	r5, r5
 800fdac:	197f      	adds	r7, r7, r5
 800fdae:	9b06      	ldr	r3, [sp, #24]
 800fdb0:	601e      	str	r6, [r3, #0]
 800fdb2:	9b02      	ldr	r3, [sp, #8]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d019      	beq.n	800fdec <__gethex+0x13c>
 800fdb8:	2600      	movs	r6, #0
 800fdba:	9b05      	ldr	r3, [sp, #20]
 800fdbc:	42b3      	cmp	r3, r6
 800fdbe:	d100      	bne.n	800fdc2 <__gethex+0x112>
 800fdc0:	3606      	adds	r6, #6
 800fdc2:	0030      	movs	r0, r6
 800fdc4:	b009      	add	sp, #36	; 0x24
 800fdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc8:	2301      	movs	r3, #1
 800fdca:	2700      	movs	r7, #0
 800fdcc:	9c00      	ldr	r4, [sp, #0]
 800fdce:	9302      	str	r3, [sp, #8]
 800fdd0:	e7c9      	b.n	800fd66 <__gethex+0xb6>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	9304      	str	r3, [sp, #16]
 800fdd6:	1ca6      	adds	r6, r4, #2
 800fdd8:	e7d3      	b.n	800fd82 <__gethex+0xd2>
 800fdda:	2301      	movs	r3, #1
 800fddc:	e7fa      	b.n	800fdd4 <__gethex+0x124>
 800fdde:	230a      	movs	r3, #10
 800fde0:	435d      	muls	r5, r3
 800fde2:	182d      	adds	r5, r5, r0
 800fde4:	3d10      	subs	r5, #16
 800fde6:	e7d5      	b.n	800fd94 <__gethex+0xe4>
 800fde8:	0026      	movs	r6, r4
 800fdea:	e7e0      	b.n	800fdae <__gethex+0xfe>
 800fdec:	9b00      	ldr	r3, [sp, #0]
 800fdee:	9902      	ldr	r1, [sp, #8]
 800fdf0:	1ae3      	subs	r3, r4, r3
 800fdf2:	3b01      	subs	r3, #1
 800fdf4:	2b07      	cmp	r3, #7
 800fdf6:	dc0a      	bgt.n	800fe0e <__gethex+0x15e>
 800fdf8:	9803      	ldr	r0, [sp, #12]
 800fdfa:	f000 fa5d 	bl	80102b8 <_Balloc>
 800fdfe:	1e05      	subs	r5, r0, #0
 800fe00:	d108      	bne.n	800fe14 <__gethex+0x164>
 800fe02:	002a      	movs	r2, r5
 800fe04:	21e4      	movs	r1, #228	; 0xe4
 800fe06:	4b5f      	ldr	r3, [pc, #380]	; (800ff84 <__gethex+0x2d4>)
 800fe08:	485f      	ldr	r0, [pc, #380]	; (800ff88 <__gethex+0x2d8>)
 800fe0a:	f7fe ffe1 	bl	800edd0 <__assert_func>
 800fe0e:	3101      	adds	r1, #1
 800fe10:	105b      	asrs	r3, r3, #1
 800fe12:	e7ef      	b.n	800fdf4 <__gethex+0x144>
 800fe14:	0003      	movs	r3, r0
 800fe16:	3314      	adds	r3, #20
 800fe18:	9302      	str	r3, [sp, #8]
 800fe1a:	9305      	str	r3, [sp, #20]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	001e      	movs	r6, r3
 800fe20:	9304      	str	r3, [sp, #16]
 800fe22:	9b00      	ldr	r3, [sp, #0]
 800fe24:	42a3      	cmp	r3, r4
 800fe26:	d33f      	bcc.n	800fea8 <__gethex+0x1f8>
 800fe28:	9c05      	ldr	r4, [sp, #20]
 800fe2a:	9b02      	ldr	r3, [sp, #8]
 800fe2c:	c440      	stmia	r4!, {r6}
 800fe2e:	1ae4      	subs	r4, r4, r3
 800fe30:	10a4      	asrs	r4, r4, #2
 800fe32:	0030      	movs	r0, r6
 800fe34:	612c      	str	r4, [r5, #16]
 800fe36:	f000 fb37 	bl	80104a8 <__hi0bits>
 800fe3a:	9b01      	ldr	r3, [sp, #4]
 800fe3c:	0164      	lsls	r4, r4, #5
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	1a26      	subs	r6, r4, r0
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	429e      	cmp	r6, r3
 800fe46:	dd51      	ble.n	800feec <__gethex+0x23c>
 800fe48:	1af6      	subs	r6, r6, r3
 800fe4a:	0031      	movs	r1, r6
 800fe4c:	0028      	movs	r0, r5
 800fe4e:	f000 fecb 	bl	8010be8 <__any_on>
 800fe52:	1e04      	subs	r4, r0, #0
 800fe54:	d016      	beq.n	800fe84 <__gethex+0x1d4>
 800fe56:	2401      	movs	r4, #1
 800fe58:	231f      	movs	r3, #31
 800fe5a:	0020      	movs	r0, r4
 800fe5c:	1e72      	subs	r2, r6, #1
 800fe5e:	4013      	ands	r3, r2
 800fe60:	4098      	lsls	r0, r3
 800fe62:	0003      	movs	r3, r0
 800fe64:	1151      	asrs	r1, r2, #5
 800fe66:	9802      	ldr	r0, [sp, #8]
 800fe68:	0089      	lsls	r1, r1, #2
 800fe6a:	5809      	ldr	r1, [r1, r0]
 800fe6c:	4219      	tst	r1, r3
 800fe6e:	d009      	beq.n	800fe84 <__gethex+0x1d4>
 800fe70:	42a2      	cmp	r2, r4
 800fe72:	dd06      	ble.n	800fe82 <__gethex+0x1d2>
 800fe74:	0028      	movs	r0, r5
 800fe76:	1eb1      	subs	r1, r6, #2
 800fe78:	f000 feb6 	bl	8010be8 <__any_on>
 800fe7c:	3402      	adds	r4, #2
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d100      	bne.n	800fe84 <__gethex+0x1d4>
 800fe82:	2402      	movs	r4, #2
 800fe84:	0031      	movs	r1, r6
 800fe86:	0028      	movs	r0, r5
 800fe88:	f7ff fea8 	bl	800fbdc <rshift>
 800fe8c:	19bf      	adds	r7, r7, r6
 800fe8e:	9b01      	ldr	r3, [sp, #4]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	42bb      	cmp	r3, r7
 800fe94:	da3a      	bge.n	800ff0c <__gethex+0x25c>
 800fe96:	0029      	movs	r1, r5
 800fe98:	9803      	ldr	r0, [sp, #12]
 800fe9a:	f000 fa51 	bl	8010340 <_Bfree>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fea2:	26a3      	movs	r6, #163	; 0xa3
 800fea4:	6013      	str	r3, [r2, #0]
 800fea6:	e78c      	b.n	800fdc2 <__gethex+0x112>
 800fea8:	3c01      	subs	r4, #1
 800feaa:	7823      	ldrb	r3, [r4, #0]
 800feac:	2b2e      	cmp	r3, #46	; 0x2e
 800feae:	d012      	beq.n	800fed6 <__gethex+0x226>
 800feb0:	9b04      	ldr	r3, [sp, #16]
 800feb2:	2b20      	cmp	r3, #32
 800feb4:	d104      	bne.n	800fec0 <__gethex+0x210>
 800feb6:	9b05      	ldr	r3, [sp, #20]
 800feb8:	c340      	stmia	r3!, {r6}
 800feba:	2600      	movs	r6, #0
 800febc:	9305      	str	r3, [sp, #20]
 800febe:	9604      	str	r6, [sp, #16]
 800fec0:	7820      	ldrb	r0, [r4, #0]
 800fec2:	f7ff fee0 	bl	800fc86 <__hexdig_fun>
 800fec6:	230f      	movs	r3, #15
 800fec8:	4018      	ands	r0, r3
 800feca:	9b04      	ldr	r3, [sp, #16]
 800fecc:	4098      	lsls	r0, r3
 800fece:	3304      	adds	r3, #4
 800fed0:	4306      	orrs	r6, r0
 800fed2:	9304      	str	r3, [sp, #16]
 800fed4:	e7a5      	b.n	800fe22 <__gethex+0x172>
 800fed6:	9b00      	ldr	r3, [sp, #0]
 800fed8:	42a3      	cmp	r3, r4
 800feda:	d8e9      	bhi.n	800feb0 <__gethex+0x200>
 800fedc:	2201      	movs	r2, #1
 800fede:	0020      	movs	r0, r4
 800fee0:	4927      	ldr	r1, [pc, #156]	; (800ff80 <__gethex+0x2d0>)
 800fee2:	f7fe fdb2 	bl	800ea4a <strncmp>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d1e2      	bne.n	800feb0 <__gethex+0x200>
 800feea:	e79a      	b.n	800fe22 <__gethex+0x172>
 800feec:	9b00      	ldr	r3, [sp, #0]
 800feee:	2400      	movs	r4, #0
 800fef0:	429e      	cmp	r6, r3
 800fef2:	dacc      	bge.n	800fe8e <__gethex+0x1de>
 800fef4:	1b9e      	subs	r6, r3, r6
 800fef6:	0029      	movs	r1, r5
 800fef8:	0032      	movs	r2, r6
 800fefa:	9803      	ldr	r0, [sp, #12]
 800fefc:	f000 fc40 	bl	8010780 <__lshift>
 800ff00:	0003      	movs	r3, r0
 800ff02:	3314      	adds	r3, #20
 800ff04:	0005      	movs	r5, r0
 800ff06:	1bbf      	subs	r7, r7, r6
 800ff08:	9302      	str	r3, [sp, #8]
 800ff0a:	e7c0      	b.n	800fe8e <__gethex+0x1de>
 800ff0c:	9b01      	ldr	r3, [sp, #4]
 800ff0e:	685e      	ldr	r6, [r3, #4]
 800ff10:	42be      	cmp	r6, r7
 800ff12:	dd70      	ble.n	800fff6 <__gethex+0x346>
 800ff14:	9b00      	ldr	r3, [sp, #0]
 800ff16:	1bf6      	subs	r6, r6, r7
 800ff18:	42b3      	cmp	r3, r6
 800ff1a:	dc37      	bgt.n	800ff8c <__gethex+0x2dc>
 800ff1c:	9b01      	ldr	r3, [sp, #4]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	2b02      	cmp	r3, #2
 800ff22:	d024      	beq.n	800ff6e <__gethex+0x2be>
 800ff24:	2b03      	cmp	r3, #3
 800ff26:	d026      	beq.n	800ff76 <__gethex+0x2c6>
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d117      	bne.n	800ff5c <__gethex+0x2ac>
 800ff2c:	9b00      	ldr	r3, [sp, #0]
 800ff2e:	42b3      	cmp	r3, r6
 800ff30:	d114      	bne.n	800ff5c <__gethex+0x2ac>
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d10b      	bne.n	800ff4e <__gethex+0x29e>
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	9a07      	ldr	r2, [sp, #28]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	2662      	movs	r6, #98	; 0x62
 800ff3e:	6013      	str	r3, [r2, #0]
 800ff40:	2301      	movs	r3, #1
 800ff42:	9a02      	ldr	r2, [sp, #8]
 800ff44:	612b      	str	r3, [r5, #16]
 800ff46:	6013      	str	r3, [r2, #0]
 800ff48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff4a:	601d      	str	r5, [r3, #0]
 800ff4c:	e739      	b.n	800fdc2 <__gethex+0x112>
 800ff4e:	9900      	ldr	r1, [sp, #0]
 800ff50:	0028      	movs	r0, r5
 800ff52:	3901      	subs	r1, #1
 800ff54:	f000 fe48 	bl	8010be8 <__any_on>
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d1ec      	bne.n	800ff36 <__gethex+0x286>
 800ff5c:	0029      	movs	r1, r5
 800ff5e:	9803      	ldr	r0, [sp, #12]
 800ff60:	f000 f9ee 	bl	8010340 <_Bfree>
 800ff64:	2300      	movs	r3, #0
 800ff66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff68:	2650      	movs	r6, #80	; 0x50
 800ff6a:	6013      	str	r3, [r2, #0]
 800ff6c:	e729      	b.n	800fdc2 <__gethex+0x112>
 800ff6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1f3      	bne.n	800ff5c <__gethex+0x2ac>
 800ff74:	e7df      	b.n	800ff36 <__gethex+0x286>
 800ff76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d1dc      	bne.n	800ff36 <__gethex+0x286>
 800ff7c:	e7ee      	b.n	800ff5c <__gethex+0x2ac>
 800ff7e:	46c0      	nop			; (mov r8, r8)
 800ff80:	080139c4 	.word	0x080139c4
 800ff84:	08013c6c 	.word	0x08013c6c
 800ff88:	08013c7d 	.word	0x08013c7d
 800ff8c:	1e77      	subs	r7, r6, #1
 800ff8e:	2c00      	cmp	r4, #0
 800ff90:	d12f      	bne.n	800fff2 <__gethex+0x342>
 800ff92:	2f00      	cmp	r7, #0
 800ff94:	d004      	beq.n	800ffa0 <__gethex+0x2f0>
 800ff96:	0039      	movs	r1, r7
 800ff98:	0028      	movs	r0, r5
 800ff9a:	f000 fe25 	bl	8010be8 <__any_on>
 800ff9e:	0004      	movs	r4, r0
 800ffa0:	231f      	movs	r3, #31
 800ffa2:	117a      	asrs	r2, r7, #5
 800ffa4:	401f      	ands	r7, r3
 800ffa6:	3b1e      	subs	r3, #30
 800ffa8:	40bb      	lsls	r3, r7
 800ffaa:	9902      	ldr	r1, [sp, #8]
 800ffac:	0092      	lsls	r2, r2, #2
 800ffae:	5852      	ldr	r2, [r2, r1]
 800ffb0:	421a      	tst	r2, r3
 800ffb2:	d001      	beq.n	800ffb8 <__gethex+0x308>
 800ffb4:	2302      	movs	r3, #2
 800ffb6:	431c      	orrs	r4, r3
 800ffb8:	9b00      	ldr	r3, [sp, #0]
 800ffba:	0031      	movs	r1, r6
 800ffbc:	1b9b      	subs	r3, r3, r6
 800ffbe:	2602      	movs	r6, #2
 800ffc0:	0028      	movs	r0, r5
 800ffc2:	9300      	str	r3, [sp, #0]
 800ffc4:	f7ff fe0a 	bl	800fbdc <rshift>
 800ffc8:	9b01      	ldr	r3, [sp, #4]
 800ffca:	685f      	ldr	r7, [r3, #4]
 800ffcc:	2c00      	cmp	r4, #0
 800ffce:	d041      	beq.n	8010054 <__gethex+0x3a4>
 800ffd0:	9b01      	ldr	r3, [sp, #4]
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	d010      	beq.n	800fffa <__gethex+0x34a>
 800ffd8:	2b03      	cmp	r3, #3
 800ffda:	d012      	beq.n	8010002 <__gethex+0x352>
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d106      	bne.n	800ffee <__gethex+0x33e>
 800ffe0:	07a2      	lsls	r2, r4, #30
 800ffe2:	d504      	bpl.n	800ffee <__gethex+0x33e>
 800ffe4:	9a02      	ldr	r2, [sp, #8]
 800ffe6:	6812      	ldr	r2, [r2, #0]
 800ffe8:	4314      	orrs	r4, r2
 800ffea:	421c      	tst	r4, r3
 800ffec:	d10c      	bne.n	8010008 <__gethex+0x358>
 800ffee:	2310      	movs	r3, #16
 800fff0:	e02f      	b.n	8010052 <__gethex+0x3a2>
 800fff2:	2401      	movs	r4, #1
 800fff4:	e7d4      	b.n	800ffa0 <__gethex+0x2f0>
 800fff6:	2601      	movs	r6, #1
 800fff8:	e7e8      	b.n	800ffcc <__gethex+0x31c>
 800fffa:	2301      	movs	r3, #1
 800fffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fffe:	1a9b      	subs	r3, r3, r2
 8010000:	930f      	str	r3, [sp, #60]	; 0x3c
 8010002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010004:	2b00      	cmp	r3, #0
 8010006:	d0f2      	beq.n	800ffee <__gethex+0x33e>
 8010008:	692b      	ldr	r3, [r5, #16]
 801000a:	2000      	movs	r0, #0
 801000c:	9302      	str	r3, [sp, #8]
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	9304      	str	r3, [sp, #16]
 8010012:	002b      	movs	r3, r5
 8010014:	9a04      	ldr	r2, [sp, #16]
 8010016:	3314      	adds	r3, #20
 8010018:	1899      	adds	r1, r3, r2
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	1c54      	adds	r4, r2, #1
 801001e:	d01e      	beq.n	801005e <__gethex+0x3ae>
 8010020:	3201      	adds	r2, #1
 8010022:	601a      	str	r2, [r3, #0]
 8010024:	002b      	movs	r3, r5
 8010026:	3314      	adds	r3, #20
 8010028:	2e02      	cmp	r6, #2
 801002a:	d141      	bne.n	80100b0 <__gethex+0x400>
 801002c:	9a01      	ldr	r2, [sp, #4]
 801002e:	9900      	ldr	r1, [sp, #0]
 8010030:	6812      	ldr	r2, [r2, #0]
 8010032:	3a01      	subs	r2, #1
 8010034:	428a      	cmp	r2, r1
 8010036:	d10b      	bne.n	8010050 <__gethex+0x3a0>
 8010038:	221f      	movs	r2, #31
 801003a:	9800      	ldr	r0, [sp, #0]
 801003c:	1149      	asrs	r1, r1, #5
 801003e:	4002      	ands	r2, r0
 8010040:	2001      	movs	r0, #1
 8010042:	0004      	movs	r4, r0
 8010044:	4094      	lsls	r4, r2
 8010046:	0089      	lsls	r1, r1, #2
 8010048:	58cb      	ldr	r3, [r1, r3]
 801004a:	4223      	tst	r3, r4
 801004c:	d000      	beq.n	8010050 <__gethex+0x3a0>
 801004e:	2601      	movs	r6, #1
 8010050:	2320      	movs	r3, #32
 8010052:	431e      	orrs	r6, r3
 8010054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010056:	601d      	str	r5, [r3, #0]
 8010058:	9b07      	ldr	r3, [sp, #28]
 801005a:	601f      	str	r7, [r3, #0]
 801005c:	e6b1      	b.n	800fdc2 <__gethex+0x112>
 801005e:	c301      	stmia	r3!, {r0}
 8010060:	4299      	cmp	r1, r3
 8010062:	d8da      	bhi.n	801001a <__gethex+0x36a>
 8010064:	68ab      	ldr	r3, [r5, #8]
 8010066:	9a02      	ldr	r2, [sp, #8]
 8010068:	429a      	cmp	r2, r3
 801006a:	db18      	blt.n	801009e <__gethex+0x3ee>
 801006c:	6869      	ldr	r1, [r5, #4]
 801006e:	9803      	ldr	r0, [sp, #12]
 8010070:	3101      	adds	r1, #1
 8010072:	f000 f921 	bl	80102b8 <_Balloc>
 8010076:	1e04      	subs	r4, r0, #0
 8010078:	d104      	bne.n	8010084 <__gethex+0x3d4>
 801007a:	0022      	movs	r2, r4
 801007c:	2184      	movs	r1, #132	; 0x84
 801007e:	4b1c      	ldr	r3, [pc, #112]	; (80100f0 <__gethex+0x440>)
 8010080:	481c      	ldr	r0, [pc, #112]	; (80100f4 <__gethex+0x444>)
 8010082:	e6c2      	b.n	800fe0a <__gethex+0x15a>
 8010084:	0029      	movs	r1, r5
 8010086:	692a      	ldr	r2, [r5, #16]
 8010088:	310c      	adds	r1, #12
 801008a:	3202      	adds	r2, #2
 801008c:	0092      	lsls	r2, r2, #2
 801008e:	300c      	adds	r0, #12
 8010090:	f7fe fe8a 	bl	800eda8 <memcpy>
 8010094:	0029      	movs	r1, r5
 8010096:	9803      	ldr	r0, [sp, #12]
 8010098:	f000 f952 	bl	8010340 <_Bfree>
 801009c:	0025      	movs	r5, r4
 801009e:	692b      	ldr	r3, [r5, #16]
 80100a0:	1c5a      	adds	r2, r3, #1
 80100a2:	612a      	str	r2, [r5, #16]
 80100a4:	2201      	movs	r2, #1
 80100a6:	3304      	adds	r3, #4
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	18eb      	adds	r3, r5, r3
 80100ac:	605a      	str	r2, [r3, #4]
 80100ae:	e7b9      	b.n	8010024 <__gethex+0x374>
 80100b0:	692a      	ldr	r2, [r5, #16]
 80100b2:	9902      	ldr	r1, [sp, #8]
 80100b4:	428a      	cmp	r2, r1
 80100b6:	dd09      	ble.n	80100cc <__gethex+0x41c>
 80100b8:	2101      	movs	r1, #1
 80100ba:	0028      	movs	r0, r5
 80100bc:	f7ff fd8e 	bl	800fbdc <rshift>
 80100c0:	9b01      	ldr	r3, [sp, #4]
 80100c2:	3701      	adds	r7, #1
 80100c4:	689b      	ldr	r3, [r3, #8]
 80100c6:	42bb      	cmp	r3, r7
 80100c8:	dac1      	bge.n	801004e <__gethex+0x39e>
 80100ca:	e6e4      	b.n	800fe96 <__gethex+0x1e6>
 80100cc:	221f      	movs	r2, #31
 80100ce:	9c00      	ldr	r4, [sp, #0]
 80100d0:	9900      	ldr	r1, [sp, #0]
 80100d2:	2601      	movs	r6, #1
 80100d4:	4014      	ands	r4, r2
 80100d6:	4211      	tst	r1, r2
 80100d8:	d0ba      	beq.n	8010050 <__gethex+0x3a0>
 80100da:	9a04      	ldr	r2, [sp, #16]
 80100dc:	189b      	adds	r3, r3, r2
 80100de:	3b04      	subs	r3, #4
 80100e0:	6818      	ldr	r0, [r3, #0]
 80100e2:	f000 f9e1 	bl	80104a8 <__hi0bits>
 80100e6:	2320      	movs	r3, #32
 80100e8:	1b1b      	subs	r3, r3, r4
 80100ea:	4298      	cmp	r0, r3
 80100ec:	dbe4      	blt.n	80100b8 <__gethex+0x408>
 80100ee:	e7af      	b.n	8010050 <__gethex+0x3a0>
 80100f0:	08013c6c 	.word	0x08013c6c
 80100f4:	08013c7d 	.word	0x08013c7d

080100f8 <L_shift>:
 80100f8:	2308      	movs	r3, #8
 80100fa:	b570      	push	{r4, r5, r6, lr}
 80100fc:	2520      	movs	r5, #32
 80100fe:	1a9a      	subs	r2, r3, r2
 8010100:	0092      	lsls	r2, r2, #2
 8010102:	1aad      	subs	r5, r5, r2
 8010104:	6843      	ldr	r3, [r0, #4]
 8010106:	6804      	ldr	r4, [r0, #0]
 8010108:	001e      	movs	r6, r3
 801010a:	40ae      	lsls	r6, r5
 801010c:	40d3      	lsrs	r3, r2
 801010e:	4334      	orrs	r4, r6
 8010110:	6004      	str	r4, [r0, #0]
 8010112:	6043      	str	r3, [r0, #4]
 8010114:	3004      	adds	r0, #4
 8010116:	4288      	cmp	r0, r1
 8010118:	d3f4      	bcc.n	8010104 <L_shift+0xc>
 801011a:	bd70      	pop	{r4, r5, r6, pc}

0801011c <__match>:
 801011c:	b530      	push	{r4, r5, lr}
 801011e:	6803      	ldr	r3, [r0, #0]
 8010120:	780c      	ldrb	r4, [r1, #0]
 8010122:	3301      	adds	r3, #1
 8010124:	2c00      	cmp	r4, #0
 8010126:	d102      	bne.n	801012e <__match+0x12>
 8010128:	6003      	str	r3, [r0, #0]
 801012a:	2001      	movs	r0, #1
 801012c:	bd30      	pop	{r4, r5, pc}
 801012e:	781a      	ldrb	r2, [r3, #0]
 8010130:	0015      	movs	r5, r2
 8010132:	3d41      	subs	r5, #65	; 0x41
 8010134:	2d19      	cmp	r5, #25
 8010136:	d800      	bhi.n	801013a <__match+0x1e>
 8010138:	3220      	adds	r2, #32
 801013a:	3101      	adds	r1, #1
 801013c:	42a2      	cmp	r2, r4
 801013e:	d0ef      	beq.n	8010120 <__match+0x4>
 8010140:	2000      	movs	r0, #0
 8010142:	e7f3      	b.n	801012c <__match+0x10>

08010144 <__hexnan>:
 8010144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010146:	680b      	ldr	r3, [r1, #0]
 8010148:	b08b      	sub	sp, #44	; 0x2c
 801014a:	9201      	str	r2, [sp, #4]
 801014c:	9901      	ldr	r1, [sp, #4]
 801014e:	115a      	asrs	r2, r3, #5
 8010150:	0092      	lsls	r2, r2, #2
 8010152:	188a      	adds	r2, r1, r2
 8010154:	9202      	str	r2, [sp, #8]
 8010156:	0019      	movs	r1, r3
 8010158:	221f      	movs	r2, #31
 801015a:	4011      	ands	r1, r2
 801015c:	9008      	str	r0, [sp, #32]
 801015e:	9106      	str	r1, [sp, #24]
 8010160:	4213      	tst	r3, r2
 8010162:	d002      	beq.n	801016a <__hexnan+0x26>
 8010164:	9b02      	ldr	r3, [sp, #8]
 8010166:	3304      	adds	r3, #4
 8010168:	9302      	str	r3, [sp, #8]
 801016a:	9b02      	ldr	r3, [sp, #8]
 801016c:	2500      	movs	r5, #0
 801016e:	1f1f      	subs	r7, r3, #4
 8010170:	003e      	movs	r6, r7
 8010172:	003c      	movs	r4, r7
 8010174:	9b08      	ldr	r3, [sp, #32]
 8010176:	603d      	str	r5, [r7, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	9507      	str	r5, [sp, #28]
 801017c:	9305      	str	r3, [sp, #20]
 801017e:	9503      	str	r5, [sp, #12]
 8010180:	9b05      	ldr	r3, [sp, #20]
 8010182:	3301      	adds	r3, #1
 8010184:	9309      	str	r3, [sp, #36]	; 0x24
 8010186:	9b05      	ldr	r3, [sp, #20]
 8010188:	785b      	ldrb	r3, [r3, #1]
 801018a:	9304      	str	r3, [sp, #16]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d028      	beq.n	80101e2 <__hexnan+0x9e>
 8010190:	9804      	ldr	r0, [sp, #16]
 8010192:	f7ff fd78 	bl	800fc86 <__hexdig_fun>
 8010196:	2800      	cmp	r0, #0
 8010198:	d154      	bne.n	8010244 <__hexnan+0x100>
 801019a:	9b04      	ldr	r3, [sp, #16]
 801019c:	2b20      	cmp	r3, #32
 801019e:	d819      	bhi.n	80101d4 <__hexnan+0x90>
 80101a0:	9b03      	ldr	r3, [sp, #12]
 80101a2:	9a07      	ldr	r2, [sp, #28]
 80101a4:	4293      	cmp	r3, r2
 80101a6:	dd12      	ble.n	80101ce <__hexnan+0x8a>
 80101a8:	42b4      	cmp	r4, r6
 80101aa:	d206      	bcs.n	80101ba <__hexnan+0x76>
 80101ac:	2d07      	cmp	r5, #7
 80101ae:	dc04      	bgt.n	80101ba <__hexnan+0x76>
 80101b0:	002a      	movs	r2, r5
 80101b2:	0031      	movs	r1, r6
 80101b4:	0020      	movs	r0, r4
 80101b6:	f7ff ff9f 	bl	80100f8 <L_shift>
 80101ba:	9b01      	ldr	r3, [sp, #4]
 80101bc:	2508      	movs	r5, #8
 80101be:	429c      	cmp	r4, r3
 80101c0:	d905      	bls.n	80101ce <__hexnan+0x8a>
 80101c2:	1f26      	subs	r6, r4, #4
 80101c4:	2500      	movs	r5, #0
 80101c6:	0034      	movs	r4, r6
 80101c8:	9b03      	ldr	r3, [sp, #12]
 80101ca:	6035      	str	r5, [r6, #0]
 80101cc:	9307      	str	r3, [sp, #28]
 80101ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101d0:	9305      	str	r3, [sp, #20]
 80101d2:	e7d5      	b.n	8010180 <__hexnan+0x3c>
 80101d4:	9b04      	ldr	r3, [sp, #16]
 80101d6:	2b29      	cmp	r3, #41	; 0x29
 80101d8:	d159      	bne.n	801028e <__hexnan+0x14a>
 80101da:	9b05      	ldr	r3, [sp, #20]
 80101dc:	9a08      	ldr	r2, [sp, #32]
 80101de:	3302      	adds	r3, #2
 80101e0:	6013      	str	r3, [r2, #0]
 80101e2:	9b03      	ldr	r3, [sp, #12]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d052      	beq.n	801028e <__hexnan+0x14a>
 80101e8:	42b4      	cmp	r4, r6
 80101ea:	d206      	bcs.n	80101fa <__hexnan+0xb6>
 80101ec:	2d07      	cmp	r5, #7
 80101ee:	dc04      	bgt.n	80101fa <__hexnan+0xb6>
 80101f0:	002a      	movs	r2, r5
 80101f2:	0031      	movs	r1, r6
 80101f4:	0020      	movs	r0, r4
 80101f6:	f7ff ff7f 	bl	80100f8 <L_shift>
 80101fa:	9b01      	ldr	r3, [sp, #4]
 80101fc:	429c      	cmp	r4, r3
 80101fe:	d935      	bls.n	801026c <__hexnan+0x128>
 8010200:	001a      	movs	r2, r3
 8010202:	0023      	movs	r3, r4
 8010204:	cb02      	ldmia	r3!, {r1}
 8010206:	c202      	stmia	r2!, {r1}
 8010208:	429f      	cmp	r7, r3
 801020a:	d2fb      	bcs.n	8010204 <__hexnan+0xc0>
 801020c:	9b02      	ldr	r3, [sp, #8]
 801020e:	1c62      	adds	r2, r4, #1
 8010210:	1ed9      	subs	r1, r3, #3
 8010212:	2304      	movs	r3, #4
 8010214:	4291      	cmp	r1, r2
 8010216:	d305      	bcc.n	8010224 <__hexnan+0xe0>
 8010218:	9b02      	ldr	r3, [sp, #8]
 801021a:	3b04      	subs	r3, #4
 801021c:	1b1b      	subs	r3, r3, r4
 801021e:	089b      	lsrs	r3, r3, #2
 8010220:	3301      	adds	r3, #1
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	9a01      	ldr	r2, [sp, #4]
 8010226:	18d3      	adds	r3, r2, r3
 8010228:	2200      	movs	r2, #0
 801022a:	c304      	stmia	r3!, {r2}
 801022c:	429f      	cmp	r7, r3
 801022e:	d2fc      	bcs.n	801022a <__hexnan+0xe6>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d104      	bne.n	8010240 <__hexnan+0xfc>
 8010236:	9b01      	ldr	r3, [sp, #4]
 8010238:	429f      	cmp	r7, r3
 801023a:	d126      	bne.n	801028a <__hexnan+0x146>
 801023c:	2301      	movs	r3, #1
 801023e:	603b      	str	r3, [r7, #0]
 8010240:	2005      	movs	r0, #5
 8010242:	e025      	b.n	8010290 <__hexnan+0x14c>
 8010244:	9b03      	ldr	r3, [sp, #12]
 8010246:	3501      	adds	r5, #1
 8010248:	3301      	adds	r3, #1
 801024a:	9303      	str	r3, [sp, #12]
 801024c:	2d08      	cmp	r5, #8
 801024e:	dd06      	ble.n	801025e <__hexnan+0x11a>
 8010250:	9b01      	ldr	r3, [sp, #4]
 8010252:	429c      	cmp	r4, r3
 8010254:	d9bb      	bls.n	80101ce <__hexnan+0x8a>
 8010256:	2300      	movs	r3, #0
 8010258:	2501      	movs	r5, #1
 801025a:	3c04      	subs	r4, #4
 801025c:	6023      	str	r3, [r4, #0]
 801025e:	220f      	movs	r2, #15
 8010260:	6823      	ldr	r3, [r4, #0]
 8010262:	4010      	ands	r0, r2
 8010264:	011b      	lsls	r3, r3, #4
 8010266:	4303      	orrs	r3, r0
 8010268:	6023      	str	r3, [r4, #0]
 801026a:	e7b0      	b.n	80101ce <__hexnan+0x8a>
 801026c:	9b06      	ldr	r3, [sp, #24]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d0de      	beq.n	8010230 <__hexnan+0xec>
 8010272:	2320      	movs	r3, #32
 8010274:	9a06      	ldr	r2, [sp, #24]
 8010276:	9902      	ldr	r1, [sp, #8]
 8010278:	1a9b      	subs	r3, r3, r2
 801027a:	2201      	movs	r2, #1
 801027c:	4252      	negs	r2, r2
 801027e:	40da      	lsrs	r2, r3
 8010280:	3904      	subs	r1, #4
 8010282:	680b      	ldr	r3, [r1, #0]
 8010284:	4013      	ands	r3, r2
 8010286:	600b      	str	r3, [r1, #0]
 8010288:	e7d2      	b.n	8010230 <__hexnan+0xec>
 801028a:	3f04      	subs	r7, #4
 801028c:	e7d0      	b.n	8010230 <__hexnan+0xec>
 801028e:	2004      	movs	r0, #4
 8010290:	b00b      	add	sp, #44	; 0x2c
 8010292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010294 <__ascii_mbtowc>:
 8010294:	b082      	sub	sp, #8
 8010296:	2900      	cmp	r1, #0
 8010298:	d100      	bne.n	801029c <__ascii_mbtowc+0x8>
 801029a:	a901      	add	r1, sp, #4
 801029c:	1e10      	subs	r0, r2, #0
 801029e:	d006      	beq.n	80102ae <__ascii_mbtowc+0x1a>
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d006      	beq.n	80102b2 <__ascii_mbtowc+0x1e>
 80102a4:	7813      	ldrb	r3, [r2, #0]
 80102a6:	600b      	str	r3, [r1, #0]
 80102a8:	7810      	ldrb	r0, [r2, #0]
 80102aa:	1e43      	subs	r3, r0, #1
 80102ac:	4198      	sbcs	r0, r3
 80102ae:	b002      	add	sp, #8
 80102b0:	4770      	bx	lr
 80102b2:	2002      	movs	r0, #2
 80102b4:	4240      	negs	r0, r0
 80102b6:	e7fa      	b.n	80102ae <__ascii_mbtowc+0x1a>

080102b8 <_Balloc>:
 80102b8:	b570      	push	{r4, r5, r6, lr}
 80102ba:	69c5      	ldr	r5, [r0, #28]
 80102bc:	0006      	movs	r6, r0
 80102be:	000c      	movs	r4, r1
 80102c0:	2d00      	cmp	r5, #0
 80102c2:	d10e      	bne.n	80102e2 <_Balloc+0x2a>
 80102c4:	2010      	movs	r0, #16
 80102c6:	f7fc fc27 	bl	800cb18 <malloc>
 80102ca:	1e02      	subs	r2, r0, #0
 80102cc:	61f0      	str	r0, [r6, #28]
 80102ce:	d104      	bne.n	80102da <_Balloc+0x22>
 80102d0:	216b      	movs	r1, #107	; 0x6b
 80102d2:	4b19      	ldr	r3, [pc, #100]	; (8010338 <_Balloc+0x80>)
 80102d4:	4819      	ldr	r0, [pc, #100]	; (801033c <_Balloc+0x84>)
 80102d6:	f7fe fd7b 	bl	800edd0 <__assert_func>
 80102da:	6045      	str	r5, [r0, #4]
 80102dc:	6085      	str	r5, [r0, #8]
 80102de:	6005      	str	r5, [r0, #0]
 80102e0:	60c5      	str	r5, [r0, #12]
 80102e2:	69f5      	ldr	r5, [r6, #28]
 80102e4:	68eb      	ldr	r3, [r5, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d013      	beq.n	8010312 <_Balloc+0x5a>
 80102ea:	69f3      	ldr	r3, [r6, #28]
 80102ec:	00a2      	lsls	r2, r4, #2
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	189b      	adds	r3, r3, r2
 80102f2:	6818      	ldr	r0, [r3, #0]
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d118      	bne.n	801032a <_Balloc+0x72>
 80102f8:	2101      	movs	r1, #1
 80102fa:	000d      	movs	r5, r1
 80102fc:	40a5      	lsls	r5, r4
 80102fe:	1d6a      	adds	r2, r5, #5
 8010300:	0030      	movs	r0, r6
 8010302:	0092      	lsls	r2, r2, #2
 8010304:	f000 fee2 	bl	80110cc <_calloc_r>
 8010308:	2800      	cmp	r0, #0
 801030a:	d00c      	beq.n	8010326 <_Balloc+0x6e>
 801030c:	6044      	str	r4, [r0, #4]
 801030e:	6085      	str	r5, [r0, #8]
 8010310:	e00d      	b.n	801032e <_Balloc+0x76>
 8010312:	2221      	movs	r2, #33	; 0x21
 8010314:	2104      	movs	r1, #4
 8010316:	0030      	movs	r0, r6
 8010318:	f000 fed8 	bl	80110cc <_calloc_r>
 801031c:	69f3      	ldr	r3, [r6, #28]
 801031e:	60e8      	str	r0, [r5, #12]
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d1e1      	bne.n	80102ea <_Balloc+0x32>
 8010326:	2000      	movs	r0, #0
 8010328:	bd70      	pop	{r4, r5, r6, pc}
 801032a:	6802      	ldr	r2, [r0, #0]
 801032c:	601a      	str	r2, [r3, #0]
 801032e:	2300      	movs	r3, #0
 8010330:	6103      	str	r3, [r0, #16]
 8010332:	60c3      	str	r3, [r0, #12]
 8010334:	e7f8      	b.n	8010328 <_Balloc+0x70>
 8010336:	46c0      	nop			; (mov r8, r8)
 8010338:	08013b52 	.word	0x08013b52
 801033c:	08013cdd 	.word	0x08013cdd

08010340 <_Bfree>:
 8010340:	b570      	push	{r4, r5, r6, lr}
 8010342:	69c6      	ldr	r6, [r0, #28]
 8010344:	0005      	movs	r5, r0
 8010346:	000c      	movs	r4, r1
 8010348:	2e00      	cmp	r6, #0
 801034a:	d10e      	bne.n	801036a <_Bfree+0x2a>
 801034c:	2010      	movs	r0, #16
 801034e:	f7fc fbe3 	bl	800cb18 <malloc>
 8010352:	1e02      	subs	r2, r0, #0
 8010354:	61e8      	str	r0, [r5, #28]
 8010356:	d104      	bne.n	8010362 <_Bfree+0x22>
 8010358:	218f      	movs	r1, #143	; 0x8f
 801035a:	4b09      	ldr	r3, [pc, #36]	; (8010380 <_Bfree+0x40>)
 801035c:	4809      	ldr	r0, [pc, #36]	; (8010384 <_Bfree+0x44>)
 801035e:	f7fe fd37 	bl	800edd0 <__assert_func>
 8010362:	6046      	str	r6, [r0, #4]
 8010364:	6086      	str	r6, [r0, #8]
 8010366:	6006      	str	r6, [r0, #0]
 8010368:	60c6      	str	r6, [r0, #12]
 801036a:	2c00      	cmp	r4, #0
 801036c:	d007      	beq.n	801037e <_Bfree+0x3e>
 801036e:	69eb      	ldr	r3, [r5, #28]
 8010370:	6862      	ldr	r2, [r4, #4]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	0092      	lsls	r2, r2, #2
 8010376:	189b      	adds	r3, r3, r2
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	6022      	str	r2, [r4, #0]
 801037c:	601c      	str	r4, [r3, #0]
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	08013b52 	.word	0x08013b52
 8010384:	08013cdd 	.word	0x08013cdd

08010388 <__multadd>:
 8010388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801038a:	000e      	movs	r6, r1
 801038c:	9001      	str	r0, [sp, #4]
 801038e:	000c      	movs	r4, r1
 8010390:	001d      	movs	r5, r3
 8010392:	2000      	movs	r0, #0
 8010394:	690f      	ldr	r7, [r1, #16]
 8010396:	3614      	adds	r6, #20
 8010398:	6833      	ldr	r3, [r6, #0]
 801039a:	3001      	adds	r0, #1
 801039c:	b299      	uxth	r1, r3
 801039e:	4351      	muls	r1, r2
 80103a0:	0c1b      	lsrs	r3, r3, #16
 80103a2:	4353      	muls	r3, r2
 80103a4:	1949      	adds	r1, r1, r5
 80103a6:	0c0d      	lsrs	r5, r1, #16
 80103a8:	195b      	adds	r3, r3, r5
 80103aa:	0c1d      	lsrs	r5, r3, #16
 80103ac:	b289      	uxth	r1, r1
 80103ae:	041b      	lsls	r3, r3, #16
 80103b0:	185b      	adds	r3, r3, r1
 80103b2:	c608      	stmia	r6!, {r3}
 80103b4:	4287      	cmp	r7, r0
 80103b6:	dcef      	bgt.n	8010398 <__multadd+0x10>
 80103b8:	2d00      	cmp	r5, #0
 80103ba:	d022      	beq.n	8010402 <__multadd+0x7a>
 80103bc:	68a3      	ldr	r3, [r4, #8]
 80103be:	42bb      	cmp	r3, r7
 80103c0:	dc19      	bgt.n	80103f6 <__multadd+0x6e>
 80103c2:	6861      	ldr	r1, [r4, #4]
 80103c4:	9801      	ldr	r0, [sp, #4]
 80103c6:	3101      	adds	r1, #1
 80103c8:	f7ff ff76 	bl	80102b8 <_Balloc>
 80103cc:	1e06      	subs	r6, r0, #0
 80103ce:	d105      	bne.n	80103dc <__multadd+0x54>
 80103d0:	0032      	movs	r2, r6
 80103d2:	21ba      	movs	r1, #186	; 0xba
 80103d4:	4b0c      	ldr	r3, [pc, #48]	; (8010408 <__multadd+0x80>)
 80103d6:	480d      	ldr	r0, [pc, #52]	; (801040c <__multadd+0x84>)
 80103d8:	f7fe fcfa 	bl	800edd0 <__assert_func>
 80103dc:	0021      	movs	r1, r4
 80103de:	6922      	ldr	r2, [r4, #16]
 80103e0:	310c      	adds	r1, #12
 80103e2:	3202      	adds	r2, #2
 80103e4:	0092      	lsls	r2, r2, #2
 80103e6:	300c      	adds	r0, #12
 80103e8:	f7fe fcde 	bl	800eda8 <memcpy>
 80103ec:	0021      	movs	r1, r4
 80103ee:	9801      	ldr	r0, [sp, #4]
 80103f0:	f7ff ffa6 	bl	8010340 <_Bfree>
 80103f4:	0034      	movs	r4, r6
 80103f6:	1d3b      	adds	r3, r7, #4
 80103f8:	009b      	lsls	r3, r3, #2
 80103fa:	18e3      	adds	r3, r4, r3
 80103fc:	605d      	str	r5, [r3, #4]
 80103fe:	1c7b      	adds	r3, r7, #1
 8010400:	6123      	str	r3, [r4, #16]
 8010402:	0020      	movs	r0, r4
 8010404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010406:	46c0      	nop			; (mov r8, r8)
 8010408:	08013c6c 	.word	0x08013c6c
 801040c:	08013cdd 	.word	0x08013cdd

08010410 <__s2b>:
 8010410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010412:	0006      	movs	r6, r0
 8010414:	0018      	movs	r0, r3
 8010416:	000c      	movs	r4, r1
 8010418:	3008      	adds	r0, #8
 801041a:	2109      	movs	r1, #9
 801041c:	9301      	str	r3, [sp, #4]
 801041e:	0015      	movs	r5, r2
 8010420:	f7ef ff18 	bl	8000254 <__divsi3>
 8010424:	2301      	movs	r3, #1
 8010426:	2100      	movs	r1, #0
 8010428:	4283      	cmp	r3, r0
 801042a:	db0a      	blt.n	8010442 <__s2b+0x32>
 801042c:	0030      	movs	r0, r6
 801042e:	f7ff ff43 	bl	80102b8 <_Balloc>
 8010432:	1e01      	subs	r1, r0, #0
 8010434:	d108      	bne.n	8010448 <__s2b+0x38>
 8010436:	000a      	movs	r2, r1
 8010438:	4b19      	ldr	r3, [pc, #100]	; (80104a0 <__s2b+0x90>)
 801043a:	481a      	ldr	r0, [pc, #104]	; (80104a4 <__s2b+0x94>)
 801043c:	31d3      	adds	r1, #211	; 0xd3
 801043e:	f7fe fcc7 	bl	800edd0 <__assert_func>
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	3101      	adds	r1, #1
 8010446:	e7ef      	b.n	8010428 <__s2b+0x18>
 8010448:	9b08      	ldr	r3, [sp, #32]
 801044a:	6143      	str	r3, [r0, #20]
 801044c:	2301      	movs	r3, #1
 801044e:	6103      	str	r3, [r0, #16]
 8010450:	2d09      	cmp	r5, #9
 8010452:	dd18      	ble.n	8010486 <__s2b+0x76>
 8010454:	0023      	movs	r3, r4
 8010456:	3309      	adds	r3, #9
 8010458:	001f      	movs	r7, r3
 801045a:	9300      	str	r3, [sp, #0]
 801045c:	1964      	adds	r4, r4, r5
 801045e:	783b      	ldrb	r3, [r7, #0]
 8010460:	220a      	movs	r2, #10
 8010462:	0030      	movs	r0, r6
 8010464:	3b30      	subs	r3, #48	; 0x30
 8010466:	f7ff ff8f 	bl	8010388 <__multadd>
 801046a:	3701      	adds	r7, #1
 801046c:	0001      	movs	r1, r0
 801046e:	42a7      	cmp	r7, r4
 8010470:	d1f5      	bne.n	801045e <__s2b+0x4e>
 8010472:	002c      	movs	r4, r5
 8010474:	9b00      	ldr	r3, [sp, #0]
 8010476:	3c08      	subs	r4, #8
 8010478:	191c      	adds	r4, r3, r4
 801047a:	002f      	movs	r7, r5
 801047c:	9b01      	ldr	r3, [sp, #4]
 801047e:	429f      	cmp	r7, r3
 8010480:	db04      	blt.n	801048c <__s2b+0x7c>
 8010482:	0008      	movs	r0, r1
 8010484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010486:	2509      	movs	r5, #9
 8010488:	340a      	adds	r4, #10
 801048a:	e7f6      	b.n	801047a <__s2b+0x6a>
 801048c:	1b63      	subs	r3, r4, r5
 801048e:	5ddb      	ldrb	r3, [r3, r7]
 8010490:	220a      	movs	r2, #10
 8010492:	0030      	movs	r0, r6
 8010494:	3b30      	subs	r3, #48	; 0x30
 8010496:	f7ff ff77 	bl	8010388 <__multadd>
 801049a:	3701      	adds	r7, #1
 801049c:	0001      	movs	r1, r0
 801049e:	e7ed      	b.n	801047c <__s2b+0x6c>
 80104a0:	08013c6c 	.word	0x08013c6c
 80104a4:	08013cdd 	.word	0x08013cdd

080104a8 <__hi0bits>:
 80104a8:	0003      	movs	r3, r0
 80104aa:	0c02      	lsrs	r2, r0, #16
 80104ac:	2000      	movs	r0, #0
 80104ae:	4282      	cmp	r2, r0
 80104b0:	d101      	bne.n	80104b6 <__hi0bits+0xe>
 80104b2:	041b      	lsls	r3, r3, #16
 80104b4:	3010      	adds	r0, #16
 80104b6:	0e1a      	lsrs	r2, r3, #24
 80104b8:	d101      	bne.n	80104be <__hi0bits+0x16>
 80104ba:	3008      	adds	r0, #8
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	0f1a      	lsrs	r2, r3, #28
 80104c0:	d101      	bne.n	80104c6 <__hi0bits+0x1e>
 80104c2:	3004      	adds	r0, #4
 80104c4:	011b      	lsls	r3, r3, #4
 80104c6:	0f9a      	lsrs	r2, r3, #30
 80104c8:	d101      	bne.n	80104ce <__hi0bits+0x26>
 80104ca:	3002      	adds	r0, #2
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	db03      	blt.n	80104da <__hi0bits+0x32>
 80104d2:	3001      	adds	r0, #1
 80104d4:	005b      	lsls	r3, r3, #1
 80104d6:	d400      	bmi.n	80104da <__hi0bits+0x32>
 80104d8:	2020      	movs	r0, #32
 80104da:	4770      	bx	lr

080104dc <__lo0bits>:
 80104dc:	6803      	ldr	r3, [r0, #0]
 80104de:	0001      	movs	r1, r0
 80104e0:	2207      	movs	r2, #7
 80104e2:	0018      	movs	r0, r3
 80104e4:	4010      	ands	r0, r2
 80104e6:	4213      	tst	r3, r2
 80104e8:	d00d      	beq.n	8010506 <__lo0bits+0x2a>
 80104ea:	3a06      	subs	r2, #6
 80104ec:	2000      	movs	r0, #0
 80104ee:	4213      	tst	r3, r2
 80104f0:	d105      	bne.n	80104fe <__lo0bits+0x22>
 80104f2:	3002      	adds	r0, #2
 80104f4:	4203      	tst	r3, r0
 80104f6:	d003      	beq.n	8010500 <__lo0bits+0x24>
 80104f8:	40d3      	lsrs	r3, r2
 80104fa:	0010      	movs	r0, r2
 80104fc:	600b      	str	r3, [r1, #0]
 80104fe:	4770      	bx	lr
 8010500:	089b      	lsrs	r3, r3, #2
 8010502:	600b      	str	r3, [r1, #0]
 8010504:	e7fb      	b.n	80104fe <__lo0bits+0x22>
 8010506:	b29a      	uxth	r2, r3
 8010508:	2a00      	cmp	r2, #0
 801050a:	d101      	bne.n	8010510 <__lo0bits+0x34>
 801050c:	2010      	movs	r0, #16
 801050e:	0c1b      	lsrs	r3, r3, #16
 8010510:	b2da      	uxtb	r2, r3
 8010512:	2a00      	cmp	r2, #0
 8010514:	d101      	bne.n	801051a <__lo0bits+0x3e>
 8010516:	3008      	adds	r0, #8
 8010518:	0a1b      	lsrs	r3, r3, #8
 801051a:	071a      	lsls	r2, r3, #28
 801051c:	d101      	bne.n	8010522 <__lo0bits+0x46>
 801051e:	3004      	adds	r0, #4
 8010520:	091b      	lsrs	r3, r3, #4
 8010522:	079a      	lsls	r2, r3, #30
 8010524:	d101      	bne.n	801052a <__lo0bits+0x4e>
 8010526:	3002      	adds	r0, #2
 8010528:	089b      	lsrs	r3, r3, #2
 801052a:	07da      	lsls	r2, r3, #31
 801052c:	d4e9      	bmi.n	8010502 <__lo0bits+0x26>
 801052e:	3001      	adds	r0, #1
 8010530:	085b      	lsrs	r3, r3, #1
 8010532:	d1e6      	bne.n	8010502 <__lo0bits+0x26>
 8010534:	2020      	movs	r0, #32
 8010536:	e7e2      	b.n	80104fe <__lo0bits+0x22>

08010538 <__i2b>:
 8010538:	b510      	push	{r4, lr}
 801053a:	000c      	movs	r4, r1
 801053c:	2101      	movs	r1, #1
 801053e:	f7ff febb 	bl	80102b8 <_Balloc>
 8010542:	2800      	cmp	r0, #0
 8010544:	d107      	bne.n	8010556 <__i2b+0x1e>
 8010546:	2146      	movs	r1, #70	; 0x46
 8010548:	4c05      	ldr	r4, [pc, #20]	; (8010560 <__i2b+0x28>)
 801054a:	0002      	movs	r2, r0
 801054c:	4b05      	ldr	r3, [pc, #20]	; (8010564 <__i2b+0x2c>)
 801054e:	0020      	movs	r0, r4
 8010550:	31ff      	adds	r1, #255	; 0xff
 8010552:	f7fe fc3d 	bl	800edd0 <__assert_func>
 8010556:	2301      	movs	r3, #1
 8010558:	6144      	str	r4, [r0, #20]
 801055a:	6103      	str	r3, [r0, #16]
 801055c:	bd10      	pop	{r4, pc}
 801055e:	46c0      	nop			; (mov r8, r8)
 8010560:	08013cdd 	.word	0x08013cdd
 8010564:	08013c6c 	.word	0x08013c6c

08010568 <__multiply>:
 8010568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801056a:	0015      	movs	r5, r2
 801056c:	690a      	ldr	r2, [r1, #16]
 801056e:	692b      	ldr	r3, [r5, #16]
 8010570:	000c      	movs	r4, r1
 8010572:	b08b      	sub	sp, #44	; 0x2c
 8010574:	429a      	cmp	r2, r3
 8010576:	da01      	bge.n	801057c <__multiply+0x14>
 8010578:	002c      	movs	r4, r5
 801057a:	000d      	movs	r5, r1
 801057c:	6927      	ldr	r7, [r4, #16]
 801057e:	692e      	ldr	r6, [r5, #16]
 8010580:	6861      	ldr	r1, [r4, #4]
 8010582:	19bb      	adds	r3, r7, r6
 8010584:	9303      	str	r3, [sp, #12]
 8010586:	68a3      	ldr	r3, [r4, #8]
 8010588:	19ba      	adds	r2, r7, r6
 801058a:	4293      	cmp	r3, r2
 801058c:	da00      	bge.n	8010590 <__multiply+0x28>
 801058e:	3101      	adds	r1, #1
 8010590:	f7ff fe92 	bl	80102b8 <_Balloc>
 8010594:	9002      	str	r0, [sp, #8]
 8010596:	2800      	cmp	r0, #0
 8010598:	d106      	bne.n	80105a8 <__multiply+0x40>
 801059a:	21b1      	movs	r1, #177	; 0xb1
 801059c:	4b48      	ldr	r3, [pc, #288]	; (80106c0 <__multiply+0x158>)
 801059e:	4849      	ldr	r0, [pc, #292]	; (80106c4 <__multiply+0x15c>)
 80105a0:	9a02      	ldr	r2, [sp, #8]
 80105a2:	0049      	lsls	r1, r1, #1
 80105a4:	f7fe fc14 	bl	800edd0 <__assert_func>
 80105a8:	9b02      	ldr	r3, [sp, #8]
 80105aa:	2200      	movs	r2, #0
 80105ac:	3314      	adds	r3, #20
 80105ae:	469c      	mov	ip, r3
 80105b0:	19bb      	adds	r3, r7, r6
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4463      	add	r3, ip
 80105b6:	9304      	str	r3, [sp, #16]
 80105b8:	4663      	mov	r3, ip
 80105ba:	9904      	ldr	r1, [sp, #16]
 80105bc:	428b      	cmp	r3, r1
 80105be:	d32a      	bcc.n	8010616 <__multiply+0xae>
 80105c0:	0023      	movs	r3, r4
 80105c2:	00bf      	lsls	r7, r7, #2
 80105c4:	3314      	adds	r3, #20
 80105c6:	3514      	adds	r5, #20
 80105c8:	9308      	str	r3, [sp, #32]
 80105ca:	00b6      	lsls	r6, r6, #2
 80105cc:	19db      	adds	r3, r3, r7
 80105ce:	9305      	str	r3, [sp, #20]
 80105d0:	19ab      	adds	r3, r5, r6
 80105d2:	9309      	str	r3, [sp, #36]	; 0x24
 80105d4:	2304      	movs	r3, #4
 80105d6:	9306      	str	r3, [sp, #24]
 80105d8:	0023      	movs	r3, r4
 80105da:	9a05      	ldr	r2, [sp, #20]
 80105dc:	3315      	adds	r3, #21
 80105de:	9501      	str	r5, [sp, #4]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d305      	bcc.n	80105f0 <__multiply+0x88>
 80105e4:	1b13      	subs	r3, r2, r4
 80105e6:	3b15      	subs	r3, #21
 80105e8:	089b      	lsrs	r3, r3, #2
 80105ea:	3301      	adds	r3, #1
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	9306      	str	r3, [sp, #24]
 80105f0:	9b01      	ldr	r3, [sp, #4]
 80105f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d310      	bcc.n	801061a <__multiply+0xb2>
 80105f8:	9b03      	ldr	r3, [sp, #12]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	dd05      	ble.n	801060a <__multiply+0xa2>
 80105fe:	9b04      	ldr	r3, [sp, #16]
 8010600:	3b04      	subs	r3, #4
 8010602:	9304      	str	r3, [sp, #16]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d056      	beq.n	80106b8 <__multiply+0x150>
 801060a:	9b02      	ldr	r3, [sp, #8]
 801060c:	9a03      	ldr	r2, [sp, #12]
 801060e:	0018      	movs	r0, r3
 8010610:	611a      	str	r2, [r3, #16]
 8010612:	b00b      	add	sp, #44	; 0x2c
 8010614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010616:	c304      	stmia	r3!, {r2}
 8010618:	e7cf      	b.n	80105ba <__multiply+0x52>
 801061a:	9b01      	ldr	r3, [sp, #4]
 801061c:	6818      	ldr	r0, [r3, #0]
 801061e:	b280      	uxth	r0, r0
 8010620:	2800      	cmp	r0, #0
 8010622:	d01e      	beq.n	8010662 <__multiply+0xfa>
 8010624:	4667      	mov	r7, ip
 8010626:	2500      	movs	r5, #0
 8010628:	9e08      	ldr	r6, [sp, #32]
 801062a:	ce02      	ldmia	r6!, {r1}
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	9307      	str	r3, [sp, #28]
 8010630:	b28b      	uxth	r3, r1
 8010632:	4343      	muls	r3, r0
 8010634:	001a      	movs	r2, r3
 8010636:	466b      	mov	r3, sp
 8010638:	8b9b      	ldrh	r3, [r3, #28]
 801063a:	18d3      	adds	r3, r2, r3
 801063c:	195b      	adds	r3, r3, r5
 801063e:	0c0d      	lsrs	r5, r1, #16
 8010640:	4345      	muls	r5, r0
 8010642:	9a07      	ldr	r2, [sp, #28]
 8010644:	0c11      	lsrs	r1, r2, #16
 8010646:	1869      	adds	r1, r5, r1
 8010648:	0c1a      	lsrs	r2, r3, #16
 801064a:	188a      	adds	r2, r1, r2
 801064c:	b29b      	uxth	r3, r3
 801064e:	0c15      	lsrs	r5, r2, #16
 8010650:	0412      	lsls	r2, r2, #16
 8010652:	431a      	orrs	r2, r3
 8010654:	9b05      	ldr	r3, [sp, #20]
 8010656:	c704      	stmia	r7!, {r2}
 8010658:	42b3      	cmp	r3, r6
 801065a:	d8e6      	bhi.n	801062a <__multiply+0xc2>
 801065c:	4663      	mov	r3, ip
 801065e:	9a06      	ldr	r2, [sp, #24]
 8010660:	509d      	str	r5, [r3, r2]
 8010662:	9b01      	ldr	r3, [sp, #4]
 8010664:	6818      	ldr	r0, [r3, #0]
 8010666:	0c00      	lsrs	r0, r0, #16
 8010668:	d020      	beq.n	80106ac <__multiply+0x144>
 801066a:	4663      	mov	r3, ip
 801066c:	0025      	movs	r5, r4
 801066e:	4661      	mov	r1, ip
 8010670:	2700      	movs	r7, #0
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	3514      	adds	r5, #20
 8010676:	682a      	ldr	r2, [r5, #0]
 8010678:	680e      	ldr	r6, [r1, #0]
 801067a:	b292      	uxth	r2, r2
 801067c:	4342      	muls	r2, r0
 801067e:	0c36      	lsrs	r6, r6, #16
 8010680:	1992      	adds	r2, r2, r6
 8010682:	19d2      	adds	r2, r2, r7
 8010684:	0416      	lsls	r6, r2, #16
 8010686:	b29b      	uxth	r3, r3
 8010688:	431e      	orrs	r6, r3
 801068a:	600e      	str	r6, [r1, #0]
 801068c:	cd40      	ldmia	r5!, {r6}
 801068e:	684b      	ldr	r3, [r1, #4]
 8010690:	0c36      	lsrs	r6, r6, #16
 8010692:	4346      	muls	r6, r0
 8010694:	b29b      	uxth	r3, r3
 8010696:	0c12      	lsrs	r2, r2, #16
 8010698:	18f3      	adds	r3, r6, r3
 801069a:	189b      	adds	r3, r3, r2
 801069c:	9a05      	ldr	r2, [sp, #20]
 801069e:	0c1f      	lsrs	r7, r3, #16
 80106a0:	3104      	adds	r1, #4
 80106a2:	42aa      	cmp	r2, r5
 80106a4:	d8e7      	bhi.n	8010676 <__multiply+0x10e>
 80106a6:	4662      	mov	r2, ip
 80106a8:	9906      	ldr	r1, [sp, #24]
 80106aa:	5053      	str	r3, [r2, r1]
 80106ac:	9b01      	ldr	r3, [sp, #4]
 80106ae:	3304      	adds	r3, #4
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	2304      	movs	r3, #4
 80106b4:	449c      	add	ip, r3
 80106b6:	e79b      	b.n	80105f0 <__multiply+0x88>
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	3b01      	subs	r3, #1
 80106bc:	9303      	str	r3, [sp, #12]
 80106be:	e79b      	b.n	80105f8 <__multiply+0x90>
 80106c0:	08013c6c 	.word	0x08013c6c
 80106c4:	08013cdd 	.word	0x08013cdd

080106c8 <__pow5mult>:
 80106c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106ca:	2303      	movs	r3, #3
 80106cc:	0015      	movs	r5, r2
 80106ce:	0007      	movs	r7, r0
 80106d0:	000e      	movs	r6, r1
 80106d2:	401a      	ands	r2, r3
 80106d4:	421d      	tst	r5, r3
 80106d6:	d008      	beq.n	80106ea <__pow5mult+0x22>
 80106d8:	4925      	ldr	r1, [pc, #148]	; (8010770 <__pow5mult+0xa8>)
 80106da:	3a01      	subs	r2, #1
 80106dc:	0092      	lsls	r2, r2, #2
 80106de:	5852      	ldr	r2, [r2, r1]
 80106e0:	2300      	movs	r3, #0
 80106e2:	0031      	movs	r1, r6
 80106e4:	f7ff fe50 	bl	8010388 <__multadd>
 80106e8:	0006      	movs	r6, r0
 80106ea:	10ad      	asrs	r5, r5, #2
 80106ec:	d03d      	beq.n	801076a <__pow5mult+0xa2>
 80106ee:	69fc      	ldr	r4, [r7, #28]
 80106f0:	2c00      	cmp	r4, #0
 80106f2:	d10f      	bne.n	8010714 <__pow5mult+0x4c>
 80106f4:	2010      	movs	r0, #16
 80106f6:	f7fc fa0f 	bl	800cb18 <malloc>
 80106fa:	1e02      	subs	r2, r0, #0
 80106fc:	61f8      	str	r0, [r7, #28]
 80106fe:	d105      	bne.n	801070c <__pow5mult+0x44>
 8010700:	21b4      	movs	r1, #180	; 0xb4
 8010702:	4b1c      	ldr	r3, [pc, #112]	; (8010774 <__pow5mult+0xac>)
 8010704:	481c      	ldr	r0, [pc, #112]	; (8010778 <__pow5mult+0xb0>)
 8010706:	31ff      	adds	r1, #255	; 0xff
 8010708:	f7fe fb62 	bl	800edd0 <__assert_func>
 801070c:	6044      	str	r4, [r0, #4]
 801070e:	6084      	str	r4, [r0, #8]
 8010710:	6004      	str	r4, [r0, #0]
 8010712:	60c4      	str	r4, [r0, #12]
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	689c      	ldr	r4, [r3, #8]
 8010718:	9301      	str	r3, [sp, #4]
 801071a:	2c00      	cmp	r4, #0
 801071c:	d108      	bne.n	8010730 <__pow5mult+0x68>
 801071e:	0038      	movs	r0, r7
 8010720:	4916      	ldr	r1, [pc, #88]	; (801077c <__pow5mult+0xb4>)
 8010722:	f7ff ff09 	bl	8010538 <__i2b>
 8010726:	9b01      	ldr	r3, [sp, #4]
 8010728:	0004      	movs	r4, r0
 801072a:	6098      	str	r0, [r3, #8]
 801072c:	2300      	movs	r3, #0
 801072e:	6003      	str	r3, [r0, #0]
 8010730:	2301      	movs	r3, #1
 8010732:	421d      	tst	r5, r3
 8010734:	d00a      	beq.n	801074c <__pow5mult+0x84>
 8010736:	0031      	movs	r1, r6
 8010738:	0022      	movs	r2, r4
 801073a:	0038      	movs	r0, r7
 801073c:	f7ff ff14 	bl	8010568 <__multiply>
 8010740:	0031      	movs	r1, r6
 8010742:	9001      	str	r0, [sp, #4]
 8010744:	0038      	movs	r0, r7
 8010746:	f7ff fdfb 	bl	8010340 <_Bfree>
 801074a:	9e01      	ldr	r6, [sp, #4]
 801074c:	106d      	asrs	r5, r5, #1
 801074e:	d00c      	beq.n	801076a <__pow5mult+0xa2>
 8010750:	6820      	ldr	r0, [r4, #0]
 8010752:	2800      	cmp	r0, #0
 8010754:	d107      	bne.n	8010766 <__pow5mult+0x9e>
 8010756:	0022      	movs	r2, r4
 8010758:	0021      	movs	r1, r4
 801075a:	0038      	movs	r0, r7
 801075c:	f7ff ff04 	bl	8010568 <__multiply>
 8010760:	2300      	movs	r3, #0
 8010762:	6020      	str	r0, [r4, #0]
 8010764:	6003      	str	r3, [r0, #0]
 8010766:	0004      	movs	r4, r0
 8010768:	e7e2      	b.n	8010730 <__pow5mult+0x68>
 801076a:	0030      	movs	r0, r6
 801076c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801076e:	46c0      	nop			; (mov r8, r8)
 8010770:	08013e28 	.word	0x08013e28
 8010774:	08013b52 	.word	0x08013b52
 8010778:	08013cdd 	.word	0x08013cdd
 801077c:	00000271 	.word	0x00000271

08010780 <__lshift>:
 8010780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010782:	000c      	movs	r4, r1
 8010784:	0017      	movs	r7, r2
 8010786:	6923      	ldr	r3, [r4, #16]
 8010788:	1155      	asrs	r5, r2, #5
 801078a:	b087      	sub	sp, #28
 801078c:	18eb      	adds	r3, r5, r3
 801078e:	9302      	str	r3, [sp, #8]
 8010790:	3301      	adds	r3, #1
 8010792:	9301      	str	r3, [sp, #4]
 8010794:	6849      	ldr	r1, [r1, #4]
 8010796:	68a3      	ldr	r3, [r4, #8]
 8010798:	9004      	str	r0, [sp, #16]
 801079a:	9a01      	ldr	r2, [sp, #4]
 801079c:	4293      	cmp	r3, r2
 801079e:	db10      	blt.n	80107c2 <__lshift+0x42>
 80107a0:	9804      	ldr	r0, [sp, #16]
 80107a2:	f7ff fd89 	bl	80102b8 <_Balloc>
 80107a6:	2300      	movs	r3, #0
 80107a8:	0002      	movs	r2, r0
 80107aa:	0006      	movs	r6, r0
 80107ac:	0019      	movs	r1, r3
 80107ae:	3214      	adds	r2, #20
 80107b0:	4298      	cmp	r0, r3
 80107b2:	d10c      	bne.n	80107ce <__lshift+0x4e>
 80107b4:	31df      	adds	r1, #223	; 0xdf
 80107b6:	0032      	movs	r2, r6
 80107b8:	4b26      	ldr	r3, [pc, #152]	; (8010854 <__lshift+0xd4>)
 80107ba:	4827      	ldr	r0, [pc, #156]	; (8010858 <__lshift+0xd8>)
 80107bc:	31ff      	adds	r1, #255	; 0xff
 80107be:	f7fe fb07 	bl	800edd0 <__assert_func>
 80107c2:	3101      	adds	r1, #1
 80107c4:	005b      	lsls	r3, r3, #1
 80107c6:	e7e8      	b.n	801079a <__lshift+0x1a>
 80107c8:	0098      	lsls	r0, r3, #2
 80107ca:	5011      	str	r1, [r2, r0]
 80107cc:	3301      	adds	r3, #1
 80107ce:	42ab      	cmp	r3, r5
 80107d0:	dbfa      	blt.n	80107c8 <__lshift+0x48>
 80107d2:	43eb      	mvns	r3, r5
 80107d4:	17db      	asrs	r3, r3, #31
 80107d6:	401d      	ands	r5, r3
 80107d8:	211f      	movs	r1, #31
 80107da:	0023      	movs	r3, r4
 80107dc:	0038      	movs	r0, r7
 80107de:	00ad      	lsls	r5, r5, #2
 80107e0:	1955      	adds	r5, r2, r5
 80107e2:	6922      	ldr	r2, [r4, #16]
 80107e4:	3314      	adds	r3, #20
 80107e6:	0092      	lsls	r2, r2, #2
 80107e8:	4008      	ands	r0, r1
 80107ea:	4684      	mov	ip, r0
 80107ec:	189a      	adds	r2, r3, r2
 80107ee:	420f      	tst	r7, r1
 80107f0:	d02a      	beq.n	8010848 <__lshift+0xc8>
 80107f2:	3101      	adds	r1, #1
 80107f4:	1a09      	subs	r1, r1, r0
 80107f6:	9105      	str	r1, [sp, #20]
 80107f8:	2100      	movs	r1, #0
 80107fa:	9503      	str	r5, [sp, #12]
 80107fc:	4667      	mov	r7, ip
 80107fe:	6818      	ldr	r0, [r3, #0]
 8010800:	40b8      	lsls	r0, r7
 8010802:	4308      	orrs	r0, r1
 8010804:	9903      	ldr	r1, [sp, #12]
 8010806:	c101      	stmia	r1!, {r0}
 8010808:	9103      	str	r1, [sp, #12]
 801080a:	9805      	ldr	r0, [sp, #20]
 801080c:	cb02      	ldmia	r3!, {r1}
 801080e:	40c1      	lsrs	r1, r0
 8010810:	429a      	cmp	r2, r3
 8010812:	d8f3      	bhi.n	80107fc <__lshift+0x7c>
 8010814:	0020      	movs	r0, r4
 8010816:	3015      	adds	r0, #21
 8010818:	2304      	movs	r3, #4
 801081a:	4282      	cmp	r2, r0
 801081c:	d304      	bcc.n	8010828 <__lshift+0xa8>
 801081e:	1b13      	subs	r3, r2, r4
 8010820:	3b15      	subs	r3, #21
 8010822:	089b      	lsrs	r3, r3, #2
 8010824:	3301      	adds	r3, #1
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	50e9      	str	r1, [r5, r3]
 801082a:	2900      	cmp	r1, #0
 801082c:	d002      	beq.n	8010834 <__lshift+0xb4>
 801082e:	9b02      	ldr	r3, [sp, #8]
 8010830:	3302      	adds	r3, #2
 8010832:	9301      	str	r3, [sp, #4]
 8010834:	9b01      	ldr	r3, [sp, #4]
 8010836:	9804      	ldr	r0, [sp, #16]
 8010838:	3b01      	subs	r3, #1
 801083a:	0021      	movs	r1, r4
 801083c:	6133      	str	r3, [r6, #16]
 801083e:	f7ff fd7f 	bl	8010340 <_Bfree>
 8010842:	0030      	movs	r0, r6
 8010844:	b007      	add	sp, #28
 8010846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010848:	cb02      	ldmia	r3!, {r1}
 801084a:	c502      	stmia	r5!, {r1}
 801084c:	429a      	cmp	r2, r3
 801084e:	d8fb      	bhi.n	8010848 <__lshift+0xc8>
 8010850:	e7f0      	b.n	8010834 <__lshift+0xb4>
 8010852:	46c0      	nop			; (mov r8, r8)
 8010854:	08013c6c 	.word	0x08013c6c
 8010858:	08013cdd 	.word	0x08013cdd

0801085c <__mcmp>:
 801085c:	b530      	push	{r4, r5, lr}
 801085e:	690b      	ldr	r3, [r1, #16]
 8010860:	6904      	ldr	r4, [r0, #16]
 8010862:	0002      	movs	r2, r0
 8010864:	1ae0      	subs	r0, r4, r3
 8010866:	429c      	cmp	r4, r3
 8010868:	d10e      	bne.n	8010888 <__mcmp+0x2c>
 801086a:	3214      	adds	r2, #20
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	3114      	adds	r1, #20
 8010870:	0014      	movs	r4, r2
 8010872:	18c9      	adds	r1, r1, r3
 8010874:	18d2      	adds	r2, r2, r3
 8010876:	3a04      	subs	r2, #4
 8010878:	3904      	subs	r1, #4
 801087a:	6815      	ldr	r5, [r2, #0]
 801087c:	680b      	ldr	r3, [r1, #0]
 801087e:	429d      	cmp	r5, r3
 8010880:	d003      	beq.n	801088a <__mcmp+0x2e>
 8010882:	2001      	movs	r0, #1
 8010884:	429d      	cmp	r5, r3
 8010886:	d303      	bcc.n	8010890 <__mcmp+0x34>
 8010888:	bd30      	pop	{r4, r5, pc}
 801088a:	4294      	cmp	r4, r2
 801088c:	d3f3      	bcc.n	8010876 <__mcmp+0x1a>
 801088e:	e7fb      	b.n	8010888 <__mcmp+0x2c>
 8010890:	4240      	negs	r0, r0
 8010892:	e7f9      	b.n	8010888 <__mcmp+0x2c>

08010894 <__mdiff>:
 8010894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010896:	000e      	movs	r6, r1
 8010898:	0007      	movs	r7, r0
 801089a:	0011      	movs	r1, r2
 801089c:	0030      	movs	r0, r6
 801089e:	b087      	sub	sp, #28
 80108a0:	0014      	movs	r4, r2
 80108a2:	f7ff ffdb 	bl	801085c <__mcmp>
 80108a6:	1e05      	subs	r5, r0, #0
 80108a8:	d110      	bne.n	80108cc <__mdiff+0x38>
 80108aa:	0001      	movs	r1, r0
 80108ac:	0038      	movs	r0, r7
 80108ae:	f7ff fd03 	bl	80102b8 <_Balloc>
 80108b2:	1e02      	subs	r2, r0, #0
 80108b4:	d104      	bne.n	80108c0 <__mdiff+0x2c>
 80108b6:	4b3f      	ldr	r3, [pc, #252]	; (80109b4 <__mdiff+0x120>)
 80108b8:	483f      	ldr	r0, [pc, #252]	; (80109b8 <__mdiff+0x124>)
 80108ba:	4940      	ldr	r1, [pc, #256]	; (80109bc <__mdiff+0x128>)
 80108bc:	f7fe fa88 	bl	800edd0 <__assert_func>
 80108c0:	2301      	movs	r3, #1
 80108c2:	6145      	str	r5, [r0, #20]
 80108c4:	6103      	str	r3, [r0, #16]
 80108c6:	0010      	movs	r0, r2
 80108c8:	b007      	add	sp, #28
 80108ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108cc:	2301      	movs	r3, #1
 80108ce:	9301      	str	r3, [sp, #4]
 80108d0:	2800      	cmp	r0, #0
 80108d2:	db04      	blt.n	80108de <__mdiff+0x4a>
 80108d4:	0023      	movs	r3, r4
 80108d6:	0034      	movs	r4, r6
 80108d8:	001e      	movs	r6, r3
 80108da:	2300      	movs	r3, #0
 80108dc:	9301      	str	r3, [sp, #4]
 80108de:	0038      	movs	r0, r7
 80108e0:	6861      	ldr	r1, [r4, #4]
 80108e2:	f7ff fce9 	bl	80102b8 <_Balloc>
 80108e6:	1e02      	subs	r2, r0, #0
 80108e8:	d103      	bne.n	80108f2 <__mdiff+0x5e>
 80108ea:	4b32      	ldr	r3, [pc, #200]	; (80109b4 <__mdiff+0x120>)
 80108ec:	4832      	ldr	r0, [pc, #200]	; (80109b8 <__mdiff+0x124>)
 80108ee:	4934      	ldr	r1, [pc, #208]	; (80109c0 <__mdiff+0x12c>)
 80108f0:	e7e4      	b.n	80108bc <__mdiff+0x28>
 80108f2:	9b01      	ldr	r3, [sp, #4]
 80108f4:	2700      	movs	r7, #0
 80108f6:	60c3      	str	r3, [r0, #12]
 80108f8:	6920      	ldr	r0, [r4, #16]
 80108fa:	3414      	adds	r4, #20
 80108fc:	0083      	lsls	r3, r0, #2
 80108fe:	18e3      	adds	r3, r4, r3
 8010900:	0021      	movs	r1, r4
 8010902:	9401      	str	r4, [sp, #4]
 8010904:	0034      	movs	r4, r6
 8010906:	9302      	str	r3, [sp, #8]
 8010908:	6933      	ldr	r3, [r6, #16]
 801090a:	3414      	adds	r4, #20
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	18e3      	adds	r3, r4, r3
 8010910:	9303      	str	r3, [sp, #12]
 8010912:	0013      	movs	r3, r2
 8010914:	3314      	adds	r3, #20
 8010916:	469c      	mov	ip, r3
 8010918:	9305      	str	r3, [sp, #20]
 801091a:	9104      	str	r1, [sp, #16]
 801091c:	9b04      	ldr	r3, [sp, #16]
 801091e:	cc02      	ldmia	r4!, {r1}
 8010920:	cb20      	ldmia	r3!, {r5}
 8010922:	9304      	str	r3, [sp, #16]
 8010924:	b2ab      	uxth	r3, r5
 8010926:	19df      	adds	r7, r3, r7
 8010928:	b28b      	uxth	r3, r1
 801092a:	1afb      	subs	r3, r7, r3
 801092c:	0c09      	lsrs	r1, r1, #16
 801092e:	0c2d      	lsrs	r5, r5, #16
 8010930:	1a6d      	subs	r5, r5, r1
 8010932:	1419      	asrs	r1, r3, #16
 8010934:	1869      	adds	r1, r5, r1
 8010936:	b29b      	uxth	r3, r3
 8010938:	140f      	asrs	r7, r1, #16
 801093a:	0409      	lsls	r1, r1, #16
 801093c:	4319      	orrs	r1, r3
 801093e:	4663      	mov	r3, ip
 8010940:	c302      	stmia	r3!, {r1}
 8010942:	469c      	mov	ip, r3
 8010944:	9b03      	ldr	r3, [sp, #12]
 8010946:	42a3      	cmp	r3, r4
 8010948:	d8e8      	bhi.n	801091c <__mdiff+0x88>
 801094a:	0031      	movs	r1, r6
 801094c:	9c03      	ldr	r4, [sp, #12]
 801094e:	3115      	adds	r1, #21
 8010950:	2304      	movs	r3, #4
 8010952:	428c      	cmp	r4, r1
 8010954:	d304      	bcc.n	8010960 <__mdiff+0xcc>
 8010956:	1ba3      	subs	r3, r4, r6
 8010958:	3b15      	subs	r3, #21
 801095a:	089b      	lsrs	r3, r3, #2
 801095c:	3301      	adds	r3, #1
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	9901      	ldr	r1, [sp, #4]
 8010962:	18cd      	adds	r5, r1, r3
 8010964:	9905      	ldr	r1, [sp, #20]
 8010966:	002e      	movs	r6, r5
 8010968:	18cb      	adds	r3, r1, r3
 801096a:	469c      	mov	ip, r3
 801096c:	9902      	ldr	r1, [sp, #8]
 801096e:	428e      	cmp	r6, r1
 8010970:	d310      	bcc.n	8010994 <__mdiff+0x100>
 8010972:	9e02      	ldr	r6, [sp, #8]
 8010974:	1ee9      	subs	r1, r5, #3
 8010976:	2400      	movs	r4, #0
 8010978:	428e      	cmp	r6, r1
 801097a:	d304      	bcc.n	8010986 <__mdiff+0xf2>
 801097c:	0031      	movs	r1, r6
 801097e:	3103      	adds	r1, #3
 8010980:	1b49      	subs	r1, r1, r5
 8010982:	0889      	lsrs	r1, r1, #2
 8010984:	008c      	lsls	r4, r1, #2
 8010986:	191b      	adds	r3, r3, r4
 8010988:	3b04      	subs	r3, #4
 801098a:	6819      	ldr	r1, [r3, #0]
 801098c:	2900      	cmp	r1, #0
 801098e:	d00f      	beq.n	80109b0 <__mdiff+0x11c>
 8010990:	6110      	str	r0, [r2, #16]
 8010992:	e798      	b.n	80108c6 <__mdiff+0x32>
 8010994:	ce02      	ldmia	r6!, {r1}
 8010996:	b28c      	uxth	r4, r1
 8010998:	19e4      	adds	r4, r4, r7
 801099a:	0c0f      	lsrs	r7, r1, #16
 801099c:	1421      	asrs	r1, r4, #16
 801099e:	1879      	adds	r1, r7, r1
 80109a0:	b2a4      	uxth	r4, r4
 80109a2:	140f      	asrs	r7, r1, #16
 80109a4:	0409      	lsls	r1, r1, #16
 80109a6:	4321      	orrs	r1, r4
 80109a8:	4664      	mov	r4, ip
 80109aa:	c402      	stmia	r4!, {r1}
 80109ac:	46a4      	mov	ip, r4
 80109ae:	e7dd      	b.n	801096c <__mdiff+0xd8>
 80109b0:	3801      	subs	r0, #1
 80109b2:	e7e9      	b.n	8010988 <__mdiff+0xf4>
 80109b4:	08013c6c 	.word	0x08013c6c
 80109b8:	08013cdd 	.word	0x08013cdd
 80109bc:	00000237 	.word	0x00000237
 80109c0:	00000245 	.word	0x00000245

080109c4 <__ulp>:
 80109c4:	2000      	movs	r0, #0
 80109c6:	4b0b      	ldr	r3, [pc, #44]	; (80109f4 <__ulp+0x30>)
 80109c8:	4019      	ands	r1, r3
 80109ca:	4b0b      	ldr	r3, [pc, #44]	; (80109f8 <__ulp+0x34>)
 80109cc:	18c9      	adds	r1, r1, r3
 80109ce:	4281      	cmp	r1, r0
 80109d0:	dc06      	bgt.n	80109e0 <__ulp+0x1c>
 80109d2:	4249      	negs	r1, r1
 80109d4:	150b      	asrs	r3, r1, #20
 80109d6:	2b13      	cmp	r3, #19
 80109d8:	dc03      	bgt.n	80109e2 <__ulp+0x1e>
 80109da:	2180      	movs	r1, #128	; 0x80
 80109dc:	0309      	lsls	r1, r1, #12
 80109de:	4119      	asrs	r1, r3
 80109e0:	4770      	bx	lr
 80109e2:	3b14      	subs	r3, #20
 80109e4:	2001      	movs	r0, #1
 80109e6:	2b1e      	cmp	r3, #30
 80109e8:	dc02      	bgt.n	80109f0 <__ulp+0x2c>
 80109ea:	2080      	movs	r0, #128	; 0x80
 80109ec:	0600      	lsls	r0, r0, #24
 80109ee:	40d8      	lsrs	r0, r3
 80109f0:	2100      	movs	r1, #0
 80109f2:	e7f5      	b.n	80109e0 <__ulp+0x1c>
 80109f4:	7ff00000 	.word	0x7ff00000
 80109f8:	fcc00000 	.word	0xfcc00000

080109fc <__b2d>:
 80109fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109fe:	0006      	movs	r6, r0
 8010a00:	6903      	ldr	r3, [r0, #16]
 8010a02:	3614      	adds	r6, #20
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	18f3      	adds	r3, r6, r3
 8010a08:	1f1d      	subs	r5, r3, #4
 8010a0a:	682c      	ldr	r4, [r5, #0]
 8010a0c:	000f      	movs	r7, r1
 8010a0e:	0020      	movs	r0, r4
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	f7ff fd49 	bl	80104a8 <__hi0bits>
 8010a16:	2220      	movs	r2, #32
 8010a18:	1a12      	subs	r2, r2, r0
 8010a1a:	603a      	str	r2, [r7, #0]
 8010a1c:	0003      	movs	r3, r0
 8010a1e:	4a1c      	ldr	r2, [pc, #112]	; (8010a90 <__b2d+0x94>)
 8010a20:	280a      	cmp	r0, #10
 8010a22:	dc15      	bgt.n	8010a50 <__b2d+0x54>
 8010a24:	210b      	movs	r1, #11
 8010a26:	0027      	movs	r7, r4
 8010a28:	1a09      	subs	r1, r1, r0
 8010a2a:	40cf      	lsrs	r7, r1
 8010a2c:	433a      	orrs	r2, r7
 8010a2e:	468c      	mov	ip, r1
 8010a30:	0011      	movs	r1, r2
 8010a32:	2200      	movs	r2, #0
 8010a34:	42ae      	cmp	r6, r5
 8010a36:	d202      	bcs.n	8010a3e <__b2d+0x42>
 8010a38:	9a01      	ldr	r2, [sp, #4]
 8010a3a:	3a08      	subs	r2, #8
 8010a3c:	6812      	ldr	r2, [r2, #0]
 8010a3e:	3315      	adds	r3, #21
 8010a40:	409c      	lsls	r4, r3
 8010a42:	4663      	mov	r3, ip
 8010a44:	0027      	movs	r7, r4
 8010a46:	40da      	lsrs	r2, r3
 8010a48:	4317      	orrs	r7, r2
 8010a4a:	0038      	movs	r0, r7
 8010a4c:	b003      	add	sp, #12
 8010a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a50:	2700      	movs	r7, #0
 8010a52:	42ae      	cmp	r6, r5
 8010a54:	d202      	bcs.n	8010a5c <__b2d+0x60>
 8010a56:	9d01      	ldr	r5, [sp, #4]
 8010a58:	3d08      	subs	r5, #8
 8010a5a:	682f      	ldr	r7, [r5, #0]
 8010a5c:	210b      	movs	r1, #11
 8010a5e:	4249      	negs	r1, r1
 8010a60:	468c      	mov	ip, r1
 8010a62:	449c      	add	ip, r3
 8010a64:	2b0b      	cmp	r3, #11
 8010a66:	d010      	beq.n	8010a8a <__b2d+0x8e>
 8010a68:	4661      	mov	r1, ip
 8010a6a:	2320      	movs	r3, #32
 8010a6c:	408c      	lsls	r4, r1
 8010a6e:	1a5b      	subs	r3, r3, r1
 8010a70:	0039      	movs	r1, r7
 8010a72:	40d9      	lsrs	r1, r3
 8010a74:	430c      	orrs	r4, r1
 8010a76:	4322      	orrs	r2, r4
 8010a78:	0011      	movs	r1, r2
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	42b5      	cmp	r5, r6
 8010a7e:	d901      	bls.n	8010a84 <__b2d+0x88>
 8010a80:	3d04      	subs	r5, #4
 8010a82:	682a      	ldr	r2, [r5, #0]
 8010a84:	4664      	mov	r4, ip
 8010a86:	40a7      	lsls	r7, r4
 8010a88:	e7dd      	b.n	8010a46 <__b2d+0x4a>
 8010a8a:	4322      	orrs	r2, r4
 8010a8c:	0011      	movs	r1, r2
 8010a8e:	e7dc      	b.n	8010a4a <__b2d+0x4e>
 8010a90:	3ff00000 	.word	0x3ff00000

08010a94 <__d2b>:
 8010a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a96:	2101      	movs	r1, #1
 8010a98:	0014      	movs	r4, r2
 8010a9a:	001d      	movs	r5, r3
 8010a9c:	9f08      	ldr	r7, [sp, #32]
 8010a9e:	f7ff fc0b 	bl	80102b8 <_Balloc>
 8010aa2:	1e06      	subs	r6, r0, #0
 8010aa4:	d105      	bne.n	8010ab2 <__d2b+0x1e>
 8010aa6:	0032      	movs	r2, r6
 8010aa8:	4b24      	ldr	r3, [pc, #144]	; (8010b3c <__d2b+0xa8>)
 8010aaa:	4825      	ldr	r0, [pc, #148]	; (8010b40 <__d2b+0xac>)
 8010aac:	4925      	ldr	r1, [pc, #148]	; (8010b44 <__d2b+0xb0>)
 8010aae:	f7fe f98f 	bl	800edd0 <__assert_func>
 8010ab2:	032b      	lsls	r3, r5, #12
 8010ab4:	006d      	lsls	r5, r5, #1
 8010ab6:	0b1b      	lsrs	r3, r3, #12
 8010ab8:	0d6d      	lsrs	r5, r5, #21
 8010aba:	d125      	bne.n	8010b08 <__d2b+0x74>
 8010abc:	9301      	str	r3, [sp, #4]
 8010abe:	2c00      	cmp	r4, #0
 8010ac0:	d028      	beq.n	8010b14 <__d2b+0x80>
 8010ac2:	4668      	mov	r0, sp
 8010ac4:	9400      	str	r4, [sp, #0]
 8010ac6:	f7ff fd09 	bl	80104dc <__lo0bits>
 8010aca:	9b01      	ldr	r3, [sp, #4]
 8010acc:	9900      	ldr	r1, [sp, #0]
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d01e      	beq.n	8010b10 <__d2b+0x7c>
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	001c      	movs	r4, r3
 8010ad6:	1a12      	subs	r2, r2, r0
 8010ad8:	4094      	lsls	r4, r2
 8010ada:	0022      	movs	r2, r4
 8010adc:	40c3      	lsrs	r3, r0
 8010ade:	430a      	orrs	r2, r1
 8010ae0:	6172      	str	r2, [r6, #20]
 8010ae2:	9301      	str	r3, [sp, #4]
 8010ae4:	9c01      	ldr	r4, [sp, #4]
 8010ae6:	61b4      	str	r4, [r6, #24]
 8010ae8:	1e63      	subs	r3, r4, #1
 8010aea:	419c      	sbcs	r4, r3
 8010aec:	3401      	adds	r4, #1
 8010aee:	6134      	str	r4, [r6, #16]
 8010af0:	2d00      	cmp	r5, #0
 8010af2:	d017      	beq.n	8010b24 <__d2b+0x90>
 8010af4:	2435      	movs	r4, #53	; 0x35
 8010af6:	4b14      	ldr	r3, [pc, #80]	; (8010b48 <__d2b+0xb4>)
 8010af8:	18ed      	adds	r5, r5, r3
 8010afa:	182d      	adds	r5, r5, r0
 8010afc:	603d      	str	r5, [r7, #0]
 8010afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b00:	1a24      	subs	r4, r4, r0
 8010b02:	601c      	str	r4, [r3, #0]
 8010b04:	0030      	movs	r0, r6
 8010b06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b08:	2280      	movs	r2, #128	; 0x80
 8010b0a:	0352      	lsls	r2, r2, #13
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	e7d5      	b.n	8010abc <__d2b+0x28>
 8010b10:	6171      	str	r1, [r6, #20]
 8010b12:	e7e7      	b.n	8010ae4 <__d2b+0x50>
 8010b14:	a801      	add	r0, sp, #4
 8010b16:	f7ff fce1 	bl	80104dc <__lo0bits>
 8010b1a:	9b01      	ldr	r3, [sp, #4]
 8010b1c:	2401      	movs	r4, #1
 8010b1e:	6173      	str	r3, [r6, #20]
 8010b20:	3020      	adds	r0, #32
 8010b22:	e7e4      	b.n	8010aee <__d2b+0x5a>
 8010b24:	4b09      	ldr	r3, [pc, #36]	; (8010b4c <__d2b+0xb8>)
 8010b26:	18c0      	adds	r0, r0, r3
 8010b28:	4b09      	ldr	r3, [pc, #36]	; (8010b50 <__d2b+0xbc>)
 8010b2a:	6038      	str	r0, [r7, #0]
 8010b2c:	18e3      	adds	r3, r4, r3
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	18f3      	adds	r3, r6, r3
 8010b32:	6958      	ldr	r0, [r3, #20]
 8010b34:	f7ff fcb8 	bl	80104a8 <__hi0bits>
 8010b38:	0164      	lsls	r4, r4, #5
 8010b3a:	e7e0      	b.n	8010afe <__d2b+0x6a>
 8010b3c:	08013c6c 	.word	0x08013c6c
 8010b40:	08013cdd 	.word	0x08013cdd
 8010b44:	0000030f 	.word	0x0000030f
 8010b48:	fffffbcd 	.word	0xfffffbcd
 8010b4c:	fffffbce 	.word	0xfffffbce
 8010b50:	3fffffff 	.word	0x3fffffff

08010b54 <__ratio>:
 8010b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b56:	b087      	sub	sp, #28
 8010b58:	000f      	movs	r7, r1
 8010b5a:	a904      	add	r1, sp, #16
 8010b5c:	0006      	movs	r6, r0
 8010b5e:	f7ff ff4d 	bl	80109fc <__b2d>
 8010b62:	9000      	str	r0, [sp, #0]
 8010b64:	9101      	str	r1, [sp, #4]
 8010b66:	9c00      	ldr	r4, [sp, #0]
 8010b68:	9d01      	ldr	r5, [sp, #4]
 8010b6a:	0038      	movs	r0, r7
 8010b6c:	a905      	add	r1, sp, #20
 8010b6e:	f7ff ff45 	bl	80109fc <__b2d>
 8010b72:	9002      	str	r0, [sp, #8]
 8010b74:	9103      	str	r1, [sp, #12]
 8010b76:	9a02      	ldr	r2, [sp, #8]
 8010b78:	9b03      	ldr	r3, [sp, #12]
 8010b7a:	6930      	ldr	r0, [r6, #16]
 8010b7c:	6939      	ldr	r1, [r7, #16]
 8010b7e:	9e04      	ldr	r6, [sp, #16]
 8010b80:	1a40      	subs	r0, r0, r1
 8010b82:	9905      	ldr	r1, [sp, #20]
 8010b84:	0140      	lsls	r0, r0, #5
 8010b86:	1a71      	subs	r1, r6, r1
 8010b88:	1841      	adds	r1, r0, r1
 8010b8a:	0508      	lsls	r0, r1, #20
 8010b8c:	2900      	cmp	r1, #0
 8010b8e:	dd07      	ble.n	8010ba0 <__ratio+0x4c>
 8010b90:	9901      	ldr	r1, [sp, #4]
 8010b92:	1845      	adds	r5, r0, r1
 8010b94:	0020      	movs	r0, r4
 8010b96:	0029      	movs	r1, r5
 8010b98:	f7f0 ffa2 	bl	8001ae0 <__aeabi_ddiv>
 8010b9c:	b007      	add	sp, #28
 8010b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ba0:	9903      	ldr	r1, [sp, #12]
 8010ba2:	1a0b      	subs	r3, r1, r0
 8010ba4:	e7f6      	b.n	8010b94 <__ratio+0x40>

08010ba6 <__copybits>:
 8010ba6:	b570      	push	{r4, r5, r6, lr}
 8010ba8:	0014      	movs	r4, r2
 8010baa:	0005      	movs	r5, r0
 8010bac:	3901      	subs	r1, #1
 8010bae:	6913      	ldr	r3, [r2, #16]
 8010bb0:	1149      	asrs	r1, r1, #5
 8010bb2:	3101      	adds	r1, #1
 8010bb4:	0089      	lsls	r1, r1, #2
 8010bb6:	3414      	adds	r4, #20
 8010bb8:	009b      	lsls	r3, r3, #2
 8010bba:	1841      	adds	r1, r0, r1
 8010bbc:	18e3      	adds	r3, r4, r3
 8010bbe:	42a3      	cmp	r3, r4
 8010bc0:	d80d      	bhi.n	8010bde <__copybits+0x38>
 8010bc2:	0014      	movs	r4, r2
 8010bc4:	3411      	adds	r4, #17
 8010bc6:	2500      	movs	r5, #0
 8010bc8:	429c      	cmp	r4, r3
 8010bca:	d803      	bhi.n	8010bd4 <__copybits+0x2e>
 8010bcc:	1a9b      	subs	r3, r3, r2
 8010bce:	3b11      	subs	r3, #17
 8010bd0:	089b      	lsrs	r3, r3, #2
 8010bd2:	009d      	lsls	r5, r3, #2
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	1940      	adds	r0, r0, r5
 8010bd8:	4281      	cmp	r1, r0
 8010bda:	d803      	bhi.n	8010be4 <__copybits+0x3e>
 8010bdc:	bd70      	pop	{r4, r5, r6, pc}
 8010bde:	cc40      	ldmia	r4!, {r6}
 8010be0:	c540      	stmia	r5!, {r6}
 8010be2:	e7ec      	b.n	8010bbe <__copybits+0x18>
 8010be4:	c008      	stmia	r0!, {r3}
 8010be6:	e7f7      	b.n	8010bd8 <__copybits+0x32>

08010be8 <__any_on>:
 8010be8:	0002      	movs	r2, r0
 8010bea:	6900      	ldr	r0, [r0, #16]
 8010bec:	b510      	push	{r4, lr}
 8010bee:	3214      	adds	r2, #20
 8010bf0:	114b      	asrs	r3, r1, #5
 8010bf2:	4298      	cmp	r0, r3
 8010bf4:	db13      	blt.n	8010c1e <__any_on+0x36>
 8010bf6:	dd0c      	ble.n	8010c12 <__any_on+0x2a>
 8010bf8:	241f      	movs	r4, #31
 8010bfa:	0008      	movs	r0, r1
 8010bfc:	4020      	ands	r0, r4
 8010bfe:	4221      	tst	r1, r4
 8010c00:	d007      	beq.n	8010c12 <__any_on+0x2a>
 8010c02:	0099      	lsls	r1, r3, #2
 8010c04:	588c      	ldr	r4, [r1, r2]
 8010c06:	0021      	movs	r1, r4
 8010c08:	40c1      	lsrs	r1, r0
 8010c0a:	4081      	lsls	r1, r0
 8010c0c:	2001      	movs	r0, #1
 8010c0e:	428c      	cmp	r4, r1
 8010c10:	d104      	bne.n	8010c1c <__any_on+0x34>
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	18d3      	adds	r3, r2, r3
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d803      	bhi.n	8010c22 <__any_on+0x3a>
 8010c1a:	2000      	movs	r0, #0
 8010c1c:	bd10      	pop	{r4, pc}
 8010c1e:	0003      	movs	r3, r0
 8010c20:	e7f7      	b.n	8010c12 <__any_on+0x2a>
 8010c22:	3b04      	subs	r3, #4
 8010c24:	6819      	ldr	r1, [r3, #0]
 8010c26:	2900      	cmp	r1, #0
 8010c28:	d0f5      	beq.n	8010c16 <__any_on+0x2e>
 8010c2a:	2001      	movs	r0, #1
 8010c2c:	e7f6      	b.n	8010c1c <__any_on+0x34>

08010c2e <__ascii_wctomb>:
 8010c2e:	0003      	movs	r3, r0
 8010c30:	1e08      	subs	r0, r1, #0
 8010c32:	d005      	beq.n	8010c40 <__ascii_wctomb+0x12>
 8010c34:	2aff      	cmp	r2, #255	; 0xff
 8010c36:	d904      	bls.n	8010c42 <__ascii_wctomb+0x14>
 8010c38:	228a      	movs	r2, #138	; 0x8a
 8010c3a:	2001      	movs	r0, #1
 8010c3c:	601a      	str	r2, [r3, #0]
 8010c3e:	4240      	negs	r0, r0
 8010c40:	4770      	bx	lr
 8010c42:	2001      	movs	r0, #1
 8010c44:	700a      	strb	r2, [r1, #0]
 8010c46:	e7fb      	b.n	8010c40 <__ascii_wctomb+0x12>

08010c48 <__ssputs_r>:
 8010c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	9301      	str	r3, [sp, #4]
 8010c4e:	9203      	str	r2, [sp, #12]
 8010c50:	688e      	ldr	r6, [r1, #8]
 8010c52:	9a01      	ldr	r2, [sp, #4]
 8010c54:	0007      	movs	r7, r0
 8010c56:	000c      	movs	r4, r1
 8010c58:	680b      	ldr	r3, [r1, #0]
 8010c5a:	4296      	cmp	r6, r2
 8010c5c:	d831      	bhi.n	8010cc2 <__ssputs_r+0x7a>
 8010c5e:	898a      	ldrh	r2, [r1, #12]
 8010c60:	2190      	movs	r1, #144	; 0x90
 8010c62:	00c9      	lsls	r1, r1, #3
 8010c64:	420a      	tst	r2, r1
 8010c66:	d029      	beq.n	8010cbc <__ssputs_r+0x74>
 8010c68:	2003      	movs	r0, #3
 8010c6a:	6921      	ldr	r1, [r4, #16]
 8010c6c:	1a5b      	subs	r3, r3, r1
 8010c6e:	9302      	str	r3, [sp, #8]
 8010c70:	6963      	ldr	r3, [r4, #20]
 8010c72:	4343      	muls	r3, r0
 8010c74:	0fdd      	lsrs	r5, r3, #31
 8010c76:	18ed      	adds	r5, r5, r3
 8010c78:	9b01      	ldr	r3, [sp, #4]
 8010c7a:	9802      	ldr	r0, [sp, #8]
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	181b      	adds	r3, r3, r0
 8010c80:	106d      	asrs	r5, r5, #1
 8010c82:	42ab      	cmp	r3, r5
 8010c84:	d900      	bls.n	8010c88 <__ssputs_r+0x40>
 8010c86:	001d      	movs	r5, r3
 8010c88:	0552      	lsls	r2, r2, #21
 8010c8a:	d529      	bpl.n	8010ce0 <__ssputs_r+0x98>
 8010c8c:	0029      	movs	r1, r5
 8010c8e:	0038      	movs	r0, r7
 8010c90:	f7fb ff6e 	bl	800cb70 <_malloc_r>
 8010c94:	1e06      	subs	r6, r0, #0
 8010c96:	d02d      	beq.n	8010cf4 <__ssputs_r+0xac>
 8010c98:	9a02      	ldr	r2, [sp, #8]
 8010c9a:	6921      	ldr	r1, [r4, #16]
 8010c9c:	f7fe f884 	bl	800eda8 <memcpy>
 8010ca0:	89a2      	ldrh	r2, [r4, #12]
 8010ca2:	4b19      	ldr	r3, [pc, #100]	; (8010d08 <__ssputs_r+0xc0>)
 8010ca4:	401a      	ands	r2, r3
 8010ca6:	2380      	movs	r3, #128	; 0x80
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	81a3      	strh	r3, [r4, #12]
 8010cac:	9b02      	ldr	r3, [sp, #8]
 8010cae:	6126      	str	r6, [r4, #16]
 8010cb0:	18f6      	adds	r6, r6, r3
 8010cb2:	6026      	str	r6, [r4, #0]
 8010cb4:	6165      	str	r5, [r4, #20]
 8010cb6:	9e01      	ldr	r6, [sp, #4]
 8010cb8:	1aed      	subs	r5, r5, r3
 8010cba:	60a5      	str	r5, [r4, #8]
 8010cbc:	9b01      	ldr	r3, [sp, #4]
 8010cbe:	429e      	cmp	r6, r3
 8010cc0:	d900      	bls.n	8010cc4 <__ssputs_r+0x7c>
 8010cc2:	9e01      	ldr	r6, [sp, #4]
 8010cc4:	0032      	movs	r2, r6
 8010cc6:	9903      	ldr	r1, [sp, #12]
 8010cc8:	6820      	ldr	r0, [r4, #0]
 8010cca:	f000 f9e5 	bl	8011098 <memmove>
 8010cce:	2000      	movs	r0, #0
 8010cd0:	68a3      	ldr	r3, [r4, #8]
 8010cd2:	1b9b      	subs	r3, r3, r6
 8010cd4:	60a3      	str	r3, [r4, #8]
 8010cd6:	6823      	ldr	r3, [r4, #0]
 8010cd8:	199b      	adds	r3, r3, r6
 8010cda:	6023      	str	r3, [r4, #0]
 8010cdc:	b005      	add	sp, #20
 8010cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ce0:	002a      	movs	r2, r5
 8010ce2:	0038      	movs	r0, r7
 8010ce4:	f000 fa1f 	bl	8011126 <_realloc_r>
 8010ce8:	1e06      	subs	r6, r0, #0
 8010cea:	d1df      	bne.n	8010cac <__ssputs_r+0x64>
 8010cec:	0038      	movs	r0, r7
 8010cee:	6921      	ldr	r1, [r4, #16]
 8010cf0:	f7fe ff2a 	bl	800fb48 <_free_r>
 8010cf4:	230c      	movs	r3, #12
 8010cf6:	2001      	movs	r0, #1
 8010cf8:	603b      	str	r3, [r7, #0]
 8010cfa:	89a2      	ldrh	r2, [r4, #12]
 8010cfc:	3334      	adds	r3, #52	; 0x34
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	81a3      	strh	r3, [r4, #12]
 8010d02:	4240      	negs	r0, r0
 8010d04:	e7ea      	b.n	8010cdc <__ssputs_r+0x94>
 8010d06:	46c0      	nop			; (mov r8, r8)
 8010d08:	fffffb7f 	.word	0xfffffb7f

08010d0c <_svfiprintf_r>:
 8010d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d0e:	b0a1      	sub	sp, #132	; 0x84
 8010d10:	9003      	str	r0, [sp, #12]
 8010d12:	001d      	movs	r5, r3
 8010d14:	898b      	ldrh	r3, [r1, #12]
 8010d16:	000f      	movs	r7, r1
 8010d18:	0016      	movs	r6, r2
 8010d1a:	061b      	lsls	r3, r3, #24
 8010d1c:	d511      	bpl.n	8010d42 <_svfiprintf_r+0x36>
 8010d1e:	690b      	ldr	r3, [r1, #16]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d10e      	bne.n	8010d42 <_svfiprintf_r+0x36>
 8010d24:	2140      	movs	r1, #64	; 0x40
 8010d26:	f7fb ff23 	bl	800cb70 <_malloc_r>
 8010d2a:	6038      	str	r0, [r7, #0]
 8010d2c:	6138      	str	r0, [r7, #16]
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d105      	bne.n	8010d3e <_svfiprintf_r+0x32>
 8010d32:	230c      	movs	r3, #12
 8010d34:	9a03      	ldr	r2, [sp, #12]
 8010d36:	3801      	subs	r0, #1
 8010d38:	6013      	str	r3, [r2, #0]
 8010d3a:	b021      	add	sp, #132	; 0x84
 8010d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d3e:	2340      	movs	r3, #64	; 0x40
 8010d40:	617b      	str	r3, [r7, #20]
 8010d42:	2300      	movs	r3, #0
 8010d44:	ac08      	add	r4, sp, #32
 8010d46:	6163      	str	r3, [r4, #20]
 8010d48:	3320      	adds	r3, #32
 8010d4a:	7663      	strb	r3, [r4, #25]
 8010d4c:	3310      	adds	r3, #16
 8010d4e:	76a3      	strb	r3, [r4, #26]
 8010d50:	9507      	str	r5, [sp, #28]
 8010d52:	0035      	movs	r5, r6
 8010d54:	782b      	ldrb	r3, [r5, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <_svfiprintf_r+0x52>
 8010d5a:	2b25      	cmp	r3, #37	; 0x25
 8010d5c:	d148      	bne.n	8010df0 <_svfiprintf_r+0xe4>
 8010d5e:	1bab      	subs	r3, r5, r6
 8010d60:	9305      	str	r3, [sp, #20]
 8010d62:	42b5      	cmp	r5, r6
 8010d64:	d00b      	beq.n	8010d7e <_svfiprintf_r+0x72>
 8010d66:	0032      	movs	r2, r6
 8010d68:	0039      	movs	r1, r7
 8010d6a:	9803      	ldr	r0, [sp, #12]
 8010d6c:	f7ff ff6c 	bl	8010c48 <__ssputs_r>
 8010d70:	3001      	adds	r0, #1
 8010d72:	d100      	bne.n	8010d76 <_svfiprintf_r+0x6a>
 8010d74:	e0af      	b.n	8010ed6 <_svfiprintf_r+0x1ca>
 8010d76:	6963      	ldr	r3, [r4, #20]
 8010d78:	9a05      	ldr	r2, [sp, #20]
 8010d7a:	189b      	adds	r3, r3, r2
 8010d7c:	6163      	str	r3, [r4, #20]
 8010d7e:	782b      	ldrb	r3, [r5, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d100      	bne.n	8010d86 <_svfiprintf_r+0x7a>
 8010d84:	e0a7      	b.n	8010ed6 <_svfiprintf_r+0x1ca>
 8010d86:	2201      	movs	r2, #1
 8010d88:	2300      	movs	r3, #0
 8010d8a:	4252      	negs	r2, r2
 8010d8c:	6062      	str	r2, [r4, #4]
 8010d8e:	a904      	add	r1, sp, #16
 8010d90:	3254      	adds	r2, #84	; 0x54
 8010d92:	1852      	adds	r2, r2, r1
 8010d94:	1c6e      	adds	r6, r5, #1
 8010d96:	6023      	str	r3, [r4, #0]
 8010d98:	60e3      	str	r3, [r4, #12]
 8010d9a:	60a3      	str	r3, [r4, #8]
 8010d9c:	7013      	strb	r3, [r2, #0]
 8010d9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8010da0:	4b55      	ldr	r3, [pc, #340]	; (8010ef8 <_svfiprintf_r+0x1ec>)
 8010da2:	2205      	movs	r2, #5
 8010da4:	0018      	movs	r0, r3
 8010da6:	7831      	ldrb	r1, [r6, #0]
 8010da8:	9305      	str	r3, [sp, #20]
 8010daa:	f7fd fff2 	bl	800ed92 <memchr>
 8010dae:	1c75      	adds	r5, r6, #1
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d11f      	bne.n	8010df4 <_svfiprintf_r+0xe8>
 8010db4:	6822      	ldr	r2, [r4, #0]
 8010db6:	06d3      	lsls	r3, r2, #27
 8010db8:	d504      	bpl.n	8010dc4 <_svfiprintf_r+0xb8>
 8010dba:	2353      	movs	r3, #83	; 0x53
 8010dbc:	a904      	add	r1, sp, #16
 8010dbe:	185b      	adds	r3, r3, r1
 8010dc0:	2120      	movs	r1, #32
 8010dc2:	7019      	strb	r1, [r3, #0]
 8010dc4:	0713      	lsls	r3, r2, #28
 8010dc6:	d504      	bpl.n	8010dd2 <_svfiprintf_r+0xc6>
 8010dc8:	2353      	movs	r3, #83	; 0x53
 8010dca:	a904      	add	r1, sp, #16
 8010dcc:	185b      	adds	r3, r3, r1
 8010dce:	212b      	movs	r1, #43	; 0x2b
 8010dd0:	7019      	strb	r1, [r3, #0]
 8010dd2:	7833      	ldrb	r3, [r6, #0]
 8010dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8010dd6:	d016      	beq.n	8010e06 <_svfiprintf_r+0xfa>
 8010dd8:	0035      	movs	r5, r6
 8010dda:	2100      	movs	r1, #0
 8010ddc:	200a      	movs	r0, #10
 8010dde:	68e3      	ldr	r3, [r4, #12]
 8010de0:	782a      	ldrb	r2, [r5, #0]
 8010de2:	1c6e      	adds	r6, r5, #1
 8010de4:	3a30      	subs	r2, #48	; 0x30
 8010de6:	2a09      	cmp	r2, #9
 8010de8:	d94e      	bls.n	8010e88 <_svfiprintf_r+0x17c>
 8010dea:	2900      	cmp	r1, #0
 8010dec:	d111      	bne.n	8010e12 <_svfiprintf_r+0x106>
 8010dee:	e017      	b.n	8010e20 <_svfiprintf_r+0x114>
 8010df0:	3501      	adds	r5, #1
 8010df2:	e7af      	b.n	8010d54 <_svfiprintf_r+0x48>
 8010df4:	9b05      	ldr	r3, [sp, #20]
 8010df6:	6822      	ldr	r2, [r4, #0]
 8010df8:	1ac0      	subs	r0, r0, r3
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	4083      	lsls	r3, r0
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	002e      	movs	r6, r5
 8010e02:	6023      	str	r3, [r4, #0]
 8010e04:	e7cc      	b.n	8010da0 <_svfiprintf_r+0x94>
 8010e06:	9b07      	ldr	r3, [sp, #28]
 8010e08:	1d19      	adds	r1, r3, #4
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	9107      	str	r1, [sp, #28]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	db01      	blt.n	8010e16 <_svfiprintf_r+0x10a>
 8010e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e14:	e004      	b.n	8010e20 <_svfiprintf_r+0x114>
 8010e16:	425b      	negs	r3, r3
 8010e18:	60e3      	str	r3, [r4, #12]
 8010e1a:	2302      	movs	r3, #2
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	6023      	str	r3, [r4, #0]
 8010e20:	782b      	ldrb	r3, [r5, #0]
 8010e22:	2b2e      	cmp	r3, #46	; 0x2e
 8010e24:	d10a      	bne.n	8010e3c <_svfiprintf_r+0x130>
 8010e26:	786b      	ldrb	r3, [r5, #1]
 8010e28:	2b2a      	cmp	r3, #42	; 0x2a
 8010e2a:	d135      	bne.n	8010e98 <_svfiprintf_r+0x18c>
 8010e2c:	9b07      	ldr	r3, [sp, #28]
 8010e2e:	3502      	adds	r5, #2
 8010e30:	1d1a      	adds	r2, r3, #4
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	9207      	str	r2, [sp, #28]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	db2b      	blt.n	8010e92 <_svfiprintf_r+0x186>
 8010e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e3c:	4e2f      	ldr	r6, [pc, #188]	; (8010efc <_svfiprintf_r+0x1f0>)
 8010e3e:	2203      	movs	r2, #3
 8010e40:	0030      	movs	r0, r6
 8010e42:	7829      	ldrb	r1, [r5, #0]
 8010e44:	f7fd ffa5 	bl	800ed92 <memchr>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d006      	beq.n	8010e5a <_svfiprintf_r+0x14e>
 8010e4c:	2340      	movs	r3, #64	; 0x40
 8010e4e:	1b80      	subs	r0, r0, r6
 8010e50:	4083      	lsls	r3, r0
 8010e52:	6822      	ldr	r2, [r4, #0]
 8010e54:	3501      	adds	r5, #1
 8010e56:	4313      	orrs	r3, r2
 8010e58:	6023      	str	r3, [r4, #0]
 8010e5a:	7829      	ldrb	r1, [r5, #0]
 8010e5c:	2206      	movs	r2, #6
 8010e5e:	4828      	ldr	r0, [pc, #160]	; (8010f00 <_svfiprintf_r+0x1f4>)
 8010e60:	1c6e      	adds	r6, r5, #1
 8010e62:	7621      	strb	r1, [r4, #24]
 8010e64:	f7fd ff95 	bl	800ed92 <memchr>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d03c      	beq.n	8010ee6 <_svfiprintf_r+0x1da>
 8010e6c:	4b25      	ldr	r3, [pc, #148]	; (8010f04 <_svfiprintf_r+0x1f8>)
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d125      	bne.n	8010ebe <_svfiprintf_r+0x1b2>
 8010e72:	2207      	movs	r2, #7
 8010e74:	9b07      	ldr	r3, [sp, #28]
 8010e76:	3307      	adds	r3, #7
 8010e78:	4393      	bics	r3, r2
 8010e7a:	3308      	adds	r3, #8
 8010e7c:	9307      	str	r3, [sp, #28]
 8010e7e:	6963      	ldr	r3, [r4, #20]
 8010e80:	9a04      	ldr	r2, [sp, #16]
 8010e82:	189b      	adds	r3, r3, r2
 8010e84:	6163      	str	r3, [r4, #20]
 8010e86:	e764      	b.n	8010d52 <_svfiprintf_r+0x46>
 8010e88:	4343      	muls	r3, r0
 8010e8a:	0035      	movs	r5, r6
 8010e8c:	2101      	movs	r1, #1
 8010e8e:	189b      	adds	r3, r3, r2
 8010e90:	e7a6      	b.n	8010de0 <_svfiprintf_r+0xd4>
 8010e92:	2301      	movs	r3, #1
 8010e94:	425b      	negs	r3, r3
 8010e96:	e7d0      	b.n	8010e3a <_svfiprintf_r+0x12e>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	200a      	movs	r0, #10
 8010e9c:	001a      	movs	r2, r3
 8010e9e:	3501      	adds	r5, #1
 8010ea0:	6063      	str	r3, [r4, #4]
 8010ea2:	7829      	ldrb	r1, [r5, #0]
 8010ea4:	1c6e      	adds	r6, r5, #1
 8010ea6:	3930      	subs	r1, #48	; 0x30
 8010ea8:	2909      	cmp	r1, #9
 8010eaa:	d903      	bls.n	8010eb4 <_svfiprintf_r+0x1a8>
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d0c5      	beq.n	8010e3c <_svfiprintf_r+0x130>
 8010eb0:	9209      	str	r2, [sp, #36]	; 0x24
 8010eb2:	e7c3      	b.n	8010e3c <_svfiprintf_r+0x130>
 8010eb4:	4342      	muls	r2, r0
 8010eb6:	0035      	movs	r5, r6
 8010eb8:	2301      	movs	r3, #1
 8010eba:	1852      	adds	r2, r2, r1
 8010ebc:	e7f1      	b.n	8010ea2 <_svfiprintf_r+0x196>
 8010ebe:	aa07      	add	r2, sp, #28
 8010ec0:	9200      	str	r2, [sp, #0]
 8010ec2:	0021      	movs	r1, r4
 8010ec4:	003a      	movs	r2, r7
 8010ec6:	4b10      	ldr	r3, [pc, #64]	; (8010f08 <_svfiprintf_r+0x1fc>)
 8010ec8:	9803      	ldr	r0, [sp, #12]
 8010eca:	f7fc fe59 	bl	800db80 <_printf_float>
 8010ece:	9004      	str	r0, [sp, #16]
 8010ed0:	9b04      	ldr	r3, [sp, #16]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	d1d3      	bne.n	8010e7e <_svfiprintf_r+0x172>
 8010ed6:	89bb      	ldrh	r3, [r7, #12]
 8010ed8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010eda:	065b      	lsls	r3, r3, #25
 8010edc:	d400      	bmi.n	8010ee0 <_svfiprintf_r+0x1d4>
 8010ede:	e72c      	b.n	8010d3a <_svfiprintf_r+0x2e>
 8010ee0:	2001      	movs	r0, #1
 8010ee2:	4240      	negs	r0, r0
 8010ee4:	e729      	b.n	8010d3a <_svfiprintf_r+0x2e>
 8010ee6:	aa07      	add	r2, sp, #28
 8010ee8:	9200      	str	r2, [sp, #0]
 8010eea:	0021      	movs	r1, r4
 8010eec:	003a      	movs	r2, r7
 8010eee:	4b06      	ldr	r3, [pc, #24]	; (8010f08 <_svfiprintf_r+0x1fc>)
 8010ef0:	9803      	ldr	r0, [sp, #12]
 8010ef2:	f7fd f90b 	bl	800e10c <_printf_i>
 8010ef6:	e7ea      	b.n	8010ece <_svfiprintf_r+0x1c2>
 8010ef8:	08013e34 	.word	0x08013e34
 8010efc:	08013e3a 	.word	0x08013e3a
 8010f00:	08013e3e 	.word	0x08013e3e
 8010f04:	0800db81 	.word	0x0800db81
 8010f08:	08010c49 	.word	0x08010c49

08010f0c <__sflush_r>:
 8010f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f0e:	898b      	ldrh	r3, [r1, #12]
 8010f10:	0005      	movs	r5, r0
 8010f12:	000c      	movs	r4, r1
 8010f14:	071a      	lsls	r2, r3, #28
 8010f16:	d45c      	bmi.n	8010fd2 <__sflush_r+0xc6>
 8010f18:	684a      	ldr	r2, [r1, #4]
 8010f1a:	2a00      	cmp	r2, #0
 8010f1c:	dc04      	bgt.n	8010f28 <__sflush_r+0x1c>
 8010f1e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8010f20:	2a00      	cmp	r2, #0
 8010f22:	dc01      	bgt.n	8010f28 <__sflush_r+0x1c>
 8010f24:	2000      	movs	r0, #0
 8010f26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f28:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010f2a:	2f00      	cmp	r7, #0
 8010f2c:	d0fa      	beq.n	8010f24 <__sflush_r+0x18>
 8010f2e:	2200      	movs	r2, #0
 8010f30:	2080      	movs	r0, #128	; 0x80
 8010f32:	682e      	ldr	r6, [r5, #0]
 8010f34:	602a      	str	r2, [r5, #0]
 8010f36:	001a      	movs	r2, r3
 8010f38:	0140      	lsls	r0, r0, #5
 8010f3a:	6a21      	ldr	r1, [r4, #32]
 8010f3c:	4002      	ands	r2, r0
 8010f3e:	4203      	tst	r3, r0
 8010f40:	d034      	beq.n	8010fac <__sflush_r+0xa0>
 8010f42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f44:	89a3      	ldrh	r3, [r4, #12]
 8010f46:	075b      	lsls	r3, r3, #29
 8010f48:	d506      	bpl.n	8010f58 <__sflush_r+0x4c>
 8010f4a:	6863      	ldr	r3, [r4, #4]
 8010f4c:	1ac0      	subs	r0, r0, r3
 8010f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d001      	beq.n	8010f58 <__sflush_r+0x4c>
 8010f54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f56:	1ac0      	subs	r0, r0, r3
 8010f58:	0002      	movs	r2, r0
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	0028      	movs	r0, r5
 8010f5e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010f60:	6a21      	ldr	r1, [r4, #32]
 8010f62:	47b8      	blx	r7
 8010f64:	89a2      	ldrh	r2, [r4, #12]
 8010f66:	1c43      	adds	r3, r0, #1
 8010f68:	d106      	bne.n	8010f78 <__sflush_r+0x6c>
 8010f6a:	6829      	ldr	r1, [r5, #0]
 8010f6c:	291d      	cmp	r1, #29
 8010f6e:	d82c      	bhi.n	8010fca <__sflush_r+0xbe>
 8010f70:	4b2a      	ldr	r3, [pc, #168]	; (801101c <__sflush_r+0x110>)
 8010f72:	410b      	asrs	r3, r1
 8010f74:	07db      	lsls	r3, r3, #31
 8010f76:	d428      	bmi.n	8010fca <__sflush_r+0xbe>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	6063      	str	r3, [r4, #4]
 8010f7c:	6923      	ldr	r3, [r4, #16]
 8010f7e:	6023      	str	r3, [r4, #0]
 8010f80:	04d2      	lsls	r2, r2, #19
 8010f82:	d505      	bpl.n	8010f90 <__sflush_r+0x84>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	d102      	bne.n	8010f8e <__sflush_r+0x82>
 8010f88:	682b      	ldr	r3, [r5, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d100      	bne.n	8010f90 <__sflush_r+0x84>
 8010f8e:	6560      	str	r0, [r4, #84]	; 0x54
 8010f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f92:	602e      	str	r6, [r5, #0]
 8010f94:	2900      	cmp	r1, #0
 8010f96:	d0c5      	beq.n	8010f24 <__sflush_r+0x18>
 8010f98:	0023      	movs	r3, r4
 8010f9a:	3344      	adds	r3, #68	; 0x44
 8010f9c:	4299      	cmp	r1, r3
 8010f9e:	d002      	beq.n	8010fa6 <__sflush_r+0x9a>
 8010fa0:	0028      	movs	r0, r5
 8010fa2:	f7fe fdd1 	bl	800fb48 <_free_r>
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	6360      	str	r0, [r4, #52]	; 0x34
 8010faa:	e7bc      	b.n	8010f26 <__sflush_r+0x1a>
 8010fac:	2301      	movs	r3, #1
 8010fae:	0028      	movs	r0, r5
 8010fb0:	47b8      	blx	r7
 8010fb2:	1c43      	adds	r3, r0, #1
 8010fb4:	d1c6      	bne.n	8010f44 <__sflush_r+0x38>
 8010fb6:	682b      	ldr	r3, [r5, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d0c3      	beq.n	8010f44 <__sflush_r+0x38>
 8010fbc:	2b1d      	cmp	r3, #29
 8010fbe:	d001      	beq.n	8010fc4 <__sflush_r+0xb8>
 8010fc0:	2b16      	cmp	r3, #22
 8010fc2:	d101      	bne.n	8010fc8 <__sflush_r+0xbc>
 8010fc4:	602e      	str	r6, [r5, #0]
 8010fc6:	e7ad      	b.n	8010f24 <__sflush_r+0x18>
 8010fc8:	89a2      	ldrh	r2, [r4, #12]
 8010fca:	2340      	movs	r3, #64	; 0x40
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	81a3      	strh	r3, [r4, #12]
 8010fd0:	e7a9      	b.n	8010f26 <__sflush_r+0x1a>
 8010fd2:	690e      	ldr	r6, [r1, #16]
 8010fd4:	2e00      	cmp	r6, #0
 8010fd6:	d0a5      	beq.n	8010f24 <__sflush_r+0x18>
 8010fd8:	680f      	ldr	r7, [r1, #0]
 8010fda:	600e      	str	r6, [r1, #0]
 8010fdc:	1bba      	subs	r2, r7, r6
 8010fde:	9201      	str	r2, [sp, #4]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	079b      	lsls	r3, r3, #30
 8010fe4:	d100      	bne.n	8010fe8 <__sflush_r+0xdc>
 8010fe6:	694a      	ldr	r2, [r1, #20]
 8010fe8:	60a2      	str	r2, [r4, #8]
 8010fea:	9b01      	ldr	r3, [sp, #4]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	dd99      	ble.n	8010f24 <__sflush_r+0x18>
 8010ff0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010ff2:	0032      	movs	r2, r6
 8010ff4:	001f      	movs	r7, r3
 8010ff6:	0028      	movs	r0, r5
 8010ff8:	9b01      	ldr	r3, [sp, #4]
 8010ffa:	6a21      	ldr	r1, [r4, #32]
 8010ffc:	47b8      	blx	r7
 8010ffe:	2800      	cmp	r0, #0
 8011000:	dc06      	bgt.n	8011010 <__sflush_r+0x104>
 8011002:	2340      	movs	r3, #64	; 0x40
 8011004:	2001      	movs	r0, #1
 8011006:	89a2      	ldrh	r2, [r4, #12]
 8011008:	4240      	negs	r0, r0
 801100a:	4313      	orrs	r3, r2
 801100c:	81a3      	strh	r3, [r4, #12]
 801100e:	e78a      	b.n	8010f26 <__sflush_r+0x1a>
 8011010:	9b01      	ldr	r3, [sp, #4]
 8011012:	1836      	adds	r6, r6, r0
 8011014:	1a1b      	subs	r3, r3, r0
 8011016:	9301      	str	r3, [sp, #4]
 8011018:	e7e7      	b.n	8010fea <__sflush_r+0xde>
 801101a:	46c0      	nop			; (mov r8, r8)
 801101c:	dfbffffe 	.word	0xdfbffffe

08011020 <_fflush_r>:
 8011020:	690b      	ldr	r3, [r1, #16]
 8011022:	b570      	push	{r4, r5, r6, lr}
 8011024:	0005      	movs	r5, r0
 8011026:	000c      	movs	r4, r1
 8011028:	2b00      	cmp	r3, #0
 801102a:	d102      	bne.n	8011032 <_fflush_r+0x12>
 801102c:	2500      	movs	r5, #0
 801102e:	0028      	movs	r0, r5
 8011030:	bd70      	pop	{r4, r5, r6, pc}
 8011032:	2800      	cmp	r0, #0
 8011034:	d004      	beq.n	8011040 <_fflush_r+0x20>
 8011036:	6a03      	ldr	r3, [r0, #32]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d101      	bne.n	8011040 <_fflush_r+0x20>
 801103c:	f7fd fc0e 	bl	800e85c <__sinit>
 8011040:	220c      	movs	r2, #12
 8011042:	5ea3      	ldrsh	r3, [r4, r2]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d0f1      	beq.n	801102c <_fflush_r+0xc>
 8011048:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801104a:	07d2      	lsls	r2, r2, #31
 801104c:	d404      	bmi.n	8011058 <_fflush_r+0x38>
 801104e:	059b      	lsls	r3, r3, #22
 8011050:	d402      	bmi.n	8011058 <_fflush_r+0x38>
 8011052:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011054:	f7fd fe93 	bl	800ed7e <__retarget_lock_acquire_recursive>
 8011058:	0028      	movs	r0, r5
 801105a:	0021      	movs	r1, r4
 801105c:	f7ff ff56 	bl	8010f0c <__sflush_r>
 8011060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011062:	0005      	movs	r5, r0
 8011064:	07db      	lsls	r3, r3, #31
 8011066:	d4e2      	bmi.n	801102e <_fflush_r+0xe>
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	059b      	lsls	r3, r3, #22
 801106c:	d4df      	bmi.n	801102e <_fflush_r+0xe>
 801106e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011070:	f7fd fe86 	bl	800ed80 <__retarget_lock_release_recursive>
 8011074:	e7db      	b.n	801102e <_fflush_r+0xe>
	...

08011078 <fiprintf>:
 8011078:	b40e      	push	{r1, r2, r3}
 801107a:	b517      	push	{r0, r1, r2, r4, lr}
 801107c:	4c05      	ldr	r4, [pc, #20]	; (8011094 <fiprintf+0x1c>)
 801107e:	ab05      	add	r3, sp, #20
 8011080:	cb04      	ldmia	r3!, {r2}
 8011082:	0001      	movs	r1, r0
 8011084:	6820      	ldr	r0, [r4, #0]
 8011086:	9301      	str	r3, [sp, #4]
 8011088:	f000 f8a4 	bl	80111d4 <_vfiprintf_r>
 801108c:	bc1e      	pop	{r1, r2, r3, r4}
 801108e:	bc08      	pop	{r3}
 8011090:	b003      	add	sp, #12
 8011092:	4718      	bx	r3
 8011094:	200002f0 	.word	0x200002f0

08011098 <memmove>:
 8011098:	b510      	push	{r4, lr}
 801109a:	4288      	cmp	r0, r1
 801109c:	d902      	bls.n	80110a4 <memmove+0xc>
 801109e:	188b      	adds	r3, r1, r2
 80110a0:	4298      	cmp	r0, r3
 80110a2:	d303      	bcc.n	80110ac <memmove+0x14>
 80110a4:	2300      	movs	r3, #0
 80110a6:	e007      	b.n	80110b8 <memmove+0x20>
 80110a8:	5c8b      	ldrb	r3, [r1, r2]
 80110aa:	5483      	strb	r3, [r0, r2]
 80110ac:	3a01      	subs	r2, #1
 80110ae:	d2fb      	bcs.n	80110a8 <memmove+0x10>
 80110b0:	bd10      	pop	{r4, pc}
 80110b2:	5ccc      	ldrb	r4, [r1, r3]
 80110b4:	54c4      	strb	r4, [r0, r3]
 80110b6:	3301      	adds	r3, #1
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d1fa      	bne.n	80110b2 <memmove+0x1a>
 80110bc:	e7f8      	b.n	80110b0 <memmove+0x18>

080110be <abort>:
 80110be:	2006      	movs	r0, #6
 80110c0:	b510      	push	{r4, lr}
 80110c2:	f000 fa73 	bl	80115ac <raise>
 80110c6:	2001      	movs	r0, #1
 80110c8:	f7f6 fc30 	bl	800792c <_exit>

080110cc <_calloc_r>:
 80110cc:	b570      	push	{r4, r5, r6, lr}
 80110ce:	0c0b      	lsrs	r3, r1, #16
 80110d0:	0c15      	lsrs	r5, r2, #16
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d11e      	bne.n	8011114 <_calloc_r+0x48>
 80110d6:	2d00      	cmp	r5, #0
 80110d8:	d10c      	bne.n	80110f4 <_calloc_r+0x28>
 80110da:	b289      	uxth	r1, r1
 80110dc:	b294      	uxth	r4, r2
 80110de:	434c      	muls	r4, r1
 80110e0:	0021      	movs	r1, r4
 80110e2:	f7fb fd45 	bl	800cb70 <_malloc_r>
 80110e6:	1e05      	subs	r5, r0, #0
 80110e8:	d01b      	beq.n	8011122 <_calloc_r+0x56>
 80110ea:	0022      	movs	r2, r4
 80110ec:	2100      	movs	r1, #0
 80110ee:	f7fd fc89 	bl	800ea04 <memset>
 80110f2:	e016      	b.n	8011122 <_calloc_r+0x56>
 80110f4:	1c2b      	adds	r3, r5, #0
 80110f6:	1c0c      	adds	r4, r1, #0
 80110f8:	b289      	uxth	r1, r1
 80110fa:	b292      	uxth	r2, r2
 80110fc:	434a      	muls	r2, r1
 80110fe:	b2a1      	uxth	r1, r4
 8011100:	b29c      	uxth	r4, r3
 8011102:	434c      	muls	r4, r1
 8011104:	0c13      	lsrs	r3, r2, #16
 8011106:	18e4      	adds	r4, r4, r3
 8011108:	0c23      	lsrs	r3, r4, #16
 801110a:	d107      	bne.n	801111c <_calloc_r+0x50>
 801110c:	0424      	lsls	r4, r4, #16
 801110e:	b292      	uxth	r2, r2
 8011110:	4314      	orrs	r4, r2
 8011112:	e7e5      	b.n	80110e0 <_calloc_r+0x14>
 8011114:	2d00      	cmp	r5, #0
 8011116:	d101      	bne.n	801111c <_calloc_r+0x50>
 8011118:	1c14      	adds	r4, r2, #0
 801111a:	e7ed      	b.n	80110f8 <_calloc_r+0x2c>
 801111c:	230c      	movs	r3, #12
 801111e:	2500      	movs	r5, #0
 8011120:	6003      	str	r3, [r0, #0]
 8011122:	0028      	movs	r0, r5
 8011124:	bd70      	pop	{r4, r5, r6, pc}

08011126 <_realloc_r>:
 8011126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011128:	0007      	movs	r7, r0
 801112a:	000e      	movs	r6, r1
 801112c:	0014      	movs	r4, r2
 801112e:	2900      	cmp	r1, #0
 8011130:	d105      	bne.n	801113e <_realloc_r+0x18>
 8011132:	0011      	movs	r1, r2
 8011134:	f7fb fd1c 	bl	800cb70 <_malloc_r>
 8011138:	0005      	movs	r5, r0
 801113a:	0028      	movs	r0, r5
 801113c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801113e:	2a00      	cmp	r2, #0
 8011140:	d103      	bne.n	801114a <_realloc_r+0x24>
 8011142:	f7fe fd01 	bl	800fb48 <_free_r>
 8011146:	0025      	movs	r5, r4
 8011148:	e7f7      	b.n	801113a <_realloc_r+0x14>
 801114a:	f000 fa4f 	bl	80115ec <_malloc_usable_size_r>
 801114e:	9001      	str	r0, [sp, #4]
 8011150:	4284      	cmp	r4, r0
 8011152:	d803      	bhi.n	801115c <_realloc_r+0x36>
 8011154:	0035      	movs	r5, r6
 8011156:	0843      	lsrs	r3, r0, #1
 8011158:	42a3      	cmp	r3, r4
 801115a:	d3ee      	bcc.n	801113a <_realloc_r+0x14>
 801115c:	0021      	movs	r1, r4
 801115e:	0038      	movs	r0, r7
 8011160:	f7fb fd06 	bl	800cb70 <_malloc_r>
 8011164:	1e05      	subs	r5, r0, #0
 8011166:	d0e8      	beq.n	801113a <_realloc_r+0x14>
 8011168:	9b01      	ldr	r3, [sp, #4]
 801116a:	0022      	movs	r2, r4
 801116c:	429c      	cmp	r4, r3
 801116e:	d900      	bls.n	8011172 <_realloc_r+0x4c>
 8011170:	001a      	movs	r2, r3
 8011172:	0031      	movs	r1, r6
 8011174:	0028      	movs	r0, r5
 8011176:	f7fd fe17 	bl	800eda8 <memcpy>
 801117a:	0031      	movs	r1, r6
 801117c:	0038      	movs	r0, r7
 801117e:	f7fe fce3 	bl	800fb48 <_free_r>
 8011182:	e7da      	b.n	801113a <_realloc_r+0x14>

08011184 <__sfputc_r>:
 8011184:	6893      	ldr	r3, [r2, #8]
 8011186:	b510      	push	{r4, lr}
 8011188:	3b01      	subs	r3, #1
 801118a:	6093      	str	r3, [r2, #8]
 801118c:	2b00      	cmp	r3, #0
 801118e:	da04      	bge.n	801119a <__sfputc_r+0x16>
 8011190:	6994      	ldr	r4, [r2, #24]
 8011192:	42a3      	cmp	r3, r4
 8011194:	db07      	blt.n	80111a6 <__sfputc_r+0x22>
 8011196:	290a      	cmp	r1, #10
 8011198:	d005      	beq.n	80111a6 <__sfputc_r+0x22>
 801119a:	6813      	ldr	r3, [r2, #0]
 801119c:	1c58      	adds	r0, r3, #1
 801119e:	6010      	str	r0, [r2, #0]
 80111a0:	7019      	strb	r1, [r3, #0]
 80111a2:	0008      	movs	r0, r1
 80111a4:	bd10      	pop	{r4, pc}
 80111a6:	f000 f931 	bl	801140c <__swbuf_r>
 80111aa:	0001      	movs	r1, r0
 80111ac:	e7f9      	b.n	80111a2 <__sfputc_r+0x1e>

080111ae <__sfputs_r>:
 80111ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111b0:	0006      	movs	r6, r0
 80111b2:	000f      	movs	r7, r1
 80111b4:	0014      	movs	r4, r2
 80111b6:	18d5      	adds	r5, r2, r3
 80111b8:	42ac      	cmp	r4, r5
 80111ba:	d101      	bne.n	80111c0 <__sfputs_r+0x12>
 80111bc:	2000      	movs	r0, #0
 80111be:	e007      	b.n	80111d0 <__sfputs_r+0x22>
 80111c0:	7821      	ldrb	r1, [r4, #0]
 80111c2:	003a      	movs	r2, r7
 80111c4:	0030      	movs	r0, r6
 80111c6:	f7ff ffdd 	bl	8011184 <__sfputc_r>
 80111ca:	3401      	adds	r4, #1
 80111cc:	1c43      	adds	r3, r0, #1
 80111ce:	d1f3      	bne.n	80111b8 <__sfputs_r+0xa>
 80111d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111d4 <_vfiprintf_r>:
 80111d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111d6:	b0a1      	sub	sp, #132	; 0x84
 80111d8:	000f      	movs	r7, r1
 80111da:	0015      	movs	r5, r2
 80111dc:	001e      	movs	r6, r3
 80111de:	9003      	str	r0, [sp, #12]
 80111e0:	2800      	cmp	r0, #0
 80111e2:	d004      	beq.n	80111ee <_vfiprintf_r+0x1a>
 80111e4:	6a03      	ldr	r3, [r0, #32]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d101      	bne.n	80111ee <_vfiprintf_r+0x1a>
 80111ea:	f7fd fb37 	bl	800e85c <__sinit>
 80111ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111f0:	07db      	lsls	r3, r3, #31
 80111f2:	d405      	bmi.n	8011200 <_vfiprintf_r+0x2c>
 80111f4:	89bb      	ldrh	r3, [r7, #12]
 80111f6:	059b      	lsls	r3, r3, #22
 80111f8:	d402      	bmi.n	8011200 <_vfiprintf_r+0x2c>
 80111fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80111fc:	f7fd fdbf 	bl	800ed7e <__retarget_lock_acquire_recursive>
 8011200:	89bb      	ldrh	r3, [r7, #12]
 8011202:	071b      	lsls	r3, r3, #28
 8011204:	d502      	bpl.n	801120c <_vfiprintf_r+0x38>
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d113      	bne.n	8011234 <_vfiprintf_r+0x60>
 801120c:	0039      	movs	r1, r7
 801120e:	9803      	ldr	r0, [sp, #12]
 8011210:	f000 f93e 	bl	8011490 <__swsetup_r>
 8011214:	2800      	cmp	r0, #0
 8011216:	d00d      	beq.n	8011234 <_vfiprintf_r+0x60>
 8011218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801121a:	07db      	lsls	r3, r3, #31
 801121c:	d503      	bpl.n	8011226 <_vfiprintf_r+0x52>
 801121e:	2001      	movs	r0, #1
 8011220:	4240      	negs	r0, r0
 8011222:	b021      	add	sp, #132	; 0x84
 8011224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011226:	89bb      	ldrh	r3, [r7, #12]
 8011228:	059b      	lsls	r3, r3, #22
 801122a:	d4f8      	bmi.n	801121e <_vfiprintf_r+0x4a>
 801122c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801122e:	f7fd fda7 	bl	800ed80 <__retarget_lock_release_recursive>
 8011232:	e7f4      	b.n	801121e <_vfiprintf_r+0x4a>
 8011234:	2300      	movs	r3, #0
 8011236:	ac08      	add	r4, sp, #32
 8011238:	6163      	str	r3, [r4, #20]
 801123a:	3320      	adds	r3, #32
 801123c:	7663      	strb	r3, [r4, #25]
 801123e:	3310      	adds	r3, #16
 8011240:	76a3      	strb	r3, [r4, #26]
 8011242:	9607      	str	r6, [sp, #28]
 8011244:	002e      	movs	r6, r5
 8011246:	7833      	ldrb	r3, [r6, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d001      	beq.n	8011250 <_vfiprintf_r+0x7c>
 801124c:	2b25      	cmp	r3, #37	; 0x25
 801124e:	d148      	bne.n	80112e2 <_vfiprintf_r+0x10e>
 8011250:	1b73      	subs	r3, r6, r5
 8011252:	9305      	str	r3, [sp, #20]
 8011254:	42ae      	cmp	r6, r5
 8011256:	d00b      	beq.n	8011270 <_vfiprintf_r+0x9c>
 8011258:	002a      	movs	r2, r5
 801125a:	0039      	movs	r1, r7
 801125c:	9803      	ldr	r0, [sp, #12]
 801125e:	f7ff ffa6 	bl	80111ae <__sfputs_r>
 8011262:	3001      	adds	r0, #1
 8011264:	d100      	bne.n	8011268 <_vfiprintf_r+0x94>
 8011266:	e0af      	b.n	80113c8 <_vfiprintf_r+0x1f4>
 8011268:	6963      	ldr	r3, [r4, #20]
 801126a:	9a05      	ldr	r2, [sp, #20]
 801126c:	189b      	adds	r3, r3, r2
 801126e:	6163      	str	r3, [r4, #20]
 8011270:	7833      	ldrb	r3, [r6, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d100      	bne.n	8011278 <_vfiprintf_r+0xa4>
 8011276:	e0a7      	b.n	80113c8 <_vfiprintf_r+0x1f4>
 8011278:	2201      	movs	r2, #1
 801127a:	2300      	movs	r3, #0
 801127c:	4252      	negs	r2, r2
 801127e:	6062      	str	r2, [r4, #4]
 8011280:	a904      	add	r1, sp, #16
 8011282:	3254      	adds	r2, #84	; 0x54
 8011284:	1852      	adds	r2, r2, r1
 8011286:	1c75      	adds	r5, r6, #1
 8011288:	6023      	str	r3, [r4, #0]
 801128a:	60e3      	str	r3, [r4, #12]
 801128c:	60a3      	str	r3, [r4, #8]
 801128e:	7013      	strb	r3, [r2, #0]
 8011290:	65a3      	str	r3, [r4, #88]	; 0x58
 8011292:	4b59      	ldr	r3, [pc, #356]	; (80113f8 <_vfiprintf_r+0x224>)
 8011294:	2205      	movs	r2, #5
 8011296:	0018      	movs	r0, r3
 8011298:	7829      	ldrb	r1, [r5, #0]
 801129a:	9305      	str	r3, [sp, #20]
 801129c:	f7fd fd79 	bl	800ed92 <memchr>
 80112a0:	1c6e      	adds	r6, r5, #1
 80112a2:	2800      	cmp	r0, #0
 80112a4:	d11f      	bne.n	80112e6 <_vfiprintf_r+0x112>
 80112a6:	6822      	ldr	r2, [r4, #0]
 80112a8:	06d3      	lsls	r3, r2, #27
 80112aa:	d504      	bpl.n	80112b6 <_vfiprintf_r+0xe2>
 80112ac:	2353      	movs	r3, #83	; 0x53
 80112ae:	a904      	add	r1, sp, #16
 80112b0:	185b      	adds	r3, r3, r1
 80112b2:	2120      	movs	r1, #32
 80112b4:	7019      	strb	r1, [r3, #0]
 80112b6:	0713      	lsls	r3, r2, #28
 80112b8:	d504      	bpl.n	80112c4 <_vfiprintf_r+0xf0>
 80112ba:	2353      	movs	r3, #83	; 0x53
 80112bc:	a904      	add	r1, sp, #16
 80112be:	185b      	adds	r3, r3, r1
 80112c0:	212b      	movs	r1, #43	; 0x2b
 80112c2:	7019      	strb	r1, [r3, #0]
 80112c4:	782b      	ldrb	r3, [r5, #0]
 80112c6:	2b2a      	cmp	r3, #42	; 0x2a
 80112c8:	d016      	beq.n	80112f8 <_vfiprintf_r+0x124>
 80112ca:	002e      	movs	r6, r5
 80112cc:	2100      	movs	r1, #0
 80112ce:	200a      	movs	r0, #10
 80112d0:	68e3      	ldr	r3, [r4, #12]
 80112d2:	7832      	ldrb	r2, [r6, #0]
 80112d4:	1c75      	adds	r5, r6, #1
 80112d6:	3a30      	subs	r2, #48	; 0x30
 80112d8:	2a09      	cmp	r2, #9
 80112da:	d94e      	bls.n	801137a <_vfiprintf_r+0x1a6>
 80112dc:	2900      	cmp	r1, #0
 80112de:	d111      	bne.n	8011304 <_vfiprintf_r+0x130>
 80112e0:	e017      	b.n	8011312 <_vfiprintf_r+0x13e>
 80112e2:	3601      	adds	r6, #1
 80112e4:	e7af      	b.n	8011246 <_vfiprintf_r+0x72>
 80112e6:	9b05      	ldr	r3, [sp, #20]
 80112e8:	6822      	ldr	r2, [r4, #0]
 80112ea:	1ac0      	subs	r0, r0, r3
 80112ec:	2301      	movs	r3, #1
 80112ee:	4083      	lsls	r3, r0
 80112f0:	4313      	orrs	r3, r2
 80112f2:	0035      	movs	r5, r6
 80112f4:	6023      	str	r3, [r4, #0]
 80112f6:	e7cc      	b.n	8011292 <_vfiprintf_r+0xbe>
 80112f8:	9b07      	ldr	r3, [sp, #28]
 80112fa:	1d19      	adds	r1, r3, #4
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	9107      	str	r1, [sp, #28]
 8011300:	2b00      	cmp	r3, #0
 8011302:	db01      	blt.n	8011308 <_vfiprintf_r+0x134>
 8011304:	930b      	str	r3, [sp, #44]	; 0x2c
 8011306:	e004      	b.n	8011312 <_vfiprintf_r+0x13e>
 8011308:	425b      	negs	r3, r3
 801130a:	60e3      	str	r3, [r4, #12]
 801130c:	2302      	movs	r3, #2
 801130e:	4313      	orrs	r3, r2
 8011310:	6023      	str	r3, [r4, #0]
 8011312:	7833      	ldrb	r3, [r6, #0]
 8011314:	2b2e      	cmp	r3, #46	; 0x2e
 8011316:	d10a      	bne.n	801132e <_vfiprintf_r+0x15a>
 8011318:	7873      	ldrb	r3, [r6, #1]
 801131a:	2b2a      	cmp	r3, #42	; 0x2a
 801131c:	d135      	bne.n	801138a <_vfiprintf_r+0x1b6>
 801131e:	9b07      	ldr	r3, [sp, #28]
 8011320:	3602      	adds	r6, #2
 8011322:	1d1a      	adds	r2, r3, #4
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	9207      	str	r2, [sp, #28]
 8011328:	2b00      	cmp	r3, #0
 801132a:	db2b      	blt.n	8011384 <_vfiprintf_r+0x1b0>
 801132c:	9309      	str	r3, [sp, #36]	; 0x24
 801132e:	4d33      	ldr	r5, [pc, #204]	; (80113fc <_vfiprintf_r+0x228>)
 8011330:	2203      	movs	r2, #3
 8011332:	0028      	movs	r0, r5
 8011334:	7831      	ldrb	r1, [r6, #0]
 8011336:	f7fd fd2c 	bl	800ed92 <memchr>
 801133a:	2800      	cmp	r0, #0
 801133c:	d006      	beq.n	801134c <_vfiprintf_r+0x178>
 801133e:	2340      	movs	r3, #64	; 0x40
 8011340:	1b40      	subs	r0, r0, r5
 8011342:	4083      	lsls	r3, r0
 8011344:	6822      	ldr	r2, [r4, #0]
 8011346:	3601      	adds	r6, #1
 8011348:	4313      	orrs	r3, r2
 801134a:	6023      	str	r3, [r4, #0]
 801134c:	7831      	ldrb	r1, [r6, #0]
 801134e:	2206      	movs	r2, #6
 8011350:	482b      	ldr	r0, [pc, #172]	; (8011400 <_vfiprintf_r+0x22c>)
 8011352:	1c75      	adds	r5, r6, #1
 8011354:	7621      	strb	r1, [r4, #24]
 8011356:	f7fd fd1c 	bl	800ed92 <memchr>
 801135a:	2800      	cmp	r0, #0
 801135c:	d043      	beq.n	80113e6 <_vfiprintf_r+0x212>
 801135e:	4b29      	ldr	r3, [pc, #164]	; (8011404 <_vfiprintf_r+0x230>)
 8011360:	2b00      	cmp	r3, #0
 8011362:	d125      	bne.n	80113b0 <_vfiprintf_r+0x1dc>
 8011364:	2207      	movs	r2, #7
 8011366:	9b07      	ldr	r3, [sp, #28]
 8011368:	3307      	adds	r3, #7
 801136a:	4393      	bics	r3, r2
 801136c:	3308      	adds	r3, #8
 801136e:	9307      	str	r3, [sp, #28]
 8011370:	6963      	ldr	r3, [r4, #20]
 8011372:	9a04      	ldr	r2, [sp, #16]
 8011374:	189b      	adds	r3, r3, r2
 8011376:	6163      	str	r3, [r4, #20]
 8011378:	e764      	b.n	8011244 <_vfiprintf_r+0x70>
 801137a:	4343      	muls	r3, r0
 801137c:	002e      	movs	r6, r5
 801137e:	2101      	movs	r1, #1
 8011380:	189b      	adds	r3, r3, r2
 8011382:	e7a6      	b.n	80112d2 <_vfiprintf_r+0xfe>
 8011384:	2301      	movs	r3, #1
 8011386:	425b      	negs	r3, r3
 8011388:	e7d0      	b.n	801132c <_vfiprintf_r+0x158>
 801138a:	2300      	movs	r3, #0
 801138c:	200a      	movs	r0, #10
 801138e:	001a      	movs	r2, r3
 8011390:	3601      	adds	r6, #1
 8011392:	6063      	str	r3, [r4, #4]
 8011394:	7831      	ldrb	r1, [r6, #0]
 8011396:	1c75      	adds	r5, r6, #1
 8011398:	3930      	subs	r1, #48	; 0x30
 801139a:	2909      	cmp	r1, #9
 801139c:	d903      	bls.n	80113a6 <_vfiprintf_r+0x1d2>
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d0c5      	beq.n	801132e <_vfiprintf_r+0x15a>
 80113a2:	9209      	str	r2, [sp, #36]	; 0x24
 80113a4:	e7c3      	b.n	801132e <_vfiprintf_r+0x15a>
 80113a6:	4342      	muls	r2, r0
 80113a8:	002e      	movs	r6, r5
 80113aa:	2301      	movs	r3, #1
 80113ac:	1852      	adds	r2, r2, r1
 80113ae:	e7f1      	b.n	8011394 <_vfiprintf_r+0x1c0>
 80113b0:	aa07      	add	r2, sp, #28
 80113b2:	9200      	str	r2, [sp, #0]
 80113b4:	0021      	movs	r1, r4
 80113b6:	003a      	movs	r2, r7
 80113b8:	4b13      	ldr	r3, [pc, #76]	; (8011408 <_vfiprintf_r+0x234>)
 80113ba:	9803      	ldr	r0, [sp, #12]
 80113bc:	f7fc fbe0 	bl	800db80 <_printf_float>
 80113c0:	9004      	str	r0, [sp, #16]
 80113c2:	9b04      	ldr	r3, [sp, #16]
 80113c4:	3301      	adds	r3, #1
 80113c6:	d1d3      	bne.n	8011370 <_vfiprintf_r+0x19c>
 80113c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80113ca:	07db      	lsls	r3, r3, #31
 80113cc:	d405      	bmi.n	80113da <_vfiprintf_r+0x206>
 80113ce:	89bb      	ldrh	r3, [r7, #12]
 80113d0:	059b      	lsls	r3, r3, #22
 80113d2:	d402      	bmi.n	80113da <_vfiprintf_r+0x206>
 80113d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80113d6:	f7fd fcd3 	bl	800ed80 <__retarget_lock_release_recursive>
 80113da:	89bb      	ldrh	r3, [r7, #12]
 80113dc:	065b      	lsls	r3, r3, #25
 80113de:	d500      	bpl.n	80113e2 <_vfiprintf_r+0x20e>
 80113e0:	e71d      	b.n	801121e <_vfiprintf_r+0x4a>
 80113e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80113e4:	e71d      	b.n	8011222 <_vfiprintf_r+0x4e>
 80113e6:	aa07      	add	r2, sp, #28
 80113e8:	9200      	str	r2, [sp, #0]
 80113ea:	0021      	movs	r1, r4
 80113ec:	003a      	movs	r2, r7
 80113ee:	4b06      	ldr	r3, [pc, #24]	; (8011408 <_vfiprintf_r+0x234>)
 80113f0:	9803      	ldr	r0, [sp, #12]
 80113f2:	f7fc fe8b 	bl	800e10c <_printf_i>
 80113f6:	e7e3      	b.n	80113c0 <_vfiprintf_r+0x1ec>
 80113f8:	08013e34 	.word	0x08013e34
 80113fc:	08013e3a 	.word	0x08013e3a
 8011400:	08013e3e 	.word	0x08013e3e
 8011404:	0800db81 	.word	0x0800db81
 8011408:	080111af 	.word	0x080111af

0801140c <__swbuf_r>:
 801140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140e:	0006      	movs	r6, r0
 8011410:	000d      	movs	r5, r1
 8011412:	0014      	movs	r4, r2
 8011414:	2800      	cmp	r0, #0
 8011416:	d004      	beq.n	8011422 <__swbuf_r+0x16>
 8011418:	6a03      	ldr	r3, [r0, #32]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d101      	bne.n	8011422 <__swbuf_r+0x16>
 801141e:	f7fd fa1d 	bl	800e85c <__sinit>
 8011422:	69a3      	ldr	r3, [r4, #24]
 8011424:	60a3      	str	r3, [r4, #8]
 8011426:	89a3      	ldrh	r3, [r4, #12]
 8011428:	071b      	lsls	r3, r3, #28
 801142a:	d528      	bpl.n	801147e <__swbuf_r+0x72>
 801142c:	6923      	ldr	r3, [r4, #16]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d025      	beq.n	801147e <__swbuf_r+0x72>
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	6820      	ldr	r0, [r4, #0]
 8011436:	b2ef      	uxtb	r7, r5
 8011438:	1ac0      	subs	r0, r0, r3
 801143a:	6963      	ldr	r3, [r4, #20]
 801143c:	b2ed      	uxtb	r5, r5
 801143e:	4283      	cmp	r3, r0
 8011440:	dc05      	bgt.n	801144e <__swbuf_r+0x42>
 8011442:	0021      	movs	r1, r4
 8011444:	0030      	movs	r0, r6
 8011446:	f7ff fdeb 	bl	8011020 <_fflush_r>
 801144a:	2800      	cmp	r0, #0
 801144c:	d11d      	bne.n	801148a <__swbuf_r+0x7e>
 801144e:	68a3      	ldr	r3, [r4, #8]
 8011450:	3001      	adds	r0, #1
 8011452:	3b01      	subs	r3, #1
 8011454:	60a3      	str	r3, [r4, #8]
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	1c5a      	adds	r2, r3, #1
 801145a:	6022      	str	r2, [r4, #0]
 801145c:	701f      	strb	r7, [r3, #0]
 801145e:	6963      	ldr	r3, [r4, #20]
 8011460:	4283      	cmp	r3, r0
 8011462:	d004      	beq.n	801146e <__swbuf_r+0x62>
 8011464:	89a3      	ldrh	r3, [r4, #12]
 8011466:	07db      	lsls	r3, r3, #31
 8011468:	d507      	bpl.n	801147a <__swbuf_r+0x6e>
 801146a:	2d0a      	cmp	r5, #10
 801146c:	d105      	bne.n	801147a <__swbuf_r+0x6e>
 801146e:	0021      	movs	r1, r4
 8011470:	0030      	movs	r0, r6
 8011472:	f7ff fdd5 	bl	8011020 <_fflush_r>
 8011476:	2800      	cmp	r0, #0
 8011478:	d107      	bne.n	801148a <__swbuf_r+0x7e>
 801147a:	0028      	movs	r0, r5
 801147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801147e:	0021      	movs	r1, r4
 8011480:	0030      	movs	r0, r6
 8011482:	f000 f805 	bl	8011490 <__swsetup_r>
 8011486:	2800      	cmp	r0, #0
 8011488:	d0d3      	beq.n	8011432 <__swbuf_r+0x26>
 801148a:	2501      	movs	r5, #1
 801148c:	426d      	negs	r5, r5
 801148e:	e7f4      	b.n	801147a <__swbuf_r+0x6e>

08011490 <__swsetup_r>:
 8011490:	4b30      	ldr	r3, [pc, #192]	; (8011554 <__swsetup_r+0xc4>)
 8011492:	b570      	push	{r4, r5, r6, lr}
 8011494:	0005      	movs	r5, r0
 8011496:	6818      	ldr	r0, [r3, #0]
 8011498:	000c      	movs	r4, r1
 801149a:	2800      	cmp	r0, #0
 801149c:	d004      	beq.n	80114a8 <__swsetup_r+0x18>
 801149e:	6a03      	ldr	r3, [r0, #32]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d101      	bne.n	80114a8 <__swsetup_r+0x18>
 80114a4:	f7fd f9da 	bl	800e85c <__sinit>
 80114a8:	230c      	movs	r3, #12
 80114aa:	5ee2      	ldrsh	r2, [r4, r3]
 80114ac:	b293      	uxth	r3, r2
 80114ae:	0711      	lsls	r1, r2, #28
 80114b0:	d423      	bmi.n	80114fa <__swsetup_r+0x6a>
 80114b2:	06d9      	lsls	r1, r3, #27
 80114b4:	d407      	bmi.n	80114c6 <__swsetup_r+0x36>
 80114b6:	2309      	movs	r3, #9
 80114b8:	2001      	movs	r0, #1
 80114ba:	602b      	str	r3, [r5, #0]
 80114bc:	3337      	adds	r3, #55	; 0x37
 80114be:	4313      	orrs	r3, r2
 80114c0:	81a3      	strh	r3, [r4, #12]
 80114c2:	4240      	negs	r0, r0
 80114c4:	bd70      	pop	{r4, r5, r6, pc}
 80114c6:	075b      	lsls	r3, r3, #29
 80114c8:	d513      	bpl.n	80114f2 <__swsetup_r+0x62>
 80114ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114cc:	2900      	cmp	r1, #0
 80114ce:	d008      	beq.n	80114e2 <__swsetup_r+0x52>
 80114d0:	0023      	movs	r3, r4
 80114d2:	3344      	adds	r3, #68	; 0x44
 80114d4:	4299      	cmp	r1, r3
 80114d6:	d002      	beq.n	80114de <__swsetup_r+0x4e>
 80114d8:	0028      	movs	r0, r5
 80114da:	f7fe fb35 	bl	800fb48 <_free_r>
 80114de:	2300      	movs	r3, #0
 80114e0:	6363      	str	r3, [r4, #52]	; 0x34
 80114e2:	2224      	movs	r2, #36	; 0x24
 80114e4:	89a3      	ldrh	r3, [r4, #12]
 80114e6:	4393      	bics	r3, r2
 80114e8:	81a3      	strh	r3, [r4, #12]
 80114ea:	2300      	movs	r3, #0
 80114ec:	6063      	str	r3, [r4, #4]
 80114ee:	6923      	ldr	r3, [r4, #16]
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	2308      	movs	r3, #8
 80114f4:	89a2      	ldrh	r2, [r4, #12]
 80114f6:	4313      	orrs	r3, r2
 80114f8:	81a3      	strh	r3, [r4, #12]
 80114fa:	6923      	ldr	r3, [r4, #16]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d10b      	bne.n	8011518 <__swsetup_r+0x88>
 8011500:	21a0      	movs	r1, #160	; 0xa0
 8011502:	2280      	movs	r2, #128	; 0x80
 8011504:	89a3      	ldrh	r3, [r4, #12]
 8011506:	0089      	lsls	r1, r1, #2
 8011508:	0092      	lsls	r2, r2, #2
 801150a:	400b      	ands	r3, r1
 801150c:	4293      	cmp	r3, r2
 801150e:	d003      	beq.n	8011518 <__swsetup_r+0x88>
 8011510:	0021      	movs	r1, r4
 8011512:	0028      	movs	r0, r5
 8011514:	f000 f89a 	bl	801164c <__smakebuf_r>
 8011518:	220c      	movs	r2, #12
 801151a:	5ea3      	ldrsh	r3, [r4, r2]
 801151c:	2001      	movs	r0, #1
 801151e:	001a      	movs	r2, r3
 8011520:	b299      	uxth	r1, r3
 8011522:	4002      	ands	r2, r0
 8011524:	4203      	tst	r3, r0
 8011526:	d00f      	beq.n	8011548 <__swsetup_r+0xb8>
 8011528:	2200      	movs	r2, #0
 801152a:	60a2      	str	r2, [r4, #8]
 801152c:	6962      	ldr	r2, [r4, #20]
 801152e:	4252      	negs	r2, r2
 8011530:	61a2      	str	r2, [r4, #24]
 8011532:	2000      	movs	r0, #0
 8011534:	6922      	ldr	r2, [r4, #16]
 8011536:	4282      	cmp	r2, r0
 8011538:	d1c4      	bne.n	80114c4 <__swsetup_r+0x34>
 801153a:	0609      	lsls	r1, r1, #24
 801153c:	d5c2      	bpl.n	80114c4 <__swsetup_r+0x34>
 801153e:	2240      	movs	r2, #64	; 0x40
 8011540:	4313      	orrs	r3, r2
 8011542:	81a3      	strh	r3, [r4, #12]
 8011544:	3801      	subs	r0, #1
 8011546:	e7bd      	b.n	80114c4 <__swsetup_r+0x34>
 8011548:	0788      	lsls	r0, r1, #30
 801154a:	d400      	bmi.n	801154e <__swsetup_r+0xbe>
 801154c:	6962      	ldr	r2, [r4, #20]
 801154e:	60a2      	str	r2, [r4, #8]
 8011550:	e7ef      	b.n	8011532 <__swsetup_r+0xa2>
 8011552:	46c0      	nop			; (mov r8, r8)
 8011554:	200002f0 	.word	0x200002f0

08011558 <_raise_r>:
 8011558:	b570      	push	{r4, r5, r6, lr}
 801155a:	0004      	movs	r4, r0
 801155c:	000d      	movs	r5, r1
 801155e:	291f      	cmp	r1, #31
 8011560:	d904      	bls.n	801156c <_raise_r+0x14>
 8011562:	2316      	movs	r3, #22
 8011564:	6003      	str	r3, [r0, #0]
 8011566:	2001      	movs	r0, #1
 8011568:	4240      	negs	r0, r0
 801156a:	bd70      	pop	{r4, r5, r6, pc}
 801156c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801156e:	2b00      	cmp	r3, #0
 8011570:	d004      	beq.n	801157c <_raise_r+0x24>
 8011572:	008a      	lsls	r2, r1, #2
 8011574:	189b      	adds	r3, r3, r2
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	2a00      	cmp	r2, #0
 801157a:	d108      	bne.n	801158e <_raise_r+0x36>
 801157c:	0020      	movs	r0, r4
 801157e:	f000 f831 	bl	80115e4 <_getpid_r>
 8011582:	002a      	movs	r2, r5
 8011584:	0001      	movs	r1, r0
 8011586:	0020      	movs	r0, r4
 8011588:	f000 f81a 	bl	80115c0 <_kill_r>
 801158c:	e7ed      	b.n	801156a <_raise_r+0x12>
 801158e:	2000      	movs	r0, #0
 8011590:	2a01      	cmp	r2, #1
 8011592:	d0ea      	beq.n	801156a <_raise_r+0x12>
 8011594:	1c51      	adds	r1, r2, #1
 8011596:	d103      	bne.n	80115a0 <_raise_r+0x48>
 8011598:	2316      	movs	r3, #22
 801159a:	3001      	adds	r0, #1
 801159c:	6023      	str	r3, [r4, #0]
 801159e:	e7e4      	b.n	801156a <_raise_r+0x12>
 80115a0:	2400      	movs	r4, #0
 80115a2:	0028      	movs	r0, r5
 80115a4:	601c      	str	r4, [r3, #0]
 80115a6:	4790      	blx	r2
 80115a8:	0020      	movs	r0, r4
 80115aa:	e7de      	b.n	801156a <_raise_r+0x12>

080115ac <raise>:
 80115ac:	b510      	push	{r4, lr}
 80115ae:	4b03      	ldr	r3, [pc, #12]	; (80115bc <raise+0x10>)
 80115b0:	0001      	movs	r1, r0
 80115b2:	6818      	ldr	r0, [r3, #0]
 80115b4:	f7ff ffd0 	bl	8011558 <_raise_r>
 80115b8:	bd10      	pop	{r4, pc}
 80115ba:	46c0      	nop			; (mov r8, r8)
 80115bc:	200002f0 	.word	0x200002f0

080115c0 <_kill_r>:
 80115c0:	2300      	movs	r3, #0
 80115c2:	b570      	push	{r4, r5, r6, lr}
 80115c4:	4d06      	ldr	r5, [pc, #24]	; (80115e0 <_kill_r+0x20>)
 80115c6:	0004      	movs	r4, r0
 80115c8:	0008      	movs	r0, r1
 80115ca:	0011      	movs	r1, r2
 80115cc:	602b      	str	r3, [r5, #0]
 80115ce:	f7f6 f9a5 	bl	800791c <_kill>
 80115d2:	1c43      	adds	r3, r0, #1
 80115d4:	d103      	bne.n	80115de <_kill_r+0x1e>
 80115d6:	682b      	ldr	r3, [r5, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d000      	beq.n	80115de <_kill_r+0x1e>
 80115dc:	6023      	str	r3, [r4, #0]
 80115de:	bd70      	pop	{r4, r5, r6, pc}
 80115e0:	20006810 	.word	0x20006810

080115e4 <_getpid_r>:
 80115e4:	b510      	push	{r4, lr}
 80115e6:	f7f6 f997 	bl	8007918 <_getpid>
 80115ea:	bd10      	pop	{r4, pc}

080115ec <_malloc_usable_size_r>:
 80115ec:	1f0b      	subs	r3, r1, #4
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	1f18      	subs	r0, r3, #4
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	da01      	bge.n	80115fa <_malloc_usable_size_r+0xe>
 80115f6:	580b      	ldr	r3, [r1, r0]
 80115f8:	18c0      	adds	r0, r0, r3
 80115fa:	4770      	bx	lr

080115fc <__swhatbuf_r>:
 80115fc:	b570      	push	{r4, r5, r6, lr}
 80115fe:	000e      	movs	r6, r1
 8011600:	001d      	movs	r5, r3
 8011602:	230e      	movs	r3, #14
 8011604:	5ec9      	ldrsh	r1, [r1, r3]
 8011606:	0014      	movs	r4, r2
 8011608:	b096      	sub	sp, #88	; 0x58
 801160a:	2900      	cmp	r1, #0
 801160c:	da0c      	bge.n	8011628 <__swhatbuf_r+0x2c>
 801160e:	89b2      	ldrh	r2, [r6, #12]
 8011610:	2380      	movs	r3, #128	; 0x80
 8011612:	0011      	movs	r1, r2
 8011614:	4019      	ands	r1, r3
 8011616:	421a      	tst	r2, r3
 8011618:	d013      	beq.n	8011642 <__swhatbuf_r+0x46>
 801161a:	2100      	movs	r1, #0
 801161c:	3b40      	subs	r3, #64	; 0x40
 801161e:	2000      	movs	r0, #0
 8011620:	6029      	str	r1, [r5, #0]
 8011622:	6023      	str	r3, [r4, #0]
 8011624:	b016      	add	sp, #88	; 0x58
 8011626:	bd70      	pop	{r4, r5, r6, pc}
 8011628:	466a      	mov	r2, sp
 801162a:	f000 f84d 	bl	80116c8 <_fstat_r>
 801162e:	2800      	cmp	r0, #0
 8011630:	dbed      	blt.n	801160e <__swhatbuf_r+0x12>
 8011632:	23f0      	movs	r3, #240	; 0xf0
 8011634:	9901      	ldr	r1, [sp, #4]
 8011636:	021b      	lsls	r3, r3, #8
 8011638:	4019      	ands	r1, r3
 801163a:	4b03      	ldr	r3, [pc, #12]	; (8011648 <__swhatbuf_r+0x4c>)
 801163c:	18c9      	adds	r1, r1, r3
 801163e:	424b      	negs	r3, r1
 8011640:	4159      	adcs	r1, r3
 8011642:	2380      	movs	r3, #128	; 0x80
 8011644:	00db      	lsls	r3, r3, #3
 8011646:	e7ea      	b.n	801161e <__swhatbuf_r+0x22>
 8011648:	ffffe000 	.word	0xffffe000

0801164c <__smakebuf_r>:
 801164c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801164e:	2602      	movs	r6, #2
 8011650:	898b      	ldrh	r3, [r1, #12]
 8011652:	0005      	movs	r5, r0
 8011654:	000c      	movs	r4, r1
 8011656:	4233      	tst	r3, r6
 8011658:	d006      	beq.n	8011668 <__smakebuf_r+0x1c>
 801165a:	0023      	movs	r3, r4
 801165c:	3347      	adds	r3, #71	; 0x47
 801165e:	6023      	str	r3, [r4, #0]
 8011660:	6123      	str	r3, [r4, #16]
 8011662:	2301      	movs	r3, #1
 8011664:	6163      	str	r3, [r4, #20]
 8011666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011668:	466a      	mov	r2, sp
 801166a:	ab01      	add	r3, sp, #4
 801166c:	f7ff ffc6 	bl	80115fc <__swhatbuf_r>
 8011670:	9900      	ldr	r1, [sp, #0]
 8011672:	0007      	movs	r7, r0
 8011674:	0028      	movs	r0, r5
 8011676:	f7fb fa7b 	bl	800cb70 <_malloc_r>
 801167a:	2800      	cmp	r0, #0
 801167c:	d108      	bne.n	8011690 <__smakebuf_r+0x44>
 801167e:	220c      	movs	r2, #12
 8011680:	5ea3      	ldrsh	r3, [r4, r2]
 8011682:	059a      	lsls	r2, r3, #22
 8011684:	d4ef      	bmi.n	8011666 <__smakebuf_r+0x1a>
 8011686:	2203      	movs	r2, #3
 8011688:	4393      	bics	r3, r2
 801168a:	431e      	orrs	r6, r3
 801168c:	81a6      	strh	r6, [r4, #12]
 801168e:	e7e4      	b.n	801165a <__smakebuf_r+0xe>
 8011690:	2380      	movs	r3, #128	; 0x80
 8011692:	89a2      	ldrh	r2, [r4, #12]
 8011694:	6020      	str	r0, [r4, #0]
 8011696:	4313      	orrs	r3, r2
 8011698:	81a3      	strh	r3, [r4, #12]
 801169a:	9b00      	ldr	r3, [sp, #0]
 801169c:	6120      	str	r0, [r4, #16]
 801169e:	6163      	str	r3, [r4, #20]
 80116a0:	9b01      	ldr	r3, [sp, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00c      	beq.n	80116c0 <__smakebuf_r+0x74>
 80116a6:	0028      	movs	r0, r5
 80116a8:	230e      	movs	r3, #14
 80116aa:	5ee1      	ldrsh	r1, [r4, r3]
 80116ac:	f000 f81e 	bl	80116ec <_isatty_r>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	d005      	beq.n	80116c0 <__smakebuf_r+0x74>
 80116b4:	2303      	movs	r3, #3
 80116b6:	89a2      	ldrh	r2, [r4, #12]
 80116b8:	439a      	bics	r2, r3
 80116ba:	3b02      	subs	r3, #2
 80116bc:	4313      	orrs	r3, r2
 80116be:	81a3      	strh	r3, [r4, #12]
 80116c0:	89a3      	ldrh	r3, [r4, #12]
 80116c2:	433b      	orrs	r3, r7
 80116c4:	81a3      	strh	r3, [r4, #12]
 80116c6:	e7ce      	b.n	8011666 <__smakebuf_r+0x1a>

080116c8 <_fstat_r>:
 80116c8:	2300      	movs	r3, #0
 80116ca:	b570      	push	{r4, r5, r6, lr}
 80116cc:	4d06      	ldr	r5, [pc, #24]	; (80116e8 <_fstat_r+0x20>)
 80116ce:	0004      	movs	r4, r0
 80116d0:	0008      	movs	r0, r1
 80116d2:	0011      	movs	r1, r2
 80116d4:	602b      	str	r3, [r5, #0]
 80116d6:	f7f6 f94f 	bl	8007978 <_fstat>
 80116da:	1c43      	adds	r3, r0, #1
 80116dc:	d103      	bne.n	80116e6 <_fstat_r+0x1e>
 80116de:	682b      	ldr	r3, [r5, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d000      	beq.n	80116e6 <_fstat_r+0x1e>
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	bd70      	pop	{r4, r5, r6, pc}
 80116e8:	20006810 	.word	0x20006810

080116ec <_isatty_r>:
 80116ec:	2300      	movs	r3, #0
 80116ee:	b570      	push	{r4, r5, r6, lr}
 80116f0:	4d06      	ldr	r5, [pc, #24]	; (801170c <_isatty_r+0x20>)
 80116f2:	0004      	movs	r4, r0
 80116f4:	0008      	movs	r0, r1
 80116f6:	602b      	str	r3, [r5, #0]
 80116f8:	f7f6 f944 	bl	8007984 <_isatty>
 80116fc:	1c43      	adds	r3, r0, #1
 80116fe:	d103      	bne.n	8011708 <_isatty_r+0x1c>
 8011700:	682b      	ldr	r3, [r5, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d000      	beq.n	8011708 <_isatty_r+0x1c>
 8011706:	6023      	str	r3, [r4, #0]
 8011708:	bd70      	pop	{r4, r5, r6, pc}
 801170a:	46c0      	nop			; (mov r8, r8)
 801170c:	20006810 	.word	0x20006810

08011710 <pow>:
 8011710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011712:	0014      	movs	r4, r2
 8011714:	001d      	movs	r5, r3
 8011716:	9000      	str	r0, [sp, #0]
 8011718:	9101      	str	r1, [sp, #4]
 801171a:	f000 f86f 	bl	80117fc <__ieee754_pow>
 801171e:	0022      	movs	r2, r4
 8011720:	0006      	movs	r6, r0
 8011722:	000f      	movs	r7, r1
 8011724:	002b      	movs	r3, r5
 8011726:	0020      	movs	r0, r4
 8011728:	0029      	movs	r1, r5
 801172a:	f7f1 fc17 	bl	8002f5c <__aeabi_dcmpun>
 801172e:	2800      	cmp	r0, #0
 8011730:	d13f      	bne.n	80117b2 <pow+0xa2>
 8011732:	9800      	ldr	r0, [sp, #0]
 8011734:	9901      	ldr	r1, [sp, #4]
 8011736:	2200      	movs	r2, #0
 8011738:	2300      	movs	r3, #0
 801173a:	f7ee fe87 	bl	800044c <__aeabi_dcmpeq>
 801173e:	2800      	cmp	r0, #0
 8011740:	d019      	beq.n	8011776 <pow+0x66>
 8011742:	2200      	movs	r2, #0
 8011744:	2300      	movs	r3, #0
 8011746:	0020      	movs	r0, r4
 8011748:	0029      	movs	r1, r5
 801174a:	f7ee fe7f 	bl	800044c <__aeabi_dcmpeq>
 801174e:	2800      	cmp	r0, #0
 8011750:	d146      	bne.n	80117e0 <pow+0xd0>
 8011752:	0020      	movs	r0, r4
 8011754:	0029      	movs	r1, r5
 8011756:	f000 f849 	bl	80117ec <finite>
 801175a:	2800      	cmp	r0, #0
 801175c:	d029      	beq.n	80117b2 <pow+0xa2>
 801175e:	2200      	movs	r2, #0
 8011760:	2300      	movs	r3, #0
 8011762:	0020      	movs	r0, r4
 8011764:	0029      	movs	r1, r5
 8011766:	f7ee fe77 	bl	8000458 <__aeabi_dcmplt>
 801176a:	2800      	cmp	r0, #0
 801176c:	d021      	beq.n	80117b2 <pow+0xa2>
 801176e:	f7fd fadb 	bl	800ed28 <__errno>
 8011772:	2322      	movs	r3, #34	; 0x22
 8011774:	e01c      	b.n	80117b0 <pow+0xa0>
 8011776:	0030      	movs	r0, r6
 8011778:	0039      	movs	r1, r7
 801177a:	f000 f837 	bl	80117ec <finite>
 801177e:	2800      	cmp	r0, #0
 8011780:	d11b      	bne.n	80117ba <pow+0xaa>
 8011782:	9800      	ldr	r0, [sp, #0]
 8011784:	9901      	ldr	r1, [sp, #4]
 8011786:	f000 f831 	bl	80117ec <finite>
 801178a:	2800      	cmp	r0, #0
 801178c:	d015      	beq.n	80117ba <pow+0xaa>
 801178e:	0020      	movs	r0, r4
 8011790:	0029      	movs	r1, r5
 8011792:	f000 f82b 	bl	80117ec <finite>
 8011796:	2800      	cmp	r0, #0
 8011798:	d00f      	beq.n	80117ba <pow+0xaa>
 801179a:	0032      	movs	r2, r6
 801179c:	003b      	movs	r3, r7
 801179e:	0030      	movs	r0, r6
 80117a0:	0039      	movs	r1, r7
 80117a2:	f7f1 fbdb 	bl	8002f5c <__aeabi_dcmpun>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	d0e1      	beq.n	801176e <pow+0x5e>
 80117aa:	f7fd fabd 	bl	800ed28 <__errno>
 80117ae:	2321      	movs	r3, #33	; 0x21
 80117b0:	6003      	str	r3, [r0, #0]
 80117b2:	0030      	movs	r0, r6
 80117b4:	0039      	movs	r1, r7
 80117b6:	b003      	add	sp, #12
 80117b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ba:	2200      	movs	r2, #0
 80117bc:	2300      	movs	r3, #0
 80117be:	0030      	movs	r0, r6
 80117c0:	0039      	movs	r1, r7
 80117c2:	f7ee fe43 	bl	800044c <__aeabi_dcmpeq>
 80117c6:	2800      	cmp	r0, #0
 80117c8:	d0f3      	beq.n	80117b2 <pow+0xa2>
 80117ca:	9800      	ldr	r0, [sp, #0]
 80117cc:	9901      	ldr	r1, [sp, #4]
 80117ce:	f000 f80d 	bl	80117ec <finite>
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d0ed      	beq.n	80117b2 <pow+0xa2>
 80117d6:	0020      	movs	r0, r4
 80117d8:	0029      	movs	r1, r5
 80117da:	f000 f807 	bl	80117ec <finite>
 80117de:	e7c4      	b.n	801176a <pow+0x5a>
 80117e0:	2600      	movs	r6, #0
 80117e2:	4f01      	ldr	r7, [pc, #4]	; (80117e8 <pow+0xd8>)
 80117e4:	e7e5      	b.n	80117b2 <pow+0xa2>
 80117e6:	46c0      	nop			; (mov r8, r8)
 80117e8:	3ff00000 	.word	0x3ff00000

080117ec <finite>:
 80117ec:	4b02      	ldr	r3, [pc, #8]	; (80117f8 <finite+0xc>)
 80117ee:	0048      	lsls	r0, r1, #1
 80117f0:	0840      	lsrs	r0, r0, #1
 80117f2:	18c0      	adds	r0, r0, r3
 80117f4:	0fc0      	lsrs	r0, r0, #31
 80117f6:	4770      	bx	lr
 80117f8:	80100000 	.word	0x80100000

080117fc <__ieee754_pow>:
 80117fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117fe:	b095      	sub	sp, #84	; 0x54
 8011800:	9202      	str	r2, [sp, #8]
 8011802:	9303      	str	r3, [sp, #12]
 8011804:	9b03      	ldr	r3, [sp, #12]
 8011806:	9a03      	ldr	r2, [sp, #12]
 8011808:	9304      	str	r3, [sp, #16]
 801180a:	9b02      	ldr	r3, [sp, #8]
 801180c:	0056      	lsls	r6, r2, #1
 801180e:	001a      	movs	r2, r3
 8011810:	0876      	lsrs	r6, r6, #1
 8011812:	0007      	movs	r7, r0
 8011814:	000d      	movs	r5, r1
 8011816:	4332      	orrs	r2, r6
 8011818:	d119      	bne.n	801184e <__ieee754_pow+0x52>
 801181a:	2180      	movs	r1, #128	; 0x80
 801181c:	0309      	lsls	r1, r1, #12
 801181e:	4069      	eors	r1, r5
 8011820:	0002      	movs	r2, r0
 8011822:	000b      	movs	r3, r1
 8011824:	1892      	adds	r2, r2, r2
 8011826:	415b      	adcs	r3, r3
 8011828:	4989      	ldr	r1, [pc, #548]	; (8011a50 <__ieee754_pow+0x254>)
 801182a:	428b      	cmp	r3, r1
 801182c:	d806      	bhi.n	801183c <__ieee754_pow+0x40>
 801182e:	d001      	beq.n	8011834 <__ieee754_pow+0x38>
 8011830:	f000 fcb6 	bl	80121a0 <__ieee754_pow+0x9a4>
 8011834:	2a00      	cmp	r2, #0
 8011836:	d101      	bne.n	801183c <__ieee754_pow+0x40>
 8011838:	f000 fcb2 	bl	80121a0 <__ieee754_pow+0x9a4>
 801183c:	9a02      	ldr	r2, [sp, #8]
 801183e:	9b03      	ldr	r3, [sp, #12]
 8011840:	0038      	movs	r0, r7
 8011842:	0029      	movs	r1, r5
 8011844:	f7ef fdec 	bl	8001420 <__aeabi_dadd>
 8011848:	9000      	str	r0, [sp, #0]
 801184a:	9101      	str	r1, [sp, #4]
 801184c:	e0ad      	b.n	80119aa <__ieee754_pow+0x1ae>
 801184e:	4a81      	ldr	r2, [pc, #516]	; (8011a54 <__ieee754_pow+0x258>)
 8011850:	004c      	lsls	r4, r1, #1
 8011852:	9108      	str	r1, [sp, #32]
 8011854:	9000      	str	r0, [sp, #0]
 8011856:	0864      	lsrs	r4, r4, #1
 8011858:	4294      	cmp	r4, r2
 801185a:	dc08      	bgt.n	801186e <__ieee754_pow+0x72>
 801185c:	d101      	bne.n	8011862 <__ieee754_pow+0x66>
 801185e:	2800      	cmp	r0, #0
 8011860:	d1ec      	bne.n	801183c <__ieee754_pow+0x40>
 8011862:	4a7c      	ldr	r2, [pc, #496]	; (8011a54 <__ieee754_pow+0x258>)
 8011864:	4296      	cmp	r6, r2
 8011866:	dc02      	bgt.n	801186e <__ieee754_pow+0x72>
 8011868:	d10c      	bne.n	8011884 <__ieee754_pow+0x88>
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00a      	beq.n	8011884 <__ieee754_pow+0x88>
 801186e:	4b7a      	ldr	r3, [pc, #488]	; (8011a58 <__ieee754_pow+0x25c>)
 8011870:	18eb      	adds	r3, r5, r3
 8011872:	433b      	orrs	r3, r7
 8011874:	d1e2      	bne.n	801183c <__ieee754_pow+0x40>
 8011876:	2180      	movs	r1, #128	; 0x80
 8011878:	9803      	ldr	r0, [sp, #12]
 801187a:	0309      	lsls	r1, r1, #12
 801187c:	4048      	eors	r0, r1
 801187e:	0003      	movs	r3, r0
 8011880:	9a02      	ldr	r2, [sp, #8]
 8011882:	e7cf      	b.n	8011824 <__ieee754_pow+0x28>
 8011884:	2200      	movs	r2, #0
 8011886:	9206      	str	r2, [sp, #24]
 8011888:	2d00      	cmp	r5, #0
 801188a:	da69      	bge.n	8011960 <__ieee754_pow+0x164>
 801188c:	4a73      	ldr	r2, [pc, #460]	; (8011a5c <__ieee754_pow+0x260>)
 801188e:	4296      	cmp	r6, r2
 8011890:	dc64      	bgt.n	801195c <__ieee754_pow+0x160>
 8011892:	4a73      	ldr	r2, [pc, #460]	; (8011a60 <__ieee754_pow+0x264>)
 8011894:	4296      	cmp	r6, r2
 8011896:	dd11      	ble.n	80118bc <__ieee754_pow+0xc0>
 8011898:	4972      	ldr	r1, [pc, #456]	; (8011a64 <__ieee754_pow+0x268>)
 801189a:	1532      	asrs	r2, r6, #20
 801189c:	1852      	adds	r2, r2, r1
 801189e:	2a14      	cmp	r2, #20
 80118a0:	dd3c      	ble.n	801191c <__ieee754_pow+0x120>
 80118a2:	2134      	movs	r1, #52	; 0x34
 80118a4:	1a89      	subs	r1, r1, r2
 80118a6:	9a02      	ldr	r2, [sp, #8]
 80118a8:	40ca      	lsrs	r2, r1
 80118aa:	0010      	movs	r0, r2
 80118ac:	4088      	lsls	r0, r1
 80118ae:	4298      	cmp	r0, r3
 80118b0:	d104      	bne.n	80118bc <__ieee754_pow+0xc0>
 80118b2:	2101      	movs	r1, #1
 80118b4:	400a      	ands	r2, r1
 80118b6:	1849      	adds	r1, r1, r1
 80118b8:	1a8a      	subs	r2, r1, r2
 80118ba:	9206      	str	r2, [sp, #24]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d03c      	beq.n	801193a <__ieee754_pow+0x13e>
 80118c0:	0038      	movs	r0, r7
 80118c2:	0029      	movs	r1, r5
 80118c4:	f000 fca4 	bl	8012210 <fabs>
 80118c8:	9000      	str	r0, [sp, #0]
 80118ca:	9101      	str	r1, [sp, #4]
 80118cc:	2f00      	cmp	r7, #0
 80118ce:	d000      	beq.n	80118d2 <__ieee754_pow+0xd6>
 80118d0:	e094      	b.n	80119fc <__ieee754_pow+0x200>
 80118d2:	2c00      	cmp	r4, #0
 80118d4:	d005      	beq.n	80118e2 <__ieee754_pow+0xe6>
 80118d6:	4a64      	ldr	r2, [pc, #400]	; (8011a68 <__ieee754_pow+0x26c>)
 80118d8:	00ab      	lsls	r3, r5, #2
 80118da:	089b      	lsrs	r3, r3, #2
 80118dc:	4293      	cmp	r3, r2
 80118de:	d000      	beq.n	80118e2 <__ieee754_pow+0xe6>
 80118e0:	e08c      	b.n	80119fc <__ieee754_pow+0x200>
 80118e2:	9b04      	ldr	r3, [sp, #16]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	da07      	bge.n	80118f8 <__ieee754_pow+0xfc>
 80118e8:	9a00      	ldr	r2, [sp, #0]
 80118ea:	9b01      	ldr	r3, [sp, #4]
 80118ec:	2000      	movs	r0, #0
 80118ee:	495e      	ldr	r1, [pc, #376]	; (8011a68 <__ieee754_pow+0x26c>)
 80118f0:	f7f0 f8f6 	bl	8001ae0 <__aeabi_ddiv>
 80118f4:	9000      	str	r0, [sp, #0]
 80118f6:	9101      	str	r1, [sp, #4]
 80118f8:	9b08      	ldr	r3, [sp, #32]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	da55      	bge.n	80119aa <__ieee754_pow+0x1ae>
 80118fe:	4b56      	ldr	r3, [pc, #344]	; (8011a58 <__ieee754_pow+0x25c>)
 8011900:	18e4      	adds	r4, r4, r3
 8011902:	9b06      	ldr	r3, [sp, #24]
 8011904:	431c      	orrs	r4, r3
 8011906:	d000      	beq.n	801190a <__ieee754_pow+0x10e>
 8011908:	e06c      	b.n	80119e4 <__ieee754_pow+0x1e8>
 801190a:	9a00      	ldr	r2, [sp, #0]
 801190c:	9b01      	ldr	r3, [sp, #4]
 801190e:	0010      	movs	r0, r2
 8011910:	0019      	movs	r1, r3
 8011912:	f7f0 ffa1 	bl	8002858 <__aeabi_dsub>
 8011916:	0002      	movs	r2, r0
 8011918:	000b      	movs	r3, r1
 801191a:	e01c      	b.n	8011956 <__ieee754_pow+0x15a>
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1cf      	bne.n	80118c0 <__ieee754_pow+0xc4>
 8011920:	3314      	adds	r3, #20
 8011922:	1a9a      	subs	r2, r3, r2
 8011924:	0033      	movs	r3, r6
 8011926:	4113      	asrs	r3, r2
 8011928:	0019      	movs	r1, r3
 801192a:	4091      	lsls	r1, r2
 801192c:	42b1      	cmp	r1, r6
 801192e:	d104      	bne.n	801193a <__ieee754_pow+0x13e>
 8011930:	2201      	movs	r2, #1
 8011932:	4013      	ands	r3, r2
 8011934:	1892      	adds	r2, r2, r2
 8011936:	1ad3      	subs	r3, r2, r3
 8011938:	9306      	str	r3, [sp, #24]
 801193a:	4b4b      	ldr	r3, [pc, #300]	; (8011a68 <__ieee754_pow+0x26c>)
 801193c:	429e      	cmp	r6, r3
 801193e:	d138      	bne.n	80119b2 <__ieee754_pow+0x1b6>
 8011940:	0038      	movs	r0, r7
 8011942:	0029      	movs	r1, r5
 8011944:	9b04      	ldr	r3, [sp, #16]
 8011946:	9000      	str	r0, [sp, #0]
 8011948:	9101      	str	r1, [sp, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	da2d      	bge.n	80119aa <__ieee754_pow+0x1ae>
 801194e:	003a      	movs	r2, r7
 8011950:	002b      	movs	r3, r5
 8011952:	2000      	movs	r0, #0
 8011954:	4944      	ldr	r1, [pc, #272]	; (8011a68 <__ieee754_pow+0x26c>)
 8011956:	f7f0 f8c3 	bl	8001ae0 <__aeabi_ddiv>
 801195a:	e775      	b.n	8011848 <__ieee754_pow+0x4c>
 801195c:	2202      	movs	r2, #2
 801195e:	9206      	str	r2, [sp, #24]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d1ad      	bne.n	80118c0 <__ieee754_pow+0xc4>
 8011964:	4b3b      	ldr	r3, [pc, #236]	; (8011a54 <__ieee754_pow+0x258>)
 8011966:	429e      	cmp	r6, r3
 8011968:	d1e7      	bne.n	801193a <__ieee754_pow+0x13e>
 801196a:	4b3b      	ldr	r3, [pc, #236]	; (8011a58 <__ieee754_pow+0x25c>)
 801196c:	18e3      	adds	r3, r4, r3
 801196e:	433b      	orrs	r3, r7
 8011970:	d101      	bne.n	8011976 <__ieee754_pow+0x17a>
 8011972:	f000 fc15 	bl	80121a0 <__ieee754_pow+0x9a4>
 8011976:	4b3a      	ldr	r3, [pc, #232]	; (8011a60 <__ieee754_pow+0x264>)
 8011978:	429c      	cmp	r4, r3
 801197a:	dd09      	ble.n	8011990 <__ieee754_pow+0x194>
 801197c:	9b04      	ldr	r3, [sp, #16]
 801197e:	2b00      	cmp	r3, #0
 8011980:	da01      	bge.n	8011986 <__ieee754_pow+0x18a>
 8011982:	f000 fc11 	bl	80121a8 <__ieee754_pow+0x9ac>
 8011986:	9b02      	ldr	r3, [sp, #8]
 8011988:	9c03      	ldr	r4, [sp, #12]
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	9401      	str	r4, [sp, #4]
 801198e:	e00c      	b.n	80119aa <__ieee754_pow+0x1ae>
 8011990:	9b04      	ldr	r3, [sp, #16]
 8011992:	2b00      	cmp	r3, #0
 8011994:	db01      	blt.n	801199a <__ieee754_pow+0x19e>
 8011996:	f000 fc07 	bl	80121a8 <__ieee754_pow+0x9ac>
 801199a:	2280      	movs	r2, #128	; 0x80
 801199c:	0612      	lsls	r2, r2, #24
 801199e:	4694      	mov	ip, r2
 80119a0:	9b02      	ldr	r3, [sp, #8]
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	9b03      	ldr	r3, [sp, #12]
 80119a6:	4463      	add	r3, ip
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	9800      	ldr	r0, [sp, #0]
 80119ac:	9901      	ldr	r1, [sp, #4]
 80119ae:	b015      	add	sp, #84	; 0x54
 80119b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119b2:	2380      	movs	r3, #128	; 0x80
 80119b4:	9a04      	ldr	r2, [sp, #16]
 80119b6:	05db      	lsls	r3, r3, #23
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d106      	bne.n	80119ca <__ieee754_pow+0x1ce>
 80119bc:	003a      	movs	r2, r7
 80119be:	002b      	movs	r3, r5
 80119c0:	0038      	movs	r0, r7
 80119c2:	0029      	movs	r1, r5
 80119c4:	f7f0 fc86 	bl	80022d4 <__aeabi_dmul>
 80119c8:	e73e      	b.n	8011848 <__ieee754_pow+0x4c>
 80119ca:	4b28      	ldr	r3, [pc, #160]	; (8011a6c <__ieee754_pow+0x270>)
 80119cc:	9a04      	ldr	r2, [sp, #16]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d000      	beq.n	80119d4 <__ieee754_pow+0x1d8>
 80119d2:	e775      	b.n	80118c0 <__ieee754_pow+0xc4>
 80119d4:	2d00      	cmp	r5, #0
 80119d6:	da00      	bge.n	80119da <__ieee754_pow+0x1de>
 80119d8:	e772      	b.n	80118c0 <__ieee754_pow+0xc4>
 80119da:	0038      	movs	r0, r7
 80119dc:	0029      	movs	r1, r5
 80119de:	f000 fcb7 	bl	8012350 <__ieee754_sqrt>
 80119e2:	e731      	b.n	8011848 <__ieee754_pow+0x4c>
 80119e4:	9b06      	ldr	r3, [sp, #24]
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d1df      	bne.n	80119aa <__ieee754_pow+0x1ae>
 80119ea:	9800      	ldr	r0, [sp, #0]
 80119ec:	2180      	movs	r1, #128	; 0x80
 80119ee:	0002      	movs	r2, r0
 80119f0:	9801      	ldr	r0, [sp, #4]
 80119f2:	0609      	lsls	r1, r1, #24
 80119f4:	1843      	adds	r3, r0, r1
 80119f6:	9200      	str	r2, [sp, #0]
 80119f8:	9301      	str	r3, [sp, #4]
 80119fa:	e7d6      	b.n	80119aa <__ieee754_pow+0x1ae>
 80119fc:	0feb      	lsrs	r3, r5, #31
 80119fe:	3b01      	subs	r3, #1
 8011a00:	930e      	str	r3, [sp, #56]	; 0x38
 8011a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a04:	9b06      	ldr	r3, [sp, #24]
 8011a06:	4313      	orrs	r3, r2
 8011a08:	d104      	bne.n	8011a14 <__ieee754_pow+0x218>
 8011a0a:	003a      	movs	r2, r7
 8011a0c:	002b      	movs	r3, r5
 8011a0e:	0038      	movs	r0, r7
 8011a10:	0029      	movs	r1, r5
 8011a12:	e77e      	b.n	8011912 <__ieee754_pow+0x116>
 8011a14:	4b16      	ldr	r3, [pc, #88]	; (8011a70 <__ieee754_pow+0x274>)
 8011a16:	429e      	cmp	r6, r3
 8011a18:	dc00      	bgt.n	8011a1c <__ieee754_pow+0x220>
 8011a1a:	e0f1      	b.n	8011c00 <__ieee754_pow+0x404>
 8011a1c:	4b15      	ldr	r3, [pc, #84]	; (8011a74 <__ieee754_pow+0x278>)
 8011a1e:	429e      	cmp	r6, r3
 8011a20:	dd09      	ble.n	8011a36 <__ieee754_pow+0x23a>
 8011a22:	4b0f      	ldr	r3, [pc, #60]	; (8011a60 <__ieee754_pow+0x264>)
 8011a24:	429c      	cmp	r4, r3
 8011a26:	dc0c      	bgt.n	8011a42 <__ieee754_pow+0x246>
 8011a28:	9b04      	ldr	r3, [sp, #16]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da0c      	bge.n	8011a48 <__ieee754_pow+0x24c>
 8011a2e:	2000      	movs	r0, #0
 8011a30:	f000 fc86 	bl	8012340 <__math_oflow>
 8011a34:	e708      	b.n	8011848 <__ieee754_pow+0x4c>
 8011a36:	4b10      	ldr	r3, [pc, #64]	; (8011a78 <__ieee754_pow+0x27c>)
 8011a38:	429c      	cmp	r4, r3
 8011a3a:	ddf5      	ble.n	8011a28 <__ieee754_pow+0x22c>
 8011a3c:	4b0a      	ldr	r3, [pc, #40]	; (8011a68 <__ieee754_pow+0x26c>)
 8011a3e:	429c      	cmp	r4, r3
 8011a40:	dd1c      	ble.n	8011a7c <__ieee754_pow+0x280>
 8011a42:	9b04      	ldr	r3, [sp, #16]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	dcf2      	bgt.n	8011a2e <__ieee754_pow+0x232>
 8011a48:	2000      	movs	r0, #0
 8011a4a:	f000 fc72 	bl	8012332 <__math_uflow>
 8011a4e:	e6fb      	b.n	8011848 <__ieee754_pow+0x4c>
 8011a50:	fff00000 	.word	0xfff00000
 8011a54:	7ff00000 	.word	0x7ff00000
 8011a58:	c0100000 	.word	0xc0100000
 8011a5c:	433fffff 	.word	0x433fffff
 8011a60:	3fefffff 	.word	0x3fefffff
 8011a64:	fffffc01 	.word	0xfffffc01
 8011a68:	3ff00000 	.word	0x3ff00000
 8011a6c:	3fe00000 	.word	0x3fe00000
 8011a70:	41e00000 	.word	0x41e00000
 8011a74:	43f00000 	.word	0x43f00000
 8011a78:	3feffffe 	.word	0x3feffffe
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	9800      	ldr	r0, [sp, #0]
 8011a80:	9901      	ldr	r1, [sp, #4]
 8011a82:	4b53      	ldr	r3, [pc, #332]	; (8011bd0 <__ieee754_pow+0x3d4>)
 8011a84:	f7f0 fee8 	bl	8002858 <__aeabi_dsub>
 8011a88:	22c0      	movs	r2, #192	; 0xc0
 8011a8a:	4b52      	ldr	r3, [pc, #328]	; (8011bd4 <__ieee754_pow+0x3d8>)
 8011a8c:	05d2      	lsls	r2, r2, #23
 8011a8e:	0004      	movs	r4, r0
 8011a90:	000d      	movs	r5, r1
 8011a92:	f7f0 fc1f 	bl	80022d4 <__aeabi_dmul>
 8011a96:	4a50      	ldr	r2, [pc, #320]	; (8011bd8 <__ieee754_pow+0x3dc>)
 8011a98:	0006      	movs	r6, r0
 8011a9a:	000f      	movs	r7, r1
 8011a9c:	0020      	movs	r0, r4
 8011a9e:	0029      	movs	r1, r5
 8011aa0:	4b4e      	ldr	r3, [pc, #312]	; (8011bdc <__ieee754_pow+0x3e0>)
 8011aa2:	f7f0 fc17 	bl	80022d4 <__aeabi_dmul>
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	9000      	str	r0, [sp, #0]
 8011aaa:	9101      	str	r1, [sp, #4]
 8011aac:	4b4c      	ldr	r3, [pc, #304]	; (8011be0 <__ieee754_pow+0x3e4>)
 8011aae:	0020      	movs	r0, r4
 8011ab0:	0029      	movs	r1, r5
 8011ab2:	f7f0 fc0f 	bl	80022d4 <__aeabi_dmul>
 8011ab6:	0002      	movs	r2, r0
 8011ab8:	000b      	movs	r3, r1
 8011aba:	484a      	ldr	r0, [pc, #296]	; (8011be4 <__ieee754_pow+0x3e8>)
 8011abc:	494a      	ldr	r1, [pc, #296]	; (8011be8 <__ieee754_pow+0x3ec>)
 8011abe:	f7f0 fecb 	bl	8002858 <__aeabi_dsub>
 8011ac2:	0022      	movs	r2, r4
 8011ac4:	002b      	movs	r3, r5
 8011ac6:	f7f0 fc05 	bl	80022d4 <__aeabi_dmul>
 8011aca:	0002      	movs	r2, r0
 8011acc:	000b      	movs	r3, r1
 8011ace:	2000      	movs	r0, #0
 8011ad0:	4946      	ldr	r1, [pc, #280]	; (8011bec <__ieee754_pow+0x3f0>)
 8011ad2:	f7f0 fec1 	bl	8002858 <__aeabi_dsub>
 8011ad6:	0022      	movs	r2, r4
 8011ad8:	002b      	movs	r3, r5
 8011ada:	9004      	str	r0, [sp, #16]
 8011adc:	9105      	str	r1, [sp, #20]
 8011ade:	0020      	movs	r0, r4
 8011ae0:	0029      	movs	r1, r5
 8011ae2:	f7f0 fbf7 	bl	80022d4 <__aeabi_dmul>
 8011ae6:	0002      	movs	r2, r0
 8011ae8:	000b      	movs	r3, r1
 8011aea:	9804      	ldr	r0, [sp, #16]
 8011aec:	9905      	ldr	r1, [sp, #20]
 8011aee:	f7f0 fbf1 	bl	80022d4 <__aeabi_dmul>
 8011af2:	4a3f      	ldr	r2, [pc, #252]	; (8011bf0 <__ieee754_pow+0x3f4>)
 8011af4:	4b37      	ldr	r3, [pc, #220]	; (8011bd4 <__ieee754_pow+0x3d8>)
 8011af6:	f7f0 fbed 	bl	80022d4 <__aeabi_dmul>
 8011afa:	0002      	movs	r2, r0
 8011afc:	000b      	movs	r3, r1
 8011afe:	9800      	ldr	r0, [sp, #0]
 8011b00:	9901      	ldr	r1, [sp, #4]
 8011b02:	f7f0 fea9 	bl	8002858 <__aeabi_dsub>
 8011b06:	0002      	movs	r2, r0
 8011b08:	000b      	movs	r3, r1
 8011b0a:	0004      	movs	r4, r0
 8011b0c:	000d      	movs	r5, r1
 8011b0e:	0030      	movs	r0, r6
 8011b10:	0039      	movs	r1, r7
 8011b12:	f7ef fc85 	bl	8001420 <__aeabi_dadd>
 8011b16:	2000      	movs	r0, #0
 8011b18:	0032      	movs	r2, r6
 8011b1a:	003b      	movs	r3, r7
 8011b1c:	9004      	str	r0, [sp, #16]
 8011b1e:	9105      	str	r1, [sp, #20]
 8011b20:	f7f0 fe9a 	bl	8002858 <__aeabi_dsub>
 8011b24:	0002      	movs	r2, r0
 8011b26:	000b      	movs	r3, r1
 8011b28:	0020      	movs	r0, r4
 8011b2a:	0029      	movs	r1, r5
 8011b2c:	f7f0 fe94 	bl	8002858 <__aeabi_dsub>
 8011b30:	9b06      	ldr	r3, [sp, #24]
 8011b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b34:	3b01      	subs	r3, #1
 8011b36:	0006      	movs	r6, r0
 8011b38:	000f      	movs	r7, r1
 8011b3a:	4313      	orrs	r3, r2
 8011b3c:	d000      	beq.n	8011b40 <__ieee754_pow+0x344>
 8011b3e:	e1dc      	b.n	8011efa <__ieee754_pow+0x6fe>
 8011b40:	2300      	movs	r3, #0
 8011b42:	4c2c      	ldr	r4, [pc, #176]	; (8011bf4 <__ieee754_pow+0x3f8>)
 8011b44:	9300      	str	r3, [sp, #0]
 8011b46:	9401      	str	r4, [sp, #4]
 8011b48:	9c02      	ldr	r4, [sp, #8]
 8011b4a:	9d03      	ldr	r5, [sp, #12]
 8011b4c:	9802      	ldr	r0, [sp, #8]
 8011b4e:	9903      	ldr	r1, [sp, #12]
 8011b50:	2400      	movs	r4, #0
 8011b52:	002b      	movs	r3, r5
 8011b54:	0022      	movs	r2, r4
 8011b56:	f7f0 fe7f 	bl	8002858 <__aeabi_dsub>
 8011b5a:	9a04      	ldr	r2, [sp, #16]
 8011b5c:	9b05      	ldr	r3, [sp, #20]
 8011b5e:	f7f0 fbb9 	bl	80022d4 <__aeabi_dmul>
 8011b62:	9a02      	ldr	r2, [sp, #8]
 8011b64:	9b03      	ldr	r3, [sp, #12]
 8011b66:	9006      	str	r0, [sp, #24]
 8011b68:	9107      	str	r1, [sp, #28]
 8011b6a:	0030      	movs	r0, r6
 8011b6c:	0039      	movs	r1, r7
 8011b6e:	f7f0 fbb1 	bl	80022d4 <__aeabi_dmul>
 8011b72:	0002      	movs	r2, r0
 8011b74:	000b      	movs	r3, r1
 8011b76:	9806      	ldr	r0, [sp, #24]
 8011b78:	9907      	ldr	r1, [sp, #28]
 8011b7a:	f7ef fc51 	bl	8001420 <__aeabi_dadd>
 8011b7e:	0022      	movs	r2, r4
 8011b80:	002b      	movs	r3, r5
 8011b82:	0006      	movs	r6, r0
 8011b84:	000f      	movs	r7, r1
 8011b86:	9804      	ldr	r0, [sp, #16]
 8011b88:	9905      	ldr	r1, [sp, #20]
 8011b8a:	f7f0 fba3 	bl	80022d4 <__aeabi_dmul>
 8011b8e:	0003      	movs	r3, r0
 8011b90:	000c      	movs	r4, r1
 8011b92:	9004      	str	r0, [sp, #16]
 8011b94:	9105      	str	r1, [sp, #20]
 8011b96:	9306      	str	r3, [sp, #24]
 8011b98:	9407      	str	r4, [sp, #28]
 8011b9a:	0002      	movs	r2, r0
 8011b9c:	000b      	movs	r3, r1
 8011b9e:	0030      	movs	r0, r6
 8011ba0:	0039      	movs	r1, r7
 8011ba2:	f7ef fc3d 	bl	8001420 <__aeabi_dadd>
 8011ba6:	4b14      	ldr	r3, [pc, #80]	; (8011bf8 <__ieee754_pow+0x3fc>)
 8011ba8:	0005      	movs	r5, r0
 8011baa:	000c      	movs	r4, r1
 8011bac:	9108      	str	r1, [sp, #32]
 8011bae:	4299      	cmp	r1, r3
 8011bb0:	dc00      	bgt.n	8011bb4 <__ieee754_pow+0x3b8>
 8011bb2:	e2d4      	b.n	801215e <__ieee754_pow+0x962>
 8011bb4:	4b11      	ldr	r3, [pc, #68]	; (8011bfc <__ieee754_pow+0x400>)
 8011bb6:	18cb      	adds	r3, r1, r3
 8011bb8:	4303      	orrs	r3, r0
 8011bba:	d100      	bne.n	8011bbe <__ieee754_pow+0x3c2>
 8011bbc:	e1d6      	b.n	8011f6c <__ieee754_pow+0x770>
 8011bbe:	9800      	ldr	r0, [sp, #0]
 8011bc0:	9901      	ldr	r1, [sp, #4]
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	f7ee fc47 	bl	8000458 <__aeabi_dcmplt>
 8011bca:	1e43      	subs	r3, r0, #1
 8011bcc:	4198      	sbcs	r0, r3
 8011bce:	e72f      	b.n	8011a30 <__ieee754_pow+0x234>
 8011bd0:	3ff00000 	.word	0x3ff00000
 8011bd4:	3ff71547 	.word	0x3ff71547
 8011bd8:	f85ddf44 	.word	0xf85ddf44
 8011bdc:	3e54ae0b 	.word	0x3e54ae0b
 8011be0:	3fd00000 	.word	0x3fd00000
 8011be4:	55555555 	.word	0x55555555
 8011be8:	3fd55555 	.word	0x3fd55555
 8011bec:	3fe00000 	.word	0x3fe00000
 8011bf0:	652b82fe 	.word	0x652b82fe
 8011bf4:	bff00000 	.word	0xbff00000
 8011bf8:	408fffff 	.word	0x408fffff
 8011bfc:	bf700000 	.word	0xbf700000
 8011c00:	4bbf      	ldr	r3, [pc, #764]	; (8011f00 <__ieee754_pow+0x704>)
 8011c02:	2200      	movs	r2, #0
 8011c04:	422b      	tst	r3, r5
 8011c06:	d10a      	bne.n	8011c1e <__ieee754_pow+0x422>
 8011c08:	9800      	ldr	r0, [sp, #0]
 8011c0a:	9901      	ldr	r1, [sp, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	4bbd      	ldr	r3, [pc, #756]	; (8011f04 <__ieee754_pow+0x708>)
 8011c10:	f7f0 fb60 	bl	80022d4 <__aeabi_dmul>
 8011c14:	2235      	movs	r2, #53	; 0x35
 8011c16:	9000      	str	r0, [sp, #0]
 8011c18:	9101      	str	r1, [sp, #4]
 8011c1a:	9c01      	ldr	r4, [sp, #4]
 8011c1c:	4252      	negs	r2, r2
 8011c1e:	49ba      	ldr	r1, [pc, #744]	; (8011f08 <__ieee754_pow+0x70c>)
 8011c20:	1523      	asrs	r3, r4, #20
 8011c22:	185b      	adds	r3, r3, r1
 8011c24:	189b      	adds	r3, r3, r2
 8011c26:	0324      	lsls	r4, r4, #12
 8011c28:	4db8      	ldr	r5, [pc, #736]	; (8011f0c <__ieee754_pow+0x710>)
 8011c2a:	930d      	str	r3, [sp, #52]	; 0x34
 8011c2c:	4bb8      	ldr	r3, [pc, #736]	; (8011f10 <__ieee754_pow+0x714>)
 8011c2e:	0b22      	lsrs	r2, r4, #12
 8011c30:	4315      	orrs	r5, r2
 8011c32:	2400      	movs	r4, #0
 8011c34:	429a      	cmp	r2, r3
 8011c36:	dd09      	ble.n	8011c4c <__ieee754_pow+0x450>
 8011c38:	4bb6      	ldr	r3, [pc, #728]	; (8011f14 <__ieee754_pow+0x718>)
 8011c3a:	3401      	adds	r4, #1
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	dd05      	ble.n	8011c4c <__ieee754_pow+0x450>
 8011c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c42:	191b      	adds	r3, r3, r4
 8011c44:	2400      	movs	r4, #0
 8011c46:	930d      	str	r3, [sp, #52]	; 0x34
 8011c48:	4bb3      	ldr	r3, [pc, #716]	; (8011f18 <__ieee754_pow+0x71c>)
 8011c4a:	18ed      	adds	r5, r5, r3
 8011c4c:	4bb3      	ldr	r3, [pc, #716]	; (8011f1c <__ieee754_pow+0x720>)
 8011c4e:	00e2      	lsls	r2, r4, #3
 8011c50:	189b      	adds	r3, r3, r2
 8011c52:	9800      	ldr	r0, [sp, #0]
 8011c54:	9901      	ldr	r1, [sp, #4]
 8011c56:	920f      	str	r2, [sp, #60]	; 0x3c
 8011c58:	0029      	movs	r1, r5
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	0006      	movs	r6, r0
 8011c60:	920a      	str	r2, [sp, #40]	; 0x28
 8011c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c64:	f7f0 fdf8 	bl	8002858 <__aeabi_dsub>
 8011c68:	0032      	movs	r2, r6
 8011c6a:	002b      	movs	r3, r5
 8011c6c:	9010      	str	r0, [sp, #64]	; 0x40
 8011c6e:	9111      	str	r1, [sp, #68]	; 0x44
 8011c70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011c74:	f7ef fbd4 	bl	8001420 <__aeabi_dadd>
 8011c78:	0002      	movs	r2, r0
 8011c7a:	000b      	movs	r3, r1
 8011c7c:	2000      	movs	r0, #0
 8011c7e:	49a3      	ldr	r1, [pc, #652]	; (8011f0c <__ieee754_pow+0x710>)
 8011c80:	f7ef ff2e 	bl	8001ae0 <__aeabi_ddiv>
 8011c84:	0002      	movs	r2, r0
 8011c86:	000b      	movs	r3, r1
 8011c88:	9012      	str	r0, [sp, #72]	; 0x48
 8011c8a:	9113      	str	r1, [sp, #76]	; 0x4c
 8011c8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c90:	f7f0 fb20 	bl	80022d4 <__aeabi_dmul>
 8011c94:	9008      	str	r0, [sp, #32]
 8011c96:	9109      	str	r1, [sp, #36]	; 0x24
 8011c98:	9a08      	ldr	r2, [sp, #32]
 8011c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c9c:	9204      	str	r2, [sp, #16]
 8011c9e:	9305      	str	r3, [sp, #20]
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	2180      	movs	r1, #128	; 0x80
 8011ca4:	2080      	movs	r0, #128	; 0x80
 8011ca6:	9304      	str	r3, [sp, #16]
 8011ca8:	9a04      	ldr	r2, [sp, #16]
 8011caa:	9b05      	ldr	r3, [sp, #20]
 8011cac:	9200      	str	r2, [sp, #0]
 8011cae:	9301      	str	r3, [sp, #4]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	002f      	movs	r7, r5
 8011cb4:	0589      	lsls	r1, r1, #22
 8011cb6:	106d      	asrs	r5, r5, #1
 8011cb8:	4329      	orrs	r1, r5
 8011cba:	0300      	lsls	r0, r0, #12
 8011cbc:	1809      	adds	r1, r1, r0
 8011cbe:	04a0      	lsls	r0, r4, #18
 8011cc0:	180b      	adds	r3, r1, r0
 8011cc2:	9800      	ldr	r0, [sp, #0]
 8011cc4:	9901      	ldr	r1, [sp, #4]
 8011cc6:	0014      	movs	r4, r2
 8011cc8:	001d      	movs	r5, r3
 8011cca:	f7f0 fb03 	bl	80022d4 <__aeabi_dmul>
 8011cce:	0002      	movs	r2, r0
 8011cd0:	000b      	movs	r3, r1
 8011cd2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011cd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011cd6:	f7f0 fdbf 	bl	8002858 <__aeabi_dsub>
 8011cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cde:	9010      	str	r0, [sp, #64]	; 0x40
 8011ce0:	9111      	str	r1, [sp, #68]	; 0x44
 8011ce2:	0020      	movs	r0, r4
 8011ce4:	0029      	movs	r1, r5
 8011ce6:	f7f0 fdb7 	bl	8002858 <__aeabi_dsub>
 8011cea:	0002      	movs	r2, r0
 8011cec:	000b      	movs	r3, r1
 8011cee:	0030      	movs	r0, r6
 8011cf0:	0039      	movs	r1, r7
 8011cf2:	f7f0 fdb1 	bl	8002858 <__aeabi_dsub>
 8011cf6:	9a00      	ldr	r2, [sp, #0]
 8011cf8:	9b01      	ldr	r3, [sp, #4]
 8011cfa:	f7f0 faeb 	bl	80022d4 <__aeabi_dmul>
 8011cfe:	0002      	movs	r2, r0
 8011d00:	000b      	movs	r3, r1
 8011d02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011d04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011d06:	f7f0 fda7 	bl	8002858 <__aeabi_dsub>
 8011d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d0e:	f7f0 fae1 	bl	80022d4 <__aeabi_dmul>
 8011d12:	9a08      	ldr	r2, [sp, #32]
 8011d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d16:	900a      	str	r0, [sp, #40]	; 0x28
 8011d18:	910b      	str	r1, [sp, #44]	; 0x2c
 8011d1a:	0010      	movs	r0, r2
 8011d1c:	0019      	movs	r1, r3
 8011d1e:	f7f0 fad9 	bl	80022d4 <__aeabi_dmul>
 8011d22:	0006      	movs	r6, r0
 8011d24:	000f      	movs	r7, r1
 8011d26:	4a7e      	ldr	r2, [pc, #504]	; (8011f20 <__ieee754_pow+0x724>)
 8011d28:	4b7e      	ldr	r3, [pc, #504]	; (8011f24 <__ieee754_pow+0x728>)
 8011d2a:	f7f0 fad3 	bl	80022d4 <__aeabi_dmul>
 8011d2e:	4a7e      	ldr	r2, [pc, #504]	; (8011f28 <__ieee754_pow+0x72c>)
 8011d30:	4b7e      	ldr	r3, [pc, #504]	; (8011f2c <__ieee754_pow+0x730>)
 8011d32:	f7ef fb75 	bl	8001420 <__aeabi_dadd>
 8011d36:	0032      	movs	r2, r6
 8011d38:	003b      	movs	r3, r7
 8011d3a:	f7f0 facb 	bl	80022d4 <__aeabi_dmul>
 8011d3e:	4a7c      	ldr	r2, [pc, #496]	; (8011f30 <__ieee754_pow+0x734>)
 8011d40:	4b7c      	ldr	r3, [pc, #496]	; (8011f34 <__ieee754_pow+0x738>)
 8011d42:	f7ef fb6d 	bl	8001420 <__aeabi_dadd>
 8011d46:	0032      	movs	r2, r6
 8011d48:	003b      	movs	r3, r7
 8011d4a:	f7f0 fac3 	bl	80022d4 <__aeabi_dmul>
 8011d4e:	4a7a      	ldr	r2, [pc, #488]	; (8011f38 <__ieee754_pow+0x73c>)
 8011d50:	4b7a      	ldr	r3, [pc, #488]	; (8011f3c <__ieee754_pow+0x740>)
 8011d52:	f7ef fb65 	bl	8001420 <__aeabi_dadd>
 8011d56:	0032      	movs	r2, r6
 8011d58:	003b      	movs	r3, r7
 8011d5a:	f7f0 fabb 	bl	80022d4 <__aeabi_dmul>
 8011d5e:	4a78      	ldr	r2, [pc, #480]	; (8011f40 <__ieee754_pow+0x744>)
 8011d60:	4b78      	ldr	r3, [pc, #480]	; (8011f44 <__ieee754_pow+0x748>)
 8011d62:	f7ef fb5d 	bl	8001420 <__aeabi_dadd>
 8011d66:	0032      	movs	r2, r6
 8011d68:	003b      	movs	r3, r7
 8011d6a:	f7f0 fab3 	bl	80022d4 <__aeabi_dmul>
 8011d6e:	4a76      	ldr	r2, [pc, #472]	; (8011f48 <__ieee754_pow+0x74c>)
 8011d70:	4b76      	ldr	r3, [pc, #472]	; (8011f4c <__ieee754_pow+0x750>)
 8011d72:	f7ef fb55 	bl	8001420 <__aeabi_dadd>
 8011d76:	0032      	movs	r2, r6
 8011d78:	0004      	movs	r4, r0
 8011d7a:	000d      	movs	r5, r1
 8011d7c:	003b      	movs	r3, r7
 8011d7e:	0030      	movs	r0, r6
 8011d80:	0039      	movs	r1, r7
 8011d82:	f7f0 faa7 	bl	80022d4 <__aeabi_dmul>
 8011d86:	0002      	movs	r2, r0
 8011d88:	000b      	movs	r3, r1
 8011d8a:	0020      	movs	r0, r4
 8011d8c:	0029      	movs	r1, r5
 8011d8e:	f7f0 faa1 	bl	80022d4 <__aeabi_dmul>
 8011d92:	9a00      	ldr	r2, [sp, #0]
 8011d94:	9b01      	ldr	r3, [sp, #4]
 8011d96:	0004      	movs	r4, r0
 8011d98:	000d      	movs	r5, r1
 8011d9a:	9808      	ldr	r0, [sp, #32]
 8011d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d9e:	f7ef fb3f 	bl	8001420 <__aeabi_dadd>
 8011da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011da6:	f7f0 fa95 	bl	80022d4 <__aeabi_dmul>
 8011daa:	0022      	movs	r2, r4
 8011dac:	002b      	movs	r3, r5
 8011dae:	f7ef fb37 	bl	8001420 <__aeabi_dadd>
 8011db2:	9a00      	ldr	r2, [sp, #0]
 8011db4:	9b01      	ldr	r3, [sp, #4]
 8011db6:	9010      	str	r0, [sp, #64]	; 0x40
 8011db8:	9111      	str	r1, [sp, #68]	; 0x44
 8011dba:	0010      	movs	r0, r2
 8011dbc:	0019      	movs	r1, r3
 8011dbe:	f7f0 fa89 	bl	80022d4 <__aeabi_dmul>
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	4b62      	ldr	r3, [pc, #392]	; (8011f50 <__ieee754_pow+0x754>)
 8011dc6:	0004      	movs	r4, r0
 8011dc8:	000d      	movs	r5, r1
 8011dca:	f7ef fb29 	bl	8001420 <__aeabi_dadd>
 8011dce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011dd2:	f7ef fb25 	bl	8001420 <__aeabi_dadd>
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	000f      	movs	r7, r1
 8011dda:	0006      	movs	r6, r0
 8011ddc:	0002      	movs	r2, r0
 8011dde:	000b      	movs	r3, r1
 8011de0:	9800      	ldr	r0, [sp, #0]
 8011de2:	9901      	ldr	r1, [sp, #4]
 8011de4:	f7f0 fa76 	bl	80022d4 <__aeabi_dmul>
 8011de8:	2200      	movs	r2, #0
 8011dea:	9000      	str	r0, [sp, #0]
 8011dec:	9101      	str	r1, [sp, #4]
 8011dee:	4b58      	ldr	r3, [pc, #352]	; (8011f50 <__ieee754_pow+0x754>)
 8011df0:	0030      	movs	r0, r6
 8011df2:	0039      	movs	r1, r7
 8011df4:	f7f0 fd30 	bl	8002858 <__aeabi_dsub>
 8011df8:	0022      	movs	r2, r4
 8011dfa:	002b      	movs	r3, r5
 8011dfc:	f7f0 fd2c 	bl	8002858 <__aeabi_dsub>
 8011e00:	0002      	movs	r2, r0
 8011e02:	000b      	movs	r3, r1
 8011e04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011e06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011e08:	f7f0 fd26 	bl	8002858 <__aeabi_dsub>
 8011e0c:	9a08      	ldr	r2, [sp, #32]
 8011e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e10:	f7f0 fa60 	bl	80022d4 <__aeabi_dmul>
 8011e14:	0032      	movs	r2, r6
 8011e16:	0004      	movs	r4, r0
 8011e18:	000d      	movs	r5, r1
 8011e1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011e1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e1e:	003b      	movs	r3, r7
 8011e20:	f7f0 fa58 	bl	80022d4 <__aeabi_dmul>
 8011e24:	0002      	movs	r2, r0
 8011e26:	000b      	movs	r3, r1
 8011e28:	0020      	movs	r0, r4
 8011e2a:	0029      	movs	r1, r5
 8011e2c:	f7ef faf8 	bl	8001420 <__aeabi_dadd>
 8011e30:	0004      	movs	r4, r0
 8011e32:	000d      	movs	r5, r1
 8011e34:	0002      	movs	r2, r0
 8011e36:	000b      	movs	r3, r1
 8011e38:	9800      	ldr	r0, [sp, #0]
 8011e3a:	9901      	ldr	r1, [sp, #4]
 8011e3c:	f7ef faf0 	bl	8001420 <__aeabi_dadd>
 8011e40:	22e0      	movs	r2, #224	; 0xe0
 8011e42:	2000      	movs	r0, #0
 8011e44:	4b43      	ldr	r3, [pc, #268]	; (8011f54 <__ieee754_pow+0x758>)
 8011e46:	0612      	lsls	r2, r2, #24
 8011e48:	0006      	movs	r6, r0
 8011e4a:	000f      	movs	r7, r1
 8011e4c:	f7f0 fa42 	bl	80022d4 <__aeabi_dmul>
 8011e50:	9008      	str	r0, [sp, #32]
 8011e52:	9109      	str	r1, [sp, #36]	; 0x24
 8011e54:	9a00      	ldr	r2, [sp, #0]
 8011e56:	9b01      	ldr	r3, [sp, #4]
 8011e58:	0030      	movs	r0, r6
 8011e5a:	0039      	movs	r1, r7
 8011e5c:	f7f0 fcfc 	bl	8002858 <__aeabi_dsub>
 8011e60:	0002      	movs	r2, r0
 8011e62:	000b      	movs	r3, r1
 8011e64:	0020      	movs	r0, r4
 8011e66:	0029      	movs	r1, r5
 8011e68:	f7f0 fcf6 	bl	8002858 <__aeabi_dsub>
 8011e6c:	4a3a      	ldr	r2, [pc, #232]	; (8011f58 <__ieee754_pow+0x75c>)
 8011e6e:	4b39      	ldr	r3, [pc, #228]	; (8011f54 <__ieee754_pow+0x758>)
 8011e70:	f7f0 fa30 	bl	80022d4 <__aeabi_dmul>
 8011e74:	4a39      	ldr	r2, [pc, #228]	; (8011f5c <__ieee754_pow+0x760>)
 8011e76:	0004      	movs	r4, r0
 8011e78:	000d      	movs	r5, r1
 8011e7a:	0030      	movs	r0, r6
 8011e7c:	0039      	movs	r1, r7
 8011e7e:	4b38      	ldr	r3, [pc, #224]	; (8011f60 <__ieee754_pow+0x764>)
 8011e80:	f7f0 fa28 	bl	80022d4 <__aeabi_dmul>
 8011e84:	0002      	movs	r2, r0
 8011e86:	000b      	movs	r3, r1
 8011e88:	0020      	movs	r0, r4
 8011e8a:	0029      	movs	r1, r5
 8011e8c:	f7ef fac8 	bl	8001420 <__aeabi_dadd>
 8011e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e92:	4b34      	ldr	r3, [pc, #208]	; (8011f64 <__ieee754_pow+0x768>)
 8011e94:	189b      	adds	r3, r3, r2
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	f7ef fac1 	bl	8001420 <__aeabi_dadd>
 8011e9e:	9000      	str	r0, [sp, #0]
 8011ea0:	9101      	str	r1, [sp, #4]
 8011ea2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011ea4:	f7f1 f8ae 	bl	8003004 <__aeabi_i2d>
 8011ea8:	0004      	movs	r4, r0
 8011eaa:	000d      	movs	r5, r1
 8011eac:	9808      	ldr	r0, [sp, #32]
 8011eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011eb2:	4b2d      	ldr	r3, [pc, #180]	; (8011f68 <__ieee754_pow+0x76c>)
 8011eb4:	189b      	adds	r3, r3, r2
 8011eb6:	681e      	ldr	r6, [r3, #0]
 8011eb8:	685f      	ldr	r7, [r3, #4]
 8011eba:	9a00      	ldr	r2, [sp, #0]
 8011ebc:	9b01      	ldr	r3, [sp, #4]
 8011ebe:	f7ef faaf 	bl	8001420 <__aeabi_dadd>
 8011ec2:	0032      	movs	r2, r6
 8011ec4:	003b      	movs	r3, r7
 8011ec6:	f7ef faab 	bl	8001420 <__aeabi_dadd>
 8011eca:	0022      	movs	r2, r4
 8011ecc:	002b      	movs	r3, r5
 8011ece:	f7ef faa7 	bl	8001420 <__aeabi_dadd>
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	0022      	movs	r2, r4
 8011ed6:	002b      	movs	r3, r5
 8011ed8:	9004      	str	r0, [sp, #16]
 8011eda:	9105      	str	r1, [sp, #20]
 8011edc:	f7f0 fcbc 	bl	8002858 <__aeabi_dsub>
 8011ee0:	0032      	movs	r2, r6
 8011ee2:	003b      	movs	r3, r7
 8011ee4:	f7f0 fcb8 	bl	8002858 <__aeabi_dsub>
 8011ee8:	9a08      	ldr	r2, [sp, #32]
 8011eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eec:	f7f0 fcb4 	bl	8002858 <__aeabi_dsub>
 8011ef0:	0002      	movs	r2, r0
 8011ef2:	000b      	movs	r3, r1
 8011ef4:	9800      	ldr	r0, [sp, #0]
 8011ef6:	9901      	ldr	r1, [sp, #4]
 8011ef8:	e618      	b.n	8011b2c <__ieee754_pow+0x330>
 8011efa:	2300      	movs	r3, #0
 8011efc:	4c03      	ldr	r4, [pc, #12]	; (8011f0c <__ieee754_pow+0x710>)
 8011efe:	e621      	b.n	8011b44 <__ieee754_pow+0x348>
 8011f00:	7ff00000 	.word	0x7ff00000
 8011f04:	43400000 	.word	0x43400000
 8011f08:	fffffc01 	.word	0xfffffc01
 8011f0c:	3ff00000 	.word	0x3ff00000
 8011f10:	0003988e 	.word	0x0003988e
 8011f14:	000bb679 	.word	0x000bb679
 8011f18:	fff00000 	.word	0xfff00000
 8011f1c:	08013e48 	.word	0x08013e48
 8011f20:	4a454eef 	.word	0x4a454eef
 8011f24:	3fca7e28 	.word	0x3fca7e28
 8011f28:	93c9db65 	.word	0x93c9db65
 8011f2c:	3fcd864a 	.word	0x3fcd864a
 8011f30:	a91d4101 	.word	0xa91d4101
 8011f34:	3fd17460 	.word	0x3fd17460
 8011f38:	518f264d 	.word	0x518f264d
 8011f3c:	3fd55555 	.word	0x3fd55555
 8011f40:	db6fabff 	.word	0xdb6fabff
 8011f44:	3fdb6db6 	.word	0x3fdb6db6
 8011f48:	33333303 	.word	0x33333303
 8011f4c:	3fe33333 	.word	0x3fe33333
 8011f50:	40080000 	.word	0x40080000
 8011f54:	3feec709 	.word	0x3feec709
 8011f58:	dc3a03fd 	.word	0xdc3a03fd
 8011f5c:	145b01f5 	.word	0x145b01f5
 8011f60:	be3e2fe0 	.word	0xbe3e2fe0
 8011f64:	08013e68 	.word	0x08013e68
 8011f68:	08013e58 	.word	0x08013e58
 8011f6c:	4a90      	ldr	r2, [pc, #576]	; (80121b0 <__ieee754_pow+0x9b4>)
 8011f6e:	4b91      	ldr	r3, [pc, #580]	; (80121b4 <__ieee754_pow+0x9b8>)
 8011f70:	0030      	movs	r0, r6
 8011f72:	0039      	movs	r1, r7
 8011f74:	f7ef fa54 	bl	8001420 <__aeabi_dadd>
 8011f78:	9a04      	ldr	r2, [sp, #16]
 8011f7a:	9b05      	ldr	r3, [sp, #20]
 8011f7c:	9002      	str	r0, [sp, #8]
 8011f7e:	9103      	str	r1, [sp, #12]
 8011f80:	0028      	movs	r0, r5
 8011f82:	0021      	movs	r1, r4
 8011f84:	f7f0 fc68 	bl	8002858 <__aeabi_dsub>
 8011f88:	0002      	movs	r2, r0
 8011f8a:	000b      	movs	r3, r1
 8011f8c:	9802      	ldr	r0, [sp, #8]
 8011f8e:	9903      	ldr	r1, [sp, #12]
 8011f90:	f7ee fa76 	bl	8000480 <__aeabi_dcmpgt>
 8011f94:	2800      	cmp	r0, #0
 8011f96:	d000      	beq.n	8011f9a <__ieee754_pow+0x79e>
 8011f98:	e611      	b.n	8011bbe <__ieee754_pow+0x3c2>
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	4a86      	ldr	r2, [pc, #536]	; (80121b8 <__ieee754_pow+0x9bc>)
 8011f9e:	0063      	lsls	r3, r4, #1
 8011fa0:	085b      	lsrs	r3, r3, #1
 8011fa2:	9102      	str	r1, [sp, #8]
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	dd25      	ble.n	8011ff4 <__ieee754_pow+0x7f8>
 8011fa8:	4a84      	ldr	r2, [pc, #528]	; (80121bc <__ieee754_pow+0x9c0>)
 8011faa:	151b      	asrs	r3, r3, #20
 8011fac:	189b      	adds	r3, r3, r2
 8011fae:	2280      	movs	r2, #128	; 0x80
 8011fb0:	0352      	lsls	r2, r2, #13
 8011fb2:	0011      	movs	r1, r2
 8011fb4:	4119      	asrs	r1, r3
 8011fb6:	190b      	adds	r3, r1, r4
 8011fb8:	005c      	lsls	r4, r3, #1
 8011fba:	4981      	ldr	r1, [pc, #516]	; (80121c0 <__ieee754_pow+0x9c4>)
 8011fbc:	4d81      	ldr	r5, [pc, #516]	; (80121c4 <__ieee754_pow+0x9c8>)
 8011fbe:	0d64      	lsrs	r4, r4, #21
 8011fc0:	1864      	adds	r4, r4, r1
 8011fc2:	4125      	asrs	r5, r4
 8011fc4:	401d      	ands	r5, r3
 8011fc6:	031b      	lsls	r3, r3, #12
 8011fc8:	0b1b      	lsrs	r3, r3, #12
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	2214      	movs	r2, #20
 8011fce:	1b12      	subs	r2, r2, r4
 8011fd0:	4113      	asrs	r3, r2
 8011fd2:	9302      	str	r3, [sp, #8]
 8011fd4:	9b08      	ldr	r3, [sp, #32]
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	0029      	movs	r1, r5
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	da02      	bge.n	8011fe4 <__ieee754_pow+0x7e8>
 8011fde:	9b02      	ldr	r3, [sp, #8]
 8011fe0:	425b      	negs	r3, r3
 8011fe2:	9302      	str	r3, [sp, #8]
 8011fe4:	0002      	movs	r2, r0
 8011fe6:	000b      	movs	r3, r1
 8011fe8:	9804      	ldr	r0, [sp, #16]
 8011fea:	9905      	ldr	r1, [sp, #20]
 8011fec:	f7f0 fc34 	bl	8002858 <__aeabi_dsub>
 8011ff0:	9006      	str	r0, [sp, #24]
 8011ff2:	9107      	str	r1, [sp, #28]
 8011ff4:	9806      	ldr	r0, [sp, #24]
 8011ff6:	9907      	ldr	r1, [sp, #28]
 8011ff8:	0032      	movs	r2, r6
 8011ffa:	003b      	movs	r3, r7
 8011ffc:	f7ef fa10 	bl	8001420 <__aeabi_dadd>
 8012000:	2000      	movs	r0, #0
 8012002:	2200      	movs	r2, #0
 8012004:	4b70      	ldr	r3, [pc, #448]	; (80121c8 <__ieee754_pow+0x9cc>)
 8012006:	9004      	str	r0, [sp, #16]
 8012008:	9105      	str	r1, [sp, #20]
 801200a:	f7f0 f963 	bl	80022d4 <__aeabi_dmul>
 801200e:	9a06      	ldr	r2, [sp, #24]
 8012010:	9b07      	ldr	r3, [sp, #28]
 8012012:	9008      	str	r0, [sp, #32]
 8012014:	9109      	str	r1, [sp, #36]	; 0x24
 8012016:	9804      	ldr	r0, [sp, #16]
 8012018:	9905      	ldr	r1, [sp, #20]
 801201a:	f7f0 fc1d 	bl	8002858 <__aeabi_dsub>
 801201e:	0002      	movs	r2, r0
 8012020:	000b      	movs	r3, r1
 8012022:	0030      	movs	r0, r6
 8012024:	0039      	movs	r1, r7
 8012026:	f7f0 fc17 	bl	8002858 <__aeabi_dsub>
 801202a:	4a68      	ldr	r2, [pc, #416]	; (80121cc <__ieee754_pow+0x9d0>)
 801202c:	4b68      	ldr	r3, [pc, #416]	; (80121d0 <__ieee754_pow+0x9d4>)
 801202e:	f7f0 f951 	bl	80022d4 <__aeabi_dmul>
 8012032:	4a68      	ldr	r2, [pc, #416]	; (80121d4 <__ieee754_pow+0x9d8>)
 8012034:	0004      	movs	r4, r0
 8012036:	000d      	movs	r5, r1
 8012038:	9804      	ldr	r0, [sp, #16]
 801203a:	9905      	ldr	r1, [sp, #20]
 801203c:	4b66      	ldr	r3, [pc, #408]	; (80121d8 <__ieee754_pow+0x9dc>)
 801203e:	f7f0 f949 	bl	80022d4 <__aeabi_dmul>
 8012042:	0002      	movs	r2, r0
 8012044:	000b      	movs	r3, r1
 8012046:	0020      	movs	r0, r4
 8012048:	0029      	movs	r1, r5
 801204a:	f7ef f9e9 	bl	8001420 <__aeabi_dadd>
 801204e:	0004      	movs	r4, r0
 8012050:	000d      	movs	r5, r1
 8012052:	0002      	movs	r2, r0
 8012054:	000b      	movs	r3, r1
 8012056:	9808      	ldr	r0, [sp, #32]
 8012058:	9909      	ldr	r1, [sp, #36]	; 0x24
 801205a:	f7ef f9e1 	bl	8001420 <__aeabi_dadd>
 801205e:	9a08      	ldr	r2, [sp, #32]
 8012060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012062:	0006      	movs	r6, r0
 8012064:	000f      	movs	r7, r1
 8012066:	f7f0 fbf7 	bl	8002858 <__aeabi_dsub>
 801206a:	0002      	movs	r2, r0
 801206c:	000b      	movs	r3, r1
 801206e:	0020      	movs	r0, r4
 8012070:	0029      	movs	r1, r5
 8012072:	f7f0 fbf1 	bl	8002858 <__aeabi_dsub>
 8012076:	0032      	movs	r2, r6
 8012078:	9004      	str	r0, [sp, #16]
 801207a:	9105      	str	r1, [sp, #20]
 801207c:	003b      	movs	r3, r7
 801207e:	0030      	movs	r0, r6
 8012080:	0039      	movs	r1, r7
 8012082:	f7f0 f927 	bl	80022d4 <__aeabi_dmul>
 8012086:	0004      	movs	r4, r0
 8012088:	000d      	movs	r5, r1
 801208a:	4a54      	ldr	r2, [pc, #336]	; (80121dc <__ieee754_pow+0x9e0>)
 801208c:	4b54      	ldr	r3, [pc, #336]	; (80121e0 <__ieee754_pow+0x9e4>)
 801208e:	f7f0 f921 	bl	80022d4 <__aeabi_dmul>
 8012092:	4a54      	ldr	r2, [pc, #336]	; (80121e4 <__ieee754_pow+0x9e8>)
 8012094:	4b54      	ldr	r3, [pc, #336]	; (80121e8 <__ieee754_pow+0x9ec>)
 8012096:	f7f0 fbdf 	bl	8002858 <__aeabi_dsub>
 801209a:	0022      	movs	r2, r4
 801209c:	002b      	movs	r3, r5
 801209e:	f7f0 f919 	bl	80022d4 <__aeabi_dmul>
 80120a2:	4a52      	ldr	r2, [pc, #328]	; (80121ec <__ieee754_pow+0x9f0>)
 80120a4:	4b52      	ldr	r3, [pc, #328]	; (80121f0 <__ieee754_pow+0x9f4>)
 80120a6:	f7ef f9bb 	bl	8001420 <__aeabi_dadd>
 80120aa:	0022      	movs	r2, r4
 80120ac:	002b      	movs	r3, r5
 80120ae:	f7f0 f911 	bl	80022d4 <__aeabi_dmul>
 80120b2:	4a50      	ldr	r2, [pc, #320]	; (80121f4 <__ieee754_pow+0x9f8>)
 80120b4:	4b50      	ldr	r3, [pc, #320]	; (80121f8 <__ieee754_pow+0x9fc>)
 80120b6:	f7f0 fbcf 	bl	8002858 <__aeabi_dsub>
 80120ba:	0022      	movs	r2, r4
 80120bc:	002b      	movs	r3, r5
 80120be:	f7f0 f909 	bl	80022d4 <__aeabi_dmul>
 80120c2:	4a4e      	ldr	r2, [pc, #312]	; (80121fc <__ieee754_pow+0xa00>)
 80120c4:	4b4e      	ldr	r3, [pc, #312]	; (8012200 <__ieee754_pow+0xa04>)
 80120c6:	f7ef f9ab 	bl	8001420 <__aeabi_dadd>
 80120ca:	0022      	movs	r2, r4
 80120cc:	002b      	movs	r3, r5
 80120ce:	f7f0 f901 	bl	80022d4 <__aeabi_dmul>
 80120d2:	0002      	movs	r2, r0
 80120d4:	000b      	movs	r3, r1
 80120d6:	0030      	movs	r0, r6
 80120d8:	0039      	movs	r1, r7
 80120da:	f7f0 fbbd 	bl	8002858 <__aeabi_dsub>
 80120de:	0004      	movs	r4, r0
 80120e0:	000d      	movs	r5, r1
 80120e2:	0002      	movs	r2, r0
 80120e4:	000b      	movs	r3, r1
 80120e6:	0030      	movs	r0, r6
 80120e8:	0039      	movs	r1, r7
 80120ea:	f7f0 f8f3 	bl	80022d4 <__aeabi_dmul>
 80120ee:	2380      	movs	r3, #128	; 0x80
 80120f0:	9006      	str	r0, [sp, #24]
 80120f2:	9107      	str	r1, [sp, #28]
 80120f4:	2200      	movs	r2, #0
 80120f6:	0020      	movs	r0, r4
 80120f8:	0029      	movs	r1, r5
 80120fa:	05db      	lsls	r3, r3, #23
 80120fc:	f7f0 fbac 	bl	8002858 <__aeabi_dsub>
 8012100:	0002      	movs	r2, r0
 8012102:	000b      	movs	r3, r1
 8012104:	9806      	ldr	r0, [sp, #24]
 8012106:	9907      	ldr	r1, [sp, #28]
 8012108:	f7ef fcea 	bl	8001ae0 <__aeabi_ddiv>
 801210c:	9a04      	ldr	r2, [sp, #16]
 801210e:	9b05      	ldr	r3, [sp, #20]
 8012110:	0004      	movs	r4, r0
 8012112:	000d      	movs	r5, r1
 8012114:	0030      	movs	r0, r6
 8012116:	0039      	movs	r1, r7
 8012118:	f7f0 f8dc 	bl	80022d4 <__aeabi_dmul>
 801211c:	9a04      	ldr	r2, [sp, #16]
 801211e:	9b05      	ldr	r3, [sp, #20]
 8012120:	f7ef f97e 	bl	8001420 <__aeabi_dadd>
 8012124:	0002      	movs	r2, r0
 8012126:	000b      	movs	r3, r1
 8012128:	0020      	movs	r0, r4
 801212a:	0029      	movs	r1, r5
 801212c:	f7f0 fb94 	bl	8002858 <__aeabi_dsub>
 8012130:	0032      	movs	r2, r6
 8012132:	003b      	movs	r3, r7
 8012134:	f7f0 fb90 	bl	8002858 <__aeabi_dsub>
 8012138:	0002      	movs	r2, r0
 801213a:	000b      	movs	r3, r1
 801213c:	2000      	movs	r0, #0
 801213e:	4931      	ldr	r1, [pc, #196]	; (8012204 <__ieee754_pow+0xa08>)
 8012140:	f7f0 fb8a 	bl	8002858 <__aeabi_dsub>
 8012144:	9b02      	ldr	r3, [sp, #8]
 8012146:	051b      	lsls	r3, r3, #20
 8012148:	185b      	adds	r3, r3, r1
 801214a:	151a      	asrs	r2, r3, #20
 801214c:	2a00      	cmp	r2, #0
 801214e:	dc25      	bgt.n	801219c <__ieee754_pow+0x9a0>
 8012150:	9a02      	ldr	r2, [sp, #8]
 8012152:	f000 f861 	bl	8012218 <scalbn>
 8012156:	9a00      	ldr	r2, [sp, #0]
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	f7ff fc33 	bl	80119c4 <__ieee754_pow+0x1c8>
 801215e:	4a2a      	ldr	r2, [pc, #168]	; (8012208 <__ieee754_pow+0xa0c>)
 8012160:	004b      	lsls	r3, r1, #1
 8012162:	085b      	lsrs	r3, r3, #1
 8012164:	4293      	cmp	r3, r2
 8012166:	dc00      	bgt.n	801216a <__ieee754_pow+0x96e>
 8012168:	e717      	b.n	8011f9a <__ieee754_pow+0x79e>
 801216a:	4b28      	ldr	r3, [pc, #160]	; (801220c <__ieee754_pow+0xa10>)
 801216c:	18cb      	adds	r3, r1, r3
 801216e:	4303      	orrs	r3, r0
 8012170:	d008      	beq.n	8012184 <__ieee754_pow+0x988>
 8012172:	9800      	ldr	r0, [sp, #0]
 8012174:	9901      	ldr	r1, [sp, #4]
 8012176:	2300      	movs	r3, #0
 8012178:	2200      	movs	r2, #0
 801217a:	f7ee f96d 	bl	8000458 <__aeabi_dcmplt>
 801217e:	1e43      	subs	r3, r0, #1
 8012180:	4198      	sbcs	r0, r3
 8012182:	e462      	b.n	8011a4a <__ieee754_pow+0x24e>
 8012184:	9a04      	ldr	r2, [sp, #16]
 8012186:	9b05      	ldr	r3, [sp, #20]
 8012188:	f7f0 fb66 	bl	8002858 <__aeabi_dsub>
 801218c:	0032      	movs	r2, r6
 801218e:	003b      	movs	r3, r7
 8012190:	f7ee f980 	bl	8000494 <__aeabi_dcmpge>
 8012194:	2800      	cmp	r0, #0
 8012196:	d100      	bne.n	801219a <__ieee754_pow+0x99e>
 8012198:	e6ff      	b.n	8011f9a <__ieee754_pow+0x79e>
 801219a:	e7ea      	b.n	8012172 <__ieee754_pow+0x976>
 801219c:	0019      	movs	r1, r3
 801219e:	e7da      	b.n	8012156 <__ieee754_pow+0x95a>
 80121a0:	2300      	movs	r3, #0
 80121a2:	4c18      	ldr	r4, [pc, #96]	; (8012204 <__ieee754_pow+0xa08>)
 80121a4:	f7ff fbf1 	bl	801198a <__ieee754_pow+0x18e>
 80121a8:	2300      	movs	r3, #0
 80121aa:	2400      	movs	r4, #0
 80121ac:	f7ff fbed 	bl	801198a <__ieee754_pow+0x18e>
 80121b0:	652b82fe 	.word	0x652b82fe
 80121b4:	3c971547 	.word	0x3c971547
 80121b8:	3fe00000 	.word	0x3fe00000
 80121bc:	fffffc02 	.word	0xfffffc02
 80121c0:	fffffc01 	.word	0xfffffc01
 80121c4:	fff00000 	.word	0xfff00000
 80121c8:	3fe62e43 	.word	0x3fe62e43
 80121cc:	fefa39ef 	.word	0xfefa39ef
 80121d0:	3fe62e42 	.word	0x3fe62e42
 80121d4:	0ca86c39 	.word	0x0ca86c39
 80121d8:	be205c61 	.word	0xbe205c61
 80121dc:	72bea4d0 	.word	0x72bea4d0
 80121e0:	3e663769 	.word	0x3e663769
 80121e4:	c5d26bf1 	.word	0xc5d26bf1
 80121e8:	3ebbbd41 	.word	0x3ebbbd41
 80121ec:	af25de2c 	.word	0xaf25de2c
 80121f0:	3f11566a 	.word	0x3f11566a
 80121f4:	16bebd93 	.word	0x16bebd93
 80121f8:	3f66c16c 	.word	0x3f66c16c
 80121fc:	5555553e 	.word	0x5555553e
 8012200:	3fc55555 	.word	0x3fc55555
 8012204:	3ff00000 	.word	0x3ff00000
 8012208:	4090cbff 	.word	0x4090cbff
 801220c:	3f6f3400 	.word	0x3f6f3400

08012210 <fabs>:
 8012210:	0049      	lsls	r1, r1, #1
 8012212:	084b      	lsrs	r3, r1, #1
 8012214:	0019      	movs	r1, r3
 8012216:	4770      	bx	lr

08012218 <scalbn>:
 8012218:	b570      	push	{r4, r5, r6, lr}
 801221a:	0014      	movs	r4, r2
 801221c:	004a      	lsls	r2, r1, #1
 801221e:	000b      	movs	r3, r1
 8012220:	0d52      	lsrs	r2, r2, #21
 8012222:	d10f      	bne.n	8012244 <scalbn+0x2c>
 8012224:	004b      	lsls	r3, r1, #1
 8012226:	085b      	lsrs	r3, r3, #1
 8012228:	4303      	orrs	r3, r0
 801222a:	d011      	beq.n	8012250 <scalbn+0x38>
 801222c:	4b22      	ldr	r3, [pc, #136]	; (80122b8 <scalbn+0xa0>)
 801222e:	2200      	movs	r2, #0
 8012230:	f7f0 f850 	bl	80022d4 <__aeabi_dmul>
 8012234:	4b21      	ldr	r3, [pc, #132]	; (80122bc <scalbn+0xa4>)
 8012236:	429c      	cmp	r4, r3
 8012238:	da0b      	bge.n	8012252 <scalbn+0x3a>
 801223a:	4a21      	ldr	r2, [pc, #132]	; (80122c0 <scalbn+0xa8>)
 801223c:	4b21      	ldr	r3, [pc, #132]	; (80122c4 <scalbn+0xac>)
 801223e:	f7f0 f849 	bl	80022d4 <__aeabi_dmul>
 8012242:	e005      	b.n	8012250 <scalbn+0x38>
 8012244:	4d20      	ldr	r5, [pc, #128]	; (80122c8 <scalbn+0xb0>)
 8012246:	42aa      	cmp	r2, r5
 8012248:	d107      	bne.n	801225a <scalbn+0x42>
 801224a:	0002      	movs	r2, r0
 801224c:	f7ef f8e8 	bl	8001420 <__aeabi_dadd>
 8012250:	bd70      	pop	{r4, r5, r6, pc}
 8012252:	000b      	movs	r3, r1
 8012254:	004a      	lsls	r2, r1, #1
 8012256:	0d52      	lsrs	r2, r2, #21
 8012258:	3a36      	subs	r2, #54	; 0x36
 801225a:	4d1c      	ldr	r5, [pc, #112]	; (80122cc <scalbn+0xb4>)
 801225c:	42ac      	cmp	r4, r5
 801225e:	dd0a      	ble.n	8012276 <scalbn+0x5e>
 8012260:	4c1b      	ldr	r4, [pc, #108]	; (80122d0 <scalbn+0xb8>)
 8012262:	4d1c      	ldr	r5, [pc, #112]	; (80122d4 <scalbn+0xbc>)
 8012264:	2900      	cmp	r1, #0
 8012266:	da01      	bge.n	801226c <scalbn+0x54>
 8012268:	4c19      	ldr	r4, [pc, #100]	; (80122d0 <scalbn+0xb8>)
 801226a:	4d1b      	ldr	r5, [pc, #108]	; (80122d8 <scalbn+0xc0>)
 801226c:	4a18      	ldr	r2, [pc, #96]	; (80122d0 <scalbn+0xb8>)
 801226e:	4b19      	ldr	r3, [pc, #100]	; (80122d4 <scalbn+0xbc>)
 8012270:	0020      	movs	r0, r4
 8012272:	0029      	movs	r1, r5
 8012274:	e7e3      	b.n	801223e <scalbn+0x26>
 8012276:	18a2      	adds	r2, r4, r2
 8012278:	4c18      	ldr	r4, [pc, #96]	; (80122dc <scalbn+0xc4>)
 801227a:	42a2      	cmp	r2, r4
 801227c:	dcf0      	bgt.n	8012260 <scalbn+0x48>
 801227e:	2a00      	cmp	r2, #0
 8012280:	dd05      	ble.n	801228e <scalbn+0x76>
 8012282:	4c17      	ldr	r4, [pc, #92]	; (80122e0 <scalbn+0xc8>)
 8012284:	0512      	lsls	r2, r2, #20
 8012286:	4023      	ands	r3, r4
 8012288:	4313      	orrs	r3, r2
 801228a:	0019      	movs	r1, r3
 801228c:	e7e0      	b.n	8012250 <scalbn+0x38>
 801228e:	0014      	movs	r4, r2
 8012290:	3435      	adds	r4, #53	; 0x35
 8012292:	da08      	bge.n	80122a6 <scalbn+0x8e>
 8012294:	4c0a      	ldr	r4, [pc, #40]	; (80122c0 <scalbn+0xa8>)
 8012296:	4d0b      	ldr	r5, [pc, #44]	; (80122c4 <scalbn+0xac>)
 8012298:	2900      	cmp	r1, #0
 801229a:	da01      	bge.n	80122a0 <scalbn+0x88>
 801229c:	4c08      	ldr	r4, [pc, #32]	; (80122c0 <scalbn+0xa8>)
 801229e:	4d11      	ldr	r5, [pc, #68]	; (80122e4 <scalbn+0xcc>)
 80122a0:	4a07      	ldr	r2, [pc, #28]	; (80122c0 <scalbn+0xa8>)
 80122a2:	4b08      	ldr	r3, [pc, #32]	; (80122c4 <scalbn+0xac>)
 80122a4:	e7e4      	b.n	8012270 <scalbn+0x58>
 80122a6:	4c0e      	ldr	r4, [pc, #56]	; (80122e0 <scalbn+0xc8>)
 80122a8:	3236      	adds	r2, #54	; 0x36
 80122aa:	4023      	ands	r3, r4
 80122ac:	0512      	lsls	r2, r2, #20
 80122ae:	431a      	orrs	r2, r3
 80122b0:	0011      	movs	r1, r2
 80122b2:	4b0d      	ldr	r3, [pc, #52]	; (80122e8 <scalbn+0xd0>)
 80122b4:	2200      	movs	r2, #0
 80122b6:	e7c2      	b.n	801223e <scalbn+0x26>
 80122b8:	43500000 	.word	0x43500000
 80122bc:	ffff3cb0 	.word	0xffff3cb0
 80122c0:	c2f8f359 	.word	0xc2f8f359
 80122c4:	01a56e1f 	.word	0x01a56e1f
 80122c8:	000007ff 	.word	0x000007ff
 80122cc:	0000c350 	.word	0x0000c350
 80122d0:	8800759c 	.word	0x8800759c
 80122d4:	7e37e43c 	.word	0x7e37e43c
 80122d8:	fe37e43c 	.word	0xfe37e43c
 80122dc:	000007fe 	.word	0x000007fe
 80122e0:	800fffff 	.word	0x800fffff
 80122e4:	81a56e1f 	.word	0x81a56e1f
 80122e8:	3c900000 	.word	0x3c900000

080122ec <with_errno>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	000d      	movs	r5, r1
 80122f0:	0016      	movs	r6, r2
 80122f2:	0004      	movs	r4, r0
 80122f4:	f7fc fd18 	bl	800ed28 <__errno>
 80122f8:	0029      	movs	r1, r5
 80122fa:	6006      	str	r6, [r0, #0]
 80122fc:	0020      	movs	r0, r4
 80122fe:	bd70      	pop	{r4, r5, r6, pc}

08012300 <xflow>:
 8012300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012302:	0015      	movs	r5, r2
 8012304:	001c      	movs	r4, r3
 8012306:	2800      	cmp	r0, #0
 8012308:	d010      	beq.n	801232c <xflow+0x2c>
 801230a:	2380      	movs	r3, #128	; 0x80
 801230c:	0010      	movs	r0, r2
 801230e:	061b      	lsls	r3, r3, #24
 8012310:	18e1      	adds	r1, r4, r3
 8012312:	9000      	str	r0, [sp, #0]
 8012314:	9101      	str	r1, [sp, #4]
 8012316:	9a00      	ldr	r2, [sp, #0]
 8012318:	9b01      	ldr	r3, [sp, #4]
 801231a:	0028      	movs	r0, r5
 801231c:	0021      	movs	r1, r4
 801231e:	f7ef ffd9 	bl	80022d4 <__aeabi_dmul>
 8012322:	2222      	movs	r2, #34	; 0x22
 8012324:	f7ff ffe2 	bl	80122ec <with_errno>
 8012328:	b003      	add	sp, #12
 801232a:	bd30      	pop	{r4, r5, pc}
 801232c:	0010      	movs	r0, r2
 801232e:	0019      	movs	r1, r3
 8012330:	e7ef      	b.n	8012312 <xflow+0x12>

08012332 <__math_uflow>:
 8012332:	2380      	movs	r3, #128	; 0x80
 8012334:	b510      	push	{r4, lr}
 8012336:	2200      	movs	r2, #0
 8012338:	055b      	lsls	r3, r3, #21
 801233a:	f7ff ffe1 	bl	8012300 <xflow>
 801233e:	bd10      	pop	{r4, pc}

08012340 <__math_oflow>:
 8012340:	23e0      	movs	r3, #224	; 0xe0
 8012342:	b510      	push	{r4, lr}
 8012344:	2200      	movs	r2, #0
 8012346:	05db      	lsls	r3, r3, #23
 8012348:	f7ff ffda 	bl	8012300 <xflow>
 801234c:	bd10      	pop	{r4, pc}
	...

08012350 <__ieee754_sqrt>:
 8012350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012352:	000a      	movs	r2, r1
 8012354:	000c      	movs	r4, r1
 8012356:	496f      	ldr	r1, [pc, #444]	; (8012514 <__ieee754_sqrt+0x1c4>)
 8012358:	0005      	movs	r5, r0
 801235a:	0003      	movs	r3, r0
 801235c:	0008      	movs	r0, r1
 801235e:	b087      	sub	sp, #28
 8012360:	4020      	ands	r0, r4
 8012362:	4288      	cmp	r0, r1
 8012364:	d111      	bne.n	801238a <__ieee754_sqrt+0x3a>
 8012366:	002a      	movs	r2, r5
 8012368:	0023      	movs	r3, r4
 801236a:	0028      	movs	r0, r5
 801236c:	0021      	movs	r1, r4
 801236e:	f7ef ffb1 	bl	80022d4 <__aeabi_dmul>
 8012372:	0002      	movs	r2, r0
 8012374:	000b      	movs	r3, r1
 8012376:	0028      	movs	r0, r5
 8012378:	0021      	movs	r1, r4
 801237a:	f7ef f851 	bl	8001420 <__aeabi_dadd>
 801237e:	0005      	movs	r5, r0
 8012380:	000c      	movs	r4, r1
 8012382:	0028      	movs	r0, r5
 8012384:	0021      	movs	r1, r4
 8012386:	b007      	add	sp, #28
 8012388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801238a:	2c00      	cmp	r4, #0
 801238c:	dc12      	bgt.n	80123b4 <__ieee754_sqrt+0x64>
 801238e:	0061      	lsls	r1, r4, #1
 8012390:	0849      	lsrs	r1, r1, #1
 8012392:	4329      	orrs	r1, r5
 8012394:	d0f5      	beq.n	8012382 <__ieee754_sqrt+0x32>
 8012396:	2100      	movs	r1, #0
 8012398:	428c      	cmp	r4, r1
 801239a:	d100      	bne.n	801239e <__ieee754_sqrt+0x4e>
 801239c:	e09f      	b.n	80124de <__ieee754_sqrt+0x18e>
 801239e:	002a      	movs	r2, r5
 80123a0:	0023      	movs	r3, r4
 80123a2:	0028      	movs	r0, r5
 80123a4:	0021      	movs	r1, r4
 80123a6:	f7f0 fa57 	bl	8002858 <__aeabi_dsub>
 80123aa:	0002      	movs	r2, r0
 80123ac:	000b      	movs	r3, r1
 80123ae:	f7ef fb97 	bl	8001ae0 <__aeabi_ddiv>
 80123b2:	e7e4      	b.n	801237e <__ieee754_sqrt+0x2e>
 80123b4:	1521      	asrs	r1, r4, #20
 80123b6:	d100      	bne.n	80123ba <__ieee754_sqrt+0x6a>
 80123b8:	e091      	b.n	80124de <__ieee754_sqrt+0x18e>
 80123ba:	4857      	ldr	r0, [pc, #348]	; (8012518 <__ieee754_sqrt+0x1c8>)
 80123bc:	0312      	lsls	r2, r2, #12
 80123be:	180c      	adds	r4, r1, r0
 80123c0:	2080      	movs	r0, #128	; 0x80
 80123c2:	0b12      	lsrs	r2, r2, #12
 80123c4:	0340      	lsls	r0, r0, #13
 80123c6:	4310      	orrs	r0, r2
 80123c8:	07c9      	lsls	r1, r1, #31
 80123ca:	d403      	bmi.n	80123d4 <__ieee754_sqrt+0x84>
 80123cc:	0fda      	lsrs	r2, r3, #31
 80123ce:	0040      	lsls	r0, r0, #1
 80123d0:	1810      	adds	r0, r2, r0
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	2500      	movs	r5, #0
 80123d6:	1062      	asrs	r2, r4, #1
 80123d8:	0040      	lsls	r0, r0, #1
 80123da:	2480      	movs	r4, #128	; 0x80
 80123dc:	9205      	str	r2, [sp, #20]
 80123de:	0fda      	lsrs	r2, r3, #31
 80123e0:	1812      	adds	r2, r2, r0
 80123e2:	0029      	movs	r1, r5
 80123e4:	2016      	movs	r0, #22
 80123e6:	005b      	lsls	r3, r3, #1
 80123e8:	03a4      	lsls	r4, r4, #14
 80123ea:	190e      	adds	r6, r1, r4
 80123ec:	4296      	cmp	r6, r2
 80123ee:	dc02      	bgt.n	80123f6 <__ieee754_sqrt+0xa6>
 80123f0:	1931      	adds	r1, r6, r4
 80123f2:	1b92      	subs	r2, r2, r6
 80123f4:	192d      	adds	r5, r5, r4
 80123f6:	0fde      	lsrs	r6, r3, #31
 80123f8:	0052      	lsls	r2, r2, #1
 80123fa:	3801      	subs	r0, #1
 80123fc:	18b2      	adds	r2, r6, r2
 80123fe:	005b      	lsls	r3, r3, #1
 8012400:	0864      	lsrs	r4, r4, #1
 8012402:	2800      	cmp	r0, #0
 8012404:	d1f1      	bne.n	80123ea <__ieee754_sqrt+0x9a>
 8012406:	2620      	movs	r6, #32
 8012408:	2780      	movs	r7, #128	; 0x80
 801240a:	0004      	movs	r4, r0
 801240c:	9604      	str	r6, [sp, #16]
 801240e:	063f      	lsls	r7, r7, #24
 8012410:	183e      	adds	r6, r7, r0
 8012412:	46b4      	mov	ip, r6
 8012414:	428a      	cmp	r2, r1
 8012416:	dc02      	bgt.n	801241e <__ieee754_sqrt+0xce>
 8012418:	d114      	bne.n	8012444 <__ieee754_sqrt+0xf4>
 801241a:	429e      	cmp	r6, r3
 801241c:	d812      	bhi.n	8012444 <__ieee754_sqrt+0xf4>
 801241e:	4660      	mov	r0, ip
 8012420:	4666      	mov	r6, ip
 8012422:	19c0      	adds	r0, r0, r7
 8012424:	9100      	str	r1, [sp, #0]
 8012426:	2e00      	cmp	r6, #0
 8012428:	da03      	bge.n	8012432 <__ieee754_sqrt+0xe2>
 801242a:	43c6      	mvns	r6, r0
 801242c:	0ff6      	lsrs	r6, r6, #31
 801242e:	198e      	adds	r6, r1, r6
 8012430:	9600      	str	r6, [sp, #0]
 8012432:	1a52      	subs	r2, r2, r1
 8012434:	4563      	cmp	r3, ip
 8012436:	4189      	sbcs	r1, r1
 8012438:	4249      	negs	r1, r1
 801243a:	1a52      	subs	r2, r2, r1
 801243c:	4661      	mov	r1, ip
 801243e:	1a5b      	subs	r3, r3, r1
 8012440:	9900      	ldr	r1, [sp, #0]
 8012442:	19e4      	adds	r4, r4, r7
 8012444:	0fde      	lsrs	r6, r3, #31
 8012446:	0052      	lsls	r2, r2, #1
 8012448:	18b2      	adds	r2, r6, r2
 801244a:	9e04      	ldr	r6, [sp, #16]
 801244c:	005b      	lsls	r3, r3, #1
 801244e:	3e01      	subs	r6, #1
 8012450:	087f      	lsrs	r7, r7, #1
 8012452:	9604      	str	r6, [sp, #16]
 8012454:	2e00      	cmp	r6, #0
 8012456:	d1db      	bne.n	8012410 <__ieee754_sqrt+0xc0>
 8012458:	431a      	orrs	r2, r3
 801245a:	d01f      	beq.n	801249c <__ieee754_sqrt+0x14c>
 801245c:	4e2f      	ldr	r6, [pc, #188]	; (801251c <__ieee754_sqrt+0x1cc>)
 801245e:	4f30      	ldr	r7, [pc, #192]	; (8012520 <__ieee754_sqrt+0x1d0>)
 8012460:	6830      	ldr	r0, [r6, #0]
 8012462:	6871      	ldr	r1, [r6, #4]
 8012464:	683a      	ldr	r2, [r7, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	9200      	str	r2, [sp, #0]
 801246a:	9301      	str	r3, [sp, #4]
 801246c:	6832      	ldr	r2, [r6, #0]
 801246e:	6873      	ldr	r3, [r6, #4]
 8012470:	9202      	str	r2, [sp, #8]
 8012472:	9303      	str	r3, [sp, #12]
 8012474:	9a00      	ldr	r2, [sp, #0]
 8012476:	9b01      	ldr	r3, [sp, #4]
 8012478:	f7f0 f9ee 	bl	8002858 <__aeabi_dsub>
 801247c:	0002      	movs	r2, r0
 801247e:	000b      	movs	r3, r1
 8012480:	9802      	ldr	r0, [sp, #8]
 8012482:	9903      	ldr	r1, [sp, #12]
 8012484:	f7ed fff2 	bl	800046c <__aeabi_dcmple>
 8012488:	2800      	cmp	r0, #0
 801248a:	d007      	beq.n	801249c <__ieee754_sqrt+0x14c>
 801248c:	6830      	ldr	r0, [r6, #0]
 801248e:	6871      	ldr	r1, [r6, #4]
 8012490:	683a      	ldr	r2, [r7, #0]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	1c67      	adds	r7, r4, #1
 8012496:	d127      	bne.n	80124e8 <__ieee754_sqrt+0x198>
 8012498:	9c04      	ldr	r4, [sp, #16]
 801249a:	3501      	adds	r5, #1
 801249c:	4b21      	ldr	r3, [pc, #132]	; (8012524 <__ieee754_sqrt+0x1d4>)
 801249e:	1069      	asrs	r1, r5, #1
 80124a0:	18c9      	adds	r1, r1, r3
 80124a2:	0864      	lsrs	r4, r4, #1
 80124a4:	07ed      	lsls	r5, r5, #31
 80124a6:	d502      	bpl.n	80124ae <__ieee754_sqrt+0x15e>
 80124a8:	2380      	movs	r3, #128	; 0x80
 80124aa:	061b      	lsls	r3, r3, #24
 80124ac:	431c      	orrs	r4, r3
 80124ae:	9b05      	ldr	r3, [sp, #20]
 80124b0:	0025      	movs	r5, r4
 80124b2:	0518      	lsls	r0, r3, #20
 80124b4:	1843      	adds	r3, r0, r1
 80124b6:	001c      	movs	r4, r3
 80124b8:	e763      	b.n	8012382 <__ieee754_sqrt+0x32>
 80124ba:	0ada      	lsrs	r2, r3, #11
 80124bc:	3815      	subs	r0, #21
 80124be:	055b      	lsls	r3, r3, #21
 80124c0:	2a00      	cmp	r2, #0
 80124c2:	d0fa      	beq.n	80124ba <__ieee754_sqrt+0x16a>
 80124c4:	2480      	movs	r4, #128	; 0x80
 80124c6:	0364      	lsls	r4, r4, #13
 80124c8:	4222      	tst	r2, r4
 80124ca:	d00a      	beq.n	80124e2 <__ieee754_sqrt+0x192>
 80124cc:	2420      	movs	r4, #32
 80124ce:	001e      	movs	r6, r3
 80124d0:	1a64      	subs	r4, r4, r1
 80124d2:	40e6      	lsrs	r6, r4
 80124d4:	1e4d      	subs	r5, r1, #1
 80124d6:	408b      	lsls	r3, r1
 80124d8:	4332      	orrs	r2, r6
 80124da:	1b41      	subs	r1, r0, r5
 80124dc:	e76d      	b.n	80123ba <__ieee754_sqrt+0x6a>
 80124de:	2000      	movs	r0, #0
 80124e0:	e7ee      	b.n	80124c0 <__ieee754_sqrt+0x170>
 80124e2:	0052      	lsls	r2, r2, #1
 80124e4:	3101      	adds	r1, #1
 80124e6:	e7ef      	b.n	80124c8 <__ieee754_sqrt+0x178>
 80124e8:	f7ee ff9a 	bl	8001420 <__aeabi_dadd>
 80124ec:	6877      	ldr	r7, [r6, #4]
 80124ee:	6836      	ldr	r6, [r6, #0]
 80124f0:	0002      	movs	r2, r0
 80124f2:	000b      	movs	r3, r1
 80124f4:	0030      	movs	r0, r6
 80124f6:	0039      	movs	r1, r7
 80124f8:	f7ed ffae 	bl	8000458 <__aeabi_dcmplt>
 80124fc:	2800      	cmp	r0, #0
 80124fe:	d004      	beq.n	801250a <__ieee754_sqrt+0x1ba>
 8012500:	3402      	adds	r4, #2
 8012502:	4263      	negs	r3, r4
 8012504:	4163      	adcs	r3, r4
 8012506:	18ed      	adds	r5, r5, r3
 8012508:	e7c8      	b.n	801249c <__ieee754_sqrt+0x14c>
 801250a:	2301      	movs	r3, #1
 801250c:	3401      	adds	r4, #1
 801250e:	439c      	bics	r4, r3
 8012510:	e7c4      	b.n	801249c <__ieee754_sqrt+0x14c>
 8012512:	46c0      	nop			; (mov r8, r8)
 8012514:	7ff00000 	.word	0x7ff00000
 8012518:	fffffc01 	.word	0xfffffc01
 801251c:	200002f8 	.word	0x200002f8
 8012520:	20000300 	.word	0x20000300
 8012524:	3fe00000 	.word	0x3fe00000

08012528 <_init>:
 8012528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801252a:	46c0      	nop			; (mov r8, r8)
 801252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801252e:	bc08      	pop	{r3}
 8012530:	469e      	mov	lr, r3
 8012532:	4770      	bx	lr

08012534 <_fini>:
 8012534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012536:	46c0      	nop			; (mov r8, r8)
 8012538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801253a:	bc08      	pop	{r3}
 801253c:	469e      	mov	lr, r3
 801253e:	4770      	bx	lr
