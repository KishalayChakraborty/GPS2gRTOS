
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120b0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b8  08012170  08012170  00022170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a28  08013a28  000302d0  2**0
                  CONTENTS
  4 .ARM          00000000  08013a28  08013a28  000302d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013a28  08013a28  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a28  08013a28  00023a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a2c  08013a2c  00023a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  08013a30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006388  200002d0  08013d00  000302d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006658  08013d00  00036658  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000400ce  00000000  00000000  0003033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e18  00000000  00000000  00070409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001b750  00000000  00000000  00076221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be0  00000000  00000000  00091978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000316f  00000000  00000000  00093558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000621f  00000000  00000000  000966c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003925f  00000000  00000000  0009c8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000abf1b  00000000  00000000  000d5b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007620  00000000  00000000  00181a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00189080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002d0 	.word	0x200002d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012158 	.word	0x08012158

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002d4 	.word	0x200002d4
 8000104:	08012158 	.word	0x08012158

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	0801222c 	.word	0x0801222c
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	0801226c 	.word	0x0801226c

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	080122ac 	.word	0x080122ac
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <Debug_Tx>:



static void Debug_Tx(char _out[]){

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003288:	220c      	movs	r2, #12
static void Debug_Tx(char _out[]){
 800328a:	b530      	push	{r4, r5, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800328c:	4d0b      	ldr	r5, [pc, #44]	; (80032bc <Debug_Tx+0x34>)
static void Debug_Tx(char _out[]){
 800328e:	b083      	sub	sp, #12
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003290:	682b      	ldr	r3, [r5, #0]
static void Debug_Tx(char _out[]){
 8003292:	0004      	movs	r4, r0
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003294:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003296:	f7fc ff37 	bl	8000108 <strlen>
 800329a:	0021      	movs	r1, r4
 800329c:	b282      	uxth	r2, r0
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <Debug_Tx+0x38>)
 80032a0:	0028      	movs	r0, r5
 80032a2:	f007 faf1 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <Debug_Tx+0x3c>)
 80032a8:	a901      	add	r1, sp, #4
 80032aa:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80032ac:	2202      	movs	r2, #2
 80032ae:	230a      	movs	r3, #10
 80032b0:	0028      	movs	r0, r5
 80032b2:	f007 fae9 	bl	800a888 <HAL_UART_Transmit>


}
 80032b6:	b003      	add	sp, #12
 80032b8:	bd30      	pop	{r4, r5, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	200049e8 	.word	0x200049e8
 80032c0:	00001388 	.word	0x00001388
 80032c4:	00000a0d 	.word	0x00000a0d

080032c8 <StartTask02>:
{
 80032c8:	b510      	push	{r4, lr}
while(1){osDelay(1);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f007 fe00 	bl	800aed0 <osDelay>
 80032d0:	e7fb      	b.n	80032ca <StartTask02+0x2>
 80032d2:	46c0      	nop			; (mov r8, r8)

080032d4 <readAcc.isra.0>:





static float* readAcc(){
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}

	ACC_GYRO_data[0]=0;
 80032d6:	2300      	movs	r3, #0
static float* readAcc(){
 80032d8:	46de      	mov	lr, fp
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
 80032de:	4645      	mov	r5, r8
	ACC_GYRO_data[0]=0;
 80032e0:	4c4d      	ldr	r4, [pc, #308]	; (8003418 <readAcc.isra.0+0x144>)
static float* readAcc(){
 80032e2:	b5e0      	push	{r5, r6, r7, lr}
	ACC_GYRO_data[0]=0;
 80032e4:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=0;
 80032e6:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=0;
 80032e8:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=0;
 80032ea:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=0;
 80032ec:	6123      	str	r3, [r4, #16]
	ACC_GYRO_data[5]=0;
 80032ee:	6163      	str	r3, [r4, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80032f0:	23fa      	movs	r3, #250	; 0xfa
static float* readAcc(){
 80032f2:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	469b      	mov	fp, r3
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	2306      	movs	r3, #6
 80032fc:	4e47      	ldr	r6, [pc, #284]	; (800341c <readAcc.isra.0+0x148>)
 80032fe:	ad04      	add	r5, sp, #16
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	9500      	str	r5, [sp, #0]
 8003304:	223b      	movs	r2, #59	; 0x3b
 8003306:	21d0      	movs	r1, #208	; 0xd0
 8003308:	0030      	movs	r0, r6
 800330a:	3b05      	subs	r3, #5
 800330c:	f005 fb10 	bl	8008930 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003310:	8828      	ldrh	r0, [r5, #0]
 8003312:	4b43      	ldr	r3, [pc, #268]	; (8003420 <readAcc.isra.0+0x14c>)
 8003314:	ba42      	rev16	r2, r0
 8003316:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003318:	886b      	ldrh	r3, [r5, #2]
 800331a:	bac0      	revsh	r0, r0
 800331c:	ba5a      	rev16	r2, r3
 800331e:	bad9      	revsh	r1, r3
 8003320:	4b40      	ldr	r3, [pc, #256]	; (8003424 <readAcc.isra.0+0x150>)
 8003322:	4689      	mov	r9, r1
 8003324:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003326:	88ab      	ldrh	r3, [r5, #4]
 8003328:	ba5a      	rev16	r2, r3
 800332a:	bad9      	revsh	r1, r3
 800332c:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <readAcc.isra.0+0x154>)
 800332e:	468a      	mov	sl, r1
 8003330:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8003332:	4a3e      	ldr	r2, [pc, #248]	; (800342c <readAcc.isra.0+0x158>)
 8003334:	4690      	mov	r8, r2
 8003336:	f7ff fe65 	bl	8003004 <__aeabi_i2d>
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <readAcc.isra.0+0x15c>)
 800333c:	2200      	movs	r2, #0
 800333e:	f7fe ffc9 	bl	80022d4 <__aeabi_dmul>
 8003342:	f7ff fefd 	bl	8003140 <__aeabi_d2f>
 8003346:	4642      	mov	r2, r8
 8003348:	6010      	str	r0, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800334a:	4648      	mov	r0, r9
 800334c:	f7ff fe5a 	bl	8003004 <__aeabi_i2d>
 8003350:	4b37      	ldr	r3, [pc, #220]	; (8003430 <readAcc.isra.0+0x15c>)
 8003352:	2200      	movs	r2, #0
 8003354:	f7fe ffbe 	bl	80022d4 <__aeabi_dmul>
 8003358:	f7ff fef2 	bl	8003140 <__aeabi_d2f>
	Az = Accel_Z_RAW/16384.0;
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <readAcc.isra.0+0x160>)
	Ay = Accel_Y_RAW/16384.0;
 800335e:	4f36      	ldr	r7, [pc, #216]	; (8003438 <readAcc.isra.0+0x164>)
	Az = Accel_Z_RAW/16384.0;
 8003360:	4691      	mov	r9, r2
	Ay = Accel_Y_RAW/16384.0;
 8003362:	6038      	str	r0, [r7, #0]
	Az = Accel_Z_RAW/16384.0;
 8003364:	4650      	mov	r0, sl
 8003366:	f7ff fe4d 	bl	8003004 <__aeabi_i2d>
 800336a:	2200      	movs	r2, #0
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <readAcc.isra.0+0x15c>)
 800336e:	f7fe ffb1 	bl	80022d4 <__aeabi_dmul>
 8003372:	f7ff fee5 	bl	8003140 <__aeabi_d2f>
 8003376:	464a      	mov	r2, r9


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8003378:	2306      	movs	r3, #6
	Az = Accel_Z_RAW/16384.0;
 800337a:	6010      	str	r0, [r2, #0]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800337c:	465a      	mov	r2, fp
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	9500      	str	r5, [sp, #0]
 8003384:	2243      	movs	r2, #67	; 0x43
 8003386:	21d0      	movs	r1, #208	; 0xd0
 8003388:	0030      	movs	r0, r6
 800338a:	3b05      	subs	r3, #5
 800338c:	f005 fad0 	bl	8008930 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003390:	8828      	ldrh	r0, [r5, #0]
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <readAcc.isra.0+0x168>)
 8003394:	886e      	ldrh	r6, [r5, #2]
 8003396:	ba42      	rev16	r2, r0
 8003398:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <readAcc.isra.0+0x16c>)
 800339c:	88ad      	ldrh	r5, [r5, #4]
 800339e:	ba72      	rev16	r2, r6
 80033a0:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <readAcc.isra.0+0x170>)
 80033a4:	ba6a      	rev16	r2, r5
 80033a6:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 80033a8:	bac0      	revsh	r0, r0
 80033aa:	f7ff fe2b 	bl	8003004 <__aeabi_i2d>
 80033ae:	2200      	movs	r2, #0
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <readAcc.isra.0+0x174>)
 80033b2:	f7fe fb95 	bl	8001ae0 <__aeabi_ddiv>
 80033b6:	f7ff fec3 	bl	8003140 <__aeabi_d2f>
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <readAcc.isra.0+0x178>)
 80033bc:	baf6      	revsh	r6, r6
 80033be:	4682      	mov	sl, r0
 80033c0:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80033c2:	0030      	movs	r0, r6
 80033c4:	f7ff fe1e 	bl	8003004 <__aeabi_i2d>
 80033c8:	2200      	movs	r2, #0
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <readAcc.isra.0+0x174>)
 80033cc:	f7fe fb88 	bl	8001ae0 <__aeabi_ddiv>
 80033d0:	f7ff feb6 	bl	8003140 <__aeabi_d2f>
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <readAcc.isra.0+0x17c>)
 80033d6:	baed      	revsh	r5, r5
 80033d8:	1c06      	adds	r6, r0, #0
 80033da:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80033dc:	0028      	movs	r0, r5
 80033de:	f7ff fe11 	bl	8003004 <__aeabi_i2d>
 80033e2:	2200      	movs	r2, #0
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <readAcc.isra.0+0x174>)
 80033e6:	f7fe fb7b 	bl	8001ae0 <__aeabi_ddiv>
 80033ea:	f7ff fea9 	bl	8003140 <__aeabi_d2f>
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <readAcc.isra.0+0x180>)
	ACC_GYRO_data[0]=Ax;
	ACC_GYRO_data[1]=Ay;
	ACC_GYRO_data[2]=Az;
	ACC_GYRO_data[3]=Gx;
	ACC_GYRO_data[4]=Gy;
 80033f0:	6126      	str	r6, [r4, #16]
	Gz = Gyro_Z_RAW/131.0;
 80033f2:	6018      	str	r0, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 80033f4:	4643      	mov	r3, r8
 80033f6:	681b      	ldr	r3, [r3, #0]
	ACC_GYRO_data[5]=Gz;
 80033f8:	6160      	str	r0, [r4, #20]
	ACC_GYRO_data[0]=Ax;
 80033fa:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=Ay;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=Az;
 8003400:	464b      	mov	r3, r9
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=Gx;
 8003406:	4653      	mov	r3, sl
 8003408:	60e3      	str	r3, [r4, #12]
	return(ACC_GYRO_data);

	//sprintf (buf, "%.2f", Ax);
}
 800340a:	b007      	add	sp, #28
 800340c:	bcf0      	pop	{r4, r5, r6, r7}
 800340e:	46bb      	mov	fp, r7
 8003410:	46b2      	mov	sl, r6
 8003412:	46a9      	mov	r9, r5
 8003414:	46a0      	mov	r8, r4
 8003416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003418:	200002ec 	.word	0x200002ec
 800341c:	200047bc 	.word	0x200047bc
 8003420:	20000320 	.word	0x20000320
 8003424:	20000322 	.word	0x20000322
 8003428:	20000324 	.word	0x20000324
 800342c:	20000328 	.word	0x20000328
 8003430:	3f100000 	.word	0x3f100000
 8003434:	20000330 	.word	0x20000330
 8003438:	2000032c 	.word	0x2000032c
 800343c:	20001df8 	.word	0x20001df8
 8003440:	20001dfa 	.word	0x20001dfa
 8003444:	20001dfc 	.word	0x20001dfc
 8003448:	40606000 	.word	0x40606000
 800344c:	20001df0 	.word	0x20001df0
 8003450:	20001df4 	.word	0x20001df4
 8003454:	20001e00 	.word	0x20001e00

08003458 <StartTask03>:
 8003458:	b510      	push	{r4, lr}
 800345a:	2001      	movs	r0, #1
 800345c:	f007 fd38 	bl	800aed0 <osDelay>
 8003460:	e7fb      	b.n	800345a <StartTask03+0x2>
 8003462:	46c0      	nop			; (mov r8, r8)

08003464 <RestartGSM>:
	}
	return 1;
}

void RestartGSM()
{
 8003464:	b570      	push	{r4, r5, r6, lr}
	SET_GSM_VCC_EN(1);
	SET_PWRKEY(0);
	HAL_Delay(700);
 8003466:	25af      	movs	r5, #175	; 0xaf
	SET_PWRKEY(1);
	HAL_Delay(500);
 8003468:	26fa      	movs	r6, #250	; 0xfa
	}
}

static void SET_GSM_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800346a:	4c1f      	ldr	r4, [pc, #124]	; (80034e8 <RestartGSM+0x84>)
 800346c:	2201      	movs	r2, #1
 800346e:	0020      	movs	r0, r4
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	f004 ffdd 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 8003476:	00ad      	lsls	r5, r5, #2
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	0020      	movs	r0, r4
 800347e:	f004 ffd7 	bl	8008430 <HAL_GPIO_WritePin>
 8003482:	0028      	movs	r0, r5
 8003484:	f004 f90c 	bl	80076a0 <HAL_Delay>
	HAL_Delay(500);
 8003488:	0076      	lsls	r6, r6, #1
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800348a:	2201      	movs	r2, #1
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	0020      	movs	r0, r4
 8003490:	f004 ffce 	bl	8008430 <HAL_GPIO_WritePin>
 8003494:	0030      	movs	r0, r6
 8003496:	f004 f903 	bl	80076a0 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800349a:	2200      	movs	r2, #0
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	0020      	movs	r0, r4
 80034a0:	f004 ffc6 	bl	8008430 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
	HAL_Delay(700);
 80034a4:	0028      	movs	r0, r5
 80034a6:	f004 f8fb 	bl	80076a0 <HAL_Delay>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	0020      	movs	r0, r4
 80034b0:	f004 ffbe 	bl	8008430 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(0);
	HAL_Delay(700);
 80034b4:	0028      	movs	r0, r5
 80034b6:	f004 f8f3 	bl	80076a0 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80034ba:	2201      	movs	r2, #1
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	0020      	movs	r0, r4
 80034c0:	f004 ffb6 	bl	8008430 <HAL_GPIO_WritePin>
	SET_PWRKEY(1);
	HAL_Delay(500);
 80034c4:	0030      	movs	r0, r6
 80034c6:	f004 f8eb 	bl	80076a0 <HAL_Delay>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2140      	movs	r1, #64	; 0x40
 80034ce:	0020      	movs	r0, r4
 80034d0:	f004 ffae 	bl	8008430 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(1);
	HAL_Delay(200);
 80034d4:	20c8      	movs	r0, #200	; 0xc8
 80034d6:	f004 f8e3 	bl	80076a0 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80034da:	2200      	movs	r2, #0
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	0020      	movs	r0, r4
 80034e0:	f004 ffa6 	bl	8008430 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
}
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	50000800 	.word	0x50000800

080034ec <SendGSMCode>:

void SendGSMCode(const char cmd[])
{
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	46c6      	mov	lr, r8

	memset(GSMData, 0, 990);
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80034f0:	270c      	movs	r7, #12
{
 80034f2:	0005      	movs	r5, r0
 80034f4:	b500      	push	{lr}
	memset(GSMData, 0, 990);
 80034f6:	2100      	movs	r1, #0
{
 80034f8:	b082      	sub	sp, #8
	memset(GSMData, 0, 990);
 80034fa:	4a24      	ldr	r2, [pc, #144]	; (800358c <SendGSMCode+0xa0>)
 80034fc:	4824      	ldr	r0, [pc, #144]	; (8003590 <SendGSMCode+0xa4>)
 80034fe:	f00b f899 	bl	800e634 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <SendGSMCode+0xa8>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003504:	4e24      	ldr	r6, [pc, #144]	; (8003598 <SendGSMCode+0xac>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003506:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003508:	2201      	movs	r2, #1
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800350a:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800350c:	4923      	ldr	r1, [pc, #140]	; (800359c <SendGSMCode+0xb0>)
 800350e:	0030      	movs	r0, r6
 8003510:	f007 fb88 	bl	800ac24 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 100);
 8003514:	4c22      	ldr	r4, [pc, #136]	; (80035a0 <SendGSMCode+0xb4>)
 8003516:	2264      	movs	r2, #100	; 0x64
 8003518:	2100      	movs	r1, #0
 800351a:	0020      	movs	r0, r4
 800351c:	f00b f88a 	bl	800e634 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 8003520:	0028      	movs	r0, r5
 8003522:	f7fc fdf1 	bl	8000108 <strlen>
 8003526:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <SendGSMCode+0xb8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <SendGSMCode+0x46>
 800352e:	285a      	cmp	r0, #90	; 0x5a
 8003530:	d818      	bhi.n	8003564 <SendGSMCode+0x78>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 8003532:	0029      	movs	r1, r5
 8003534:	0020      	movs	r0, r4
 8003536:	f00b f943 	bl	800e7c0 <stpcpy>
	strcat(GSMTXC, "\r\n");
 800353a:	491b      	ldr	r1, [pc, #108]	; (80035a8 <SendGSMCode+0xbc>)
 800353c:	2203      	movs	r2, #3
 800353e:	f00b fa4b 	bl	800e9d8 <memcpy>




static void GSM_Tx(const char _out[]){
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003542:	220c      	movs	r2, #12
 8003544:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003546:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003548:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800354a:	f7fc fddd 	bl	8000108 <strlen>
 800354e:	2396      	movs	r3, #150	; 0x96
 8003550:	b282      	uxth	r2, r0
 8003552:	0021      	movs	r1, r4
 8003554:	0030      	movs	r0, r6
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	f007 f996 	bl	800a888 <HAL_UART_Transmit>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
	// return GSM_Rx();
}
 800355c:	b002      	add	sp, #8
 800355e:	bc80      	pop	{r7}
 8003560:	46b8      	mov	r8, r7
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <SendGSMCode+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003566:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003568:	4698      	mov	r8, r3
 800356a:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800356c:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800356e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003570:	490f      	ldr	r1, [pc, #60]	; (80035b0 <SendGSMCode+0xc4>)
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <SendGSMCode+0xc8>)
 8003574:	f007 f988 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <SendGSMCode+0xcc>)
 800357a:	a901      	add	r1, sp, #4
 800357c:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800357e:	2202      	movs	r2, #2
 8003580:	230a      	movs	r3, #10
 8003582:	4640      	mov	r0, r8
 8003584:	f007 f980 	bl	800a888 <HAL_UART_Transmit>
}
 8003588:	e7d3      	b.n	8003532 <SendGSMCode+0x46>
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	000003de 	.word	0x000003de
 8003590:	20000550 	.word	0x20000550
 8003594:	20004954 	.word	0x20004954
 8003598:	200048c0 	.word	0x200048c0
 800359c:	2000054c 	.word	0x2000054c
 80035a0:	20001d8c 	.word	0x20001d8c
 80035a4:	200000c4 	.word	0x200000c4
 80035a8:	0801230c 	.word	0x0801230c
 80035ac:	200049e8 	.word	0x200049e8
 80035b0:	080122ec 	.word	0x080122ec
 80035b4:	00001388 	.word	0x00001388
 80035b8:	00000a0d 	.word	0x00000a0d

080035bc <SendGSMCodeL>:
	GSM_Tx(cmd);
	// return GSM_Rx();
}

void SendGSMCodeL(const char cmd[])
{
 80035bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035be:	46c6      	mov	lr, r8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80035c0:	270c      	movs	r7, #12
{
 80035c2:	0005      	movs	r5, r0
 80035c4:	b500      	push	{lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <SendGSMCodeL+0xa0>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80035c8:	4e25      	ldr	r6, [pc, #148]	; (8003660 <SendGSMCodeL+0xa4>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80035ca:	681b      	ldr	r3, [r3, #0]
{
 80035cc:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80035ce:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80035d0:	2201      	movs	r2, #1
 80035d2:	4924      	ldr	r1, [pc, #144]	; (8003664 <SendGSMCodeL+0xa8>)
 80035d4:	0030      	movs	r0, r6
 80035d6:	f007 fb25 	bl	800ac24 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 80035da:	2100      	movs	r1, #0
 80035dc:	4a22      	ldr	r2, [pc, #136]	; (8003668 <SendGSMCodeL+0xac>)
 80035de:	4823      	ldr	r0, [pc, #140]	; (800366c <SendGSMCodeL+0xb0>)
 80035e0:	f00b f828 	bl	800e634 <memset>
	memset(GSMTXC, 0, 100);
 80035e4:	4c22      	ldr	r4, [pc, #136]	; (8003670 <SendGSMCodeL+0xb4>)
 80035e6:	2264      	movs	r2, #100	; 0x64
 80035e8:	2100      	movs	r1, #0
 80035ea:	0020      	movs	r0, r4
 80035ec:	f00b f822 	bl	800e634 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 80035f0:	0028      	movs	r0, r5
 80035f2:	f7fc fd89 	bl	8000108 <strlen>
 80035f6:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <SendGSMCodeL+0xb8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <SendGSMCodeL+0x46>
 80035fe:	285a      	cmp	r0, #90	; 0x5a
 8003600:	d818      	bhi.n	8003634 <SendGSMCodeL+0x78>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 8003602:	0029      	movs	r1, r5
 8003604:	0020      	movs	r0, r4
 8003606:	f00b f8db 	bl	800e7c0 <stpcpy>
	strcat(GSMTXC, "\r\n");
 800360a:	491b      	ldr	r1, [pc, #108]	; (8003678 <SendGSMCodeL+0xbc>)
 800360c:	2203      	movs	r2, #3
 800360e:	f00b f9e3 	bl	800e9d8 <memcpy>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003612:	220c      	movs	r2, #12
 8003614:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003616:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003618:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800361a:	f7fc fd75 	bl	8000108 <strlen>
 800361e:	2396      	movs	r3, #150	; 0x96
 8003620:	b282      	uxth	r2, r0
 8003622:	0021      	movs	r1, r4
 8003624:	0030      	movs	r0, r6
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	f007 f92e 	bl	800a888 <HAL_UART_Transmit>
	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);

	// return GSM_RxL();
}
 800362c:	b002      	add	sp, #8
 800362e:	bc80      	pop	{r7}
 8003630:	46b8      	mov	r8, r7
 8003632:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <SendGSMCodeL+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003636:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003638:	4698      	mov	r8, r3
 800363a:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800363c:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800363e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003640:	490f      	ldr	r1, [pc, #60]	; (8003680 <SendGSMCodeL+0xc4>)
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <SendGSMCodeL+0xc8>)
 8003644:	f007 f920 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <SendGSMCodeL+0xcc>)
 800364a:	a901      	add	r1, sp, #4
 800364c:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800364e:	2202      	movs	r2, #2
 8003650:	230a      	movs	r3, #10
 8003652:	4640      	mov	r0, r8
 8003654:	f007 f918 	bl	800a888 <HAL_UART_Transmit>
}
 8003658:	e7d3      	b.n	8003602 <SendGSMCodeL+0x46>
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	20004954 	.word	0x20004954
 8003660:	200048c0 	.word	0x200048c0
 8003664:	2000054c 	.word	0x2000054c
 8003668:	000003de 	.word	0x000003de
 800366c:	20000550 	.word	0x20000550
 8003670:	20001d8c 	.word	0x20001d8c
 8003674:	200000c4 	.word	0x200000c4
 8003678:	0801230c 	.word	0x0801230c
 800367c:	200049e8 	.word	0x200049e8
 8003680:	080122ec 	.word	0x080122ec
 8003684:	00001388 	.word	0x00001388
 8003688:	00000a0d 	.word	0x00000a0d

0800368c <SendGSMData>:

void SendGSMData(const char data[])
{
 800368c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800368e:	270c      	movs	r7, #12
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <SendGSMData+0x68>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003692:	4c19      	ldr	r4, [pc, #100]	; (80036f8 <SendGSMData+0x6c>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003694:	681b      	ldr	r3, [r3, #0]
{
 8003696:	b083      	sub	sp, #12
 8003698:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800369a:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800369c:	2201      	movs	r2, #1
 800369e:	0020      	movs	r0, r4
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <SendGSMData+0x70>)
 80036a2:	f007 fabf 	bl	800ac24 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 80036a6:	2100      	movs	r1, #0
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <SendGSMData+0x74>)
 80036aa:	4816      	ldr	r0, [pc, #88]	; (8003704 <SendGSMData+0x78>)
 80036ac:	f00a ffc2 	bl	800e634 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 80036b0:	466b      	mov	r3, sp
 80036b2:	2202      	movs	r2, #2
 80036b4:	2100      	movs	r1, #0
 80036b6:	1d58      	adds	r0, r3, #5
 80036b8:	f00a ffbc 	bl	800e634 <memset>
	end[0] = 0x1A;
 80036bc:	231a      	movs	r3, #26
	memset(end, 0, 3);
 80036be:	ae01      	add	r6, sp, #4
	end[0] = 0x1A;
 80036c0:	7033      	strb	r3, [r6, #0]
	//memset(_out,0,strlen(_out));
}

static void GSM_TxL(const char _out[]){

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036c2:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 80036c4:	0028      	movs	r0, r5
	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036c6:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 80036c8:	f7fc fd1e 	bl	8000108 <strlen>
 80036cc:	0029      	movs	r1, r5
 80036ce:	b282      	uxth	r2, r0
 80036d0:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <SendGSMData+0x7c>)
 80036d2:	0020      	movs	r0, r4
 80036d4:	f007 f8d8 	bl	800a888 <HAL_UART_Transmit>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036d8:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80036da:	0030      	movs	r0, r6
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036dc:	621f      	str	r7, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80036de:	f7fc fd13 	bl	8000108 <strlen>
 80036e2:	2396      	movs	r3, #150	; 0x96
 80036e4:	b282      	uxth	r2, r0
 80036e6:	0031      	movs	r1, r6
 80036e8:	0020      	movs	r0, r4
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	f007 f8cc 	bl	800a888 <HAL_UART_Transmit>
	// strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
	GSM_Tx((char *)end);

	// return GSM_Rx();
}
 80036f0:	b003      	add	sp, #12
 80036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f4:	20004954 	.word	0x20004954
 80036f8:	200048c0 	.word	0x200048c0
 80036fc:	2000054c 	.word	0x2000054c
 8003700:	000003de 	.word	0x000003de
 8003704:	20000550 	.word	0x20000550
 8003708:	00001388 	.word	0x00001388

0800370c <EndTransfer>:

void EndTransfer()
{
 800370c:	b570      	push	{r4, r5, r6, lr}

	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800370e:	260c      	movs	r6, #12
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <EndTransfer+0x50>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003712:	4c13      	ldr	r4, [pc, #76]	; (8003760 <EndTransfer+0x54>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003714:	681b      	ldr	r3, [r3, #0]
{
 8003716:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003718:	621e      	str	r6, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800371a:	2201      	movs	r2, #1
 800371c:	0020      	movs	r0, r4
 800371e:	4911      	ldr	r1, [pc, #68]	; (8003764 <EndTransfer+0x58>)
 8003720:	f007 fa80 	bl	800ac24 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 990);
 8003724:	2100      	movs	r1, #0
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <EndTransfer+0x5c>)
 8003728:	4810      	ldr	r0, [pc, #64]	; (800376c <EndTransfer+0x60>)
 800372a:	f00a ff83 	bl	800e634 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 800372e:	466b      	mov	r3, sp
 8003730:	2202      	movs	r2, #2
 8003732:	2100      	movs	r1, #0
 8003734:	1d58      	adds	r0, r3, #5
 8003736:	f00a ff7d 	bl	800e634 <memset>
	end[0] = 0x1A;
 800373a:	231a      	movs	r3, #26
	memset(end, 0, 3);
 800373c:	ad01      	add	r5, sp, #4
	end[0] = 0x1A;
 800373e:	702b      	strb	r3, [r5, #0]
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003740:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003742:	0028      	movs	r0, r5
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003744:	621e      	str	r6, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003746:	f7fc fcdf 	bl	8000108 <strlen>
 800374a:	2396      	movs	r3, #150	; 0x96
 800374c:	b282      	uxth	r2, r0
 800374e:	0029      	movs	r1, r5
 8003750:	0020      	movs	r0, r4
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	f007 f898 	bl	800a888 <HAL_UART_Transmit>
	GSM_Tx((char *)end);
	// return GSM_Rx();
}
 8003758:	b002      	add	sp, #8
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	20004954 	.word	0x20004954
 8003760:	200048c0 	.word	0x200048c0
 8003764:	2000054c 	.word	0x2000054c
 8003768:	000003de 	.word	0x000003de
 800376c:	20000550 	.word	0x20000550

08003770 <waitForResponse>:
int waitForResponse(const char* expectedResponse, int timeout) {
	memset(GSMReply3, 0, 500);
 8003770:	22fa      	movs	r2, #250	; 0xfa
int waitForResponse(const char* expectedResponse, int timeout) {
 8003772:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(GSMReply3, 0, 500);
 8003774:	0052      	lsls	r2, r2, #1
int waitForResponse(const char* expectedResponse, int timeout) {
 8003776:	b083      	sub	sp, #12
 8003778:	0006      	movs	r6, r0
 800377a:	000d      	movs	r5, r1
	memset(GSMReply3, 0, 500);
 800377c:	481f      	ldr	r0, [pc, #124]	; (80037fc <waitForResponse+0x8c>)
 800377e:	2100      	movs	r1, #0
 8003780:	f00a ff58 	bl	800e634 <memset>
    uint16_t rxBufferIndex = 0;
    int ret=0;

	int stT = HAL_GetTick();
 8003784:	f003 ff86 	bl	8007694 <HAL_GetTick>
 8003788:	4f1d      	ldr	r7, [pc, #116]	; (8003800 <waitForResponse+0x90>)
 800378a:	0004      	movs	r4, r0
	while (((HAL_GetTick() - stT) <= timeout)){
 800378c:	e005      	b.n	800379a <waitForResponse+0x2a>
		//HAL_UART_Receive(&huart1, (uint8_t*)(GSMReply3 + rxBufferIndex), 1, HAL_MAX_DELAY);
        //rxBufferIndex++;
		//strlen(GSMData)
        if (strstr(GSMData, expectedResponse) != NULL) {
 800378e:	0031      	movs	r1, r6
 8003790:	0038      	movs	r0, r7
 8003792:	f00a ffff 	bl	800e794 <strstr>
 8003796:	2800      	cmp	r0, #0
 8003798:	d12d      	bne.n	80037f6 <waitForResponse+0x86>
	while (((HAL_GetTick() - stT) <= timeout)){
 800379a:	f003 ff7b 	bl	8007694 <HAL_GetTick>
 800379e:	1b00      	subs	r0, r0, r4
 80037a0:	42a8      	cmp	r0, r5
 80037a2:	d9f4      	bls.n	800378e <waitForResponse+0x1e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037a4:	260c      	movs	r6, #12
 80037a6:	4c17      	ldr	r4, [pc, #92]	; (8003804 <waitForResponse+0x94>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037a8:	2216      	movs	r2, #22
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037aa:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037ac:	4916      	ldr	r1, [pc, #88]	; (8003808 <waitForResponse+0x98>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037ae:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037b0:	0020      	movs	r0, r4
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <waitForResponse+0x9c>)
 80037b4:	f007 f868 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80037b8:	466b      	mov	r3, sp
 80037ba:	4d15      	ldr	r5, [pc, #84]	; (8003810 <waitForResponse+0xa0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80037bc:	2202      	movs	r2, #2
 80037be:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 80037c0:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80037c2:	0020      	movs	r0, r4
 80037c4:	230a      	movs	r3, #10
 80037c6:	f007 f85f 	bl	800a888 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037ca:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037cc:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80037ce:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80037d0:	f7fc fc9a 	bl	8000108 <strlen>
 80037d4:	0039      	movs	r1, r7
 80037d6:	b282      	uxth	r2, r0
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <waitForResponse+0x9c>)
 80037da:	0020      	movs	r0, r4
 80037dc:	f007 f854 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80037e0:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80037e2:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80037e4:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80037e6:	0020      	movs	r0, r4
 80037e8:	230a      	movs	r3, #10
 80037ea:	a901      	add	r1, sp, #4
 80037ec:	f007 f84c 	bl	800a888 <HAL_UART_Transmit>
    int ret=0;
 80037f0:	2000      	movs	r0, #0
        }
    }
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
	return ret;

}
 80037f2:	b003      	add	sp, #12
 80037f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        	ret=1;
 80037f6:	2001      	movs	r0, #1
	return ret;
 80037f8:	e7fb      	b.n	80037f2 <waitForResponse+0x82>
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	20001b94 	.word	0x20001b94
 8003800:	20000550 	.word	0x20000550
 8003804:	200049e8 	.word	0x200049e8
 8003808:	08012418 	.word	0x08012418
 800380c:	00001388 	.word	0x00001388
 8003810:	00000a0d 	.word	0x00000a0d

08003814 <GetGSMReply>:

char *GetGSMReply(int extra, const char *find, int gap, const char *LineEnd, const char *ErrorMsg, int timeout, const char *finChar)
{
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003816:	46de      	mov	lr, fp
 8003818:	464e      	mov	r6, r9
 800381a:	4645      	mov	r5, r8
 800381c:	4657      	mov	r7, sl
 800381e:	b5e0      	push	{r5, r6, r7, lr}
 8003820:	b087      	sub	sp, #28
 8003822:	469a      	mov	sl, r3
 8003824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003826:	9202      	str	r2, [sp, #8]
 8003828:	4699      	mov	r9, r3
	memset(GSMReply, 0, 100);
 800382a:	4b78      	ldr	r3, [pc, #480]	; (8003a0c <GetGSMReply+0x1f8>)
 800382c:	2264      	movs	r2, #100	; 0x64
 800382e:	0018      	movs	r0, r3
{
 8003830:	468b      	mov	fp, r1
	memset(GSMReply, 0, 100);
 8003832:	2100      	movs	r1, #0
 8003834:	9303      	str	r3, [sp, #12]
 8003836:	f00a fefd 	bl	800e634 <memset>
	memset(GSMInData, 0, 1000);
 800383a:	22fa      	movs	r2, #250	; 0xfa
 800383c:	4d74      	ldr	r5, [pc, #464]	; (8003a10 <GetGSMReply+0x1fc>)
 800383e:	2100      	movs	r1, #0
 8003840:	0092      	lsls	r2, r2, #2
 8003842:	0028      	movs	r0, r5
 8003844:	f00a fef6 	bl	800e634 <memset>
	int stT = HAL_GetTick();
 8003848:	f003 ff24 	bl	8007694 <HAL_GetTick>
 800384c:	4680      	mov	r8, r0
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800384e:	4b71      	ldr	r3, [pc, #452]	; (8003a14 <GetGSMReply+0x200>)
	while (((HAL_GetTick() - stT) <= timeout))
	{
		HAL_Delay(70);
		if (strlen(GSMData) > 0)
 8003850:	4e71      	ldr	r6, [pc, #452]	; (8003a18 <GetGSMReply+0x204>)
			}
			gsmER = 0;
		}
		else
		{
			gsmER++;
 8003852:	4c72      	ldr	r4, [pc, #456]	; (8003a1c <GetGSMReply+0x208>)
 8003854:	9301      	str	r3, [sp, #4]
	while (((HAL_GetTick() - stT) <= timeout))
 8003856:	f003 ff1d 	bl	8007694 <HAL_GetTick>
 800385a:	4643      	mov	r3, r8
 800385c:	1ac0      	subs	r0, r0, r3
 800385e:	4581      	cmp	r9, r0
 8003860:	d31f      	bcc.n	80038a2 <GetGSMReply+0x8e>
		HAL_Delay(70);
 8003862:	2046      	movs	r0, #70	; 0x46
 8003864:	f003 ff1c 	bl	80076a0 <HAL_Delay>
		if (strlen(GSMData) > 0)
 8003868:	7837      	ldrb	r7, [r6, #0]
 800386a:	2f00      	cmp	r7, #0
 800386c:	d128      	bne.n	80038c0 <GetGSMReply+0xac>
			gsmER++;
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	6023      	str	r3, [r4, #0]
			if (gsmER > 9)
 8003874:	2b09      	cmp	r3, #9
 8003876:	ddee      	ble.n	8003856 <GetGSMReply+0x42>
			{
				RestartGSM();
 8003878:	f7ff fdf4 	bl	8003464 <RestartGSM>
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <GetGSMReply+0x20c>)
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800387e:	4869      	ldr	r0, [pc, #420]	; (8003a24 <GetGSMReply+0x210>)
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	230c      	movs	r3, #12
 8003884:	9901      	ldr	r1, [sp, #4]
 8003886:	6213      	str	r3, [r2, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003888:	6802      	ldr	r2, [r0, #0]
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800388a:	700f      	strb	r7, [r1, #0]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800388c:	6213      	str	r3, [r2, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800388e:	2201      	movs	r2, #1
 8003890:	f007 f9c8 	bl	800ac24 <HAL_UART_Receive_DMA>
				restartGSMuart();
				gsmER = 0;
 8003894:	6027      	str	r7, [r4, #0]
	while (((HAL_GetTick() - stT) <= timeout))
 8003896:	f003 fefd 	bl	8007694 <HAL_GetTick>
 800389a:	4643      	mov	r3, r8
 800389c:	1ac0      	subs	r0, r0, r3
 800389e:	4581      	cmp	r9, r0
 80038a0:	d2df      	bcs.n	8003862 <GetGSMReply+0x4e>
			}
		}
	}

	// Debug_Tx(GSMInData);
	if (strlen(GSMReply) < 1)
 80038a2:	9b03      	ldr	r3, [sp, #12]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d05c      	beq.n	8003964 <GetGSMReply+0x150>
		// Debug_Tx(GSMData);
		// Debug_Tx("****");
		// Debug_Tx(GSMReply);
		// Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 80038aa:	2064      	movs	r0, #100	; 0x64
 80038ac:	f003 fef8 	bl	80076a0 <HAL_Delay>
	// if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
}
 80038b0:	9803      	ldr	r0, [sp, #12]
 80038b2:	b007      	add	sp, #28
 80038b4:	bcf0      	pop	{r4, r5, r6, r7}
 80038b6:	46bb      	mov	fp, r7
 80038b8:	46b2      	mov	sl, r6
 80038ba:	46a9      	mov	r9, r5
 80038bc:	46a0      	mov	r8, r4
 80038be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(GSMInData, GSMData);
 80038c0:	0031      	movs	r1, r6
 80038c2:	0028      	movs	r0, r5
 80038c4:	f00b f875 	bl	800e9b2 <strcpy>
			char *pq = strstr(GSMInData, finChar);
 80038c8:	0028      	movs	r0, r5
 80038ca:	9912      	ldr	r1, [sp, #72]	; 0x48
 80038cc:	f00a ff62 	bl	800e794 <strstr>
			if ((pq != NULL))
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d025      	beq.n	8003920 <GetGSMReply+0x10c>
				if ((strlen(find) < 1))
 80038d4:	465b      	mov	r3, fp
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d100      	bne.n	80038de <GetGSMReply+0xca>
 80038dc:	e08c      	b.n	80039f8 <GetGSMReply+0x1e4>
				char *p = strstr(GSMInData, find);
 80038de:	4659      	mov	r1, fp
 80038e0:	0028      	movs	r0, r5
 80038e2:	f00a ff57 	bl	800e794 <strstr>
				if ((strlen(LineEnd) < 1))
 80038e6:	4653      	mov	r3, sl
 80038e8:	781b      	ldrb	r3, [r3, #0]
				char *p = strstr(GSMInData, find);
 80038ea:	0007      	movs	r7, r0
				if ((strlen(LineEnd) < 1))
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d100      	bne.n	80038f2 <GetGSMReply+0xde>
 80038f0:	e087      	b.n	8003a02 <GetGSMReply+0x1ee>
					if ((strstr(GSMInData, LineEnd) != NULL))
 80038f2:	4651      	mov	r1, sl
 80038f4:	0028      	movs	r0, r5
 80038f6:	f00a ff4d 	bl	800e794 <strstr>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d00c      	beq.n	8003918 <GetGSMReply+0x104>
						if ((strlen(p + gap) > strlen(LineEnd)))
 80038fe:	9b02      	ldr	r3, [sp, #8]
 8003900:	469c      	mov	ip, r3
 8003902:	4467      	add	r7, ip
 8003904:	0038      	movs	r0, r7
 8003906:	f7fc fbff 	bl	8000108 <strlen>
 800390a:	9000      	str	r0, [sp, #0]
 800390c:	4650      	mov	r0, sl
 800390e:	f7fc fbfb 	bl	8000108 <strlen>
 8003912:	9b00      	ldr	r3, [sp, #0]
 8003914:	4283      	cmp	r3, r0
 8003916:	d85f      	bhi.n	80039d8 <GetGSMReply+0x1c4>
			gsmER = 0;
 8003918:	2200      	movs	r2, #0
 800391a:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <GetGSMReply+0x208>)
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e79a      	b.n	8003856 <GetGSMReply+0x42>
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 8003920:	0028      	movs	r0, r5
 8003922:	4941      	ldr	r1, [pc, #260]	; (8003a28 <GetGSMReply+0x214>)
 8003924:	f00a ff36 	bl	800e794 <strstr>
 8003928:	2800      	cmp	r0, #0
 800392a:	d105      	bne.n	8003938 <GetGSMReply+0x124>
 800392c:	0028      	movs	r0, r5
 800392e:	493f      	ldr	r1, [pc, #252]	; (8003a2c <GetGSMReply+0x218>)
 8003930:	f00a ff30 	bl	800e794 <strstr>
 8003934:	2800      	cmp	r0, #0
 8003936:	d0ef      	beq.n	8003918 <GetGSMReply+0x104>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003938:	220c      	movs	r2, #12
 800393a:	4c3d      	ldr	r4, [pc, #244]	; (8003a30 <GetGSMReply+0x21c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800393c:	493d      	ldr	r1, [pc, #244]	; (8003a34 <GetGSMReply+0x220>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800393e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003940:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003942:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003944:	4b3c      	ldr	r3, [pc, #240]	; (8003a38 <GetGSMReply+0x224>)
 8003946:	3a03      	subs	r2, #3
 8003948:	f006 ff9e 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <GetGSMReply+0x228>)
 800394e:	a905      	add	r1, sp, #20
 8003950:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003952:	2202      	movs	r2, #2
 8003954:	230a      	movs	r3, #10
 8003956:	0020      	movs	r0, r4
 8003958:	f006 ff96 	bl	800a888 <HAL_UART_Transmit>
	if (strlen(GSMReply) < 1)
 800395c:	9b03      	ldr	r3, [sp, #12]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1a2      	bne.n	80038aa <GetGSMReply+0x96>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003964:	270c      	movs	r7, #12
 8003966:	4c32      	ldr	r4, [pc, #200]	; (8003a30 <GetGSMReply+0x21c>)
	char newline[2] = "\r\n";
 8003968:	4e34      	ldr	r6, [pc, #208]	; (8003a3c <GetGSMReply+0x228>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800396a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800396c:	2204      	movs	r2, #4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800396e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003970:	0020      	movs	r0, r4
 8003972:	4933      	ldr	r1, [pc, #204]	; (8003a40 <GetGSMReply+0x22c>)
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <GetGSMReply+0x224>)
 8003976:	f006 ff87 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800397a:	ab04      	add	r3, sp, #16
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800397c:	a905      	add	r1, sp, #20
 800397e:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003980:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003982:	0020      	movs	r0, r4
 8003984:	230a      	movs	r3, #10
 8003986:	f006 ff7f 	bl	800a888 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800398a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800398c:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800398e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003990:	f7fc fbba 	bl	8000108 <strlen>
 8003994:	0029      	movs	r1, r5
 8003996:	b282      	uxth	r2, r0
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <GetGSMReply+0x224>)
 800399a:	0020      	movs	r0, r4
 800399c:	f006 ff74 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80039a0:	ab04      	add	r3, sp, #16
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80039a2:	a905      	add	r1, sp, #20
 80039a4:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80039a6:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80039a8:	0020      	movs	r0, r4
 80039aa:	230a      	movs	r3, #10
 80039ac:	f006 ff6c 	bl	800a888 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80039b0:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80039b2:	9810      	ldr	r0, [sp, #64]	; 0x40
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80039b4:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80039b6:	f7fc fba7 	bl	8000108 <strlen>
 80039ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80039bc:	b282      	uxth	r2, r0
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <GetGSMReply+0x224>)
 80039c0:	0020      	movs	r0, r4
 80039c2:	f006 ff61 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80039c6:	ab04      	add	r3, sp, #16
 80039c8:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80039ca:	2202      	movs	r2, #2
 80039cc:	230a      	movs	r3, #10
 80039ce:	0020      	movs	r0, r4
 80039d0:	a905      	add	r1, sp, #20
 80039d2:	f006 ff59 	bl	800a888 <HAL_UART_Transmit>
}
 80039d6:	e768      	b.n	80038aa <GetGSMReply+0x96>
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 80039d8:	0038      	movs	r0, r7
 80039da:	2200      	movs	r2, #0
 80039dc:	4651      	mov	r1, sl
 80039de:	f00a fed4 	bl	800e78a <strtok_r>
 80039e2:	0007      	movs	r7, r0
							if (strlen(p1) < 88)
 80039e4:	f7fc fb90 	bl	8000108 <strlen>
 80039e8:	2857      	cmp	r0, #87	; 0x57
 80039ea:	d895      	bhi.n	8003918 <GetGSMReply+0x104>
								strcpy(GSMReply, p1);
 80039ec:	1c42      	adds	r2, r0, #1
 80039ee:	0039      	movs	r1, r7
 80039f0:	9803      	ldr	r0, [sp, #12]
 80039f2:	f00a fff1 	bl	800e9d8 <memcpy>
								break;
 80039f6:	e754      	b.n	80038a2 <GetGSMReply+0x8e>
					strcpy(GSMReply, pq);
 80039f8:	0001      	movs	r1, r0
 80039fa:	9803      	ldr	r0, [sp, #12]
 80039fc:	f00a ffd9 	bl	800e9b2 <strcpy>
					break;
 8003a00:	e74f      	b.n	80038a2 <GetGSMReply+0x8e>
					strcpy(GSMReply, p);
 8003a02:	0001      	movs	r1, r0
 8003a04:	9803      	ldr	r0, [sp, #12]
 8003a06:	f00a ffd4 	bl	800e9b2 <strcpy>
					break;
 8003a0a:	e74a      	b.n	80038a2 <GetGSMReply+0x8e>
 8003a0c:	20001b30 	.word	0x20001b30
 8003a10:	20001748 	.word	0x20001748
 8003a14:	2000054c 	.word	0x2000054c
 8003a18:	20000550 	.word	0x20000550
 8003a1c:	20004594 	.word	0x20004594
 8003a20:	20004954 	.word	0x20004954
 8003a24:	200048c0 	.word	0x200048c0
 8003a28:	08012430 	.word	0x08012430
 8003a2c:	08012438 	.word	0x08012438
 8003a30:	200049e8 	.word	0x200049e8
 8003a34:	08012440 	.word	0x08012440
 8003a38:	00001388 	.word	0x00001388
 8003a3c:	00000a0d 	.word	0x00000a0d
 8003a40:	0801244c 	.word	0x0801244c

08003a44 <GSMSigQuality>:

int GSMSigQuality()
{
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	46c6      	mov	lr, r8
	GSMSignal = 0;
 8003a48:	2300      	movs	r3, #0
{
 8003a4a:	b500      	push	{lr}
	GSMSignal = 0;
 8003a4c:	4e46      	ldr	r6, [pc, #280]	; (8003b68 <GSMSigQuality+0x124>)
{
 8003a4e:	b086      	sub	sp, #24
	SendGSMCode(" AT+CSQ");
 8003a50:	4846      	ldr	r0, [pc, #280]	; (8003b6c <GSMSigQuality+0x128>)
	GSMSignal = 0;
 8003a52:	6033      	str	r3, [r6, #0]
	SendGSMCode(" AT+CSQ");
 8003a54:	f7ff fd4a 	bl	80034ec <SendGSMCode>
	HAL_Delay(100);
 8003a58:	2064      	movs	r0, #100	; 0x64
 8003a5a:	f003 fe21 	bl	80076a0 <HAL_Delay>
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8003a5e:	4a44      	ldr	r2, [pc, #272]	; (8003b70 <GSMSigQuality+0x12c>)
 8003a60:	4b44      	ldr	r3, [pc, #272]	; (8003b74 <GSMSigQuality+0x130>)
 8003a62:	9202      	str	r2, [sp, #8]
 8003a64:	4a44      	ldr	r2, [pc, #272]	; (8003b78 <GSMSigQuality+0x134>)
 8003a66:	4945      	ldr	r1, [pc, #276]	; (8003b7c <GSMSigQuality+0x138>)
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	9201      	str	r2, [sp, #4]
 8003a6e:	4a44      	ldr	r2, [pc, #272]	; (8003b80 <GSMSigQuality+0x13c>)
 8003a70:	9200      	str	r2, [sp, #0]
 8003a72:	2205      	movs	r2, #5
 8003a74:	f7ff fece 	bl	8003814 <GetGSMReply>
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f009 fd4d 	bl	800d518 <strtod>
 8003a7e:	f7ff fb5f 	bl	8003140 <__aeabi_d2f>

	if (GSMSignal > 5)
 8003a82:	4940      	ldr	r1, [pc, #256]	; (8003b84 <GSMSigQuality+0x140>)
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8003a84:	6030      	str	r0, [r6, #0]
	if (GSMSignal > 5)
 8003a86:	f7fc fd35 	bl	80004f4 <__aeabi_fcmpgt>
 8003a8a:	1e04      	subs	r4, r0, #0
 8003a8c:	d020      	beq.n	8003ad0 <GSMSigQuality+0x8c>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 8003a8e:	2201      	movs	r2, #1
 8003a90:	2102      	movs	r1, #2
 8003a92:	483d      	ldr	r0, [pc, #244]	; (8003b88 <GSMSigQuality+0x144>)
 8003a94:	f004 fccc 	bl	8008430 <HAL_GPIO_WritePin>
	{
		SET_LED_NET(1);
		ServerConnected = 1;
 8003a98:	2201      	movs	r2, #1
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a9a:	4c3c      	ldr	r4, [pc, #240]	; (8003b8c <GSMSigQuality+0x148>)
 8003a9c:	4b3c      	ldr	r3, [pc, #240]	; (8003b90 <GSMSigQuality+0x14c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003a9e:	493d      	ldr	r1, [pc, #244]	; (8003b94 <GSMSigQuality+0x150>)
 8003aa0:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	320b      	adds	r2, #11
 8003aa6:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003aa8:	0020      	movs	r0, r4
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <GSMSigQuality+0x154>)
 8003aac:	3a04      	subs	r2, #4
 8003aae:	f006 feeb 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003ab2:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <GSMSigQuality+0x158>)
 8003ab4:	a905      	add	r1, sp, #20
 8003ab6:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ab8:	2202      	movs	r2, #2
 8003aba:	230a      	movs	r3, #10
 8003abc:	0020      	movs	r0, r4
 8003abe:	f006 fee3 	bl	800a888 <HAL_UART_Transmit>
			RestartGSM();
		restartGSMuart();
		Debug_Tx("GSMTRstarted");
		SET_LED_NET(0);
	}
	return (GSMSignal); // must be higher than 5 ,range 0-33
 8003ac2:	6830      	ldr	r0, [r6, #0]
 8003ac4:	f7fd fbf2 	bl	80012ac <__aeabi_f2iz>
}
 8003ac8:	b006      	add	sp, #24
 8003aca:	bc80      	pop	{r7}
 8003acc:	46b8      	mov	r8, r7
 8003ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ad0:	270c      	movs	r7, #12
 8003ad2:	4d2e      	ldr	r5, [pc, #184]	; (8003b8c <GSMSigQuality+0x148>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ad4:	2207      	movs	r2, #7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ad6:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ad8:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ada:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003adc:	4930      	ldr	r1, [pc, #192]	; (8003ba0 <GSMSigQuality+0x15c>)
 8003ade:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <GSMSigQuality+0x154>)
 8003ae0:	f006 fed2 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <GSMSigQuality+0x158>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ae6:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 8003ae8:	4698      	mov	r8, r3
 8003aea:	466b      	mov	r3, sp
 8003aec:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003aee:	0028      	movs	r0, r5
	char newline[2] = "\r\n";
 8003af0:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003af2:	230a      	movs	r3, #10
 8003af4:	2202      	movs	r2, #2
 8003af6:	f006 fec7 	bl	800a888 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003afa:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003afc:	220d      	movs	r2, #13
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003afe:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003b00:	0028      	movs	r0, r5
 8003b02:	4928      	ldr	r1, [pc, #160]	; (8003ba4 <GSMSigQuality+0x160>)
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <GSMSigQuality+0x154>)
 8003b06:	f006 febf 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003b0a:	466b      	mov	r3, sp
 8003b0c:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b0e:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 8003b10:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b12:	0028      	movs	r0, r5
 8003b14:	230a      	movs	r3, #10
 8003b16:	2202      	movs	r2, #2
 8003b18:	f006 feb6 	bl	800a888 <HAL_UART_Transmit>
		gprsok = 0;
 8003b1c:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <GSMSigQuality+0x164>)
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b1e:	4823      	ldr	r0, [pc, #140]	; (8003bac <GSMSigQuality+0x168>)
 8003b20:	601c      	str	r4, [r3, #0]
		ServerConnected = 0;
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <GSMSigQuality+0x14c>)
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b24:	4922      	ldr	r1, [pc, #136]	; (8003bb0 <GSMSigQuality+0x16c>)
 8003b26:	601c      	str	r4, [r3, #0]
 8003b28:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <GSMSigQuality+0x170>)
 8003b2a:	700c      	strb	r4, [r1, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003b2e:	2201      	movs	r2, #1
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b30:	621f      	str	r7, [r3, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b32:	6803      	ldr	r3, [r0, #0]
 8003b34:	621f      	str	r7, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003b36:	f007 f875 	bl	800ac24 <HAL_UART_Receive_DMA>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b3a:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003b3c:	220c      	movs	r2, #12
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b3e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003b40:	0028      	movs	r0, r5
 8003b42:	491d      	ldr	r1, [pc, #116]	; (8003bb8 <GSMSigQuality+0x174>)
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <GSMSigQuality+0x154>)
 8003b46:	f006 fe9f 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003b4a:	466b      	mov	r3, sp
 8003b4c:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b4e:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 8003b50:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b52:	0028      	movs	r0, r5
 8003b54:	230a      	movs	r3, #10
 8003b56:	2202      	movs	r2, #2
 8003b58:	f006 fe96 	bl	800a888 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2102      	movs	r1, #2
 8003b60:	4809      	ldr	r0, [pc, #36]	; (8003b88 <GSMSigQuality+0x144>)
 8003b62:	f004 fc65 	bl	8008430 <HAL_GPIO_WritePin>
 8003b66:	e7ac      	b.n	8003ac2 <GSMSigQuality+0x7e>
 8003b68:	20001d88 	.word	0x20001d88
 8003b6c:	08012454 	.word	0x08012454
 8003b70:	08012468 	.word	0x08012468
 8003b74:	0801245c 	.word	0x0801245c
 8003b78:	200000c8 	.word	0x200000c8
 8003b7c:	08012460 	.word	0x08012460
 8003b80:	0801246c 	.word	0x0801246c
 8003b84:	40a00000 	.word	0x40a00000
 8003b88:	50000c00 	.word	0x50000c00
 8003b8c:	200049e8 	.word	0x200049e8
 8003b90:	20003f84 	.word	0x20003f84
 8003b94:	0801248c 	.word	0x0801248c
 8003b98:	00001388 	.word	0x00001388
 8003b9c:	00000a0d 	.word	0x00000a0d
 8003ba0:	08012498 	.word	0x08012498
 8003ba4:	080124a0 	.word	0x080124a0
 8003ba8:	20004160 	.word	0x20004160
 8003bac:	200048c0 	.word	0x200048c0
 8003bb0:	2000054c 	.word	0x2000054c
 8003bb4:	20004954 	.word	0x20004954
 8003bb8:	080124b0 	.word	0x080124b0

08003bbc <GSMIMEI>:

	return (0);
}

char *GSMIMEI()
{
 8003bbc:	b500      	push	{lr}
	SendGSMCode(" AT+QGSN");
 8003bbe:	4809      	ldr	r0, [pc, #36]	; (8003be4 <GSMIMEI+0x28>)
{
 8003bc0:	b085      	sub	sp, #20
	SendGSMCode(" AT+QGSN");
 8003bc2:	f7ff fc93 	bl	80034ec <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <GSMIMEI+0x2c>)
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <GSMIMEI+0x30>)
 8003bca:	9202      	str	r2, [sp, #8]
 8003bcc:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <GSMIMEI+0x34>)
 8003bce:	4909      	ldr	r1, [pc, #36]	; (8003bf4 <GSMIMEI+0x38>)
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	9201      	str	r2, [sp, #4]
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <GSMIMEI+0x3c>)
 8003bd8:	9200      	str	r2, [sp, #0]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	f7ff fe1a 	bl	8003814 <GetGSMReply>
}
 8003be0:	b005      	add	sp, #20
 8003be2:	bd00      	pop	{pc}
 8003be4:	080124fc 	.word	0x080124fc
 8003be8:	0801289c 	.word	0x0801289c
 8003bec:	080124cc 	.word	0x080124cc
 8003bf0:	200000c8 	.word	0x200000c8
 8003bf4:	08012508 	.word	0x08012508
 8003bf8:	08012510 	.word	0x08012510

08003bfc <StopTCPConnection>:
	HAL_Delay(500);
}
void StopTCPConnection()
{
	int ck = 1;
	gprsok = 0;
 8003bfc:	2300      	movs	r3, #0
{
 8003bfe:	b510      	push	{r4, lr}
	gprsok = 0;
 8003c00:	4c0f      	ldr	r4, [pc, #60]	; (8003c40 <StopTCPConnection+0x44>)
{
 8003c02:	b084      	sub	sp, #16
	while ((ck > 0) && (gprsok < 1))
	{
		ck = ck - 1;
		if (strlen(ip) > 4)
 8003c04:	480f      	ldr	r0, [pc, #60]	; (8003c44 <StopTCPConnection+0x48>)
	gprsok = 0;
 8003c06:	6023      	str	r3, [r4, #0]
		if (strlen(ip) > 4)
 8003c08:	f7fc fa7e 	bl	8000108 <strlen>
 8003c0c:	2804      	cmp	r0, #4
 8003c0e:	d912      	bls.n	8003c36 <StopTCPConnection+0x3a>
		{
			SendGSMCode(" AT+QICLOSE=0");
 8003c10:	480d      	ldr	r0, [pc, #52]	; (8003c48 <StopTCPConnection+0x4c>)
 8003c12:	f7ff fc6b 	bl	80034ec <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <StopTCPConnection+0x50>)
 8003c18:	490d      	ldr	r1, [pc, #52]	; (8003c50 <StopTCPConnection+0x54>)
 8003c1a:	9302      	str	r3, [sp, #8]
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <StopTCPConnection+0x58>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2005      	movs	r0, #5
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <StopTCPConnection+0x5c>)
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	000b      	movs	r3, r1
 8003c2c:	f7ff fdf2 	bl	8003814 <GetGSMReply>
 8003c30:	f7fc fa6a 	bl	8000108 <strlen>
 8003c34:	6020      	str	r0, [r4, #0]
		{
			SendGSMCode(" AT+QICLOSE=1");
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
		}
	}
	ServerConnected = 0;
 8003c36:	2200      	movs	r2, #0
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <StopTCPConnection+0x60>)
 8003c3a:	601a      	str	r2, [r3, #0]
}
 8003c3c:	b004      	add	sp, #16
 8003c3e:	bd10      	pop	{r4, pc}
 8003c40:	20004160 	.word	0x20004160
 8003c44:	200000d0 	.word	0x200000d0
 8003c48:	0801278c 	.word	0x0801278c
 8003c4c:	0801279c 	.word	0x0801279c
 8003c50:	08012720 	.word	0x08012720
 8003c54:	200000c8 	.word	0x200000c8
 8003c58:	080127a8 	.word	0x080127a8
 8003c5c:	20003f84 	.word	0x20003f84

08003c60 <SendTCPdata>:
void SendTCPdata(char *data)
{
 8003c60:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ck = 1;
	if (gprsok > 0)
 8003c62:	4d52      	ldr	r5, [pc, #328]	; (8003dac <SendTCPdata+0x14c>)
{
 8003c64:	0004      	movs	r4, r0
	if (gprsok > 0)
 8003c66:	682b      	ldr	r3, [r5, #0]
{
 8003c68:	b083      	sub	sp, #12
	if (gprsok > 0)
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	dd46      	ble.n	8003cfc <SendTCPdata+0x9c>
	{
		//Debug_Tx("GPRSOK");
		if (strlen(ip) > 4)
 8003c6e:	4850      	ldr	r0, [pc, #320]	; (8003db0 <SendTCPdata+0x150>)
 8003c70:	f7fc fa4a 	bl	8000108 <strlen>
 8003c74:	2804      	cmp	r0, #4
 8003c76:	d801      	bhi.n	8003c7c <SendTCPdata+0x1c>
	else
	{
		Debug_Tx("DISCONNECTED FROM SERVER .resetting connection ");
		ResetTCP();
	}
}
 8003c78:	b003      	add	sp, #12
 8003c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gprsok = 0;
 8003c7c:	2600      	movs	r6, #0
				SendGSMCode(" AT+QISEND=0");
 8003c7e:	484d      	ldr	r0, [pc, #308]	; (8003db4 <SendTCPdata+0x154>)
			gprsok = 0;
 8003c80:	602e      	str	r6, [r5, #0]
				SendGSMCode(" AT+QISEND=0");
 8003c82:	f7ff fc33 	bl	80034ec <SendGSMCode>
				gprsok = waitForResponse(">",1000);
 8003c86:	21fa      	movs	r1, #250	; 0xfa
 8003c88:	484b      	ldr	r0, [pc, #300]	; (8003db8 <SendTCPdata+0x158>)
 8003c8a:	0089      	lsls	r1, r1, #2
 8003c8c:	f7ff fd70 	bl	8003770 <waitForResponse>
 8003c90:	6028      	str	r0, [r5, #0]
			if (gprsok > 0)
 8003c92:	2800      	cmp	r0, #0
 8003c94:	dd49      	ble.n	8003d2a <SendTCPdata+0xca>
					SendGSMData(data); // Debug_Tx(GSMData);
 8003c96:	0020      	movs	r0, r4
				gprsok = 0;
 8003c98:	602e      	str	r6, [r5, #0]
					SendGSMData(data); // Debug_Tx(GSMData);
 8003c9a:	f7ff fcf7 	bl	800368c <SendGSMData>
					gprsok = waitForResponse("SEND OK",1000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 8003c9e:	21fa      	movs	r1, #250	; 0xfa
 8003ca0:	4846      	ldr	r0, [pc, #280]	; (8003dbc <SendTCPdata+0x15c>)
 8003ca2:	0089      	lsls	r1, r1, #2
 8003ca4:	f7ff fd64 	bl	8003770 <waitForResponse>
 8003ca8:	6028      	str	r0, [r5, #0]
				if (gprsok<1){//SendGSMData("    ");
 8003caa:	2800      	cmp	r0, #0
 8003cac:	dd69      	ble.n	8003d82 <SendTCPdata+0x122>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cae:	270c      	movs	r7, #12
 8003cb0:	4d43      	ldr	r5, [pc, #268]	; (8003dc0 <SendTCPdata+0x160>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003cb2:	2208      	movs	r2, #8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cb4:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003cb6:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cb8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003cba:	4942      	ldr	r1, [pc, #264]	; (8003dc4 <SendTCPdata+0x164>)
 8003cbc:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <SendTCPdata+0x168>)
 8003cbe:	f006 fde3 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003cc2:	466b      	mov	r3, sp
 8003cc4:	4e41      	ldr	r6, [pc, #260]	; (8003dcc <SendTCPdata+0x16c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003cc6:	a901      	add	r1, sp, #4
 8003cc8:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003cca:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ccc:	0028      	movs	r0, r5
 8003cce:	230a      	movs	r3, #10
 8003cd0:	f006 fdda 	bl	800a888 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cd4:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003cd6:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cd8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003cda:	f7fc fa15 	bl	8000108 <strlen>
 8003cde:	0021      	movs	r1, r4
 8003ce0:	b282      	uxth	r2, r0
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <SendTCPdata+0x168>)
 8003ce4:	0028      	movs	r0, r5
 8003ce6:	f006 fdcf 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003cea:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003cec:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003cee:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003cf0:	0028      	movs	r0, r5
 8003cf2:	230a      	movs	r3, #10
 8003cf4:	a901      	add	r1, sp, #4
 8003cf6:	f006 fdc7 	bl	800a888 <HAL_UART_Transmit>
}
 8003cfa:	e7bd      	b.n	8003c78 <SendTCPdata+0x18>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cfc:	220c      	movs	r2, #12
 8003cfe:	4c30      	ldr	r4, [pc, #192]	; (8003dc0 <SendTCPdata+0x160>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d00:	4933      	ldr	r1, [pc, #204]	; (8003dd0 <SendTCPdata+0x170>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d02:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d04:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d06:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <SendTCPdata+0x168>)
 8003d0a:	3223      	adds	r2, #35	; 0x23
 8003d0c:	f006 fdbc 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003d10:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <SendTCPdata+0x16c>)
 8003d12:	a901      	add	r1, sp, #4
 8003d14:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d16:	2202      	movs	r2, #2
 8003d18:	230a      	movs	r3, #10
 8003d1a:	0020      	movs	r0, r4
 8003d1c:	f006 fdb4 	bl	800a888 <HAL_UART_Transmit>
}

void ResetTCP()
{
	//EndTransfer();
	StopTCPConnection();
 8003d20:	f7ff ff6c 	bl	8003bfc <StopTCPConnection>
	StartTCPConnection();
 8003d24:	f000 f85c 	bl	8003de0 <StartTCPConnection>
}
 8003d28:	e7a6      	b.n	8003c78 <SendTCPdata+0x18>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d2a:	270c      	movs	r7, #12
				SendGSMData("    ");
 8003d2c:	4829      	ldr	r0, [pc, #164]	; (8003dd4 <SendTCPdata+0x174>)
 8003d2e:	f7ff fcad 	bl	800368c <SendGSMData>
 8003d32:	4d23      	ldr	r5, [pc, #140]	; (8003dc0 <SendTCPdata+0x160>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d34:	2227      	movs	r2, #39	; 0x27
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d36:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d38:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d3a:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d3c:	4926      	ldr	r1, [pc, #152]	; (8003dd8 <SendTCPdata+0x178>)
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <SendTCPdata+0x168>)
 8003d40:	f006 fda2 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003d44:	466b      	mov	r3, sp
 8003d46:	4e21      	ldr	r6, [pc, #132]	; (8003dcc <SendTCPdata+0x16c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d48:	a901      	add	r1, sp, #4
 8003d4a:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003d4c:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d4e:	0028      	movs	r0, r5
 8003d50:	230a      	movs	r3, #10
 8003d52:	f006 fd99 	bl	800a888 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d56:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d58:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d5a:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d5c:	f7fc f9d4 	bl	8000108 <strlen>
 8003d60:	0021      	movs	r1, r4
 8003d62:	b282      	uxth	r2, r0
 8003d64:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <SendTCPdata+0x168>)
 8003d66:	0028      	movs	r0, r5
 8003d68:	f006 fd8e 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003d6c:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d6e:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003d70:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d72:	a901      	add	r1, sp, #4
 8003d74:	230a      	movs	r3, #10
 8003d76:	0028      	movs	r0, r5
 8003d78:	f006 fd86 	bl	800a888 <HAL_UART_Transmit>
				EndTransfer();
 8003d7c:	f7ff fcc6 	bl	800370c <EndTransfer>
 8003d80:	e77a      	b.n	8003c78 <SendTCPdata+0x18>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d82:	220c      	movs	r2, #12
 8003d84:	4c0e      	ldr	r4, [pc, #56]	; (8003dc0 <SendTCPdata+0x160>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d86:	4915      	ldr	r1, [pc, #84]	; (8003ddc <SendTCPdata+0x17c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d88:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d8a:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d8c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <SendTCPdata+0x168>)
 8003d90:	321b      	adds	r2, #27
 8003d92:	f006 fd79 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <SendTCPdata+0x16c>)
 8003d98:	a901      	add	r1, sp, #4
 8003d9a:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	230a      	movs	r3, #10
 8003da0:	0020      	movs	r0, r4
 8003da2:	f006 fd71 	bl	800a888 <HAL_UART_Transmit>
				Debug_Tx("UNABLE TO11 SEND DATA STOPED CONNECTion");EndTransfer();
 8003da6:	f7ff fcb1 	bl	800370c <EndTransfer>
 8003daa:	e765      	b.n	8003c78 <SendTCPdata+0x18>
 8003dac:	20004160 	.word	0x20004160
 8003db0:	200000d0 	.word	0x200000d0
 8003db4:	080127cc 	.word	0x080127cc
 8003db8:	080127dc 	.word	0x080127dc
 8003dbc:	080127e0 	.word	0x080127e0
 8003dc0:	200049e8 	.word	0x200049e8
 8003dc4:	08012810 	.word	0x08012810
 8003dc8:	00001388 	.word	0x00001388
 8003dcc:	00000a0d 	.word	0x00000a0d
 8003dd0:	0801284c 	.word	0x0801284c
 8003dd4:	0801281c 	.word	0x0801281c
 8003dd8:	08012824 	.word	0x08012824
 8003ddc:	080127e8 	.word	0x080127e8

08003de0 <StartTCPConnection>:
{
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	46c6      	mov	lr, r8
 8003de4:	b500      	push	{lr}
	if (strlen(ip) > 4)
 8003de6:	4d31      	ldr	r5, [pc, #196]	; (8003eac <StartTCPConnection+0xcc>)
{
 8003de8:	b086      	sub	sp, #24
	if (strlen(ip) > 4)
 8003dea:	0028      	movs	r0, r5
 8003dec:	f7fc f98c 	bl	8000108 <strlen>
 8003df0:	0004      	movs	r4, r0
 8003df2:	2804      	cmp	r0, #4
 8003df4:	d816      	bhi.n	8003e24 <StartTCPConnection+0x44>
 8003df6:	4c2e      	ldr	r4, [pc, #184]	; (8003eb0 <StartTCPConnection+0xd0>)
	HAL_Delay(1500);
 8003df8:	482e      	ldr	r0, [pc, #184]	; (8003eb4 <StartTCPConnection+0xd4>)
 8003dfa:	f003 fc51 	bl	80076a0 <HAL_Delay>
	if (gprsok)
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d13f      	bne.n	8003e84 <StartTCPConnection+0xa4>
		ServerConnected = 1;
 8003e04:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <StartTCPConnection+0xd8>)
	HAL_Delay(1500);
 8003e06:	482b      	ldr	r0, [pc, #172]	; (8003eb4 <StartTCPConnection+0xd4>)
		ServerConnected = 1;
 8003e08:	6013      	str	r3, [r2, #0]
	HAL_Delay(1500);
 8003e0a:	f003 fc49 	bl	80076a0 <HAL_Delay>
	SendTCPdata(data_LOGIN);
 8003e0e:	482b      	ldr	r0, [pc, #172]	; (8003ebc <StartTCPConnection+0xdc>)
 8003e10:	f7ff ff26 	bl	8003c60 <SendTCPdata>
	HAL_Delay(500);
 8003e14:	20fa      	movs	r0, #250	; 0xfa
 8003e16:	0040      	lsls	r0, r0, #1
 8003e18:	f003 fc42 	bl	80076a0 <HAL_Delay>
}
 8003e1c:	b006      	add	sp, #24
 8003e1e:	bc80      	pop	{r7}
 8003e20:	46b8      	mov	r8, r7
 8003e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(GSMDataC, 0, 100);
 8003e24:	4e26      	ldr	r6, [pc, #152]	; (8003ec0 <StartTCPConnection+0xe0>)
 8003e26:	2100      	movs	r1, #0
 8003e28:	0037      	movs	r7, r6
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	2250      	movs	r2, #80	; 0x50
 8003e2e:	0038      	movs	r0, r7
 8003e30:	f00a fc00 	bl	800e634 <memset>
		strcpy(GSMDataC, (char *)" AT+QIOPEN=0,\"TCP\",\"");
 8003e34:	0032      	movs	r2, r6
		memset(GSMDataC, 0, 100);
 8003e36:	46b8      	mov	r8, r7
		strcpy(GSMDataC, (char *)" AT+QIOPEN=0,\"TCP\",\"");
 8003e38:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <StartTCPConnection+0xe4>)
 8003e3a:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003e3c:	c283      	stmia	r2!, {r0, r1, r7}
 8003e3e:	cb03      	ldmia	r3!, {r0, r1}
 8003e40:	c203      	stmia	r2!, {r0, r1}
		strcat(GSMDataC, ip);
 8003e42:	1c62      	adds	r2, r4, #1
 8003e44:	0029      	movs	r1, r5
 8003e46:	4640      	mov	r0, r8
 8003e48:	f00a fdc6 	bl	800e9d8 <memcpy>
		gprsok = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4c18      	ldr	r4, [pc, #96]	; (8003eb0 <StartTCPConnection+0xd0>)
			SendGSMCode(GSMDataC);
 8003e50:	0030      	movs	r0, r6
		gprsok = 0;
 8003e52:	6023      	str	r3, [r4, #0]
			SendGSMCode(GSMDataC);
 8003e54:	f7ff fb4a 	bl	80034ec <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN 0 TCP Connection open ", gpsto_net, "CONNECT OK"));
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <StartTCPConnection+0xe8>)
 8003e5a:	491c      	ldr	r1, [pc, #112]	; (8003ecc <StartTCPConnection+0xec>)
 8003e5c:	9302      	str	r3, [sp, #8]
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <StartTCPConnection+0xf0>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2000      	movs	r0, #0
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <StartTCPConnection+0xf4>)
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	000b      	movs	r3, r1
 8003e6e:	f7ff fcd1 	bl	8003814 <GetGSMReply>
 8003e72:	f7fc f949 	bl	8000108 <strlen>
 8003e76:	6020      	str	r0, [r4, #0]
	HAL_Delay(1500);
 8003e78:	480e      	ldr	r0, [pc, #56]	; (8003eb4 <StartTCPConnection+0xd4>)
 8003e7a:	f003 fc11 	bl	80076a0 <HAL_Delay>
	if (gprsok)
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0bf      	beq.n	8003e04 <StartTCPConnection+0x24>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e84:	220c      	movs	r2, #12
 8003e86:	4c14      	ldr	r4, [pc, #80]	; (8003ed8 <StartTCPConnection+0xf8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e88:	4914      	ldr	r1, [pc, #80]	; (8003edc <StartTCPConnection+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e8a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e8c:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e8e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <StartTCPConnection+0x100>)
 8003e92:	3202      	adds	r2, #2
 8003e94:	f006 fcf8 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <StartTCPConnection+0x104>)
 8003e9a:	a905      	add	r1, sp, #20
 8003e9c:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	230a      	movs	r3, #10
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f006 fcf0 	bl	800a888 <HAL_UART_Transmit>
		ServerConnected = 1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e7ab      	b.n	8003e04 <StartTCPConnection+0x24>
 8003eac:	200000d0 	.word	0x200000d0
 8003eb0:	20004160 	.word	0x20004160
 8003eb4:	000005dc 	.word	0x000005dc
 8003eb8:	20003f84 	.word	0x20003f84
 8003ebc:	200040e4 	.word	0x200040e4
 8003ec0:	200016e4 	.word	0x200016e4
 8003ec4:	0801287c 	.word	0x0801287c
 8003ec8:	08012894 	.word	0x08012894
 8003ecc:	08012720 	.word	0x08012720
 8003ed0:	200000cc 	.word	0x200000cc
 8003ed4:	080128a0 	.word	0x080128a0
 8003ed8:	200049e8 	.word	0x200049e8
 8003edc:	080128c8 	.word	0x080128c8
 8003ee0:	00001388 	.word	0x00001388
 8003ee4:	00000a0d 	.word	0x00000a0d

08003ee8 <GSMCellInfo>:
{
 8003ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eea:	46de      	mov	lr, fp
 8003eec:	4657      	mov	r7, sl
 8003eee:	464e      	mov	r6, r9
 8003ef0:	4645      	mov	r5, r8
	memset(SS0, 0, 4);
 8003ef2:	2300      	movs	r3, #0
{
 8003ef4:	b5e0      	push	{r5, r6, r7, lr}
	memset(SS0, 0, 4);
 8003ef6:	4cc2      	ldr	r4, [pc, #776]	; (8004200 <GSMCellInfo+0x318>)
	memset(SS1, 0, 4);
 8003ef8:	4dc2      	ldr	r5, [pc, #776]	; (8004204 <GSMCellInfo+0x31c>)
	memset(SS2, 0, 4);
 8003efa:	4ec3      	ldr	r6, [pc, #780]	; (8004208 <GSMCellInfo+0x320>)
	memset(SS3, 0, 4);
 8003efc:	4fc3      	ldr	r7, [pc, #780]	; (800420c <GSMCellInfo+0x324>)
	memset(SS4, 0, 4);
 8003efe:	4ac4      	ldr	r2, [pc, #784]	; (8004210 <GSMCellInfo+0x328>)
	memset(SS0, 0, 4);
 8003f00:	8063      	strh	r3, [r4, #2]
	memset(SS1, 0, 4);
 8003f02:	806b      	strh	r3, [r5, #2]
	memset(SS4, 0, 4);
 8003f04:	8053      	strh	r3, [r2, #2]
	memset(SS2, 0, 4);
 8003f06:	8073      	strh	r3, [r6, #2]
	memset(SS3, 0, 4);
 8003f08:	807b      	strh	r3, [r7, #2]
	memset(MCC0, 0, 5);
 8003f0a:	4bc2      	ldr	r3, [pc, #776]	; (8004214 <GSMCellInfo+0x32c>)
{
 8003f0c:	b0a1      	sub	sp, #132	; 0x84
	memset(MCC0, 0, 5);
 8003f0e:	2100      	movs	r1, #0
	memset(SS4, 0, 4);
 8003f10:	9216      	str	r2, [sp, #88]	; 0x58
	memset(MCC0, 0, 5);
 8003f12:	1c98      	adds	r0, r3, #2
 8003f14:	2203      	movs	r2, #3
 8003f16:	4699      	mov	r9, r3
	memset(SS0, 0, 4);
 8003f18:	941d      	str	r4, [sp, #116]	; 0x74
	memset(SS1, 0, 4);
 8003f1a:	951a      	str	r5, [sp, #104]	; 0x68
	memset(SS2, 0, 4);
 8003f1c:	961b      	str	r6, [sp, #108]	; 0x6c
	memset(SS3, 0, 4);
 8003f1e:	971c      	str	r7, [sp, #112]	; 0x70
	memset(MCC0, 0, 5);
 8003f20:	f00a fb88 	bl	800e634 <memset>
	memset(MNC0, 0, 5);
 8003f24:	4bbc      	ldr	r3, [pc, #752]	; (8004218 <GSMCellInfo+0x330>)
 8003f26:	2203      	movs	r2, #3
 8003f28:	2100      	movs	r1, #0
 8003f2a:	1c98      	adds	r0, r3, #2
 8003f2c:	469b      	mov	fp, r3
 8003f2e:	f00a fb81 	bl	800e634 <memset>
	memset(LAC0, 0, 6);
 8003f32:	4bba      	ldr	r3, [pc, #744]	; (800421c <GSMCellInfo+0x334>)
 8003f34:	2204      	movs	r2, #4
 8003f36:	1c98      	adds	r0, r3, #2
 8003f38:	2100      	movs	r1, #0
 8003f3a:	9310      	str	r3, [sp, #64]	; 0x40
 8003f3c:	f00a fb7a 	bl	800e634 <memset>
	memset(LAC1, 0, 6);
 8003f40:	48b7      	ldr	r0, [pc, #732]	; (8004220 <GSMCellInfo+0x338>)
 8003f42:	2204      	movs	r2, #4
 8003f44:	2100      	movs	r1, #0
 8003f46:	9017      	str	r0, [sp, #92]	; 0x5c
 8003f48:	3002      	adds	r0, #2
 8003f4a:	f00a fb73 	bl	800e634 <memset>
	memset(LAC2, 0, 6);
 8003f4e:	49b5      	ldr	r1, [pc, #724]	; (8004224 <GSMCellInfo+0x33c>)
 8003f50:	2204      	movs	r2, #4
 8003f52:	9118      	str	r1, [sp, #96]	; 0x60
 8003f54:	1c88      	adds	r0, r1, #2
 8003f56:	2100      	movs	r1, #0
 8003f58:	f00a fb6c 	bl	800e634 <memset>
	memset(LAC3, 0, 6);
 8003f5c:	4bb2      	ldr	r3, [pc, #712]	; (8004228 <GSMCellInfo+0x340>)
 8003f5e:	2204      	movs	r2, #4
 8003f60:	1c98      	adds	r0, r3, #2
 8003f62:	2100      	movs	r1, #0
 8003f64:	9319      	str	r3, [sp, #100]	; 0x64
 8003f66:	f00a fb65 	bl	800e634 <memset>
	memset(LAC4, 0, 6);
 8003f6a:	4ab0      	ldr	r2, [pc, #704]	; (800422c <GSMCellInfo+0x344>)
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	9211      	str	r2, [sp, #68]	; 0x44
 8003f70:	1c90      	adds	r0, r2, #2
 8003f72:	2204      	movs	r2, #4
 8003f74:	f00a fb5e 	bl	800e634 <memset>
	memset(CID4, 0, 6);
 8003f78:	48ad      	ldr	r0, [pc, #692]	; (8004230 <GSMCellInfo+0x348>)
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	9012      	str	r0, [sp, #72]	; 0x48
 8003f80:	3002      	adds	r0, #2
 8003f82:	f00a fb57 	bl	800e634 <memset>
	memset(CID3, 0, 6);
 8003f86:	4bab      	ldr	r3, [pc, #684]	; (8004234 <GSMCellInfo+0x34c>)
 8003f88:	2204      	movs	r2, #4
 8003f8a:	1c98      	adds	r0, r3, #2
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f90:	f00a fb50 	bl	800e634 <memset>
	memset(CID2, 0, 6);
 8003f94:	49a8      	ldr	r1, [pc, #672]	; (8004238 <GSMCellInfo+0x350>)
 8003f96:	2204      	movs	r2, #4
 8003f98:	9114      	str	r1, [sp, #80]	; 0x50
 8003f9a:	1c88      	adds	r0, r1, #2
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	f00a fb49 	bl	800e634 <memset>
	memset(CID1, 0, 6);
 8003fa2:	4aa6      	ldr	r2, [pc, #664]	; (800423c <GSMCellInfo+0x354>)
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	9215      	str	r2, [sp, #84]	; 0x54
 8003fa8:	1c90      	adds	r0, r2, #2
 8003faa:	2204      	movs	r2, #4
 8003fac:	f00a fb42 	bl	800e634 <memset>
	memset(CID0, 0, 6);
 8003fb0:	48a3      	ldr	r0, [pc, #652]	; (8004240 <GSMCellInfo+0x358>)
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	4680      	mov	r8, r0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	3002      	adds	r0, #2
 8003fba:	f00a fb3b 	bl	800e634 <memset>
	strcpy(MCC0, "x\0");
 8003fbe:	2378      	movs	r3, #120	; 0x78
 8003fc0:	4648      	mov	r0, r9
	strcpy(LAC0, "x\0");
 8003fc2:	9910      	ldr	r1, [sp, #64]	; 0x40
	strcpy(MCC0, "x\0");
 8003fc4:	8003      	strh	r3, [r0, #0]
	strcpy(LAC0, "x\0");
 8003fc6:	800b      	strh	r3, [r1, #0]
	strcpy(MNC0, "x\0");
 8003fc8:	4658      	mov	r0, fp
	strcpy(CID0, "x\0");
 8003fca:	4641      	mov	r1, r8
	strcpy(SS4, "x\0");
 8003fcc:	9a16      	ldr	r2, [sp, #88]	; 0x58
	strcpy(MNC0, "x\0");
 8003fce:	8003      	strh	r3, [r0, #0]
	strcpy(SS4, "x\0");
 8003fd0:	8013      	strh	r3, [r2, #0]
	strcpy(LAC4, "x\0");
 8003fd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
	strcpy(CID0, "x\0");
 8003fd4:	800b      	strh	r3, [r1, #0]
	strcpy(LAC4, "x\0");
 8003fd6:	8013      	strh	r3, [r2, #0]
	memset(GSMData, 0, 800);
 8003fd8:	22c8      	movs	r2, #200	; 0xc8
	strcpy(SS0, "x\0");
 8003fda:	8023      	strh	r3, [r4, #0]
	strcpy(LAC1, "x\0");
 8003fdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
	strcpy(CID1, "x\0");
 8003fde:	9c15      	ldr	r4, [sp, #84]	; 0x54
	strcpy(LAC2, "x\0");
 8003fe0:	9918      	ldr	r1, [sp, #96]	; 0x60
	strcpy(SS1, "x\0");
 8003fe2:	802b      	strh	r3, [r5, #0]
	strcpy(CID1, "x\0");
 8003fe4:	8023      	strh	r3, [r4, #0]
	strcpy(LAC1, "x\0");
 8003fe6:	8003      	strh	r3, [r0, #0]
	strcpy(LAC2, "x\0");
 8003fe8:	800b      	strh	r3, [r1, #0]
	strcpy(CID2, "x\0");
 8003fea:	9d14      	ldr	r5, [sp, #80]	; 0x50
	strcpy(LAC3, "x\0");
 8003fec:	9919      	ldr	r1, [sp, #100]	; 0x64
	strcpy(CID4, "x\0");
 8003fee:	9812      	ldr	r0, [sp, #72]	; 0x48
	strcpy(CID3, "x\0");
 8003ff0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	strcpy(CID2, "x\0");
 8003ff2:	802b      	strh	r3, [r5, #0]
	strcpy(LAC3, "x\0");
 8003ff4:	800b      	strh	r3, [r1, #0]
	strcpy(CID4, "x\0");
 8003ff6:	8003      	strh	r3, [r0, #0]
	strcpy(SS2, "x\0");
 8003ff8:	8033      	strh	r3, [r6, #0]
	strcpy(SS3, "x\0");
 8003ffa:	803b      	strh	r3, [r7, #0]
	strcpy(CID3, "x\0");
 8003ffc:	8023      	strh	r3, [r4, #0]
	memset(GSMData, 0, 800);
 8003ffe:	4b91      	ldr	r3, [pc, #580]	; (8004244 <GSMCellInfo+0x35c>)
 8004000:	2100      	movs	r1, #0
 8004002:	0018      	movs	r0, r3
 8004004:	0092      	lsls	r2, r2, #2
 8004006:	469a      	mov	sl, r3
 8004008:	f00a fb14 	bl	800e634 <memset>
	SendGSMCodeL(" AT+QENG?");
 800400c:	488e      	ldr	r0, [pc, #568]	; (8004248 <GSMCellInfo+0x360>)
 800400e:	f7ff fad5 	bl	80035bc <SendGSMCodeL>
	HAL_Delay(500);
 8004012:	20fa      	movs	r0, #250	; 0xfa
 8004014:	0040      	lsls	r0, r0, #1
 8004016:	f003 fb43 	bl	80076a0 <HAL_Delay>
	char *m0 = strstr(GSMData, "+QENG: 0");
 800401a:	4650      	mov	r0, sl
 800401c:	498b      	ldr	r1, [pc, #556]	; (800424c <GSMCellInfo+0x364>)
 800401e:	f00a fbb9 	bl	800e794 <strstr>
 8004022:	0005      	movs	r5, r0
 8004024:	901e      	str	r0, [sp, #120]	; 0x78
	if ((m0 != NULL) & (strlen(m0) > 1))
 8004026:	f7fc f86f 	bl	8000108 <strlen>
 800402a:	2d00      	cmp	r5, #0
 800402c:	d100      	bne.n	8004030 <GSMCellInfo+0x148>
 800402e:	e0d2      	b.n	80041d6 <GSMCellInfo+0x2ee>
 8004030:	2801      	cmp	r0, #1
 8004032:	d800      	bhi.n	8004036 <GSMCellInfo+0x14e>
 8004034:	e0cf      	b.n	80041d6 <GSMCellInfo+0x2ee>
 8004036:	4e86      	ldr	r6, [pc, #536]	; (8004250 <GSMCellInfo+0x368>)
 8004038:	0028      	movs	r0, r5
		while ((part = strtok_r(m0, ",", &m0)))
 800403a:	0031      	movs	r1, r6
 800403c:	aa1e      	add	r2, sp, #120	; 0x78
 800403e:	4f85      	ldr	r7, [pc, #532]	; (8004254 <GSMCellInfo+0x36c>)
 8004040:	f00a fba3 	bl	800e78a <strtok_r>
		int k = 0;
 8004044:	2400      	movs	r4, #0
 8004046:	4645      	mov	r5, r8
		while ((part = strtok_r(m0, ",", &m0)))
 8004048:	1e01      	subs	r1, r0, #0
 800404a:	d00f      	beq.n	800406c <GSMCellInfo+0x184>
			if (k == 1)
 800404c:	2c07      	cmp	r4, #7
 800404e:	d805      	bhi.n	800405c <GSMCellInfo+0x174>
 8004050:	00a3      	lsls	r3, r4, #2
 8004052:	58fb      	ldr	r3, [r7, r3]
 8004054:	469f      	mov	pc, r3
				strcpy(MCC0, part);
 8004056:	4648      	mov	r0, r9
 8004058:	f00a fcab 	bl	800e9b2 <strcpy>
		while ((part = strtok_r(m0, ",", &m0)))
 800405c:	981e      	ldr	r0, [sp, #120]	; 0x78
			k++;
 800405e:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 8004060:	0031      	movs	r1, r6
 8004062:	aa1e      	add	r2, sp, #120	; 0x78
 8004064:	f00a fb91 	bl	800e78a <strtok_r>
 8004068:	1e01      	subs	r1, r0, #0
 800406a:	d1ef      	bne.n	800404c <GSMCellInfo+0x164>
 800406c:	46a8      	mov	r8, r5
	char *m1 = strstr(GSMData, "+QENG: 1");
 800406e:	4650      	mov	r0, sl
 8004070:	4979      	ldr	r1, [pc, #484]	; (8004258 <GSMCellInfo+0x370>)
 8004072:	f00a fb8f 	bl	800e794 <strstr>
 8004076:	0004      	movs	r4, r0
 8004078:	901f      	str	r0, [sp, #124]	; 0x7c
	if ((m1 != NULL) & (strlen(m1) > 1))
 800407a:	f7fc f845 	bl	8000108 <strlen>
 800407e:	2c00      	cmp	r4, #0
 8004080:	d02b      	beq.n	80040da <GSMCellInfo+0x1f2>
 8004082:	2801      	cmp	r0, #1
 8004084:	d929      	bls.n	80040da <GSMCellInfo+0x1f2>
 8004086:	4b75      	ldr	r3, [pc, #468]	; (800425c <GSMCellInfo+0x374>)
 8004088:	0020      	movs	r0, r4
		int k = 0;
 800408a:	2500      	movs	r5, #0
 800408c:	001c      	movs	r4, r3
 800408e:	4e70      	ldr	r6, [pc, #448]	; (8004250 <GSMCellInfo+0x368>)
 8004090:	af1f      	add	r7, sp, #124	; 0x7c
		while ((part = strtok_r(m1, ",", &m1)))
 8004092:	0031      	movs	r1, r6
 8004094:	003a      	movs	r2, r7
 8004096:	f00a fb78 	bl	800e78a <strtok_r>
 800409a:	1e01      	subs	r1, r0, #0
 800409c:	d01d      	beq.n	80040da <GSMCellInfo+0x1f2>
			if (k == 3)
 800409e:	1eeb      	subs	r3, r5, #3
 80040a0:	2b25      	cmp	r3, #37	; 0x25
 80040a2:	d853      	bhi.n	800414c <GSMCellInfo+0x264>
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	58e3      	ldr	r3, [r4, r3]
 80040a8:	469f      	mov	pc, r3
				strcpy(SS0, part);
 80040aa:	981d      	ldr	r0, [sp, #116]	; 0x74
 80040ac:	f00a fc81 	bl	800e9b2 <strcpy>
			k++;
 80040b0:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80040b2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80040b4:	e7d4      	b.n	8004060 <GSMCellInfo+0x178>
				strcpy(CID0, part);
 80040b6:	0028      	movs	r0, r5
 80040b8:	f00a fc7b 	bl	800e9b2 <strcpy>
			k++;
 80040bc:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80040be:	981e      	ldr	r0, [sp, #120]	; 0x78
 80040c0:	e7ce      	b.n	8004060 <GSMCellInfo+0x178>
				strcpy(LAC0, part);
 80040c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80040c4:	f00a fc75 	bl	800e9b2 <strcpy>
			k++;
 80040c8:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80040ca:	981e      	ldr	r0, [sp, #120]	; 0x78
 80040cc:	e7c8      	b.n	8004060 <GSMCellInfo+0x178>
				strcpy(MNC0, part);
 80040ce:	4658      	mov	r0, fp
 80040d0:	f00a fc6f 	bl	800e9b2 <strcpy>
			k++;
 80040d4:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80040d6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80040d8:	e7c2      	b.n	8004060 <GSMCellInfo+0x178>
	memset(gsminfo, 0, 80);
 80040da:	4c61      	ldr	r4, [pc, #388]	; (8004260 <GSMCellInfo+0x378>)
 80040dc:	2250      	movs	r2, #80	; 0x50
 80040de:	2100      	movs	r1, #0
 80040e0:	0020      	movs	r0, r4
 80040e2:	f00a faa7 	bl	800e634 <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
 80040e6:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <GSMCellInfo+0x37c>)
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	f7fd f8df 	bl	80012ac <__aeabi_f2iz>
 80040ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80040f0:	0002      	movs	r2, r0
 80040f2:	930e      	str	r3, [sp, #56]	; 0x38
 80040f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040f6:	0020      	movs	r0, r4
 80040f8:	930d      	str	r3, [sp, #52]	; 0x34
 80040fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040fc:	495a      	ldr	r1, [pc, #360]	; (8004268 <GSMCellInfo+0x380>)
 80040fe:	930c      	str	r3, [sp, #48]	; 0x30
 8004100:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004102:	930b      	str	r3, [sp, #44]	; 0x2c
 8004104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004106:	930a      	str	r3, [sp, #40]	; 0x28
 8004108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800410a:	9309      	str	r3, [sp, #36]	; 0x24
 800410c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800410e:	9308      	str	r3, [sp, #32]
 8004110:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004112:	9307      	str	r3, [sp, #28]
 8004114:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004116:	9306      	str	r3, [sp, #24]
 8004118:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800411a:	9305      	str	r3, [sp, #20]
 800411c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800411e:	9304      	str	r3, [sp, #16]
 8004120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004122:	9303      	str	r3, [sp, #12]
 8004124:	4643      	mov	r3, r8
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	465b      	mov	r3, fp
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	464b      	mov	r3, r9
 8004132:	f00a fa13 	bl	800e55c <siprintf>
}
 8004136:	0020      	movs	r0, r4
 8004138:	b021      	add	sp, #132	; 0x84
 800413a:	bcf0      	pop	{r4, r5, r6, r7}
 800413c:	46bb      	mov	fp, r7
 800413e:	46b2      	mov	sl, r6
 8004140:	46a9      	mov	r9, r5
 8004142:	46a0      	mov	r8, r4
 8004144:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(SS1, part);
 8004146:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004148:	f00a fc33 	bl	800e9b2 <strcpy>
		while ((part = strtok_r(m1, ",", &m1)))
 800414c:	981f      	ldr	r0, [sp, #124]	; 0x7c
			k++;
 800414e:	3501      	adds	r5, #1
 8004150:	e79f      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(CID4, part);
 8004152:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004154:	f00a fc2d 	bl	800e9b2 <strcpy>
			k++;
 8004158:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800415a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800415c:	e799      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(LAC4, part);
 800415e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004160:	f00a fc27 	bl	800e9b2 <strcpy>
			k++;
 8004164:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004166:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004168:	e793      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(SS4, part);
 800416a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800416c:	f00a fc21 	bl	800e9b2 <strcpy>
			k++;
 8004170:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004172:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004174:	e78d      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(CID3, part);
 8004176:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004178:	f00a fc1b 	bl	800e9b2 <strcpy>
			k++;
 800417c:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800417e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004180:	e787      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(LAC3, part);
 8004182:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004184:	f00a fc15 	bl	800e9b2 <strcpy>
			k++;
 8004188:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800418a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800418c:	e781      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(SS3, part);
 800418e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004190:	f00a fc0f 	bl	800e9b2 <strcpy>
			k++;
 8004194:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004196:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004198:	e77b      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(CID2, part);
 800419a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800419c:	f00a fc09 	bl	800e9b2 <strcpy>
			k++;
 80041a0:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80041a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80041a4:	e775      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(LAC2, part);
 80041a6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80041a8:	f00a fc03 	bl	800e9b2 <strcpy>
			k++;
 80041ac:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80041ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80041b0:	e76f      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(SS2, part);
 80041b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80041b4:	f00a fbfd 	bl	800e9b2 <strcpy>
			k++;
 80041b8:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80041ba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80041bc:	e769      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(CID1, part);
 80041be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80041c0:	f00a fbf7 	bl	800e9b2 <strcpy>
			k++;
 80041c4:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80041c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80041c8:	e763      	b.n	8004092 <GSMCellInfo+0x1aa>
				strcpy(LAC1, part);
 80041ca:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80041cc:	f00a fbf1 	bl	800e9b2 <strcpy>
			k++;
 80041d0:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80041d2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80041d4:	e75d      	b.n	8004092 <GSMCellInfo+0x1aa>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80041d6:	220c      	movs	r2, #12
 80041d8:	4c24      	ldr	r4, [pc, #144]	; (800426c <GSMCellInfo+0x384>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80041da:	4925      	ldr	r1, [pc, #148]	; (8004270 <GSMCellInfo+0x388>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80041dc:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80041de:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80041e0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80041e2:	4b24      	ldr	r3, [pc, #144]	; (8004274 <GSMCellInfo+0x38c>)
 80041e4:	320a      	adds	r2, #10
 80041e6:	f006 fb4f 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <GSMCellInfo+0x390>)
 80041ec:	af1f      	add	r7, sp, #124	; 0x7c
 80041ee:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80041f0:	2202      	movs	r2, #2
 80041f2:	230a      	movs	r3, #10
 80041f4:	0039      	movs	r1, r7
 80041f6:	0020      	movs	r0, r4
 80041f8:	f006 fb46 	bl	800a888 <HAL_UART_Transmit>
}
 80041fc:	e737      	b.n	800406e <GSMCellInfo+0x186>
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	20003f70 	.word	0x20003f70
 8004204:	20003f74 	.word	0x20003f74
 8004208:	20003f78 	.word	0x20003f78
 800420c:	20003f7c 	.word	0x20003f7c
 8004210:	20003f80 	.word	0x20003f80
 8004214:	20001ee4 	.word	0x20001ee4
 8004218:	20001eec 	.word	0x20001eec
 800421c:	20001eb8 	.word	0x20001eb8
 8004220:	20001ec0 	.word	0x20001ec0
 8004224:	20001ec8 	.word	0x20001ec8
 8004228:	20001ed0 	.word	0x20001ed0
 800422c:	20001ed8 	.word	0x20001ed8
 8004230:	20000354 	.word	0x20000354
 8004234:	2000034c 	.word	0x2000034c
 8004238:	20000344 	.word	0x20000344
 800423c:	2000033c 	.word	0x2000033c
 8004240:	20000334 	.word	0x20000334
 8004244:	20000550 	.word	0x20000550
 8004248:	080128d8 	.word	0x080128d8
 800424c:	080128e4 	.word	0x080128e4
 8004250:	0801245c 	.word	0x0801245c
 8004254:	08012948 	.word	0x08012948
 8004258:	08012908 	.word	0x08012908
 800425c:	08012968 	.word	0x08012968
 8004260:	20004598 	.word	0x20004598
 8004264:	20001d88 	.word	0x20001d88
 8004268:	08012914 	.word	0x08012914
 800426c:	200049e8 	.word	0x200049e8
 8004270:	080128f0 	.word	0x080128f0
 8004274:	00001388 	.word	0x00001388
 8004278:	00000a0d 	.word	0x00000a0d

0800427c <ProcessTCPAll>:
}

void ProcessTCPAll(char *data)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b083      	sub	sp, #12
 8004280:	0005      	movs	r5, r0
int ticT;
int tocT;
char tocTxt[30];
char time1[10];
int tic(){
	return HAL_GetTick();
 8004282:	f003 fa07 	bl	8007694 <HAL_GetTick>
	int tcpSENDDATA = tic();

	if (ServerConnected > 0)
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <ProcessTCPAll+0xf8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	dc27      	bgt.n	80042de <ProcessTCPAll+0x62>
		SendTCPdata(data);
		Debug_Tx("dat send done  ");
	}
	else
	{
		if (debug == 1)
 800428e:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <ProcessTCPAll+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004290:	4c3a      	ldr	r4, [pc, #232]	; (800437c <ProcessTCPAll+0x100>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d059      	beq.n	800434c <ProcessTCPAll+0xd0>
 8004298:	ad01      	add	r5, sp, #4
 800429a:	270c      	movs	r7, #12
 800429c:	6823      	ldr	r3, [r4, #0]
	char newline[2] = "\r\n";
 800429e:	4e38      	ldr	r6, [pc, #224]	; (8004380 <ProcessTCPAll+0x104>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042a0:	221b      	movs	r2, #27
 80042a2:	4938      	ldr	r1, [pc, #224]	; (8004384 <ProcessTCPAll+0x108>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042a4:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042a6:	0020      	movs	r0, r4
 80042a8:	4b37      	ldr	r3, [pc, #220]	; (8004388 <ProcessTCPAll+0x10c>)
 80042aa:	f006 faed 	bl	800a888 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80042ae:	230a      	movs	r3, #10
 80042b0:	2202      	movs	r2, #2
 80042b2:	0029      	movs	r1, r5
 80042b4:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 80042b6:	802e      	strh	r6, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80042b8:	f006 fae6 	bl	800a888 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042bc:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042be:	2200      	movs	r2, #0
 80042c0:	4932      	ldr	r1, [pc, #200]	; (800438c <ProcessTCPAll+0x110>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042c2:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042c4:	0020      	movs	r0, r4
 80042c6:	4b30      	ldr	r3, [pc, #192]	; (8004388 <ProcessTCPAll+0x10c>)
 80042c8:	f006 fade 	bl	800a888 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80042cc:	230a      	movs	r3, #10
 80042ce:	2202      	movs	r2, #2
 80042d0:	0029      	movs	r1, r5
 80042d2:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 80042d4:	802e      	strh	r6, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80042d6:	f006 fad7 	bl	800a888 <HAL_UART_Transmit>
		Debug_Tx(ip2);
		//ResetTCP();
	}

	toc(tcpSENDDATA, "_________________________TCP SEND DATA");
}
 80042da:	b003      	add	sp, #12
 80042dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042de:	270c      	movs	r7, #12
 80042e0:	4c26      	ldr	r4, [pc, #152]	; (800437c <ProcessTCPAll+0x100>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042e2:	2213      	movs	r2, #19
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042e4:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042e6:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042e8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042ea:	4929      	ldr	r1, [pc, #164]	; (8004390 <ProcessTCPAll+0x114>)
 80042ec:	4b26      	ldr	r3, [pc, #152]	; (8004388 <ProcessTCPAll+0x10c>)
 80042ee:	f006 facb 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80042f2:	466b      	mov	r3, sp
 80042f4:	4e22      	ldr	r6, [pc, #136]	; (8004380 <ProcessTCPAll+0x104>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80042f6:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 80042f8:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80042fa:	2202      	movs	r2, #2
 80042fc:	230a      	movs	r3, #10
 80042fe:	0020      	movs	r0, r4
 8004300:	f006 fac2 	bl	800a888 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004304:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004306:	2200      	movs	r2, #0
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004308:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800430a:	0020      	movs	r0, r4
 800430c:	491f      	ldr	r1, [pc, #124]	; (800438c <ProcessTCPAll+0x110>)
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <ProcessTCPAll+0x10c>)
 8004310:	f006 faba 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004314:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004316:	a901      	add	r1, sp, #4
 8004318:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 800431a:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800431c:	0020      	movs	r0, r4
 800431e:	230a      	movs	r3, #10
 8004320:	f006 fab2 	bl	800a888 <HAL_UART_Transmit>
		SendTCPdata(data);
 8004324:	0028      	movs	r0, r5
 8004326:	f7ff fc9b 	bl	8003c60 <SendTCPdata>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800432a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800432c:	220f      	movs	r2, #15
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800432e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004330:	0020      	movs	r0, r4
 8004332:	4918      	ldr	r1, [pc, #96]	; (8004394 <ProcessTCPAll+0x118>)
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <ProcessTCPAll+0x10c>)
 8004336:	f006 faa7 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800433a:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800433c:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 800433e:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004340:	0020      	movs	r0, r4
 8004342:	230a      	movs	r3, #10
 8004344:	a901      	add	r1, sp, #4
 8004346:	f006 fa9f 	bl	800a888 <HAL_UART_Transmit>
}
 800434a:	e7c6      	b.n	80042da <ProcessTCPAll+0x5e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800434c:	220c      	movs	r2, #12
 800434e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004350:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004352:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004354:	4910      	ldr	r1, [pc, #64]	; (8004398 <ProcessTCPAll+0x11c>)
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <ProcessTCPAll+0x10c>)
 8004358:	3216      	adds	r2, #22
 800435a:	f006 fa95 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <ProcessTCPAll+0x104>)
 8004360:	ad01      	add	r5, sp, #4
 8004362:	802b      	strh	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004364:	2202      	movs	r2, #2
 8004366:	230a      	movs	r3, #10
 8004368:	0029      	movs	r1, r5
 800436a:	0020      	movs	r0, r4
 800436c:	f006 fa8c 	bl	800a888 <HAL_UART_Transmit>
}
 8004370:	e793      	b.n	800429a <ProcessTCPAll+0x1e>
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	20003f84 	.word	0x20003f84
 8004378:	200000c4 	.word	0x200000c4
 800437c:	200049e8 	.word	0x200049e8
 8004380:	00000a0d 	.word	0x00000a0d
 8004384:	08012a60 	.word	0x08012a60
 8004388:	00001388 	.word	0x00001388
 800438c:	20004a80 	.word	0x20004a80
 8004390:	08012a68 	.word	0x08012a68
 8004394:	08012a2c 	.word	0x08012a2c
 8004398:	08012a3c 	.word	0x08012a3c

0800439c <SetupGPRS>:
	}
	return smsok;
}

void SetupGPRS(char *apn)
{
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	4657      	mov	r7, sl
 80043a0:	464e      	mov	r6, r9
 80043a2:	4645      	mov	r5, r8
 80043a4:	46de      	mov	lr, fp

	int ck = 5;

	gprsok = 0;
 80043a6:	2300      	movs	r3, #0
{
 80043a8:	b5e0      	push	{r5, r6, r7, lr}
 80043aa:	4680      	mov	r8, r0
	gprsok = 0;
 80043ac:	2505      	movs	r5, #5
 80043ae:	4f33      	ldr	r7, [pc, #204]	; (800447c <SetupGPRS+0xe0>)
{
 80043b0:	b08b      	sub	sp, #44	; 0x2c
	gprsok = 0;
 80043b2:	603b      	str	r3, [r7, #0]
	while ((ck > 0) && (gprsok < 1))
 80043b4:	4b32      	ldr	r3, [pc, #200]	; (8004480 <SetupGPRS+0xe4>)
 80043b6:	4c33      	ldr	r4, [pc, #204]	; (8004484 <SetupGPRS+0xe8>)
 80043b8:	9306      	str	r3, [sp, #24]
 80043ba:	4b33      	ldr	r3, [pc, #204]	; (8004488 <SetupGPRS+0xec>)
 80043bc:	4e33      	ldr	r6, [pc, #204]	; (800448c <SetupGPRS+0xf0>)
 80043be:	469b      	mov	fp, r3
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <SetupGPRS+0xf4>)
		{
			// gprsok=0;
			// HAL_Delay(4000);

			SendGSMCode(" AT+QIMODE=0");
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 80043c2:	9705      	str	r7, [sp, #20]
 80043c4:	469a      	mov	sl, r3
 80043c6:	4b33      	ldr	r3, [pc, #204]	; (8004494 <SetupGPRS+0xf8>)
 80043c8:	4699      	mov	r9, r3
 80043ca:	4b33      	ldr	r3, [pc, #204]	; (8004498 <SetupGPRS+0xfc>)
 80043cc:	9307      	str	r3, [sp, #28]
			SendGSMCode(" AT+QIMODE=0");
 80043ce:	4b33      	ldr	r3, [pc, #204]	; (800449c <SetupGPRS+0x100>)
 80043d0:	9308      	str	r3, [sp, #32]
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 80043d2:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <SetupGPRS+0x104>)
 80043d4:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_Delay(2000);
 80043d6:	20fa      	movs	r0, #250	; 0xfa
 80043d8:	00c0      	lsls	r0, r0, #3
 80043da:	f003 f961 	bl	80076a0 <HAL_Delay>
		memset(GSMDataC, 0, 100);
 80043de:	0020      	movs	r0, r4
 80043e0:	2100      	movs	r1, #0
 80043e2:	2258      	movs	r2, #88	; 0x58
 80043e4:	300c      	adds	r0, #12
 80043e6:	f00a f925 	bl	800e634 <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80043ea:	0022      	movs	r2, r4
 80043ec:	9b06      	ldr	r3, [sp, #24]
 80043ee:	cb83      	ldmia	r3!, {r0, r1, r7}
 80043f0:	c283      	stmia	r2!, {r0, r1, r7}
		strcat(GSMDataC, apn);
 80043f2:	0020      	movs	r0, r4
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80043f4:	881b      	ldrh	r3, [r3, #0]
		strcat(GSMDataC, apn);
 80043f6:	4641      	mov	r1, r8
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80043f8:	81a3      	strh	r3, [r4, #12]
		strcat(GSMDataC, apn);
 80043fa:	300e      	adds	r0, #14
 80043fc:	f00a f9e0 	bl	800e7c0 <stpcpy>
		strcat(GSMDataC, "\",\"\",\"\",0");
 8004400:	220a      	movs	r2, #10
 8004402:	4659      	mov	r1, fp
 8004404:	f00a fae8 	bl	800e9d8 <memcpy>
		SendGSMCode(GSMDataC);
 8004408:	0020      	movs	r0, r4
 800440a:	f7ff f86f 	bl	80034ec <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 800440e:	4653      	mov	r3, sl
 8004410:	9302      	str	r3, [sp, #8]
 8004412:	464b      	mov	r3, r9
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	9b07      	ldr	r3, [sp, #28]
 800441c:	0031      	movs	r1, r6
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2000      	movs	r0, #0
 8004422:	0033      	movs	r3, r6
 8004424:	f7ff f9f6 	bl	8003814 <GetGSMReply>
 8004428:	f7fb fe6e 	bl	8000108 <strlen>
 800442c:	9b05      	ldr	r3, [sp, #20]
 800442e:	6018      	str	r0, [r3, #0]
		if (gprsok > 0)
 8004430:	2800      	cmp	r0, #0
 8004432:	d109      	bne.n	8004448 <SetupGPRS+0xac>
	while ((ck > 0) && (gprsok < 1))
 8004434:	3d01      	subs	r5, #1
 8004436:	2d00      	cmp	r5, #0
 8004438:	d1cd      	bne.n	80043d6 <SetupGPRS+0x3a>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 800443a:	b00b      	add	sp, #44	; 0x2c
 800443c:	bcf0      	pop	{r4, r5, r6, r7}
 800443e:	46bb      	mov	fp, r7
 8004440:	46b2      	mov	sl, r6
 8004442:	46a9      	mov	r9, r5
 8004444:	46a0      	mov	r8, r4
 8004446:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SendGSMCode(" AT+QIMODE=0");
 8004448:	9808      	ldr	r0, [sp, #32]
 800444a:	f7ff f84f 	bl	80034ec <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 800444e:	4653      	mov	r3, sl
 8004450:	9302      	str	r3, [sp, #8]
 8004452:	464b      	mov	r3, r9
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800445c:	0031      	movs	r1, r6
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2000      	movs	r0, #0
 8004462:	0033      	movs	r3, r6
 8004464:	f7ff f9d6 	bl	8003814 <GetGSMReply>
 8004468:	f7fb fe4e 	bl	8000108 <strlen>
 800446c:	9b05      	ldr	r3, [sp, #20]
	while ((ck > 0) && (gprsok < 1))
 800446e:	3d01      	subs	r5, #1
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8004470:	6018      	str	r0, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 8004472:	2d00      	cmp	r5, #0
 8004474:	d0e1      	beq.n	800443a <SetupGPRS+0x9e>
 8004476:	2800      	cmp	r0, #0
 8004478:	ddad      	ble.n	80043d6 <SetupGPRS+0x3a>
 800447a:	e7de      	b.n	800443a <SetupGPRS+0x9e>
 800447c:	20004160 	.word	0x20004160
 8004480:	08012a7c 	.word	0x08012a7c
 8004484:	200016e4 	.word	0x200016e4
 8004488:	08012a8c 	.word	0x08012a8c
 800448c:	08012720 	.word	0x08012720
 8004490:	0801289c 	.word	0x0801289c
 8004494:	200000c8 	.word	0x200000c8
 8004498:	08012a98 	.word	0x08012a98
 800449c:	08012ab8 	.word	0x08012ab8
 80044a0:	08012ac8 	.word	0x08012ac8

080044a4 <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 80044a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a6:	46de      	mov	lr, fp
 80044a8:	4657      	mov	r7, sl
 80044aa:	464e      	mov	r6, r9
 80044ac:	4645      	mov	r5, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80044ae:	220c      	movs	r2, #12
 80044b0:	b5e0      	push	{r5, r6, r7, lr}
 80044b2:	4ea3      	ldr	r6, [pc, #652]	; (8004740 <ShiftGSMProfile+0x29c>)
 80044b4:	b089      	sub	sp, #36	; 0x24
 80044b6:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044b8:	49a2      	ldr	r1, [pc, #648]	; (8004744 <ShiftGSMProfile+0x2a0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80044ba:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044bc:	0030      	movs	r0, r6
 80044be:	4ba2      	ldr	r3, [pc, #648]	; (8004748 <ShiftGSMProfile+0x2a4>)
 80044c0:	3224      	adds	r2, #36	; 0x24
 80044c2:	f006 f9e1 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80044c6:	4ba1      	ldr	r3, [pc, #644]	; (800474c <ShiftGSMProfile+0x2a8>)
 80044c8:	af07      	add	r7, sp, #28
 80044ca:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80044cc:	2202      	movs	r2, #2
 80044ce:	230a      	movs	r3, #10
 80044d0:	0039      	movs	r1, r7
 80044d2:	0030      	movs	r0, r6
 80044d4:	f006 f9d8 	bl	800a888 <HAL_UART_Transmit>
	// Debug_Tx(GSMSimOperator());

	// Debug_Tx("______________setup stk_____________________________");
	int ck = 10;
	ook = 0;
	while ((ck > 0) && (ook < 1))
 80044d8:	4b9d      	ldr	r3, [pc, #628]	; (8004750 <ShiftGSMProfile+0x2ac>)
	int ck = 10;
 80044da:	250a      	movs	r5, #10
 80044dc:	4699      	mov	r9, r3
 80044de:	4b9d      	ldr	r3, [pc, #628]	; (8004754 <ShiftGSMProfile+0x2b0>)
 80044e0:	4c9d      	ldr	r4, [pc, #628]	; (8004758 <ShiftGSMProfile+0x2b4>)
 80044e2:	469a      	mov	sl, r3
 80044e4:	4b9d      	ldr	r3, [pc, #628]	; (800475c <ShiftGSMProfile+0x2b8>)
 80044e6:	4698      	mov	r8, r3
 80044e8:	4b9d      	ldr	r3, [pc, #628]	; (8004760 <ShiftGSMProfile+0x2bc>)
 80044ea:	469b      	mov	fp, r3
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80044ec:	4b9d      	ldr	r3, [pc, #628]	; (8004764 <ShiftGSMProfile+0x2c0>)
 80044ee:	9305      	str	r3, [sp, #20]
 80044f0:	e002      	b.n	80044f8 <ShiftGSMProfile+0x54>
	while ((ck > 0) && (ook < 1))
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	d100      	bne.n	80044f8 <ShiftGSMProfile+0x54>
 80044f6:	e093      	b.n	8004620 <ShiftGSMProfile+0x17c>
	{
		HAL_Delay(3000);
 80044f8:	489b      	ldr	r0, [pc, #620]	; (8004768 <ShiftGSMProfile+0x2c4>)
 80044fa:	f003 f8d1 	bl	80076a0 <HAL_Delay>
		ck = ck - 1;
		SendGSMCode(" AT+QSTK=1");
 80044fe:	4648      	mov	r0, r9
 8004500:	f7fe fff4 	bl	80034ec <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8004504:	4653      	mov	r3, sl
 8004506:	9302      	str	r3, [sp, #8]
 8004508:	4643      	mov	r3, r8
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2200      	movs	r2, #0
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	465b      	mov	r3, fp
 8004512:	0021      	movs	r1, r4
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2000      	movs	r0, #0
 8004518:	0023      	movs	r3, r4
		ck = ck - 1;
 800451a:	3d01      	subs	r5, #1
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 800451c:	f7ff f97a 	bl	8003814 <GetGSMReply>
 8004520:	f7fb fdf2 	bl	8000108 <strlen>
		if (ook > 0)
 8004524:	2800      	cmp	r0, #0
 8004526:	d0e4      	beq.n	80044f2 <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004528:	220c      	movs	r2, #12
 800452a:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800452c:	9905      	ldr	r1, [sp, #20]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800452e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004530:	0030      	movs	r0, r6
 8004532:	4b85      	ldr	r3, [pc, #532]	; (8004748 <ShiftGSMProfile+0x2a4>)
 8004534:	3229      	adds	r2, #41	; 0x29
 8004536:	f006 f9a7 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800453a:	4b84      	ldr	r3, [pc, #528]	; (800474c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800453c:	2202      	movs	r2, #2
 800453e:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004540:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004542:	0030      	movs	r0, r6
 8004544:	230a      	movs	r3, #10
 8004546:	f006 f99f 	bl	800a888 <HAL_UART_Transmit>
		{
			Debug_Tx("______________Setup Menu_____________________________");
			ook = 0;
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 800454a:	4888      	ldr	r0, [pc, #544]	; (800476c <ShiftGSMProfile+0x2c8>)
 800454c:	f7fe ffce 	bl	80034ec <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", gpsto_net, "OK"));
 8004550:	4653      	mov	r3, sl
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	4643      	mov	r3, r8
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2200      	movs	r2, #0
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	4b84      	ldr	r3, [pc, #528]	; (8004770 <ShiftGSMProfile+0x2cc>)
 800455e:	0021      	movs	r1, r4
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	2000      	movs	r0, #0
 8004564:	0023      	movs	r3, r4
 8004566:	f7ff f955 	bl	8003814 <GetGSMReply>
 800456a:	f7fb fdcd 	bl	8000108 <strlen>
 800456e:	9004      	str	r0, [sp, #16]
			HAL_Delay(3000);
 8004570:	487d      	ldr	r0, [pc, #500]	; (8004768 <ShiftGSMProfile+0x2c4>)
 8004572:	f003 f895 	bl	80076a0 <HAL_Delay>
			if (ook > 0)
 8004576:	9b04      	ldr	r3, [sp, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ba      	beq.n	80044f2 <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800457c:	220c      	movs	r2, #12
 800457e:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004580:	497c      	ldr	r1, [pc, #496]	; (8004774 <ShiftGSMProfile+0x2d0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004582:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004584:	0030      	movs	r0, r6
 8004586:	4b70      	ldr	r3, [pc, #448]	; (8004748 <ShiftGSMProfile+0x2a4>)
 8004588:	3231      	adds	r2, #49	; 0x31
 800458a:	f006 f97d 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800458e:	4b6f      	ldr	r3, [pc, #444]	; (800474c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004590:	2202      	movs	r2, #2
 8004592:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004594:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004596:	0030      	movs	r0, r6
 8004598:	230a      	movs	r3, #10
 800459a:	f006 f975 	bl	800a888 <HAL_UART_Transmit>
			{
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
				ook = 0;
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 800459e:	4876      	ldr	r0, [pc, #472]	; (8004778 <ShiftGSMProfile+0x2d4>)
 80045a0:	f7fe ffa4 	bl	80034ec <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 80045a4:	4653      	mov	r3, sl
 80045a6:	9302      	str	r3, [sp, #8]
 80045a8:	4643      	mov	r3, r8
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2200      	movs	r2, #0
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	4b72      	ldr	r3, [pc, #456]	; (800477c <ShiftGSMProfile+0x2d8>)
 80045b2:	0021      	movs	r1, r4
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2000      	movs	r0, #0
 80045b8:	0023      	movs	r3, r4
 80045ba:	f7ff f92b 	bl	8003814 <GetGSMReply>
 80045be:	f7fb fda3 	bl	8000108 <strlen>
				if (ook > 0)
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d095      	beq.n	80044f2 <ShiftGSMProfile+0x4e>
				{

					if (GSMProf == 0)
 80045c6:	4b6e      	ldr	r3, [pc, #440]	; (8004780 <ShiftGSMProfile+0x2dc>)
 80045c8:	9304      	str	r3, [sp, #16]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d068      	beq.n	80046a2 <ShiftGSMProfile+0x1fe>
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
						GSMProf = 1;
					}
					else if (GSMProf == 1)
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d100      	bne.n	80045d6 <ShiftGSMProfile+0x132>
 80045d4:	e08f      	b.n	80046f6 <ShiftGSMProfile+0x252>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80045d6:	220c      	movs	r2, #12
 80045d8:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80045da:	496a      	ldr	r1, [pc, #424]	; (8004784 <ShiftGSMProfile+0x2e0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80045dc:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80045de:	0030      	movs	r0, r6
 80045e0:	4b59      	ldr	r3, [pc, #356]	; (8004748 <ShiftGSMProfile+0x2a4>)
 80045e2:	3225      	adds	r2, #37	; 0x25
 80045e4:	f006 f950 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80045e8:	4b58      	ldr	r3, [pc, #352]	; (800474c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80045ea:	2202      	movs	r2, #2
 80045ec:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 80045ee:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80045f0:	0030      	movs	r0, r6
 80045f2:	230a      	movs	r3, #10
 80045f4:	f006 f948 	bl	800a888 <HAL_UART_Transmit>
					}
					if (ook > 0)
					{
						Debug_Tx("_____________Refresh_____________________________");
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 80045f8:	4863      	ldr	r0, [pc, #396]	; (8004788 <ShiftGSMProfile+0x2e4>)
 80045fa:	f7fe ff77 	bl	80034ec <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh", gpsto_net, "OK"));
 80045fe:	4653      	mov	r3, sl
 8004600:	9302      	str	r3, [sp, #8]
 8004602:	4643      	mov	r3, r8
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	4b60      	ldr	r3, [pc, #384]	; (800478c <ShiftGSMProfile+0x2e8>)
 800460c:	0021      	movs	r1, r4
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2000      	movs	r0, #0
 8004612:	0023      	movs	r3, r4
 8004614:	f7ff f8fe 	bl	8003814 <GetGSMReply>
 8004618:	f7fb fd76 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 800461c:	2d00      	cmp	r5, #0
 800461e:	d13d      	bne.n	800469c <ShiftGSMProfile+0x1f8>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004620:	220c      	movs	r2, #12
 8004622:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004624:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004626:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004628:	4959      	ldr	r1, [pc, #356]	; (8004790 <ShiftGSMProfile+0x2ec>)
 800462a:	4b47      	ldr	r3, [pc, #284]	; (8004748 <ShiftGSMProfile+0x2a4>)
 800462c:	3225      	adds	r2, #37	; 0x25
 800462e:	f006 f92b 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004632:	4b46      	ldr	r3, [pc, #280]	; (800474c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004634:	0039      	movs	r1, r7
 8004636:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8004638:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800463a:	0030      	movs	r0, r6
 800463c:	230a      	movs	r3, #10
 800463e:	f006 f923 	bl	800a888 <HAL_UART_Transmit>
	ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+QPOWD=1");
 8004642:	4b54      	ldr	r3, [pc, #336]	; (8004794 <ShiftGSMProfile+0x2f0>)
 8004644:	0018      	movs	r0, r3
 8004646:	4698      	mov	r8, r3
 8004648:	f7fe ff50 	bl	80034ec <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 800464c:	4f52      	ldr	r7, [pc, #328]	; (8004798 <ShiftGSMProfile+0x2f4>)
 800464e:	4e53      	ldr	r6, [pc, #332]	; (800479c <ShiftGSMProfile+0x2f8>)
 8004650:	9702      	str	r7, [sp, #8]
 8004652:	6833      	ldr	r3, [r6, #0]
 8004654:	4d52      	ldr	r5, [pc, #328]	; (80047a0 <ShiftGSMProfile+0x2fc>)
 8004656:	2200      	movs	r2, #0
 8004658:	0021      	movs	r1, r4
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	200f      	movs	r0, #15
 800465e:	0023      	movs	r3, r4
 8004660:	9500      	str	r5, [sp, #0]
 8004662:	f7ff f8d7 	bl	8003814 <GetGSMReply>
 8004666:	f7fb fd4f 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 800466a:	2800      	cmp	r0, #0
 800466c:	d10c      	bne.n	8004688 <ShiftGSMProfile+0x1e4>
		SendGSMCode(" AT+QPOWD=1");
 800466e:	4640      	mov	r0, r8
 8004670:	f7fe ff3c 	bl	80034ec <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 8004674:	9702      	str	r7, [sp, #8]
 8004676:	6833      	ldr	r3, [r6, #0]
 8004678:	2200      	movs	r2, #0
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	0021      	movs	r1, r4
 800467e:	0023      	movs	r3, r4
 8004680:	200f      	movs	r0, #15
 8004682:	9500      	str	r5, [sp, #0]
 8004684:	f7ff f8c6 	bl	8003814 <GetGSMReply>
	}
	HAL_Delay(6000);
 8004688:	4846      	ldr	r0, [pc, #280]	; (80047a4 <ShiftGSMProfile+0x300>)
 800468a:	f003 f809 	bl	80076a0 <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 800468e:	b009      	add	sp, #36	; 0x24
 8004690:	bcf0      	pop	{r4, r5, r6, r7}
 8004692:	46bb      	mov	fp, r7
 8004694:	46b2      	mov	sl, r6
 8004696:	46a9      	mov	r9, r5
 8004698:	46a0      	mov	r8, r4
 800469a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((ck > 0) && (ook < 1))
 800469c:	2800      	cmp	r0, #0
 800469e:	d1bf      	bne.n	8004620 <ShiftGSMProfile+0x17c>
 80046a0:	e72a      	b.n	80044f8 <ShiftGSMProfile+0x54>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80046a2:	220c      	movs	r2, #12
 80046a4:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046a6:	4940      	ldr	r1, [pc, #256]	; (80047a8 <ShiftGSMProfile+0x304>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80046a8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046aa:	0030      	movs	r0, r6
 80046ac:	4b26      	ldr	r3, [pc, #152]	; (8004748 <ShiftGSMProfile+0x2a4>)
 80046ae:	3234      	adds	r2, #52	; 0x34
 80046b0:	f006 f8ea 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80046b6:	2202      	movs	r2, #2
 80046b8:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 80046ba:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80046bc:	0030      	movs	r0, r6
 80046be:	230a      	movs	r3, #10
 80046c0:	f006 f8e2 	bl	800a888 <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 80046c4:	4839      	ldr	r0, [pc, #228]	; (80047ac <ShiftGSMProfile+0x308>)
 80046c6:	f7fe ff11 	bl	80034ec <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
 80046ca:	4653      	mov	r3, sl
 80046cc:	9302      	str	r3, [sp, #8]
 80046ce:	4643      	mov	r3, r8
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <ShiftGSMProfile+0x30c>)
 80046d8:	0021      	movs	r1, r4
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	2000      	movs	r0, #0
 80046de:	0023      	movs	r3, r4
 80046e0:	f7ff f898 	bl	8003814 <GetGSMReply>
 80046e4:	f7fb fd10 	bl	8000108 <strlen>
						GSMProf = 1;
 80046e8:	2301      	movs	r3, #1
 80046ea:	9a04      	ldr	r2, [sp, #16]
 80046ec:	6013      	str	r3, [r2, #0]
					if (ook > 0)
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d100      	bne.n	80046f4 <ShiftGSMProfile+0x250>
 80046f2:	e6fe      	b.n	80044f2 <ShiftGSMProfile+0x4e>
 80046f4:	e76f      	b.n	80045d6 <ShiftGSMProfile+0x132>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80046f6:	220c      	movs	r2, #12
 80046f8:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046fa:	492e      	ldr	r1, [pc, #184]	; (80047b4 <ShiftGSMProfile+0x310>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80046fc:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80046fe:	0030      	movs	r0, r6
 8004700:	4b11      	ldr	r3, [pc, #68]	; (8004748 <ShiftGSMProfile+0x2a4>)
 8004702:	3236      	adds	r2, #54	; 0x36
 8004704:	f006 f8c0 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004708:	4b10      	ldr	r3, [pc, #64]	; (800474c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800470a:	2202      	movs	r2, #2
 800470c:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 800470e:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004710:	0030      	movs	r0, r6
 8004712:	230a      	movs	r3, #10
 8004714:	f006 f8b8 	bl	800a888 <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 8004718:	4827      	ldr	r0, [pc, #156]	; (80047b8 <ShiftGSMProfile+0x314>)
 800471a:	f7fe fee7 	bl	80034ec <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", gpsto_net, "OK"));
 800471e:	4653      	mov	r3, sl
 8004720:	9302      	str	r3, [sp, #8]
 8004722:	4643      	mov	r3, r8
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2200      	movs	r2, #0
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <ShiftGSMProfile+0x318>)
 800472c:	0021      	movs	r1, r4
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2000      	movs	r0, #0
 8004732:	0023      	movs	r3, r4
 8004734:	f7ff f86e 	bl	8003814 <GetGSMReply>
 8004738:	f7fb fce6 	bl	8000108 <strlen>
 800473c:	2300      	movs	r3, #0
 800473e:	e7d4      	b.n	80046ea <ShiftGSMProfile+0x246>
 8004740:	200049e8 	.word	0x200049e8
 8004744:	08012aec 	.word	0x08012aec
 8004748:	00001388 	.word	0x00001388
 800474c:	00000a0d 	.word	0x00000a0d
 8004750:	08012b20 	.word	0x08012b20
 8004754:	0801289c 	.word	0x0801289c
 8004758:	08012720 	.word	0x08012720
 800475c:	200000cc 	.word	0x200000cc
 8004760:	08012b2c 	.word	0x08012b2c
 8004764:	08012bb8 	.word	0x08012bb8
 8004768:	00000bb8 	.word	0x00000bb8
 800476c:	08012bf0 	.word	0x08012bf0
 8004770:	08012c18 	.word	0x08012c18
 8004774:	08012c38 	.word	0x08012c38
 8004778:	08012c78 	.word	0x08012c78
 800477c:	08012c98 	.word	0x08012c98
 8004780:	2000009c 	.word	0x2000009c
 8004784:	08012ddc 	.word	0x08012ddc
 8004788:	08012e10 	.word	0x08012e10
 800478c:	08012e38 	.word	0x08012e38
 8004790:	08012b48 	.word	0x08012b48
 8004794:	08012b7c 	.word	0x08012b7c
 8004798:	08012b88 	.word	0x08012b88
 800479c:	200000c8 	.word	0x200000c8
 80047a0:	08012b9c 	.word	0x08012b9c
 80047a4:	00001770 	.word	0x00001770
 80047a8:	08012cbc 	.word	0x08012cbc
 80047ac:	08012d00 	.word	0x08012d00
 80047b0:	08012d2c 	.word	0x08012d2c
 80047b4:	08012d4c 	.word	0x08012d4c
 80047b8:	08012d90 	.word	0x08012d90
 80047bc:	08012dbc 	.word	0x08012dbc

080047c0 <InitGSM>:

void InitGSM()
{
 80047c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047c2:	46de      	mov	lr, fp
 80047c4:	4645      	mov	r5, r8
 80047c6:	4657      	mov	r7, sl
 80047c8:	464e      	mov	r6, r9
 80047ca:	b5e0      	push	{r5, r6, r7, lr}
	// RestartGSM();
	HAL_Delay(5000);
 80047cc:	48c6      	ldr	r0, [pc, #792]	; (8004ae8 <InitGSM+0x328>)
{
 80047ce:	b087      	sub	sp, #28
	HAL_Delay(5000);
 80047d0:	f002 ff66 	bl	80076a0 <HAL_Delay>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 80047d4:	4bc5      	ldr	r3, [pc, #788]	; (8004aec <InitGSM+0x32c>)
 80047d6:	0018      	movs	r0, r3
 80047d8:	4699      	mov	r9, r3
 80047da:	f7fe fe87 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 80047de:	4bc4      	ldr	r3, [pc, #784]	; (8004af0 <InitGSM+0x330>)
 80047e0:	4fc4      	ldr	r7, [pc, #784]	; (8004af4 <InitGSM+0x334>)
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	4cc4      	ldr	r4, [pc, #784]	; (8004af8 <InitGSM+0x338>)
 80047e6:	4698      	mov	r8, r3
 80047e8:	4dc4      	ldr	r5, [pc, #784]	; (8004afc <InitGSM+0x33c>)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2200      	movs	r2, #0
 80047ee:	0021      	movs	r1, r4
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	200f      	movs	r0, #15
 80047f4:	0023      	movs	r3, r4
 80047f6:	9500      	str	r5, [sp, #0]
 80047f8:	f7ff f80c 	bl	8003814 <GetGSMReply>
 80047fc:	f7fb fc84 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 8004800:	2800      	cmp	r0, #0
 8004802:	d10d      	bne.n	8004820 <InitGSM+0x60>
		SendGSMCode(" ATE0");
 8004804:	4648      	mov	r0, r9
 8004806:	f7fe fe71 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 800480a:	4643      	mov	r3, r8
 800480c:	9302      	str	r3, [sp, #8]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2200      	movs	r2, #0
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	0021      	movs	r1, r4
 8004816:	0023      	movs	r3, r4
 8004818:	200f      	movs	r0, #15
 800481a:	9500      	str	r5, [sp, #0]
 800481c:	f7fe fffa 	bl	8003814 <GetGSMReply>
{
 8004820:	2302      	movs	r3, #2
 8004822:	469a      	mov	sl, r3
 8004824:	4eb6      	ldr	r6, [pc, #728]	; (8004b00 <InitGSM+0x340>)
 8004826:	4db7      	ldr	r5, [pc, #732]	; (8004b04 <InitGSM+0x344>)
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8004828:	0030      	movs	r0, r6
 800482a:	f7fe fe5f 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 800482e:	4643      	mov	r3, r8
 8004830:	9302      	str	r3, [sp, #8]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2200      	movs	r2, #0
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	0021      	movs	r1, r4
 800483a:	0023      	movs	r3, r4
 800483c:	200f      	movs	r0, #15
 800483e:	9500      	str	r5, [sp, #0]
 8004840:	f7fe ffe8 	bl	8003814 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 8004844:	4653      	mov	r3, sl
 8004846:	2b01      	cmp	r3, #1
 8004848:	d000      	beq.n	800484c <InitGSM+0x8c>
 800484a:	e118      	b.n	8004a7e <InitGSM+0x2be>
	}

	HAL_Delay(2000);
 800484c:	20fa      	movs	r0, #250	; 0xfa
 800484e:	00c0      	lsls	r0, r0, #3
 8004850:	f002 ff26 	bl	80076a0 <HAL_Delay>
	ShiftGSMProfile();
 8004854:	f7ff fe26 	bl	80044a4 <ShiftGSMProfile>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 8004858:	4648      	mov	r0, r9
 800485a:	f7fe fe47 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 800485e:	4643      	mov	r3, r8
 8004860:	9302      	str	r3, [sp, #8]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2200      	movs	r2, #0
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	4ba7      	ldr	r3, [pc, #668]	; (8004b08 <InitGSM+0x348>)
 800486a:	0021      	movs	r1, r4
 800486c:	469a      	mov	sl, r3
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	200a      	movs	r0, #10
 8004872:	0023      	movs	r3, r4
 8004874:	f7fe ffce 	bl	8003814 <GetGSMReply>
 8004878:	f7fb fc46 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 800487c:	2800      	cmp	r0, #0
 800487e:	d10e      	bne.n	800489e <InitGSM+0xde>
		SendGSMCode(" ATE0");
 8004880:	4648      	mov	r0, r9
 8004882:	f7fe fe33 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8004886:	4643      	mov	r3, r8
 8004888:	9302      	str	r3, [sp, #8]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	4653      	mov	r3, sl
 8004892:	0021      	movs	r1, r4
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	200a      	movs	r0, #10
 8004898:	0023      	movs	r3, r4
 800489a:	f7fe ffbb 	bl	8003814 <GetGSMReply>
{
 800489e:	2302      	movs	r3, #2
 80048a0:	4699      	mov	r9, r3
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 80048a2:	0030      	movs	r0, r6
 80048a4:	f7fe fe22 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 80048a8:	4643      	mov	r3, r8
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	0021      	movs	r1, r4
 80048b4:	0023      	movs	r3, r4
 80048b6:	200a      	movs	r0, #10
 80048b8:	9500      	str	r5, [sp, #0]
 80048ba:	f7fe ffab 	bl	8003814 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 80048be:	464b      	mov	r3, r9
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d000      	beq.n	80048c6 <InitGSM+0x106>
 80048c4:	e0d3      	b.n	8004a6e <InitGSM+0x2ae>
 80048c6:	4b91      	ldr	r3, [pc, #580]	; (8004b0c <InitGSM+0x34c>)
 80048c8:	260a      	movs	r6, #10
 80048ca:	469a      	mov	sl, r3
 80048cc:	4b90      	ldr	r3, [pc, #576]	; (8004b10 <InitGSM+0x350>)
 80048ce:	4699      	mov	r9, r3
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
		// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
		if (i > 0)
		{
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 80048d0:	4b90      	ldr	r3, [pc, #576]	; (8004b14 <InitGSM+0x354>)
 80048d2:	469b      	mov	fp, r3
 80048d4:	e002      	b.n	80048dc <InitGSM+0x11c>
	while ((ck > 0) && (i < 1))
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	d100      	bne.n	80048dc <InitGSM+0x11c>
 80048da:	e0c1      	b.n	8004a60 <InitGSM+0x2a0>
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 80048dc:	4650      	mov	r0, sl
 80048de:	f7fe fe05 	bl	80034ec <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 80048e2:	4643      	mov	r3, r8
 80048e4:	9302      	str	r3, [sp, #8]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	464b      	mov	r3, r9
 80048ee:	0021      	movs	r1, r4
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	2005      	movs	r0, #5
 80048f4:	0023      	movs	r3, r4
 80048f6:	f7fe ff8d 	bl	8003814 <GetGSMReply>
 80048fa:	f7fb fc05 	bl	8000108 <strlen>
 80048fe:	0005      	movs	r5, r0
		HAL_Delay(1000);
 8004900:	20fa      	movs	r0, #250	; 0xfa
 8004902:	0080      	lsls	r0, r0, #2
		ck = ck - 1;
 8004904:	3e01      	subs	r6, #1
		HAL_Delay(1000);
 8004906:	f002 fecb 	bl	80076a0 <HAL_Delay>
		if (i > 0)
 800490a:	2d00      	cmp	r5, #0
 800490c:	d0e3      	beq.n	80048d6 <InitGSM+0x116>
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 800490e:	4658      	mov	r0, fp
 8004910:	f7fe fdec 	bl	80034ec <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 8004914:	4643      	mov	r3, r8
 8004916:	9302      	str	r3, [sp, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	4b7e      	ldr	r3, [pc, #504]	; (8004b18 <InitGSM+0x358>)
 8004920:	0021      	movs	r1, r4
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2000      	movs	r0, #0
 8004926:	0023      	movs	r3, r4
 8004928:	f7fe ff74 	bl	8003814 <GetGSMReply>
 800492c:	f7fb fbec 	bl	8000108 <strlen>

			if (i > 0)
 8004930:	2800      	cmp	r0, #0
 8004932:	d0d0      	beq.n	80048d6 <InitGSM+0x116>
			{
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 8004934:	4879      	ldr	r0, [pc, #484]	; (8004b1c <InitGSM+0x35c>)
 8004936:	f7fe fdd9 	bl	80034ec <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 800493a:	4643      	mov	r3, r8
 800493c:	9302      	str	r3, [sp, #8]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2200      	movs	r2, #0
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	4b76      	ldr	r3, [pc, #472]	; (8004b20 <InitGSM+0x360>)
 8004946:	0021      	movs	r1, r4
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	2000      	movs	r0, #0
 800494c:	0023      	movs	r3, r4
 800494e:	f7fe ff61 	bl	8003814 <GetGSMReply>
 8004952:	f7fb fbd9 	bl	8000108 <strlen>

				if (i > 0)
 8004956:	2800      	cmp	r0, #0
 8004958:	d0bd      	beq.n	80048d6 <InitGSM+0x116>
				{
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 800495a:	4872      	ldr	r0, [pc, #456]	; (8004b24 <InitGSM+0x364>)
 800495c:	f7fe fdc6 	bl	80034ec <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 8004960:	4643      	mov	r3, r8
 8004962:	9302      	str	r3, [sp, #8]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2200      	movs	r2, #0
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	4b6f      	ldr	r3, [pc, #444]	; (8004b28 <InitGSM+0x368>)
 800496c:	0021      	movs	r1, r4
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2000      	movs	r0, #0
 8004972:	0023      	movs	r3, r4
 8004974:	f7fe ff4e 	bl	8003814 <GetGSMReply>
 8004978:	f7fb fbc6 	bl	8000108 <strlen>
					if (i > 0)
 800497c:	2800      	cmp	r0, #0
 800497e:	d0aa      	beq.n	80048d6 <InitGSM+0x116>
					{
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 8004980:	486a      	ldr	r0, [pc, #424]	; (8004b2c <InitGSM+0x36c>)
 8004982:	f7fe fdb3 	bl	80034ec <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 8004986:	4643      	mov	r3, r8
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2200      	movs	r2, #0
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	4b67      	ldr	r3, [pc, #412]	; (8004b30 <InitGSM+0x370>)
 8004992:	0021      	movs	r1, r4
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	2000      	movs	r0, #0
 8004998:	0023      	movs	r3, r4
 800499a:	f7fe ff3b 	bl	8003814 <GetGSMReply>
 800499e:	f7fb fbb3 	bl	8000108 <strlen>
						if (i > 0)
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d097      	beq.n	80048d6 <InitGSM+0x116>
						{
							HAL_Delay(3000);
 80049a6:	4863      	ldr	r0, [pc, #396]	; (8004b34 <InitGSM+0x374>)
 80049a8:	f002 fe7a 	bl	80076a0 <HAL_Delay>
							// SendGSMCode(" AT+CSMP=17,167,0,16");
							// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CSMP=17,167,0,16  SMS Text mode parameter ",10));
							if (i > 0)
							{
								SendGSMCode(" AT+QENG=1,4");
 80049ac:	4862      	ldr	r0, [pc, #392]	; (8004b38 <InitGSM+0x378>)
 80049ae:	f7fe fd9d 	bl	80034ec <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 80049b2:	4643      	mov	r3, r8
 80049b4:	9302      	str	r3, [sp, #8]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2200      	movs	r2, #0
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	4b5f      	ldr	r3, [pc, #380]	; (8004b3c <InitGSM+0x37c>)
 80049be:	0021      	movs	r1, r4
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	2000      	movs	r0, #0
 80049c4:	0023      	movs	r3, r4
 80049c6:	f7fe ff25 	bl	8003814 <GetGSMReply>
 80049ca:	f7fb fb9d 	bl	8000108 <strlen>

								if (i > 0)
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d081      	beq.n	80048d6 <InitGSM+0x116>
								{

									HAL_Delay(1000);
 80049d2:	20fa      	movs	r0, #250	; 0xfa
 80049d4:	0080      	lsls	r0, r0, #2
 80049d6:	f002 fe63 	bl	80076a0 <HAL_Delay>
									if (GSMProf == 0)
 80049da:	4b59      	ldr	r3, [pc, #356]	; (8004b40 <InitGSM+0x380>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80049dc:	4d59      	ldr	r5, [pc, #356]	; (8004b44 <InitGSM+0x384>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d054      	beq.n	8004a8e <InitGSM+0x2ce>
									{
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
										SetupGPRS("taisysnet"); // taisysnet");
									}
									else if (GSMProf == 1)
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d068      	beq.n	8004aba <InitGSM+0x2fa>
 80049e8:	ae05      	add	r6, sp, #20
									{
										Debug_Tx("_____________BSNL APN SET_____________________________");
										SetupGPRS("bsnlnet"); // taisysnet");
									}
									HAL_Delay(1000);
 80049ea:	20fa      	movs	r0, #250	; 0xfa
 80049ec:	0080      	lsls	r0, r0, #2
 80049ee:	f002 fe57 	bl	80076a0 <HAL_Delay>
 80049f2:	220c      	movs	r2, #12
 80049f4:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80049f6:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80049f8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80049fa:	4953      	ldr	r1, [pc, #332]	; (8004b48 <InitGSM+0x388>)
 80049fc:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <InitGSM+0x328>)
 80049fe:	322c      	adds	r2, #44	; 0x2c
 8004a00:	f005 ff42 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004a04:	4b51      	ldr	r3, [pc, #324]	; (8004b4c <InitGSM+0x38c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004a06:	0031      	movs	r1, r6
 8004a08:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8004a0a:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004a0c:	0028      	movs	r0, r5
 8004a0e:	230a      	movs	r3, #10
 8004a10:	f005 ff3a 	bl	800a888 <HAL_UART_Transmit>

									Debug_Tx("_____________Operator again_____________________________");
									// Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 8004a14:	20fa      	movs	r0, #250	; 0xfa
 8004a16:	0080      	lsls	r0, r0, #2
 8004a18:	f002 fe42 	bl	80076a0 <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8004a1c:	4e4c      	ldr	r6, [pc, #304]	; (8004b50 <InitGSM+0x390>)
 8004a1e:	0030      	movs	r0, r6
 8004a20:	f7fe fd64 	bl	80034ec <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8004a24:	4643      	mov	r3, r8
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	4d4a      	ldr	r5, [pc, #296]	; (8004b54 <InitGSM+0x394>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	0021      	movs	r1, r4
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	2000      	movs	r0, #0
 8004a34:	0023      	movs	r3, r4
 8004a36:	9500      	str	r5, [sp, #0]
 8004a38:	f7fe feec 	bl	8003814 <GetGSMReply>
									SetTCPMux();
									HAL_Delay(1000);
 8004a3c:	20fa      	movs	r0, #250	; 0xfa
 8004a3e:	0080      	lsls	r0, r0, #2
 8004a40:	f002 fe2e 	bl	80076a0 <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8004a44:	0030      	movs	r0, r6
 8004a46:	f7fe fd51 	bl	80034ec <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8004a4a:	4643      	mov	r3, r8
 8004a4c:	9302      	str	r3, [sp, #8]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2200      	movs	r2, #0
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	0021      	movs	r1, r4
 8004a56:	0023      	movs	r3, r4
 8004a58:	2000      	movs	r0, #0
 8004a5a:	9500      	str	r5, [sp, #0]
 8004a5c:	f7fe feda 	bl	8003814 <GetGSMReply>
					}
				}
			}
		}
	}
}
 8004a60:	b007      	add	sp, #28
 8004a62:	bcf0      	pop	{r4, r5, r6, r7}
 8004a64:	46bb      	mov	fp, r7
 8004a66:	46b2      	mov	sl, r6
 8004a68:	46a9      	mov	r9, r5
 8004a6a:	46a0      	mov	r8, r4
 8004a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004a6e:	f7fb fb4b 	bl	8000108 <strlen>
		ck = ck - 1;
 8004a72:	2301      	movs	r3, #1
 8004a74:	4699      	mov	r9, r3
	while ((ck > 0) && (i < 1))
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d100      	bne.n	8004a7c <InitGSM+0x2bc>
 8004a7a:	e712      	b.n	80048a2 <InitGSM+0xe2>
 8004a7c:	e723      	b.n	80048c6 <InitGSM+0x106>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004a7e:	f7fb fb43 	bl	8000108 <strlen>
		ck = ck - 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	469a      	mov	sl, r3
	while ((ck > 0) && (i < 1))
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d100      	bne.n	8004a8c <InitGSM+0x2cc>
 8004a8a:	e6cd      	b.n	8004828 <InitGSM+0x68>
 8004a8c:	e6de      	b.n	800484c <InitGSM+0x8c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004a8e:	220c      	movs	r2, #12
 8004a90:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004a92:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004a94:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004a96:	4930      	ldr	r1, [pc, #192]	; (8004b58 <InitGSM+0x398>)
 8004a98:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <InitGSM+0x328>)
 8004a9a:	322c      	adds	r2, #44	; 0x2c
 8004a9c:	f005 fef4 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004aa0:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <InitGSM+0x38c>)
 8004aa2:	ae05      	add	r6, sp, #20
 8004aa4:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	230a      	movs	r3, #10
 8004aaa:	0031      	movs	r1, r6
 8004aac:	0028      	movs	r0, r5
 8004aae:	f005 feeb 	bl	800a888 <HAL_UART_Transmit>
										SetupGPRS("taisysnet"); // taisysnet");
 8004ab2:	482a      	ldr	r0, [pc, #168]	; (8004b5c <InitGSM+0x39c>)
 8004ab4:	f7ff fc72 	bl	800439c <SetupGPRS>
 8004ab8:	e797      	b.n	80049ea <InitGSM+0x22a>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004aba:	220c      	movs	r2, #12
 8004abc:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004abe:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ac0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004ac2:	4927      	ldr	r1, [pc, #156]	; (8004b60 <InitGSM+0x3a0>)
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <InitGSM+0x328>)
 8004ac6:	322a      	adds	r2, #42	; 0x2a
 8004ac8:	f005 fede 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004acc:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <InitGSM+0x38c>)
 8004ace:	ae05      	add	r6, sp, #20
 8004ad0:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	230a      	movs	r3, #10
 8004ad6:	0031      	movs	r1, r6
 8004ad8:	0028      	movs	r0, r5
 8004ada:	f005 fed5 	bl	800a888 <HAL_UART_Transmit>
										SetupGPRS("bsnlnet"); // taisysnet");
 8004ade:	4821      	ldr	r0, [pc, #132]	; (8004b64 <InitGSM+0x3a4>)
 8004ae0:	f7ff fc5c 	bl	800439c <SetupGPRS>
 8004ae4:	e781      	b.n	80049ea <InitGSM+0x22a>
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	00001388 	.word	0x00001388
 8004aec:	08012e54 	.word	0x08012e54
 8004af0:	0801289c 	.word	0x0801289c
 8004af4:	200000c8 	.word	0x200000c8
 8004af8:	08012720 	.word	0x08012720
 8004afc:	08012e5c 	.word	0x08012e5c
 8004b00:	08012414 	.word	0x08012414
 8004b04:	08012e70 	.word	0x08012e70
 8004b08:	08012e84 	.word	0x08012e84
 8004b0c:	08012e98 	.word	0x08012e98
 8004b10:	08012ea4 	.word	0x08012ea4
 8004b14:	08012ecc 	.word	0x08012ecc
 8004b18:	08012ed8 	.word	0x08012ed8
 8004b1c:	08012f00 	.word	0x08012f00
 8004b20:	08012f0c 	.word	0x08012f0c
 8004b24:	08012f28 	.word	0x08012f28
 8004b28:	08012f34 	.word	0x08012f34
 8004b2c:	08012f64 	.word	0x08012f64
 8004b30:	08012f74 	.word	0x08012f74
 8004b34:	00000bb8 	.word	0x00000bb8
 8004b38:	08012fa0 	.word	0x08012fa0
 8004b3c:	08012fb0 	.word	0x08012fb0
 8004b40:	2000009c 	.word	0x2000009c
 8004b44:	200049e8 	.word	0x200049e8
 8004b48:	08013060 	.word	0x08013060
 8004b4c:	00000a0d 	.word	0x00000a0d
 8004b50:	08012a00 	.word	0x08012a00
 8004b54:	08012a0c 	.word	0x08012a0c
 8004b58:	08012fd8 	.word	0x08012fd8
 8004b5c:	08013014 	.word	0x08013014
 8004b60:	08013020 	.word	0x08013020
 8004b64:	08013058 	.word	0x08013058

08004b68 <SPI_flash_get_device_ID>:

void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
}

void SPI_flash_get_device_ID( ) {
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	46de      	mov	lr, fp
 8004b6c:	4657      	mov	r7, sl
 8004b6e:	464e      	mov	r6, r9
 8004b70:	4645      	mov	r5, r8
    SPI_flash_cs_low;
 8004b72:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_get_device_ID( ) {
 8004b74:	b5e0      	push	{r5, r6, r7, lr}
    SPI_flash_cs_low;
 8004b76:	05db      	lsls	r3, r3, #23
void SPI_flash_get_device_ID( ) {
 8004b78:	b0a3      	sub	sp, #140	; 0x8c
    SPI_flash_cs_low;
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2110      	movs	r1, #16
 8004b80:	469a      	mov	sl, r3
 8004b82:	f003 fc55 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8004b86:	2390      	movs	r3, #144	; 0x90
 8004b88:	ad09      	add	r5, sp, #36	; 0x24
 8004b8a:	702b      	strb	r3, [r5, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004b8c:	23fa      	movs	r3, #250	; 0xfa
 8004b8e:	4f62      	ldr	r7, [pc, #392]	; (8004d18 <SPI_flash_get_device_ID+0x1b0>)
 8004b90:	0029      	movs	r1, r5
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	2201      	movs	r2, #1
 8004b96:	0038      	movs	r0, r7
 8004b98:	4699      	mov	r9, r3
 8004b9a:	f004 fead 	bl	80098f8 <HAL_SPI_Transmit>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8004b9e:	2300      	movs	r3, #0
    aa[1]=0;
    aa[2]=0;
    aa[3]=0;
    aa[4]=0;
 8004ba0:	ac06      	add	r4, sp, #24
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004ba2:	0021      	movs	r1, r4
    aa[0]=0;
 8004ba4:	9306      	str	r3, [sp, #24]
    aa[4]=0;
 8004ba6:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004ba8:	2203      	movs	r2, #3
 8004baa:	464b      	mov	r3, r9
 8004bac:	0038      	movs	r0, r7
 8004bae:	f004 fea3 	bl	80098f8 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004bb2:	464a      	mov	r2, r9
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	0021      	movs	r1, r4
 8004bb8:	9200      	str	r2, [sp, #0]
 8004bba:	0038      	movs	r0, r7
 8004bbc:	0022      	movs	r2, r4
 8004bbe:	f004 ff67 	bl	8009a90 <HAL_SPI_TransmitReceive>
    aa[5]=0;
    SPI_flash_sent_address (aa);
    SPI_flash_TransmitReceive(aa, 2);
    SPI_flash_cs_high;
 8004bc2:	4650      	mov	r0, sl
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	2110      	movs	r1, #16
 8004bc8:	f003 fc32 	bl	8008430 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8004bcc:	7863      	ldrb	r3, [r4, #1]
 8004bce:	7822      	ldrb	r2, [r4, #0]
 8004bd0:	4952      	ldr	r1, [pc, #328]	; (8004d1c <SPI_flash_get_device_ID+0x1b4>)
 8004bd2:	0028      	movs	r0, r5
 8004bd4:	f009 fcc2 	bl	800e55c <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004bd8:	4a51      	ldr	r2, [pc, #324]	; (8004d20 <SPI_flash_get_device_ID+0x1b8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004bda:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004bdc:	4690      	mov	r8, r2
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	220c      	movs	r2, #12
 8004be2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004be4:	f7fb fa90 	bl	8000108 <strlen>
 8004be8:	494e      	ldr	r1, [pc, #312]	; (8004d24 <SPI_flash_get_device_ID+0x1bc>)
 8004bea:	b282      	uxth	r2, r0
 8004bec:	468b      	mov	fp, r1
 8004bee:	000b      	movs	r3, r1
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	0029      	movs	r1, r5
 8004bf4:	f005 fe48 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004bf8:	494b      	ldr	r1, [pc, #300]	; (8004d28 <SPI_flash_get_device_ID+0x1c0>)
 8004bfa:	ae05      	add	r6, sp, #20
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004bfc:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004bfe:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004c00:	2202      	movs	r2, #2
 8004c02:	0031      	movs	r1, r6
 8004c04:	4640      	mov	r0, r8
 8004c06:	f005 fe3f 	bl	800a888 <HAL_UART_Transmit>
    Debug_Tx((char*)bufd);

    SPI_flash_cs_low;
 8004c0a:	4650      	mov	r0, sl
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2110      	movs	r1, #16
 8004c10:	f003 fc0e 	bl	8008430 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8004c14:	239f      	movs	r3, #159	; 0x9f
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004c16:	0031      	movs	r1, r6
 8004c18:	7033      	strb	r3, [r6, #0]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	0038      	movs	r0, r7
 8004c20:	f004 fe6a 	bl	80098f8 <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004c24:	2300      	movs	r3, #0
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004c26:	4648      	mov	r0, r9
       aa[1]=0;
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
 8004c28:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004c2a:	0022      	movs	r2, r4
 8004c2c:	0021      	movs	r1, r4
       aa[0]=0;
 8004c2e:	9306      	str	r3, [sp, #24]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004c30:	9000      	str	r0, [sp, #0]
 8004c32:	3303      	adds	r3, #3
 8004c34:	0038      	movs	r0, r7
 8004c36:	f004 ff2b 	bl	8009a90 <HAL_SPI_TransmitReceive>
       aa[5]=0;
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
       SPI_flash_cs_high;
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	2110      	movs	r1, #16
 8004c40:	f003 fbf6 	bl	8008430 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8004c44:	78a0      	ldrb	r0, [r4, #2]
 8004c46:	7863      	ldrb	r3, [r4, #1]
 8004c48:	7822      	ldrb	r2, [r4, #0]
 8004c4a:	4938      	ldr	r1, [pc, #224]	; (8004d2c <SPI_flash_get_device_ID+0x1c4>)
 8004c4c:	9000      	str	r0, [sp, #0]
 8004c4e:	0028      	movs	r0, r5
 8004c50:	f009 fc84 	bl	800e55c <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004c54:	4640      	mov	r0, r8
 8004c56:	220c      	movs	r2, #12
 8004c58:	6803      	ldr	r3, [r0, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004c5a:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004c5c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004c5e:	f7fb fa53 	bl	8000108 <strlen>
 8004c62:	465b      	mov	r3, fp
 8004c64:	0029      	movs	r1, r5
 8004c66:	b282      	uxth	r2, r0
 8004c68:	4640      	mov	r0, r8
 8004c6a:	f005 fe0d 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004c6e:	492e      	ldr	r1, [pc, #184]	; (8004d28 <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004c70:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004c72:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004c74:	2202      	movs	r2, #2
 8004c76:	0031      	movs	r1, r6
 8004c78:	4640      	mov	r0, r8
 8004c7a:	f005 fe05 	bl	800a888 <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);



       SPI_flash_cs_low;
 8004c7e:	4650      	mov	r0, sl
 8004c80:	2200      	movs	r2, #0
 8004c82:	2110      	movs	r1, #16
 8004c84:	f003 fbd4 	bl	8008430 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8004c88:	234b      	movs	r3, #75	; 0x4b
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004c8a:	0031      	movs	r1, r6
 8004c8c:	7033      	strb	r3, [r6, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	464b      	mov	r3, r9
 8004c92:	0038      	movs	r0, r7
 8004c94:	f004 fe30 	bl	80098f8 <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004c98:	2300      	movs	r3, #0
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
       aa[5]=0;
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8004c9a:	0021      	movs	r1, r4
       aa[0]=0;
 8004c9c:	9306      	str	r3, [sp, #24]
       aa[4]=0;
 8004c9e:	80a3      	strh	r3, [r4, #4]
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	0038      	movs	r0, r7
 8004ca6:	f004 fe27 	bl	80098f8 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004caa:	464b      	mov	r3, r9
 8004cac:	0022      	movs	r2, r4
 8004cae:	0021      	movs	r1, r4
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	0038      	movs	r0, r7
 8004cb4:	2306      	movs	r3, #6
 8004cb6:	f004 feeb 	bl	8009a90 <HAL_SPI_TransmitReceive>
       SPI_flash_TransmitReceive(aa, 6);
       SPI_flash_cs_high;
 8004cba:	4650      	mov	r0, sl
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2110      	movs	r1, #16
 8004cc0:	f003 fbb6 	bl	8008430 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 8004cc4:	7960      	ldrb	r0, [r4, #5]
 8004cc6:	7863      	ldrb	r3, [r4, #1]
 8004cc8:	7822      	ldrb	r2, [r4, #0]
 8004cca:	9003      	str	r0, [sp, #12]
 8004ccc:	7920      	ldrb	r0, [r4, #4]
 8004cce:	4918      	ldr	r1, [pc, #96]	; (8004d30 <SPI_flash_get_device_ID+0x1c8>)
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	78e0      	ldrb	r0, [r4, #3]
 8004cd4:	9001      	str	r0, [sp, #4]
 8004cd6:	78a0      	ldrb	r0, [r4, #2]
 8004cd8:	9000      	str	r0, [sp, #0]
 8004cda:	0028      	movs	r0, r5
 8004cdc:	f009 fc3e 	bl	800e55c <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ce0:	4643      	mov	r3, r8
 8004ce2:	220c      	movs	r2, #12
 8004ce4:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004ce6:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ce8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004cea:	f7fb fa0d 	bl	8000108 <strlen>
 8004cee:	465b      	mov	r3, fp
 8004cf0:	0029      	movs	r1, r5
 8004cf2:	b282      	uxth	r2, r0
 8004cf4:	4640      	mov	r0, r8
 8004cf6:	f005 fdc7 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004cfa:	490b      	ldr	r1, [pc, #44]	; (8004d28 <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004cfc:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004cfe:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004d00:	2202      	movs	r2, #2
 8004d02:	0031      	movs	r1, r6
 8004d04:	4640      	mov	r0, r8
 8004d06:	f005 fdbf 	bl	800a888 <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);
}
 8004d0a:	b023      	add	sp, #140	; 0x8c
 8004d0c:	bcf0      	pop	{r4, r5, r6, r7}
 8004d0e:	46bb      	mov	fp, r7
 8004d10:	46b2      	mov	sl, r6
 8004d12:	46a9      	mov	r9, r5
 8004d14:	46a0      	mov	r8, r4
 8004d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d18:	20004810 	.word	0x20004810
 8004d1c:	0801309c 	.word	0x0801309c
 8004d20:	200049e8 	.word	0x200049e8
 8004d24:	00001388 	.word	0x00001388
 8004d28:	00000a0d 	.word	0x00000a0d
 8004d2c:	080130bc 	.word	0x080130bc
 8004d30:	080130d8 	.word	0x080130d8

08004d34 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8004d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    SPI_flash_cs_low;
 8004d36:	24a0      	movs	r4, #160	; 0xa0
 8004d38:	05e4      	lsls	r4, r4, #23
void SPI_flash_Sector_Erase(uint8_t* address) {
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	0007      	movs	r7, r0
    SPI_flash_cs_low;
 8004d3e:	2200      	movs	r2, #0
 8004d40:	0020      	movs	r0, r4
 8004d42:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004d44:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 8004d46:	f003 fb73 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004d4a:	466a      	mov	r2, sp
 8004d4c:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004d4e:	4669      	mov	r1, sp
 8004d50:	4d23      	ldr	r5, [pc, #140]	; (8004de0 <SPI_flash_Sector_Erase+0xac>)
 8004d52:	00b6      	lsls	r6, r6, #2
 8004d54:	71d3      	strb	r3, [r2, #7]
 8004d56:	0028      	movs	r0, r5
 8004d58:	0033      	movs	r3, r6
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	3107      	adds	r1, #7
 8004d5e:	f004 fdcb 	bl	80098f8 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004d62:	0020      	movs	r0, r4
 8004d64:	2201      	movs	r2, #1
 8004d66:	2110      	movs	r1, #16
 8004d68:	f003 fb62 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8004d6c:	0020      	movs	r0, r4
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2110      	movs	r1, #16
 8004d72:	f003 fb5d 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8004d76:	466a      	mov	r2, sp
 8004d78:	2320      	movs	r3, #32
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004d7a:	4669      	mov	r1, sp
 8004d7c:	71d3      	strb	r3, [r2, #7]
 8004d7e:	0028      	movs	r0, r5
 8004d80:	0033      	movs	r3, r6
 8004d82:	2201      	movs	r2, #1
 8004d84:	3107      	adds	r1, #7
 8004d86:	f004 fdb7 	bl	80098f8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004d8a:	0033      	movs	r3, r6
 8004d8c:	0039      	movs	r1, r7
 8004d8e:	2203      	movs	r2, #3
 8004d90:	0028      	movs	r0, r5
 8004d92:	f004 fdb1 	bl	80098f8 <HAL_SPI_Transmit>
    SPI_flash_sent_address (address);
    SPI_flash_cs_high;
 8004d96:	0020      	movs	r0, r4
 8004d98:	2201      	movs	r2, #1
 8004d9a:	2110      	movs	r1, #16
 8004d9c:	f003 fb48 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8004da0:	0020      	movs	r0, r4
 8004da2:	2200      	movs	r2, #0
 8004da4:	2110      	movs	r1, #16
 8004da6:	f003 fb43 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8004daa:	466a      	mov	r2, sp
 8004dac:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004dae:	4669      	mov	r1, sp
 8004db0:	71d3      	strb	r3, [r2, #7]
 8004db2:	0028      	movs	r0, r5
 8004db4:	0033      	movs	r3, r6
 8004db6:	2201      	movs	r2, #1
 8004db8:	3107      	adds	r1, #7
 8004dba:	f004 fd9d 	bl	80098f8 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004dbe:	0020      	movs	r0, r4
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	f003 fb34 	bl	8008430 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004dc8:	220c      	movs	r2, #12
 8004dca:	4806      	ldr	r0, [pc, #24]	; (8004de4 <SPI_flash_Sector_Erase+0xb0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8004dcc:	4906      	ldr	r1, [pc, #24]	; (8004de8 <SPI_flash_Sector_Erase+0xb4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004dce:	6803      	ldr	r3, [r0, #0]
 8004dd0:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8004dd2:	2396      	movs	r3, #150	; 0x96
 8004dd4:	0032      	movs	r2, r6
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	f005 fdc8 	bl	800a96c <HAL_UART_Receive>
    SPI_flash_Write_Disable();
    //HAL_Delay(100);
	Debug_Rx();
}
 8004ddc:	b003      	add	sp, #12
 8004dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de0:	20004810 	.word	0x20004810
 8004de4:	200049e8 	.word	0x200049e8
 8004de8:	20004a7c 	.word	0x20004a7c

08004dec <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 8004dec:	b570      	push	{r4, r5, r6, lr}
    SPI_flash_cs_low;
 8004dee:	24a0      	movs	r4, #160	; 0xa0
 8004df0:	05e4      	lsls	r4, r4, #23
void SPI_flash_Chip_Erase(){
 8004df2:	b082      	sub	sp, #8
    SPI_flash_cs_low;
 8004df4:	0020      	movs	r0, r4
 8004df6:	2200      	movs	r2, #0
 8004df8:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004dfa:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 8004dfc:	f003 fb18 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004e00:	466a      	mov	r2, sp
 8004e02:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e04:	4669      	mov	r1, sp
 8004e06:	4d1c      	ldr	r5, [pc, #112]	; (8004e78 <SPI_flash_Chip_Erase+0x8c>)
 8004e08:	00b6      	lsls	r6, r6, #2
 8004e0a:	71d3      	strb	r3, [r2, #7]
 8004e0c:	0028      	movs	r0, r5
 8004e0e:	0033      	movs	r3, r6
 8004e10:	2201      	movs	r2, #1
 8004e12:	3107      	adds	r1, #7
 8004e14:	f004 fd70 	bl	80098f8 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004e18:	0020      	movs	r0, r4
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	f003 fb07 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8004e22:	0020      	movs	r0, r4
 8004e24:	2200      	movs	r2, #0
 8004e26:	2110      	movs	r1, #16
 8004e28:	f003 fb02 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 8004e2c:	466a      	mov	r2, sp
 8004e2e:	23c7      	movs	r3, #199	; 0xc7
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e30:	4669      	mov	r1, sp
 8004e32:	71d3      	strb	r3, [r2, #7]
 8004e34:	0028      	movs	r0, r5
 8004e36:	0033      	movs	r3, r6
 8004e38:	2201      	movs	r2, #1
 8004e3a:	3107      	adds	r1, #7
 8004e3c:	f004 fd5c 	bl	80098f8 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004e40:	0020      	movs	r0, r4
 8004e42:	2201      	movs	r2, #1
 8004e44:	2110      	movs	r1, #16
 8004e46:	f003 faf3 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8004e4a:	0020      	movs	r0, r4
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2110      	movs	r1, #16
 8004e50:	f003 faee 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8004e54:	466a      	mov	r2, sp
 8004e56:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e58:	4669      	mov	r1, sp
 8004e5a:	71d3      	strb	r3, [r2, #7]
 8004e5c:	0028      	movs	r0, r5
 8004e5e:	0033      	movs	r3, r6
 8004e60:	2201      	movs	r2, #1
 8004e62:	3107      	adds	r1, #7
 8004e64:	f004 fd48 	bl	80098f8 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2110      	movs	r1, #16
 8004e6c:	0020      	movs	r0, r4
 8004e6e:	f003 fadf 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
}
 8004e72:	b002      	add	sp, #8
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	20004810 	.word	0x20004810

08004e7c <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7e:	46ce      	mov	lr, r9
 8004e80:	4647      	mov	r7, r8
    SPI_flash_cs_low;
 8004e82:	26a0      	movs	r6, #160	; 0xa0
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8004e84:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 8004e86:	05f6      	lsls	r6, r6, #23
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8004e88:	b085      	sub	sp, #20
 8004e8a:	000f      	movs	r7, r1
 8004e8c:	4681      	mov	r9, r0
 8004e8e:	4690      	mov	r8, r2
    SPI_flash_cs_low;
 8004e90:	0030      	movs	r0, r6
 8004e92:	2200      	movs	r2, #0
 8004e94:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e96:	25fa      	movs	r5, #250	; 0xfa
    SPI_flash_cs_low;
 8004e98:	f003 faca 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004e9c:	466a      	mov	r2, sp
 8004e9e:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004ea0:	210f      	movs	r1, #15
 8004ea2:	4c29      	ldr	r4, [pc, #164]	; (8004f48 <SPI_flash_Page_Program+0xcc>)
 8004ea4:	00ad      	lsls	r5, r5, #2
 8004ea6:	73d3      	strb	r3, [r2, #15]
 8004ea8:	4469      	add	r1, sp
 8004eaa:	002b      	movs	r3, r5
 8004eac:	2201      	movs	r2, #1
 8004eae:	0020      	movs	r0, r4
 8004eb0:	f004 fd22 	bl	80098f8 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004eb4:	0030      	movs	r0, r6
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	2110      	movs	r1, #16
 8004eba:	f003 fab9 	bl	8008430 <HAL_GPIO_WritePin>
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8004ebe:	0030      	movs	r0, r6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2110      	movs	r1, #16
 8004ec4:	f003 fab4 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 8004ec8:	466a      	mov	r2, sp
 8004eca:	2302      	movs	r3, #2
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004ecc:	210f      	movs	r1, #15
 8004ece:	73d3      	strb	r3, [r2, #15]
 8004ed0:	4469      	add	r1, sp
 8004ed2:	002b      	movs	r3, r5
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	0020      	movs	r0, r4
 8004ed8:	f004 fd0e 	bl	80098f8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004edc:	002b      	movs	r3, r5
 8004ede:	4649      	mov	r1, r9
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	0020      	movs	r0, r4
 8004ee4:	f004 fd08 	bl	80098f8 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004ee8:	4643      	mov	r3, r8
 8004eea:	003a      	movs	r2, r7
 8004eec:	0039      	movs	r1, r7
 8004eee:	0020      	movs	r0, r4
 8004ef0:	9500      	str	r5, [sp, #0]
 8004ef2:	f004 fdcd 	bl	8009a90 <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address (data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 8004ef6:	0030      	movs	r0, r6
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2110      	movs	r1, #16
 8004efc:	f003 fa98 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8004f00:	0030      	movs	r0, r6
 8004f02:	2200      	movs	r2, #0
 8004f04:	2110      	movs	r1, #16
 8004f06:	f003 fa93 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8004f0a:	466a      	mov	r2, sp
 8004f0c:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004f0e:	210f      	movs	r1, #15
 8004f10:	73d3      	strb	r3, [r2, #15]
 8004f12:	4469      	add	r1, sp
 8004f14:	002b      	movs	r3, r5
 8004f16:	2201      	movs	r2, #1
 8004f18:	0020      	movs	r0, r4
 8004f1a:	f004 fced 	bl	80098f8 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004f1e:	0030      	movs	r0, r6
 8004f20:	2201      	movs	r2, #1
 8004f22:	2110      	movs	r1, #16
 8004f24:	f003 fa84 	bl	8008430 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004f28:	220c      	movs	r2, #12
 8004f2a:	4808      	ldr	r0, [pc, #32]	; (8004f4c <SPI_flash_Page_Program+0xd0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8004f2c:	4908      	ldr	r1, [pc, #32]	; (8004f50 <SPI_flash_Page_Program+0xd4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004f2e:	6803      	ldr	r3, [r0, #0]
 8004f30:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8004f32:	2396      	movs	r3, #150	; 0x96
 8004f34:	002a      	movs	r2, r5
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	f005 fd18 	bl	800a96c <HAL_UART_Receive>
    SPI_flash_Write_Disable();

	Debug_Rx();
    //HAL_Delay(1);
}
 8004f3c:	b005      	add	sp, #20
 8004f3e:	bcc0      	pop	{r6, r7}
 8004f40:	46b9      	mov	r9, r7
 8004f42:	46b0      	mov	r8, r6
 8004f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	20004810 	.word	0x20004810
 8004f4c:	200049e8 	.word	0x200049e8
 8004f50:	20004a7c 	.word	0x20004a7c

08004f54 <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8004f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f56:	46ce      	mov	lr, r9
 8004f58:	4647      	mov	r7, r8
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 8004f5a:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8004f5c:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 8004f5e:	05db      	lsls	r3, r3, #23
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8004f60:	b085      	sub	sp, #20
 8004f62:	000d      	movs	r5, r1
 8004f64:	4680      	mov	r8, r0
 8004f66:	0016      	movs	r6, r2
    SPI_flash_cs_low;
 8004f68:	0018      	movs	r0, r3
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2110      	movs	r1, #16
 8004f6e:	4699      	mov	r9, r3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004f70:	27fa      	movs	r7, #250	; 0xfa
    SPI_flash_cs_low;
 8004f72:	f003 fa5d 	bl	8008430 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 8004f76:	210f      	movs	r1, #15
 8004f78:	2303      	movs	r3, #3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004f7a:	4c10      	ldr	r4, [pc, #64]	; (8004fbc <SPI_flash_Read_Data+0x68>)
 8004f7c:	4469      	add	r1, sp
 8004f7e:	00bf      	lsls	r7, r7, #2
 8004f80:	700b      	strb	r3, [r1, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	003b      	movs	r3, r7
 8004f86:	0020      	movs	r0, r4
 8004f88:	f004 fcb6 	bl	80098f8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004f8c:	003b      	movs	r3, r7
 8004f8e:	4641      	mov	r1, r8
 8004f90:	2203      	movs	r2, #3
 8004f92:	0020      	movs	r0, r4
 8004f94:	f004 fcb0 	bl	80098f8 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004f98:	0033      	movs	r3, r6
 8004f9a:	002a      	movs	r2, r5
 8004f9c:	0029      	movs	r1, r5
 8004f9e:	0020      	movs	r0, r4
 8004fa0:	9700      	str	r7, [sp, #0]
 8004fa2:	f004 fd75 	bl	8009a90 <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address(data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	2110      	movs	r1, #16
 8004faa:	4648      	mov	r0, r9
 8004fac:	f003 fa40 	bl	8008430 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8004fb0:	b005      	add	sp, #20
 8004fb2:	bcc0      	pop	{r6, r7}
 8004fb4:	46b9      	mov	r9, r7
 8004fb6:	46b0      	mov	r8, r6
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	20004810 	.word	0x20004810

08004fc0 <ReadQdata>:

}



int ReadQdata() {
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	46d6      	mov	lr, sl
 8004fc4:	464f      	mov	r7, r9
 8004fc6:	4646      	mov	r6, r8
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 8004fc8:	2280      	movs	r2, #128	; 0x80
int ReadQdata() {
 8004fca:	b5c0      	push	{r6, r7, lr}
	memset(ReadMData,0,4096);
 8004fcc:	4c3e      	ldr	r4, [pc, #248]	; (80050c8 <ReadQdata+0x108>)
 8004fce:	2100      	movs	r1, #0
int ReadQdata() {
 8004fd0:	b0c0      	sub	sp, #256	; 0x100
	memset(ReadMData,0,4096);
 8004fd2:	0152      	lsls	r2, r2, #5
 8004fd4:	0020      	movs	r0, r4
 8004fd6:	f009 fb2d 	bl	800e634 <memset>
	memset(ReadMDataS,0,4096);
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	4f3b      	ldr	r7, [pc, #236]	; (80050cc <ReadQdata+0x10c>)
 8004fde:	0152      	lsls	r2, r2, #5
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	0038      	movs	r0, r7
 8004fe4:	f009 fb26 	bl	800e634 <memset>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8004fe8:	4b39      	ldr	r3, [pc, #228]	; (80050d0 <ReadQdata+0x110>)
 8004fea:	4698      	mov	r8, r3
 8004fec:	4642      	mov	r2, r8
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	7852      	ldrb	r2, [r2, #1]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 8004ff6:	4a37      	ldr	r2, [pc, #220]	; (80050d4 <ReadQdata+0x114>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8004ff8:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	dd50      	ble.n	80050a0 <ReadQdata+0xe0>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8004ffe:	4642      	mov	r2, r8
	WrtAdd[0]=addi/(256*256);
 8005000:	4641      	mov	r1, r8
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8005002:	7892      	ldrb	r2, [r2, #2]
 8005004:	260f      	movs	r6, #15
 8005006:	18d3      	adds	r3, r2, r3
 8005008:	3b01      	subs	r3, #1
	WrtAdd[0]=addi/(256*256);
 800500a:	141a      	asrs	r2, r3, #16
 800500c:	700a      	strb	r2, [r1, #0]
		return 0;
	}
	incrimentAddress2(-1);
	int len=WrtAdd[1]%16;
	len=len+1;
	WrtAdd[1]=WrtAdd[1]/16;
 800500e:	22f0      	movs	r2, #240	; 0xf0
	WrtAdd[1]=(addi%(256*256))/256;
 8005010:	121b      	asrs	r3, r3, #8
	len=len+1;
 8005012:	401e      	ands	r6, r3
	WrtAdd[1]=WrtAdd[1]*16;
 8005014:	4013      	ands	r3, r2
 8005016:	704b      	strb	r3, [r1, #1]
	WrtAdd[2]=0;
 8005018:	2300      	movs	r3, #0
 800501a:	3601      	adds	r6, #1
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 800501c:	0232      	lsls	r2, r6, #8
	WrtAdd[2]=0;
 800501e:	708b      	strb	r3, [r1, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8005020:	4640      	mov	r0, r8
 8005022:	0021      	movs	r1, r4
 8005024:	b292      	uxth	r2, r2
 8005026:	f7ff ff95 	bl	8004f54 <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 800502a:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <ReadQdata+0x118>)
		memset(temp,0,256);
		for (int j=0;j<256;j++){
 800502c:	2580      	movs	r5, #128	; 0x80
 800502e:	469a      	mov	sl, r3
			if (temp[j]==255){
				temp[j]=0;
				break;
			}
		}
		temp[255]=0;
 8005030:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <ReadQdata+0x11c>)
 8005032:	3e01      	subs	r6, #1
 8005034:	4699      	mov	r9, r3
 8005036:	0236      	lsls	r6, r6, #8
 8005038:	1934      	adds	r4, r6, r4
		for (int j=0;j<256;j++){
 800503a:	006d      	lsls	r5, r5, #1
		memset(temp,0,256);
 800503c:	2100      	movs	r1, #0
 800503e:	22ff      	movs	r2, #255	; 0xff
 8005040:	4668      	mov	r0, sp
 8005042:	f009 faf7 	bl	800e634 <memset>
		for (int j=0;j<256;j++){
 8005046:	4669      	mov	r1, sp
 8005048:	2300      	movs	r3, #0
 800504a:	e003      	b.n	8005054 <ReadQdata+0x94>
 800504c:	3301      	adds	r3, #1
 800504e:	3101      	adds	r1, #1
 8005050:	42ab      	cmp	r3, r5
 8005052:	d006      	beq.n	8005062 <ReadQdata+0xa2>
			temp[j]=ReadMData[(len-i)*256+j];
 8005054:	5ce2      	ldrb	r2, [r4, r3]
 8005056:	700a      	strb	r2, [r1, #0]
			if (temp[j]==255){
 8005058:	2aff      	cmp	r2, #255	; 0xff
 800505a:	d1f7      	bne.n	800504c <ReadQdata+0x8c>
				temp[j]=0;
 800505c:	2200      	movs	r2, #0
 800505e:	4669      	mov	r1, sp
 8005060:	54ca      	strb	r2, [r1, r3]
		temp[255]=0;
 8005062:	23ff      	movs	r3, #255	; 0xff
 8005064:	2200      	movs	r2, #0
 8005066:	4669      	mov	r1, sp
 8005068:	0038      	movs	r0, r7
 800506a:	54ca      	strb	r2, [r1, r3]
		strcat(ReadMDataS,temp);
 800506c:	f7fb f84c 	bl	8000108 <strlen>
	for (int i=1;i<=len;i++){
 8005070:	3e01      	subs	r6, #1
		strcat(ReadMDataS,temp);
 8005072:	4669      	mov	r1, sp
 8005074:	1838      	adds	r0, r7, r0
 8005076:	f009 fba3 	bl	800e7c0 <stpcpy>
	for (int i=1;i<=len;i++){
 800507a:	3c01      	subs	r4, #1
		strcat(ReadMDataS,"\r\n");
 800507c:	2203      	movs	r2, #3
 800507e:	4651      	mov	r1, sl
	for (int i=1;i<=len;i++){
 8005080:	3eff      	subs	r6, #255	; 0xff
		strcat(ReadMDataS,"\r\n");
 8005082:	f009 fca9 	bl	800e9d8 <memcpy>
	for (int i=1;i<=len;i++){
 8005086:	3cff      	subs	r4, #255	; 0xff
 8005088:	454e      	cmp	r6, r9
 800508a:	d1d7      	bne.n	800503c <ReadQdata+0x7c>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 800508c:	4640      	mov	r0, r8
 800508e:	f7ff fe51 	bl	8004d34 <SPI_flash_Sector_Erase>
	return 1;
 8005092:	2001      	movs	r0, #1
}
 8005094:	b040      	add	sp, #256	; 0x100
 8005096:	bce0      	pop	{r5, r6, r7}
 8005098:	46ba      	mov	sl, r7
 800509a:	46b1      	mov	r9, r6
 800509c:	46a8      	mov	r8, r5
 800509e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80050a0:	220c      	movs	r2, #12
 80050a2:	4c0f      	ldr	r4, [pc, #60]	; (80050e0 <ReadQdata+0x120>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80050a4:	490f      	ldr	r1, [pc, #60]	; (80050e4 <ReadQdata+0x124>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80050a6:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80050a8:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80050aa:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <ReadQdata+0x128>)
 80050ae:	f005 fbeb 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80050b2:	466a      	mov	r2, sp
 80050b4:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <ReadQdata+0x12c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80050b6:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 80050b8:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80050ba:	0020      	movs	r0, r4
 80050bc:	230a      	movs	r3, #10
 80050be:	2202      	movs	r2, #2
 80050c0:	f005 fbe2 	bl	800a888 <HAL_UART_Transmit>
		return 0;
 80050c4:	2000      	movs	r0, #0
}
 80050c6:	e7e5      	b.n	8005094 <ReadQdata+0xd4>
 80050c8:	20001f20 	.word	0x20001f20
 80050cc:	20002f20 	.word	0x20002f20
 80050d0:	200000c0 	.word	0x200000c0
 80050d4:	000300ff 	.word	0x000300ff
 80050d8:	0801230c 	.word	0x0801230c
 80050dc:	ffffff00 	.word	0xffffff00
 80050e0:	200049e8 	.word	0x200049e8
 80050e4:	080130fc 	.word	0x080130fc
 80050e8:	00001388 	.word	0x00001388
 80050ec:	00000a0d 	.word	0x00000a0d

080050f0 <InitMEMQ>:

void InitMEMQ(){
 80050f0:	b570      	push	{r4, r5, r6, lr}
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80050f2:	4d24      	ldr	r5, [pc, #144]	; (8005184 <InitMEMQ+0x94>)
void InitMEMQ(){
 80050f4:	b0c0      	sub	sp, #256	; 0x100
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80050f6:	782b      	ldrb	r3, [r5, #0]
 80050f8:	786a      	ldrb	r2, [r5, #1]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 80050fe:	4a22      	ldr	r2, [pc, #136]	; (8005188 <InitMEMQ+0x98>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8005100:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 8005102:	4293      	cmp	r3, r2
 8005104:	dd01      	ble.n	800510a <InitMEMQ+0x1a>
		for(i=0;i<2;i++){
			ReadQdata();
		}
	}

}
 8005106:	b040      	add	sp, #256	; 0x100
 8005108:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800510a:	220c      	movs	r2, #12
 800510c:	4c1f      	ldr	r4, [pc, #124]	; (800518c <InitMEMQ+0x9c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800510e:	4920      	ldr	r1, [pc, #128]	; (8005190 <InitMEMQ+0xa0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005110:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005112:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005114:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005116:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <InitMEMQ+0xa4>)
 8005118:	320f      	adds	r2, #15
 800511a:	f005 fbb5 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800511e:	466a      	mov	r2, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005120:	0020      	movs	r0, r4
		for(i=0;i<5;i++){
 8005122:	2400      	movs	r4, #0
	char newline[2] = "\r\n";
 8005124:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <InitMEMQ+0xa8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005126:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 8005128:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800512a:	230a      	movs	r3, #10
 800512c:	2202      	movs	r2, #2
 800512e:	f005 fbab 	bl	800a888 <HAL_UART_Transmit>
 8005132:	4e1a      	ldr	r6, [pc, #104]	; (800519c <InitMEMQ+0xac>)
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 8005134:	0022      	movs	r2, r4
 8005136:	0023      	movs	r3, r4
 8005138:	0031      	movs	r1, r6
 800513a:	4668      	mov	r0, sp
 800513c:	f009 fa0e 	bl	800e55c <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 8005140:	4668      	mov	r0, sp
 8005142:	f7fa ffe1 	bl	8000108 <strlen>
 8005146:	3001      	adds	r0, #1
 8005148:	b282      	uxth	r2, r0
	if (len<255){
 800514a:	2afe      	cmp	r2, #254	; 0xfe
 800514c:	d907      	bls.n	800515e <InitMEMQ+0x6e>
		for(i=0;i<5;i++){
 800514e:	3401      	adds	r4, #1
 8005150:	2c05      	cmp	r4, #5
 8005152:	d1ef      	bne.n	8005134 <InitMEMQ+0x44>
			ReadQdata();
 8005154:	f7ff ff34 	bl	8004fc0 <ReadQdata>
 8005158:	f7ff ff32 	bl	8004fc0 <ReadQdata>
}
 800515c:	e7d3      	b.n	8005106 <InitMEMQ+0x16>
		SPI_flash_Page_Program(WrtAdd, data,len);
 800515e:	4669      	mov	r1, sp
 8005160:	0028      	movs	r0, r5
 8005162:	f7ff fe8b 	bl	8004e7c <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8005166:	782b      	ldrb	r3, [r5, #0]
 8005168:	786a      	ldrb	r2, [r5, #1]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	189b      	adds	r3, r3, r2
 800516e:	78aa      	ldrb	r2, [r5, #2]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	189b      	adds	r3, r3, r2
 8005174:	3301      	adds	r3, #1
 8005176:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 8005178:	141a      	asrs	r2, r3, #16
 800517a:	702a      	strb	r2, [r5, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 800517c:	121a      	asrs	r2, r3, #8
 800517e:	706a      	strb	r2, [r5, #1]
	WrtAdd[2]=(addi)%256;
 8005180:	70ab      	strb	r3, [r5, #2]
}
 8005182:	e7e4      	b.n	800514e <InitMEMQ+0x5e>
 8005184:	200000c0 	.word	0x200000c0
 8005188:	000300ff 	.word	0x000300ff
 800518c:	200049e8 	.word	0x200049e8
 8005190:	0801310c 	.word	0x0801310c
 8005194:	00001388 	.word	0x00001388
 8005198:	00000a0d 	.word	0x00000a0d
 800519c:	08013128 	.word	0x08013128

080051a0 <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	46de      	mov	lr, fp
 80051a4:	4657      	mov	r7, sl
 80051a6:	464e      	mov	r6, r9
 80051a8:	4645      	mov	r5, r8
 80051aa:	b5e0      	push	{r5, r6, r7, lr}
 80051ac:	4c60      	ldr	r4, [pc, #384]	; (8005330 <writeConfig+0x190>)
 80051ae:	4699      	mov	r9, r3
 80051b0:	44a5      	add	sp, r4
 80051b2:	9bd0      	ldr	r3, [sp, #832]	; 0x340
 80051b4:	4692      	mov	sl, r2
 80051b6:	4698      	mov	r8, r3
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 80051b8:	4b5e      	ldr	r3, [pc, #376]	; (8005334 <writeConfig+0x194>)
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80051ba:	000f      	movs	r7, r1
	uint8_t add[]={0x00,0x00,0x00};
 80051bc:	881a      	ldrh	r2, [r3, #0]
 80051be:	a902      	add	r1, sp, #8
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80051c0:	9ece      	ldr	r6, [sp, #824]	; 0x338
 80051c2:	9dcf      	ldr	r5, [sp, #828]	; 0x33c
	uint8_t add[]={0x00,0x00,0x00};
 80051c4:	808a      	strh	r2, [r1, #4]

	SPI_flash_Read_Data(add , data1 , 256);
 80051c6:	2280      	movs	r2, #128	; 0x80
	uint8_t add[]={0x00,0x00,0x00};
 80051c8:	789b      	ldrb	r3, [r3, #2]
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80051ca:	4683      	mov	fp, r0
	uint8_t add[]={0x00,0x00,0x00};
 80051cc:	718b      	strb	r3, [r1, #6]
	SPI_flash_Read_Data(add , data1 , 256);
 80051ce:	0052      	lsls	r2, r2, #1
 80051d0:	a904      	add	r1, sp, #16
 80051d2:	a803      	add	r0, sp, #12
 80051d4:	f7ff febe 	bl	8004f54 <SPI_flash_Read_Data>
	add[1]=0x01;
 80051d8:	2301      	movs	r3, #1
 80051da:	aa02      	add	r2, sp, #8
 80051dc:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data2 , 256);
 80051de:	2280      	movs	r2, #128	; 0x80
 80051e0:	a944      	add	r1, sp, #272	; 0x110
 80051e2:	0052      	lsls	r2, r2, #1
 80051e4:	a803      	add	r0, sp, #12
 80051e6:	f7ff feb5 	bl	8004f54 <SPI_flash_Read_Data>
	add[1]=0x02;
 80051ea:	2302      	movs	r3, #2
 80051ec:	aa02      	add	r2, sp, #8
 80051ee:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data3 , 256);
 80051f0:	2280      	movs	r2, #128	; 0x80
 80051f2:	a984      	add	r1, sp, #528	; 0x210
 80051f4:	0052      	lsls	r2, r2, #1
 80051f6:	a803      	add	r0, sp, #12
 80051f8:	f7ff feac 	bl	8004f54 <SPI_flash_Read_Data>



	int i=0;
	int j=0;
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80051fc:	465b      	mov	r3, fp
	SPI_flash_Read_Data(add , data3 , 256);
 80051fe:	2401      	movs	r4, #1
 8005200:	3b01      	subs	r3, #1
 8005202:	9301      	str	r3, [sp, #4]
		data1[j+i]=RegNo[i];
 8005204:	9b01      	ldr	r3, [sp, #4]
 8005206:	aa02      	add	r2, sp, #8
 8005208:	5d1b      	ldrb	r3, [r3, r4]
 800520a:	3207      	adds	r2, #7
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 800520c:	4658      	mov	r0, fp
		data1[j+i]=RegNo[i];
 800520e:	5513      	strb	r3, [r2, r4]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8005210:	f7fa ff7a 	bl	8000108 <strlen>
 8005214:	42a0      	cmp	r0, r4
 8005216:	d302      	bcc.n	800521e <writeConfig+0x7e>
 8005218:	3401      	adds	r4, #1
 800521a:	2c11      	cmp	r4, #17
 800521c:	d1f2      	bne.n	8005204 <writeConfig+0x64>
 800521e:	2400      	movs	r4, #0
 8005220:	e001      	b.n	8005226 <writeConfig+0x86>
	}
	j=j+RegNoLen;

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8005222:	2c64      	cmp	r4, #100	; 0x64
 8005224:	d009      	beq.n	800523a <writeConfig+0x9a>
		data1[j+i]=INSMS[i];
 8005226:	5d3a      	ldrb	r2, [r7, r4]
 8005228:	ab04      	add	r3, sp, #16
 800522a:	191b      	adds	r3, r3, r4
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 800522c:	0038      	movs	r0, r7
		data1[j+i]=INSMS[i];
 800522e:	741a      	strb	r2, [r3, #16]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8005230:	3401      	adds	r4, #1
 8005232:	f7fa ff69 	bl	8000108 <strlen>
 8005236:	42a0      	cmp	r0, r4
 8005238:	d2f3      	bcs.n	8005222 <writeConfig+0x82>
 800523a:	2700      	movs	r7, #0
 800523c:	ac21      	add	r4, sp, #132	; 0x84
 800523e:	e001      	b.n	8005244 <writeConfig+0xa4>
	}
	j=j+INSMSLen;

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8005240:	2f3c      	cmp	r7, #60	; 0x3c
 8005242:	d008      	beq.n	8005256 <writeConfig+0xb6>
		data1[j+i]=OUTSMS[i];
 8005244:	4653      	mov	r3, sl
 8005246:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8005248:	4650      	mov	r0, sl
		data1[j+i]=OUTSMS[i];
 800524a:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 800524c:	3701      	adds	r7, #1
 800524e:	f7fa ff5b 	bl	8000108 <strlen>
 8005252:	42b8      	cmp	r0, r7
 8005254:	d2f4      	bcs.n	8005240 <writeConfig+0xa0>
 8005256:	ab02      	add	r3, sp, #8
 8005258:	469c      	mov	ip, r3
 800525a:	2301      	movs	r3, #1
 800525c:	2408      	movs	r4, #8
 800525e:	425b      	negs	r3, r3
 8005260:	34ff      	adds	r4, #255	; 0xff
 8005262:	444b      	add	r3, r9
 8005264:	2701      	movs	r7, #1
 8005266:	469a      	mov	sl, r3
 8005268:	4464      	add	r4, ip
 800526a:	e002      	b.n	8005272 <writeConfig+0xd2>
	}
	j=0;
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 800526c:	3701      	adds	r7, #1
 800526e:	2f29      	cmp	r7, #41	; 0x29
 8005270:	d007      	beq.n	8005282 <writeConfig+0xe2>
		data2[j+i]=EmgIP[i];
 8005272:	4653      	mov	r3, sl
 8005274:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8005276:	4648      	mov	r0, r9
		data2[j+i]=EmgIP[i];
 8005278:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 800527a:	f7fa ff45 	bl	8000108 <strlen>
 800527e:	42b8      	cmp	r0, r7
 8005280:	d2f4      	bcs.n	800526c <writeConfig+0xcc>
 8005282:	2700      	movs	r7, #0
 8005284:	ac4e      	add	r4, sp, #312	; 0x138
 8005286:	e001      	b.n	800528c <writeConfig+0xec>
	}
	j=j+EmgIPLen;

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8005288:	2f28      	cmp	r7, #40	; 0x28
 800528a:	d007      	beq.n	800529c <writeConfig+0xfc>
		data2[j+i]=RegIP[i];
 800528c:	5df3      	ldrb	r3, [r6, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 800528e:	0030      	movs	r0, r6
		data2[j+i]=RegIP[i];
 8005290:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8005292:	3701      	adds	r7, #1
 8005294:	f7fa ff38 	bl	8000108 <strlen>
 8005298:	4287      	cmp	r7, r0
 800529a:	d9f5      	bls.n	8005288 <writeConfig+0xe8>
 800529c:	2600      	movs	r6, #0
 800529e:	ac58      	add	r4, sp, #352	; 0x160
 80052a0:	e001      	b.n	80052a6 <writeConfig+0x106>
	}
	j=j+RegIPLen;


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 80052a2:	2e28      	cmp	r6, #40	; 0x28
 80052a4:	d007      	beq.n	80052b6 <writeConfig+0x116>
		data2[j+i]=TrackIP[i];
 80052a6:	5dab      	ldrb	r3, [r5, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 80052a8:	0028      	movs	r0, r5
		data2[j+i]=TrackIP[i];
 80052aa:	55a3      	strb	r3, [r4, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 80052ac:	3601      	adds	r6, #1
 80052ae:	f7fa ff2b 	bl	8000108 <strlen>
 80052b2:	42b0      	cmp	r0, r6
 80052b4:	d2f5      	bcs.n	80052a2 <writeConfig+0x102>
 80052b6:	ab02      	add	r3, sp, #8
 80052b8:	469c      	mov	ip, r3
	}
	j=0;


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80052ba:	2702      	movs	r7, #2
 80052bc:	4643      	mov	r3, r8
 80052be:	4d1e      	ldr	r5, [pc, #120]	; (8005338 <writeConfig+0x198>)
 80052c0:	2401      	movs	r4, #1
 80052c2:	4465      	add	r5, ip
 80052c4:	1e5e      	subs	r6, r3, #1
 80052c6:	37ff      	adds	r7, #255	; 0xff
 80052c8:	e002      	b.n	80052d0 <writeConfig+0x130>
 80052ca:	3401      	adds	r4, #1
 80052cc:	42bc      	cmp	r4, r7
 80052ce:	d006      	beq.n	80052de <writeConfig+0x13e>
		data3[j+i]=OtherData[i];
 80052d0:	5d33      	ldrb	r3, [r6, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80052d2:	4640      	mov	r0, r8
		data3[j+i]=OtherData[i];
 80052d4:	552b      	strb	r3, [r5, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80052d6:	f7fa ff17 	bl	8000108 <strlen>
 80052da:	42a0      	cmp	r0, r4
 80052dc:	d2f5      	bcs.n	80052ca <writeConfig+0x12a>
	}
	j=j+OtherDataLen;


	add[1]=0x00;
 80052de:	2300      	movs	r3, #0
 80052e0:	aa02      	add	r2, sp, #8
 80052e2:	7153      	strb	r3, [r2, #5]

	SPI_flash_Sector_Erase(add);
 80052e4:	a803      	add	r0, sp, #12
 80052e6:	f7ff fd25 	bl	8004d34 <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 80052ea:	2280      	movs	r2, #128	; 0x80
 80052ec:	a904      	add	r1, sp, #16
 80052ee:	a803      	add	r0, sp, #12
 80052f0:	0052      	lsls	r2, r2, #1
 80052f2:	f7ff fdc3 	bl	8004e7c <SPI_flash_Page_Program>
	add[1]=0x01;
 80052f6:	2301      	movs	r3, #1
 80052f8:	aa02      	add	r2, sp, #8
 80052fa:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data2,256);
 80052fc:	2280      	movs	r2, #128	; 0x80
 80052fe:	a944      	add	r1, sp, #272	; 0x110
 8005300:	a803      	add	r0, sp, #12
 8005302:	0052      	lsls	r2, r2, #1
 8005304:	f7ff fdba 	bl	8004e7c <SPI_flash_Page_Program>
	add[1]=0x02;
 8005308:	2302      	movs	r3, #2
 800530a:	aa02      	add	r2, sp, #8
 800530c:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data3,256);
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	a803      	add	r0, sp, #12
 8005312:	0052      	lsls	r2, r2, #1
 8005314:	a984      	add	r1, sp, #528	; 0x210
 8005316:	f7ff fdb1 	bl	8004e7c <SPI_flash_Page_Program>
	return 1;

}
 800531a:	2001      	movs	r0, #1
 800531c:	23c5      	movs	r3, #197	; 0xc5
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	449d      	add	sp, r3
 8005322:	bcf0      	pop	{r4, r5, r6, r7}
 8005324:	46bb      	mov	fp, r7
 8005326:	46b2      	mov	sl, r6
 8005328:	46a9      	mov	r9, r5
 800532a:	46a0      	mov	r8, r4
 800532c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	fffffcec 	.word	0xfffffcec
 8005334:	08012170 	.word	0x08012170
 8005338:	00000207 	.word	0x00000207

0800533c <readRegNo>:



char* readRegNo(){
 800533c:	b510      	push	{r4, lr}
 800533e:	b082      	sub	sp, #8
	uint8_t add4[]={0x00, 0x00,0x00};
 8005340:	4669      	mov	r1, sp
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <readRegNo+0x3c>)

    memset(dataR,0,256);
 8005344:	4c0d      	ldr	r4, [pc, #52]	; (800537c <readRegNo+0x40>)
	uint8_t add4[]={0x00, 0x00,0x00};
 8005346:	881a      	ldrh	r2, [r3, #0]
    memset(dataR,0,256);
 8005348:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 800534a:	808a      	strh	r2, [r1, #4]
    memset(dataR,0,256);
 800534c:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 800534e:	789b      	ldrb	r3, [r3, #2]
    memset(dataR,0,256);
 8005350:	0052      	lsls	r2, r2, #1
	uint8_t add4[]={0x00, 0x00,0x00};
 8005352:	718b      	strb	r3, [r1, #6]
    memset(dataR,0,256);
 8005354:	2100      	movs	r1, #0
 8005356:	f009 f96d 	bl	800e634 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 800535a:	a801      	add	r0, sp, #4
 800535c:	2210      	movs	r2, #16
 800535e:	0021      	movs	r1, r4
 8005360:	f7ff fdf8 	bl	8004f54 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8005364:	0020      	movs	r0, r4
 8005366:	f7fa fecf 	bl	8000108 <strlen>
 800536a:	2801      	cmp	r0, #1
 800536c:	d800      	bhi.n	8005370 <readRegNo+0x34>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
	}
	else{
		return "--Err RegNo--";
 800536e:	4c04      	ldr	r4, [pc, #16]	; (8005380 <readRegNo+0x44>)
	}

}
 8005370:	0020      	movs	r0, r4
 8005372:	b002      	add	sp, #8
 8005374:	bd10      	pop	{r4, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	08012170 	.word	0x08012170
 800537c:	20003fe4 	.word	0x20003fe4
 8005380:	08013200 	.word	0x08013200

08005384 <detectAcc>:


int detectAcc(){
 8005384:	b570      	push	{r4, r5, r6, lr}
	readAcc();
 8005386:	f7fd ffa5 	bl	80032d4 <readAcc.isra.0>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 800538a:	4c14      	ldr	r4, [pc, #80]	; (80053dc <detectAcc+0x58>)
 800538c:	6861      	ldr	r1, [r4, #4]
 800538e:	6820      	ldr	r0, [r4, #0]
 8005390:	f7fb f934 	bl	80005fc <__aeabi_fadd>
 8005394:	68a1      	ldr	r1, [r4, #8]
 8005396:	f7fb f931 	bl	80005fc <__aeabi_fadd>
 800539a:	4911      	ldr	r1, [pc, #68]	; (80053e0 <detectAcc+0x5c>)
 800539c:	1c05      	adds	r5, r0, #0
 800539e:	f7fb f8a9 	bl	80004f4 <__aeabi_fcmpgt>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d115      	bne.n	80053d2 <detectAcc+0x4e>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 80053a6:	490f      	ldr	r1, [pc, #60]	; (80053e4 <detectAcc+0x60>)
 80053a8:	1c28      	adds	r0, r5, #0
 80053aa:	f7fb f88f 	bl	80004cc <__aeabi_fcmplt>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d111      	bne.n	80053d6 <detectAcc+0x52>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 80053b2:	6921      	ldr	r1, [r4, #16]
 80053b4:	68e0      	ldr	r0, [r4, #12]
 80053b6:	f7fb f921 	bl	80005fc <__aeabi_fadd>
 80053ba:	6961      	ldr	r1, [r4, #20]
 80053bc:	f7fb f91e 	bl	80005fc <__aeabi_fadd>
 80053c0:	4907      	ldr	r1, [pc, #28]	; (80053e0 <detectAcc+0x5c>)
 80053c2:	f7fb f897 	bl	80004f4 <__aeabi_fcmpgt>


	return 0;
 80053c6:	1e43      	subs	r3, r0, #1
 80053c8:	4198      	sbcs	r0, r3
 80053ca:	4243      	negs	r3, r0
 80053cc:	2003      	movs	r0, #3
 80053ce:	4018      	ands	r0, r3
}
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 80053d2:	2001      	movs	r0, #1
 80053d4:	e7fc      	b.n	80053d0 <detectAcc+0x4c>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 80053d6:	2002      	movs	r0, #2
 80053d8:	e7fa      	b.n	80053d0 <detectAcc+0x4c>
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	200002ec 	.word	0x200002ec
 80053e0:	44fa0000 	.word	0x44fa0000
 80053e4:	c4fa0000 	.word	0xc4fa0000

080053e8 <initGPS>:
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 80053e8:	2300      	movs	r3, #0
void initGPS(){
 80053ea:	b570      	push	{r4, r5, r6, lr}
	GPSInfo.lat=0.0;
 80053ec:	4c0d      	ldr	r4, [pc, #52]	; (8005424 <initGPS+0x3c>)
	GPSInfo.pdop=0.0;
	GPSInfo.head=0.0;
	GPSInfo.speed=0.0;
	GPSInfo.fix=0;
	GPSInfo.sat=0;
	strcpy(GPSInfo.latD,"x");
 80053ee:	2678      	movs	r6, #120	; 0x78
	strcpy(GPSInfo.lonD,"x");
 80053f0:	0020      	movs	r0, r4
	GPSInfo.lat=0.0;
 80053f2:	6023      	str	r3, [r4, #0]
	GPSInfo.lon=0.0;
 80053f4:	6063      	str	r3, [r4, #4]
	GPSInfo.alt=0.0;
 80053f6:	60a3      	str	r3, [r4, #8]
	GPSInfo.hdop=0.0;
 80053f8:	60e3      	str	r3, [r4, #12]
	GPSInfo.pdop=0.0;
 80053fa:	6123      	str	r3, [r4, #16]
	GPSInfo.head=0.0;
 80053fc:	6163      	str	r3, [r4, #20]
	GPSInfo.speed=0.0;
 80053fe:	61a3      	str	r3, [r4, #24]
	GPSInfo.fix=0;
 8005400:	2300      	movs	r3, #0
	strcpy(GPSInfo.lonD,"x");
 8005402:	4d09      	ldr	r5, [pc, #36]	; (8005428 <initGPS+0x40>)
	strcpy(GPSInfo.latD,"x");
 8005404:	8526      	strh	r6, [r4, #40]	; 0x28
	strcpy(GPSInfo.lonD,"x");
 8005406:	0029      	movs	r1, r5
 8005408:	2202      	movs	r2, #2
 800540a:	302b      	adds	r0, #43	; 0x2b
	GPSInfo.fix=0;
 800540c:	61e3      	str	r3, [r4, #28]
	GPSInfo.sat=0;
 800540e:	6223      	str	r3, [r4, #32]
	strcpy(GPSInfo.lonD,"x");
 8005410:	f009 fae2 	bl	800e9d8 <memcpy>
	strcpy(GPSInfo.time,"x");
	strcpy(GPSInfo.date,"x");
 8005414:	0020      	movs	r0, r4
 8005416:	0029      	movs	r1, r5
	strcpy(GPSInfo.time,"x");
 8005418:	85e6      	strh	r6, [r4, #46]	; 0x2e
	strcpy(GPSInfo.date,"x");
 800541a:	2202      	movs	r2, #2
 800541c:	303d      	adds	r0, #61	; 0x3d
 800541e:	f009 fadb 	bl	800e9d8 <memcpy>
}
 8005422:	bd70      	pop	{r4, r5, r6, pc}
 8005424:	200004fc 	.word	0x200004fc
 8005428:	08013210 	.word	0x08013210

0800542c <getGPSString>:
void getGPSString(){
 800542c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800542e:	46c6      	mov	lr, r8
 8005430:	b500      	push	{lr}
	memset(gpsDataRet,0,70);
 8005432:	4e29      	ldr	r6, [pc, #164]	; (80054d8 <getGPSString+0xac>)
 8005434:	2246      	movs	r2, #70	; 0x46
 8005436:	2100      	movs	r1, #0
 8005438:	0030      	movs	r0, r6
void getGPSString(){
 800543a:	b096      	sub	sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 800543c:	f009 f8fa 	bl	800e634 <memset>

	if(GPSInfo.fix==1){
 8005440:	4c26      	ldr	r4, [pc, #152]	; (80054dc <getGPSString+0xb0>)
 8005442:	69e3      	ldr	r3, [r4, #28]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d040      	beq.n	80054ca <getGPSString+0x9e>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8005448:	2200      	movs	r2, #0
 800544a:	2104      	movs	r1, #4
 800544c:	4824      	ldr	r0, [pc, #144]	; (80054e0 <getGPSString+0xb4>)
 800544e:	f002 ffef 	bl	8008430 <HAL_GPIO_WritePin>
	}




	sprintf(gpsDataRet, "%1d,%s,%s,%0.6f,%1s,%0.6f,%s,%0.1f,%0.2f,%d,%0.1f,%0.1f,%0.1f",
 8005452:	233d      	movs	r3, #61	; 0x3d
 8005454:	68e0      	ldr	r0, [r4, #12]
 8005456:	4698      	mov	r8, r3
 8005458:	f7fd fe2a 	bl	80030b0 <__aeabi_f2d>
 800545c:	69e7      	ldr	r7, [r4, #28]
 800545e:	9014      	str	r0, [sp, #80]	; 0x50
 8005460:	9115      	str	r1, [sp, #84]	; 0x54
 8005462:	6920      	ldr	r0, [r4, #16]
 8005464:	f7fd fe24 	bl	80030b0 <__aeabi_f2d>
 8005468:	9012      	str	r0, [sp, #72]	; 0x48
 800546a:	9113      	str	r1, [sp, #76]	; 0x4c
 800546c:	68a0      	ldr	r0, [r4, #8]
 800546e:	f7fd fe1f 	bl	80030b0 <__aeabi_f2d>
 8005472:	9010      	str	r0, [sp, #64]	; 0x40
 8005474:	9111      	str	r1, [sp, #68]	; 0x44
 8005476:	6a23      	ldr	r3, [r4, #32]
 8005478:	4d1a      	ldr	r5, [pc, #104]	; (80054e4 <getGPSString+0xb8>)
 800547a:	930e      	str	r3, [sp, #56]	; 0x38
 800547c:	6960      	ldr	r0, [r4, #20]
 800547e:	f7fd fe17 	bl	80030b0 <__aeabi_f2d>
 8005482:	900c      	str	r0, [sp, #48]	; 0x30
 8005484:	910d      	str	r1, [sp, #52]	; 0x34
 8005486:	69a0      	ldr	r0, [r4, #24]
 8005488:	f7fd fe12 	bl	80030b0 <__aeabi_f2d>
 800548c:	0023      	movs	r3, r4
 800548e:	900a      	str	r0, [sp, #40]	; 0x28
 8005490:	910b      	str	r1, [sp, #44]	; 0x2c
 8005492:	332b      	adds	r3, #43	; 0x2b
 8005494:	9308      	str	r3, [sp, #32]
 8005496:	6860      	ldr	r0, [r4, #4]
 8005498:	f7fd fe0a 	bl	80030b0 <__aeabi_f2d>
 800549c:	0023      	movs	r3, r4
 800549e:	9006      	str	r0, [sp, #24]
 80054a0:	9107      	str	r1, [sp, #28]
 80054a2:	3328      	adds	r3, #40	; 0x28
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	f7fd fe02 	bl	80030b0 <__aeabi_f2d>
 80054ac:	44a0      	add	r8, r4
 80054ae:	342e      	adds	r4, #46	; 0x2e
 80054b0:	9002      	str	r0, [sp, #8]
 80054b2:	9103      	str	r1, [sp, #12]
 80054b4:	4643      	mov	r3, r8
 80054b6:	003a      	movs	r2, r7
 80054b8:	0029      	movs	r1, r5
 80054ba:	0030      	movs	r0, r6
 80054bc:	9400      	str	r4, [sp, #0]
 80054be:	f009 f84d 	bl	800e55c <siprintf>
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
}
 80054c2:	b016      	add	sp, #88	; 0x58
 80054c4:	bc80      	pop	{r7}
 80054c6:	46b8      	mov	r8, r7
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 80054ca:	2201      	movs	r2, #1
 80054cc:	2104      	movs	r1, #4
 80054ce:	4804      	ldr	r0, [pc, #16]	; (80054e0 <getGPSString+0xb4>)
 80054d0:	f002 ffae 	bl	8008430 <HAL_GPIO_WritePin>
}
 80054d4:	e7bd      	b.n	8005452 <getGPSString+0x26>
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	2000454c 	.word	0x2000454c
 80054dc:	200004fc 	.word	0x200004fc
 80054e0:	50000c00 	.word	0x50000c00
 80054e4:	08013214 	.word	0x08013214

080054e8 <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 80054e8:	b510      	push	{r4, lr}
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80054ea:	212a      	movs	r1, #42	; 0x2a
uint8_t nmea_valid_checksum(const char *message) {
 80054ec:	0004      	movs	r4, r0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80054ee:	f009 f8b6 	bl	800e65e <strchr>
 80054f2:	2100      	movs	r1, #0
 80054f4:	2210      	movs	r2, #16
 80054f6:	3001      	adds	r0, #1
 80054f8:	f008 f8a6 	bl	800d648 <strtol>

    char p;
    uint8_t sum = 0;
    ++message;
    while ((p = *message++) != '*') {
 80054fc:	7863      	ldrb	r3, [r4, #1]
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 80054fe:	b2c1      	uxtb	r1, r0
    while ((p = *message++) != '*') {
 8005500:	2b2a      	cmp	r3, #42	; 0x2a
 8005502:	d00c      	beq.n	800551e <nmea_valid_checksum+0x36>
    uint8_t sum = 0;
 8005504:	2200      	movs	r2, #0
 8005506:	3402      	adds	r4, #2
    while ((p = *message++) != '*') {
 8005508:	3401      	adds	r4, #1
        sum ^= p;
 800550a:	405a      	eors	r2, r3
    while ((p = *message++) != '*') {
 800550c:	1e63      	subs	r3, r4, #1
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b2a      	cmp	r3, #42	; 0x2a
 8005512:	d1f9      	bne.n	8005508 <nmea_valid_checksum+0x20>
    }

    if (sum != checksum) {
 8005514:	1a88      	subs	r0, r1, r2
 8005516:	4243      	negs	r3, r0
 8005518:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
}
 800551a:	b2c0      	uxtb	r0, r0
 800551c:	bd10      	pop	{r4, pc}
    uint8_t sum = 0;
 800551e:	2200      	movs	r2, #0
 8005520:	e7f8      	b.n	8005514 <nmea_valid_checksum+0x2c>
 8005522:	46c0      	nop			; (mov r8, r8)

08005524 <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 8005524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005526:	46ce      	mov	lr, r9
 8005528:	4647      	mov	r7, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800552a:	220c      	movs	r2, #12
 800552c:	b580      	push	{r7, lr}
 800552e:	4e36      	ldr	r6, [pc, #216]	; (8005608 <TestMEM+0xe4>)
 8005530:	b087      	sub	sp, #28
 8005532:	6833      	ldr	r3, [r6, #0]
	char newline[2] = "\r\n";
 8005534:	ad05      	add	r5, sp, #20
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005536:	621a      	str	r2, [r3, #32]
 8005538:	4690      	mov	r8, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800553a:	4934      	ldr	r1, [pc, #208]	; (800560c <TestMEM+0xe8>)
 800553c:	4b34      	ldr	r3, [pc, #208]	; (8005610 <TestMEM+0xec>)
	char newline[2] = "\r\n";
 800553e:	4f35      	ldr	r7, [pc, #212]	; (8005614 <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005540:	3215      	adds	r2, #21
 8005542:	0030      	movs	r0, r6
 8005544:	f005 f9a0 	bl	800a888 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005548:	230a      	movs	r3, #10
 800554a:	2202      	movs	r2, #2
 800554c:	0029      	movs	r1, r5
 800554e:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 8005550:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005552:	f005 f999 	bl	800a888 <HAL_UART_Transmit>
	int i=0;
	Debug_Tx("------------------Testing Memory:");
	for(i=0;i<1;i++){
		SPI_flash_get_device_ID( );
 8005556:	f7ff fb07 	bl	8004b68 <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 800555a:	4c2f      	ldr	r4, [pc, #188]	; (8005618 <TestMEM+0xf4>)
 800555c:	4b2f      	ldr	r3, [pc, #188]	; (800561c <TestMEM+0xf8>)
 800555e:	0022      	movs	r2, r4
 8005560:	320c      	adds	r2, #12
 8005562:	4691      	mov	r9, r2
 8005564:	2268      	movs	r2, #104	; 0x68
 8005566:	4694      	mov	ip, r2
 8005568:	44a4      	add	ip, r4
 800556a:	4662      	mov	r2, ip
 800556c:	0021      	movs	r1, r4
 800556e:	0020      	movs	r0, r4
 8005570:	3134      	adds	r1, #52	; 0x34
 8005572:	9202      	str	r2, [sp, #8]
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	464a      	mov	r2, r9
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	3058      	adds	r0, #88	; 0x58
 800557c:	f7ff fe10 	bl	80051a0 <writeConfig>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005580:	4642      	mov	r2, r8
 8005582:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005584:	4926      	ldr	r1, [pc, #152]	; (8005620 <TestMEM+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005586:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005588:	0030      	movs	r0, r6
 800558a:	4b21      	ldr	r3, [pc, #132]	; (8005610 <TestMEM+0xec>)
 800558c:	3203      	adds	r2, #3
 800558e:	f005 f97b 	bl	800a888 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005592:	230a      	movs	r3, #10
 8005594:	2202      	movs	r2, #2
 8005596:	0029      	movs	r1, r5
 8005598:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 800559a:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800559c:	f005 f974 	bl	800a888 <HAL_UART_Transmit>
    memset(dataR,0,256);
 80055a0:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 80055a2:	8823      	ldrh	r3, [r4, #0]
    memset(dataR,0,256);
 80055a4:	2100      	movs	r1, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 80055a6:	802b      	strh	r3, [r5, #0]
 80055a8:	78a3      	ldrb	r3, [r4, #2]
    memset(dataR,0,256);
 80055aa:	4c1e      	ldr	r4, [pc, #120]	; (8005624 <TestMEM+0x100>)
 80055ac:	0052      	lsls	r2, r2, #1
 80055ae:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 80055b0:	70ab      	strb	r3, [r5, #2]
    memset(dataR,0,256);
 80055b2:	f009 f83f 	bl	800e634 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 80055b6:	0028      	movs	r0, r5
 80055b8:	2210      	movs	r2, #16
 80055ba:	0021      	movs	r1, r4
 80055bc:	f7ff fcca 	bl	8004f54 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 80055c0:	0020      	movs	r0, r4
 80055c2:	f7fa fda1 	bl	8000108 <strlen>
 80055c6:	2801      	cmp	r0, #1
 80055c8:	d800      	bhi.n	80055cc <TestMEM+0xa8>
		return "--Err RegNo--";
 80055ca:	4c17      	ldr	r4, [pc, #92]	; (8005628 <TestMEM+0x104>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80055cc:	220c      	movs	r2, #12
 80055ce:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80055d0:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80055d2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80055d4:	f7fa fd98 	bl	8000108 <strlen>
 80055d8:	0021      	movs	r1, r4
 80055da:	b282      	uxth	r2, r0
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <TestMEM+0xec>)
 80055de:	0030      	movs	r0, r6
 80055e0:	f005 f952 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80055e6:	2202      	movs	r2, #2
 80055e8:	0029      	movs	r1, r5
	char newline[2] = "\r\n";
 80055ea:	802b      	strh	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80055ec:	0030      	movs	r0, r6
 80055ee:	230a      	movs	r3, #10
 80055f0:	f005 f94a 	bl	800a888 <HAL_UART_Transmit>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 80055f4:	20fa      	movs	r0, #250	; 0xfa
 80055f6:	00c0      	lsls	r0, r0, #3
 80055f8:	f002 f852 	bl	80076a0 <HAL_Delay>

	}


}
 80055fc:	b007      	add	sp, #28
 80055fe:	bcc0      	pop	{r6, r7}
 8005600:	46b9      	mov	r9, r7
 8005602:	46b0      	mov	r8, r6
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	200049e8 	.word	0x200049e8
 800560c:	08013254 	.word	0x08013254
 8005610:	00001388 	.word	0x00001388
 8005614:	00000a0d 	.word	0x00000a0d
 8005618:	08012170 	.word	0x08012170
 800561c:	08013278 	.word	0x08013278
 8005620:	08013288 	.word	0x08013288
 8005624:	20003fe4 	.word	0x20003fe4
 8005628:	08013200 	.word	0x08013200

0800562c <SystemClock_Config>:
{
 800562c:	b500      	push	{lr}
 800562e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005630:	2234      	movs	r2, #52	; 0x34
 8005632:	2100      	movs	r1, #0
 8005634:	a805      	add	r0, sp, #20
 8005636:	f008 fffd 	bl	800e634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800563a:	2210      	movs	r2, #16
 800563c:	2100      	movs	r1, #0
 800563e:	a801      	add	r0, sp, #4
 8005640:	f008 fff8 	bl	800e634 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005644:	2080      	movs	r0, #128	; 0x80
 8005646:	0080      	lsls	r0, r0, #2
 8005648:	f003 fb08 	bl	8008c5c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800564c:	2302      	movs	r3, #2
 800564e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005650:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005652:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005654:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005656:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005658:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800565a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800565c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800565e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005660:	f003 fb2c 	bl	8008cbc <HAL_RCC_OscConfig>
 8005664:	2800      	cmp	r0, #0
 8005666:	d001      	beq.n	800566c <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005668:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800566a:	e7fe      	b.n	800566a <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800566c:	2307      	movs	r3, #7
 800566e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005670:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005672:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005674:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005676:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005678:	2100      	movs	r1, #0
 800567a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800567c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800567e:	f003 fdcd 	bl	800921c <HAL_RCC_ClockConfig>
 8005682:	2800      	cmp	r0, #0
 8005684:	d001      	beq.n	800568a <SystemClock_Config+0x5e>
 8005686:	b672      	cpsid	i
  while (1)
 8005688:	e7fe      	b.n	8005688 <SystemClock_Config+0x5c>
}
 800568a:	b013      	add	sp, #76	; 0x4c
 800568c:	bd00      	pop	{pc}
 800568e:	46c0      	nop			; (mov r8, r8)

08005690 <main>:
{
 8005690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005692:	46de      	mov	lr, fp
 8005694:	4657      	mov	r7, sl
 8005696:	464e      	mov	r6, r9
 8005698:	4645      	mov	r5, r8
 800569a:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800569c:	2704      	movs	r7, #4
{
 800569e:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80056a0:	f001 ffd8 	bl	8007654 <HAL_Init>
  SystemClock_Config();
 80056a4:	f7ff ffc2 	bl	800562c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a8:	2214      	movs	r2, #20
 80056aa:	2100      	movs	r1, #0
 80056ac:	a807      	add	r0, sp, #28
 80056ae:	f008 ffc1 	bl	800e634 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056b2:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056b4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056b6:	4dd4      	ldr	r5, [pc, #848]	; (8005a08 <main+0x378>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056b8:	4690      	mov	r8, r2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80056bc:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056be:	433b      	orrs	r3, r7
 80056c0:	636b      	str	r3, [r5, #52]	; 0x34
 80056c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80056c4:	4cd1      	ldr	r4, [pc, #836]	; (8005a0c <main+0x37c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c6:	403b      	ands	r3, r7
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80056ce:	0021      	movs	r1, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056d0:	4313      	orrs	r3, r2
 80056d2:	636b      	str	r3, [r5, #52]	; 0x34
 80056d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80056d6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056d8:	4013      	ands	r3, r2
 80056da:	9303      	str	r3, [sp, #12]
 80056dc:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80056e0:	4333      	orrs	r3, r6
 80056e2:	636b      	str	r3, [r5, #52]	; 0x34
 80056e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80056e6:	4033      	ands	r3, r6
 80056e8:	9304      	str	r3, [sp, #16]
 80056ea:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ec:	2302      	movs	r3, #2
 80056ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80056f0:	431a      	orrs	r2, r3
 80056f2:	636a      	str	r2, [r5, #52]	; 0x34
 80056f4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80056f6:	4013      	ands	r3, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056f8:	2208      	movs	r2, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056fa:	9305      	str	r3, [sp, #20]
 80056fc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005700:	4691      	mov	r9, r2
 8005702:	4313      	orrs	r3, r2
 8005704:	636b      	str	r3, [r5, #52]	; 0x34
 8005706:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005708:	4013      	ands	r3, r2
 800570a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 800570c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800570e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005710:	f002 fe8e 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8005714:	2200      	movs	r2, #0
 8005716:	21c0      	movs	r1, #192	; 0xc0
 8005718:	48bd      	ldr	r0, [pc, #756]	; (8005a10 <main+0x380>)
 800571a:	f002 fe89 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 800571e:	2200      	movs	r2, #0
 8005720:	2107      	movs	r1, #7
 8005722:	48bc      	ldr	r0, [pc, #752]	; (8005a14 <main+0x384>)
 8005724:	f002 fe84 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8005728:	238e      	movs	r3, #142	; 0x8e
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	2200      	movs	r2, #0
 800572e:	0019      	movs	r1, r3
 8005730:	48b9      	ldr	r0, [pc, #740]	; (8005a18 <main+0x388>)
 8005732:	469b      	mov	fp, r3
 8005734:	f002 fe7c 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005738:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 800573a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573c:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573e:	a907      	add	r1, sp, #28
 8005740:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005742:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005744:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005746:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005748:	f002 fd66 	bl	8008218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 800574c:	23f2      	movs	r3, #242	; 0xf2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800574e:	48b2      	ldr	r0, [pc, #712]	; (8005a18 <main+0x388>)
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8005750:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005752:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8005754:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005756:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005758:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800575a:	f002 fd5d 	bl	8008218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 800575e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005760:	48ad      	ldr	r0, [pc, #692]	; (8005a18 <main+0x388>)
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8005762:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005764:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8005766:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005768:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 800576a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800576c:	f002 fd54 	bl	8008218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8005770:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005772:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8005774:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005776:	a907      	add	r1, sp, #28
 8005778:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 800577a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800577c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 800577e:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005780:	f002 fd4a 	bl	8008218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8005784:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005786:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8005788:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800578a:	a907      	add	r1, sp, #28
 800578c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 800578e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005790:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005792:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005794:	f002 fd40 	bl	8008218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8005798:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800579a:	489d      	ldr	r0, [pc, #628]	; (8005a10 <main+0x380>)
 800579c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 800579e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057a0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057a4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a6:	f002 fd37 	bl	8008218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 80057aa:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057ac:	4899      	ldr	r0, [pc, #612]	; (8005a14 <main+0x384>)
 80057ae:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 80057b0:	469a      	mov	sl, r3
 80057b2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057b4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057b8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057ba:	f002 fd2d 	bl	8008218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 80057be:	465b      	mov	r3, fp
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c0:	4895      	ldr	r0, [pc, #596]	; (8005a18 <main+0x388>)
 80057c2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 80057c4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057c6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ca:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057cc:	f002 fd24 	bl	8008218 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80057d2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057d4:	4333      	orrs	r3, r6
 80057d6:	63ab      	str	r3, [r5, #56]	; 0x38
 80057d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80057da:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057dc:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80057de:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80057e4:	f002 faf0 	bl	8007dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80057e8:	2009      	movs	r0, #9
 80057ea:	f002 fb1f 	bl	8007e2c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80057ee:	2200      	movs	r2, #0
 80057f0:	2103      	movs	r1, #3
 80057f2:	200a      	movs	r0, #10
 80057f4:	f002 fae8 	bl	8007dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80057f8:	200a      	movs	r0, #10
 80057fa:	f002 fb17 	bl	8007e2c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 80057fe:	2200      	movs	r2, #0
 8005800:	2103      	movs	r1, #3
 8005802:	200b      	movs	r0, #11
 8005804:	f002 fae0 	bl	8007dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8005808:	200b      	movs	r0, #11
 800580a:	f002 fb0f 	bl	8007e2c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 800580e:	220c      	movs	r2, #12
 8005810:	2100      	movs	r1, #0
 8005812:	a807      	add	r0, sp, #28
 8005814:	f008 ff0e 	bl	800e634 <memset>
  hadc1.Instance = ADC1;
 8005818:	4d80      	ldr	r5, [pc, #512]	; (8005a1c <main+0x38c>)
 800581a:	4b81      	ldr	r3, [pc, #516]	; (8005a20 <main+0x390>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800581c:	4642      	mov	r2, r8
  hadc1.Instance = ADC1;
 800581e:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	05db      	lsls	r3, r3, #23
 8005824:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005826:	2380      	movs	r3, #128	; 0x80
 8005828:	039b      	lsls	r3, r3, #14
 800582a:	612b      	str	r3, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800582c:	2300      	movs	r3, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800582e:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005830:	320c      	adds	r2, #12
 8005832:	54ab      	strb	r3, [r5, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005834:	0028      	movs	r0, r5
  hadc1.Init.OversamplingMode = DISABLE;
 8005836:	3210      	adds	r2, #16
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005838:	832c      	strh	r4, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800583a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800583c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800583e:	616f      	str	r7, [r5, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005840:	76ab      	strb	r3, [r5, #26]
  hadc1.Init.NbrOfConversion = 4;
 8005842:	61ef      	str	r7, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005844:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005846:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005848:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800584a:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800584c:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800584e:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8005850:	64ec      	str	r4, [r5, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005852:	f001 ff43 	bl	80076dc <HAL_ADC_Init>
 8005856:	2800      	cmp	r0, #0
 8005858:	d001      	beq.n	800585e <main+0x1ce>
 800585a:	b672      	cpsid	i
  while (1)
 800585c:	e7fe      	b.n	800585c <main+0x1cc>
  sConfig.Channel = ADC_CHANNEL_1;
 800585e:	4b71      	ldr	r3, [pc, #452]	; (8005a24 <main+0x394>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8005860:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005862:	a907      	add	r1, sp, #28
 8005864:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8005866:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005868:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800586a:	f002 f8b3 	bl	80079d4 <HAL_ADC_ConfigChannel>
 800586e:	2800      	cmp	r0, #0
 8005870:	d001      	beq.n	8005876 <main+0x1e6>
 8005872:	b672      	cpsid	i
  while (1)
 8005874:	e7fe      	b.n	8005874 <main+0x1e4>
  sConfig.Channel = ADC_CHANNEL_9;
 8005876:	4b6c      	ldr	r3, [pc, #432]	; (8005a28 <main+0x398>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005878:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 800587a:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800587c:	464b      	mov	r3, r9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800587e:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005880:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005882:	f002 f8a7 	bl	80079d4 <HAL_ADC_ConfigChannel>
 8005886:	2800      	cmp	r0, #0
 8005888:	d001      	beq.n	800588e <main+0x1fe>
 800588a:	b672      	cpsid	i
  while (1)
 800588c:	e7fe      	b.n	800588c <main+0x1fc>
  sConfig.Channel = ADC_CHANNEL_11;
 800588e:	4b67      	ldr	r3, [pc, #412]	; (8005a2c <main+0x39c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005890:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 8005892:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005894:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005896:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005898:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800589a:	f002 f89b 	bl	80079d4 <HAL_ADC_ConfigChannel>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d001      	beq.n	80058a6 <main+0x216>
 80058a2:	b672      	cpsid	i
  while (1)
 80058a4:	e7fe      	b.n	80058a4 <main+0x214>
  hi2c1.Instance = I2C1;
 80058a6:	4c62      	ldr	r4, [pc, #392]	; (8005a30 <main+0x3a0>)
 80058a8:	4b62      	ldr	r3, [pc, #392]	; (8005a34 <main+0x3a4>)
  hi2c1.Init.OwnAddress1 = 0;
 80058aa:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 80058ac:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80058ae:	4b62      	ldr	r3, [pc, #392]	; (8005a38 <main+0x3a8>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058b0:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80058b2:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80058b4:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058b6:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058b8:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80058ba:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000E14;
 80058bc:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058be:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80058c0:	f002 fea2 	bl	8008608 <HAL_I2C_Init>
 80058c4:	1e01      	subs	r1, r0, #0
 80058c6:	d001      	beq.n	80058cc <main+0x23c>
 80058c8:	b672      	cpsid	i
  while (1)
 80058ca:	e7fe      	b.n	80058ca <main+0x23a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80058cc:	0020      	movs	r0, r4
 80058ce:	f003 f971 	bl	8008bb4 <HAL_I2CEx_ConfigAnalogFilter>
 80058d2:	1e01      	subs	r1, r0, #0
 80058d4:	d001      	beq.n	80058da <main+0x24a>
 80058d6:	b672      	cpsid	i
  while (1)
 80058d8:	e7fe      	b.n	80058d8 <main+0x248>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80058da:	0020      	movs	r0, r4
 80058dc:	f003 f990 	bl	8008c00 <HAL_I2CEx_ConfigDigitalFilter>
 80058e0:	1e02      	subs	r2, r0, #0
 80058e2:	d001      	beq.n	80058e8 <main+0x258>
 80058e4:	b672      	cpsid	i
  while (1)
 80058e6:	e7fe      	b.n	80058e6 <main+0x256>
  hspi1.Instance = SPI1;
 80058e8:	4b54      	ldr	r3, [pc, #336]	; (8005a3c <main+0x3ac>)
 80058ea:	4955      	ldr	r1, [pc, #340]	; (8005a40 <main+0x3b0>)
 80058ec:	0018      	movs	r0, r3
 80058ee:	6019      	str	r1, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80058f0:	2382      	movs	r3, #130	; 0x82
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80058f6:	23e0      	movs	r3, #224	; 0xe0
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005902:	464b      	mov	r3, r9
 8005904:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8005906:	4653      	mov	r3, sl
 8005908:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800590a:	464b      	mov	r3, r9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800590c:	6082      	str	r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800590e:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005910:	6142      	str	r2, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005912:	6202      	str	r2, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005914:	6242      	str	r2, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005916:	6282      	str	r2, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005918:	6302      	str	r2, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800591a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800591c:	f003 ff46 	bl	80097ac <HAL_SPI_Init>
 8005920:	1e05      	subs	r5, r0, #0
 8005922:	d001      	beq.n	8005928 <main+0x298>
 8005924:	b672      	cpsid	i
  while (1)
 8005926:	e7fe      	b.n	8005926 <main+0x296>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005928:	0001      	movs	r1, r0
 800592a:	220c      	movs	r2, #12
 800592c:	a807      	add	r0, sp, #28
 800592e:	f008 fe81 	bl	800e634 <memset>
  htim6.Instance = TIM6;
 8005932:	4c44      	ldr	r4, [pc, #272]	; (8005a44 <main+0x3b4>)
 8005934:	4b44      	ldr	r3, [pc, #272]	; (8005a48 <main+0x3b8>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005936:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 8005938:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 8000-1;
 800593a:	4b44      	ldr	r3, [pc, #272]	; (8005a4c <main+0x3bc>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800593c:	60a5      	str	r5, [r4, #8]
  htim6.Init.Prescaler = 8000-1;
 800593e:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 500-1;
 8005940:	23f4      	movs	r3, #244	; 0xf4
 8005942:	33ff      	adds	r3, #255	; 0xff
 8005944:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005946:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005948:	f004 faf8 	bl	8009f3c <HAL_TIM_Base_Init>
 800594c:	2800      	cmp	r0, #0
 800594e:	d001      	beq.n	8005954 <main+0x2c4>
 8005950:	b672      	cpsid	i
  while (1)
 8005952:	e7fe      	b.n	8005952 <main+0x2c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005954:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005956:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005958:	a907      	add	r1, sp, #28
 800595a:	0020      	movs	r0, r4
 800595c:	f004 fb1e 	bl	8009f9c <HAL_TIMEx_MasterConfigSynchronization>
 8005960:	2800      	cmp	r0, #0
 8005962:	d001      	beq.n	8005968 <main+0x2d8>
 8005964:	b672      	cpsid	i
  while (1)
 8005966:	e7fe      	b.n	8005966 <main+0x2d6>
  huart1.Instance = USART1;
 8005968:	4c39      	ldr	r4, [pc, #228]	; (8005a50 <main+0x3c0>)
 800596a:	4b3a      	ldr	r3, [pc, #232]	; (8005a54 <main+0x3c4>)
  huart1.Init.BaudRate = 9600;
 800596c:	2696      	movs	r6, #150	; 0x96
  huart1.Instance = USART1;
 800596e:	6023      	str	r3, [r4, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005970:	250c      	movs	r5, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005972:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005974:	0020      	movs	r0, r4
  huart1.Init.BaudRate = 9600;
 8005976:	01b6      	lsls	r6, r6, #6
 8005978:	6066      	str	r6, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800597a:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800597c:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800597e:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005980:	6165      	str	r5, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005982:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005984:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005986:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005988:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800598a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800598c:	f005 f8c0 	bl	800ab10 <HAL_UART_Init>
 8005990:	1e01      	subs	r1, r0, #0
 8005992:	d001      	beq.n	8005998 <main+0x308>
 8005994:	b672      	cpsid	i
  while (1)
 8005996:	e7fe      	b.n	8005996 <main+0x306>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005998:	0020      	movs	r0, r4
 800599a:	f005 f9b3 	bl	800ad04 <HAL_UARTEx_SetTxFifoThreshold>
 800599e:	1e01      	subs	r1, r0, #0
 80059a0:	d001      	beq.n	80059a6 <main+0x316>
 80059a2:	b672      	cpsid	i
  while (1)
 80059a4:	e7fe      	b.n	80059a4 <main+0x314>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059a6:	0020      	movs	r0, r4
 80059a8:	f005 f9d6 	bl	800ad58 <HAL_UARTEx_SetRxFifoThreshold>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d001      	beq.n	80059b4 <main+0x324>
 80059b0:	b672      	cpsid	i
  while (1)
 80059b2:	e7fe      	b.n	80059b2 <main+0x322>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80059b4:	0020      	movs	r0, r4
 80059b6:	f005 f989 	bl	800accc <HAL_UARTEx_DisableFifoMode>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d001      	beq.n	80059c2 <main+0x332>
 80059be:	b672      	cpsid	i
  while (1)
 80059c0:	e7fe      	b.n	80059c0 <main+0x330>
  huart2.Instance = USART2;
 80059c2:	4c25      	ldr	r4, [pc, #148]	; (8005a58 <main+0x3c8>)
 80059c4:	4b25      	ldr	r3, [pc, #148]	; (8005a5c <main+0x3cc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059c6:	60a0      	str	r0, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80059c8:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80059ca:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059cc:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80059ce:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059d0:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80059d2:	6260      	str	r0, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059d4:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80059d6:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 80059d8:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 80059da:	6066      	str	r6, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80059dc:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80059de:	f005 f897 	bl	800ab10 <HAL_UART_Init>
 80059e2:	1e01      	subs	r1, r0, #0
 80059e4:	d001      	beq.n	80059ea <main+0x35a>
 80059e6:	b672      	cpsid	i
  while (1)
 80059e8:	e7fe      	b.n	80059e8 <main+0x358>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059ea:	0020      	movs	r0, r4
 80059ec:	f005 f98a 	bl	800ad04 <HAL_UARTEx_SetTxFifoThreshold>
 80059f0:	1e01      	subs	r1, r0, #0
 80059f2:	d001      	beq.n	80059f8 <main+0x368>
 80059f4:	b672      	cpsid	i
  while (1)
 80059f6:	e7fe      	b.n	80059f6 <main+0x366>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059f8:	0020      	movs	r0, r4
 80059fa:	f005 f9ad 	bl	800ad58 <HAL_UARTEx_SetRxFifoThreshold>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d02e      	beq.n	8005a60 <main+0x3d0>
 8005a02:	b672      	cpsid	i
  while (1)
 8005a04:	e7fe      	b.n	8005a04 <main+0x374>
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	00008010 	.word	0x00008010
 8005a10:	50000800 	.word	0x50000800
 8005a14:	50000c00 	.word	0x50000c00
 8005a18:	50000400 	.word	0x50000400
 8005a1c:	200045e8 	.word	0x200045e8
 8005a20:	40012400 	.word	0x40012400
 8005a24:	04000002 	.word	0x04000002
 8005a28:	24000200 	.word	0x24000200
 8005a2c:	2c000800 	.word	0x2c000800
 8005a30:	200047bc 	.word	0x200047bc
 8005a34:	40005400 	.word	0x40005400
 8005a38:	00000e14 	.word	0x00000e14
 8005a3c:	20004810 	.word	0x20004810
 8005a40:	40013000 	.word	0x40013000
 8005a44:	20004874 	.word	0x20004874
 8005a48:	40001000 	.word	0x40001000
 8005a4c:	00001f3f 	.word	0x00001f3f
 8005a50:	200048c0 	.word	0x200048c0
 8005a54:	40013800 	.word	0x40013800
 8005a58:	20004954 	.word	0x20004954
 8005a5c:	40004400 	.word	0x40004400
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005a60:	0020      	movs	r0, r4
 8005a62:	f005 f933 	bl	800accc <HAL_UARTEx_DisableFifoMode>
 8005a66:	1e02      	subs	r2, r0, #0
 8005a68:	d001      	beq.n	8005a6e <main+0x3de>
 8005a6a:	b672      	cpsid	i
  while (1)
 8005a6c:	e7fe      	b.n	8005a6c <main+0x3dc>
  huart3.Instance = USART3;
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <main+0x448>)
 8005a70:	491a      	ldr	r1, [pc, #104]	; (8005adc <main+0x44c>)
 8005a72:	0018      	movs	r0, r3
 8005a74:	6019      	str	r1, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005a76:	605e      	str	r6, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a78:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a7a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a7c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a7e:	615d      	str	r5, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a80:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a82:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a84:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a8a:	f005 f841 	bl	800ab10 <HAL_UART_Init>
 8005a8e:	1e04      	subs	r4, r0, #0
 8005a90:	d001      	beq.n	8005a96 <main+0x406>
 8005a92:	b672      	cpsid	i
  while (1)
 8005a94:	e7fe      	b.n	8005a94 <main+0x404>
  osKernelInitialize();
 8005a96:	f005 f997 	bl	800adc8 <osKernelInitialize>
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <main+0x450>)
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f005 fa26 	bl	800aef0 <osMessageQueueNew>
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <main+0x454>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005aa6:	0021      	movs	r1, r4
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005aa8:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005aaa:	4a0f      	ldr	r2, [pc, #60]	; (8005ae8 <main+0x458>)
 8005aac:	480f      	ldr	r0, [pc, #60]	; (8005aec <main+0x45c>)
 8005aae:	f005 f9bd 	bl	800ae2c <osThreadNew>
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <main+0x460>)
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005ab4:	0021      	movs	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005ab6:	6018      	str	r0, [r3, #0]
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005ab8:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <main+0x464>)
 8005aba:	480f      	ldr	r0, [pc, #60]	; (8005af8 <main+0x468>)
 8005abc:	f005 f9b6 	bl	800ae2c <osThreadNew>
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <main+0x46c>)
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005ac2:	0021      	movs	r1, r4
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005ac4:	6018      	str	r0, [r3, #0]
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005ac6:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <main+0x470>)
 8005ac8:	480e      	ldr	r0, [pc, #56]	; (8005b04 <main+0x474>)
 8005aca:	f005 f9af 	bl	800ae2c <osThreadNew>
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <main+0x478>)
 8005ad0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8005ad2:	f005 f98d 	bl	800adf0 <osKernelStart>
  while (1)
 8005ad6:	e7fe      	b.n	8005ad6 <main+0x446>
 8005ad8:	200049e8 	.word	0x200049e8
 8005adc:	40004800 	.word	0x40004800
 8005ae0:	0801347c 	.word	0x0801347c
 8005ae4:	20004ad8 	.word	0x20004ad8
 8005ae8:	08013458 	.word	0x08013458
 8005aec:	08006da5 	.word	0x08006da5
 8005af0:	20004154 	.word	0x20004154
 8005af4:	0801340c 	.word	0x0801340c
 8005af8:	080032c9 	.word	0x080032c9
 8005afc:	20000548 	.word	0x20000548
 8005b00:	08013434 	.word	0x08013434
 8005b04:	08003459 	.word	0x08003459
 8005b08:	20003f88 	.word	0x20003f88

08005b0c <stor>:
float stor(const char* str) {
 8005b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0e:	46c6      	mov	lr, r8
 8005b10:	b500      	push	{lr}
    float sign = *str == '-' ? str++, -1 : 1;
 8005b12:	7803      	ldrb	r3, [r0, #0]
float stor(const char* str) {
 8005b14:	0005      	movs	r5, r0
 8005b16:	b082      	sub	sp, #8
    float sign = *str == '-' ? str++, -1 : 1;
 8005b18:	2b2d      	cmp	r3, #45	; 0x2d
 8005b1a:	d100      	bne.n	8005b1e <stor+0x12>
 8005b1c:	e080      	b.n	8005c20 <stor+0x114>
 8005b1e:	22fe      	movs	r2, #254	; 0xfe
 8005b20:	0592      	lsls	r2, r2, #22
 8005b22:	4690      	mov	r8, r2
    while (*str >= '0' && *str <= '9') {
 8005b24:	001e      	movs	r6, r3
 8005b26:	3e30      	subs	r6, #48	; 0x30
 8005b28:	b2f2      	uxtb	r2, r6
    float result = 0;
 8005b2a:	2400      	movs	r4, #0
    while (*str >= '0' && *str <= '9') {
 8005b2c:	2a09      	cmp	r2, #9
 8005b2e:	d812      	bhi.n	8005b56 <stor+0x4a>
        result *= 10;
 8005b30:	4943      	ldr	r1, [pc, #268]	; (8005c40 <stor+0x134>)
 8005b32:	1c20      	adds	r0, r4, #0
 8005b34:	f7fb f8cc 	bl	8000cd0 <__aeabi_fmul>
 8005b38:	1c04      	adds	r4, r0, #0
        result += *str - '0';
 8005b3a:	0030      	movs	r0, r6
 8005b3c:	f7fb fbd6 	bl	80012ec <__aeabi_i2f>
        str++;
 8005b40:	3501      	adds	r5, #1
        result += *str - '0';
 8005b42:	1c21      	adds	r1, r4, #0
 8005b44:	f7fa fd5a 	bl	80005fc <__aeabi_fadd>
    while (*str >= '0' && *str <= '9') {
 8005b48:	782b      	ldrb	r3, [r5, #0]
        result += *str - '0';
 8005b4a:	1c04      	adds	r4, r0, #0
    while (*str >= '0' && *str <= '9') {
 8005b4c:	001e      	movs	r6, r3
 8005b4e:	3e30      	subs	r6, #48	; 0x30
 8005b50:	b2f2      	uxtb	r2, r6
 8005b52:	2a09      	cmp	r2, #9
 8005b54:	d9ec      	bls.n	8005b30 <stor+0x24>
    if (*str == ',' || *str == '.') {
 8005b56:	2202      	movs	r2, #2
 8005b58:	4393      	bics	r3, r2
 8005b5a:	2b2c      	cmp	r3, #44	; 0x2c
 8005b5c:	d00f      	beq.n	8005b7e <stor+0x72>
    if (*str == 'e' || *str == 'E') {
 8005b5e:	002e      	movs	r6, r5
 8005b60:	782f      	ldrb	r7, [r5, #0]
    result *= sign;
 8005b62:	4641      	mov	r1, r8
 8005b64:	1c20      	adds	r0, r4, #0
 8005b66:	f7fb f8b3 	bl	8000cd0 <__aeabi_fmul>
    if (*str == 'e' || *str == 'E') {
 8005b6a:	2320      	movs	r3, #32
    result *= sign;
 8005b6c:	4680      	mov	r8, r0
    if (*str == 'e' || *str == 'E') {
 8005b6e:	439f      	bics	r7, r3
 8005b70:	2f45      	cmp	r7, #69	; 0x45
 8005b72:	d023      	beq.n	8005bbc <stor+0xb0>
}
 8005b74:	4640      	mov	r0, r8
 8005b76:	b002      	add	sp, #8
 8005b78:	bc80      	pop	{r7}
 8005b7a:	46b8      	mov	r8, r7
 8005b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while (*str >= '0' && *str <= '9') {
 8005b7e:	786f      	ldrb	r7, [r5, #1]
        str++;
 8005b80:	1c6e      	adds	r6, r5, #1
        while (*str >= '0' && *str <= '9') {
 8005b82:	0038      	movs	r0, r7
 8005b84:	3830      	subs	r0, #48	; 0x30
 8005b86:	b2c3      	uxtb	r3, r0
 8005b88:	2b09      	cmp	r3, #9
 8005b8a:	d8ea      	bhi.n	8005b62 <stor+0x56>
        float multiplier = 0.1;
 8005b8c:	4d2d      	ldr	r5, [pc, #180]	; (8005c44 <stor+0x138>)
            result += (*str - '0') * multiplier;
 8005b8e:	f7fb fbad 	bl	80012ec <__aeabi_i2f>
 8005b92:	1c29      	adds	r1, r5, #0
 8005b94:	f7fb f89c 	bl	8000cd0 <__aeabi_fmul>
 8005b98:	1c01      	adds	r1, r0, #0
 8005b9a:	1c20      	adds	r0, r4, #0
 8005b9c:	f7fa fd2e 	bl	80005fc <__aeabi_fadd>
            multiplier /= 10;
 8005ba0:	4927      	ldr	r1, [pc, #156]	; (8005c40 <stor+0x134>)
            result += (*str - '0') * multiplier;
 8005ba2:	1c04      	adds	r4, r0, #0
            multiplier /= 10;
 8005ba4:	1c28      	adds	r0, r5, #0
 8005ba6:	f7fa fec9 	bl	800093c <__aeabi_fdiv>
        while (*str >= '0' && *str <= '9') {
 8005baa:	7877      	ldrb	r7, [r6, #1]
            multiplier /= 10;
 8005bac:	1c05      	adds	r5, r0, #0
        while (*str >= '0' && *str <= '9') {
 8005bae:	0038      	movs	r0, r7
 8005bb0:	3830      	subs	r0, #48	; 0x30
 8005bb2:	b2c3      	uxtb	r3, r0
            str++;
 8005bb4:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 8005bb6:	2b09      	cmp	r3, #9
 8005bb8:	d9e9      	bls.n	8005b8e <stor+0x82>
 8005bba:	e7d2      	b.n	8005b62 <stor+0x56>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8005bbc:	7874      	ldrb	r4, [r6, #1]
 8005bbe:	2c2d      	cmp	r4, #45	; 0x2d
 8005bc0:	d033      	beq.n	8005c2a <stor+0x11e>
        str++;
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <stor+0x13c>)
 8005bc6:	1c75      	adds	r5, r6, #1
 8005bc8:	9200      	str	r2, [sp, #0]
 8005bca:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8005bcc:	3c30      	subs	r4, #48	; 0x30
 8005bce:	b2e3      	uxtb	r3, r4
 8005bd0:	2b09      	cmp	r3, #9
 8005bd2:	d832      	bhi.n	8005c3a <stor+0x12e>
        float power = 0;
 8005bd4:	2000      	movs	r0, #0
            power *= 10;
 8005bd6:	491a      	ldr	r1, [pc, #104]	; (8005c40 <stor+0x134>)
 8005bd8:	f7fb f87a 	bl	8000cd0 <__aeabi_fmul>
 8005bdc:	1c06      	adds	r6, r0, #0
            power += *str - '0';
 8005bde:	0020      	movs	r0, r4
 8005be0:	f7fb fb84 	bl	80012ec <__aeabi_i2f>
            str++;
 8005be4:	3501      	adds	r5, #1
            power += *str - '0';
 8005be6:	1c31      	adds	r1, r6, #0
 8005be8:	f7fa fd08 	bl	80005fc <__aeabi_fadd>
        while (*str >= '0' && *str <= '9') {
 8005bec:	782c      	ldrb	r4, [r5, #0]
 8005bee:	3c30      	subs	r4, #48	; 0x30
 8005bf0:	b2e3      	uxtb	r3, r4
 8005bf2:	2b09      	cmp	r3, #9
 8005bf4:	d9ef      	bls.n	8005bd6 <stor+0xca>
        result *= pow(powerer, power);
 8005bf6:	f7fd fa5b 	bl	80030b0 <__aeabi_f2d>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	000b      	movs	r3, r1
 8005bfe:	9800      	ldr	r0, [sp, #0]
 8005c00:	9901      	ldr	r1, [sp, #4]
 8005c02:	f00b fb9d 	bl	8011340 <pow>
 8005c06:	0004      	movs	r4, r0
 8005c08:	000d      	movs	r5, r1
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	f7fd fa50 	bl	80030b0 <__aeabi_f2d>
 8005c10:	0022      	movs	r2, r4
 8005c12:	002b      	movs	r3, r5
 8005c14:	f7fc fb5e 	bl	80022d4 <__aeabi_dmul>
 8005c18:	f7fd fa92 	bl	8003140 <__aeabi_d2f>
 8005c1c:	4680      	mov	r8, r0
    return result;
 8005c1e:	e7a9      	b.n	8005b74 <stor+0x68>
    float sign = *str == '-' ? str++, -1 : 1;
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <stor+0x140>)
    while (*str >= '0' && *str <= '9') {
 8005c22:	7843      	ldrb	r3, [r0, #1]
    float sign = *str == '-' ? str++, -1 : 1;
 8005c24:	4690      	mov	r8, r2
 8005c26:	3501      	adds	r5, #1
 8005c28:	e77c      	b.n	8005b24 <stor+0x18>
 8005c2a:	22a0      	movs	r2, #160	; 0xa0
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <stor+0x144>)
 8005c2e:	0612      	lsls	r2, r2, #24
 8005c30:	9200      	str	r2, [sp, #0]
 8005c32:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8005c34:	78b4      	ldrb	r4, [r6, #2]
        float powerer = *str == '-'? str++, 0.1 : 10;
 8005c36:	1cb5      	adds	r5, r6, #2
 8005c38:	e7c8      	b.n	8005bcc <stor+0xc0>
        while (*str >= '0' && *str <= '9') {
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e7de      	b.n	8005bfe <stor+0xf2>
 8005c40:	41200000 	.word	0x41200000
 8005c44:	3dcccccd 	.word	0x3dcccccd
 8005c48:	40240000 	.word	0x40240000
 8005c4c:	bf800000 	.word	0xbf800000
 8005c50:	3fb99999 	.word	0x3fb99999

08005c54 <getGNRMC>:
void getGNRMC(const char * ptra){
 8005c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c56:	46d6      	mov	lr, sl
 8005c58:	4646      	mov	r6, r8
 8005c5a:	464f      	mov	r7, r9
 8005c5c:	b5c0      	push	{r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8005c5e:	4e56      	ldr	r6, [pc, #344]	; (8005db8 <getGNRMC+0x164>)
 8005c60:	0031      	movs	r1, r6
 8005c62:	f008 fd2f 	bl	800e6c4 <strtok>
 8005c66:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005c68:	d026      	beq.n	8005cb8 <getGNRMC+0x64>
  	        strcpy(GPSInfo.latD,token);
 8005c6a:	2328      	movs	r3, #40	; 0x28
 8005c6c:	4698      	mov	r8, r3
 8005c6e:	4f53      	ldr	r7, [pc, #332]	; (8005dbc <getGNRMC+0x168>)
	int i=0;
 8005c70:	2500      	movs	r5, #0
  	        strcpy(GPSInfo.latD,token);
 8005c72:	44b8      	add	r8, r7
 8005c74:	e00e      	b.n	8005c94 <getGNRMC+0x40>
  	    if(i==3){ //Getting Latitude
 8005c76:	2d03      	cmp	r5, #3
 8005c78:	d061      	beq.n	8005d3e <getGNRMC+0xea>
  	    if(i==4){ //Getting Latitude ind
 8005c7a:	2d04      	cmp	r5, #4
 8005c7c:	d128      	bne.n	8005cd0 <getGNRMC+0x7c>
  	        strcpy(GPSInfo.latD,token);
 8005c7e:	0021      	movs	r1, r4
 8005c80:	4640      	mov	r0, r8
 8005c82:	f008 fe96 	bl	800e9b2 <strcpy>
  	    token = strtok(NULL,",");
 8005c86:	0031      	movs	r1, r6
 8005c88:	2000      	movs	r0, #0
 8005c8a:	f008 fd1b 	bl	800e6c4 <strtok>
        i++;
 8005c8e:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8005c90:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005c92:	d011      	beq.n	8005cb8 <getGNRMC+0x64>
  	    if(i==1){ //Getting time
 8005c94:	2d01      	cmp	r5, #1
 8005c96:	d014      	beq.n	8005cc2 <getGNRMC+0x6e>
  	    if(i==10){ //Getting GPS status
 8005c98:	2d0a      	cmp	r5, #10
 8005c9a:	d1ec      	bne.n	8005c76 <getGNRMC+0x22>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8005c9c:	214e      	movs	r1, #78	; 0x4e
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f008 fcdd 	bl	800e65e <strchr>
 8005ca4:	4243      	negs	r3, r0
 8005ca6:	4158      	adcs	r0, r3
  	    token = strtok(NULL,",");
 8005ca8:	0031      	movs	r1, r6
 8005caa:	61f8      	str	r0, [r7, #28]
 8005cac:	2000      	movs	r0, #0
 8005cae:	f008 fd09 	bl	800e6c4 <strtok>
        i++;
 8005cb2:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8005cb4:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005cb6:	d1ed      	bne.n	8005c94 <getGNRMC+0x40>
}
 8005cb8:	bce0      	pop	{r5, r6, r7}
 8005cba:	46ba      	mov	sl, r7
 8005cbc:	46b1      	mov	r9, r6
 8005cbe:	46a8      	mov	r8, r5
 8005cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	    	strncpy(GPSInfo.time,token,6);
 8005cc2:	483e      	ldr	r0, [pc, #248]	; (8005dbc <getGNRMC+0x168>)
 8005cc4:	2206      	movs	r2, #6
 8005cc6:	0021      	movs	r1, r4
 8005cc8:	302e      	adds	r0, #46	; 0x2e
 8005cca:	f008 fce7 	bl	800e69c <strncpy>
  	    if(i==5){ //Getting Longitude
 8005cce:	e7da      	b.n	8005c86 <getGNRMC+0x32>
 8005cd0:	2d05      	cmp	r5, #5
 8005cd2:	d120      	bne.n	8005d16 <getGNRMC+0xc2>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005cd4:	0020      	movs	r0, r4
 8005cd6:	f7ff ff19 	bl	8005b0c <stor>
    int dd1= ddmmmm/100;
 8005cda:	4939      	ldr	r1, [pc, #228]	; (8005dc0 <getGNRMC+0x16c>)
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005cdc:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8005cde:	f7fa fe2d 	bl	800093c <__aeabi_fdiv>
 8005ce2:	f7fb fae3 	bl	80012ac <__aeabi_f2iz>
 8005ce6:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 8005ce8:	2064      	movs	r0, #100	; 0x64
 8005cea:	4360      	muls	r0, r4
 8005cec:	f7fb fafe 	bl	80012ec <__aeabi_i2f>
 8005cf0:	1c01      	adds	r1, r0, #0
 8005cf2:	4648      	mov	r0, r9
 8005cf4:	f7fb f93a 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 8005cf8:	4932      	ldr	r1, [pc, #200]	; (8005dc4 <getGNRMC+0x170>)
 8005cfa:	f7fa fe1f 	bl	800093c <__aeabi_fdiv>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005cfe:	4b2f      	ldr	r3, [pc, #188]	; (8005dbc <getGNRMC+0x168>)
    mm=mm/60;
 8005d00:	4681      	mov	r9, r0
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005d02:	469a      	mov	sl, r3
    mm=(float)dd1+mm;
 8005d04:	0020      	movs	r0, r4
 8005d06:	f7fb faf1 	bl	80012ec <__aeabi_i2f>
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	f7fa fc76 	bl	80005fc <__aeabi_fadd>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005d10:	4653      	mov	r3, sl
 8005d12:	6058      	str	r0, [r3, #4]
  	    if(i==8){ //Getting Course
 8005d14:	e7b7      	b.n	8005c86 <getGNRMC+0x32>
  	    if(i==6){ //Getting Longitude ind
 8005d16:	2d06      	cmp	r5, #6
 8005d18:	d105      	bne.n	8005d26 <getGNRMC+0xd2>
  	    	strcpy(GPSInfo.lonD,token);
 8005d1a:	4828      	ldr	r0, [pc, #160]	; (8005dbc <getGNRMC+0x168>)
 8005d1c:	0021      	movs	r1, r4
 8005d1e:	302b      	adds	r0, #43	; 0x2b
 8005d20:	f008 fe47 	bl	800e9b2 <strcpy>
  	    if(i==8){ //Getting Course
 8005d24:	e7af      	b.n	8005c86 <getGNRMC+0x32>
  	    if(i==9){ //Getting Date
 8005d26:	2d09      	cmp	r5, #9
 8005d28:	d02d      	beq.n	8005d86 <getGNRMC+0x132>
  	    if(i==7){ //Getting Speed
 8005d2a:	2d07      	cmp	r5, #7
 8005d2c:	d025      	beq.n	8005d7a <getGNRMC+0x126>
  	    if(i==8){ //Getting Course
 8005d2e:	2d08      	cmp	r5, #8
 8005d30:	d1a9      	bne.n	8005c86 <getGNRMC+0x32>
  	        GPSInfo.head=stor(token);
 8005d32:	0020      	movs	r0, r4
 8005d34:	f7ff feea 	bl	8005b0c <stor>
 8005d38:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <getGNRMC+0x168>)
 8005d3a:	6158      	str	r0, [r3, #20]
 8005d3c:	e7a3      	b.n	8005c86 <getGNRMC+0x32>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005d3e:	0020      	movs	r0, r4
 8005d40:	f7ff fee4 	bl	8005b0c <stor>
    int dd1= ddmmmm/100;
 8005d44:	491e      	ldr	r1, [pc, #120]	; (8005dc0 <getGNRMC+0x16c>)
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005d46:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8005d48:	f7fa fdf8 	bl	800093c <__aeabi_fdiv>
 8005d4c:	f7fb faae 	bl	80012ac <__aeabi_f2iz>
 8005d50:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 8005d52:	2064      	movs	r0, #100	; 0x64
 8005d54:	4360      	muls	r0, r4
 8005d56:	f7fb fac9 	bl	80012ec <__aeabi_i2f>
 8005d5a:	1c01      	adds	r1, r0, #0
 8005d5c:	4648      	mov	r0, r9
 8005d5e:	f7fb f905 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 8005d62:	4918      	ldr	r1, [pc, #96]	; (8005dc4 <getGNRMC+0x170>)
 8005d64:	f7fa fdea 	bl	800093c <__aeabi_fdiv>
 8005d68:	4681      	mov	r9, r0
    mm=(float)dd1+mm;
 8005d6a:	0020      	movs	r0, r4
 8005d6c:	f7fb fabe 	bl	80012ec <__aeabi_i2f>
 8005d70:	4649      	mov	r1, r9
 8005d72:	f7fa fc43 	bl	80005fc <__aeabi_fadd>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005d76:	6038      	str	r0, [r7, #0]
  	    if(i==6){ //Getting Longitude ind
 8005d78:	e785      	b.n	8005c86 <getGNRMC+0x32>
  	        GPSInfo.speed=stor(token);
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	f7ff fec6 	bl	8005b0c <stor>
 8005d80:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <getGNRMC+0x168>)
 8005d82:	6198      	str	r0, [r3, #24]
  	    if(i==8){ //Getting Course
 8005d84:	e77f      	b.n	8005c86 <getGNRMC+0x32>
  			memset(dd,0,10);
 8005d86:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <getGNRMC+0x174>)
 8005d88:	220a      	movs	r2, #10
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4699      	mov	r9, r3
 8005d90:	f008 fc50 	bl	800e634 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8005d94:	2300      	movs	r3, #0
 8005d96:	4649      	mov	r1, r9
 8005d98:	5ce2      	ldrb	r2, [r4, r3]
 8005d9a:	54ca      	strb	r2, [r1, r3]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d1f9      	bne.n	8005d96 <getGNRMC+0x142>
  	        dd[4]='2';
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <getGNRMC+0x178>)
  	        strcpy(GPSInfo.date,dd);
 8005da4:	4805      	ldr	r0, [pc, #20]	; (8005dbc <getGNRMC+0x168>)
  	        dd[4]='2';
 8005da6:	808b      	strh	r3, [r1, #4]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8005da8:	7923      	ldrb	r3, [r4, #4]
  	        strcpy(GPSInfo.date,dd);
 8005daa:	303d      	adds	r0, #61	; 0x3d
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8005dac:	718b      	strb	r3, [r1, #6]
 8005dae:	7963      	ldrb	r3, [r4, #5]
 8005db0:	71cb      	strb	r3, [r1, #7]
  	        strcpy(GPSInfo.date,dd);
 8005db2:	f008 fdfe 	bl	800e9b2 <strcpy>
  	    if(i==8){ //Getting Course
 8005db6:	e766      	b.n	8005c86 <getGNRMC+0x32>
 8005db8:	0801245c 	.word	0x0801245c
 8005dbc:	200004fc 	.word	0x200004fc
 8005dc0:	42c80000 	.word	0x42c80000
 8005dc4:	42700000 	.word	0x42700000
 8005dc8:	20004148 	.word	0x20004148
 8005dcc:	00003032 	.word	0x00003032

08005dd0 <getGNGSA>:
void getGNGSA(const  char * ptra){
 8005dd0:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8005dd2:	4d11      	ldr	r5, [pc, #68]	; (8005e18 <getGNGSA+0x48>)
 8005dd4:	0029      	movs	r1, r5
 8005dd6:	f008 fc75 	bl	800e6c4 <strtok>
    while( token != NULL ) {
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d017      	beq.n	8005e0e <getGNGSA+0x3e>
	int i=0;
 8005dde:	2400      	movs	r4, #0
    	    GPSInfo.hdop=stor(token);
 8005de0:	4e0e      	ldr	r6, [pc, #56]	; (8005e1c <getGNGSA+0x4c>)
 8005de2:	e006      	b.n	8005df2 <getGNGSA+0x22>
  	    token = strtok(NULL,",");
 8005de4:	0029      	movs	r1, r5
 8005de6:	2000      	movs	r0, #0
 8005de8:	f008 fc6c 	bl	800e6c4 <strtok>
        i++;
 8005dec:	3401      	adds	r4, #1
    while( token != NULL ) {
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d00d      	beq.n	8005e0e <getGNGSA+0x3e>
        if(i==15){ //Getting PDOP
 8005df2:	2c0f      	cmp	r4, #15
 8005df4:	d00c      	beq.n	8005e10 <getGNGSA+0x40>
    	if(i==16){ //Getting HDOP
 8005df6:	2c10      	cmp	r4, #16
 8005df8:	d1f4      	bne.n	8005de4 <getGNGSA+0x14>
    	    GPSInfo.hdop=stor(token);
 8005dfa:	f7ff fe87 	bl	8005b0c <stor>
  	    token = strtok(NULL,",");
 8005dfe:	0029      	movs	r1, r5
    	    GPSInfo.hdop=stor(token);
 8005e00:	60f0      	str	r0, [r6, #12]
  	    token = strtok(NULL,",");
 8005e02:	2000      	movs	r0, #0
 8005e04:	f008 fc5e 	bl	800e6c4 <strtok>
        i++;
 8005e08:	3401      	adds	r4, #1
    while( token != NULL ) {
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d1f1      	bne.n	8005df2 <getGNGSA+0x22>
}
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
    	    GPSInfo.pdop=stor(token);
 8005e10:	f7ff fe7c 	bl	8005b0c <stor>
 8005e14:	6130      	str	r0, [r6, #16]
    	if(i==16){ //Getting HDOP
 8005e16:	e7e5      	b.n	8005de4 <getGNGSA+0x14>
 8005e18:	0801245c 	.word	0x0801245c
 8005e1c:	200004fc 	.word	0x200004fc

08005e20 <getGNGGA>:
void getGNGGA(const  char * ptra){
 8005e20:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8005e22:	4d11      	ldr	r5, [pc, #68]	; (8005e68 <getGNGGA+0x48>)
 8005e24:	0029      	movs	r1, r5
 8005e26:	f008 fc4d 	bl	800e6c4 <strtok>
    while( token != NULL ) {
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d017      	beq.n	8005e5e <getGNGGA+0x3e>
	int i=0;
 8005e2e:	2400      	movs	r4, #0
            GPSInfo.alt = stor(token);
 8005e30:	4e0e      	ldr	r6, [pc, #56]	; (8005e6c <getGNGGA+0x4c>)
 8005e32:	e006      	b.n	8005e42 <getGNGGA+0x22>
  	    token = strtok(NULL,",");
 8005e34:	0029      	movs	r1, r5
 8005e36:	2000      	movs	r0, #0
 8005e38:	f008 fc44 	bl	800e6c4 <strtok>
        i++;
 8005e3c:	3401      	adds	r4, #1
    while( token != NULL ) {
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d00d      	beq.n	8005e5e <getGNGGA+0x3e>
    	if(i==7){ //Getting Satellites no
 8005e42:	2c07      	cmp	r4, #7
 8005e44:	d00c      	beq.n	8005e60 <getGNGGA+0x40>
    	if(i==9){ //Getting Saltitute
 8005e46:	2c09      	cmp	r4, #9
 8005e48:	d1f4      	bne.n	8005e34 <getGNGGA+0x14>
            GPSInfo.alt = stor(token);
 8005e4a:	f7ff fe5f 	bl	8005b0c <stor>
  	    token = strtok(NULL,",");
 8005e4e:	0029      	movs	r1, r5
            GPSInfo.alt = stor(token);
 8005e50:	60b0      	str	r0, [r6, #8]
  	    token = strtok(NULL,",");
 8005e52:	2000      	movs	r0, #0
 8005e54:	f008 fc36 	bl	800e6c4 <strtok>
        i++;
 8005e58:	3401      	adds	r4, #1
    while( token != NULL ) {
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d1f1      	bne.n	8005e42 <getGNGGA+0x22>
}
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
            GPSInfo.sat = atoi(token);
 8005e60:	f006 fc6c 	bl	800c73c <atoi>
 8005e64:	6230      	str	r0, [r6, #32]
    	if(i==9){ //Getting Saltitute
 8005e66:	e7e5      	b.n	8005e34 <getGNGGA+0x14>
 8005e68:	0801245c 	.word	0x0801245c
 8005e6c:	200004fc 	.word	0x200004fc

08005e70 <validateGPS>:
int validateGPS(const char * str){
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	0004      	movs	r4, r0
	int GPStyp=0;

	uint8_t checksum = 0;
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8005e74:	f7ff fb38 	bl	80054e8 <nmea_valid_checksum>
	        return 0;
 8005e78:	2500      	movs	r5, #0
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8005e7a:	2801      	cmp	r0, #1
 8005e7c:	d10e      	bne.n	8005e9c <validateGPS+0x2c>
	    }
	    if(strlen(str)<4){return 0;}
 8005e7e:	0020      	movs	r0, r4
 8005e80:	f7fa f942 	bl	8000108 <strlen>
 8005e84:	2803      	cmp	r0, #3
 8005e86:	d909      	bls.n	8005e9c <validateGPS+0x2c>

	    if (strstr(str, "GNRMC") != NULL) {
 8005e88:	0020      	movs	r0, r4
 8005e8a:	491d      	ldr	r1, [pc, #116]	; (8005f00 <validateGPS+0x90>)
 8005e8c:	f008 fc82 	bl	800e794 <strstr>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d005      	beq.n	8005ea0 <validateGPS+0x30>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8005e94:	0020      	movs	r0, r4
 8005e96:	f7ff fedd 	bl	8005c54 <getGNRMC>
 8005e9a:	3501      	adds	r5, #1
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
	    	GPStyp=6;
	    }
    return(GPStyp);
}
 8005e9c:	0028      	movs	r0, r5
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
	    else if (strstr(str, "GNGGA") != NULL) {
 8005ea0:	0020      	movs	r0, r4
 8005ea2:	4918      	ldr	r1, [pc, #96]	; (8005f04 <validateGPS+0x94>)
 8005ea4:	f008 fc76 	bl	800e794 <strstr>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d11e      	bne.n	8005eea <validateGPS+0x7a>
	    else if (strstr(str, "GNGSA") != NULL) {
 8005eac:	0020      	movs	r0, r4
 8005eae:	4916      	ldr	r1, [pc, #88]	; (8005f08 <validateGPS+0x98>)
 8005eb0:	f008 fc70 	bl	800e794 <strstr>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d11d      	bne.n	8005ef4 <validateGPS+0x84>
	    else if (strstr(str, "GNGSV") != NULL) {
 8005eb8:	0020      	movs	r0, r4
 8005eba:	4914      	ldr	r1, [pc, #80]	; (8005f0c <validateGPS+0x9c>)
 8005ebc:	f008 fc6a 	bl	800e794 <strstr>
	    	GPStyp=4;
 8005ec0:	2504      	movs	r5, #4
	    else if (strstr(str, "GNGSV") != NULL) {
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d1ea      	bne.n	8005e9c <validateGPS+0x2c>
	    else if (strstr(str, "GNGLL") != NULL) {
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	4911      	ldr	r1, [pc, #68]	; (8005f10 <validateGPS+0xa0>)
 8005eca:	f008 fc63 	bl	800e794 <strstr>
	    	GPStyp=5;
 8005ece:	3501      	adds	r5, #1
	    else if (strstr(str, "GNGLL") != NULL) {
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1e3      	bne.n	8005e9c <validateGPS+0x2c>
	    else if (strstr(str, "GNVTG") != NULL) {
 8005ed4:	0020      	movs	r0, r4
 8005ed6:	490f      	ldr	r1, [pc, #60]	; (8005f14 <validateGPS+0xa4>)
 8005ed8:	f008 fc5c 	bl	800e794 <strstr>
	    	GPStyp=6;
 8005edc:	4243      	negs	r3, r0
 8005ede:	4158      	adcs	r0, r3
 8005ee0:	4240      	negs	r0, r0
 8005ee2:	43a8      	bics	r0, r5
 8005ee4:	0005      	movs	r5, r0
 8005ee6:	3506      	adds	r5, #6
 8005ee8:	e7d8      	b.n	8005e9c <validateGPS+0x2c>
	    	GPStyp=2; getGNGGA(str);
 8005eea:	0020      	movs	r0, r4
 8005eec:	f7ff ff98 	bl	8005e20 <getGNGGA>
 8005ef0:	2502      	movs	r5, #2
 8005ef2:	e7d3      	b.n	8005e9c <validateGPS+0x2c>
	    	GPStyp=3;getGNGSA(str);
 8005ef4:	0020      	movs	r0, r4
 8005ef6:	f7ff ff6b 	bl	8005dd0 <getGNGSA>
 8005efa:	2503      	movs	r5, #3
 8005efc:	e7ce      	b.n	8005e9c <validateGPS+0x2c>
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	08013298 	.word	0x08013298
 8005f04:	080132a0 	.word	0x080132a0
 8005f08:	080132a8 	.word	0x080132a8
 8005f0c:	080132b0 	.word	0x080132b0
 8005f10:	080132b8 	.word	0x080132b8
 8005f14:	080132c0 	.word	0x080132c0

08005f18 <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8005f18:	b530      	push	{r4, r5, lr}
	    //Debug_Tx(gpsData);
		int valid=0 ;
		if(strlen((char*)gpsData)>5){
 8005f1a:	4d0e      	ldr	r5, [pc, #56]	; (8005f54 <ProcessGPS+0x3c>)
void ProcessGPS(){
 8005f1c:	b083      	sub	sp, #12
		if(strlen((char*)gpsData)>5){
 8005f1e:	0028      	movs	r0, r5
 8005f20:	f7fa f8f2 	bl	8000108 <strlen>
 8005f24:	2805      	cmp	r0, #5
 8005f26:	d801      	bhi.n	8005f2c <ProcessGPS+0x14>
				valid=valid+validateGPS(token);
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
			}
			//free(token);
		}
}
 8005f28:	b003      	add	sp, #12
 8005f2a:	bd30      	pop	{r4, r5, pc}
			char *tk= NULL;
 8005f2c:	2300      	movs	r3, #0
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8005f2e:	4c0a      	ldr	r4, [pc, #40]	; (8005f58 <ProcessGPS+0x40>)
 8005f30:	0028      	movs	r0, r5
 8005f32:	0021      	movs	r1, r4
 8005f34:	aa01      	add	r2, sp, #4
			char *tk= NULL;
 8005f36:	9301      	str	r3, [sp, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8005f38:	f008 fc27 	bl	800e78a <strtok_r>
			while( token != NULL ) {
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d0f3      	beq.n	8005f28 <ProcessGPS+0x10>
				valid=valid+validateGPS(token);
 8005f40:	f7ff ff96 	bl	8005e70 <validateGPS>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8005f44:	0021      	movs	r1, r4
 8005f46:	2000      	movs	r0, #0
 8005f48:	aa01      	add	r2, sp, #4
 8005f4a:	f008 fc1e 	bl	800e78a <strtok_r>
			while( token != NULL ) {
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d1f6      	bne.n	8005f40 <ProcessGPS+0x28>
 8005f52:	e7e9      	b.n	8005f28 <ProcessGPS+0x10>
 8005f54:	20004164 	.word	0x20004164
 8005f58:	0801230c 	.word	0x0801230c

08005f5c <HAL_UART_TxCpltCallback>:
}
 8005f5c:	4770      	bx	lr
 8005f5e:	46c0      	nop			; (mov r8, r8)

08005f60 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8005f60:	b570      	push	{r4, r5, r6, lr}
	if(huart==&huart2){
 8005f62:	4c19      	ldr	r4, [pc, #100]	; (8005fc8 <HAL_UART_ErrorCallback+0x68>)
 8005f64:	42a0      	cmp	r0, r4
 8005f66:	d013      	beq.n	8005f90 <HAL_UART_ErrorCallback+0x30>
	if(huart==&huart1){
 8005f68:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <HAL_UART_ErrorCallback+0x6c>)
 8005f6a:	4298      	cmp	r0, r3
 8005f6c:	d000      	beq.n	8005f70 <HAL_UART_ErrorCallback+0x10>
}
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
		if(DMAon==1){
 8005f70:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <HAL_UART_ErrorCallback+0x70>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d1fa      	bne.n	8005f6e <HAL_UART_ErrorCallback+0xe>
		GSMBuff[0]=0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4916      	ldr	r1, [pc, #88]	; (8005fd4 <HAL_UART_ErrorCallback+0x74>)
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005f7c:	6802      	ldr	r2, [r0, #0]
		GSMBuff[0]=0;
 8005f7e:	700b      	strb	r3, [r1, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005f80:	330c      	adds	r3, #12
 8005f82:	6213      	str	r3, [r2, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	6213      	str	r3, [r2, #32]
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f004 fe4b 	bl	800ac24 <HAL_UART_Receive_DMA>
}
 8005f8e:	e7ee      	b.n	8005f6e <HAL_UART_ErrorCallback+0xe>
		if(dnlfile==0){
 8005f90:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <HAL_UART_ErrorCallback+0x78>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1ea      	bne.n	8005f6e <HAL_UART_ErrorCallback+0xe>
		if(DMAon==1){
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <HAL_UART_ErrorCallback+0x70>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d1e6      	bne.n	8005f6e <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8005fa0:	4d0e      	ldr	r5, [pc, #56]	; (8005fdc <HAL_UART_ErrorCallback+0x7c>)
 8005fa2:	782b      	ldrb	r3, [r5, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <HAL_UART_ErrorCallback+0x5c>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005fa8:	220c      	movs	r2, #12
 8005faa:	6823      	ldr	r3, [r4, #0]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8005fac:	0029      	movs	r1, r5
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005fae:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8005fb0:	22e1      	movs	r2, #225	; 0xe1
 8005fb2:	0020      	movs	r0, r4
 8005fb4:	0092      	lsls	r2, r2, #2
 8005fb6:	f004 fe35 	bl	800ac24 <HAL_UART_Receive_DMA>
 8005fba:	e7d8      	b.n	8005f6e <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	0028      	movs	r0, r5
 8005fc0:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_UART_ErrorCallback+0x80>)
 8005fc2:	f008 fb37 	bl	800e634 <memset>
 8005fc6:	e7ef      	b.n	8005fa8 <HAL_UART_ErrorCallback+0x48>
 8005fc8:	20004954 	.word	0x20004954
 8005fcc:	200048c0 	.word	0x200048c0
 8005fd0:	20000094 	.word	0x20000094
 8005fd4:	2000054c 	.word	0x2000054c
 8005fd8:	20004158 	.word	0x20004158
 8005fdc:	20004164 	.word	0x20004164
 8005fe0:	000003e7 	.word	0x000003e7

08005fe4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8005fe4:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8005fe6:	6802      	ldr	r2, [r0, #0]
{
 8005fe8:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d000      	beq.n	8005ff0 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8005fee:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8005ff0:	f001 fb44 	bl	800767c <HAL_IncTick>
}
 8005ff4:	e7fb      	b.n	8005fee <HAL_TIM_PeriodElapsedCallback+0xa>
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	40012c00 	.word	0x40012c00

08005ffc <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	b084      	sub	sp, #16
	SPI_flash_Chip_Erase();
 8006000:	f7fe fef4 	bl	8004dec <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 8006004:	4809      	ldr	r0, [pc, #36]	; (800602c <initFirstRun+0x30>)
 8006006:	f001 fb4b 	bl	80076a0 <HAL_Delay>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 800600a:	4c09      	ldr	r4, [pc, #36]	; (8006030 <initFirstRun+0x34>)
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <initFirstRun+0x38>)
 800600e:	0022      	movs	r2, r4
 8006010:	0021      	movs	r1, r4
 8006012:	4809      	ldr	r0, [pc, #36]	; (8006038 <initFirstRun+0x3c>)
 8006014:	3468      	adds	r4, #104	; 0x68
 8006016:	320c      	adds	r2, #12
 8006018:	3134      	adds	r1, #52	; 0x34
 800601a:	9402      	str	r4, [sp, #8]
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	3024      	adds	r0, #36	; 0x24
 8006022:	f7ff f8bd 	bl	80051a0 <writeConfig>
}
 8006026:	b004      	add	sp, #16
 8006028:	bd10      	pop	{r4, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	00007530 	.word	0x00007530
 8006030:	08012170 	.word	0x08012170
 8006034:	080132c8 	.word	0x080132c8
 8006038:	080121f0 	.word	0x080121f0

0800603c <ReadAllGPIO>:
void ReadAllGPIO(){
 800603c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603e:	46de      	mov	lr, fp
 8006040:	4657      	mov	r7, sl
 8006042:	464e      	mov	r6, r9
 8006044:	4645      	mov	r5, r8
 8006046:	b5e0      	push	{r5, r6, r7, lr}
	memset(StatusStrng,0,20);
 8006048:	4d60      	ldr	r5, [pc, #384]	; (80061cc <ReadAllGPIO+0x190>)
void ReadAllGPIO(){
 800604a:	b08b      	sub	sp, #44	; 0x2c
	memset(StatusStrng,0,20);
 800604c:	2214      	movs	r2, #20
 800604e:	2100      	movs	r1, #0
 8006050:	0028      	movs	r0, r5
 8006052:	f008 faef 	bl	800e634 <memset>
	memset(Dig_io,0,30);
 8006056:	4e5e      	ldr	r6, [pc, #376]	; (80061d0 <ReadAllGPIO+0x194>)
 8006058:	221e      	movs	r2, #30
 800605a:	2100      	movs	r1, #0
 800605c:	0030      	movs	r0, r6
 800605e:	f008 fae9 	bl	800e634 <memset>
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 8006062:	2180      	movs	r1, #128	; 0x80
 8006064:	20a0      	movs	r0, #160	; 0xa0
 8006066:	0149      	lsls	r1, r1, #5
 8006068:	05c0      	lsls	r0, r0, #23
 800606a:	f002 f9db 	bl	8008424 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 800606e:	2180      	movs	r1, #128	; 0x80
	Dig_in[0]=Read_DI_IN1();
 8006070:	4c58      	ldr	r4, [pc, #352]	; (80061d4 <ReadAllGPIO+0x198>)
 8006072:	0109      	lsls	r1, r1, #4
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 8006074:	6020      	str	r0, [r4, #0]
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 8006076:	4858      	ldr	r0, [pc, #352]	; (80061d8 <ReadAllGPIO+0x19c>)
 8006078:	f002 f9d4 	bl	8008424 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 800607c:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 800607e:	6060      	str	r0, [r4, #4]
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 8006080:	0149      	lsls	r1, r1, #5
 8006082:	4855      	ldr	r0, [pc, #340]	; (80061d8 <ReadAllGPIO+0x19c>)
 8006084:	f002 f9ce 	bl	8008424 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8006088:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 800608a:	60a0      	str	r0, [r4, #8]
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 800608c:	0189      	lsls	r1, r1, #6
 800608e:	4852      	ldr	r0, [pc, #328]	; (80061d8 <ReadAllGPIO+0x19c>)
 8006090:	f002 f9c8 	bl	8008424 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8006094:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 8006096:	4b51      	ldr	r3, [pc, #324]	; (80061dc <ReadAllGPIO+0x1a0>)
 8006098:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 800609a:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800609c:	484e      	ldr	r0, [pc, #312]	; (80061d8 <ReadAllGPIO+0x19c>)
 800609e:	469a      	mov	sl, r3
 80060a0:	f002 f9c0 	bl	8008424 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80060a4:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 80060a6:	4b4e      	ldr	r3, [pc, #312]	; (80061e0 <ReadAllGPIO+0x1a4>)
 80060a8:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80060aa:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80060ac:	484a      	ldr	r0, [pc, #296]	; (80061d8 <ReadAllGPIO+0x19c>)
 80060ae:	4699      	mov	r9, r3
 80060b0:	f002 f9b8 	bl	8008424 <HAL_GPIO_ReadPin>
		else box='C';
 80060b4:	3801      	subs	r0, #1
 80060b6:	4243      	negs	r3, r0
 80060b8:	4158      	adcs	r0, r3
 80060ba:	230c      	movs	r3, #12
 80060bc:	4240      	negs	r0, r0
 80060be:	4003      	ands	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80060c0:	2180      	movs	r1, #128	; 0x80
 80060c2:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 80060c4:	4a47      	ldr	r2, [pc, #284]	; (80061e4 <ReadAllGPIO+0x1a8>)
		else box='C';
 80060c6:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80060c8:	0049      	lsls	r1, r1, #1
 80060ca:	05c0      	lsls	r0, r0, #23
 80060cc:	9208      	str	r2, [sp, #32]
 80060ce:	7013      	strb	r3, [r2, #0]
 80060d0:	f002 f9a8 	bl	8008424 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 80060d4:	4b44      	ldr	r3, [pc, #272]	; (80061e8 <ReadAllGPIO+0x1ac>)
	EXT_B=Read_EXT_B_SENSE();
 80060d6:	4945      	ldr	r1, [pc, #276]	; (80061ec <ReadAllGPIO+0x1b0>)
 80060d8:	6018      	str	r0, [r3, #0]
 80060da:	9309      	str	r3, [sp, #36]	; 0x24
	return (ADCvalue[2]*VSENSE*16);
 80060dc:	4b44      	ldr	r3, [pc, #272]	; (80061f0 <ReadAllGPIO+0x1b4>)
 80060de:	4845      	ldr	r0, [pc, #276]	; (80061f4 <ReadAllGPIO+0x1b8>)
 80060e0:	681f      	ldr	r7, [r3, #0]
 80060e2:	4680      	mov	r8, r0
 80060e4:	6880      	ldr	r0, [r0, #8]
 80060e6:	9106      	str	r1, [sp, #24]
 80060e8:	f7fb f952 	bl	8001390 <__aeabi_ui2f>
 80060ec:	1c39      	adds	r1, r7, #0
 80060ee:	f7fa fdef 	bl	8000cd0 <__aeabi_fmul>
 80060f2:	2183      	movs	r1, #131	; 0x83
 80060f4:	05c9      	lsls	r1, r1, #23
 80060f6:	f7fa fdeb 	bl	8000cd0 <__aeabi_fmul>
 80060fa:	9906      	ldr	r1, [sp, #24]
 80060fc:	6008      	str	r0, [r1, #0]
	INT_B=Read_INT_B_SENSE();
 80060fe:	483e      	ldr	r0, [pc, #248]	; (80061f8 <ReadAllGPIO+0x1bc>)
 8006100:	9007      	str	r0, [sp, #28]
	return (ADCvalue[3]*VSENSE*2);
 8006102:	4640      	mov	r0, r8
 8006104:	68c0      	ldr	r0, [r0, #12]
 8006106:	f7fb f943 	bl	8001390 <__aeabi_ui2f>
 800610a:	1c39      	adds	r1, r7, #0
 800610c:	f7fa fde0 	bl	8000cd0 <__aeabi_fmul>
 8006110:	1c01      	adds	r1, r0, #0
 8006112:	f7fa fa73 	bl	80005fc <__aeabi_fadd>
 8006116:	9907      	ldr	r1, [sp, #28]
 8006118:	6008      	str	r0, [r1, #0]
	adc[0]=Read_ADC1();
 800611a:	4838      	ldr	r0, [pc, #224]	; (80061fc <ReadAllGPIO+0x1c0>)
 800611c:	4683      	mov	fp, r0
	float val=(float)ADCvalue[0];
 800611e:	4640      	mov	r0, r8
 8006120:	6800      	ldr	r0, [r0, #0]
 8006122:	f7fb f935 	bl	8001390 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 8006126:	1c39      	adds	r1, r7, #0
 8006128:	f7fa fdd2 	bl	8000cd0 <__aeabi_fmul>
 800612c:	4934      	ldr	r1, [pc, #208]	; (8006200 <ReadAllGPIO+0x1c4>)
 800612e:	f7fa fdcf 	bl	8000cd0 <__aeabi_fmul>
 8006132:	465b      	mov	r3, fp
 8006134:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 8006136:	4640      	mov	r0, r8
 8006138:	6840      	ldr	r0, [r0, #4]
 800613a:	f7fb f929 	bl	8001390 <__aeabi_ui2f>
 800613e:	1c39      	adds	r1, r7, #0
 8006140:	f7fa fdc6 	bl	8000cd0 <__aeabi_fmul>
 8006144:	492e      	ldr	r1, [pc, #184]	; (8006200 <ReadAllGPIO+0x1c4>)
 8006146:	f7fa fdc3 	bl	8000cd0 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 800614a:	465f      	mov	r7, fp
	memset(StatusStrng,0,20);
 800614c:	2214      	movs	r2, #20
	adc[1]=Read_ADC2();
 800614e:	6078      	str	r0, [r7, #4]
	memset(StatusStrng,0,20);
 8006150:	2100      	movs	r1, #0
 8006152:	0028      	movs	r0, r5
 8006154:	f008 fa6e 	bl	800e634 <memset>
	memset(Dig_io,0,30);
 8006158:	221e      	movs	r2, #30
 800615a:	2100      	movs	r1, #0
 800615c:	0030      	movs	r0, r6
 800615e:	f008 fa69 	bl	800e634 <memset>
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 8006162:	4828      	ldr	r0, [pc, #160]	; (8006204 <ReadAllGPIO+0x1c8>)
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	6800      	ldr	r0, [r0, #0]
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	9003      	str	r0, [sp, #12]
 800616c:	4826      	ldr	r0, [pc, #152]	; (8006208 <ReadAllGPIO+0x1cc>)
 800616e:	4927      	ldr	r1, [pc, #156]	; (800620c <ReadAllGPIO+0x1d0>)
 8006170:	6800      	ldr	r0, [r0, #0]
 8006172:	9002      	str	r0, [sp, #8]
 8006174:	4826      	ldr	r0, [pc, #152]	; (8006210 <ReadAllGPIO+0x1d4>)
 8006176:	6800      	ldr	r0, [r0, #0]
 8006178:	9001      	str	r0, [sp, #4]
 800617a:	68a0      	ldr	r0, [r4, #8]
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 800617c:	4654      	mov	r4, sl
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 800617e:	9000      	str	r0, [sp, #0]
 8006180:	0030      	movs	r0, r6
 8006182:	f008 f9eb 	bl	800e55c <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 8006186:	6826      	ldr	r6, [r4, #0]
 8006188:	464c      	mov	r4, r9
 800618a:	9a08      	ldr	r2, [sp, #32]
 800618c:	6827      	ldr	r7, [r4, #0]
 800618e:	7813      	ldrb	r3, [r2, #0]
 8006190:	9807      	ldr	r0, [sp, #28]
 8006192:	9305      	str	r3, [sp, #20]
 8006194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006196:	4c1f      	ldr	r4, [pc, #124]	; (8006214 <ReadAllGPIO+0x1d8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f7fc ff87 	bl	80030b0 <__aeabi_f2d>
 80061a2:	9002      	str	r0, [sp, #8]
 80061a4:	9103      	str	r1, [sp, #12]
 80061a6:	9906      	ldr	r1, [sp, #24]
 80061a8:	6808      	ldr	r0, [r1, #0]
 80061aa:	f7fc ff81 	bl	80030b0 <__aeabi_f2d>
 80061ae:	0033      	movs	r3, r6
 80061b0:	9000      	str	r0, [sp, #0]
 80061b2:	9101      	str	r1, [sp, #4]
 80061b4:	003a      	movs	r2, r7
 80061b6:	0021      	movs	r1, r4
 80061b8:	0028      	movs	r0, r5
 80061ba:	f008 f9cf 	bl	800e55c <siprintf>
}
 80061be:	b00b      	add	sp, #44	; 0x2c
 80061c0:	bcf0      	pop	{r4, r5, r6, r7}
 80061c2:	46bb      	mov	fp, r7
 80061c4:	46b2      	mov	sl, r6
 80061c6:	46a9      	mov	r9, r5
 80061c8:	46a0      	mov	r8, r4
 80061ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061cc:	20003f8c 	.word	0x20003f8c
 80061d0:	20000494 	.word	0x20000494
 80061d4:	20000488 	.word	0x20000488
 80061d8:	50000400 	.word	0x50000400
 80061dc:	20001ee0 	.word	0x20001ee0
 80061e0:	20000304 	.word	0x20000304
 80061e4:	20000090 	.word	0x20000090
 80061e8:	20003f6c 	.word	0x20003f6c
 80061ec:	200004bc 	.word	0x200004bc
 80061f0:	200000b4 	.word	0x200000b4
 80061f4:	20000308 	.word	0x20000308
 80061f8:	20001ea4 	.word	0x20001ea4
 80061fc:	20003fd8 	.word	0x20003fd8
 8006200:	41300000 	.word	0x41300000
 8006204:	20004ab8 	.word	0x20004ab8
 8006208:	200004b8 	.word	0x200004b8
 800620c:	080132d8 	.word	0x080132d8
 8006210:	200004b4 	.word	0x200004b4
 8006214:	080132f0 	.word	0x080132f0

08006218 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006218:	b570      	push	{r4, r5, r6, lr}
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 800621a:	2104      	movs	r1, #4
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800621c:	0004      	movs	r4, r0
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 800621e:	482e      	ldr	r0, [pc, #184]	; (80062d8 <HAL_UART_RxCpltCallback+0xc0>)
 8006220:	f002 f90c 	bl	800843c <HAL_GPIO_TogglePin>
	if(huart==&huart2){
 8006224:	4d2d      	ldr	r5, [pc, #180]	; (80062dc <HAL_UART_RxCpltCallback+0xc4>)
 8006226:	42ac      	cmp	r4, r5
 8006228:	d01a      	beq.n	8006260 <HAL_UART_RxCpltCallback+0x48>
	if(huart==&huart1){
 800622a:	4d2d      	ldr	r5, [pc, #180]	; (80062e0 <HAL_UART_RxCpltCallback+0xc8>)
 800622c:	42ac      	cmp	r4, r5
 800622e:	d000      	beq.n	8006232 <HAL_UART_RxCpltCallback+0x1a>
}
 8006230:	bd70      	pop	{r4, r5, r6, pc}
		if(strlen((char*)GSMData)<1900){
 8006232:	4c2c      	ldr	r4, [pc, #176]	; (80062e4 <HAL_UART_RxCpltCallback+0xcc>)
 8006234:	0020      	movs	r0, r4
 8006236:	f7f9 ff67 	bl	8000108 <strlen>
 800623a:	4b2b      	ldr	r3, [pc, #172]	; (80062e8 <HAL_UART_RxCpltCallback+0xd0>)
 800623c:	4298      	cmp	r0, r3
 800623e:	d803      	bhi.n	8006248 <HAL_UART_RxCpltCallback+0x30>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8006240:	492a      	ldr	r1, [pc, #168]	; (80062ec <HAL_UART_RxCpltCallback+0xd4>)
 8006242:	780b      	ldrb	r3, [r1, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d123      	bne.n	8006290 <HAL_UART_RxCpltCallback+0x78>
		if(DMAon==1){
 8006248:	4b29      	ldr	r3, [pc, #164]	; (80062f0 <HAL_UART_RxCpltCallback+0xd8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d1ef      	bne.n	8006230 <HAL_UART_RxCpltCallback+0x18>
		GSMBuff[0]=0;
 8006250:	2300      	movs	r3, #0
 8006252:	4926      	ldr	r1, [pc, #152]	; (80062ec <HAL_UART_RxCpltCallback+0xd4>)
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006254:	2201      	movs	r2, #1
 8006256:	0028      	movs	r0, r5
		GSMBuff[0]=0;
 8006258:	700b      	strb	r3, [r1, #0]
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800625a:	f004 fce3 	bl	800ac24 <HAL_UART_Receive_DMA>
}
 800625e:	e7e7      	b.n	8006230 <HAL_UART_RxCpltCallback+0x18>
		if(dnlfile==0){
 8006260:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <HAL_UART_RxCpltCallback+0xdc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>10){
 8006268:	4c23      	ldr	r4, [pc, #140]	; (80062f8 <HAL_UART_RxCpltCallback+0xe0>)
 800626a:	0020      	movs	r0, r4
 800626c:	f7f9 ff4c 	bl	8000108 <strlen>
 8006270:	280a      	cmp	r0, #10
 8006272:	d817      	bhi.n	80062a4 <HAL_UART_RxCpltCallback+0x8c>
		if(DMAon==1){
 8006274:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <HAL_UART_RxCpltCallback+0xd8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d1d9      	bne.n	8006230 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 800627c:	7823      	ldrb	r3, [r4, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <HAL_UART_RxCpltCallback+0x80>
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 8006282:	22e1      	movs	r2, #225	; 0xe1
 8006284:	0021      	movs	r1, r4
 8006286:	0028      	movs	r0, r5
 8006288:	0092      	lsls	r2, r2, #2
 800628a:	f004 fccb 	bl	800ac24 <HAL_UART_Receive_DMA>
 800628e:	e7cf      	b.n	8006230 <HAL_UART_RxCpltCallback+0x18>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8006290:	1900      	adds	r0, r0, r4
 8006292:	f008 fb8e 	bl	800e9b2 <strcpy>
 8006296:	e7d7      	b.n	8006248 <HAL_UART_RxCpltCallback+0x30>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8006298:	2100      	movs	r1, #0
 800629a:	0020      	movs	r0, r4
 800629c:	4a17      	ldr	r2, [pc, #92]	; (80062fc <HAL_UART_RxCpltCallback+0xe4>)
 800629e:	f008 f9c9 	bl	800e634 <memset>
 80062a2:	e7ee      	b.n	8006282 <HAL_UART_RxCpltCallback+0x6a>
			ProcessGPS((char*)gpsData);
 80062a4:	0020      	movs	r0, r4
 80062a6:	f7ff fe37 	bl	8005f18 <ProcessGPS>
			getGPSString();
 80062aa:	f7ff f8bf 	bl	800542c <getGPSString>
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 80062ae:	2104      	movs	r1, #4
 80062b0:	4809      	ldr	r0, [pc, #36]	; (80062d8 <HAL_UART_RxCpltCallback+0xc0>)
 80062b2:	f002 f8c3 	bl	800843c <HAL_GPIO_TogglePin>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 80062b6:	4e12      	ldr	r6, [pc, #72]	; (8006300 <HAL_UART_RxCpltCallback+0xe8>)
 80062b8:	6833      	ldr	r3, [r6, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_UART_RxCpltCallback+0xb6>
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 80062be:	4b11      	ldr	r3, [pc, #68]	; (8006304 <HAL_UART_RxCpltCallback+0xec>)
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	2800      	cmp	r0, #0
 80062c4:	dd00      	ble.n	80062c8 <HAL_UART_RxCpltCallback+0xb0>
 80062c6:	6030      	str	r0, [r6, #0]
			ReadAllGPIO();
 80062c8:	f7ff feb8 	bl	800603c <ReadAllGPIO>
 80062cc:	e7d2      	b.n	8006274 <HAL_UART_RxCpltCallback+0x5c>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 80062ce:	f7ff f859 	bl	8005384 <detectAcc>
 80062d2:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <HAL_UART_RxCpltCallback+0xec>)
 80062d4:	6018      	str	r0, [r3, #0]
 80062d6:	e7f4      	b.n	80062c2 <HAL_UART_RxCpltCallback+0xaa>
 80062d8:	50000c00 	.word	0x50000c00
 80062dc:	20004954 	.word	0x20004954
 80062e0:	200048c0 	.word	0x200048c0
 80062e4:	20000550 	.word	0x20000550
 80062e8:	0000076b 	.word	0x0000076b
 80062ec:	2000054c 	.word	0x2000054c
 80062f0:	20000094 	.word	0x20000094
 80062f4:	20004158 	.word	0x20004158
 80062f8:	20004164 	.word	0x20004164
 80062fc:	000003e7 	.word	0x000003e7
 8006300:	2000031c 	.word	0x2000031c
 8006304:	20000318 	.word	0x20000318

08006308 <GetHead>:
void GetHead(){
 8006308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630a:	46de      	mov	lr, fp
 800630c:	464e      	mov	r6, r9
 800630e:	4645      	mov	r5, r8
 8006310:	4657      	mov	r7, sl
 8006312:	b5e0      	push	{r5, r6, r7, lr}
	memset(Head,0,100);
 8006314:	4dca      	ldr	r5, [pc, #808]	; (8006640 <GetHead+0x338>)
 8006316:	2264      	movs	r2, #100	; 0x64
void GetHead(){
 8006318:	b085      	sub	sp, #20
	memset(Head,0,100);
 800631a:	2100      	movs	r1, #0
 800631c:	0028      	movs	r0, r5
 800631e:	f008 f989 	bl	800e634 <memset>
	strcpy(Head,InitStr);
 8006322:	49c8      	ldr	r1, [pc, #800]	; (8006644 <GetHead+0x33c>)
 8006324:	0028      	movs	r0, r5
 8006326:	f008 fa4b 	bl	800e7c0 <stpcpy>
	strcat(Head,",");
 800632a:	232c      	movs	r3, #44	; 0x2c
	strcat(Head,VerStr);
 800632c:	49c6      	ldr	r1, [pc, #792]	; (8006648 <GetHead+0x340>)
	strcat(Head,",");
 800632e:	7003      	strb	r3, [r0, #0]
	strcat(Head,VerStr);
 8006330:	3001      	adds	r0, #1
 8006332:	f008 fa45 	bl	800e7c0 <stpcpy>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 8006336:	4bc5      	ldr	r3, [pc, #788]	; (800664c <GetHead+0x344>)
 8006338:	4ec5      	ldr	r6, [pc, #788]	; (8006650 <GetHead+0x348>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	6833      	ldr	r3, [r6, #0]
	strcat(Head,VerStr);
 800633e:	9000      	str	r0, [sp, #0]
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 8006340:	3301      	adds	r3, #1
 8006342:	d000      	beq.n	8006346 <GetHead+0x3e>
 8006344:	e0dd      	b.n	8006502 <GetHead+0x1fa>
 8006346:	2a01      	cmp	r2, #1
 8006348:	d000      	beq.n	800634c <GetHead+0x44>
 800634a:	e0da      	b.n	8006502 <GetHead+0x1fa>
 800634c:	2301      	movs	r3, #1
 800634e:	6033      	str	r3, [r6, #0]
 8006350:	4bc0      	ldr	r3, [pc, #768]	; (8006654 <GetHead+0x34c>)
 8006352:	469a      	mov	sl, r3
 8006354:	2301      	movs	r3, #1
 8006356:	4652      	mov	r2, sl
 8006358:	425b      	negs	r3, r3
 800635a:	6013      	str	r3, [r2, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 800635c:	4bbe      	ldr	r3, [pc, #760]	; (8006658 <GetHead+0x350>)
 800635e:	4fbf      	ldr	r7, [pc, #764]	; (800665c <GetHead+0x354>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	d000      	beq.n	800636a <GetHead+0x62>
 8006368:	e0bc      	b.n	80064e4 <GetHead+0x1dc>
 800636a:	2a01      	cmp	r2, #1
 800636c:	d000      	beq.n	8006370 <GetHead+0x68>
 800636e:	e0b9      	b.n	80064e4 <GetHead+0x1dc>
 8006370:	2301      	movs	r3, #1
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4bba      	ldr	r3, [pc, #744]	; (8006660 <GetHead+0x358>)
 8006376:	469b      	mov	fp, r3
 8006378:	2301      	movs	r3, #1
 800637a:	465a      	mov	r2, fp
 800637c:	425b      	negs	r3, r3
 800637e:	6013      	str	r3, [r2, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8006380:	4bb8      	ldr	r3, [pc, #736]	; (8006664 <GetHead+0x35c>)
 8006382:	49b9      	ldr	r1, [pc, #740]	; (8006668 <GetHead+0x360>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	1c18      	adds	r0, r3, #0
 8006388:	4699      	mov	r9, r3
 800638a:	f7fa f89f 	bl	80004cc <__aeabi_fcmplt>
 800638e:	0001      	movs	r1, r0
 8006390:	1e4b      	subs	r3, r1, #1
 8006392:	4199      	sbcs	r1, r3
 8006394:	4bb5      	ldr	r3, [pc, #724]	; (800666c <GetHead+0x364>)
 8006396:	9102      	str	r1, [sp, #8]
 8006398:	4698      	mov	r8, r3
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	425a      	negs	r2, r3
 80063a0:	4153      	adcs	r3, r2
 80063a2:	000a      	movs	r2, r1
 80063a4:	401a      	ands	r2, r3
 80063a6:	9201      	str	r2, [sp, #4]
 80063a8:	420b      	tst	r3, r1
 80063aa:	d000      	beq.n	80063ae <GetHead+0xa6>
 80063ac:	e0b8      	b.n	8006520 <GetHead+0x218>
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 80063ae:	4cb0      	ldr	r4, [pc, #704]	; (8006670 <GetHead+0x368>)
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	425a      	negs	r2, r3
 80063b6:	4153      	adcs	r3, r2
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	4648      	mov	r0, r9
 80063be:	49aa      	ldr	r1, [pc, #680]	; (8006668 <GetHead+0x360>)
 80063c0:	f7fa f8a2 	bl	8000508 <__aeabi_fcmpge>
 80063c4:	2300      	movs	r3, #0
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d008      	beq.n	80063dc <GetHead+0xd4>
 80063ca:	9a01      	ldr	r2, [sp, #4]
 80063cc:	2301      	movs	r3, #1
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	d004      	beq.n	80063dc <GetHead+0xd4>
 80063d2:	2201      	movs	r2, #1
 80063d4:	4641      	mov	r1, r8
 80063d6:	4252      	negs	r2, r2
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	600a      	str	r2, [r1, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 80063dc:	4aa5      	ldr	r2, [pc, #660]	; (8006674 <GetHead+0x36c>)
 80063de:	4691      	mov	r9, r2
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	3201      	adds	r2, #1
 80063e4:	d176      	bne.n	80064d4 <GetHead+0x1cc>
 80063e6:	9a02      	ldr	r2, [sp, #8]
 80063e8:	2a00      	cmp	r2, #0
 80063ea:	d073      	beq.n	80064d4 <GetHead+0x1cc>
 80063ec:	2201      	movs	r2, #1
 80063ee:	4649      	mov	r1, r9
 80063f0:	600a      	str	r2, [r1, #0]
 80063f2:	4aa1      	ldr	r2, [pc, #644]	; (8006678 <GetHead+0x370>)
 80063f4:	0011      	movs	r1, r2
 80063f6:	9201      	str	r2, [sp, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	4252      	negs	r2, r2
 80063fc:	600a      	str	r2, [r1, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <GetHead+0x106>
 8006402:	2301      	movs	r3, #1
 8006404:	9a01      	ldr	r2, [sp, #4]
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	464a      	mov	r2, r9
 800640a:	3b02      	subs	r3, #2
 800640c:	6013      	str	r3, [r2, #0]
	if(GSMSignal<=10){
 800640e:	4b9b      	ldr	r3, [pc, #620]	; (800667c <GetHead+0x374>)
 8006410:	499b      	ldr	r1, [pc, #620]	; (8006680 <GetHead+0x378>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	f7fa f864 	bl	80004e0 <__aeabi_fcmple>
 8006418:	2800      	cmp	r0, #0
 800641a:	d000      	beq.n	800641e <GetHead+0x116>
 800641c:	e087      	b.n	800652e <GetHead+0x226>
	else if(getSpeed()>SpeedThr){
 800641e:	4b99      	ldr	r3, [pc, #612]	; (8006684 <GetHead+0x37c>)
	return GPSInfo.speed;
 8006420:	4a99      	ldr	r2, [pc, #612]	; (8006688 <GetHead+0x380>)
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	6991      	ldr	r1, [r2, #24]
 8006426:	f7fa f851 	bl	80004cc <__aeabi_fcmplt>
 800642a:	9002      	str	r0, [sp, #8]
 800642c:	2800      	cmp	r0, #0
 800642e:	d000      	beq.n	8006432 <GetHead+0x12a>
 8006430:	e092      	b.n	8006558 <GetHead+0x250>
	else if(EmergencyWireBreak>0){
 8006432:	4b96      	ldr	r3, [pc, #600]	; (800668c <GetHead+0x384>)
 8006434:	9303      	str	r3, [sp, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	dd00      	ble.n	800643e <GetHead+0x136>
 800643c:	e095      	b.n	800656a <GetHead+0x262>
	else if(AccGyroStatus==1){
 800643e:	4b94      	ldr	r3, [pc, #592]	; (8006690 <GetHead+0x388>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d100      	bne.n	8006448 <GetHead+0x140>
 8006446:	e09f      	b.n	8006588 <GetHead+0x280>
	else if(AccGyroStatus==2){
 8006448:	2b02      	cmp	r3, #2
 800644a:	d100      	bne.n	800644e <GetHead+0x146>
 800644c:	e0a1      	b.n	8006592 <GetHead+0x28a>
	else if(AccGyroStatus==3){
 800644e:	2b03      	cmp	r3, #3
 8006450:	d100      	bne.n	8006454 <GetHead+0x14c>
 8006452:	e0ab      	b.n	80065ac <GetHead+0x2a4>
	else if(EmergencyStateON>0){
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	dd00      	ble.n	800645c <GetHead+0x154>
 800645a:	e08e      	b.n	800657a <GetHead+0x272>
	else if(EmergencyStateOFF>0){
 800645c:	4653      	mov	r3, sl
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	dd00      	ble.n	8006466 <GetHead+0x15e>
 8006464:	e09a      	b.n	800659c <GetHead+0x294>
	else if(IgnitionTurnedON>0){
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	dd00      	ble.n	800646e <GetHead+0x166>
 800646c:	e0a3      	b.n	80065b6 <GetHead+0x2ae>
	else if(IgnitionTurnedOFF>0){
 800646e:	465b      	mov	r3, fp
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dd00      	ble.n	8006478 <GetHead+0x170>
 8006476:	e0a5      	b.n	80065c4 <GetHead+0x2bc>
	else if(BOX_STATE=='C'){
 8006478:	4b86      	ldr	r3, [pc, #536]	; (8006694 <GetHead+0x38c>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b43      	cmp	r3, #67	; 0x43
 800647e:	d100      	bne.n	8006482 <GetHead+0x17a>
 8006480:	e0b0      	b.n	80065e4 <GetHead+0x2dc>
	else if(InternalBatterLow>0){
 8006482:	4643      	mov	r3, r8
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	dd00      	ble.n	800648c <GetHead+0x184>
 800648a:	e0a3      	b.n	80065d4 <GetHead+0x2cc>
	else if(InternalBatteryChargedAgain>0){
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	dd00      	ble.n	8006494 <GetHead+0x18c>
 8006492:	e0ac      	b.n	80065ee <GetHead+0x2e6>
	else if(MainBatteryDisconnect>0){
 8006494:	464b      	mov	r3, r9
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	dd00      	ble.n	800649e <GetHead+0x196>
 800649c:	e0ae      	b.n	80065fc <GetHead+0x2f4>
	else if(MainBatteryReconnect>0){
 800649e:	9c01      	ldr	r4, [sp, #4]
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	dd00      	ble.n	80064a8 <GetHead+0x1a0>
 80064a6:	e0b1      	b.n	800660c <GetHead+0x304>
	else if(HistoryPVTData>0){
 80064a8:	4e7b      	ldr	r6, [pc, #492]	; (8006698 <GetHead+0x390>)
 80064aa:	6833      	ldr	r3, [r6, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dd00      	ble.n	80064b2 <GetHead+0x1aa>
 80064b0:	e0b3      	b.n	800661a <GetHead+0x312>
	else if(HealthPacket>0){
 80064b2:	4e7a      	ldr	r6, [pc, #488]	; (800669c <GetHead+0x394>)
 80064b4:	6833      	ldr	r3, [r6, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	dd00      	ble.n	80064bc <GetHead+0x1b4>
 80064ba:	e0b5      	b.n	8006628 <GetHead+0x320>
	else if(OTAParameterChange>0){
 80064bc:	4e78      	ldr	r6, [pc, #480]	; (80066a0 <GetHead+0x398>)
 80064be:	6833      	ldr	r3, [r6, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc00      	bgt.n	80064c6 <GetHead+0x1be>
 80064c4:	e0b7      	b.n	8006636 <GetHead+0x32e>
		strcat(Head,AlartStr_OTAParameterChange);
 80064c6:	4977      	ldr	r1, [pc, #476]	; (80066a4 <GetHead+0x39c>)
 80064c8:	9800      	ldr	r0, [sp, #0]
 80064ca:	f008 fa72 	bl	800e9b2 <strcpy>
		OTAParameterChange=0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	6033      	str	r3, [r6, #0]
 80064d2:	e045      	b.n	8006560 <GetHead+0x258>
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 80064d4:	4a68      	ldr	r2, [pc, #416]	; (8006678 <GetHead+0x370>)
 80064d6:	9201      	str	r2, [sp, #4]
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	3201      	adds	r2, #1
 80064dc:	4251      	negs	r1, r2
 80064de:	414a      	adcs	r2, r1
 80064e0:	4013      	ands	r3, r2
 80064e2:	e78c      	b.n	80063fe <GetHead+0xf6>
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 80064e4:	4b5e      	ldr	r3, [pc, #376]	; (8006660 <GetHead+0x358>)
 80064e6:	469b      	mov	fp, r3
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3301      	adds	r3, #1
 80064ec:	d000      	beq.n	80064f0 <GetHead+0x1e8>
 80064ee:	e747      	b.n	8006380 <GetHead+0x78>
 80064f0:	2a00      	cmp	r2, #0
 80064f2:	d000      	beq.n	80064f6 <GetHead+0x1ee>
 80064f4:	e744      	b.n	8006380 <GetHead+0x78>
 80064f6:	2301      	movs	r3, #1
 80064f8:	465a      	mov	r2, fp
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	3b02      	subs	r3, #2
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	e73e      	b.n	8006380 <GetHead+0x78>
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 8006502:	4b54      	ldr	r3, [pc, #336]	; (8006654 <GetHead+0x34c>)
 8006504:	469a      	mov	sl, r3
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	d000      	beq.n	800650e <GetHead+0x206>
 800650c:	e726      	b.n	800635c <GetHead+0x54>
 800650e:	2a00      	cmp	r2, #0
 8006510:	d000      	beq.n	8006514 <GetHead+0x20c>
 8006512:	e723      	b.n	800635c <GetHead+0x54>
 8006514:	2301      	movs	r3, #1
 8006516:	4652      	mov	r2, sl
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	3b02      	subs	r3, #2
 800651c:	6033      	str	r3, [r6, #0]
 800651e:	e71d      	b.n	800635c <GetHead+0x54>
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8006520:	2301      	movs	r3, #1
 8006522:	4642      	mov	r2, r8
 8006524:	4c52      	ldr	r4, [pc, #328]	; (8006670 <GetHead+0x368>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	3b02      	subs	r3, #2
 800652a:	6023      	str	r3, [r4, #0]
 800652c:	e746      	b.n	80063bc <GetHead+0xb4>
		strcat(Head,AlartStr_HistoryPVTData);
 800652e:	495e      	ldr	r1, [pc, #376]	; (80066a8 <GetHead+0x3a0>)
 8006530:	9800      	ldr	r0, [sp, #0]
 8006532:	f008 f945 	bl	800e7c0 <stpcpy>
			strcat(Head,PacketStatusStrHist);
 8006536:	2203      	movs	r2, #3
 8006538:	495c      	ldr	r1, [pc, #368]	; (80066ac <GetHead+0x3a4>)
 800653a:	f008 fa4d 	bl	800e9d8 <memcpy>
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 800653e:	4b5c      	ldr	r3, [pc, #368]	; (80066b0 <GetHead+0x3a8>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	2a00      	cmp	r2, #0
 8006544:	dd01      	ble.n	800654a <GetHead+0x242>
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
}
 800654a:	b005      	add	sp, #20
 800654c:	bcf0      	pop	{r4, r5, r6, r7}
 800654e:	46bb      	mov	fp, r7
 8006550:	46b2      	mov	sl, r6
 8006552:	46a9      	mov	r9, r5
 8006554:	46a0      	mov	r8, r4
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(Head,AlartStr_OverSpeed);
 8006558:	4956      	ldr	r1, [pc, #344]	; (80066b4 <GetHead+0x3ac>)
 800655a:	9800      	ldr	r0, [sp, #0]
 800655c:	f008 fa29 	bl	800e9b2 <strcpy>
		strcat(Head,PacketStatusStrLive);
 8006560:	0028      	movs	r0, r5
 8006562:	4955      	ldr	r1, [pc, #340]	; (80066b8 <GetHead+0x3b0>)
 8006564:	f008 f86e 	bl	800e644 <strcat>
 8006568:	e7e9      	b.n	800653e <GetHead+0x236>
		strcat(Head,AlartStr_EmergencyWireBreak);
 800656a:	4954      	ldr	r1, [pc, #336]	; (80066bc <GetHead+0x3b4>)
 800656c:	9800      	ldr	r0, [sp, #0]
 800656e:	f008 fa20 	bl	800e9b2 <strcpy>
		EmergencyWireBreak=0;
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	9a02      	ldr	r2, [sp, #8]
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e7f2      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateON);
 800657a:	4951      	ldr	r1, [pc, #324]	; (80066c0 <GetHead+0x3b8>)
 800657c:	9800      	ldr	r0, [sp, #0]
 800657e:	f008 fa18 	bl	800e9b2 <strcpy>
		EmergencyStateON=0;
 8006582:	9b02      	ldr	r3, [sp, #8]
 8006584:	6033      	str	r3, [r6, #0]
 8006586:	e7eb      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_HarshAcceleration);
 8006588:	494e      	ldr	r1, [pc, #312]	; (80066c4 <GetHead+0x3bc>)
 800658a:	9800      	ldr	r0, [sp, #0]
 800658c:	f008 fa11 	bl	800e9b2 <strcpy>
 8006590:	e7e6      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_HarshBreaking);
 8006592:	494d      	ldr	r1, [pc, #308]	; (80066c8 <GetHead+0x3c0>)
 8006594:	9800      	ldr	r0, [sp, #0]
 8006596:	f008 fa0c 	bl	800e9b2 <strcpy>
 800659a:	e7e1      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateOFF);
 800659c:	494b      	ldr	r1, [pc, #300]	; (80066cc <GetHead+0x3c4>)
 800659e:	9800      	ldr	r0, [sp, #0]
 80065a0:	f008 fa07 	bl	800e9b2 <strcpy>
		EmergencyStateOFF=0;
 80065a4:	4653      	mov	r3, sl
 80065a6:	9a02      	ldr	r2, [sp, #8]
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e7d9      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_RashTurning);
 80065ac:	4948      	ldr	r1, [pc, #288]	; (80066d0 <GetHead+0x3c8>)
 80065ae:	9800      	ldr	r0, [sp, #0]
 80065b0:	f008 f9ff 	bl	800e9b2 <strcpy>
 80065b4:	e7d4      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedON);
 80065b6:	4947      	ldr	r1, [pc, #284]	; (80066d4 <GetHead+0x3cc>)
 80065b8:	9800      	ldr	r0, [sp, #0]
 80065ba:	f008 f9fa 	bl	800e9b2 <strcpy>
		IgnitionTurnedON=0;
 80065be:	9b02      	ldr	r3, [sp, #8]
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	e7cd      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 80065c4:	4944      	ldr	r1, [pc, #272]	; (80066d8 <GetHead+0x3d0>)
 80065c6:	9800      	ldr	r0, [sp, #0]
 80065c8:	f008 f9f3 	bl	800e9b2 <strcpy>
		IgnitionTurnedOFF=0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	465a      	mov	r2, fp
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	e7c5      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatterLow);
 80065d4:	4941      	ldr	r1, [pc, #260]	; (80066dc <GetHead+0x3d4>)
 80065d6:	9800      	ldr	r0, [sp, #0]
 80065d8:	f008 f9eb 	bl	800e9b2 <strcpy>
		InternalBatterLow=0;
 80065dc:	2300      	movs	r3, #0
 80065de:	4642      	mov	r2, r8
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e7bd      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_BoxTemper);
 80065e4:	493e      	ldr	r1, [pc, #248]	; (80066e0 <GetHead+0x3d8>)
 80065e6:	9800      	ldr	r0, [sp, #0]
 80065e8:	f008 f9e3 	bl	800e9b2 <strcpy>
 80065ec:	e7b8      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 80065ee:	493d      	ldr	r1, [pc, #244]	; (80066e4 <GetHead+0x3dc>)
 80065f0:	9800      	ldr	r0, [sp, #0]
 80065f2:	f008 f9de 	bl	800e9b2 <strcpy>
		InternalBatteryChargedAgain=0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	e7b1      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 80065fc:	493a      	ldr	r1, [pc, #232]	; (80066e8 <GetHead+0x3e0>)
 80065fe:	9800      	ldr	r0, [sp, #0]
 8006600:	f008 f9d7 	bl	800e9b2 <strcpy>
		MainBatteryDisconnect=0;
 8006604:	2300      	movs	r3, #0
 8006606:	464a      	mov	r2, r9
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	e7a9      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryReconnect);
 800660c:	4937      	ldr	r1, [pc, #220]	; (80066ec <GetHead+0x3e4>)
 800660e:	9800      	ldr	r0, [sp, #0]
 8006610:	f008 f9cf 	bl	800e9b2 <strcpy>
		MainBatteryReconnect=0;
 8006614:	2300      	movs	r3, #0
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	e7a2      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_HistoryPVTData);
 800661a:	4923      	ldr	r1, [pc, #140]	; (80066a8 <GetHead+0x3a0>)
 800661c:	9800      	ldr	r0, [sp, #0]
 800661e:	f008 f9c8 	bl	800e9b2 <strcpy>
		HistoryPVTData=0;
 8006622:	2300      	movs	r3, #0
 8006624:	6033      	str	r3, [r6, #0]
 8006626:	e79b      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_HealthPacket);
 8006628:	4931      	ldr	r1, [pc, #196]	; (80066f0 <GetHead+0x3e8>)
 800662a:	9800      	ldr	r0, [sp, #0]
 800662c:	f008 f9c1 	bl	800e9b2 <strcpy>
		HealthPacket=0;
 8006630:	2300      	movs	r3, #0
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	e794      	b.n	8006560 <GetHead+0x258>
		strcat(Head,AlartStr_NormalPkt);
 8006636:	492f      	ldr	r1, [pc, #188]	; (80066f4 <GetHead+0x3ec>)
 8006638:	9800      	ldr	r0, [sp, #0]
 800663a:	f008 f9ba 	bl	800e9b2 <strcpy>
 800663e:	e78f      	b.n	8006560 <GetHead+0x258>
 8006640:	20001e04 	.word	0x20001e04
 8006644:	200000a0 	.word	0x200000a0
 8006648:	200000b8 	.word	0x200000b8
 800664c:	20003f6c 	.word	0x20003f6c
 8006650:	20000098 	.word	0x20000098
 8006654:	200004c0 	.word	0x200004c0
 8006658:	20001ee0 	.word	0x20001ee0
 800665c:	20001eac 	.word	0x20001eac
 8006660:	20001ea8 	.word	0x20001ea8
 8006664:	20001ea4 	.word	0x20001ea4
 8006668:	40400000 	.word	0x40400000
 800666c:	20001eb0 	.word	0x20001eb0
 8006670:	20001eb4 	.word	0x20001eb4
 8006674:	20001ef4 	.word	0x20001ef4
 8006678:	20001ef8 	.word	0x20001ef8
 800667c:	20001d88 	.word	0x20001d88
 8006680:	41200000 	.word	0x41200000
 8006684:	200000b0 	.word	0x200000b0
 8006688:	200004fc 	.word	0x200004fc
 800668c:	200004c4 	.word	0x200004c4
 8006690:	20000318 	.word	0x20000318
 8006694:	20000090 	.word	0x20000090
 8006698:	20001e6c 	.word	0x20001e6c
 800669c:	20001e68 	.word	0x20001e68
 80066a0:	20001efc 	.word	0x20001efc
 80066a4:	20000078 	.word	0x20000078
 80066a8:	20000038 	.word	0x20000038
 80066ac:	08013430 	.word	0x08013430
 80066b0:	2000031c 	.word	0x2000031c
 80066b4:	20000080 	.word	0x20000080
 80066b8:	200000ac 	.word	0x200000ac
 80066bc:	20000018 	.word	0x20000018
 80066c0:	20000010 	.word	0x20000010
 80066c4:	20000020 	.word	0x20000020
 80066c8:	20000028 	.word	0x20000028
 80066cc:	20000008 	.word	0x20000008
 80066d0:	20000088 	.word	0x20000088
 80066d4:	20000048 	.word	0x20000048
 80066d8:	20000040 	.word	0x20000040
 80066dc:	20000050 	.word	0x20000050
 80066e0:	20000000 	.word	0x20000000
 80066e4:	20000058 	.word	0x20000058
 80066e8:	20000060 	.word	0x20000060
 80066ec:	20000068 	.word	0x20000068
 80066f0:	20000030 	.word	0x20000030
 80066f4:	20000070 	.word	0x20000070

080066f8 <TestRun>:
void TestRun(){
 80066f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066fa:	46de      	mov	lr, fp
 80066fc:	4657      	mov	r7, sl
 80066fe:	464e      	mov	r6, r9
 8006700:	4645      	mov	r5, r8
 8006702:	b5e0      	push	{r5, r6, r7, lr}
	if(errorlen>10){
 8006704:	4bf3      	ldr	r3, [pc, #972]	; (8006ad4 <TestRun+0x3dc>)
void TestRun(){
 8006706:	b091      	sub	sp, #68	; 0x44
	if(errorlen>10){
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b0a      	cmp	r3, #10
 800670c:	dd00      	ble.n	8006710 <TestRun+0x18>
 800670e:	e308      	b.n	8006d22 <TestRun+0x62a>
	printInt(seqNo);
 8006710:	4bf1      	ldr	r3, [pc, #964]	; (8006ad8 <TestRun+0x3e0>)
	memset(printBuf,0,50);
 8006712:	4cf2      	ldr	r4, [pc, #968]	; (8006adc <TestRun+0x3e4>)
 8006714:	681d      	ldr	r5, [r3, #0]
 8006716:	2232      	movs	r2, #50	; 0x32
 8006718:	2100      	movs	r1, #0
 800671a:	0020      	movs	r0, r4
 800671c:	9308      	str	r3, [sp, #32]
 800671e:	f007 ff89 	bl	800e634 <memset>
	snprintf(printBuf, 6, "%d", x);
 8006722:	002b      	movs	r3, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006724:	250c      	movs	r5, #12
 8006726:	2106      	movs	r1, #6
 8006728:	4aed      	ldr	r2, [pc, #948]	; (8006ae0 <TestRun+0x3e8>)
 800672a:	0020      	movs	r0, r4
 800672c:	f007 fee2 	bl	800e4f4 <sniprintf>
 8006730:	4bec      	ldr	r3, [pc, #944]	; (8006ae4 <TestRun+0x3ec>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006732:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006734:	4699      	mov	r9, r3
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	621d      	str	r5, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800673a:	f7f9 fce5 	bl	8000108 <strlen>
 800673e:	0021      	movs	r1, r4
 8006740:	b282      	uxth	r2, r0
 8006742:	4be9      	ldr	r3, [pc, #932]	; (8006ae8 <TestRun+0x3f0>)
 8006744:	4648      	mov	r0, r9
 8006746:	f004 f89f 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800674a:	4be8      	ldr	r3, [pc, #928]	; (8006aec <TestRun+0x3f4>)
 800674c:	ac0f      	add	r4, sp, #60	; 0x3c
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800674e:	2202      	movs	r2, #2
 8006750:	0021      	movs	r1, r4
	char newline[2] = "\r\n";
 8006752:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006754:	4648      	mov	r0, r9
 8006756:	230a      	movs	r3, #10
 8006758:	f004 f896 	bl	800a888 <HAL_UART_Transmit>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 800675c:	2180      	movs	r1, #128	; 0x80
 800675e:	48e4      	ldr	r0, [pc, #912]	; (8006af0 <TestRun+0x3f8>)
 8006760:	0189      	lsls	r1, r1, #6
 8006762:	f001 fe5f 	bl	8008424 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8006766:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 8006768:	4be2      	ldr	r3, [pc, #904]	; (8006af4 <TestRun+0x3fc>)
 800676a:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 800676c:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800676e:	48e0      	ldr	r0, [pc, #896]	; (8006af0 <TestRun+0x3f8>)
 8006770:	f001 fe58 	bl	8008424 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8006774:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 8006776:	4be0      	ldr	r3, [pc, #896]	; (8006af8 <TestRun+0x400>)
 8006778:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800677a:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 800677c:	48dc      	ldr	r0, [pc, #880]	; (8006af0 <TestRun+0x3f8>)
 800677e:	f001 fe51 	bl	8008424 <HAL_GPIO_ReadPin>
		else box='C';
 8006782:	3801      	subs	r0, #1
 8006784:	4243      	negs	r3, r0
 8006786:	4158      	adcs	r0, r3
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006788:	2180      	movs	r1, #128	; 0x80
		else box='C';
 800678a:	4243      	negs	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 800678c:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 800678e:	4adb      	ldr	r2, [pc, #876]	; (8006afc <TestRun+0x404>)
		else box='C';
 8006790:	402b      	ands	r3, r5
 8006792:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006794:	0049      	lsls	r1, r1, #1
 8006796:	05c0      	lsls	r0, r0, #23
 8006798:	7013      	strb	r3, [r2, #0]
 800679a:	f001 fe43 	bl	8008424 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 800679e:	4bd8      	ldr	r3, [pc, #864]	; (8006b00 <TestRun+0x408>)
	return (ADCvalue[2]*VSENSE*16);
 80067a0:	4fd8      	ldr	r7, [pc, #864]	; (8006b04 <TestRun+0x40c>)
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80067a2:	6018      	str	r0, [r3, #0]
	return (ADCvalue[2]*VSENSE*16);
 80067a4:	4bd8      	ldr	r3, [pc, #864]	; (8006b08 <TestRun+0x410>)
 80067a6:	68b8      	ldr	r0, [r7, #8]
 80067a8:	681e      	ldr	r6, [r3, #0]
 80067aa:	f7fa fdf1 	bl	8001390 <__aeabi_ui2f>
 80067ae:	1c31      	adds	r1, r6, #0
 80067b0:	f7fa fa8e 	bl	8000cd0 <__aeabi_fmul>
 80067b4:	2183      	movs	r1, #131	; 0x83
 80067b6:	05c9      	lsls	r1, r1, #23
 80067b8:	f7fa fa8a 	bl	8000cd0 <__aeabi_fmul>
	EXT_B=Read_EXT_B_SENSE();
 80067bc:	4bd3      	ldr	r3, [pc, #844]	; (8006b0c <TestRun+0x414>)
 80067be:	1c05      	adds	r5, r0, #0
 80067c0:	6018      	str	r0, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 80067c2:	4bd3      	ldr	r3, [pc, #844]	; (8006b10 <TestRun+0x418>)
	return (ADCvalue[3]*VSENSE*2);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	4698      	mov	r8, r3
 80067c8:	f7fa fde2 	bl	8001390 <__aeabi_ui2f>
 80067cc:	1c31      	adds	r1, r6, #0
 80067ce:	f7fa fa7f 	bl	8000cd0 <__aeabi_fmul>
 80067d2:	1c01      	adds	r1, r0, #0
 80067d4:	f7f9 ff12 	bl	80005fc <__aeabi_fadd>
 80067d8:	4643      	mov	r3, r8
 80067da:	6018      	str	r0, [r3, #0]
	adc[0]=Read_ADC1();
 80067dc:	4bcd      	ldr	r3, [pc, #820]	; (8006b14 <TestRun+0x41c>)
	float val=(float)ADCvalue[0];
 80067de:	6838      	ldr	r0, [r7, #0]
 80067e0:	4698      	mov	r8, r3
 80067e2:	f7fa fdd5 	bl	8001390 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 80067e6:	1c31      	adds	r1, r6, #0
 80067e8:	f7fa fa72 	bl	8000cd0 <__aeabi_fmul>
 80067ec:	49ca      	ldr	r1, [pc, #808]	; (8006b18 <TestRun+0x420>)
 80067ee:	f7fa fa6f 	bl	8000cd0 <__aeabi_fmul>
 80067f2:	4643      	mov	r3, r8
 80067f4:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fa fdca 	bl	8001390 <__aeabi_ui2f>
 80067fc:	1c31      	adds	r1, r6, #0
 80067fe:	f7fa fa67 	bl	8000cd0 <__aeabi_fmul>
 8006802:	49c5      	ldr	r1, [pc, #788]	; (8006b18 <TestRun+0x420>)
 8006804:	f7fa fa64 	bl	8000cd0 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 8006808:	4643      	mov	r3, r8
	if(EXT_B>7){
 800680a:	49c4      	ldr	r1, [pc, #784]	; (8006b1c <TestRun+0x424>)
	adc[1]=Read_ADC2();
 800680c:	6058      	str	r0, [r3, #4]
	if(EXT_B>7){
 800680e:	1c28      	adds	r0, r5, #0
 8006810:	f7f9 fe70 	bl	80004f4 <__aeabi_fcmpgt>
 8006814:	2800      	cmp	r0, #0
 8006816:	d000      	beq.n	800681a <TestRun+0x122>
 8006818:	e1c9      	b.n	8006bae <TestRun+0x4b6>
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
 800681a:	2200      	movs	r2, #0
 800681c:	2101      	movs	r1, #1
 800681e:	48c0      	ldr	r0, [pc, #768]	; (8006b20 <TestRun+0x428>)
 8006820:	f001 fe06 	bl	8008430 <HAL_GPIO_WritePin>
memset(INSMSno,0,30);
 8006824:	4bbf      	ldr	r3, [pc, #764]	; (8006b24 <TestRun+0x42c>)
 8006826:	221e      	movs	r2, #30
 8006828:	2100      	movs	r1, #0
 800682a:	0018      	movs	r0, r3
 800682c:	469b      	mov	fp, r3
 800682e:	f007 ff01 	bl	800e634 <memset>
memset(OUTSMSno,0,30);
 8006832:	4bbd      	ldr	r3, [pc, #756]	; (8006b28 <TestRun+0x430>)
 8006834:	221e      	movs	r2, #30
 8006836:	2100      	movs	r1, #0
 8006838:	0018      	movs	r0, r3
 800683a:	469a      	mov	sl, r3
 800683c:	f007 fefa 	bl	800e634 <memset>
memset(EmgIP,0,50);
 8006840:	4bba      	ldr	r3, [pc, #744]	; (8006b2c <TestRun+0x434>)
 8006842:	2232      	movs	r2, #50	; 0x32
 8006844:	2100      	movs	r1, #0
 8006846:	0018      	movs	r0, r3
 8006848:	9306      	str	r3, [sp, #24]
 800684a:	f007 fef3 	bl	800e634 <memset>
memset(RegIP,0,50);
 800684e:	4bb8      	ldr	r3, [pc, #736]	; (8006b30 <TestRun+0x438>)
 8006850:	2232      	movs	r2, #50	; 0x32
 8006852:	0018      	movs	r0, r3
 8006854:	2100      	movs	r1, #0
 8006856:	4698      	mov	r8, r3
 8006858:	f007 feec 	bl	800e634 <memset>
memset(TracIP,0,50);
 800685c:	4fb5      	ldr	r7, [pc, #724]	; (8006b34 <TestRun+0x43c>)
 800685e:	2232      	movs	r2, #50	; 0x32
 8006860:	2100      	movs	r1, #0
 8006862:	0038      	movs	r0, r7
 8006864:	f007 fee6 	bl	800e634 <memset>
memset(simop,0,25);
 8006868:	4bb3      	ldr	r3, [pc, #716]	; (8006b38 <TestRun+0x440>)
 800686a:	2219      	movs	r2, #25
 800686c:	2100      	movs	r1, #0
 800686e:	0018      	movs	r0, r3
 8006870:	9305      	str	r3, [sp, #20]
 8006872:	f007 fedf 	bl	800e634 <memset>

char* readINSMSno(){
	uint8_t add4[]={0x00, 0x00,0x00};
 8006876:	4eb1      	ldr	r6, [pc, #708]	; (8006b3c <TestRun+0x444>)
	add4[2]=RegNoLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006878:	4db1      	ldr	r5, [pc, #708]	; (8006b40 <TestRun+0x448>)
	uint8_t add4[]={0x00, 0x00,0x00};
 800687a:	8833      	ldrh	r3, [r6, #0]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 800687c:	2264      	movs	r2, #100	; 0x64
	uint8_t add4[]={0x00, 0x00,0x00};
 800687e:	8023      	strh	r3, [r4, #0]
	add4[2]=RegNoLen;
 8006880:	2310      	movs	r3, #16
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006882:	0029      	movs	r1, r5
	add4[2]=RegNoLen;
 8006884:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006886:	0020      	movs	r0, r4
 8006888:	f7fe fb64 	bl	8004f54 <SPI_flash_Read_Data>
strcpy(INSMSno,readINSMSno());
 800688c:	0029      	movs	r1, r5
 800688e:	4658      	mov	r0, fp
 8006890:	f008 f88f 	bl	800e9b2 <strcpy>
	return (char*) dataR;
}

char* readOUTSMSno(){

	uint8_t  add4[]={0x00, 0x00,0x00};
 8006894:	8833      	ldrh	r3, [r6, #0]
	add4[2]=RegNoLen+INSMSLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006896:	223c      	movs	r2, #60	; 0x3c
	uint8_t  add4[]={0x00, 0x00,0x00};
 8006898:	8023      	strh	r3, [r4, #0]
	add4[2]=RegNoLen+INSMSLen;
 800689a:	2374      	movs	r3, #116	; 0x74
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 800689c:	0029      	movs	r1, r5
	add4[2]=RegNoLen+INSMSLen;
 800689e:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 80068a0:	0020      	movs	r0, r4
 80068a2:	f7fe fb57 	bl	8004f54 <SPI_flash_Read_Data>
strcpy(OUTSMSno,readOUTSMSno());
 80068a6:	0029      	movs	r1, r5
 80068a8:	4650      	mov	r0, sl
 80068aa:	f008 f882 	bl	800e9b2 <strcpy>
	return (char*) dataR;
}

char* readEmgIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 80068ae:	88b3      	ldrh	r3, [r6, #4]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 80068b0:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 80068b2:	8023      	strh	r3, [r4, #0]
 80068b4:	79b3      	ldrb	r3, [r6, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 80068b6:	0029      	movs	r1, r5
	uint8_t  add4[]={0x00, 0x01,0x00};
 80068b8:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 80068ba:	0020      	movs	r0, r4
 80068bc:	f7fe fb4a 	bl	8004f54 <SPI_flash_Read_Data>
strcpy(EmgIP,readEmgIP());
 80068c0:	0029      	movs	r1, r5
 80068c2:	9806      	ldr	r0, [sp, #24]
 80068c4:	f008 f875 	bl	800e9b2 <strcpy>
	return (char*) dataR;
}

char* readRegIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 80068c8:	88b3      	ldrh	r3, [r6, #4]
	add4[2]=EmgIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 80068ca:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 80068cc:	8023      	strh	r3, [r4, #0]
	add4[2]=EmgIPLen;
 80068ce:	2328      	movs	r3, #40	; 0x28
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 80068d0:	0029      	movs	r1, r5
	add4[2]=EmgIPLen;
 80068d2:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 80068d4:	0020      	movs	r0, r4
 80068d6:	f7fe fb3d 	bl	8004f54 <SPI_flash_Read_Data>
strcpy(RegIP,readRegIP());
 80068da:	0029      	movs	r1, r5
 80068dc:	4640      	mov	r0, r8
 80068de:	f008 f868 	bl	800e9b2 <strcpy>
	return (char*) dataR;
}

char* readTracIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 80068e2:	88b3      	ldrh	r3, [r6, #4]
	add4[2]=EmgIPLen+RegIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 80068e4:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 80068e6:	8023      	strh	r3, [r4, #0]
	add4[2]=EmgIPLen+RegIPLen;
 80068e8:	2350      	movs	r3, #80	; 0x50
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 80068ea:	0029      	movs	r1, r5
	add4[2]=EmgIPLen+RegIPLen;
 80068ec:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 80068ee:	0020      	movs	r0, r4
 80068f0:	f7fe fb30 	bl	8004f54 <SPI_flash_Read_Data>
strcpy(TracIP,readTracIP());
 80068f4:	0029      	movs	r1, r5
 80068f6:	0038      	movs	r0, r7
 80068f8:	f008 f85b 	bl	800e9b2 <strcpy>
	SendGSMCode("  AT+COPS?");
 80068fc:	4891      	ldr	r0, [pc, #580]	; (8006b44 <TestRun+0x44c>)
 80068fe:	f7fc fdf5 	bl	80034ec <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8006902:	4a91      	ldr	r2, [pc, #580]	; (8006b48 <TestRun+0x450>)
 8006904:	4d78      	ldr	r5, [pc, #480]	; (8006ae8 <TestRun+0x3f0>)
 8006906:	9202      	str	r2, [sp, #8]
 8006908:	4a90      	ldr	r2, [pc, #576]	; (8006b4c <TestRun+0x454>)
 800690a:	4b91      	ldr	r3, [pc, #580]	; (8006b50 <TestRun+0x458>)
 800690c:	4991      	ldr	r1, [pc, #580]	; (8006b54 <TestRun+0x45c>)
 800690e:	9200      	str	r2, [sp, #0]
 8006910:	2000      	movs	r0, #0
 8006912:	220c      	movs	r2, #12
 8006914:	9501      	str	r5, [sp, #4]
 8006916:	f7fc ff7d 	bl	8003814 <GetGSMReply>
 800691a:	0001      	movs	r1, r0
strcpy(simop, GSMSimOperator());
 800691c:	9805      	ldr	r0, [sp, #20]
 800691e:	f008 f848 	bl	800e9b2 <strcpy>
	return HAL_GetTick();
 8006922:	f000 feb7 	bl	8007694 <HAL_GetTick>
	GSMCellInfo();
 8006926:	f7fd fadf 	bl	8003ee8 <GSMCellInfo>
	GetHead();
 800692a:	f7ff fced 	bl	8006308 <GetHead>
	if (debug==122){
 800692e:	4b8a      	ldr	r3, [pc, #552]	; (8006b58 <TestRun+0x460>)
		memset(DataString,0,300);
 8006930:	4e8a      	ldr	r6, [pc, #552]	; (8006b5c <TestRun+0x464>)
	if (debug==122){
 8006932:	469a      	mov	sl, r3
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b7a      	cmp	r3, #122	; 0x7a
 8006938:	d100      	bne.n	800693c <TestRun+0x244>
 800693a:	e164      	b.n	8006c06 <TestRun+0x50e>
 800693c:	4b88      	ldr	r3, [pc, #544]	; (8006b60 <TestRun+0x468>)
 800693e:	930d      	str	r3, [sp, #52]	; 0x34
 8006940:	4b88      	ldr	r3, [pc, #544]	; (8006b64 <TestRun+0x46c>)
 8006942:	469b      	mov	fp, r3
 8006944:	4b88      	ldr	r3, [pc, #544]	; (8006b68 <TestRun+0x470>)
 8006946:	9309      	str	r3, [sp, #36]	; 0x24
 8006948:	4b88      	ldr	r3, [pc, #544]	; (8006b6c <TestRun+0x474>)
 800694a:	9306      	str	r3, [sp, #24]
 800694c:	4b88      	ldr	r3, [pc, #544]	; (8006b70 <TestRun+0x478>)
 800694e:	930a      	str	r3, [sp, #40]	; 0x28
 8006950:	4b88      	ldr	r3, [pc, #544]	; (8006b74 <TestRun+0x47c>)
 8006952:	930b      	str	r3, [sp, #44]	; 0x2c
 8006954:	4b88      	ldr	r3, [pc, #544]	; (8006b78 <TestRun+0x480>)
 8006956:	930c      	str	r3, [sp, #48]	; 0x30
 8006958:	4b88      	ldr	r3, [pc, #544]	; (8006b7c <TestRun+0x484>)
 800695a:	9307      	str	r3, [sp, #28]
	memset(data_LOGIN,0,100);
 800695c:	4d88      	ldr	r5, [pc, #544]	; (8006b80 <TestRun+0x488>)
 800695e:	2264      	movs	r2, #100	; 0x64
 8006960:	2100      	movs	r1, #0
 8006962:	0028      	movs	r0, r5
 8006964:	f007 fe66 	bl	800e634 <memset>
	strcat(data_LOGIN,"$");
 8006968:	0028      	movs	r0, r5
 800696a:	f7f9 fbcd 	bl	8000108 <strlen>
 800696e:	2324      	movs	r3, #36	; 0x24
 8006970:	4698      	mov	r8, r3
 8006972:	542b      	strb	r3, [r5, r0]
 8006974:	3001      	adds	r0, #1
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8006976:	4659      	mov	r1, fp
 8006978:	1828      	adds	r0, r5, r0
 800697a:	f007 ff21 	bl	800e7c0 <stpcpy>
 800697e:	272c      	movs	r7, #44	; 0x2c
	strcat(data_LOGIN,"$");
 8006980:	4643      	mov	r3, r8
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8006982:	7007      	strb	r7, [r0, #0]
	strcat(data_LOGIN,"$");
 8006984:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006986:	9906      	ldr	r1, [sp, #24]
 8006988:	3002      	adds	r0, #2
 800698a:	f007 ff19 	bl	800e7c0 <stpcpy>
	strcat(data_LOGIN,"$");
 800698e:	4642      	mov	r2, r8
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006990:	7007      	strb	r7, [r0, #0]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006992:	4f7c      	ldr	r7, [pc, #496]	; (8006b84 <TestRun+0x48c>)
	strcat(data_LOGIN,"$");
 8006994:	7042      	strb	r2, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006996:	0039      	movs	r1, r7
 8006998:	3002      	adds	r0, #2
 800699a:	f007 ff11 	bl	800e7c0 <stpcpy>
 800699e:	232c      	movs	r3, #44	; 0x2c
 80069a0:	7003      	strb	r3, [r0, #0]
	strcat(data_LOGIN,"$");
 80069a2:	4643      	mov	r3, r8
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",0.0E0.0N,");
 80069a4:	0039      	movs	r1, r7
	strcat(data_LOGIN,"$");
 80069a6:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",0.0E0.0N,");
 80069a8:	3002      	adds	r0, #2
 80069aa:	f007 ff09 	bl	800e7c0 <stpcpy>
 80069ae:	220b      	movs	r2, #11
 80069b0:	4975      	ldr	r1, [pc, #468]	; (8006b88 <TestRun+0x490>)
 80069b2:	f008 f811 	bl	800e9d8 <memcpy>
    while (*s)
 80069b6:	782b      	ldrb	r3, [r5, #0]
    int c = 0;
 80069b8:	2200      	movs	r2, #0
    while (*s)
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <TestRun+0x2d2>
 80069be:	0029      	movs	r1, r5
        c ^= *s++;
 80069c0:	3101      	adds	r1, #1
 80069c2:	405a      	eors	r2, r3
    while (*s)
 80069c4:	780b      	ldrb	r3, [r1, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1fa      	bne.n	80069c0 <TestRun+0x2c8>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 80069ca:	4b70      	ldr	r3, [pc, #448]	; (8006b8c <TestRun+0x494>)
 80069cc:	4f70      	ldr	r7, [pc, #448]	; (8006b90 <TestRun+0x498>)
 80069ce:	0019      	movs	r1, r3
 80069d0:	0038      	movs	r0, r7
 80069d2:	4698      	mov	r8, r3
 80069d4:	f007 fdc2 	bl	800e55c <siprintf>
	strcat(data_LOGIN,checksum);
 80069d8:	0028      	movs	r0, r5
 80069da:	f7f9 fb95 	bl	8000108 <strlen>
 80069de:	0039      	movs	r1, r7
 80069e0:	1828      	adds	r0, r5, r0
 80069e2:	f007 feed 	bl	800e7c0 <stpcpy>
	strcat(data_LOGIN,",*\0");
 80069e6:	9907      	ldr	r1, [sp, #28]
 80069e8:	2203      	movs	r2, #3
 80069ea:	3138      	adds	r1, #56	; 0x38
 80069ec:	f007 fff4 	bl	800e9d8 <memcpy>
    memset(checksum,0,3);
 80069f0:	2203      	movs	r2, #3
 80069f2:	2100      	movs	r1, #0
 80069f4:	0038      	movs	r0, r7
 80069f6:	f007 fe1d 	bl	800e634 <memset>
    memset(DataString,0,300);
 80069fa:	2296      	movs	r2, #150	; 0x96
 80069fc:	2100      	movs	r1, #0
 80069fe:	0052      	lsls	r2, r2, #1
 8006a00:	0030      	movs	r0, r6
 8006a02:	f007 fe17 	bl	800e634 <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8006a06:	0030      	movs	r0, r6
 8006a08:	f7f9 fb7e 	bl	8000108 <strlen>
 8006a0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a0e:	1830      	adds	r0, r6, r0
 8006a10:	252c      	movs	r5, #44	; 0x2c
 8006a12:	f007 fed5 	bl	800e7c0 <stpcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 8006a16:	9906      	ldr	r1, [sp, #24]
	strcat(DataString,Head);strcat(DataString,",");
 8006a18:	7005      	strb	r5, [r0, #0]
	strcat(DataString,IMEI);strcat(DataString,",");
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	f007 fed0 	bl	800e7c0 <stpcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 8006a20:	4659      	mov	r1, fp
	strcat(DataString,IMEI);strcat(DataString,",");
 8006a22:	7005      	strb	r5, [r0, #0]
	strcat(DataString,Regno);strcat(DataString,",");
 8006a24:	3001      	adds	r0, #1
 8006a26:	f007 fecb 	bl	800e7c0 <stpcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
	strcat(DataString,Regno);strcat(DataString,",");
 8006a2c:	7005      	strb	r5, [r0, #0]
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f007 fec6 	bl	800e7c0 <stpcpy>
	strcat(DataString,simop);strcat(DataString,",");
 8006a34:	9905      	ldr	r1, [sp, #20]
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006a36:	7005      	strb	r5, [r0, #0]
	strcat(DataString,simop);strcat(DataString,",");
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f007 fec1 	bl	800e7c0 <stpcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006a3e:	990a      	ldr	r1, [sp, #40]	; 0x28
	strcat(DataString,simop);strcat(DataString,",");
 8006a40:	7005      	strb	r5, [r0, #0]
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006a42:	3001      	adds	r0, #1
 8006a44:	f007 febc 	bl	800e7c0 <stpcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006a4a:	7005      	strb	r5, [r0, #0]
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f007 feb7 	bl	800e7c0 <stpcpy>
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8006a52:	990c      	ldr	r1, [sp, #48]	; 0x30
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006a54:	7005      	strb	r5, [r0, #0]
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8006a56:	3001      	adds	r0, #1
 8006a58:	f007 ffab 	bl	800e9b2 <strcpy>
 8006a5c:	7833      	ldrb	r3, [r6, #0]
    int c = 0;
 8006a5e:	2200      	movs	r2, #0
    while (*s)
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <TestRun+0x378>
 8006a64:	0031      	movs	r1, r6
        c ^= *s++;
 8006a66:	3101      	adds	r1, #1
 8006a68:	405a      	eors	r2, r3
    while (*s)
 8006a6a:	780b      	ldrb	r3, [r1, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1fa      	bne.n	8006a66 <TestRun+0x36e>
    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 8006a70:	4641      	mov	r1, r8
 8006a72:	0038      	movs	r0, r7
 8006a74:	f007 fd72 	bl	800e55c <siprintf>
    strcat(DataString,checksum);
 8006a78:	0030      	movs	r0, r6
 8006a7a:	f7f9 fb45 	bl	8000108 <strlen>
 8006a7e:	0039      	movs	r1, r7
 8006a80:	1830      	adds	r0, r6, r0
 8006a82:	f007 fe9d 	bl	800e7c0 <stpcpy>
    strcat(DataString,",*\0");
 8006a86:	9907      	ldr	r1, [sp, #28]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	3138      	adds	r1, #56	; 0x38
 8006a8c:	f007 ffa4 	bl	800e9d8 <memcpy>
    if (debug==1){
 8006a90:	4653      	mov	r3, sl
 8006a92:	681a      	ldr	r2, [r3, #0]
    if(ServerConnected==1){
 8006a94:	4b3f      	ldr	r3, [pc, #252]	; (8006b94 <TestRun+0x49c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d100      	bne.n	8006a9e <TestRun+0x3a6>
 8006a9c:	e08d      	b.n	8006bba <TestRun+0x4c2>
    	if (debug==1){
 8006a9e:	2a01      	cmp	r2, #1
 8006aa0:	d100      	bne.n	8006aa4 <TestRun+0x3ac>
 8006aa2:	e12b      	b.n	8006cfc <TestRun+0x604>
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 8006aa4:	0030      	movs	r0, r6
 8006aa6:	f7f9 fb2f 	bl	8000108 <strlen>
 8006aaa:	3001      	adds	r0, #1
 8006aac:	b282      	uxth	r2, r0
	if (len<255){
 8006aae:	2afe      	cmp	r2, #254	; 0xfe
 8006ab0:	d800      	bhi.n	8006ab4 <TestRun+0x3bc>
 8006ab2:	e094      	b.n	8006bde <TestRun+0x4e6>
    	RunCnt++;
 8006ab4:	4a38      	ldr	r2, [pc, #224]	; (8006b98 <TestRun+0x4a0>)
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	3301      	adds	r3, #1
    	if(RunCnt>10){
 8006aba:	2b0a      	cmp	r3, #10
 8006abc:	dd00      	ble.n	8006ac0 <TestRun+0x3c8>
    		RunCnt=0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	f000 fde7 	bl	8007694 <HAL_GetTick>
	TimeCount=tic();
 8006ac6:	4b35      	ldr	r3, [pc, #212]	; (8006b9c <TestRun+0x4a4>)
 	seqNo=seqNo+1;
 8006ac8:	9a08      	ldr	r2, [sp, #32]
	TimeCount=tic();
 8006aca:	6018      	str	r0, [r3, #0]
 	seqNo=seqNo+1;
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	6013      	str	r3, [r2, #0]
}
 8006ad2:	e065      	b.n	8006ba0 <TestRun+0x4a8>
 8006ad4:	2000415c 	.word	0x2000415c
 8006ad8:	20004ab8 	.word	0x20004ab8
 8006adc:	20004a84 	.word	0x20004a84
 8006ae0:	08012410 	.word	0x08012410
 8006ae4:	200049e8 	.word	0x200049e8
 8006ae8:	00001388 	.word	0x00001388
 8006aec:	00000a0d 	.word	0x00000a0d
 8006af0:	50000400 	.word	0x50000400
 8006af4:	20001ee0 	.word	0x20001ee0
 8006af8:	20000304 	.word	0x20000304
 8006afc:	20000090 	.word	0x20000090
 8006b00:	20003f6c 	.word	0x20003f6c
 8006b04:	20000308 	.word	0x20000308
 8006b08:	200000b4 	.word	0x200000b4
 8006b0c:	200004bc 	.word	0x200004bc
 8006b10:	20001ea4 	.word	0x20001ea4
 8006b14:	20003fd8 	.word	0x20003fd8
 8006b18:	41300000 	.word	0x41300000
 8006b1c:	40e00000 	.word	0x40e00000
 8006b20:	50000c00 	.word	0x50000c00
 8006b24:	20001e84 	.word	0x20001e84
 8006b28:	20001f00 	.word	0x20001f00
 8006b2c:	200004c8 	.word	0x200004c8
 8006b30:	20003f20 	.word	0x20003f20
 8006b34:	20003fa4 	.word	0x20003fa4
 8006b38:	20004abc 	.word	0x20004abc
 8006b3c:	08012170 	.word	0x08012170
 8006b40:	20003fe4 	.word	0x20003fe4
 8006b44:	080124c0 	.word	0x080124c0
 8006b48:	0801289c 	.word	0x0801289c
 8006b4c:	080124d8 	.word	0x080124d8
 8006b50:	080124cc 	.word	0x080124cc
 8006b54:	080124d0 	.word	0x080124d0
 8006b58:	200000c4 	.word	0x200000c4
 8006b5c:	2000035c 	.word	0x2000035c
 8006b60:	20001e04 	.word	0x20001e04
 8006b64:	20003f54 	.word	0x20003f54
 8006b68:	2000454c 	.word	0x2000454c
 8006b6c:	20001e70 	.word	0x20001e70
 8006b70:	20003f8c 	.word	0x20003f8c
 8006b74:	20004598 	.word	0x20004598
 8006b78:	20000494 	.word	0x20000494
 8006b7c:	080121f0 	.word	0x080121f0
 8006b80:	200040e4 	.word	0x200040e4
 8006b84:	200000b8 	.word	0x200000b8
 8006b88:	08013378 	.word	0x08013378
 8006b8c:	08013384 	.word	0x08013384
 8006b90:	20003fe0 	.word	0x20003fe0
 8006b94:	20003f84 	.word	0x20003f84
 8006b98:	20003f68 	.word	0x20003f68
 8006b9c:	20003fa0 	.word	0x20003fa0
 8006ba0:	b011      	add	sp, #68	; 0x44
 8006ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8006ba4:	46bb      	mov	fp, r7
 8006ba6:	46b2      	mov	sl, r6
 8006ba8:	46a9      	mov	r9, r5
 8006baa:	46a0      	mov	r8, r4
 8006bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 8006bae:	2201      	movs	r2, #1
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4862      	ldr	r0, [pc, #392]	; (8006d3c <TestRun+0x644>)
 8006bb4:	f001 fc3c 	bl	8008430 <HAL_GPIO_WritePin>
}
 8006bb8:	e634      	b.n	8006824 <TestRun+0x12c>
    		ProcessTCPAll( ReadMDataS);
 8006bba:	4c61      	ldr	r4, [pc, #388]	; (8006d40 <TestRun+0x648>)
 8006bbc:	e002      	b.n	8006bc4 <TestRun+0x4cc>
 8006bbe:	0020      	movs	r0, r4
 8006bc0:	f7fd fb5c 	bl	800427c <ProcessTCPAll>
    	while(ReadQdata()>0){
 8006bc4:	f7fe f9fc 	bl	8004fc0 <ReadQdata>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	dcf8      	bgt.n	8006bbe <TestRun+0x4c6>
 8006bcc:	f000 fd62 	bl	8007694 <HAL_GetTick>
     	ProcessTCPAll(DataString);
 8006bd0:	0030      	movs	r0, r6
 8006bd2:	f7fd fb53 	bl	800427c <ProcessTCPAll>
     	RunCnt=0;
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4b5a      	ldr	r3, [pc, #360]	; (8006d44 <TestRun+0x64c>)
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	e771      	b.n	8006ac2 <TestRun+0x3ca>
		SPI_flash_Page_Program(WrtAdd, data,len);
 8006bde:	4c5a      	ldr	r4, [pc, #360]	; (8006d48 <TestRun+0x650>)
 8006be0:	0031      	movs	r1, r6
 8006be2:	0020      	movs	r0, r4
 8006be4:	f7fe f94a 	bl	8004e7c <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8006be8:	7823      	ldrb	r3, [r4, #0]
 8006bea:	7862      	ldrb	r2, [r4, #1]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	189b      	adds	r3, r3, r2
 8006bf0:	78a2      	ldrb	r2, [r4, #2]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	189b      	adds	r3, r3, r2
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 8006bfa:	141a      	asrs	r2, r3, #16
 8006bfc:	7022      	strb	r2, [r4, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8006bfe:	121a      	asrs	r2, r3, #8
 8006c00:	7062      	strb	r2, [r4, #1]
	WrtAdd[2]=(addi)%256;
 8006c02:	70a3      	strb	r3, [r4, #2]
}
 8006c04:	e756      	b.n	8006ab4 <TestRun+0x3bc>
		memset(DataString,0,300);
 8006c06:	2296      	movs	r2, #150	; 0x96
 8006c08:	2100      	movs	r1, #0
 8006c0a:	0052      	lsls	r2, r2, #1
 8006c0c:	0030      	movs	r0, r6
 8006c0e:	f007 fd11 	bl	800e634 <memset>
		strcat(DataString,"Head:");
 8006c12:	0030      	movs	r0, r6
 8006c14:	f7f9 fa78 	bl	8000108 <strlen>
 8006c18:	0007      	movs	r7, r0
 8006c1a:	2205      	movs	r2, #5
 8006c1c:	494b      	ldr	r1, [pc, #300]	; (8006d4c <TestRun+0x654>)
 8006c1e:	1830      	adds	r0, r6, r0
 8006c20:	f007 feda 	bl	800e9d8 <memcpy>
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 8006c24:	494a      	ldr	r1, [pc, #296]	; (8006d50 <TestRun+0x658>)
		strcat(DataString,"Head:");
 8006c26:	1d78      	adds	r0, r7, #5
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 8006c28:	1830      	adds	r0, r6, r0
 8006c2a:	910d      	str	r1, [sp, #52]	; 0x34
 8006c2c:	f007 fdc8 	bl	800e7c0 <stpcpy>
 8006c30:	0007      	movs	r7, r0
 8006c32:	2208      	movs	r2, #8
 8006c34:	4947      	ldr	r1, [pc, #284]	; (8006d54 <TestRun+0x65c>)
 8006c36:	f007 fecf 	bl	800e9d8 <memcpy>
		strcat(DataString,Regno);strcat(DataString,"\nGPSDS:");
 8006c3a:	4b47      	ldr	r3, [pc, #284]	; (8006d58 <TestRun+0x660>)
 8006c3c:	1df8      	adds	r0, r7, #7
 8006c3e:	0019      	movs	r1, r3
 8006c40:	469b      	mov	fp, r3
 8006c42:	f007 fdbd 	bl	800e7c0 <stpcpy>
 8006c46:	0007      	movs	r7, r0
 8006c48:	2208      	movs	r2, #8
 8006c4a:	4944      	ldr	r1, [pc, #272]	; (8006d5c <TestRun+0x664>)
 8006c4c:	f007 fec4 	bl	800e9d8 <memcpy>
		strcat(DataString,gpsDataRet);strcat(DataString,"\nIMEI:");
 8006c50:	4943      	ldr	r1, [pc, #268]	; (8006d60 <TestRun+0x668>)
 8006c52:	1df8      	adds	r0, r7, #7
 8006c54:	9109      	str	r1, [sp, #36]	; 0x24
 8006c56:	f007 fdb3 	bl	800e7c0 <stpcpy>
 8006c5a:	0007      	movs	r7, r0
 8006c5c:	2206      	movs	r2, #6
 8006c5e:	4941      	ldr	r1, [pc, #260]	; (8006d64 <TestRun+0x66c>)
 8006c60:	f007 feba 	bl	800e9d8 <memcpy>
		strcat(DataString,IMEI);strcat(DataString,"\nSIMOP:");
 8006c64:	4940      	ldr	r1, [pc, #256]	; (8006d68 <TestRun+0x670>)
 8006c66:	1db8      	adds	r0, r7, #6
 8006c68:	9106      	str	r1, [sp, #24]
 8006c6a:	f007 fda9 	bl	800e7c0 <stpcpy>
 8006c6e:	0007      	movs	r7, r0
 8006c70:	2208      	movs	r2, #8
 8006c72:	493e      	ldr	r1, [pc, #248]	; (8006d6c <TestRun+0x674>)
 8006c74:	f007 feb0 	bl	800e9d8 <memcpy>
		strcat(DataString,simop);strcat(DataString,"\nStratusString:");
 8006c78:	9905      	ldr	r1, [sp, #20]
 8006c7a:	1df8      	adds	r0, r7, #7
 8006c7c:	f007 fda0 	bl	800e7c0 <stpcpy>
 8006c80:	0007      	movs	r7, r0
 8006c82:	2210      	movs	r2, #16
 8006c84:	493a      	ldr	r1, [pc, #232]	; (8006d70 <TestRun+0x678>)
 8006c86:	f007 fea7 	bl	800e9d8 <memcpy>
		strcat(DataString,StatusStrng);strcat(DataString,"\nGsminfo:");
 8006c8a:	0038      	movs	r0, r7
 8006c8c:	4939      	ldr	r1, [pc, #228]	; (8006d74 <TestRun+0x67c>)
 8006c8e:	300f      	adds	r0, #15
 8006c90:	910a      	str	r1, [sp, #40]	; 0x28
 8006c92:	f007 fd95 	bl	800e7c0 <stpcpy>
 8006c96:	0007      	movs	r7, r0
 8006c98:	2209      	movs	r2, #9
 8006c9a:	4937      	ldr	r1, [pc, #220]	; (8006d78 <TestRun+0x680>)
 8006c9c:	f007 fe9c 	bl	800e9d8 <memcpy>
		strcat(DataString,gsminfo);strcat(DataString,"\nDig_io:");
 8006ca0:	0038      	movs	r0, r7
 8006ca2:	4936      	ldr	r1, [pc, #216]	; (8006d7c <TestRun+0x684>)
 8006ca4:	3009      	adds	r0, #9
 8006ca6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ca8:	f007 fd8a 	bl	800e7c0 <stpcpy>
 8006cac:	0007      	movs	r7, r0
 8006cae:	2208      	movs	r2, #8
 8006cb0:	4933      	ldr	r1, [pc, #204]	; (8006d80 <TestRun+0x688>)
 8006cb2:	f007 fe91 	bl	800e9d8 <memcpy>
		strcat(DataString,Dig_io);strcat(DataString,",\n\0");
 8006cb6:	0038      	movs	r0, r7
 8006cb8:	4932      	ldr	r1, [pc, #200]	; (8006d84 <TestRun+0x68c>)
 8006cba:	3008      	adds	r0, #8
 8006cbc:	910c      	str	r1, [sp, #48]	; 0x30
 8006cbe:	f007 fd7f 	bl	800e7c0 <stpcpy>
 8006cc2:	4b31      	ldr	r3, [pc, #196]	; (8006d88 <TestRun+0x690>)
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	0019      	movs	r1, r3
 8006cc8:	3134      	adds	r1, #52	; 0x34
 8006cca:	9307      	str	r3, [sp, #28]
 8006ccc:	f007 fe84 	bl	800e9d8 <memcpy>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	220c      	movs	r2, #12
 8006cd4:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006cd6:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006cd8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006cda:	f7f9 fa15 	bl	8000108 <strlen>
 8006cde:	002b      	movs	r3, r5
 8006ce0:	0031      	movs	r1, r6
 8006ce2:	b282      	uxth	r2, r0
 8006ce4:	4648      	mov	r0, r9
 8006ce6:	f003 fdcf 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006cea:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <TestRun+0x694>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006cec:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8006cee:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006cf0:	0021      	movs	r1, r4
 8006cf2:	230a      	movs	r3, #10
 8006cf4:	4648      	mov	r0, r9
 8006cf6:	f003 fdc7 	bl	800a888 <HAL_UART_Transmit>
}
 8006cfa:	e62f      	b.n	800695c <TestRun+0x264>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	320b      	adds	r2, #11
 8006d02:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8006d04:	4648      	mov	r0, r9
 8006d06:	4922      	ldr	r1, [pc, #136]	; (8006d90 <TestRun+0x698>)
 8006d08:	4b22      	ldr	r3, [pc, #136]	; (8006d94 <TestRun+0x69c>)
 8006d0a:	321b      	adds	r2, #27
 8006d0c:	f003 fdbc 	bl	800a888 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8006d10:	4b1e      	ldr	r3, [pc, #120]	; (8006d8c <TestRun+0x694>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006d12:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8006d14:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8006d16:	0021      	movs	r1, r4
 8006d18:	230a      	movs	r3, #10
 8006d1a:	4648      	mov	r0, r9
 8006d1c:	f003 fdb4 	bl	800a888 <HAL_UART_Transmit>
}
 8006d20:	e6c0      	b.n	8006aa4 <TestRun+0x3ac>
		Debug_Tx("GSMUART error rebooting device");
 8006d22:	481d      	ldr	r0, [pc, #116]	; (8006d98 <TestRun+0x6a0>)
 8006d24:	f7fc fab0 	bl	8003288 <Debug_Tx>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006d28:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d2c:	4b1b      	ldr	r3, [pc, #108]	; (8006d9c <TestRun+0x6a4>)
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <TestRun+0x6a8>)
 8006d30:	60da      	str	r2, [r3, #12]
 8006d32:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006d36:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8006d38:	e7fd      	b.n	8006d36 <TestRun+0x63e>
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	50000c00 	.word	0x50000c00
 8006d40:	20002f20 	.word	0x20002f20
 8006d44:	20003f68 	.word	0x20003f68
 8006d48:	200000c0 	.word	0x200000c0
 8006d4c:	08013328 	.word	0x08013328
 8006d50:	20001e04 	.word	0x20001e04
 8006d54:	08013330 	.word	0x08013330
 8006d58:	20003f54 	.word	0x20003f54
 8006d5c:	08013338 	.word	0x08013338
 8006d60:	2000454c 	.word	0x2000454c
 8006d64:	08013340 	.word	0x08013340
 8006d68:	20001e70 	.word	0x20001e70
 8006d6c:	08013348 	.word	0x08013348
 8006d70:	08013350 	.word	0x08013350
 8006d74:	20003f8c 	.word	0x20003f8c
 8006d78:	08013360 	.word	0x08013360
 8006d7c:	20004598 	.word	0x20004598
 8006d80:	0801336c 	.word	0x0801336c
 8006d84:	20000494 	.word	0x20000494
 8006d88:	080121f0 	.word	0x080121f0
 8006d8c:	00000a0d 	.word	0x00000a0d
 8006d90:	0801338c 	.word	0x0801338c
 8006d94:	00001388 	.word	0x00001388
 8006d98:	08013308 	.word	0x08013308
 8006d9c:	e000ed00 	.word	0xe000ed00
 8006da0:	05fa0004 	.word	0x05fa0004

08006da4 <StartDefaultTask>:
{
 8006da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da6:	46c6      	mov	lr, r8
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8006da8:	27fa      	movs	r7, #250	; 0xfa
 8006daa:	2516      	movs	r5, #22
 8006dac:	2601      	movs	r6, #1
 8006dae:	b500      	push	{lr}
 8006db0:	4c79      	ldr	r4, [pc, #484]	; (8006f98 <StartDefaultTask+0x1f4>)
 8006db2:	b086      	sub	sp, #24
 8006db4:	446d      	add	r5, sp
 8006db6:	00bf      	lsls	r7, r7, #2
 8006db8:	2301      	movs	r3, #1
 8006dba:	9500      	str	r5, [sp, #0]
 8006dbc:	2275      	movs	r2, #117	; 0x75
 8006dbe:	21d0      	movs	r1, #208	; 0xd0
 8006dc0:	0020      	movs	r0, r4
 8006dc2:	9702      	str	r7, [sp, #8]
 8006dc4:	9601      	str	r6, [sp, #4]
 8006dc6:	f001 fdb3 	bl	8008930 <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8006dca:	782b      	ldrb	r3, [r5, #0]
		Data = 0;
 8006dcc:	2517      	movs	r5, #23
 8006dce:	446d      	add	r5, sp
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8006dd0:	2b68      	cmp	r3, #104	; 0x68
 8006dd2:	d100      	bne.n	8006dd6 <StartDefaultTask+0x32>
 8006dd4:	e0af      	b.n	8006f36 <StartDefaultTask+0x192>
		Data = 0;
 8006dd6:	2300      	movs	r3, #0
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8006dd8:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 8006dda:	702b      	strb	r3, [r5, #0]
 8006ddc:	4698      	mov	r8, r3
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8006dde:	21d0      	movs	r1, #208	; 0xd0
 8006de0:	3301      	adds	r3, #1
 8006de2:	0020      	movs	r0, r4
 8006de4:	9702      	str	r7, [sp, #8]
 8006de6:	9601      	str	r6, [sp, #4]
 8006de8:	9500      	str	r5, [sp, #0]
 8006dea:	f001 fc67 	bl	80086bc <HAL_I2C_Mem_Write>
				Data = 0x07;
 8006dee:	2307      	movs	r3, #7
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8006df0:	2219      	movs	r2, #25
				Data = 0x07;
 8006df2:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8006df4:	21d0      	movs	r1, #208	; 0xd0
 8006df6:	3b06      	subs	r3, #6
 8006df8:	0020      	movs	r0, r4
 8006dfa:	9702      	str	r7, [sp, #8]
 8006dfc:	9601      	str	r6, [sp, #4]
 8006dfe:	9500      	str	r5, [sp, #0]
 8006e00:	f001 fc5c 	bl	80086bc <HAL_I2C_Mem_Write>
				Data = 0x00;
 8006e04:	4643      	mov	r3, r8
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8006e06:	221c      	movs	r2, #28
				Data = 0x00;
 8006e08:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8006e0a:	21d0      	movs	r1, #208	; 0xd0
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	0020      	movs	r0, r4
 8006e10:	9702      	str	r7, [sp, #8]
 8006e12:	9601      	str	r6, [sp, #4]
 8006e14:	9500      	str	r5, [sp, #0]
 8006e16:	f001 fc51 	bl	80086bc <HAL_I2C_Mem_Write>
				Data = 0x00;
 8006e1a:	4643      	mov	r3, r8
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8006e1c:	221b      	movs	r2, #27
				Data = 0x00;
 8006e1e:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8006e20:	21d0      	movs	r1, #208	; 0xd0
 8006e22:	0020      	movs	r0, r4
 8006e24:	9702      	str	r7, [sp, #8]
 8006e26:	9601      	str	r6, [sp, #4]
 8006e28:	9500      	str	r5, [sp, #0]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	f001 fc46 	bl	80086bc <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 8006e30:	485a      	ldr	r0, [pc, #360]	; (8006f9c <StartDefaultTask+0x1f8>)
 8006e32:	f7fc fa29 	bl	8003288 <Debug_Tx>
	ACC_GYRO_data[0]=0;
 8006e36:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8006e38:	2180      	movs	r1, #128	; 0x80
 8006e3a:	20a0      	movs	r0, #160	; 0xa0
 8006e3c:	4b58      	ldr	r3, [pc, #352]	; (8006fa0 <StartDefaultTask+0x1fc>)
 8006e3e:	0209      	lsls	r1, r1, #8
 8006e40:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 8006e42:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 8006e44:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 8006e46:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 8006e48:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8006e4a:	615a      	str	r2, [r3, #20]
 8006e4c:	05c0      	lsls	r0, r0, #23
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f001 faee 	bl	8008430 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8006e54:	2201      	movs	r2, #1
 8006e56:	2140      	movs	r1, #64	; 0x40
 8006e58:	4852      	ldr	r0, [pc, #328]	; (8006fa4 <StartDefaultTask+0x200>)
 8006e5a:	f001 fae9 	bl	8008430 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 8006e5e:	2201      	movs	r2, #1
 8006e60:	2180      	movs	r1, #128	; 0x80
 8006e62:	4850      	ldr	r0, [pc, #320]	; (8006fa4 <StartDefaultTask+0x200>)
 8006e64:	f001 fae4 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 8006e68:	2204      	movs	r2, #4
 8006e6a:	494f      	ldr	r1, [pc, #316]	; (8006fa8 <StartDefaultTask+0x204>)
 8006e6c:	484f      	ldr	r0, [pc, #316]	; (8006fac <StartDefaultTask+0x208>)
 8006e6e:	f000 ff51 	bl	8007d14 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 8006e72:	2201      	movs	r2, #1
 8006e74:	2120      	movs	r1, #32
 8006e76:	484e      	ldr	r0, [pc, #312]	; (8006fb0 <StartDefaultTask+0x20c>)
 8006e78:	f001 fada 	bl	8008430 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	20a0      	movs	r0, #160	; 0xa0
 8006e80:	2201      	movs	r2, #1
 8006e82:	0209      	lsls	r1, r1, #8
 8006e84:	05c0      	lsls	r0, r0, #23
 8006e86:	f001 fad3 	bl	8008430 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	2140      	movs	r1, #64	; 0x40
 8006e8e:	4845      	ldr	r0, [pc, #276]	; (8006fa4 <StartDefaultTask+0x200>)
 8006e90:	f001 face 	bl	8008430 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 8006e94:	2201      	movs	r2, #1
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	4842      	ldr	r0, [pc, #264]	; (8006fa4 <StartDefaultTask+0x200>)
 8006e9a:	f001 fac9 	bl	8008430 <HAL_GPIO_WritePin>
GSMBuff[0]=0;
 8006e9e:	2300      	movs	r3, #0
 memset((char*)gpsData,0,1000);
 8006ea0:	22fa      	movs	r2, #250	; 0xfa
GSMBuff[0]=0;
 8006ea2:	4c44      	ldr	r4, [pc, #272]	; (8006fb4 <StartDefaultTask+0x210>)
 memset((char*)gpsData,0,1000);
 8006ea4:	4d44      	ldr	r5, [pc, #272]	; (8006fb8 <StartDefaultTask+0x214>)
GSMBuff[0]=0;
 8006ea6:	7023      	strb	r3, [r4, #0]
 memset((char*)gpsData,0,1000);
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	0028      	movs	r0, r5
 8006eac:	0092      	lsls	r2, r2, #2
 8006eae:	f007 fbc1 	bl	800e634 <memset>
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006eb2:	260c      	movs	r6, #12
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006eb4:	22e1      	movs	r2, #225	; 0xe1
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006eb6:	4841      	ldr	r0, [pc, #260]	; (8006fbc <StartDefaultTask+0x218>)
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006eb8:	0029      	movs	r1, r5
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006eba:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006ebc:	0092      	lsls	r2, r2, #2
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006ebe:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006ec0:	f003 feb0 	bl	800ac24 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006ec4:	483e      	ldr	r0, [pc, #248]	; (8006fc0 <StartDefaultTask+0x21c>)
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006ec6:	0021      	movs	r1, r4
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006ec8:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006eca:	2201      	movs	r2, #1
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006ecc:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006ece:	f003 fea9 	bl	800ac24 <HAL_UART_Receive_DMA>
initGPS();
 8006ed2:	f7fe fa89 	bl	80053e8 <initGPS>
initFirstRun();
 8006ed6:	f7ff f891 	bl	8005ffc <initFirstRun>
InitMEMQ();
 8006eda:	f7fe f909 	bl	80050f0 <InitMEMQ>
HAL_Delay(10000);
 8006ede:	4839      	ldr	r0, [pc, #228]	; (8006fc4 <StartDefaultTask+0x220>)
 8006ee0:	f000 fbde 	bl	80076a0 <HAL_Delay>
InitGSM();
 8006ee4:	f7fd fc6c 	bl	80047c0 <InitGSM>
TestMEM();
 8006ee8:	f7fe fb1c 	bl	8005524 <TestMEM>
 memset(IMEI,0,20);
 8006eec:	4c36      	ldr	r4, [pc, #216]	; (8006fc8 <StartDefaultTask+0x224>)
 8006eee:	2214      	movs	r2, #20
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	0020      	movs	r0, r4
 8006ef4:	f007 fb9e 	bl	800e634 <memset>
 memset(Regno,0,20);
 8006ef8:	4d34      	ldr	r5, [pc, #208]	; (8006fcc <StartDefaultTask+0x228>)
 8006efa:	2214      	movs	r2, #20
 8006efc:	2100      	movs	r1, #0
 8006efe:	0028      	movs	r0, r5
 8006f00:	f007 fb98 	bl	800e634 <memset>
strcpy(IMEI,GSMIMEI());
 8006f04:	f7fc fe5a 	bl	8003bbc <GSMIMEI>
 8006f08:	0001      	movs	r1, r0
 8006f0a:	0020      	movs	r0, r4
 8006f0c:	f007 fd51 	bl	800e9b2 <strcpy>
 strcpy(Regno,readRegNo());
 8006f10:	f7fe fa14 	bl	800533c <readRegNo>
 8006f14:	0001      	movs	r1, r0
 8006f16:	0028      	movs	r0, r5
 8006f18:	f007 fd4b 	bl	800e9b2 <strcpy>
 Debug_Tx("IMEI:");
 8006f1c:	482c      	ldr	r0, [pc, #176]	; (8006fd0 <StartDefaultTask+0x22c>)
 8006f1e:	f7fc f9b3 	bl	8003288 <Debug_Tx>
	  Debug_Tx(IMEI);
 8006f22:	0020      	movs	r0, r4
 8006f24:	f7fc f9b0 	bl	8003288 <Debug_Tx>
StartTCPConnection();
 8006f28:	f7fc ff5a 	bl	8003de0 <StartTCPConnection>
  GSMSigQuality();
 8006f2c:	f7fc fd8a 	bl	8003a44 <GSMSigQuality>
 TestRun();
 8006f30:	f7ff fbe2 	bl	80066f8 <TestRun>
while (1){//DownloadFile();
 8006f34:	e7fa      	b.n	8006f2c <StartDefaultTask+0x188>
		Data = 0;
 8006f36:	2300      	movs	r3, #0
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8006f38:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 8006f3a:	702b      	strb	r3, [r5, #0]
 8006f3c:	4698      	mov	r8, r3
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8006f3e:	21d0      	movs	r1, #208	; 0xd0
 8006f40:	0033      	movs	r3, r6
 8006f42:	0020      	movs	r0, r4
 8006f44:	9702      	str	r7, [sp, #8]
 8006f46:	9601      	str	r6, [sp, #4]
 8006f48:	9500      	str	r5, [sp, #0]
 8006f4a:	f001 fbb7 	bl	80086bc <HAL_I2C_Mem_Write>
		Data = 0x07;
 8006f4e:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8006f50:	2219      	movs	r2, #25
		Data = 0x07;
 8006f52:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8006f54:	21d0      	movs	r1, #208	; 0xd0
 8006f56:	0033      	movs	r3, r6
 8006f58:	0020      	movs	r0, r4
 8006f5a:	9702      	str	r7, [sp, #8]
 8006f5c:	9601      	str	r6, [sp, #4]
 8006f5e:	9500      	str	r5, [sp, #0]
 8006f60:	f001 fbac 	bl	80086bc <HAL_I2C_Mem_Write>
		Data = 0x00;
 8006f64:	4643      	mov	r3, r8
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8006f66:	221c      	movs	r2, #28
		Data = 0x00;
 8006f68:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8006f6a:	21d0      	movs	r1, #208	; 0xd0
 8006f6c:	0033      	movs	r3, r6
 8006f6e:	0020      	movs	r0, r4
 8006f70:	9702      	str	r7, [sp, #8]
 8006f72:	9601      	str	r6, [sp, #4]
 8006f74:	9500      	str	r5, [sp, #0]
 8006f76:	f001 fba1 	bl	80086bc <HAL_I2C_Mem_Write>
		Data = 0x00;
 8006f7a:	4643      	mov	r3, r8
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8006f7c:	221b      	movs	r2, #27
		Data = 0x00;
 8006f7e:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8006f80:	21d0      	movs	r1, #208	; 0xd0
 8006f82:	0033      	movs	r3, r6
 8006f84:	0020      	movs	r0, r4
 8006f86:	9702      	str	r7, [sp, #8]
 8006f88:	9601      	str	r6, [sp, #4]
 8006f8a:	9500      	str	r5, [sp, #0]
 8006f8c:	f001 fb96 	bl	80086bc <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 8006f90:	4810      	ldr	r0, [pc, #64]	; (8006fd4 <StartDefaultTask+0x230>)
 8006f92:	f7fc f979 	bl	8003288 <Debug_Tx>
 8006f96:	e74e      	b.n	8006e36 <StartDefaultTask+0x92>
 8006f98:	200047bc 	.word	0x200047bc
 8006f9c:	080133c8 	.word	0x080133c8
 8006fa0:	200002ec 	.word	0x200002ec
 8006fa4:	50000800 	.word	0x50000800
 8006fa8:	20000308 	.word	0x20000308
 8006fac:	200045e8 	.word	0x200045e8
 8006fb0:	50000400 	.word	0x50000400
 8006fb4:	2000054c 	.word	0x2000054c
 8006fb8:	20004164 	.word	0x20004164
 8006fbc:	20004954 	.word	0x20004954
 8006fc0:	200048c0 	.word	0x200048c0
 8006fc4:	00002710 	.word	0x00002710
 8006fc8:	20001e70 	.word	0x20001e70
 8006fcc:	20003f54 	.word	0x20003f54
 8006fd0:	080133d8 	.word	0x080133d8
 8006fd4:	080133b4 	.word	0x080133b4

08006fd8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006fd8:	b672      	cpsid	i
  while (1)
 8006fda:	e7fe      	b.n	8006fda <Error_Handler+0x2>

08006fdc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <HAL_MspInit+0x40>)
{
 8006fe0:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fe2:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8006fe4:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fe6:	4311      	orrs	r1, r2
 8006fe8:	6419      	str	r1, [r3, #64]	; 0x40
 8006fea:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8006fec:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fee:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ff0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ff2:	9200      	str	r2, [sp, #0]
 8006ff4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ff8:	0549      	lsls	r1, r1, #21
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007000:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8007002:	400b      	ands	r3, r1
 8007004:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007006:	2103      	movs	r1, #3
 8007008:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 800700a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800700c:	f000 fedc 	bl	8007dc8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007010:	20c0      	movs	r0, #192	; 0xc0
 8007012:	00c0      	lsls	r0, r0, #3
 8007014:	f000 fb56 	bl	80076c4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007018:	b003      	add	sp, #12
 800701a:	bd00      	pop	{pc}
 800701c:	40021000 	.word	0x40021000

08007020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	0004      	movs	r4, r0
 8007024:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007026:	2214      	movs	r2, #20
 8007028:	2100      	movs	r1, #0
 800702a:	a803      	add	r0, sp, #12
 800702c:	f007 fb02 	bl	800e634 <memset>
  if(hadc->Instance==ADC1)
 8007030:	4b26      	ldr	r3, [pc, #152]	; (80070cc <HAL_ADC_MspInit+0xac>)
 8007032:	6822      	ldr	r2, [r4, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d001      	beq.n	800703c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007038:	b008      	add	sp, #32
 800703a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	4b24      	ldr	r3, [pc, #144]	; (80070d0 <HAL_ADC_MspInit+0xb0>)
 8007040:	0349      	lsls	r1, r1, #13
 8007042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007044:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 8007046:	430a      	orrs	r2, r1
 8007048:	641a      	str	r2, [r3, #64]	; 0x40
 800704a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 800704c:	2503      	movs	r5, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 800704e:	400a      	ands	r2, r1
 8007050:	9200      	str	r2, [sp, #0]
 8007052:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007054:	2201      	movs	r2, #1
 8007056:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007058:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800705a:	4311      	orrs	r1, r2
 800705c:	6359      	str	r1, [r3, #52]	; 0x34
 800705e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007060:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007062:	400a      	ands	r2, r1
 8007064:	9201      	str	r2, [sp, #4]
 8007066:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007068:	2202      	movs	r2, #2
 800706a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800706c:	4311      	orrs	r1, r2
 800706e:	6359      	str	r1, [r3, #52]	; 0x34
 8007070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007072:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007074:	401a      	ands	r2, r3
 8007076:	9202      	str	r2, [sp, #8]
 8007078:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 800707a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800707c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800707e:	f001 f8cb 	bl	8008218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8007082:	4b14      	ldr	r3, [pc, #80]	; (80070d4 <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007084:	4814      	ldr	r0, [pc, #80]	; (80070d8 <HAL_ADC_MspInit+0xb8>)
 8007086:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8007088:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800708a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800708c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800708e:	f001 f8c3 	bl	8008218 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8007092:	4d12      	ldr	r5, [pc, #72]	; (80070dc <HAL_ADC_MspInit+0xbc>)
 8007094:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007096:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8007098:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800709a:	2305      	movs	r3, #5
 800709c:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800709e:	337b      	adds	r3, #123	; 0x7b
 80070a0:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80070a2:	3381      	adds	r3, #129	; 0x81
 80070a4:	33ff      	adds	r3, #255	; 0xff
 80070a6:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80070ae:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070b0:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80070b2:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80070b4:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80070b6:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80070b8:	f000 fee4 	bl	8007e84 <HAL_DMA_Init>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d102      	bne.n	80070c6 <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80070c0:	6525      	str	r5, [r4, #80]	; 0x50
 80070c2:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80070c4:	e7b8      	b.n	8007038 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80070c6:	f7ff ff87 	bl	8006fd8 <Error_Handler>
 80070ca:	e7f9      	b.n	80070c0 <HAL_ADC_MspInit+0xa0>
 80070cc:	40012400 	.word	0x40012400
 80070d0:	40021000 	.word	0x40021000
 80070d4:	00000402 	.word	0x00000402
 80070d8:	50000400 	.word	0x50000400
 80070dc:	2000464c 	.word	0x2000464c
 80070e0:	40020008 	.word	0x40020008

080070e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80070e4:	b510      	push	{r4, lr}
 80070e6:	0004      	movs	r4, r0
 80070e8:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ea:	2214      	movs	r2, #20
 80070ec:	2100      	movs	r1, #0
 80070ee:	a802      	add	r0, sp, #8
 80070f0:	f007 faa0 	bl	800e634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80070f4:	221c      	movs	r2, #28
 80070f6:	2100      	movs	r1, #0
 80070f8:	a807      	add	r0, sp, #28
 80070fa:	f007 fa9b 	bl	800e634 <memset>
  if(hi2c->Instance==I2C1)
 80070fe:	4b18      	ldr	r3, [pc, #96]	; (8007160 <HAL_I2C_MspInit+0x7c>)
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d001      	beq.n	800710a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007106:	b00e      	add	sp, #56	; 0x38
 8007108:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800710a:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800710c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800710e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007110:	f002 f97a 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8007114:	2800      	cmp	r0, #0
 8007116:	d120      	bne.n	800715a <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007118:	2302      	movs	r3, #2
 800711a:	4c12      	ldr	r4, [pc, #72]	; (8007164 <HAL_I2C_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800711c:	4812      	ldr	r0, [pc, #72]	; (8007168 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800711e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007120:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007122:	431a      	orrs	r2, r3
 8007124:	6362      	str	r2, [r4, #52]	; 0x34
 8007126:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007128:	4013      	ands	r3, r2
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800712e:	23c0      	movs	r3, #192	; 0xc0
 8007130:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007132:	3bae      	subs	r3, #174	; 0xae
 8007134:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007136:	3b11      	subs	r3, #17
 8007138:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800713a:	2300      	movs	r3, #0
 800713c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800713e:	3306      	adds	r3, #6
 8007140:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007142:	f001 f869 	bl	8008218 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800714a:	0392      	lsls	r2, r2, #14
 800714c:	4313      	orrs	r3, r2
 800714e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007152:	4013      	ands	r3, r2
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	9b01      	ldr	r3, [sp, #4]
}
 8007158:	e7d5      	b.n	8007106 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800715a:	f7ff ff3d 	bl	8006fd8 <Error_Handler>
 800715e:	e7db      	b.n	8007118 <HAL_I2C_MspInit+0x34>
 8007160:	40005400 	.word	0x40005400
 8007164:	40021000 	.word	0x40021000
 8007168:	50000400 	.word	0x50000400

0800716c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800716c:	b510      	push	{r4, lr}
 800716e:	0004      	movs	r4, r0
 8007170:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007172:	2214      	movs	r2, #20
 8007174:	2100      	movs	r1, #0
 8007176:	a803      	add	r0, sp, #12
 8007178:	f007 fa5c 	bl	800e634 <memset>
  if(hspi->Instance==SPI1)
 800717c:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <HAL_SPI_MspInit+0x54>)
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d001      	beq.n	8007188 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007184:	b008      	add	sp, #32
 8007186:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007188:	2180      	movs	r1, #128	; 0x80
 800718a:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <HAL_SPI_MspInit+0x58>)
 800718c:	0149      	lsls	r1, r1, #5
 800718e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007190:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007192:	430a      	orrs	r2, r1
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
 8007196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007198:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 800719a:	400a      	ands	r2, r1
 800719c:	9201      	str	r2, [sp, #4]
 800719e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071a0:	2201      	movs	r2, #1
 80071a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071a4:	4311      	orrs	r1, r2
 80071a6:	6359      	str	r1, [r3, #52]	; 0x34
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071aa:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071ac:	401a      	ands	r2, r3
 80071ae:	9202      	str	r2, [sp, #8]
 80071b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80071b2:	23e0      	movs	r3, #224	; 0xe0
 80071b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b6:	3bde      	subs	r3, #222	; 0xde
 80071b8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ba:	f001 f82d 	bl	8008218 <HAL_GPIO_Init>
}
 80071be:	e7e1      	b.n	8007184 <HAL_SPI_MspInit+0x18>
 80071c0:	40013000 	.word	0x40013000
 80071c4:	40021000 	.word	0x40021000

080071c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071c8:	b500      	push	{lr}
  if(htim_base->Instance==TIM6)
 80071ca:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <HAL_TIM_Base_MspInit+0x34>)
 80071cc:	6802      	ldr	r2, [r0, #0]
{
 80071ce:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80071d4:	b003      	add	sp, #12
 80071d6:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071d8:	2310      	movs	r3, #16
 80071da:	4a09      	ldr	r2, [pc, #36]	; (8007200 <HAL_TIM_Base_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80071dc:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071de:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80071e0:	4319      	orrs	r1, r3
 80071e2:	63d1      	str	r1, [r2, #60]	; 0x3c
 80071e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80071e6:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071e8:	4013      	ands	r3, r2
 80071ea:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80071ec:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071ee:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80071f0:	f000 fdea 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80071f4:	2011      	movs	r0, #17
 80071f6:	f000 fe19 	bl	8007e2c <HAL_NVIC_EnableIRQ>
}
 80071fa:	e7eb      	b.n	80071d4 <HAL_TIM_Base_MspInit+0xc>
 80071fc:	40001000 	.word	0x40001000
 8007200:	40021000 	.word	0x40021000

08007204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	0004      	movs	r4, r0
 8007208:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800720a:	2214      	movs	r2, #20
 800720c:	2100      	movs	r1, #0
 800720e:	a806      	add	r0, sp, #24
 8007210:	f007 fa10 	bl	800e634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007214:	221c      	movs	r2, #28
 8007216:	2100      	movs	r1, #0
 8007218:	a80b      	add	r0, sp, #44	; 0x2c
 800721a:	f007 fa0b 	bl	800e634 <memset>
  if(huart->Instance==USART1)
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	4a6f      	ldr	r2, [pc, #444]	; (80073e0 <HAL_UART_MspInit+0x1dc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d008      	beq.n	8007238 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8007226:	4a6f      	ldr	r2, [pc, #444]	; (80073e4 <HAL_UART_MspInit+0x1e0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d04c      	beq.n	80072c6 <HAL_UART_MspInit+0xc2>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800722c:	4a6e      	ldr	r2, [pc, #440]	; (80073e8 <HAL_UART_MspInit+0x1e4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d100      	bne.n	8007234 <HAL_UART_MspInit+0x30>
 8007232:	e08c      	b.n	800734e <HAL_UART_MspInit+0x14a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007234:	b012      	add	sp, #72	; 0x48
 8007236:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007238:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800723a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800723c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800723e:	f002 f8e3 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 8007242:	2800      	cmp	r0, #0
 8007244:	d000      	beq.n	8007248 <HAL_UART_MspInit+0x44>
 8007246:	e0bf      	b.n	80073c8 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007248:	2180      	movs	r1, #128	; 0x80
 800724a:	4b68      	ldr	r3, [pc, #416]	; (80073ec <HAL_UART_MspInit+0x1e8>)
 800724c:	01c9      	lsls	r1, r1, #7
 800724e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007250:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8007252:	430a      	orrs	r2, r1
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
 8007256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007258:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800725a:	400a      	ands	r2, r1
 800725c:	9200      	str	r2, [sp, #0]
 800725e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007260:	2201      	movs	r2, #1
 8007262:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007264:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007266:	4311      	orrs	r1, r2
 8007268:	6359      	str	r1, [r3, #52]	; 0x34
 800726a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800726c:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800726e:	4013      	ands	r3, r2
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 8007274:	23c0      	movs	r3, #192	; 0xc0
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727a:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007280:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007282:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007284:	f000 ffc8 	bl	8008218 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8007288:	4d59      	ldr	r5, [pc, #356]	; (80073f0 <HAL_UART_MspInit+0x1ec>)
 800728a:	4b5a      	ldr	r3, [pc, #360]	; (80073f4 <HAL_UART_MspInit+0x1f0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800728c:	0028      	movs	r0, r5
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800728e:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8007290:	2332      	movs	r3, #50	; 0x32
 8007292:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007294:	334e      	adds	r3, #78	; 0x4e
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007296:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007298:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800729a:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800729c:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800729e:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80072a0:	61ee      	str	r6, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80072a2:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80072a4:	f000 fdee 	bl	8007e84 <HAL_DMA_Init>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d000      	beq.n	80072ae <HAL_UART_MspInit+0xaa>
 80072ac:	e089      	b.n	80073c2 <HAL_UART_MspInit+0x1be>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80072ae:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80072b0:	2200      	movs	r2, #0
 80072b2:	2103      	movs	r1, #3
 80072b4:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80072b6:	50e5      	str	r5, [r4, r3]
 80072b8:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80072ba:	f000 fd85 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80072be:	201b      	movs	r0, #27
 80072c0:	f000 fdb4 	bl	8007e2c <HAL_NVIC_EnableIRQ>
 80072c4:	e7b6      	b.n	8007234 <HAL_UART_MspInit+0x30>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80072c6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072c8:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80072ca:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072cc:	f002 f89c 	bl	8009408 <HAL_RCCEx_PeriphCLKConfig>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d17c      	bne.n	80073ce <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 80072d4:	2180      	movs	r1, #128	; 0x80
 80072d6:	4b45      	ldr	r3, [pc, #276]	; (80073ec <HAL_UART_MspInit+0x1e8>)
 80072d8:	0289      	lsls	r1, r1, #10
 80072da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072dc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80072de:	430a      	orrs	r2, r1
 80072e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80072e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e4:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80072e6:	400a      	ands	r2, r1
 80072e8:	9202      	str	r2, [sp, #8]
 80072ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ec:	2201      	movs	r2, #1
 80072ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072f0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072f2:	4311      	orrs	r1, r2
 80072f4:	6359      	str	r1, [r3, #52]	; 0x34
 80072f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072f8:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072fa:	4013      	ands	r3, r2
 80072fc:	9303      	str	r3, [sp, #12]
 80072fe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8007300:	230c      	movs	r3, #12
 8007302:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007304:	3b0a      	subs	r3, #10
 8007306:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007308:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800730a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800730c:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800730e:	f000 ff83 	bl	8008218 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8007312:	4d39      	ldr	r5, [pc, #228]	; (80073f8 <HAL_UART_MspInit+0x1f4>)
 8007314:	4b39      	ldr	r3, [pc, #228]	; (80073fc <HAL_UART_MspInit+0x1f8>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007316:	0028      	movs	r0, r5
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8007318:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800731a:	2334      	movs	r3, #52	; 0x34
 800731c:	606b      	str	r3, [r5, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800731e:	334c      	adds	r3, #76	; 0x4c
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007320:	60ae      	str	r6, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007322:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007324:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007326:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007328:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800732a:	61ee      	str	r6, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800732c:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800732e:	f000 fda9 	bl	8007e84 <HAL_DMA_Init>
 8007332:	2800      	cmp	r0, #0
 8007334:	d14e      	bne.n	80073d4 <HAL_UART_MspInit+0x1d0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007336:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007338:	2200      	movs	r2, #0
 800733a:	2103      	movs	r1, #3
 800733c:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800733e:	50e5      	str	r5, [r4, r3]
 8007340:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007342:	f000 fd41 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007346:	201c      	movs	r0, #28
 8007348:	f000 fd70 	bl	8007e2c <HAL_NVIC_EnableIRQ>
 800734c:	e772      	b.n	8007234 <HAL_UART_MspInit+0x30>
    __HAL_RCC_USART3_CLK_ENABLE();
 800734e:	2180      	movs	r1, #128	; 0x80
 8007350:	4b26      	ldr	r3, [pc, #152]	; (80073ec <HAL_UART_MspInit+0x1e8>)
 8007352:	02c9      	lsls	r1, r1, #11
 8007354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007356:	482a      	ldr	r0, [pc, #168]	; (8007400 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8007358:	430a      	orrs	r2, r1
 800735a:	63da      	str	r2, [r3, #60]	; 0x3c
 800735c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800735e:	400a      	ands	r2, r1
 8007360:	9204      	str	r2, [sp, #16]
 8007362:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007364:	2202      	movs	r2, #2
 8007366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007368:	4311      	orrs	r1, r2
 800736a:	6359      	str	r1, [r3, #52]	; 0x34
 800736c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800736e:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007370:	4013      	ands	r3, r2
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8007376:	2305      	movs	r3, #5
 8007378:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800737a:	3b01      	subs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737c:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800737e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007380:	f000 ff4a 	bl	8008218 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8007384:	4d1f      	ldr	r5, [pc, #124]	; (8007404 <HAL_UART_MspInit+0x200>)
 8007386:	4b20      	ldr	r3, [pc, #128]	; (8007408 <HAL_UART_MspInit+0x204>)
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007388:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel4;
 800738a:	602b      	str	r3, [r5, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800738c:	2337      	movs	r3, #55	; 0x37
 800738e:	606b      	str	r3, [r5, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007390:	3b27      	subs	r3, #39	; 0x27
 8007392:	60ab      	str	r3, [r5, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007394:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8007396:	0028      	movs	r0, r5
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007398:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800739a:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800739c:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800739e:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80073a0:	61eb      	str	r3, [r5, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80073a2:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80073a4:	f000 fd6e 	bl	8007e84 <HAL_DMA_Init>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d116      	bne.n	80073da <HAL_UART_MspInit+0x1d6>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80073ac:	2200      	movs	r2, #0
 80073ae:	2103      	movs	r1, #3
 80073b0:	201d      	movs	r0, #29
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80073b2:	67e5      	str	r5, [r4, #124]	; 0x7c
 80073b4:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80073b6:	f000 fd07 	bl	8007dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80073ba:	201d      	movs	r0, #29
 80073bc:	f000 fd36 	bl	8007e2c <HAL_NVIC_EnableIRQ>
}
 80073c0:	e738      	b.n	8007234 <HAL_UART_MspInit+0x30>
      Error_Handler();
 80073c2:	f7ff fe09 	bl	8006fd8 <Error_Handler>
 80073c6:	e772      	b.n	80072ae <HAL_UART_MspInit+0xaa>
      Error_Handler();
 80073c8:	f7ff fe06 	bl	8006fd8 <Error_Handler>
 80073cc:	e73c      	b.n	8007248 <HAL_UART_MspInit+0x44>
      Error_Handler();
 80073ce:	f7ff fe03 	bl	8006fd8 <Error_Handler>
 80073d2:	e77f      	b.n	80072d4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80073d4:	f7ff fe00 	bl	8006fd8 <Error_Handler>
 80073d8:	e7ad      	b.n	8007336 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80073da:	f7ff fdfd 	bl	8006fd8 <Error_Handler>
 80073de:	e7e5      	b.n	80073ac <HAL_UART_MspInit+0x1a8>
 80073e0:	40013800 	.word	0x40013800
 80073e4:	40004400 	.word	0x40004400
 80073e8:	40004800 	.word	0x40004800
 80073ec:	40021000 	.word	0x40021000
 80073f0:	200046a8 	.word	0x200046a8
 80073f4:	4002001c 	.word	0x4002001c
 80073f8:	20004704 	.word	0x20004704
 80073fc:	40020030 	.word	0x40020030
 8007400:	50000400 	.word	0x50000400
 8007404:	20004760 	.word	0x20004760
 8007408:	40020044 	.word	0x40020044

0800740c <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800740c:	2180      	movs	r1, #128	; 0x80
 800740e:	4b21      	ldr	r3, [pc, #132]	; (8007494 <HAL_InitTick+0x88>)
{
 8007410:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007414:	0109      	lsls	r1, r1, #4
 8007416:	430a      	orrs	r2, r1
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 800741c:	b086      	sub	sp, #24
  __HAL_RCC_TIM1_CLK_ENABLE();
 800741e:	400b      	ands	r3, r1
 8007420:	9301      	str	r3, [sp, #4]
{
 8007422:	0006      	movs	r6, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007424:	4669      	mov	r1, sp
 8007426:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007428:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800742a:	f001 ffd3 	bl	80093d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800742e:	9b05      	ldr	r3, [sp, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d117      	bne.n	8007464 <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007434:	f001 ffba 	bl	80093ac <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007438:	4c17      	ldr	r4, [pc, #92]	; (8007498 <HAL_InitTick+0x8c>)
 800743a:	4b18      	ldr	r3, [pc, #96]	; (800749c <HAL_InitTick+0x90>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800743c:	4918      	ldr	r1, [pc, #96]	; (80074a0 <HAL_InitTick+0x94>)
  htim1.Instance = TIM1;
 800743e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007440:	4b18      	ldr	r3, [pc, #96]	; (80074a4 <HAL_InitTick+0x98>)
 8007442:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007444:	f7f8 fe7c 	bl	8000140 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8007448:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800744a:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800744c:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 800744e:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8007450:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007452:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007454:	61a3      	str	r3, [r4, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8007456:	f002 fd71 	bl	8009f3c <HAL_TIM_Base_Init>
 800745a:	1e05      	subs	r5, r0, #0
  if (status == HAL_OK)
 800745c:	d006      	beq.n	800746c <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 800745e:	0028      	movs	r0, r5
 8007460:	b006      	add	sp, #24
 8007462:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007464:	f001 ffa2 	bl	80093ac <HAL_RCC_GetPCLK1Freq>
 8007468:	0040      	lsls	r0, r0, #1
 800746a:	e7e5      	b.n	8007438 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim1);
 800746c:	0020      	movs	r0, r4
 800746e:	f002 fc25 	bl	8009cbc <HAL_TIM_Base_Start_IT>
 8007472:	1e05      	subs	r5, r0, #0
    if (status == HAL_OK)
 8007474:	d1f3      	bne.n	800745e <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8007476:	200d      	movs	r0, #13
 8007478:	f000 fcd8 	bl	8007e2c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800747c:	2e03      	cmp	r6, #3
 800747e:	d901      	bls.n	8007484 <HAL_InitTick+0x78>
        status = HAL_ERROR;
 8007480:	2501      	movs	r5, #1
 8007482:	e7ec      	b.n	800745e <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8007484:	2200      	movs	r2, #0
 8007486:	0031      	movs	r1, r6
 8007488:	200d      	movs	r0, #13
 800748a:	f000 fc9d 	bl	8007dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <HAL_InitTick+0x9c>)
 8007490:	601e      	str	r6, [r3, #0]
 8007492:	e7e4      	b.n	800745e <HAL_InitTick+0x52>
 8007494:	40021000 	.word	0x40021000
 8007498:	20004adc 	.word	0x20004adc
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	000f4240 	.word	0x000f4240
 80074a4:	000003e7 	.word	0x000003e7
 80074a8:	200000ec 	.word	0x200000ec

080074ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80074ac:	e7fe      	b.n	80074ac <NMI_Handler>
 80074ae:	46c0      	nop			; (mov r8, r8)

080074b0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074b0:	e7fe      	b.n	80074b0 <HardFault_Handler>
 80074b2:	46c0      	nop			; (mov r8, r8)

080074b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80074b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80074b6:	4802      	ldr	r0, [pc, #8]	; (80074c0 <DMA1_Channel1_IRQHandler+0xc>)
 80074b8:	f000 fe20 	bl	80080fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	2000464c 	.word	0x2000464c

080074c4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80074c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80074c6:	4803      	ldr	r0, [pc, #12]	; (80074d4 <DMA1_Channel2_3_IRQHandler+0x10>)
 80074c8:	f000 fe18 	bl	80080fc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80074cc:	4802      	ldr	r0, [pc, #8]	; (80074d8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80074ce:	f000 fe15 	bl	80080fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80074d2:	bd10      	pop	{r4, pc}
 80074d4:	200046a8 	.word	0x200046a8
 80074d8:	20004704 	.word	0x20004704

080074dc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 80074dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80074de:	4803      	ldr	r0, [pc, #12]	; (80074ec <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 80074e0:	f000 fe0c 	bl	80080fc <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 80074e4:	4802      	ldr	r0, [pc, #8]	; (80074f0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 80074e6:	f000 fe65 	bl	80081b4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 80074ea:	bd10      	pop	{r4, pc}
 80074ec:	20004760 	.word	0x20004760
 80074f0:	2000464c 	.word	0x2000464c

080074f4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80074f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80074f6:	4802      	ldr	r0, [pc, #8]	; (8007500 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80074f8:	f002 fc1a 	bl	8009d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	20004adc 	.word	0x20004adc

08007504 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8007504:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007506:	4802      	ldr	r0, [pc, #8]	; (8007510 <TIM6_IRQHandler+0xc>)
 8007508:	f002 fc12 	bl	8009d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800750c:	bd10      	pop	{r4, pc}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	20004874 	.word	0x20004874

08007514 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007514:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007516:	4802      	ldr	r0, [pc, #8]	; (8007520 <USART1_IRQHandler+0xc>)
 8007518:	f002 fe02 	bl	800a120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800751c:	bd10      	pop	{r4, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	200048c0 	.word	0x200048c0

08007524 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007524:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007526:	4802      	ldr	r0, [pc, #8]	; (8007530 <USART2_IRQHandler+0xc>)
 8007528:	f002 fdfa 	bl	800a120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800752c:	bd10      	pop	{r4, pc}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	20004954 	.word	0x20004954

08007534 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8007534:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007536:	4802      	ldr	r0, [pc, #8]	; (8007540 <USART3_4_IRQHandler+0xc>)
 8007538:	f002 fdf2 	bl	800a120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800753c:	bd10      	pop	{r4, pc}
 800753e:	46c0      	nop			; (mov r8, r8)
 8007540:	200049e8 	.word	0x200049e8

08007544 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8007544:	2001      	movs	r0, #1
 8007546:	4770      	bx	lr

08007548 <_kill>:

int _kill(int pid, int sig)
{
 8007548:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800754a:	f007 fa05 	bl	800e958 <__errno>
 800754e:	2316      	movs	r3, #22
 8007550:	6003      	str	r3, [r0, #0]
  return -1;
 8007552:	2001      	movs	r0, #1
}
 8007554:	4240      	negs	r0, r0
 8007556:	bd10      	pop	{r4, pc}

08007558 <_exit>:

void _exit (int status)
{
 8007558:	b510      	push	{r4, lr}
  errno = EINVAL;
 800755a:	f007 f9fd 	bl	800e958 <__errno>
 800755e:	2316      	movs	r3, #22
 8007560:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8007562:	e7fe      	b.n	8007562 <_exit+0xa>

08007564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007568:	dd07      	ble.n	800757a <_read+0x16>
 800756a:	000c      	movs	r4, r1
 800756c:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 800756e:	e000      	b.n	8007572 <_read+0xe>
 8007570:	bf00      	nop
 8007572:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007574:	3401      	adds	r4, #1
 8007576:	42ac      	cmp	r4, r5
 8007578:	d1f9      	bne.n	800756e <_read+0xa>
  }

  return len;
}
 800757a:	0030      	movs	r0, r6
 800757c:	bd70      	pop	{r4, r5, r6, pc}
 800757e:	46c0      	nop			; (mov r8, r8)

08007580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007584:	dd07      	ble.n	8007596 <_write+0x16>
 8007586:	000c      	movs	r4, r1
 8007588:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 800758a:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800758c:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 800758e:	e000      	b.n	8007592 <_write+0x12>
 8007590:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007592:	42ac      	cmp	r4, r5
 8007594:	d1f9      	bne.n	800758a <_write+0xa>
  }
  return len;
}
 8007596:	0030      	movs	r0, r6
 8007598:	bd70      	pop	{r4, r5, r6, pc}
 800759a:	46c0      	nop			; (mov r8, r8)

0800759c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800759c:	2001      	movs	r0, #1
}
 800759e:	4240      	negs	r0, r0
 80075a0:	4770      	bx	lr
 80075a2:	46c0      	nop			; (mov r8, r8)

080075a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	019b      	lsls	r3, r3, #6
  return 0;
}
 80075a8:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80075aa:	604b      	str	r3, [r1, #4]
}
 80075ac:	4770      	bx	lr
 80075ae:	46c0      	nop			; (mov r8, r8)

080075b0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80075b0:	2001      	movs	r0, #1
 80075b2:	4770      	bx	lr

080075b4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80075b4:	2000      	movs	r0, #0
 80075b6:	4770      	bx	lr

080075b8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075b8:	490c      	ldr	r1, [pc, #48]	; (80075ec <_sbrk+0x34>)
 80075ba:	4a0d      	ldr	r2, [pc, #52]	; (80075f0 <_sbrk+0x38>)
{
 80075bc:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075be:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075c0:	490c      	ldr	r1, [pc, #48]	; (80075f4 <_sbrk+0x3c>)
{
 80075c2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d004      	beq.n	80075d4 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075ca:	18c3      	adds	r3, r0, r3
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d806      	bhi.n	80075de <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80075d0:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80075d2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80075d4:	4808      	ldr	r0, [pc, #32]	; (80075f8 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80075d6:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80075d8:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d9f8      	bls.n	80075d0 <_sbrk+0x18>
    errno = ENOMEM;
 80075de:	f007 f9bb 	bl	800e958 <__errno>
 80075e2:	230c      	movs	r3, #12
 80075e4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80075e6:	2001      	movs	r0, #1
 80075e8:	4240      	negs	r0, r0
 80075ea:	e7f2      	b.n	80075d2 <_sbrk+0x1a>
 80075ec:	00000400 	.word	0x00000400
 80075f0:	20009000 	.word	0x20009000
 80075f4:	20004b28 	.word	0x20004b28
 80075f8:	20006658 	.word	0x20006658

080075fc <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80075fc:	4770      	bx	lr
 80075fe:	46c0      	nop			; (mov r8, r8)

08007600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007600:	480d      	ldr	r0, [pc, #52]	; (8007638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007602:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007604:	f7ff fffa 	bl	80075fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007608:	480c      	ldr	r0, [pc, #48]	; (800763c <LoopForever+0x6>)
  ldr r1, =_edata
 800760a:	490d      	ldr	r1, [pc, #52]	; (8007640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800760c:	4a0d      	ldr	r2, [pc, #52]	; (8007644 <LoopForever+0xe>)
  movs r3, #0
 800760e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007610:	e002      	b.n	8007618 <LoopCopyDataInit>

08007612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007616:	3304      	adds	r3, #4

08007618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800761a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800761c:	d3f9      	bcc.n	8007612 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800761e:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007620:	4c0a      	ldr	r4, [pc, #40]	; (800764c <LoopForever+0x16>)
  movs r3, #0
 8007622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007624:	e001      	b.n	800762a <LoopFillZerobss>

08007626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007628:	3204      	adds	r2, #4

0800762a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800762a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800762c:	d3fb      	bcc.n	8007626 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800762e:	f007 f999 	bl	800e964 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007632:	f7fe f82d 	bl	8005690 <main>

08007636 <LoopForever>:

LoopForever:
  b LoopForever
 8007636:	e7fe      	b.n	8007636 <LoopForever>
  ldr   r0, =_estack
 8007638:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800763c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007640:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8007644:	08013a30 	.word	0x08013a30
  ldr r2, =_sbss
 8007648:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800764c:	20006658 	.word	0x20006658

08007650 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007650:	e7fe      	b.n	8007650 <ADC1_IRQHandler>
	...

08007654 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007654:	2380      	movs	r3, #128	; 0x80
 8007656:	4a08      	ldr	r2, [pc, #32]	; (8007678 <HAL_Init+0x24>)
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	6811      	ldr	r1, [r2, #0]
{
 800765c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800765e:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007660:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007662:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007664:	f7ff fed2 	bl	800740c <HAL_InitTick>
 8007668:	1e04      	subs	r4, r0, #0
 800766a:	d002      	beq.n	8007672 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800766c:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800766e:	0020      	movs	r0, r4
 8007670:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8007672:	f7ff fcb3 	bl	8006fdc <HAL_MspInit>
 8007676:	e7fa      	b.n	800766e <HAL_Init+0x1a>
 8007678:	40022000 	.word	0x40022000

0800767c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800767c:	4a03      	ldr	r2, [pc, #12]	; (800768c <HAL_IncTick+0x10>)
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <HAL_IncTick+0x14>)
 8007680:	6811      	ldr	r1, [r2, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	185b      	adds	r3, r3, r1
 8007686:	6013      	str	r3, [r2, #0]
}
 8007688:	4770      	bx	lr
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	20004b2c 	.word	0x20004b2c
 8007690:	200000e8 	.word	0x200000e8

08007694 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007694:	4b01      	ldr	r3, [pc, #4]	; (800769c <HAL_GetTick+0x8>)
 8007696:	6818      	ldr	r0, [r3, #0]
}
 8007698:	4770      	bx	lr
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	20004b2c 	.word	0x20004b2c

080076a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80076a4:	f7ff fff6 	bl	8007694 <HAL_GetTick>
 80076a8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076aa:	1c63      	adds	r3, r4, #1
 80076ac:	d002      	beq.n	80076b4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80076ae:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <HAL_Delay+0x20>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80076b4:	f7ff ffee 	bl	8007694 <HAL_GetTick>
 80076b8:	1b40      	subs	r0, r0, r5
 80076ba:	42a0      	cmp	r0, r4
 80076bc:	d3fa      	bcc.n	80076b4 <HAL_Delay+0x14>
  {
  }
}
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	200000e8 	.word	0x200000e8

080076c4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80076c4:	4a03      	ldr	r2, [pc, #12]	; (80076d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 80076c6:	4904      	ldr	r1, [pc, #16]	; (80076d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 80076c8:	6813      	ldr	r3, [r2, #0]
 80076ca:	400b      	ands	r3, r1
 80076cc:	4303      	orrs	r3, r0
 80076ce:	6013      	str	r3, [r2, #0]
}
 80076d0:	4770      	bx	lr
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	40010000 	.word	0x40010000
 80076d8:	fffff9ff 	.word	0xfffff9ff

080076dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80076dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076de:	46d6      	mov	lr, sl
 80076e0:	464f      	mov	r7, r9
 80076e2:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80076e4:	2300      	movs	r3, #0
{
 80076e6:	b5c0      	push	{r6, r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 80076ec:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80076ee:	d100      	bne.n	80076f2 <HAL_ADC_Init+0x16>
 80076f0:	e0d8      	b.n	80078a4 <HAL_ADC_Init+0x1c8>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80076f2:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80076f4:	2d00      	cmp	r5, #0
 80076f6:	d100      	bne.n	80076fa <HAL_ADC_Init+0x1e>
 80076f8:	e0a8      	b.n	800784c <HAL_ADC_Init+0x170>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80076fa:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80076fc:	6825      	ldr	r5, [r4, #0]
 80076fe:	055b      	lsls	r3, r3, #21
 8007700:	68aa      	ldr	r2, [r5, #8]
 8007702:	421a      	tst	r2, r3
 8007704:	d115      	bne.n	8007732 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8007706:	68aa      	ldr	r2, [r5, #8]
 8007708:	497d      	ldr	r1, [pc, #500]	; (8007900 <HAL_ADC_Init+0x224>)
 800770a:	400a      	ands	r2, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007710:	4b7c      	ldr	r3, [pc, #496]	; (8007904 <HAL_ADC_Init+0x228>)
 8007712:	497d      	ldr	r1, [pc, #500]	; (8007908 <HAL_ADC_Init+0x22c>)
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f7f8 fd13 	bl	8000140 <__udivsi3>
 800771a:	3001      	adds	r0, #1
 800771c:	0040      	lsls	r0, r0, #1
 800771e:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	3b01      	subs	r3, #1
 800772a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800772c:	9b01      	ldr	r3, [sp, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f9      	bne.n	8007726 <HAL_ADC_Init+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007732:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007734:	2000      	movs	r0, #0
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	d400      	bmi.n	800773c <HAL_ADC_Init+0x60>
 800773a:	e07a      	b.n	8007832 <HAL_ADC_Init+0x156>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800773c:	68ab      	ldr	r3, [r5, #8]
 800773e:	075b      	lsls	r3, r3, #29
 8007740:	d50b      	bpl.n	800775a <HAL_ADC_Init+0x7e>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007742:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007744:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8007746:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800774a:	4313      	orrs	r3, r2
 800774c:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 800774e:	b002      	add	sp, #8
 8007750:	bce0      	pop	{r5, r6, r7}
 8007752:	46ba      	mov	sl, r7
 8007754:	46b1      	mov	r9, r6
 8007756:	46a8      	mov	r8, r5
 8007758:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800775a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800775c:	06db      	lsls	r3, r3, #27
 800775e:	d4f1      	bmi.n	8007744 <HAL_ADC_Init+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8007760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007762:	4a6a      	ldr	r2, [pc, #424]	; (800790c <HAL_ADC_Init+0x230>)
 8007764:	4013      	ands	r3, r2
 8007766:	3206      	adds	r2, #6
 8007768:	32ff      	adds	r2, #255	; 0xff
 800776a:	4313      	orrs	r3, r2
 800776c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800776e:	68ab      	ldr	r3, [r5, #8]
 8007770:	07db      	lsls	r3, r3, #31
 8007772:	d471      	bmi.n	8007858 <HAL_ADC_Init+0x17c>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007774:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007776:	68a2      	ldr	r2, [r4, #8]
 8007778:	1e7b      	subs	r3, r7, #1
 800777a:	419f      	sbcs	r7, r3
 800777c:	68e3      	ldr	r3, [r4, #12]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800777e:	7ea6      	ldrb	r6, [r4, #26]
 8007780:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007782:	7e23      	ldrb	r3, [r4, #24]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007784:	6921      	ldr	r1, [r4, #16]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007786:	039b      	lsls	r3, r3, #14
 8007788:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800778a:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800778c:	033f      	lsls	r7, r7, #12
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800778e:	03db      	lsls	r3, r3, #15
 8007790:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007792:	0373      	lsls	r3, r6, #13
 8007794:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007796:	2900      	cmp	r1, #0
 8007798:	da00      	bge.n	800779c <HAL_ADC_Init+0xc0>
 800779a:	e09f      	b.n	80078dc <HAL_ADC_Init+0x200>
 800779c:	2380      	movs	r3, #128	; 0x80
 800779e:	039b      	lsls	r3, r3, #14
 80077a0:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80077a2:	232c      	movs	r3, #44	; 0x2c
 80077a4:	5ce3      	ldrb	r3, [r4, r3]
 80077a6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80077a8:	4313      	orrs	r3, r2
 80077aa:	433b      	orrs	r3, r7
 80077ac:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80077ae:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80077b0:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80077b2:	5de2      	ldrb	r2, [r4, r7]
 80077b4:	2a01      	cmp	r2, #1
 80077b6:	d100      	bne.n	80077ba <HAL_ADC_Init+0xde>
 80077b8:	e094      	b.n	80078e4 <HAL_ADC_Init+0x208>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80077ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077bc:	2a00      	cmp	r2, #0
 80077be:	d005      	beq.n	80077cc <HAL_ADC_Init+0xf0>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80077c0:	26e0      	movs	r6, #224	; 0xe0
 80077c2:	0076      	lsls	r6, r6, #1
 80077c4:	4032      	ands	r2, r6
 80077c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077c8:	4332      	orrs	r2, r6
 80077ca:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 80077cc:	273c      	movs	r7, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 80077ce:	68ea      	ldr	r2, [r5, #12]
 80077d0:	4e4f      	ldr	r6, [pc, #316]	; (8007910 <HAL_ADC_Init+0x234>)
 80077d2:	4032      	ands	r2, r6
 80077d4:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80077d6:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 80077d8:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80077da:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 80077dc:	5de7      	ldrb	r7, [r4, r7]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80077de:	0fb3      	lsrs	r3, r6, #30
 80077e0:	079b      	lsls	r3, r3, #30
 80077e2:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80077e4:	46bc      	mov	ip, r7
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80077e6:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80077e8:	2f01      	cmp	r7, #1
 80077ea:	d109      	bne.n	8007800 <HAL_ADC_Init+0x124>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80077ec:	6c67      	ldr	r7, [r4, #68]	; 0x44
 80077ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077f0:	433b      	orrs	r3, r7
 80077f2:	431a      	orrs	r2, r3
 80077f4:	4653      	mov	r3, sl
 80077f6:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80077f8:	433a      	orrs	r2, r7
 80077fa:	431a      	orrs	r2, r3
 80077fc:	4663      	mov	r3, ip
 80077fe:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8007800:	692b      	ldr	r3, [r5, #16]
 8007802:	4f44      	ldr	r7, [pc, #272]	; (8007914 <HAL_ADC_Init+0x238>)
 8007804:	403b      	ands	r3, r7
 8007806:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007808:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 800780a:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800780c:	0073      	lsls	r3, r6, #1
 800780e:	085b      	lsrs	r3, r3, #1
 8007810:	05d2      	lsls	r2, r2, #23
 8007812:	4293      	cmp	r3, r2
 8007814:	d021      	beq.n	800785a <HAL_ADC_Init+0x17e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	061b      	lsls	r3, r3, #24
 800781a:	429e      	cmp	r6, r3
 800781c:	d01d      	beq.n	800785a <HAL_ADC_Init+0x17e>
        MODIFY_REG(ADC1_COMMON->CCR,
 800781e:	4a3e      	ldr	r2, [pc, #248]	; (8007918 <HAL_ADC_Init+0x23c>)
 8007820:	4f3e      	ldr	r7, [pc, #248]	; (800791c <HAL_ADC_Init+0x240>)
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	403b      	ands	r3, r7
 8007826:	27f0      	movs	r7, #240	; 0xf0
 8007828:	03bf      	lsls	r7, r7, #14
 800782a:	403e      	ands	r6, r7
 800782c:	4333      	orrs	r3, r6
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	e013      	b.n	800785a <HAL_ADC_Init+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007832:	2210      	movs	r2, #16
 8007834:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8007836:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007838:	4313      	orrs	r3, r2
 800783a:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800783c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800783e:	3a0f      	subs	r2, #15
 8007840:	4313      	orrs	r3, r2
 8007842:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007844:	68ab      	ldr	r3, [r5, #8]
 8007846:	075b      	lsls	r3, r3, #29
 8007848:	d587      	bpl.n	800775a <HAL_ADC_Init+0x7e>
 800784a:	e77a      	b.n	8007742 <HAL_ADC_Init+0x66>
    HAL_ADC_MspInit(hadc);
 800784c:	f7ff fbe8 	bl	8007020 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8007850:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8007852:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8007854:	54e5      	strb	r5, [r4, r3]
 8007856:	e750      	b.n	80076fa <HAL_ADC_Init+0x1e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007858:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 800785a:	2607      	movs	r6, #7
 800785c:	2770      	movs	r7, #112	; 0x70
 800785e:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007860:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007862:	43b3      	bics	r3, r6
 8007864:	4313      	orrs	r3, r2
 8007866:	616b      	str	r3, [r5, #20]
 8007868:	696e      	ldr	r6, [r5, #20]
 800786a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800786c:	43be      	bics	r6, r7
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	4333      	orrs	r3, r6
 8007872:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007874:	2900      	cmp	r1, #0
 8007876:	d117      	bne.n	80078a8 <HAL_ADC_Init+0x1cc>
      SET_BIT(hadc->Instance->CHSELR,
 8007878:	2310      	movs	r3, #16
 800787a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800787c:	425b      	negs	r3, r3
 800787e:	430b      	orrs	r3, r1
 8007880:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007882:	2307      	movs	r3, #7
 8007884:	6969      	ldr	r1, [r5, #20]
 8007886:	400b      	ands	r3, r1
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007888:	429a      	cmp	r2, r3
 800788a:	d01e      	beq.n	80078ca <HAL_ADC_Init+0x1ee>
      ADC_STATE_CLR_SET(hadc->State,
 800788c:	2212      	movs	r2, #18
 800788e:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8007890:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8007892:	4393      	bics	r3, r2
 8007894:	3a02      	subs	r2, #2
 8007896:	4313      	orrs	r3, r2
 8007898:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800789a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800789c:	3a0f      	subs	r2, #15
 800789e:	4313      	orrs	r3, r2
 80078a0:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 80078a2:	e754      	b.n	800774e <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 80078a4:	2001      	movs	r0, #1
 80078a6:	e752      	b.n	800774e <HAL_ADC_Init+0x72>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80078a8:	2380      	movs	r3, #128	; 0x80
 80078aa:	039b      	lsls	r3, r3, #14
 80078ac:	4299      	cmp	r1, r3
 80078ae:	d1e8      	bne.n	8007882 <HAL_ADC_Init+0x1a6>
      MODIFY_REG(hadc->Instance->CHSELR,
 80078b0:	211c      	movs	r1, #28
 80078b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80078b4:	69e3      	ldr	r3, [r4, #28]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4019      	ands	r1, r3
 80078bc:	2310      	movs	r3, #16
 80078be:	425b      	negs	r3, r3
 80078c0:	408b      	lsls	r3, r1
 80078c2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80078c4:	430b      	orrs	r3, r1
 80078c6:	62ab      	str	r3, [r5, #40]	; 0x28
 80078c8:	e7db      	b.n	8007882 <HAL_ADC_Init+0x1a6>
      ADC_CLEAR_ERRORCODE(hadc);
 80078ca:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80078cc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80078ce:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80078d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078d2:	4393      	bics	r3, r2
 80078d4:	3a02      	subs	r2, #2
 80078d6:	4313      	orrs	r3, r2
 80078d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80078da:	e738      	b.n	800774e <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80078dc:	004b      	lsls	r3, r1, #1
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	469c      	mov	ip, r3
 80078e2:	e75e      	b.n	80077a2 <HAL_ADC_Init+0xc6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80078e4:	2e00      	cmp	r6, #0
 80078e6:	d103      	bne.n	80078f0 <HAL_ADC_Init+0x214>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80078e8:	2280      	movs	r2, #128	; 0x80
 80078ea:	0252      	lsls	r2, r2, #9
 80078ec:	4313      	orrs	r3, r2
 80078ee:	e764      	b.n	80077ba <HAL_ADC_Init+0xde>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078f0:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80078f2:	433e      	orrs	r6, r7
 80078f4:	65a6      	str	r6, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078f6:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 80078f8:	4332      	orrs	r2, r6
 80078fa:	65e2      	str	r2, [r4, #92]	; 0x5c
 80078fc:	e75d      	b.n	80077ba <HAL_ADC_Init+0xde>
 80078fe:	46c0      	nop			; (mov r8, r8)
 8007900:	6fffffe8 	.word	0x6fffffe8
 8007904:	200000e4 	.word	0x200000e4
 8007908:	00030d40 	.word	0x00030d40
 800790c:	fffffefd 	.word	0xfffffefd
 8007910:	fffe0201 	.word	0xfffe0201
 8007914:	1ffffc02 	.word	0x1ffffc02
 8007918:	40012708 	.word	0x40012708
 800791c:	ffc3ffff 	.word	0xffc3ffff

08007920 <HAL_ADC_ConvCpltCallback>:
 8007920:	4770      	bx	lr
 8007922:	46c0      	nop			; (mov r8, r8)

08007924 <HAL_ADC_ConvHalfCpltCallback>:
 8007924:	4770      	bx	lr
 8007926:	46c0      	nop			; (mov r8, r8)

08007928 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007928:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800792a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800792c:	f7ff fffa 	bl	8007924 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007930:	bd10      	pop	{r4, pc}
 8007932:	46c0      	nop			; (mov r8, r8)

08007934 <HAL_ADC_ErrorCallback>:
 8007934:	4770      	bx	lr
 8007936:	46c0      	nop			; (mov r8, r8)

08007938 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007938:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800793a:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800793c:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800793e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007940:	4313      	orrs	r3, r2
 8007942:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007944:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007946:	3a3c      	subs	r2, #60	; 0x3c
 8007948:	4313      	orrs	r3, r2
 800794a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800794c:	f7ff fff2 	bl	8007934 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007950:	bd10      	pop	{r4, pc}
 8007952:	46c0      	nop			; (mov r8, r8)

08007954 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007954:	2150      	movs	r1, #80	; 0x50
{
 8007956:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007958:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800795a:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800795c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800795e:	4211      	tst	r1, r2
 8007960:	d10d      	bne.n	800797e <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007962:	2380      	movs	r3, #128	; 0x80
 8007964:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800796a:	22c0      	movs	r2, #192	; 0xc0
 800796c:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800796e:	6803      	ldr	r3, [r0, #0]
 8007970:	0112      	lsls	r2, r2, #4
 8007972:	68d9      	ldr	r1, [r3, #12]
 8007974:	4211      	tst	r1, r2
 8007976:	d00a      	beq.n	800798e <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8007978:	f7ff ffd2 	bl	8007920 <HAL_ADC_ConvCpltCallback>
}
 800797c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800797e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007980:	06d2      	lsls	r2, r2, #27
 8007982:	d416      	bmi.n	80079b2 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007984:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007986:	0018      	movs	r0, r3
 8007988:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800798a:	4790      	blx	r2
}
 800798c:	e7f6      	b.n	800797c <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800798e:	7e82      	ldrb	r2, [r0, #26]
 8007990:	2a00      	cmp	r2, #0
 8007992:	d1f1      	bne.n	8007978 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	0712      	lsls	r2, r2, #28
 8007998:	d5ee      	bpl.n	8007978 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	0752      	lsls	r2, r2, #29
 800799e:	d50b      	bpl.n	80079b8 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079a0:	2220      	movs	r2, #32
 80079a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80079a4:	4313      	orrs	r3, r2
 80079a6:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80079aa:	3a1f      	subs	r2, #31
 80079ac:	4313      	orrs	r3, r2
 80079ae:	65c3      	str	r3, [r0, #92]	; 0x5c
 80079b0:	e7e2      	b.n	8007978 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 80079b2:	f7ff ffbf 	bl	8007934 <HAL_ADC_ErrorCallback>
 80079b6:	e7e1      	b.n	800797c <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80079b8:	210c      	movs	r1, #12
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	438a      	bics	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80079c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80079c2:	4a03      	ldr	r2, [pc, #12]	; (80079d0 <ADC_DMAConvCplt+0x7c>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	3204      	adds	r2, #4
 80079c8:	32ff      	adds	r2, #255	; 0xff
 80079ca:	4313      	orrs	r3, r2
 80079cc:	6583      	str	r3, [r0, #88]	; 0x58
 80079ce:	e7d3      	b.n	8007978 <ADC_DMAConvCplt+0x24>
 80079d0:	fffffefe 	.word	0xfffffefe

080079d4 <HAL_ADC_ConfigChannel>:
{
 80079d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079d6:	4645      	mov	r5, r8
 80079d8:	46de      	mov	lr, fp
 80079da:	4657      	mov	r7, sl
 80079dc:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 80079de:	2300      	movs	r3, #0
{
 80079e0:	b5e0      	push	{r5, r6, r7, lr}
 80079e2:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80079e4:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 80079e6:	3354      	adds	r3, #84	; 0x54
 80079e8:	5cc2      	ldrb	r2, [r0, r3]
{
 80079ea:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80079ec:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 80079ee:	2a01      	cmp	r2, #1
 80079f0:	d100      	bne.n	80079f4 <HAL_ADC_ConfigChannel+0x20>
 80079f2:	e091      	b.n	8007b18 <HAL_ADC_ConfigChannel+0x144>
 80079f4:	2001      	movs	r0, #1
 80079f6:	2204      	movs	r2, #4
 80079f8:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	689e      	ldr	r6, [r3, #8]
 80079fe:	4232      	tst	r2, r6
 8007a00:	d00d      	beq.n	8007a1e <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a04:	321c      	adds	r2, #28
 8007a06:	4313      	orrs	r3, r2
 8007a08:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8007a0a:	2354      	movs	r3, #84	; 0x54
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	54e2      	strb	r2, [r4, r3]
}
 8007a10:	b005      	add	sp, #20
 8007a12:	bcf0      	pop	{r4, r5, r6, r7}
 8007a14:	46bb      	mov	fp, r7
 8007a16:	46b2      	mov	sl, r6
 8007a18:	46a9      	mov	r9, r5
 8007a1a:	46a0      	mov	r8, r4
 8007a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8007a1e:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007a20:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8007a22:	2e02      	cmp	r6, #2
 8007a24:	d05c      	beq.n	8007ae0 <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007a26:	2780      	movs	r7, #128	; 0x80
 8007a28:	063f      	lsls	r7, r7, #24
 8007a2a:	42bd      	cmp	r5, r7
 8007a2c:	d051      	beq.n	8007ad2 <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007a2e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8007a30:	270f      	movs	r7, #15
 8007a32:	46aa      	mov	sl, r5
 8007a34:	251f      	movs	r5, #31
 8007a36:	46ac      	mov	ip, r5
 8007a38:	4035      	ands	r5, r6
 8007a3a:	40af      	lsls	r7, r5
 8007a3c:	46a9      	mov	r9, r5
 8007a3e:	43fd      	mvns	r5, r7
 8007a40:	9500      	str	r5, [sp, #0]
 8007a42:	4655      	mov	r5, sl
 8007a44:	43bd      	bics	r5, r7
 8007a46:	46a8      	mov	r8, r5
 8007a48:	680d      	ldr	r5, [r1, #0]
 8007a4a:	9701      	str	r7, [sp, #4]
 8007a4c:	036f      	lsls	r7, r5, #13
 8007a4e:	d16c      	bne.n	8007b2a <HAL_ADC_ConfigChannel+0x156>
 8007a50:	4660      	mov	r0, ip
 8007a52:	0eaa      	lsrs	r2, r5, #26
 8007a54:	4010      	ands	r0, r2
 8007a56:	0002      	movs	r2, r0
 8007a58:	4648      	mov	r0, r9
 8007a5a:	4082      	lsls	r2, r0
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	4310      	orrs	r0, r2
 8007a60:	4680      	mov	r8, r0
 8007a62:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007a64:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007a66:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007a68:	69e2      	ldr	r2, [r4, #28]
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	4296      	cmp	r6, r2
 8007a6e:	d808      	bhi.n	8007a82 <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 8007a70:	464e      	mov	r6, r9
 8007a72:	00aa      	lsls	r2, r5, #2
 8007a74:	0f12      	lsrs	r2, r2, #28
 8007a76:	40b2      	lsls	r2, r6
 8007a78:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a7a:	9e00      	ldr	r6, [sp, #0]
 8007a7c:	4030      	ands	r0, r6
 8007a7e:	4302      	orrs	r2, r0
 8007a80:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8007a82:	0228      	lsls	r0, r5, #8
 8007a84:	688a      	ldr	r2, [r1, #8]
 8007a86:	0001      	movs	r1, r0
 8007a88:	695e      	ldr	r6, [r3, #20]
 8007a8a:	4002      	ands	r2, r0
 8007a8c:	4866      	ldr	r0, [pc, #408]	; (8007c28 <HAL_ADC_ConfigChannel+0x254>)
 8007a8e:	438e      	bics	r6, r1
 8007a90:	4002      	ands	r2, r0
 8007a92:	4332      	orrs	r2, r6
 8007a94:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	db01      	blt.n	8007a9e <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a9a:	2000      	movs	r0, #0
}
 8007a9c:	e7b5      	b.n	8007a0a <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007a9e:	21e0      	movs	r1, #224	; 0xe0
 8007aa0:	4862      	ldr	r0, [pc, #392]	; (8007c2c <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007aa2:	4a63      	ldr	r2, [pc, #396]	; (8007c30 <HAL_ADC_ConfigChannel+0x25c>)
 8007aa4:	6803      	ldr	r3, [r0, #0]
 8007aa6:	0449      	lsls	r1, r1, #17
 8007aa8:	4019      	ands	r1, r3
 8007aaa:	4295      	cmp	r5, r2
 8007aac:	d051      	beq.n	8007b52 <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007aae:	4a61      	ldr	r2, [pc, #388]	; (8007c34 <HAL_ADC_ConfigChannel+0x260>)
 8007ab0:	4295      	cmp	r5, r2
 8007ab2:	d045      	beq.n	8007b40 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007ab4:	4a60      	ldr	r2, [pc, #384]	; (8007c38 <HAL_ADC_ConfigChannel+0x264>)
 8007ab6:	4295      	cmp	r5, r2
 8007ab8:	d1ef      	bne.n	8007a9a <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007aba:	2280      	movs	r2, #128	; 0x80
 8007abc:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007abe:	4213      	tst	r3, r2
 8007ac0:	d1eb      	bne.n	8007a9a <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007ac2:	6803      	ldr	r3, [r0, #0]
 8007ac4:	4d5d      	ldr	r5, [pc, #372]	; (8007c3c <HAL_ADC_ConfigChannel+0x268>)
 8007ac6:	402b      	ands	r3, r5
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	431a      	orrs	r2, r3
 8007acc:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ace:	2000      	movs	r0, #0
}
 8007ad0:	e79b      	b.n	8007a0a <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007ad2:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007ad4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007ad6:	036a      	lsls	r2, r5, #13
 8007ad8:	0b52      	lsrs	r2, r2, #13
 8007ada:	4302      	orrs	r2, r0
 8007adc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ade:	e7d0      	b.n	8007a82 <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007ae0:	2280      	movs	r2, #128	; 0x80
 8007ae2:	0612      	lsls	r2, r2, #24
 8007ae4:	4295      	cmp	r5, r2
 8007ae6:	d019      	beq.n	8007b1c <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007ae8:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	dad5      	bge.n	8007a9a <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007aee:	494f      	ldr	r1, [pc, #316]	; (8007c2c <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007af0:	484f      	ldr	r0, [pc, #316]	; (8007c30 <HAL_ADC_ConfigChannel+0x25c>)
 8007af2:	680b      	ldr	r3, [r1, #0]
 8007af4:	4282      	cmp	r2, r0
 8007af6:	d029      	beq.n	8007b4c <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8007af8:	484e      	ldr	r0, [pc, #312]	; (8007c34 <HAL_ADC_ConfigChannel+0x260>)
 8007afa:	4282      	cmp	r2, r0
 8007afc:	d04c      	beq.n	8007b98 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007afe:	484e      	ldr	r0, [pc, #312]	; (8007c38 <HAL_ADC_ConfigChannel+0x264>)
 8007b00:	4282      	cmp	r2, r0
 8007b02:	d1ca      	bne.n	8007a9a <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007b04:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007b06:	680a      	ldr	r2, [r1, #0]
 8007b08:	0440      	lsls	r0, r0, #17
 8007b0a:	4003      	ands	r3, r0
 8007b0c:	484b      	ldr	r0, [pc, #300]	; (8007c3c <HAL_ADC_ConfigChannel+0x268>)
 8007b0e:	4002      	ands	r2, r0
 8007b10:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b12:	2000      	movs	r0, #0
 8007b14:	600b      	str	r3, [r1, #0]
 8007b16:	e778      	b.n	8007a0a <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8007b18:	2002      	movs	r0, #2
 8007b1a:	e779      	b.n	8007a10 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8007b1c:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007b1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007b20:	0350      	lsls	r0, r2, #13
 8007b22:	0b40      	lsrs	r0, r0, #13
 8007b24:	4381      	bics	r1, r0
 8007b26:	6299      	str	r1, [r3, #40]	; 0x28
}
 8007b28:	e7df      	b.n	8007aea <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007b2a:	4228      	tst	r0, r5
 8007b2c:	d199      	bne.n	8007a62 <HAL_ADC_ConfigChannel+0x8e>
 8007b2e:	2702      	movs	r7, #2
 8007b30:	422f      	tst	r7, r5
 8007b32:	d02d      	beq.n	8007b90 <HAL_ADC_ConfigChannel+0x1bc>
 8007b34:	464a      	mov	r2, r9
 8007b36:	4090      	lsls	r0, r2
 8007b38:	4642      	mov	r2, r8
 8007b3a:	4302      	orrs	r2, r0
 8007b3c:	4690      	mov	r8, r2
 8007b3e:	e790      	b.n	8007a62 <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007b40:	2280      	movs	r2, #128	; 0x80
 8007b42:	0452      	lsls	r2, r2, #17
 8007b44:	4213      	tst	r3, r2
 8007b46:	d0bc      	beq.n	8007ac2 <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e75e      	b.n	8007a0a <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007b4c:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007b4e:	680a      	ldr	r2, [r1, #0]
 8007b50:	e7da      	b.n	8007b08 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007b56:	4213      	tst	r3, r2
 8007b58:	d19f      	bne.n	8007a9a <HAL_ADC_ConfigChannel+0xc6>
 8007b5a:	6803      	ldr	r3, [r0, #0]
 8007b5c:	4d37      	ldr	r5, [pc, #220]	; (8007c3c <HAL_ADC_ConfigChannel+0x268>)
 8007b5e:	402b      	ands	r3, r5
 8007b60:	430b      	orrs	r3, r1
 8007b62:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b64:	4b36      	ldr	r3, [pc, #216]	; (8007c40 <HAL_ADC_ConfigChannel+0x26c>)
 8007b66:	6002      	str	r2, [r0, #0]
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	4936      	ldr	r1, [pc, #216]	; (8007c44 <HAL_ADC_ConfigChannel+0x270>)
 8007b6c:	f7f8 fae8 	bl	8000140 <__udivsi3>
 8007b70:	3001      	adds	r0, #1
 8007b72:	0043      	lsls	r3, r0, #1
 8007b74:	181b      	adds	r3, r3, r0
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d08c      	beq.n	8007a9a <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 8007b80:	9b03      	ldr	r3, [sp, #12]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f9      	bne.n	8007b80 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	e73c      	b.n	8007a0a <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007b90:	422a      	tst	r2, r5
 8007b92:	d005      	beq.n	8007ba0 <HAL_ADC_ConfigChannel+0x1cc>
 8007b94:	003a      	movs	r2, r7
 8007b96:	e75f      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007b98:	20c0      	movs	r0, #192	; 0xc0
 8007b9a:	680a      	ldr	r2, [r1, #0]
 8007b9c:	0400      	lsls	r0, r0, #16
 8007b9e:	e7b4      	b.n	8007b0a <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007ba0:	072a      	lsls	r2, r5, #28
 8007ba2:	d501      	bpl.n	8007ba8 <HAL_ADC_ConfigChannel+0x1d4>
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	e757      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007ba8:	06ea      	lsls	r2, r5, #27
 8007baa:	d501      	bpl.n	8007bb0 <HAL_ADC_ConfigChannel+0x1dc>
 8007bac:	2204      	movs	r2, #4
 8007bae:	e753      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007bb0:	06aa      	lsls	r2, r5, #26
 8007bb2:	d501      	bpl.n	8007bb8 <HAL_ADC_ConfigChannel+0x1e4>
 8007bb4:	2205      	movs	r2, #5
 8007bb6:	e74f      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007bb8:	066a      	lsls	r2, r5, #25
 8007bba:	d501      	bpl.n	8007bc0 <HAL_ADC_ConfigChannel+0x1ec>
 8007bbc:	2206      	movs	r2, #6
 8007bbe:	e74b      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007bc0:	062a      	lsls	r2, r5, #24
 8007bc2:	d501      	bpl.n	8007bc8 <HAL_ADC_ConfigChannel+0x1f4>
 8007bc4:	2207      	movs	r2, #7
 8007bc6:	e747      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007bc8:	05ea      	lsls	r2, r5, #23
 8007bca:	d501      	bpl.n	8007bd0 <HAL_ADC_ConfigChannel+0x1fc>
 8007bcc:	2208      	movs	r2, #8
 8007bce:	e743      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007bd0:	05aa      	lsls	r2, r5, #22
 8007bd2:	d501      	bpl.n	8007bd8 <HAL_ADC_ConfigChannel+0x204>
 8007bd4:	2209      	movs	r2, #9
 8007bd6:	e73f      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007bd8:	056a      	lsls	r2, r5, #21
 8007bda:	d501      	bpl.n	8007be0 <HAL_ADC_ConfigChannel+0x20c>
 8007bdc:	220a      	movs	r2, #10
 8007bde:	e73b      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007be0:	052a      	lsls	r2, r5, #20
 8007be2:	d501      	bpl.n	8007be8 <HAL_ADC_ConfigChannel+0x214>
 8007be4:	220b      	movs	r2, #11
 8007be6:	e737      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007be8:	04ea      	lsls	r2, r5, #19
 8007bea:	d501      	bpl.n	8007bf0 <HAL_ADC_ConfigChannel+0x21c>
 8007bec:	220c      	movs	r2, #12
 8007bee:	e733      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007bf0:	04aa      	lsls	r2, r5, #18
 8007bf2:	d501      	bpl.n	8007bf8 <HAL_ADC_ConfigChannel+0x224>
 8007bf4:	220d      	movs	r2, #13
 8007bf6:	e72f      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007bf8:	046a      	lsls	r2, r5, #17
 8007bfa:	d501      	bpl.n	8007c00 <HAL_ADC_ConfigChannel+0x22c>
 8007bfc:	220e      	movs	r2, #14
 8007bfe:	e72b      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007c00:	042a      	lsls	r2, r5, #16
 8007c02:	d504      	bpl.n	8007c0e <HAL_ADC_ConfigChannel+0x23a>
 8007c04:	4652      	mov	r2, sl
 8007c06:	9801      	ldr	r0, [sp, #4]
 8007c08:	4302      	orrs	r2, r0
 8007c0a:	4690      	mov	r8, r2
 8007c0c:	e729      	b.n	8007a62 <HAL_ADC_ConfigChannel+0x8e>
 8007c0e:	03ea      	lsls	r2, r5, #15
 8007c10:	d501      	bpl.n	8007c16 <HAL_ADC_ConfigChannel+0x242>
 8007c12:	2210      	movs	r2, #16
 8007c14:	e720      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007c16:	03aa      	lsls	r2, r5, #14
 8007c18:	d501      	bpl.n	8007c1e <HAL_ADC_ConfigChannel+0x24a>
 8007c1a:	2211      	movs	r2, #17
 8007c1c:	e71c      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007c1e:	036a      	lsls	r2, r5, #13
 8007c20:	d400      	bmi.n	8007c24 <HAL_ADC_ConfigChannel+0x250>
 8007c22:	e71e      	b.n	8007a62 <HAL_ADC_ConfigChannel+0x8e>
 8007c24:	2212      	movs	r2, #18
 8007c26:	e717      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x84>
 8007c28:	07ffff00 	.word	0x07ffff00
 8007c2c:	40012708 	.word	0x40012708
 8007c30:	b0001000 	.word	0xb0001000
 8007c34:	b8004000 	.word	0xb8004000
 8007c38:	b4002000 	.word	0xb4002000
 8007c3c:	fe3fffff 	.word	0xfe3fffff
 8007c40:	200000e4 	.word	0x200000e4
 8007c44:	00030d40 	.word	0x00030d40

08007c48 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8007c48:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c4a:	2201      	movs	r2, #1
{
 8007c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c4e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8007c50:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c52:	6803      	ldr	r3, [r0, #0]
{
 8007c54:	0004      	movs	r4, r0
 8007c56:	6899      	ldr	r1, [r3, #8]
 8007c58:	420a      	tst	r2, r1
 8007c5a:	d11f      	bne.n	8007c9c <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007c5c:	6898      	ldr	r0, [r3, #8]
 8007c5e:	4928      	ldr	r1, [pc, #160]	; (8007d00 <ADC_Enable+0xb8>)
 8007c60:	4208      	tst	r0, r1
 8007c62:	d11e      	bne.n	8007ca2 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8007c64:	6899      	ldr	r1, [r3, #8]
 8007c66:	4827      	ldr	r0, [pc, #156]	; (8007d04 <ADC_Enable+0xbc>)
 8007c68:	4001      	ands	r1, r0
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007c6e:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <ADC_Enable+0xc0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	d50f      	bpl.n	8007c96 <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007c76:	4b25      	ldr	r3, [pc, #148]	; (8007d0c <ADC_Enable+0xc4>)
 8007c78:	4925      	ldr	r1, [pc, #148]	; (8007d10 <ADC_Enable+0xc8>)
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	f7f8 fa60 	bl	8000140 <__udivsi3>
 8007c80:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8007c82:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <ADC_Enable+0x4e>
        wait_loop_index--;
 8007c8a:	9b01      	ldr	r3, [sp, #4]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1f9      	bne.n	8007c8a <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007c96:	7e63      	ldrb	r3, [r4, #25]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d10b      	bne.n	8007cb4 <ADC_Enable+0x6c>
  return HAL_OK;
 8007c9c:	2000      	movs	r0, #0
}
 8007c9e:	b003      	add	sp, #12
 8007ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ca2:	2110      	movs	r1, #16
 8007ca4:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8007ca6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8007cb2:	e7f4      	b.n	8007c9e <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 8007cb4:	f7ff fcee 	bl	8007694 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007cb8:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8007cba:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	07d2      	lsls	r2, r2, #31
 8007cc0:	d4ec      	bmi.n	8007c9c <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cc2:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8007cc4:	4f0f      	ldr	r7, [pc, #60]	; (8007d04 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	4215      	tst	r5, r2
 8007cca:	d103      	bne.n	8007cd4 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	403a      	ands	r2, r7
 8007cd0:	432a      	orrs	r2, r5
 8007cd2:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007cd4:	f7ff fcde 	bl	8007694 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007cd8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007cda:	1b80      	subs	r0, r0, r6
 8007cdc:	2802      	cmp	r0, #2
 8007cde:	d902      	bls.n	8007ce6 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	4215      	tst	r5, r2
 8007ce4:	d003      	beq.n	8007cee <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	4215      	tst	r5, r2
 8007cea:	d0ec      	beq.n	8007cc6 <ADC_Enable+0x7e>
 8007cec:	e7d6      	b.n	8007c9c <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007cee:	2210      	movs	r2, #16
 8007cf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 8007cf2:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cf8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007cfa:	432b      	orrs	r3, r5
 8007cfc:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8007cfe:	e7ce      	b.n	8007c9e <ADC_Enable+0x56>
 8007d00:	80000017 	.word	0x80000017
 8007d04:	7fffffe8 	.word	0x7fffffe8
 8007d08:	40012708 	.word	0x40012708
 8007d0c:	200000e4 	.word	0x200000e4
 8007d10:	00030d40 	.word	0x00030d40

08007d14 <HAL_ADC_Start_DMA>:
{
 8007d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d16:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d18:	6805      	ldr	r5, [r0, #0]
{
 8007d1a:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d1c:	68ae      	ldr	r6, [r5, #8]
 8007d1e:	4688      	mov	r8, r1
 8007d20:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 8007d22:	2002      	movs	r0, #2
{
 8007d24:	b500      	push	{lr}
 8007d26:	0776      	lsls	r6, r6, #29
 8007d28:	d414      	bmi.n	8007d54 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8007d2a:	2254      	movs	r2, #84	; 0x54
 8007d2c:	5ca3      	ldrb	r3, [r4, r2]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d010      	beq.n	8007d54 <HAL_ADC_Start_DMA+0x40>
 8007d32:	2301      	movs	r3, #1
 8007d34:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8007d36:	68ea      	ldr	r2, [r5, #12]
 8007d38:	4213      	tst	r3, r2
 8007d3a:	d106      	bne.n	8007d4a <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d3c:	68aa      	ldr	r2, [r5, #8]
 8007d3e:	4213      	tst	r3, r2
 8007d40:	d131      	bne.n	8007da6 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8007d42:	2201      	movs	r2, #1
 8007d44:	68eb      	ldr	r3, [r5, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8007d4a:	0020      	movs	r0, r4
 8007d4c:	f7ff ff7c 	bl	8007c48 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d002      	beq.n	8007d5a <HAL_ADC_Start_DMA+0x46>
}
 8007d54:	bc80      	pop	{r7}
 8007d56:	46b8      	mov	r8, r7
 8007d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8007d5a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007d5c:	4b15      	ldr	r3, [pc, #84]	; (8007db4 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007d5e:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8007d60:	401a      	ands	r2, r3
 8007d62:	2380      	movs	r3, #128	; 0x80
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	4313      	orrs	r3, r2
 8007d68:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007d6a:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8007d6c:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007d6e:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007d70:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007d72:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007d74:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007d78:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007d7a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007d7c:	231c      	movs	r3, #28
 8007d7e:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 8007d80:	3338      	adds	r3, #56	; 0x38
 8007d82:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007d84:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007d86:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	003b      	movs	r3, r7
 8007d90:	3140      	adds	r1, #64	; 0x40
 8007d92:	f000 f8ef 	bl	8007f74 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007d96:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8007d98:	490a      	ldr	r1, [pc, #40]	; (8007dc4 <HAL_ADC_Start_DMA+0xb0>)
 8007d9a:	6893      	ldr	r3, [r2, #8]
 8007d9c:	400b      	ands	r3, r1
 8007d9e:	2104      	movs	r1, #4
 8007da0:	430b      	orrs	r3, r1
 8007da2:	6093      	str	r3, [r2, #8]
}
 8007da4:	e7d6      	b.n	8007d54 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 8007da6:	68ab      	ldr	r3, [r5, #8]
 8007da8:	4a06      	ldr	r2, [pc, #24]	; (8007dc4 <HAL_ADC_Start_DMA+0xb0>)
 8007daa:	4013      	ands	r3, r2
 8007dac:	4303      	orrs	r3, r0
 8007dae:	60ab      	str	r3, [r5, #8]
}
 8007db0:	e7c7      	b.n	8007d42 <HAL_ADC_Start_DMA+0x2e>
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	fffff0fe 	.word	0xfffff0fe
 8007db8:	08007955 	.word	0x08007955
 8007dbc:	08007929 	.word	0x08007929
 8007dc0:	08007939 	.word	0x08007939
 8007dc4:	7fffffe8 	.word	0x7fffffe8

08007dc8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007dc8:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	db14      	blt.n	8007df8 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007dce:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <HAL_NVIC_SetPriority+0x5c>)
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	469c      	mov	ip, r3
 8007dd4:	23ff      	movs	r3, #255	; 0xff
 8007dd6:	0884      	lsrs	r4, r0, #2
 8007dd8:	4002      	ands	r2, r0
 8007dda:	0018      	movs	r0, r3
 8007ddc:	26c0      	movs	r6, #192	; 0xc0
 8007dde:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007de0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007de2:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007de4:	400b      	ands	r3, r1
 8007de6:	4093      	lsls	r3, r2
 8007de8:	00a4      	lsls	r4, r4, #2
 8007dea:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007dec:	00b6      	lsls	r6, r6, #2
 8007dee:	59a5      	ldr	r5, [r4, r6]
 8007df0:	4385      	bics	r5, r0
 8007df2:	432b      	orrs	r3, r5
 8007df4:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007df8:	4a0b      	ldr	r2, [pc, #44]	; (8007e28 <HAL_NVIC_SetPriority+0x60>)
 8007dfa:	230f      	movs	r3, #15
 8007dfc:	4694      	mov	ip, r2
 8007dfe:	2203      	movs	r2, #3
 8007e00:	4003      	ands	r3, r0
 8007e02:	4010      	ands	r0, r2
 8007e04:	32fc      	adds	r2, #252	; 0xfc
 8007e06:	0015      	movs	r5, r2
 8007e08:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007e0a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e0c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007e0e:	400a      	ands	r2, r1
 8007e10:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e12:	3b08      	subs	r3, #8
 8007e14:	089b      	lsrs	r3, r3, #2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4463      	add	r3, ip
 8007e1a:	69dc      	ldr	r4, [r3, #28]
 8007e1c:	43ac      	bics	r4, r5
 8007e1e:	4322      	orrs	r2, r4
 8007e20:	61da      	str	r2, [r3, #28]
 8007e22:	e7e8      	b.n	8007df6 <HAL_NVIC_SetPriority+0x2e>
 8007e24:	e000e100 	.word	0xe000e100
 8007e28:	e000ed00 	.word	0xe000ed00

08007e2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	db05      	blt.n	8007e3c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e30:	221f      	movs	r2, #31
 8007e32:	2301      	movs	r3, #1
 8007e34:	4002      	ands	r2, r0
 8007e36:	4093      	lsls	r3, r2
 8007e38:	4a01      	ldr	r2, [pc, #4]	; (8007e40 <HAL_NVIC_EnableIRQ+0x14>)
 8007e3a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007e3c:	4770      	bx	lr
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	e000e100 	.word	0xe000e100

08007e44 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e44:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e46:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007e48:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8007e4a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007e4c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8007e4e:	2c00      	cmp	r4, #0
 8007e50:	d002      	beq.n	8007e58 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e52:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8007e54:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8007e56:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007e58:	241c      	movs	r4, #28
 8007e5a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007e5c:	4e08      	ldr	r6, [pc, #32]	; (8007e80 <DMA_SetConfig+0x3c>)
 8007e5e:	4025      	ands	r5, r4
 8007e60:	3c1b      	subs	r4, #27
 8007e62:	40ac      	lsls	r4, r5
 8007e64:	6877      	ldr	r7, [r6, #4]
 8007e66:	433c      	orrs	r4, r7
 8007e68:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e6a:	6804      	ldr	r4, [r0, #0]
 8007e6c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e6e:	6883      	ldr	r3, [r0, #8]
 8007e70:	2b10      	cmp	r3, #16
 8007e72:	d002      	beq.n	8007e7a <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007e74:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007e76:	60e2      	str	r2, [r4, #12]
  }
}
 8007e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8007e7a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007e7c:	60e1      	str	r1, [r4, #12]
 8007e7e:	e7fb      	b.n	8007e78 <DMA_SetConfig+0x34>
 8007e80:	40020000 	.word	0x40020000

08007e84 <HAL_DMA_Init>:
{
 8007e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e86:	46c6      	mov	lr, r8
 8007e88:	0004      	movs	r4, r0
 8007e8a:	b500      	push	{lr}
  if (hdma == NULL)
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d062      	beq.n	8007f56 <HAL_DMA_Init+0xd2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007e90:	6805      	ldr	r5, [r0, #0]
 8007e92:	4b32      	ldr	r3, [pc, #200]	; (8007f5c <HAL_DMA_Init+0xd8>)
 8007e94:	2114      	movs	r1, #20
 8007e96:	18e8      	adds	r0, r5, r3
 8007e98:	f7f8 f952 	bl	8000140 <__udivsi3>
 8007e9c:	0083      	lsls	r3, r0, #2
 8007e9e:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	2325      	movs	r3, #37	; 0x25
 8007ea4:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	4a2d      	ldr	r2, [pc, #180]	; (8007f60 <HAL_DMA_Init+0xdc>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007eaa:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007eac:	4013      	ands	r3, r2
 8007eae:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007eb0:	68e3      	ldr	r3, [r4, #12]
 8007eb2:	6921      	ldr	r1, [r4, #16]
 8007eb4:	4333      	orrs	r3, r6
 8007eb6:	430b      	orrs	r3, r1
 8007eb8:	6961      	ldr	r1, [r4, #20]
 8007eba:	682a      	ldr	r2, [r5, #0]
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	69a1      	ldr	r1, [r4, #24]
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	69e1      	ldr	r1, [r4, #28]
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	6a21      	ldr	r1, [r4, #32]
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007ece:	4b25      	ldr	r3, [pc, #148]	; (8007f64 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ed0:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007ed2:	469c      	mov	ip, r3
 8007ed4:	4460      	add	r0, ip
 8007ed6:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ed8:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007eda:	4b23      	ldr	r3, [pc, #140]	; (8007f68 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007edc:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ede:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007ee0:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ee2:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ee4:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ee6:	f7f8 f92b 	bl	8000140 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007eea:	231f      	movs	r3, #31
 8007eec:	2201      	movs	r2, #1
 8007eee:	4003      	ands	r3, r0
 8007ef0:	0010      	movs	r0, r2
 8007ef2:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ef4:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007ef6:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ef8:	01db      	lsls	r3, r3, #7
 8007efa:	429e      	cmp	r6, r3
 8007efc:	d021      	beq.n	8007f42 <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007efe:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f00:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007f02:	6861      	ldr	r1, [r4, #4]
 8007f04:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007f06:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007f08:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f0a:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007f0c:	2903      	cmp	r1, #3
 8007f0e:	d81d      	bhi.n	8007f4c <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f10:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f12:	4916      	ldr	r1, [pc, #88]	; (8007f6c <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f14:	4d16      	ldr	r5, [pc, #88]	; (8007f70 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f16:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	4003      	ands	r3, r0
 8007f1c:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007f1e:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f20:	0089      	lsls	r1, r1, #2
 8007f22:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f24:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f26:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007f28:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f2a:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f2c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007f2e:	2225      	movs	r2, #37	; 0x25
 8007f30:	2101      	movs	r1, #1
  return HAL_OK;
 8007f32:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f34:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8007f36:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8007f38:	3a01      	subs	r2, #1
 8007f3a:	54a3      	strb	r3, [r4, r2]
}
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	46b8      	mov	r8, r7
 8007f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007f42:	2300      	movs	r3, #0
 8007f44:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007f46:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f48:	4643      	mov	r3, r8
 8007f4a:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007f50:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007f52:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f54:	e7ea      	b.n	8007f2c <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 8007f56:	2001      	movs	r0, #1
 8007f58:	e7f0      	b.n	8007f3c <HAL_DMA_Init+0xb8>
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	bffdfff8 	.word	0xbffdfff8
 8007f60:	ffff800f 	.word	0xffff800f
 8007f64:	10008200 	.word	0x10008200
 8007f68:	40020880 	.word	0x40020880
 8007f6c:	1000823f 	.word	0x1000823f
 8007f70:	40020940 	.word	0x40020940

08007f74 <HAL_DMA_Start_IT>:
{
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8007f78:	2024      	movs	r0, #36	; 0x24
 8007f7a:	5c25      	ldrb	r5, [r4, r0]
 8007f7c:	2d01      	cmp	r5, #1
 8007f7e:	d035      	beq.n	8007fec <HAL_DMA_Start_IT+0x78>
 8007f80:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8007f82:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 8007f84:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8007f86:	5da5      	ldrb	r5, [r4, r6]
 8007f88:	b2ef      	uxtb	r7, r5
 8007f8a:	2d01      	cmp	r5, #1
 8007f8c:	d005      	beq.n	8007f9a <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007f8e:	2380      	movs	r3, #128	; 0x80
 8007f90:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8007f92:	2300      	movs	r3, #0
 8007f94:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 8007f96:	2001      	movs	r0, #1
}
 8007f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f9a:	3822      	subs	r0, #34	; 0x22
 8007f9c:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f9e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007fa0:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fa2:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8007fa4:	6828      	ldr	r0, [r5, #0]
 8007fa6:	43b8      	bics	r0, r7
 8007fa8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007faa:	0020      	movs	r0, r4
 8007fac:	f7ff ff4a 	bl	8007e44 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8007fb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01c      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fb6:	220e      	movs	r2, #14
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fbe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007fc0:	6813      	ldr	r3, [r2, #0]
 8007fc2:	03db      	lsls	r3, r3, #15
 8007fc4:	d504      	bpl.n	8007fd0 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fc6:	2380      	movs	r3, #128	; 0x80
 8007fc8:	6811      	ldr	r1, [r2, #0]
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8007fd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007fd6:	2280      	movs	r2, #128	; 0x80
 8007fd8:	6819      	ldr	r1, [r3, #0]
 8007fda:	0052      	lsls	r2, r2, #1
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	e7d5      	b.n	8007f98 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8007fec:	2002      	movs	r0, #2
 8007fee:	e7d3      	b.n	8007f98 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	4393      	bics	r3, r2
 8007ff6:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	3206      	adds	r2, #6
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	e7dd      	b.n	8007fbe <HAL_DMA_Start_IT+0x4a>
 8008002:	46c0      	nop			; (mov r8, r8)

08008004 <HAL_DMA_Abort>:
{
 8008004:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8008006:	2800      	cmp	r0, #0
 8008008:	d034      	beq.n	8008074 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800800a:	2325      	movs	r3, #37	; 0x25
 800800c:	5cc3      	ldrb	r3, [r0, r3]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d129      	bne.n	8008066 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008012:	210e      	movs	r1, #14
 8008014:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008016:	4c18      	ldr	r4, [pc, #96]	; (8008078 <HAL_DMA_Abort+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008018:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800801a:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800801c:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800801e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008020:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008022:	680b      	ldr	r3, [r1, #0]
 8008024:	4023      	ands	r3, r4
 8008026:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8008028:	2301      	movs	r3, #1
 800802a:	6811      	ldr	r1, [r2, #0]
 800802c:	4399      	bics	r1, r3
 800802e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8008030:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008032:	4912      	ldr	r1, [pc, #72]	; (800807c <HAL_DMA_Abort+0x78>)
 8008034:	4032      	ands	r2, r6
 8008036:	4093      	lsls	r3, r2
 8008038:	684d      	ldr	r5, [r1, #4]
 800803a:	432b      	orrs	r3, r5
 800803c:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800803e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008040:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008042:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8008044:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4022      	ands	r2, r4
 800804e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008050:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008052:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008054:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008056:	2325      	movs	r3, #37	; 0x25
 8008058:	2201      	movs	r2, #1
 800805a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800805c:	2200      	movs	r2, #0
 800805e:	3b01      	subs	r3, #1
 8008060:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8008062:	2000      	movs	r0, #0
}
 8008064:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008066:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8008068:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800806a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800806c:	3320      	adds	r3, #32
 800806e:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8008070:	2001      	movs	r0, #1
 8008072:	e7f7      	b.n	8008064 <HAL_DMA_Abort+0x60>
    return HAL_ERROR;
 8008074:	2001      	movs	r0, #1
 8008076:	e7f5      	b.n	8008064 <HAL_DMA_Abort+0x60>
 8008078:	fffffeff 	.word	0xfffffeff
 800807c:	40020000 	.word	0x40020000

08008080 <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008080:	2325      	movs	r3, #37	; 0x25
{
 8008082:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008084:	5cc3      	ldrb	r3, [r0, r3]
 8008086:	2b02      	cmp	r3, #2
 8008088:	d003      	beq.n	8008092 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800808a:	2304      	movs	r3, #4
 800808c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800808e:	2001      	movs	r0, #1
}
 8008090:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008092:	210e      	movs	r1, #14
 8008094:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8008096:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008098:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800809a:	4c16      	ldr	r4, [pc, #88]	; (80080f4 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800809c:	438b      	bics	r3, r1
 800809e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80080a0:	2301      	movs	r3, #1
 80080a2:	6811      	ldr	r1, [r2, #0]
 80080a4:	4399      	bics	r1, r3
 80080a6:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80080a8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80080aa:	680a      	ldr	r2, [r1, #0]
 80080ac:	4022      	ands	r2, r4
 80080ae:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80080b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80080b2:	4911      	ldr	r1, [pc, #68]	; (80080f8 <HAL_DMA_Abort_IT+0x78>)
 80080b4:	4032      	ands	r2, r6
 80080b6:	4093      	lsls	r3, r2
 80080b8:	684d      	ldr	r5, [r1, #4]
 80080ba:	432b      	orrs	r3, r5
 80080bc:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080be:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80080c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80080c2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80080c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	4022      	ands	r2, r4
 80080ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80080d2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80080d4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80080d6:	2325      	movs	r3, #37	; 0x25
 80080d8:	2201      	movs	r2, #1
 80080da:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80080dc:	2200      	movs	r2, #0
 80080de:	3b01      	subs	r3, #1
 80080e0:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80080e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80080e8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80080ea:	2000      	movs	r0, #0
 80080ec:	e7d0      	b.n	8008090 <HAL_DMA_Abort_IT+0x10>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e7ce      	b.n	8008090 <HAL_DMA_Abort_IT+0x10>
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	fffffeff 	.word	0xfffffeff
 80080f8:	40020000 	.word	0x40020000

080080fc <HAL_DMA_IRQHandler>:
{
 80080fc:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80080fe:	211c      	movs	r1, #28
 8008100:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8008102:	4b2b      	ldr	r3, [pc, #172]	; (80081b0 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8008104:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8008106:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008108:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800810a:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800810c:	400b      	ands	r3, r1
 800810e:	0021      	movs	r1, r4
 8008110:	4099      	lsls	r1, r3
 8008112:	420a      	tst	r2, r1
 8008114:	d010      	beq.n	8008138 <HAL_DMA_IRQHandler+0x3c>
 8008116:	422c      	tst	r4, r5
 8008118:	d00e      	beq.n	8008138 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800811a:	6833      	ldr	r3, [r6, #0]
 800811c:	069b      	lsls	r3, r3, #26
 800811e:	d402      	bmi.n	8008126 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008120:	6833      	ldr	r3, [r6, #0]
 8008122:	43a3      	bics	r3, r4
 8008124:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8008126:	4b22      	ldr	r3, [pc, #136]	; (80081b0 <HAL_DMA_IRQHandler+0xb4>)
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	4311      	orrs	r1, r2
 800812c:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800812e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d000      	beq.n	8008136 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8008134:	4798      	blx	r3
}
 8008136:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8008138:	2402      	movs	r4, #2
 800813a:	0021      	movs	r1, r4
 800813c:	4099      	lsls	r1, r3
 800813e:	420a      	tst	r2, r1
 8008140:	d017      	beq.n	8008172 <HAL_DMA_IRQHandler+0x76>
 8008142:	422c      	tst	r4, r5
 8008144:	d015      	beq.n	8008172 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008146:	6833      	ldr	r3, [r6, #0]
 8008148:	069b      	lsls	r3, r3, #26
 800814a:	d406      	bmi.n	800815a <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800814c:	220a      	movs	r2, #10
 800814e:	6833      	ldr	r3, [r6, #0]
 8008150:	4393      	bics	r3, r2
 8008152:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8008154:	2325      	movs	r3, #37	; 0x25
 8008156:	3a09      	subs	r2, #9
 8008158:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <HAL_DMA_IRQHandler+0xb4>)
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	4311      	orrs	r1, r2
 8008160:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8008162:	2200      	movs	r2, #0
 8008164:	2324      	movs	r3, #36	; 0x24
 8008166:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8008168:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0e3      	beq.n	8008136 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800816e:	4798      	blx	r3
  return;
 8008170:	e7e1      	b.n	8008136 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008172:	2108      	movs	r1, #8
 8008174:	000c      	movs	r4, r1
 8008176:	409c      	lsls	r4, r3
 8008178:	4222      	tst	r2, r4
 800817a:	d0dc      	beq.n	8008136 <HAL_DMA_IRQHandler+0x3a>
 800817c:	4229      	tst	r1, r5
 800817e:	d0da      	beq.n	8008136 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008180:	6832      	ldr	r2, [r6, #0]
 8008182:	3106      	adds	r1, #6
 8008184:	438a      	bics	r2, r1
 8008186:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008188:	2201      	movs	r2, #1
 800818a:	0015      	movs	r5, r2
 800818c:	409d      	lsls	r5, r3
 800818e:	002b      	movs	r3, r5
 8008190:	4907      	ldr	r1, [pc, #28]	; (80081b0 <HAL_DMA_IRQHandler+0xb4>)
 8008192:	684c      	ldr	r4, [r1, #4]
 8008194:	4323      	orrs	r3, r4
 8008196:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008198:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800819a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800819c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800819e:	2200      	movs	r2, #0
 80081a0:	3b01      	subs	r3, #1
 80081a2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80081a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0c5      	beq.n	8008136 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80081aa:	4798      	blx	r3
  return;
 80081ac:	e7c3      	b.n	8008136 <HAL_DMA_IRQHandler+0x3a>
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	40020000 	.word	0x40020000

080081b4 <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80081b4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80081b6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80081b8:	6819      	ldr	r1, [r3, #0]
{
 80081ba:	b570      	push	{r4, r5, r6, lr}
 80081bc:	0004      	movs	r4, r0
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80081be:	420a      	tst	r2, r1
 80081c0:	d00f      	beq.n	80081e2 <HAL_DMAEx_MUX_IRQHandler+0x2e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80081c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80081c4:	4d13      	ldr	r5, [pc, #76]	; (8008214 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 80081c6:	6801      	ldr	r1, [r0, #0]
 80081c8:	4029      	ands	r1, r5
 80081ca:	6001      	str	r1, [r0, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80081ce:	2380      	movs	r3, #128	; 0x80
 80081d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4313      	orrs	r3, r2
 80081d6:	63e3      	str	r3, [r4, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80081d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_DMAEx_MUX_IRQHandler+0x2e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081de:	0020      	movs	r0, r4
 80081e0:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80081e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d013      	beq.n	8008210 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80081e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80081ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80081ec:	6810      	ldr	r0, [r2, #0]
 80081ee:	4201      	tst	r1, r0
 80081f0:	d00e      	beq.n	8008210 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	4d07      	ldr	r5, [pc, #28]	; (8008214 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 80081f6:	4028      	ands	r0, r5
 80081f8:	6018      	str	r0, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80081fa:	2380      	movs	r3, #128	; 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081fc:	6051      	str	r1, [r2, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80081fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	4313      	orrs	r3, r2
 8008204:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8008206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800820c:	0020      	movs	r0, r4
 800820e:	4798      	blx	r3
      }
    }
  }
}
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	fffffeff 	.word	0xfffffeff

08008218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800821a:	46de      	mov	lr, fp
 800821c:	4657      	mov	r7, sl
 800821e:	464e      	mov	r6, r9
 8008220:	4645      	mov	r5, r8
 8008222:	b5e0      	push	{r5, r6, r7, lr}
 8008224:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008226:	6809      	ldr	r1, [r1, #0]
 8008228:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800822a:	2300      	movs	r3, #0
{
 800822c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800822e:	2900      	cmp	r1, #0
 8008230:	d07a      	beq.n	8008328 <HAL_GPIO_Init+0x110>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008232:	2601      	movs	r6, #1
 8008234:	000c      	movs	r4, r1
 8008236:	409e      	lsls	r6, r3
 8008238:	4034      	ands	r4, r6
 800823a:	46a2      	mov	sl, r4

    if (iocurrent != 0x00u)
 800823c:	4231      	tst	r1, r6
 800823e:	d06d      	beq.n	800831c <HAL_GPIO_Init+0x104>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008240:	465c      	mov	r4, fp
 8008242:	2503      	movs	r5, #3
 8008244:	6864      	ldr	r4, [r4, #4]
 8008246:	4025      	ands	r5, r4
 8008248:	46ac      	mov	ip, r5
 800824a:	3d01      	subs	r5, #1
 800824c:	2d01      	cmp	r5, #1
 800824e:	d800      	bhi.n	8008252 <HAL_GPIO_Init+0x3a>
 8008250:	e071      	b.n	8008336 <HAL_GPIO_Init+0x11e>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008252:	4665      	mov	r5, ip
 8008254:	2d03      	cmp	r5, #3
 8008256:	d000      	beq.n	800825a <HAL_GPIO_Init+0x42>
 8008258:	e0b4      	b.n	80083c4 <HAL_GPIO_Init+0x1ac>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800825a:	4666      	mov	r6, ip
 800825c:	4096      	lsls	r6, r2
 800825e:	43f5      	mvns	r5, r6
 8008260:	9500      	str	r5, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008262:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008264:	9d00      	ldr	r5, [sp, #0]
 8008266:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008268:	432e      	orrs	r6, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800826a:	25c0      	movs	r5, #192	; 0xc0
 800826c:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 800826e:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008270:	422c      	tst	r4, r5
 8008272:	d053      	beq.n	800831c <HAL_GPIO_Init+0x104>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008274:	4e67      	ldr	r6, [pc, #412]	; (8008414 <HAL_GPIO_Init+0x1fc>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008276:	2703      	movs	r7, #3
 8008278:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 800827a:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800827c:	401f      	ands	r7, r3
 800827e:	00ff      	lsls	r7, r7, #3
 8008280:	00ad      	lsls	r5, r5, #2
 8008282:	4465      	add	r5, ip
 8008284:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 8008286:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008288:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 800828a:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800828c:	4666      	mov	r6, ip
 800828e:	40b7      	lsls	r7, r6
 8008290:	003e      	movs	r6, r7
 8008292:	464f      	mov	r7, r9
 8008294:	43b7      	bics	r7, r6
 8008296:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008298:	27a0      	movs	r7, #160	; 0xa0
 800829a:	05ff      	lsls	r7, r7, #23
 800829c:	42b8      	cmp	r0, r7
 800829e:	d012      	beq.n	80082c6 <HAL_GPIO_Init+0xae>
 80082a0:	4f5d      	ldr	r7, [pc, #372]	; (8008418 <HAL_GPIO_Init+0x200>)
 80082a2:	42b8      	cmp	r0, r7
 80082a4:	d100      	bne.n	80082a8 <HAL_GPIO_Init+0x90>
 80082a6:	e0a5      	b.n	80083f4 <HAL_GPIO_Init+0x1dc>
 80082a8:	4f5c      	ldr	r7, [pc, #368]	; (800841c <HAL_GPIO_Init+0x204>)
 80082aa:	42b8      	cmp	r0, r7
 80082ac:	d100      	bne.n	80082b0 <HAL_GPIO_Init+0x98>
 80082ae:	e0a9      	b.n	8008404 <HAL_GPIO_Init+0x1ec>
 80082b0:	4f5b      	ldr	r7, [pc, #364]	; (8008420 <HAL_GPIO_Init+0x208>)
 80082b2:	42b8      	cmp	r0, r7
 80082b4:	d100      	bne.n	80082b8 <HAL_GPIO_Init+0xa0>
 80082b6:	e096      	b.n	80083e6 <HAL_GPIO_Init+0x1ce>
 80082b8:	4666      	mov	r6, ip
 80082ba:	2705      	movs	r7, #5
 80082bc:	40b7      	lsls	r7, r6
 80082be:	003e      	movs	r6, r7
 80082c0:	464f      	mov	r7, r9
 80082c2:	4337      	orrs	r7, r6
 80082c4:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80082c6:	464e      	mov	r6, r9
 80082c8:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
 80082ca:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80082cc:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 80082ce:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR1;
 80082d0:	4d50      	ldr	r5, [pc, #320]	; (8008414 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80082d2:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 80082d4:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 80082d6:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80082d8:	423c      	tst	r4, r7
 80082da:	d000      	beq.n	80082de <HAL_GPIO_Init+0xc6>
 80082dc:	e080      	b.n	80083e0 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 80082de:	4035      	ands	r5, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80082e0:	2780      	movs	r7, #128	; 0x80
        EXTI->RTSR1 = temp;
 80082e2:	4e4c      	ldr	r6, [pc, #304]	; (8008414 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80082e4:	03bf      	lsls	r7, r7, #14
        EXTI->RTSR1 = temp;
 80082e6:	6035      	str	r5, [r6, #0]
        temp = EXTI->FTSR1;
 80082e8:	6875      	ldr	r5, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80082ea:	423c      	tst	r4, r7
 80082ec:	d000      	beq.n	80082f0 <HAL_GPIO_Init+0xd8>
 80082ee:	e074      	b.n	80083da <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 80082f0:	4646      	mov	r6, r8
 80082f2:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80082f4:	4e47      	ldr	r6, [pc, #284]	; (8008414 <HAL_GPIO_Init+0x1fc>)
 80082f6:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80082f8:	2584      	movs	r5, #132	; 0x84
 80082fa:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80082fc:	03a7      	lsls	r7, r4, #14
 80082fe:	d469      	bmi.n	80083d4 <HAL_GPIO_Init+0x1bc>
        temp &= ~(iocurrent);
 8008300:	4646      	mov	r6, r8
 8008302:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8008304:	2784      	movs	r7, #132	; 0x84
 8008306:	4e43      	ldr	r6, [pc, #268]	; (8008414 <HAL_GPIO_Init+0x1fc>)
 8008308:	51f5      	str	r5, [r6, r7]

        temp = EXTI->IMR1;
 800830a:	2580      	movs	r5, #128	; 0x80
 800830c:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800830e:	03e4      	lsls	r4, r4, #15
 8008310:	d45d      	bmi.n	80083ce <HAL_GPIO_Init+0x1b6>
        temp &= ~(iocurrent);
 8008312:	4646      	mov	r6, r8
 8008314:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8008316:	2580      	movs	r5, #128	; 0x80
 8008318:	4c3e      	ldr	r4, [pc, #248]	; (8008414 <HAL_GPIO_Init+0x1fc>)
 800831a:	5166      	str	r6, [r4, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800831c:	000c      	movs	r4, r1
      }
    }

    position++;
 800831e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008320:	40dc      	lsrs	r4, r3
 8008322:	3202      	adds	r2, #2
 8008324:	2c00      	cmp	r4, #0
 8008326:	d184      	bne.n	8008232 <HAL_GPIO_Init+0x1a>
  }
}
 8008328:	b003      	add	sp, #12
 800832a:	bcf0      	pop	{r4, r5, r6, r7}
 800832c:	46bb      	mov	fp, r7
 800832e:	46b2      	mov	sl, r6
 8008330:	46a9      	mov	r9, r5
 8008332:	46a0      	mov	r8, r4
 8008334:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8008336:	6885      	ldr	r5, [r0, #8]
 8008338:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800833a:	2503      	movs	r5, #3
 800833c:	4095      	lsls	r5, r2
 800833e:	46a8      	mov	r8, r5
 8008340:	43ed      	mvns	r5, r5
 8008342:	464f      	mov	r7, r9
 8008344:	9500      	str	r5, [sp, #0]
 8008346:	4645      	mov	r5, r8
 8008348:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800834a:	465d      	mov	r5, fp
 800834c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800834e:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008350:	002f      	movs	r7, r5
 8008352:	4097      	lsls	r7, r2
 8008354:	46b8      	mov	r8, r7
 8008356:	464f      	mov	r7, r9
 8008358:	4645      	mov	r5, r8
 800835a:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800835c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800835e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008360:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008362:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008364:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008366:	0926      	lsrs	r6, r4, #4
 8008368:	402e      	ands	r6, r5
 800836a:	409e      	lsls	r6, r3
 800836c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800836e:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8008370:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008372:	9d00      	ldr	r5, [sp, #0]
 8008374:	402e      	ands	r6, r5
 8008376:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008378:	465e      	mov	r6, fp
 800837a:	68b6      	ldr	r6, [r6, #8]
 800837c:	4647      	mov	r7, r8
 800837e:	4096      	lsls	r6, r2
 8008380:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8008382:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008384:	4667      	mov	r7, ip
 8008386:	4666      	mov	r6, ip
 8008388:	4096      	lsls	r6, r2
 800838a:	2f02      	cmp	r7, #2
 800838c:	d000      	beq.n	8008390 <HAL_GPIO_Init+0x178>
 800838e:	e768      	b.n	8008262 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3u];
 8008390:	08dd      	lsrs	r5, r3, #3
 8008392:	00ad      	lsls	r5, r5, #2
 8008394:	46ac      	mov	ip, r5
 8008396:	4484      	add	ip, r0
 8008398:	4665      	mov	r5, ip
 800839a:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800839c:	2507      	movs	r5, #7
 800839e:	401d      	ands	r5, r3
 80083a0:	00ad      	lsls	r5, r5, #2
 80083a2:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 80083a4:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80083a6:	250f      	movs	r5, #15
 80083a8:	4647      	mov	r7, r8
 80083aa:	40bd      	lsls	r5, r7
 80083ac:	9f01      	ldr	r7, [sp, #4]
 80083ae:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80083b0:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80083b2:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80083b4:	4647      	mov	r7, r8
 80083b6:	692d      	ldr	r5, [r5, #16]
 80083b8:	40bd      	lsls	r5, r7
 80083ba:	9f01      	ldr	r7, [sp, #4]
 80083bc:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80083be:	4665      	mov	r5, ip
 80083c0:	622f      	str	r7, [r5, #32]
 80083c2:	e74e      	b.n	8008262 <HAL_GPIO_Init+0x4a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80083c4:	2503      	movs	r5, #3
 80083c6:	4095      	lsls	r5, r2
 80083c8:	43ed      	mvns	r5, r5
 80083ca:	9500      	str	r5, [sp, #0]
 80083cc:	e7d0      	b.n	8008370 <HAL_GPIO_Init+0x158>
          temp |= iocurrent;
 80083ce:	4656      	mov	r6, sl
 80083d0:	432e      	orrs	r6, r5
 80083d2:	e7a0      	b.n	8008316 <HAL_GPIO_Init+0xfe>
          temp |= iocurrent;
 80083d4:	4657      	mov	r7, sl
 80083d6:	433d      	orrs	r5, r7
 80083d8:	e794      	b.n	8008304 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 80083da:	4657      	mov	r7, sl
 80083dc:	433d      	orrs	r5, r7
 80083de:	e789      	b.n	80082f4 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 80083e0:	4657      	mov	r7, sl
 80083e2:	433d      	orrs	r5, r7
 80083e4:	e77c      	b.n	80082e0 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80083e6:	4667      	mov	r7, ip
 80083e8:	2603      	movs	r6, #3
 80083ea:	40be      	lsls	r6, r7
 80083ec:	464f      	mov	r7, r9
 80083ee:	4337      	orrs	r7, r6
 80083f0:	46b9      	mov	r9, r7
 80083f2:	e768      	b.n	80082c6 <HAL_GPIO_Init+0xae>
 80083f4:	4666      	mov	r6, ip
 80083f6:	2701      	movs	r7, #1
 80083f8:	40b7      	lsls	r7, r6
 80083fa:	003e      	movs	r6, r7
 80083fc:	464f      	mov	r7, r9
 80083fe:	4337      	orrs	r7, r6
 8008400:	46b9      	mov	r9, r7
 8008402:	e760      	b.n	80082c6 <HAL_GPIO_Init+0xae>
 8008404:	4667      	mov	r7, ip
 8008406:	2602      	movs	r6, #2
 8008408:	40be      	lsls	r6, r7
 800840a:	464f      	mov	r7, r9
 800840c:	4337      	orrs	r7, r6
 800840e:	46b9      	mov	r9, r7
 8008410:	e759      	b.n	80082c6 <HAL_GPIO_Init+0xae>
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	40021800 	.word	0x40021800
 8008418:	50000400 	.word	0x50000400
 800841c:	50000800 	.word	0x50000800
 8008420:	50000c00 	.word	0x50000c00

08008424 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008424:	6900      	ldr	r0, [r0, #16]
 8008426:	4008      	ands	r0, r1
 8008428:	1e43      	subs	r3, r0, #1
 800842a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800842c:	b2c0      	uxtb	r0, r0
}
 800842e:	4770      	bx	lr

08008430 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008430:	2a00      	cmp	r2, #0
 8008432:	d001      	beq.n	8008438 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008434:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008436:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008438:	6281      	str	r1, [r0, #40]	; 0x28
}
 800843a:	e7fc      	b.n	8008436 <HAL_GPIO_WritePin+0x6>

0800843c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800843c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800843e:	0013      	movs	r3, r2
 8008440:	400b      	ands	r3, r1
 8008442:	041b      	lsls	r3, r3, #16
 8008444:	4391      	bics	r1, r2
 8008446:	430b      	orrs	r3, r1
 8008448:	6183      	str	r3, [r0, #24]
}
 800844a:	4770      	bx	lr

0800844c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800844c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844e:	0017      	movs	r7, r2
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008450:	2210      	movs	r2, #16
{
 8008452:	46c6      	mov	lr, r8
 8008454:	000c      	movs	r4, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008456:	0011      	movs	r1, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8008458:	6803      	ldr	r3, [r0, #0]
{
 800845a:	0005      	movs	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800845c:	699e      	ldr	r6, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800845e:	2000      	movs	r0, #0
{
 8008460:	b500      	push	{lr}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008462:	4031      	ands	r1, r6
 8008464:	4232      	tst	r2, r6
 8008466:	d011      	beq.n	800848c <I2C_IsErrorOccurred+0x40>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008468:	61da      	str	r2, [r3, #28]
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 800846a:	3232      	adds	r2, #50	; 0x32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800846c:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 800846e:	4690      	mov	r8, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	4216      	tst	r6, r2
 8008474:	d104      	bne.n	8008480 <I2C_IsErrorOccurred+0x34>
      if (Timeout != HAL_MAX_DELAY)
 8008476:	1c61      	adds	r1, r4, #1
 8008478:	d145      	bne.n	8008506 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800847a:	699a      	ldr	r2, [r3, #24]
 800847c:	4216      	tst	r6, r2
 800847e:	d0fc      	beq.n	800847a <I2C_IsErrorOccurred+0x2e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008480:	2220      	movs	r2, #32
 8008482:	2100      	movs	r1, #0
 8008484:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008486:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8008488:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 800848a:	4311      	orrs	r1, r2
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800848c:	2480      	movs	r4, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 800848e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008490:	0064      	lsls	r4, r4, #1
 8008492:	4222      	tst	r2, r4
 8008494:	d02c      	beq.n	80084f0 <I2C_IsErrorOccurred+0xa4>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008496:	2001      	movs	r0, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008498:	61dc      	str	r4, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800849a:	4301      	orrs	r1, r0

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800849c:	0550      	lsls	r0, r2, #21
 800849e:	d504      	bpl.n	80084aa <I2C_IsErrorOccurred+0x5e>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80084a0:	2008      	movs	r0, #8
 80084a2:	4301      	orrs	r1, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80084a4:	2080      	movs	r0, #128	; 0x80
 80084a6:	00c0      	lsls	r0, r0, #3
 80084a8:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80084aa:	0592      	lsls	r2, r2, #22
 80084ac:	d504      	bpl.n	80084b8 <I2C_IsErrorOccurred+0x6c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80084ae:	2202      	movs	r2, #2
 80084b0:	4311      	orrs	r1, r2

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80084b2:	32ff      	adds	r2, #255	; 0xff
 80084b4:	32ff      	adds	r2, #255	; 0xff
 80084b6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80084b8:	699a      	ldr	r2, [r3, #24]
 80084ba:	0792      	lsls	r2, r2, #30
 80084bc:	d501      	bpl.n	80084c2 <I2C_IsErrorOccurred+0x76>
    hi2c->Instance->TXDR = 0x00U;
 80084be:	2200      	movs	r2, #0
 80084c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084c2:	2201      	movs	r2, #1
 80084c4:	6998      	ldr	r0, [r3, #24]
 80084c6:	4202      	tst	r2, r0
 80084c8:	d019      	beq.n	80084fe <I2C_IsErrorOccurred+0xb2>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	4822      	ldr	r0, [pc, #136]	; (8008558 <I2C_IsErrorOccurred+0x10c>)
 80084ce:	4002      	ands	r2, r0
 80084d0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80084d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80084d4:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80084d6:	430b      	orrs	r3, r1
 80084d8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80084da:	2341      	movs	r3, #65	; 0x41
 80084dc:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084de:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e0:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e2:	3222      	adds	r2, #34	; 0x22
 80084e4:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 80084e6:	3a02      	subs	r2, #2
 80084e8:	54ab      	strb	r3, [r5, r2]
  }

  return status;
}
 80084ea:	bc80      	pop	{r7}
 80084ec:	46b8      	mov	r8, r7
 80084ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80084f0:	0554      	lsls	r4, r2, #21
 80084f2:	d4d5      	bmi.n	80084a0 <I2C_IsErrorOccurred+0x54>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80084f4:	0592      	lsls	r2, r2, #22
 80084f6:	d4da      	bmi.n	80084ae <I2C_IsErrorOccurred+0x62>
  if (status != HAL_OK)
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d0f6      	beq.n	80084ea <I2C_IsErrorOccurred+0x9e>
 80084fc:	e7dc      	b.n	80084b8 <I2C_IsErrorOccurred+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80084fe:	6998      	ldr	r0, [r3, #24]
 8008500:	4302      	orrs	r2, r0
 8008502:	619a      	str	r2, [r3, #24]
 8008504:	e7e1      	b.n	80084ca <I2C_IsErrorOccurred+0x7e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008506:	f7ff f8c5 	bl	8007694 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800850a:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800850c:	1bc0      	subs	r0, r0, r7
 800850e:	42a0      	cmp	r0, r4
 8008510:	d801      	bhi.n	8008516 <I2C_IsErrorOccurred+0xca>
 8008512:	2c00      	cmp	r4, #0
 8008514:	d1ac      	bne.n	8008470 <I2C_IsErrorOccurred+0x24>
          tmp2 = hi2c->Mode;
 8008516:	4642      	mov	r2, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008518:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800851a:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800851c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800851e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008520:	0409      	lsls	r1, r1, #16
 8008522:	d50c      	bpl.n	800853e <I2C_IsErrorOccurred+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008524:	2180      	movs	r1, #128	; 0x80
 8008526:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008528:	4208      	tst	r0, r1
 800852a:	d108      	bne.n	800853e <I2C_IsErrorOccurred+0xf2>
              (tmp1 != I2C_CR2_STOP) && \
 800852c:	2a20      	cmp	r2, #32
 800852e:	d006      	beq.n	800853e <I2C_IsErrorOccurred+0xf2>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	4311      	orrs	r1, r2
 8008534:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8008536:	f7ff f8ad 	bl	8007694 <HAL_GetTick>
 800853a:	0007      	movs	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	699a      	ldr	r2, [r3, #24]
 8008540:	4216      	tst	r6, r2
 8008542:	d195      	bne.n	8008470 <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008544:	f7ff f8a6 	bl	8007694 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008548:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800854a:	1bc0      	subs	r0, r0, r7
 800854c:	2819      	cmp	r0, #25
 800854e:	d9f6      	bls.n	800853e <I2C_IsErrorOccurred+0xf2>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008550:	2120      	movs	r1, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008552:	699a      	ldr	r2, [r3, #24]
 8008554:	e797      	b.n	8008486 <I2C_IsErrorOccurred+0x3a>
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	fe00e800 	.word	0xfe00e800

0800855c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	0004      	movs	r4, r0
 8008560:	000d      	movs	r5, r1
 8008562:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008564:	2702      	movs	r7, #2
 8008566:	e008      	b.n	800857a <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008568:	0032      	movs	r2, r6
 800856a:	0029      	movs	r1, r5
 800856c:	0020      	movs	r0, r4
 800856e:	f7ff ff6d 	bl	800844c <I2C_IsErrorOccurred>
 8008572:	2800      	cmp	r0, #0
 8008574:	d107      	bne.n	8008586 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8008576:	1c6b      	adds	r3, r5, #1
 8008578:	d107      	bne.n	800858a <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	421f      	tst	r7, r3
 8008580:	d0f2      	beq.n	8008568 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 8008582:	2000      	movs	r0, #0
}
 8008584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008586:	2001      	movs	r0, #1
 8008588:	e7fc      	b.n	8008584 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858a:	f7ff f883 	bl	8007694 <HAL_GetTick>
 800858e:	1b80      	subs	r0, r0, r6
 8008590:	42a8      	cmp	r0, r5
 8008592:	d801      	bhi.n	8008598 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8008594:	2d00      	cmp	r5, #0
 8008596:	d1f0      	bne.n	800857a <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008598:	2220      	movs	r2, #32
 800859a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800859c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800859e:	4313      	orrs	r3, r2
 80085a0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085a2:	2341      	movs	r3, #65	; 0x41
 80085a4:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	3222      	adds	r2, #34	; 0x22
 80085aa:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80085ac:	3a02      	subs	r2, #2
 80085ae:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 80085b0:	e7e8      	b.n	8008584 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 80085b2:	46c0      	nop			; (mov r8, r8)

080085b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	0005      	movs	r5, r0
 80085b8:	000c      	movs	r4, r1
 80085ba:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085bc:	2720      	movs	r7, #32
 80085be:	e00d      	b.n	80085dc <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c0:	0032      	movs	r2, r6
 80085c2:	0021      	movs	r1, r4
 80085c4:	0028      	movs	r0, r5
 80085c6:	f7ff ff41 	bl	800844c <I2C_IsErrorOccurred>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d119      	bne.n	8008602 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ce:	f7ff f861 	bl	8007694 <HAL_GetTick>
 80085d2:	1b80      	subs	r0, r0, r6
 80085d4:	42a0      	cmp	r0, r4
 80085d6:	d807      	bhi.n	80085e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80085d8:	2c00      	cmp	r4, #0
 80085da:	d005      	beq.n	80085e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	421f      	tst	r7, r3
 80085e2:	d0ed      	beq.n	80085c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
  return HAL_OK;
 80085e4:	2000      	movs	r0, #0
}
 80085e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085e8:	2220      	movs	r2, #32
 80085ea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80085ec:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085ee:	4313      	orrs	r3, r2
 80085f0:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085f2:	2341      	movs	r3, #65	; 0x41
 80085f4:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	3222      	adds	r2, #34	; 0x22
 80085fa:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 80085fc:	3a02      	subs	r2, #2
 80085fe:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8008600:	e7f1      	b.n	80085e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
      return HAL_ERROR;
 8008602:	2001      	movs	r0, #1
 8008604:	e7ef      	b.n	80085e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8008606:	46c0      	nop			; (mov r8, r8)

08008608 <HAL_I2C_Init>:
{
 8008608:	b510      	push	{r4, lr}
 800860a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 800860c:	d04d      	beq.n	80086aa <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800860e:	2341      	movs	r3, #65	; 0x41
 8008610:	5cc3      	ldrb	r3, [r0, r3]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d043      	beq.n	80086a0 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008618:	2341      	movs	r3, #65	; 0x41
 800861a:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800861c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800861e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	438a      	bics	r2, r1
 8008626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008628:	4921      	ldr	r1, [pc, #132]	; (80086b0 <HAL_I2C_Init+0xa8>)
 800862a:	6862      	ldr	r2, [r4, #4]
 800862c:	400a      	ands	r2, r1
 800862e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	4920      	ldr	r1, [pc, #128]	; (80086b4 <HAL_I2C_Init+0xac>)
 8008634:	400a      	ands	r2, r1
 8008636:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008638:	68e2      	ldr	r2, [r4, #12]
 800863a:	2a01      	cmp	r2, #1
 800863c:	d02a      	beq.n	8008694 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800863e:	2184      	movs	r1, #132	; 0x84
 8008640:	68a0      	ldr	r0, [r4, #8]
 8008642:	0209      	lsls	r1, r1, #8
 8008644:	4301      	orrs	r1, r0
 8008646:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008648:	2a02      	cmp	r2, #2
 800864a:	d102      	bne.n	8008652 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800864c:	2280      	movs	r2, #128	; 0x80
 800864e:	0112      	lsls	r2, r2, #4
 8008650:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008652:	6859      	ldr	r1, [r3, #4]
 8008654:	4a18      	ldr	r2, [pc, #96]	; (80086b8 <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 8008656:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008658:	430a      	orrs	r2, r1
 800865a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	4915      	ldr	r1, [pc, #84]	; (80086b4 <HAL_I2C_Init+0xac>)
 8008660:	400a      	ands	r2, r1
 8008662:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008664:	6961      	ldr	r1, [r4, #20]
 8008666:	6922      	ldr	r2, [r4, #16]
 8008668:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800866a:	69a1      	ldr	r1, [r4, #24]
 800866c:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800866e:	430a      	orrs	r2, r1
 8008670:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008672:	6a21      	ldr	r1, [r4, #32]
 8008674:	69e2      	ldr	r2, [r4, #28]
 8008676:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8008678:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800867a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008682:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008684:	2241      	movs	r2, #65	; 0x41
 8008686:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008688:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800868a:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800868c:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 800868e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008690:	54a3      	strb	r3, [r4, r2]
}
 8008692:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008694:	2280      	movs	r2, #128	; 0x80
 8008696:	68a1      	ldr	r1, [r4, #8]
 8008698:	0212      	lsls	r2, r2, #8
 800869a:	430a      	orrs	r2, r1
 800869c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800869e:	e7d8      	b.n	8008652 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 80086a0:	3340      	adds	r3, #64	; 0x40
 80086a2:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80086a4:	f7fe fd1e 	bl	80070e4 <HAL_I2C_MspInit>
 80086a8:	e7b6      	b.n	8008618 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 80086aa:	2001      	movs	r0, #1
 80086ac:	e7f1      	b.n	8008692 <HAL_I2C_Init+0x8a>
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	f0ffffff 	.word	0xf0ffffff
 80086b4:	ffff7fff 	.word	0xffff7fff
 80086b8:	02008000 	.word	0x02008000

080086bc <HAL_I2C_Mem_Write>:
{
 80086bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086be:	4645      	mov	r5, r8
 80086c0:	46de      	mov	lr, fp
 80086c2:	4657      	mov	r7, sl
 80086c4:	464e      	mov	r6, r9
 80086c6:	b5e0      	push	{r5, r6, r7, lr}
 80086c8:	b083      	sub	sp, #12
 80086ca:	4699      	mov	r9, r3
 80086cc:	ab0c      	add	r3, sp, #48	; 0x30
 80086ce:	9201      	str	r2, [sp, #4]
 80086d0:	cb04      	ldmia	r3!, {r2}
 80086d2:	0004      	movs	r4, r0
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	4688      	mov	r8, r1
 80086d8:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80086da:	2341      	movs	r3, #65	; 0x41
 80086dc:	5cc3      	ldrb	r3, [r0, r3]
{
 80086de:	4692      	mov	sl, r2
 80086e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	d000      	beq.n	80086e8 <HAL_I2C_Mem_Write+0x2c>
 80086e6:	e0a7      	b.n	8008838 <HAL_I2C_Mem_Write+0x17c>
    if ((pData == NULL) || (Size == 0U))
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	d100      	bne.n	80086ee <HAL_I2C_Mem_Write+0x32>
 80086ec:	e099      	b.n	8008822 <HAL_I2C_Mem_Write+0x166>
 80086ee:	465b      	mov	r3, fp
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d100      	bne.n	80086f6 <HAL_I2C_Mem_Write+0x3a>
 80086f4:	e095      	b.n	8008822 <HAL_I2C_Mem_Write+0x166>
    __HAL_LOCK(hi2c);
 80086f6:	2340      	movs	r3, #64	; 0x40
 80086f8:	5cc2      	ldrb	r2, [r0, r3]
 80086fa:	2a01      	cmp	r2, #1
 80086fc:	d100      	bne.n	8008700 <HAL_I2C_Mem_Write+0x44>
 80086fe:	e09b      	b.n	8008838 <HAL_I2C_Mem_Write+0x17c>
 8008700:	2201      	movs	r2, #1
 8008702:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008704:	f7fe ffc6 	bl	8007694 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008708:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 800870a:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800870c:	0236      	lsls	r6, r6, #8
 800870e:	e005      	b.n	800871c <HAL_I2C_Mem_Write+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008710:	f7fe ffc0 	bl	8007694 <HAL_GetTick>
 8008714:	1bc0      	subs	r0, r0, r7
 8008716:	2819      	cmp	r0, #25
 8008718:	d900      	bls.n	800871c <HAL_I2C_Mem_Write+0x60>
 800871a:	e08f      	b.n	800883c <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800871c:	6822      	ldr	r2, [r4, #0]
 800871e:	6993      	ldr	r3, [r2, #24]
 8008720:	0019      	movs	r1, r3
 8008722:	4031      	ands	r1, r6
 8008724:	4233      	tst	r3, r6
 8008726:	d1f3      	bne.n	8008710 <HAL_I2C_Mem_Write+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008728:	2341      	movs	r3, #65	; 0x41
 800872a:	2021      	movs	r0, #33	; 0x21
 800872c:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800872e:	3301      	adds	r3, #1
 8008730:	301f      	adds	r0, #31
 8008732:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8008734:	4653      	mov	r3, sl
 8008736:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8008738:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800873a:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800873c:	8563      	strh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800873e:	4643      	mov	r3, r8
 8008740:	059b      	lsls	r3, r3, #22
 8008742:	0d9b      	lsrs	r3, r3, #22
 8008744:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008746:	464b      	mov	r3, r9
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008748:	4874      	ldr	r0, [pc, #464]	; (800891c <HAL_I2C_Mem_Write+0x260>)
    hi2c->XferISR   = NULL;
 800874a:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800874c:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800874e:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008750:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008752:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008754:	430b      	orrs	r3, r1
 8008756:	4641      	mov	r1, r8
 8008758:	430b      	orrs	r3, r1
 800875a:	4971      	ldr	r1, [pc, #452]	; (8008920 <HAL_I2C_Mem_Write+0x264>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800875c:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800875e:	430b      	orrs	r3, r1
 8008760:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008762:	0029      	movs	r1, r5
 8008764:	003a      	movs	r2, r7
 8008766:	f7ff fef9 	bl	800855c <I2C_WaitOnTXISFlagUntilTimeout>
 800876a:	2800      	cmp	r0, #0
 800876c:	d000      	beq.n	8008770 <HAL_I2C_Mem_Write+0xb4>
 800876e:	e0ab      	b.n	80088c8 <HAL_I2C_Mem_Write+0x20c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008770:	464b      	mov	r3, r9
 8008772:	2b01      	cmp	r3, #1
 8008774:	d000      	beq.n	8008778 <HAL_I2C_Mem_Write+0xbc>
 8008776:	e06e      	b.n	8008856 <HAL_I2C_Mem_Write+0x19a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008778:	466b      	mov	r3, sp
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	791b      	ldrb	r3, [r3, #4]
 800877e:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008780:	2680      	movs	r6, #128	; 0x80
 8008782:	e002      	b.n	800878a <HAL_I2C_Mem_Write+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8008784:	1c6b      	adds	r3, r5, #1
 8008786:	d000      	beq.n	800878a <HAL_I2C_Mem_Write+0xce>
 8008788:	e08c      	b.n	80088a4 <HAL_I2C_Mem_Write+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800878a:	6993      	ldr	r3, [r2, #24]
 800878c:	421e      	tst	r6, r3
 800878e:	d0f9      	beq.n	8008784 <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008790:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008792:	2bff      	cmp	r3, #255	; 0xff
 8008794:	d800      	bhi.n	8008798 <HAL_I2C_Mem_Write+0xdc>
 8008796:	e09c      	b.n	80088d2 <HAL_I2C_Mem_Write+0x216>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008798:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800879a:	4962      	ldr	r1, [pc, #392]	; (8008924 <HAL_I2C_Mem_Write+0x268>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800879c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800879e:	6853      	ldr	r3, [r2, #4]
 80087a0:	400b      	ands	r3, r1
 80087a2:	4641      	mov	r1, r8
 80087a4:	430b      	orrs	r3, r1
 80087a6:	4960      	ldr	r1, [pc, #384]	; (8008928 <HAL_I2C_Mem_Write+0x26c>)
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6053      	str	r3, [r2, #4]
 80087ac:	4b5d      	ldr	r3, [pc, #372]	; (8008924 <HAL_I2C_Mem_Write+0x268>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087ae:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2, \
 80087b0:	4699      	mov	r9, r3
 80087b2:	2380      	movs	r3, #128	; 0x80
 80087b4:	049b      	lsls	r3, r3, #18
 80087b6:	469a      	mov	sl, r3
 80087b8:	e003      	b.n	80087c2 <HAL_I2C_Mem_Write+0x106>
    } while (hi2c->XferCount > 0U);
 80087ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d100      	bne.n	80087c2 <HAL_I2C_Mem_Write+0x106>
 80087c0:	e097      	b.n	80088f2 <HAL_I2C_Mem_Write+0x236>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087c2:	003a      	movs	r2, r7
 80087c4:	0029      	movs	r1, r5
 80087c6:	0020      	movs	r0, r4
 80087c8:	f7ff fec8 	bl	800855c <I2C_WaitOnTXISFlagUntilTimeout>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d140      	bne.n	8008852 <HAL_I2C_Mem_Write+0x196>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80087d6:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087d8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80087da:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80087dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80087e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087e6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087ee:	2900      	cmp	r1, #0
 80087f0:	d0e3      	beq.n	80087ba <HAL_I2C_Mem_Write+0xfe>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e1      	bne.n	80087ba <HAL_I2C_Mem_Write+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087f6:	6993      	ldr	r3, [r2, #24]
 80087f8:	421e      	tst	r6, r3
 80087fa:	d104      	bne.n	8008806 <HAL_I2C_Mem_Write+0x14a>
    if (Timeout != HAL_MAX_DELAY)
 80087fc:	1c6b      	adds	r3, r5, #1
 80087fe:	d139      	bne.n	8008874 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008800:	6993      	ldr	r3, [r2, #24]
 8008802:	421e      	tst	r6, r3
 8008804:	d0fa      	beq.n	80087fc <HAL_I2C_Mem_Write+0x140>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008806:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008808:	2bff      	cmp	r3, #255	; 0xff
 800880a:	d93c      	bls.n	8008886 <HAL_I2C_Mem_Write+0x1ca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800880c:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800880e:	4649      	mov	r1, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008810:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008812:	6853      	ldr	r3, [r2, #4]
 8008814:	400b      	ands	r3, r1
 8008816:	4641      	mov	r1, r8
 8008818:	430b      	orrs	r3, r1
 800881a:	4943      	ldr	r1, [pc, #268]	; (8008928 <HAL_I2C_Mem_Write+0x26c>)
 800881c:	430b      	orrs	r3, r1
 800881e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008820:	e7cb      	b.n	80087ba <HAL_I2C_Mem_Write+0xfe>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008822:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8008824:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	6463      	str	r3, [r4, #68]	; 0x44
}
 800882a:	b003      	add	sp, #12
 800882c:	bcf0      	pop	{r4, r5, r6, r7}
 800882e:	46bb      	mov	fp, r7
 8008830:	46b2      	mov	sl, r6
 8008832:	46a9      	mov	r9, r5
 8008834:	46a0      	mov	r8, r4
 8008836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008838:	2002      	movs	r0, #2
 800883a:	e7f6      	b.n	800882a <HAL_I2C_Mem_Write+0x16e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800883c:	2220      	movs	r2, #32
 800883e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008840:	4313      	orrs	r3, r2
 8008842:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008844:	2341      	movs	r3, #65	; 0x41
 8008846:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008848:	2300      	movs	r3, #0
 800884a:	3222      	adds	r2, #34	; 0x22
 800884c:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 800884e:	3a02      	subs	r2, #2
 8008850:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8008852:	2001      	movs	r0, #1
 8008854:	e7e9      	b.n	800882a <HAL_I2C_Mem_Write+0x16e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008856:	9e01      	ldr	r6, [sp, #4]
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	0a32      	lsrs	r2, r6, #8
 800885c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800885e:	0029      	movs	r1, r5
 8008860:	003a      	movs	r2, r7
 8008862:	0020      	movs	r0, r4
 8008864:	f7ff fe7a 	bl	800855c <I2C_WaitOnTXISFlagUntilTimeout>
 8008868:	2800      	cmp	r0, #0
 800886a:	d12d      	bne.n	80088c8 <HAL_I2C_Mem_Write+0x20c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800886c:	6822      	ldr	r2, [r4, #0]
 800886e:	b2f3      	uxtb	r3, r6
 8008870:	6293      	str	r3, [r2, #40]	; 0x28
 8008872:	e785      	b.n	8008780 <HAL_I2C_Mem_Write+0xc4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008874:	f7fe ff0e 	bl	8007694 <HAL_GetTick>
 8008878:	1bc0      	subs	r0, r0, r7
 800887a:	4285      	cmp	r5, r0
 800887c:	d3de      	bcc.n	800883c <HAL_I2C_Mem_Write+0x180>
 800887e:	2d00      	cmp	r5, #0
 8008880:	d0dc      	beq.n	800883c <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	e7bc      	b.n	8008800 <HAL_I2C_Mem_Write+0x144>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008886:	4648      	mov	r0, r9
          hi2c->XferSize = hi2c->XferCount;
 8008888:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800888a:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800888c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800888e:	4003      	ands	r3, r0
 8008890:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8008892:	8521      	strh	r1, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008894:	b2c9      	uxtb	r1, r1
 8008896:	0409      	lsls	r1, r1, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008898:	4303      	orrs	r3, r0
 800889a:	430b      	orrs	r3, r1
 800889c:	4651      	mov	r1, sl
 800889e:	430b      	orrs	r3, r1
 80088a0:	6053      	str	r3, [r2, #4]
}
 80088a2:	e78a      	b.n	80087ba <HAL_I2C_Mem_Write+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a4:	f7fe fef6 	bl	8007694 <HAL_GetTick>
 80088a8:	1bc0      	subs	r0, r0, r7
 80088aa:	4285      	cmp	r5, r0
 80088ac:	d303      	bcc.n	80088b6 <HAL_I2C_Mem_Write+0x1fa>
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	d001      	beq.n	80088b6 <HAL_I2C_Mem_Write+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	e769      	b.n	800878a <HAL_I2C_Mem_Write+0xce>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088b6:	2220      	movs	r2, #32
 80088b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80088ba:	4313      	orrs	r3, r2
 80088bc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088be:	2341      	movs	r3, #65	; 0x41
 80088c0:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c2:	2200      	movs	r2, #0
 80088c4:	3301      	adds	r3, #1
 80088c6:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 80088c8:	2340      	movs	r3, #64	; 0x40
 80088ca:	2200      	movs	r2, #0
      return HAL_ERROR;
 80088cc:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 80088ce:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80088d0:	e7ab      	b.n	800882a <HAL_I2C_Mem_Write+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 80088d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80088d4:	4813      	ldr	r0, [pc, #76]	; (8008924 <HAL_I2C_Mem_Write+0x268>)
 80088d6:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80088d8:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80088da:	4001      	ands	r1, r0
 80088dc:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 80088de:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088e0:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80088e2:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088e4:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80088e6:	430b      	orrs	r3, r1
 80088e8:	2180      	movs	r1, #128	; 0x80
 80088ea:	0489      	lsls	r1, r1, #18
 80088ec:	430b      	orrs	r3, r1
 80088ee:	6053      	str	r3, [r2, #4]
}
 80088f0:	e75c      	b.n	80087ac <HAL_I2C_Mem_Write+0xf0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088f2:	003a      	movs	r2, r7
 80088f4:	0029      	movs	r1, r5
 80088f6:	0020      	movs	r0, r4
 80088f8:	f7ff fe5c 	bl	80085b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d1a8      	bne.n	8008852 <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008900:	2120      	movs	r1, #32
 8008902:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8008904:	4d09      	ldr	r5, [pc, #36]	; (800892c <HAL_I2C_Mem_Write+0x270>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008906:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	402a      	ands	r2, r5
 800890c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800890e:	2341      	movs	r3, #65	; 0x41
 8008910:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008912:	3301      	adds	r3, #1
 8008914:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8008916:	3b02      	subs	r3, #2
 8008918:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 800891a:	e786      	b.n	800882a <HAL_I2C_Mem_Write+0x16e>
 800891c:	fc009800 	.word	0xfc009800
 8008920:	01002000 	.word	0x01002000
 8008924:	fc009c00 	.word	0xfc009c00
 8008928:	01ff0000 	.word	0x01ff0000
 800892c:	fe00e800 	.word	0xfe00e800

08008930 <HAL_I2C_Mem_Read>:
{
 8008930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008932:	4645      	mov	r5, r8
 8008934:	46de      	mov	lr, fp
 8008936:	4657      	mov	r7, sl
 8008938:	464e      	mov	r6, r9
 800893a:	b5e0      	push	{r5, r6, r7, lr}
 800893c:	b083      	sub	sp, #12
 800893e:	4699      	mov	r9, r3
 8008940:	ab0c      	add	r3, sp, #48	; 0x30
 8008942:	9201      	str	r2, [sp, #4]
 8008944:	cb04      	ldmia	r3!, {r2}
 8008946:	0005      	movs	r5, r0
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	4688      	mov	r8, r1
 800894c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800894e:	2341      	movs	r3, #65	; 0x41
 8008950:	5cc3      	ldrb	r3, [r0, r3]
{
 8008952:	4692      	mov	sl, r2
 8008954:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008956:	2b20      	cmp	r3, #32
 8008958:	d000      	beq.n	800895c <HAL_I2C_Mem_Read+0x2c>
 800895a:	e090      	b.n	8008a7e <HAL_I2C_Mem_Read+0x14e>
    if ((pData == NULL) || (Size == 0U))
 800895c:	2a00      	cmp	r2, #0
 800895e:	d100      	bne.n	8008962 <HAL_I2C_Mem_Read+0x32>
 8008960:	e082      	b.n	8008a68 <HAL_I2C_Mem_Read+0x138>
 8008962:	465b      	mov	r3, fp
 8008964:	2b00      	cmp	r3, #0
 8008966:	d100      	bne.n	800896a <HAL_I2C_Mem_Read+0x3a>
 8008968:	e07e      	b.n	8008a68 <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 800896a:	2340      	movs	r3, #64	; 0x40
 800896c:	5cc2      	ldrb	r2, [r0, r3]
 800896e:	2a01      	cmp	r2, #1
 8008970:	d100      	bne.n	8008974 <HAL_I2C_Mem_Read+0x44>
 8008972:	e084      	b.n	8008a7e <HAL_I2C_Mem_Read+0x14e>
 8008974:	2201      	movs	r2, #1
 8008976:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008978:	f7fe fe8c 	bl	8007694 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800897c:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 800897e:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008980:	0236      	lsls	r6, r6, #8
 8008982:	e005      	b.n	8008990 <HAL_I2C_Mem_Read+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008984:	f7fe fe86 	bl	8007694 <HAL_GetTick>
 8008988:	1bc0      	subs	r0, r0, r7
 800898a:	2819      	cmp	r0, #25
 800898c:	d900      	bls.n	8008990 <HAL_I2C_Mem_Read+0x60>
 800898e:	e07f      	b.n	8008a90 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008990:	682a      	ldr	r2, [r5, #0]
 8008992:	6993      	ldr	r3, [r2, #24]
 8008994:	0019      	movs	r1, r3
 8008996:	4031      	ands	r1, r6
 8008998:	4233      	tst	r3, r6
 800899a:	d1f3      	bne.n	8008984 <HAL_I2C_Mem_Read+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800899c:	2341      	movs	r3, #65	; 0x41
 800899e:	2022      	movs	r0, #34	; 0x22
 80089a0:	54e8      	strb	r0, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089a2:	3301      	adds	r3, #1
 80089a4:	301e      	adds	r0, #30
 80089a6:	54e8      	strb	r0, [r5, r3]
    hi2c->pBuffPtr  = pData;
 80089a8:	4653      	mov	r3, sl
 80089aa:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount = Size;
 80089ac:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089ae:	6469      	str	r1, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 80089b0:	856b      	strh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80089b2:	4643      	mov	r3, r8
 80089b4:	059b      	lsls	r3, r3, #22
 80089b6:	0d9b      	lsrs	r3, r3, #22
 80089b8:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80089ba:	464b      	mov	r3, r9
  MODIFY_REG(hi2c->Instance->CR2, \
 80089bc:	4877      	ldr	r0, [pc, #476]	; (8008b9c <HAL_I2C_Mem_Read+0x26c>)
    hi2c->XferISR   = NULL;
 80089be:	6369      	str	r1, [r5, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 80089c0:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80089c2:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80089c4:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80089c6:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80089c8:	430b      	orrs	r3, r1
 80089ca:	4641      	mov	r1, r8
 80089cc:	430b      	orrs	r3, r1
 80089ce:	2180      	movs	r1, #128	; 0x80
 80089d0:	0189      	lsls	r1, r1, #6
 80089d2:	430b      	orrs	r3, r1
 80089d4:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089d6:	0021      	movs	r1, r4
 80089d8:	003a      	movs	r2, r7
 80089da:	0028      	movs	r0, r5
 80089dc:	f7ff fdbe 	bl	800855c <I2C_WaitOnTXISFlagUntilTimeout>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d000      	beq.n	80089e6 <HAL_I2C_Mem_Read+0xb6>
 80089e4:	e0d3      	b.n	8008b8e <HAL_I2C_Mem_Read+0x25e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089e6:	464b      	mov	r3, r9
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d000      	beq.n	80089ee <HAL_I2C_Mem_Read+0xbe>
 80089ec:	e07a      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x1b4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089ee:	466b      	mov	r3, sp
 80089f0:	682a      	ldr	r2, [r5, #0]
 80089f2:	791b      	ldrb	r3, [r3, #4]
 80089f4:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089f6:	2640      	movs	r6, #64	; 0x40
 80089f8:	e002      	b.n	8008a00 <HAL_I2C_Mem_Read+0xd0>
    if (Timeout != HAL_MAX_DELAY)
 80089fa:	1c63      	adds	r3, r4, #1
 80089fc:	d000      	beq.n	8008a00 <HAL_I2C_Mem_Read+0xd0>
 80089fe:	e0a5      	b.n	8008b4c <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a00:	6993      	ldr	r3, [r2, #24]
 8008a02:	421e      	tst	r6, r3
 8008a04:	d0f9      	beq.n	80089fa <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a06:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008a08:	2bff      	cmp	r3, #255	; 0xff
 8008a0a:	d800      	bhi.n	8008a0e <HAL_I2C_Mem_Read+0xde>
 8008a0c:	e0a7      	b.n	8008b5e <HAL_I2C_Mem_Read+0x22e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a0e:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a10:	4962      	ldr	r1, [pc, #392]	; (8008b9c <HAL_I2C_Mem_Read+0x26c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a12:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a14:	6853      	ldr	r3, [r2, #4]
 8008a16:	400b      	ands	r3, r1
 8008a18:	4641      	mov	r1, r8
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	4960      	ldr	r1, [pc, #384]	; (8008ba0 <HAL_I2C_Mem_Read+0x270>)
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a22:	2380      	movs	r3, #128	; 0x80
 8008a24:	4699      	mov	r9, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a26:	4b5f      	ldr	r3, [pc, #380]	; (8008ba4 <HAL_I2C_Mem_Read+0x274>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a28:	2604      	movs	r6, #4
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a2a:	469a      	mov	sl, r3
 8008a2c:	e001      	b.n	8008a32 <HAL_I2C_Mem_Read+0x102>
    if (Timeout != HAL_MAX_DELAY)
 8008a2e:	1c63      	adds	r3, r4, #1
 8008a30:	d127      	bne.n	8008a82 <HAL_I2C_Mem_Read+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a32:	6993      	ldr	r3, [r2, #24]
 8008a34:	421e      	tst	r6, r3
 8008a36:	d0fa      	beq.n	8008a2e <HAL_I2C_Mem_Read+0xfe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a3c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8008a3e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8008a40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8008a42:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008a44:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8008a46:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008a48:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8008a4a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 8008a4c:	856a      	strh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8008a4e:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a50:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	d001      	beq.n	8008a5e <HAL_I2C_Mem_Read+0x12e>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d02c      	beq.n	8008ab8 <HAL_I2C_Mem_Read+0x188>
    } while (hi2c->XferCount > 0U);
 8008a5e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d04e      	beq.n	8008b02 <HAL_I2C_Mem_Read+0x1d2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a64:	682a      	ldr	r2, [r5, #0]
 8008a66:	e7e4      	b.n	8008a32 <HAL_I2C_Mem_Read+0x102>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a68:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8008a6a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	646b      	str	r3, [r5, #68]	; 0x44
}
 8008a70:	b003      	add	sp, #12
 8008a72:	bcf0      	pop	{r4, r5, r6, r7}
 8008a74:	46bb      	mov	fp, r7
 8008a76:	46b2      	mov	sl, r6
 8008a78:	46a9      	mov	r9, r5
 8008a7a:	46a0      	mov	r8, r4
 8008a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008a7e:	2002      	movs	r0, #2
 8008a80:	e7f6      	b.n	8008a70 <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a82:	f7fe fe07 	bl	8007694 <HAL_GetTick>
 8008a86:	1bc0      	subs	r0, r0, r7
 8008a88:	4284      	cmp	r4, r0
 8008a8a:	d301      	bcc.n	8008a90 <HAL_I2C_Mem_Read+0x160>
 8008a8c:	2c00      	cmp	r4, #0
 8008a8e:	d1e9      	bne.n	8008a64 <HAL_I2C_Mem_Read+0x134>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a90:	2220      	movs	r2, #32
 8008a92:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          return HAL_ERROR;
 8008a94:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a96:	4313      	orrs	r3, r2
 8008a98:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a9a:	2341      	movs	r3, #65	; 0x41
 8008a9c:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	3222      	adds	r2, #34	; 0x22
 8008aa2:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8008aa4:	3a02      	subs	r2, #2
 8008aa6:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8008aa8:	e7e2      	b.n	8008a70 <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aaa:	f7fe fdf3 	bl	8007694 <HAL_GetTick>
 8008aae:	1bc0      	subs	r0, r0, r7
 8008ab0:	4284      	cmp	r4, r0
 8008ab2:	d3ed      	bcc.n	8008a90 <HAL_I2C_Mem_Read+0x160>
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	d0eb      	beq.n	8008a90 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ab8:	682a      	ldr	r2, [r5, #0]
 8008aba:	e001      	b.n	8008ac0 <HAL_I2C_Mem_Read+0x190>
    if (Timeout != HAL_MAX_DELAY)
 8008abc:	1c63      	adds	r3, r4, #1
 8008abe:	d1f4      	bne.n	8008aaa <HAL_I2C_Mem_Read+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	6993      	ldr	r3, [r2, #24]
 8008ac4:	4219      	tst	r1, r3
 8008ac6:	d0f9      	beq.n	8008abc <HAL_I2C_Mem_Read+0x18c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ac8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008aca:	2bff      	cmp	r3, #255	; 0xff
 8008acc:	d92e      	bls.n	8008b2c <HAL_I2C_Mem_Read+0x1fc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ace:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ad0:	4651      	mov	r1, sl
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ad2:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ad4:	6853      	ldr	r3, [r2, #4]
 8008ad6:	400b      	ands	r3, r1
 8008ad8:	4641      	mov	r1, r8
 8008ada:	430b      	orrs	r3, r1
 8008adc:	4932      	ldr	r1, [pc, #200]	; (8008ba8 <HAL_I2C_Mem_Read+0x278>)
 8008ade:	430b      	orrs	r3, r1
 8008ae0:	6053      	str	r3, [r2, #4]
}
 8008ae2:	e7bc      	b.n	8008a5e <HAL_I2C_Mem_Read+0x12e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ae4:	9e01      	ldr	r6, [sp, #4]
 8008ae6:	682b      	ldr	r3, [r5, #0]
 8008ae8:	0a32      	lsrs	r2, r6, #8
 8008aea:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aec:	0021      	movs	r1, r4
 8008aee:	003a      	movs	r2, r7
 8008af0:	0028      	movs	r0, r5
 8008af2:	f7ff fd33 	bl	800855c <I2C_WaitOnTXISFlagUntilTimeout>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d149      	bne.n	8008b8e <HAL_I2C_Mem_Read+0x25e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008afa:	682a      	ldr	r2, [r5, #0]
 8008afc:	b2f3      	uxtb	r3, r6
 8008afe:	6293      	str	r3, [r2, #40]	; 0x28
 8008b00:	e779      	b.n	80089f6 <HAL_I2C_Mem_Read+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b02:	003a      	movs	r2, r7
 8008b04:	0021      	movs	r1, r4
 8008b06:	0028      	movs	r0, r5
 8008b08:	f7ff fd54 	bl	80085b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d143      	bne.n	8008b98 <HAL_I2C_Mem_Read+0x268>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b10:	2120      	movs	r1, #32
 8008b12:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8008b14:	4c25      	ldr	r4, [pc, #148]	; (8008bac <HAL_I2C_Mem_Read+0x27c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b16:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	4022      	ands	r2, r4
 8008b1c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008b1e:	2341      	movs	r3, #65	; 0x41
 8008b20:	54e9      	strb	r1, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b22:	3301      	adds	r3, #1
 8008b24:	54e8      	strb	r0, [r5, r3]
    __HAL_UNLOCK(hi2c);
 8008b26:	3b02      	subs	r3, #2
 8008b28:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 8008b2a:	e7a1      	b.n	8008a70 <HAL_I2C_Mem_Read+0x140>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b2c:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8008b2e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b30:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b3a:	4303      	orrs	r3, r0
 8008b3c:	4650      	mov	r0, sl
 8008b3e:	4001      	ands	r1, r0
 8008b40:	430b      	orrs	r3, r1
 8008b42:	2180      	movs	r1, #128	; 0x80
 8008b44:	0489      	lsls	r1, r1, #18
 8008b46:	430b      	orrs	r3, r1
 8008b48:	6053      	str	r3, [r2, #4]
}
 8008b4a:	e788      	b.n	8008a5e <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b4c:	f7fe fda2 	bl	8007694 <HAL_GetTick>
 8008b50:	1bc0      	subs	r0, r0, r7
 8008b52:	4284      	cmp	r4, r0
 8008b54:	d312      	bcc.n	8008b7c <HAL_I2C_Mem_Read+0x24c>
 8008b56:	2c00      	cmp	r4, #0
 8008b58:	d010      	beq.n	8008b7c <HAL_I2C_Mem_Read+0x24c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b5a:	682a      	ldr	r2, [r5, #0]
 8008b5c:	e750      	b.n	8008a00 <HAL_I2C_Mem_Read+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 8008b5e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b60:	480e      	ldr	r0, [pc, #56]	; (8008b9c <HAL_I2C_Mem_Read+0x26c>)
 8008b62:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8008b64:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b66:	4001      	ands	r1, r0
 8008b68:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 8008b6a:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b6c:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b6e:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b70:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b72:	430b      	orrs	r3, r1
 8008b74:	490e      	ldr	r1, [pc, #56]	; (8008bb0 <HAL_I2C_Mem_Read+0x280>)
 8008b76:	430b      	orrs	r3, r1
 8008b78:	6053      	str	r3, [r2, #4]
}
 8008b7a:	e752      	b.n	8008a22 <HAL_I2C_Mem_Read+0xf2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008b80:	4313      	orrs	r3, r2
 8008b82:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b84:	2341      	movs	r3, #65	; 0x41
 8008b86:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b88:	2200      	movs	r2, #0
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 8008b8e:	2340      	movs	r3, #64	; 0x40
 8008b90:	2200      	movs	r2, #0
      return HAL_ERROR;
 8008b92:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8008b94:	54ea      	strb	r2, [r5, r3]
      return HAL_ERROR;
 8008b96:	e76b      	b.n	8008a70 <HAL_I2C_Mem_Read+0x140>
      return HAL_ERROR;
 8008b98:	2001      	movs	r0, #1
 8008b9a:	e769      	b.n	8008a70 <HAL_I2C_Mem_Read+0x140>
 8008b9c:	fc009800 	.word	0xfc009800
 8008ba0:	01ff2400 	.word	0x01ff2400
 8008ba4:	fc009c00 	.word	0xfc009c00
 8008ba8:	01ff0000 	.word	0x01ff0000
 8008bac:	fe00e800 	.word	0xfe00e800
 8008bb0:	02002400 	.word	0x02002400

08008bb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bb6:	2441      	movs	r4, #65	; 0x41
 8008bb8:	5d03      	ldrb	r3, [r0, r4]
{
 8008bba:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bbc:	b2dd      	uxtb	r5, r3
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	d11a      	bne.n	8008bf8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bc2:	2640      	movs	r6, #64	; 0x40
 8008bc4:	5d83      	ldrb	r3, [r0, r6]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d016      	beq.n	8008bf8 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bca:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bcc:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bce:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8008bd0:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008bd2:	490a      	ldr	r1, [pc, #40]	; (8008bfc <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	43ba      	bics	r2, r7
 8008bd8:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	400a      	ands	r2, r1
 8008bde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008be0:	4662      	mov	r2, ip
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	4311      	orrs	r1, r2
 8008be6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	433a      	orrs	r2, r7
 8008bec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bee:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008bf0:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8008bf2:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8008bf4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008bf8:	2002      	movs	r0, #2
 8008bfa:	e7fc      	b.n	8008bf6 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8008bfc:	ffffefff 	.word	0xffffefff

08008c00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c02:	46ce      	mov	lr, r9
 8008c04:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c06:	2441      	movs	r4, #65	; 0x41
{
 8008c08:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c0a:	5d03      	ldrb	r3, [r0, r4]
 8008c0c:	b2dd      	uxtb	r5, r3
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d11f      	bne.n	8008c52 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c12:	2640      	movs	r6, #64	; 0x40
 8008c14:	5d83      	ldrb	r3, [r0, r6]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d01b      	beq.n	8008c52 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c1a:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c1c:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c1e:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8008c20:	6802      	ldr	r2, [r0, #0]
 8008c22:	46b9      	mov	r9, r7
 8008c24:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008c26:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8008c28:	43bb      	bics	r3, r7
 8008c2a:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8008c2c:	6813      	ldr	r3, [r2, #0]
 8008c2e:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8008c30:	4647      	mov	r7, r8
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8008c34:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 8008c36:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008c38:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	6813      	ldr	r3, [r2, #0]
 8008c3e:	430b      	orrs	r3, r1
 8008c40:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c42:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008c44:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8008c46:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8008c48:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008c4a:	bcc0      	pop	{r6, r7}
 8008c4c:	46b9      	mov	r9, r7
 8008c4e:	46b0      	mov	r8, r6
 8008c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008c52:	2002      	movs	r0, #2
 8008c54:	e7f9      	b.n	8008c4a <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	fffff0ff 	.word	0xfffff0ff

08008c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008c5c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008c5e:	4c13      	ldr	r4, [pc, #76]	; (8008cac <HAL_PWREx_ControlVoltageScaling+0x50>)
 8008c60:	4a13      	ldr	r2, [pc, #76]	; (8008cb0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8008c62:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8008c64:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008c66:	4013      	ands	r3, r2
 8008c68:	4303      	orrs	r3, r0
 8008c6a:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c6c:	2380      	movs	r3, #128	; 0x80
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4298      	cmp	r0, r3
 8008c72:	d001      	beq.n	8008c78 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8008c74:	0028      	movs	r0, r5
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008c78:	4b0e      	ldr	r3, [pc, #56]	; (8008cb4 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8008c7a:	490f      	ldr	r1, [pc, #60]	; (8008cb8 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	0058      	lsls	r0, r3, #1
 8008c80:	18c0      	adds	r0, r0, r3
 8008c82:	0040      	lsls	r0, r0, #1
 8008c84:	f7f7 fa5c 	bl	8000140 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c88:	2280      	movs	r2, #128	; 0x80
 8008c8a:	6963      	ldr	r3, [r4, #20]
 8008c8c:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008c8e:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c90:	4213      	tst	r3, r2
 8008c92:	d102      	bne.n	8008c9a <HAL_PWREx_ControlVoltageScaling+0x3e>
 8008c94:	e7ee      	b.n	8008c74 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d005      	beq.n	8008ca6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c9a:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8008c9c:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c9e:	4213      	tst	r3, r2
 8008ca0:	d1f9      	bne.n	8008c96 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8008ca2:	2500      	movs	r5, #0
 8008ca4:	e7e6      	b.n	8008c74 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8008ca6:	2503      	movs	r5, #3
 8008ca8:	e7e4      	b.n	8008c74 <HAL_PWREx_ControlVoltageScaling+0x18>
 8008caa:	46c0      	nop			; (mov r8, r8)
 8008cac:	40007000 	.word	0x40007000
 8008cb0:	fffff9ff 	.word	0xfffff9ff
 8008cb4:	200000e4 	.word	0x200000e4
 8008cb8:	000f4240 	.word	0x000f4240

08008cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cbe:	46ce      	mov	lr, r9
 8008cc0:	4647      	mov	r7, r8
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	0004      	movs	r4, r0
 8008cc6:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d100      	bne.n	8008cce <HAL_RCC_OscConfig+0x12>
 8008ccc:	e0f4      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cce:	6803      	ldr	r3, [r0, #0]
 8008cd0:	07da      	lsls	r2, r3, #31
 8008cd2:	d531      	bpl.n	8008d38 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cd4:	2238      	movs	r2, #56	; 0x38
 8008cd6:	49c7      	ldr	r1, [pc, #796]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008cd8:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cda:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cdc:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008cde:	2a10      	cmp	r2, #16
 8008ce0:	d100      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x28>
 8008ce2:	e0ef      	b.n	8008ec4 <HAL_RCC_OscConfig+0x208>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008ce4:	2a08      	cmp	r2, #8
 8008ce6:	d100      	bne.n	8008cea <HAL_RCC_OscConfig+0x2e>
 8008ce8:	e0f0      	b.n	8008ecc <HAL_RCC_OscConfig+0x210>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cea:	2280      	movs	r2, #128	; 0x80
 8008cec:	6863      	ldr	r3, [r4, #4]
 8008cee:	0252      	lsls	r2, r2, #9
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d100      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x3a>
 8008cf4:	e0fd      	b.n	8008ef2 <HAL_RCC_OscConfig+0x236>
 8008cf6:	21a0      	movs	r1, #160	; 0xa0
 8008cf8:	02c9      	lsls	r1, r1, #11
 8008cfa:	428b      	cmp	r3, r1
 8008cfc:	d100      	bne.n	8008d00 <HAL_RCC_OscConfig+0x44>
 8008cfe:	e1d0      	b.n	80090a2 <HAL_RCC_OscConfig+0x3e6>
 8008d00:	4dbc      	ldr	r5, [pc, #752]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008d02:	49bd      	ldr	r1, [pc, #756]	; (8008ff8 <HAL_RCC_OscConfig+0x33c>)
 8008d04:	682a      	ldr	r2, [r5, #0]
 8008d06:	400a      	ands	r2, r1
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	682a      	ldr	r2, [r5, #0]
 8008d0c:	49bb      	ldr	r1, [pc, #748]	; (8008ffc <HAL_RCC_OscConfig+0x340>)
 8008d0e:	400a      	ands	r2, r1
 8008d10:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d000      	beq.n	8008d18 <HAL_RCC_OscConfig+0x5c>
 8008d16:	e0f0      	b.n	8008efa <HAL_RCC_OscConfig+0x23e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7fe fcbc 	bl	8007694 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d1c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8008d1e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d20:	02bf      	lsls	r7, r7, #10
 8008d22:	e005      	b.n	8008d30 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d24:	f7fe fcb6 	bl	8007694 <HAL_GetTick>
 8008d28:	1b80      	subs	r0, r0, r6
 8008d2a:	2864      	cmp	r0, #100	; 0x64
 8008d2c:	d900      	bls.n	8008d30 <HAL_RCC_OscConfig+0x74>
 8008d2e:	e138      	b.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	423b      	tst	r3, r7
 8008d34:	d1f6      	bne.n	8008d24 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	079a      	lsls	r2, r3, #30
 8008d3a:	d52b      	bpl.n	8008d94 <HAL_RCC_OscConfig+0xd8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d3c:	2338      	movs	r3, #56	; 0x38
 8008d3e:	4aad      	ldr	r2, [pc, #692]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008d40:	6891      	ldr	r1, [r2, #8]
 8008d42:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d44:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d100      	bne.n	8008d4c <HAL_RCC_OscConfig+0x90>
 8008d4a:	e0e7      	b.n	8008f1c <HAL_RCC_OscConfig+0x260>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d000      	beq.n	8008d52 <HAL_RCC_OscConfig+0x96>
 8008d50:	e0e9      	b.n	8008f26 <HAL_RCC_OscConfig+0x26a>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	055b      	lsls	r3, r3, #21
 8008d56:	d500      	bpl.n	8008d5a <HAL_RCC_OscConfig+0x9e>
 8008d58:	e0aa      	b.n	8008eb0 <HAL_RCC_OscConfig+0x1f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d5a:	6851      	ldr	r1, [r2, #4]
 8008d5c:	6963      	ldr	r3, [r4, #20]
 8008d5e:	48a8      	ldr	r0, [pc, #672]	; (8009000 <HAL_RCC_OscConfig+0x344>)
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	4001      	ands	r1, r0
 8008d64:	430b      	orrs	r3, r1
 8008d66:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008d68:	4aa2      	ldr	r2, [pc, #648]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008d6a:	49a6      	ldr	r1, [pc, #664]	; (8009004 <HAL_RCC_OscConfig+0x348>)
 8008d6c:	6813      	ldr	r3, [r2, #0]
 8008d6e:	400b      	ands	r3, r1
 8008d70:	6921      	ldr	r1, [r4, #16]
 8008d72:	430b      	orrs	r3, r1
 8008d74:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008d76:	6813      	ldr	r3, [r2, #0]
 8008d78:	4aa3      	ldr	r2, [pc, #652]	; (8009008 <HAL_RCC_OscConfig+0x34c>)
 8008d7a:	049b      	lsls	r3, r3, #18
 8008d7c:	0f5b      	lsrs	r3, r3, #29
 8008d7e:	40da      	lsrs	r2, r3
 8008d80:	49a2      	ldr	r1, [pc, #648]	; (800900c <HAL_RCC_OscConfig+0x350>)
 8008d82:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d84:	4ba2      	ldr	r3, [pc, #648]	; (8009010 <HAL_RCC_OscConfig+0x354>)
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	f7fe fb40 	bl	800740c <HAL_InitTick>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d000      	beq.n	8008d92 <HAL_RCC_OscConfig+0xd6>
 8008d90:	e092      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	071a      	lsls	r2, r3, #28
 8008d96:	d46d      	bmi.n	8008e74 <HAL_RCC_OscConfig+0x1b8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d98:	075b      	lsls	r3, r3, #29
 8008d9a:	d545      	bpl.n	8008e28 <HAL_RCC_OscConfig+0x16c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008d9c:	2338      	movs	r3, #56	; 0x38
 8008d9e:	4a95      	ldr	r2, [pc, #596]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008da0:	6891      	ldr	r1, [r2, #8]
 8008da2:	400b      	ands	r3, r1
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d100      	bne.n	8008daa <HAL_RCC_OscConfig+0xee>
 8008da8:	e0e3      	b.n	8008f72 <HAL_RCC_OscConfig+0x2b6>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008daa:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8008dac:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008dae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008db0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8008db2:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008db4:	4219      	tst	r1, r3
 8008db6:	d108      	bne.n	8008dca <HAL_RCC_OscConfig+0x10e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008db8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008dba:	4319      	orrs	r1, r3
 8008dbc:	63d1      	str	r1, [r2, #60]	; 0x3c
 8008dbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dca:	2780      	movs	r7, #128	; 0x80
 8008dcc:	4e91      	ldr	r6, [pc, #580]	; (8009014 <HAL_RCC_OscConfig+0x358>)
 8008dce:	007f      	lsls	r7, r7, #1
 8008dd0:	6833      	ldr	r3, [r6, #0]
 8008dd2:	423b      	tst	r3, r7
 8008dd4:	d100      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x11c>
 8008dd6:	e0d5      	b.n	8008f84 <HAL_RCC_OscConfig+0x2c8>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dd8:	68a3      	ldr	r3, [r4, #8]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d100      	bne.n	8008de0 <HAL_RCC_OscConfig+0x124>
 8008dde:	e123      	b.n	8009028 <HAL_RCC_OscConfig+0x36c>
 8008de0:	2b05      	cmp	r3, #5
 8008de2:	d100      	bne.n	8008de6 <HAL_RCC_OscConfig+0x12a>
 8008de4:	e1ba      	b.n	800915c <HAL_RCC_OscConfig+0x4a0>
 8008de6:	2101      	movs	r1, #1
 8008de8:	4e82      	ldr	r6, [pc, #520]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008dea:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8008dec:	438a      	bics	r2, r1
 8008dee:	65f2      	str	r2, [r6, #92]	; 0x5c
 8008df0:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8008df2:	3103      	adds	r1, #3
 8008df4:	438a      	bics	r2, r1
 8008df6:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d000      	beq.n	8008dfe <HAL_RCC_OscConfig+0x142>
 8008dfc:	e118      	b.n	8009030 <HAL_RCC_OscConfig+0x374>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfe:	f7fe fc49 	bl	8007694 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e02:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8008e04:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e06:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e08:	4d83      	ldr	r5, [pc, #524]	; (8009018 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e0a:	e005      	b.n	8008e18 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e0c:	f7fe fc42 	bl	8007694 <HAL_GetTick>
 8008e10:	1bc0      	subs	r0, r0, r7
 8008e12:	42a8      	cmp	r0, r5
 8008e14:	d900      	bls.n	8008e18 <HAL_RCC_OscConfig+0x15c>
 8008e16:	e0c4      	b.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e18:	4642      	mov	r2, r8
 8008e1a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8008e1c:	421a      	tst	r2, r3
 8008e1e:	d1f5      	bne.n	8008e0c <HAL_RCC_OscConfig+0x150>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008e20:	464b      	mov	r3, r9
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d100      	bne.n	8008e28 <HAL_RCC_OscConfig+0x16c>
 8008e26:	e155      	b.n	80090d4 <HAL_RCC_OscConfig+0x418>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e28:	69e3      	ldr	r3, [r4, #28]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d020      	beq.n	8008e70 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e2e:	2238      	movs	r2, #56	; 0x38
 8008e30:	4d70      	ldr	r5, [pc, #448]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008e32:	68a9      	ldr	r1, [r5, #8]
 8008e34:	400a      	ands	r2, r1
 8008e36:	2a10      	cmp	r2, #16
 8008e38:	d100      	bne.n	8008e3c <HAL_RCC_OscConfig+0x180>
 8008e3a:	e10b      	b.n	8009054 <HAL_RCC_OscConfig+0x398>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d100      	bne.n	8008e42 <HAL_RCC_OscConfig+0x186>
 8008e40:	e14e      	b.n	80090e0 <HAL_RCC_OscConfig+0x424>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e42:	682b      	ldr	r3, [r5, #0]
 8008e44:	4a75      	ldr	r2, [pc, #468]	; (800901c <HAL_RCC_OscConfig+0x360>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e46:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8008e48:	4013      	ands	r3, r2
 8008e4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008e4c:	f7fe fc22 	bl	8007694 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e50:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8008e52:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e54:	e005      	b.n	8008e62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e56:	f7fe fc1d 	bl	8007694 <HAL_GetTick>
 8008e5a:	1b00      	subs	r0, r0, r4
 8008e5c:	2802      	cmp	r0, #2
 8008e5e:	d900      	bls.n	8008e62 <HAL_RCC_OscConfig+0x1a6>
 8008e60:	e09f      	b.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e62:	682b      	ldr	r3, [r5, #0]
 8008e64:	4233      	tst	r3, r6
 8008e66:	d1f6      	bne.n	8008e56 <HAL_RCC_OscConfig+0x19a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008e68:	68eb      	ldr	r3, [r5, #12]
 8008e6a:	4a6d      	ldr	r2, [pc, #436]	; (8009020 <HAL_RCC_OscConfig+0x364>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	60eb      	str	r3, [r5, #12]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8008e70:	2000      	movs	r0, #0
 8008e72:	e022      	b.n	8008eba <HAL_RCC_OscConfig+0x1fe>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008e74:	2238      	movs	r2, #56	; 0x38
 8008e76:	4d5f      	ldr	r5, [pc, #380]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008e78:	68a9      	ldr	r1, [r5, #8]
 8008e7a:	400a      	ands	r2, r1
 8008e7c:	2a18      	cmp	r2, #24
 8008e7e:	d02f      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x224>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e80:	69a3      	ldr	r3, [r4, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d100      	bne.n	8008e88 <HAL_RCC_OscConfig+0x1cc>
 8008e86:	e08e      	b.n	8008fa6 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_LSI_ENABLE();
 8008e88:	2201      	movs	r2, #1
 8008e8a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e8c:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008e92:	f7fe fbff 	bl	8007694 <HAL_GetTick>
 8008e96:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e98:	e005      	b.n	8008ea6 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e9a:	f7fe fbfb 	bl	8007694 <HAL_GetTick>
 8008e9e:	1b80      	subs	r0, r0, r6
 8008ea0:	2802      	cmp	r0, #2
 8008ea2:	d900      	bls.n	8008ea6 <HAL_RCC_OscConfig+0x1ea>
 8008ea4:	e07d      	b.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ea6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8008ea8:	421f      	tst	r7, r3
 8008eaa:	d0f6      	beq.n	8008e9a <HAL_RCC_OscConfig+0x1de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	e773      	b.n	8008d98 <HAL_RCC_OscConfig+0xdc>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eb0:	68e3      	ldr	r3, [r4, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d000      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
 8008eb6:	e750      	b.n	8008d5a <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 8008eb8:	2001      	movs	r0, #1
}
 8008eba:	b003      	add	sp, #12
 8008ebc:	bcc0      	pop	{r6, r7}
 8008ebe:	46b9      	mov	r9, r7
 8008ec0:	46b0      	mov	r8, r6
 8008ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ec4:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008ec6:	0789      	lsls	r1, r1, #30
 8008ec8:	d000      	beq.n	8008ecc <HAL_RCC_OscConfig+0x210>
 8008eca:	e70e      	b.n	8008cea <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ecc:	4a49      	ldr	r2, [pc, #292]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008ece:	6812      	ldr	r2, [r2, #0]
 8008ed0:	0392      	lsls	r2, r2, #14
 8008ed2:	d400      	bmi.n	8008ed6 <HAL_RCC_OscConfig+0x21a>
 8008ed4:	e730      	b.n	8008d38 <HAL_RCC_OscConfig+0x7c>
 8008ed6:	6862      	ldr	r2, [r4, #4]
 8008ed8:	2a00      	cmp	r2, #0
 8008eda:	d000      	beq.n	8008ede <HAL_RCC_OscConfig+0x222>
 8008edc:	e72c      	b.n	8008d38 <HAL_RCC_OscConfig+0x7c>
 8008ede:	e7eb      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008ee0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8008ee2:	0792      	lsls	r2, r2, #30
 8008ee4:	d400      	bmi.n	8008ee8 <HAL_RCC_OscConfig+0x22c>
 8008ee6:	e757      	b.n	8008d98 <HAL_RCC_OscConfig+0xdc>
 8008ee8:	69a2      	ldr	r2, [r4, #24]
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	d000      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x234>
 8008eee:	e753      	b.n	8008d98 <HAL_RCC_OscConfig+0xdc>
 8008ef0:	e7e2      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ef2:	4a40      	ldr	r2, [pc, #256]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008ef4:	6811      	ldr	r1, [r2, #0]
 8008ef6:	430b      	orrs	r3, r1
 8008ef8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008efa:	f7fe fbcb 	bl	8007694 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008efe:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8008f00:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f02:	4f3c      	ldr	r7, [pc, #240]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
 8008f04:	02b6      	lsls	r6, r6, #10
 8008f06:	e004      	b.n	8008f12 <HAL_RCC_OscConfig+0x256>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f08:	f7fe fbc4 	bl	8007694 <HAL_GetTick>
 8008f0c:	1b40      	subs	r0, r0, r5
 8008f0e:	2864      	cmp	r0, #100	; 0x64
 8008f10:	d847      	bhi.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	4233      	tst	r3, r6
 8008f16:	d0f7      	beq.n	8008f08 <HAL_RCC_OscConfig+0x24c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	e70d      	b.n	8008d38 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f1c:	3b0d      	subs	r3, #13
 8008f1e:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d100      	bne.n	8008f26 <HAL_RCC_OscConfig+0x26a>
 8008f24:	e0c7      	b.n	80090b6 <HAL_RCC_OscConfig+0x3fa>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f26:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008f28:	4d32      	ldr	r5, [pc, #200]	; (8008ff4 <HAL_RCC_OscConfig+0x338>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d04e      	beq.n	8008fcc <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008f2e:	682b      	ldr	r3, [r5, #0]
 8008f30:	4a34      	ldr	r2, [pc, #208]	; (8009004 <HAL_RCC_OscConfig+0x348>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f32:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008f34:	4013      	ands	r3, r2
 8008f36:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f38:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8008f3e:	2380      	movs	r3, #128	; 0x80
 8008f40:	682a      	ldr	r2, [r5, #0]
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	4313      	orrs	r3, r2
 8008f46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008f48:	f7fe fba4 	bl	8007694 <HAL_GetTick>
 8008f4c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f4e:	e004      	b.n	8008f5a <HAL_RCC_OscConfig+0x29e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f50:	f7fe fba0 	bl	8007694 <HAL_GetTick>
 8008f54:	1b80      	subs	r0, r0, r6
 8008f56:	2802      	cmp	r0, #2
 8008f58:	d823      	bhi.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f5a:	682b      	ldr	r3, [r5, #0]
 8008f5c:	423b      	tst	r3, r7
 8008f5e:	d0f7      	beq.n	8008f50 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f60:	686a      	ldr	r2, [r5, #4]
 8008f62:	6963      	ldr	r3, [r4, #20]
 8008f64:	4926      	ldr	r1, [pc, #152]	; (8009000 <HAL_RCC_OscConfig+0x344>)
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	400a      	ands	r2, r1
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	e710      	b.n	8008d94 <HAL_RCC_OscConfig+0xd8>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008f72:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8008f74:	079b      	lsls	r3, r3, #30
 8008f76:	d400      	bmi.n	8008f7a <HAL_RCC_OscConfig+0x2be>
 8008f78:	e756      	b.n	8008e28 <HAL_RCC_OscConfig+0x16c>
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d000      	beq.n	8008f82 <HAL_RCC_OscConfig+0x2c6>
 8008f80:	e752      	b.n	8008e28 <HAL_RCC_OscConfig+0x16c>
 8008f82:	e799      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f84:	6833      	ldr	r3, [r6, #0]
 8008f86:	433b      	orrs	r3, r7
 8008f88:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8008f8a:	f7fe fb83 	bl	8007694 <HAL_GetTick>
 8008f8e:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f90:	6833      	ldr	r3, [r6, #0]
 8008f92:	423b      	tst	r3, r7
 8008f94:	d000      	beq.n	8008f98 <HAL_RCC_OscConfig+0x2dc>
 8008f96:	e71f      	b.n	8008dd8 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f98:	f7fe fb7c 	bl	8007694 <HAL_GetTick>
 8008f9c:	1b40      	subs	r0, r0, r5
 8008f9e:	2802      	cmp	r0, #2
 8008fa0:	d9f6      	bls.n	8008f90 <HAL_RCC_OscConfig+0x2d4>
            return HAL_TIMEOUT;
 8008fa2:	2003      	movs	r0, #3
 8008fa4:	e789      	b.n	8008eba <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_LSI_DISABLE();
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008faa:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8008fac:	4393      	bics	r3, r2
 8008fae:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008fb0:	f7fe fb70 	bl	8007694 <HAL_GetTick>
 8008fb4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008fb6:	e004      	b.n	8008fc2 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fb8:	f7fe fb6c 	bl	8007694 <HAL_GetTick>
 8008fbc:	1b80      	subs	r0, r0, r6
 8008fbe:	2802      	cmp	r0, #2
 8008fc0:	d8ef      	bhi.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008fc2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8008fc4:	421f      	tst	r7, r3
 8008fc6:	d1f7      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x2fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	e6e5      	b.n	8008d98 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	4a15      	ldr	r2, [pc, #84]	; (8009024 <HAL_RCC_OscConfig+0x368>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fd0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008fd6:	f7fe fb5d 	bl	8007694 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fda:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8008fdc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fde:	e004      	b.n	8008fea <HAL_RCC_OscConfig+0x32e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fe0:	f7fe fb58 	bl	8007694 <HAL_GetTick>
 8008fe4:	1b80      	subs	r0, r0, r6
 8008fe6:	2802      	cmp	r0, #2
 8008fe8:	d8db      	bhi.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fea:	682b      	ldr	r3, [r5, #0]
 8008fec:	423b      	tst	r3, r7
 8008fee:	d1f7      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x324>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	e6cf      	b.n	8008d94 <HAL_RCC_OscConfig+0xd8>
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	fffeffff 	.word	0xfffeffff
 8008ffc:	fffbffff 	.word	0xfffbffff
 8009000:	ffff80ff 	.word	0xffff80ff
 8009004:	ffffc7ff 	.word	0xffffc7ff
 8009008:	00f42400 	.word	0x00f42400
 800900c:	200000e4 	.word	0x200000e4
 8009010:	200000ec 	.word	0x200000ec
 8009014:	40007000 	.word	0x40007000
 8009018:	00001388 	.word	0x00001388
 800901c:	feffffff 	.word	0xfeffffff
 8009020:	effefffc 	.word	0xeffefffc
 8009024:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009028:	4951      	ldr	r1, [pc, #324]	; (8009170 <HAL_RCC_OscConfig+0x4b4>)
 800902a:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800902c:	4313      	orrs	r3, r2
 800902e:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8009030:	f7fe fb30 	bl	8007694 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009034:	4b4e      	ldr	r3, [pc, #312]	; (8009170 <HAL_RCC_OscConfig+0x4b4>)
        tickstart = HAL_GetTick();
 8009036:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009038:	4698      	mov	r8, r3
 800903a:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800903c:	4d4d      	ldr	r5, [pc, #308]	; (8009174 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800903e:	e004      	b.n	800904a <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009040:	f7fe fb28 	bl	8007694 <HAL_GetTick>
 8009044:	1b80      	subs	r0, r0, r6
 8009046:	42a8      	cmp	r0, r5
 8009048:	d8ab      	bhi.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800904a:	4643      	mov	r3, r8
 800904c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800904e:	421f      	tst	r7, r3
 8009050:	d0f6      	beq.n	8009040 <HAL_RCC_OscConfig+0x384>
 8009052:	e6e5      	b.n	8008e20 <HAL_RCC_OscConfig+0x164>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009054:	2b01      	cmp	r3, #1
 8009056:	d100      	bne.n	800905a <HAL_RCC_OscConfig+0x39e>
 8009058:	e72e      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800905a:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 800905c:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800905e:	6a21      	ldr	r1, [r4, #32]
 8009060:	4013      	ands	r3, r2
 8009062:	428b      	cmp	r3, r1
 8009064:	d000      	beq.n	8009068 <HAL_RCC_OscConfig+0x3ac>
 8009066:	e727      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009068:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800906a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800906c:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800906e:	428b      	cmp	r3, r1
 8009070:	d000      	beq.n	8009074 <HAL_RCC_OscConfig+0x3b8>
 8009072:	e721      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009074:	21fe      	movs	r1, #254	; 0xfe
 8009076:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009078:	01c9      	lsls	r1, r1, #7
 800907a:	4011      	ands	r1, r2
 800907c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800907e:	4299      	cmp	r1, r3
 8009080:	d000      	beq.n	8009084 <HAL_RCC_OscConfig+0x3c8>
 8009082:	e719      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009084:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009086:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009088:	039b      	lsls	r3, r3, #14
 800908a:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800908c:	428b      	cmp	r3, r1
 800908e:	d000      	beq.n	8009092 <HAL_RCC_OscConfig+0x3d6>
 8009090:	e712      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009092:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009094:	0f52      	lsrs	r2, r2, #29
 8009096:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009098:	429a      	cmp	r2, r3
 800909a:	d000      	beq.n	800909e <HAL_RCC_OscConfig+0x3e2>
 800909c:	e70c      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
  return HAL_OK;
 800909e:	2000      	movs	r0, #0
 80090a0:	e70b      	b.n	8008eba <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090a2:	2180      	movs	r1, #128	; 0x80
 80090a4:	4b32      	ldr	r3, [pc, #200]	; (8009170 <HAL_RCC_OscConfig+0x4b4>)
 80090a6:	02c9      	lsls	r1, r1, #11
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	4301      	orrs	r1, r0
 80090ac:	6019      	str	r1, [r3, #0]
 80090ae:	6819      	ldr	r1, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090b4:	e721      	b.n	8008efa <HAL_RCC_OscConfig+0x23e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090b6:	6813      	ldr	r3, [r2, #0]
 80090b8:	055b      	lsls	r3, r3, #21
 80090ba:	d503      	bpl.n	80090c4 <HAL_RCC_OscConfig+0x408>
 80090bc:	68e3      	ldr	r3, [r4, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d100      	bne.n	80090c4 <HAL_RCC_OscConfig+0x408>
 80090c2:	e6f9      	b.n	8008eb8 <HAL_RCC_OscConfig+0x1fc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090c4:	6851      	ldr	r1, [r2, #4]
 80090c6:	6963      	ldr	r3, [r4, #20]
 80090c8:	482b      	ldr	r0, [pc, #172]	; (8009178 <HAL_RCC_OscConfig+0x4bc>)
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	4001      	ands	r1, r0
 80090ce:	430b      	orrs	r3, r1
 80090d0:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80090d2:	e657      	b.n	8008d84 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_PWR_CLK_DISABLE();
 80090d4:	4a26      	ldr	r2, [pc, #152]	; (8009170 <HAL_RCC_OscConfig+0x4b4>)
 80090d6:	4929      	ldr	r1, [pc, #164]	; (800917c <HAL_RCC_OscConfig+0x4c0>)
 80090d8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80090da:	400b      	ands	r3, r1
 80090dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80090de:	e6a3      	b.n	8008e28 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	4a27      	ldr	r2, [pc, #156]	; (8009180 <HAL_RCC_OscConfig+0x4c4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090e4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80090e6:	4013      	ands	r3, r2
 80090e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80090ea:	f7fe fad3 	bl	8007694 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090ee:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80090f0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090f2:	e005      	b.n	8009100 <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090f4:	f7fe face 	bl	8007694 <HAL_GetTick>
 80090f8:	1b80      	subs	r0, r0, r6
 80090fa:	2802      	cmp	r0, #2
 80090fc:	d900      	bls.n	8009100 <HAL_RCC_OscConfig+0x444>
 80090fe:	e750      	b.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	423b      	tst	r3, r7
 8009104:	d1f6      	bne.n	80090f4 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009106:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009108:	6a23      	ldr	r3, [r4, #32]
 800910a:	68ea      	ldr	r2, [r5, #12]
 800910c:	430b      	orrs	r3, r1
 800910e:	491d      	ldr	r1, [pc, #116]	; (8009184 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009110:	4e17      	ldr	r6, [pc, #92]	; (8009170 <HAL_RCC_OscConfig+0x4b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009112:	400a      	ands	r2, r1
 8009114:	4313      	orrs	r3, r2
 8009116:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009118:	4313      	orrs	r3, r2
 800911a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800911c:	4313      	orrs	r3, r2
 800911e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009120:	0212      	lsls	r2, r2, #8
 8009122:	4313      	orrs	r3, r2
 8009124:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8009126:	2380      	movs	r3, #128	; 0x80
 8009128:	682a      	ldr	r2, [r5, #0]
 800912a:	045b      	lsls	r3, r3, #17
 800912c:	4313      	orrs	r3, r2
 800912e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009130:	2380      	movs	r3, #128	; 0x80
 8009132:	68ea      	ldr	r2, [r5, #12]
 8009134:	055b      	lsls	r3, r3, #21
 8009136:	4313      	orrs	r3, r2
 8009138:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800913a:	f7fe faab 	bl	8007694 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800913e:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8009140:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009142:	04ad      	lsls	r5, r5, #18
 8009144:	e005      	b.n	8009152 <HAL_RCC_OscConfig+0x496>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009146:	f7fe faa5 	bl	8007694 <HAL_GetTick>
 800914a:	1b00      	subs	r0, r0, r4
 800914c:	2802      	cmp	r0, #2
 800914e:	d900      	bls.n	8009152 <HAL_RCC_OscConfig+0x496>
 8009150:	e727      	b.n	8008fa2 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009152:	6833      	ldr	r3, [r6, #0]
 8009154:	422b      	tst	r3, r5
 8009156:	d0f6      	beq.n	8009146 <HAL_RCC_OscConfig+0x48a>
  return HAL_OK;
 8009158:	2000      	movs	r0, #0
 800915a:	e6ae      	b.n	8008eba <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800915c:	2104      	movs	r1, #4
 800915e:	4b04      	ldr	r3, [pc, #16]	; (8009170 <HAL_RCC_OscConfig+0x4b4>)
 8009160:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009162:	430a      	orrs	r2, r1
 8009164:	65da      	str	r2, [r3, #92]	; 0x5c
 8009166:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009168:	3903      	subs	r1, #3
 800916a:	430a      	orrs	r2, r1
 800916c:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800916e:	e75f      	b.n	8009030 <HAL_RCC_OscConfig+0x374>
 8009170:	40021000 	.word	0x40021000
 8009174:	00001388 	.word	0x00001388
 8009178:	ffff80ff 	.word	0xffff80ff
 800917c:	efffffff 	.word	0xefffffff
 8009180:	feffffff 	.word	0xfeffffff
 8009184:	1fc1808c 	.word	0x1fc1808c

08009188 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009188:	2338      	movs	r3, #56	; 0x38
 800918a:	4a21      	ldr	r2, [pc, #132]	; (8009210 <HAL_RCC_GetSysClockFreq+0x88>)
{
 800918c:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800918e:	6891      	ldr	r1, [r2, #8]
 8009190:	420b      	tst	r3, r1
 8009192:	d105      	bne.n	80091a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009194:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009196:	481f      	ldr	r0, [pc, #124]	; (8009214 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009198:	049b      	lsls	r3, r3, #18
 800919a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800919c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800919e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80091a0:	6891      	ldr	r1, [r2, #8]
 80091a2:	4019      	ands	r1, r3
 80091a4:	2908      	cmp	r1, #8
 80091a6:	d012      	beq.n	80091ce <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091a8:	6891      	ldr	r1, [r2, #8]
 80091aa:	4019      	ands	r1, r3
 80091ac:	2910      	cmp	r1, #16
 80091ae:	d010      	beq.n	80091d2 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80091b0:	6891      	ldr	r1, [r2, #8]
 80091b2:	4019      	ands	r1, r3
 80091b4:	2920      	cmp	r1, #32
 80091b6:	d022      	beq.n	80091fe <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80091b8:	6892      	ldr	r2, [r2, #8]
 80091ba:	4013      	ands	r3, r2
    sysclockfreq = 0U;
 80091bc:	3b18      	subs	r3, #24
 80091be:	0018      	movs	r0, r3
 80091c0:	4243      	negs	r3, r0
 80091c2:	4158      	adcs	r0, r3
 80091c4:	23fa      	movs	r3, #250	; 0xfa
 80091c6:	4240      	negs	r0, r0
 80091c8:	01db      	lsls	r3, r3, #7
 80091ca:	4018      	ands	r0, r3
 80091cc:	e7e7      	b.n	800919e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80091ce:	4812      	ldr	r0, [pc, #72]	; (8009218 <HAL_RCC_GetSysClockFreq+0x90>)
 80091d0:	e7e5      	b.n	800919e <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80091d2:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091d4:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80091d6:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80091d8:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091da:	0649      	lsls	r1, r1, #25
 80091dc:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80091de:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091e0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80091e2:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 80091e4:	079b      	lsls	r3, r3, #30
 80091e6:	d00d      	beq.n	8009204 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80091e8:	480a      	ldr	r0, [pc, #40]	; (8009214 <HAL_RCC_GetSysClockFreq+0x8c>)
 80091ea:	f7f6 ffa9 	bl	8000140 <__udivsi3>
 80091ee:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <HAL_RCC_GetSysClockFreq+0x88>)
 80091f2:	68d9      	ldr	r1, [r3, #12]
 80091f4:	0f49      	lsrs	r1, r1, #29
 80091f6:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80091f8:	f7f6 ffa2 	bl	8000140 <__udivsi3>
 80091fc:	e7cf      	b.n	800919e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80091fe:	2080      	movs	r0, #128	; 0x80
 8009200:	0200      	lsls	r0, r0, #8
 8009202:	e7cc      	b.n	800919e <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009204:	4804      	ldr	r0, [pc, #16]	; (8009218 <HAL_RCC_GetSysClockFreq+0x90>)
 8009206:	f7f6 ff9b 	bl	8000140 <__udivsi3>
 800920a:	4360      	muls	r0, r4
        break;
 800920c:	e7f0      	b.n	80091f0 <HAL_RCC_GetSysClockFreq+0x68>
 800920e:	46c0      	nop			; (mov r8, r8)
 8009210:	40021000 	.word	0x40021000
 8009214:	00f42400 	.word	0x00f42400
 8009218:	007a1200 	.word	0x007a1200

0800921c <HAL_RCC_ClockConfig>:
{
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	46ce      	mov	lr, r9
 8009220:	4647      	mov	r7, r8
 8009222:	0005      	movs	r5, r0
 8009224:	000c      	movs	r4, r1
 8009226:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8009228:	2800      	cmp	r0, #0
 800922a:	d026      	beq.n	800927a <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800922c:	2207      	movs	r2, #7
 800922e:	4e57      	ldr	r6, [pc, #348]	; (800938c <HAL_RCC_ClockConfig+0x170>)
 8009230:	6833      	ldr	r3, [r6, #0]
 8009232:	4013      	ands	r3, r2
 8009234:	428b      	cmp	r3, r1
 8009236:	d35e      	bcc.n	80092f6 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	079a      	lsls	r2, r3, #30
 800923c:	d50e      	bpl.n	800925c <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800923e:	075a      	lsls	r2, r3, #29
 8009240:	d505      	bpl.n	800924e <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009242:	22e0      	movs	r2, #224	; 0xe0
 8009244:	4952      	ldr	r1, [pc, #328]	; (8009390 <HAL_RCC_ClockConfig+0x174>)
 8009246:	01d2      	lsls	r2, r2, #7
 8009248:	6888      	ldr	r0, [r1, #8]
 800924a:	4302      	orrs	r2, r0
 800924c:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800924e:	4950      	ldr	r1, [pc, #320]	; (8009390 <HAL_RCC_ClockConfig+0x174>)
 8009250:	4850      	ldr	r0, [pc, #320]	; (8009394 <HAL_RCC_ClockConfig+0x178>)
 8009252:	688a      	ldr	r2, [r1, #8]
 8009254:	4002      	ands	r2, r0
 8009256:	68a8      	ldr	r0, [r5, #8]
 8009258:	4302      	orrs	r2, r0
 800925a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800925c:	07db      	lsls	r3, r3, #31
 800925e:	d52b      	bpl.n	80092b8 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009260:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009262:	4a4b      	ldr	r2, [pc, #300]	; (8009390 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009264:	2b01      	cmp	r3, #1
 8009266:	d100      	bne.n	800926a <HAL_RCC_ClockConfig+0x4e>
 8009268:	e07c      	b.n	8009364 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800926a:	2b02      	cmp	r3, #2
 800926c:	d007      	beq.n	800927e <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800926e:	2b00      	cmp	r3, #0
 8009270:	d000      	beq.n	8009274 <HAL_RCC_ClockConfig+0x58>
 8009272:	e07d      	b.n	8009370 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	0552      	lsls	r2, r2, #21
 8009278:	d404      	bmi.n	8009284 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800927a:	2001      	movs	r0, #1
 800927c:	e037      	b.n	80092ee <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800927e:	6812      	ldr	r2, [r2, #0]
 8009280:	0192      	lsls	r2, r2, #6
 8009282:	d5fa      	bpl.n	800927a <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009284:	2107      	movs	r1, #7
 8009286:	4e42      	ldr	r6, [pc, #264]	; (8009390 <HAL_RCC_ClockConfig+0x174>)
 8009288:	68b2      	ldr	r2, [r6, #8]
 800928a:	438a      	bics	r2, r1
 800928c:	4313      	orrs	r3, r2
 800928e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009290:	f7fe fa00 	bl	8007694 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009294:	2338      	movs	r3, #56	; 0x38
 8009296:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009298:	4b3f      	ldr	r3, [pc, #252]	; (8009398 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800929a:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800929c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800929e:	e004      	b.n	80092aa <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092a0:	f7fe f9f8 	bl	8007694 <HAL_GetTick>
 80092a4:	1bc0      	subs	r0, r0, r7
 80092a6:	4548      	cmp	r0, r9
 80092a8:	d83b      	bhi.n	8009322 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092aa:	4643      	mov	r3, r8
 80092ac:	68b2      	ldr	r2, [r6, #8]
 80092ae:	401a      	ands	r2, r3
 80092b0:	686b      	ldr	r3, [r5, #4]
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d1f3      	bne.n	80092a0 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092b8:	2207      	movs	r2, #7
 80092ba:	4e34      	ldr	r6, [pc, #208]	; (800938c <HAL_RCC_ClockConfig+0x170>)
 80092bc:	6833      	ldr	r3, [r6, #0]
 80092be:	4013      	ands	r3, r2
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	d838      	bhi.n	8009336 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	075b      	lsls	r3, r3, #29
 80092c8:	d42d      	bmi.n	8009326 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80092ca:	f7ff ff5d 	bl	8009188 <HAL_RCC_GetSysClockFreq>
 80092ce:	4b30      	ldr	r3, [pc, #192]	; (8009390 <HAL_RCC_ClockConfig+0x174>)
 80092d0:	4a32      	ldr	r2, [pc, #200]	; (800939c <HAL_RCC_ClockConfig+0x180>)
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	4932      	ldr	r1, [pc, #200]	; (80093a0 <HAL_RCC_ClockConfig+0x184>)
 80092d6:	051b      	lsls	r3, r3, #20
 80092d8:	0f1b      	lsrs	r3, r3, #28
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	589b      	ldr	r3, [r3, r2]
 80092de:	221f      	movs	r2, #31
 80092e0:	4013      	ands	r3, r2
 80092e2:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 80092e4:	4b2f      	ldr	r3, [pc, #188]	; (80093a4 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80092e6:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	f7fe f88f 	bl	800740c <HAL_InitTick>
}
 80092ee:	bcc0      	pop	{r6, r7}
 80092f0:	46b9      	mov	r9, r7
 80092f2:	46b0      	mov	r8, r6
 80092f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092f6:	6833      	ldr	r3, [r6, #0]
 80092f8:	4393      	bics	r3, r2
 80092fa:	430b      	orrs	r3, r1
 80092fc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80092fe:	f7fe f9c9 	bl	8007694 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009302:	2307      	movs	r3, #7
 8009304:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009306:	4b24      	ldr	r3, [pc, #144]	; (8009398 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8009308:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800930a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800930c:	4642      	mov	r2, r8
 800930e:	6833      	ldr	r3, [r6, #0]
 8009310:	4013      	ands	r3, r2
 8009312:	42a3      	cmp	r3, r4
 8009314:	d100      	bne.n	8009318 <HAL_RCC_ClockConfig+0xfc>
 8009316:	e78f      	b.n	8009238 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009318:	f7fe f9bc 	bl	8007694 <HAL_GetTick>
 800931c:	1bc0      	subs	r0, r0, r7
 800931e:	4548      	cmp	r0, r9
 8009320:	d9f4      	bls.n	800930c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8009322:	2003      	movs	r0, #3
 8009324:	e7e3      	b.n	80092ee <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009326:	4a1a      	ldr	r2, [pc, #104]	; (8009390 <HAL_RCC_ClockConfig+0x174>)
 8009328:	491f      	ldr	r1, [pc, #124]	; (80093a8 <HAL_RCC_ClockConfig+0x18c>)
 800932a:	6893      	ldr	r3, [r2, #8]
 800932c:	400b      	ands	r3, r1
 800932e:	68e9      	ldr	r1, [r5, #12]
 8009330:	430b      	orrs	r3, r1
 8009332:	6093      	str	r3, [r2, #8]
 8009334:	e7c9      	b.n	80092ca <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009336:	6833      	ldr	r3, [r6, #0]
 8009338:	4393      	bics	r3, r2
 800933a:	4323      	orrs	r3, r4
 800933c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800933e:	f7fe f9a9 	bl	8007694 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009342:	2307      	movs	r3, #7
 8009344:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009346:	4b14      	ldr	r3, [pc, #80]	; (8009398 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8009348:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800934a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800934c:	4642      	mov	r2, r8
 800934e:	6833      	ldr	r3, [r6, #0]
 8009350:	4013      	ands	r3, r2
 8009352:	42a3      	cmp	r3, r4
 8009354:	d0b6      	beq.n	80092c4 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009356:	f7fe f99d 	bl	8007694 <HAL_GetTick>
 800935a:	1bc0      	subs	r0, r0, r7
 800935c:	4548      	cmp	r0, r9
 800935e:	d9f5      	bls.n	800934c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8009360:	2003      	movs	r0, #3
 8009362:	e7c4      	b.n	80092ee <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009364:	6812      	ldr	r2, [r2, #0]
 8009366:	0392      	lsls	r2, r2, #14
 8009368:	d500      	bpl.n	800936c <HAL_RCC_ClockConfig+0x150>
 800936a:	e78b      	b.n	8009284 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800936c:	2001      	movs	r0, #1
 800936e:	e7be      	b.n	80092ee <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009370:	2b03      	cmp	r3, #3
 8009372:	d005      	beq.n	8009380 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009374:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009376:	0792      	lsls	r2, r2, #30
 8009378:	d500      	bpl.n	800937c <HAL_RCC_ClockConfig+0x160>
 800937a:	e783      	b.n	8009284 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800937c:	2001      	movs	r0, #1
 800937e:	e7b6      	b.n	80092ee <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009380:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8009382:	0792      	lsls	r2, r2, #30
 8009384:	d500      	bpl.n	8009388 <HAL_RCC_ClockConfig+0x16c>
 8009386:	e77d      	b.n	8009284 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8009388:	2001      	movs	r0, #1
 800938a:	e7b0      	b.n	80092ee <HAL_RCC_ClockConfig+0xd2>
 800938c:	40022000 	.word	0x40022000
 8009390:	40021000 	.word	0x40021000
 8009394:	fffff0ff 	.word	0xfffff0ff
 8009398:	00001388 	.word	0x00001388
 800939c:	08013494 	.word	0x08013494
 80093a0:	200000e4 	.word	0x200000e4
 80093a4:	200000ec 	.word	0x200000ec
 80093a8:	ffff8fff 	.word	0xffff8fff

080093ac <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80093ac:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80093ae:	4907      	ldr	r1, [pc, #28]	; (80093cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80093b0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80093b2:	4a07      	ldr	r2, [pc, #28]	; (80093d0 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80093b4:	045b      	lsls	r3, r3, #17
 80093b6:	0f5b      	lsrs	r3, r3, #29
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	585b      	ldr	r3, [r3, r1]
 80093bc:	211f      	movs	r1, #31
 80093be:	6810      	ldr	r0, [r2, #0]
 80093c0:	400b      	ands	r3, r1
 80093c2:	40d8      	lsrs	r0, r3
}
 80093c4:	4770      	bx	lr
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	40021000 	.word	0x40021000
 80093cc:	080134d4 	.word	0x080134d4
 80093d0:	200000e4 	.word	0x200000e4

080093d4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80093d4:	2307      	movs	r3, #7
{
 80093d6:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093d8:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093da:	4a09      	ldr	r2, [pc, #36]	; (8009400 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80093dc:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093de:	6894      	ldr	r4, [r2, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093e0:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093e2:	401c      	ands	r4, r3
 80093e4:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093e6:	6894      	ldr	r4, [r2, #8]
 80093e8:	402c      	ands	r4, r5
 80093ea:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80093ec:	24e0      	movs	r4, #224	; 0xe0
 80093ee:	6892      	ldr	r2, [r2, #8]
 80093f0:	01e4      	lsls	r4, r4, #7
 80093f2:	4022      	ands	r2, r4
 80093f4:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093f6:	4a03      	ldr	r2, [pc, #12]	; (8009404 <HAL_RCC_GetClockConfig+0x30>)
 80093f8:	6812      	ldr	r2, [r2, #0]
 80093fa:	4013      	ands	r3, r2
 80093fc:	600b      	str	r3, [r1, #0]
}
 80093fe:	bd30      	pop	{r4, r5, pc}
 8009400:	40021000 	.word	0x40021000
 8009404:	40022000 	.word	0x40022000

08009408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800940a:	46ce      	mov	lr, r9
 800940c:	4647      	mov	r7, r8
 800940e:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009410:	6803      	ldr	r3, [r0, #0]
{
 8009412:	0004      	movs	r4, r0
 8009414:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009416:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009418:	039a      	lsls	r2, r3, #14
 800941a:	d550      	bpl.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800941c:	2280      	movs	r2, #128	; 0x80
 800941e:	4b56      	ldr	r3, [pc, #344]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009420:	0552      	lsls	r2, r2, #21
 8009422:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8009424:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009426:	4211      	tst	r1, r2
 8009428:	d100      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800942a:	e082      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800942c:	2780      	movs	r7, #128	; 0x80
 800942e:	4d53      	ldr	r5, [pc, #332]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8009430:	007f      	lsls	r7, r7, #1
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	433b      	orrs	r3, r7
 8009436:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009438:	f7fe f92c 	bl	8007694 <HAL_GetTick>
 800943c:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800943e:	e005      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009440:	f7fe f928 	bl	8007694 <HAL_GetTick>
 8009444:	1b80      	subs	r0, r0, r6
 8009446:	2802      	cmp	r0, #2
 8009448:	d900      	bls.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800944a:	e07c      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	423b      	tst	r3, r7
 8009450:	d0f6      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009452:	4d49      	ldr	r5, [pc, #292]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009454:	23c0      	movs	r3, #192	; 0xc0
 8009456:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	0011      	movs	r1, r2
 800945c:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800945e:	421a      	tst	r2, r3
 8009460:	d021      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8009462:	69a0      	ldr	r0, [r4, #24]
 8009464:	4288      	cmp	r0, r1
 8009466:	d01f      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009468:	2180      	movs	r1, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800946a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 800946c:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 800946e:	0249      	lsls	r1, r1, #9
 8009470:	4331      	orrs	r1, r6
 8009472:	65e9      	str	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009474:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009476:	4a42      	ldr	r2, [pc, #264]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x178>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009478:	4e42      	ldr	r6, [pc, #264]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800947a:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 800947c:	4031      	ands	r1, r6
 800947e:	65e9      	str	r1, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009480:	65ea      	str	r2, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009482:	07db      	lsls	r3, r3, #31
 8009484:	d400      	bmi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8009486:	e075      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009488:	f7fe f904 	bl	8007694 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800948c:	4b3e      	ldr	r3, [pc, #248]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x180>)
        tickstart = HAL_GetTick();
 800948e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009490:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009492:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009494:	e004      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009496:	f7fe f8fd 	bl	8007694 <HAL_GetTick>
 800949a:	1b80      	subs	r0, r0, r6
 800949c:	4548      	cmp	r0, r9
 800949e:	d852      	bhi.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094a0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80094a2:	421f      	tst	r7, r3
 80094a4:	d0f7      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80094a6:	69a1      	ldr	r1, [r4, #24]
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094a8:	4a33      	ldr	r2, [pc, #204]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80094aa:	4835      	ldr	r0, [pc, #212]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80094ac:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80094ae:	4003      	ands	r3, r0
 80094b0:	430b      	orrs	r3, r1
 80094b2:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80094b4:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80094b6:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d048      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	07da      	lsls	r2, r3, #31
 80094c0:	d506      	bpl.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094c2:	2503      	movs	r5, #3
 80094c4:	492c      	ldr	r1, [pc, #176]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80094c6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80094c8:	43aa      	bics	r2, r5
 80094ca:	6865      	ldr	r5, [r4, #4]
 80094cc:	432a      	orrs	r2, r5
 80094ce:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094d0:	079a      	lsls	r2, r3, #30
 80094d2:	d506      	bpl.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094d4:	250c      	movs	r5, #12
 80094d6:	4928      	ldr	r1, [pc, #160]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80094d8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80094da:	43aa      	bics	r2, r5
 80094dc:	68a5      	ldr	r5, [r4, #8]
 80094de:	432a      	orrs	r2, r5
 80094e0:	654a      	str	r2, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094e2:	069a      	lsls	r2, r3, #26
 80094e4:	d506      	bpl.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094e6:	4924      	ldr	r1, [pc, #144]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80094e8:	4d28      	ldr	r5, [pc, #160]	; (800958c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80094ea:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80094ec:	402a      	ands	r2, r5
 80094ee:	68e5      	ldr	r5, [r4, #12]
 80094f0:	432a      	orrs	r2, r5
 80094f2:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094f4:	045a      	lsls	r2, r3, #17
 80094f6:	d50a      	bpl.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094f8:	491f      	ldr	r1, [pc, #124]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80094fa:	6965      	ldr	r5, [r4, #20]
 80094fc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80094fe:	0092      	lsls	r2, r2, #2
 8009500:	0892      	lsrs	r2, r2, #2
 8009502:	432a      	orrs	r2, r5
 8009504:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009506:	2280      	movs	r2, #128	; 0x80
 8009508:	05d2      	lsls	r2, r2, #23
 800950a:	4295      	cmp	r5, r2
 800950c:	d026      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x154>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800950e:	051b      	lsls	r3, r3, #20
 8009510:	d50a      	bpl.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009512:	4a19      	ldr	r2, [pc, #100]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009514:	6921      	ldr	r1, [r4, #16]
 8009516:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009518:	4c1d      	ldr	r4, [pc, #116]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800951a:	4023      	ands	r3, r4
 800951c:	430b      	orrs	r3, r1
 800951e:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009520:	2380      	movs	r3, #128	; 0x80
 8009522:	01db      	lsls	r3, r3, #7
 8009524:	4299      	cmp	r1, r3
 8009526:	d01f      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x160>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8009528:	b003      	add	sp, #12
 800952a:	bcc0      	pop	{r6, r7}
 800952c:	46b9      	mov	r9, r7
 800952e:	46b0      	mov	r8, r6
 8009530:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8009532:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009534:	4311      	orrs	r1, r2
 8009536:	63d9      	str	r1, [r3, #60]	; 0x3c
 8009538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953a:	4013      	ands	r3, r2
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009540:	2301      	movs	r3, #1
 8009542:	4698      	mov	r8, r3
 8009544:	e772      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 8009546:	4643      	mov	r3, r8
      status = ret;
 8009548:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 800954a:	2b01      	cmp	r3, #1
 800954c:	d1b6      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800954e:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009550:	4910      	ldr	r1, [pc, #64]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8009552:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009554:	400b      	ands	r3, r1
 8009556:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	e7b0      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800955c:	2280      	movs	r2, #128	; 0x80
 800955e:	68cd      	ldr	r5, [r1, #12]
 8009560:	0252      	lsls	r2, r2, #9
 8009562:	432a      	orrs	r2, r5
 8009564:	60ca      	str	r2, [r1, #12]
 8009566:	e7d2      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009568:	2380      	movs	r3, #128	; 0x80
 800956a:	68d1      	ldr	r1, [r2, #12]
 800956c:	025b      	lsls	r3, r3, #9
 800956e:	430b      	orrs	r3, r1
 8009570:	60d3      	str	r3, [r2, #12]
  return status;
 8009572:	e7d9      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009574:	0001      	movs	r1, r0
 8009576:	e797      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8009578:	40021000 	.word	0x40021000
 800957c:	40007000 	.word	0x40007000
 8009580:	fffffcff 	.word	0xfffffcff
 8009584:	fffeffff 	.word	0xfffeffff
 8009588:	00001388 	.word	0x00001388
 800958c:	ffffcfff 	.word	0xffffcfff
 8009590:	ffff3fff 	.word	0xffff3fff
 8009594:	efffffff 	.word	0xefffffff

08009598 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8009598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800959a:	46de      	mov	lr, fp
 800959c:	4657      	mov	r7, sl
 800959e:	464e      	mov	r6, r9
 80095a0:	4645      	mov	r5, r8
 80095a2:	b5e0      	push	{r5, r6, r7, lr}
 80095a4:	b083      	sub	sp, #12
 80095a6:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80095a8:	466b      	mov	r3, sp
 80095aa:	1cdf      	adds	r7, r3, #3
 80095ac:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80095ae:	0015      	movs	r5, r2
 80095b0:	4681      	mov	r9, r0
 80095b2:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 80095b4:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80095b6:	f7fe f86d 	bl	8007694 <HAL_GetTick>
 80095ba:	1976      	adds	r6, r6, r5
 80095bc:	1a33      	subs	r3, r6, r0
 80095be:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 80095c0:	f7fe f868 	bl	8007694 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095c4:	464b      	mov	r3, r9
 80095c6:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80095c8:	26c0      	movs	r6, #192	; 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095ca:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095cc:	4b34      	ldr	r3, [pc, #208]	; (80096a0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 80095ce:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095d0:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80095d2:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095d4:	009a      	lsls	r2, r3, #2
 80095d6:	18d2      	adds	r2, r2, r3
 80095d8:	00d3      	lsls	r3, r2, #3
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	4642      	mov	r2, r8
 80095de:	0d1b      	lsrs	r3, r3, #20
 80095e0:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 80095e2:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095e4:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80095e6:	e001      	b.n	80095ec <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80095e8:	1c6b      	adds	r3, r5, #1
 80095ea:	d10b      	bne.n	8009604 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80095ec:	6893      	ldr	r3, [r2, #8]
 80095ee:	4223      	tst	r3, r4
 80095f0:	d01d      	beq.n	800962e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80095f2:	42b4      	cmp	r4, r6
 80095f4:	d1f8      	bne.n	80095e8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 80095f6:	4653      	mov	r3, sl
 80095f8:	7b1b      	ldrb	r3, [r3, #12]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 80095fe:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8009600:	1c6b      	adds	r3, r5, #1
 8009602:	d0f3      	beq.n	80095ec <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009604:	f7fe f846 	bl	8007694 <HAL_GetTick>
 8009608:	465b      	mov	r3, fp
 800960a:	1ac0      	subs	r0, r0, r3
 800960c:	4540      	cmp	r0, r8
 800960e:	d216      	bcs.n	800963e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009610:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8009612:	1e5a      	subs	r2, r3, #1
 8009614:	4193      	sbcs	r3, r2
 8009616:	4642      	mov	r2, r8
 8009618:	425b      	negs	r3, r3
 800961a:	401a      	ands	r2, r3
      }
      count--;
 800961c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800961e:	4690      	mov	r8, r2
      count--;
 8009620:	3b01      	subs	r3, #1
 8009622:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009624:	464b      	mov	r3, r9
 8009626:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009628:	6893      	ldr	r3, [r2, #8]
 800962a:	4223      	tst	r3, r4
 800962c:	d1e1      	bne.n	80095f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 800962e:	2000      	movs	r0, #0
}
 8009630:	b003      	add	sp, #12
 8009632:	bcf0      	pop	{r4, r5, r6, r7}
 8009634:	46bb      	mov	fp, r7
 8009636:	46b2      	mov	sl, r6
 8009638:	46a9      	mov	r9, r5
 800963a:	46a0      	mov	r8, r4
 800963c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800963e:	464b      	mov	r3, r9
 8009640:	21e0      	movs	r1, #224	; 0xe0
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009648:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800964a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800964c:	2282      	movs	r2, #130	; 0x82
 800964e:	6849      	ldr	r1, [r1, #4]
 8009650:	0052      	lsls	r2, r2, #1
 8009652:	4291      	cmp	r1, r2
 8009654:	d015      	beq.n	8009682 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009656:	464a      	mov	r2, r9
 8009658:	2180      	movs	r1, #128	; 0x80
 800965a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800965c:	0189      	lsls	r1, r1, #6
 800965e:	428a      	cmp	r2, r1
 8009660:	d106      	bne.n	8009670 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 8009662:	6819      	ldr	r1, [r3, #0]
 8009664:	480f      	ldr	r0, [pc, #60]	; (80096a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 8009666:	4001      	ands	r1, r0
 8009668:	6019      	str	r1, [r3, #0]
 800966a:	6819      	ldr	r1, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009670:	235d      	movs	r3, #93	; 0x5d
 8009672:	2201      	movs	r2, #1
 8009674:	4649      	mov	r1, r9
 8009676:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8009678:	2200      	movs	r2, #0
 800967a:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 800967c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800967e:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8009680:	e7d6      	b.n	8009630 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009682:	464a      	mov	r2, r9
 8009684:	2180      	movs	r1, #128	; 0x80
 8009686:	6892      	ldr	r2, [r2, #8]
 8009688:	0209      	lsls	r1, r1, #8
 800968a:	428a      	cmp	r2, r1
 800968c:	d003      	beq.n	8009696 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800968e:	2180      	movs	r1, #128	; 0x80
 8009690:	00c9      	lsls	r1, r1, #3
 8009692:	428a      	cmp	r2, r1
 8009694:	d1df      	bne.n	8009656 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 8009696:	2140      	movs	r1, #64	; 0x40
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	438a      	bics	r2, r1
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	e7da      	b.n	8009656 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 80096a0:	200000e4 	.word	0x200000e4
 80096a4:	ffffdfff 	.word	0xffffdfff

080096a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80096a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096aa:	46c6      	mov	lr, r8
 80096ac:	b500      	push	{lr}
 80096ae:	000c      	movs	r4, r1
 80096b0:	0016      	movs	r6, r2
 80096b2:	b082      	sub	sp, #8
 80096b4:	0007      	movs	r7, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096b6:	f7fd ffed 	bl	8007694 <HAL_GetTick>
 80096ba:	1936      	adds	r6, r6, r4
 80096bc:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 80096be:	f7fd ffe9 	bl	8007694 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096c2:	2580      	movs	r5, #128	; 0x80
  tmp_tickstart = HAL_GetTick();
 80096c4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096c6:	4b26      	ldr	r3, [pc, #152]	; (8009760 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	015b      	lsls	r3, r3, #5
 80096cc:	0d1b      	lsrs	r3, r3, #20
 80096ce:	4373      	muls	r3, r6
 80096d0:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	e001      	b.n	80096da <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
    if (Timeout != HAL_MAX_DELAY)
 80096d6:	1c63      	adds	r3, r4, #1
 80096d8:	d107      	bne.n	80096ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096da:	6893      	ldr	r3, [r2, #8]
 80096dc:	421d      	tst	r5, r3
 80096de:	d1fa      	bne.n	80096d6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  return HAL_OK;
 80096e0:	2000      	movs	r0, #0
}
 80096e2:	b002      	add	sp, #8
 80096e4:	bc80      	pop	{r7}
 80096e6:	46b8      	mov	r8, r7
 80096e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096ea:	f7fd ffd3 	bl	8007694 <HAL_GetTick>
 80096ee:	4643      	mov	r3, r8
 80096f0:	1ac0      	subs	r0, r0, r3
 80096f2:	42b0      	cmp	r0, r6
 80096f4:	d208      	bcs.n	8009708 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 80096f6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80096f8:	1e5a      	subs	r2, r3, #1
 80096fa:	4193      	sbcs	r3, r2
 80096fc:	425b      	negs	r3, r3
 80096fe:	401e      	ands	r6, r3
      count--;
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	3b01      	subs	r3, #1
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	e7e4      	b.n	80096d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009708:	21e0      	movs	r1, #224	; 0xe0
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	438a      	bics	r2, r1
 8009710:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009712:	2282      	movs	r2, #130	; 0x82
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	0052      	lsls	r2, r2, #1
 8009718:	4291      	cmp	r1, r2
 800971a:	d013      	beq.n	8009744 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800971c:	2180      	movs	r1, #128	; 0x80
 800971e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009720:	0189      	lsls	r1, r1, #6
 8009722:	428a      	cmp	r2, r1
 8009724:	d106      	bne.n	8009734 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 8009726:	6819      	ldr	r1, [r3, #0]
 8009728:	480e      	ldr	r0, [pc, #56]	; (8009764 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 800972a:	4001      	ands	r1, r0
 800972c:	6019      	str	r1, [r3, #0]
 800972e:	6819      	ldr	r1, [r3, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009734:	235d      	movs	r3, #93	; 0x5d
 8009736:	2201      	movs	r2, #1
 8009738:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 800973a:	2200      	movs	r2, #0
 800973c:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 800973e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8009740:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8009742:	e7ce      	b.n	80096e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009744:	2180      	movs	r1, #128	; 0x80
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	0209      	lsls	r1, r1, #8
 800974a:	428a      	cmp	r2, r1
 800974c:	d003      	beq.n	8009756 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800974e:	2180      	movs	r1, #128	; 0x80
 8009750:	00c9      	lsls	r1, r1, #3
 8009752:	428a      	cmp	r2, r1
 8009754:	d1e2      	bne.n	800971c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 8009756:	2140      	movs	r1, #64	; 0x40
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	438a      	bics	r2, r1
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	e7dd      	b.n	800971c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8009760:	200000e4 	.word	0x200000e4
 8009764:	ffffdfff 	.word	0xffffdfff

08009768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009768:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800976a:	0013      	movs	r3, r2
{
 800976c:	000d      	movs	r5, r1
 800976e:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009770:	000a      	movs	r2, r1
 8009772:	21c0      	movs	r1, #192	; 0xc0
 8009774:	0149      	lsls	r1, r1, #5
{
 8009776:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009778:	f7ff ff0e 	bl	8009598 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800977c:	2800      	cmp	r0, #0
 800977e:	d10f      	bne.n	80097a0 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009780:	0032      	movs	r2, r6
 8009782:	0029      	movs	r1, r5
 8009784:	0020      	movs	r0, r4
 8009786:	f7ff ff8f 	bl	80096a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800978a:	2800      	cmp	r0, #0
 800978c:	d108      	bne.n	80097a0 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800978e:	21c0      	movs	r1, #192	; 0xc0
 8009790:	0033      	movs	r3, r6
 8009792:	002a      	movs	r2, r5
 8009794:	0020      	movs	r0, r4
 8009796:	00c9      	lsls	r1, r1, #3
 8009798:	f7ff fefe 	bl	8009598 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800979c:	2800      	cmp	r0, #0
 800979e:	d004      	beq.n	80097aa <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097a0:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 80097a2:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80097a6:	4313      	orrs	r3, r2
 80097a8:	6623      	str	r3, [r4, #96]	; 0x60
  }

  return HAL_OK;
}
 80097aa:	bd70      	pop	{r4, r5, r6, pc}

080097ac <HAL_SPI_Init>:
{
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	46de      	mov	lr, fp
 80097b0:	4657      	mov	r7, sl
 80097b2:	464e      	mov	r6, r9
 80097b4:	4645      	mov	r5, r8
 80097b6:	0004      	movs	r4, r0
 80097b8:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d100      	bne.n	80097c0 <HAL_SPI_Init+0x14>
 80097be:	e094      	b.n	80098ea <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80097c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097c2:	2d00      	cmp	r5, #0
 80097c4:	d06b      	beq.n	800989e <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097c6:	2300      	movs	r3, #0
 80097c8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097ca:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097cc:	2300      	movs	r3, #0
 80097ce:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80097d0:	335d      	adds	r3, #93	; 0x5d
 80097d2:	5ce3      	ldrb	r3, [r4, r3]
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d06e      	beq.n	80098b8 <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 80097da:	235d      	movs	r3, #93	; 0x5d
 80097dc:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 80097de:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80097e0:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80097e2:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097e4:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80097e6:	6813      	ldr	r3, [r2, #0]
 80097e8:	438b      	bics	r3, r1
 80097ea:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097ec:	23e0      	movs	r3, #224	; 0xe0
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	4298      	cmp	r0, r3
 80097f2:	d968      	bls.n	80098c6 <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097f4:	23f0      	movs	r3, #240	; 0xf0
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	4298      	cmp	r0, r3
 80097fa:	d000      	beq.n	80097fe <HAL_SPI_Init+0x52>
 80097fc:	e077      	b.n	80098ee <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097fe:	2380      	movs	r3, #128	; 0x80
 8009800:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009802:	019b      	lsls	r3, r3, #6
 8009804:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009806:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009808:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800980a:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800980c:	2682      	movs	r6, #130	; 0x82
 800980e:	2784      	movs	r7, #132	; 0x84
 8009810:	6863      	ldr	r3, [r4, #4]
 8009812:	0076      	lsls	r6, r6, #1
 8009814:	4033      	ands	r3, r6
 8009816:	68a6      	ldr	r6, [r4, #8]
 8009818:	023f      	lsls	r7, r7, #8
 800981a:	403e      	ands	r6, r7
 800981c:	2702      	movs	r7, #2
 800981e:	4333      	orrs	r3, r6
 8009820:	6926      	ldr	r6, [r4, #16]
 8009822:	69a1      	ldr	r1, [r4, #24]
 8009824:	403e      	ands	r6, r7
 8009826:	4333      	orrs	r3, r6
 8009828:	2601      	movs	r6, #1
 800982a:	6967      	ldr	r7, [r4, #20]
 800982c:	46b2      	mov	sl, r6
 800982e:	4037      	ands	r7, r6
 8009830:	433b      	orrs	r3, r7
 8009832:	2780      	movs	r7, #128	; 0x80
 8009834:	00bf      	lsls	r7, r7, #2
 8009836:	400f      	ands	r7, r1
 8009838:	433b      	orrs	r3, r7
 800983a:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800983c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800983e:	46b8      	mov	r8, r7
 8009840:	2738      	movs	r7, #56	; 0x38
 8009842:	46b9      	mov	r9, r7
 8009844:	4647      	mov	r7, r8
 8009846:	464e      	mov	r6, r9
 8009848:	4037      	ands	r7, r6
 800984a:	6a26      	ldr	r6, [r4, #32]
 800984c:	433b      	orrs	r3, r7
 800984e:	46b0      	mov	r8, r6
 8009850:	2680      	movs	r6, #128	; 0x80
 8009852:	4647      	mov	r7, r8
 8009854:	4037      	ands	r7, r6
 8009856:	4666      	mov	r6, ip
 8009858:	433b      	orrs	r3, r7
 800985a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800985c:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800985e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009862:	4033      	ands	r3, r6
 8009864:	26f0      	movs	r6, #240	; 0xf0
 8009866:	0136      	lsls	r6, r6, #4
 8009868:	4030      	ands	r0, r6
 800986a:	4303      	orrs	r3, r0
 800986c:	2004      	movs	r0, #4
 800986e:	4001      	ands	r1, r0
 8009870:	430b      	orrs	r3, r1
 8009872:	2110      	movs	r1, #16
 8009874:	4029      	ands	r1, r5
 8009876:	430b      	orrs	r3, r1
 8009878:	4659      	mov	r1, fp
 800987a:	430b      	orrs	r3, r1
 800987c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800987e:	69d3      	ldr	r3, [r2, #28]
 8009880:	491c      	ldr	r1, [pc, #112]	; (80098f4 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8009882:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009884:	400b      	ands	r3, r1
 8009886:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009888:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800988a:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800988c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800988e:	335d      	adds	r3, #93	; 0x5d
 8009890:	54e2      	strb	r2, [r4, r3]
}
 8009892:	bcf0      	pop	{r4, r5, r6, r7}
 8009894:	46bb      	mov	fp, r7
 8009896:	46b2      	mov	sl, r6
 8009898:	46a9      	mov	r9, r5
 800989a:	46a0      	mov	r8, r4
 800989c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800989e:	2382      	movs	r3, #130	; 0x82
 80098a0:	6842      	ldr	r2, [r0, #4]
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d091      	beq.n	80097cc <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098a8:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80098aa:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098ac:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80098ae:	335d      	adds	r3, #93	; 0x5d
 80098b0:	5ce3      	ldrb	r3, [r4, r3]
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d190      	bne.n	80097da <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 80098b8:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 80098ba:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80098bc:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80098be:	f7fd fc55 	bl	800716c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80098c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80098c4:	e789      	b.n	80097da <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098c6:	4298      	cmp	r0, r3
 80098c8:	d006      	beq.n	80098d8 <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098ca:	2380      	movs	r3, #128	; 0x80
 80098cc:	015b      	lsls	r3, r3, #5
 80098ce:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	469c      	mov	ip, r3
 80098d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80098d6:	e799      	b.n	800980c <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098d8:	2380      	movs	r3, #128	; 0x80
 80098da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80098dc:	019b      	lsls	r3, r3, #6
 80098de:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098e0:	2380      	movs	r3, #128	; 0x80
 80098e2:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098e4:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098e6:	469b      	mov	fp, r3
 80098e8:	e790      	b.n	800980c <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 80098ea:	2001      	movs	r0, #1
 80098ec:	e7d1      	b.n	8009892 <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098ee:	2300      	movs	r3, #0
 80098f0:	469b      	mov	fp, r3
 80098f2:	e7ed      	b.n	80098d0 <HAL_SPI_Init+0x124>
 80098f4:	fffff7ff 	.word	0xfffff7ff

080098f8 <HAL_SPI_Transmit>:
{
 80098f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098fa:	46c6      	mov	lr, r8
 80098fc:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80098fe:	235c      	movs	r3, #92	; 0x5c
{
 8009900:	b500      	push	{lr}
 8009902:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8009904:	5cc2      	ldrb	r2, [r0, r3]
{
 8009906:	0004      	movs	r4, r0
 8009908:	000d      	movs	r5, r1
 800990a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800990c:	2a01      	cmp	r2, #1
 800990e:	d060      	beq.n	80099d2 <HAL_SPI_Transmit+0xda>
 8009910:	2201      	movs	r2, #1
 8009912:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009914:	f7fd febe 	bl	8007694 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8009918:	225d      	movs	r2, #93	; 0x5d
 800991a:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 800991c:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800991e:	b2d8      	uxtb	r0, r3
 8009920:	2b01      	cmp	r3, #1
 8009922:	d00a      	beq.n	800993a <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8009924:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009926:	235d      	movs	r3, #93	; 0x5d
 8009928:	2201      	movs	r2, #1
 800992a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800992c:	2200      	movs	r2, #0
 800992e:	3b01      	subs	r3, #1
 8009930:	54e2      	strb	r2, [r4, r3]
}
 8009932:	b002      	add	sp, #8
 8009934:	bc80      	pop	{r7}
 8009936:	46b8      	mov	r8, r7
 8009938:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 800993a:	2d00      	cmp	r5, #0
 800993c:	d0f3      	beq.n	8009926 <HAL_SPI_Transmit+0x2e>
 800993e:	4643      	mov	r3, r8
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0f0      	beq.n	8009926 <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009944:	2303      	movs	r3, #3
 8009946:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009948:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 800994a:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800994c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 800994e:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009950:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8009952:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009954:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009956:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009958:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 800995a:	3202      	adds	r2, #2
 800995c:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 800995e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009960:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009962:	2380      	movs	r3, #128	; 0x80
 8009964:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8009966:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009968:	021b      	lsls	r3, r3, #8
 800996a:	429a      	cmp	r2, r3
 800996c:	d05a      	beq.n	8009a24 <HAL_SPI_Transmit+0x12c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800996e:	2340      	movs	r3, #64	; 0x40
 8009970:	6802      	ldr	r2, [r0, #0]
 8009972:	4213      	tst	r3, r2
 8009974:	d102      	bne.n	800997c <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8009976:	6802      	ldr	r2, [r0, #0]
 8009978:	4313      	orrs	r3, r2
 800997a:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800997c:	23e0      	movs	r3, #224	; 0xe0
 800997e:	68e2      	ldr	r2, [r4, #12]
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	429a      	cmp	r2, r3
 8009984:	d927      	bls.n	80099d6 <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009986:	6863      	ldr	r3, [r4, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d055      	beq.n	8009a38 <HAL_SPI_Transmit+0x140>
 800998c:	4643      	mov	r3, r8
 800998e:	2b01      	cmp	r3, #1
 8009990:	d052      	beq.n	8009a38 <HAL_SPI_Transmit+0x140>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009992:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8009994:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009996:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10d      	bne.n	80099b8 <HAL_SPI_Transmit+0xc0>
 800999c:	e05f      	b.n	8009a5e <HAL_SPI_Transmit+0x166>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800999e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80099a0:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099a2:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099a4:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 80099a6:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099a8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80099aa:	3d01      	subs	r5, #1
 80099ac:	b2ad      	uxth	r5, r5
 80099ae:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80099b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d053      	beq.n	8009a5e <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099b6:	6820      	ldr	r0, [r4, #0]
 80099b8:	4642      	mov	r2, r8
 80099ba:	6883      	ldr	r3, [r0, #8]
 80099bc:	421a      	tst	r2, r3
 80099be:	d1ee      	bne.n	800999e <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099c0:	f7fd fe68 	bl	8007694 <HAL_GetTick>
 80099c4:	1bc0      	subs	r0, r0, r7
 80099c6:	42b0      	cmp	r0, r6
 80099c8:	d3f2      	bcc.n	80099b0 <HAL_SPI_Transmit+0xb8>
 80099ca:	1c73      	adds	r3, r6, #1
 80099cc:	d0f0      	beq.n	80099b0 <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 80099ce:	2003      	movs	r0, #3
 80099d0:	e7a9      	b.n	8009926 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 80099d2:	2002      	movs	r0, #2
 80099d4:	e7ad      	b.n	8009932 <HAL_SPI_Transmit+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099d6:	6863      	ldr	r3, [r4, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d036      	beq.n	8009a4a <HAL_SPI_Transmit+0x152>
 80099dc:	4643      	mov	r3, r8
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d033      	beq.n	8009a4a <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099e2:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 80099e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099e6:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10d      	bne.n	8009a08 <HAL_SPI_Transmit+0x110>
 80099ec:	e037      	b.n	8009a5e <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80099f0:	7812      	ldrb	r2, [r2, #0]
 80099f2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80099f4:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80099f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80099f8:	3d01      	subs	r5, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80099fa:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 80099fc:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80099fe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009a00:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8009a02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d02a      	beq.n	8009a5e <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a08:	4641      	mov	r1, r8
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	4211      	tst	r1, r2
 8009a10:	d1ed      	bne.n	80099ee <HAL_SPI_Transmit+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a12:	f7fd fe3f 	bl	8007694 <HAL_GetTick>
 8009a16:	1bc0      	subs	r0, r0, r7
 8009a18:	42b0      	cmp	r0, r6
 8009a1a:	d3f2      	bcc.n	8009a02 <HAL_SPI_Transmit+0x10a>
 8009a1c:	1c73      	adds	r3, r6, #1
 8009a1e:	d0f0      	beq.n	8009a02 <HAL_SPI_Transmit+0x10a>
          errorcode = HAL_TIMEOUT;
 8009a20:	2003      	movs	r0, #3
 8009a22:	e780      	b.n	8009926 <HAL_SPI_Transmit+0x2e>
    __HAL_SPI_DISABLE(hspi);
 8009a24:	2240      	movs	r2, #64	; 0x40
 8009a26:	6803      	ldr	r3, [r0, #0]
 8009a28:	4393      	bics	r3, r2
 8009a2a:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	6802      	ldr	r2, [r0, #0]
 8009a30:	01db      	lsls	r3, r3, #7
 8009a32:	4313      	orrs	r3, r2
 8009a34:	6003      	str	r3, [r0, #0]
 8009a36:	e79a      	b.n	800996e <HAL_SPI_Transmit+0x76>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a38:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a3a:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a3c:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8009a3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a40:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009a48:	e7a3      	b.n	8009992 <HAL_SPI_Transmit+0x9a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a4a:	782b      	ldrb	r3, [r5, #0]
 8009a4c:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a50:	3301      	adds	r3, #1
 8009a52:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009a54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009a56:	3b01      	subs	r3, #1
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009a5c:	e7c1      	b.n	80099e2 <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a5e:	003a      	movs	r2, r7
 8009a60:	0031      	movs	r1, r6
 8009a62:	0020      	movs	r0, r4
 8009a64:	f7ff fe80 	bl	8009768 <SPI_EndRxTxTransaction>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d001      	beq.n	8009a70 <HAL_SPI_Transmit+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a70:	68a3      	ldr	r3, [r4, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d106      	bne.n	8009a84 <HAL_SPI_Transmit+0x18c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	68da      	ldr	r2, [r3, #12]
 8009a7c:	9201      	str	r2, [sp, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a84:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009a86:	1e43      	subs	r3, r0, #1
 8009a88:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8009a8a:	b2c0      	uxtb	r0, r0
error:
 8009a8c:	e74b      	b.n	8009926 <HAL_SPI_Transmit+0x2e>
 8009a8e:	46c0      	nop			; (mov r8, r8)

08009a90 <HAL_SPI_TransmitReceive>:
{
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	4647      	mov	r7, r8
 8009a94:	46ce      	mov	lr, r9
 8009a96:	b580      	push	{r7, lr}
 8009a98:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8009a9a:	235c      	movs	r3, #92	; 0x5c
{
 8009a9c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8009a9e:	5cc2      	ldrb	r2, [r0, r3]
{
 8009aa0:	0004      	movs	r4, r0
 8009aa2:	4688      	mov	r8, r1
 8009aa4:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8009aa6:	2a01      	cmp	r2, #1
 8009aa8:	d100      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x1c>
 8009aaa:	e095      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x148>
 8009aac:	2201      	movs	r2, #1
 8009aae:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009ab0:	f7fd fdf0 	bl	8007694 <HAL_GetTick>
  tmp_state           = hspi->State;
 8009ab4:	235d      	movs	r3, #93	; 0x5d
 8009ab6:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8009ab8:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 8009aba:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8009abc:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d013      	beq.n	8009aea <HAL_SPI_TransmitReceive+0x5a>
 8009ac2:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8009ac4:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d009      	beq.n	8009ae0 <HAL_SPI_TransmitReceive+0x50>
  hspi->State = HAL_SPI_STATE_READY;
 8009acc:	235d      	movs	r3, #93	; 0x5d
 8009ace:	2201      	movs	r2, #1
 8009ad0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	54e2      	strb	r2, [r4, r3]
}
 8009ad8:	bcc0      	pop	{r6, r7}
 8009ada:	46b9      	mov	r9, r7
 8009adc:	46b0      	mov	r8, r6
 8009ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ae0:	68a3      	ldr	r3, [r4, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f2      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x3c>
 8009ae6:	2904      	cmp	r1, #4
 8009ae8:	d1f0      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009aea:	4643      	mov	r3, r8
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d075      	beq.n	8009bdc <HAL_SPI_TransmitReceive+0x14c>
 8009af0:	464b      	mov	r3, r9
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d072      	beq.n	8009bdc <HAL_SPI_TransmitReceive+0x14c>
 8009af6:	2f00      	cmp	r7, #0
 8009af8:	d070      	beq.n	8009bdc <HAL_SPI_TransmitReceive+0x14c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009afa:	235d      	movs	r3, #93	; 0x5d
 8009afc:	5ce1      	ldrb	r1, [r4, r3]
 8009afe:	2904      	cmp	r1, #4
 8009b00:	d001      	beq.n	8009b06 <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009b02:	2105      	movs	r1, #5
 8009b04:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b06:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b08:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b0a:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009b0c:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b0e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8009b10:	5267      	strh	r7, [r4, r1]
  hspi->RxXferSize  = Size;
 8009b12:	3902      	subs	r1, #2
 8009b14:	5267      	strh	r7, [r4, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b16:	4641      	mov	r1, r8
  hspi->RxISR       = NULL;
 8009b18:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009b1a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b1c:	23e0      	movs	r3, #224	; 0xe0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b1e:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b20:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferCount = Size;
 8009b22:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009b24:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	d965      	bls.n	8009bf8 <HAL_SPI_TransmitReceive+0x168>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	4862      	ldr	r0, [pc, #392]	; (8009cb8 <HAL_SPI_TransmitReceive+0x228>)
 8009b30:	6859      	ldr	r1, [r3, #4]
 8009b32:	4001      	ands	r1, r0
 8009b34:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b36:	2140      	movs	r1, #64	; 0x40
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	4201      	tst	r1, r0
 8009b3c:	d102      	bne.n	8009b44 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	4301      	orrs	r1, r0
 8009b42:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b44:	2a00      	cmp	r2, #0
 8009b46:	d000      	beq.n	8009b4a <HAL_SPI_TransmitReceive+0xba>
 8009b48:	e0af      	b.n	8009caa <HAL_SPI_TransmitReceive+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b4a:	4642      	mov	r2, r8
 8009b4c:	8812      	ldrh	r2, [r2, #0]
 8009b4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b50:	4643      	mov	r3, r8
 8009b52:	3302      	adds	r3, #2
 8009b54:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009b56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b62:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b64:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b66:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <HAL_SPI_TransmitReceive+0xe4>
 8009b6e:	5be3      	ldrh	r3, [r4, r7]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d035      	beq.n	8009be0 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b74:	4641      	mov	r1, r8
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	689a      	ldr	r2, [r3, #8]
 8009b7a:	4211      	tst	r1, r2
 8009b7c:	d010      	beq.n	8009ba0 <HAL_SPI_TransmitReceive+0x110>
 8009b7e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009b80:	2a00      	cmp	r2, #0
 8009b82:	d00d      	beq.n	8009ba0 <HAL_SPI_TransmitReceive+0x110>
 8009b84:	464a      	mov	r2, r9
 8009b86:	2a01      	cmp	r2, #1
 8009b88:	d10a      	bne.n	8009ba0 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009b8c:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b8e:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b90:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b92:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009b94:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009b96:	3a01      	subs	r2, #1
 8009b98:	b292      	uxth	r2, r2
 8009b9a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	0008      	movs	r0, r1
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	4010      	ands	r0, r2
 8009ba8:	4211      	tst	r1, r2
 8009baa:	d00c      	beq.n	8009bc6 <HAL_SPI_TransmitReceive+0x136>
 8009bac:	5be2      	ldrh	r2, [r4, r7]
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	d009      	beq.n	8009bc6 <HAL_SPI_TransmitReceive+0x136>
        txallowed = 1U;
 8009bb2:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bba:	3302      	adds	r3, #2
 8009bbc:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009bbe:	5be3      	ldrh	r3, [r4, r7]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	53e3      	strh	r3, [r4, r7]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009bc6:	f7fd fd65 	bl	8007694 <HAL_GetTick>
 8009bca:	1b80      	subs	r0, r0, r6
 8009bcc:	42a8      	cmp	r0, r5
 8009bce:	d3cb      	bcc.n	8009b68 <HAL_SPI_TransmitReceive+0xd8>
 8009bd0:	1c6b      	adds	r3, r5, #1
 8009bd2:	d0c9      	beq.n	8009b68 <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 8009bd4:	2003      	movs	r0, #3
 8009bd6:	e779      	b.n	8009acc <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8009bd8:	2002      	movs	r0, #2
 8009bda:	e77d      	b.n	8009ad8 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_ERROR;
 8009bdc:	2001      	movs	r0, #1
 8009bde:	e775      	b.n	8009acc <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009be0:	0032      	movs	r2, r6
 8009be2:	0029      	movs	r1, r5
 8009be4:	0020      	movs	r0, r4
 8009be6:	f7ff fdbf 	bl	8009768 <SPI_EndRxTxTransaction>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d100      	bne.n	8009bf0 <HAL_SPI_TransmitReceive+0x160>
 8009bee:	e76d      	b.n	8009acc <HAL_SPI_TransmitReceive+0x3c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bf0:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8009bf2:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bf4:	6623      	str	r3, [r4, #96]	; 0x60
 8009bf6:	e769      	b.n	8009acc <HAL_SPI_TransmitReceive+0x3c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009bf8:	2180      	movs	r1, #128	; 0x80
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	0149      	lsls	r1, r1, #5
 8009bfe:	6858      	ldr	r0, [r3, #4]
 8009c00:	4301      	orrs	r1, r0
 8009c02:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c04:	2140      	movs	r1, #64	; 0x40
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	4201      	tst	r1, r0
 8009c0a:	d102      	bne.n	8009c12 <HAL_SPI_TransmitReceive+0x182>
    __HAL_SPI_ENABLE(hspi);
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	4301      	orrs	r1, r0
 8009c10:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c12:	2a00      	cmp	r2, #0
 8009c14:	d14d      	bne.n	8009cb2 <HAL_SPI_TransmitReceive+0x222>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c16:	4642      	mov	r2, r8
 8009c18:	7812      	ldrb	r2, [r2, #0]
 8009c1a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c1e:	3301      	adds	r3, #1
 8009c20:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009c22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009c24:	3b01      	subs	r3, #1
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c2e:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c30:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c32:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <HAL_SPI_TransmitReceive+0x1b0>
 8009c3a:	5be3      	ldrh	r3, [r4, r7]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0cf      	beq.n	8009be0 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c40:	4641      	mov	r1, r8
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	689a      	ldr	r2, [r3, #8]
 8009c46:	4211      	tst	r1, r2
 8009c48:	d012      	beq.n	8009c70 <HAL_SPI_TransmitReceive+0x1e0>
 8009c4a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	d00f      	beq.n	8009c70 <HAL_SPI_TransmitReceive+0x1e0>
 8009c50:	464a      	mov	r2, r9
 8009c52:	2a01      	cmp	r2, #1
 8009c54:	d10c      	bne.n	8009c70 <HAL_SPI_TransmitReceive+0x1e0>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009c58:	7812      	ldrb	r2, [r2, #0]
 8009c5a:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 8009c60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c62:	3301      	adds	r3, #1
 8009c64:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009c66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	2101      	movs	r1, #1
 8009c72:	0008      	movs	r0, r1
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	4010      	ands	r0, r2
 8009c78:	4211      	tst	r1, r2
 8009c7a:	d00d      	beq.n	8009c98 <HAL_SPI_TransmitReceive+0x208>
 8009c7c:	5be2      	ldrh	r2, [r4, r7]
 8009c7e:	2a00      	cmp	r2, #0
 8009c80:	d00a      	beq.n	8009c98 <HAL_SPI_TransmitReceive+0x208>
        txallowed = 1U;
 8009c82:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c84:	7b1b      	ldrb	r3, [r3, #12]
 8009c86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009c88:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8009c8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009c90:	5be3      	ldrh	r3, [r4, r7]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c98:	f7fd fcfc 	bl	8007694 <HAL_GetTick>
 8009c9c:	1b80      	subs	r0, r0, r6
 8009c9e:	42a8      	cmp	r0, r5
 8009ca0:	d3c8      	bcc.n	8009c34 <HAL_SPI_TransmitReceive+0x1a4>
 8009ca2:	1c6b      	adds	r3, r5, #1
 8009ca4:	d0c6      	beq.n	8009c34 <HAL_SPI_TransmitReceive+0x1a4>
        errorcode = HAL_TIMEOUT;
 8009ca6:	2003      	movs	r0, #3
 8009ca8:	e710      	b.n	8009acc <HAL_SPI_TransmitReceive+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009caa:	2f01      	cmp	r7, #1
 8009cac:	d000      	beq.n	8009cb0 <HAL_SPI_TransmitReceive+0x220>
 8009cae:	e756      	b.n	8009b5e <HAL_SPI_TransmitReceive+0xce>
 8009cb0:	e74b      	b.n	8009b4a <HAL_SPI_TransmitReceive+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cb2:	2f01      	cmp	r7, #1
 8009cb4:	d1b9      	bne.n	8009c2a <HAL_SPI_TransmitReceive+0x19a>
 8009cb6:	e7ae      	b.n	8009c16 <HAL_SPI_TransmitReceive+0x186>
 8009cb8:	ffffefff 	.word	0xffffefff

08009cbc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cbc:	223d      	movs	r2, #61	; 0x3d
 8009cbe:	5c81      	ldrb	r1, [r0, r2]
{
 8009cc0:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8009cc2:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8009cc4:	2901      	cmp	r1, #1
 8009cc6:	d112      	bne.n	8009cee <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc8:	3101      	adds	r1, #1
 8009cca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68da      	ldr	r2, [r3, #12]
 8009cd0:	4302      	orrs	r2, r0
 8009cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cd4:	4a0e      	ldr	r2, [pc, #56]	; (8009d10 <HAL_TIM_Base_Start_IT+0x54>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d00a      	beq.n	8009cf0 <HAL_TIM_Base_Start_IT+0x34>
 8009cda:	4a0e      	ldr	r2, [pc, #56]	; (8009d14 <HAL_TIM_Base_Start_IT+0x58>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d007      	beq.n	8009cf0 <HAL_TIM_Base_Start_IT+0x34>
 8009ce0:	4a0d      	ldr	r2, [pc, #52]	; (8009d18 <HAL_TIM_Base_Start_IT+0x5c>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d004      	beq.n	8009cf0 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	4302      	orrs	r2, r0
  }

  /* Return function status */
  return HAL_OK;
 8009cea:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8009cec:	601a      	str	r2, [r3, #0]
}
 8009cee:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	490a      	ldr	r1, [pc, #40]	; (8009d1c <HAL_TIM_Base_Start_IT+0x60>)
 8009cf4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf6:	2a06      	cmp	r2, #6
 8009cf8:	d008      	beq.n	8009d0c <HAL_TIM_Base_Start_IT+0x50>
 8009cfa:	3907      	subs	r1, #7
 8009cfc:	428a      	cmp	r2, r1
 8009cfe:	d005      	beq.n	8009d0c <HAL_TIM_Base_Start_IT+0x50>
      __HAL_TIM_ENABLE(htim);
 8009d00:	2101      	movs	r1, #1
 8009d02:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8009d04:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8009d06:	430a      	orrs	r2, r1
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	e7f0      	b.n	8009cee <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	e7ee      	b.n	8009cee <HAL_TIM_Base_Start_IT+0x32>
 8009d10:	40012c00 	.word	0x40012c00
 8009d14:	40000400 	.word	0x40000400
 8009d18:	40014000 	.word	0x40014000
 8009d1c:	00010007 	.word	0x00010007

08009d20 <HAL_TIM_OC_DelayElapsedCallback>:
 8009d20:	4770      	bx	lr
 8009d22:	46c0      	nop			; (mov r8, r8)

08009d24 <HAL_TIM_IC_CaptureCallback>:
 8009d24:	4770      	bx	lr
 8009d26:	46c0      	nop			; (mov r8, r8)

08009d28 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009d28:	4770      	bx	lr
 8009d2a:	46c0      	nop			; (mov r8, r8)

08009d2c <HAL_TIM_TriggerCallback>:
 8009d2c:	4770      	bx	lr
 8009d2e:	46c0      	nop			; (mov r8, r8)

08009d30 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d30:	2202      	movs	r2, #2
 8009d32:	6803      	ldr	r3, [r0, #0]
{
 8009d34:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d36:	6919      	ldr	r1, [r3, #16]
{
 8009d38:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d3a:	420a      	tst	r2, r1
 8009d3c:	d003      	beq.n	8009d46 <HAL_TIM_IRQHandler+0x16>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d3e:	68d9      	ldr	r1, [r3, #12]
 8009d40:	420a      	tst	r2, r1
 8009d42:	d000      	beq.n	8009d46 <HAL_TIM_IRQHandler+0x16>
 8009d44:	e06e      	b.n	8009e24 <HAL_TIM_IRQHandler+0xf4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d46:	2204      	movs	r2, #4
 8009d48:	6919      	ldr	r1, [r3, #16]
 8009d4a:	420a      	tst	r2, r1
 8009d4c:	d002      	beq.n	8009d54 <HAL_TIM_IRQHandler+0x24>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d4e:	68d9      	ldr	r1, [r3, #12]
 8009d50:	420a      	tst	r2, r1
 8009d52:	d154      	bne.n	8009dfe <HAL_TIM_IRQHandler+0xce>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d54:	2208      	movs	r2, #8
 8009d56:	6919      	ldr	r1, [r3, #16]
 8009d58:	420a      	tst	r2, r1
 8009d5a:	d002      	beq.n	8009d62 <HAL_TIM_IRQHandler+0x32>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d5c:	68d9      	ldr	r1, [r3, #12]
 8009d5e:	420a      	tst	r2, r1
 8009d60:	d13c      	bne.n	8009ddc <HAL_TIM_IRQHandler+0xac>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d62:	2210      	movs	r2, #16
 8009d64:	6919      	ldr	r1, [r3, #16]
 8009d66:	420a      	tst	r2, r1
 8009d68:	d002      	beq.n	8009d70 <HAL_TIM_IRQHandler+0x40>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d6a:	68d9      	ldr	r1, [r3, #12]
 8009d6c:	420a      	tst	r2, r1
 8009d6e:	d122      	bne.n	8009db6 <HAL_TIM_IRQHandler+0x86>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d70:	2201      	movs	r2, #1
 8009d72:	6919      	ldr	r1, [r3, #16]
 8009d74:	420a      	tst	r2, r1
 8009d76:	d002      	beq.n	8009d7e <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d78:	68d9      	ldr	r1, [r3, #12]
 8009d7a:	420a      	tst	r2, r1
 8009d7c:	d168      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x120>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d7e:	2280      	movs	r2, #128	; 0x80
 8009d80:	6919      	ldr	r1, [r3, #16]
 8009d82:	420a      	tst	r2, r1
 8009d84:	d002      	beq.n	8009d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d86:	68d9      	ldr	r1, [r3, #12]
 8009d88:	420a      	tst	r2, r1
 8009d8a:	d168      	bne.n	8009e5e <HAL_TIM_IRQHandler+0x12e>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d8c:	691a      	ldr	r2, [r3, #16]
 8009d8e:	05d2      	lsls	r2, r2, #23
 8009d90:	d502      	bpl.n	8009d98 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	0612      	lsls	r2, r2, #24
 8009d96:	d46a      	bmi.n	8009e6e <HAL_TIM_IRQHandler+0x13e>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d98:	2240      	movs	r2, #64	; 0x40
 8009d9a:	6919      	ldr	r1, [r3, #16]
 8009d9c:	420a      	tst	r2, r1
 8009d9e:	d002      	beq.n	8009da6 <HAL_TIM_IRQHandler+0x76>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009da0:	68d9      	ldr	r1, [r3, #12]
 8009da2:	420a      	tst	r2, r1
 8009da4:	d16a      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x14c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009da6:	2220      	movs	r2, #32
 8009da8:	6919      	ldr	r1, [r3, #16]
 8009daa:	420a      	tst	r2, r1
 8009dac:	d002      	beq.n	8009db4 <HAL_TIM_IRQHandler+0x84>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009dae:	68d9      	ldr	r1, [r3, #12]
 8009db0:	420a      	tst	r2, r1
 8009db2:	d147      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x114>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009db4:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009db6:	3a21      	subs	r2, #33	; 0x21
 8009db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dba:	3219      	adds	r2, #25
 8009dbc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dbe:	69da      	ldr	r2, [r3, #28]
 8009dc0:	23c0      	movs	r3, #192	; 0xc0
 8009dc2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8009dc4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dc6:	421a      	tst	r2, r3
 8009dc8:	d168      	bne.n	8009e9c <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dca:	f7ff ffa9 	bl	8009d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dce:	0020      	movs	r0, r4
 8009dd0:	f7ff ffaa 	bl	8009d28 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	e7c9      	b.n	8009d70 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ddc:	3a11      	subs	r2, #17
 8009dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009de0:	320d      	adds	r2, #13
 8009de2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009de4:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009de6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009de8:	079b      	lsls	r3, r3, #30
 8009dea:	d154      	bne.n	8009e96 <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dec:	f7ff ff98 	bl	8009d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df0:	0020      	movs	r0, r4
 8009df2:	f7ff ff99 	bl	8009d28 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009df6:	2300      	movs	r3, #0
 8009df8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	e7b1      	b.n	8009d62 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009dfe:	3a09      	subs	r2, #9
 8009e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e02:	3207      	adds	r2, #7
 8009e04:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e06:	699a      	ldr	r2, [r3, #24]
 8009e08:	23c0      	movs	r3, #192	; 0xc0
 8009e0a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8009e0c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e0e:	421a      	tst	r2, r3
 8009e10:	d13e      	bne.n	8009e90 <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e12:	f7ff ff85 	bl	8009d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e16:	0020      	movs	r0, r4
 8009e18:	f7ff ff86 	bl	8009d28 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	e797      	b.n	8009d54 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e24:	3a05      	subs	r2, #5
 8009e26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e28:	3204      	adds	r2, #4
 8009e2a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	079b      	lsls	r3, r3, #30
 8009e30:	d12b      	bne.n	8009e8a <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e32:	f7ff ff75 	bl	8009d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e36:	0020      	movs	r0, r4
 8009e38:	f7ff ff76 	bl	8009d28 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	e780      	b.n	8009d46 <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e44:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8009e46:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009e4a:	f000 f8e1 	bl	800a010 <HAL_TIMEx_CommutCallback>
}
 8009e4e:	e7b1      	b.n	8009db4 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e50:	3a03      	subs	r2, #3
 8009e52:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e54:	0020      	movs	r0, r4
 8009e56:	f7fc f8c5 	bl	8005fe4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	e78f      	b.n	8009d7e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e5e:	3a02      	subs	r2, #2
 8009e60:	3aff      	subs	r2, #255	; 0xff
 8009e62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009e64:	0020      	movs	r0, r4
 8009e66:	f000 f8d5 	bl	800a014 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	e78e      	b.n	8009d8c <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e6e:	4a0d      	ldr	r2, [pc, #52]	; (8009ea4 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 8009e70:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009e74:	f000 f8d0 	bl	800a018 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	e78d      	b.n	8009d98 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e7c:	3a81      	subs	r2, #129	; 0x81
 8009e7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009e80:	0020      	movs	r0, r4
 8009e82:	f7ff ff53 	bl	8009d2c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	e78d      	b.n	8009da6 <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 8009e8a:	f7ff ff4b 	bl	8009d24 <HAL_TIM_IC_CaptureCallback>
 8009e8e:	e7d5      	b.n	8009e3c <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 8009e90:	f7ff ff48 	bl	8009d24 <HAL_TIM_IC_CaptureCallback>
 8009e94:	e7c2      	b.n	8009e1c <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8009e96:	f7ff ff45 	bl	8009d24 <HAL_TIM_IC_CaptureCallback>
 8009e9a:	e7ac      	b.n	8009df6 <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 8009e9c:	f7ff ff42 	bl	8009d24 <HAL_TIM_IC_CaptureCallback>
 8009ea0:	e798      	b.n	8009dd4 <HAL_TIM_IRQHandler+0xa4>
 8009ea2:	46c0      	nop			; (mov r8, r8)
 8009ea4:	fffffeff 	.word	0xfffffeff

08009ea8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ea8:	4a1d      	ldr	r2, [pc, #116]	; (8009f20 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 8009eaa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eac:	4290      	cmp	r0, r2
 8009eae:	d023      	beq.n	8009ef8 <TIM_Base_SetConfig+0x50>
 8009eb0:	4a1c      	ldr	r2, [pc, #112]	; (8009f24 <TIM_Base_SetConfig+0x7c>)
 8009eb2:	4290      	cmp	r0, r2
 8009eb4:	d017      	beq.n	8009ee6 <TIM_Base_SetConfig+0x3e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eb6:	4a1c      	ldr	r2, [pc, #112]	; (8009f28 <TIM_Base_SetConfig+0x80>)
 8009eb8:	4290      	cmp	r0, r2
 8009eba:	d018      	beq.n	8009eee <TIM_Base_SetConfig+0x46>
 8009ebc:	4a1b      	ldr	r2, [pc, #108]	; (8009f2c <TIM_Base_SetConfig+0x84>)
 8009ebe:	4290      	cmp	r0, r2
 8009ec0:	d01e      	beq.n	8009f00 <TIM_Base_SetConfig+0x58>
 8009ec2:	4a1b      	ldr	r2, [pc, #108]	; (8009f30 <TIM_Base_SetConfig+0x88>)
 8009ec4:	4290      	cmp	r0, r2
 8009ec6:	d01b      	beq.n	8009f00 <TIM_Base_SetConfig+0x58>
 8009ec8:	4a1a      	ldr	r2, [pc, #104]	; (8009f34 <TIM_Base_SetConfig+0x8c>)
 8009eca:	4290      	cmp	r0, r2
 8009ecc:	d018      	beq.n	8009f00 <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ece:	2280      	movs	r2, #128	; 0x80
 8009ed0:	4393      	bics	r3, r2
 8009ed2:	694a      	ldr	r2, [r1, #20]
 8009ed4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009ed6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ed8:	688b      	ldr	r3, [r1, #8]
 8009eda:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009edc:	680b      	ldr	r3, [r1, #0]
 8009ede:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	6143      	str	r3, [r0, #20]
}
 8009ee4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ee6:	2270      	movs	r2, #112	; 0x70
 8009ee8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8009eea:	684a      	ldr	r2, [r1, #4]
 8009eec:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eee:	4a12      	ldr	r2, [pc, #72]	; (8009f38 <TIM_Base_SetConfig+0x90>)
 8009ef0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ef2:	68ca      	ldr	r2, [r1, #12]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	e7ea      	b.n	8009ece <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ef8:	2270      	movs	r2, #112	; 0x70
 8009efa:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8009efc:	684a      	ldr	r2, [r1, #4]
 8009efe:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f00:	4a0d      	ldr	r2, [pc, #52]	; (8009f38 <TIM_Base_SetConfig+0x90>)
 8009f02:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f04:	68ca      	ldr	r2, [r1, #12]
 8009f06:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f08:	2280      	movs	r2, #128	; 0x80
 8009f0a:	4393      	bics	r3, r2
 8009f0c:	694a      	ldr	r2, [r1, #20]
 8009f0e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f10:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f12:	688b      	ldr	r3, [r1, #8]
 8009f14:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f16:	680b      	ldr	r3, [r1, #0]
 8009f18:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009f1a:	690b      	ldr	r3, [r1, #16]
 8009f1c:	6303      	str	r3, [r0, #48]	; 0x30
 8009f1e:	e7df      	b.n	8009ee0 <TIM_Base_SetConfig+0x38>
 8009f20:	40012c00 	.word	0x40012c00
 8009f24:	40000400 	.word	0x40000400
 8009f28:	40002000 	.word	0x40002000
 8009f2c:	40014000 	.word	0x40014000
 8009f30:	40014400 	.word	0x40014400
 8009f34:	40014800 	.word	0x40014800
 8009f38:	fffffcff 	.word	0xfffffcff

08009f3c <HAL_TIM_Base_Init>:
{
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8009f40:	d02a      	beq.n	8009f98 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009f42:	233d      	movs	r3, #61	; 0x3d
 8009f44:	5cc3      	ldrb	r3, [r0, r3]
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d020      	beq.n	8009f8e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f50:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8009f52:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f54:	c901      	ldmia	r1!, {r0}
 8009f56:	f7ff ffa7 	bl	8009ea8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 8009f5e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f60:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f62:	3a0a      	subs	r2, #10
 8009f64:	54a3      	strb	r3, [r4, r2]
 8009f66:	3201      	adds	r2, #1
 8009f68:	54a3      	strb	r3, [r4, r2]
 8009f6a:	3201      	adds	r2, #1
 8009f6c:	54a3      	strb	r3, [r4, r2]
 8009f6e:	3201      	adds	r2, #1
 8009f70:	54a3      	strb	r3, [r4, r2]
 8009f72:	3201      	adds	r2, #1
 8009f74:	54a3      	strb	r3, [r4, r2]
 8009f76:	3201      	adds	r2, #1
 8009f78:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f7a:	3201      	adds	r2, #1
 8009f7c:	54a3      	strb	r3, [r4, r2]
 8009f7e:	3201      	adds	r2, #1
 8009f80:	54a3      	strb	r3, [r4, r2]
 8009f82:	3201      	adds	r2, #1
 8009f84:	54a3      	strb	r3, [r4, r2]
 8009f86:	3201      	adds	r2, #1
 8009f88:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8009f8a:	5563      	strb	r3, [r4, r5]
}
 8009f8c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8009f8e:	333c      	adds	r3, #60	; 0x3c
 8009f90:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8009f92:	f7fd f919 	bl	80071c8 <HAL_TIM_Base_MspInit>
 8009f96:	e7d9      	b.n	8009f4c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8009f98:	2001      	movs	r0, #1
 8009f9a:	e7f7      	b.n	8009f8c <HAL_TIM_Base_Init+0x50>

08009f9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f9c:	233c      	movs	r3, #60	; 0x3c
{
 8009f9e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8009fa0:	5cc3      	ldrb	r3, [r0, r3]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d02a      	beq.n	8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa6:	233d      	movs	r3, #61	; 0x3d
 8009fa8:	2202      	movs	r2, #2
 8009faa:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fac:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fae:	4d14      	ldr	r5, [pc, #80]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8009fb0:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009fb2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fb4:	42aa      	cmp	r2, r5
 8009fb6:	d017      	beq.n	8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fb8:	2570      	movs	r5, #112	; 0x70
 8009fba:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fbc:	680d      	ldr	r5, [r1, #0]
 8009fbe:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fc0:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d002      	beq.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d104      	bne.n	8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fce:	2380      	movs	r3, #128	; 0x80
 8009fd0:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fd2:	688b      	ldr	r3, [r1, #8]
 8009fd4:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fd6:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fd8:	233d      	movs	r3, #61	; 0x3d
 8009fda:	2201      	movs	r2, #1
 8009fdc:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8009fde:	2200      	movs	r2, #0
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8009fe4:	2000      	movs	r0, #0
}
 8009fe6:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fe8:	4d08      	ldr	r5, [pc, #32]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8009fea:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fec:	684d      	ldr	r5, [r1, #4]
 8009fee:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ff0:	2570      	movs	r5, #112	; 0x70
 8009ff2:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ff4:	680d      	ldr	r5, [r1, #0]
 8009ff6:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8009ff8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ffa:	e7e8      	b.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 8009ffc:	2002      	movs	r0, #2
 8009ffe:	e7f2      	b.n	8009fe6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800a000:	40012c00 	.word	0x40012c00
 800a004:	40000400 	.word	0x40000400
 800a008:	40014000 	.word	0x40014000
 800a00c:	ff0fffff 	.word	0xff0fffff

0800a010 <HAL_TIMEx_CommutCallback>:
 800a010:	4770      	bx	lr
 800a012:	46c0      	nop			; (mov r8, r8)

0800a014 <HAL_TIMEx_BreakCallback>:
 800a014:	4770      	bx	lr
 800a016:	46c0      	nop			; (mov r8, r8)

0800a018 <HAL_TIMEx_Break2Callback>:
 800a018:	4770      	bx	lr
 800a01a:	46c0      	nop			; (mov r8, r8)

0800a01c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a01c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a01e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a022:	2201      	movs	r2, #1
 800a024:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a028:	6801      	ldr	r1, [r0, #0]
 800a02a:	4d13      	ldr	r5, [pc, #76]	; (800a078 <UART_EndRxTransfer+0x5c>)
 800a02c:	680b      	ldr	r3, [r1, #0]
 800a02e:	402b      	ands	r3, r5
 800a030:	600b      	str	r3, [r1, #0]
 800a032:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a036:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a03a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a03e:	6802      	ldr	r2, [r0, #0]
 800a040:	4c0e      	ldr	r4, [pc, #56]	; (800a07c <UART_EndRxTransfer+0x60>)
 800a042:	6893      	ldr	r3, [r2, #8]
 800a044:	4023      	ands	r3, r4
 800a046:	6093      	str	r3, [r2, #8]
 800a048:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a04c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d10a      	bne.n	800a068 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a052:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a056:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a05a:	2410      	movs	r4, #16
 800a05c:	6802      	ldr	r2, [r0, #0]
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	43a3      	bics	r3, r4
 800a062:	6013      	str	r3, [r2, #0]
 800a064:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a068:	238c      	movs	r3, #140	; 0x8c
 800a06a:	2220      	movs	r2, #32
 800a06c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06e:	2300      	movs	r3, #0
 800a070:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a072:	6743      	str	r3, [r0, #116]	; 0x74
}
 800a074:	bd30      	pop	{r4, r5, pc}
 800a076:	46c0      	nop			; (mov r8, r8)
 800a078:	fffffedf 	.word	0xfffffedf
 800a07c:	effffffe 	.word	0xeffffffe

0800a080 <HAL_UART_RxHalfCpltCallback>:
 800a080:	4770      	bx	lr
 800a082:	46c0      	nop			; (mov r8, r8)

0800a084 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a086:	2188      	movs	r1, #136	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a088:	238c      	movs	r3, #140	; 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a08a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a08c:	5865      	ldr	r5, [r4, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a08e:	58e0      	ldr	r0, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	0612      	lsls	r2, r2, #24
 800a096:	d501      	bpl.n	800a09c <UART_DMAError+0x18>
 800a098:	2d21      	cmp	r5, #33	; 0x21
 800a09a:	d014      	beq.n	800a0c6 <UART_DMAError+0x42>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	065b      	lsls	r3, r3, #25
 800a0a0:	d501      	bpl.n	800a0a6 <UART_DMAError+0x22>
 800a0a2:	2822      	cmp	r0, #34	; 0x22
 800a0a4:	d008      	beq.n	800a0b8 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0a6:	2290      	movs	r2, #144	; 0x90
 800a0a8:	2110      	movs	r1, #16
 800a0aa:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0ac:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0ae:	430b      	orrs	r3, r1
 800a0b0:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 800a0b2:	f7fb ff55 	bl	8005f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->RxXferCount = 0U;
 800a0b8:	235e      	movs	r3, #94	; 0x5e
 800a0ba:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 800a0bc:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 800a0be:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 800a0c0:	f7ff ffac 	bl	800a01c <UART_EndRxTransfer>
 800a0c4:	e7ef      	b.n	800a0a6 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800a0c6:	2356      	movs	r3, #86	; 0x56
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0cc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d0:	3201      	adds	r2, #1
 800a0d2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a0d6:	27c0      	movs	r7, #192	; 0xc0
 800a0d8:	6825      	ldr	r5, [r4, #0]
 800a0da:	682b      	ldr	r3, [r5, #0]
 800a0dc:	43bb      	bics	r3, r7
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0e4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a0ec:	6822      	ldr	r2, [r4, #0]
 800a0ee:	4e05      	ldr	r6, [pc, #20]	; (800a104 <UART_DMAError+0x80>)
 800a0f0:	6893      	ldr	r3, [r2, #8]
 800a0f2:	4033      	ands	r3, r6
 800a0f4:	6093      	str	r3, [r2, #8]
 800a0f6:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 800a0fa:	2320      	movs	r3, #32
 800a0fc:	5063      	str	r3, [r4, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0fe:	6823      	ldr	r3, [r4, #0]
}
 800a100:	e7cc      	b.n	800a09c <UART_DMAError+0x18>
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	ff7fffff 	.word	0xff7fffff

0800a108 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	225e      	movs	r2, #94	; 0x5e
{
 800a10c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a10e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800a110:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800a112:	3a08      	subs	r2, #8
 800a114:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a116:	f7fb ff23 	bl	8005f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a11a:	bd10      	pop	{r4, pc}

0800a11c <HAL_UARTEx_RxEventCallback>:
}
 800a11c:	4770      	bx	lr
 800a11e:	46c0      	nop			; (mov r8, r8)

0800a120 <HAL_UART_IRQHandler>:
{
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	4645      	mov	r5, r8
 800a124:	46de      	mov	lr, fp
 800a126:	4657      	mov	r7, sl
 800a128:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a12a:	6802      	ldr	r2, [r0, #0]
{
 800a12c:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a12e:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a130:	4db3      	ldr	r5, [pc, #716]	; (800a400 <HAL_UART_IRQHandler+0x2e0>)
{
 800a132:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a134:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a136:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800a138:	422b      	tst	r3, r5
 800a13a:	d100      	bne.n	800a13e <HAL_UART_IRQHandler+0x1e>
 800a13c:	e0cb      	b.n	800a2d6 <HAL_UART_IRQHandler+0x1b6>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a13e:	4eb1      	ldr	r6, [pc, #708]	; (800a404 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a140:	4db1      	ldr	r5, [pc, #708]	; (800a408 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a142:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a144:	4005      	ands	r5, r0
 800a146:	4335      	orrs	r5, r6
 800a148:	d157      	bne.n	800a1fa <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a14a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800a14c:	2d01      	cmp	r5, #1
 800a14e:	d026      	beq.n	800a19e <HAL_UART_IRQHandler+0x7e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a150:	2580      	movs	r5, #128	; 0x80
 800a152:	036d      	lsls	r5, r5, #13
 800a154:	422b      	tst	r3, r5
 800a156:	d002      	beq.n	800a15e <HAL_UART_IRQHandler+0x3e>
 800a158:	024e      	lsls	r6, r1, #9
 800a15a:	d500      	bpl.n	800a15e <HAL_UART_IRQHandler+0x3e>
 800a15c:	e0e2      	b.n	800a324 <HAL_UART_IRQHandler+0x204>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a15e:	2280      	movs	r2, #128	; 0x80
 800a160:	421a      	tst	r2, r3
 800a162:	d006      	beq.n	800a172 <HAL_UART_IRQHandler+0x52>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a164:	2580      	movs	r5, #128	; 0x80
 800a166:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a168:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a16a:	4029      	ands	r1, r5
 800a16c:	430a      	orrs	r2, r1
 800a16e:	d000      	beq.n	800a172 <HAL_UART_IRQHandler+0x52>
 800a170:	e0d1      	b.n	800a316 <HAL_UART_IRQHandler+0x1f6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a172:	2240      	movs	r2, #64	; 0x40
 800a174:	421a      	tst	r2, r3
 800a176:	d002      	beq.n	800a17e <HAL_UART_IRQHandler+0x5e>
 800a178:	4202      	tst	r2, r0
 800a17a:	d000      	beq.n	800a17e <HAL_UART_IRQHandler+0x5e>
 800a17c:	e0db      	b.n	800a336 <HAL_UART_IRQHandler+0x216>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a17e:	021a      	lsls	r2, r3, #8
 800a180:	d502      	bpl.n	800a188 <HAL_UART_IRQHandler+0x68>
 800a182:	0042      	lsls	r2, r0, #1
 800a184:	d500      	bpl.n	800a188 <HAL_UART_IRQHandler+0x68>
 800a186:	e0ea      	b.n	800a35e <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a188:	01db      	lsls	r3, r3, #7
 800a18a:	d502      	bpl.n	800a192 <HAL_UART_IRQHandler+0x72>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	da00      	bge.n	800a192 <HAL_UART_IRQHandler+0x72>
 800a190:	e12d      	b.n	800a3ee <HAL_UART_IRQHandler+0x2ce>
}
 800a192:	bcf0      	pop	{r4, r5, r6, r7}
 800a194:	46bb      	mov	fp, r7
 800a196:	46b2      	mov	sl, r6
 800a198:	46a9      	mov	r9, r5
 800a19a:	46a0      	mov	r8, r4
 800a19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a19e:	2610      	movs	r6, #16
 800a1a0:	421e      	tst	r6, r3
 800a1a2:	d0d5      	beq.n	800a150 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1a4:	4206      	tst	r6, r0
 800a1a6:	d0d3      	beq.n	800a150 <HAL_UART_IRQHandler+0x30>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a8:	2340      	movs	r3, #64	; 0x40
 800a1aa:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1ac:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1ae:	6892      	ldr	r2, [r2, #8]
 800a1b0:	4010      	ands	r0, r2
 800a1b2:	4213      	tst	r3, r2
 800a1b4:	d100      	bne.n	800a1b8 <HAL_UART_IRQHandler+0x98>
 800a1b6:	e0dd      	b.n	800a374 <HAL_UART_IRQHandler+0x254>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1b8:	2280      	movs	r2, #128	; 0x80
 800a1ba:	4694      	mov	ip, r2
 800a1bc:	58a2      	ldr	r2, [r4, r2]
 800a1be:	6810      	ldr	r0, [r2, #0]
 800a1c0:	6842      	ldr	r2, [r0, #4]
 800a1c2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a1c4:	2a00      	cmp	r2, #0
 800a1c6:	d0e4      	beq.n	800a192 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1c8:	215c      	movs	r1, #92	; 0x5c
 800a1ca:	468b      	mov	fp, r1
 800a1cc:	5a61      	ldrh	r1, [r4, r1]
 800a1ce:	4291      	cmp	r1, r2
 800a1d0:	d9df      	bls.n	800a192 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 800a1d2:	275e      	movs	r7, #94	; 0x5e
 800a1d4:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	0017      	movs	r7, r2
 800a1da:	6800      	ldr	r0, [r0, #0]
 800a1dc:	4007      	ands	r7, r0
 800a1de:	46b8      	mov	r8, r7
 800a1e0:	4202      	tst	r2, r0
 800a1e2:	d100      	bne.n	800a1e6 <HAL_UART_IRQHandler+0xc6>
 800a1e4:	e118      	b.n	800a418 <HAL_UART_IRQHandler+0x2f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1ea:	335c      	adds	r3, #92	; 0x5c
 800a1ec:	5ae3      	ldrh	r3, [r4, r3]
 800a1ee:	0020      	movs	r0, r4
 800a1f0:	1ac9      	subs	r1, r1, r3
 800a1f2:	b289      	uxth	r1, r1
 800a1f4:	f7ff ff92 	bl	800a11c <HAL_UARTEx_RxEventCallback>
 800a1f8:	e7cb      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1fa:	2501      	movs	r5, #1
 800a1fc:	421d      	tst	r5, r3
 800a1fe:	d008      	beq.n	800a212 <HAL_UART_IRQHandler+0xf2>
 800a200:	05c7      	lsls	r7, r0, #23
 800a202:	d506      	bpl.n	800a212 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a204:	2790      	movs	r7, #144	; 0x90
 800a206:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a208:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a20a:	59e7      	ldr	r7, [r4, r7]
 800a20c:	433d      	orrs	r5, r7
 800a20e:	4667      	mov	r7, ip
 800a210:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a212:	2502      	movs	r5, #2
 800a214:	421d      	tst	r5, r3
 800a216:	d06d      	beq.n	800a2f4 <HAL_UART_IRQHandler+0x1d4>
 800a218:	07cf      	lsls	r7, r1, #31
 800a21a:	d50b      	bpl.n	800a234 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a21c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a21e:	358e      	adds	r5, #142	; 0x8e
 800a220:	2704      	movs	r7, #4
 800a222:	46ac      	mov	ip, r5
 800a224:	5965      	ldr	r5, [r4, r5]
 800a226:	46b8      	mov	r8, r7
 800a228:	433d      	orrs	r5, r7
 800a22a:	4667      	mov	r7, ip
 800a22c:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a22e:	4645      	mov	r5, r8
 800a230:	421d      	tst	r5, r3
 800a232:	d163      	bne.n	800a2fc <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a234:	2708      	movs	r7, #8
 800a236:	421f      	tst	r7, r3
 800a238:	d008      	beq.n	800a24c <HAL_UART_IRQHandler+0x12c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a23a:	2520      	movs	r5, #32
 800a23c:	4005      	ands	r5, r0
 800a23e:	4335      	orrs	r5, r6
 800a240:	d004      	beq.n	800a24c <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a242:	2690      	movs	r6, #144	; 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a244:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a246:	59a5      	ldr	r5, [r4, r6]
 800a248:	433d      	orrs	r5, r7
 800a24a:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a24c:	2580      	movs	r5, #128	; 0x80
 800a24e:	012d      	lsls	r5, r5, #4
 800a250:	422b      	tst	r3, r5
 800a252:	d007      	beq.n	800a264 <HAL_UART_IRQHandler+0x144>
 800a254:	0146      	lsls	r6, r0, #5
 800a256:	d505      	bpl.n	800a264 <HAL_UART_IRQHandler+0x144>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a258:	2690      	movs	r6, #144	; 0x90
 800a25a:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a25c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a25e:	59a5      	ldr	r5, [r4, r6]
 800a260:	433d      	orrs	r5, r7
 800a262:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a264:	2590      	movs	r5, #144	; 0x90
 800a266:	5965      	ldr	r5, [r4, r5]
 800a268:	2d00      	cmp	r5, #0
 800a26a:	d100      	bne.n	800a26e <HAL_UART_IRQHandler+0x14e>
 800a26c:	e791      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a26e:	2520      	movs	r5, #32
 800a270:	421d      	tst	r5, r3
 800a272:	d005      	beq.n	800a280 <HAL_UART_IRQHandler+0x160>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a274:	2380      	movs	r3, #128	; 0x80
 800a276:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a278:	4005      	ands	r5, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a27a:	400b      	ands	r3, r1
 800a27c:	431d      	orrs	r5, r3
 800a27e:	d172      	bne.n	800a366 <HAL_UART_IRQHandler+0x246>
      errorcode = huart->ErrorCode;
 800a280:	2690      	movs	r6, #144	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a282:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a284:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 800a286:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a288:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a28a:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a28c:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 800a28e:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a290:	431d      	orrs	r5, r3
 800a292:	d100      	bne.n	800a296 <HAL_UART_IRQHandler+0x176>
 800a294:	e0af      	b.n	800a3f6 <HAL_UART_IRQHandler+0x2d6>
        UART_EndRxTransfer(huart);
 800a296:	f7ff fec1 	bl	800a01c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	421f      	tst	r7, r3
 800a2a0:	d045      	beq.n	800a32e <HAL_UART_IRQHandler+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ac:	6822      	ldr	r2, [r4, #0]
 800a2ae:	6893      	ldr	r3, [r2, #8]
 800a2b0:	43bb      	bics	r3, r7
 800a2b2:	6093      	str	r3, [r2, #8]
 800a2b4:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800a2b8:	2580      	movs	r5, #128	; 0x80
 800a2ba:	5960      	ldr	r0, [r4, r5]
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d036      	beq.n	800a32e <HAL_UART_IRQHandler+0x20e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2c0:	4b52      	ldr	r3, [pc, #328]	; (800a40c <HAL_UART_IRQHandler+0x2ec>)
 800a2c2:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2c4:	f7fd fedc 	bl	8008080 <HAL_DMA_Abort_IT>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d100      	bne.n	800a2ce <HAL_UART_IRQHandler+0x1ae>
 800a2cc:	e761      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2ce:	5960      	ldr	r0, [r4, r5]
 800a2d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a2d2:	4798      	blx	r3
 800a2d4:	e75d      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a2d6:	2520      	movs	r5, #32
 800a2d8:	421d      	tst	r5, r3
 800a2da:	d100      	bne.n	800a2de <HAL_UART_IRQHandler+0x1be>
 800a2dc:	e735      	b.n	800a14a <HAL_UART_IRQHandler+0x2a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2de:	2680      	movs	r6, #128	; 0x80
 800a2e0:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a2e2:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2e4:	400e      	ands	r6, r1
 800a2e6:	4335      	orrs	r5, r6
 800a2e8:	d100      	bne.n	800a2ec <HAL_UART_IRQHandler+0x1cc>
 800a2ea:	e72e      	b.n	800a14a <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800a2ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d115      	bne.n	800a31e <HAL_UART_IRQHandler+0x1fe>
 800a2f2:	e74e      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2f4:	075d      	lsls	r5, r3, #29
 800a2f6:	d59d      	bpl.n	800a234 <HAL_UART_IRQHandler+0x114>
 800a2f8:	07cd      	lsls	r5, r1, #31
 800a2fa:	d59b      	bpl.n	800a234 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2fc:	2504      	movs	r5, #4
 800a2fe:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a300:	358c      	adds	r5, #140	; 0x8c
 800a302:	46a9      	mov	r9, r5
 800a304:	5965      	ldr	r5, [r4, r5]
 800a306:	46a8      	mov	r8, r5
 800a308:	2502      	movs	r5, #2
 800a30a:	4647      	mov	r7, r8
 800a30c:	432f      	orrs	r7, r5
 800a30e:	003d      	movs	r5, r7
 800a310:	464f      	mov	r7, r9
 800a312:	51e5      	str	r5, [r4, r7]
 800a314:	e78e      	b.n	800a234 <HAL_UART_IRQHandler+0x114>
    if (huart->TxISR != NULL)
 800a316:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d100      	bne.n	800a31e <HAL_UART_IRQHandler+0x1fe>
 800a31c:	e739      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 800a31e:	0020      	movs	r0, r4
 800a320:	4798      	blx	r3
 800a322:	e736      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_WakeupCallback(huart);
 800a324:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a326:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a328:	f000 fcca 	bl	800acc0 <HAL_UARTEx_WakeupCallback>
    return;
 800a32c:	e731      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
            HAL_UART_ErrorCallback(huart);
 800a32e:	0020      	movs	r0, r4
 800a330:	f7fb fe16 	bl	8005f60 <HAL_UART_ErrorCallback>
 800a334:	e72d      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a336:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33a:	2301      	movs	r3, #1
 800a33c:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a340:	6821      	ldr	r1, [r4, #0]
 800a342:	680b      	ldr	r3, [r1, #0]
 800a344:	4393      	bics	r3, r2
 800a346:	600b      	str	r3, [r1, #0]
 800a348:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a34c:	2388      	movs	r3, #136	; 0x88
 800a34e:	3a20      	subs	r2, #32
 800a350:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a352:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a354:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800a356:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800a358:	f7fb fe00 	bl	8005f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a35c:	e719      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a35e:	0020      	movs	r0, r4
 800a360:	f000 fcb2 	bl	800acc8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800a364:	e715      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
        if (huart->RxISR != NULL)
 800a366:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d089      	beq.n	800a280 <HAL_UART_IRQHandler+0x160>
          huart->RxISR(huart);
 800a36c:	0020      	movs	r0, r4
 800a36e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a370:	6822      	ldr	r2, [r4, #0]
 800a372:	e785      	b.n	800a280 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a374:	235c      	movs	r3, #92	; 0x5c
 800a376:	225e      	movs	r2, #94	; 0x5e
 800a378:	5ae1      	ldrh	r1, [r4, r3]
 800a37a:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 800a37c:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a37e:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 800a380:	2a00      	cmp	r2, #0
 800a382:	d100      	bne.n	800a386 <HAL_UART_IRQHandler+0x266>
 800a384:	e705      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a386:	1ac9      	subs	r1, r1, r3
 800a388:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a38a:	2900      	cmp	r1, #0
 800a38c:	d100      	bne.n	800a390 <HAL_UART_IRQHandler+0x270>
 800a38e:	e700      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a390:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a394:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	6813      	ldr	r3, [r2, #0]
 800a39c:	4698      	mov	r8, r3
 800a39e:	4647      	mov	r7, r8
 800a3a0:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <HAL_UART_IRQHandler+0x2f0>)
 800a3a2:	401f      	ands	r7, r3
 800a3a4:	6017      	str	r7, [r2, #0]
 800a3a6:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3aa:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ae:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3b2:	6822      	ldr	r2, [r4, #0]
 800a3b4:	6893      	ldr	r3, [r2, #8]
 800a3b6:	4698      	mov	r8, r3
 800a3b8:	4647      	mov	r7, r8
 800a3ba:	4b16      	ldr	r3, [pc, #88]	; (800a414 <HAL_UART_IRQHandler+0x2f4>)
 800a3bc:	401f      	ands	r7, r3
 800a3be:	6097      	str	r7, [r2, #8]
 800a3c0:	f389 8810 	msr	PRIMASK, r9
        huart->RxState = HAL_UART_STATE_READY;
 800a3c4:	238c      	movs	r3, #140	; 0x8c
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ca:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800a3cc:	6760      	str	r0, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d2:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d6:	6822      	ldr	r2, [r4, #0]
 800a3d8:	6813      	ldr	r3, [r2, #0]
 800a3da:	43b3      	bics	r3, r6
 800a3dc:	6013      	str	r3, [r2, #0]
 800a3de:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3e2:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3e4:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3e6:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3e8:	f7ff fe98 	bl	800a11c <HAL_UARTEx_RxEventCallback>
 800a3ec:	e6d1      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a3ee:	0020      	movs	r0, r4
 800a3f0:	f000 fc68 	bl	800acc4 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800a3f4:	e6cd      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
        HAL_UART_ErrorCallback(huart);
 800a3f6:	f7fb fdb3 	bl	8005f60 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3fa:	51a5      	str	r5, [r4, r6]
 800a3fc:	e6c9      	b.n	800a192 <HAL_UART_IRQHandler+0x72>
 800a3fe:	46c0      	nop			; (mov r8, r8)
 800a400:	0000080f 	.word	0x0000080f
 800a404:	10000001 	.word	0x10000001
 800a408:	04000120 	.word	0x04000120
 800a40c:	0800a109 	.word	0x0800a109
 800a410:	fffffedf 	.word	0xfffffedf
 800a414:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a418:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a41c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a420:	6820      	ldr	r0, [r4, #0]
 800a422:	4f17      	ldr	r7, [pc, #92]	; (800a480 <HAL_UART_IRQHandler+0x360>)
 800a424:	6801      	ldr	r1, [r0, #0]
 800a426:	4039      	ands	r1, r7
 800a428:	6001      	str	r1, [r0, #0]
 800a42a:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a42e:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a432:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a436:	6820      	ldr	r0, [r4, #0]
 800a438:	6881      	ldr	r1, [r0, #8]
 800a43a:	43a9      	bics	r1, r5
 800a43c:	6081      	str	r1, [r0, #8]
 800a43e:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a442:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a446:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a44a:	6820      	ldr	r0, [r4, #0]
 800a44c:	6881      	ldr	r1, [r0, #8]
 800a44e:	4399      	bics	r1, r3
 800a450:	6081      	str	r1, [r0, #8]
 800a452:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 800a456:	334c      	adds	r3, #76	; 0x4c
 800a458:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a45a:	4643      	mov	r3, r8
 800a45c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a45e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a462:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a466:	6822      	ldr	r2, [r4, #0]
 800a468:	6813      	ldr	r3, [r2, #0]
 800a46a:	43b3      	bics	r3, r6
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a472:	4663      	mov	r3, ip
 800a474:	58e0      	ldr	r0, [r4, r3]
 800a476:	f7fd fdc5 	bl	8008004 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a47a:	465b      	mov	r3, fp
 800a47c:	5ae1      	ldrh	r1, [r4, r3]
 800a47e:	e6b2      	b.n	800a1e6 <HAL_UART_IRQHandler+0xc6>
 800a480:	fffffeff 	.word	0xfffffeff

0800a484 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a484:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a486:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800a488:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a48a:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a48c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d002      	beq.n	800a498 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800a492:	f7ff fdf5 	bl	800a080 <HAL_UART_RxHalfCpltCallback>
}
 800a496:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a498:	335b      	adds	r3, #91	; 0x5b
 800a49a:	5ac1      	ldrh	r1, [r0, r3]
 800a49c:	0849      	lsrs	r1, r1, #1
 800a49e:	f7ff fe3d 	bl	800a11c <HAL_UARTEx_RxEventCallback>
 800a4a2:	e7f8      	b.n	800a496 <UART_DMARxHalfCplt+0x12>

0800a4a4 <UART_DMAReceiveCplt>:
{
 800a4a4:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a4a6:	681b      	ldr	r3, [r3, #0]
{
 800a4a8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	2320      	movs	r3, #32
 800a4ae:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a4b2:	4011      	ands	r1, r2
 800a4b4:	4213      	tst	r3, r2
 800a4b6:	d127      	bne.n	800a508 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 800a4b8:	225e      	movs	r2, #94	; 0x5e
 800a4ba:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4bc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4c0:	3a5d      	subs	r2, #93	; 0x5d
 800a4c2:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4c6:	6804      	ldr	r4, [r0, #0]
 800a4c8:	4e1c      	ldr	r6, [pc, #112]	; (800a53c <UART_DMAReceiveCplt+0x98>)
 800a4ca:	6821      	ldr	r1, [r4, #0]
 800a4cc:	4031      	ands	r1, r6
 800a4ce:	6021      	str	r1, [r4, #0]
 800a4d0:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4d4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d8:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4dc:	6804      	ldr	r4, [r0, #0]
 800a4de:	68a1      	ldr	r1, [r4, #8]
 800a4e0:	4391      	bics	r1, r2
 800a4e2:	60a1      	str	r1, [r4, #8]
 800a4e4:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ec:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f0:	2540      	movs	r5, #64	; 0x40
 800a4f2:	6801      	ldr	r1, [r0, #0]
 800a4f4:	688a      	ldr	r2, [r1, #8]
 800a4f6:	43aa      	bics	r2, r5
 800a4f8:	608a      	str	r2, [r1, #8]
 800a4fa:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 800a4fe:	228c      	movs	r2, #140	; 0x8c
 800a500:	5083      	str	r3, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a502:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a504:	2b01      	cmp	r3, #1
 800a506:	d00c      	beq.n	800a522 <UART_DMAReceiveCplt+0x7e>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a508:	2300      	movs	r3, #0
 800a50a:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a50c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d002      	beq.n	800a518 <UART_DMAReceiveCplt+0x74>
    HAL_UART_RxCpltCallback(huart);
 800a512:	f7fb fe81 	bl	8006218 <HAL_UART_RxCpltCallback>
}
 800a516:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a518:	335b      	adds	r3, #91	; 0x5b
 800a51a:	5ac1      	ldrh	r1, [r0, r3]
 800a51c:	f7ff fdfe 	bl	800a11c <HAL_UARTEx_RxEventCallback>
 800a520:	e7f9      	b.n	800a516 <UART_DMAReceiveCplt+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a522:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a526:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52a:	2410      	movs	r4, #16
 800a52c:	6802      	ldr	r2, [r0, #0]
 800a52e:	6813      	ldr	r3, [r2, #0]
 800a530:	43a3      	bics	r3, r4
 800a532:	6013      	str	r3, [r2, #0]
 800a534:	f381 8810 	msr	PRIMASK, r1
}
 800a538:	e7e6      	b.n	800a508 <UART_DMAReceiveCplt+0x64>
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	fffffeff 	.word	0xfffffeff

0800a540 <UART_SetConfig>:
{
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a544:	6925      	ldr	r5, [r4, #16]
 800a546:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a548:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a54a:	432a      	orrs	r2, r5
 800a54c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a54e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a550:	69c0      	ldr	r0, [r0, #28]
 800a552:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a554:	4d4d      	ldr	r5, [pc, #308]	; (800a68c <UART_SetConfig+0x14c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a556:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a558:	4029      	ands	r1, r5
 800a55a:	430a      	orrs	r2, r1
 800a55c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	494b      	ldr	r1, [pc, #300]	; (800a690 <UART_SetConfig+0x150>)
    tmpreg |= huart->Init.OneBitSampling;
 800a562:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a564:	400a      	ands	r2, r1
 800a566:	68e1      	ldr	r1, [r4, #12]
 800a568:	430a      	orrs	r2, r1
 800a56a:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a56c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a56e:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800a570:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a572:	4d48      	ldr	r5, [pc, #288]	; (800a694 <UART_SetConfig+0x154>)
 800a574:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a576:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a578:	430a      	orrs	r2, r1
 800a57a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a580:	43aa      	bics	r2, r5
 800a582:	430a      	orrs	r2, r1
 800a584:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a586:	4a44      	ldr	r2, [pc, #272]	; (800a698 <UART_SetConfig+0x158>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d035      	beq.n	800a5f8 <UART_SetConfig+0xb8>
 800a58c:	4a43      	ldr	r2, [pc, #268]	; (800a69c <UART_SetConfig+0x15c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d00c      	beq.n	800a5ac <UART_SetConfig+0x6c>
 800a592:	4a43      	ldr	r2, [pc, #268]	; (800a6a0 <UART_SetConfig+0x160>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d036      	beq.n	800a606 <UART_SetConfig+0xc6>
 800a598:	4a42      	ldr	r2, [pc, #264]	; (800a6a4 <UART_SetConfig+0x164>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d033      	beq.n	800a606 <UART_SetConfig+0xc6>
    switch (clocksource)
 800a59e:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800a5a0:	4b41      	ldr	r3, [pc, #260]	; (800a6a8 <UART_SetConfig+0x168>)
 800a5a2:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800a5a8:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5ac:	4b3f      	ldr	r3, [pc, #252]	; (800a6ac <UART_SetConfig+0x16c>)
 800a5ae:	4a40      	ldr	r2, [pc, #256]	; (800a6b0 <UART_SetConfig+0x170>)
 800a5b0:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800a5b2:	230c      	movs	r3, #12
 800a5b4:	402b      	ands	r3, r5
 800a5b6:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5b8:	2380      	movs	r3, #128	; 0x80
 800a5ba:	021b      	lsls	r3, r3, #8
 800a5bc:	4298      	cmp	r0, r3
 800a5be:	d02f      	beq.n	800a620 <UART_SetConfig+0xe0>
    switch (clocksource)
 800a5c0:	2a04      	cmp	r2, #4
 800a5c2:	d056      	beq.n	800a672 <UART_SetConfig+0x132>
 800a5c4:	d851      	bhi.n	800a66a <UART_SetConfig+0x12a>
 800a5c6:	2a00      	cmp	r2, #0
 800a5c8:	d021      	beq.n	800a60e <UART_SetConfig+0xce>
 800a5ca:	2a02      	cmp	r2, #2
 800a5cc:	d1e7      	bne.n	800a59e <UART_SetConfig+0x5e>
        pclk = (uint32_t) HSI_VALUE;
 800a5ce:	4839      	ldr	r0, [pc, #228]	; (800a6b4 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5d0:	4b39      	ldr	r3, [pc, #228]	; (800a6b8 <UART_SetConfig+0x178>)
 800a5d2:	0049      	lsls	r1, r1, #1
 800a5d4:	5ac9      	ldrh	r1, [r1, r3]
 800a5d6:	f7f5 fdb3 	bl	8000140 <__udivsi3>
 800a5da:	6865      	ldr	r5, [r4, #4]
 800a5dc:	086b      	lsrs	r3, r5, #1
 800a5de:	18c0      	adds	r0, r0, r3
 800a5e0:	0029      	movs	r1, r5
 800a5e2:	f7f5 fdad 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5e6:	0002      	movs	r2, r0
 800a5e8:	4b34      	ldr	r3, [pc, #208]	; (800a6bc <UART_SetConfig+0x17c>)
 800a5ea:	3a10      	subs	r2, #16
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d8d6      	bhi.n	800a59e <UART_SetConfig+0x5e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	60d8      	str	r0, [r3, #12]
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	e7d3      	b.n	800a5a0 <UART_SetConfig+0x60>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5f8:	4b2c      	ldr	r3, [pc, #176]	; (800a6ac <UART_SetConfig+0x16c>)
 800a5fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	4013      	ands	r3, r2
 800a600:	3b01      	subs	r3, #1
 800a602:	2b02      	cmp	r3, #2
 800a604:	d909      	bls.n	800a61a <UART_SetConfig+0xda>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a606:	2380      	movs	r3, #128	; 0x80
 800a608:	021b      	lsls	r3, r3, #8
 800a60a:	4298      	cmp	r0, r3
 800a60c:	d03a      	beq.n	800a684 <UART_SetConfig+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a60e:	f7fe fecd 	bl	80093ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a612:	2800      	cmp	r0, #0
 800a614:	d0ee      	beq.n	800a5f4 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a616:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a618:	e7da      	b.n	800a5d0 <UART_SetConfig+0x90>
 800a61a:	4a29      	ldr	r2, [pc, #164]	; (800a6c0 <UART_SetConfig+0x180>)
 800a61c:	5cd2      	ldrb	r2, [r2, r3]
 800a61e:	e7cb      	b.n	800a5b8 <UART_SetConfig+0x78>
    switch (clocksource)
 800a620:	2a04      	cmp	r2, #4
 800a622:	d029      	beq.n	800a678 <UART_SetConfig+0x138>
 800a624:	d81e      	bhi.n	800a664 <UART_SetConfig+0x124>
 800a626:	2a00      	cmp	r2, #0
 800a628:	d02c      	beq.n	800a684 <UART_SetConfig+0x144>
 800a62a:	2a02      	cmp	r2, #2
 800a62c:	d1b7      	bne.n	800a59e <UART_SetConfig+0x5e>
 800a62e:	4821      	ldr	r0, [pc, #132]	; (800a6b4 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a630:	4b21      	ldr	r3, [pc, #132]	; (800a6b8 <UART_SetConfig+0x178>)
 800a632:	0049      	lsls	r1, r1, #1
 800a634:	5ac9      	ldrh	r1, [r1, r3]
 800a636:	f7f5 fd83 	bl	8000140 <__udivsi3>
 800a63a:	6865      	ldr	r5, [r4, #4]
 800a63c:	0040      	lsls	r0, r0, #1
 800a63e:	086b      	lsrs	r3, r5, #1
 800a640:	18c0      	adds	r0, r0, r3
 800a642:	0029      	movs	r1, r5
 800a644:	f7f5 fd7c 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a648:	0002      	movs	r2, r0
 800a64a:	4b1c      	ldr	r3, [pc, #112]	; (800a6bc <UART_SetConfig+0x17c>)
 800a64c:	3a10      	subs	r2, #16
 800a64e:	429a      	cmp	r2, r3
 800a650:	d8a5      	bhi.n	800a59e <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a652:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <UART_SetConfig+0x184>)
        huart->Instance->BRR = brrtemp;
 800a654:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a656:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a658:	0700      	lsls	r0, r0, #28
 800a65a:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800a65c:	4303      	orrs	r3, r0
 800a65e:	60d3      	str	r3, [r2, #12]
 800a660:	2000      	movs	r0, #0
 800a662:	e79d      	b.n	800a5a0 <UART_SetConfig+0x60>
    switch (clocksource)
 800a664:	2a08      	cmp	r2, #8
 800a666:	d0e3      	beq.n	800a630 <UART_SetConfig+0xf0>
 800a668:	e799      	b.n	800a59e <UART_SetConfig+0x5e>
    switch (clocksource)
 800a66a:	0018      	movs	r0, r3
 800a66c:	2a08      	cmp	r2, #8
 800a66e:	d0af      	beq.n	800a5d0 <UART_SetConfig+0x90>
 800a670:	e795      	b.n	800a59e <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 800a672:	f7fe fd89 	bl	8009188 <HAL_RCC_GetSysClockFreq>
        break;
 800a676:	e7cc      	b.n	800a612 <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a678:	f7fe fd86 	bl	8009188 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d0b9      	beq.n	800a5f4 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a680:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a682:	e7d5      	b.n	800a630 <UART_SetConfig+0xf0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a684:	f7fe fe92 	bl	80093ac <HAL_RCC_GetPCLK1Freq>
        break;
 800a688:	e7f8      	b.n	800a67c <UART_SetConfig+0x13c>
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	cfff69f3 	.word	0xcfff69f3
 800a690:	ffffcfff 	.word	0xffffcfff
 800a694:	11fff4ff 	.word	0x11fff4ff
 800a698:	40013800 	.word	0x40013800
 800a69c:	40004400 	.word	0x40004400
 800a6a0:	40004800 	.word	0x40004800
 800a6a4:	40004c00 	.word	0x40004c00
 800a6a8:	00010001 	.word	0x00010001
 800a6ac:	40021000 	.word	0x40021000
 800a6b0:	080134f8 	.word	0x080134f8
 800a6b4:	00f42400 	.word	0x00f42400
 800a6b8:	08013508 	.word	0x08013508
 800a6bc:	0000ffef 	.word	0x0000ffef
 800a6c0:	080134f4 	.word	0x080134f4
 800a6c4:	0000fff0 	.word	0x0000fff0

0800a6c8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800a6ca:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6cc:	07da      	lsls	r2, r3, #31
 800a6ce:	d506      	bpl.n	800a6de <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6d0:	6801      	ldr	r1, [r0, #0]
 800a6d2:	4c28      	ldr	r4, [pc, #160]	; (800a774 <UART_AdvFeatureConfig+0xac>)
 800a6d4:	684a      	ldr	r2, [r1, #4]
 800a6d6:	4022      	ands	r2, r4
 800a6d8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a6da:	4322      	orrs	r2, r4
 800a6dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6de:	079a      	lsls	r2, r3, #30
 800a6e0:	d506      	bpl.n	800a6f0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6e2:	6801      	ldr	r1, [r0, #0]
 800a6e4:	4c24      	ldr	r4, [pc, #144]	; (800a778 <UART_AdvFeatureConfig+0xb0>)
 800a6e6:	684a      	ldr	r2, [r1, #4]
 800a6e8:	4022      	ands	r2, r4
 800a6ea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a6ec:	4322      	orrs	r2, r4
 800a6ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6f0:	075a      	lsls	r2, r3, #29
 800a6f2:	d506      	bpl.n	800a702 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6f4:	6801      	ldr	r1, [r0, #0]
 800a6f6:	4c21      	ldr	r4, [pc, #132]	; (800a77c <UART_AdvFeatureConfig+0xb4>)
 800a6f8:	684a      	ldr	r2, [r1, #4]
 800a6fa:	4022      	ands	r2, r4
 800a6fc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a6fe:	4322      	orrs	r2, r4
 800a700:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a702:	071a      	lsls	r2, r3, #28
 800a704:	d506      	bpl.n	800a714 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a706:	6801      	ldr	r1, [r0, #0]
 800a708:	4c1d      	ldr	r4, [pc, #116]	; (800a780 <UART_AdvFeatureConfig+0xb8>)
 800a70a:	684a      	ldr	r2, [r1, #4]
 800a70c:	4022      	ands	r2, r4
 800a70e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a710:	4322      	orrs	r2, r4
 800a712:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a714:	06da      	lsls	r2, r3, #27
 800a716:	d506      	bpl.n	800a726 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a718:	6801      	ldr	r1, [r0, #0]
 800a71a:	4c1a      	ldr	r4, [pc, #104]	; (800a784 <UART_AdvFeatureConfig+0xbc>)
 800a71c:	688a      	ldr	r2, [r1, #8]
 800a71e:	4022      	ands	r2, r4
 800a720:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a722:	4322      	orrs	r2, r4
 800a724:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a726:	069a      	lsls	r2, r3, #26
 800a728:	d506      	bpl.n	800a738 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a72a:	6801      	ldr	r1, [r0, #0]
 800a72c:	4c16      	ldr	r4, [pc, #88]	; (800a788 <UART_AdvFeatureConfig+0xc0>)
 800a72e:	688a      	ldr	r2, [r1, #8]
 800a730:	4022      	ands	r2, r4
 800a732:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a734:	4322      	orrs	r2, r4
 800a736:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a738:	065a      	lsls	r2, r3, #25
 800a73a:	d50a      	bpl.n	800a752 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a73c:	6801      	ldr	r1, [r0, #0]
 800a73e:	4d13      	ldr	r5, [pc, #76]	; (800a78c <UART_AdvFeatureConfig+0xc4>)
 800a740:	684a      	ldr	r2, [r1, #4]
 800a742:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800a744:	402a      	ands	r2, r5
 800a746:	4322      	orrs	r2, r4
 800a748:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a74a:	2280      	movs	r2, #128	; 0x80
 800a74c:	0352      	lsls	r2, r2, #13
 800a74e:	4294      	cmp	r4, r2
 800a750:	d009      	beq.n	800a766 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a752:	061b      	lsls	r3, r3, #24
 800a754:	d506      	bpl.n	800a764 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a756:	6802      	ldr	r2, [r0, #0]
 800a758:	490d      	ldr	r1, [pc, #52]	; (800a790 <UART_AdvFeatureConfig+0xc8>)
 800a75a:	6853      	ldr	r3, [r2, #4]
 800a75c:	400b      	ands	r3, r1
 800a75e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a760:	430b      	orrs	r3, r1
 800a762:	6053      	str	r3, [r2, #4]
}
 800a764:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a766:	684a      	ldr	r2, [r1, #4]
 800a768:	4c0a      	ldr	r4, [pc, #40]	; (800a794 <UART_AdvFeatureConfig+0xcc>)
 800a76a:	4022      	ands	r2, r4
 800a76c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800a76e:	4322      	orrs	r2, r4
 800a770:	604a      	str	r2, [r1, #4]
 800a772:	e7ee      	b.n	800a752 <UART_AdvFeatureConfig+0x8a>
 800a774:	fffdffff 	.word	0xfffdffff
 800a778:	fffeffff 	.word	0xfffeffff
 800a77c:	fffbffff 	.word	0xfffbffff
 800a780:	ffff7fff 	.word	0xffff7fff
 800a784:	ffffefff 	.word	0xffffefff
 800a788:	ffffdfff 	.word	0xffffdfff
 800a78c:	ffefffff 	.word	0xffefffff
 800a790:	fff7ffff 	.word	0xfff7ffff
 800a794:	ff9fffff 	.word	0xff9fffff

0800a798 <UART_WaitOnFlagUntilTimeout>:
{
 800a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79a:	4657      	mov	r7, sl
 800a79c:	464e      	mov	r6, r9
 800a79e:	4645      	mov	r5, r8
 800a7a0:	46de      	mov	lr, fp
 800a7a2:	b5e0      	push	{r5, r6, r7, lr}
 800a7a4:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7aa:	2280      	movs	r2, #128	; 0x80
 800a7ac:	0112      	lsls	r2, r2, #4
{
 800a7ae:	4699      	mov	r9, r3
 800a7b0:	4680      	mov	r8, r0
 800a7b2:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7b4:	4693      	mov	fp, r2
{
 800a7b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b8:	6803      	ldr	r3, [r0, #0]
 800a7ba:	e001      	b.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800a7bc:	1c7a      	adds	r2, r7, #1
 800a7be:	d10d      	bne.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7c0:	69dc      	ldr	r4, [r3, #28]
 800a7c2:	402c      	ands	r4, r5
 800a7c4:	1b64      	subs	r4, r4, r5
 800a7c6:	4262      	negs	r2, r4
 800a7c8:	4154      	adcs	r4, r2
 800a7ca:	42b4      	cmp	r4, r6
 800a7cc:	d0f6      	beq.n	800a7bc <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800a7ce:	2000      	movs	r0, #0
}
 800a7d0:	bcf0      	pop	{r4, r5, r6, r7}
 800a7d2:	46bb      	mov	fp, r7
 800a7d4:	46b2      	mov	sl, r6
 800a7d6:	46a9      	mov	r9, r5
 800a7d8:	46a0      	mov	r8, r4
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7dc:	f7fc ff5a 	bl	8007694 <HAL_GetTick>
 800a7e0:	464b      	mov	r3, r9
 800a7e2:	1ac0      	subs	r0, r0, r3
 800a7e4:	42b8      	cmp	r0, r7
 800a7e6:	d831      	bhi.n	800a84c <UART_WaitOnFlagUntilTimeout+0xb4>
 800a7e8:	2f00      	cmp	r7, #0
 800a7ea:	d02f      	beq.n	800a84c <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7ec:	4643      	mov	r3, r8
 800a7ee:	4651      	mov	r1, sl
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	4211      	tst	r1, r2
 800a7f6:	d0e3      	beq.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7f8:	4659      	mov	r1, fp
 800a7fa:	69da      	ldr	r2, [r3, #28]
 800a7fc:	420a      	tst	r2, r1
 800a7fe:	d0df      	beq.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a800:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a802:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a806:	2201      	movs	r2, #1
 800a808:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a80c:	4643      	mov	r3, r8
 800a80e:	6819      	ldr	r1, [r3, #0]
 800a810:	4c1c      	ldr	r4, [pc, #112]	; (800a884 <UART_WaitOnFlagUntilTimeout+0xec>)
 800a812:	680b      	ldr	r3, [r1, #0]
 800a814:	4023      	ands	r3, r4
 800a816:	600b      	str	r3, [r1, #0]
 800a818:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a81c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a820:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a824:	4643      	mov	r3, r8
 800a826:	6819      	ldr	r1, [r3, #0]
 800a828:	688b      	ldr	r3, [r1, #8]
 800a82a:	4393      	bics	r3, r2
 800a82c:	608b      	str	r3, [r1, #8]
 800a82e:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800a832:	2320      	movs	r3, #32
 800a834:	4641      	mov	r1, r8
 800a836:	3287      	adds	r2, #135	; 0x87
 800a838:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800a83a:	3204      	adds	r2, #4
 800a83c:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a83e:	3204      	adds	r2, #4
 800a840:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 800a842:	2200      	movs	r2, #0
 800a844:	3364      	adds	r3, #100	; 0x64
          return HAL_TIMEOUT;
 800a846:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800a848:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 800a84a:	e7c1      	b.n	800a7d0 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a84c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a850:	2201      	movs	r2, #1
 800a852:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a856:	4643      	mov	r3, r8
 800a858:	6819      	ldr	r1, [r3, #0]
 800a85a:	4c0a      	ldr	r4, [pc, #40]	; (800a884 <UART_WaitOnFlagUntilTimeout+0xec>)
 800a85c:	680b      	ldr	r3, [r1, #0]
 800a85e:	4023      	ands	r3, r4
 800a860:	600b      	str	r3, [r1, #0]
 800a862:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a866:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a86a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a86e:	4643      	mov	r3, r8
 800a870:	6819      	ldr	r1, [r3, #0]
 800a872:	688b      	ldr	r3, [r1, #8]
 800a874:	4393      	bics	r3, r2
 800a876:	608b      	str	r3, [r1, #8]
 800a878:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800a87c:	2320      	movs	r3, #32
 800a87e:	4641      	mov	r1, r8
 800a880:	3287      	adds	r2, #135	; 0x87
 800a882:	e7db      	b.n	800a83c <UART_WaitOnFlagUntilTimeout+0xa4>
 800a884:	fffffe5f 	.word	0xfffffe5f

0800a888 <HAL_UART_Transmit>:
{
 800a888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a88a:	4647      	mov	r7, r8
 800a88c:	46ce      	mov	lr, r9
 800a88e:	b580      	push	{r7, lr}
 800a890:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800a892:	2388      	movs	r3, #136	; 0x88
 800a894:	58c3      	ldr	r3, [r0, r3]
{
 800a896:	0004      	movs	r4, r0
 800a898:	000d      	movs	r5, r1
 800a89a:	0016      	movs	r6, r2
 800a89c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800a89e:	2b20      	cmp	r3, #32
 800a8a0:	d14d      	bne.n	800a93e <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800a8a2:	2900      	cmp	r1, #0
 800a8a4:	d045      	beq.n	800a932 <HAL_UART_Transmit+0xaa>
 800a8a6:	2a00      	cmp	r2, #0
 800a8a8:	d043      	beq.n	800a932 <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8aa:	2380      	movs	r3, #128	; 0x80
 800a8ac:	6882      	ldr	r2, [r0, #8]
 800a8ae:	015b      	lsls	r3, r3, #5
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d104      	bne.n	800a8be <HAL_UART_Transmit+0x36>
 800a8b4:	6903      	ldr	r3, [r0, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a8ba:	07cb      	lsls	r3, r1, #31
 800a8bc:	d439      	bmi.n	800a932 <HAL_UART_Transmit+0xaa>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8be:	2390      	movs	r3, #144	; 0x90
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8c4:	3b08      	subs	r3, #8
 800a8c6:	3221      	adds	r2, #33	; 0x21
 800a8c8:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800a8ca:	f7fc fee3 	bl	8007694 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800a8ce:	2354      	movs	r3, #84	; 0x54
 800a8d0:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800a8d2:	3302      	adds	r3, #2
      pdata16bits = NULL;
 800a8d4:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 800a8d6:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8d8:	2380      	movs	r3, #128	; 0x80
 800a8da:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800a8dc:	4680      	mov	r8, r0
      pdata16bits = NULL;
 800a8de:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8e0:	015b      	lsls	r3, r3, #5
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d03c      	beq.n	800a960 <HAL_UART_Transmit+0xd8>
    while (huart->TxXferCount > 0U)
 800a8e6:	2356      	movs	r3, #86	; 0x56
 800a8e8:	5ae3      	ldrh	r3, [r4, r3]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d02b      	beq.n	800a946 <HAL_UART_Transmit+0xbe>
      huart->TxXferCount--;
 800a8ee:	2656      	movs	r6, #86	; 0x56
 800a8f0:	e00a      	b.n	800a908 <HAL_UART_Transmit+0x80>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8f2:	782a      	ldrb	r2, [r5, #0]
 800a8f4:	6823      	ldr	r3, [r4, #0]
        pdata8bits++;
 800a8f6:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8f8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800a8fa:	5ba2      	ldrh	r2, [r4, r6]
 800a8fc:	3a01      	subs	r2, #1
 800a8fe:	b292      	uxth	r2, r2
 800a900:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 800a902:	5ba3      	ldrh	r3, [r4, r6]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01e      	beq.n	800a946 <HAL_UART_Transmit+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a908:	4643      	mov	r3, r8
 800a90a:	2200      	movs	r2, #0
 800a90c:	2180      	movs	r1, #128	; 0x80
 800a90e:	0020      	movs	r0, r4
 800a910:	9700      	str	r7, [sp, #0]
 800a912:	f7ff ff41 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 800a916:	2800      	cmp	r0, #0
 800a918:	d113      	bne.n	800a942 <HAL_UART_Transmit+0xba>
      if (pdata8bits == NULL)
 800a91a:	2d00      	cmp	r5, #0
 800a91c:	d1e9      	bne.n	800a8f2 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a91e:	464b      	mov	r3, r9
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	6822      	ldr	r2, [r4, #0]
 800a924:	05db      	lsls	r3, r3, #23
 800a926:	0ddb      	lsrs	r3, r3, #23
 800a928:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800a92a:	2302      	movs	r3, #2
 800a92c:	469c      	mov	ip, r3
 800a92e:	44e1      	add	r9, ip
 800a930:	e7e3      	b.n	800a8fa <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800a932:	2001      	movs	r0, #1
}
 800a934:	b003      	add	sp, #12
 800a936:	bcc0      	pop	{r6, r7}
 800a938:	46b9      	mov	r9, r7
 800a93a:	46b0      	mov	r8, r6
 800a93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a93e:	2002      	movs	r0, #2
 800a940:	e7f8      	b.n	800a934 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800a942:	2003      	movs	r0, #3
 800a944:	e7f6      	b.n	800a934 <HAL_UART_Transmit+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a946:	4643      	mov	r3, r8
 800a948:	2200      	movs	r2, #0
 800a94a:	2140      	movs	r1, #64	; 0x40
 800a94c:	0020      	movs	r0, r4
 800a94e:	9700      	str	r7, [sp, #0]
 800a950:	f7ff ff22 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 800a954:	2800      	cmp	r0, #0
 800a956:	d1f4      	bne.n	800a942 <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 800a958:	2388      	movs	r3, #136	; 0x88
 800a95a:	2220      	movs	r2, #32
 800a95c:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800a95e:	e7e9      	b.n	800a934 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a960:	6923      	ldr	r3, [r4, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1bf      	bne.n	800a8e6 <HAL_UART_Transmit+0x5e>
 800a966:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800a968:	2500      	movs	r5, #0
 800a96a:	e7bc      	b.n	800a8e6 <HAL_UART_Transmit+0x5e>

0800a96c <HAL_UART_Receive>:
{
 800a96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96e:	464f      	mov	r7, r9
 800a970:	4646      	mov	r6, r8
 800a972:	46d6      	mov	lr, sl
 800a974:	b5c0      	push	{r6, r7, lr}
 800a976:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800a978:	238c      	movs	r3, #140	; 0x8c
 800a97a:	58c3      	ldr	r3, [r0, r3]
{
 800a97c:	0004      	movs	r4, r0
 800a97e:	000d      	movs	r5, r1
 800a980:	0016      	movs	r6, r2
 800a982:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800a984:	2b20      	cmp	r3, #32
 800a986:	d15a      	bne.n	800aa3e <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 800a988:	2900      	cmp	r1, #0
 800a98a:	d051      	beq.n	800aa30 <HAL_UART_Receive+0xc4>
 800a98c:	2a00      	cmp	r2, #0
 800a98e:	d04f      	beq.n	800aa30 <HAL_UART_Receive+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a990:	2380      	movs	r3, #128	; 0x80
 800a992:	6882      	ldr	r2, [r0, #8]
 800a994:	015b      	lsls	r3, r3, #5
 800a996:	429a      	cmp	r2, r3
 800a998:	d104      	bne.n	800a9a4 <HAL_UART_Receive+0x38>
 800a99a:	6903      	ldr	r3, [r0, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <HAL_UART_Receive+0x38>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a9a0:	07cb      	lsls	r3, r1, #31
 800a9a2:	d445      	bmi.n	800aa30 <HAL_UART_Receive+0xc4>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	2290      	movs	r2, #144	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9a8:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9aa:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9ac:	3a04      	subs	r2, #4
 800a9ae:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b0:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 800a9b2:	f7fc fe6f 	bl	8007694 <HAL_GetTick>
    huart->RxXferSize  = Size;
 800a9b6:	235c      	movs	r3, #92	; 0x5c
    UART_MASK_COMPUTATION(huart);
 800a9b8:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 800a9ba:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 800a9bc:	3302      	adds	r3, #2
 800a9be:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 800a9c0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800a9c2:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 800a9c4:	0152      	lsls	r2, r2, #5
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d051      	beq.n	800aa6e <HAL_UART_Receive+0x102>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d139      	bne.n	800aa42 <HAL_UART_Receive+0xd6>
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	425a      	negs	r2, r3
 800a9d2:	4153      	adcs	r3, r2
 800a9d4:	01db      	lsls	r3, r3, #7
 800a9d6:	4698      	mov	r8, r3
 800a9d8:	237f      	movs	r3, #127	; 0x7f
 800a9da:	469c      	mov	ip, r3
 800a9dc:	44e0      	add	r8, ip
 800a9de:	2360      	movs	r3, #96	; 0x60
 800a9e0:	4642      	mov	r2, r8
 800a9e2:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 800a9e8:	235e      	movs	r3, #94	; 0x5e
 800a9ea:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 800a9ec:	265e      	movs	r6, #94	; 0x5e
    while (huart->RxXferCount > 0U)
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d109      	bne.n	800aa06 <HAL_UART_Receive+0x9a>
 800a9f2:	e035      	b.n	800aa60 <HAL_UART_Receive+0xf4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a9f4:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800a9f6:	3501      	adds	r5, #1
      huart->RxXferCount--;
 800a9f8:	5ba2      	ldrh	r2, [r4, r6]
 800a9fa:	3a01      	subs	r2, #1
 800a9fc:	b292      	uxth	r2, r2
 800a9fe:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 800aa00:	5ba3      	ldrh	r3, [r4, r6]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02c      	beq.n	800aa60 <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800aa06:	464b      	mov	r3, r9
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2120      	movs	r1, #32
 800aa0c:	0020      	movs	r0, r4
 800aa0e:	9700      	str	r7, [sp, #0]
 800aa10:	f7ff fec2 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d128      	bne.n	800aa6a <HAL_UART_Receive+0xfe>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800aa18:	4642      	mov	r2, r8
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	d1e7      	bne.n	800a9f4 <HAL_UART_Receive+0x88>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800aa24:	4652      	mov	r2, sl
 800aa26:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	469c      	mov	ip, r3
 800aa2c:	44e2      	add	sl, ip
 800aa2e:	e7e3      	b.n	800a9f8 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 800aa30:	2001      	movs	r0, #1
}
 800aa32:	b002      	add	sp, #8
 800aa34:	bce0      	pop	{r5, r6, r7}
 800aa36:	46ba      	mov	sl, r7
 800aa38:	46b1      	mov	r9, r6
 800aa3a:	46a8      	mov	r8, r5
 800aa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800aa3e:	2002      	movs	r0, #2
 800aa40:	e7f7      	b.n	800aa32 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800aa42:	2280      	movs	r2, #128	; 0x80
 800aa44:	2100      	movs	r1, #0
 800aa46:	0552      	lsls	r2, r2, #21
 800aa48:	4688      	mov	r8, r1
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d1c7      	bne.n	800a9de <HAL_UART_Receive+0x72>
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	425a      	negs	r2, r3
 800aa52:	4153      	adcs	r3, r2
 800aa54:	019b      	lsls	r3, r3, #6
 800aa56:	4698      	mov	r8, r3
 800aa58:	233f      	movs	r3, #63	; 0x3f
 800aa5a:	469c      	mov	ip, r3
 800aa5c:	44e0      	add	r8, ip
 800aa5e:	e7be      	b.n	800a9de <HAL_UART_Receive+0x72>
    huart->RxState = HAL_UART_STATE_READY;
 800aa60:	238c      	movs	r3, #140	; 0x8c
 800aa62:	2220      	movs	r2, #32
    return HAL_OK;
 800aa64:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 800aa66:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800aa68:	e7e3      	b.n	800aa32 <HAL_UART_Receive+0xc6>
        return HAL_TIMEOUT;
 800aa6a:	2003      	movs	r0, #3
 800aa6c:	e7e1      	b.n	800aa32 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <HAL_UART_Receive+0x116>
 800aa74:	2260      	movs	r2, #96	; 0x60
 800aa76:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <HAL_UART_Receive+0x128>)
 800aa78:	46aa      	mov	sl, r5
 800aa7a:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 800aa7c:	2500      	movs	r5, #0
 800aa7e:	52a3      	strh	r3, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa80:	e7b2      	b.n	800a9e8 <HAL_UART_Receive+0x7c>
    UART_MASK_COMPUTATION(huart);
 800aa82:	2360      	movs	r3, #96	; 0x60
 800aa84:	22ff      	movs	r2, #255	; 0xff
 800aa86:	52e2      	strh	r2, [r4, r3]
 800aa88:	339f      	adds	r3, #159	; 0x9f
 800aa8a:	4698      	mov	r8, r3
      pdata16bits = NULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	469a      	mov	sl, r3
 800aa90:	e7aa      	b.n	800a9e8 <HAL_UART_Receive+0x7c>
 800aa92:	46c0      	nop			; (mov r8, r8)
 800aa94:	000001ff 	.word	0x000001ff

0800aa98 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2390      	movs	r3, #144	; 0x90
{
 800aa9c:	b530      	push	{r4, r5, lr}
 800aa9e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa0:	50c2      	str	r2, [r0, r3]
{
 800aaa2:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 800aaa4:	f7fc fdf6 	bl	8007694 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaa8:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800aaaa:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaac:	6811      	ldr	r1, [r2, #0]
 800aaae:	0709      	lsls	r1, r1, #28
 800aab0:	d40f      	bmi.n	800aad2 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aab2:	6812      	ldr	r2, [r2, #0]
 800aab4:	0752      	lsls	r2, r2, #29
 800aab6:	d41b      	bmi.n	800aaf0 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800aab8:	2320      	movs	r3, #32
 800aaba:	2288      	movs	r2, #136	; 0x88
 800aabc:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800aabe:	3204      	adds	r2, #4
 800aac0:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac2:	2300      	movs	r3, #0
  return HAL_OK;
 800aac4:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800aac6:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac8:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aaca:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800aacc:	54a3      	strb	r3, [r4, r2]
}
 800aace:	b003      	add	sp, #12
 800aad0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aad2:	2180      	movs	r1, #128	; 0x80
 800aad4:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <UART_CheckIdleState+0x74>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	0389      	lsls	r1, r1, #14
 800aadc:	0003      	movs	r3, r0
 800aade:	0020      	movs	r0, r4
 800aae0:	f7ff fe5a 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d10e      	bne.n	800ab06 <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aae8:	6822      	ldr	r2, [r4, #0]
 800aaea:	6812      	ldr	r2, [r2, #0]
 800aaec:	0752      	lsls	r2, r2, #29
 800aaee:	d5e3      	bpl.n	800aab8 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaf0:	2180      	movs	r1, #128	; 0x80
 800aaf2:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <UART_CheckIdleState+0x74>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	0020      	movs	r0, r4
 800aafa:	002b      	movs	r3, r5
 800aafc:	03c9      	lsls	r1, r1, #15
 800aafe:	f7ff fe4b 	bl	800a798 <UART_WaitOnFlagUntilTimeout>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d0d8      	beq.n	800aab8 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800ab06:	2003      	movs	r0, #3
 800ab08:	e7e1      	b.n	800aace <UART_CheckIdleState+0x36>
 800ab0a:	46c0      	nop			; (mov r8, r8)
 800ab0c:	01ffffff 	.word	0x01ffffff

0800ab10 <HAL_UART_Init>:
{
 800ab10:	b510      	push	{r4, lr}
 800ab12:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800ab14:	d028      	beq.n	800ab68 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ab16:	2388      	movs	r3, #136	; 0x88
 800ab18:	58c3      	ldr	r3, [r0, r3]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d026      	beq.n	800ab6c <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 800ab1e:	2388      	movs	r3, #136	; 0x88
 800ab20:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800ab22:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800ab24:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800ab26:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab28:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800ab2a:	6813      	ldr	r3, [r2, #0]
 800ab2c:	438b      	bics	r3, r1
 800ab2e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab30:	f7ff fd06 	bl	800a540 <UART_SetConfig>
 800ab34:	2801      	cmp	r0, #1
 800ab36:	d017      	beq.n	800ab68 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d110      	bne.n	800ab60 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	490d      	ldr	r1, [pc, #52]	; (800ab78 <HAL_UART_Init+0x68>)
 800ab42:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800ab44:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab46:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab48:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab4c:	689a      	ldr	r2, [r3, #8]
 800ab4e:	438a      	bics	r2, r1
 800ab50:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	3929      	subs	r1, #41	; 0x29
 800ab56:	430a      	orrs	r2, r1
 800ab58:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800ab5a:	f7ff ff9d 	bl	800aa98 <UART_CheckIdleState>
}
 800ab5e:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800ab60:	0020      	movs	r0, r4
 800ab62:	f7ff fdb1 	bl	800a6c8 <UART_AdvFeatureConfig>
 800ab66:	e7ea      	b.n	800ab3e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800ab68:	2001      	movs	r0, #1
 800ab6a:	e7f8      	b.n	800ab5e <HAL_UART_Init+0x4e>
    huart->Lock = HAL_UNLOCKED;
 800ab6c:	2284      	movs	r2, #132	; 0x84
 800ab6e:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800ab70:	f7fc fb48 	bl	8007204 <HAL_UART_MspInit>
 800ab74:	e7d3      	b.n	800ab1e <HAL_UART_Init+0xe>
 800ab76:	46c0      	nop			; (mov r8, r8)
 800ab78:	ffffb7ff 	.word	0xffffb7ff

0800ab7c <UART_Start_Receive_DMA>:
{
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 800ab80:	225c      	movs	r2, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 800ab82:	6581      	str	r1, [r0, #88]	; 0x58
{
 800ab84:	000d      	movs	r5, r1
  huart->RxXferSize = Size;
 800ab86:	5283      	strh	r3, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab88:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab8a:	2790      	movs	r7, #144	; 0x90
 800ab8c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab8e:	268c      	movs	r6, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab90:	51c2      	str	r2, [r0, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab92:	5181      	str	r1, [r0, r6]
  if (huart->hdmarx != NULL)
 800ab94:	315e      	adds	r1, #94	; 0x5e
{
 800ab96:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 800ab98:	5840      	ldr	r0, [r0, r1]
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d00d      	beq.n	800abba <UART_Start_Receive_DMA+0x3e>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab9e:	491e      	ldr	r1, [pc, #120]	; (800ac18 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800aba0:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aba2:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aba4:	491d      	ldr	r1, [pc, #116]	; (800ac1c <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aba6:	002a      	movs	r2, r5
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aba8:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800abaa:	491d      	ldr	r1, [pc, #116]	; (800ac20 <UART_Start_Receive_DMA+0xa4>)
 800abac:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800abae:	6821      	ldr	r1, [r4, #0]
 800abb0:	3124      	adds	r1, #36	; 0x24
 800abb2:	f7fd f9df 	bl	8007f74 <HAL_DMA_Start_IT>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d127      	bne.n	800ac0a <UART_Start_Receive_DMA+0x8e>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d117      	bne.n	800abf0 <UART_Start_Receive_DMA+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abc0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc4:	2301      	movs	r3, #1
 800abc6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abca:	6821      	ldr	r1, [r4, #0]
 800abcc:	688a      	ldr	r2, [r1, #8]
 800abce:	431a      	orrs	r2, r3
 800abd0:	608a      	str	r2, [r1, #8]
 800abd2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abd6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abda:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abde:	2040      	movs	r0, #64	; 0x40
 800abe0:	6822      	ldr	r2, [r4, #0]
 800abe2:	6893      	ldr	r3, [r2, #8]
 800abe4:	4303      	orrs	r3, r0
 800abe6:	6093      	str	r3, [r2, #8]
 800abe8:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800abec:	2000      	movs	r0, #0
}
 800abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abf0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abf4:	2301      	movs	r3, #1
 800abf6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abfa:	6822      	ldr	r2, [r4, #0]
 800abfc:	33ff      	adds	r3, #255	; 0xff
 800abfe:	6810      	ldr	r0, [r2, #0]
 800ac00:	4303      	orrs	r3, r0
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	f381 8810 	msr	PRIMASK, r1
}
 800ac08:	e7da      	b.n	800abc0 <UART_Start_Receive_DMA+0x44>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac0a:	2310      	movs	r3, #16
 800ac0c:	51e3      	str	r3, [r4, r7]
      huart->RxState = HAL_UART_STATE_READY;
 800ac0e:	3310      	adds	r3, #16
      return HAL_ERROR;
 800ac10:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800ac12:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 800ac14:	e7eb      	b.n	800abee <UART_Start_Receive_DMA+0x72>
 800ac16:	46c0      	nop			; (mov r8, r8)
 800ac18:	0800a4a5 	.word	0x0800a4a5
 800ac1c:	0800a485 	.word	0x0800a485
 800ac20:	0800a085 	.word	0x0800a085

0800ac24 <HAL_UART_Receive_DMA>:
{
 800ac24:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac26:	208c      	movs	r0, #140	; 0x8c
 800ac28:	5818      	ldr	r0, [r3, r0]
{
 800ac2a:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac2c:	2820      	cmp	r0, #32
 800ac2e:	d127      	bne.n	800ac80 <HAL_UART_Receive_DMA+0x5c>
    if ((pData == NULL) || (Size == 0U))
 800ac30:	2900      	cmp	r1, #0
 800ac32:	d023      	beq.n	800ac7c <HAL_UART_Receive_DMA+0x58>
 800ac34:	2a00      	cmp	r2, #0
 800ac36:	d021      	beq.n	800ac7c <HAL_UART_Receive_DMA+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac38:	2080      	movs	r0, #128	; 0x80
 800ac3a:	689c      	ldr	r4, [r3, #8]
 800ac3c:	0140      	lsls	r0, r0, #5
 800ac3e:	4284      	cmp	r4, r0
 800ac40:	d105      	bne.n	800ac4e <HAL_UART_Receive_DMA+0x2a>
 800ac42:	6918      	ldr	r0, [r3, #16]
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d102      	bne.n	800ac4e <HAL_UART_Receive_DMA+0x2a>
      return HAL_ERROR;
 800ac48:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800ac4a:	07cc      	lsls	r4, r1, #31
 800ac4c:	d417      	bmi.n	800ac7e <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac4e:	2000      	movs	r0, #0
 800ac50:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	6840      	ldr	r0, [r0, #4]
 800ac56:	0200      	lsls	r0, r0, #8
 800ac58:	d50c      	bpl.n	800ac74 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac5a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac5e:	2001      	movs	r0, #1
 800ac60:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac64:	2080      	movs	r0, #128	; 0x80
 800ac66:	681c      	ldr	r4, [r3, #0]
 800ac68:	04c0      	lsls	r0, r0, #19
 800ac6a:	6825      	ldr	r5, [r4, #0]
 800ac6c:	4328      	orrs	r0, r5
 800ac6e:	6020      	str	r0, [r4, #0]
 800ac70:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ac74:	0018      	movs	r0, r3
 800ac76:	f7ff ff81 	bl	800ab7c <UART_Start_Receive_DMA>
 800ac7a:	e000      	b.n	800ac7e <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 800ac7c:	2001      	movs	r0, #1
}
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800ac80:	2002      	movs	r0, #2
 800ac82:	e7fc      	b.n	800ac7e <HAL_UART_Receive_DMA+0x5a>

0800ac84 <UARTEx_SetNbDataToProcess.part.0>:
  * @note The RX FIFO depth and the TX FIFO depth is extracted from
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac86:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac88:	4f0b      	ldr	r7, [pc, #44]	; (800acb8 <UARTEx_SetNbDataToProcess.part.0+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac8a:	689c      	ldr	r4, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac8c:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800ac8e:	0005      	movs	r5, r0
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac90:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac92:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac94:	4e09      	ldr	r6, [pc, #36]	; (800acbc <UARTEx_SetNbDataToProcess.part.0+0x38>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac96:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac98:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac9a:	f7f5 fadb 	bl	8000254 <__divsi3>
 800ac9e:	236a      	movs	r3, #106	; 0x6a
 800aca0:	52e8      	strh	r0, [r5, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aca2:	0123      	lsls	r3, r4, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aca4:	0f5b      	lsrs	r3, r3, #29
 800aca6:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800aca8:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acaa:	00c0      	lsls	r0, r0, #3
 800acac:	f7f5 fad2 	bl	8000254 <__divsi3>
 800acb0:	2368      	movs	r3, #104	; 0x68
 800acb2:	52e8      	strh	r0, [r5, r3]
  }
}
 800acb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb6:	46c0      	nop			; (mov r8, r8)
 800acb8:	08013528 	.word	0x08013528
 800acbc:	08013520 	.word	0x08013520

0800acc0 <HAL_UARTEx_WakeupCallback>:
}
 800acc0:	4770      	bx	lr
 800acc2:	46c0      	nop			; (mov r8, r8)

0800acc4 <HAL_UARTEx_RxFifoFullCallback>:
 800acc4:	4770      	bx	lr
 800acc6:	46c0      	nop			; (mov r8, r8)

0800acc8 <HAL_UARTEx_TxFifoEmptyCallback>:
 800acc8:	4770      	bx	lr
 800acca:	46c0      	nop			; (mov r8, r8)

0800accc <HAL_UARTEx_DisableFifoMode>:
{
 800accc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800acce:	2484      	movs	r4, #132	; 0x84
 800acd0:	5d03      	ldrb	r3, [r0, r4]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d012      	beq.n	800acfc <HAL_UARTEx_DisableFifoMode+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 800acd6:	2588      	movs	r5, #136	; 0x88
 800acd8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800acda:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800acdc:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acde:	6803      	ldr	r3, [r0, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ace2:	6819      	ldr	r1, [r3, #0]
 800ace4:	43b1      	bics	r1, r6
 800ace6:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ace8:	4905      	ldr	r1, [pc, #20]	; (800ad00 <HAL_UARTEx_DisableFifoMode+0x34>)
 800acea:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acec:	2100      	movs	r1, #0
 800acee:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acf0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800acf2:	2320      	movs	r3, #32
 800acf4:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800acf6:	5501      	strb	r1, [r0, r4]
  return HAL_OK;
 800acf8:	2000      	movs	r0, #0
}
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800acfc:	2002      	movs	r0, #2
 800acfe:	e7fc      	b.n	800acfa <HAL_UARTEx_DisableFifoMode+0x2e>
 800ad00:	dfffffff 	.word	0xdfffffff

0800ad04 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800ad04:	2384      	movs	r3, #132	; 0x84
{
 800ad06:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800ad08:	5cc3      	ldrb	r3, [r0, r3]
{
 800ad0a:	0004      	movs	r4, r0
 800ad0c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d01e      	beq.n	800ad50 <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800ad12:	2388      	movs	r3, #136	; 0x88
 800ad14:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad16:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ad18:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad1a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	3923      	subs	r1, #35	; 0x23
 800ad20:	438b      	bics	r3, r1
 800ad22:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad24:	68ab      	ldr	r3, [r5, #8]
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	08d9      	lsrs	r1, r3, #3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad2a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad2c:	4311      	orrs	r1, r2
 800ad2e:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00a      	beq.n	800ad4a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800ad34:	f7ff ffa6 	bl	800ac84 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800ad38:	2388      	movs	r3, #136	; 0x88
 800ad3a:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad3c:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ad3e:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800ad40:	2200      	movs	r2, #0
  return HAL_OK;
 800ad42:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800ad44:	3b04      	subs	r3, #4
 800ad46:	54e2      	strb	r2, [r4, r3]
}
 800ad48:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800ad4a:	4b02      	ldr	r3, [pc, #8]	; (800ad54 <HAL_UARTEx_SetTxFifoThreshold+0x50>)
 800ad4c:	6683      	str	r3, [r0, #104]	; 0x68
 800ad4e:	e7f3      	b.n	800ad38 <HAL_UARTEx_SetTxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 800ad50:	2002      	movs	r0, #2
 800ad52:	e7f9      	b.n	800ad48 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800ad54:	00010001 	.word	0x00010001

0800ad58 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800ad58:	2384      	movs	r3, #132	; 0x84
{
 800ad5a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800ad5c:	5cc3      	ldrb	r3, [r0, r3]
{
 800ad5e:	0004      	movs	r4, r0
 800ad60:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d01e      	beq.n	800ada4 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800ad66:	2388      	movs	r3, #136	; 0x88
 800ad68:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad6a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ad6c:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad6e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	3923      	subs	r1, #35	; 0x23
 800ad74:	438b      	bics	r3, r1
 800ad76:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad78:	68a9      	ldr	r1, [r5, #8]
 800ad7a:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <HAL_UARTEx_SetRxFifoThreshold+0x50>)
 800ad7c:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad7e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad80:	4311      	orrs	r1, r2
 800ad82:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00a      	beq.n	800ad9e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800ad88:	f7ff ff7c 	bl	800ac84 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800ad8c:	2388      	movs	r3, #136	; 0x88
 800ad8e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad90:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ad92:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800ad94:	2200      	movs	r2, #0
  return HAL_OK;
 800ad96:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800ad98:	3b04      	subs	r3, #4
 800ad9a:	54e2      	strb	r2, [r4, r3]
}
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800ad9e:	4b03      	ldr	r3, [pc, #12]	; (800adac <HAL_UARTEx_SetRxFifoThreshold+0x54>)
 800ada0:	6683      	str	r3, [r0, #104]	; 0x68
 800ada2:	e7f3      	b.n	800ad8c <HAL_UARTEx_SetRxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 800ada4:	2002      	movs	r0, #2
 800ada6:	e7f9      	b.n	800ad9c <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800ada8:	f1ffffff 	.word	0xf1ffffff
 800adac:	00010001 	.word	0x00010001

0800adb0 <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 800adb0:	4b04      	ldr	r3, [pc, #16]	; (800adc4 <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 800adb2:	b510      	push	{r4, lr}
  SysTick->CTRL;
 800adb4:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800adb6:	f001 f8a7 	bl	800bf08 <xTaskGetSchedulerState>
 800adba:	2801      	cmp	r0, #1
 800adbc:	d001      	beq.n	800adc2 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 800adbe:	f001 fb81 	bl	800c4c4 <xPortSysTickHandler>
  }
}
 800adc2:	bd10      	pop	{r4, pc}
 800adc4:	e000e010 	.word	0xe000e010

0800adc8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adc8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d106      	bne.n	800adde <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <osKernelInitialize+0x24>)
 800add2:	6818      	ldr	r0, [r3, #0]
 800add4:	2800      	cmp	r0, #0
 800add6:	d105      	bne.n	800ade4 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800add8:	2201      	movs	r2, #1
 800adda:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 800addc:	4770      	bx	lr
    stat = osErrorISR;
 800adde:	2006      	movs	r0, #6
 800ade0:	4240      	negs	r0, r0
 800ade2:	e7fb      	b.n	800addc <osKernelInitialize+0x14>
      stat = osError;
 800ade4:	2001      	movs	r0, #1
 800ade6:	4240      	negs	r0, r0
  return (stat);
 800ade8:	e7f8      	b.n	800addc <osKernelInitialize+0x14>
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	20004dd8 	.word	0x20004dd8

0800adf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800adf0:	b510      	push	{r4, lr}
 800adf2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d111      	bne.n	800ae1e <osKernelStart+0x2e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800adfa:	4a0a      	ldr	r2, [pc, #40]	; (800ae24 <osKernelStart+0x34>)
 800adfc:	6813      	ldr	r3, [r2, #0]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d10a      	bne.n	800ae18 <osKernelStart+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ae02:	4909      	ldr	r1, [pc, #36]	; (800ae28 <osKernelStart+0x38>)
 800ae04:	69cb      	ldr	r3, [r1, #28]
 800ae06:	021b      	lsls	r3, r3, #8
 800ae08:	0a1b      	lsrs	r3, r3, #8
 800ae0a:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae10:	f000 fdc6 	bl	800b9a0 <vTaskStartScheduler>
      stat = osOK;
 800ae14:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800ae16:	bd10      	pop	{r4, pc}
      stat = osError;
 800ae18:	2001      	movs	r0, #1
 800ae1a:	4240      	negs	r0, r0
  return (stat);
 800ae1c:	e7fb      	b.n	800ae16 <osKernelStart+0x26>
    stat = osErrorISR;
 800ae1e:	2006      	movs	r0, #6
 800ae20:	4240      	negs	r0, r0
 800ae22:	e7f8      	b.n	800ae16 <osKernelStart+0x26>
 800ae24:	20004dd8 	.word	0x20004dd8
 800ae28:	e000ed00 	.word	0xe000ed00

0800ae2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2e:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae30:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae32:	b087      	sub	sp, #28
 800ae34:	0005      	movs	r5, r0
  hTask = NULL;
 800ae36:	9205      	str	r2, [sp, #20]
 800ae38:	f3ef 8205 	mrs	r2, IPSR
  return(result);
 800ae3c:	2000      	movs	r0, #0

  if (!IS_IRQ() && (func != NULL)) {
 800ae3e:	2a00      	cmp	r2, #0
 800ae40:	d124      	bne.n	800ae8c <osThreadNew+0x60>
 800ae42:	2d00      	cmp	r5, #0
 800ae44:	d022      	beq.n	800ae8c <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ae46:	2c00      	cmp	r4, #0
 800ae48:	d028      	beq.n	800ae9c <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ae4a:	69a3      	ldr	r3, [r4, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d11f      	bne.n	800ae90 <osThreadNew+0x64>
 800ae50:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae52:	6862      	ldr	r2, [r4, #4]
 800ae54:	07d2      	lsls	r2, r2, #31
 800ae56:	d41f      	bmi.n	800ae98 <osThreadNew+0x6c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800ae58:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 800ae5a:	2280      	movs	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 800ae5c:	2e00      	cmp	r6, #0
 800ae5e:	d000      	beq.n	800ae62 <osThreadNew+0x36>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae60:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800ae62:	6820      	ldr	r0, [r4, #0]
 800ae64:	4684      	mov	ip, r0
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae66:	68a0      	ldr	r0, [r4, #8]
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d027      	beq.n	800aebc <osThreadNew+0x90>
 800ae6c:	68e7      	ldr	r7, [r4, #12]
 800ae6e:	2fa7      	cmp	r7, #167	; 0xa7
 800ae70:	d912      	bls.n	800ae98 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae72:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae74:	2c00      	cmp	r4, #0
 800ae76:	d00f      	beq.n	800ae98 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	d00d      	beq.n	800ae98 <osThreadNew+0x6c>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae7c:	9002      	str	r0, [sp, #8]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	0028      	movs	r0, r5
 800ae82:	000b      	movs	r3, r1
 800ae84:	9401      	str	r4, [sp, #4]
 800ae86:	4661      	mov	r1, ip
 800ae88:	f000 fd2e 	bl	800b8e8 <xTaskCreateStatic>
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800ae8c:	b007      	add	sp, #28
 800ae8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae90:	1e5a      	subs	r2, r3, #1
 800ae92:	2a37      	cmp	r2, #55	; 0x37
 800ae94:	d9dd      	bls.n	800ae52 <osThreadNew+0x26>
 800ae96:	e7f9      	b.n	800ae8c <osThreadNew+0x60>
        return (NULL);
 800ae98:	2000      	movs	r0, #0
 800ae9a:	e7f7      	b.n	800ae8c <osThreadNew+0x60>
 800ae9c:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 800ae9e:	2318      	movs	r3, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aea0:	a805      	add	r0, sp, #20
 800aea2:	9001      	str	r0, [sp, #4]
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	0028      	movs	r0, r5
 800aea8:	000b      	movs	r3, r1
 800aeaa:	0021      	movs	r1, r4
 800aeac:	f000 fd44 	bl	800b938 <xTaskCreate>
 800aeb0:	0003      	movs	r3, r0
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d1e9      	bne.n	800ae8c <osThreadNew+0x60>
  return ((osThreadId_t)hTask);
 800aeb8:	9805      	ldr	r0, [sp, #20]
 800aeba:	e7e7      	b.n	800ae8c <osThreadNew+0x60>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aebc:	68e6      	ldr	r6, [r4, #12]
 800aebe:	2e00      	cmp	r6, #0
 800aec0:	d1e4      	bne.n	800ae8c <osThreadNew+0x60>
 800aec2:	6924      	ldr	r4, [r4, #16]
 800aec4:	2c00      	cmp	r4, #0
 800aec6:	d1e1      	bne.n	800ae8c <osThreadNew+0x60>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aec8:	4664      	mov	r4, ip
 800aeca:	b292      	uxth	r2, r2
 800aecc:	e7e8      	b.n	800aea0 <osThreadNew+0x74>
 800aece:	46c0      	nop			; (mov r8, r8)

0800aed0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aed0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aed2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d107      	bne.n	800aeea <osDelay+0x1a>
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 800aeda:	2400      	movs	r4, #0

    if (ticks != 0U) {
 800aedc:	2800      	cmp	r0, #0
 800aede:	d101      	bne.n	800aee4 <osDelay+0x14>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800aee0:	0020      	movs	r0, r4
 800aee2:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 800aee4:	f000 ff00 	bl	800bce8 <vTaskDelay>
 800aee8:	e7fa      	b.n	800aee0 <osDelay+0x10>
    stat = osErrorISR;
 800aeea:	2406      	movs	r4, #6
 800aeec:	4264      	negs	r4, r4
 800aeee:	e7f7      	b.n	800aee0 <osDelay+0x10>

0800aef0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef2:	0014      	movs	r4, r2
 800aef4:	b083      	sub	sp, #12
 800aef6:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aefa:	2d00      	cmp	r5, #0
 800aefc:	d113      	bne.n	800af26 <osMessageQueueNew+0x36>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d011      	beq.n	800af26 <osMessageQueueNew+0x36>
 800af02:	2900      	cmp	r1, #0
 800af04:	d00f      	beq.n	800af26 <osMessageQueueNew+0x36>
    mem = -1;

    if (attr != NULL) {
 800af06:	2a00      	cmp	r2, #0
 800af08:	d021      	beq.n	800af4e <osMessageQueueNew+0x5e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800af0a:	6893      	ldr	r3, [r2, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00e      	beq.n	800af2e <osMessageQueueNew+0x3e>
 800af10:	68d2      	ldr	r2, [r2, #12]
 800af12:	2a4f      	cmp	r2, #79	; 0x4f
 800af14:	d907      	bls.n	800af26 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800af16:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800af18:	2a00      	cmp	r2, #0
 800af1a:	d004      	beq.n	800af26 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800af1c:	000e      	movs	r6, r1
 800af1e:	4346      	muls	r6, r0
 800af20:	6967      	ldr	r7, [r4, #20]
 800af22:	42b7      	cmp	r7, r6
 800af24:	d21d      	bcs.n	800af62 <osMessageQueueNew+0x72>
  hQueue = NULL;
 800af26:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800af28:	0028      	movs	r0, r5
 800af2a:	b003      	add	sp, #12
 800af2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800af2e:	68d3      	ldr	r3, [r2, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1f8      	bne.n	800af26 <osMessageQueueNew+0x36>
 800af34:	6913      	ldr	r3, [r2, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1f5      	bne.n	800af26 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af3a:	6953      	ldr	r3, [r2, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1f2      	bne.n	800af26 <osMessageQueueNew+0x36>
          hQueue = xQueueCreate (msg_count, msg_size);
 800af40:	2200      	movs	r2, #0
 800af42:	f000 f99b 	bl	800b27c <xQueueGenericCreate>
 800af46:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800af48:	d0ed      	beq.n	800af26 <osMessageQueueNew+0x36>
        name = attr->name;
 800af4a:	6824      	ldr	r4, [r4, #0]
 800af4c:	e004      	b.n	800af58 <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 800af4e:	2200      	movs	r2, #0
 800af50:	f000 f994 	bl	800b27c <xQueueGenericCreate>
 800af54:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800af56:	d0e6      	beq.n	800af26 <osMessageQueueNew+0x36>
      vQueueAddToRegistry (hQueue, name);
 800af58:	0021      	movs	r1, r4
 800af5a:	0028      	movs	r0, r5
 800af5c:	f000 fb28 	bl	800b5b0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800af60:	e7e2      	b.n	800af28 <osMessageQueueNew+0x38>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800af62:	9500      	str	r5, [sp, #0]
 800af64:	f000 f954 	bl	800b210 <xQueueGenericCreateStatic>
 800af68:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800af6a:	d0dc      	beq.n	800af26 <osMessageQueueNew+0x36>
        name = attr->name;
 800af6c:	6824      	ldr	r4, [r4, #0]
 800af6e:	e7f3      	b.n	800af58 <osMessageQueueNew+0x68>

0800af70 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af70:	4b03      	ldr	r3, [pc, #12]	; (800af80 <vApplicationGetIdleTaskMemory+0x10>)
 800af72:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af74:	4b03      	ldr	r3, [pc, #12]	; (800af84 <vApplicationGetIdleTaskMemory+0x14>)
 800af76:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af78:	2380      	movs	r3, #128	; 0x80
 800af7a:	6013      	str	r3, [r2, #0]
}
 800af7c:	4770      	bx	lr
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	20004d30 	.word	0x20004d30
 800af84:	20004b30 	.word	0x20004b30

0800af88 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af88:	4b03      	ldr	r3, [pc, #12]	; (800af98 <vApplicationGetTimerTaskMemory+0x10>)
 800af8a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af8c:	4b03      	ldr	r3, [pc, #12]	; (800af9c <vApplicationGetTimerTaskMemory+0x14>)
 800af8e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af90:	2380      	movs	r3, #128	; 0x80
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	6013      	str	r3, [r2, #0]
}
 800af96:	4770      	bx	lr
 800af98:	200051dc 	.word	0x200051dc
 800af9c:	20004ddc 	.word	0x20004ddc

0800afa0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afa0:	0003      	movs	r3, r0
 800afa2:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afa4:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afa6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afa8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afaa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800afac:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afae:	4252      	negs	r2, r2
 800afb0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800afb2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800afb4:	4770      	bx	lr
 800afb6:	46c0      	nop			; (mov r8, r8)

0800afb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800afb8:	2300      	movs	r3, #0
 800afba:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800afbc:	4770      	bx	lr
 800afbe:	46c0      	nop			; (mov r8, r8)

0800afc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800afc0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afc2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800afc4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afc6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afc8:	689a      	ldr	r2, [r3, #8]
 800afca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afcc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800afce:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800afd0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800afd2:	3301      	adds	r3, #1
 800afd4:	6003      	str	r3, [r0, #0]
}
 800afd6:	4770      	bx	lr

0800afd8 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afd8:	0003      	movs	r3, r0
{
 800afda:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afdc:	680d      	ldr	r5, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afde:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800afe0:	1c6a      	adds	r2, r5, #1
 800afe2:	d00d      	beq.n	800b000 <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afe4:	001c      	movs	r4, r3
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	42aa      	cmp	r2, r5
 800afec:	d9fa      	bls.n	800afe4 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aff0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800aff2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800aff4:	608c      	str	r4, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800aff6:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800aff8:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800affa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800affc:	6003      	str	r3, [r0, #0]
}
 800affe:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800b000:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800b002:	6863      	ldr	r3, [r4, #4]
 800b004:	e7f3      	b.n	800afee <vListInsert+0x16>
 800b006:	46c0      	nop			; (mov r8, r8)

0800b008 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b008:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b00a:	6841      	ldr	r1, [r0, #4]
 800b00c:	6882      	ldr	r2, [r0, #8]
 800b00e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b010:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b012:	6859      	ldr	r1, [r3, #4]
 800b014:	4281      	cmp	r1, r0
 800b016:	d006      	beq.n	800b026 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b018:	2200      	movs	r2, #0
 800b01a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	3a01      	subs	r2, #1
 800b020:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b022:	6818      	ldr	r0, [r3, #0]
}
 800b024:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b026:	605a      	str	r2, [r3, #4]
 800b028:	e7f6      	b.n	800b018 <uxListRemove+0x10>
 800b02a:	46c0      	nop			; (mov r8, r8)

0800b02c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	0016      	movs	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b030:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800b032:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b034:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b036:	2a00      	cmp	r2, #0
 800b038:	d106      	bne.n	800b048 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b03a:	6806      	ldr	r6, [r0, #0]
 800b03c:	2e00      	cmp	r6, #0
 800b03e:	d028      	beq.n	800b092 <prvCopyDataToQueue+0x66>
 800b040:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800b042:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b044:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800b046:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b048:	2e00      	cmp	r6, #0
 800b04a:	d10e      	bne.n	800b06a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b04c:	6840      	ldr	r0, [r0, #4]
 800b04e:	f003 fcc3 	bl	800e9d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b052:	6863      	ldr	r3, [r4, #4]
 800b054:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b056:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b058:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b05a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d3ef      	bcc.n	800b040 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b060:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800b062:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b064:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b066:	3501      	adds	r5, #1
 800b068:	e7ec      	b.n	800b044 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b06a:	68c0      	ldr	r0, [r0, #12]
 800b06c:	f003 fcb4 	bl	800e9d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b070:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b072:	68e3      	ldr	r3, [r4, #12]
 800b074:	4251      	negs	r1, r2
 800b076:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b078:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b07a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d202      	bcs.n	800b086 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b080:	68a3      	ldr	r3, [r4, #8]
 800b082:	185b      	adds	r3, r3, r1
 800b084:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b086:	2e02      	cmp	r6, #2
 800b088:	d1da      	bne.n	800b040 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b08a:	2d00      	cmp	r5, #0
 800b08c:	d1d9      	bne.n	800b042 <prvCopyDataToQueue+0x16>
 800b08e:	3501      	adds	r5, #1
 800b090:	e7d7      	b.n	800b042 <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b092:	6880      	ldr	r0, [r0, #8]
 800b094:	f000 ff48 	bl	800bf28 <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b098:	3501      	adds	r5, #1
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b09a:	60a6      	str	r6, [r4, #8]
 800b09c:	e7d2      	b.n	800b044 <prvCopyDataToQueue+0x18>
 800b09e:	46c0      	nop			; (mov r8, r8)

0800b0a0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	0005      	movs	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0a4:	f001 f9c4 	bl	800c430 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0a8:	2345      	movs	r3, #69	; 0x45
 800b0aa:	5cec      	ldrb	r4, [r5, r3]
 800b0ac:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	dd16      	ble.n	800b0e0 <prvUnlockQueue+0x40>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0b2:	002e      	movs	r6, r5
 800b0b4:	3624      	adds	r6, #36	; 0x24
 800b0b6:	e004      	b.n	800b0c2 <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0b8:	3c01      	subs	r4, #1
 800b0ba:	b2e2      	uxtb	r2, r4
 800b0bc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0be:	2a00      	cmp	r2, #0
 800b0c0:	d00e      	beq.n	800b0e0 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00b      	beq.n	800b0e0 <prvUnlockQueue+0x40>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0c8:	0030      	movs	r0, r6
 800b0ca:	f000 fe91 	bl	800bdf0 <xTaskRemoveFromEventList>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d0f2      	beq.n	800b0b8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800b0d2:	3c01      	subs	r4, #1
 800b0d4:	f000 ff12 	bl	800befc <vTaskMissedYield>
			--cTxLock;
 800b0d8:	b2e2      	uxtb	r2, r4
 800b0da:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	d1f0      	bne.n	800b0c2 <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0e0:	2345      	movs	r3, #69	; 0x45
 800b0e2:	22ff      	movs	r2, #255	; 0xff
 800b0e4:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 800b0e6:	f001 f9af 	bl	800c448 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0ea:	f001 f9a1 	bl	800c430 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0ee:	2344      	movs	r3, #68	; 0x44
 800b0f0:	5cec      	ldrb	r4, [r5, r3]
 800b0f2:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0f4:	2c00      	cmp	r4, #0
 800b0f6:	dd16      	ble.n	800b126 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0f8:	002e      	movs	r6, r5
 800b0fa:	3610      	adds	r6, #16
 800b0fc:	e004      	b.n	800b108 <prvUnlockQueue+0x68>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0fe:	3c01      	subs	r4, #1
 800b100:	b2e2      	uxtb	r2, r4
 800b102:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b104:	2a00      	cmp	r2, #0
 800b106:	d00e      	beq.n	800b126 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b108:	692b      	ldr	r3, [r5, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00b      	beq.n	800b126 <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b10e:	0030      	movs	r0, r6
 800b110:	f000 fe6e 	bl	800bdf0 <xTaskRemoveFromEventList>
 800b114:	2800      	cmp	r0, #0
 800b116:	d0f2      	beq.n	800b0fe <prvUnlockQueue+0x5e>
					vTaskMissedYield();
 800b118:	3c01      	subs	r4, #1
 800b11a:	f000 feef 	bl	800befc <vTaskMissedYield>
				--cRxLock;
 800b11e:	b2e2      	uxtb	r2, r4
 800b120:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b122:	2a00      	cmp	r2, #0
 800b124:	d1f0      	bne.n	800b108 <prvUnlockQueue+0x68>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b126:	2344      	movs	r3, #68	; 0x44
 800b128:	22ff      	movs	r2, #255	; 0xff
 800b12a:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 800b12c:	f001 f98c 	bl	800c448 <vPortExitCritical>
}
 800b130:	bd70      	pop	{r4, r5, r6, pc}
 800b132:	46c0      	nop			; (mov r8, r8)

0800b134 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b136:	0006      	movs	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b138:	0008      	movs	r0, r1
 800b13a:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b13c:	3050      	adds	r0, #80	; 0x50
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800b13e:	000d      	movs	r5, r1
 800b140:	0017      	movs	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b142:	f001 fa3d 	bl	800c5c0 <pvPortMalloc>
 800b146:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 800b148:	d027      	beq.n	800b19a <xQueueGenericCreate.part.0+0x66>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b14a:	2346      	movs	r3, #70	; 0x46
 800b14c:	2200      	movs	r2, #0
 800b14e:	54c2      	strb	r2, [r0, r3]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b150:	0003      	movs	r3, r0
 800b152:	2d00      	cmp	r5, #0
 800b154:	d123      	bne.n	800b19e <xQueueGenericCreate.part.0+0x6a>
 800b156:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800b158:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b15a:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800b15c:	f001 f968 	bl	800c430 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b160:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b162:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b164:	6821      	ldr	r1, [r4, #0]
 800b166:	4353      	muls	r3, r2
 800b168:	18c8      	adds	r0, r1, r3
 800b16a:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b16c:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b16e:	1a9b      	subs	r3, r3, r2
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b170:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 800b172:	2244      	movs	r2, #68	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b174:	18c9      	adds	r1, r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
 800b176:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b178:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b17a:	0020      	movs	r0, r4
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b17c:	60e1      	str	r1, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b17e:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800b180:	3201      	adds	r2, #1
 800b182:	54a3      	strb	r3, [r4, r2]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b184:	3010      	adds	r0, #16
 800b186:	f7ff ff0b 	bl	800afa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b18a:	0020      	movs	r0, r4
 800b18c:	3024      	adds	r0, #36	; 0x24
 800b18e:	f7ff ff07 	bl	800afa0 <vListInitialise>
	taskEXIT_CRITICAL();
 800b192:	f001 f959 	bl	800c448 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 800b196:	234c      	movs	r3, #76	; 0x4c
 800b198:	54e7      	strb	r7, [r4, r3]
	}
 800b19a:	0020      	movs	r0, r4
 800b19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b19e:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1a0:	e7d9      	b.n	800b156 <xQueueGenericCreate.part.0+0x22>
 800b1a2:	46c0      	nop			; (mov r8, r8)

0800b1a4 <xQueueGenericReset>:
{
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	0004      	movs	r4, r0
 800b1a8:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d01b      	beq.n	800b1e6 <xQueueGenericReset+0x42>
	taskENTER_CRITICAL();
 800b1ae:	f001 f93f 	bl	800c430 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b1b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b1b6:	6822      	ldr	r2, [r4, #0]
 800b1b8:	434b      	muls	r3, r1
 800b1ba:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1bc:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1be:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1c0:	18d2      	adds	r2, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1c2:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1c4:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b1c6:	23ff      	movs	r3, #255	; 0xff
 800b1c8:	2244      	movs	r2, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b1ce:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800b1d0:	3201      	adds	r2, #1
 800b1d2:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 800b1d4:	2d00      	cmp	r5, #0
 800b1d6:	d108      	bne.n	800b1ea <xQueueGenericReset+0x46>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10e      	bne.n	800b1fc <xQueueGenericReset+0x58>
	taskEXIT_CRITICAL();
 800b1de:	f001 f933 	bl	800c448 <vPortExitCritical>
}
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800b1e6:	b672      	cpsid	i
 800b1e8:	e7fe      	b.n	800b1e8 <xQueueGenericReset+0x44>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1ea:	0020      	movs	r0, r4
 800b1ec:	3010      	adds	r0, #16
 800b1ee:	f7ff fed7 	bl	800afa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b1f2:	0020      	movs	r0, r4
 800b1f4:	3024      	adds	r0, #36	; 0x24
 800b1f6:	f7ff fed3 	bl	800afa0 <vListInitialise>
 800b1fa:	e7f0      	b.n	800b1de <xQueueGenericReset+0x3a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1fc:	0020      	movs	r0, r4
 800b1fe:	3010      	adds	r0, #16
 800b200:	f000 fdf6 	bl	800bdf0 <xTaskRemoveFromEventList>
 800b204:	2800      	cmp	r0, #0
 800b206:	d0ea      	beq.n	800b1de <xQueueGenericReset+0x3a>
					queueYIELD_IF_USING_PREEMPTION();
 800b208:	f001 f906 	bl	800c418 <vPortYield>
 800b20c:	e7e7      	b.n	800b1de <xQueueGenericReset+0x3a>
 800b20e:	46c0      	nop			; (mov r8, r8)

0800b210 <xQueueGenericCreateStatic>:
	{
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	ac06      	add	r4, sp, #24
 800b216:	001d      	movs	r5, r3
 800b218:	7824      	ldrb	r4, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d101      	bne.n	800b222 <xQueueGenericCreateStatic+0x12>
 800b21e:	b672      	cpsid	i
 800b220:	e7fe      	b.n	800b220 <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00a      	beq.n	800b23c <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b226:	2a00      	cmp	r2, #0
 800b228:	d00c      	beq.n	800b244 <xQueueGenericCreateStatic+0x34>
 800b22a:	2900      	cmp	r1, #0
 800b22c:	d008      	beq.n	800b240 <xQueueGenericCreateStatic+0x30>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b22e:	2350      	movs	r3, #80	; 0x50
 800b230:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b232:	9b01      	ldr	r3, [sp, #4]
 800b234:	2b50      	cmp	r3, #80	; 0x50
 800b236:	d00f      	beq.n	800b258 <xQueueGenericCreateStatic+0x48>
 800b238:	b672      	cpsid	i
 800b23a:	e7fe      	b.n	800b23a <xQueueGenericCreateStatic+0x2a>
		configASSERT( pxStaticQueue != NULL );
 800b23c:	b672      	cpsid	i
 800b23e:	e7fe      	b.n	800b23e <xQueueGenericCreateStatic+0x2e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b240:	b672      	cpsid	i
 800b242:	e7fe      	b.n	800b242 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b244:	2900      	cmp	r1, #0
 800b246:	d117      	bne.n	800b278 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b248:	2350      	movs	r3, #80	; 0x50
 800b24a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b24c:	9b01      	ldr	r3, [sp, #4]
 800b24e:	2b50      	cmp	r3, #80	; 0x50
 800b250:	d1f2      	bne.n	800b238 <xQueueGenericCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b252:	002a      	movs	r2, r5
 800b254:	9b01      	ldr	r3, [sp, #4]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b256:	e000      	b.n	800b25a <xQueueGenericCreateStatic+0x4a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b258:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b25a:	2346      	movs	r3, #70	; 0x46
 800b25c:	2601      	movs	r6, #1
 800b25e:	54ee      	strb	r6, [r5, r3]
	pxNewQueue->uxLength = uxQueueLength;
 800b260:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b262:	6429      	str	r1, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b264:	0028      	movs	r0, r5
 800b266:	2101      	movs	r1, #1
 800b268:	602a      	str	r2, [r5, #0]
 800b26a:	f7ff ff9b 	bl	800b1a4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b26e:	234c      	movs	r3, #76	; 0x4c
	}
 800b270:	0028      	movs	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 800b272:	54ec      	strb	r4, [r5, r3]
	}
 800b274:	b002      	add	sp, #8
 800b276:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b278:	b672      	cpsid	i
 800b27a:	e7fe      	b.n	800b27a <xQueueGenericCreateStatic+0x6a>

0800b27c <xQueueGenericCreate>:
	{
 800b27c:	b510      	push	{r4, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b27e:	2800      	cmp	r0, #0
 800b280:	d101      	bne.n	800b286 <xQueueGenericCreate+0xa>
 800b282:	b672      	cpsid	i
 800b284:	e7fe      	b.n	800b284 <xQueueGenericCreate+0x8>
 800b286:	f7ff ff55 	bl	800b134 <xQueueGenericCreate.part.0>
	}
 800b28a:	bd10      	pop	{r4, pc}

0800b28c <xQueueGenericSend>:
{
 800b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28e:	46ce      	mov	lr, r9
 800b290:	4647      	mov	r7, r8
 800b292:	b580      	push	{r7, lr}
 800b294:	b085      	sub	sp, #20
 800b296:	0004      	movs	r4, r0
 800b298:	4689      	mov	r9, r1
 800b29a:	001d      	movs	r5, r3
 800b29c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d04c      	beq.n	800b33c <xQueueGenericSend+0xb0>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2a2:	2900      	cmp	r1, #0
 800b2a4:	d045      	beq.n	800b332 <xQueueGenericSend+0xa6>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2a6:	2d02      	cmp	r5, #2
 800b2a8:	d104      	bne.n	800b2b4 <xQueueGenericSend+0x28>
 800b2aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d001      	beq.n	800b2b4 <xQueueGenericSend+0x28>
 800b2b0:	b672      	cpsid	i
 800b2b2:	e7fe      	b.n	800b2b2 <xQueueGenericSend+0x26>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2b4:	f000 fe28 	bl	800bf08 <xTaskGetSchedulerState>
 800b2b8:	1e06      	subs	r6, r0, #0
 800b2ba:	d041      	beq.n	800b340 <xQueueGenericSend+0xb4>
 800b2bc:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b2be:	2300      	movs	r3, #0
 800b2c0:	2744      	movs	r7, #68	; 0x44
 800b2c2:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800b2c4:	f001 f8b4 	bl	800c430 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b2ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d352      	bcc.n	800b376 <xQueueGenericSend+0xea>
 800b2d0:	2d02      	cmp	r5, #2
 800b2d2:	d050      	beq.n	800b376 <xQueueGenericSend+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d05f      	beq.n	800b39a <xQueueGenericSend+0x10e>
				else if( xEntryTimeSet == pdFALSE )
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	d047      	beq.n	800b36e <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 800b2de:	f001 f8b3 	bl	800c448 <vPortExitCritical>
		vTaskSuspendAll();
 800b2e2:	f000 fb9d 	bl	800ba20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2e6:	f001 f8a3 	bl	800c430 <vPortEnterCritical>
 800b2ea:	5de3      	ldrb	r3, [r4, r7]
 800b2ec:	b25b      	sxtb	r3, r3
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	d101      	bne.n	800b2f6 <xQueueGenericSend+0x6a>
 800b2f2:	4643      	mov	r3, r8
 800b2f4:	55e3      	strb	r3, [r4, r7]
 800b2f6:	2345      	movs	r3, #69	; 0x45
 800b2f8:	5ce2      	ldrb	r2, [r4, r3]
 800b2fa:	b252      	sxtb	r2, r2
 800b2fc:	3201      	adds	r2, #1
 800b2fe:	d101      	bne.n	800b304 <xQueueGenericSend+0x78>
 800b300:	4642      	mov	r2, r8
 800b302:	54e2      	strb	r2, [r4, r3]
 800b304:	f001 f8a0 	bl	800c448 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b308:	a901      	add	r1, sp, #4
 800b30a:	a802      	add	r0, sp, #8
 800b30c:	f000 fdbc 	bl	800be88 <xTaskCheckForTimeOut>
 800b310:	2800      	cmp	r0, #0
 800b312:	d146      	bne.n	800b3a2 <xQueueGenericSend+0x116>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b314:	f001 f88c 	bl	800c430 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b318:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b31a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d014      	beq.n	800b34a <xQueueGenericSend+0xbe>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b320:	f001 f892 	bl	800c448 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b324:	0020      	movs	r0, r4
 800b326:	f7ff febb 	bl	800b0a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b32a:	f000 fcd1 	bl	800bcd0 <xTaskResumeAll>
 800b32e:	2601      	movs	r6, #1
 800b330:	e7c8      	b.n	800b2c4 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b332:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b334:	2b00      	cmp	r3, #0
 800b336:	d0b6      	beq.n	800b2a6 <xQueueGenericSend+0x1a>
 800b338:	b672      	cpsid	i
 800b33a:	e7fe      	b.n	800b33a <xQueueGenericSend+0xae>
	configASSERT( pxQueue );
 800b33c:	b672      	cpsid	i
 800b33e:	e7fe      	b.n	800b33e <xQueueGenericSend+0xb2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b340:	9b01      	ldr	r3, [sp, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0bb      	beq.n	800b2be <xQueueGenericSend+0x32>
 800b346:	b672      	cpsid	i
 800b348:	e7fe      	b.n	800b348 <xQueueGenericSend+0xbc>
	taskEXIT_CRITICAL();
 800b34a:	f001 f87d 	bl	800c448 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b34e:	0020      	movs	r0, r4
 800b350:	9901      	ldr	r1, [sp, #4]
 800b352:	3010      	adds	r0, #16
 800b354:	f000 fd22 	bl	800bd9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b358:	0020      	movs	r0, r4
 800b35a:	f7ff fea1 	bl	800b0a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b35e:	f000 fcb7 	bl	800bcd0 <xTaskResumeAll>
 800b362:	2800      	cmp	r0, #0
 800b364:	d1e3      	bne.n	800b32e <xQueueGenericSend+0xa2>
					portYIELD_WITHIN_API();
 800b366:	f001 f857 	bl	800c418 <vPortYield>
 800b36a:	2601      	movs	r6, #1
 800b36c:	e7aa      	b.n	800b2c4 <xQueueGenericSend+0x38>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b36e:	a802      	add	r0, sp, #8
 800b370:	f000 fd7e 	bl	800be70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b374:	e7b3      	b.n	800b2de <xQueueGenericSend+0x52>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b376:	002a      	movs	r2, r5
 800b378:	4649      	mov	r1, r9
 800b37a:	0020      	movs	r0, r4
 800b37c:	f7ff fe56 	bl	800b02c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	d117      	bne.n	800b3b6 <xQueueGenericSend+0x12a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b386:	2800      	cmp	r0, #0
 800b388:	d112      	bne.n	800b3b0 <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800b38a:	f001 f85d 	bl	800c448 <vPortExitCritical>
				return pdPASS;
 800b38e:	2001      	movs	r0, #1
}
 800b390:	b005      	add	sp, #20
 800b392:	bcc0      	pop	{r6, r7}
 800b394:	46b9      	mov	r9, r7
 800b396:	46b0      	mov	r8, r6
 800b398:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800b39a:	f001 f855 	bl	800c448 <vPortExitCritical>
					return errQUEUE_FULL;
 800b39e:	2000      	movs	r0, #0
 800b3a0:	e7f6      	b.n	800b390 <xQueueGenericSend+0x104>
			prvUnlockQueue( pxQueue );
 800b3a2:	0020      	movs	r0, r4
 800b3a4:	f7ff fe7c 	bl	800b0a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3a8:	f000 fc92 	bl	800bcd0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	e7ef      	b.n	800b390 <xQueueGenericSend+0x104>
							queueYIELD_IF_USING_PREEMPTION();
 800b3b0:	f001 f832 	bl	800c418 <vPortYield>
 800b3b4:	e7e9      	b.n	800b38a <xQueueGenericSend+0xfe>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3b6:	0020      	movs	r0, r4
 800b3b8:	3024      	adds	r0, #36	; 0x24
 800b3ba:	f000 fd19 	bl	800bdf0 <xTaskRemoveFromEventList>
 800b3be:	e7e2      	b.n	800b386 <xQueueGenericSend+0xfa>

0800b3c0 <xQueueGenericSendFromISR>:
{
 800b3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3c2:	464f      	mov	r7, r9
 800b3c4:	4646      	mov	r6, r8
 800b3c6:	46d6      	mov	lr, sl
 800b3c8:	0004      	movs	r4, r0
 800b3ca:	b5c0      	push	{r6, r7, lr}
 800b3cc:	001d      	movs	r5, r3
 800b3ce:	000f      	movs	r7, r1
 800b3d0:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d037      	beq.n	800b446 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3d6:	2900      	cmp	r1, #0
 800b3d8:	d017      	beq.n	800b40a <xQueueGenericSendFromISR+0x4a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3da:	2d02      	cmp	r5, #2
 800b3dc:	d104      	bne.n	800b3e8 <xQueueGenericSendFromISR+0x28>
 800b3de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d017      	beq.n	800b414 <xQueueGenericSendFromISR+0x54>
 800b3e4:	b672      	cpsid	i
 800b3e6:	e7fe      	b.n	800b3e6 <xQueueGenericSendFromISR+0x26>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3e8:	f001 f83c 	bl	800c464 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b3ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3f0:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d312      	bcc.n	800b41c <xQueueGenericSendFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 800b3f6:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	f001 f837 	bl	800c46c <vClearInterruptMaskFromISR>
}
 800b3fe:	0028      	movs	r0, r5
 800b400:	bce0      	pop	{r5, r6, r7}
 800b402:	46ba      	mov	sl, r7
 800b404:	46b1      	mov	r9, r6
 800b406:	46a8      	mov	r8, r5
 800b408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b40a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d0e4      	beq.n	800b3da <xQueueGenericSendFromISR+0x1a>
 800b410:	b672      	cpsid	i
 800b412:	e7fe      	b.n	800b412 <xQueueGenericSendFromISR+0x52>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b414:	f001 f826 	bl	800c464 <ulSetInterruptMaskFromISR>
 800b418:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b41a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800b41c:	2345      	movs	r3, #69	; 0x45
 800b41e:	469a      	mov	sl, r3
 800b420:	5ce3      	ldrb	r3, [r4, r3]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b422:	002a      	movs	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800b424:	b25b      	sxtb	r3, r3
 800b426:	4699      	mov	r9, r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b428:	0039      	movs	r1, r7
 800b42a:	0020      	movs	r0, r4
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b42c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b42e:	f7ff fdfd 	bl	800b02c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b432:	464b      	mov	r3, r9
 800b434:	3301      	adds	r3, #1
 800b436:	d008      	beq.n	800b44a <xQueueGenericSendFromISR+0x8a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b438:	464b      	mov	r3, r9
 800b43a:	4652      	mov	r2, sl
 800b43c:	3301      	adds	r3, #1
 800b43e:	b25b      	sxtb	r3, r3
			xReturn = pdPASS;
 800b440:	2501      	movs	r5, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b442:	54a3      	strb	r3, [r4, r2]
 800b444:	e7d8      	b.n	800b3f8 <xQueueGenericSendFromISR+0x38>
	configASSERT( pxQueue );
 800b446:	b672      	cpsid	i
 800b448:	e7fe      	b.n	800b448 <xQueueGenericSendFromISR+0x88>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800b44c:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0d2      	beq.n	800b3f8 <xQueueGenericSendFromISR+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b452:	0020      	movs	r0, r4
 800b454:	3024      	adds	r0, #36	; 0x24
 800b456:	f000 fccb 	bl	800bdf0 <xTaskRemoveFromEventList>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d0cc      	beq.n	800b3f8 <xQueueGenericSendFromISR+0x38>
							if( pxHigherPriorityTaskWoken != NULL )
 800b45e:	2e00      	cmp	r6, #0
 800b460:	d0ca      	beq.n	800b3f8 <xQueueGenericSendFromISR+0x38>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b462:	6035      	str	r5, [r6, #0]
 800b464:	e7c8      	b.n	800b3f8 <xQueueGenericSendFromISR+0x38>
 800b466:	46c0      	nop			; (mov r8, r8)

0800b468 <xQueueReceive>:
{
 800b468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b46a:	46ce      	mov	lr, r9
 800b46c:	4647      	mov	r7, r8
 800b46e:	b580      	push	{r7, lr}
 800b470:	b085      	sub	sp, #20
 800b472:	0004      	movs	r4, r0
 800b474:	000d      	movs	r5, r1
 800b476:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b478:	2800      	cmp	r0, #0
 800b47a:	d100      	bne.n	800b47e <xQueueReceive+0x16>
 800b47c:	e074      	b.n	800b568 <xQueueReceive+0x100>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b47e:	2900      	cmp	r1, #0
 800b480:	d04a      	beq.n	800b518 <xQueueReceive+0xb0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b482:	f000 fd41 	bl	800bf08 <xTaskGetSchedulerState>
 800b486:	2800      	cmp	r0, #0
 800b488:	d04b      	beq.n	800b522 <xQueueReceive+0xba>
		taskENTER_CRITICAL();
 800b48a:	f000 ffd1 	bl	800c430 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b48e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b490:	4699      	mov	r9, r3
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b492:	2b00      	cmp	r3, #0
 800b494:	d16a      	bne.n	800b56c <xQueueReceive+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b496:	9b01      	ldr	r3, [sp, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d035      	beq.n	800b508 <xQueueReceive+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b49c:	a802      	add	r0, sp, #8
 800b49e:	f000 fce7 	bl	800be70 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	2744      	movs	r7, #68	; 0x44
 800b4a6:	4698      	mov	r8, r3
 800b4a8:	2645      	movs	r6, #69	; 0x45
		taskEXIT_CRITICAL();
 800b4aa:	f000 ffcd 	bl	800c448 <vPortExitCritical>
		vTaskSuspendAll();
 800b4ae:	f000 fab7 	bl	800ba20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4b2:	f000 ffbd 	bl	800c430 <vPortEnterCritical>
 800b4b6:	5de3      	ldrb	r3, [r4, r7]
 800b4b8:	b25b      	sxtb	r3, r3
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	d101      	bne.n	800b4c2 <xQueueReceive+0x5a>
 800b4be:	4643      	mov	r3, r8
 800b4c0:	55e3      	strb	r3, [r4, r7]
 800b4c2:	5da3      	ldrb	r3, [r4, r6]
 800b4c4:	b25b      	sxtb	r3, r3
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <xQueueReceive+0x66>
 800b4ca:	4643      	mov	r3, r8
 800b4cc:	55a3      	strb	r3, [r4, r6]
 800b4ce:	f000 ffbb 	bl	800c448 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4d2:	a901      	add	r1, sp, #4
 800b4d4:	a802      	add	r0, sp, #8
 800b4d6:	f000 fcd7 	bl	800be88 <xTaskCheckForTimeOut>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d126      	bne.n	800b52c <xQueueReceive+0xc4>
	taskENTER_CRITICAL();
 800b4de:	f000 ffa7 	bl	800c430 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d02e      	beq.n	800b546 <xQueueReceive+0xde>
	taskEXIT_CRITICAL();
 800b4e8:	f000 ffae 	bl	800c448 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b4ec:	0020      	movs	r0, r4
 800b4ee:	f7ff fdd7 	bl	800b0a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4f2:	f000 fbed 	bl	800bcd0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800b4f6:	f000 ff9b 	bl	800c430 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4fc:	4699      	mov	r9, r3
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d134      	bne.n	800b56c <xQueueReceive+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1d0      	bne.n	800b4aa <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 800b508:	f000 ff9e 	bl	800c448 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b50c:	2000      	movs	r0, #0
}
 800b50e:	b005      	add	sp, #20
 800b510:	bcc0      	pop	{r6, r7}
 800b512:	46b9      	mov	r9, r7
 800b514:	46b0      	mov	r8, r6
 800b516:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b518:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0b1      	beq.n	800b482 <xQueueReceive+0x1a>
 800b51e:	b672      	cpsid	i
 800b520:	e7fe      	b.n	800b520 <xQueueReceive+0xb8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b522:	9b01      	ldr	r3, [sp, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0b0      	beq.n	800b48a <xQueueReceive+0x22>
 800b528:	b672      	cpsid	i
 800b52a:	e7fe      	b.n	800b52a <xQueueReceive+0xc2>
			prvUnlockQueue( pxQueue );
 800b52c:	0020      	movs	r0, r4
 800b52e:	f7ff fdb7 	bl	800b0a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b532:	f000 fbcd 	bl	800bcd0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800b536:	f000 ff7b 	bl	800c430 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b53a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0e3      	beq.n	800b508 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 800b540:	f000 ff82 	bl	800c448 <vPortExitCritical>
		taskENTER_CRITICAL();
 800b544:	e7d7      	b.n	800b4f6 <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 800b546:	f000 ff7f 	bl	800c448 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b54a:	0020      	movs	r0, r4
 800b54c:	9901      	ldr	r1, [sp, #4]
 800b54e:	3024      	adds	r0, #36	; 0x24
 800b550:	f000 fc24 	bl	800bd9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b554:	0020      	movs	r0, r4
 800b556:	f7ff fda3 	bl	800b0a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b55a:	f000 fbb9 	bl	800bcd0 <xTaskResumeAll>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d1c9      	bne.n	800b4f6 <xQueueReceive+0x8e>
					portYIELD_WITHIN_API();
 800b562:	f000 ff59 	bl	800c418 <vPortYield>
		taskENTER_CRITICAL();
 800b566:	e7c6      	b.n	800b4f6 <xQueueReceive+0x8e>
	configASSERT( ( pxQueue ) );
 800b568:	b672      	cpsid	i
 800b56a:	e7fe      	b.n	800b56a <xQueueReceive+0x102>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b56c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b56e:	2a00      	cmp	r2, #0
 800b570:	d00a      	beq.n	800b588 <xQueueReceive+0x120>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b572:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b574:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b576:	1889      	adds	r1, r1, r2
 800b578:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b57a:	4299      	cmp	r1, r3
 800b57c:	d301      	bcc.n	800b582 <xQueueReceive+0x11a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b57e:	6821      	ldr	r1, [r4, #0]
 800b580:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b582:	0028      	movs	r0, r5
 800b584:	f003 fa28 	bl	800e9d8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b588:	464b      	mov	r3, r9
 800b58a:	3b01      	subs	r3, #1
 800b58c:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d103      	bne.n	800b59c <xQueueReceive+0x134>
				taskEXIT_CRITICAL();
 800b594:	f000 ff58 	bl	800c448 <vPortExitCritical>
				return pdPASS;
 800b598:	2001      	movs	r0, #1
 800b59a:	e7b8      	b.n	800b50e <xQueueReceive+0xa6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b59c:	0020      	movs	r0, r4
 800b59e:	3010      	adds	r0, #16
 800b5a0:	f000 fc26 	bl	800bdf0 <xTaskRemoveFromEventList>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d0f5      	beq.n	800b594 <xQueueReceive+0x12c>
						queueYIELD_IF_USING_PREEMPTION();
 800b5a8:	f000 ff36 	bl	800c418 <vPortYield>
 800b5ac:	e7f2      	b.n	800b594 <xQueueReceive+0x12c>
 800b5ae:	46c0      	nop			; (mov r8, r8)

0800b5b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b5b0:	b530      	push	{r4, r5, lr}
 800b5b2:	4d08      	ldr	r5, [pc, #32]	; (800b5d4 <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	002a      	movs	r2, r5
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b5b8:	6814      	ldr	r4, [r2, #0]
 800b5ba:	2c00      	cmp	r4, #0
 800b5bc:	d004      	beq.n	800b5c8 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5be:	3301      	adds	r3, #1
 800b5c0:	3208      	adds	r2, #8
 800b5c2:	2b08      	cmp	r3, #8
 800b5c4:	d1f8      	bne.n	800b5b8 <vQueueAddToRegistry+0x8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5c6:	bd30      	pop	{r4, r5, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b5c8:	00db      	lsls	r3, r3, #3
 800b5ca:	50e9      	str	r1, [r5, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b5cc:	18ed      	adds	r5, r5, r3
 800b5ce:	6068      	str	r0, [r5, #4]
				break;
 800b5d0:	e7f9      	b.n	800b5c6 <vQueueAddToRegistry+0x16>
 800b5d2:	46c0      	nop			; (mov r8, r8)
 800b5d4:	20005284 	.word	0x20005284

0800b5d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	0004      	movs	r4, r0
 800b5dc:	0016      	movs	r6, r2
 800b5de:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b5e0:	f000 ff26 	bl	800c430 <vPortEnterCritical>
 800b5e4:	2244      	movs	r2, #68	; 0x44
 800b5e6:	5ca3      	ldrb	r3, [r4, r2]
 800b5e8:	b25b      	sxtb	r3, r3
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	d101      	bne.n	800b5f2 <vQueueWaitForMessageRestricted+0x1a>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	54a3      	strb	r3, [r4, r2]
 800b5f2:	2245      	movs	r2, #69	; 0x45
 800b5f4:	5ca3      	ldrb	r3, [r4, r2]
 800b5f6:	b25b      	sxtb	r3, r3
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	d101      	bne.n	800b600 <vQueueWaitForMessageRestricted+0x28>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	54a3      	strb	r3, [r4, r2]
 800b600:	f000 ff22 	bl	800c448 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b604:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b60a:	0020      	movs	r0, r4
 800b60c:	f7ff fd48 	bl	800b0a0 <prvUnlockQueue>
	}
 800b610:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b612:	0020      	movs	r0, r4
 800b614:	0032      	movs	r2, r6
 800b616:	0029      	movs	r1, r5
 800b618:	3024      	adds	r0, #36	; 0x24
 800b61a:	f000 fbd1 	bl	800bdc0 <vTaskPlaceOnEventListRestricted>
 800b61e:	e7f4      	b.n	800b60a <vQueueWaitForMessageRestricted+0x32>

0800b620 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b622:	46c6      	mov	lr, r8
 800b624:	b500      	push	{lr}
 800b626:	0005      	movs	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b628:	f000 ff02 	bl	800c430 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b62c:	4a32      	ldr	r2, [pc, #200]	; (800b6f8 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 800b62e:	4f33      	ldr	r7, [pc, #204]	; (800b6fc <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 800b630:	6813      	ldr	r3, [r2, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d02b      	beq.n	800b694 <prvAddNewTaskToReadyList+0x74>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b63c:	4c30      	ldr	r4, [pc, #192]	; (800b700 <prvAddNewTaskToReadyList+0xe0>)
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d01f      	beq.n	800b684 <prvAddNewTaskToReadyList+0x64>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b644:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b646:	4e2f      	ldr	r6, [pc, #188]	; (800b704 <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b648:	492f      	ldr	r1, [pc, #188]	; (800b708 <prvAddNewTaskToReadyList+0xe8>)
 800b64a:	680b      	ldr	r3, [r1, #0]
 800b64c:	3301      	adds	r3, #1
 800b64e:	600b      	str	r3, [r1, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b650:	646b      	str	r3, [r5, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b652:	4b2e      	ldr	r3, [pc, #184]	; (800b70c <prvAddNewTaskToReadyList+0xec>)
 800b654:	6819      	ldr	r1, [r3, #0]
 800b656:	4291      	cmp	r1, r2
 800b658:	d200      	bcs.n	800b65c <prvAddNewTaskToReadyList+0x3c>
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	0093      	lsls	r3, r2, #2
 800b65e:	189b      	adds	r3, r3, r2
 800b660:	0098      	lsls	r0, r3, #2
 800b662:	1d29      	adds	r1, r5, #4
 800b664:	1830      	adds	r0, r6, r0
 800b666:	f7ff fcab 	bl	800afc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b66a:	f000 feed 	bl	800c448 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d004      	beq.n	800b67e <prvAddNewTaskToReadyList+0x5e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b678:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d312      	bcc.n	800b6a4 <prvAddNewTaskToReadyList+0x84>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b67e:	bc80      	pop	{r7}
 800b680:	46b8      	mov	r8, r7
 800b682:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d800      	bhi.n	800b690 <prvAddNewTaskToReadyList+0x70>
					pxCurrentTCB = pxNewTCB;
 800b68e:	603d      	str	r5, [r7, #0]
 800b690:	4e1c      	ldr	r6, [pc, #112]	; (800b704 <prvAddNewTaskToReadyList+0xe4>)
 800b692:	e7d9      	b.n	800b648 <prvAddNewTaskToReadyList+0x28>
			pxCurrentTCB = pxNewTCB;
 800b694:	603d      	str	r5, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b696:	6813      	ldr	r3, [r2, #0]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d006      	beq.n	800b6aa <prvAddNewTaskToReadyList+0x8a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b69c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b69e:	4e19      	ldr	r6, [pc, #100]	; (800b704 <prvAddNewTaskToReadyList+0xe4>)
 800b6a0:	4c17      	ldr	r4, [pc, #92]	; (800b700 <prvAddNewTaskToReadyList+0xe0>)
 800b6a2:	e7d1      	b.n	800b648 <prvAddNewTaskToReadyList+0x28>
			taskYIELD_IF_USING_PREEMPTION();
 800b6a4:	f000 feb8 	bl	800c418 <vPortYield>
}
 800b6a8:	e7e9      	b.n	800b67e <prvAddNewTaskToReadyList+0x5e>
 800b6aa:	238c      	movs	r3, #140	; 0x8c
 800b6ac:	4e15      	ldr	r6, [pc, #84]	; (800b704 <prvAddNewTaskToReadyList+0xe4>)
 800b6ae:	00db      	lsls	r3, r3, #3
 800b6b0:	4698      	mov	r8, r3
 800b6b2:	0034      	movs	r4, r6
 800b6b4:	44b0      	add	r8, r6
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6b6:	0020      	movs	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b8:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6ba:	f7ff fc71 	bl	800afa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6be:	45a0      	cmp	r8, r4
 800b6c0:	d1f9      	bne.n	800b6b6 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6c2:	4b13      	ldr	r3, [pc, #76]	; (800b710 <prvAddNewTaskToReadyList+0xf0>)
 800b6c4:	4698      	mov	r8, r3
 800b6c6:	0018      	movs	r0, r3
 800b6c8:	f7ff fc6a 	bl	800afa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6cc:	4c11      	ldr	r4, [pc, #68]	; (800b714 <prvAddNewTaskToReadyList+0xf4>)
 800b6ce:	0020      	movs	r0, r4
 800b6d0:	f7ff fc66 	bl	800afa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6d4:	4810      	ldr	r0, [pc, #64]	; (800b718 <prvAddNewTaskToReadyList+0xf8>)
 800b6d6:	f7ff fc63 	bl	800afa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6da:	4810      	ldr	r0, [pc, #64]	; (800b71c <prvAddNewTaskToReadyList+0xfc>)
 800b6dc:	f7ff fc60 	bl	800afa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6e0:	480f      	ldr	r0, [pc, #60]	; (800b720 <prvAddNewTaskToReadyList+0x100>)
 800b6e2:	f7ff fc5d 	bl	800afa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6e6:	4642      	mov	r2, r8
 800b6e8:	4b0e      	ldr	r3, [pc, #56]	; (800b724 <prvAddNewTaskToReadyList+0x104>)
 800b6ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6ec:	4b0e      	ldr	r3, [pc, #56]	; (800b728 <prvAddNewTaskToReadyList+0x108>)
		prvAddTaskToReadyList( pxNewTCB );
 800b6ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6f0:	601c      	str	r4, [r3, #0]
 800b6f2:	4c03      	ldr	r4, [pc, #12]	; (800b700 <prvAddNewTaskToReadyList+0xe0>)
}
 800b6f4:	e7a8      	b.n	800b648 <prvAddNewTaskToReadyList+0x28>
 800b6f6:	46c0      	nop			; (mov r8, r8)
 800b6f8:	20005730 	.word	0x20005730
 800b6fc:	200052c4 	.word	0x200052c4
 800b700:	2000578c 	.word	0x2000578c
 800b704:	200052d0 	.word	0x200052d0
 800b708:	2000573c 	.word	0x2000573c
 800b70c:	20005740 	.word	0x20005740
 800b710:	20005744 	.word	0x20005744
 800b714:	20005758 	.word	0x20005758
 800b718:	20005778 	.word	0x20005778
 800b71c:	200057a4 	.word	0x200057a4
 800b720:	20005790 	.word	0x20005790
 800b724:	200052c8 	.word	0x200052c8
 800b728:	200052cc 	.word	0x200052cc

0800b72c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	0006      	movs	r6, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b730:	4b14      	ldr	r3, [pc, #80]	; (800b784 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b732:	4c15      	ldr	r4, [pc, #84]	; (800b788 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800b734:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b736:	6820      	ldr	r0, [r4, #0]
{
 800b738:	000d      	movs	r5, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b73a:	3004      	adds	r0, #4
 800b73c:	f7ff fc64 	bl	800b008 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b740:	1c73      	adds	r3, r6, #1
 800b742:	d017      	beq.n	800b774 <prvAddCurrentTaskToDelayedList+0x48>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b744:	6823      	ldr	r3, [r4, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b746:	19be      	adds	r6, r7, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b748:	605e      	str	r6, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800b74a:	42b7      	cmp	r7, r6
 800b74c:	d80b      	bhi.n	800b766 <prvAddCurrentTaskToDelayedList+0x3a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <prvAddCurrentTaskToDelayedList+0x60>)
 800b750:	6818      	ldr	r0, [r3, #0]
 800b752:	6821      	ldr	r1, [r4, #0]
 800b754:	3104      	adds	r1, #4
 800b756:	f7ff fc3f 	bl	800afd8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800b75a:	4b0d      	ldr	r3, [pc, #52]	; (800b790 <prvAddCurrentTaskToDelayedList+0x64>)
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	42b2      	cmp	r2, r6
 800b760:	d900      	bls.n	800b764 <prvAddCurrentTaskToDelayedList+0x38>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800b762:	601e      	str	r6, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b766:	4b0b      	ldr	r3, [pc, #44]	; (800b794 <prvAddCurrentTaskToDelayedList+0x68>)
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	6821      	ldr	r1, [r4, #0]
 800b76c:	3104      	adds	r1, #4
 800b76e:	f7ff fc33 	bl	800afd8 <vListInsert>
 800b772:	e7f7      	b.n	800b764 <prvAddCurrentTaskToDelayedList+0x38>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b774:	2d00      	cmp	r5, #0
 800b776:	d0e5      	beq.n	800b744 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b778:	6821      	ldr	r1, [r4, #0]
 800b77a:	4807      	ldr	r0, [pc, #28]	; (800b798 <prvAddCurrentTaskToDelayedList+0x6c>)
 800b77c:	3104      	adds	r1, #4
 800b77e:	f7ff fc1f 	bl	800afc0 <vListInsertEnd>
 800b782:	e7ef      	b.n	800b764 <prvAddCurrentTaskToDelayedList+0x38>
 800b784:	200057b8 	.word	0x200057b8
 800b788:	200052c4 	.word	0x200052c4
 800b78c:	200052c8 	.word	0x200052c8
 800b790:	2000576c 	.word	0x2000576c
 800b794:	200052cc 	.word	0x200052cc
 800b798:	20005790 	.word	0x20005790

0800b79c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b79e:	46d6      	mov	lr, sl
 800b7a0:	464f      	mov	r7, r9
 800b7a2:	4646      	mov	r6, r8
 800b7a4:	b5c0      	push	{r6, r7, lr}
 800b7a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b7a8:	0094      	lsls	r4, r2, #2
 800b7aa:	0022      	movs	r2, r4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b7ac:	4681      	mov	r9, r0
 800b7ae:	000f      	movs	r7, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b7b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800b7b2:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b7b4:	469a      	mov	sl, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b7b6:	f002 ff3d 	bl	800e634 <memset>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b7ba:	2207      	movs	r2, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b7bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b7be:	3c04      	subs	r4, #4
 800b7c0:	191b      	adds	r3, r3, r4
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b7c2:	4393      	bics	r3, r2
 800b7c4:	4698      	mov	r8, r3
	if( pcName != NULL )
 800b7c6:	2f00      	cmp	r7, #0
 800b7c8:	d040      	beq.n	800b84c <prvInitialiseNewTask.constprop.0+0xb0>
 800b7ca:	002b      	movs	r3, r5
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7cc:	2400      	movs	r4, #0
 800b7ce:	3334      	adds	r3, #52	; 0x34
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7d0:	5d3e      	ldrb	r6, [r7, r4]
 800b7d2:	551e      	strb	r6, [r3, r4]
			if( pcName[ x ] == ( char ) 0x00 )
 800b7d4:	2e00      	cmp	r6, #0
 800b7d6:	d002      	beq.n	800b7de <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7d8:	3401      	adds	r4, #1
 800b7da:	2c10      	cmp	r4, #16
 800b7dc:	d1f8      	bne.n	800b7d0 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7de:	2343      	movs	r3, #67	; 0x43
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7e4:	9c08      	ldr	r4, [sp, #32]
 800b7e6:	2c37      	cmp	r4, #55	; 0x37
 800b7e8:	d900      	bls.n	800b7ec <prvInitialiseNewTask.constprop.0+0x50>
 800b7ea:	2437      	movs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800b7ec:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7ee:	1d28      	adds	r0, r5, #4
	pxNewTCB->uxPriority = uxPriority;
 800b7f0:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b7f2:	64ec      	str	r4, [r5, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b7f4:	652e      	str	r6, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7f6:	f7ff fbdf 	bl	800afb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7fa:	0028      	movs	r0, r5
 800b7fc:	3018      	adds	r0, #24
 800b7fe:	f7ff fbdb 	bl	800afb8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b802:	2338      	movs	r3, #56	; 0x38
 800b804:	1b1b      	subs	r3, r3, r4
 800b806:	61ab      	str	r3, [r5, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800b808:	23a0      	movs	r3, #160	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b80a:	0028      	movs	r0, r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b80c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b80e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800b810:	50ee      	str	r6, [r5, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b812:	3304      	adds	r3, #4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b814:	224c      	movs	r2, #76	; 0x4c
 800b816:	2100      	movs	r1, #0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b818:	54ee      	strb	r6, [r5, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b81a:	3054      	adds	r0, #84	; 0x54
 800b81c:	f002 ff0a 	bl	800e634 <memset>
 800b820:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b822:	4649      	mov	r1, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b824:	001a      	movs	r2, r3
 800b826:	65ab      	str	r3, [r5, #88]	; 0x58
 800b828:	3268      	adds	r2, #104	; 0x68
 800b82a:	33d0      	adds	r3, #208	; 0xd0
 800b82c:	65ea      	str	r2, [r5, #92]	; 0x5c
 800b82e:	662b      	str	r3, [r5, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b830:	4652      	mov	r2, sl
 800b832:	4640      	mov	r0, r8
 800b834:	f000 fdde 	bl	800c3f4 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800b838:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b83a:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d000      	beq.n	800b842 <prvInitialiseNewTask.constprop.0+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b840:	601d      	str	r5, [r3, #0]
}
 800b842:	bce0      	pop	{r5, r6, r7}
 800b844:	46ba      	mov	sl, r7
 800b846:	46b1      	mov	r9, r6
 800b848:	46a8      	mov	r8, r5
 800b84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b84c:	2334      	movs	r3, #52	; 0x34
 800b84e:	54ef      	strb	r7, [r5, r3]
 800b850:	e7c8      	b.n	800b7e4 <prvInitialiseNewTask.constprop.0+0x48>
 800b852:	46c0      	nop			; (mov r8, r8)
 800b854:	20006514 	.word	0x20006514

0800b858 <prvIdleTask>:
{
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	4647      	mov	r7, r8
 800b85c:	46ce      	mov	lr, r9
 800b85e:	4b1e      	ldr	r3, [pc, #120]	; (800b8d8 <prvIdleTask+0x80>)
 800b860:	b580      	push	{r7, lr}
 800b862:	4698      	mov	r8, r3
 800b864:	4b1d      	ldr	r3, [pc, #116]	; (800b8dc <prvIdleTask+0x84>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b866:	27a5      	movs	r7, #165	; 0xa5
 800b868:	4699      	mov	r9, r3
 800b86a:	4d1d      	ldr	r5, [pc, #116]	; (800b8e0 <prvIdleTask+0x88>)
 800b86c:	4e1d      	ldr	r6, [pc, #116]	; (800b8e4 <prvIdleTask+0x8c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b86e:	682b      	ldr	r3, [r5, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d025      	beq.n	800b8c0 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 800b874:	f000 fddc 	bl	800c430 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b878:	4643      	mov	r3, r8
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b87e:	1d20      	adds	r0, r4, #4
 800b880:	f7ff fbc2 	bl	800b008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b884:	6833      	ldr	r3, [r6, #0]
 800b886:	3b01      	subs	r3, #1
 800b888:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b88a:	682b      	ldr	r3, [r5, #0]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800b890:	f000 fdda 	bl	800c448 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b894:	0020      	movs	r0, r4
 800b896:	3054      	adds	r0, #84	; 0x54
 800b898:	f002 ffb2 	bl	800e800 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b89c:	5de3      	ldrb	r3, [r4, r7]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d005      	beq.n	800b8ae <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d013      	beq.n	800b8ce <prvIdleTask+0x76>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d0e1      	beq.n	800b86e <prvIdleTask+0x16>
 800b8aa:	b672      	cpsid	i
 800b8ac:	e7fe      	b.n	800b8ac <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 800b8ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b8b0:	f000 ff1a 	bl	800c6e8 <vPortFree>
				vPortFree( pxTCB );
 800b8b4:	0020      	movs	r0, r4
 800b8b6:	f000 ff17 	bl	800c6e8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8ba:	682b      	ldr	r3, [r5, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1d9      	bne.n	800b874 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8c0:	464b      	mov	r3, r9
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d9d2      	bls.n	800b86e <prvIdleTask+0x16>
				taskYIELD();
 800b8c8:	f000 fda6 	bl	800c418 <vPortYield>
 800b8cc:	e7cf      	b.n	800b86e <prvIdleTask+0x16>
				vPortFree( pxTCB );
 800b8ce:	0020      	movs	r0, r4
 800b8d0:	f000 ff0a 	bl	800c6e8 <vPortFree>
 800b8d4:	e7cb      	b.n	800b86e <prvIdleTask+0x16>
 800b8d6:	46c0      	nop			; (mov r8, r8)
 800b8d8:	200057a4 	.word	0x200057a4
 800b8dc:	200052d0 	.word	0x200052d0
 800b8e0:	20005734 	.word	0x20005734
 800b8e4:	20005730 	.word	0x20005730

0800b8e8 <xTaskCreateStatic>:
	{
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 800b8ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b8ee:	2c00      	cmp	r4, #0
 800b8f0:	d00b      	beq.n	800b90a <xTaskCreateStatic+0x22>
		configASSERT( pxTaskBuffer != NULL );
 800b8f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b8f4:	2c00      	cmp	r4, #0
 800b8f6:	d006      	beq.n	800b906 <xTaskCreateStatic+0x1e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8f8:	24a8      	movs	r4, #168	; 0xa8
 800b8fa:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8fc:	9c05      	ldr	r4, [sp, #20]
 800b8fe:	2ca8      	cmp	r4, #168	; 0xa8
 800b900:	d005      	beq.n	800b90e <xTaskCreateStatic+0x26>
 800b902:	b672      	cpsid	i
 800b904:	e7fe      	b.n	800b904 <xTaskCreateStatic+0x1c>
		configASSERT( pxTaskBuffer != NULL );
 800b906:	b672      	cpsid	i
 800b908:	e7fe      	b.n	800b908 <xTaskCreateStatic+0x20>
		configASSERT( puxStackBuffer != NULL );
 800b90a:	b672      	cpsid	i
 800b90c:	e7fe      	b.n	800b90c <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b90e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b910:	9c05      	ldr	r4, [sp, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b912:	9c0c      	ldr	r4, [sp, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b914:	9e0c      	ldr	r6, [sp, #48]	; 0x30
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b916:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b918:	24a5      	movs	r4, #165	; 0xa5
 800b91a:	2502      	movs	r5, #2
 800b91c:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b91e:	ac04      	add	r4, sp, #16
 800b920:	9401      	str	r4, [sp, #4]
 800b922:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b924:	9602      	str	r6, [sp, #8]
 800b926:	9400      	str	r4, [sp, #0]
 800b928:	f7ff ff38 	bl	800b79c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b92c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b92e:	f7ff fe77 	bl	800b620 <prvAddNewTaskToReadyList>
		return xReturn;
 800b932:	9804      	ldr	r0, [sp, #16]
	}
 800b934:	b006      	add	sp, #24
 800b936:	bd70      	pop	{r4, r5, r6, pc}

0800b938 <xTaskCreate>:
	{
 800b938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b93a:	46ce      	mov	lr, r9
 800b93c:	4647      	mov	r7, r8
 800b93e:	b580      	push	{r7, lr}
 800b940:	0007      	movs	r7, r0
 800b942:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b944:	0090      	lsls	r0, r2, #2
	{
 800b946:	4688      	mov	r8, r1
 800b948:	0015      	movs	r5, r2
 800b94a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b94c:	f000 fe38 	bl	800c5c0 <pvPortMalloc>
 800b950:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 800b952:	d01c      	beq.n	800b98e <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b954:	20a8      	movs	r0, #168	; 0xa8
 800b956:	f000 fe33 	bl	800c5c0 <pvPortMalloc>
 800b95a:	1e06      	subs	r6, r0, #0
				if( pxNewTCB != NULL )
 800b95c:	d01a      	beq.n	800b994 <xTaskCreate+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b95e:	23a5      	movs	r3, #165	; 0xa5
 800b960:	2200      	movs	r2, #0
					pxNewTCB->pxStack = pxStack;
 800b962:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b964:	54c2      	strb	r2, [r0, r3]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b968:	002a      	movs	r2, r5
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b96e:	4641      	mov	r1, r8
 800b970:	9002      	str	r0, [sp, #8]
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	0038      	movs	r0, r7
 800b976:	464b      	mov	r3, r9
 800b978:	f7ff ff10 	bl	800b79c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b97c:	0030      	movs	r0, r6
 800b97e:	f7ff fe4f 	bl	800b620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b982:	2001      	movs	r0, #1
	}
 800b984:	b005      	add	sp, #20
 800b986:	bcc0      	pop	{r6, r7}
 800b988:	46b9      	mov	r9, r7
 800b98a:	46b0      	mov	r8, r6
 800b98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b98e:	2001      	movs	r0, #1
 800b990:	4240      	negs	r0, r0
		return xReturn;
 800b992:	e7f7      	b.n	800b984 <xTaskCreate+0x4c>
					vPortFree( pxStack );
 800b994:	0020      	movs	r0, r4
 800b996:	f000 fea7 	bl	800c6e8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b99a:	2001      	movs	r0, #1
 800b99c:	4240      	negs	r0, r0
 800b99e:	e7f1      	b.n	800b984 <xTaskCreate+0x4c>

0800b9a0 <vTaskStartScheduler>:
{
 800b9a0:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9a2:	2400      	movs	r4, #0
{
 800b9a4:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9a6:	aa07      	add	r2, sp, #28
 800b9a8:	a906      	add	r1, sp, #24
 800b9aa:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9ac:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9ae:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9b0:	f7ff fade 	bl	800af70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9b4:	9b05      	ldr	r3, [sp, #20]
 800b9b6:	9a07      	ldr	r2, [sp, #28]
 800b9b8:	9302      	str	r3, [sp, #8]
 800b9ba:	9b06      	ldr	r3, [sp, #24]
 800b9bc:	4911      	ldr	r1, [pc, #68]	; (800ba04 <vTaskStartScheduler+0x64>)
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	4811      	ldr	r0, [pc, #68]	; (800ba08 <vTaskStartScheduler+0x68>)
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	9400      	str	r4, [sp, #0]
 800b9c6:	f7ff ff8f 	bl	800b8e8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d013      	beq.n	800b9f6 <vTaskStartScheduler+0x56>
			xReturn = xTimerCreateTimerTask();
 800b9ce:	f000 fb17 	bl	800c000 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800b9d2:	2801      	cmp	r0, #1
 800b9d4:	d111      	bne.n	800b9fa <vTaskStartScheduler+0x5a>
		portDISABLE_INTERRUPTS();
 800b9d6:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <vTaskStartScheduler+0x6c>)
 800b9da:	4a0d      	ldr	r2, [pc, #52]	; (800ba10 <vTaskStartScheduler+0x70>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3354      	adds	r3, #84	; 0x54
 800b9e0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <vTaskStartScheduler+0x74>)
 800b9e6:	4252      	negs	r2, r2
 800b9e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ba18 <vTaskStartScheduler+0x78>)
 800b9ec:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9ee:	4b0b      	ldr	r3, [pc, #44]	; (800ba1c <vTaskStartScheduler+0x7c>)
 800b9f0:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800b9f2:	f000 fd93 	bl	800c51c <xPortStartScheduler>
}
 800b9f6:	b008      	add	sp, #32
 800b9f8:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	d1fb      	bne.n	800b9f6 <vTaskStartScheduler+0x56>
 800b9fe:	b672      	cpsid	i
 800ba00:	e7fe      	b.n	800ba00 <vTaskStartScheduler+0x60>
 800ba02:	46c0      	nop			; (mov r8, r8)
 800ba04:	08013530 	.word	0x08013530
 800ba08:	0800b859 	.word	0x0800b859
 800ba0c:	200052c4 	.word	0x200052c4
 800ba10:	200002b8 	.word	0x200002b8
 800ba14:	2000576c 	.word	0x2000576c
 800ba18:	2000578c 	.word	0x2000578c
 800ba1c:	200057b8 	.word	0x200057b8

0800ba20 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ba20:	4a02      	ldr	r2, [pc, #8]	; (800ba2c <vTaskSuspendAll+0xc>)
 800ba22:	6813      	ldr	r3, [r2, #0]
 800ba24:	3301      	adds	r3, #1
 800ba26:	6013      	str	r3, [r2, #0]
}
 800ba28:	4770      	bx	lr
 800ba2a:	46c0      	nop			; (mov r8, r8)
 800ba2c:	20005738 	.word	0x20005738

0800ba30 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ba30:	4b01      	ldr	r3, [pc, #4]	; (800ba38 <xTaskGetTickCount+0x8>)
 800ba32:	6818      	ldr	r0, [r3, #0]
}
 800ba34:	4770      	bx	lr
 800ba36:	46c0      	nop			; (mov r8, r8)
 800ba38:	200057b8 	.word	0x200057b8

0800ba3c <xTaskIncrementTick>:
{
 800ba3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba3e:	46de      	mov	lr, fp
 800ba40:	4657      	mov	r7, sl
 800ba42:	464e      	mov	r6, r9
 800ba44:	4645      	mov	r5, r8
 800ba46:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba48:	4b51      	ldr	r3, [pc, #324]	; (800bb90 <xTaskIncrementTick+0x154>)
{
 800ba4a:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d148      	bne.n	800bae4 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba52:	4b50      	ldr	r3, [pc, #320]	; (800bb94 <xTaskIncrementTick+0x158>)
 800ba54:	681d      	ldr	r5, [r3, #0]
 800ba56:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800ba58:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba5a:	2d00      	cmp	r5, #0
 800ba5c:	d050      	beq.n	800bb00 <xTaskIncrementTick+0xc4>
 800ba5e:	4b4e      	ldr	r3, [pc, #312]	; (800bb98 <xTaskIncrementTick+0x15c>)
 800ba60:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba62:	9b01      	ldr	r3, [sp, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	429d      	cmp	r5, r3
 800ba68:	d351      	bcc.n	800bb0e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba6a:	4f4c      	ldr	r7, [pc, #304]	; (800bb9c <xTaskIncrementTick+0x160>)
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d100      	bne.n	800ba76 <xTaskIncrementTick+0x3a>
 800ba74:	e078      	b.n	800bb68 <xTaskIncrementTick+0x12c>
BaseType_t xSwitchRequired = pdFALSE;
 800ba76:	2300      	movs	r3, #0
 800ba78:	4698      	mov	r8, r3
 800ba7a:	4b49      	ldr	r3, [pc, #292]	; (800bba0 <xTaskIncrementTick+0x164>)
 800ba7c:	469a      	mov	sl, r3
 800ba7e:	4b49      	ldr	r3, [pc, #292]	; (800bba4 <xTaskIncrementTick+0x168>)
 800ba80:	469b      	mov	fp, r3
					prvAddTaskToReadyList( pxTCB );
 800ba82:	4b49      	ldr	r3, [pc, #292]	; (800bba8 <xTaskIncrementTick+0x16c>)
 800ba84:	4699      	mov	r9, r3
 800ba86:	e024      	b.n	800bad2 <xTaskIncrementTick+0x96>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba88:	1d26      	adds	r6, r4, #4
 800ba8a:	0030      	movs	r0, r6
 800ba8c:	f7ff fabc 	bl	800b008 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <xTaskIncrementTick+0x62>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba96:	0020      	movs	r0, r4
 800ba98:	3018      	adds	r0, #24
 800ba9a:	f7ff fab5 	bl	800b008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba9e:	464a      	mov	r2, r9
 800baa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800baa2:	6812      	ldr	r2, [r2, #0]
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d901      	bls.n	800baac <xTaskIncrementTick+0x70>
 800baa8:	464a      	mov	r2, r9
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	0098      	lsls	r0, r3, #2
 800baae:	18c0      	adds	r0, r0, r3
 800bab0:	0080      	lsls	r0, r0, #2
 800bab2:	0031      	movs	r1, r6
 800bab4:	4450      	add	r0, sl
 800bab6:	f7ff fa83 	bl	800afc0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baba:	465b      	mov	r3, fp
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d301      	bcc.n	800baca <xTaskIncrementTick+0x8e>
							xSwitchRequired = pdTRUE;
 800bac6:	2301      	movs	r3, #1
 800bac8:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d050      	beq.n	800bb74 <xTaskIncrementTick+0x138>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bad8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800bada:	429d      	cmp	r5, r3
 800badc:	d2d4      	bcs.n	800ba88 <xTaskIncrementTick+0x4c>
						xNextTaskUnblockTime = xItemValue;
 800bade:	9a01      	ldr	r2, [sp, #4]
 800bae0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bae2:	e01a      	b.n	800bb1a <xTaskIncrementTick+0xde>
		++xPendedTicks;
 800bae4:	4a31      	ldr	r2, [pc, #196]	; (800bbac <xTaskIncrementTick+0x170>)
 800bae6:	6813      	ldr	r3, [r2, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800baec:	2300      	movs	r3, #0
 800baee:	4698      	mov	r8, r3
}
 800baf0:	4640      	mov	r0, r8
 800baf2:	b003      	add	sp, #12
 800baf4:	bcf0      	pop	{r4, r5, r6, r7}
 800baf6:	46bb      	mov	fp, r7
 800baf8:	46b2      	mov	sl, r6
 800bafa:	46a9      	mov	r9, r5
 800bafc:	46a0      	mov	r8, r4
 800bafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			taskSWITCH_DELAYED_LISTS();
 800bb00:	4b26      	ldr	r3, [pc, #152]	; (800bb9c <xTaskIncrementTick+0x160>)
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	6812      	ldr	r2, [r2, #0]
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	d01a      	beq.n	800bb40 <xTaskIncrementTick+0x104>
 800bb0a:	b672      	cpsid	i
 800bb0c:	e7fe      	b.n	800bb0c <xTaskIncrementTick+0xd0>
BaseType_t xSwitchRequired = pdFALSE;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	4698      	mov	r8, r3
 800bb12:	4b23      	ldr	r3, [pc, #140]	; (800bba0 <xTaskIncrementTick+0x164>)
 800bb14:	469a      	mov	sl, r3
 800bb16:	4b23      	ldr	r3, [pc, #140]	; (800bba4 <xTaskIncrementTick+0x168>)
 800bb18:	469b      	mov	fp, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb1a:	465b      	mov	r3, fp
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	0093      	lsls	r3, r2, #2
 800bb22:	189b      	adds	r3, r3, r2
 800bb24:	4652      	mov	r2, sl
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	58d3      	ldr	r3, [r2, r3]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d901      	bls.n	800bb32 <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4698      	mov	r8, r3
			if( xYieldPending != pdFALSE )
 800bb32:	4b1f      	ldr	r3, [pc, #124]	; (800bbb0 <xTaskIncrementTick+0x174>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0da      	beq.n	800baf0 <xTaskIncrementTick+0xb4>
				xSwitchRequired = pdTRUE;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4698      	mov	r8, r3
 800bb3e:	e7d7      	b.n	800baf0 <xTaskIncrementTick+0xb4>
			taskSWITCH_DELAYED_LISTS();
 800bb40:	4a1c      	ldr	r2, [pc, #112]	; (800bbb4 <xTaskIncrementTick+0x178>)
 800bb42:	6819      	ldr	r1, [r3, #0]
 800bb44:	6810      	ldr	r0, [r2, #0]
 800bb46:	6018      	str	r0, [r3, #0]
 800bb48:	6011      	str	r1, [r2, #0]
 800bb4a:	491b      	ldr	r1, [pc, #108]	; (800bbb8 <xTaskIncrementTick+0x17c>)
 800bb4c:	680a      	ldr	r2, [r1, #0]
 800bb4e:	3201      	adds	r2, #1
 800bb50:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	6812      	ldr	r2, [r2, #0]
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	d111      	bne.n	800bb7e <xTaskIncrementTick+0x142>
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <xTaskIncrementTick+0x15c>)
 800bb5c:	001a      	movs	r2, r3
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	2301      	movs	r3, #1
 800bb62:	425b      	negs	r3, r3
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	e77c      	b.n	800ba62 <xTaskIncrementTick+0x26>
BaseType_t xSwitchRequired = pdFALSE;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	4698      	mov	r8, r3
 800bb6c:	4b0c      	ldr	r3, [pc, #48]	; (800bba0 <xTaskIncrementTick+0x164>)
 800bb6e:	469a      	mov	sl, r3
 800bb70:	4b0c      	ldr	r3, [pc, #48]	; (800bba4 <xTaskIncrementTick+0x168>)
 800bb72:	469b      	mov	fp, r3
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb74:	2301      	movs	r3, #1
 800bb76:	9a01      	ldr	r2, [sp, #4]
 800bb78:	425b      	negs	r3, r3
 800bb7a:	6013      	str	r3, [r2, #0]
					break;
 800bb7c:	e7cd      	b.n	800bb1a <xTaskIncrementTick+0xde>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb7e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb80:	4a05      	ldr	r2, [pc, #20]	; (800bb98 <xTaskIncrementTick+0x15c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb82:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb84:	9201      	str	r2, [sp, #4]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	6013      	str	r3, [r2, #0]
}
 800bb8c:	e769      	b.n	800ba62 <xTaskIncrementTick+0x26>
 800bb8e:	46c0      	nop			; (mov r8, r8)
 800bb90:	20005738 	.word	0x20005738
 800bb94:	200057b8 	.word	0x200057b8
 800bb98:	2000576c 	.word	0x2000576c
 800bb9c:	200052c8 	.word	0x200052c8
 800bba0:	200052d0 	.word	0x200052d0
 800bba4:	200052c4 	.word	0x200052c4
 800bba8:	20005740 	.word	0x20005740
 800bbac:	20005774 	.word	0x20005774
 800bbb0:	200057bc 	.word	0x200057bc
 800bbb4:	200052cc 	.word	0x200052cc
 800bbb8:	20005770 	.word	0x20005770

0800bbbc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	46de      	mov	lr, fp
 800bbc0:	4657      	mov	r7, sl
 800bbc2:	464e      	mov	r6, r9
 800bbc4:	4645      	mov	r5, r8
 800bbc6:	b5e0      	push	{r5, r6, r7, lr}
	taskENTER_CRITICAL();
 800bbc8:	f000 fc32 	bl	800c430 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bbcc:	4b36      	ldr	r3, [pc, #216]	; (800bca8 <xTaskResumeAll.part.0+0xec>)
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	3a01      	subs	r2, #1
 800bbd2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d154      	bne.n	800bc84 <xTaskResumeAll.part.0+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bbda:	4b34      	ldr	r3, [pc, #208]	; (800bcac <xTaskResumeAll.part.0+0xf0>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d050      	beq.n	800bc84 <xTaskResumeAll.part.0+0xc8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbe2:	4e33      	ldr	r6, [pc, #204]	; (800bcb0 <xTaskResumeAll.part.0+0xf4>)
 800bbe4:	6833      	ldr	r3, [r6, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d05a      	beq.n	800bca0 <xTaskResumeAll.part.0+0xe4>
 800bbea:	4b32      	ldr	r3, [pc, #200]	; (800bcb4 <xTaskResumeAll.part.0+0xf8>)
 800bbec:	4f32      	ldr	r7, [pc, #200]	; (800bcb8 <xTaskResumeAll.part.0+0xfc>)
 800bbee:	4699      	mov	r9, r3
 800bbf0:	4b32      	ldr	r3, [pc, #200]	; (800bcbc <xTaskResumeAll.part.0+0x100>)
 800bbf2:	4698      	mov	r8, r3
 800bbf4:	4b32      	ldr	r3, [pc, #200]	; (800bcc0 <xTaskResumeAll.part.0+0x104>)
 800bbf6:	469a      	mov	sl, r3
						xYieldPending = pdTRUE;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	469b      	mov	fp, r3
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbfc:	68f3      	ldr	r3, [r6, #12]
 800bbfe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc00:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc02:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc04:	3018      	adds	r0, #24
 800bc06:	f7ff f9ff 	bl	800b008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc0a:	0028      	movs	r0, r5
 800bc0c:	f7ff f9fc 	bl	800b008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d900      	bls.n	800bc1a <xTaskResumeAll.part.0+0x5e>
 800bc18:	603b      	str	r3, [r7, #0]
 800bc1a:	0098      	lsls	r0, r3, #2
 800bc1c:	18c0      	adds	r0, r0, r3
 800bc1e:	0080      	lsls	r0, r0, #2
 800bc20:	0029      	movs	r1, r5
 800bc22:	4448      	add	r0, r9
 800bc24:	f7ff f9cc 	bl	800afc0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc28:	4643      	mov	r3, r8
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d302      	bcc.n	800bc3a <xTaskResumeAll.part.0+0x7e>
						xYieldPending = pdTRUE;
 800bc34:	4653      	mov	r3, sl
 800bc36:	465a      	mov	r2, fp
 800bc38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc3a:	6833      	ldr	r3, [r6, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1dd      	bne.n	800bbfc <xTaskResumeAll.part.0+0x40>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc40:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <xTaskResumeAll.part.0+0x108>)
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	d026      	beq.n	800bc98 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	4b1d      	ldr	r3, [pc, #116]	; (800bcc8 <xTaskResumeAll.part.0+0x10c>)
 800bc54:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc56:	4e1d      	ldr	r6, [pc, #116]	; (800bccc <xTaskResumeAll.part.0+0x110>)
 800bc58:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800bc5a:	2c00      	cmp	r4, #0
 800bc5c:	d00a      	beq.n	800bc74 <xTaskResumeAll.part.0+0xb8>
								xYieldPending = pdTRUE;
 800bc5e:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800bc60:	f7ff feec 	bl	800ba3c <xTaskIncrementTick>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d001      	beq.n	800bc6c <xTaskResumeAll.part.0+0xb0>
								xYieldPending = pdTRUE;
 800bc68:	4653      	mov	r3, sl
 800bc6a:	601d      	str	r5, [r3, #0]
							--xPendedCounts;
 800bc6c:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	d1f6      	bne.n	800bc60 <xTaskResumeAll.part.0+0xa4>
						xPendedTicks = 0;
 800bc72:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800bc74:	4653      	mov	r3, sl
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <xTaskResumeAll.part.0+0xc8>
					taskYIELD_IF_USING_PREEMPTION();
 800bc7c:	f000 fbcc 	bl	800c418 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800bc80:	2401      	movs	r4, #1
 800bc82:	e000      	b.n	800bc86 <xTaskResumeAll.part.0+0xca>
BaseType_t xAlreadyYielded = pdFALSE;
 800bc84:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bc86:	f000 fbdf 	bl	800c448 <vPortExitCritical>
}
 800bc8a:	0020      	movs	r0, r4
 800bc8c:	bcf0      	pop	{r4, r5, r6, r7}
 800bc8e:	46bb      	mov	fp, r7
 800bc90:	46b2      	mov	sl, r6
 800bc92:	46a9      	mov	r9, r5
 800bc94:	46a0      	mov	r8, r4
 800bc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc98:	4b0b      	ldr	r3, [pc, #44]	; (800bcc8 <xTaskResumeAll.part.0+0x10c>)
 800bc9a:	3a01      	subs	r2, #1
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e7da      	b.n	800bc56 <xTaskResumeAll.part.0+0x9a>
 800bca0:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <xTaskResumeAll.part.0+0x104>)
 800bca2:	469a      	mov	sl, r3
 800bca4:	e7d7      	b.n	800bc56 <xTaskResumeAll.part.0+0x9a>
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	20005738 	.word	0x20005738
 800bcac:	20005730 	.word	0x20005730
 800bcb0:	20005778 	.word	0x20005778
 800bcb4:	200052d0 	.word	0x200052d0
 800bcb8:	20005740 	.word	0x20005740
 800bcbc:	200052c4 	.word	0x200052c4
 800bcc0:	200057bc 	.word	0x200057bc
 800bcc4:	200052c8 	.word	0x200052c8
 800bcc8:	2000576c 	.word	0x2000576c
 800bccc:	20005774 	.word	0x20005774

0800bcd0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800bcd0:	4b04      	ldr	r3, [pc, #16]	; (800bce4 <xTaskResumeAll+0x14>)
{
 800bcd2:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <xTaskResumeAll+0xe>
 800bcda:	b672      	cpsid	i
 800bcdc:	e7fe      	b.n	800bcdc <xTaskResumeAll+0xc>
 800bcde:	f7ff ff6d 	bl	800bbbc <xTaskResumeAll.part.0>
}
 800bce2:	bd10      	pop	{r4, pc}
 800bce4:	20005738 	.word	0x20005738

0800bce8 <vTaskDelay>:
	{
 800bce8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d014      	beq.n	800bd18 <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 800bcee:	4c0c      	ldr	r4, [pc, #48]	; (800bd20 <vTaskDelay+0x38>)
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <vTaskDelay+0x12>
 800bcf6:	b672      	cpsid	i
 800bcf8:	e7fe      	b.n	800bcf8 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bd00:	2100      	movs	r1, #0
 800bd02:	f7ff fd13 	bl	800b72c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <vTaskDelay+0x28>
 800bd0c:	b672      	cpsid	i
 800bd0e:	e7fe      	b.n	800bd0e <vTaskDelay+0x26>
 800bd10:	f7ff ff54 	bl	800bbbc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d101      	bne.n	800bd1c <vTaskDelay+0x34>
			portYIELD_WITHIN_API();
 800bd18:	f000 fb7e 	bl	800c418 <vPortYield>
	}
 800bd1c:	bd10      	pop	{r4, pc}
 800bd1e:	46c0      	nop			; (mov r8, r8)
 800bd20:	20005738 	.word	0x20005738

0800bd24 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd24:	4b17      	ldr	r3, [pc, #92]	; (800bd84 <vTaskSwitchContext+0x60>)
{
 800bd26:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d003      	beq.n	800bd36 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800bd2e:	2201      	movs	r2, #1
 800bd30:	4b15      	ldr	r3, [pc, #84]	; (800bd88 <vTaskSwitchContext+0x64>)
 800bd32:	601a      	str	r2, [r3, #0]
}
 800bd34:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
 800bd36:	4a14      	ldr	r2, [pc, #80]	; (800bd88 <vTaskSwitchContext+0x64>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd38:	4c14      	ldr	r4, [pc, #80]	; (800bd8c <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 800bd3a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	4814      	ldr	r0, [pc, #80]	; (800bd90 <vTaskSwitchContext+0x6c>)
 800bd40:	e002      	b.n	800bd48 <vTaskSwitchContext+0x24>
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d019      	beq.n	800bd7a <vTaskSwitchContext+0x56>
 800bd46:	3b01      	subs	r3, #1
 800bd48:	0099      	lsls	r1, r3, #2
 800bd4a:	18ca      	adds	r2, r1, r3
 800bd4c:	0092      	lsls	r2, r2, #2
 800bd4e:	5882      	ldr	r2, [r0, r2]
 800bd50:	2a00      	cmp	r2, #0
 800bd52:	d0f6      	beq.n	800bd42 <vTaskSwitchContext+0x1e>
 800bd54:	18c9      	adds	r1, r1, r3
 800bd56:	0089      	lsls	r1, r1, #2
 800bd58:	1845      	adds	r5, r0, r1
 800bd5a:	686a      	ldr	r2, [r5, #4]
 800bd5c:	3108      	adds	r1, #8
 800bd5e:	6852      	ldr	r2, [r2, #4]
 800bd60:	1840      	adds	r0, r0, r1
 800bd62:	606a      	str	r2, [r5, #4]
 800bd64:	4282      	cmp	r2, r0
 800bd66:	d00a      	beq.n	800bd7e <vTaskSwitchContext+0x5a>
 800bd68:	68d1      	ldr	r1, [r2, #12]
 800bd6a:	4a0a      	ldr	r2, [pc, #40]	; (800bd94 <vTaskSwitchContext+0x70>)
 800bd6c:	6011      	str	r1, [r2, #0]
 800bd6e:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd70:	6813      	ldr	r3, [r2, #0]
 800bd72:	4a09      	ldr	r2, [pc, #36]	; (800bd98 <vTaskSwitchContext+0x74>)
 800bd74:	3354      	adds	r3, #84	; 0x54
 800bd76:	6013      	str	r3, [r2, #0]
}
 800bd78:	e7dc      	b.n	800bd34 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7a:	b672      	cpsid	i
 800bd7c:	e7fe      	b.n	800bd7c <vTaskSwitchContext+0x58>
 800bd7e:	6852      	ldr	r2, [r2, #4]
 800bd80:	606a      	str	r2, [r5, #4]
 800bd82:	e7f1      	b.n	800bd68 <vTaskSwitchContext+0x44>
 800bd84:	20005738 	.word	0x20005738
 800bd88:	200057bc 	.word	0x200057bc
 800bd8c:	20005740 	.word	0x20005740
 800bd90:	200052d0 	.word	0x200052d0
 800bd94:	200052c4 	.word	0x200052c4
 800bd98:	200002b8 	.word	0x200002b8

0800bd9c <vTaskPlaceOnEventList>:
{
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d009      	beq.n	800bdb8 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bda4:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <vTaskPlaceOnEventList+0x20>)
 800bda6:	6819      	ldr	r1, [r3, #0]
 800bda8:	3118      	adds	r1, #24
 800bdaa:	f7ff f915 	bl	800afd8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdae:	2101      	movs	r1, #1
 800bdb0:	0020      	movs	r0, r4
 800bdb2:	f7ff fcbb 	bl	800b72c <prvAddCurrentTaskToDelayedList>
}
 800bdb6:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 800bdb8:	b672      	cpsid	i
 800bdba:	e7fe      	b.n	800bdba <vTaskPlaceOnEventList+0x1e>
 800bdbc:	200052c4 	.word	0x200052c4

0800bdc0 <vTaskPlaceOnEventListRestricted>:
	{
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	000d      	movs	r5, r1
 800bdc4:	0014      	movs	r4, r2
		configASSERT( pxEventList );
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d00d      	beq.n	800bde6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdca:	4b08      	ldr	r3, [pc, #32]	; (800bdec <vTaskPlaceOnEventListRestricted+0x2c>)
 800bdcc:	6819      	ldr	r1, [r3, #0]
 800bdce:	3118      	adds	r1, #24
 800bdd0:	f7ff f8f6 	bl	800afc0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800bdd4:	2c00      	cmp	r4, #0
 800bdd6:	d001      	beq.n	800bddc <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
 800bdd8:	2501      	movs	r5, #1
 800bdda:	426d      	negs	r5, r5
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bddc:	0028      	movs	r0, r5
 800bdde:	0021      	movs	r1, r4
 800bde0:	f7ff fca4 	bl	800b72c <prvAddCurrentTaskToDelayedList>
	}
 800bde4:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800bde6:	b672      	cpsid	i
 800bde8:	e7fe      	b.n	800bde8 <vTaskPlaceOnEventListRestricted+0x28>
 800bdea:	46c0      	nop			; (mov r8, r8)
 800bdec:	200052c4 	.word	0x200052c4

0800bdf0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf0:	68c3      	ldr	r3, [r0, #12]
{
 800bdf2:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800bdf6:	2c00      	cmp	r4, #0
 800bdf8:	d02b      	beq.n	800be52 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdfa:	0025      	movs	r5, r4
 800bdfc:	3518      	adds	r5, #24
 800bdfe:	0028      	movs	r0, r5
 800be00:	f7ff f902 	bl	800b008 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be04:	4b14      	ldr	r3, [pc, #80]	; (800be58 <xTaskRemoveFromEventList+0x68>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00f      	beq.n	800be2c <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be0c:	0029      	movs	r1, r5
 800be0e:	4813      	ldr	r0, [pc, #76]	; (800be5c <xTaskRemoveFromEventList+0x6c>)
 800be10:	f7ff f8d6 	bl	800afc0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be14:	4b12      	ldr	r3, [pc, #72]	; (800be60 <xTaskRemoveFromEventList+0x70>)
 800be16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800be18:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 800be1a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1e:	429a      	cmp	r2, r3
 800be20:	d903      	bls.n	800be2a <xTaskRemoveFromEventList+0x3a>
		xYieldPending = pdTRUE;
 800be22:	2201      	movs	r2, #1
 800be24:	4b0f      	ldr	r3, [pc, #60]	; (800be64 <xTaskRemoveFromEventList+0x74>)
		xReturn = pdTRUE;
 800be26:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800be28:	601a      	str	r2, [r3, #0]
}
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be2c:	1d25      	adds	r5, r4, #4
 800be2e:	0028      	movs	r0, r5
 800be30:	f7ff f8ea 	bl	800b008 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be34:	4a0c      	ldr	r2, [pc, #48]	; (800be68 <xTaskRemoveFromEventList+0x78>)
 800be36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be38:	6811      	ldr	r1, [r2, #0]
 800be3a:	428b      	cmp	r3, r1
 800be3c:	d900      	bls.n	800be40 <xTaskRemoveFromEventList+0x50>
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	0098      	lsls	r0, r3, #2
 800be42:	18c0      	adds	r0, r0, r3
 800be44:	4b09      	ldr	r3, [pc, #36]	; (800be6c <xTaskRemoveFromEventList+0x7c>)
 800be46:	0080      	lsls	r0, r0, #2
 800be48:	0029      	movs	r1, r5
 800be4a:	18c0      	adds	r0, r0, r3
 800be4c:	f7ff f8b8 	bl	800afc0 <vListInsertEnd>
 800be50:	e7e0      	b.n	800be14 <xTaskRemoveFromEventList+0x24>
	configASSERT( pxUnblockedTCB );
 800be52:	b672      	cpsid	i
 800be54:	e7fe      	b.n	800be54 <xTaskRemoveFromEventList+0x64>
 800be56:	46c0      	nop			; (mov r8, r8)
 800be58:	20005738 	.word	0x20005738
 800be5c:	20005778 	.word	0x20005778
 800be60:	200052c4 	.word	0x200052c4
 800be64:	200057bc 	.word	0x200057bc
 800be68:	20005740 	.word	0x20005740
 800be6c:	200052d0 	.word	0x200052d0

0800be70 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be70:	4b03      	ldr	r3, [pc, #12]	; (800be80 <vTaskInternalSetTimeOutState+0x10>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be76:	4b03      	ldr	r3, [pc, #12]	; (800be84 <vTaskInternalSetTimeOutState+0x14>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6043      	str	r3, [r0, #4]
}
 800be7c:	4770      	bx	lr
 800be7e:	46c0      	nop			; (mov r8, r8)
 800be80:	20005770 	.word	0x20005770
 800be84:	200057b8 	.word	0x200057b8

0800be88 <xTaskCheckForTimeOut>:
{
 800be88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be8a:	46c6      	mov	lr, r8
 800be8c:	0004      	movs	r4, r0
 800be8e:	000d      	movs	r5, r1
 800be90:	b500      	push	{lr}
	configASSERT( pxTimeOut );
 800be92:	2800      	cmp	r0, #0
 800be94:	d025      	beq.n	800bee2 <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 800be96:	2900      	cmp	r1, #0
 800be98:	d021      	beq.n	800bede <xTaskCheckForTimeOut+0x56>
	taskENTER_CRITICAL();
 800be9a:	f000 fac9 	bl	800c430 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800be9e:	4a15      	ldr	r2, [pc, #84]	; (800bef4 <xTaskCheckForTimeOut+0x6c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800bea0:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800bea2:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800bea4:	1c58      	adds	r0, r3, #1
 800bea6:	d01e      	beq.n	800bee6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bea8:	4f13      	ldr	r7, [pc, #76]	; (800bef8 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800beaa:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beac:	683e      	ldr	r6, [r7, #0]
 800beae:	46b0      	mov	r8, r6
 800beb0:	6826      	ldr	r6, [r4, #0]
 800beb2:	4546      	cmp	r6, r8
 800beb4:	d002      	beq.n	800bebc <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 800beb6:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beb8:	4288      	cmp	r0, r1
 800beba:	d90a      	bls.n	800bed2 <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bebc:	1a0e      	subs	r6, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bebe:	42b3      	cmp	r3, r6
 800bec0:	d913      	bls.n	800beea <xTaskCheckForTimeOut+0x62>
			xReturn = pdFALSE;
 800bec2:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 800bec4:	1a5b      	subs	r3, r3, r1
 800bec6:	181b      	adds	r3, r3, r0
 800bec8:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bece:	6813      	ldr	r3, [r2, #0]
 800bed0:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800bed2:	f000 fab9 	bl	800c448 <vPortExitCritical>
}
 800bed6:	0030      	movs	r0, r6
 800bed8:	bc80      	pop	{r7}
 800beda:	46b8      	mov	r8, r7
 800bedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800bede:	b672      	cpsid	i
 800bee0:	e7fe      	b.n	800bee0 <xTaskCheckForTimeOut+0x58>
	configASSERT( pxTimeOut );
 800bee2:	b672      	cpsid	i
 800bee4:	e7fe      	b.n	800bee4 <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
 800bee6:	2600      	movs	r6, #0
 800bee8:	e7f3      	b.n	800bed2 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
 800beea:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800beec:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800beee:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800bef0:	e7ef      	b.n	800bed2 <xTaskCheckForTimeOut+0x4a>
 800bef2:	46c0      	nop			; (mov r8, r8)
 800bef4:	200057b8 	.word	0x200057b8
 800bef8:	20005770 	.word	0x20005770

0800befc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800befc:	2201      	movs	r2, #1
 800befe:	4b01      	ldr	r3, [pc, #4]	; (800bf04 <vTaskMissedYield+0x8>)
 800bf00:	601a      	str	r2, [r3, #0]
}
 800bf02:	4770      	bx	lr
 800bf04:	200057bc 	.word	0x200057bc

0800bf08 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf0a:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d004      	beq.n	800bf1c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf12:	4b04      	ldr	r3, [pc, #16]	; (800bf24 <xTaskGetSchedulerState+0x1c>)
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	4243      	negs	r3, r0
 800bf18:	4158      	adcs	r0, r3
 800bf1a:	0040      	lsls	r0, r0, #1
	}
 800bf1c:	4770      	bx	lr
 800bf1e:	46c0      	nop			; (mov r8, r8)
 800bf20:	2000578c 	.word	0x2000578c
 800bf24:	20005738 	.word	0x20005738

0800bf28 <xTaskPriorityDisinherit>:
	{
 800bf28:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d010      	beq.n	800bf50 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB == pxCurrentTCB );
 800bf2e:	4b16      	ldr	r3, [pc, #88]	; (800bf88 <xTaskPriorityDisinherit+0x60>)
 800bf30:	681c      	ldr	r4, [r3, #0]
 800bf32:	4284      	cmp	r4, r0
 800bf34:	d001      	beq.n	800bf3a <xTaskPriorityDisinherit+0x12>
 800bf36:	b672      	cpsid	i
 800bf38:	e7fe      	b.n	800bf38 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d009      	beq.n	800bf54 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf42:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800bf44:	3b01      	subs	r3, #1
 800bf46:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf48:	4291      	cmp	r1, r2
 800bf4a:	d001      	beq.n	800bf50 <xTaskPriorityDisinherit+0x28>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 800bf50:	2000      	movs	r0, #0
	}
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800bf54:	b672      	cpsid	i
 800bf56:	e7fe      	b.n	800bf56 <xTaskPriorityDisinherit+0x2e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf58:	1d25      	adds	r5, r4, #4
 800bf5a:	0028      	movs	r0, r5
 800bf5c:	f7ff f854 	bl	800b008 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf60:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf64:	1ad2      	subs	r2, r2, r3
 800bf66:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf68:	4a08      	ldr	r2, [pc, #32]	; (800bf8c <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf6a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800bf6c:	6811      	ldr	r1, [r2, #0]
 800bf6e:	428b      	cmp	r3, r1
 800bf70:	d900      	bls.n	800bf74 <xTaskPriorityDisinherit+0x4c>
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	0098      	lsls	r0, r3, #2
 800bf76:	18c0      	adds	r0, r0, r3
 800bf78:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <xTaskPriorityDisinherit+0x68>)
 800bf7a:	0080      	lsls	r0, r0, #2
 800bf7c:	18c0      	adds	r0, r0, r3
 800bf7e:	0029      	movs	r1, r5
 800bf80:	f7ff f81e 	bl	800afc0 <vListInsertEnd>
					xReturn = pdTRUE;
 800bf84:	2001      	movs	r0, #1
		return xReturn;
 800bf86:	e7e4      	b.n	800bf52 <xTaskPriorityDisinherit+0x2a>
 800bf88:	200052c4 	.word	0x200052c4
 800bf8c:	20005740 	.word	0x20005740
 800bf90:	200052d0 	.word	0x200052d0

0800bf94 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf96:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf98:	f000 fa4a 	bl	800c430 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf9c:	4c10      	ldr	r4, [pc, #64]	; (800bfe0 <prvCheckForValidListAndQueue+0x4c>)
 800bf9e:	6825      	ldr	r5, [r4, #0]
 800bfa0:	2d00      	cmp	r5, #0
 800bfa2:	d003      	beq.n	800bfac <prvCheckForValidListAndQueue+0x18>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfa4:	f000 fa50 	bl	800c448 <vPortExitCritical>
}
 800bfa8:	b003      	add	sp, #12
 800bfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 800bfac:	4f0d      	ldr	r7, [pc, #52]	; (800bfe4 <prvCheckForValidListAndQueue+0x50>)
 800bfae:	0038      	movs	r0, r7
 800bfb0:	f7fe fff6 	bl	800afa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bfb4:	4e0c      	ldr	r6, [pc, #48]	; (800bfe8 <prvCheckForValidListAndQueue+0x54>)
 800bfb6:	0030      	movs	r0, r6
 800bfb8:	f7fe fff2 	bl	800afa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bfbc:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bfbe:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800bfc0:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bfc2:	4b0b      	ldr	r3, [pc, #44]	; (800bff0 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bfc4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800bfc6:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bfc8:	4a0a      	ldr	r2, [pc, #40]	; (800bff4 <prvCheckForValidListAndQueue+0x60>)
 800bfca:	4b0b      	ldr	r3, [pc, #44]	; (800bff8 <prvCheckForValidListAndQueue+0x64>)
 800bfcc:	9500      	str	r5, [sp, #0]
 800bfce:	f7ff f91f 	bl	800b210 <xQueueGenericCreateStatic>
 800bfd2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d0e5      	beq.n	800bfa4 <prvCheckForValidListAndQueue+0x10>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bfd8:	4908      	ldr	r1, [pc, #32]	; (800bffc <prvCheckForValidListAndQueue+0x68>)
 800bfda:	f7ff fae9 	bl	800b5b0 <vQueueAddToRegistry>
 800bfde:	e7e1      	b.n	800bfa4 <prvCheckForValidListAndQueue+0x10>
 800bfe0:	200058e4 	.word	0x200058e4
 800bfe4:	20005868 	.word	0x20005868
 800bfe8:	2000587c 	.word	0x2000587c
 800bfec:	200057c0 	.word	0x200057c0
 800bff0:	200057c4 	.word	0x200057c4
 800bff4:	200057c8 	.word	0x200057c8
 800bff8:	20005894 	.word	0x20005894
 800bffc:	08013538 	.word	0x08013538

0800c000 <xTimerCreateTimerTask>:
{
 800c000:	b500      	push	{lr}
 800c002:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 800c004:	f7ff ffc6 	bl	800bf94 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c008:	4b10      	ldr	r3, [pc, #64]	; (800c04c <xTimerCreateTimerTask+0x4c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d01a      	beq.n	800c046 <xTimerCreateTimerTask+0x46>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c010:	2300      	movs	r3, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c012:	aa07      	add	r2, sp, #28
 800c014:	a906      	add	r1, sp, #24
 800c016:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c018:	9305      	str	r3, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c01a:	9306      	str	r3, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c01c:	f7fe ffb4 	bl	800af88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c020:	9b05      	ldr	r3, [sp, #20]
 800c022:	9a07      	ldr	r2, [sp, #28]
 800c024:	9302      	str	r3, [sp, #8]
 800c026:	9b06      	ldr	r3, [sp, #24]
 800c028:	4909      	ldr	r1, [pc, #36]	; (800c050 <xTimerCreateTimerTask+0x50>)
 800c02a:	9301      	str	r3, [sp, #4]
 800c02c:	2302      	movs	r3, #2
 800c02e:	4809      	ldr	r0, [pc, #36]	; (800c054 <xTimerCreateTimerTask+0x54>)
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	2300      	movs	r3, #0
 800c034:	f7ff fc58 	bl	800b8e8 <xTaskCreateStatic>
 800c038:	4b07      	ldr	r3, [pc, #28]	; (800c058 <xTimerCreateTimerTask+0x58>)
 800c03a:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d002      	beq.n	800c046 <xTimerCreateTimerTask+0x46>
}
 800c040:	2001      	movs	r0, #1
 800c042:	b009      	add	sp, #36	; 0x24
 800c044:	bd00      	pop	{pc}
	configASSERT( xReturn );
 800c046:	b672      	cpsid	i
 800c048:	e7fe      	b.n	800c048 <xTimerCreateTimerTask+0x48>
 800c04a:	46c0      	nop			; (mov r8, r8)
 800c04c:	200058e4 	.word	0x200058e4
 800c050:	08013540 	.word	0x08013540
 800c054:	0800c139 	.word	0x0800c139
 800c058:	200058e8 	.word	0x200058e8

0800c05c <xTimerGenericCommand>:
{
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	001c      	movs	r4, r3
 800c060:	b084      	sub	sp, #16
	configASSERT( xTimer );
 800c062:	2800      	cmp	r0, #0
 800c064:	d016      	beq.n	800c094 <xTimerGenericCommand+0x38>
	if( xTimerQueue != NULL )
 800c066:	4e13      	ldr	r6, [pc, #76]	; (800c0b4 <xTimerGenericCommand+0x58>)
 800c068:	6835      	ldr	r5, [r6, #0]
 800c06a:	2d00      	cmp	r5, #0
 800c06c:	d00f      	beq.n	800c08e <xTimerGenericCommand+0x32>
		xMessage.xMessageID = xCommandID;
 800c06e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c070:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c072:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c074:	2905      	cmp	r1, #5
 800c076:	dc0f      	bgt.n	800c098 <xTimerGenericCommand+0x3c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c078:	f7ff ff46 	bl	800bf08 <xTaskGetSchedulerState>
 800c07c:	2802      	cmp	r0, #2
 800c07e:	d012      	beq.n	800c0a6 <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c080:	2300      	movs	r3, #0
 800c082:	2200      	movs	r2, #0
 800c084:	4669      	mov	r1, sp
 800c086:	6830      	ldr	r0, [r6, #0]
 800c088:	f7ff f900 	bl	800b28c <xQueueGenericSend>
 800c08c:	e000      	b.n	800c090 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 800c08e:	2000      	movs	r0, #0
}
 800c090:	b004      	add	sp, #16
 800c092:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( xTimer );
 800c094:	b672      	cpsid	i
 800c096:	e7fe      	b.n	800c096 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c098:	2300      	movs	r3, #0
 800c09a:	0022      	movs	r2, r4
 800c09c:	4669      	mov	r1, sp
 800c09e:	0028      	movs	r0, r5
 800c0a0:	f7ff f98e 	bl	800b3c0 <xQueueGenericSendFromISR>
 800c0a4:	e7f4      	b.n	800c090 <xTimerGenericCommand+0x34>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	4669      	mov	r1, sp
 800c0aa:	6830      	ldr	r0, [r6, #0]
 800c0ac:	9a08      	ldr	r2, [sp, #32]
 800c0ae:	f7ff f8ed 	bl	800b28c <xQueueGenericSend>
 800c0b2:	e7ed      	b.n	800c090 <xTimerGenericCommand+0x34>
 800c0b4:	200058e4 	.word	0x200058e4

0800c0b8 <prvSwitchTimerLists>:
{
 800c0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ba:	4647      	mov	r7, r8
 800c0bc:	46ce      	mov	lr, r9
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0be:	2328      	movs	r3, #40	; 0x28
{
 800c0c0:	b580      	push	{r7, lr}
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0c2:	4698      	mov	r8, r3
 800c0c4:	2704      	movs	r7, #4
 800c0c6:	4e1a      	ldr	r6, [pc, #104]	; (800c130 <prvSwitchTimerLists+0x78>)
{
 800c0c8:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0ca:	e00e      	b.n	800c0ea <prvSwitchTimerLists+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0cc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ce:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0d0:	681a      	ldr	r2, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0d2:	1d25      	adds	r5, r4, #4
 800c0d4:	0028      	movs	r0, r5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0d6:	4691      	mov	r9, r2
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0d8:	f7fe ff96 	bl	800b008 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0dc:	6a23      	ldr	r3, [r4, #32]
 800c0de:	0020      	movs	r0, r4
 800c0e0:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0e2:	4643      	mov	r3, r8
 800c0e4:	5ce3      	ldrb	r3, [r4, r3]
 800c0e6:	421f      	tst	r7, r3
 800c0e8:	d10c      	bne.n	800c104 <prvSwitchTimerLists+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0ea:	6833      	ldr	r3, [r6, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	2a00      	cmp	r2, #0
 800c0f0:	d1ec      	bne.n	800c0cc <prvSwitchTimerLists+0x14>
	pxCurrentTimerList = pxOverflowTimerList;
 800c0f2:	4a10      	ldr	r2, [pc, #64]	; (800c134 <prvSwitchTimerLists+0x7c>)
 800c0f4:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0f6:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0f8:	6031      	str	r1, [r6, #0]
}
 800c0fa:	b003      	add	sp, #12
 800c0fc:	bcc0      	pop	{r6, r7}
 800c0fe:	46b9      	mov	r9, r7
 800c100:	46b0      	mov	r8, r6
 800c102:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c104:	69a3      	ldr	r3, [r4, #24]
 800c106:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800c108:	4599      	cmp	r9, r3
 800c10a:	d206      	bcs.n	800c11a <prvSwitchTimerLists+0x62>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c10c:	0029      	movs	r1, r5
 800c10e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c110:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c112:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c114:	f7fe ff60 	bl	800afd8 <vListInsert>
 800c118:	e7e7      	b.n	800c0ea <prvSwitchTimerLists+0x32>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c11a:	2300      	movs	r3, #0
 800c11c:	464a      	mov	r2, r9
 800c11e:	2100      	movs	r1, #0
 800c120:	0020      	movs	r0, r4
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	f7ff ff9a 	bl	800c05c <xTimerGenericCommand>
				configASSERT( xResult );
 800c128:	2800      	cmp	r0, #0
 800c12a:	d1de      	bne.n	800c0ea <prvSwitchTimerLists+0x32>
 800c12c:	b672      	cpsid	i
 800c12e:	e7fe      	b.n	800c12e <prvSwitchTimerLists+0x76>
 800c130:	200057c0 	.word	0x200057c0
 800c134:	200057c4 	.word	0x200057c4

0800c138 <prvTimerTask>:
{
 800c138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c13a:	4645      	mov	r5, r8
 800c13c:	4657      	mov	r7, sl
 800c13e:	464e      	mov	r6, r9
 800c140:	46de      	mov	lr, fp
 800c142:	b5e0      	push	{r5, r6, r7, lr}
 800c144:	4b8f      	ldr	r3, [pc, #572]	; (800c384 <prvTimerTask+0x24c>)
 800c146:	b089      	sub	sp, #36	; 0x24
 800c148:	4699      	mov	r9, r3
 800c14a:	4b8f      	ldr	r3, [pc, #572]	; (800c388 <prvTimerTask+0x250>)
 800c14c:	4f8f      	ldr	r7, [pc, #572]	; (800c38c <prvTimerTask+0x254>)
 800c14e:	9303      	str	r3, [sp, #12]
 800c150:	4b8f      	ldr	r3, [pc, #572]	; (800c390 <prvTimerTask+0x258>)
 800c152:	4d90      	ldr	r5, [pc, #576]	; (800c394 <prvTimerTask+0x25c>)
 800c154:	9302      	str	r3, [sp, #8]
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c156:	2328      	movs	r3, #40	; 0x28
 800c158:	4698      	mov	r8, r3
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c15a:	464b      	mov	r3, r9
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681e      	ldr	r6, [r3, #0]
 800c160:	2e00      	cmp	r6, #0
 800c162:	d100      	bne.n	800c166 <prvTimerTask+0x2e>
 800c164:	e090      	b.n	800c288 <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800c16a:	f7ff fc59 	bl	800ba20 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c16e:	f7ff fc5f 	bl	800ba30 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c172:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c174:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800c176:	4283      	cmp	r3, r0
 800c178:	d900      	bls.n	800c17c <prvTimerTask+0x44>
 800c17a:	e09f      	b.n	800c2bc <prvTimerTask+0x184>
	xLastTime = xTimeNow;
 800c17c:	6038      	str	r0, [r7, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c17e:	4286      	cmp	r6, r0
 800c180:	d800      	bhi.n	800c184 <prvTimerTask+0x4c>
 800c182:	e0a4      	b.n	800c2ce <prvTimerTask+0x196>
 800c184:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c186:	6828      	ldr	r0, [r5, #0]
 800c188:	1b31      	subs	r1, r6, r4
 800c18a:	f7ff fa25 	bl	800b5d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c18e:	f7ff fd9f 	bl	800bcd0 <xTaskResumeAll>
 800c192:	2800      	cmp	r0, #0
 800c194:	d100      	bne.n	800c198 <prvTimerTask+0x60>
 800c196:	e08e      	b.n	800c2b6 <prvTimerTask+0x17e>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c198:	2302      	movs	r3, #2
 800c19a:	469b      	mov	fp, r3
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c19c:	3b01      	subs	r3, #1
 800c19e:	469a      	mov	sl, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	6828      	ldr	r0, [r5, #0]
 800c1a4:	a904      	add	r1, sp, #16
 800c1a6:	f7ff f95f 	bl	800b468 <xQueueReceive>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d0d5      	beq.n	800c15a <prvTimerTask+0x22>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1ae:	9b04      	ldr	r3, [sp, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	db61      	blt.n	800c278 <prvTimerTask+0x140>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1b4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c1b6:	6963      	ldr	r3, [r4, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1bc:	1d20      	adds	r0, r4, #4
 800c1be:	f7fe ff23 	bl	800b008 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800c1c2:	f7ff fc35 	bl	800ba30 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c1c6:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c1c8:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800c1ca:	4298      	cmp	r0, r3
 800c1cc:	d37c      	bcc.n	800c2c8 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 800c1ce:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800c1d0:	603e      	str	r6, [r7, #0]
			switch( xMessage.xMessageID )
 800c1d2:	2b09      	cmp	r3, #9
 800c1d4:	d8e4      	bhi.n	800c1a0 <prvTimerTask+0x68>
 800c1d6:	9a02      	ldr	r2, [sp, #8]
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	58d3      	ldr	r3, [r2, r3]
 800c1dc:	469f      	mov	pc, r3
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1de:	4643      	mov	r3, r8
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	5ce3      	ldrb	r3, [r4, r3]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	4642      	mov	r2, r8
 800c1e8:	54a3      	strb	r3, [r4, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1ea:	69a1      	ldr	r1, [r4, #24]
 800c1ec:	9b05      	ldr	r3, [sp, #20]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1ee:	6124      	str	r4, [r4, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1f0:	185a      	adds	r2, r3, r1
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1f2:	6062      	str	r2, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 800c1f4:	42b2      	cmp	r2, r6
 800c1f6:	d900      	bls.n	800c1fa <prvTimerTask+0xc2>
 800c1f8:	e085      	b.n	800c306 <prvTimerTask+0x1ce>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1fa:	1af3      	subs	r3, r6, r3
 800c1fc:	4299      	cmp	r1, r3
 800c1fe:	d900      	bls.n	800c202 <prvTimerTask+0xca>
 800c200:	e0a3      	b.n	800c34a <prvTimerTask+0x212>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c202:	6a23      	ldr	r3, [r4, #32]
 800c204:	0020      	movs	r0, r4
 800c206:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c208:	4643      	mov	r3, r8
 800c20a:	5ce3      	ldrb	r3, [r4, r3]
 800c20c:	075b      	lsls	r3, r3, #29
 800c20e:	d5c7      	bpl.n	800c1a0 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c210:	69a3      	ldr	r3, [r4, #24]
 800c212:	9a05      	ldr	r2, [sp, #20]
 800c214:	2100      	movs	r1, #0
 800c216:	18d2      	adds	r2, r2, r3
 800c218:	2300      	movs	r3, #0
 800c21a:	0020      	movs	r0, r4
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	f7ff ff1d 	bl	800c05c <xTimerGenericCommand>
							configASSERT( xResult );
 800c222:	2800      	cmp	r0, #0
 800c224:	d1bc      	bne.n	800c1a0 <prvTimerTask+0x68>
 800c226:	b672      	cpsid	i
 800c228:	e7fe      	b.n	800c228 <prvTimerTask+0xf0>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c22a:	4643      	mov	r3, r8
 800c22c:	2201      	movs	r2, #1
 800c22e:	5ce3      	ldrb	r3, [r4, r3]
 800c230:	4313      	orrs	r3, r2
 800c232:	4642      	mov	r2, r8
 800c234:	54a3      	strb	r3, [r4, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c236:	9b05      	ldr	r3, [sp, #20]
 800c238:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d100      	bne.n	800c240 <prvTimerTask+0x108>
 800c23e:	e098      	b.n	800c372 <prvTimerTask+0x23a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c240:	199b      	adds	r3, r3, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c242:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c244:	6124      	str	r4, [r4, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c246:	1d21      	adds	r1, r4, #4
	if( xNextExpiryTime <= xTimeNow )
 800c248:	42b3      	cmp	r3, r6
 800c24a:	d867      	bhi.n	800c31c <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c24c:	9b03      	ldr	r3, [sp, #12]
 800c24e:	6818      	ldr	r0, [r3, #0]
 800c250:	f7fe fec2 	bl	800afd8 <vListInsert>
	return xProcessTimerNow;
 800c254:	e7a4      	b.n	800c1a0 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c256:	4643      	mov	r3, r8
 800c258:	4652      	mov	r2, sl
 800c25a:	5ce3      	ldrb	r3, [r4, r3]
 800c25c:	4393      	bics	r3, r2
 800c25e:	4642      	mov	r2, r8
 800c260:	54a3      	strb	r3, [r4, r2]
					break;
 800c262:	e79d      	b.n	800c1a0 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c264:	4643      	mov	r3, r8
 800c266:	465a      	mov	r2, fp
 800c268:	5ce3      	ldrb	r3, [r4, r3]
 800c26a:	421a      	tst	r2, r3
 800c26c:	d05b      	beq.n	800c326 <prvTimerTask+0x1ee>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c26e:	4652      	mov	r2, sl
 800c270:	4393      	bics	r3, r2
 800c272:	4642      	mov	r2, r8
 800c274:	54a3      	strb	r3, [r4, r2]
 800c276:	e793      	b.n	800c1a0 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c278:	9b05      	ldr	r3, [sp, #20]
 800c27a:	9907      	ldr	r1, [sp, #28]
 800c27c:	9806      	ldr	r0, [sp, #24]
 800c27e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c280:	9b04      	ldr	r3, [sp, #16]
 800c282:	2b00      	cmp	r3, #0
 800c284:	db8c      	blt.n	800c1a0 <prvTimerTask+0x68>
 800c286:	e795      	b.n	800c1b4 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 800c288:	f7ff fbca 	bl	800ba20 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c28c:	f7ff fbd0 	bl	800ba30 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c290:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c292:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800c294:	4283      	cmp	r3, r0
 800c296:	d811      	bhi.n	800c2bc <prvTimerTask+0x184>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c298:	9b03      	ldr	r3, [sp, #12]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c29a:	6828      	ldr	r0, [r5, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c29c:	681b      	ldr	r3, [r3, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c29e:	1b31      	subs	r1, r6, r4
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2a0:	681a      	ldr	r2, [r3, #0]
	xLastTime = xTimeNow;
 800c2a2:	603c      	str	r4, [r7, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2a4:	4253      	negs	r3, r2
 800c2a6:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2a8:	f7ff f996 	bl	800b5d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2ac:	f7ff fd10 	bl	800bcd0 <xTaskResumeAll>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d000      	beq.n	800c2b6 <prvTimerTask+0x17e>
 800c2b4:	e770      	b.n	800c198 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 800c2b6:	f000 f8af 	bl	800c418 <vPortYield>
 800c2ba:	e76d      	b.n	800c198 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800c2bc:	f7ff fefc 	bl	800c0b8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c2c0:	603c      	str	r4, [r7, #0]
			( void ) xTaskResumeAll();
 800c2c2:	f7ff fd05 	bl	800bcd0 <xTaskResumeAll>
 800c2c6:	e767      	b.n	800c198 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800c2c8:	f7ff fef6 	bl	800c0b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c2cc:	e77f      	b.n	800c1ce <prvTimerTask+0x96>
				( void ) xTaskResumeAll();
 800c2ce:	f7ff fcff 	bl	800bcd0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d2:	464b      	mov	r3, r9
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	469a      	mov	sl, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2dc:	2304      	movs	r3, #4
 800c2de:	4453      	add	r3, sl
 800c2e0:	0018      	movs	r0, r3
 800c2e2:	469b      	mov	fp, r3
 800c2e4:	f7fe fe90 	bl	800b008 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2e8:	4653      	mov	r3, sl
 800c2ea:	4642      	mov	r2, r8
 800c2ec:	5c9b      	ldrb	r3, [r3, r2]
 800c2ee:	075a      	lsls	r2, r3, #29
 800c2f0:	d41d      	bmi.n	800c32e <prvTimerTask+0x1f6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	4641      	mov	r1, r8
 800c2f6:	4393      	bics	r3, r2
 800c2f8:	4652      	mov	r2, sl
 800c2fa:	5453      	strb	r3, [r2, r1]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2fc:	4653      	mov	r3, sl
 800c2fe:	4650      	mov	r0, sl
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	4798      	blx	r3
}
 800c304:	e748      	b.n	800c198 <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c306:	42b3      	cmp	r3, r6
 800c308:	d902      	bls.n	800c310 <prvTimerTask+0x1d8>
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d800      	bhi.n	800c310 <prvTimerTask+0x1d8>
 800c30e:	e778      	b.n	800c202 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c310:	464b      	mov	r3, r9
 800c312:	1d21      	adds	r1, r4, #4
 800c314:	6818      	ldr	r0, [r3, #0]
 800c316:	f7fe fe5f 	bl	800afd8 <vListInsert>
	return xProcessTimerNow;
 800c31a:	e741      	b.n	800c1a0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c31c:	464b      	mov	r3, r9
 800c31e:	6818      	ldr	r0, [r3, #0]
 800c320:	f7fe fe5a 	bl	800afd8 <vListInsert>
 800c324:	e73c      	b.n	800c1a0 <prvTimerTask+0x68>
							vPortFree( pxTimer );
 800c326:	0020      	movs	r0, r4
 800c328:	f000 f9de 	bl	800c6e8 <vPortFree>
 800c32c:	e738      	b.n	800c1a0 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c32e:	4653      	mov	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c330:	4651      	mov	r1, sl
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c332:	699a      	ldr	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c334:	6109      	str	r1, [r1, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c336:	18b3      	adds	r3, r6, r2
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c338:	604b      	str	r3, [r1, #4]
	if( xNextExpiryTime <= xTimeNow )
 800c33a:	42a3      	cmp	r3, r4
 800c33c:	d90b      	bls.n	800c356 <prvTimerTask+0x21e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c33e:	464b      	mov	r3, r9
 800c340:	4659      	mov	r1, fp
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	f7fe fe48 	bl	800afd8 <vListInsert>
	return xProcessTimerNow;
 800c348:	e7d8      	b.n	800c2fc <prvTimerTask+0x1c4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c34a:	9b03      	ldr	r3, [sp, #12]
 800c34c:	1d21      	adds	r1, r4, #4
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	f7fe fe42 	bl	800afd8 <vListInsert>
	return xProcessTimerNow;
 800c354:	e724      	b.n	800c1a0 <prvTimerTask+0x68>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c356:	1ba4      	subs	r4, r4, r6
 800c358:	42a2      	cmp	r2, r4
 800c35a:	d80c      	bhi.n	800c376 <prvTimerTask+0x23e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c35c:	2300      	movs	r3, #0
 800c35e:	0032      	movs	r2, r6
 800c360:	2100      	movs	r1, #0
 800c362:	4650      	mov	r0, sl
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	f7ff fe79 	bl	800c05c <xTimerGenericCommand>
			configASSERT( xResult );
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d1c6      	bne.n	800c2fc <prvTimerTask+0x1c4>
 800c36e:	b672      	cpsid	i
 800c370:	e7fe      	b.n	800c370 <prvTimerTask+0x238>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c372:	b672      	cpsid	i
 800c374:	e7fe      	b.n	800c374 <prvTimerTask+0x23c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c376:	9b03      	ldr	r3, [sp, #12]
 800c378:	4659      	mov	r1, fp
 800c37a:	6818      	ldr	r0, [r3, #0]
 800c37c:	f7fe fe2c 	bl	800afd8 <vListInsert>
	return xProcessTimerNow;
 800c380:	e7bc      	b.n	800c2fc <prvTimerTask+0x1c4>
 800c382:	46c0      	nop			; (mov r8, r8)
 800c384:	200057c0 	.word	0x200057c0
 800c388:	200057c4 	.word	0x200057c4
 800c38c:	20005890 	.word	0x20005890
 800c390:	08013548 	.word	0x08013548
 800c394:	200058e4 	.word	0x200058e4

0800c398 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800c398:	2300      	movs	r3, #0
{
 800c39a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800c39c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c39e:	4b06      	ldr	r3, [pc, #24]	; (800c3b8 <prvTaskExitError+0x20>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	d001      	beq.n	800c3aa <prvTaskExitError+0x12>
 800c3a6:	b672      	cpsid	i
 800c3a8:	e7fe      	b.n	800c3a8 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800c3aa:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c3ac:	9b01      	ldr	r3, [sp, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d0fc      	beq.n	800c3ac <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3b2:	b002      	add	sp, #8
 800c3b4:	4770      	bx	lr
 800c3b6:	46c0      	nop			; (mov r8, r8)
 800c3b8:	200000f0 	.word	0x200000f0
 800c3bc:	00000000 	.word	0x00000000

0800c3c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800c3c0:	4a0b      	ldr	r2, [pc, #44]	; (800c3f0 <pxCurrentTCBConst2>)
 800c3c2:	6813      	ldr	r3, [r2, #0]
 800c3c4:	6818      	ldr	r0, [r3, #0]
 800c3c6:	3020      	adds	r0, #32
 800c3c8:	f380 8809 	msr	PSP, r0
 800c3cc:	2002      	movs	r0, #2
 800c3ce:	f380 8814 	msr	CONTROL, r0
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800c3d8:	46ae      	mov	lr, r5
 800c3da:	bc08      	pop	{r3}
 800c3dc:	bc04      	pop	{r2}
 800c3de:	b662      	cpsie	i
 800c3e0:	4718      	bx	r3
 800c3e2:	46c0      	nop			; (mov r8, r8)
 800c3e4:	46c0      	nop			; (mov r8, r8)
 800c3e6:	46c0      	nop			; (mov r8, r8)
 800c3e8:	46c0      	nop			; (mov r8, r8)
 800c3ea:	46c0      	nop			; (mov r8, r8)
 800c3ec:	46c0      	nop			; (mov r8, r8)
 800c3ee:	46c0      	nop			; (mov r8, r8)

0800c3f0 <pxCurrentTCBConst2>:
 800c3f0:	200052c4 	.word	0x200052c4

0800c3f4 <pxPortInitialiseStack>:
{
 800c3f4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3f6:	2480      	movs	r4, #128	; 0x80
 800c3f8:	1f03      	subs	r3, r0, #4
 800c3fa:	0464      	lsls	r4, r4, #17
 800c3fc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800c3fe:	3b04      	subs	r3, #4
 800c400:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c402:	4903      	ldr	r1, [pc, #12]	; (800c410 <pxPortInitialiseStack+0x1c>)
 800c404:	3b04      	subs	r3, #4
 800c406:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c408:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800c40a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c40c:	601a      	str	r2, [r3, #0]
}
 800c40e:	bd10      	pop	{r4, pc}
 800c410:	0800c399 	.word	0x0800c399

0800c414 <SVC_Handler>:
}
 800c414:	4770      	bx	lr
 800c416:	46c0      	nop			; (mov r8, r8)

0800c418 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c418:	2280      	movs	r2, #128	; 0x80
 800c41a:	4b04      	ldr	r3, [pc, #16]	; (800c42c <vPortYield+0x14>)
 800c41c:	0552      	lsls	r2, r2, #21
 800c41e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c420:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c424:	f3bf 8f6f 	isb	sy
}
 800c428:	4770      	bx	lr
 800c42a:	46c0      	nop			; (mov r8, r8)
 800c42c:	e000ed04 	.word	0xe000ed04

0800c430 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800c430:	b672      	cpsid	i
	uxCriticalNesting++;
 800c432:	4a04      	ldr	r2, [pc, #16]	; (800c444 <vPortEnterCritical+0x14>)
 800c434:	6813      	ldr	r3, [r2, #0]
 800c436:	3301      	adds	r3, #1
 800c438:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c43a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c43e:	f3bf 8f6f 	isb	sy
}
 800c442:	4770      	bx	lr
 800c444:	200000f0 	.word	0x200000f0

0800c448 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800c448:	4a05      	ldr	r2, [pc, #20]	; (800c460 <vPortExitCritical+0x18>)
 800c44a:	6813      	ldr	r3, [r2, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <vPortExitCritical+0xc>
 800c450:	b672      	cpsid	i
 800c452:	e7fe      	b.n	800c452 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 800c454:	3b01      	subs	r3, #1
 800c456:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d100      	bne.n	800c45e <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 800c45c:	b662      	cpsie	i
	}
}
 800c45e:	4770      	bx	lr
 800c460:	200000f0 	.word	0x200000f0

0800c464 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c464:	f3ef 8010 	mrs	r0, PRIMASK
 800c468:	b672      	cpsid	i
 800c46a:	4770      	bx	lr

0800c46c <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c46c:	f380 8810 	msr	PRIMASK, r0
 800c470:	4770      	bx	lr
 800c472:	46c0      	nop			; (mov r8, r8)
	...

0800c480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c480:	f3ef 8009 	mrs	r0, PSP
 800c484:	4b0e      	ldr	r3, [pc, #56]	; (800c4c0 <pxCurrentTCBConst>)
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	3820      	subs	r0, #32
 800c48a:	6010      	str	r0, [r2, #0]
 800c48c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c48e:	4644      	mov	r4, r8
 800c490:	464d      	mov	r5, r9
 800c492:	4656      	mov	r6, sl
 800c494:	465f      	mov	r7, fp
 800c496:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c498:	b508      	push	{r3, lr}
 800c49a:	b672      	cpsid	i
 800c49c:	f7ff fc42 	bl	800bd24 <vTaskSwitchContext>
 800c4a0:	b662      	cpsie	i
 800c4a2:	bc0c      	pop	{r2, r3}
 800c4a4:	6811      	ldr	r1, [r2, #0]
 800c4a6:	6808      	ldr	r0, [r1, #0]
 800c4a8:	3010      	adds	r0, #16
 800c4aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c4ac:	46a0      	mov	r8, r4
 800c4ae:	46a9      	mov	r9, r5
 800c4b0:	46b2      	mov	sl, r6
 800c4b2:	46bb      	mov	fp, r7
 800c4b4:	f380 8809 	msr	PSP, r0
 800c4b8:	3820      	subs	r0, #32
 800c4ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c4bc:	4718      	bx	r3
 800c4be:	46c0      	nop			; (mov r8, r8)

0800c4c0 <pxCurrentTCBConst>:
 800c4c0:	200052c4 	.word	0x200052c4

0800c4c4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4c4:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4c6:	f7ff ffcd 	bl	800c464 <ulSetInterruptMaskFromISR>
 800c4ca:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4cc:	f7ff fab6 	bl	800ba3c <xTaskIncrementTick>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d003      	beq.n	800c4dc <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4d4:	2280      	movs	r2, #128	; 0x80
 800c4d6:	4b03      	ldr	r3, [pc, #12]	; (800c4e4 <xPortSysTickHandler+0x20>)
 800c4d8:	0552      	lsls	r2, r2, #21
 800c4da:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c4dc:	0020      	movs	r0, r4
 800c4de:	f7ff ffc5 	bl	800c46c <vClearInterruptMaskFromISR>
}
 800c4e2:	bd10      	pop	{r4, pc}
 800c4e4:	e000ed04 	.word	0xe000ed04

0800c4e8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4e8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4ea:	21fa      	movs	r1, #250	; 0xfa
{
 800c4ec:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c4ee:	4a07      	ldr	r2, [pc, #28]	; (800c50c <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4f0:	4c07      	ldr	r4, [pc, #28]	; (800c510 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4f2:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4f4:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c4f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4f8:	4b06      	ldr	r3, [pc, #24]	; (800c514 <vPortSetupTimerInterrupt+0x2c>)
 800c4fa:	6818      	ldr	r0, [r3, #0]
 800c4fc:	f7f3 fe20 	bl	8000140 <__udivsi3>
 800c500:	4b05      	ldr	r3, [pc, #20]	; (800c518 <vPortSetupTimerInterrupt+0x30>)
 800c502:	3801      	subs	r0, #1
 800c504:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c506:	2307      	movs	r3, #7
 800c508:	6023      	str	r3, [r4, #0]
}
 800c50a:	bd10      	pop	{r4, pc}
 800c50c:	e000e018 	.word	0xe000e018
 800c510:	e000e010 	.word	0xe000e010
 800c514:	200000e4 	.word	0x200000e4
 800c518:	e000e014 	.word	0xe000e014

0800c51c <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c51c:	22ff      	movs	r2, #255	; 0xff
 800c51e:	4b11      	ldr	r3, [pc, #68]	; (800c564 <xPortStartScheduler+0x48>)
 800c520:	0412      	lsls	r2, r2, #16
 800c522:	6819      	ldr	r1, [r3, #0]
{
 800c524:	b530      	push	{r4, r5, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c526:	430a      	orrs	r2, r1
 800c528:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c52a:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 800c52c:	2500      	movs	r5, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c52e:	6819      	ldr	r1, [r3, #0]
 800c530:	0612      	lsls	r2, r2, #24
 800c532:	430a      	orrs	r2, r1
{
 800c534:	b083      	sub	sp, #12
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c536:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800c538:	f7ff ffd6 	bl	800c4e8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c53c:	4c0a      	ldr	r4, [pc, #40]	; (800c568 <xPortStartScheduler+0x4c>)
 800c53e:	6025      	str	r5, [r4, #0]
	vPortStartFirstTask();
 800c540:	f7ff ff3e 	bl	800c3c0 <vPortStartFirstTask>
	vTaskSwitchContext();
 800c544:	f7ff fbee 	bl	800bd24 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800c548:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0UL;
 800c54a:	9501      	str	r5, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800c54c:	3301      	adds	r3, #1
 800c54e:	d001      	beq.n	800c554 <xPortStartScheduler+0x38>
 800c550:	b672      	cpsid	i
 800c552:	e7fe      	b.n	800c552 <xPortStartScheduler+0x36>
	portDISABLE_INTERRUPTS();
 800c554:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c556:	9b01      	ldr	r3, [sp, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0fc      	beq.n	800c556 <xPortStartScheduler+0x3a>
}
 800c55c:	2000      	movs	r0, #0
 800c55e:	b003      	add	sp, #12
 800c560:	bd30      	pop	{r4, r5, pc}
 800c562:	46c0      	nop			; (mov r8, r8)
 800c564:	e000ed20 	.word	0xe000ed20
 800c568:	200000f0 	.word	0x200000f0

0800c56c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c56c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c56e:	4b12      	ldr	r3, [pc, #72]	; (800c5b8 <prvInsertBlockIntoFreeList+0x4c>)
 800c570:	001a      	movs	r2, r3
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4283      	cmp	r3, r0
 800c576:	d3fb      	bcc.n	800c570 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c578:	6851      	ldr	r1, [r2, #4]
 800c57a:	1854      	adds	r4, r2, r1
 800c57c:	42a0      	cmp	r0, r4
 800c57e:	d012      	beq.n	800c5a6 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c580:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c582:	1844      	adds	r4, r0, r1
 800c584:	42a3      	cmp	r3, r4
 800c586:	d005      	beq.n	800c594 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c588:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c58a:	4282      	cmp	r2, r0
 800c58c:	d000      	beq.n	800c590 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c58e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c590:	bd10      	pop	{r4, pc}
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c592:	0010      	movs	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c594:	4c09      	ldr	r4, [pc, #36]	; (800c5bc <prvInsertBlockIntoFreeList+0x50>)
 800c596:	6824      	ldr	r4, [r4, #0]
 800c598:	42a3      	cmp	r3, r4
 800c59a:	d0f5      	beq.n	800c588 <prvInsertBlockIntoFreeList+0x1c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c59c:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c59e:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5a0:	1861      	adds	r1, r4, r1
 800c5a2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5a4:	e7f0      	b.n	800c588 <prvInsertBlockIntoFreeList+0x1c>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5a6:	6840      	ldr	r0, [r0, #4]
 800c5a8:	1809      	adds	r1, r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5aa:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5ac:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5ae:	4283      	cmp	r3, r0
 800c5b0:	d0ef      	beq.n	800c592 <prvInsertBlockIntoFreeList+0x26>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5b2:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800c5b4:	e7ec      	b.n	800c590 <prvInsertBlockIntoFreeList+0x24>
 800c5b6:	46c0      	nop			; (mov r8, r8)
 800c5b8:	20006504 	.word	0x20006504
 800c5bc:	200058ec 	.word	0x200058ec

0800c5c0 <pvPortMalloc>:
{
 800c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c2:	46c6      	mov	lr, r8
 800c5c4:	b500      	push	{lr}
 800c5c6:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800c5c8:	f7ff fa2a 	bl	800ba20 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c5cc:	4b3f      	ldr	r3, [pc, #252]	; (800c6cc <pvPortMalloc+0x10c>)
 800c5ce:	469c      	mov	ip, r3
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d054      	beq.n	800c680 <pvPortMalloc+0xc0>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5d6:	4b3e      	ldr	r3, [pc, #248]	; (800c6d0 <pvPortMalloc+0x110>)
 800c5d8:	681d      	ldr	r5, [r3, #0]
 800c5da:	4225      	tst	r5, r4
 800c5dc:	d12c      	bne.n	800c638 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 800c5de:	2c00      	cmp	r4, #0
 800c5e0:	d02a      	beq.n	800c638 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 800c5e2:	0021      	movs	r1, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5e4:	2307      	movs	r3, #7
				xWantedSize += xHeapStructSize;
 800c5e6:	3108      	adds	r1, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5e8:	420b      	tst	r3, r1
 800c5ea:	d001      	beq.n	800c5f0 <pvPortMalloc+0x30>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5ec:	4399      	bics	r1, r3
 800c5ee:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5f0:	2900      	cmp	r1, #0
 800c5f2:	d021      	beq.n	800c638 <pvPortMalloc+0x78>
 800c5f4:	4f37      	ldr	r7, [pc, #220]	; (800c6d4 <pvPortMalloc+0x114>)
 800c5f6:	683e      	ldr	r6, [r7, #0]
 800c5f8:	428e      	cmp	r6, r1
 800c5fa:	d31d      	bcc.n	800c638 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 800c5fc:	4836      	ldr	r0, [pc, #216]	; (800c6d8 <pvPortMalloc+0x118>)
 800c5fe:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c600:	e004      	b.n	800c60c <pvPortMalloc+0x4c>
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <pvPortMalloc+0x52>
 800c608:	0020      	movs	r0, r4
 800c60a:	001c      	movs	r4, r3
 800c60c:	6862      	ldr	r2, [r4, #4]
 800c60e:	428a      	cmp	r2, r1
 800c610:	d3f7      	bcc.n	800c602 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800c612:	4663      	mov	r3, ip
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	42a3      	cmp	r3, r4
 800c618:	d00e      	beq.n	800c638 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c61a:	6803      	ldr	r3, [r0, #0]
 800c61c:	469c      	mov	ip, r3
 800c61e:	2308      	movs	r3, #8
 800c620:	4698      	mov	r8, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c622:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c624:	44e0      	add	r8, ip
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c626:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c628:	1a53      	subs	r3, r2, r1
 800c62a:	2b10      	cmp	r3, #16
 800c62c:	d911      	bls.n	800c652 <pvPortMalloc+0x92>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c62e:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c630:	0742      	lsls	r2, r0, #29
 800c632:	d009      	beq.n	800c648 <pvPortMalloc+0x88>
 800c634:	b672      	cpsid	i
 800c636:	e7fe      	b.n	800c636 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 800c638:	f7ff fb4a 	bl	800bcd0 <xTaskResumeAll>
 800c63c:	2300      	movs	r3, #0
 800c63e:	4698      	mov	r8, r3
}
 800c640:	4640      	mov	r0, r8
 800c642:	bc80      	pop	{r7}
 800c644:	46b8      	mov	r8, r7
 800c646:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c648:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c64a:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c64c:	f7ff ff8e 	bl	800c56c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c650:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c652:	4b22      	ldr	r3, [pc, #136]	; (800c6dc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c654:	1ab6      	subs	r6, r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c656:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c658:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c65a:	428e      	cmp	r6, r1
 800c65c:	d30e      	bcc.n	800c67c <pvPortMalloc+0xbc>
					pxBlock->pxNextFreeBlock = NULL;
 800c65e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c660:	4315      	orrs	r5, r2
					xNumberOfSuccessfulAllocations++;
 800c662:	4a1f      	ldr	r2, [pc, #124]	; (800c6e0 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 800c664:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800c666:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c668:	6065      	str	r5, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 800c66a:	3301      	adds	r3, #1
 800c66c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800c66e:	f7ff fb2f 	bl	800bcd0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c672:	4643      	mov	r3, r8
 800c674:	075b      	lsls	r3, r3, #29
 800c676:	d0e3      	beq.n	800c640 <pvPortMalloc+0x80>
 800c678:	b672      	cpsid	i
 800c67a:	e7fe      	b.n	800c67a <pvPortMalloc+0xba>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c67c:	601e      	str	r6, [r3, #0]
 800c67e:	e7ee      	b.n	800c65e <pvPortMalloc+0x9e>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c680:	2107      	movs	r1, #7
	uxAddress = ( size_t ) ucHeap;
 800c682:	4b18      	ldr	r3, [pc, #96]	; (800c6e4 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c684:	4219      	tst	r1, r3
 800c686:	d119      	bne.n	800c6bc <pvPortMalloc+0xfc>
 800c688:	22c0      	movs	r2, #192	; 0xc0
 800c68a:	0019      	movs	r1, r3
 800c68c:	0112      	lsls	r2, r2, #4
 800c68e:	189a      	adds	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 800c690:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c692:	4d11      	ldr	r5, [pc, #68]	; (800c6d8 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800c694:	3a08      	subs	r2, #8
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c696:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c698:	6068      	str	r0, [r5, #4]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c69a:	2507      	movs	r5, #7
 800c69c:	43aa      	bics	r2, r5
	pxEnd = ( void * ) uxAddress;
 800c69e:	4665      	mov	r5, ip
 800c6a0:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6a2:	2580      	movs	r5, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6a4:	1ad3      	subs	r3, r2, r3
	pxEnd->pxNextFreeBlock = NULL;
 800c6a6:	6010      	str	r0, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6a8:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6aa:	c10c      	stmia	r1!, {r2, r3}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6ac:	4a0b      	ldr	r2, [pc, #44]	; (800c6dc <pvPortMalloc+0x11c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6ae:	062d      	lsls	r5, r5, #24
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6b0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6b2:	4a08      	ldr	r2, [pc, #32]	; (800c6d4 <pvPortMalloc+0x114>)
 800c6b4:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6b6:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <pvPortMalloc+0x110>)
 800c6b8:	601d      	str	r5, [r3, #0]
}
 800c6ba:	e78e      	b.n	800c5da <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6bc:	22c0      	movs	r2, #192	; 0xc0
 800c6be:	1dd8      	adds	r0, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6c0:	0112      	lsls	r2, r2, #4
 800c6c2:	189a      	adds	r2, r3, r2
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6c4:	0003      	movs	r3, r0
 800c6c6:	438b      	bics	r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6c8:	0019      	movs	r1, r3
 800c6ca:	e7e1      	b.n	800c690 <pvPortMalloc+0xd0>
 800c6cc:	200058ec 	.word	0x200058ec
 800c6d0:	200064f0 	.word	0x200064f0
 800c6d4:	200064f4 	.word	0x200064f4
 800c6d8:	20006504 	.word	0x20006504
 800c6dc:	200064f8 	.word	0x200064f8
 800c6e0:	200064fc 	.word	0x200064fc
 800c6e4:	200058f0 	.word	0x200058f0

0800c6e8 <vPortFree>:
{
 800c6e8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d01f      	beq.n	800c72e <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6ee:	4a10      	ldr	r2, [pc, #64]	; (800c730 <vPortFree+0x48>)
 800c6f0:	3808      	subs	r0, #8
 800c6f2:	6843      	ldr	r3, [r0, #4]
 800c6f4:	6812      	ldr	r2, [r2, #0]
 800c6f6:	0004      	movs	r4, r0
 800c6f8:	421a      	tst	r2, r3
 800c6fa:	d004      	beq.n	800c706 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6fc:	6801      	ldr	r1, [r0, #0]
 800c6fe:	2900      	cmp	r1, #0
 800c700:	d003      	beq.n	800c70a <vPortFree+0x22>
 800c702:	b672      	cpsid	i
 800c704:	e7fe      	b.n	800c704 <vPortFree+0x1c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c706:	b672      	cpsid	i
 800c708:	e7fe      	b.n	800c708 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c70a:	4393      	bics	r3, r2
 800c70c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800c70e:	f7ff f987 	bl	800ba20 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c712:	4a08      	ldr	r2, [pc, #32]	; (800c734 <vPortFree+0x4c>)
 800c714:	6863      	ldr	r3, [r4, #4]
 800c716:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c718:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c71a:	185b      	adds	r3, r3, r1
 800c71c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c71e:	f7ff ff25 	bl	800c56c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c722:	4a05      	ldr	r2, [pc, #20]	; (800c738 <vPortFree+0x50>)
 800c724:	6813      	ldr	r3, [r2, #0]
 800c726:	3301      	adds	r3, #1
 800c728:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800c72a:	f7ff fad1 	bl	800bcd0 <xTaskResumeAll>
}
 800c72e:	bd10      	pop	{r4, pc}
 800c730:	200064f0 	.word	0x200064f0
 800c734:	200064f4 	.word	0x200064f4
 800c738:	20006500 	.word	0x20006500

0800c73c <atoi>:
 800c73c:	b510      	push	{r4, lr}
 800c73e:	220a      	movs	r2, #10
 800c740:	2100      	movs	r1, #0
 800c742:	f000 ff81 	bl	800d648 <strtol>
 800c746:	bd10      	pop	{r4, pc}

0800c748 <malloc>:
 800c748:	b510      	push	{r4, lr}
 800c74a:	4b03      	ldr	r3, [pc, #12]	; (800c758 <malloc+0x10>)
 800c74c:	0001      	movs	r1, r0
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	f000 f826 	bl	800c7a0 <_malloc_r>
 800c754:	bd10      	pop	{r4, pc}
 800c756:	46c0      	nop			; (mov r8, r8)
 800c758:	200002b8 	.word	0x200002b8

0800c75c <sbrk_aligned>:
 800c75c:	b570      	push	{r4, r5, r6, lr}
 800c75e:	4e0f      	ldr	r6, [pc, #60]	; (800c79c <sbrk_aligned+0x40>)
 800c760:	000d      	movs	r5, r1
 800c762:	6831      	ldr	r1, [r6, #0]
 800c764:	0004      	movs	r4, r0
 800c766:	2900      	cmp	r1, #0
 800c768:	d102      	bne.n	800c770 <sbrk_aligned+0x14>
 800c76a:	f002 f8cf 	bl	800e90c <_sbrk_r>
 800c76e:	6030      	str	r0, [r6, #0]
 800c770:	0029      	movs	r1, r5
 800c772:	0020      	movs	r0, r4
 800c774:	f002 f8ca 	bl	800e90c <_sbrk_r>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d00a      	beq.n	800c792 <sbrk_aligned+0x36>
 800c77c:	2303      	movs	r3, #3
 800c77e:	1cc5      	adds	r5, r0, #3
 800c780:	439d      	bics	r5, r3
 800c782:	42a8      	cmp	r0, r5
 800c784:	d007      	beq.n	800c796 <sbrk_aligned+0x3a>
 800c786:	1a29      	subs	r1, r5, r0
 800c788:	0020      	movs	r0, r4
 800c78a:	f002 f8bf 	bl	800e90c <_sbrk_r>
 800c78e:	3001      	adds	r0, #1
 800c790:	d101      	bne.n	800c796 <sbrk_aligned+0x3a>
 800c792:	2501      	movs	r5, #1
 800c794:	426d      	negs	r5, r5
 800c796:	0028      	movs	r0, r5
 800c798:	bd70      	pop	{r4, r5, r6, pc}
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	20006510 	.word	0x20006510

0800c7a0 <_malloc_r>:
 800c7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7a2:	2203      	movs	r2, #3
 800c7a4:	1ccb      	adds	r3, r1, #3
 800c7a6:	4393      	bics	r3, r2
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	0006      	movs	r6, r0
 800c7ac:	001f      	movs	r7, r3
 800c7ae:	2b0c      	cmp	r3, #12
 800c7b0:	d238      	bcs.n	800c824 <_malloc_r+0x84>
 800c7b2:	270c      	movs	r7, #12
 800c7b4:	42b9      	cmp	r1, r7
 800c7b6:	d837      	bhi.n	800c828 <_malloc_r+0x88>
 800c7b8:	0030      	movs	r0, r6
 800c7ba:	f000 f873 	bl	800c8a4 <__malloc_lock>
 800c7be:	4b38      	ldr	r3, [pc, #224]	; (800c8a0 <_malloc_r+0x100>)
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	001c      	movs	r4, r3
 800c7c6:	2c00      	cmp	r4, #0
 800c7c8:	d133      	bne.n	800c832 <_malloc_r+0x92>
 800c7ca:	0039      	movs	r1, r7
 800c7cc:	0030      	movs	r0, r6
 800c7ce:	f7ff ffc5 	bl	800c75c <sbrk_aligned>
 800c7d2:	0004      	movs	r4, r0
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	d15e      	bne.n	800c896 <_malloc_r+0xf6>
 800c7d8:	9b00      	ldr	r3, [sp, #0]
 800c7da:	681c      	ldr	r4, [r3, #0]
 800c7dc:	0025      	movs	r5, r4
 800c7de:	2d00      	cmp	r5, #0
 800c7e0:	d14e      	bne.n	800c880 <_malloc_r+0xe0>
 800c7e2:	2c00      	cmp	r4, #0
 800c7e4:	d051      	beq.n	800c88a <_malloc_r+0xea>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	0029      	movs	r1, r5
 800c7ea:	18e3      	adds	r3, r4, r3
 800c7ec:	0030      	movs	r0, r6
 800c7ee:	9301      	str	r3, [sp, #4]
 800c7f0:	f002 f88c 	bl	800e90c <_sbrk_r>
 800c7f4:	9b01      	ldr	r3, [sp, #4]
 800c7f6:	4283      	cmp	r3, r0
 800c7f8:	d147      	bne.n	800c88a <_malloc_r+0xea>
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	0030      	movs	r0, r6
 800c7fe:	1aff      	subs	r7, r7, r3
 800c800:	0039      	movs	r1, r7
 800c802:	f7ff ffab 	bl	800c75c <sbrk_aligned>
 800c806:	3001      	adds	r0, #1
 800c808:	d03f      	beq.n	800c88a <_malloc_r+0xea>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	19db      	adds	r3, r3, r7
 800c80e:	6023      	str	r3, [r4, #0]
 800c810:	9b00      	ldr	r3, [sp, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d040      	beq.n	800c89a <_malloc_r+0xfa>
 800c818:	685a      	ldr	r2, [r3, #4]
 800c81a:	42a2      	cmp	r2, r4
 800c81c:	d133      	bne.n	800c886 <_malloc_r+0xe6>
 800c81e:	2200      	movs	r2, #0
 800c820:	605a      	str	r2, [r3, #4]
 800c822:	e014      	b.n	800c84e <_malloc_r+0xae>
 800c824:	2b00      	cmp	r3, #0
 800c826:	dac5      	bge.n	800c7b4 <_malloc_r+0x14>
 800c828:	230c      	movs	r3, #12
 800c82a:	2500      	movs	r5, #0
 800c82c:	6033      	str	r3, [r6, #0]
 800c82e:	0028      	movs	r0, r5
 800c830:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c832:	6821      	ldr	r1, [r4, #0]
 800c834:	1bc9      	subs	r1, r1, r7
 800c836:	d420      	bmi.n	800c87a <_malloc_r+0xda>
 800c838:	290b      	cmp	r1, #11
 800c83a:	d918      	bls.n	800c86e <_malloc_r+0xce>
 800c83c:	19e2      	adds	r2, r4, r7
 800c83e:	6027      	str	r7, [r4, #0]
 800c840:	42a3      	cmp	r3, r4
 800c842:	d112      	bne.n	800c86a <_malloc_r+0xca>
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	6863      	ldr	r3, [r4, #4]
 800c84a:	6011      	str	r1, [r2, #0]
 800c84c:	6053      	str	r3, [r2, #4]
 800c84e:	0030      	movs	r0, r6
 800c850:	0025      	movs	r5, r4
 800c852:	f000 f82f 	bl	800c8b4 <__malloc_unlock>
 800c856:	2207      	movs	r2, #7
 800c858:	350b      	adds	r5, #11
 800c85a:	1d23      	adds	r3, r4, #4
 800c85c:	4395      	bics	r5, r2
 800c85e:	1aea      	subs	r2, r5, r3
 800c860:	429d      	cmp	r5, r3
 800c862:	d0e4      	beq.n	800c82e <_malloc_r+0x8e>
 800c864:	1b5b      	subs	r3, r3, r5
 800c866:	50a3      	str	r3, [r4, r2]
 800c868:	e7e1      	b.n	800c82e <_malloc_r+0x8e>
 800c86a:	605a      	str	r2, [r3, #4]
 800c86c:	e7ec      	b.n	800c848 <_malloc_r+0xa8>
 800c86e:	6862      	ldr	r2, [r4, #4]
 800c870:	42a3      	cmp	r3, r4
 800c872:	d1d5      	bne.n	800c820 <_malloc_r+0x80>
 800c874:	9b00      	ldr	r3, [sp, #0]
 800c876:	601a      	str	r2, [r3, #0]
 800c878:	e7e9      	b.n	800c84e <_malloc_r+0xae>
 800c87a:	0023      	movs	r3, r4
 800c87c:	6864      	ldr	r4, [r4, #4]
 800c87e:	e7a2      	b.n	800c7c6 <_malloc_r+0x26>
 800c880:	002c      	movs	r4, r5
 800c882:	686d      	ldr	r5, [r5, #4]
 800c884:	e7ab      	b.n	800c7de <_malloc_r+0x3e>
 800c886:	0013      	movs	r3, r2
 800c888:	e7c4      	b.n	800c814 <_malloc_r+0x74>
 800c88a:	230c      	movs	r3, #12
 800c88c:	0030      	movs	r0, r6
 800c88e:	6033      	str	r3, [r6, #0]
 800c890:	f000 f810 	bl	800c8b4 <__malloc_unlock>
 800c894:	e7cb      	b.n	800c82e <_malloc_r+0x8e>
 800c896:	6027      	str	r7, [r4, #0]
 800c898:	e7d9      	b.n	800c84e <_malloc_r+0xae>
 800c89a:	605b      	str	r3, [r3, #4]
 800c89c:	deff      	udf	#255	; 0xff
 800c89e:	46c0      	nop			; (mov r8, r8)
 800c8a0:	2000650c 	.word	0x2000650c

0800c8a4 <__malloc_lock>:
 800c8a4:	b510      	push	{r4, lr}
 800c8a6:	4802      	ldr	r0, [pc, #8]	; (800c8b0 <__malloc_lock+0xc>)
 800c8a8:	f002 f881 	bl	800e9ae <__retarget_lock_acquire_recursive>
 800c8ac:	bd10      	pop	{r4, pc}
 800c8ae:	46c0      	nop			; (mov r8, r8)
 800c8b0:	20006654 	.word	0x20006654

0800c8b4 <__malloc_unlock>:
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	4802      	ldr	r0, [pc, #8]	; (800c8c0 <__malloc_unlock+0xc>)
 800c8b8:	f002 f87a 	bl	800e9b0 <__retarget_lock_release_recursive>
 800c8bc:	bd10      	pop	{r4, pc}
 800c8be:	46c0      	nop			; (mov r8, r8)
 800c8c0:	20006654 	.word	0x20006654

0800c8c4 <sulp>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	0016      	movs	r6, r2
 800c8c8:	000d      	movs	r5, r1
 800c8ca:	f003 fe93 	bl	80105f4 <__ulp>
 800c8ce:	2e00      	cmp	r6, #0
 800c8d0:	d00d      	beq.n	800c8ee <sulp+0x2a>
 800c8d2:	236b      	movs	r3, #107	; 0x6b
 800c8d4:	006a      	lsls	r2, r5, #1
 800c8d6:	0d52      	lsrs	r2, r2, #21
 800c8d8:	1a9b      	subs	r3, r3, r2
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	dd07      	ble.n	800c8ee <sulp+0x2a>
 800c8de:	2400      	movs	r4, #0
 800c8e0:	4a03      	ldr	r2, [pc, #12]	; (800c8f0 <sulp+0x2c>)
 800c8e2:	051b      	lsls	r3, r3, #20
 800c8e4:	189d      	adds	r5, r3, r2
 800c8e6:	002b      	movs	r3, r5
 800c8e8:	0022      	movs	r2, r4
 800c8ea:	f7f5 fcf3 	bl	80022d4 <__aeabi_dmul>
 800c8ee:	bd70      	pop	{r4, r5, r6, pc}
 800c8f0:	3ff00000 	.word	0x3ff00000

0800c8f4 <_strtod_l>:
 800c8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8f6:	b0a1      	sub	sp, #132	; 0x84
 800c8f8:	9219      	str	r2, [sp, #100]	; 0x64
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2600      	movs	r6, #0
 800c8fe:	2700      	movs	r7, #0
 800c900:	9004      	str	r0, [sp, #16]
 800c902:	9107      	str	r1, [sp, #28]
 800c904:	921c      	str	r2, [sp, #112]	; 0x70
 800c906:	911b      	str	r1, [sp, #108]	; 0x6c
 800c908:	780a      	ldrb	r2, [r1, #0]
 800c90a:	2a2b      	cmp	r2, #43	; 0x2b
 800c90c:	d055      	beq.n	800c9ba <_strtod_l+0xc6>
 800c90e:	d841      	bhi.n	800c994 <_strtod_l+0xa0>
 800c910:	2a0d      	cmp	r2, #13
 800c912:	d83b      	bhi.n	800c98c <_strtod_l+0x98>
 800c914:	2a08      	cmp	r2, #8
 800c916:	d83b      	bhi.n	800c990 <_strtod_l+0x9c>
 800c918:	2a00      	cmp	r2, #0
 800c91a:	d044      	beq.n	800c9a6 <_strtod_l+0xb2>
 800c91c:	2200      	movs	r2, #0
 800c91e:	920f      	str	r2, [sp, #60]	; 0x3c
 800c920:	2100      	movs	r1, #0
 800c922:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c924:	9109      	str	r1, [sp, #36]	; 0x24
 800c926:	782a      	ldrb	r2, [r5, #0]
 800c928:	2a30      	cmp	r2, #48	; 0x30
 800c92a:	d000      	beq.n	800c92e <_strtod_l+0x3a>
 800c92c:	e085      	b.n	800ca3a <_strtod_l+0x146>
 800c92e:	786a      	ldrb	r2, [r5, #1]
 800c930:	3120      	adds	r1, #32
 800c932:	438a      	bics	r2, r1
 800c934:	2a58      	cmp	r2, #88	; 0x58
 800c936:	d000      	beq.n	800c93a <_strtod_l+0x46>
 800c938:	e075      	b.n	800ca26 <_strtod_l+0x132>
 800c93a:	9302      	str	r3, [sp, #8]
 800c93c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c93e:	4a97      	ldr	r2, [pc, #604]	; (800cb9c <_strtod_l+0x2a8>)
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	ab1c      	add	r3, sp, #112	; 0x70
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	9804      	ldr	r0, [sp, #16]
 800c948:	ab1d      	add	r3, sp, #116	; 0x74
 800c94a:	a91b      	add	r1, sp, #108	; 0x6c
 800c94c:	f002 ffc8 	bl	800f8e0 <__gethex>
 800c950:	230f      	movs	r3, #15
 800c952:	0002      	movs	r2, r0
 800c954:	401a      	ands	r2, r3
 800c956:	0004      	movs	r4, r0
 800c958:	9205      	str	r2, [sp, #20]
 800c95a:	4218      	tst	r0, r3
 800c95c:	d005      	beq.n	800c96a <_strtod_l+0x76>
 800c95e:	2a06      	cmp	r2, #6
 800c960:	d12d      	bne.n	800c9be <_strtod_l+0xca>
 800c962:	1c6b      	adds	r3, r5, #1
 800c964:	931b      	str	r3, [sp, #108]	; 0x6c
 800c966:	2300      	movs	r3, #0
 800c968:	930f      	str	r3, [sp, #60]	; 0x3c
 800c96a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <_strtod_l+0x82>
 800c970:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c972:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d01b      	beq.n	800c9b4 <_strtod_l+0xc0>
 800c97c:	2380      	movs	r3, #128	; 0x80
 800c97e:	0032      	movs	r2, r6
 800c980:	061b      	lsls	r3, r3, #24
 800c982:	18fb      	adds	r3, r7, r3
 800c984:	0010      	movs	r0, r2
 800c986:	0019      	movs	r1, r3
 800c988:	b021      	add	sp, #132	; 0x84
 800c98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c98c:	2a20      	cmp	r2, #32
 800c98e:	d1c5      	bne.n	800c91c <_strtod_l+0x28>
 800c990:	3101      	adds	r1, #1
 800c992:	e7b8      	b.n	800c906 <_strtod_l+0x12>
 800c994:	2a2d      	cmp	r2, #45	; 0x2d
 800c996:	d1c1      	bne.n	800c91c <_strtod_l+0x28>
 800c998:	3a2c      	subs	r2, #44	; 0x2c
 800c99a:	920f      	str	r2, [sp, #60]	; 0x3c
 800c99c:	1c4a      	adds	r2, r1, #1
 800c99e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c9a0:	784a      	ldrb	r2, [r1, #1]
 800c9a2:	2a00      	cmp	r2, #0
 800c9a4:	d1bc      	bne.n	800c920 <_strtod_l+0x2c>
 800c9a6:	9b07      	ldr	r3, [sp, #28]
 800c9a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1dd      	bne.n	800c970 <_strtod_l+0x7c>
 800c9b4:	0032      	movs	r2, r6
 800c9b6:	003b      	movs	r3, r7
 800c9b8:	e7e4      	b.n	800c984 <_strtod_l+0x90>
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	e7ed      	b.n	800c99a <_strtod_l+0xa6>
 800c9be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c9c0:	2a00      	cmp	r2, #0
 800c9c2:	d007      	beq.n	800c9d4 <_strtod_l+0xe0>
 800c9c4:	2135      	movs	r1, #53	; 0x35
 800c9c6:	a81e      	add	r0, sp, #120	; 0x78
 800c9c8:	f003 ff05 	bl	80107d6 <__copybits>
 800c9cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9ce:	9804      	ldr	r0, [sp, #16]
 800c9d0:	f003 face 	bl	800ff70 <_Bfree>
 800c9d4:	9805      	ldr	r0, [sp, #20]
 800c9d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9d8:	3801      	subs	r0, #1
 800c9da:	2804      	cmp	r0, #4
 800c9dc:	d806      	bhi.n	800c9ec <_strtod_l+0xf8>
 800c9de:	f7f3 fb9b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c9e2:	0312      	.short	0x0312
 800c9e4:	1e1c      	.short	0x1e1c
 800c9e6:	12          	.byte	0x12
 800c9e7:	00          	.byte	0x00
 800c9e8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c9ea:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c9ec:	05e4      	lsls	r4, r4, #23
 800c9ee:	d502      	bpl.n	800c9f6 <_strtod_l+0x102>
 800c9f0:	2380      	movs	r3, #128	; 0x80
 800c9f2:	061b      	lsls	r3, r3, #24
 800c9f4:	431f      	orrs	r7, r3
 800c9f6:	4b6a      	ldr	r3, [pc, #424]	; (800cba0 <_strtod_l+0x2ac>)
 800c9f8:	423b      	tst	r3, r7
 800c9fa:	d1b6      	bne.n	800c96a <_strtod_l+0x76>
 800c9fc:	f001 ffac 	bl	800e958 <__errno>
 800ca00:	2322      	movs	r3, #34	; 0x22
 800ca02:	6003      	str	r3, [r0, #0]
 800ca04:	e7b1      	b.n	800c96a <_strtod_l+0x76>
 800ca06:	4967      	ldr	r1, [pc, #412]	; (800cba4 <_strtod_l+0x2b0>)
 800ca08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ca0a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ca0c:	400a      	ands	r2, r1
 800ca0e:	4966      	ldr	r1, [pc, #408]	; (800cba8 <_strtod_l+0x2b4>)
 800ca10:	185b      	adds	r3, r3, r1
 800ca12:	051b      	lsls	r3, r3, #20
 800ca14:	431a      	orrs	r2, r3
 800ca16:	0017      	movs	r7, r2
 800ca18:	e7e8      	b.n	800c9ec <_strtod_l+0xf8>
 800ca1a:	4f61      	ldr	r7, [pc, #388]	; (800cba0 <_strtod_l+0x2ac>)
 800ca1c:	e7e6      	b.n	800c9ec <_strtod_l+0xf8>
 800ca1e:	2601      	movs	r6, #1
 800ca20:	4f62      	ldr	r7, [pc, #392]	; (800cbac <_strtod_l+0x2b8>)
 800ca22:	4276      	negs	r6, r6
 800ca24:	e7e2      	b.n	800c9ec <_strtod_l+0xf8>
 800ca26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b30      	cmp	r3, #48	; 0x30
 800ca30:	d0f9      	beq.n	800ca26 <_strtod_l+0x132>
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d099      	beq.n	800c96a <_strtod_l+0x76>
 800ca36:	2301      	movs	r3, #1
 800ca38:	9309      	str	r3, [sp, #36]	; 0x24
 800ca3a:	2500      	movs	r5, #0
 800ca3c:	220a      	movs	r2, #10
 800ca3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca40:	950d      	str	r5, [sp, #52]	; 0x34
 800ca42:	9310      	str	r3, [sp, #64]	; 0x40
 800ca44:	9508      	str	r5, [sp, #32]
 800ca46:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ca48:	7804      	ldrb	r4, [r0, #0]
 800ca4a:	0023      	movs	r3, r4
 800ca4c:	3b30      	subs	r3, #48	; 0x30
 800ca4e:	b2d9      	uxtb	r1, r3
 800ca50:	2909      	cmp	r1, #9
 800ca52:	d927      	bls.n	800caa4 <_strtod_l+0x1b0>
 800ca54:	2201      	movs	r2, #1
 800ca56:	4956      	ldr	r1, [pc, #344]	; (800cbb0 <_strtod_l+0x2bc>)
 800ca58:	f001 fe0f 	bl	800e67a <strncmp>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d031      	beq.n	800cac4 <_strtod_l+0x1d0>
 800ca60:	2000      	movs	r0, #0
 800ca62:	0023      	movs	r3, r4
 800ca64:	4684      	mov	ip, r0
 800ca66:	9a08      	ldr	r2, [sp, #32]
 800ca68:	900c      	str	r0, [sp, #48]	; 0x30
 800ca6a:	9205      	str	r2, [sp, #20]
 800ca6c:	2220      	movs	r2, #32
 800ca6e:	0019      	movs	r1, r3
 800ca70:	4391      	bics	r1, r2
 800ca72:	000a      	movs	r2, r1
 800ca74:	2100      	movs	r1, #0
 800ca76:	9106      	str	r1, [sp, #24]
 800ca78:	2a45      	cmp	r2, #69	; 0x45
 800ca7a:	d000      	beq.n	800ca7e <_strtod_l+0x18a>
 800ca7c:	e0c2      	b.n	800cc04 <_strtod_l+0x310>
 800ca7e:	9b05      	ldr	r3, [sp, #20]
 800ca80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca82:	4303      	orrs	r3, r0
 800ca84:	4313      	orrs	r3, r2
 800ca86:	428b      	cmp	r3, r1
 800ca88:	d08d      	beq.n	800c9a6 <_strtod_l+0xb2>
 800ca8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca8c:	9307      	str	r3, [sp, #28]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca92:	9b07      	ldr	r3, [sp, #28]
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	2b2b      	cmp	r3, #43	; 0x2b
 800ca98:	d071      	beq.n	800cb7e <_strtod_l+0x28a>
 800ca9a:	000c      	movs	r4, r1
 800ca9c:	2b2d      	cmp	r3, #45	; 0x2d
 800ca9e:	d174      	bne.n	800cb8a <_strtod_l+0x296>
 800caa0:	2401      	movs	r4, #1
 800caa2:	e06d      	b.n	800cb80 <_strtod_l+0x28c>
 800caa4:	9908      	ldr	r1, [sp, #32]
 800caa6:	2908      	cmp	r1, #8
 800caa8:	dc09      	bgt.n	800cabe <_strtod_l+0x1ca>
 800caaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800caac:	4351      	muls	r1, r2
 800caae:	185b      	adds	r3, r3, r1
 800cab0:	930d      	str	r3, [sp, #52]	; 0x34
 800cab2:	9b08      	ldr	r3, [sp, #32]
 800cab4:	3001      	adds	r0, #1
 800cab6:	3301      	adds	r3, #1
 800cab8:	9308      	str	r3, [sp, #32]
 800caba:	901b      	str	r0, [sp, #108]	; 0x6c
 800cabc:	e7c3      	b.n	800ca46 <_strtod_l+0x152>
 800cabe:	4355      	muls	r5, r2
 800cac0:	195d      	adds	r5, r3, r5
 800cac2:	e7f6      	b.n	800cab2 <_strtod_l+0x1be>
 800cac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cac6:	1c5a      	adds	r2, r3, #1
 800cac8:	921b      	str	r2, [sp, #108]	; 0x6c
 800caca:	9a08      	ldr	r2, [sp, #32]
 800cacc:	785b      	ldrb	r3, [r3, #1]
 800cace:	2a00      	cmp	r2, #0
 800cad0:	d03a      	beq.n	800cb48 <_strtod_l+0x254>
 800cad2:	900c      	str	r0, [sp, #48]	; 0x30
 800cad4:	9205      	str	r2, [sp, #20]
 800cad6:	001a      	movs	r2, r3
 800cad8:	3a30      	subs	r2, #48	; 0x30
 800cada:	2a09      	cmp	r2, #9
 800cadc:	d912      	bls.n	800cb04 <_strtod_l+0x210>
 800cade:	2201      	movs	r2, #1
 800cae0:	4694      	mov	ip, r2
 800cae2:	e7c3      	b.n	800ca6c <_strtod_l+0x178>
 800cae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cae6:	3001      	adds	r0, #1
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	921b      	str	r2, [sp, #108]	; 0x6c
 800caec:	785b      	ldrb	r3, [r3, #1]
 800caee:	2b30      	cmp	r3, #48	; 0x30
 800caf0:	d0f8      	beq.n	800cae4 <_strtod_l+0x1f0>
 800caf2:	001a      	movs	r2, r3
 800caf4:	3a31      	subs	r2, #49	; 0x31
 800caf6:	2a08      	cmp	r2, #8
 800caf8:	d83c      	bhi.n	800cb74 <_strtod_l+0x280>
 800cafa:	900c      	str	r0, [sp, #48]	; 0x30
 800cafc:	2000      	movs	r0, #0
 800cafe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cb00:	9005      	str	r0, [sp, #20]
 800cb02:	9210      	str	r2, [sp, #64]	; 0x40
 800cb04:	001a      	movs	r2, r3
 800cb06:	1c41      	adds	r1, r0, #1
 800cb08:	3a30      	subs	r2, #48	; 0x30
 800cb0a:	2b30      	cmp	r3, #48	; 0x30
 800cb0c:	d016      	beq.n	800cb3c <_strtod_l+0x248>
 800cb0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb10:	185b      	adds	r3, r3, r1
 800cb12:	930c      	str	r3, [sp, #48]	; 0x30
 800cb14:	9b05      	ldr	r3, [sp, #20]
 800cb16:	210a      	movs	r1, #10
 800cb18:	469c      	mov	ip, r3
 800cb1a:	4484      	add	ip, r0
 800cb1c:	4563      	cmp	r3, ip
 800cb1e:	d115      	bne.n	800cb4c <_strtod_l+0x258>
 800cb20:	9905      	ldr	r1, [sp, #20]
 800cb22:	9b05      	ldr	r3, [sp, #20]
 800cb24:	3101      	adds	r1, #1
 800cb26:	1809      	adds	r1, r1, r0
 800cb28:	181b      	adds	r3, r3, r0
 800cb2a:	9105      	str	r1, [sp, #20]
 800cb2c:	2b08      	cmp	r3, #8
 800cb2e:	dc19      	bgt.n	800cb64 <_strtod_l+0x270>
 800cb30:	230a      	movs	r3, #10
 800cb32:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cb34:	434b      	muls	r3, r1
 800cb36:	2100      	movs	r1, #0
 800cb38:	18d3      	adds	r3, r2, r3
 800cb3a:	930d      	str	r3, [sp, #52]	; 0x34
 800cb3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb3e:	0008      	movs	r0, r1
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	921b      	str	r2, [sp, #108]	; 0x6c
 800cb44:	785b      	ldrb	r3, [r3, #1]
 800cb46:	e7c6      	b.n	800cad6 <_strtod_l+0x1e2>
 800cb48:	9808      	ldr	r0, [sp, #32]
 800cb4a:	e7d0      	b.n	800caee <_strtod_l+0x1fa>
 800cb4c:	1c5c      	adds	r4, r3, #1
 800cb4e:	2b08      	cmp	r3, #8
 800cb50:	dc04      	bgt.n	800cb5c <_strtod_l+0x268>
 800cb52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb54:	434b      	muls	r3, r1
 800cb56:	930d      	str	r3, [sp, #52]	; 0x34
 800cb58:	0023      	movs	r3, r4
 800cb5a:	e7df      	b.n	800cb1c <_strtod_l+0x228>
 800cb5c:	2c10      	cmp	r4, #16
 800cb5e:	dcfb      	bgt.n	800cb58 <_strtod_l+0x264>
 800cb60:	434d      	muls	r5, r1
 800cb62:	e7f9      	b.n	800cb58 <_strtod_l+0x264>
 800cb64:	9b05      	ldr	r3, [sp, #20]
 800cb66:	2100      	movs	r1, #0
 800cb68:	2b10      	cmp	r3, #16
 800cb6a:	dce7      	bgt.n	800cb3c <_strtod_l+0x248>
 800cb6c:	230a      	movs	r3, #10
 800cb6e:	435d      	muls	r5, r3
 800cb70:	1955      	adds	r5, r2, r5
 800cb72:	e7e3      	b.n	800cb3c <_strtod_l+0x248>
 800cb74:	2200      	movs	r2, #0
 800cb76:	920c      	str	r2, [sp, #48]	; 0x30
 800cb78:	9205      	str	r2, [sp, #20]
 800cb7a:	3201      	adds	r2, #1
 800cb7c:	e7b0      	b.n	800cae0 <_strtod_l+0x1ec>
 800cb7e:	2400      	movs	r4, #0
 800cb80:	9b07      	ldr	r3, [sp, #28]
 800cb82:	3302      	adds	r3, #2
 800cb84:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb86:	9b07      	ldr	r3, [sp, #28]
 800cb88:	789b      	ldrb	r3, [r3, #2]
 800cb8a:	001a      	movs	r2, r3
 800cb8c:	3a30      	subs	r2, #48	; 0x30
 800cb8e:	2a09      	cmp	r2, #9
 800cb90:	d914      	bls.n	800cbbc <_strtod_l+0x2c8>
 800cb92:	9a07      	ldr	r2, [sp, #28]
 800cb94:	921b      	str	r2, [sp, #108]	; 0x6c
 800cb96:	2200      	movs	r2, #0
 800cb98:	e033      	b.n	800cc02 <_strtod_l+0x30e>
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	08013574 	.word	0x08013574
 800cba0:	7ff00000 	.word	0x7ff00000
 800cba4:	ffefffff 	.word	0xffefffff
 800cba8:	00000433 	.word	0x00000433
 800cbac:	7fffffff 	.word	0x7fffffff
 800cbb0:	08013570 	.word	0x08013570
 800cbb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	921b      	str	r2, [sp, #108]	; 0x6c
 800cbba:	785b      	ldrb	r3, [r3, #1]
 800cbbc:	2b30      	cmp	r3, #48	; 0x30
 800cbbe:	d0f9      	beq.n	800cbb4 <_strtod_l+0x2c0>
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	9206      	str	r2, [sp, #24]
 800cbc4:	001a      	movs	r2, r3
 800cbc6:	3a31      	subs	r2, #49	; 0x31
 800cbc8:	2a08      	cmp	r2, #8
 800cbca:	d81b      	bhi.n	800cc04 <_strtod_l+0x310>
 800cbcc:	3b30      	subs	r3, #48	; 0x30
 800cbce:	930e      	str	r3, [sp, #56]	; 0x38
 800cbd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbd2:	9306      	str	r3, [sp, #24]
 800cbd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbd6:	1c59      	adds	r1, r3, #1
 800cbd8:	911b      	str	r1, [sp, #108]	; 0x6c
 800cbda:	785b      	ldrb	r3, [r3, #1]
 800cbdc:	001a      	movs	r2, r3
 800cbde:	3a30      	subs	r2, #48	; 0x30
 800cbe0:	2a09      	cmp	r2, #9
 800cbe2:	d93a      	bls.n	800cc5a <_strtod_l+0x366>
 800cbe4:	9a06      	ldr	r2, [sp, #24]
 800cbe6:	1a8a      	subs	r2, r1, r2
 800cbe8:	49b2      	ldr	r1, [pc, #712]	; (800ceb4 <_strtod_l+0x5c0>)
 800cbea:	9106      	str	r1, [sp, #24]
 800cbec:	2a08      	cmp	r2, #8
 800cbee:	dc04      	bgt.n	800cbfa <_strtod_l+0x306>
 800cbf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbf2:	9206      	str	r2, [sp, #24]
 800cbf4:	428a      	cmp	r2, r1
 800cbf6:	dd00      	ble.n	800cbfa <_strtod_l+0x306>
 800cbf8:	9106      	str	r1, [sp, #24]
 800cbfa:	2c00      	cmp	r4, #0
 800cbfc:	d002      	beq.n	800cc04 <_strtod_l+0x310>
 800cbfe:	9a06      	ldr	r2, [sp, #24]
 800cc00:	4252      	negs	r2, r2
 800cc02:	9206      	str	r2, [sp, #24]
 800cc04:	9a05      	ldr	r2, [sp, #20]
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	d14d      	bne.n	800cca6 <_strtod_l+0x3b2>
 800cc0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc0c:	4310      	orrs	r0, r2
 800cc0e:	d000      	beq.n	800cc12 <_strtod_l+0x31e>
 800cc10:	e6ab      	b.n	800c96a <_strtod_l+0x76>
 800cc12:	4662      	mov	r2, ip
 800cc14:	2a00      	cmp	r2, #0
 800cc16:	d000      	beq.n	800cc1a <_strtod_l+0x326>
 800cc18:	e6c5      	b.n	800c9a6 <_strtod_l+0xb2>
 800cc1a:	2b69      	cmp	r3, #105	; 0x69
 800cc1c:	d027      	beq.n	800cc6e <_strtod_l+0x37a>
 800cc1e:	dc23      	bgt.n	800cc68 <_strtod_l+0x374>
 800cc20:	2b49      	cmp	r3, #73	; 0x49
 800cc22:	d024      	beq.n	800cc6e <_strtod_l+0x37a>
 800cc24:	2b4e      	cmp	r3, #78	; 0x4e
 800cc26:	d000      	beq.n	800cc2a <_strtod_l+0x336>
 800cc28:	e6bd      	b.n	800c9a6 <_strtod_l+0xb2>
 800cc2a:	49a3      	ldr	r1, [pc, #652]	; (800ceb8 <_strtod_l+0x5c4>)
 800cc2c:	a81b      	add	r0, sp, #108	; 0x6c
 800cc2e:	f003 f88d 	bl	800fd4c <__match>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d100      	bne.n	800cc38 <_strtod_l+0x344>
 800cc36:	e6b6      	b.n	800c9a6 <_strtod_l+0xb2>
 800cc38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b28      	cmp	r3, #40	; 0x28
 800cc3e:	d12c      	bne.n	800cc9a <_strtod_l+0x3a6>
 800cc40:	499e      	ldr	r1, [pc, #632]	; (800cebc <_strtod_l+0x5c8>)
 800cc42:	aa1e      	add	r2, sp, #120	; 0x78
 800cc44:	a81b      	add	r0, sp, #108	; 0x6c
 800cc46:	f003 f895 	bl	800fd74 <__hexnan>
 800cc4a:	2805      	cmp	r0, #5
 800cc4c:	d125      	bne.n	800cc9a <_strtod_l+0x3a6>
 800cc4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cc50:	4a9b      	ldr	r2, [pc, #620]	; (800cec0 <_strtod_l+0x5cc>)
 800cc52:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cc54:	431a      	orrs	r2, r3
 800cc56:	0017      	movs	r7, r2
 800cc58:	e687      	b.n	800c96a <_strtod_l+0x76>
 800cc5a:	220a      	movs	r2, #10
 800cc5c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cc5e:	434a      	muls	r2, r1
 800cc60:	18d2      	adds	r2, r2, r3
 800cc62:	3a30      	subs	r2, #48	; 0x30
 800cc64:	920e      	str	r2, [sp, #56]	; 0x38
 800cc66:	e7b5      	b.n	800cbd4 <_strtod_l+0x2e0>
 800cc68:	2b6e      	cmp	r3, #110	; 0x6e
 800cc6a:	d0de      	beq.n	800cc2a <_strtod_l+0x336>
 800cc6c:	e69b      	b.n	800c9a6 <_strtod_l+0xb2>
 800cc6e:	4995      	ldr	r1, [pc, #596]	; (800cec4 <_strtod_l+0x5d0>)
 800cc70:	a81b      	add	r0, sp, #108	; 0x6c
 800cc72:	f003 f86b 	bl	800fd4c <__match>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d100      	bne.n	800cc7c <_strtod_l+0x388>
 800cc7a:	e694      	b.n	800c9a6 <_strtod_l+0xb2>
 800cc7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc7e:	4992      	ldr	r1, [pc, #584]	; (800cec8 <_strtod_l+0x5d4>)
 800cc80:	3b01      	subs	r3, #1
 800cc82:	a81b      	add	r0, sp, #108	; 0x6c
 800cc84:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc86:	f003 f861 	bl	800fd4c <__match>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d102      	bne.n	800cc94 <_strtod_l+0x3a0>
 800cc8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc90:	3301      	adds	r3, #1
 800cc92:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc94:	2600      	movs	r6, #0
 800cc96:	4f8a      	ldr	r7, [pc, #552]	; (800cec0 <_strtod_l+0x5cc>)
 800cc98:	e667      	b.n	800c96a <_strtod_l+0x76>
 800cc9a:	488c      	ldr	r0, [pc, #560]	; (800cecc <_strtod_l+0x5d8>)
 800cc9c:	f001 fea6 	bl	800e9ec <nan>
 800cca0:	0006      	movs	r6, r0
 800cca2:	000f      	movs	r7, r1
 800cca4:	e661      	b.n	800c96a <_strtod_l+0x76>
 800cca6:	9b06      	ldr	r3, [sp, #24]
 800cca8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccaa:	1a9b      	subs	r3, r3, r2
 800ccac:	9309      	str	r3, [sp, #36]	; 0x24
 800ccae:	9b08      	ldr	r3, [sp, #32]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <_strtod_l+0x3c4>
 800ccb4:	9b05      	ldr	r3, [sp, #20]
 800ccb6:	9308      	str	r3, [sp, #32]
 800ccb8:	9c05      	ldr	r4, [sp, #20]
 800ccba:	2c10      	cmp	r4, #16
 800ccbc:	dd00      	ble.n	800ccc0 <_strtod_l+0x3cc>
 800ccbe:	2410      	movs	r4, #16
 800ccc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ccc2:	f7f6 f9cf 	bl	8003064 <__aeabi_ui2d>
 800ccc6:	9b05      	ldr	r3, [sp, #20]
 800ccc8:	0006      	movs	r6, r0
 800ccca:	000f      	movs	r7, r1
 800cccc:	2b09      	cmp	r3, #9
 800ccce:	dd15      	ble.n	800ccfc <_strtod_l+0x408>
 800ccd0:	0022      	movs	r2, r4
 800ccd2:	4b7f      	ldr	r3, [pc, #508]	; (800ced0 <_strtod_l+0x5dc>)
 800ccd4:	3a09      	subs	r2, #9
 800ccd6:	00d2      	lsls	r2, r2, #3
 800ccd8:	189b      	adds	r3, r3, r2
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f7f5 faf9 	bl	80022d4 <__aeabi_dmul>
 800cce2:	0006      	movs	r6, r0
 800cce4:	0028      	movs	r0, r5
 800cce6:	000f      	movs	r7, r1
 800cce8:	f7f6 f9bc 	bl	8003064 <__aeabi_ui2d>
 800ccec:	0002      	movs	r2, r0
 800ccee:	000b      	movs	r3, r1
 800ccf0:	0030      	movs	r0, r6
 800ccf2:	0039      	movs	r1, r7
 800ccf4:	f7f4 fb94 	bl	8001420 <__aeabi_dadd>
 800ccf8:	0006      	movs	r6, r0
 800ccfa:	000f      	movs	r7, r1
 800ccfc:	9b05      	ldr	r3, [sp, #20]
 800ccfe:	2b0f      	cmp	r3, #15
 800cd00:	dc39      	bgt.n	800cd76 <_strtod_l+0x482>
 800cd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d100      	bne.n	800cd0a <_strtod_l+0x416>
 800cd08:	e62f      	b.n	800c96a <_strtod_l+0x76>
 800cd0a:	dd24      	ble.n	800cd56 <_strtod_l+0x462>
 800cd0c:	2b16      	cmp	r3, #22
 800cd0e:	dc09      	bgt.n	800cd24 <_strtod_l+0x430>
 800cd10:	496f      	ldr	r1, [pc, #444]	; (800ced0 <_strtod_l+0x5dc>)
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	18c9      	adds	r1, r1, r3
 800cd16:	0032      	movs	r2, r6
 800cd18:	6808      	ldr	r0, [r1, #0]
 800cd1a:	6849      	ldr	r1, [r1, #4]
 800cd1c:	003b      	movs	r3, r7
 800cd1e:	f7f5 fad9 	bl	80022d4 <__aeabi_dmul>
 800cd22:	e7bd      	b.n	800cca0 <_strtod_l+0x3ac>
 800cd24:	2325      	movs	r3, #37	; 0x25
 800cd26:	9a05      	ldr	r2, [sp, #20]
 800cd28:	1a9b      	subs	r3, r3, r2
 800cd2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	db22      	blt.n	800cd76 <_strtod_l+0x482>
 800cd30:	240f      	movs	r4, #15
 800cd32:	9b05      	ldr	r3, [sp, #20]
 800cd34:	4d66      	ldr	r5, [pc, #408]	; (800ced0 <_strtod_l+0x5dc>)
 800cd36:	1ae4      	subs	r4, r4, r3
 800cd38:	00e1      	lsls	r1, r4, #3
 800cd3a:	1869      	adds	r1, r5, r1
 800cd3c:	0032      	movs	r2, r6
 800cd3e:	6808      	ldr	r0, [r1, #0]
 800cd40:	6849      	ldr	r1, [r1, #4]
 800cd42:	003b      	movs	r3, r7
 800cd44:	f7f5 fac6 	bl	80022d4 <__aeabi_dmul>
 800cd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd4a:	1b1c      	subs	r4, r3, r4
 800cd4c:	00e4      	lsls	r4, r4, #3
 800cd4e:	192d      	adds	r5, r5, r4
 800cd50:	682a      	ldr	r2, [r5, #0]
 800cd52:	686b      	ldr	r3, [r5, #4]
 800cd54:	e7e3      	b.n	800cd1e <_strtod_l+0x42a>
 800cd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd58:	3316      	adds	r3, #22
 800cd5a:	db0c      	blt.n	800cd76 <_strtod_l+0x482>
 800cd5c:	9906      	ldr	r1, [sp, #24]
 800cd5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd60:	4b5b      	ldr	r3, [pc, #364]	; (800ced0 <_strtod_l+0x5dc>)
 800cd62:	1a52      	subs	r2, r2, r1
 800cd64:	00d2      	lsls	r2, r2, #3
 800cd66:	189b      	adds	r3, r3, r2
 800cd68:	0030      	movs	r0, r6
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	0039      	movs	r1, r7
 800cd70:	f7f4 feb6 	bl	8001ae0 <__aeabi_ddiv>
 800cd74:	e794      	b.n	800cca0 <_strtod_l+0x3ac>
 800cd76:	9b05      	ldr	r3, [sp, #20]
 800cd78:	1b1c      	subs	r4, r3, r4
 800cd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7c:	18e4      	adds	r4, r4, r3
 800cd7e:	2c00      	cmp	r4, #0
 800cd80:	dd72      	ble.n	800ce68 <_strtod_l+0x574>
 800cd82:	220f      	movs	r2, #15
 800cd84:	0023      	movs	r3, r4
 800cd86:	4013      	ands	r3, r2
 800cd88:	4214      	tst	r4, r2
 800cd8a:	d00a      	beq.n	800cda2 <_strtod_l+0x4ae>
 800cd8c:	4950      	ldr	r1, [pc, #320]	; (800ced0 <_strtod_l+0x5dc>)
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	18c9      	adds	r1, r1, r3
 800cd92:	0032      	movs	r2, r6
 800cd94:	6808      	ldr	r0, [r1, #0]
 800cd96:	6849      	ldr	r1, [r1, #4]
 800cd98:	003b      	movs	r3, r7
 800cd9a:	f7f5 fa9b 	bl	80022d4 <__aeabi_dmul>
 800cd9e:	0006      	movs	r6, r0
 800cda0:	000f      	movs	r7, r1
 800cda2:	230f      	movs	r3, #15
 800cda4:	439c      	bics	r4, r3
 800cda6:	d04a      	beq.n	800ce3e <_strtod_l+0x54a>
 800cda8:	3326      	adds	r3, #38	; 0x26
 800cdaa:	33ff      	adds	r3, #255	; 0xff
 800cdac:	429c      	cmp	r4, r3
 800cdae:	dd22      	ble.n	800cdf6 <_strtod_l+0x502>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	9305      	str	r3, [sp, #20]
 800cdb4:	9306      	str	r3, [sp, #24]
 800cdb6:	930d      	str	r3, [sp, #52]	; 0x34
 800cdb8:	9308      	str	r3, [sp, #32]
 800cdba:	2322      	movs	r3, #34	; 0x22
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	9a04      	ldr	r2, [sp, #16]
 800cdc0:	4f3f      	ldr	r7, [pc, #252]	; (800cec0 <_strtod_l+0x5cc>)
 800cdc2:	6013      	str	r3, [r2, #0]
 800cdc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdc6:	42b3      	cmp	r3, r6
 800cdc8:	d100      	bne.n	800cdcc <_strtod_l+0x4d8>
 800cdca:	e5ce      	b.n	800c96a <_strtod_l+0x76>
 800cdcc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cdce:	9804      	ldr	r0, [sp, #16]
 800cdd0:	f003 f8ce 	bl	800ff70 <_Bfree>
 800cdd4:	9908      	ldr	r1, [sp, #32]
 800cdd6:	9804      	ldr	r0, [sp, #16]
 800cdd8:	f003 f8ca 	bl	800ff70 <_Bfree>
 800cddc:	9906      	ldr	r1, [sp, #24]
 800cdde:	9804      	ldr	r0, [sp, #16]
 800cde0:	f003 f8c6 	bl	800ff70 <_Bfree>
 800cde4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cde6:	9804      	ldr	r0, [sp, #16]
 800cde8:	f003 f8c2 	bl	800ff70 <_Bfree>
 800cdec:	9905      	ldr	r1, [sp, #20]
 800cdee:	9804      	ldr	r0, [sp, #16]
 800cdf0:	f003 f8be 	bl	800ff70 <_Bfree>
 800cdf4:	e5b9      	b.n	800c96a <_strtod_l+0x76>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	0030      	movs	r0, r6
 800cdfa:	0039      	movs	r1, r7
 800cdfc:	4d35      	ldr	r5, [pc, #212]	; (800ced4 <_strtod_l+0x5e0>)
 800cdfe:	1124      	asrs	r4, r4, #4
 800ce00:	9307      	str	r3, [sp, #28]
 800ce02:	2c01      	cmp	r4, #1
 800ce04:	dc1e      	bgt.n	800ce44 <_strtod_l+0x550>
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <_strtod_l+0x51a>
 800ce0a:	0006      	movs	r6, r0
 800ce0c:	000f      	movs	r7, r1
 800ce0e:	4b32      	ldr	r3, [pc, #200]	; (800ced8 <_strtod_l+0x5e4>)
 800ce10:	9a07      	ldr	r2, [sp, #28]
 800ce12:	18ff      	adds	r7, r7, r3
 800ce14:	4b2f      	ldr	r3, [pc, #188]	; (800ced4 <_strtod_l+0x5e0>)
 800ce16:	00d2      	lsls	r2, r2, #3
 800ce18:	189d      	adds	r5, r3, r2
 800ce1a:	6828      	ldr	r0, [r5, #0]
 800ce1c:	6869      	ldr	r1, [r5, #4]
 800ce1e:	0032      	movs	r2, r6
 800ce20:	003b      	movs	r3, r7
 800ce22:	f7f5 fa57 	bl	80022d4 <__aeabi_dmul>
 800ce26:	4b26      	ldr	r3, [pc, #152]	; (800cec0 <_strtod_l+0x5cc>)
 800ce28:	4a2c      	ldr	r2, [pc, #176]	; (800cedc <_strtod_l+0x5e8>)
 800ce2a:	0006      	movs	r6, r0
 800ce2c:	400b      	ands	r3, r1
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d8be      	bhi.n	800cdb0 <_strtod_l+0x4bc>
 800ce32:	4a2b      	ldr	r2, [pc, #172]	; (800cee0 <_strtod_l+0x5ec>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d913      	bls.n	800ce60 <_strtod_l+0x56c>
 800ce38:	2601      	movs	r6, #1
 800ce3a:	4f2a      	ldr	r7, [pc, #168]	; (800cee4 <_strtod_l+0x5f0>)
 800ce3c:	4276      	negs	r6, r6
 800ce3e:	2300      	movs	r3, #0
 800ce40:	9307      	str	r3, [sp, #28]
 800ce42:	e088      	b.n	800cf56 <_strtod_l+0x662>
 800ce44:	2201      	movs	r2, #1
 800ce46:	4214      	tst	r4, r2
 800ce48:	d004      	beq.n	800ce54 <_strtod_l+0x560>
 800ce4a:	682a      	ldr	r2, [r5, #0]
 800ce4c:	686b      	ldr	r3, [r5, #4]
 800ce4e:	f7f5 fa41 	bl	80022d4 <__aeabi_dmul>
 800ce52:	2301      	movs	r3, #1
 800ce54:	9a07      	ldr	r2, [sp, #28]
 800ce56:	1064      	asrs	r4, r4, #1
 800ce58:	3201      	adds	r2, #1
 800ce5a:	9207      	str	r2, [sp, #28]
 800ce5c:	3508      	adds	r5, #8
 800ce5e:	e7d0      	b.n	800ce02 <_strtod_l+0x50e>
 800ce60:	23d4      	movs	r3, #212	; 0xd4
 800ce62:	049b      	lsls	r3, r3, #18
 800ce64:	18cf      	adds	r7, r1, r3
 800ce66:	e7ea      	b.n	800ce3e <_strtod_l+0x54a>
 800ce68:	2c00      	cmp	r4, #0
 800ce6a:	d0e8      	beq.n	800ce3e <_strtod_l+0x54a>
 800ce6c:	4264      	negs	r4, r4
 800ce6e:	230f      	movs	r3, #15
 800ce70:	0022      	movs	r2, r4
 800ce72:	401a      	ands	r2, r3
 800ce74:	421c      	tst	r4, r3
 800ce76:	d00a      	beq.n	800ce8e <_strtod_l+0x59a>
 800ce78:	4b15      	ldr	r3, [pc, #84]	; (800ced0 <_strtod_l+0x5dc>)
 800ce7a:	00d2      	lsls	r2, r2, #3
 800ce7c:	189b      	adds	r3, r3, r2
 800ce7e:	0030      	movs	r0, r6
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	0039      	movs	r1, r7
 800ce86:	f7f4 fe2b 	bl	8001ae0 <__aeabi_ddiv>
 800ce8a:	0006      	movs	r6, r0
 800ce8c:	000f      	movs	r7, r1
 800ce8e:	1124      	asrs	r4, r4, #4
 800ce90:	d0d5      	beq.n	800ce3e <_strtod_l+0x54a>
 800ce92:	2c1f      	cmp	r4, #31
 800ce94:	dd28      	ble.n	800cee8 <_strtod_l+0x5f4>
 800ce96:	2300      	movs	r3, #0
 800ce98:	9305      	str	r3, [sp, #20]
 800ce9a:	9306      	str	r3, [sp, #24]
 800ce9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ce9e:	9308      	str	r3, [sp, #32]
 800cea0:	2322      	movs	r3, #34	; 0x22
 800cea2:	9a04      	ldr	r2, [sp, #16]
 800cea4:	2600      	movs	r6, #0
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ceaa:	2700      	movs	r7, #0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d18d      	bne.n	800cdcc <_strtod_l+0x4d8>
 800ceb0:	e55b      	b.n	800c96a <_strtod_l+0x76>
 800ceb2:	46c0      	nop			; (mov r8, r8)
 800ceb4:	00004e1f 	.word	0x00004e1f
 800ceb8:	080136d6 	.word	0x080136d6
 800cebc:	08013588 	.word	0x08013588
 800cec0:	7ff00000 	.word	0x7ff00000
 800cec4:	080136ce 	.word	0x080136ce
 800cec8:	080137ba 	.word	0x080137ba
 800cecc:	080137b6 	.word	0x080137b6
 800ced0:	08013910 	.word	0x08013910
 800ced4:	080138e8 	.word	0x080138e8
 800ced8:	fcb00000 	.word	0xfcb00000
 800cedc:	7ca00000 	.word	0x7ca00000
 800cee0:	7c900000 	.word	0x7c900000
 800cee4:	7fefffff 	.word	0x7fefffff
 800cee8:	2310      	movs	r3, #16
 800ceea:	0022      	movs	r2, r4
 800ceec:	401a      	ands	r2, r3
 800ceee:	9207      	str	r2, [sp, #28]
 800cef0:	421c      	tst	r4, r3
 800cef2:	d001      	beq.n	800cef8 <_strtod_l+0x604>
 800cef4:	335a      	adds	r3, #90	; 0x5a
 800cef6:	9307      	str	r3, [sp, #28]
 800cef8:	0030      	movs	r0, r6
 800cefa:	0039      	movs	r1, r7
 800cefc:	2300      	movs	r3, #0
 800cefe:	4dc4      	ldr	r5, [pc, #784]	; (800d210 <_strtod_l+0x91c>)
 800cf00:	2201      	movs	r2, #1
 800cf02:	4214      	tst	r4, r2
 800cf04:	d004      	beq.n	800cf10 <_strtod_l+0x61c>
 800cf06:	682a      	ldr	r2, [r5, #0]
 800cf08:	686b      	ldr	r3, [r5, #4]
 800cf0a:	f7f5 f9e3 	bl	80022d4 <__aeabi_dmul>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	1064      	asrs	r4, r4, #1
 800cf12:	3508      	adds	r5, #8
 800cf14:	2c00      	cmp	r4, #0
 800cf16:	d1f3      	bne.n	800cf00 <_strtod_l+0x60c>
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d001      	beq.n	800cf20 <_strtod_l+0x62c>
 800cf1c:	0006      	movs	r6, r0
 800cf1e:	000f      	movs	r7, r1
 800cf20:	9b07      	ldr	r3, [sp, #28]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00f      	beq.n	800cf46 <_strtod_l+0x652>
 800cf26:	236b      	movs	r3, #107	; 0x6b
 800cf28:	007a      	lsls	r2, r7, #1
 800cf2a:	0d52      	lsrs	r2, r2, #21
 800cf2c:	0039      	movs	r1, r7
 800cf2e:	1a9b      	subs	r3, r3, r2
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	dd08      	ble.n	800cf46 <_strtod_l+0x652>
 800cf34:	2b1f      	cmp	r3, #31
 800cf36:	dc00      	bgt.n	800cf3a <_strtod_l+0x646>
 800cf38:	e121      	b.n	800d17e <_strtod_l+0x88a>
 800cf3a:	2600      	movs	r6, #0
 800cf3c:	2b34      	cmp	r3, #52	; 0x34
 800cf3e:	dc00      	bgt.n	800cf42 <_strtod_l+0x64e>
 800cf40:	e116      	b.n	800d170 <_strtod_l+0x87c>
 800cf42:	27dc      	movs	r7, #220	; 0xdc
 800cf44:	04bf      	lsls	r7, r7, #18
 800cf46:	2200      	movs	r2, #0
 800cf48:	2300      	movs	r3, #0
 800cf4a:	0030      	movs	r0, r6
 800cf4c:	0039      	movs	r1, r7
 800cf4e:	f7f3 fa7d 	bl	800044c <__aeabi_dcmpeq>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d19f      	bne.n	800ce96 <_strtod_l+0x5a2>
 800cf56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf58:	9a08      	ldr	r2, [sp, #32]
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cf5e:	9b05      	ldr	r3, [sp, #20]
 800cf60:	9804      	ldr	r0, [sp, #16]
 800cf62:	f003 f86d 	bl	8010040 <__s2b>
 800cf66:	900d      	str	r0, [sp, #52]	; 0x34
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d100      	bne.n	800cf6e <_strtod_l+0x67a>
 800cf6c:	e720      	b.n	800cdb0 <_strtod_l+0x4bc>
 800cf6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf70:	9906      	ldr	r1, [sp, #24]
 800cf72:	17da      	asrs	r2, r3, #31
 800cf74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf76:	1a5b      	subs	r3, r3, r1
 800cf78:	401a      	ands	r2, r3
 800cf7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7c:	9215      	str	r2, [sp, #84]	; 0x54
 800cf7e:	43db      	mvns	r3, r3
 800cf80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf82:	17db      	asrs	r3, r3, #31
 800cf84:	401a      	ands	r2, r3
 800cf86:	2300      	movs	r3, #0
 800cf88:	9218      	str	r2, [sp, #96]	; 0x60
 800cf8a:	9305      	str	r3, [sp, #20]
 800cf8c:	9306      	str	r3, [sp, #24]
 800cf8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf90:	9804      	ldr	r0, [sp, #16]
 800cf92:	6859      	ldr	r1, [r3, #4]
 800cf94:	f002 ffa8 	bl	800fee8 <_Balloc>
 800cf98:	9008      	str	r0, [sp, #32]
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d100      	bne.n	800cfa0 <_strtod_l+0x6ac>
 800cf9e:	e70c      	b.n	800cdba <_strtod_l+0x4c6>
 800cfa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfa2:	300c      	adds	r0, #12
 800cfa4:	0019      	movs	r1, r3
 800cfa6:	691a      	ldr	r2, [r3, #16]
 800cfa8:	310c      	adds	r1, #12
 800cfaa:	3202      	adds	r2, #2
 800cfac:	0092      	lsls	r2, r2, #2
 800cfae:	f001 fd13 	bl	800e9d8 <memcpy>
 800cfb2:	ab1e      	add	r3, sp, #120	; 0x78
 800cfb4:	9301      	str	r3, [sp, #4]
 800cfb6:	ab1d      	add	r3, sp, #116	; 0x74
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	0032      	movs	r2, r6
 800cfbc:	003b      	movs	r3, r7
 800cfbe:	9804      	ldr	r0, [sp, #16]
 800cfc0:	9610      	str	r6, [sp, #64]	; 0x40
 800cfc2:	9711      	str	r7, [sp, #68]	; 0x44
 800cfc4:	f003 fb7e 	bl	80106c4 <__d2b>
 800cfc8:	901c      	str	r0, [sp, #112]	; 0x70
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d100      	bne.n	800cfd0 <_strtod_l+0x6dc>
 800cfce:	e6f4      	b.n	800cdba <_strtod_l+0x4c6>
 800cfd0:	2101      	movs	r1, #1
 800cfd2:	9804      	ldr	r0, [sp, #16]
 800cfd4:	f003 f8c8 	bl	8010168 <__i2b>
 800cfd8:	9006      	str	r0, [sp, #24]
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d100      	bne.n	800cfe0 <_strtod_l+0x6ec>
 800cfde:	e6ec      	b.n	800cdba <_strtod_l+0x4c6>
 800cfe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cfe4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cfe6:	1ad4      	subs	r4, r2, r3
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	db01      	blt.n	800cff0 <_strtod_l+0x6fc>
 800cfec:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cfee:	195d      	adds	r5, r3, r5
 800cff0:	9907      	ldr	r1, [sp, #28]
 800cff2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cff4:	1a5b      	subs	r3, r3, r1
 800cff6:	2136      	movs	r1, #54	; 0x36
 800cff8:	189b      	adds	r3, r3, r2
 800cffa:	1a8a      	subs	r2, r1, r2
 800cffc:	4985      	ldr	r1, [pc, #532]	; (800d214 <_strtod_l+0x920>)
 800cffe:	2001      	movs	r0, #1
 800d000:	468c      	mov	ip, r1
 800d002:	2100      	movs	r1, #0
 800d004:	3b01      	subs	r3, #1
 800d006:	9114      	str	r1, [sp, #80]	; 0x50
 800d008:	9012      	str	r0, [sp, #72]	; 0x48
 800d00a:	4563      	cmp	r3, ip
 800d00c:	da07      	bge.n	800d01e <_strtod_l+0x72a>
 800d00e:	4661      	mov	r1, ip
 800d010:	1ac9      	subs	r1, r1, r3
 800d012:	1a52      	subs	r2, r2, r1
 800d014:	291f      	cmp	r1, #31
 800d016:	dd00      	ble.n	800d01a <_strtod_l+0x726>
 800d018:	e0b6      	b.n	800d188 <_strtod_l+0x894>
 800d01a:	4088      	lsls	r0, r1
 800d01c:	9012      	str	r0, [sp, #72]	; 0x48
 800d01e:	18ab      	adds	r3, r5, r2
 800d020:	930c      	str	r3, [sp, #48]	; 0x30
 800d022:	18a4      	adds	r4, r4, r2
 800d024:	9b07      	ldr	r3, [sp, #28]
 800d026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d028:	191c      	adds	r4, r3, r4
 800d02a:	002b      	movs	r3, r5
 800d02c:	4295      	cmp	r5, r2
 800d02e:	dd00      	ble.n	800d032 <_strtod_l+0x73e>
 800d030:	0013      	movs	r3, r2
 800d032:	42a3      	cmp	r3, r4
 800d034:	dd00      	ble.n	800d038 <_strtod_l+0x744>
 800d036:	0023      	movs	r3, r4
 800d038:	2b00      	cmp	r3, #0
 800d03a:	dd04      	ble.n	800d046 <_strtod_l+0x752>
 800d03c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d03e:	1ae4      	subs	r4, r4, r3
 800d040:	1ad2      	subs	r2, r2, r3
 800d042:	920c      	str	r2, [sp, #48]	; 0x30
 800d044:	1aed      	subs	r5, r5, r3
 800d046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d048:	2b00      	cmp	r3, #0
 800d04a:	dd17      	ble.n	800d07c <_strtod_l+0x788>
 800d04c:	001a      	movs	r2, r3
 800d04e:	9906      	ldr	r1, [sp, #24]
 800d050:	9804      	ldr	r0, [sp, #16]
 800d052:	f003 f951 	bl	80102f8 <__pow5mult>
 800d056:	9006      	str	r0, [sp, #24]
 800d058:	2800      	cmp	r0, #0
 800d05a:	d100      	bne.n	800d05e <_strtod_l+0x76a>
 800d05c:	e6ad      	b.n	800cdba <_strtod_l+0x4c6>
 800d05e:	0001      	movs	r1, r0
 800d060:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d062:	9804      	ldr	r0, [sp, #16]
 800d064:	f003 f898 	bl	8010198 <__multiply>
 800d068:	900e      	str	r0, [sp, #56]	; 0x38
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d100      	bne.n	800d070 <_strtod_l+0x77c>
 800d06e:	e6a4      	b.n	800cdba <_strtod_l+0x4c6>
 800d070:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d072:	9804      	ldr	r0, [sp, #16]
 800d074:	f002 ff7c 	bl	800ff70 <_Bfree>
 800d078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d07a:	931c      	str	r3, [sp, #112]	; 0x70
 800d07c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d07e:	2b00      	cmp	r3, #0
 800d080:	dd00      	ble.n	800d084 <_strtod_l+0x790>
 800d082:	e087      	b.n	800d194 <_strtod_l+0x8a0>
 800d084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d086:	2b00      	cmp	r3, #0
 800d088:	dd08      	ble.n	800d09c <_strtod_l+0x7a8>
 800d08a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d08c:	9908      	ldr	r1, [sp, #32]
 800d08e:	9804      	ldr	r0, [sp, #16]
 800d090:	f003 f932 	bl	80102f8 <__pow5mult>
 800d094:	9008      	str	r0, [sp, #32]
 800d096:	2800      	cmp	r0, #0
 800d098:	d100      	bne.n	800d09c <_strtod_l+0x7a8>
 800d09a:	e68e      	b.n	800cdba <_strtod_l+0x4c6>
 800d09c:	2c00      	cmp	r4, #0
 800d09e:	dd08      	ble.n	800d0b2 <_strtod_l+0x7be>
 800d0a0:	0022      	movs	r2, r4
 800d0a2:	9908      	ldr	r1, [sp, #32]
 800d0a4:	9804      	ldr	r0, [sp, #16]
 800d0a6:	f003 f983 	bl	80103b0 <__lshift>
 800d0aa:	9008      	str	r0, [sp, #32]
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d100      	bne.n	800d0b2 <_strtod_l+0x7be>
 800d0b0:	e683      	b.n	800cdba <_strtod_l+0x4c6>
 800d0b2:	2d00      	cmp	r5, #0
 800d0b4:	dd08      	ble.n	800d0c8 <_strtod_l+0x7d4>
 800d0b6:	002a      	movs	r2, r5
 800d0b8:	9906      	ldr	r1, [sp, #24]
 800d0ba:	9804      	ldr	r0, [sp, #16]
 800d0bc:	f003 f978 	bl	80103b0 <__lshift>
 800d0c0:	9006      	str	r0, [sp, #24]
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d100      	bne.n	800d0c8 <_strtod_l+0x7d4>
 800d0c6:	e678      	b.n	800cdba <_strtod_l+0x4c6>
 800d0c8:	9a08      	ldr	r2, [sp, #32]
 800d0ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d0cc:	9804      	ldr	r0, [sp, #16]
 800d0ce:	f003 f9f9 	bl	80104c4 <__mdiff>
 800d0d2:	9005      	str	r0, [sp, #20]
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d100      	bne.n	800d0da <_strtod_l+0x7e6>
 800d0d8:	e66f      	b.n	800cdba <_strtod_l+0x4c6>
 800d0da:	2200      	movs	r2, #0
 800d0dc:	68c3      	ldr	r3, [r0, #12]
 800d0de:	9906      	ldr	r1, [sp, #24]
 800d0e0:	60c2      	str	r2, [r0, #12]
 800d0e2:	930c      	str	r3, [sp, #48]	; 0x30
 800d0e4:	f003 f9d2 	bl	801048c <__mcmp>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	da5d      	bge.n	800d1a8 <_strtod_l+0x8b4>
 800d0ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0ee:	4333      	orrs	r3, r6
 800d0f0:	d000      	beq.n	800d0f4 <_strtod_l+0x800>
 800d0f2:	e088      	b.n	800d206 <_strtod_l+0x912>
 800d0f4:	033b      	lsls	r3, r7, #12
 800d0f6:	d000      	beq.n	800d0fa <_strtod_l+0x806>
 800d0f8:	e085      	b.n	800d206 <_strtod_l+0x912>
 800d0fa:	22d6      	movs	r2, #214	; 0xd6
 800d0fc:	4b46      	ldr	r3, [pc, #280]	; (800d218 <_strtod_l+0x924>)
 800d0fe:	04d2      	lsls	r2, r2, #19
 800d100:	403b      	ands	r3, r7
 800d102:	4293      	cmp	r3, r2
 800d104:	d97f      	bls.n	800d206 <_strtod_l+0x912>
 800d106:	9b05      	ldr	r3, [sp, #20]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d103      	bne.n	800d116 <_strtod_l+0x822>
 800d10e:	9b05      	ldr	r3, [sp, #20]
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	2b01      	cmp	r3, #1
 800d114:	dd77      	ble.n	800d206 <_strtod_l+0x912>
 800d116:	9905      	ldr	r1, [sp, #20]
 800d118:	2201      	movs	r2, #1
 800d11a:	9804      	ldr	r0, [sp, #16]
 800d11c:	f003 f948 	bl	80103b0 <__lshift>
 800d120:	9906      	ldr	r1, [sp, #24]
 800d122:	9005      	str	r0, [sp, #20]
 800d124:	f003 f9b2 	bl	801048c <__mcmp>
 800d128:	2800      	cmp	r0, #0
 800d12a:	dd6c      	ble.n	800d206 <_strtod_l+0x912>
 800d12c:	9907      	ldr	r1, [sp, #28]
 800d12e:	003b      	movs	r3, r7
 800d130:	4a39      	ldr	r2, [pc, #228]	; (800d218 <_strtod_l+0x924>)
 800d132:	2900      	cmp	r1, #0
 800d134:	d100      	bne.n	800d138 <_strtod_l+0x844>
 800d136:	e094      	b.n	800d262 <_strtod_l+0x96e>
 800d138:	0011      	movs	r1, r2
 800d13a:	20d6      	movs	r0, #214	; 0xd6
 800d13c:	4039      	ands	r1, r7
 800d13e:	04c0      	lsls	r0, r0, #19
 800d140:	4281      	cmp	r1, r0
 800d142:	dd00      	ble.n	800d146 <_strtod_l+0x852>
 800d144:	e08d      	b.n	800d262 <_strtod_l+0x96e>
 800d146:	23dc      	movs	r3, #220	; 0xdc
 800d148:	049b      	lsls	r3, r3, #18
 800d14a:	4299      	cmp	r1, r3
 800d14c:	dc00      	bgt.n	800d150 <_strtod_l+0x85c>
 800d14e:	e6a7      	b.n	800cea0 <_strtod_l+0x5ac>
 800d150:	0030      	movs	r0, r6
 800d152:	0039      	movs	r1, r7
 800d154:	4b31      	ldr	r3, [pc, #196]	; (800d21c <_strtod_l+0x928>)
 800d156:	2200      	movs	r2, #0
 800d158:	f7f5 f8bc 	bl	80022d4 <__aeabi_dmul>
 800d15c:	4b2e      	ldr	r3, [pc, #184]	; (800d218 <_strtod_l+0x924>)
 800d15e:	0006      	movs	r6, r0
 800d160:	000f      	movs	r7, r1
 800d162:	420b      	tst	r3, r1
 800d164:	d000      	beq.n	800d168 <_strtod_l+0x874>
 800d166:	e631      	b.n	800cdcc <_strtod_l+0x4d8>
 800d168:	2322      	movs	r3, #34	; 0x22
 800d16a:	9a04      	ldr	r2, [sp, #16]
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	e62d      	b.n	800cdcc <_strtod_l+0x4d8>
 800d170:	234b      	movs	r3, #75	; 0x4b
 800d172:	1a9a      	subs	r2, r3, r2
 800d174:	3b4c      	subs	r3, #76	; 0x4c
 800d176:	4093      	lsls	r3, r2
 800d178:	4019      	ands	r1, r3
 800d17a:	000f      	movs	r7, r1
 800d17c:	e6e3      	b.n	800cf46 <_strtod_l+0x652>
 800d17e:	2201      	movs	r2, #1
 800d180:	4252      	negs	r2, r2
 800d182:	409a      	lsls	r2, r3
 800d184:	4016      	ands	r6, r2
 800d186:	e6de      	b.n	800cf46 <_strtod_l+0x652>
 800d188:	4925      	ldr	r1, [pc, #148]	; (800d220 <_strtod_l+0x92c>)
 800d18a:	1acb      	subs	r3, r1, r3
 800d18c:	0001      	movs	r1, r0
 800d18e:	4099      	lsls	r1, r3
 800d190:	9114      	str	r1, [sp, #80]	; 0x50
 800d192:	e743      	b.n	800d01c <_strtod_l+0x728>
 800d194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d196:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d198:	9804      	ldr	r0, [sp, #16]
 800d19a:	f003 f909 	bl	80103b0 <__lshift>
 800d19e:	901c      	str	r0, [sp, #112]	; 0x70
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d000      	beq.n	800d1a6 <_strtod_l+0x8b2>
 800d1a4:	e76e      	b.n	800d084 <_strtod_l+0x790>
 800d1a6:	e608      	b.n	800cdba <_strtod_l+0x4c6>
 800d1a8:	970e      	str	r7, [sp, #56]	; 0x38
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d177      	bne.n	800d29e <_strtod_l+0x9aa>
 800d1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1b0:	033b      	lsls	r3, r7, #12
 800d1b2:	0b1b      	lsrs	r3, r3, #12
 800d1b4:	2a00      	cmp	r2, #0
 800d1b6:	d039      	beq.n	800d22c <_strtod_l+0x938>
 800d1b8:	4a1a      	ldr	r2, [pc, #104]	; (800d224 <_strtod_l+0x930>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d139      	bne.n	800d232 <_strtod_l+0x93e>
 800d1be:	2101      	movs	r1, #1
 800d1c0:	9b07      	ldr	r3, [sp, #28]
 800d1c2:	4249      	negs	r1, r1
 800d1c4:	0032      	movs	r2, r6
 800d1c6:	0008      	movs	r0, r1
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00b      	beq.n	800d1e4 <_strtod_l+0x8f0>
 800d1cc:	24d4      	movs	r4, #212	; 0xd4
 800d1ce:	4b12      	ldr	r3, [pc, #72]	; (800d218 <_strtod_l+0x924>)
 800d1d0:	0008      	movs	r0, r1
 800d1d2:	403b      	ands	r3, r7
 800d1d4:	04e4      	lsls	r4, r4, #19
 800d1d6:	42a3      	cmp	r3, r4
 800d1d8:	d804      	bhi.n	800d1e4 <_strtod_l+0x8f0>
 800d1da:	306c      	adds	r0, #108	; 0x6c
 800d1dc:	0d1b      	lsrs	r3, r3, #20
 800d1de:	1ac3      	subs	r3, r0, r3
 800d1e0:	4099      	lsls	r1, r3
 800d1e2:	0008      	movs	r0, r1
 800d1e4:	4282      	cmp	r2, r0
 800d1e6:	d124      	bne.n	800d232 <_strtod_l+0x93e>
 800d1e8:	4b0f      	ldr	r3, [pc, #60]	; (800d228 <_strtod_l+0x934>)
 800d1ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d1ec:	4299      	cmp	r1, r3
 800d1ee:	d102      	bne.n	800d1f6 <_strtod_l+0x902>
 800d1f0:	3201      	adds	r2, #1
 800d1f2:	d100      	bne.n	800d1f6 <_strtod_l+0x902>
 800d1f4:	e5e1      	b.n	800cdba <_strtod_l+0x4c6>
 800d1f6:	4b08      	ldr	r3, [pc, #32]	; (800d218 <_strtod_l+0x924>)
 800d1f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1fa:	2600      	movs	r6, #0
 800d1fc:	401a      	ands	r2, r3
 800d1fe:	0013      	movs	r3, r2
 800d200:	2280      	movs	r2, #128	; 0x80
 800d202:	0352      	lsls	r2, r2, #13
 800d204:	189f      	adds	r7, r3, r2
 800d206:	9b07      	ldr	r3, [sp, #28]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1a1      	bne.n	800d150 <_strtod_l+0x85c>
 800d20c:	e5de      	b.n	800cdcc <_strtod_l+0x4d8>
 800d20e:	46c0      	nop			; (mov r8, r8)
 800d210:	080135a0 	.word	0x080135a0
 800d214:	fffffc02 	.word	0xfffffc02
 800d218:	7ff00000 	.word	0x7ff00000
 800d21c:	39500000 	.word	0x39500000
 800d220:	fffffbe2 	.word	0xfffffbe2
 800d224:	000fffff 	.word	0x000fffff
 800d228:	7fefffff 	.word	0x7fefffff
 800d22c:	4333      	orrs	r3, r6
 800d22e:	d100      	bne.n	800d232 <_strtod_l+0x93e>
 800d230:	e77c      	b.n	800d12c <_strtod_l+0x838>
 800d232:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01d      	beq.n	800d274 <_strtod_l+0x980>
 800d238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d23a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d23c:	4213      	tst	r3, r2
 800d23e:	d0e2      	beq.n	800d206 <_strtod_l+0x912>
 800d240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d242:	0030      	movs	r0, r6
 800d244:	0039      	movs	r1, r7
 800d246:	9a07      	ldr	r2, [sp, #28]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d017      	beq.n	800d27c <_strtod_l+0x988>
 800d24c:	f7ff fb3a 	bl	800c8c4 <sulp>
 800d250:	0002      	movs	r2, r0
 800d252:	000b      	movs	r3, r1
 800d254:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d256:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d258:	f7f4 f8e2 	bl	8001420 <__aeabi_dadd>
 800d25c:	0006      	movs	r6, r0
 800d25e:	000f      	movs	r7, r1
 800d260:	e7d1      	b.n	800d206 <_strtod_l+0x912>
 800d262:	2601      	movs	r6, #1
 800d264:	4013      	ands	r3, r2
 800d266:	4a98      	ldr	r2, [pc, #608]	; (800d4c8 <_strtod_l+0xbd4>)
 800d268:	4276      	negs	r6, r6
 800d26a:	189b      	adds	r3, r3, r2
 800d26c:	4a97      	ldr	r2, [pc, #604]	; (800d4cc <_strtod_l+0xbd8>)
 800d26e:	431a      	orrs	r2, r3
 800d270:	0017      	movs	r7, r2
 800d272:	e7c8      	b.n	800d206 <_strtod_l+0x912>
 800d274:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d276:	4233      	tst	r3, r6
 800d278:	d0c5      	beq.n	800d206 <_strtod_l+0x912>
 800d27a:	e7e1      	b.n	800d240 <_strtod_l+0x94c>
 800d27c:	f7ff fb22 	bl	800c8c4 <sulp>
 800d280:	0002      	movs	r2, r0
 800d282:	000b      	movs	r3, r1
 800d284:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d286:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d288:	f7f5 fae6 	bl	8002858 <__aeabi_dsub>
 800d28c:	2200      	movs	r2, #0
 800d28e:	2300      	movs	r3, #0
 800d290:	0006      	movs	r6, r0
 800d292:	000f      	movs	r7, r1
 800d294:	f7f3 f8da 	bl	800044c <__aeabi_dcmpeq>
 800d298:	2800      	cmp	r0, #0
 800d29a:	d0b4      	beq.n	800d206 <_strtod_l+0x912>
 800d29c:	e600      	b.n	800cea0 <_strtod_l+0x5ac>
 800d29e:	9906      	ldr	r1, [sp, #24]
 800d2a0:	9805      	ldr	r0, [sp, #20]
 800d2a2:	f003 fa6f 	bl	8010784 <__ratio>
 800d2a6:	2380      	movs	r3, #128	; 0x80
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	05db      	lsls	r3, r3, #23
 800d2ac:	0004      	movs	r4, r0
 800d2ae:	000d      	movs	r5, r1
 800d2b0:	f7f3 f8dc 	bl	800046c <__aeabi_dcmple>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d06d      	beq.n	800d394 <_strtod_l+0xaa0>
 800d2b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d000      	beq.n	800d2c0 <_strtod_l+0x9cc>
 800d2be:	e07e      	b.n	800d3be <_strtod_l+0xaca>
 800d2c0:	2e00      	cmp	r6, #0
 800d2c2:	d158      	bne.n	800d376 <_strtod_l+0xa82>
 800d2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2c6:	031b      	lsls	r3, r3, #12
 800d2c8:	d000      	beq.n	800d2cc <_strtod_l+0x9d8>
 800d2ca:	e07f      	b.n	800d3cc <_strtod_l+0xad8>
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	0020      	movs	r0, r4
 800d2d0:	0029      	movs	r1, r5
 800d2d2:	4b7f      	ldr	r3, [pc, #508]	; (800d4d0 <_strtod_l+0xbdc>)
 800d2d4:	f7f3 f8c0 	bl	8000458 <__aeabi_dcmplt>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d158      	bne.n	800d38e <_strtod_l+0xa9a>
 800d2dc:	0020      	movs	r0, r4
 800d2de:	0029      	movs	r1, r5
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	4b7c      	ldr	r3, [pc, #496]	; (800d4d4 <_strtod_l+0xbe0>)
 800d2e4:	f7f4 fff6 	bl	80022d4 <__aeabi_dmul>
 800d2e8:	0004      	movs	r4, r0
 800d2ea:	000d      	movs	r5, r1
 800d2ec:	2380      	movs	r3, #128	; 0x80
 800d2ee:	061b      	lsls	r3, r3, #24
 800d2f0:	940a      	str	r4, [sp, #40]	; 0x28
 800d2f2:	18eb      	adds	r3, r5, r3
 800d2f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2fa:	9212      	str	r2, [sp, #72]	; 0x48
 800d2fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d2fe:	4a76      	ldr	r2, [pc, #472]	; (800d4d8 <_strtod_l+0xbe4>)
 800d300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d302:	4013      	ands	r3, r2
 800d304:	9314      	str	r3, [sp, #80]	; 0x50
 800d306:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d308:	4b74      	ldr	r3, [pc, #464]	; (800d4dc <_strtod_l+0xbe8>)
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d000      	beq.n	800d310 <_strtod_l+0xa1c>
 800d30e:	e091      	b.n	800d434 <_strtod_l+0xb40>
 800d310:	4a73      	ldr	r2, [pc, #460]	; (800d4e0 <_strtod_l+0xbec>)
 800d312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d314:	4694      	mov	ip, r2
 800d316:	4463      	add	r3, ip
 800d318:	001f      	movs	r7, r3
 800d31a:	0030      	movs	r0, r6
 800d31c:	0019      	movs	r1, r3
 800d31e:	f003 f969 	bl	80105f4 <__ulp>
 800d322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d326:	f7f4 ffd5 	bl	80022d4 <__aeabi_dmul>
 800d32a:	0032      	movs	r2, r6
 800d32c:	003b      	movs	r3, r7
 800d32e:	f7f4 f877 	bl	8001420 <__aeabi_dadd>
 800d332:	4a69      	ldr	r2, [pc, #420]	; (800d4d8 <_strtod_l+0xbe4>)
 800d334:	4b6b      	ldr	r3, [pc, #428]	; (800d4e4 <_strtod_l+0xbf0>)
 800d336:	0006      	movs	r6, r0
 800d338:	400a      	ands	r2, r1
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d949      	bls.n	800d3d2 <_strtod_l+0xade>
 800d33e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d340:	4b69      	ldr	r3, [pc, #420]	; (800d4e8 <_strtod_l+0xbf4>)
 800d342:	429a      	cmp	r2, r3
 800d344:	d103      	bne.n	800d34e <_strtod_l+0xa5a>
 800d346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d348:	3301      	adds	r3, #1
 800d34a:	d100      	bne.n	800d34e <_strtod_l+0xa5a>
 800d34c:	e535      	b.n	800cdba <_strtod_l+0x4c6>
 800d34e:	2601      	movs	r6, #1
 800d350:	4f65      	ldr	r7, [pc, #404]	; (800d4e8 <_strtod_l+0xbf4>)
 800d352:	4276      	negs	r6, r6
 800d354:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d356:	9804      	ldr	r0, [sp, #16]
 800d358:	f002 fe0a 	bl	800ff70 <_Bfree>
 800d35c:	9908      	ldr	r1, [sp, #32]
 800d35e:	9804      	ldr	r0, [sp, #16]
 800d360:	f002 fe06 	bl	800ff70 <_Bfree>
 800d364:	9906      	ldr	r1, [sp, #24]
 800d366:	9804      	ldr	r0, [sp, #16]
 800d368:	f002 fe02 	bl	800ff70 <_Bfree>
 800d36c:	9905      	ldr	r1, [sp, #20]
 800d36e:	9804      	ldr	r0, [sp, #16]
 800d370:	f002 fdfe 	bl	800ff70 <_Bfree>
 800d374:	e60b      	b.n	800cf8e <_strtod_l+0x69a>
 800d376:	2e01      	cmp	r6, #1
 800d378:	d103      	bne.n	800d382 <_strtod_l+0xa8e>
 800d37a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d100      	bne.n	800d382 <_strtod_l+0xa8e>
 800d380:	e58e      	b.n	800cea0 <_strtod_l+0x5ac>
 800d382:	2300      	movs	r3, #0
 800d384:	4c59      	ldr	r4, [pc, #356]	; (800d4ec <_strtod_l+0xbf8>)
 800d386:	930a      	str	r3, [sp, #40]	; 0x28
 800d388:	940b      	str	r4, [sp, #44]	; 0x2c
 800d38a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d38c:	e01c      	b.n	800d3c8 <_strtod_l+0xad4>
 800d38e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d390:	4d50      	ldr	r5, [pc, #320]	; (800d4d4 <_strtod_l+0xbe0>)
 800d392:	e7ab      	b.n	800d2ec <_strtod_l+0x9f8>
 800d394:	2200      	movs	r2, #0
 800d396:	0020      	movs	r0, r4
 800d398:	0029      	movs	r1, r5
 800d39a:	4b4e      	ldr	r3, [pc, #312]	; (800d4d4 <_strtod_l+0xbe0>)
 800d39c:	f7f4 ff9a 	bl	80022d4 <__aeabi_dmul>
 800d3a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3a2:	0004      	movs	r4, r0
 800d3a4:	000b      	movs	r3, r1
 800d3a6:	000d      	movs	r5, r1
 800d3a8:	2a00      	cmp	r2, #0
 800d3aa:	d104      	bne.n	800d3b6 <_strtod_l+0xac2>
 800d3ac:	2280      	movs	r2, #128	; 0x80
 800d3ae:	0612      	lsls	r2, r2, #24
 800d3b0:	900a      	str	r0, [sp, #40]	; 0x28
 800d3b2:	188b      	adds	r3, r1, r2
 800d3b4:	e79e      	b.n	800d2f4 <_strtod_l+0xa00>
 800d3b6:	0002      	movs	r2, r0
 800d3b8:	920a      	str	r2, [sp, #40]	; 0x28
 800d3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3bc:	e79b      	b.n	800d2f6 <_strtod_l+0xa02>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4c43      	ldr	r4, [pc, #268]	; (800d4d0 <_strtod_l+0xbdc>)
 800d3c2:	930a      	str	r3, [sp, #40]	; 0x28
 800d3c4:	940b      	str	r4, [sp, #44]	; 0x2c
 800d3c6:	2400      	movs	r4, #0
 800d3c8:	4d41      	ldr	r5, [pc, #260]	; (800d4d0 <_strtod_l+0xbdc>)
 800d3ca:	e794      	b.n	800d2f6 <_strtod_l+0xa02>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	4c47      	ldr	r4, [pc, #284]	; (800d4ec <_strtod_l+0xbf8>)
 800d3d0:	e7f7      	b.n	800d3c2 <_strtod_l+0xace>
 800d3d2:	23d4      	movs	r3, #212	; 0xd4
 800d3d4:	049b      	lsls	r3, r3, #18
 800d3d6:	18cf      	adds	r7, r1, r3
 800d3d8:	9b07      	ldr	r3, [sp, #28]
 800d3da:	970e      	str	r7, [sp, #56]	; 0x38
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1b9      	bne.n	800d354 <_strtod_l+0xa60>
 800d3e0:	4b3d      	ldr	r3, [pc, #244]	; (800d4d8 <_strtod_l+0xbe4>)
 800d3e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d3e4:	403b      	ands	r3, r7
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d1b4      	bne.n	800d354 <_strtod_l+0xa60>
 800d3ea:	0020      	movs	r0, r4
 800d3ec:	0029      	movs	r1, r5
 800d3ee:	f7f3 f8b3 	bl	8000558 <__aeabi_d2lz>
 800d3f2:	f7f3 f8ed 	bl	80005d0 <__aeabi_l2d>
 800d3f6:	0002      	movs	r2, r0
 800d3f8:	000b      	movs	r3, r1
 800d3fa:	0020      	movs	r0, r4
 800d3fc:	0029      	movs	r1, r5
 800d3fe:	f7f5 fa2b 	bl	8002858 <__aeabi_dsub>
 800d402:	033b      	lsls	r3, r7, #12
 800d404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d406:	0b1b      	lsrs	r3, r3, #12
 800d408:	4333      	orrs	r3, r6
 800d40a:	4313      	orrs	r3, r2
 800d40c:	0004      	movs	r4, r0
 800d40e:	000d      	movs	r5, r1
 800d410:	4a37      	ldr	r2, [pc, #220]	; (800d4f0 <_strtod_l+0xbfc>)
 800d412:	2b00      	cmp	r3, #0
 800d414:	d054      	beq.n	800d4c0 <_strtod_l+0xbcc>
 800d416:	4b37      	ldr	r3, [pc, #220]	; (800d4f4 <_strtod_l+0xc00>)
 800d418:	f7f3 f81e 	bl	8000458 <__aeabi_dcmplt>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d000      	beq.n	800d422 <_strtod_l+0xb2e>
 800d420:	e4d4      	b.n	800cdcc <_strtod_l+0x4d8>
 800d422:	0020      	movs	r0, r4
 800d424:	0029      	movs	r1, r5
 800d426:	4a34      	ldr	r2, [pc, #208]	; (800d4f8 <_strtod_l+0xc04>)
 800d428:	4b2a      	ldr	r3, [pc, #168]	; (800d4d4 <_strtod_l+0xbe0>)
 800d42a:	f7f3 f829 	bl	8000480 <__aeabi_dcmpgt>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d090      	beq.n	800d354 <_strtod_l+0xa60>
 800d432:	e4cb      	b.n	800cdcc <_strtod_l+0x4d8>
 800d434:	9b07      	ldr	r3, [sp, #28]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d02b      	beq.n	800d492 <_strtod_l+0xb9e>
 800d43a:	23d4      	movs	r3, #212	; 0xd4
 800d43c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d43e:	04db      	lsls	r3, r3, #19
 800d440:	429a      	cmp	r2, r3
 800d442:	d826      	bhi.n	800d492 <_strtod_l+0xb9e>
 800d444:	0020      	movs	r0, r4
 800d446:	0029      	movs	r1, r5
 800d448:	4a2c      	ldr	r2, [pc, #176]	; (800d4fc <_strtod_l+0xc08>)
 800d44a:	4b2d      	ldr	r3, [pc, #180]	; (800d500 <_strtod_l+0xc0c>)
 800d44c:	f7f3 f80e 	bl	800046c <__aeabi_dcmple>
 800d450:	2800      	cmp	r0, #0
 800d452:	d017      	beq.n	800d484 <_strtod_l+0xb90>
 800d454:	0020      	movs	r0, r4
 800d456:	0029      	movs	r1, r5
 800d458:	f7f3 f860 	bl	800051c <__aeabi_d2uiz>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d100      	bne.n	800d462 <_strtod_l+0xb6e>
 800d460:	3001      	adds	r0, #1
 800d462:	f7f5 fdff 	bl	8003064 <__aeabi_ui2d>
 800d466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d468:	0004      	movs	r4, r0
 800d46a:	000b      	movs	r3, r1
 800d46c:	000d      	movs	r5, r1
 800d46e:	2a00      	cmp	r2, #0
 800d470:	d122      	bne.n	800d4b8 <_strtod_l+0xbc4>
 800d472:	2280      	movs	r2, #128	; 0x80
 800d474:	0612      	lsls	r2, r2, #24
 800d476:	188b      	adds	r3, r1, r2
 800d478:	9016      	str	r0, [sp, #88]	; 0x58
 800d47a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d47c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d47e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d480:	9212      	str	r2, [sp, #72]	; 0x48
 800d482:	9313      	str	r3, [sp, #76]	; 0x4c
 800d484:	22d6      	movs	r2, #214	; 0xd6
 800d486:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d488:	04d2      	lsls	r2, r2, #19
 800d48a:	189b      	adds	r3, r3, r2
 800d48c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d48e:	1a9b      	subs	r3, r3, r2
 800d490:	9313      	str	r3, [sp, #76]	; 0x4c
 800d492:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d494:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d496:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d498:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d49a:	f003 f8ab 	bl	80105f4 <__ulp>
 800d49e:	0002      	movs	r2, r0
 800d4a0:	000b      	movs	r3, r1
 800d4a2:	0030      	movs	r0, r6
 800d4a4:	0039      	movs	r1, r7
 800d4a6:	f7f4 ff15 	bl	80022d4 <__aeabi_dmul>
 800d4aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d4ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4ae:	f7f3 ffb7 	bl	8001420 <__aeabi_dadd>
 800d4b2:	0006      	movs	r6, r0
 800d4b4:	000f      	movs	r7, r1
 800d4b6:	e78f      	b.n	800d3d8 <_strtod_l+0xae4>
 800d4b8:	0002      	movs	r2, r0
 800d4ba:	9216      	str	r2, [sp, #88]	; 0x58
 800d4bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4be:	e7dd      	b.n	800d47c <_strtod_l+0xb88>
 800d4c0:	4b10      	ldr	r3, [pc, #64]	; (800d504 <_strtod_l+0xc10>)
 800d4c2:	f7f2 ffc9 	bl	8000458 <__aeabi_dcmplt>
 800d4c6:	e7b2      	b.n	800d42e <_strtod_l+0xb3a>
 800d4c8:	fff00000 	.word	0xfff00000
 800d4cc:	000fffff 	.word	0x000fffff
 800d4d0:	3ff00000 	.word	0x3ff00000
 800d4d4:	3fe00000 	.word	0x3fe00000
 800d4d8:	7ff00000 	.word	0x7ff00000
 800d4dc:	7fe00000 	.word	0x7fe00000
 800d4e0:	fcb00000 	.word	0xfcb00000
 800d4e4:	7c9fffff 	.word	0x7c9fffff
 800d4e8:	7fefffff 	.word	0x7fefffff
 800d4ec:	bff00000 	.word	0xbff00000
 800d4f0:	94a03595 	.word	0x94a03595
 800d4f4:	3fdfffff 	.word	0x3fdfffff
 800d4f8:	35afe535 	.word	0x35afe535
 800d4fc:	ffc00000 	.word	0xffc00000
 800d500:	41dfffff 	.word	0x41dfffff
 800d504:	3fcfffff 	.word	0x3fcfffff

0800d508 <_strtod_r>:
 800d508:	b510      	push	{r4, lr}
 800d50a:	4b02      	ldr	r3, [pc, #8]	; (800d514 <_strtod_r+0xc>)
 800d50c:	f7ff f9f2 	bl	800c8f4 <_strtod_l>
 800d510:	bd10      	pop	{r4, pc}
 800d512:	46c0      	nop			; (mov r8, r8)
 800d514:	20000100 	.word	0x20000100

0800d518 <strtod>:
 800d518:	b510      	push	{r4, lr}
 800d51a:	4c04      	ldr	r4, [pc, #16]	; (800d52c <strtod+0x14>)
 800d51c:	000a      	movs	r2, r1
 800d51e:	0001      	movs	r1, r0
 800d520:	4b03      	ldr	r3, [pc, #12]	; (800d530 <strtod+0x18>)
 800d522:	6820      	ldr	r0, [r4, #0]
 800d524:	f7ff f9e6 	bl	800c8f4 <_strtod_l>
 800d528:	bd10      	pop	{r4, pc}
 800d52a:	46c0      	nop			; (mov r8, r8)
 800d52c:	200002b8 	.word	0x200002b8
 800d530:	20000100 	.word	0x20000100

0800d534 <_strtol_l.constprop.0>:
 800d534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d536:	b087      	sub	sp, #28
 800d538:	001e      	movs	r6, r3
 800d53a:	9005      	str	r0, [sp, #20]
 800d53c:	9101      	str	r1, [sp, #4]
 800d53e:	9202      	str	r2, [sp, #8]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d048      	beq.n	800d5d6 <_strtol_l.constprop.0+0xa2>
 800d544:	000b      	movs	r3, r1
 800d546:	2e24      	cmp	r6, #36	; 0x24
 800d548:	d845      	bhi.n	800d5d6 <_strtol_l.constprop.0+0xa2>
 800d54a:	4a3b      	ldr	r2, [pc, #236]	; (800d638 <_strtol_l.constprop.0+0x104>)
 800d54c:	2108      	movs	r1, #8
 800d54e:	4694      	mov	ip, r2
 800d550:	001a      	movs	r2, r3
 800d552:	4660      	mov	r0, ip
 800d554:	7814      	ldrb	r4, [r2, #0]
 800d556:	3301      	adds	r3, #1
 800d558:	5d00      	ldrb	r0, [r0, r4]
 800d55a:	001d      	movs	r5, r3
 800d55c:	0007      	movs	r7, r0
 800d55e:	400f      	ands	r7, r1
 800d560:	4208      	tst	r0, r1
 800d562:	d1f5      	bne.n	800d550 <_strtol_l.constprop.0+0x1c>
 800d564:	2c2d      	cmp	r4, #45	; 0x2d
 800d566:	d13d      	bne.n	800d5e4 <_strtol_l.constprop.0+0xb0>
 800d568:	2701      	movs	r7, #1
 800d56a:	781c      	ldrb	r4, [r3, #0]
 800d56c:	1c95      	adds	r5, r2, #2
 800d56e:	2e00      	cmp	r6, #0
 800d570:	d05e      	beq.n	800d630 <_strtol_l.constprop.0+0xfc>
 800d572:	2e10      	cmp	r6, #16
 800d574:	d109      	bne.n	800d58a <_strtol_l.constprop.0+0x56>
 800d576:	2c30      	cmp	r4, #48	; 0x30
 800d578:	d107      	bne.n	800d58a <_strtol_l.constprop.0+0x56>
 800d57a:	2220      	movs	r2, #32
 800d57c:	782b      	ldrb	r3, [r5, #0]
 800d57e:	4393      	bics	r3, r2
 800d580:	2b58      	cmp	r3, #88	; 0x58
 800d582:	d150      	bne.n	800d626 <_strtol_l.constprop.0+0xf2>
 800d584:	2610      	movs	r6, #16
 800d586:	786c      	ldrb	r4, [r5, #1]
 800d588:	3502      	adds	r5, #2
 800d58a:	4b2c      	ldr	r3, [pc, #176]	; (800d63c <_strtol_l.constprop.0+0x108>)
 800d58c:	0031      	movs	r1, r6
 800d58e:	18fb      	adds	r3, r7, r3
 800d590:	0018      	movs	r0, r3
 800d592:	9303      	str	r3, [sp, #12]
 800d594:	f7f2 fe5a 	bl	800024c <__aeabi_uidivmod>
 800d598:	2200      	movs	r2, #0
 800d59a:	9104      	str	r1, [sp, #16]
 800d59c:	2101      	movs	r1, #1
 800d59e:	4684      	mov	ip, r0
 800d5a0:	0010      	movs	r0, r2
 800d5a2:	4249      	negs	r1, r1
 800d5a4:	0023      	movs	r3, r4
 800d5a6:	3b30      	subs	r3, #48	; 0x30
 800d5a8:	2b09      	cmp	r3, #9
 800d5aa:	d903      	bls.n	800d5b4 <_strtol_l.constprop.0+0x80>
 800d5ac:	3b11      	subs	r3, #17
 800d5ae:	2b19      	cmp	r3, #25
 800d5b0:	d81d      	bhi.n	800d5ee <_strtol_l.constprop.0+0xba>
 800d5b2:	330a      	adds	r3, #10
 800d5b4:	429e      	cmp	r6, r3
 800d5b6:	dd1e      	ble.n	800d5f6 <_strtol_l.constprop.0+0xc2>
 800d5b8:	1c54      	adds	r4, r2, #1
 800d5ba:	d009      	beq.n	800d5d0 <_strtol_l.constprop.0+0x9c>
 800d5bc:	000a      	movs	r2, r1
 800d5be:	4584      	cmp	ip, r0
 800d5c0:	d306      	bcc.n	800d5d0 <_strtol_l.constprop.0+0x9c>
 800d5c2:	d102      	bne.n	800d5ca <_strtol_l.constprop.0+0x96>
 800d5c4:	9c04      	ldr	r4, [sp, #16]
 800d5c6:	429c      	cmp	r4, r3
 800d5c8:	db02      	blt.n	800d5d0 <_strtol_l.constprop.0+0x9c>
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	4370      	muls	r0, r6
 800d5ce:	1818      	adds	r0, r3, r0
 800d5d0:	782c      	ldrb	r4, [r5, #0]
 800d5d2:	3501      	adds	r5, #1
 800d5d4:	e7e6      	b.n	800d5a4 <_strtol_l.constprop.0+0x70>
 800d5d6:	f001 f9bf 	bl	800e958 <__errno>
 800d5da:	2316      	movs	r3, #22
 800d5dc:	6003      	str	r3, [r0, #0]
 800d5de:	2000      	movs	r0, #0
 800d5e0:	b007      	add	sp, #28
 800d5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e4:	2c2b      	cmp	r4, #43	; 0x2b
 800d5e6:	d1c2      	bne.n	800d56e <_strtol_l.constprop.0+0x3a>
 800d5e8:	781c      	ldrb	r4, [r3, #0]
 800d5ea:	1c95      	adds	r5, r2, #2
 800d5ec:	e7bf      	b.n	800d56e <_strtol_l.constprop.0+0x3a>
 800d5ee:	0023      	movs	r3, r4
 800d5f0:	3b61      	subs	r3, #97	; 0x61
 800d5f2:	2b19      	cmp	r3, #25
 800d5f4:	d9dd      	bls.n	800d5b2 <_strtol_l.constprop.0+0x7e>
 800d5f6:	1c53      	adds	r3, r2, #1
 800d5f8:	d109      	bne.n	800d60e <_strtol_l.constprop.0+0xda>
 800d5fa:	2322      	movs	r3, #34	; 0x22
 800d5fc:	9a05      	ldr	r2, [sp, #20]
 800d5fe:	9803      	ldr	r0, [sp, #12]
 800d600:	6013      	str	r3, [r2, #0]
 800d602:	9b02      	ldr	r3, [sp, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d0eb      	beq.n	800d5e0 <_strtol_l.constprop.0+0xac>
 800d608:	1e6b      	subs	r3, r5, #1
 800d60a:	9301      	str	r3, [sp, #4]
 800d60c:	e007      	b.n	800d61e <_strtol_l.constprop.0+0xea>
 800d60e:	2f00      	cmp	r7, #0
 800d610:	d000      	beq.n	800d614 <_strtol_l.constprop.0+0xe0>
 800d612:	4240      	negs	r0, r0
 800d614:	9b02      	ldr	r3, [sp, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0e2      	beq.n	800d5e0 <_strtol_l.constprop.0+0xac>
 800d61a:	2a00      	cmp	r2, #0
 800d61c:	d1f4      	bne.n	800d608 <_strtol_l.constprop.0+0xd4>
 800d61e:	9b02      	ldr	r3, [sp, #8]
 800d620:	9a01      	ldr	r2, [sp, #4]
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e7dc      	b.n	800d5e0 <_strtol_l.constprop.0+0xac>
 800d626:	2430      	movs	r4, #48	; 0x30
 800d628:	2e00      	cmp	r6, #0
 800d62a:	d1ae      	bne.n	800d58a <_strtol_l.constprop.0+0x56>
 800d62c:	3608      	adds	r6, #8
 800d62e:	e7ac      	b.n	800d58a <_strtol_l.constprop.0+0x56>
 800d630:	2c30      	cmp	r4, #48	; 0x30
 800d632:	d0a2      	beq.n	800d57a <_strtol_l.constprop.0+0x46>
 800d634:	260a      	movs	r6, #10
 800d636:	e7a8      	b.n	800d58a <_strtol_l.constprop.0+0x56>
 800d638:	080135c9 	.word	0x080135c9
 800d63c:	7fffffff 	.word	0x7fffffff

0800d640 <_strtol_r>:
 800d640:	b510      	push	{r4, lr}
 800d642:	f7ff ff77 	bl	800d534 <_strtol_l.constprop.0>
 800d646:	bd10      	pop	{r4, pc}

0800d648 <strtol>:
 800d648:	b510      	push	{r4, lr}
 800d64a:	4c04      	ldr	r4, [pc, #16]	; (800d65c <strtol+0x14>)
 800d64c:	0013      	movs	r3, r2
 800d64e:	000a      	movs	r2, r1
 800d650:	0001      	movs	r1, r0
 800d652:	6820      	ldr	r0, [r4, #0]
 800d654:	f7ff ff6e 	bl	800d534 <_strtol_l.constprop.0>
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	46c0      	nop			; (mov r8, r8)
 800d65c:	200002b8 	.word	0x200002b8

0800d660 <__cvt>:
 800d660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d662:	001e      	movs	r6, r3
 800d664:	2300      	movs	r3, #0
 800d666:	0014      	movs	r4, r2
 800d668:	b08b      	sub	sp, #44	; 0x2c
 800d66a:	429e      	cmp	r6, r3
 800d66c:	da04      	bge.n	800d678 <__cvt+0x18>
 800d66e:	2180      	movs	r1, #128	; 0x80
 800d670:	0609      	lsls	r1, r1, #24
 800d672:	1873      	adds	r3, r6, r1
 800d674:	001e      	movs	r6, r3
 800d676:	232d      	movs	r3, #45	; 0x2d
 800d678:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d67a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d67c:	7013      	strb	r3, [r2, #0]
 800d67e:	2320      	movs	r3, #32
 800d680:	2203      	movs	r2, #3
 800d682:	439f      	bics	r7, r3
 800d684:	2f46      	cmp	r7, #70	; 0x46
 800d686:	d007      	beq.n	800d698 <__cvt+0x38>
 800d688:	003b      	movs	r3, r7
 800d68a:	3b45      	subs	r3, #69	; 0x45
 800d68c:	4259      	negs	r1, r3
 800d68e:	414b      	adcs	r3, r1
 800d690:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d692:	3a01      	subs	r2, #1
 800d694:	18cb      	adds	r3, r1, r3
 800d696:	9310      	str	r3, [sp, #64]	; 0x40
 800d698:	ab09      	add	r3, sp, #36	; 0x24
 800d69a:	9304      	str	r3, [sp, #16]
 800d69c:	ab08      	add	r3, sp, #32
 800d69e:	9303      	str	r3, [sp, #12]
 800d6a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6a2:	9200      	str	r2, [sp, #0]
 800d6a4:	9302      	str	r3, [sp, #8]
 800d6a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6a8:	0022      	movs	r2, r4
 800d6aa:	9301      	str	r3, [sp, #4]
 800d6ac:	0033      	movs	r3, r6
 800d6ae:	f001 fa55 	bl	800eb5c <_dtoa_r>
 800d6b2:	0005      	movs	r5, r0
 800d6b4:	2f47      	cmp	r7, #71	; 0x47
 800d6b6:	d102      	bne.n	800d6be <__cvt+0x5e>
 800d6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6ba:	07db      	lsls	r3, r3, #31
 800d6bc:	d528      	bpl.n	800d710 <__cvt+0xb0>
 800d6be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6c0:	18eb      	adds	r3, r5, r3
 800d6c2:	9307      	str	r3, [sp, #28]
 800d6c4:	2f46      	cmp	r7, #70	; 0x46
 800d6c6:	d114      	bne.n	800d6f2 <__cvt+0x92>
 800d6c8:	782b      	ldrb	r3, [r5, #0]
 800d6ca:	2b30      	cmp	r3, #48	; 0x30
 800d6cc:	d10c      	bne.n	800d6e8 <__cvt+0x88>
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	0020      	movs	r0, r4
 800d6d4:	0031      	movs	r1, r6
 800d6d6:	f7f2 feb9 	bl	800044c <__aeabi_dcmpeq>
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d104      	bne.n	800d6e8 <__cvt+0x88>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6e2:	1a9b      	subs	r3, r3, r2
 800d6e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d6e6:	6013      	str	r3, [r2, #0]
 800d6e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6ea:	9a07      	ldr	r2, [sp, #28]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	18d3      	adds	r3, r2, r3
 800d6f0:	9307      	str	r3, [sp, #28]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	0020      	movs	r0, r4
 800d6f8:	0031      	movs	r1, r6
 800d6fa:	f7f2 fea7 	bl	800044c <__aeabi_dcmpeq>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d001      	beq.n	800d706 <__cvt+0xa6>
 800d702:	9b07      	ldr	r3, [sp, #28]
 800d704:	9309      	str	r3, [sp, #36]	; 0x24
 800d706:	2230      	movs	r2, #48	; 0x30
 800d708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d70a:	9907      	ldr	r1, [sp, #28]
 800d70c:	428b      	cmp	r3, r1
 800d70e:	d306      	bcc.n	800d71e <__cvt+0xbe>
 800d710:	0028      	movs	r0, r5
 800d712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d714:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d716:	1b5b      	subs	r3, r3, r5
 800d718:	6013      	str	r3, [r2, #0]
 800d71a:	b00b      	add	sp, #44	; 0x2c
 800d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d71e:	1c59      	adds	r1, r3, #1
 800d720:	9109      	str	r1, [sp, #36]	; 0x24
 800d722:	701a      	strb	r2, [r3, #0]
 800d724:	e7f0      	b.n	800d708 <__cvt+0xa8>

0800d726 <__exponent>:
 800d726:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d728:	1c83      	adds	r3, r0, #2
 800d72a:	b087      	sub	sp, #28
 800d72c:	9303      	str	r3, [sp, #12]
 800d72e:	0005      	movs	r5, r0
 800d730:	000c      	movs	r4, r1
 800d732:	232b      	movs	r3, #43	; 0x2b
 800d734:	7002      	strb	r2, [r0, #0]
 800d736:	2900      	cmp	r1, #0
 800d738:	da01      	bge.n	800d73e <__exponent+0x18>
 800d73a:	424c      	negs	r4, r1
 800d73c:	3302      	adds	r3, #2
 800d73e:	706b      	strb	r3, [r5, #1]
 800d740:	2c09      	cmp	r4, #9
 800d742:	dd2f      	ble.n	800d7a4 <__exponent+0x7e>
 800d744:	270a      	movs	r7, #10
 800d746:	ab04      	add	r3, sp, #16
 800d748:	1dde      	adds	r6, r3, #7
 800d74a:	0020      	movs	r0, r4
 800d74c:	0039      	movs	r1, r7
 800d74e:	9601      	str	r6, [sp, #4]
 800d750:	f7f2 fe66 	bl	8000420 <__aeabi_idivmod>
 800d754:	3e01      	subs	r6, #1
 800d756:	3130      	adds	r1, #48	; 0x30
 800d758:	0020      	movs	r0, r4
 800d75a:	7031      	strb	r1, [r6, #0]
 800d75c:	0039      	movs	r1, r7
 800d75e:	9402      	str	r4, [sp, #8]
 800d760:	f7f2 fd78 	bl	8000254 <__divsi3>
 800d764:	9b02      	ldr	r3, [sp, #8]
 800d766:	0004      	movs	r4, r0
 800d768:	2b63      	cmp	r3, #99	; 0x63
 800d76a:	dcee      	bgt.n	800d74a <__exponent+0x24>
 800d76c:	9b01      	ldr	r3, [sp, #4]
 800d76e:	3430      	adds	r4, #48	; 0x30
 800d770:	1e9a      	subs	r2, r3, #2
 800d772:	0013      	movs	r3, r2
 800d774:	9903      	ldr	r1, [sp, #12]
 800d776:	7014      	strb	r4, [r2, #0]
 800d778:	a804      	add	r0, sp, #16
 800d77a:	3007      	adds	r0, #7
 800d77c:	4298      	cmp	r0, r3
 800d77e:	d80c      	bhi.n	800d79a <__exponent+0x74>
 800d780:	2300      	movs	r3, #0
 800d782:	4282      	cmp	r2, r0
 800d784:	d804      	bhi.n	800d790 <__exponent+0x6a>
 800d786:	aa04      	add	r2, sp, #16
 800d788:	3309      	adds	r3, #9
 800d78a:	189b      	adds	r3, r3, r2
 800d78c:	9a01      	ldr	r2, [sp, #4]
 800d78e:	1a9b      	subs	r3, r3, r2
 800d790:	9a03      	ldr	r2, [sp, #12]
 800d792:	18d3      	adds	r3, r2, r3
 800d794:	1b58      	subs	r0, r3, r5
 800d796:	b007      	add	sp, #28
 800d798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d79a:	7818      	ldrb	r0, [r3, #0]
 800d79c:	3301      	adds	r3, #1
 800d79e:	7008      	strb	r0, [r1, #0]
 800d7a0:	3101      	adds	r1, #1
 800d7a2:	e7e9      	b.n	800d778 <__exponent+0x52>
 800d7a4:	2330      	movs	r3, #48	; 0x30
 800d7a6:	3430      	adds	r4, #48	; 0x30
 800d7a8:	70ab      	strb	r3, [r5, #2]
 800d7aa:	70ec      	strb	r4, [r5, #3]
 800d7ac:	1d2b      	adds	r3, r5, #4
 800d7ae:	e7f1      	b.n	800d794 <__exponent+0x6e>

0800d7b0 <_printf_float>:
 800d7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7b2:	b095      	sub	sp, #84	; 0x54
 800d7b4:	000c      	movs	r4, r1
 800d7b6:	9208      	str	r2, [sp, #32]
 800d7b8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d7bc:	0007      	movs	r7, r0
 800d7be:	f001 f809 	bl	800e7d4 <_localeconv_r>
 800d7c2:	6803      	ldr	r3, [r0, #0]
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	930c      	str	r3, [sp, #48]	; 0x30
 800d7c8:	f7f2 fc9e 	bl	8000108 <strlen>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	9312      	str	r3, [sp, #72]	; 0x48
 800d7d0:	7e23      	ldrb	r3, [r4, #24]
 800d7d2:	2207      	movs	r2, #7
 800d7d4:	930a      	str	r3, [sp, #40]	; 0x28
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	900d      	str	r0, [sp, #52]	; 0x34
 800d7da:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d7de:	682b      	ldr	r3, [r5, #0]
 800d7e0:	05c9      	lsls	r1, r1, #23
 800d7e2:	d547      	bpl.n	800d874 <_printf_float+0xc4>
 800d7e4:	189b      	adds	r3, r3, r2
 800d7e6:	4393      	bics	r3, r2
 800d7e8:	001a      	movs	r2, r3
 800d7ea:	3208      	adds	r2, #8
 800d7ec:	602a      	str	r2, [r5, #0]
 800d7ee:	681e      	ldr	r6, [r3, #0]
 800d7f0:	685d      	ldr	r5, [r3, #4]
 800d7f2:	0032      	movs	r2, r6
 800d7f4:	002b      	movs	r3, r5
 800d7f6:	64a2      	str	r2, [r4, #72]	; 0x48
 800d7f8:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	006b      	lsls	r3, r5, #1
 800d7fe:	085b      	lsrs	r3, r3, #1
 800d800:	930e      	str	r3, [sp, #56]	; 0x38
 800d802:	0030      	movs	r0, r6
 800d804:	4bab      	ldr	r3, [pc, #684]	; (800dab4 <_printf_float+0x304>)
 800d806:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d808:	4252      	negs	r2, r2
 800d80a:	f7f5 fba7 	bl	8002f5c <__aeabi_dcmpun>
 800d80e:	2800      	cmp	r0, #0
 800d810:	d132      	bne.n	800d878 <_printf_float+0xc8>
 800d812:	2201      	movs	r2, #1
 800d814:	0030      	movs	r0, r6
 800d816:	4ba7      	ldr	r3, [pc, #668]	; (800dab4 <_printf_float+0x304>)
 800d818:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d81a:	4252      	negs	r2, r2
 800d81c:	f7f2 fe26 	bl	800046c <__aeabi_dcmple>
 800d820:	2800      	cmp	r0, #0
 800d822:	d129      	bne.n	800d878 <_printf_float+0xc8>
 800d824:	2200      	movs	r2, #0
 800d826:	2300      	movs	r3, #0
 800d828:	0030      	movs	r0, r6
 800d82a:	0029      	movs	r1, r5
 800d82c:	f7f2 fe14 	bl	8000458 <__aeabi_dcmplt>
 800d830:	2800      	cmp	r0, #0
 800d832:	d003      	beq.n	800d83c <_printf_float+0x8c>
 800d834:	0023      	movs	r3, r4
 800d836:	222d      	movs	r2, #45	; 0x2d
 800d838:	3343      	adds	r3, #67	; 0x43
 800d83a:	701a      	strb	r2, [r3, #0]
 800d83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d83e:	4d9e      	ldr	r5, [pc, #632]	; (800dab8 <_printf_float+0x308>)
 800d840:	2b47      	cmp	r3, #71	; 0x47
 800d842:	d900      	bls.n	800d846 <_printf_float+0x96>
 800d844:	4d9d      	ldr	r5, [pc, #628]	; (800dabc <_printf_float+0x30c>)
 800d846:	2303      	movs	r3, #3
 800d848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d84a:	6123      	str	r3, [r4, #16]
 800d84c:	3301      	adds	r3, #1
 800d84e:	439a      	bics	r2, r3
 800d850:	2300      	movs	r3, #0
 800d852:	6022      	str	r2, [r4, #0]
 800d854:	930b      	str	r3, [sp, #44]	; 0x2c
 800d856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d858:	0021      	movs	r1, r4
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	0038      	movs	r0, r7
 800d85e:	9b08      	ldr	r3, [sp, #32]
 800d860:	aa13      	add	r2, sp, #76	; 0x4c
 800d862:	f000 f9fb 	bl	800dc5c <_printf_common>
 800d866:	3001      	adds	r0, #1
 800d868:	d000      	beq.n	800d86c <_printf_float+0xbc>
 800d86a:	e0a3      	b.n	800d9b4 <_printf_float+0x204>
 800d86c:	2001      	movs	r0, #1
 800d86e:	4240      	negs	r0, r0
 800d870:	b015      	add	sp, #84	; 0x54
 800d872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d874:	3307      	adds	r3, #7
 800d876:	e7b6      	b.n	800d7e6 <_printf_float+0x36>
 800d878:	0032      	movs	r2, r6
 800d87a:	002b      	movs	r3, r5
 800d87c:	0030      	movs	r0, r6
 800d87e:	0029      	movs	r1, r5
 800d880:	f7f5 fb6c 	bl	8002f5c <__aeabi_dcmpun>
 800d884:	2800      	cmp	r0, #0
 800d886:	d00b      	beq.n	800d8a0 <_printf_float+0xf0>
 800d888:	2d00      	cmp	r5, #0
 800d88a:	da03      	bge.n	800d894 <_printf_float+0xe4>
 800d88c:	0023      	movs	r3, r4
 800d88e:	222d      	movs	r2, #45	; 0x2d
 800d890:	3343      	adds	r3, #67	; 0x43
 800d892:	701a      	strb	r2, [r3, #0]
 800d894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d896:	4d8a      	ldr	r5, [pc, #552]	; (800dac0 <_printf_float+0x310>)
 800d898:	2b47      	cmp	r3, #71	; 0x47
 800d89a:	d9d4      	bls.n	800d846 <_printf_float+0x96>
 800d89c:	4d89      	ldr	r5, [pc, #548]	; (800dac4 <_printf_float+0x314>)
 800d89e:	e7d2      	b.n	800d846 <_printf_float+0x96>
 800d8a0:	2220      	movs	r2, #32
 800d8a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d8a4:	6863      	ldr	r3, [r4, #4]
 800d8a6:	4391      	bics	r1, r2
 800d8a8:	910e      	str	r1, [sp, #56]	; 0x38
 800d8aa:	1c5a      	adds	r2, r3, #1
 800d8ac:	d14a      	bne.n	800d944 <_printf_float+0x194>
 800d8ae:	3307      	adds	r3, #7
 800d8b0:	6063      	str	r3, [r4, #4]
 800d8b2:	2380      	movs	r3, #128	; 0x80
 800d8b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8b6:	00db      	lsls	r3, r3, #3
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	9206      	str	r2, [sp, #24]
 800d8be:	aa12      	add	r2, sp, #72	; 0x48
 800d8c0:	9205      	str	r2, [sp, #20]
 800d8c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	9204      	str	r2, [sp, #16]
 800d8c8:	aa11      	add	r2, sp, #68	; 0x44
 800d8ca:	9203      	str	r2, [sp, #12]
 800d8cc:	2223      	movs	r2, #35	; 0x23
 800d8ce:	a908      	add	r1, sp, #32
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	6863      	ldr	r3, [r4, #4]
 800d8d4:	1852      	adds	r2, r2, r1
 800d8d6:	9202      	str	r2, [sp, #8]
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	0032      	movs	r2, r6
 800d8dc:	002b      	movs	r3, r5
 800d8de:	0038      	movs	r0, r7
 800d8e0:	f7ff febe 	bl	800d660 <__cvt>
 800d8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8e6:	0005      	movs	r5, r0
 800d8e8:	2b47      	cmp	r3, #71	; 0x47
 800d8ea:	d109      	bne.n	800d900 <_printf_float+0x150>
 800d8ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8ee:	1cda      	adds	r2, r3, #3
 800d8f0:	db02      	blt.n	800d8f8 <_printf_float+0x148>
 800d8f2:	6862      	ldr	r2, [r4, #4]
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	dd49      	ble.n	800d98c <_printf_float+0x1dc>
 800d8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8fa:	3b02      	subs	r3, #2
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d902:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d904:	2b65      	cmp	r3, #101	; 0x65
 800d906:	d824      	bhi.n	800d952 <_printf_float+0x1a2>
 800d908:	0020      	movs	r0, r4
 800d90a:	001a      	movs	r2, r3
 800d90c:	3901      	subs	r1, #1
 800d90e:	3050      	adds	r0, #80	; 0x50
 800d910:	9111      	str	r1, [sp, #68]	; 0x44
 800d912:	f7ff ff08 	bl	800d726 <__exponent>
 800d916:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d918:	900b      	str	r0, [sp, #44]	; 0x2c
 800d91a:	1813      	adds	r3, r2, r0
 800d91c:	6123      	str	r3, [r4, #16]
 800d91e:	2a01      	cmp	r2, #1
 800d920:	dc02      	bgt.n	800d928 <_printf_float+0x178>
 800d922:	6822      	ldr	r2, [r4, #0]
 800d924:	07d2      	lsls	r2, r2, #31
 800d926:	d501      	bpl.n	800d92c <_printf_float+0x17c>
 800d928:	3301      	adds	r3, #1
 800d92a:	6123      	str	r3, [r4, #16]
 800d92c:	2323      	movs	r3, #35	; 0x23
 800d92e:	aa08      	add	r2, sp, #32
 800d930:	189b      	adds	r3, r3, r2
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d100      	bne.n	800d93a <_printf_float+0x18a>
 800d938:	e78d      	b.n	800d856 <_printf_float+0xa6>
 800d93a:	0023      	movs	r3, r4
 800d93c:	222d      	movs	r2, #45	; 0x2d
 800d93e:	3343      	adds	r3, #67	; 0x43
 800d940:	701a      	strb	r2, [r3, #0]
 800d942:	e788      	b.n	800d856 <_printf_float+0xa6>
 800d944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d946:	2a47      	cmp	r2, #71	; 0x47
 800d948:	d1b3      	bne.n	800d8b2 <_printf_float+0x102>
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d1b1      	bne.n	800d8b2 <_printf_float+0x102>
 800d94e:	3301      	adds	r3, #1
 800d950:	e7ae      	b.n	800d8b0 <_printf_float+0x100>
 800d952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d954:	2b66      	cmp	r3, #102	; 0x66
 800d956:	d11b      	bne.n	800d990 <_printf_float+0x1e0>
 800d958:	6863      	ldr	r3, [r4, #4]
 800d95a:	2900      	cmp	r1, #0
 800d95c:	dd09      	ble.n	800d972 <_printf_float+0x1c2>
 800d95e:	6121      	str	r1, [r4, #16]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d102      	bne.n	800d96a <_printf_float+0x1ba>
 800d964:	6822      	ldr	r2, [r4, #0]
 800d966:	07d2      	lsls	r2, r2, #31
 800d968:	d50b      	bpl.n	800d982 <_printf_float+0x1d2>
 800d96a:	3301      	adds	r3, #1
 800d96c:	185b      	adds	r3, r3, r1
 800d96e:	6123      	str	r3, [r4, #16]
 800d970:	e007      	b.n	800d982 <_printf_float+0x1d2>
 800d972:	2b00      	cmp	r3, #0
 800d974:	d103      	bne.n	800d97e <_printf_float+0x1ce>
 800d976:	2201      	movs	r2, #1
 800d978:	6821      	ldr	r1, [r4, #0]
 800d97a:	4211      	tst	r1, r2
 800d97c:	d000      	beq.n	800d980 <_printf_float+0x1d0>
 800d97e:	1c9a      	adds	r2, r3, #2
 800d980:	6122      	str	r2, [r4, #16]
 800d982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d984:	65a3      	str	r3, [r4, #88]	; 0x58
 800d986:	2300      	movs	r3, #0
 800d988:	930b      	str	r3, [sp, #44]	; 0x2c
 800d98a:	e7cf      	b.n	800d92c <_printf_float+0x17c>
 800d98c:	2367      	movs	r3, #103	; 0x67
 800d98e:	930a      	str	r3, [sp, #40]	; 0x28
 800d990:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d994:	4299      	cmp	r1, r3
 800d996:	db06      	blt.n	800d9a6 <_printf_float+0x1f6>
 800d998:	6823      	ldr	r3, [r4, #0]
 800d99a:	6121      	str	r1, [r4, #16]
 800d99c:	07db      	lsls	r3, r3, #31
 800d99e:	d5f0      	bpl.n	800d982 <_printf_float+0x1d2>
 800d9a0:	3101      	adds	r1, #1
 800d9a2:	6121      	str	r1, [r4, #16]
 800d9a4:	e7ed      	b.n	800d982 <_printf_float+0x1d2>
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	2900      	cmp	r1, #0
 800d9aa:	dc01      	bgt.n	800d9b0 <_printf_float+0x200>
 800d9ac:	1892      	adds	r2, r2, r2
 800d9ae:	1a52      	subs	r2, r2, r1
 800d9b0:	189b      	adds	r3, r3, r2
 800d9b2:	e7dc      	b.n	800d96e <_printf_float+0x1be>
 800d9b4:	6822      	ldr	r2, [r4, #0]
 800d9b6:	0553      	lsls	r3, r2, #21
 800d9b8:	d408      	bmi.n	800d9cc <_printf_float+0x21c>
 800d9ba:	6923      	ldr	r3, [r4, #16]
 800d9bc:	002a      	movs	r2, r5
 800d9be:	0038      	movs	r0, r7
 800d9c0:	9908      	ldr	r1, [sp, #32]
 800d9c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d9c4:	47a8      	blx	r5
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	d12a      	bne.n	800da20 <_printf_float+0x270>
 800d9ca:	e74f      	b.n	800d86c <_printf_float+0xbc>
 800d9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ce:	2b65      	cmp	r3, #101	; 0x65
 800d9d0:	d800      	bhi.n	800d9d4 <_printf_float+0x224>
 800d9d2:	e0ec      	b.n	800dbae <_printf_float+0x3fe>
 800d9d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d9d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d9d8:	2200      	movs	r2, #0
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f7f2 fd36 	bl	800044c <__aeabi_dcmpeq>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d034      	beq.n	800da4e <_printf_float+0x29e>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	0038      	movs	r0, r7
 800d9e8:	4a37      	ldr	r2, [pc, #220]	; (800dac8 <_printf_float+0x318>)
 800d9ea:	9908      	ldr	r1, [sp, #32]
 800d9ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d9ee:	47a8      	blx	r5
 800d9f0:	3001      	adds	r0, #1
 800d9f2:	d100      	bne.n	800d9f6 <_printf_float+0x246>
 800d9f4:	e73a      	b.n	800d86c <_printf_float+0xbc>
 800d9f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d9f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	db02      	blt.n	800da04 <_printf_float+0x254>
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	07db      	lsls	r3, r3, #31
 800da02:	d50d      	bpl.n	800da20 <_printf_float+0x270>
 800da04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800da06:	0038      	movs	r0, r7
 800da08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da0c:	9908      	ldr	r1, [sp, #32]
 800da0e:	47a8      	blx	r5
 800da10:	2500      	movs	r5, #0
 800da12:	3001      	adds	r0, #1
 800da14:	d100      	bne.n	800da18 <_printf_float+0x268>
 800da16:	e729      	b.n	800d86c <_printf_float+0xbc>
 800da18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da1a:	3b01      	subs	r3, #1
 800da1c:	42ab      	cmp	r3, r5
 800da1e:	dc0a      	bgt.n	800da36 <_printf_float+0x286>
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	079b      	lsls	r3, r3, #30
 800da24:	d500      	bpl.n	800da28 <_printf_float+0x278>
 800da26:	e116      	b.n	800dc56 <_printf_float+0x4a6>
 800da28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da2a:	68e0      	ldr	r0, [r4, #12]
 800da2c:	4298      	cmp	r0, r3
 800da2e:	db00      	blt.n	800da32 <_printf_float+0x282>
 800da30:	e71e      	b.n	800d870 <_printf_float+0xc0>
 800da32:	0018      	movs	r0, r3
 800da34:	e71c      	b.n	800d870 <_printf_float+0xc0>
 800da36:	0022      	movs	r2, r4
 800da38:	2301      	movs	r3, #1
 800da3a:	0038      	movs	r0, r7
 800da3c:	9908      	ldr	r1, [sp, #32]
 800da3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800da40:	321a      	adds	r2, #26
 800da42:	47b0      	blx	r6
 800da44:	3001      	adds	r0, #1
 800da46:	d100      	bne.n	800da4a <_printf_float+0x29a>
 800da48:	e710      	b.n	800d86c <_printf_float+0xbc>
 800da4a:	3501      	adds	r5, #1
 800da4c:	e7e4      	b.n	800da18 <_printf_float+0x268>
 800da4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da50:	2b00      	cmp	r3, #0
 800da52:	dc3b      	bgt.n	800dacc <_printf_float+0x31c>
 800da54:	2301      	movs	r3, #1
 800da56:	0038      	movs	r0, r7
 800da58:	4a1b      	ldr	r2, [pc, #108]	; (800dac8 <_printf_float+0x318>)
 800da5a:	9908      	ldr	r1, [sp, #32]
 800da5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800da5e:	47b0      	blx	r6
 800da60:	3001      	adds	r0, #1
 800da62:	d100      	bne.n	800da66 <_printf_float+0x2b6>
 800da64:	e702      	b.n	800d86c <_printf_float+0xbc>
 800da66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da6a:	4313      	orrs	r3, r2
 800da6c:	d102      	bne.n	800da74 <_printf_float+0x2c4>
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	07db      	lsls	r3, r3, #31
 800da72:	d5d5      	bpl.n	800da20 <_printf_float+0x270>
 800da74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da76:	0038      	movs	r0, r7
 800da78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da7a:	9908      	ldr	r1, [sp, #32]
 800da7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800da7e:	47b0      	blx	r6
 800da80:	2300      	movs	r3, #0
 800da82:	3001      	adds	r0, #1
 800da84:	d100      	bne.n	800da88 <_printf_float+0x2d8>
 800da86:	e6f1      	b.n	800d86c <_printf_float+0xbc>
 800da88:	930a      	str	r3, [sp, #40]	; 0x28
 800da8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da8e:	425b      	negs	r3, r3
 800da90:	4293      	cmp	r3, r2
 800da92:	dc01      	bgt.n	800da98 <_printf_float+0x2e8>
 800da94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da96:	e791      	b.n	800d9bc <_printf_float+0x20c>
 800da98:	0022      	movs	r2, r4
 800da9a:	2301      	movs	r3, #1
 800da9c:	0038      	movs	r0, r7
 800da9e:	9908      	ldr	r1, [sp, #32]
 800daa0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800daa2:	321a      	adds	r2, #26
 800daa4:	47b0      	blx	r6
 800daa6:	3001      	adds	r0, #1
 800daa8:	d100      	bne.n	800daac <_printf_float+0x2fc>
 800daaa:	e6df      	b.n	800d86c <_printf_float+0xbc>
 800daac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daae:	3301      	adds	r3, #1
 800dab0:	e7ea      	b.n	800da88 <_printf_float+0x2d8>
 800dab2:	46c0      	nop			; (mov r8, r8)
 800dab4:	7fefffff 	.word	0x7fefffff
 800dab8:	080136c9 	.word	0x080136c9
 800dabc:	080136cd 	.word	0x080136cd
 800dac0:	080136d1 	.word	0x080136d1
 800dac4:	080136d5 	.word	0x080136d5
 800dac8:	080136d9 	.word	0x080136d9
 800dacc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dad0:	920a      	str	r2, [sp, #40]	; 0x28
 800dad2:	429a      	cmp	r2, r3
 800dad4:	dd00      	ble.n	800dad8 <_printf_float+0x328>
 800dad6:	930a      	str	r3, [sp, #40]	; 0x28
 800dad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dada:	2b00      	cmp	r3, #0
 800dadc:	dc3d      	bgt.n	800db5a <_printf_float+0x3aa>
 800dade:	2300      	movs	r3, #0
 800dae0:	930e      	str	r3, [sp, #56]	; 0x38
 800dae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae4:	43db      	mvns	r3, r3
 800dae6:	17db      	asrs	r3, r3, #31
 800dae8:	930f      	str	r3, [sp, #60]	; 0x3c
 800daea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800daec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daee:	930b      	str	r3, [sp, #44]	; 0x2c
 800daf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daf2:	4013      	ands	r3, r2
 800daf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dafa:	4293      	cmp	r3, r2
 800dafc:	dc36      	bgt.n	800db6c <_printf_float+0x3bc>
 800dafe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db02:	429a      	cmp	r2, r3
 800db04:	db40      	blt.n	800db88 <_printf_float+0x3d8>
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	07db      	lsls	r3, r3, #31
 800db0a:	d43d      	bmi.n	800db88 <_printf_float+0x3d8>
 800db0c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800db0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db12:	1af3      	subs	r3, r6, r3
 800db14:	1ab6      	subs	r6, r6, r2
 800db16:	429e      	cmp	r6, r3
 800db18:	dd00      	ble.n	800db1c <_printf_float+0x36c>
 800db1a:	001e      	movs	r6, r3
 800db1c:	2e00      	cmp	r6, #0
 800db1e:	dc3c      	bgt.n	800db9a <_printf_float+0x3ea>
 800db20:	2300      	movs	r3, #0
 800db22:	930a      	str	r3, [sp, #40]	; 0x28
 800db24:	43f3      	mvns	r3, r6
 800db26:	17db      	asrs	r3, r3, #31
 800db28:	930b      	str	r3, [sp, #44]	; 0x2c
 800db2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db2e:	1a9b      	subs	r3, r3, r2
 800db30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db32:	4032      	ands	r2, r6
 800db34:	1a9b      	subs	r3, r3, r2
 800db36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db38:	4293      	cmp	r3, r2
 800db3a:	dc00      	bgt.n	800db3e <_printf_float+0x38e>
 800db3c:	e770      	b.n	800da20 <_printf_float+0x270>
 800db3e:	0022      	movs	r2, r4
 800db40:	2301      	movs	r3, #1
 800db42:	0038      	movs	r0, r7
 800db44:	9908      	ldr	r1, [sp, #32]
 800db46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800db48:	321a      	adds	r2, #26
 800db4a:	47a8      	blx	r5
 800db4c:	3001      	adds	r0, #1
 800db4e:	d100      	bne.n	800db52 <_printf_float+0x3a2>
 800db50:	e68c      	b.n	800d86c <_printf_float+0xbc>
 800db52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db54:	3301      	adds	r3, #1
 800db56:	930a      	str	r3, [sp, #40]	; 0x28
 800db58:	e7e7      	b.n	800db2a <_printf_float+0x37a>
 800db5a:	002a      	movs	r2, r5
 800db5c:	0038      	movs	r0, r7
 800db5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db60:	9908      	ldr	r1, [sp, #32]
 800db62:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800db64:	47b0      	blx	r6
 800db66:	3001      	adds	r0, #1
 800db68:	d1b9      	bne.n	800dade <_printf_float+0x32e>
 800db6a:	e67f      	b.n	800d86c <_printf_float+0xbc>
 800db6c:	0022      	movs	r2, r4
 800db6e:	2301      	movs	r3, #1
 800db70:	0038      	movs	r0, r7
 800db72:	9908      	ldr	r1, [sp, #32]
 800db74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800db76:	321a      	adds	r2, #26
 800db78:	47b0      	blx	r6
 800db7a:	3001      	adds	r0, #1
 800db7c:	d100      	bne.n	800db80 <_printf_float+0x3d0>
 800db7e:	e675      	b.n	800d86c <_printf_float+0xbc>
 800db80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db82:	3301      	adds	r3, #1
 800db84:	930e      	str	r3, [sp, #56]	; 0x38
 800db86:	e7b0      	b.n	800daea <_printf_float+0x33a>
 800db88:	0038      	movs	r0, r7
 800db8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db8e:	9908      	ldr	r1, [sp, #32]
 800db90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800db92:	47b0      	blx	r6
 800db94:	3001      	adds	r0, #1
 800db96:	d1b9      	bne.n	800db0c <_printf_float+0x35c>
 800db98:	e668      	b.n	800d86c <_printf_float+0xbc>
 800db9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db9c:	0038      	movs	r0, r7
 800db9e:	18ea      	adds	r2, r5, r3
 800dba0:	9908      	ldr	r1, [sp, #32]
 800dba2:	0033      	movs	r3, r6
 800dba4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dba6:	47a8      	blx	r5
 800dba8:	3001      	adds	r0, #1
 800dbaa:	d1b9      	bne.n	800db20 <_printf_float+0x370>
 800dbac:	e65e      	b.n	800d86c <_printf_float+0xbc>
 800dbae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	dc02      	bgt.n	800dbba <_printf_float+0x40a>
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	421a      	tst	r2, r3
 800dbb8:	d03a      	beq.n	800dc30 <_printf_float+0x480>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	002a      	movs	r2, r5
 800dbbe:	0038      	movs	r0, r7
 800dbc0:	9908      	ldr	r1, [sp, #32]
 800dbc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dbc4:	47b0      	blx	r6
 800dbc6:	3001      	adds	r0, #1
 800dbc8:	d100      	bne.n	800dbcc <_printf_float+0x41c>
 800dbca:	e64f      	b.n	800d86c <_printf_float+0xbc>
 800dbcc:	0038      	movs	r0, r7
 800dbce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbd2:	9908      	ldr	r1, [sp, #32]
 800dbd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dbd6:	47b0      	blx	r6
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d100      	bne.n	800dbde <_printf_float+0x42e>
 800dbdc:	e646      	b.n	800d86c <_printf_float+0xbc>
 800dbde:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dbe0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dbe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	001e      	movs	r6, r3
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f7f2 fc2f 	bl	800044c <__aeabi_dcmpeq>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d11c      	bne.n	800dc2c <_printf_float+0x47c>
 800dbf2:	0033      	movs	r3, r6
 800dbf4:	1c6a      	adds	r2, r5, #1
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	0038      	movs	r0, r7
 800dbfa:	9908      	ldr	r1, [sp, #32]
 800dbfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dbfe:	47a8      	blx	r5
 800dc00:	3001      	adds	r0, #1
 800dc02:	d10f      	bne.n	800dc24 <_printf_float+0x474>
 800dc04:	e632      	b.n	800d86c <_printf_float+0xbc>
 800dc06:	0022      	movs	r2, r4
 800dc08:	2301      	movs	r3, #1
 800dc0a:	0038      	movs	r0, r7
 800dc0c:	9908      	ldr	r1, [sp, #32]
 800dc0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dc10:	321a      	adds	r2, #26
 800dc12:	47b0      	blx	r6
 800dc14:	3001      	adds	r0, #1
 800dc16:	d100      	bne.n	800dc1a <_printf_float+0x46a>
 800dc18:	e628      	b.n	800d86c <_printf_float+0xbc>
 800dc1a:	3501      	adds	r5, #1
 800dc1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	42ab      	cmp	r3, r5
 800dc22:	dcf0      	bgt.n	800dc06 <_printf_float+0x456>
 800dc24:	0022      	movs	r2, r4
 800dc26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc28:	3250      	adds	r2, #80	; 0x50
 800dc2a:	e6c8      	b.n	800d9be <_printf_float+0x20e>
 800dc2c:	2500      	movs	r5, #0
 800dc2e:	e7f5      	b.n	800dc1c <_printf_float+0x46c>
 800dc30:	002a      	movs	r2, r5
 800dc32:	e7e1      	b.n	800dbf8 <_printf_float+0x448>
 800dc34:	0022      	movs	r2, r4
 800dc36:	2301      	movs	r3, #1
 800dc38:	0038      	movs	r0, r7
 800dc3a:	9908      	ldr	r1, [sp, #32]
 800dc3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dc3e:	3219      	adds	r2, #25
 800dc40:	47b0      	blx	r6
 800dc42:	3001      	adds	r0, #1
 800dc44:	d100      	bne.n	800dc48 <_printf_float+0x498>
 800dc46:	e611      	b.n	800d86c <_printf_float+0xbc>
 800dc48:	3501      	adds	r5, #1
 800dc4a:	68e3      	ldr	r3, [r4, #12]
 800dc4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc4e:	1a9b      	subs	r3, r3, r2
 800dc50:	42ab      	cmp	r3, r5
 800dc52:	dcef      	bgt.n	800dc34 <_printf_float+0x484>
 800dc54:	e6e8      	b.n	800da28 <_printf_float+0x278>
 800dc56:	2500      	movs	r5, #0
 800dc58:	e7f7      	b.n	800dc4a <_printf_float+0x49a>
 800dc5a:	46c0      	nop			; (mov r8, r8)

0800dc5c <_printf_common>:
 800dc5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc5e:	0016      	movs	r6, r2
 800dc60:	9301      	str	r3, [sp, #4]
 800dc62:	688a      	ldr	r2, [r1, #8]
 800dc64:	690b      	ldr	r3, [r1, #16]
 800dc66:	000c      	movs	r4, r1
 800dc68:	9000      	str	r0, [sp, #0]
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	da00      	bge.n	800dc70 <_printf_common+0x14>
 800dc6e:	0013      	movs	r3, r2
 800dc70:	0022      	movs	r2, r4
 800dc72:	6033      	str	r3, [r6, #0]
 800dc74:	3243      	adds	r2, #67	; 0x43
 800dc76:	7812      	ldrb	r2, [r2, #0]
 800dc78:	2a00      	cmp	r2, #0
 800dc7a:	d001      	beq.n	800dc80 <_printf_common+0x24>
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	6033      	str	r3, [r6, #0]
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	069b      	lsls	r3, r3, #26
 800dc84:	d502      	bpl.n	800dc8c <_printf_common+0x30>
 800dc86:	6833      	ldr	r3, [r6, #0]
 800dc88:	3302      	adds	r3, #2
 800dc8a:	6033      	str	r3, [r6, #0]
 800dc8c:	6822      	ldr	r2, [r4, #0]
 800dc8e:	2306      	movs	r3, #6
 800dc90:	0015      	movs	r5, r2
 800dc92:	401d      	ands	r5, r3
 800dc94:	421a      	tst	r2, r3
 800dc96:	d027      	beq.n	800dce8 <_printf_common+0x8c>
 800dc98:	0023      	movs	r3, r4
 800dc9a:	3343      	adds	r3, #67	; 0x43
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	1e5a      	subs	r2, r3, #1
 800dca0:	4193      	sbcs	r3, r2
 800dca2:	6822      	ldr	r2, [r4, #0]
 800dca4:	0692      	lsls	r2, r2, #26
 800dca6:	d430      	bmi.n	800dd0a <_printf_common+0xae>
 800dca8:	0022      	movs	r2, r4
 800dcaa:	9901      	ldr	r1, [sp, #4]
 800dcac:	9800      	ldr	r0, [sp, #0]
 800dcae:	9d08      	ldr	r5, [sp, #32]
 800dcb0:	3243      	adds	r2, #67	; 0x43
 800dcb2:	47a8      	blx	r5
 800dcb4:	3001      	adds	r0, #1
 800dcb6:	d025      	beq.n	800dd04 <_printf_common+0xa8>
 800dcb8:	2206      	movs	r2, #6
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	2500      	movs	r5, #0
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	2b04      	cmp	r3, #4
 800dcc2:	d105      	bne.n	800dcd0 <_printf_common+0x74>
 800dcc4:	6833      	ldr	r3, [r6, #0]
 800dcc6:	68e5      	ldr	r5, [r4, #12]
 800dcc8:	1aed      	subs	r5, r5, r3
 800dcca:	43eb      	mvns	r3, r5
 800dccc:	17db      	asrs	r3, r3, #31
 800dcce:	401d      	ands	r5, r3
 800dcd0:	68a3      	ldr	r3, [r4, #8]
 800dcd2:	6922      	ldr	r2, [r4, #16]
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	dd01      	ble.n	800dcdc <_printf_common+0x80>
 800dcd8:	1a9b      	subs	r3, r3, r2
 800dcda:	18ed      	adds	r5, r5, r3
 800dcdc:	2600      	movs	r6, #0
 800dcde:	42b5      	cmp	r5, r6
 800dce0:	d120      	bne.n	800dd24 <_printf_common+0xc8>
 800dce2:	2000      	movs	r0, #0
 800dce4:	e010      	b.n	800dd08 <_printf_common+0xac>
 800dce6:	3501      	adds	r5, #1
 800dce8:	68e3      	ldr	r3, [r4, #12]
 800dcea:	6832      	ldr	r2, [r6, #0]
 800dcec:	1a9b      	subs	r3, r3, r2
 800dcee:	42ab      	cmp	r3, r5
 800dcf0:	ddd2      	ble.n	800dc98 <_printf_common+0x3c>
 800dcf2:	0022      	movs	r2, r4
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	9901      	ldr	r1, [sp, #4]
 800dcf8:	9800      	ldr	r0, [sp, #0]
 800dcfa:	9f08      	ldr	r7, [sp, #32]
 800dcfc:	3219      	adds	r2, #25
 800dcfe:	47b8      	blx	r7
 800dd00:	3001      	adds	r0, #1
 800dd02:	d1f0      	bne.n	800dce6 <_printf_common+0x8a>
 800dd04:	2001      	movs	r0, #1
 800dd06:	4240      	negs	r0, r0
 800dd08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd0a:	2030      	movs	r0, #48	; 0x30
 800dd0c:	18e1      	adds	r1, r4, r3
 800dd0e:	3143      	adds	r1, #67	; 0x43
 800dd10:	7008      	strb	r0, [r1, #0]
 800dd12:	0021      	movs	r1, r4
 800dd14:	1c5a      	adds	r2, r3, #1
 800dd16:	3145      	adds	r1, #69	; 0x45
 800dd18:	7809      	ldrb	r1, [r1, #0]
 800dd1a:	18a2      	adds	r2, r4, r2
 800dd1c:	3243      	adds	r2, #67	; 0x43
 800dd1e:	3302      	adds	r3, #2
 800dd20:	7011      	strb	r1, [r2, #0]
 800dd22:	e7c1      	b.n	800dca8 <_printf_common+0x4c>
 800dd24:	0022      	movs	r2, r4
 800dd26:	2301      	movs	r3, #1
 800dd28:	9901      	ldr	r1, [sp, #4]
 800dd2a:	9800      	ldr	r0, [sp, #0]
 800dd2c:	9f08      	ldr	r7, [sp, #32]
 800dd2e:	321a      	adds	r2, #26
 800dd30:	47b8      	blx	r7
 800dd32:	3001      	adds	r0, #1
 800dd34:	d0e6      	beq.n	800dd04 <_printf_common+0xa8>
 800dd36:	3601      	adds	r6, #1
 800dd38:	e7d1      	b.n	800dcde <_printf_common+0x82>
	...

0800dd3c <_printf_i>:
 800dd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd3e:	b08b      	sub	sp, #44	; 0x2c
 800dd40:	9206      	str	r2, [sp, #24]
 800dd42:	000a      	movs	r2, r1
 800dd44:	3243      	adds	r2, #67	; 0x43
 800dd46:	9307      	str	r3, [sp, #28]
 800dd48:	9005      	str	r0, [sp, #20]
 800dd4a:	9204      	str	r2, [sp, #16]
 800dd4c:	7e0a      	ldrb	r2, [r1, #24]
 800dd4e:	000c      	movs	r4, r1
 800dd50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd52:	2a78      	cmp	r2, #120	; 0x78
 800dd54:	d809      	bhi.n	800dd6a <_printf_i+0x2e>
 800dd56:	2a62      	cmp	r2, #98	; 0x62
 800dd58:	d80b      	bhi.n	800dd72 <_printf_i+0x36>
 800dd5a:	2a00      	cmp	r2, #0
 800dd5c:	d100      	bne.n	800dd60 <_printf_i+0x24>
 800dd5e:	e0be      	b.n	800dede <_printf_i+0x1a2>
 800dd60:	497c      	ldr	r1, [pc, #496]	; (800df54 <_printf_i+0x218>)
 800dd62:	9103      	str	r1, [sp, #12]
 800dd64:	2a58      	cmp	r2, #88	; 0x58
 800dd66:	d100      	bne.n	800dd6a <_printf_i+0x2e>
 800dd68:	e093      	b.n	800de92 <_printf_i+0x156>
 800dd6a:	0026      	movs	r6, r4
 800dd6c:	3642      	adds	r6, #66	; 0x42
 800dd6e:	7032      	strb	r2, [r6, #0]
 800dd70:	e022      	b.n	800ddb8 <_printf_i+0x7c>
 800dd72:	0010      	movs	r0, r2
 800dd74:	3863      	subs	r0, #99	; 0x63
 800dd76:	2815      	cmp	r0, #21
 800dd78:	d8f7      	bhi.n	800dd6a <_printf_i+0x2e>
 800dd7a:	f7f2 f9d7 	bl	800012c <__gnu_thumb1_case_shi>
 800dd7e:	0016      	.short	0x0016
 800dd80:	fff6001f 	.word	0xfff6001f
 800dd84:	fff6fff6 	.word	0xfff6fff6
 800dd88:	001ffff6 	.word	0x001ffff6
 800dd8c:	fff6fff6 	.word	0xfff6fff6
 800dd90:	fff6fff6 	.word	0xfff6fff6
 800dd94:	003600a3 	.word	0x003600a3
 800dd98:	fff60083 	.word	0xfff60083
 800dd9c:	00b4fff6 	.word	0x00b4fff6
 800dda0:	0036fff6 	.word	0x0036fff6
 800dda4:	fff6fff6 	.word	0xfff6fff6
 800dda8:	0087      	.short	0x0087
 800ddaa:	0026      	movs	r6, r4
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	3642      	adds	r6, #66	; 0x42
 800ddb0:	1d11      	adds	r1, r2, #4
 800ddb2:	6019      	str	r1, [r3, #0]
 800ddb4:	6813      	ldr	r3, [r2, #0]
 800ddb6:	7033      	strb	r3, [r6, #0]
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e0a2      	b.n	800df02 <_printf_i+0x1c6>
 800ddbc:	6818      	ldr	r0, [r3, #0]
 800ddbe:	6809      	ldr	r1, [r1, #0]
 800ddc0:	1d02      	adds	r2, r0, #4
 800ddc2:	060d      	lsls	r5, r1, #24
 800ddc4:	d50b      	bpl.n	800ddde <_printf_i+0xa2>
 800ddc6:	6805      	ldr	r5, [r0, #0]
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	2d00      	cmp	r5, #0
 800ddcc:	da03      	bge.n	800ddd6 <_printf_i+0x9a>
 800ddce:	232d      	movs	r3, #45	; 0x2d
 800ddd0:	9a04      	ldr	r2, [sp, #16]
 800ddd2:	426d      	negs	r5, r5
 800ddd4:	7013      	strb	r3, [r2, #0]
 800ddd6:	4b5f      	ldr	r3, [pc, #380]	; (800df54 <_printf_i+0x218>)
 800ddd8:	270a      	movs	r7, #10
 800ddda:	9303      	str	r3, [sp, #12]
 800dddc:	e01b      	b.n	800de16 <_printf_i+0xda>
 800ddde:	6805      	ldr	r5, [r0, #0]
 800dde0:	601a      	str	r2, [r3, #0]
 800dde2:	0649      	lsls	r1, r1, #25
 800dde4:	d5f1      	bpl.n	800ddca <_printf_i+0x8e>
 800dde6:	b22d      	sxth	r5, r5
 800dde8:	e7ef      	b.n	800ddca <_printf_i+0x8e>
 800ddea:	680d      	ldr	r5, [r1, #0]
 800ddec:	6819      	ldr	r1, [r3, #0]
 800ddee:	1d08      	adds	r0, r1, #4
 800ddf0:	6018      	str	r0, [r3, #0]
 800ddf2:	062e      	lsls	r6, r5, #24
 800ddf4:	d501      	bpl.n	800ddfa <_printf_i+0xbe>
 800ddf6:	680d      	ldr	r5, [r1, #0]
 800ddf8:	e003      	b.n	800de02 <_printf_i+0xc6>
 800ddfa:	066d      	lsls	r5, r5, #25
 800ddfc:	d5fb      	bpl.n	800ddf6 <_printf_i+0xba>
 800ddfe:	680d      	ldr	r5, [r1, #0]
 800de00:	b2ad      	uxth	r5, r5
 800de02:	4b54      	ldr	r3, [pc, #336]	; (800df54 <_printf_i+0x218>)
 800de04:	2708      	movs	r7, #8
 800de06:	9303      	str	r3, [sp, #12]
 800de08:	2a6f      	cmp	r2, #111	; 0x6f
 800de0a:	d000      	beq.n	800de0e <_printf_i+0xd2>
 800de0c:	3702      	adds	r7, #2
 800de0e:	0023      	movs	r3, r4
 800de10:	2200      	movs	r2, #0
 800de12:	3343      	adds	r3, #67	; 0x43
 800de14:	701a      	strb	r2, [r3, #0]
 800de16:	6863      	ldr	r3, [r4, #4]
 800de18:	60a3      	str	r3, [r4, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	db03      	blt.n	800de26 <_printf_i+0xea>
 800de1e:	2104      	movs	r1, #4
 800de20:	6822      	ldr	r2, [r4, #0]
 800de22:	438a      	bics	r2, r1
 800de24:	6022      	str	r2, [r4, #0]
 800de26:	2d00      	cmp	r5, #0
 800de28:	d102      	bne.n	800de30 <_printf_i+0xf4>
 800de2a:	9e04      	ldr	r6, [sp, #16]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00c      	beq.n	800de4a <_printf_i+0x10e>
 800de30:	9e04      	ldr	r6, [sp, #16]
 800de32:	0028      	movs	r0, r5
 800de34:	0039      	movs	r1, r7
 800de36:	f7f2 fa09 	bl	800024c <__aeabi_uidivmod>
 800de3a:	9b03      	ldr	r3, [sp, #12]
 800de3c:	3e01      	subs	r6, #1
 800de3e:	5c5b      	ldrb	r3, [r3, r1]
 800de40:	7033      	strb	r3, [r6, #0]
 800de42:	002b      	movs	r3, r5
 800de44:	0005      	movs	r5, r0
 800de46:	429f      	cmp	r7, r3
 800de48:	d9f3      	bls.n	800de32 <_printf_i+0xf6>
 800de4a:	2f08      	cmp	r7, #8
 800de4c:	d109      	bne.n	800de62 <_printf_i+0x126>
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	07db      	lsls	r3, r3, #31
 800de52:	d506      	bpl.n	800de62 <_printf_i+0x126>
 800de54:	6862      	ldr	r2, [r4, #4]
 800de56:	6923      	ldr	r3, [r4, #16]
 800de58:	429a      	cmp	r2, r3
 800de5a:	dc02      	bgt.n	800de62 <_printf_i+0x126>
 800de5c:	2330      	movs	r3, #48	; 0x30
 800de5e:	3e01      	subs	r6, #1
 800de60:	7033      	strb	r3, [r6, #0]
 800de62:	9b04      	ldr	r3, [sp, #16]
 800de64:	1b9b      	subs	r3, r3, r6
 800de66:	6123      	str	r3, [r4, #16]
 800de68:	9b07      	ldr	r3, [sp, #28]
 800de6a:	0021      	movs	r1, r4
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	9805      	ldr	r0, [sp, #20]
 800de70:	9b06      	ldr	r3, [sp, #24]
 800de72:	aa09      	add	r2, sp, #36	; 0x24
 800de74:	f7ff fef2 	bl	800dc5c <_printf_common>
 800de78:	3001      	adds	r0, #1
 800de7a:	d147      	bne.n	800df0c <_printf_i+0x1d0>
 800de7c:	2001      	movs	r0, #1
 800de7e:	4240      	negs	r0, r0
 800de80:	b00b      	add	sp, #44	; 0x2c
 800de82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de84:	2220      	movs	r2, #32
 800de86:	6809      	ldr	r1, [r1, #0]
 800de88:	430a      	orrs	r2, r1
 800de8a:	6022      	str	r2, [r4, #0]
 800de8c:	2278      	movs	r2, #120	; 0x78
 800de8e:	4932      	ldr	r1, [pc, #200]	; (800df58 <_printf_i+0x21c>)
 800de90:	9103      	str	r1, [sp, #12]
 800de92:	0021      	movs	r1, r4
 800de94:	3145      	adds	r1, #69	; 0x45
 800de96:	700a      	strb	r2, [r1, #0]
 800de98:	6819      	ldr	r1, [r3, #0]
 800de9a:	6822      	ldr	r2, [r4, #0]
 800de9c:	c920      	ldmia	r1!, {r5}
 800de9e:	0610      	lsls	r0, r2, #24
 800dea0:	d402      	bmi.n	800dea8 <_printf_i+0x16c>
 800dea2:	0650      	lsls	r0, r2, #25
 800dea4:	d500      	bpl.n	800dea8 <_printf_i+0x16c>
 800dea6:	b2ad      	uxth	r5, r5
 800dea8:	6019      	str	r1, [r3, #0]
 800deaa:	07d3      	lsls	r3, r2, #31
 800deac:	d502      	bpl.n	800deb4 <_printf_i+0x178>
 800deae:	2320      	movs	r3, #32
 800deb0:	4313      	orrs	r3, r2
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	2710      	movs	r7, #16
 800deb6:	2d00      	cmp	r5, #0
 800deb8:	d1a9      	bne.n	800de0e <_printf_i+0xd2>
 800deba:	2220      	movs	r2, #32
 800debc:	6823      	ldr	r3, [r4, #0]
 800debe:	4393      	bics	r3, r2
 800dec0:	6023      	str	r3, [r4, #0]
 800dec2:	e7a4      	b.n	800de0e <_printf_i+0xd2>
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	680d      	ldr	r5, [r1, #0]
 800dec8:	1d10      	adds	r0, r2, #4
 800deca:	6949      	ldr	r1, [r1, #20]
 800decc:	6018      	str	r0, [r3, #0]
 800dece:	6813      	ldr	r3, [r2, #0]
 800ded0:	062e      	lsls	r6, r5, #24
 800ded2:	d501      	bpl.n	800ded8 <_printf_i+0x19c>
 800ded4:	6019      	str	r1, [r3, #0]
 800ded6:	e002      	b.n	800dede <_printf_i+0x1a2>
 800ded8:	066d      	lsls	r5, r5, #25
 800deda:	d5fb      	bpl.n	800ded4 <_printf_i+0x198>
 800dedc:	8019      	strh	r1, [r3, #0]
 800dede:	2300      	movs	r3, #0
 800dee0:	9e04      	ldr	r6, [sp, #16]
 800dee2:	6123      	str	r3, [r4, #16]
 800dee4:	e7c0      	b.n	800de68 <_printf_i+0x12c>
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	1d11      	adds	r1, r2, #4
 800deea:	6019      	str	r1, [r3, #0]
 800deec:	6816      	ldr	r6, [r2, #0]
 800deee:	2100      	movs	r1, #0
 800def0:	0030      	movs	r0, r6
 800def2:	6862      	ldr	r2, [r4, #4]
 800def4:	f000 fd65 	bl	800e9c2 <memchr>
 800def8:	2800      	cmp	r0, #0
 800defa:	d001      	beq.n	800df00 <_printf_i+0x1c4>
 800defc:	1b80      	subs	r0, r0, r6
 800defe:	6060      	str	r0, [r4, #4]
 800df00:	6863      	ldr	r3, [r4, #4]
 800df02:	6123      	str	r3, [r4, #16]
 800df04:	2300      	movs	r3, #0
 800df06:	9a04      	ldr	r2, [sp, #16]
 800df08:	7013      	strb	r3, [r2, #0]
 800df0a:	e7ad      	b.n	800de68 <_printf_i+0x12c>
 800df0c:	0032      	movs	r2, r6
 800df0e:	6923      	ldr	r3, [r4, #16]
 800df10:	9906      	ldr	r1, [sp, #24]
 800df12:	9805      	ldr	r0, [sp, #20]
 800df14:	9d07      	ldr	r5, [sp, #28]
 800df16:	47a8      	blx	r5
 800df18:	3001      	adds	r0, #1
 800df1a:	d0af      	beq.n	800de7c <_printf_i+0x140>
 800df1c:	6823      	ldr	r3, [r4, #0]
 800df1e:	079b      	lsls	r3, r3, #30
 800df20:	d415      	bmi.n	800df4e <_printf_i+0x212>
 800df22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df24:	68e0      	ldr	r0, [r4, #12]
 800df26:	4298      	cmp	r0, r3
 800df28:	daaa      	bge.n	800de80 <_printf_i+0x144>
 800df2a:	0018      	movs	r0, r3
 800df2c:	e7a8      	b.n	800de80 <_printf_i+0x144>
 800df2e:	0022      	movs	r2, r4
 800df30:	2301      	movs	r3, #1
 800df32:	9906      	ldr	r1, [sp, #24]
 800df34:	9805      	ldr	r0, [sp, #20]
 800df36:	9e07      	ldr	r6, [sp, #28]
 800df38:	3219      	adds	r2, #25
 800df3a:	47b0      	blx	r6
 800df3c:	3001      	adds	r0, #1
 800df3e:	d09d      	beq.n	800de7c <_printf_i+0x140>
 800df40:	3501      	adds	r5, #1
 800df42:	68e3      	ldr	r3, [r4, #12]
 800df44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df46:	1a9b      	subs	r3, r3, r2
 800df48:	42ab      	cmp	r3, r5
 800df4a:	dcf0      	bgt.n	800df2e <_printf_i+0x1f2>
 800df4c:	e7e9      	b.n	800df22 <_printf_i+0x1e6>
 800df4e:	2500      	movs	r5, #0
 800df50:	e7f7      	b.n	800df42 <_printf_i+0x206>
 800df52:	46c0      	nop			; (mov r8, r8)
 800df54:	080136db 	.word	0x080136db
 800df58:	080136ec 	.word	0x080136ec

0800df5c <_scanf_float>:
 800df5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df5e:	b08b      	sub	sp, #44	; 0x2c
 800df60:	0016      	movs	r6, r2
 800df62:	9002      	str	r0, [sp, #8]
 800df64:	22ae      	movs	r2, #174	; 0xae
 800df66:	2000      	movs	r0, #0
 800df68:	9307      	str	r3, [sp, #28]
 800df6a:	688b      	ldr	r3, [r1, #8]
 800df6c:	000f      	movs	r7, r1
 800df6e:	1e59      	subs	r1, r3, #1
 800df70:	0052      	lsls	r2, r2, #1
 800df72:	9006      	str	r0, [sp, #24]
 800df74:	4291      	cmp	r1, r2
 800df76:	d905      	bls.n	800df84 <_scanf_float+0x28>
 800df78:	3b5e      	subs	r3, #94	; 0x5e
 800df7a:	3bff      	subs	r3, #255	; 0xff
 800df7c:	9306      	str	r3, [sp, #24]
 800df7e:	235e      	movs	r3, #94	; 0x5e
 800df80:	33ff      	adds	r3, #255	; 0xff
 800df82:	60bb      	str	r3, [r7, #8]
 800df84:	23f0      	movs	r3, #240	; 0xf0
 800df86:	683a      	ldr	r2, [r7, #0]
 800df88:	00db      	lsls	r3, r3, #3
 800df8a:	4313      	orrs	r3, r2
 800df8c:	603b      	str	r3, [r7, #0]
 800df8e:	003b      	movs	r3, r7
 800df90:	2400      	movs	r4, #0
 800df92:	331c      	adds	r3, #28
 800df94:	001d      	movs	r5, r3
 800df96:	9304      	str	r3, [sp, #16]
 800df98:	9403      	str	r4, [sp, #12]
 800df9a:	9409      	str	r4, [sp, #36]	; 0x24
 800df9c:	9408      	str	r4, [sp, #32]
 800df9e:	9401      	str	r4, [sp, #4]
 800dfa0:	9405      	str	r4, [sp, #20]
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	2a00      	cmp	r2, #0
 800dfa6:	d00a      	beq.n	800dfbe <_scanf_float+0x62>
 800dfa8:	6833      	ldr	r3, [r6, #0]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b4e      	cmp	r3, #78	; 0x4e
 800dfae:	d844      	bhi.n	800e03a <_scanf_float+0xde>
 800dfb0:	0018      	movs	r0, r3
 800dfb2:	2b40      	cmp	r3, #64	; 0x40
 800dfb4:	d82c      	bhi.n	800e010 <_scanf_float+0xb4>
 800dfb6:	382b      	subs	r0, #43	; 0x2b
 800dfb8:	b2c1      	uxtb	r1, r0
 800dfba:	290e      	cmp	r1, #14
 800dfbc:	d92a      	bls.n	800e014 <_scanf_float+0xb8>
 800dfbe:	9b01      	ldr	r3, [sp, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d003      	beq.n	800dfcc <_scanf_float+0x70>
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	4aa3      	ldr	r2, [pc, #652]	; (800e254 <_scanf_float+0x2f8>)
 800dfc8:	4013      	ands	r3, r2
 800dfca:	603b      	str	r3, [r7, #0]
 800dfcc:	9b03      	ldr	r3, [sp, #12]
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d900      	bls.n	800dfd6 <_scanf_float+0x7a>
 800dfd4:	e0f9      	b.n	800e1ca <_scanf_float+0x26e>
 800dfd6:	24be      	movs	r4, #190	; 0xbe
 800dfd8:	0064      	lsls	r4, r4, #1
 800dfda:	9b04      	ldr	r3, [sp, #16]
 800dfdc:	429d      	cmp	r5, r3
 800dfde:	d900      	bls.n	800dfe2 <_scanf_float+0x86>
 800dfe0:	e0e9      	b.n	800e1b6 <_scanf_float+0x25a>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	9303      	str	r3, [sp, #12]
 800dfe6:	e183      	b.n	800e2f0 <_scanf_float+0x394>
 800dfe8:	0018      	movs	r0, r3
 800dfea:	3861      	subs	r0, #97	; 0x61
 800dfec:	280d      	cmp	r0, #13
 800dfee:	d8e6      	bhi.n	800dfbe <_scanf_float+0x62>
 800dff0:	f7f2 f89c 	bl	800012c <__gnu_thumb1_case_shi>
 800dff4:	ffe50083 	.word	0xffe50083
 800dff8:	ffe5ffe5 	.word	0xffe5ffe5
 800dffc:	00a200b6 	.word	0x00a200b6
 800e000:	ffe5ffe5 	.word	0xffe5ffe5
 800e004:	ffe50089 	.word	0xffe50089
 800e008:	ffe5ffe5 	.word	0xffe5ffe5
 800e00c:	0065ffe5 	.word	0x0065ffe5
 800e010:	3841      	subs	r0, #65	; 0x41
 800e012:	e7eb      	b.n	800dfec <_scanf_float+0x90>
 800e014:	280e      	cmp	r0, #14
 800e016:	d8d2      	bhi.n	800dfbe <_scanf_float+0x62>
 800e018:	f7f2 f888 	bl	800012c <__gnu_thumb1_case_shi>
 800e01c:	ffd1004b 	.word	0xffd1004b
 800e020:	0098004b 	.word	0x0098004b
 800e024:	0020ffd1 	.word	0x0020ffd1
 800e028:	00400040 	.word	0x00400040
 800e02c:	00400040 	.word	0x00400040
 800e030:	00400040 	.word	0x00400040
 800e034:	00400040 	.word	0x00400040
 800e038:	0040      	.short	0x0040
 800e03a:	2b6e      	cmp	r3, #110	; 0x6e
 800e03c:	d809      	bhi.n	800e052 <_scanf_float+0xf6>
 800e03e:	2b60      	cmp	r3, #96	; 0x60
 800e040:	d8d2      	bhi.n	800dfe8 <_scanf_float+0x8c>
 800e042:	2b54      	cmp	r3, #84	; 0x54
 800e044:	d07d      	beq.n	800e142 <_scanf_float+0x1e6>
 800e046:	2b59      	cmp	r3, #89	; 0x59
 800e048:	d1b9      	bne.n	800dfbe <_scanf_float+0x62>
 800e04a:	2c07      	cmp	r4, #7
 800e04c:	d1b7      	bne.n	800dfbe <_scanf_float+0x62>
 800e04e:	2408      	movs	r4, #8
 800e050:	e02c      	b.n	800e0ac <_scanf_float+0x150>
 800e052:	2b74      	cmp	r3, #116	; 0x74
 800e054:	d075      	beq.n	800e142 <_scanf_float+0x1e6>
 800e056:	2b79      	cmp	r3, #121	; 0x79
 800e058:	d0f7      	beq.n	800e04a <_scanf_float+0xee>
 800e05a:	e7b0      	b.n	800dfbe <_scanf_float+0x62>
 800e05c:	6839      	ldr	r1, [r7, #0]
 800e05e:	05c8      	lsls	r0, r1, #23
 800e060:	d51c      	bpl.n	800e09c <_scanf_float+0x140>
 800e062:	2380      	movs	r3, #128	; 0x80
 800e064:	4399      	bics	r1, r3
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	6039      	str	r1, [r7, #0]
 800e06a:	3301      	adds	r3, #1
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	9b06      	ldr	r3, [sp, #24]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d003      	beq.n	800e07c <_scanf_float+0x120>
 800e074:	3b01      	subs	r3, #1
 800e076:	3201      	adds	r2, #1
 800e078:	9306      	str	r3, [sp, #24]
 800e07a:	60ba      	str	r2, [r7, #8]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	3b01      	subs	r3, #1
 800e080:	60bb      	str	r3, [r7, #8]
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	3301      	adds	r3, #1
 800e086:	613b      	str	r3, [r7, #16]
 800e088:	6873      	ldr	r3, [r6, #4]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	6073      	str	r3, [r6, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	dc00      	bgt.n	800e094 <_scanf_float+0x138>
 800e092:	e086      	b.n	800e1a2 <_scanf_float+0x246>
 800e094:	6833      	ldr	r3, [r6, #0]
 800e096:	3301      	adds	r3, #1
 800e098:	6033      	str	r3, [r6, #0]
 800e09a:	e782      	b.n	800dfa2 <_scanf_float+0x46>
 800e09c:	9a03      	ldr	r2, [sp, #12]
 800e09e:	1912      	adds	r2, r2, r4
 800e0a0:	2a00      	cmp	r2, #0
 800e0a2:	d18c      	bne.n	800dfbe <_scanf_float+0x62>
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	496c      	ldr	r1, [pc, #432]	; (800e258 <_scanf_float+0x2fc>)
 800e0a8:	400a      	ands	r2, r1
 800e0aa:	603a      	str	r2, [r7, #0]
 800e0ac:	702b      	strb	r3, [r5, #0]
 800e0ae:	3501      	adds	r5, #1
 800e0b0:	e7e4      	b.n	800e07c <_scanf_float+0x120>
 800e0b2:	2180      	movs	r1, #128	; 0x80
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	420a      	tst	r2, r1
 800e0b8:	d081      	beq.n	800dfbe <_scanf_float+0x62>
 800e0ba:	438a      	bics	r2, r1
 800e0bc:	e7f5      	b.n	800e0aa <_scanf_float+0x14e>
 800e0be:	9a03      	ldr	r2, [sp, #12]
 800e0c0:	2a00      	cmp	r2, #0
 800e0c2:	d10f      	bne.n	800e0e4 <_scanf_float+0x188>
 800e0c4:	9a01      	ldr	r2, [sp, #4]
 800e0c6:	2a00      	cmp	r2, #0
 800e0c8:	d10f      	bne.n	800e0ea <_scanf_float+0x18e>
 800e0ca:	683a      	ldr	r2, [r7, #0]
 800e0cc:	21e0      	movs	r1, #224	; 0xe0
 800e0ce:	0010      	movs	r0, r2
 800e0d0:	00c9      	lsls	r1, r1, #3
 800e0d2:	4008      	ands	r0, r1
 800e0d4:	4288      	cmp	r0, r1
 800e0d6:	d108      	bne.n	800e0ea <_scanf_float+0x18e>
 800e0d8:	4960      	ldr	r1, [pc, #384]	; (800e25c <_scanf_float+0x300>)
 800e0da:	400a      	ands	r2, r1
 800e0dc:	603a      	str	r2, [r7, #0]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	9203      	str	r2, [sp, #12]
 800e0e2:	e7e3      	b.n	800e0ac <_scanf_float+0x150>
 800e0e4:	9a03      	ldr	r2, [sp, #12]
 800e0e6:	2a02      	cmp	r2, #2
 800e0e8:	d059      	beq.n	800e19e <_scanf_float+0x242>
 800e0ea:	2c01      	cmp	r4, #1
 800e0ec:	d002      	beq.n	800e0f4 <_scanf_float+0x198>
 800e0ee:	2c04      	cmp	r4, #4
 800e0f0:	d000      	beq.n	800e0f4 <_scanf_float+0x198>
 800e0f2:	e764      	b.n	800dfbe <_scanf_float+0x62>
 800e0f4:	3401      	adds	r4, #1
 800e0f6:	b2e4      	uxtb	r4, r4
 800e0f8:	e7d8      	b.n	800e0ac <_scanf_float+0x150>
 800e0fa:	9a03      	ldr	r2, [sp, #12]
 800e0fc:	2a01      	cmp	r2, #1
 800e0fe:	d000      	beq.n	800e102 <_scanf_float+0x1a6>
 800e100:	e75d      	b.n	800dfbe <_scanf_float+0x62>
 800e102:	2202      	movs	r2, #2
 800e104:	e7ec      	b.n	800e0e0 <_scanf_float+0x184>
 800e106:	2c00      	cmp	r4, #0
 800e108:	d110      	bne.n	800e12c <_scanf_float+0x1d0>
 800e10a:	9a01      	ldr	r2, [sp, #4]
 800e10c:	2a00      	cmp	r2, #0
 800e10e:	d000      	beq.n	800e112 <_scanf_float+0x1b6>
 800e110:	e758      	b.n	800dfc4 <_scanf_float+0x68>
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	21e0      	movs	r1, #224	; 0xe0
 800e116:	0010      	movs	r0, r2
 800e118:	00c9      	lsls	r1, r1, #3
 800e11a:	4008      	ands	r0, r1
 800e11c:	4288      	cmp	r0, r1
 800e11e:	d000      	beq.n	800e122 <_scanf_float+0x1c6>
 800e120:	e754      	b.n	800dfcc <_scanf_float+0x70>
 800e122:	494e      	ldr	r1, [pc, #312]	; (800e25c <_scanf_float+0x300>)
 800e124:	3401      	adds	r4, #1
 800e126:	400a      	ands	r2, r1
 800e128:	603a      	str	r2, [r7, #0]
 800e12a:	e7bf      	b.n	800e0ac <_scanf_float+0x150>
 800e12c:	21fd      	movs	r1, #253	; 0xfd
 800e12e:	1ee2      	subs	r2, r4, #3
 800e130:	420a      	tst	r2, r1
 800e132:	d000      	beq.n	800e136 <_scanf_float+0x1da>
 800e134:	e743      	b.n	800dfbe <_scanf_float+0x62>
 800e136:	e7dd      	b.n	800e0f4 <_scanf_float+0x198>
 800e138:	2c02      	cmp	r4, #2
 800e13a:	d000      	beq.n	800e13e <_scanf_float+0x1e2>
 800e13c:	e73f      	b.n	800dfbe <_scanf_float+0x62>
 800e13e:	2403      	movs	r4, #3
 800e140:	e7b4      	b.n	800e0ac <_scanf_float+0x150>
 800e142:	2c06      	cmp	r4, #6
 800e144:	d000      	beq.n	800e148 <_scanf_float+0x1ec>
 800e146:	e73a      	b.n	800dfbe <_scanf_float+0x62>
 800e148:	2407      	movs	r4, #7
 800e14a:	e7af      	b.n	800e0ac <_scanf_float+0x150>
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	0591      	lsls	r1, r2, #22
 800e150:	d400      	bmi.n	800e154 <_scanf_float+0x1f8>
 800e152:	e734      	b.n	800dfbe <_scanf_float+0x62>
 800e154:	4942      	ldr	r1, [pc, #264]	; (800e260 <_scanf_float+0x304>)
 800e156:	400a      	ands	r2, r1
 800e158:	603a      	str	r2, [r7, #0]
 800e15a:	9a01      	ldr	r2, [sp, #4]
 800e15c:	9205      	str	r2, [sp, #20]
 800e15e:	e7a5      	b.n	800e0ac <_scanf_float+0x150>
 800e160:	21a0      	movs	r1, #160	; 0xa0
 800e162:	2080      	movs	r0, #128	; 0x80
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	00c9      	lsls	r1, r1, #3
 800e168:	4011      	ands	r1, r2
 800e16a:	00c0      	lsls	r0, r0, #3
 800e16c:	4281      	cmp	r1, r0
 800e16e:	d006      	beq.n	800e17e <_scanf_float+0x222>
 800e170:	4202      	tst	r2, r0
 800e172:	d100      	bne.n	800e176 <_scanf_float+0x21a>
 800e174:	e723      	b.n	800dfbe <_scanf_float+0x62>
 800e176:	9901      	ldr	r1, [sp, #4]
 800e178:	2900      	cmp	r1, #0
 800e17a:	d100      	bne.n	800e17e <_scanf_float+0x222>
 800e17c:	e726      	b.n	800dfcc <_scanf_float+0x70>
 800e17e:	0591      	lsls	r1, r2, #22
 800e180:	d404      	bmi.n	800e18c <_scanf_float+0x230>
 800e182:	9901      	ldr	r1, [sp, #4]
 800e184:	9805      	ldr	r0, [sp, #20]
 800e186:	9509      	str	r5, [sp, #36]	; 0x24
 800e188:	1a09      	subs	r1, r1, r0
 800e18a:	9108      	str	r1, [sp, #32]
 800e18c:	4933      	ldr	r1, [pc, #204]	; (800e25c <_scanf_float+0x300>)
 800e18e:	400a      	ands	r2, r1
 800e190:	21c0      	movs	r1, #192	; 0xc0
 800e192:	0049      	lsls	r1, r1, #1
 800e194:	430a      	orrs	r2, r1
 800e196:	603a      	str	r2, [r7, #0]
 800e198:	2200      	movs	r2, #0
 800e19a:	9201      	str	r2, [sp, #4]
 800e19c:	e786      	b.n	800e0ac <_scanf_float+0x150>
 800e19e:	2203      	movs	r2, #3
 800e1a0:	e79e      	b.n	800e0e0 <_scanf_float+0x184>
 800e1a2:	23c0      	movs	r3, #192	; 0xc0
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	0031      	movs	r1, r6
 800e1a8:	58fb      	ldr	r3, [r7, r3]
 800e1aa:	9802      	ldr	r0, [sp, #8]
 800e1ac:	4798      	blx	r3
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d100      	bne.n	800e1b4 <_scanf_float+0x258>
 800e1b2:	e6f6      	b.n	800dfa2 <_scanf_float+0x46>
 800e1b4:	e703      	b.n	800dfbe <_scanf_float+0x62>
 800e1b6:	3d01      	subs	r5, #1
 800e1b8:	593b      	ldr	r3, [r7, r4]
 800e1ba:	0032      	movs	r2, r6
 800e1bc:	7829      	ldrb	r1, [r5, #0]
 800e1be:	9802      	ldr	r0, [sp, #8]
 800e1c0:	4798      	blx	r3
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	3b01      	subs	r3, #1
 800e1c6:	613b      	str	r3, [r7, #16]
 800e1c8:	e707      	b.n	800dfda <_scanf_float+0x7e>
 800e1ca:	1e63      	subs	r3, r4, #1
 800e1cc:	2b06      	cmp	r3, #6
 800e1ce:	d80e      	bhi.n	800e1ee <_scanf_float+0x292>
 800e1d0:	9503      	str	r5, [sp, #12]
 800e1d2:	2c02      	cmp	r4, #2
 800e1d4:	d920      	bls.n	800e218 <_scanf_float+0x2bc>
 800e1d6:	1b63      	subs	r3, r4, r5
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	9306      	str	r3, [sp, #24]
 800e1dc:	9b03      	ldr	r3, [sp, #12]
 800e1de:	9a06      	ldr	r2, [sp, #24]
 800e1e0:	189b      	adds	r3, r3, r2
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d827      	bhi.n	800e238 <_scanf_float+0x2dc>
 800e1e8:	3c03      	subs	r4, #3
 800e1ea:	b2e4      	uxtb	r4, r4
 800e1ec:	1b2d      	subs	r5, r5, r4
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	05da      	lsls	r2, r3, #23
 800e1f2:	d552      	bpl.n	800e29a <_scanf_float+0x33e>
 800e1f4:	055b      	lsls	r3, r3, #21
 800e1f6:	d535      	bpl.n	800e264 <_scanf_float+0x308>
 800e1f8:	24be      	movs	r4, #190	; 0xbe
 800e1fa:	0064      	lsls	r4, r4, #1
 800e1fc:	9b04      	ldr	r3, [sp, #16]
 800e1fe:	429d      	cmp	r5, r3
 800e200:	d800      	bhi.n	800e204 <_scanf_float+0x2a8>
 800e202:	e6ee      	b.n	800dfe2 <_scanf_float+0x86>
 800e204:	3d01      	subs	r5, #1
 800e206:	593b      	ldr	r3, [r7, r4]
 800e208:	0032      	movs	r2, r6
 800e20a:	7829      	ldrb	r1, [r5, #0]
 800e20c:	9802      	ldr	r0, [sp, #8]
 800e20e:	4798      	blx	r3
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	3b01      	subs	r3, #1
 800e214:	613b      	str	r3, [r7, #16]
 800e216:	e7f1      	b.n	800e1fc <_scanf_float+0x2a0>
 800e218:	24be      	movs	r4, #190	; 0xbe
 800e21a:	0064      	lsls	r4, r4, #1
 800e21c:	9b04      	ldr	r3, [sp, #16]
 800e21e:	429d      	cmp	r5, r3
 800e220:	d800      	bhi.n	800e224 <_scanf_float+0x2c8>
 800e222:	e6de      	b.n	800dfe2 <_scanf_float+0x86>
 800e224:	3d01      	subs	r5, #1
 800e226:	593b      	ldr	r3, [r7, r4]
 800e228:	0032      	movs	r2, r6
 800e22a:	7829      	ldrb	r1, [r5, #0]
 800e22c:	9802      	ldr	r0, [sp, #8]
 800e22e:	4798      	blx	r3
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	3b01      	subs	r3, #1
 800e234:	613b      	str	r3, [r7, #16]
 800e236:	e7f1      	b.n	800e21c <_scanf_float+0x2c0>
 800e238:	9b03      	ldr	r3, [sp, #12]
 800e23a:	0032      	movs	r2, r6
 800e23c:	3b01      	subs	r3, #1
 800e23e:	7819      	ldrb	r1, [r3, #0]
 800e240:	9303      	str	r3, [sp, #12]
 800e242:	23be      	movs	r3, #190	; 0xbe
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	58fb      	ldr	r3, [r7, r3]
 800e248:	9802      	ldr	r0, [sp, #8]
 800e24a:	4798      	blx	r3
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	3b01      	subs	r3, #1
 800e250:	613b      	str	r3, [r7, #16]
 800e252:	e7c3      	b.n	800e1dc <_scanf_float+0x280>
 800e254:	fffffeff 	.word	0xfffffeff
 800e258:	fffffe7f 	.word	0xfffffe7f
 800e25c:	fffff87f 	.word	0xfffff87f
 800e260:	fffffd7f 	.word	0xfffffd7f
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	1e6c      	subs	r4, r5, #1
 800e268:	7821      	ldrb	r1, [r4, #0]
 800e26a:	3b01      	subs	r3, #1
 800e26c:	613b      	str	r3, [r7, #16]
 800e26e:	2965      	cmp	r1, #101	; 0x65
 800e270:	d00c      	beq.n	800e28c <_scanf_float+0x330>
 800e272:	2945      	cmp	r1, #69	; 0x45
 800e274:	d00a      	beq.n	800e28c <_scanf_float+0x330>
 800e276:	23be      	movs	r3, #190	; 0xbe
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	58fb      	ldr	r3, [r7, r3]
 800e27c:	0032      	movs	r2, r6
 800e27e:	9802      	ldr	r0, [sp, #8]
 800e280:	4798      	blx	r3
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	1eac      	subs	r4, r5, #2
 800e286:	3b01      	subs	r3, #1
 800e288:	7821      	ldrb	r1, [r4, #0]
 800e28a:	613b      	str	r3, [r7, #16]
 800e28c:	23be      	movs	r3, #190	; 0xbe
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	0032      	movs	r2, r6
 800e292:	58fb      	ldr	r3, [r7, r3]
 800e294:	9802      	ldr	r0, [sp, #8]
 800e296:	4798      	blx	r3
 800e298:	0025      	movs	r5, r4
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	2310      	movs	r3, #16
 800e29e:	0011      	movs	r1, r2
 800e2a0:	4019      	ands	r1, r3
 800e2a2:	9103      	str	r1, [sp, #12]
 800e2a4:	421a      	tst	r2, r3
 800e2a6:	d15b      	bne.n	800e360 <_scanf_float+0x404>
 800e2a8:	22c0      	movs	r2, #192	; 0xc0
 800e2aa:	7029      	strb	r1, [r5, #0]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	00d2      	lsls	r2, r2, #3
 800e2b0:	4013      	ands	r3, r2
 800e2b2:	2280      	movs	r2, #128	; 0x80
 800e2b4:	00d2      	lsls	r2, r2, #3
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d11d      	bne.n	800e2f6 <_scanf_float+0x39a>
 800e2ba:	9b05      	ldr	r3, [sp, #20]
 800e2bc:	9a01      	ldr	r2, [sp, #4]
 800e2be:	9901      	ldr	r1, [sp, #4]
 800e2c0:	1a9a      	subs	r2, r3, r2
 800e2c2:	428b      	cmp	r3, r1
 800e2c4:	d124      	bne.n	800e310 <_scanf_float+0x3b4>
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	9904      	ldr	r1, [sp, #16]
 800e2ca:	9802      	ldr	r0, [sp, #8]
 800e2cc:	f7ff f91c 	bl	800d508 <_strtod_r>
 800e2d0:	9b07      	ldr	r3, [sp, #28]
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	0004      	movs	r4, r0
 800e2d6:	000d      	movs	r5, r1
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	0791      	lsls	r1, r2, #30
 800e2dc:	d525      	bpl.n	800e32a <_scanf_float+0x3ce>
 800e2de:	9907      	ldr	r1, [sp, #28]
 800e2e0:	1d1a      	adds	r2, r3, #4
 800e2e2:	600a      	str	r2, [r1, #0]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	601c      	str	r4, [r3, #0]
 800e2e8:	605d      	str	r5, [r3, #4]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	60fb      	str	r3, [r7, #12]
 800e2f0:	9803      	ldr	r0, [sp, #12]
 800e2f2:	b00b      	add	sp, #44	; 0x2c
 800e2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2f6:	9b08      	ldr	r3, [sp, #32]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d0e4      	beq.n	800e2c6 <_scanf_float+0x36a>
 800e2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2fe:	9a03      	ldr	r2, [sp, #12]
 800e300:	1c59      	adds	r1, r3, #1
 800e302:	9802      	ldr	r0, [sp, #8]
 800e304:	230a      	movs	r3, #10
 800e306:	f7ff f99b 	bl	800d640 <_strtol_r>
 800e30a:	9b08      	ldr	r3, [sp, #32]
 800e30c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e30e:	1ac2      	subs	r2, r0, r3
 800e310:	003b      	movs	r3, r7
 800e312:	3370      	adds	r3, #112	; 0x70
 800e314:	33ff      	adds	r3, #255	; 0xff
 800e316:	429d      	cmp	r5, r3
 800e318:	d302      	bcc.n	800e320 <_scanf_float+0x3c4>
 800e31a:	003d      	movs	r5, r7
 800e31c:	356f      	adds	r5, #111	; 0x6f
 800e31e:	35ff      	adds	r5, #255	; 0xff
 800e320:	0028      	movs	r0, r5
 800e322:	4910      	ldr	r1, [pc, #64]	; (800e364 <_scanf_float+0x408>)
 800e324:	f000 f91a 	bl	800e55c <siprintf>
 800e328:	e7cd      	b.n	800e2c6 <_scanf_float+0x36a>
 800e32a:	1d19      	adds	r1, r3, #4
 800e32c:	0752      	lsls	r2, r2, #29
 800e32e:	d502      	bpl.n	800e336 <_scanf_float+0x3da>
 800e330:	9a07      	ldr	r2, [sp, #28]
 800e332:	6011      	str	r1, [r2, #0]
 800e334:	e7d6      	b.n	800e2e4 <_scanf_float+0x388>
 800e336:	9a07      	ldr	r2, [sp, #28]
 800e338:	0020      	movs	r0, r4
 800e33a:	6011      	str	r1, [r2, #0]
 800e33c:	681e      	ldr	r6, [r3, #0]
 800e33e:	0022      	movs	r2, r4
 800e340:	002b      	movs	r3, r5
 800e342:	0029      	movs	r1, r5
 800e344:	f7f4 fe0a 	bl	8002f5c <__aeabi_dcmpun>
 800e348:	2800      	cmp	r0, #0
 800e34a:	d004      	beq.n	800e356 <_scanf_float+0x3fa>
 800e34c:	4806      	ldr	r0, [pc, #24]	; (800e368 <_scanf_float+0x40c>)
 800e34e:	f000 fb53 	bl	800e9f8 <nanf>
 800e352:	6030      	str	r0, [r6, #0]
 800e354:	e7c9      	b.n	800e2ea <_scanf_float+0x38e>
 800e356:	0020      	movs	r0, r4
 800e358:	0029      	movs	r1, r5
 800e35a:	f7f4 fef1 	bl	8003140 <__aeabi_d2f>
 800e35e:	e7f8      	b.n	800e352 <_scanf_float+0x3f6>
 800e360:	2300      	movs	r3, #0
 800e362:	e63f      	b.n	800dfe4 <_scanf_float+0x88>
 800e364:	080136fd 	.word	0x080136fd
 800e368:	080137b6 	.word	0x080137b6

0800e36c <std>:
 800e36c:	2300      	movs	r3, #0
 800e36e:	b510      	push	{r4, lr}
 800e370:	0004      	movs	r4, r0
 800e372:	6003      	str	r3, [r0, #0]
 800e374:	6043      	str	r3, [r0, #4]
 800e376:	6083      	str	r3, [r0, #8]
 800e378:	8181      	strh	r1, [r0, #12]
 800e37a:	6643      	str	r3, [r0, #100]	; 0x64
 800e37c:	81c2      	strh	r2, [r0, #14]
 800e37e:	6103      	str	r3, [r0, #16]
 800e380:	6143      	str	r3, [r0, #20]
 800e382:	6183      	str	r3, [r0, #24]
 800e384:	0019      	movs	r1, r3
 800e386:	2208      	movs	r2, #8
 800e388:	305c      	adds	r0, #92	; 0x5c
 800e38a:	f000 f953 	bl	800e634 <memset>
 800e38e:	4b0b      	ldr	r3, [pc, #44]	; (800e3bc <std+0x50>)
 800e390:	6224      	str	r4, [r4, #32]
 800e392:	6263      	str	r3, [r4, #36]	; 0x24
 800e394:	4b0a      	ldr	r3, [pc, #40]	; (800e3c0 <std+0x54>)
 800e396:	62a3      	str	r3, [r4, #40]	; 0x28
 800e398:	4b0a      	ldr	r3, [pc, #40]	; (800e3c4 <std+0x58>)
 800e39a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e39c:	4b0a      	ldr	r3, [pc, #40]	; (800e3c8 <std+0x5c>)
 800e39e:	6323      	str	r3, [r4, #48]	; 0x30
 800e3a0:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <std+0x60>)
 800e3a2:	429c      	cmp	r4, r3
 800e3a4:	d005      	beq.n	800e3b2 <std+0x46>
 800e3a6:	4b0a      	ldr	r3, [pc, #40]	; (800e3d0 <std+0x64>)
 800e3a8:	429c      	cmp	r4, r3
 800e3aa:	d002      	beq.n	800e3b2 <std+0x46>
 800e3ac:	4b09      	ldr	r3, [pc, #36]	; (800e3d4 <std+0x68>)
 800e3ae:	429c      	cmp	r4, r3
 800e3b0:	d103      	bne.n	800e3ba <std+0x4e>
 800e3b2:	0020      	movs	r0, r4
 800e3b4:	3058      	adds	r0, #88	; 0x58
 800e3b6:	f000 faf9 	bl	800e9ac <__retarget_lock_init_recursive>
 800e3ba:	bd10      	pop	{r4, pc}
 800e3bc:	0800e59d 	.word	0x0800e59d
 800e3c0:	0800e5c5 	.word	0x0800e5c5
 800e3c4:	0800e5fd 	.word	0x0800e5fd
 800e3c8:	0800e629 	.word	0x0800e629
 800e3cc:	20006514 	.word	0x20006514
 800e3d0:	2000657c 	.word	0x2000657c
 800e3d4:	200065e4 	.word	0x200065e4

0800e3d8 <stdio_exit_handler>:
 800e3d8:	b510      	push	{r4, lr}
 800e3da:	4a03      	ldr	r2, [pc, #12]	; (800e3e8 <stdio_exit_handler+0x10>)
 800e3dc:	4903      	ldr	r1, [pc, #12]	; (800e3ec <stdio_exit_handler+0x14>)
 800e3de:	4804      	ldr	r0, [pc, #16]	; (800e3f0 <stdio_exit_handler+0x18>)
 800e3e0:	f000 f86c 	bl	800e4bc <_fwalk_sglue>
 800e3e4:	bd10      	pop	{r4, pc}
 800e3e6:	46c0      	nop			; (mov r8, r8)
 800e3e8:	200000f4 	.word	0x200000f4
 800e3ec:	08010c51 	.word	0x08010c51
 800e3f0:	2000026c 	.word	0x2000026c

0800e3f4 <cleanup_stdio>:
 800e3f4:	6841      	ldr	r1, [r0, #4]
 800e3f6:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <cleanup_stdio+0x30>)
 800e3f8:	b510      	push	{r4, lr}
 800e3fa:	0004      	movs	r4, r0
 800e3fc:	4299      	cmp	r1, r3
 800e3fe:	d001      	beq.n	800e404 <cleanup_stdio+0x10>
 800e400:	f002 fc26 	bl	8010c50 <_fflush_r>
 800e404:	68a1      	ldr	r1, [r4, #8]
 800e406:	4b08      	ldr	r3, [pc, #32]	; (800e428 <cleanup_stdio+0x34>)
 800e408:	4299      	cmp	r1, r3
 800e40a:	d002      	beq.n	800e412 <cleanup_stdio+0x1e>
 800e40c:	0020      	movs	r0, r4
 800e40e:	f002 fc1f 	bl	8010c50 <_fflush_r>
 800e412:	68e1      	ldr	r1, [r4, #12]
 800e414:	4b05      	ldr	r3, [pc, #20]	; (800e42c <cleanup_stdio+0x38>)
 800e416:	4299      	cmp	r1, r3
 800e418:	d002      	beq.n	800e420 <cleanup_stdio+0x2c>
 800e41a:	0020      	movs	r0, r4
 800e41c:	f002 fc18 	bl	8010c50 <_fflush_r>
 800e420:	bd10      	pop	{r4, pc}
 800e422:	46c0      	nop			; (mov r8, r8)
 800e424:	20006514 	.word	0x20006514
 800e428:	2000657c 	.word	0x2000657c
 800e42c:	200065e4 	.word	0x200065e4

0800e430 <global_stdio_init.part.0>:
 800e430:	b510      	push	{r4, lr}
 800e432:	4b09      	ldr	r3, [pc, #36]	; (800e458 <global_stdio_init.part.0+0x28>)
 800e434:	4a09      	ldr	r2, [pc, #36]	; (800e45c <global_stdio_init.part.0+0x2c>)
 800e436:	2104      	movs	r1, #4
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	4809      	ldr	r0, [pc, #36]	; (800e460 <global_stdio_init.part.0+0x30>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	f7ff ff95 	bl	800e36c <std>
 800e442:	2201      	movs	r2, #1
 800e444:	2109      	movs	r1, #9
 800e446:	4807      	ldr	r0, [pc, #28]	; (800e464 <global_stdio_init.part.0+0x34>)
 800e448:	f7ff ff90 	bl	800e36c <std>
 800e44c:	2202      	movs	r2, #2
 800e44e:	2112      	movs	r1, #18
 800e450:	4805      	ldr	r0, [pc, #20]	; (800e468 <global_stdio_init.part.0+0x38>)
 800e452:	f7ff ff8b 	bl	800e36c <std>
 800e456:	bd10      	pop	{r4, pc}
 800e458:	2000664c 	.word	0x2000664c
 800e45c:	0800e3d9 	.word	0x0800e3d9
 800e460:	20006514 	.word	0x20006514
 800e464:	2000657c 	.word	0x2000657c
 800e468:	200065e4 	.word	0x200065e4

0800e46c <__sfp_lock_acquire>:
 800e46c:	b510      	push	{r4, lr}
 800e46e:	4802      	ldr	r0, [pc, #8]	; (800e478 <__sfp_lock_acquire+0xc>)
 800e470:	f000 fa9d 	bl	800e9ae <__retarget_lock_acquire_recursive>
 800e474:	bd10      	pop	{r4, pc}
 800e476:	46c0      	nop			; (mov r8, r8)
 800e478:	20006655 	.word	0x20006655

0800e47c <__sfp_lock_release>:
 800e47c:	b510      	push	{r4, lr}
 800e47e:	4802      	ldr	r0, [pc, #8]	; (800e488 <__sfp_lock_release+0xc>)
 800e480:	f000 fa96 	bl	800e9b0 <__retarget_lock_release_recursive>
 800e484:	bd10      	pop	{r4, pc}
 800e486:	46c0      	nop			; (mov r8, r8)
 800e488:	20006655 	.word	0x20006655

0800e48c <__sinit>:
 800e48c:	b510      	push	{r4, lr}
 800e48e:	0004      	movs	r4, r0
 800e490:	f7ff ffec 	bl	800e46c <__sfp_lock_acquire>
 800e494:	6a23      	ldr	r3, [r4, #32]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d002      	beq.n	800e4a0 <__sinit+0x14>
 800e49a:	f7ff ffef 	bl	800e47c <__sfp_lock_release>
 800e49e:	bd10      	pop	{r4, pc}
 800e4a0:	4b04      	ldr	r3, [pc, #16]	; (800e4b4 <__sinit+0x28>)
 800e4a2:	6223      	str	r3, [r4, #32]
 800e4a4:	4b04      	ldr	r3, [pc, #16]	; (800e4b8 <__sinit+0x2c>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1f6      	bne.n	800e49a <__sinit+0xe>
 800e4ac:	f7ff ffc0 	bl	800e430 <global_stdio_init.part.0>
 800e4b0:	e7f3      	b.n	800e49a <__sinit+0xe>
 800e4b2:	46c0      	nop			; (mov r8, r8)
 800e4b4:	0800e3f5 	.word	0x0800e3f5
 800e4b8:	2000664c 	.word	0x2000664c

0800e4bc <_fwalk_sglue>:
 800e4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4be:	0014      	movs	r4, r2
 800e4c0:	2600      	movs	r6, #0
 800e4c2:	9000      	str	r0, [sp, #0]
 800e4c4:	9101      	str	r1, [sp, #4]
 800e4c6:	68a5      	ldr	r5, [r4, #8]
 800e4c8:	6867      	ldr	r7, [r4, #4]
 800e4ca:	3f01      	subs	r7, #1
 800e4cc:	d504      	bpl.n	800e4d8 <_fwalk_sglue+0x1c>
 800e4ce:	6824      	ldr	r4, [r4, #0]
 800e4d0:	2c00      	cmp	r4, #0
 800e4d2:	d1f8      	bne.n	800e4c6 <_fwalk_sglue+0xa>
 800e4d4:	0030      	movs	r0, r6
 800e4d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e4d8:	89ab      	ldrh	r3, [r5, #12]
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d908      	bls.n	800e4f0 <_fwalk_sglue+0x34>
 800e4de:	220e      	movs	r2, #14
 800e4e0:	5eab      	ldrsh	r3, [r5, r2]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	d004      	beq.n	800e4f0 <_fwalk_sglue+0x34>
 800e4e6:	0029      	movs	r1, r5
 800e4e8:	9800      	ldr	r0, [sp, #0]
 800e4ea:	9b01      	ldr	r3, [sp, #4]
 800e4ec:	4798      	blx	r3
 800e4ee:	4306      	orrs	r6, r0
 800e4f0:	3568      	adds	r5, #104	; 0x68
 800e4f2:	e7ea      	b.n	800e4ca <_fwalk_sglue+0xe>

0800e4f4 <sniprintf>:
 800e4f4:	b40c      	push	{r2, r3}
 800e4f6:	b530      	push	{r4, r5, lr}
 800e4f8:	4b17      	ldr	r3, [pc, #92]	; (800e558 <sniprintf+0x64>)
 800e4fa:	000c      	movs	r4, r1
 800e4fc:	681d      	ldr	r5, [r3, #0]
 800e4fe:	b09d      	sub	sp, #116	; 0x74
 800e500:	2900      	cmp	r1, #0
 800e502:	da08      	bge.n	800e516 <sniprintf+0x22>
 800e504:	238b      	movs	r3, #139	; 0x8b
 800e506:	2001      	movs	r0, #1
 800e508:	602b      	str	r3, [r5, #0]
 800e50a:	4240      	negs	r0, r0
 800e50c:	b01d      	add	sp, #116	; 0x74
 800e50e:	bc30      	pop	{r4, r5}
 800e510:	bc08      	pop	{r3}
 800e512:	b002      	add	sp, #8
 800e514:	4718      	bx	r3
 800e516:	2382      	movs	r3, #130	; 0x82
 800e518:	466a      	mov	r2, sp
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	8293      	strh	r3, [r2, #20]
 800e51e:	2300      	movs	r3, #0
 800e520:	9002      	str	r0, [sp, #8]
 800e522:	9006      	str	r0, [sp, #24]
 800e524:	4299      	cmp	r1, r3
 800e526:	d000      	beq.n	800e52a <sniprintf+0x36>
 800e528:	1e4b      	subs	r3, r1, #1
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	9307      	str	r3, [sp, #28]
 800e52e:	2301      	movs	r3, #1
 800e530:	466a      	mov	r2, sp
 800e532:	425b      	negs	r3, r3
 800e534:	82d3      	strh	r3, [r2, #22]
 800e536:	0028      	movs	r0, r5
 800e538:	ab21      	add	r3, sp, #132	; 0x84
 800e53a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e53c:	a902      	add	r1, sp, #8
 800e53e:	9301      	str	r3, [sp, #4]
 800e540:	f002 f9fc 	bl	801093c <_svfiprintf_r>
 800e544:	1c43      	adds	r3, r0, #1
 800e546:	da01      	bge.n	800e54c <sniprintf+0x58>
 800e548:	238b      	movs	r3, #139	; 0x8b
 800e54a:	602b      	str	r3, [r5, #0]
 800e54c:	2c00      	cmp	r4, #0
 800e54e:	d0dd      	beq.n	800e50c <sniprintf+0x18>
 800e550:	2200      	movs	r2, #0
 800e552:	9b02      	ldr	r3, [sp, #8]
 800e554:	701a      	strb	r2, [r3, #0]
 800e556:	e7d9      	b.n	800e50c <sniprintf+0x18>
 800e558:	200002b8 	.word	0x200002b8

0800e55c <siprintf>:
 800e55c:	b40e      	push	{r1, r2, r3}
 800e55e:	b500      	push	{lr}
 800e560:	490b      	ldr	r1, [pc, #44]	; (800e590 <siprintf+0x34>)
 800e562:	b09c      	sub	sp, #112	; 0x70
 800e564:	ab1d      	add	r3, sp, #116	; 0x74
 800e566:	9002      	str	r0, [sp, #8]
 800e568:	9006      	str	r0, [sp, #24]
 800e56a:	9107      	str	r1, [sp, #28]
 800e56c:	9104      	str	r1, [sp, #16]
 800e56e:	4809      	ldr	r0, [pc, #36]	; (800e594 <siprintf+0x38>)
 800e570:	4909      	ldr	r1, [pc, #36]	; (800e598 <siprintf+0x3c>)
 800e572:	cb04      	ldmia	r3!, {r2}
 800e574:	9105      	str	r1, [sp, #20]
 800e576:	6800      	ldr	r0, [r0, #0]
 800e578:	a902      	add	r1, sp, #8
 800e57a:	9301      	str	r3, [sp, #4]
 800e57c:	f002 f9de 	bl	801093c <_svfiprintf_r>
 800e580:	2200      	movs	r2, #0
 800e582:	9b02      	ldr	r3, [sp, #8]
 800e584:	701a      	strb	r2, [r3, #0]
 800e586:	b01c      	add	sp, #112	; 0x70
 800e588:	bc08      	pop	{r3}
 800e58a:	b003      	add	sp, #12
 800e58c:	4718      	bx	r3
 800e58e:	46c0      	nop			; (mov r8, r8)
 800e590:	7fffffff 	.word	0x7fffffff
 800e594:	200002b8 	.word	0x200002b8
 800e598:	ffff0208 	.word	0xffff0208

0800e59c <__sread>:
 800e59c:	b570      	push	{r4, r5, r6, lr}
 800e59e:	000c      	movs	r4, r1
 800e5a0:	250e      	movs	r5, #14
 800e5a2:	5f49      	ldrsh	r1, [r1, r5]
 800e5a4:	f000 f99e 	bl	800e8e4 <_read_r>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	db03      	blt.n	800e5b4 <__sread+0x18>
 800e5ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e5ae:	181b      	adds	r3, r3, r0
 800e5b0:	6563      	str	r3, [r4, #84]	; 0x54
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	89a3      	ldrh	r3, [r4, #12]
 800e5b6:	4a02      	ldr	r2, [pc, #8]	; (800e5c0 <__sread+0x24>)
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	81a3      	strh	r3, [r4, #12]
 800e5bc:	e7f9      	b.n	800e5b2 <__sread+0x16>
 800e5be:	46c0      	nop			; (mov r8, r8)
 800e5c0:	ffffefff 	.word	0xffffefff

0800e5c4 <__swrite>:
 800e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c6:	001f      	movs	r7, r3
 800e5c8:	898b      	ldrh	r3, [r1, #12]
 800e5ca:	0005      	movs	r5, r0
 800e5cc:	000c      	movs	r4, r1
 800e5ce:	0016      	movs	r6, r2
 800e5d0:	05db      	lsls	r3, r3, #23
 800e5d2:	d505      	bpl.n	800e5e0 <__swrite+0x1c>
 800e5d4:	230e      	movs	r3, #14
 800e5d6:	5ec9      	ldrsh	r1, [r1, r3]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	2302      	movs	r3, #2
 800e5dc:	f000 f96e 	bl	800e8bc <_lseek_r>
 800e5e0:	89a3      	ldrh	r3, [r4, #12]
 800e5e2:	4a05      	ldr	r2, [pc, #20]	; (800e5f8 <__swrite+0x34>)
 800e5e4:	0028      	movs	r0, r5
 800e5e6:	4013      	ands	r3, r2
 800e5e8:	81a3      	strh	r3, [r4, #12]
 800e5ea:	0032      	movs	r2, r6
 800e5ec:	230e      	movs	r3, #14
 800e5ee:	5ee1      	ldrsh	r1, [r4, r3]
 800e5f0:	003b      	movs	r3, r7
 800e5f2:	f000 f99d 	bl	800e930 <_write_r>
 800e5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5f8:	ffffefff 	.word	0xffffefff

0800e5fc <__sseek>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	000c      	movs	r4, r1
 800e600:	250e      	movs	r5, #14
 800e602:	5f49      	ldrsh	r1, [r1, r5]
 800e604:	f000 f95a 	bl	800e8bc <_lseek_r>
 800e608:	89a3      	ldrh	r3, [r4, #12]
 800e60a:	1c42      	adds	r2, r0, #1
 800e60c:	d103      	bne.n	800e616 <__sseek+0x1a>
 800e60e:	4a05      	ldr	r2, [pc, #20]	; (800e624 <__sseek+0x28>)
 800e610:	4013      	ands	r3, r2
 800e612:	81a3      	strh	r3, [r4, #12]
 800e614:	bd70      	pop	{r4, r5, r6, pc}
 800e616:	2280      	movs	r2, #128	; 0x80
 800e618:	0152      	lsls	r2, r2, #5
 800e61a:	4313      	orrs	r3, r2
 800e61c:	81a3      	strh	r3, [r4, #12]
 800e61e:	6560      	str	r0, [r4, #84]	; 0x54
 800e620:	e7f8      	b.n	800e614 <__sseek+0x18>
 800e622:	46c0      	nop			; (mov r8, r8)
 800e624:	ffffefff 	.word	0xffffefff

0800e628 <__sclose>:
 800e628:	b510      	push	{r4, lr}
 800e62a:	230e      	movs	r3, #14
 800e62c:	5ec9      	ldrsh	r1, [r1, r3]
 800e62e:	f000 f8d5 	bl	800e7dc <_close_r>
 800e632:	bd10      	pop	{r4, pc}

0800e634 <memset>:
 800e634:	0003      	movs	r3, r0
 800e636:	1882      	adds	r2, r0, r2
 800e638:	4293      	cmp	r3, r2
 800e63a:	d100      	bne.n	800e63e <memset+0xa>
 800e63c:	4770      	bx	lr
 800e63e:	7019      	strb	r1, [r3, #0]
 800e640:	3301      	adds	r3, #1
 800e642:	e7f9      	b.n	800e638 <memset+0x4>

0800e644 <strcat>:
 800e644:	0002      	movs	r2, r0
 800e646:	b510      	push	{r4, lr}
 800e648:	7813      	ldrb	r3, [r2, #0]
 800e64a:	0014      	movs	r4, r2
 800e64c:	3201      	adds	r2, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1fa      	bne.n	800e648 <strcat+0x4>
 800e652:	5cca      	ldrb	r2, [r1, r3]
 800e654:	54e2      	strb	r2, [r4, r3]
 800e656:	3301      	adds	r3, #1
 800e658:	2a00      	cmp	r2, #0
 800e65a:	d1fa      	bne.n	800e652 <strcat+0xe>
 800e65c:	bd10      	pop	{r4, pc}

0800e65e <strchr>:
 800e65e:	b2c9      	uxtb	r1, r1
 800e660:	7803      	ldrb	r3, [r0, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d004      	beq.n	800e670 <strchr+0x12>
 800e666:	428b      	cmp	r3, r1
 800e668:	d100      	bne.n	800e66c <strchr+0xe>
 800e66a:	4770      	bx	lr
 800e66c:	3001      	adds	r0, #1
 800e66e:	e7f7      	b.n	800e660 <strchr+0x2>
 800e670:	424b      	negs	r3, r1
 800e672:	4159      	adcs	r1, r3
 800e674:	4249      	negs	r1, r1
 800e676:	4008      	ands	r0, r1
 800e678:	e7f7      	b.n	800e66a <strchr+0xc>

0800e67a <strncmp>:
 800e67a:	b530      	push	{r4, r5, lr}
 800e67c:	0005      	movs	r5, r0
 800e67e:	1e10      	subs	r0, r2, #0
 800e680:	d00b      	beq.n	800e69a <strncmp+0x20>
 800e682:	2400      	movs	r4, #0
 800e684:	3a01      	subs	r2, #1
 800e686:	5d2b      	ldrb	r3, [r5, r4]
 800e688:	5d08      	ldrb	r0, [r1, r4]
 800e68a:	4283      	cmp	r3, r0
 800e68c:	d104      	bne.n	800e698 <strncmp+0x1e>
 800e68e:	42a2      	cmp	r2, r4
 800e690:	d002      	beq.n	800e698 <strncmp+0x1e>
 800e692:	3401      	adds	r4, #1
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1f6      	bne.n	800e686 <strncmp+0xc>
 800e698:	1a18      	subs	r0, r3, r0
 800e69a:	bd30      	pop	{r4, r5, pc}

0800e69c <strncpy>:
 800e69c:	0003      	movs	r3, r0
 800e69e:	b530      	push	{r4, r5, lr}
 800e6a0:	001d      	movs	r5, r3
 800e6a2:	2a00      	cmp	r2, #0
 800e6a4:	d006      	beq.n	800e6b4 <strncpy+0x18>
 800e6a6:	780c      	ldrb	r4, [r1, #0]
 800e6a8:	3a01      	subs	r2, #1
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	702c      	strb	r4, [r5, #0]
 800e6ae:	3101      	adds	r1, #1
 800e6b0:	2c00      	cmp	r4, #0
 800e6b2:	d1f5      	bne.n	800e6a0 <strncpy+0x4>
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	189a      	adds	r2, r3, r2
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d100      	bne.n	800e6be <strncpy+0x22>
 800e6bc:	bd30      	pop	{r4, r5, pc}
 800e6be:	7019      	strb	r1, [r3, #0]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	e7f9      	b.n	800e6b8 <strncpy+0x1c>

0800e6c4 <strtok>:
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	4b16      	ldr	r3, [pc, #88]	; (800e720 <strtok+0x5c>)
 800e6c8:	0005      	movs	r5, r0
 800e6ca:	681f      	ldr	r7, [r3, #0]
 800e6cc:	000e      	movs	r6, r1
 800e6ce:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800e6d0:	2c00      	cmp	r4, #0
 800e6d2:	d11d      	bne.n	800e710 <strtok+0x4c>
 800e6d4:	2050      	movs	r0, #80	; 0x50
 800e6d6:	f7fe f837 	bl	800c748 <malloc>
 800e6da:	1e02      	subs	r2, r0, #0
 800e6dc:	6478      	str	r0, [r7, #68]	; 0x44
 800e6de:	d104      	bne.n	800e6ea <strtok+0x26>
 800e6e0:	215b      	movs	r1, #91	; 0x5b
 800e6e2:	4b10      	ldr	r3, [pc, #64]	; (800e724 <strtok+0x60>)
 800e6e4:	4810      	ldr	r0, [pc, #64]	; (800e728 <strtok+0x64>)
 800e6e6:	f000 f98b 	bl	800ea00 <__assert_func>
 800e6ea:	6004      	str	r4, [r0, #0]
 800e6ec:	6044      	str	r4, [r0, #4]
 800e6ee:	6084      	str	r4, [r0, #8]
 800e6f0:	60c4      	str	r4, [r0, #12]
 800e6f2:	6104      	str	r4, [r0, #16]
 800e6f4:	6144      	str	r4, [r0, #20]
 800e6f6:	6184      	str	r4, [r0, #24]
 800e6f8:	6284      	str	r4, [r0, #40]	; 0x28
 800e6fa:	62c4      	str	r4, [r0, #44]	; 0x2c
 800e6fc:	6304      	str	r4, [r0, #48]	; 0x30
 800e6fe:	6344      	str	r4, [r0, #52]	; 0x34
 800e700:	6384      	str	r4, [r0, #56]	; 0x38
 800e702:	63c4      	str	r4, [r0, #60]	; 0x3c
 800e704:	6404      	str	r4, [r0, #64]	; 0x40
 800e706:	6444      	str	r4, [r0, #68]	; 0x44
 800e708:	6484      	str	r4, [r0, #72]	; 0x48
 800e70a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800e70c:	7704      	strb	r4, [r0, #28]
 800e70e:	6244      	str	r4, [r0, #36]	; 0x24
 800e710:	0031      	movs	r1, r6
 800e712:	0028      	movs	r0, r5
 800e714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e716:	2301      	movs	r3, #1
 800e718:	f000 f808 	bl	800e72c <__strtok_r>
 800e71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e71e:	46c0      	nop			; (mov r8, r8)
 800e720:	200002b8 	.word	0x200002b8
 800e724:	08013702 	.word	0x08013702
 800e728:	08013719 	.word	0x08013719

0800e72c <__strtok_r>:
 800e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72e:	2800      	cmp	r0, #0
 800e730:	d102      	bne.n	800e738 <__strtok_r+0xc>
 800e732:	6810      	ldr	r0, [r2, #0]
 800e734:	2800      	cmp	r0, #0
 800e736:	d013      	beq.n	800e760 <__strtok_r+0x34>
 800e738:	0004      	movs	r4, r0
 800e73a:	0020      	movs	r0, r4
 800e73c:	000e      	movs	r6, r1
 800e73e:	7805      	ldrb	r5, [r0, #0]
 800e740:	3401      	adds	r4, #1
 800e742:	7837      	ldrb	r7, [r6, #0]
 800e744:	2f00      	cmp	r7, #0
 800e746:	d104      	bne.n	800e752 <__strtok_r+0x26>
 800e748:	2d00      	cmp	r5, #0
 800e74a:	d10f      	bne.n	800e76c <__strtok_r+0x40>
 800e74c:	0028      	movs	r0, r5
 800e74e:	6015      	str	r5, [r2, #0]
 800e750:	e006      	b.n	800e760 <__strtok_r+0x34>
 800e752:	3601      	adds	r6, #1
 800e754:	42bd      	cmp	r5, r7
 800e756:	d1f4      	bne.n	800e742 <__strtok_r+0x16>
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1ee      	bne.n	800e73a <__strtok_r+0xe>
 800e75c:	6014      	str	r4, [r2, #0]
 800e75e:	7003      	strb	r3, [r0, #0]
 800e760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e762:	002f      	movs	r7, r5
 800e764:	e00f      	b.n	800e786 <__strtok_r+0x5a>
 800e766:	3301      	adds	r3, #1
 800e768:	2e00      	cmp	r6, #0
 800e76a:	d104      	bne.n	800e776 <__strtok_r+0x4a>
 800e76c:	0023      	movs	r3, r4
 800e76e:	3401      	adds	r4, #1
 800e770:	781d      	ldrb	r5, [r3, #0]
 800e772:	0027      	movs	r7, r4
 800e774:	000b      	movs	r3, r1
 800e776:	781e      	ldrb	r6, [r3, #0]
 800e778:	42b5      	cmp	r5, r6
 800e77a:	d1f4      	bne.n	800e766 <__strtok_r+0x3a>
 800e77c:	2d00      	cmp	r5, #0
 800e77e:	d0f0      	beq.n	800e762 <__strtok_r+0x36>
 800e780:	2300      	movs	r3, #0
 800e782:	3c01      	subs	r4, #1
 800e784:	7023      	strb	r3, [r4, #0]
 800e786:	6017      	str	r7, [r2, #0]
 800e788:	e7ea      	b.n	800e760 <__strtok_r+0x34>

0800e78a <strtok_r>:
 800e78a:	b510      	push	{r4, lr}
 800e78c:	2301      	movs	r3, #1
 800e78e:	f7ff ffcd 	bl	800e72c <__strtok_r>
 800e792:	bd10      	pop	{r4, pc}

0800e794 <strstr>:
 800e794:	780a      	ldrb	r2, [r1, #0]
 800e796:	b530      	push	{r4, r5, lr}
 800e798:	2a00      	cmp	r2, #0
 800e79a:	d10c      	bne.n	800e7b6 <strstr+0x22>
 800e79c:	bd30      	pop	{r4, r5, pc}
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d108      	bne.n	800e7b4 <strstr+0x20>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	5ccc      	ldrb	r4, [r1, r3]
 800e7a6:	2c00      	cmp	r4, #0
 800e7a8:	d0f8      	beq.n	800e79c <strstr+0x8>
 800e7aa:	5cc5      	ldrb	r5, [r0, r3]
 800e7ac:	42a5      	cmp	r5, r4
 800e7ae:	d101      	bne.n	800e7b4 <strstr+0x20>
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	e7f7      	b.n	800e7a4 <strstr+0x10>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	7803      	ldrb	r3, [r0, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1f0      	bne.n	800e79e <strstr+0xa>
 800e7bc:	0018      	movs	r0, r3
 800e7be:	e7ed      	b.n	800e79c <strstr+0x8>

0800e7c0 <stpcpy>:
 800e7c0:	0003      	movs	r3, r0
 800e7c2:	780a      	ldrb	r2, [r1, #0]
 800e7c4:	0018      	movs	r0, r3
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	3101      	adds	r1, #1
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	2a00      	cmp	r2, #0
 800e7ce:	d1f8      	bne.n	800e7c2 <stpcpy+0x2>
 800e7d0:	4770      	bx	lr
	...

0800e7d4 <_localeconv_r>:
 800e7d4:	4800      	ldr	r0, [pc, #0]	; (800e7d8 <_localeconv_r+0x4>)
 800e7d6:	4770      	bx	lr
 800e7d8:	200001f0 	.word	0x200001f0

0800e7dc <_close_r>:
 800e7dc:	2300      	movs	r3, #0
 800e7de:	b570      	push	{r4, r5, r6, lr}
 800e7e0:	4d06      	ldr	r5, [pc, #24]	; (800e7fc <_close_r+0x20>)
 800e7e2:	0004      	movs	r4, r0
 800e7e4:	0008      	movs	r0, r1
 800e7e6:	602b      	str	r3, [r5, #0]
 800e7e8:	f7f8 fed8 	bl	800759c <_close>
 800e7ec:	1c43      	adds	r3, r0, #1
 800e7ee:	d103      	bne.n	800e7f8 <_close_r+0x1c>
 800e7f0:	682b      	ldr	r3, [r5, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d000      	beq.n	800e7f8 <_close_r+0x1c>
 800e7f6:	6023      	str	r3, [r4, #0]
 800e7f8:	bd70      	pop	{r4, r5, r6, pc}
 800e7fa:	46c0      	nop			; (mov r8, r8)
 800e7fc:	20006650 	.word	0x20006650

0800e800 <_reclaim_reent>:
 800e800:	4b2d      	ldr	r3, [pc, #180]	; (800e8b8 <_reclaim_reent+0xb8>)
 800e802:	b570      	push	{r4, r5, r6, lr}
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	0004      	movs	r4, r0
 800e808:	4283      	cmp	r3, r0
 800e80a:	d042      	beq.n	800e892 <_reclaim_reent+0x92>
 800e80c:	69c3      	ldr	r3, [r0, #28]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00a      	beq.n	800e828 <_reclaim_reent+0x28>
 800e812:	2500      	movs	r5, #0
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	42ab      	cmp	r3, r5
 800e818:	d140      	bne.n	800e89c <_reclaim_reent+0x9c>
 800e81a:	69e3      	ldr	r3, [r4, #28]
 800e81c:	6819      	ldr	r1, [r3, #0]
 800e81e:	2900      	cmp	r1, #0
 800e820:	d002      	beq.n	800e828 <_reclaim_reent+0x28>
 800e822:	0020      	movs	r0, r4
 800e824:	f000 ffa8 	bl	800f778 <_free_r>
 800e828:	6961      	ldr	r1, [r4, #20]
 800e82a:	2900      	cmp	r1, #0
 800e82c:	d002      	beq.n	800e834 <_reclaim_reent+0x34>
 800e82e:	0020      	movs	r0, r4
 800e830:	f000 ffa2 	bl	800f778 <_free_r>
 800e834:	69e1      	ldr	r1, [r4, #28]
 800e836:	2900      	cmp	r1, #0
 800e838:	d002      	beq.n	800e840 <_reclaim_reent+0x40>
 800e83a:	0020      	movs	r0, r4
 800e83c:	f000 ff9c 	bl	800f778 <_free_r>
 800e840:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e842:	2900      	cmp	r1, #0
 800e844:	d002      	beq.n	800e84c <_reclaim_reent+0x4c>
 800e846:	0020      	movs	r0, r4
 800e848:	f000 ff96 	bl	800f778 <_free_r>
 800e84c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e84e:	2900      	cmp	r1, #0
 800e850:	d002      	beq.n	800e858 <_reclaim_reent+0x58>
 800e852:	0020      	movs	r0, r4
 800e854:	f000 ff90 	bl	800f778 <_free_r>
 800e858:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e85a:	2900      	cmp	r1, #0
 800e85c:	d002      	beq.n	800e864 <_reclaim_reent+0x64>
 800e85e:	0020      	movs	r0, r4
 800e860:	f000 ff8a 	bl	800f778 <_free_r>
 800e864:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e866:	2900      	cmp	r1, #0
 800e868:	d002      	beq.n	800e870 <_reclaim_reent+0x70>
 800e86a:	0020      	movs	r0, r4
 800e86c:	f000 ff84 	bl	800f778 <_free_r>
 800e870:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e872:	2900      	cmp	r1, #0
 800e874:	d002      	beq.n	800e87c <_reclaim_reent+0x7c>
 800e876:	0020      	movs	r0, r4
 800e878:	f000 ff7e 	bl	800f778 <_free_r>
 800e87c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e87e:	2900      	cmp	r1, #0
 800e880:	d002      	beq.n	800e888 <_reclaim_reent+0x88>
 800e882:	0020      	movs	r0, r4
 800e884:	f000 ff78 	bl	800f778 <_free_r>
 800e888:	6a23      	ldr	r3, [r4, #32]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <_reclaim_reent+0x92>
 800e88e:	0020      	movs	r0, r4
 800e890:	4798      	blx	r3
 800e892:	bd70      	pop	{r4, r5, r6, pc}
 800e894:	5949      	ldr	r1, [r1, r5]
 800e896:	2900      	cmp	r1, #0
 800e898:	d108      	bne.n	800e8ac <_reclaim_reent+0xac>
 800e89a:	3504      	adds	r5, #4
 800e89c:	69e3      	ldr	r3, [r4, #28]
 800e89e:	68d9      	ldr	r1, [r3, #12]
 800e8a0:	2d80      	cmp	r5, #128	; 0x80
 800e8a2:	d1f7      	bne.n	800e894 <_reclaim_reent+0x94>
 800e8a4:	0020      	movs	r0, r4
 800e8a6:	f000 ff67 	bl	800f778 <_free_r>
 800e8aa:	e7b6      	b.n	800e81a <_reclaim_reent+0x1a>
 800e8ac:	680e      	ldr	r6, [r1, #0]
 800e8ae:	0020      	movs	r0, r4
 800e8b0:	f000 ff62 	bl	800f778 <_free_r>
 800e8b4:	0031      	movs	r1, r6
 800e8b6:	e7ee      	b.n	800e896 <_reclaim_reent+0x96>
 800e8b8:	200002b8 	.word	0x200002b8

0800e8bc <_lseek_r>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	0004      	movs	r4, r0
 800e8c0:	0008      	movs	r0, r1
 800e8c2:	0011      	movs	r1, r2
 800e8c4:	001a      	movs	r2, r3
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	4d05      	ldr	r5, [pc, #20]	; (800e8e0 <_lseek_r+0x24>)
 800e8ca:	602b      	str	r3, [r5, #0]
 800e8cc:	f7f8 fe72 	bl	80075b4 <_lseek>
 800e8d0:	1c43      	adds	r3, r0, #1
 800e8d2:	d103      	bne.n	800e8dc <_lseek_r+0x20>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d000      	beq.n	800e8dc <_lseek_r+0x20>
 800e8da:	6023      	str	r3, [r4, #0]
 800e8dc:	bd70      	pop	{r4, r5, r6, pc}
 800e8de:	46c0      	nop			; (mov r8, r8)
 800e8e0:	20006650 	.word	0x20006650

0800e8e4 <_read_r>:
 800e8e4:	b570      	push	{r4, r5, r6, lr}
 800e8e6:	0004      	movs	r4, r0
 800e8e8:	0008      	movs	r0, r1
 800e8ea:	0011      	movs	r1, r2
 800e8ec:	001a      	movs	r2, r3
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	4d05      	ldr	r5, [pc, #20]	; (800e908 <_read_r+0x24>)
 800e8f2:	602b      	str	r3, [r5, #0]
 800e8f4:	f7f8 fe36 	bl	8007564 <_read>
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	d103      	bne.n	800e904 <_read_r+0x20>
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d000      	beq.n	800e904 <_read_r+0x20>
 800e902:	6023      	str	r3, [r4, #0]
 800e904:	bd70      	pop	{r4, r5, r6, pc}
 800e906:	46c0      	nop			; (mov r8, r8)
 800e908:	20006650 	.word	0x20006650

0800e90c <_sbrk_r>:
 800e90c:	2300      	movs	r3, #0
 800e90e:	b570      	push	{r4, r5, r6, lr}
 800e910:	4d06      	ldr	r5, [pc, #24]	; (800e92c <_sbrk_r+0x20>)
 800e912:	0004      	movs	r4, r0
 800e914:	0008      	movs	r0, r1
 800e916:	602b      	str	r3, [r5, #0]
 800e918:	f7f8 fe4e 	bl	80075b8 <_sbrk>
 800e91c:	1c43      	adds	r3, r0, #1
 800e91e:	d103      	bne.n	800e928 <_sbrk_r+0x1c>
 800e920:	682b      	ldr	r3, [r5, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d000      	beq.n	800e928 <_sbrk_r+0x1c>
 800e926:	6023      	str	r3, [r4, #0]
 800e928:	bd70      	pop	{r4, r5, r6, pc}
 800e92a:	46c0      	nop			; (mov r8, r8)
 800e92c:	20006650 	.word	0x20006650

0800e930 <_write_r>:
 800e930:	b570      	push	{r4, r5, r6, lr}
 800e932:	0004      	movs	r4, r0
 800e934:	0008      	movs	r0, r1
 800e936:	0011      	movs	r1, r2
 800e938:	001a      	movs	r2, r3
 800e93a:	2300      	movs	r3, #0
 800e93c:	4d05      	ldr	r5, [pc, #20]	; (800e954 <_write_r+0x24>)
 800e93e:	602b      	str	r3, [r5, #0]
 800e940:	f7f8 fe1e 	bl	8007580 <_write>
 800e944:	1c43      	adds	r3, r0, #1
 800e946:	d103      	bne.n	800e950 <_write_r+0x20>
 800e948:	682b      	ldr	r3, [r5, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d000      	beq.n	800e950 <_write_r+0x20>
 800e94e:	6023      	str	r3, [r4, #0]
 800e950:	bd70      	pop	{r4, r5, r6, pc}
 800e952:	46c0      	nop			; (mov r8, r8)
 800e954:	20006650 	.word	0x20006650

0800e958 <__errno>:
 800e958:	4b01      	ldr	r3, [pc, #4]	; (800e960 <__errno+0x8>)
 800e95a:	6818      	ldr	r0, [r3, #0]
 800e95c:	4770      	bx	lr
 800e95e:	46c0      	nop			; (mov r8, r8)
 800e960:	200002b8 	.word	0x200002b8

0800e964 <__libc_init_array>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	2600      	movs	r6, #0
 800e968:	4c0c      	ldr	r4, [pc, #48]	; (800e99c <__libc_init_array+0x38>)
 800e96a:	4d0d      	ldr	r5, [pc, #52]	; (800e9a0 <__libc_init_array+0x3c>)
 800e96c:	1b64      	subs	r4, r4, r5
 800e96e:	10a4      	asrs	r4, r4, #2
 800e970:	42a6      	cmp	r6, r4
 800e972:	d109      	bne.n	800e988 <__libc_init_array+0x24>
 800e974:	2600      	movs	r6, #0
 800e976:	f003 fbef 	bl	8012158 <_init>
 800e97a:	4c0a      	ldr	r4, [pc, #40]	; (800e9a4 <__libc_init_array+0x40>)
 800e97c:	4d0a      	ldr	r5, [pc, #40]	; (800e9a8 <__libc_init_array+0x44>)
 800e97e:	1b64      	subs	r4, r4, r5
 800e980:	10a4      	asrs	r4, r4, #2
 800e982:	42a6      	cmp	r6, r4
 800e984:	d105      	bne.n	800e992 <__libc_init_array+0x2e>
 800e986:	bd70      	pop	{r4, r5, r6, pc}
 800e988:	00b3      	lsls	r3, r6, #2
 800e98a:	58eb      	ldr	r3, [r5, r3]
 800e98c:	4798      	blx	r3
 800e98e:	3601      	adds	r6, #1
 800e990:	e7ee      	b.n	800e970 <__libc_init_array+0xc>
 800e992:	00b3      	lsls	r3, r6, #2
 800e994:	58eb      	ldr	r3, [r5, r3]
 800e996:	4798      	blx	r3
 800e998:	3601      	adds	r6, #1
 800e99a:	e7f2      	b.n	800e982 <__libc_init_array+0x1e>
 800e99c:	08013a28 	.word	0x08013a28
 800e9a0:	08013a28 	.word	0x08013a28
 800e9a4:	08013a2c 	.word	0x08013a2c
 800e9a8:	08013a28 	.word	0x08013a28

0800e9ac <__retarget_lock_init_recursive>:
 800e9ac:	4770      	bx	lr

0800e9ae <__retarget_lock_acquire_recursive>:
 800e9ae:	4770      	bx	lr

0800e9b0 <__retarget_lock_release_recursive>:
 800e9b0:	4770      	bx	lr

0800e9b2 <strcpy>:
 800e9b2:	0003      	movs	r3, r0
 800e9b4:	780a      	ldrb	r2, [r1, #0]
 800e9b6:	3101      	adds	r1, #1
 800e9b8:	701a      	strb	r2, [r3, #0]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	2a00      	cmp	r2, #0
 800e9be:	d1f9      	bne.n	800e9b4 <strcpy+0x2>
 800e9c0:	4770      	bx	lr

0800e9c2 <memchr>:
 800e9c2:	b2c9      	uxtb	r1, r1
 800e9c4:	1882      	adds	r2, r0, r2
 800e9c6:	4290      	cmp	r0, r2
 800e9c8:	d101      	bne.n	800e9ce <memchr+0xc>
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	4770      	bx	lr
 800e9ce:	7803      	ldrb	r3, [r0, #0]
 800e9d0:	428b      	cmp	r3, r1
 800e9d2:	d0fb      	beq.n	800e9cc <memchr+0xa>
 800e9d4:	3001      	adds	r0, #1
 800e9d6:	e7f6      	b.n	800e9c6 <memchr+0x4>

0800e9d8 <memcpy>:
 800e9d8:	2300      	movs	r3, #0
 800e9da:	b510      	push	{r4, lr}
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d100      	bne.n	800e9e2 <memcpy+0xa>
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	5ccc      	ldrb	r4, [r1, r3]
 800e9e4:	54c4      	strb	r4, [r0, r3]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	e7f8      	b.n	800e9dc <memcpy+0x4>
	...

0800e9ec <nan>:
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	4901      	ldr	r1, [pc, #4]	; (800e9f4 <nan+0x8>)
 800e9f0:	4770      	bx	lr
 800e9f2:	46c0      	nop			; (mov r8, r8)
 800e9f4:	7ff80000 	.word	0x7ff80000

0800e9f8 <nanf>:
 800e9f8:	4800      	ldr	r0, [pc, #0]	; (800e9fc <nanf+0x4>)
 800e9fa:	4770      	bx	lr
 800e9fc:	7fc00000 	.word	0x7fc00000

0800ea00 <__assert_func>:
 800ea00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ea02:	0014      	movs	r4, r2
 800ea04:	001a      	movs	r2, r3
 800ea06:	4b09      	ldr	r3, [pc, #36]	; (800ea2c <__assert_func+0x2c>)
 800ea08:	0005      	movs	r5, r0
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	000e      	movs	r6, r1
 800ea0e:	68d8      	ldr	r0, [r3, #12]
 800ea10:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <__assert_func+0x30>)
 800ea12:	2c00      	cmp	r4, #0
 800ea14:	d101      	bne.n	800ea1a <__assert_func+0x1a>
 800ea16:	4b07      	ldr	r3, [pc, #28]	; (800ea34 <__assert_func+0x34>)
 800ea18:	001c      	movs	r4, r3
 800ea1a:	4907      	ldr	r1, [pc, #28]	; (800ea38 <__assert_func+0x38>)
 800ea1c:	9301      	str	r3, [sp, #4]
 800ea1e:	9402      	str	r4, [sp, #8]
 800ea20:	002b      	movs	r3, r5
 800ea22:	9600      	str	r6, [sp, #0]
 800ea24:	f002 f940 	bl	8010ca8 <fiprintf>
 800ea28:	f002 f961 	bl	8010cee <abort>
 800ea2c:	200002b8 	.word	0x200002b8
 800ea30:	0801377b 	.word	0x0801377b
 800ea34:	080137b6 	.word	0x080137b6
 800ea38:	08013788 	.word	0x08013788

0800ea3c <quorem>:
 800ea3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea3e:	6902      	ldr	r2, [r0, #16]
 800ea40:	690b      	ldr	r3, [r1, #16]
 800ea42:	b089      	sub	sp, #36	; 0x24
 800ea44:	0007      	movs	r7, r0
 800ea46:	9104      	str	r1, [sp, #16]
 800ea48:	2000      	movs	r0, #0
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	db69      	blt.n	800eb22 <quorem+0xe6>
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	009c      	lsls	r4, r3, #2
 800ea52:	9301      	str	r3, [sp, #4]
 800ea54:	000b      	movs	r3, r1
 800ea56:	3314      	adds	r3, #20
 800ea58:	9306      	str	r3, [sp, #24]
 800ea5a:	191b      	adds	r3, r3, r4
 800ea5c:	9305      	str	r3, [sp, #20]
 800ea5e:	003b      	movs	r3, r7
 800ea60:	3314      	adds	r3, #20
 800ea62:	9303      	str	r3, [sp, #12]
 800ea64:	191c      	adds	r4, r3, r4
 800ea66:	9b05      	ldr	r3, [sp, #20]
 800ea68:	6826      	ldr	r6, [r4, #0]
 800ea6a:	681d      	ldr	r5, [r3, #0]
 800ea6c:	0030      	movs	r0, r6
 800ea6e:	3501      	adds	r5, #1
 800ea70:	0029      	movs	r1, r5
 800ea72:	f7f1 fb65 	bl	8000140 <__udivsi3>
 800ea76:	9002      	str	r0, [sp, #8]
 800ea78:	42ae      	cmp	r6, r5
 800ea7a:	d329      	bcc.n	800ead0 <quorem+0x94>
 800ea7c:	9b06      	ldr	r3, [sp, #24]
 800ea7e:	2600      	movs	r6, #0
 800ea80:	469c      	mov	ip, r3
 800ea82:	9d03      	ldr	r5, [sp, #12]
 800ea84:	9606      	str	r6, [sp, #24]
 800ea86:	4662      	mov	r2, ip
 800ea88:	ca08      	ldmia	r2!, {r3}
 800ea8a:	6828      	ldr	r0, [r5, #0]
 800ea8c:	4694      	mov	ip, r2
 800ea8e:	9a02      	ldr	r2, [sp, #8]
 800ea90:	b299      	uxth	r1, r3
 800ea92:	4351      	muls	r1, r2
 800ea94:	0c1b      	lsrs	r3, r3, #16
 800ea96:	4353      	muls	r3, r2
 800ea98:	1989      	adds	r1, r1, r6
 800ea9a:	0c0a      	lsrs	r2, r1, #16
 800ea9c:	189b      	adds	r3, r3, r2
 800ea9e:	9307      	str	r3, [sp, #28]
 800eaa0:	0c1e      	lsrs	r6, r3, #16
 800eaa2:	9b06      	ldr	r3, [sp, #24]
 800eaa4:	b282      	uxth	r2, r0
 800eaa6:	18d2      	adds	r2, r2, r3
 800eaa8:	466b      	mov	r3, sp
 800eaaa:	b289      	uxth	r1, r1
 800eaac:	8b9b      	ldrh	r3, [r3, #28]
 800eaae:	1a52      	subs	r2, r2, r1
 800eab0:	0c01      	lsrs	r1, r0, #16
 800eab2:	1ac9      	subs	r1, r1, r3
 800eab4:	1413      	asrs	r3, r2, #16
 800eab6:	18cb      	adds	r3, r1, r3
 800eab8:	1419      	asrs	r1, r3, #16
 800eaba:	b292      	uxth	r2, r2
 800eabc:	041b      	lsls	r3, r3, #16
 800eabe:	4313      	orrs	r3, r2
 800eac0:	c508      	stmia	r5!, {r3}
 800eac2:	9b05      	ldr	r3, [sp, #20]
 800eac4:	9106      	str	r1, [sp, #24]
 800eac6:	4563      	cmp	r3, ip
 800eac8:	d2dd      	bcs.n	800ea86 <quorem+0x4a>
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d030      	beq.n	800eb32 <quorem+0xf6>
 800ead0:	0038      	movs	r0, r7
 800ead2:	9904      	ldr	r1, [sp, #16]
 800ead4:	f001 fcda 	bl	801048c <__mcmp>
 800ead8:	2800      	cmp	r0, #0
 800eada:	db21      	blt.n	800eb20 <quorem+0xe4>
 800eadc:	0038      	movs	r0, r7
 800eade:	2600      	movs	r6, #0
 800eae0:	9b02      	ldr	r3, [sp, #8]
 800eae2:	9c04      	ldr	r4, [sp, #16]
 800eae4:	3301      	adds	r3, #1
 800eae6:	9302      	str	r3, [sp, #8]
 800eae8:	3014      	adds	r0, #20
 800eaea:	3414      	adds	r4, #20
 800eaec:	6803      	ldr	r3, [r0, #0]
 800eaee:	cc02      	ldmia	r4!, {r1}
 800eaf0:	b29d      	uxth	r5, r3
 800eaf2:	19ad      	adds	r5, r5, r6
 800eaf4:	b28a      	uxth	r2, r1
 800eaf6:	1aaa      	subs	r2, r5, r2
 800eaf8:	0c09      	lsrs	r1, r1, #16
 800eafa:	0c1b      	lsrs	r3, r3, #16
 800eafc:	1a5b      	subs	r3, r3, r1
 800eafe:	1411      	asrs	r1, r2, #16
 800eb00:	185b      	adds	r3, r3, r1
 800eb02:	141e      	asrs	r6, r3, #16
 800eb04:	b292      	uxth	r2, r2
 800eb06:	041b      	lsls	r3, r3, #16
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	c008      	stmia	r0!, {r3}
 800eb0c:	9b05      	ldr	r3, [sp, #20]
 800eb0e:	42a3      	cmp	r3, r4
 800eb10:	d2ec      	bcs.n	800eaec <quorem+0xb0>
 800eb12:	9b01      	ldr	r3, [sp, #4]
 800eb14:	9a03      	ldr	r2, [sp, #12]
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	18d3      	adds	r3, r2, r3
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	2a00      	cmp	r2, #0
 800eb1e:	d015      	beq.n	800eb4c <quorem+0x110>
 800eb20:	9802      	ldr	r0, [sp, #8]
 800eb22:	b009      	add	sp, #36	; 0x24
 800eb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb26:	6823      	ldr	r3, [r4, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d106      	bne.n	800eb3a <quorem+0xfe>
 800eb2c:	9b01      	ldr	r3, [sp, #4]
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	9301      	str	r3, [sp, #4]
 800eb32:	9b03      	ldr	r3, [sp, #12]
 800eb34:	3c04      	subs	r4, #4
 800eb36:	42a3      	cmp	r3, r4
 800eb38:	d3f5      	bcc.n	800eb26 <quorem+0xea>
 800eb3a:	9b01      	ldr	r3, [sp, #4]
 800eb3c:	613b      	str	r3, [r7, #16]
 800eb3e:	e7c7      	b.n	800ead0 <quorem+0x94>
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	d106      	bne.n	800eb54 <quorem+0x118>
 800eb46:	9a01      	ldr	r2, [sp, #4]
 800eb48:	3a01      	subs	r2, #1
 800eb4a:	9201      	str	r2, [sp, #4]
 800eb4c:	9a03      	ldr	r2, [sp, #12]
 800eb4e:	3b04      	subs	r3, #4
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d3f5      	bcc.n	800eb40 <quorem+0x104>
 800eb54:	9b01      	ldr	r3, [sp, #4]
 800eb56:	613b      	str	r3, [r7, #16]
 800eb58:	e7e2      	b.n	800eb20 <quorem+0xe4>
	...

0800eb5c <_dtoa_r>:
 800eb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb5e:	0014      	movs	r4, r2
 800eb60:	001d      	movs	r5, r3
 800eb62:	69c6      	ldr	r6, [r0, #28]
 800eb64:	b09d      	sub	sp, #116	; 0x74
 800eb66:	9408      	str	r4, [sp, #32]
 800eb68:	9509      	str	r5, [sp, #36]	; 0x24
 800eb6a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800eb6c:	9004      	str	r0, [sp, #16]
 800eb6e:	2e00      	cmp	r6, #0
 800eb70:	d10f      	bne.n	800eb92 <_dtoa_r+0x36>
 800eb72:	2010      	movs	r0, #16
 800eb74:	f7fd fde8 	bl	800c748 <malloc>
 800eb78:	9b04      	ldr	r3, [sp, #16]
 800eb7a:	1e02      	subs	r2, r0, #0
 800eb7c:	61d8      	str	r0, [r3, #28]
 800eb7e:	d104      	bne.n	800eb8a <_dtoa_r+0x2e>
 800eb80:	21ef      	movs	r1, #239	; 0xef
 800eb82:	4bc6      	ldr	r3, [pc, #792]	; (800ee9c <_dtoa_r+0x340>)
 800eb84:	48c6      	ldr	r0, [pc, #792]	; (800eea0 <_dtoa_r+0x344>)
 800eb86:	f7ff ff3b 	bl	800ea00 <__assert_func>
 800eb8a:	6046      	str	r6, [r0, #4]
 800eb8c:	6086      	str	r6, [r0, #8]
 800eb8e:	6006      	str	r6, [r0, #0]
 800eb90:	60c6      	str	r6, [r0, #12]
 800eb92:	9b04      	ldr	r3, [sp, #16]
 800eb94:	69db      	ldr	r3, [r3, #28]
 800eb96:	6819      	ldr	r1, [r3, #0]
 800eb98:	2900      	cmp	r1, #0
 800eb9a:	d00b      	beq.n	800ebb4 <_dtoa_r+0x58>
 800eb9c:	685a      	ldr	r2, [r3, #4]
 800eb9e:	2301      	movs	r3, #1
 800eba0:	4093      	lsls	r3, r2
 800eba2:	604a      	str	r2, [r1, #4]
 800eba4:	608b      	str	r3, [r1, #8]
 800eba6:	9804      	ldr	r0, [sp, #16]
 800eba8:	f001 f9e2 	bl	800ff70 <_Bfree>
 800ebac:	2200      	movs	r2, #0
 800ebae:	9b04      	ldr	r3, [sp, #16]
 800ebb0:	69db      	ldr	r3, [r3, #28]
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	2d00      	cmp	r5, #0
 800ebb6:	da1e      	bge.n	800ebf6 <_dtoa_r+0x9a>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	603b      	str	r3, [r7, #0]
 800ebbc:	006b      	lsls	r3, r5, #1
 800ebbe:	085b      	lsrs	r3, r3, #1
 800ebc0:	9309      	str	r3, [sp, #36]	; 0x24
 800ebc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ebc4:	4bb7      	ldr	r3, [pc, #732]	; (800eea4 <_dtoa_r+0x348>)
 800ebc6:	4ab7      	ldr	r2, [pc, #732]	; (800eea4 <_dtoa_r+0x348>)
 800ebc8:	403b      	ands	r3, r7
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d116      	bne.n	800ebfc <_dtoa_r+0xa0>
 800ebce:	4bb6      	ldr	r3, [pc, #728]	; (800eea8 <_dtoa_r+0x34c>)
 800ebd0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	033b      	lsls	r3, r7, #12
 800ebd6:	0b1b      	lsrs	r3, r3, #12
 800ebd8:	4323      	orrs	r3, r4
 800ebda:	d101      	bne.n	800ebe0 <_dtoa_r+0x84>
 800ebdc:	f000 fdb5 	bl	800f74a <_dtoa_r+0xbee>
 800ebe0:	4bb2      	ldr	r3, [pc, #712]	; (800eeac <_dtoa_r+0x350>)
 800ebe2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ebe4:	9306      	str	r3, [sp, #24]
 800ebe6:	2a00      	cmp	r2, #0
 800ebe8:	d002      	beq.n	800ebf0 <_dtoa_r+0x94>
 800ebea:	4bb1      	ldr	r3, [pc, #708]	; (800eeb0 <_dtoa_r+0x354>)
 800ebec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ebee:	6013      	str	r3, [r2, #0]
 800ebf0:	9806      	ldr	r0, [sp, #24]
 800ebf2:	b01d      	add	sp, #116	; 0x74
 800ebf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	603b      	str	r3, [r7, #0]
 800ebfa:	e7e2      	b.n	800ebc2 <_dtoa_r+0x66>
 800ebfc:	9a08      	ldr	r2, [sp, #32]
 800ebfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec00:	9210      	str	r2, [sp, #64]	; 0x40
 800ec02:	9311      	str	r3, [sp, #68]	; 0x44
 800ec04:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ec06:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ec08:	2200      	movs	r2, #0
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f7f1 fc1e 	bl	800044c <__aeabi_dcmpeq>
 800ec10:	1e06      	subs	r6, r0, #0
 800ec12:	d009      	beq.n	800ec28 <_dtoa_r+0xcc>
 800ec14:	2301      	movs	r3, #1
 800ec16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ec18:	6013      	str	r3, [r2, #0]
 800ec1a:	4ba6      	ldr	r3, [pc, #664]	; (800eeb4 <_dtoa_r+0x358>)
 800ec1c:	9306      	str	r3, [sp, #24]
 800ec1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d0e5      	beq.n	800ebf0 <_dtoa_r+0x94>
 800ec24:	4ba4      	ldr	r3, [pc, #656]	; (800eeb8 <_dtoa_r+0x35c>)
 800ec26:	e7e1      	b.n	800ebec <_dtoa_r+0x90>
 800ec28:	ab1a      	add	r3, sp, #104	; 0x68
 800ec2a:	9301      	str	r3, [sp, #4]
 800ec2c:	ab1b      	add	r3, sp, #108	; 0x6c
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	9804      	ldr	r0, [sp, #16]
 800ec32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec36:	f001 fd45 	bl	80106c4 <__d2b>
 800ec3a:	007a      	lsls	r2, r7, #1
 800ec3c:	9005      	str	r0, [sp, #20]
 800ec3e:	0d52      	lsrs	r2, r2, #21
 800ec40:	d100      	bne.n	800ec44 <_dtoa_r+0xe8>
 800ec42:	e07b      	b.n	800ed3c <_dtoa_r+0x1e0>
 800ec44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec46:	9617      	str	r6, [sp, #92]	; 0x5c
 800ec48:	0319      	lsls	r1, r3, #12
 800ec4a:	4b9c      	ldr	r3, [pc, #624]	; (800eebc <_dtoa_r+0x360>)
 800ec4c:	0b09      	lsrs	r1, r1, #12
 800ec4e:	430b      	orrs	r3, r1
 800ec50:	499b      	ldr	r1, [pc, #620]	; (800eec0 <_dtoa_r+0x364>)
 800ec52:	1857      	adds	r7, r2, r1
 800ec54:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ec56:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ec58:	0019      	movs	r1, r3
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	4b99      	ldr	r3, [pc, #612]	; (800eec4 <_dtoa_r+0x368>)
 800ec5e:	f7f3 fdfb 	bl	8002858 <__aeabi_dsub>
 800ec62:	4a99      	ldr	r2, [pc, #612]	; (800eec8 <_dtoa_r+0x36c>)
 800ec64:	4b99      	ldr	r3, [pc, #612]	; (800eecc <_dtoa_r+0x370>)
 800ec66:	f7f3 fb35 	bl	80022d4 <__aeabi_dmul>
 800ec6a:	4a99      	ldr	r2, [pc, #612]	; (800eed0 <_dtoa_r+0x374>)
 800ec6c:	4b99      	ldr	r3, [pc, #612]	; (800eed4 <_dtoa_r+0x378>)
 800ec6e:	f7f2 fbd7 	bl	8001420 <__aeabi_dadd>
 800ec72:	0004      	movs	r4, r0
 800ec74:	0038      	movs	r0, r7
 800ec76:	000d      	movs	r5, r1
 800ec78:	f7f4 f9c4 	bl	8003004 <__aeabi_i2d>
 800ec7c:	4a96      	ldr	r2, [pc, #600]	; (800eed8 <_dtoa_r+0x37c>)
 800ec7e:	4b97      	ldr	r3, [pc, #604]	; (800eedc <_dtoa_r+0x380>)
 800ec80:	f7f3 fb28 	bl	80022d4 <__aeabi_dmul>
 800ec84:	0002      	movs	r2, r0
 800ec86:	000b      	movs	r3, r1
 800ec88:	0020      	movs	r0, r4
 800ec8a:	0029      	movs	r1, r5
 800ec8c:	f7f2 fbc8 	bl	8001420 <__aeabi_dadd>
 800ec90:	0004      	movs	r4, r0
 800ec92:	000d      	movs	r5, r1
 800ec94:	f7f4 f980 	bl	8002f98 <__aeabi_d2iz>
 800ec98:	2200      	movs	r2, #0
 800ec9a:	9003      	str	r0, [sp, #12]
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	0020      	movs	r0, r4
 800eca0:	0029      	movs	r1, r5
 800eca2:	f7f1 fbd9 	bl	8000458 <__aeabi_dcmplt>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d00b      	beq.n	800ecc2 <_dtoa_r+0x166>
 800ecaa:	9803      	ldr	r0, [sp, #12]
 800ecac:	f7f4 f9aa 	bl	8003004 <__aeabi_i2d>
 800ecb0:	002b      	movs	r3, r5
 800ecb2:	0022      	movs	r2, r4
 800ecb4:	f7f1 fbca 	bl	800044c <__aeabi_dcmpeq>
 800ecb8:	4243      	negs	r3, r0
 800ecba:	4158      	adcs	r0, r3
 800ecbc:	9b03      	ldr	r3, [sp, #12]
 800ecbe:	1a1b      	subs	r3, r3, r0
 800ecc0:	9303      	str	r3, [sp, #12]
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	9316      	str	r3, [sp, #88]	; 0x58
 800ecc6:	9b03      	ldr	r3, [sp, #12]
 800ecc8:	2b16      	cmp	r3, #22
 800ecca:	d810      	bhi.n	800ecee <_dtoa_r+0x192>
 800eccc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ecce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ecd0:	9a03      	ldr	r2, [sp, #12]
 800ecd2:	4b83      	ldr	r3, [pc, #524]	; (800eee0 <_dtoa_r+0x384>)
 800ecd4:	00d2      	lsls	r2, r2, #3
 800ecd6:	189b      	adds	r3, r3, r2
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	f7f1 fbbc 	bl	8000458 <__aeabi_dcmplt>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d047      	beq.n	800ed74 <_dtoa_r+0x218>
 800ece4:	9b03      	ldr	r3, [sp, #12]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	9303      	str	r3, [sp, #12]
 800ecea:	2300      	movs	r3, #0
 800ecec:	9316      	str	r3, [sp, #88]	; 0x58
 800ecee:	2200      	movs	r2, #0
 800ecf0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ecf2:	920a      	str	r2, [sp, #40]	; 0x28
 800ecf4:	1bdb      	subs	r3, r3, r7
 800ecf6:	1e5a      	subs	r2, r3, #1
 800ecf8:	d53e      	bpl.n	800ed78 <_dtoa_r+0x21c>
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	930a      	str	r3, [sp, #40]	; 0x28
 800ed00:	2300      	movs	r3, #0
 800ed02:	930c      	str	r3, [sp, #48]	; 0x30
 800ed04:	9b03      	ldr	r3, [sp, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	db38      	blt.n	800ed7c <_dtoa_r+0x220>
 800ed0a:	9a03      	ldr	r2, [sp, #12]
 800ed0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed0e:	4694      	mov	ip, r2
 800ed10:	4463      	add	r3, ip
 800ed12:	930c      	str	r3, [sp, #48]	; 0x30
 800ed14:	2300      	movs	r3, #0
 800ed16:	9213      	str	r2, [sp, #76]	; 0x4c
 800ed18:	930d      	str	r3, [sp, #52]	; 0x34
 800ed1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed1c:	2401      	movs	r4, #1
 800ed1e:	2b09      	cmp	r3, #9
 800ed20:	d867      	bhi.n	800edf2 <_dtoa_r+0x296>
 800ed22:	2b05      	cmp	r3, #5
 800ed24:	dd02      	ble.n	800ed2c <_dtoa_r+0x1d0>
 800ed26:	2400      	movs	r4, #0
 800ed28:	3b04      	subs	r3, #4
 800ed2a:	9322      	str	r3, [sp, #136]	; 0x88
 800ed2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed2e:	1e98      	subs	r0, r3, #2
 800ed30:	2803      	cmp	r0, #3
 800ed32:	d867      	bhi.n	800ee04 <_dtoa_r+0x2a8>
 800ed34:	f7f1 f9f0 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ed38:	5b383a2b 	.word	0x5b383a2b
 800ed3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed3e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ed40:	18f6      	adds	r6, r6, r3
 800ed42:	4b68      	ldr	r3, [pc, #416]	; (800eee4 <_dtoa_r+0x388>)
 800ed44:	18f2      	adds	r2, r6, r3
 800ed46:	2a20      	cmp	r2, #32
 800ed48:	dd0f      	ble.n	800ed6a <_dtoa_r+0x20e>
 800ed4a:	2340      	movs	r3, #64	; 0x40
 800ed4c:	1a9b      	subs	r3, r3, r2
 800ed4e:	409f      	lsls	r7, r3
 800ed50:	4b65      	ldr	r3, [pc, #404]	; (800eee8 <_dtoa_r+0x38c>)
 800ed52:	0038      	movs	r0, r7
 800ed54:	18f3      	adds	r3, r6, r3
 800ed56:	40dc      	lsrs	r4, r3
 800ed58:	4320      	orrs	r0, r4
 800ed5a:	f7f4 f983 	bl	8003064 <__aeabi_ui2d>
 800ed5e:	2201      	movs	r2, #1
 800ed60:	4b62      	ldr	r3, [pc, #392]	; (800eeec <_dtoa_r+0x390>)
 800ed62:	1e77      	subs	r7, r6, #1
 800ed64:	18cb      	adds	r3, r1, r3
 800ed66:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed68:	e776      	b.n	800ec58 <_dtoa_r+0xfc>
 800ed6a:	2320      	movs	r3, #32
 800ed6c:	0020      	movs	r0, r4
 800ed6e:	1a9b      	subs	r3, r3, r2
 800ed70:	4098      	lsls	r0, r3
 800ed72:	e7f2      	b.n	800ed5a <_dtoa_r+0x1fe>
 800ed74:	9016      	str	r0, [sp, #88]	; 0x58
 800ed76:	e7ba      	b.n	800ecee <_dtoa_r+0x192>
 800ed78:	920c      	str	r2, [sp, #48]	; 0x30
 800ed7a:	e7c3      	b.n	800ed04 <_dtoa_r+0x1a8>
 800ed7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed7e:	9a03      	ldr	r2, [sp, #12]
 800ed80:	1a9b      	subs	r3, r3, r2
 800ed82:	930a      	str	r3, [sp, #40]	; 0x28
 800ed84:	4253      	negs	r3, r2
 800ed86:	930d      	str	r3, [sp, #52]	; 0x34
 800ed88:	2300      	movs	r3, #0
 800ed8a:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed8c:	e7c5      	b.n	800ed1a <_dtoa_r+0x1be>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed94:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed96:	9307      	str	r3, [sp, #28]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	dc13      	bgt.n	800edc4 <_dtoa_r+0x268>
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	001a      	movs	r2, r3
 800eda0:	930b      	str	r3, [sp, #44]	; 0x2c
 800eda2:	9307      	str	r3, [sp, #28]
 800eda4:	9223      	str	r2, [sp, #140]	; 0x8c
 800eda6:	e00d      	b.n	800edc4 <_dtoa_r+0x268>
 800eda8:	2301      	movs	r3, #1
 800edaa:	e7f1      	b.n	800ed90 <_dtoa_r+0x234>
 800edac:	2300      	movs	r3, #0
 800edae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800edb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800edb2:	4694      	mov	ip, r2
 800edb4:	9b03      	ldr	r3, [sp, #12]
 800edb6:	4463      	add	r3, ip
 800edb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800edba:	3301      	adds	r3, #1
 800edbc:	9307      	str	r3, [sp, #28]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dc00      	bgt.n	800edc4 <_dtoa_r+0x268>
 800edc2:	2301      	movs	r3, #1
 800edc4:	9a04      	ldr	r2, [sp, #16]
 800edc6:	2100      	movs	r1, #0
 800edc8:	69d0      	ldr	r0, [r2, #28]
 800edca:	2204      	movs	r2, #4
 800edcc:	0015      	movs	r5, r2
 800edce:	3514      	adds	r5, #20
 800edd0:	429d      	cmp	r5, r3
 800edd2:	d91b      	bls.n	800ee0c <_dtoa_r+0x2b0>
 800edd4:	6041      	str	r1, [r0, #4]
 800edd6:	9804      	ldr	r0, [sp, #16]
 800edd8:	f001 f886 	bl	800fee8 <_Balloc>
 800eddc:	9006      	str	r0, [sp, #24]
 800edde:	2800      	cmp	r0, #0
 800ede0:	d117      	bne.n	800ee12 <_dtoa_r+0x2b6>
 800ede2:	21b0      	movs	r1, #176	; 0xb0
 800ede4:	4b42      	ldr	r3, [pc, #264]	; (800eef0 <_dtoa_r+0x394>)
 800ede6:	482e      	ldr	r0, [pc, #184]	; (800eea0 <_dtoa_r+0x344>)
 800ede8:	9a06      	ldr	r2, [sp, #24]
 800edea:	31ff      	adds	r1, #255	; 0xff
 800edec:	e6cb      	b.n	800eb86 <_dtoa_r+0x2a>
 800edee:	2301      	movs	r3, #1
 800edf0:	e7dd      	b.n	800edae <_dtoa_r+0x252>
 800edf2:	2300      	movs	r3, #0
 800edf4:	940f      	str	r4, [sp, #60]	; 0x3c
 800edf6:	9322      	str	r3, [sp, #136]	; 0x88
 800edf8:	3b01      	subs	r3, #1
 800edfa:	930b      	str	r3, [sp, #44]	; 0x2c
 800edfc:	9307      	str	r3, [sp, #28]
 800edfe:	2200      	movs	r2, #0
 800ee00:	3313      	adds	r3, #19
 800ee02:	e7cf      	b.n	800eda4 <_dtoa_r+0x248>
 800ee04:	2301      	movs	r3, #1
 800ee06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee08:	3b02      	subs	r3, #2
 800ee0a:	e7f6      	b.n	800edfa <_dtoa_r+0x29e>
 800ee0c:	3101      	adds	r1, #1
 800ee0e:	0052      	lsls	r2, r2, #1
 800ee10:	e7dc      	b.n	800edcc <_dtoa_r+0x270>
 800ee12:	9b04      	ldr	r3, [sp, #16]
 800ee14:	9a06      	ldr	r2, [sp, #24]
 800ee16:	69db      	ldr	r3, [r3, #28]
 800ee18:	601a      	str	r2, [r3, #0]
 800ee1a:	9b07      	ldr	r3, [sp, #28]
 800ee1c:	2b0e      	cmp	r3, #14
 800ee1e:	d900      	bls.n	800ee22 <_dtoa_r+0x2c6>
 800ee20:	e0e5      	b.n	800efee <_dtoa_r+0x492>
 800ee22:	2c00      	cmp	r4, #0
 800ee24:	d100      	bne.n	800ee28 <_dtoa_r+0x2cc>
 800ee26:	e0e2      	b.n	800efee <_dtoa_r+0x492>
 800ee28:	9b03      	ldr	r3, [sp, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dd64      	ble.n	800eef8 <_dtoa_r+0x39c>
 800ee2e:	210f      	movs	r1, #15
 800ee30:	9a03      	ldr	r2, [sp, #12]
 800ee32:	4b2b      	ldr	r3, [pc, #172]	; (800eee0 <_dtoa_r+0x384>)
 800ee34:	400a      	ands	r2, r1
 800ee36:	00d2      	lsls	r2, r2, #3
 800ee38:	189b      	adds	r3, r3, r2
 800ee3a:	681e      	ldr	r6, [r3, #0]
 800ee3c:	685f      	ldr	r7, [r3, #4]
 800ee3e:	9b03      	ldr	r3, [sp, #12]
 800ee40:	2402      	movs	r4, #2
 800ee42:	111d      	asrs	r5, r3, #4
 800ee44:	05db      	lsls	r3, r3, #23
 800ee46:	d50a      	bpl.n	800ee5e <_dtoa_r+0x302>
 800ee48:	4b2a      	ldr	r3, [pc, #168]	; (800eef4 <_dtoa_r+0x398>)
 800ee4a:	400d      	ands	r5, r1
 800ee4c:	6a1a      	ldr	r2, [r3, #32]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee50:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ee52:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ee54:	f7f2 fe44 	bl	8001ae0 <__aeabi_ddiv>
 800ee58:	9008      	str	r0, [sp, #32]
 800ee5a:	9109      	str	r1, [sp, #36]	; 0x24
 800ee5c:	3401      	adds	r4, #1
 800ee5e:	4b25      	ldr	r3, [pc, #148]	; (800eef4 <_dtoa_r+0x398>)
 800ee60:	930e      	str	r3, [sp, #56]	; 0x38
 800ee62:	2d00      	cmp	r5, #0
 800ee64:	d108      	bne.n	800ee78 <_dtoa_r+0x31c>
 800ee66:	9808      	ldr	r0, [sp, #32]
 800ee68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee6a:	0032      	movs	r2, r6
 800ee6c:	003b      	movs	r3, r7
 800ee6e:	f7f2 fe37 	bl	8001ae0 <__aeabi_ddiv>
 800ee72:	9008      	str	r0, [sp, #32]
 800ee74:	9109      	str	r1, [sp, #36]	; 0x24
 800ee76:	e05a      	b.n	800ef2e <_dtoa_r+0x3d2>
 800ee78:	2301      	movs	r3, #1
 800ee7a:	421d      	tst	r5, r3
 800ee7c:	d009      	beq.n	800ee92 <_dtoa_r+0x336>
 800ee7e:	18e4      	adds	r4, r4, r3
 800ee80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee82:	0030      	movs	r0, r6
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	0039      	movs	r1, r7
 800ee8a:	f7f3 fa23 	bl	80022d4 <__aeabi_dmul>
 800ee8e:	0006      	movs	r6, r0
 800ee90:	000f      	movs	r7, r1
 800ee92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee94:	106d      	asrs	r5, r5, #1
 800ee96:	3308      	adds	r3, #8
 800ee98:	e7e2      	b.n	800ee60 <_dtoa_r+0x304>
 800ee9a:	46c0      	nop			; (mov r8, r8)
 800ee9c:	08013702 	.word	0x08013702
 800eea0:	080137c4 	.word	0x080137c4
 800eea4:	7ff00000 	.word	0x7ff00000
 800eea8:	0000270f 	.word	0x0000270f
 800eeac:	080137c0 	.word	0x080137c0
 800eeb0:	080137c3 	.word	0x080137c3
 800eeb4:	080136d9 	.word	0x080136d9
 800eeb8:	080136da 	.word	0x080136da
 800eebc:	3ff00000 	.word	0x3ff00000
 800eec0:	fffffc01 	.word	0xfffffc01
 800eec4:	3ff80000 	.word	0x3ff80000
 800eec8:	636f4361 	.word	0x636f4361
 800eecc:	3fd287a7 	.word	0x3fd287a7
 800eed0:	8b60c8b3 	.word	0x8b60c8b3
 800eed4:	3fc68a28 	.word	0x3fc68a28
 800eed8:	509f79fb 	.word	0x509f79fb
 800eedc:	3fd34413 	.word	0x3fd34413
 800eee0:	08013910 	.word	0x08013910
 800eee4:	00000432 	.word	0x00000432
 800eee8:	00000412 	.word	0x00000412
 800eeec:	fe100000 	.word	0xfe100000
 800eef0:	0801381c 	.word	0x0801381c
 800eef4:	080138e8 	.word	0x080138e8
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	2402      	movs	r4, #2
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d016      	beq.n	800ef2e <_dtoa_r+0x3d2>
 800ef00:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef02:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ef04:	220f      	movs	r2, #15
 800ef06:	425d      	negs	r5, r3
 800ef08:	402a      	ands	r2, r5
 800ef0a:	4bdd      	ldr	r3, [pc, #884]	; (800f280 <_dtoa_r+0x724>)
 800ef0c:	00d2      	lsls	r2, r2, #3
 800ef0e:	189b      	adds	r3, r3, r2
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	f7f3 f9de 	bl	80022d4 <__aeabi_dmul>
 800ef18:	2701      	movs	r7, #1
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	9008      	str	r0, [sp, #32]
 800ef1e:	9109      	str	r1, [sp, #36]	; 0x24
 800ef20:	4ed8      	ldr	r6, [pc, #864]	; (800f284 <_dtoa_r+0x728>)
 800ef22:	112d      	asrs	r5, r5, #4
 800ef24:	2d00      	cmp	r5, #0
 800ef26:	d000      	beq.n	800ef2a <_dtoa_r+0x3ce>
 800ef28:	e091      	b.n	800f04e <_dtoa_r+0x4f2>
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1a1      	bne.n	800ee72 <_dtoa_r+0x316>
 800ef2e:	9e08      	ldr	r6, [sp, #32]
 800ef30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ef32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d100      	bne.n	800ef3a <_dtoa_r+0x3de>
 800ef38:	e094      	b.n	800f064 <_dtoa_r+0x508>
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	0030      	movs	r0, r6
 800ef3e:	0039      	movs	r1, r7
 800ef40:	4bd1      	ldr	r3, [pc, #836]	; (800f288 <_dtoa_r+0x72c>)
 800ef42:	f7f1 fa89 	bl	8000458 <__aeabi_dcmplt>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	d100      	bne.n	800ef4c <_dtoa_r+0x3f0>
 800ef4a:	e08b      	b.n	800f064 <_dtoa_r+0x508>
 800ef4c:	9b07      	ldr	r3, [sp, #28]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d100      	bne.n	800ef54 <_dtoa_r+0x3f8>
 800ef52:	e087      	b.n	800f064 <_dtoa_r+0x508>
 800ef54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	dd45      	ble.n	800efe6 <_dtoa_r+0x48a>
 800ef5a:	9b03      	ldr	r3, [sp, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	930e      	str	r3, [sp, #56]	; 0x38
 800ef62:	0030      	movs	r0, r6
 800ef64:	4bc9      	ldr	r3, [pc, #804]	; (800f28c <_dtoa_r+0x730>)
 800ef66:	0039      	movs	r1, r7
 800ef68:	f7f3 f9b4 	bl	80022d4 <__aeabi_dmul>
 800ef6c:	9008      	str	r0, [sp, #32]
 800ef6e:	9109      	str	r1, [sp, #36]	; 0x24
 800ef70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef72:	3401      	adds	r4, #1
 800ef74:	0020      	movs	r0, r4
 800ef76:	9e08      	ldr	r6, [sp, #32]
 800ef78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ef7a:	9312      	str	r3, [sp, #72]	; 0x48
 800ef7c:	f7f4 f842 	bl	8003004 <__aeabi_i2d>
 800ef80:	0032      	movs	r2, r6
 800ef82:	003b      	movs	r3, r7
 800ef84:	f7f3 f9a6 	bl	80022d4 <__aeabi_dmul>
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4bc1      	ldr	r3, [pc, #772]	; (800f290 <_dtoa_r+0x734>)
 800ef8c:	f7f2 fa48 	bl	8001420 <__aeabi_dadd>
 800ef90:	4ac0      	ldr	r2, [pc, #768]	; (800f294 <_dtoa_r+0x738>)
 800ef92:	9014      	str	r0, [sp, #80]	; 0x50
 800ef94:	9115      	str	r1, [sp, #84]	; 0x54
 800ef96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef98:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ef9a:	4694      	mov	ip, r2
 800ef9c:	9308      	str	r3, [sp, #32]
 800ef9e:	9409      	str	r4, [sp, #36]	; 0x24
 800efa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efa2:	4463      	add	r3, ip
 800efa4:	9318      	str	r3, [sp, #96]	; 0x60
 800efa6:	9309      	str	r3, [sp, #36]	; 0x24
 800efa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d15e      	bne.n	800f06c <_dtoa_r+0x510>
 800efae:	2200      	movs	r2, #0
 800efb0:	4bb9      	ldr	r3, [pc, #740]	; (800f298 <_dtoa_r+0x73c>)
 800efb2:	0030      	movs	r0, r6
 800efb4:	0039      	movs	r1, r7
 800efb6:	f7f3 fc4f 	bl	8002858 <__aeabi_dsub>
 800efba:	9a08      	ldr	r2, [sp, #32]
 800efbc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efbe:	0004      	movs	r4, r0
 800efc0:	000d      	movs	r5, r1
 800efc2:	f7f1 fa5d 	bl	8000480 <__aeabi_dcmpgt>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d000      	beq.n	800efcc <_dtoa_r+0x470>
 800efca:	e2b3      	b.n	800f534 <_dtoa_r+0x9d8>
 800efcc:	48b3      	ldr	r0, [pc, #716]	; (800f29c <_dtoa_r+0x740>)
 800efce:	9915      	ldr	r1, [sp, #84]	; 0x54
 800efd0:	4684      	mov	ip, r0
 800efd2:	4461      	add	r1, ip
 800efd4:	000b      	movs	r3, r1
 800efd6:	0020      	movs	r0, r4
 800efd8:	0029      	movs	r1, r5
 800efda:	9a08      	ldr	r2, [sp, #32]
 800efdc:	f7f1 fa3c 	bl	8000458 <__aeabi_dcmplt>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d000      	beq.n	800efe6 <_dtoa_r+0x48a>
 800efe4:	e2a3      	b.n	800f52e <_dtoa_r+0x9d2>
 800efe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efe8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800efea:	9308      	str	r3, [sp, #32]
 800efec:	9409      	str	r4, [sp, #36]	; 0x24
 800efee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	da00      	bge.n	800eff6 <_dtoa_r+0x49a>
 800eff4:	e179      	b.n	800f2ea <_dtoa_r+0x78e>
 800eff6:	9a03      	ldr	r2, [sp, #12]
 800eff8:	2a0e      	cmp	r2, #14
 800effa:	dd00      	ble.n	800effe <_dtoa_r+0x4a2>
 800effc:	e175      	b.n	800f2ea <_dtoa_r+0x78e>
 800effe:	4ba0      	ldr	r3, [pc, #640]	; (800f280 <_dtoa_r+0x724>)
 800f000:	00d2      	lsls	r2, r2, #3
 800f002:	189b      	adds	r3, r3, r2
 800f004:	681e      	ldr	r6, [r3, #0]
 800f006:	685f      	ldr	r7, [r3, #4]
 800f008:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	db00      	blt.n	800f010 <_dtoa_r+0x4b4>
 800f00e:	e0e5      	b.n	800f1dc <_dtoa_r+0x680>
 800f010:	9b07      	ldr	r3, [sp, #28]
 800f012:	2b00      	cmp	r3, #0
 800f014:	dd00      	ble.n	800f018 <_dtoa_r+0x4bc>
 800f016:	e0e1      	b.n	800f1dc <_dtoa_r+0x680>
 800f018:	d000      	beq.n	800f01c <_dtoa_r+0x4c0>
 800f01a:	e288      	b.n	800f52e <_dtoa_r+0x9d2>
 800f01c:	2200      	movs	r2, #0
 800f01e:	0030      	movs	r0, r6
 800f020:	0039      	movs	r1, r7
 800f022:	4b9d      	ldr	r3, [pc, #628]	; (800f298 <_dtoa_r+0x73c>)
 800f024:	f7f3 f956 	bl	80022d4 <__aeabi_dmul>
 800f028:	9a08      	ldr	r2, [sp, #32]
 800f02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f02c:	f7f1 fa32 	bl	8000494 <__aeabi_dcmpge>
 800f030:	9e07      	ldr	r6, [sp, #28]
 800f032:	0037      	movs	r7, r6
 800f034:	2800      	cmp	r0, #0
 800f036:	d000      	beq.n	800f03a <_dtoa_r+0x4de>
 800f038:	e25f      	b.n	800f4fa <_dtoa_r+0x99e>
 800f03a:	9b06      	ldr	r3, [sp, #24]
 800f03c:	9a06      	ldr	r2, [sp, #24]
 800f03e:	3301      	adds	r3, #1
 800f040:	9308      	str	r3, [sp, #32]
 800f042:	2331      	movs	r3, #49	; 0x31
 800f044:	7013      	strb	r3, [r2, #0]
 800f046:	9b03      	ldr	r3, [sp, #12]
 800f048:	3301      	adds	r3, #1
 800f04a:	9303      	str	r3, [sp, #12]
 800f04c:	e25a      	b.n	800f504 <_dtoa_r+0x9a8>
 800f04e:	423d      	tst	r5, r7
 800f050:	d005      	beq.n	800f05e <_dtoa_r+0x502>
 800f052:	6832      	ldr	r2, [r6, #0]
 800f054:	6873      	ldr	r3, [r6, #4]
 800f056:	f7f3 f93d 	bl	80022d4 <__aeabi_dmul>
 800f05a:	003b      	movs	r3, r7
 800f05c:	3401      	adds	r4, #1
 800f05e:	106d      	asrs	r5, r5, #1
 800f060:	3608      	adds	r6, #8
 800f062:	e75f      	b.n	800ef24 <_dtoa_r+0x3c8>
 800f064:	9b03      	ldr	r3, [sp, #12]
 800f066:	930e      	str	r3, [sp, #56]	; 0x38
 800f068:	9b07      	ldr	r3, [sp, #28]
 800f06a:	e783      	b.n	800ef74 <_dtoa_r+0x418>
 800f06c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f06e:	4b84      	ldr	r3, [pc, #528]	; (800f280 <_dtoa_r+0x724>)
 800f070:	3a01      	subs	r2, #1
 800f072:	00d2      	lsls	r2, r2, #3
 800f074:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f076:	189b      	adds	r3, r3, r2
 800f078:	9c08      	ldr	r4, [sp, #32]
 800f07a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	2900      	cmp	r1, #0
 800f082:	d051      	beq.n	800f128 <_dtoa_r+0x5cc>
 800f084:	2000      	movs	r0, #0
 800f086:	4986      	ldr	r1, [pc, #536]	; (800f2a0 <_dtoa_r+0x744>)
 800f088:	f7f2 fd2a 	bl	8001ae0 <__aeabi_ddiv>
 800f08c:	0022      	movs	r2, r4
 800f08e:	002b      	movs	r3, r5
 800f090:	f7f3 fbe2 	bl	8002858 <__aeabi_dsub>
 800f094:	9a06      	ldr	r2, [sp, #24]
 800f096:	0004      	movs	r4, r0
 800f098:	4694      	mov	ip, r2
 800f09a:	000d      	movs	r5, r1
 800f09c:	9b06      	ldr	r3, [sp, #24]
 800f09e:	9314      	str	r3, [sp, #80]	; 0x50
 800f0a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0a2:	4463      	add	r3, ip
 800f0a4:	9318      	str	r3, [sp, #96]	; 0x60
 800f0a6:	0039      	movs	r1, r7
 800f0a8:	0030      	movs	r0, r6
 800f0aa:	f7f3 ff75 	bl	8002f98 <__aeabi_d2iz>
 800f0ae:	9012      	str	r0, [sp, #72]	; 0x48
 800f0b0:	f7f3 ffa8 	bl	8003004 <__aeabi_i2d>
 800f0b4:	0002      	movs	r2, r0
 800f0b6:	000b      	movs	r3, r1
 800f0b8:	0030      	movs	r0, r6
 800f0ba:	0039      	movs	r1, r7
 800f0bc:	f7f3 fbcc 	bl	8002858 <__aeabi_dsub>
 800f0c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f0c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	9308      	str	r3, [sp, #32]
 800f0c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0ca:	0006      	movs	r6, r0
 800f0cc:	3330      	adds	r3, #48	; 0x30
 800f0ce:	7013      	strb	r3, [r2, #0]
 800f0d0:	0022      	movs	r2, r4
 800f0d2:	002b      	movs	r3, r5
 800f0d4:	000f      	movs	r7, r1
 800f0d6:	f7f1 f9bf 	bl	8000458 <__aeabi_dcmplt>
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	d174      	bne.n	800f1c8 <_dtoa_r+0x66c>
 800f0de:	0032      	movs	r2, r6
 800f0e0:	003b      	movs	r3, r7
 800f0e2:	2000      	movs	r0, #0
 800f0e4:	4968      	ldr	r1, [pc, #416]	; (800f288 <_dtoa_r+0x72c>)
 800f0e6:	f7f3 fbb7 	bl	8002858 <__aeabi_dsub>
 800f0ea:	0022      	movs	r2, r4
 800f0ec:	002b      	movs	r3, r5
 800f0ee:	f7f1 f9b3 	bl	8000458 <__aeabi_dcmplt>
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d000      	beq.n	800f0f8 <_dtoa_r+0x59c>
 800f0f6:	e0d7      	b.n	800f2a8 <_dtoa_r+0x74c>
 800f0f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f0fa:	9a08      	ldr	r2, [sp, #32]
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d100      	bne.n	800f102 <_dtoa_r+0x5a6>
 800f100:	e771      	b.n	800efe6 <_dtoa_r+0x48a>
 800f102:	2200      	movs	r2, #0
 800f104:	0020      	movs	r0, r4
 800f106:	0029      	movs	r1, r5
 800f108:	4b60      	ldr	r3, [pc, #384]	; (800f28c <_dtoa_r+0x730>)
 800f10a:	f7f3 f8e3 	bl	80022d4 <__aeabi_dmul>
 800f10e:	4b5f      	ldr	r3, [pc, #380]	; (800f28c <_dtoa_r+0x730>)
 800f110:	0004      	movs	r4, r0
 800f112:	000d      	movs	r5, r1
 800f114:	0030      	movs	r0, r6
 800f116:	0039      	movs	r1, r7
 800f118:	2200      	movs	r2, #0
 800f11a:	f7f3 f8db 	bl	80022d4 <__aeabi_dmul>
 800f11e:	9b08      	ldr	r3, [sp, #32]
 800f120:	0006      	movs	r6, r0
 800f122:	000f      	movs	r7, r1
 800f124:	9314      	str	r3, [sp, #80]	; 0x50
 800f126:	e7be      	b.n	800f0a6 <_dtoa_r+0x54a>
 800f128:	0020      	movs	r0, r4
 800f12a:	0029      	movs	r1, r5
 800f12c:	f7f3 f8d2 	bl	80022d4 <__aeabi_dmul>
 800f130:	9a06      	ldr	r2, [sp, #24]
 800f132:	9b06      	ldr	r3, [sp, #24]
 800f134:	4694      	mov	ip, r2
 800f136:	9308      	str	r3, [sp, #32]
 800f138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f13a:	9014      	str	r0, [sp, #80]	; 0x50
 800f13c:	9115      	str	r1, [sp, #84]	; 0x54
 800f13e:	4463      	add	r3, ip
 800f140:	9319      	str	r3, [sp, #100]	; 0x64
 800f142:	0030      	movs	r0, r6
 800f144:	0039      	movs	r1, r7
 800f146:	f7f3 ff27 	bl	8002f98 <__aeabi_d2iz>
 800f14a:	9018      	str	r0, [sp, #96]	; 0x60
 800f14c:	f7f3 ff5a 	bl	8003004 <__aeabi_i2d>
 800f150:	0002      	movs	r2, r0
 800f152:	000b      	movs	r3, r1
 800f154:	0030      	movs	r0, r6
 800f156:	0039      	movs	r1, r7
 800f158:	f7f3 fb7e 	bl	8002858 <__aeabi_dsub>
 800f15c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f15e:	9b08      	ldr	r3, [sp, #32]
 800f160:	3630      	adds	r6, #48	; 0x30
 800f162:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f164:	701e      	strb	r6, [r3, #0]
 800f166:	3301      	adds	r3, #1
 800f168:	0004      	movs	r4, r0
 800f16a:	000d      	movs	r5, r1
 800f16c:	9308      	str	r3, [sp, #32]
 800f16e:	4293      	cmp	r3, r2
 800f170:	d12d      	bne.n	800f1ce <_dtoa_r+0x672>
 800f172:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f174:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f176:	9a06      	ldr	r2, [sp, #24]
 800f178:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f17a:	4694      	mov	ip, r2
 800f17c:	4463      	add	r3, ip
 800f17e:	2200      	movs	r2, #0
 800f180:	9308      	str	r3, [sp, #32]
 800f182:	4b47      	ldr	r3, [pc, #284]	; (800f2a0 <_dtoa_r+0x744>)
 800f184:	f7f2 f94c 	bl	8001420 <__aeabi_dadd>
 800f188:	0002      	movs	r2, r0
 800f18a:	000b      	movs	r3, r1
 800f18c:	0020      	movs	r0, r4
 800f18e:	0029      	movs	r1, r5
 800f190:	f7f1 f976 	bl	8000480 <__aeabi_dcmpgt>
 800f194:	2800      	cmp	r0, #0
 800f196:	d000      	beq.n	800f19a <_dtoa_r+0x63e>
 800f198:	e086      	b.n	800f2a8 <_dtoa_r+0x74c>
 800f19a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f19e:	2000      	movs	r0, #0
 800f1a0:	493f      	ldr	r1, [pc, #252]	; (800f2a0 <_dtoa_r+0x744>)
 800f1a2:	f7f3 fb59 	bl	8002858 <__aeabi_dsub>
 800f1a6:	0002      	movs	r2, r0
 800f1a8:	000b      	movs	r3, r1
 800f1aa:	0020      	movs	r0, r4
 800f1ac:	0029      	movs	r1, r5
 800f1ae:	f7f1 f953 	bl	8000458 <__aeabi_dcmplt>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d100      	bne.n	800f1b8 <_dtoa_r+0x65c>
 800f1b6:	e716      	b.n	800efe6 <_dtoa_r+0x48a>
 800f1b8:	9b08      	ldr	r3, [sp, #32]
 800f1ba:	001a      	movs	r2, r3
 800f1bc:	3a01      	subs	r2, #1
 800f1be:	9208      	str	r2, [sp, #32]
 800f1c0:	7812      	ldrb	r2, [r2, #0]
 800f1c2:	2a30      	cmp	r2, #48	; 0x30
 800f1c4:	d0f8      	beq.n	800f1b8 <_dtoa_r+0x65c>
 800f1c6:	9308      	str	r3, [sp, #32]
 800f1c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1ca:	9303      	str	r3, [sp, #12]
 800f1cc:	e046      	b.n	800f25c <_dtoa_r+0x700>
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	4b2e      	ldr	r3, [pc, #184]	; (800f28c <_dtoa_r+0x730>)
 800f1d2:	f7f3 f87f 	bl	80022d4 <__aeabi_dmul>
 800f1d6:	0006      	movs	r6, r0
 800f1d8:	000f      	movs	r7, r1
 800f1da:	e7b2      	b.n	800f142 <_dtoa_r+0x5e6>
 800f1dc:	9b06      	ldr	r3, [sp, #24]
 800f1de:	9a06      	ldr	r2, [sp, #24]
 800f1e0:	930a      	str	r3, [sp, #40]	; 0x28
 800f1e2:	9b07      	ldr	r3, [sp, #28]
 800f1e4:	9c08      	ldr	r4, [sp, #32]
 800f1e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	189b      	adds	r3, r3, r2
 800f1ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1ee:	0032      	movs	r2, r6
 800f1f0:	003b      	movs	r3, r7
 800f1f2:	0020      	movs	r0, r4
 800f1f4:	0029      	movs	r1, r5
 800f1f6:	f7f2 fc73 	bl	8001ae0 <__aeabi_ddiv>
 800f1fa:	f7f3 fecd 	bl	8002f98 <__aeabi_d2iz>
 800f1fe:	9007      	str	r0, [sp, #28]
 800f200:	f7f3 ff00 	bl	8003004 <__aeabi_i2d>
 800f204:	0032      	movs	r2, r6
 800f206:	003b      	movs	r3, r7
 800f208:	f7f3 f864 	bl	80022d4 <__aeabi_dmul>
 800f20c:	0002      	movs	r2, r0
 800f20e:	000b      	movs	r3, r1
 800f210:	0020      	movs	r0, r4
 800f212:	0029      	movs	r1, r5
 800f214:	f7f3 fb20 	bl	8002858 <__aeabi_dsub>
 800f218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f21a:	001a      	movs	r2, r3
 800f21c:	3201      	adds	r2, #1
 800f21e:	920a      	str	r2, [sp, #40]	; 0x28
 800f220:	9208      	str	r2, [sp, #32]
 800f222:	9a07      	ldr	r2, [sp, #28]
 800f224:	3230      	adds	r2, #48	; 0x30
 800f226:	701a      	strb	r2, [r3, #0]
 800f228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d14f      	bne.n	800f2ce <_dtoa_r+0x772>
 800f22e:	0002      	movs	r2, r0
 800f230:	000b      	movs	r3, r1
 800f232:	f7f2 f8f5 	bl	8001420 <__aeabi_dadd>
 800f236:	0032      	movs	r2, r6
 800f238:	003b      	movs	r3, r7
 800f23a:	0004      	movs	r4, r0
 800f23c:	000d      	movs	r5, r1
 800f23e:	f7f1 f91f 	bl	8000480 <__aeabi_dcmpgt>
 800f242:	2800      	cmp	r0, #0
 800f244:	d12e      	bne.n	800f2a4 <_dtoa_r+0x748>
 800f246:	0032      	movs	r2, r6
 800f248:	003b      	movs	r3, r7
 800f24a:	0020      	movs	r0, r4
 800f24c:	0029      	movs	r1, r5
 800f24e:	f7f1 f8fd 	bl	800044c <__aeabi_dcmpeq>
 800f252:	2800      	cmp	r0, #0
 800f254:	d002      	beq.n	800f25c <_dtoa_r+0x700>
 800f256:	9b07      	ldr	r3, [sp, #28]
 800f258:	07de      	lsls	r6, r3, #31
 800f25a:	d423      	bmi.n	800f2a4 <_dtoa_r+0x748>
 800f25c:	9905      	ldr	r1, [sp, #20]
 800f25e:	9804      	ldr	r0, [sp, #16]
 800f260:	f000 fe86 	bl	800ff70 <_Bfree>
 800f264:	2300      	movs	r3, #0
 800f266:	9a08      	ldr	r2, [sp, #32]
 800f268:	7013      	strb	r3, [r2, #0]
 800f26a:	9b03      	ldr	r3, [sp, #12]
 800f26c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f26e:	3301      	adds	r3, #1
 800f270:	6013      	str	r3, [r2, #0]
 800f272:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f274:	2b00      	cmp	r3, #0
 800f276:	d100      	bne.n	800f27a <_dtoa_r+0x71e>
 800f278:	e4ba      	b.n	800ebf0 <_dtoa_r+0x94>
 800f27a:	9a08      	ldr	r2, [sp, #32]
 800f27c:	601a      	str	r2, [r3, #0]
 800f27e:	e4b7      	b.n	800ebf0 <_dtoa_r+0x94>
 800f280:	08013910 	.word	0x08013910
 800f284:	080138e8 	.word	0x080138e8
 800f288:	3ff00000 	.word	0x3ff00000
 800f28c:	40240000 	.word	0x40240000
 800f290:	401c0000 	.word	0x401c0000
 800f294:	fcc00000 	.word	0xfcc00000
 800f298:	40140000 	.word	0x40140000
 800f29c:	7cc00000 	.word	0x7cc00000
 800f2a0:	3fe00000 	.word	0x3fe00000
 800f2a4:	9b03      	ldr	r3, [sp, #12]
 800f2a6:	930e      	str	r3, [sp, #56]	; 0x38
 800f2a8:	9b08      	ldr	r3, [sp, #32]
 800f2aa:	9308      	str	r3, [sp, #32]
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	781a      	ldrb	r2, [r3, #0]
 800f2b0:	2a39      	cmp	r2, #57	; 0x39
 800f2b2:	d108      	bne.n	800f2c6 <_dtoa_r+0x76a>
 800f2b4:	9a06      	ldr	r2, [sp, #24]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d1f7      	bne.n	800f2aa <_dtoa_r+0x74e>
 800f2ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2bc:	9906      	ldr	r1, [sp, #24]
 800f2be:	3201      	adds	r2, #1
 800f2c0:	920e      	str	r2, [sp, #56]	; 0x38
 800f2c2:	2230      	movs	r2, #48	; 0x30
 800f2c4:	700a      	strb	r2, [r1, #0]
 800f2c6:	781a      	ldrb	r2, [r3, #0]
 800f2c8:	3201      	adds	r2, #1
 800f2ca:	701a      	strb	r2, [r3, #0]
 800f2cc:	e77c      	b.n	800f1c8 <_dtoa_r+0x66c>
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	4ba9      	ldr	r3, [pc, #676]	; (800f578 <_dtoa_r+0xa1c>)
 800f2d2:	f7f2 ffff 	bl	80022d4 <__aeabi_dmul>
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	2300      	movs	r3, #0
 800f2da:	0004      	movs	r4, r0
 800f2dc:	000d      	movs	r5, r1
 800f2de:	f7f1 f8b5 	bl	800044c <__aeabi_dcmpeq>
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d100      	bne.n	800f2e8 <_dtoa_r+0x78c>
 800f2e6:	e782      	b.n	800f1ee <_dtoa_r+0x692>
 800f2e8:	e7b8      	b.n	800f25c <_dtoa_r+0x700>
 800f2ea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f2ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f2ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f2f0:	2f00      	cmp	r7, #0
 800f2f2:	d012      	beq.n	800f31a <_dtoa_r+0x7be>
 800f2f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f2f6:	2a01      	cmp	r2, #1
 800f2f8:	dc6e      	bgt.n	800f3d8 <_dtoa_r+0x87c>
 800f2fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2fc:	2a00      	cmp	r2, #0
 800f2fe:	d065      	beq.n	800f3cc <_dtoa_r+0x870>
 800f300:	4a9e      	ldr	r2, [pc, #632]	; (800f57c <_dtoa_r+0xa20>)
 800f302:	189b      	adds	r3, r3, r2
 800f304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f306:	2101      	movs	r1, #1
 800f308:	18d2      	adds	r2, r2, r3
 800f30a:	920a      	str	r2, [sp, #40]	; 0x28
 800f30c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f30e:	9804      	ldr	r0, [sp, #16]
 800f310:	18d3      	adds	r3, r2, r3
 800f312:	930c      	str	r3, [sp, #48]	; 0x30
 800f314:	f000 ff28 	bl	8010168 <__i2b>
 800f318:	0007      	movs	r7, r0
 800f31a:	2c00      	cmp	r4, #0
 800f31c:	d00e      	beq.n	800f33c <_dtoa_r+0x7e0>
 800f31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f320:	2b00      	cmp	r3, #0
 800f322:	dd0b      	ble.n	800f33c <_dtoa_r+0x7e0>
 800f324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f326:	0023      	movs	r3, r4
 800f328:	4294      	cmp	r4, r2
 800f32a:	dd00      	ble.n	800f32e <_dtoa_r+0x7d2>
 800f32c:	0013      	movs	r3, r2
 800f32e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f330:	1ae4      	subs	r4, r4, r3
 800f332:	1ad2      	subs	r2, r2, r3
 800f334:	920a      	str	r2, [sp, #40]	; 0x28
 800f336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	930c      	str	r3, [sp, #48]	; 0x30
 800f33c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d01e      	beq.n	800f380 <_dtoa_r+0x824>
 800f342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f344:	2b00      	cmp	r3, #0
 800f346:	d05c      	beq.n	800f402 <_dtoa_r+0x8a6>
 800f348:	2d00      	cmp	r5, #0
 800f34a:	dd10      	ble.n	800f36e <_dtoa_r+0x812>
 800f34c:	0039      	movs	r1, r7
 800f34e:	002a      	movs	r2, r5
 800f350:	9804      	ldr	r0, [sp, #16]
 800f352:	f000 ffd1 	bl	80102f8 <__pow5mult>
 800f356:	9a05      	ldr	r2, [sp, #20]
 800f358:	0001      	movs	r1, r0
 800f35a:	0007      	movs	r7, r0
 800f35c:	9804      	ldr	r0, [sp, #16]
 800f35e:	f000 ff1b 	bl	8010198 <__multiply>
 800f362:	0006      	movs	r6, r0
 800f364:	9905      	ldr	r1, [sp, #20]
 800f366:	9804      	ldr	r0, [sp, #16]
 800f368:	f000 fe02 	bl	800ff70 <_Bfree>
 800f36c:	9605      	str	r6, [sp, #20]
 800f36e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f370:	1b5a      	subs	r2, r3, r5
 800f372:	42ab      	cmp	r3, r5
 800f374:	d004      	beq.n	800f380 <_dtoa_r+0x824>
 800f376:	9905      	ldr	r1, [sp, #20]
 800f378:	9804      	ldr	r0, [sp, #16]
 800f37a:	f000 ffbd 	bl	80102f8 <__pow5mult>
 800f37e:	9005      	str	r0, [sp, #20]
 800f380:	2101      	movs	r1, #1
 800f382:	9804      	ldr	r0, [sp, #16]
 800f384:	f000 fef0 	bl	8010168 <__i2b>
 800f388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f38a:	0006      	movs	r6, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	dd3a      	ble.n	800f406 <_dtoa_r+0x8aa>
 800f390:	001a      	movs	r2, r3
 800f392:	0001      	movs	r1, r0
 800f394:	9804      	ldr	r0, [sp, #16]
 800f396:	f000 ffaf 	bl	80102f8 <__pow5mult>
 800f39a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f39c:	0006      	movs	r6, r0
 800f39e:	2500      	movs	r5, #0
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	dc38      	bgt.n	800f416 <_dtoa_r+0x8ba>
 800f3a4:	2500      	movs	r5, #0
 800f3a6:	9b08      	ldr	r3, [sp, #32]
 800f3a8:	42ab      	cmp	r3, r5
 800f3aa:	d130      	bne.n	800f40e <_dtoa_r+0x8b2>
 800f3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3ae:	031b      	lsls	r3, r3, #12
 800f3b0:	42ab      	cmp	r3, r5
 800f3b2:	d12c      	bne.n	800f40e <_dtoa_r+0x8b2>
 800f3b4:	4b72      	ldr	r3, [pc, #456]	; (800f580 <_dtoa_r+0xa24>)
 800f3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3b8:	4213      	tst	r3, r2
 800f3ba:	d028      	beq.n	800f40e <_dtoa_r+0x8b2>
 800f3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3be:	3501      	adds	r5, #1
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	930a      	str	r3, [sp, #40]	; 0x28
 800f3c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	930c      	str	r3, [sp, #48]	; 0x30
 800f3ca:	e020      	b.n	800f40e <_dtoa_r+0x8b2>
 800f3cc:	2336      	movs	r3, #54	; 0x36
 800f3ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f3d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f3d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f3d4:	1a9b      	subs	r3, r3, r2
 800f3d6:	e795      	b.n	800f304 <_dtoa_r+0x7a8>
 800f3d8:	9b07      	ldr	r3, [sp, #28]
 800f3da:	1e5d      	subs	r5, r3, #1
 800f3dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3de:	42ab      	cmp	r3, r5
 800f3e0:	db07      	blt.n	800f3f2 <_dtoa_r+0x896>
 800f3e2:	1b5d      	subs	r5, r3, r5
 800f3e4:	9b07      	ldr	r3, [sp, #28]
 800f3e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	da8b      	bge.n	800f304 <_dtoa_r+0x7a8>
 800f3ec:	1ae4      	subs	r4, r4, r3
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	e788      	b.n	800f304 <_dtoa_r+0x7a8>
 800f3f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3f6:	1aeb      	subs	r3, r5, r3
 800f3f8:	18d3      	adds	r3, r2, r3
 800f3fa:	950d      	str	r5, [sp, #52]	; 0x34
 800f3fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800f3fe:	2500      	movs	r5, #0
 800f400:	e7f0      	b.n	800f3e4 <_dtoa_r+0x888>
 800f402:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f404:	e7b7      	b.n	800f376 <_dtoa_r+0x81a>
 800f406:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f408:	2500      	movs	r5, #0
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	ddca      	ble.n	800f3a4 <_dtoa_r+0x848>
 800f40e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f410:	2001      	movs	r0, #1
 800f412:	2b00      	cmp	r3, #0
 800f414:	d008      	beq.n	800f428 <_dtoa_r+0x8cc>
 800f416:	6933      	ldr	r3, [r6, #16]
 800f418:	3303      	adds	r3, #3
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	18f3      	adds	r3, r6, r3
 800f41e:	6858      	ldr	r0, [r3, #4]
 800f420:	f000 fe5a 	bl	80100d8 <__hi0bits>
 800f424:	2320      	movs	r3, #32
 800f426:	1a18      	subs	r0, r3, r0
 800f428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f42a:	1818      	adds	r0, r3, r0
 800f42c:	0002      	movs	r2, r0
 800f42e:	231f      	movs	r3, #31
 800f430:	401a      	ands	r2, r3
 800f432:	4218      	tst	r0, r3
 800f434:	d047      	beq.n	800f4c6 <_dtoa_r+0x96a>
 800f436:	3301      	adds	r3, #1
 800f438:	1a9b      	subs	r3, r3, r2
 800f43a:	2b04      	cmp	r3, #4
 800f43c:	dd3f      	ble.n	800f4be <_dtoa_r+0x962>
 800f43e:	231c      	movs	r3, #28
 800f440:	1a9b      	subs	r3, r3, r2
 800f442:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f444:	18e4      	adds	r4, r4, r3
 800f446:	18d2      	adds	r2, r2, r3
 800f448:	920a      	str	r2, [sp, #40]	; 0x28
 800f44a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f44c:	18d3      	adds	r3, r2, r3
 800f44e:	930c      	str	r3, [sp, #48]	; 0x30
 800f450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f452:	2b00      	cmp	r3, #0
 800f454:	dd05      	ble.n	800f462 <_dtoa_r+0x906>
 800f456:	001a      	movs	r2, r3
 800f458:	9905      	ldr	r1, [sp, #20]
 800f45a:	9804      	ldr	r0, [sp, #16]
 800f45c:	f000 ffa8 	bl	80103b0 <__lshift>
 800f460:	9005      	str	r0, [sp, #20]
 800f462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f464:	2b00      	cmp	r3, #0
 800f466:	dd05      	ble.n	800f474 <_dtoa_r+0x918>
 800f468:	0031      	movs	r1, r6
 800f46a:	001a      	movs	r2, r3
 800f46c:	9804      	ldr	r0, [sp, #16]
 800f46e:	f000 ff9f 	bl	80103b0 <__lshift>
 800f472:	0006      	movs	r6, r0
 800f474:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f476:	2b00      	cmp	r3, #0
 800f478:	d027      	beq.n	800f4ca <_dtoa_r+0x96e>
 800f47a:	0031      	movs	r1, r6
 800f47c:	9805      	ldr	r0, [sp, #20]
 800f47e:	f001 f805 	bl	801048c <__mcmp>
 800f482:	2800      	cmp	r0, #0
 800f484:	da21      	bge.n	800f4ca <_dtoa_r+0x96e>
 800f486:	9b03      	ldr	r3, [sp, #12]
 800f488:	220a      	movs	r2, #10
 800f48a:	3b01      	subs	r3, #1
 800f48c:	9303      	str	r3, [sp, #12]
 800f48e:	9905      	ldr	r1, [sp, #20]
 800f490:	2300      	movs	r3, #0
 800f492:	9804      	ldr	r0, [sp, #16]
 800f494:	f000 fd90 	bl	800ffb8 <__multadd>
 800f498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f49a:	9005      	str	r0, [sp, #20]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d100      	bne.n	800f4a2 <_dtoa_r+0x946>
 800f4a0:	e15d      	b.n	800f75e <_dtoa_r+0xc02>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	0039      	movs	r1, r7
 800f4a6:	220a      	movs	r2, #10
 800f4a8:	9804      	ldr	r0, [sp, #16]
 800f4aa:	f000 fd85 	bl	800ffb8 <__multadd>
 800f4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4b0:	0007      	movs	r7, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dc49      	bgt.n	800f54a <_dtoa_r+0x9ee>
 800f4b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	dc0e      	bgt.n	800f4da <_dtoa_r+0x97e>
 800f4bc:	e045      	b.n	800f54a <_dtoa_r+0x9ee>
 800f4be:	2b04      	cmp	r3, #4
 800f4c0:	d0c6      	beq.n	800f450 <_dtoa_r+0x8f4>
 800f4c2:	331c      	adds	r3, #28
 800f4c4:	e7bd      	b.n	800f442 <_dtoa_r+0x8e6>
 800f4c6:	0013      	movs	r3, r2
 800f4c8:	e7fb      	b.n	800f4c2 <_dtoa_r+0x966>
 800f4ca:	9b07      	ldr	r3, [sp, #28]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	dc36      	bgt.n	800f53e <_dtoa_r+0x9e2>
 800f4d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	dd33      	ble.n	800f53e <_dtoa_r+0x9e2>
 800f4d6:	9b07      	ldr	r3, [sp, #28]
 800f4d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d10c      	bne.n	800f4fa <_dtoa_r+0x99e>
 800f4e0:	0031      	movs	r1, r6
 800f4e2:	2205      	movs	r2, #5
 800f4e4:	9804      	ldr	r0, [sp, #16]
 800f4e6:	f000 fd67 	bl	800ffb8 <__multadd>
 800f4ea:	0006      	movs	r6, r0
 800f4ec:	0001      	movs	r1, r0
 800f4ee:	9805      	ldr	r0, [sp, #20]
 800f4f0:	f000 ffcc 	bl	801048c <__mcmp>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	dd00      	ble.n	800f4fa <_dtoa_r+0x99e>
 800f4f8:	e59f      	b.n	800f03a <_dtoa_r+0x4de>
 800f4fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f4fc:	43db      	mvns	r3, r3
 800f4fe:	9303      	str	r3, [sp, #12]
 800f500:	9b06      	ldr	r3, [sp, #24]
 800f502:	9308      	str	r3, [sp, #32]
 800f504:	2500      	movs	r5, #0
 800f506:	0031      	movs	r1, r6
 800f508:	9804      	ldr	r0, [sp, #16]
 800f50a:	f000 fd31 	bl	800ff70 <_Bfree>
 800f50e:	2f00      	cmp	r7, #0
 800f510:	d100      	bne.n	800f514 <_dtoa_r+0x9b8>
 800f512:	e6a3      	b.n	800f25c <_dtoa_r+0x700>
 800f514:	2d00      	cmp	r5, #0
 800f516:	d005      	beq.n	800f524 <_dtoa_r+0x9c8>
 800f518:	42bd      	cmp	r5, r7
 800f51a:	d003      	beq.n	800f524 <_dtoa_r+0x9c8>
 800f51c:	0029      	movs	r1, r5
 800f51e:	9804      	ldr	r0, [sp, #16]
 800f520:	f000 fd26 	bl	800ff70 <_Bfree>
 800f524:	0039      	movs	r1, r7
 800f526:	9804      	ldr	r0, [sp, #16]
 800f528:	f000 fd22 	bl	800ff70 <_Bfree>
 800f52c:	e696      	b.n	800f25c <_dtoa_r+0x700>
 800f52e:	2600      	movs	r6, #0
 800f530:	0037      	movs	r7, r6
 800f532:	e7e2      	b.n	800f4fa <_dtoa_r+0x99e>
 800f534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f536:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f538:	9303      	str	r3, [sp, #12]
 800f53a:	0037      	movs	r7, r6
 800f53c:	e57d      	b.n	800f03a <_dtoa_r+0x4de>
 800f53e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f540:	2b00      	cmp	r3, #0
 800f542:	d100      	bne.n	800f546 <_dtoa_r+0x9ea>
 800f544:	e0c3      	b.n	800f6ce <_dtoa_r+0xb72>
 800f546:	9b07      	ldr	r3, [sp, #28]
 800f548:	930b      	str	r3, [sp, #44]	; 0x2c
 800f54a:	2c00      	cmp	r4, #0
 800f54c:	dd05      	ble.n	800f55a <_dtoa_r+0x9fe>
 800f54e:	0039      	movs	r1, r7
 800f550:	0022      	movs	r2, r4
 800f552:	9804      	ldr	r0, [sp, #16]
 800f554:	f000 ff2c 	bl	80103b0 <__lshift>
 800f558:	0007      	movs	r7, r0
 800f55a:	0038      	movs	r0, r7
 800f55c:	2d00      	cmp	r5, #0
 800f55e:	d024      	beq.n	800f5aa <_dtoa_r+0xa4e>
 800f560:	6879      	ldr	r1, [r7, #4]
 800f562:	9804      	ldr	r0, [sp, #16]
 800f564:	f000 fcc0 	bl	800fee8 <_Balloc>
 800f568:	1e04      	subs	r4, r0, #0
 800f56a:	d111      	bne.n	800f590 <_dtoa_r+0xa34>
 800f56c:	0022      	movs	r2, r4
 800f56e:	4b05      	ldr	r3, [pc, #20]	; (800f584 <_dtoa_r+0xa28>)
 800f570:	4805      	ldr	r0, [pc, #20]	; (800f588 <_dtoa_r+0xa2c>)
 800f572:	4906      	ldr	r1, [pc, #24]	; (800f58c <_dtoa_r+0xa30>)
 800f574:	f7ff fb07 	bl	800eb86 <_dtoa_r+0x2a>
 800f578:	40240000 	.word	0x40240000
 800f57c:	00000433 	.word	0x00000433
 800f580:	7ff00000 	.word	0x7ff00000
 800f584:	0801381c 	.word	0x0801381c
 800f588:	080137c4 	.word	0x080137c4
 800f58c:	000002ef 	.word	0x000002ef
 800f590:	0039      	movs	r1, r7
 800f592:	693a      	ldr	r2, [r7, #16]
 800f594:	310c      	adds	r1, #12
 800f596:	3202      	adds	r2, #2
 800f598:	0092      	lsls	r2, r2, #2
 800f59a:	300c      	adds	r0, #12
 800f59c:	f7ff fa1c 	bl	800e9d8 <memcpy>
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	0021      	movs	r1, r4
 800f5a4:	9804      	ldr	r0, [sp, #16]
 800f5a6:	f000 ff03 	bl	80103b0 <__lshift>
 800f5aa:	9b06      	ldr	r3, [sp, #24]
 800f5ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f5ae:	9307      	str	r3, [sp, #28]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	189b      	adds	r3, r3, r2
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	003d      	movs	r5, r7
 800f5b8:	0007      	movs	r7, r0
 800f5ba:	930e      	str	r3, [sp, #56]	; 0x38
 800f5bc:	9b08      	ldr	r3, [sp, #32]
 800f5be:	4013      	ands	r3, r2
 800f5c0:	930d      	str	r3, [sp, #52]	; 0x34
 800f5c2:	0031      	movs	r1, r6
 800f5c4:	9805      	ldr	r0, [sp, #20]
 800f5c6:	f7ff fa39 	bl	800ea3c <quorem>
 800f5ca:	0029      	movs	r1, r5
 800f5cc:	0004      	movs	r4, r0
 800f5ce:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5d0:	9805      	ldr	r0, [sp, #20]
 800f5d2:	f000 ff5b 	bl	801048c <__mcmp>
 800f5d6:	003a      	movs	r2, r7
 800f5d8:	900c      	str	r0, [sp, #48]	; 0x30
 800f5da:	0031      	movs	r1, r6
 800f5dc:	9804      	ldr	r0, [sp, #16]
 800f5de:	f000 ff71 	bl	80104c4 <__mdiff>
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	68c3      	ldr	r3, [r0, #12]
 800f5e6:	3430      	adds	r4, #48	; 0x30
 800f5e8:	9008      	str	r0, [sp, #32]
 800f5ea:	920a      	str	r2, [sp, #40]	; 0x28
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d104      	bne.n	800f5fa <_dtoa_r+0xa9e>
 800f5f0:	0001      	movs	r1, r0
 800f5f2:	9805      	ldr	r0, [sp, #20]
 800f5f4:	f000 ff4a 	bl	801048c <__mcmp>
 800f5f8:	900a      	str	r0, [sp, #40]	; 0x28
 800f5fa:	9908      	ldr	r1, [sp, #32]
 800f5fc:	9804      	ldr	r0, [sp, #16]
 800f5fe:	f000 fcb7 	bl	800ff70 <_Bfree>
 800f602:	9b07      	ldr	r3, [sp, #28]
 800f604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f606:	3301      	adds	r3, #1
 800f608:	9308      	str	r3, [sp, #32]
 800f60a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f60c:	4313      	orrs	r3, r2
 800f60e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f610:	4313      	orrs	r3, r2
 800f612:	d109      	bne.n	800f628 <_dtoa_r+0xacc>
 800f614:	2c39      	cmp	r4, #57	; 0x39
 800f616:	d022      	beq.n	800f65e <_dtoa_r+0xb02>
 800f618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	dd01      	ble.n	800f622 <_dtoa_r+0xac6>
 800f61e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f620:	3431      	adds	r4, #49	; 0x31
 800f622:	9b07      	ldr	r3, [sp, #28]
 800f624:	701c      	strb	r4, [r3, #0]
 800f626:	e76e      	b.n	800f506 <_dtoa_r+0x9aa>
 800f628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	db04      	blt.n	800f638 <_dtoa_r+0xadc>
 800f62e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f630:	4313      	orrs	r3, r2
 800f632:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f634:	4313      	orrs	r3, r2
 800f636:	d11e      	bne.n	800f676 <_dtoa_r+0xb1a>
 800f638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	ddf1      	ble.n	800f622 <_dtoa_r+0xac6>
 800f63e:	9905      	ldr	r1, [sp, #20]
 800f640:	2201      	movs	r2, #1
 800f642:	9804      	ldr	r0, [sp, #16]
 800f644:	f000 feb4 	bl	80103b0 <__lshift>
 800f648:	0031      	movs	r1, r6
 800f64a:	9005      	str	r0, [sp, #20]
 800f64c:	f000 ff1e 	bl	801048c <__mcmp>
 800f650:	2800      	cmp	r0, #0
 800f652:	dc02      	bgt.n	800f65a <_dtoa_r+0xafe>
 800f654:	d1e5      	bne.n	800f622 <_dtoa_r+0xac6>
 800f656:	07e3      	lsls	r3, r4, #31
 800f658:	d5e3      	bpl.n	800f622 <_dtoa_r+0xac6>
 800f65a:	2c39      	cmp	r4, #57	; 0x39
 800f65c:	d1df      	bne.n	800f61e <_dtoa_r+0xac2>
 800f65e:	2339      	movs	r3, #57	; 0x39
 800f660:	9a07      	ldr	r2, [sp, #28]
 800f662:	7013      	strb	r3, [r2, #0]
 800f664:	9b08      	ldr	r3, [sp, #32]
 800f666:	9308      	str	r3, [sp, #32]
 800f668:	3b01      	subs	r3, #1
 800f66a:	781a      	ldrb	r2, [r3, #0]
 800f66c:	2a39      	cmp	r2, #57	; 0x39
 800f66e:	d063      	beq.n	800f738 <_dtoa_r+0xbdc>
 800f670:	3201      	adds	r2, #1
 800f672:	701a      	strb	r2, [r3, #0]
 800f674:	e747      	b.n	800f506 <_dtoa_r+0x9aa>
 800f676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f678:	2b00      	cmp	r3, #0
 800f67a:	dd03      	ble.n	800f684 <_dtoa_r+0xb28>
 800f67c:	2c39      	cmp	r4, #57	; 0x39
 800f67e:	d0ee      	beq.n	800f65e <_dtoa_r+0xb02>
 800f680:	3401      	adds	r4, #1
 800f682:	e7ce      	b.n	800f622 <_dtoa_r+0xac6>
 800f684:	9b07      	ldr	r3, [sp, #28]
 800f686:	9a07      	ldr	r2, [sp, #28]
 800f688:	701c      	strb	r4, [r3, #0]
 800f68a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d03e      	beq.n	800f70e <_dtoa_r+0xbb2>
 800f690:	2300      	movs	r3, #0
 800f692:	220a      	movs	r2, #10
 800f694:	9905      	ldr	r1, [sp, #20]
 800f696:	9804      	ldr	r0, [sp, #16]
 800f698:	f000 fc8e 	bl	800ffb8 <__multadd>
 800f69c:	2300      	movs	r3, #0
 800f69e:	9005      	str	r0, [sp, #20]
 800f6a0:	220a      	movs	r2, #10
 800f6a2:	0029      	movs	r1, r5
 800f6a4:	9804      	ldr	r0, [sp, #16]
 800f6a6:	42bd      	cmp	r5, r7
 800f6a8:	d106      	bne.n	800f6b8 <_dtoa_r+0xb5c>
 800f6aa:	f000 fc85 	bl	800ffb8 <__multadd>
 800f6ae:	0005      	movs	r5, r0
 800f6b0:	0007      	movs	r7, r0
 800f6b2:	9b08      	ldr	r3, [sp, #32]
 800f6b4:	9307      	str	r3, [sp, #28]
 800f6b6:	e784      	b.n	800f5c2 <_dtoa_r+0xa66>
 800f6b8:	f000 fc7e 	bl	800ffb8 <__multadd>
 800f6bc:	0039      	movs	r1, r7
 800f6be:	0005      	movs	r5, r0
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	220a      	movs	r2, #10
 800f6c4:	9804      	ldr	r0, [sp, #16]
 800f6c6:	f000 fc77 	bl	800ffb8 <__multadd>
 800f6ca:	0007      	movs	r7, r0
 800f6cc:	e7f1      	b.n	800f6b2 <_dtoa_r+0xb56>
 800f6ce:	9b07      	ldr	r3, [sp, #28]
 800f6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f6d2:	2500      	movs	r5, #0
 800f6d4:	0031      	movs	r1, r6
 800f6d6:	9805      	ldr	r0, [sp, #20]
 800f6d8:	f7ff f9b0 	bl	800ea3c <quorem>
 800f6dc:	9b06      	ldr	r3, [sp, #24]
 800f6de:	3030      	adds	r0, #48	; 0x30
 800f6e0:	5558      	strb	r0, [r3, r5]
 800f6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6e4:	3501      	adds	r5, #1
 800f6e6:	0004      	movs	r4, r0
 800f6e8:	42ab      	cmp	r3, r5
 800f6ea:	dd07      	ble.n	800f6fc <_dtoa_r+0xba0>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	220a      	movs	r2, #10
 800f6f0:	9905      	ldr	r1, [sp, #20]
 800f6f2:	9804      	ldr	r0, [sp, #16]
 800f6f4:	f000 fc60 	bl	800ffb8 <__multadd>
 800f6f8:	9005      	str	r0, [sp, #20]
 800f6fa:	e7eb      	b.n	800f6d4 <_dtoa_r+0xb78>
 800f6fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f6fe:	2301      	movs	r3, #1
 800f700:	2a00      	cmp	r2, #0
 800f702:	dd00      	ble.n	800f706 <_dtoa_r+0xbaa>
 800f704:	0013      	movs	r3, r2
 800f706:	2500      	movs	r5, #0
 800f708:	9a06      	ldr	r2, [sp, #24]
 800f70a:	18d3      	adds	r3, r2, r3
 800f70c:	9308      	str	r3, [sp, #32]
 800f70e:	9905      	ldr	r1, [sp, #20]
 800f710:	2201      	movs	r2, #1
 800f712:	9804      	ldr	r0, [sp, #16]
 800f714:	f000 fe4c 	bl	80103b0 <__lshift>
 800f718:	0031      	movs	r1, r6
 800f71a:	9005      	str	r0, [sp, #20]
 800f71c:	f000 feb6 	bl	801048c <__mcmp>
 800f720:	2800      	cmp	r0, #0
 800f722:	dc9f      	bgt.n	800f664 <_dtoa_r+0xb08>
 800f724:	d101      	bne.n	800f72a <_dtoa_r+0xbce>
 800f726:	07e4      	lsls	r4, r4, #31
 800f728:	d49c      	bmi.n	800f664 <_dtoa_r+0xb08>
 800f72a:	9b08      	ldr	r3, [sp, #32]
 800f72c:	9308      	str	r3, [sp, #32]
 800f72e:	3b01      	subs	r3, #1
 800f730:	781a      	ldrb	r2, [r3, #0]
 800f732:	2a30      	cmp	r2, #48	; 0x30
 800f734:	d0fa      	beq.n	800f72c <_dtoa_r+0xbd0>
 800f736:	e6e6      	b.n	800f506 <_dtoa_r+0x9aa>
 800f738:	9a06      	ldr	r2, [sp, #24]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d193      	bne.n	800f666 <_dtoa_r+0xb0a>
 800f73e:	9b03      	ldr	r3, [sp, #12]
 800f740:	3301      	adds	r3, #1
 800f742:	9303      	str	r3, [sp, #12]
 800f744:	2331      	movs	r3, #49	; 0x31
 800f746:	7013      	strb	r3, [r2, #0]
 800f748:	e6dd      	b.n	800f506 <_dtoa_r+0x9aa>
 800f74a:	4b09      	ldr	r3, [pc, #36]	; (800f770 <_dtoa_r+0xc14>)
 800f74c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f74e:	9306      	str	r3, [sp, #24]
 800f750:	4b08      	ldr	r3, [pc, #32]	; (800f774 <_dtoa_r+0xc18>)
 800f752:	2a00      	cmp	r2, #0
 800f754:	d001      	beq.n	800f75a <_dtoa_r+0xbfe>
 800f756:	f7ff fa49 	bl	800ebec <_dtoa_r+0x90>
 800f75a:	f7ff fa49 	bl	800ebf0 <_dtoa_r+0x94>
 800f75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f760:	2b00      	cmp	r3, #0
 800f762:	dcb6      	bgt.n	800f6d2 <_dtoa_r+0xb76>
 800f764:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f766:	2b02      	cmp	r3, #2
 800f768:	dd00      	ble.n	800f76c <_dtoa_r+0xc10>
 800f76a:	e6b6      	b.n	800f4da <_dtoa_r+0x97e>
 800f76c:	e7b1      	b.n	800f6d2 <_dtoa_r+0xb76>
 800f76e:	46c0      	nop			; (mov r8, r8)
 800f770:	080137b7 	.word	0x080137b7
 800f774:	080137bf 	.word	0x080137bf

0800f778 <_free_r>:
 800f778:	b570      	push	{r4, r5, r6, lr}
 800f77a:	0005      	movs	r5, r0
 800f77c:	2900      	cmp	r1, #0
 800f77e:	d010      	beq.n	800f7a2 <_free_r+0x2a>
 800f780:	1f0c      	subs	r4, r1, #4
 800f782:	6823      	ldr	r3, [r4, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	da00      	bge.n	800f78a <_free_r+0x12>
 800f788:	18e4      	adds	r4, r4, r3
 800f78a:	0028      	movs	r0, r5
 800f78c:	f7fd f88a 	bl	800c8a4 <__malloc_lock>
 800f790:	4a1d      	ldr	r2, [pc, #116]	; (800f808 <_free_r+0x90>)
 800f792:	6813      	ldr	r3, [r2, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d105      	bne.n	800f7a4 <_free_r+0x2c>
 800f798:	6063      	str	r3, [r4, #4]
 800f79a:	6014      	str	r4, [r2, #0]
 800f79c:	0028      	movs	r0, r5
 800f79e:	f7fd f889 	bl	800c8b4 <__malloc_unlock>
 800f7a2:	bd70      	pop	{r4, r5, r6, pc}
 800f7a4:	42a3      	cmp	r3, r4
 800f7a6:	d908      	bls.n	800f7ba <_free_r+0x42>
 800f7a8:	6820      	ldr	r0, [r4, #0]
 800f7aa:	1821      	adds	r1, r4, r0
 800f7ac:	428b      	cmp	r3, r1
 800f7ae:	d1f3      	bne.n	800f798 <_free_r+0x20>
 800f7b0:	6819      	ldr	r1, [r3, #0]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	1809      	adds	r1, r1, r0
 800f7b6:	6021      	str	r1, [r4, #0]
 800f7b8:	e7ee      	b.n	800f798 <_free_r+0x20>
 800f7ba:	001a      	movs	r2, r3
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d001      	beq.n	800f7c6 <_free_r+0x4e>
 800f7c2:	42a3      	cmp	r3, r4
 800f7c4:	d9f9      	bls.n	800f7ba <_free_r+0x42>
 800f7c6:	6811      	ldr	r1, [r2, #0]
 800f7c8:	1850      	adds	r0, r2, r1
 800f7ca:	42a0      	cmp	r0, r4
 800f7cc:	d10b      	bne.n	800f7e6 <_free_r+0x6e>
 800f7ce:	6820      	ldr	r0, [r4, #0]
 800f7d0:	1809      	adds	r1, r1, r0
 800f7d2:	1850      	adds	r0, r2, r1
 800f7d4:	6011      	str	r1, [r2, #0]
 800f7d6:	4283      	cmp	r3, r0
 800f7d8:	d1e0      	bne.n	800f79c <_free_r+0x24>
 800f7da:	6818      	ldr	r0, [r3, #0]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	1841      	adds	r1, r0, r1
 800f7e0:	6011      	str	r1, [r2, #0]
 800f7e2:	6053      	str	r3, [r2, #4]
 800f7e4:	e7da      	b.n	800f79c <_free_r+0x24>
 800f7e6:	42a0      	cmp	r0, r4
 800f7e8:	d902      	bls.n	800f7f0 <_free_r+0x78>
 800f7ea:	230c      	movs	r3, #12
 800f7ec:	602b      	str	r3, [r5, #0]
 800f7ee:	e7d5      	b.n	800f79c <_free_r+0x24>
 800f7f0:	6820      	ldr	r0, [r4, #0]
 800f7f2:	1821      	adds	r1, r4, r0
 800f7f4:	428b      	cmp	r3, r1
 800f7f6:	d103      	bne.n	800f800 <_free_r+0x88>
 800f7f8:	6819      	ldr	r1, [r3, #0]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	1809      	adds	r1, r1, r0
 800f7fe:	6021      	str	r1, [r4, #0]
 800f800:	6063      	str	r3, [r4, #4]
 800f802:	6054      	str	r4, [r2, #4]
 800f804:	e7ca      	b.n	800f79c <_free_r+0x24>
 800f806:	46c0      	nop			; (mov r8, r8)
 800f808:	2000650c 	.word	0x2000650c

0800f80c <rshift>:
 800f80c:	0002      	movs	r2, r0
 800f80e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f810:	6904      	ldr	r4, [r0, #16]
 800f812:	114b      	asrs	r3, r1, #5
 800f814:	b085      	sub	sp, #20
 800f816:	3214      	adds	r2, #20
 800f818:	9302      	str	r3, [sp, #8]
 800f81a:	114d      	asrs	r5, r1, #5
 800f81c:	0013      	movs	r3, r2
 800f81e:	42ac      	cmp	r4, r5
 800f820:	dd32      	ble.n	800f888 <rshift+0x7c>
 800f822:	261f      	movs	r6, #31
 800f824:	000f      	movs	r7, r1
 800f826:	114b      	asrs	r3, r1, #5
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	00a5      	lsls	r5, r4, #2
 800f82c:	18d3      	adds	r3, r2, r3
 800f82e:	4037      	ands	r7, r6
 800f830:	1955      	adds	r5, r2, r5
 800f832:	9300      	str	r3, [sp, #0]
 800f834:	9701      	str	r7, [sp, #4]
 800f836:	4231      	tst	r1, r6
 800f838:	d10d      	bne.n	800f856 <rshift+0x4a>
 800f83a:	0016      	movs	r6, r2
 800f83c:	0019      	movs	r1, r3
 800f83e:	428d      	cmp	r5, r1
 800f840:	d836      	bhi.n	800f8b0 <rshift+0xa4>
 800f842:	9900      	ldr	r1, [sp, #0]
 800f844:	2300      	movs	r3, #0
 800f846:	3903      	subs	r1, #3
 800f848:	428d      	cmp	r5, r1
 800f84a:	d302      	bcc.n	800f852 <rshift+0x46>
 800f84c:	9b02      	ldr	r3, [sp, #8]
 800f84e:	1ae4      	subs	r4, r4, r3
 800f850:	00a3      	lsls	r3, r4, #2
 800f852:	18d3      	adds	r3, r2, r3
 800f854:	e018      	b.n	800f888 <rshift+0x7c>
 800f856:	2120      	movs	r1, #32
 800f858:	9e01      	ldr	r6, [sp, #4]
 800f85a:	9f01      	ldr	r7, [sp, #4]
 800f85c:	1b89      	subs	r1, r1, r6
 800f85e:	9e00      	ldr	r6, [sp, #0]
 800f860:	9103      	str	r1, [sp, #12]
 800f862:	ce02      	ldmia	r6!, {r1}
 800f864:	4694      	mov	ip, r2
 800f866:	40f9      	lsrs	r1, r7
 800f868:	42b5      	cmp	r5, r6
 800f86a:	d816      	bhi.n	800f89a <rshift+0x8e>
 800f86c:	9e00      	ldr	r6, [sp, #0]
 800f86e:	2300      	movs	r3, #0
 800f870:	3601      	adds	r6, #1
 800f872:	42b5      	cmp	r5, r6
 800f874:	d303      	bcc.n	800f87e <rshift+0x72>
 800f876:	9b02      	ldr	r3, [sp, #8]
 800f878:	1ae3      	subs	r3, r4, r3
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	3b04      	subs	r3, #4
 800f87e:	18d3      	adds	r3, r2, r3
 800f880:	6019      	str	r1, [r3, #0]
 800f882:	2900      	cmp	r1, #0
 800f884:	d000      	beq.n	800f888 <rshift+0x7c>
 800f886:	3304      	adds	r3, #4
 800f888:	1a99      	subs	r1, r3, r2
 800f88a:	1089      	asrs	r1, r1, #2
 800f88c:	6101      	str	r1, [r0, #16]
 800f88e:	4293      	cmp	r3, r2
 800f890:	d101      	bne.n	800f896 <rshift+0x8a>
 800f892:	2300      	movs	r3, #0
 800f894:	6143      	str	r3, [r0, #20]
 800f896:	b005      	add	sp, #20
 800f898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f89a:	6837      	ldr	r7, [r6, #0]
 800f89c:	9b03      	ldr	r3, [sp, #12]
 800f89e:	409f      	lsls	r7, r3
 800f8a0:	430f      	orrs	r7, r1
 800f8a2:	4661      	mov	r1, ip
 800f8a4:	c180      	stmia	r1!, {r7}
 800f8a6:	468c      	mov	ip, r1
 800f8a8:	9b01      	ldr	r3, [sp, #4]
 800f8aa:	ce02      	ldmia	r6!, {r1}
 800f8ac:	40d9      	lsrs	r1, r3
 800f8ae:	e7db      	b.n	800f868 <rshift+0x5c>
 800f8b0:	c980      	ldmia	r1!, {r7}
 800f8b2:	c680      	stmia	r6!, {r7}
 800f8b4:	e7c3      	b.n	800f83e <rshift+0x32>

0800f8b6 <__hexdig_fun>:
 800f8b6:	0002      	movs	r2, r0
 800f8b8:	3a30      	subs	r2, #48	; 0x30
 800f8ba:	0003      	movs	r3, r0
 800f8bc:	2a09      	cmp	r2, #9
 800f8be:	d802      	bhi.n	800f8c6 <__hexdig_fun+0x10>
 800f8c0:	3b20      	subs	r3, #32
 800f8c2:	b2d8      	uxtb	r0, r3
 800f8c4:	4770      	bx	lr
 800f8c6:	0002      	movs	r2, r0
 800f8c8:	3a61      	subs	r2, #97	; 0x61
 800f8ca:	2a05      	cmp	r2, #5
 800f8cc:	d801      	bhi.n	800f8d2 <__hexdig_fun+0x1c>
 800f8ce:	3b47      	subs	r3, #71	; 0x47
 800f8d0:	e7f7      	b.n	800f8c2 <__hexdig_fun+0xc>
 800f8d2:	001a      	movs	r2, r3
 800f8d4:	3a41      	subs	r2, #65	; 0x41
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	2a05      	cmp	r2, #5
 800f8da:	d8f3      	bhi.n	800f8c4 <__hexdig_fun+0xe>
 800f8dc:	3b27      	subs	r3, #39	; 0x27
 800f8de:	e7f0      	b.n	800f8c2 <__hexdig_fun+0xc>

0800f8e0 <__gethex>:
 800f8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e2:	b089      	sub	sp, #36	; 0x24
 800f8e4:	9307      	str	r3, [sp, #28]
 800f8e6:	2302      	movs	r3, #2
 800f8e8:	9201      	str	r2, [sp, #4]
 800f8ea:	680a      	ldr	r2, [r1, #0]
 800f8ec:	425b      	negs	r3, r3
 800f8ee:	9003      	str	r0, [sp, #12]
 800f8f0:	9106      	str	r1, [sp, #24]
 800f8f2:	1c96      	adds	r6, r2, #2
 800f8f4:	1a9b      	subs	r3, r3, r2
 800f8f6:	199a      	adds	r2, r3, r6
 800f8f8:	9600      	str	r6, [sp, #0]
 800f8fa:	9205      	str	r2, [sp, #20]
 800f8fc:	9a00      	ldr	r2, [sp, #0]
 800f8fe:	3601      	adds	r6, #1
 800f900:	7810      	ldrb	r0, [r2, #0]
 800f902:	2830      	cmp	r0, #48	; 0x30
 800f904:	d0f7      	beq.n	800f8f6 <__gethex+0x16>
 800f906:	f7ff ffd6 	bl	800f8b6 <__hexdig_fun>
 800f90a:	2300      	movs	r3, #0
 800f90c:	001d      	movs	r5, r3
 800f90e:	9302      	str	r3, [sp, #8]
 800f910:	4298      	cmp	r0, r3
 800f912:	d11d      	bne.n	800f950 <__gethex+0x70>
 800f914:	2201      	movs	r2, #1
 800f916:	49a6      	ldr	r1, [pc, #664]	; (800fbb0 <__gethex+0x2d0>)
 800f918:	9800      	ldr	r0, [sp, #0]
 800f91a:	f7fe feae 	bl	800e67a <strncmp>
 800f91e:	0007      	movs	r7, r0
 800f920:	42a8      	cmp	r0, r5
 800f922:	d169      	bne.n	800f9f8 <__gethex+0x118>
 800f924:	9b00      	ldr	r3, [sp, #0]
 800f926:	0034      	movs	r4, r6
 800f928:	7858      	ldrb	r0, [r3, #1]
 800f92a:	f7ff ffc4 	bl	800f8b6 <__hexdig_fun>
 800f92e:	2301      	movs	r3, #1
 800f930:	9302      	str	r3, [sp, #8]
 800f932:	42a8      	cmp	r0, r5
 800f934:	d02f      	beq.n	800f996 <__gethex+0xb6>
 800f936:	9600      	str	r6, [sp, #0]
 800f938:	9b00      	ldr	r3, [sp, #0]
 800f93a:	7818      	ldrb	r0, [r3, #0]
 800f93c:	2830      	cmp	r0, #48	; 0x30
 800f93e:	d009      	beq.n	800f954 <__gethex+0x74>
 800f940:	f7ff ffb9 	bl	800f8b6 <__hexdig_fun>
 800f944:	4242      	negs	r2, r0
 800f946:	4142      	adcs	r2, r0
 800f948:	2301      	movs	r3, #1
 800f94a:	0035      	movs	r5, r6
 800f94c:	9202      	str	r2, [sp, #8]
 800f94e:	9305      	str	r3, [sp, #20]
 800f950:	9c00      	ldr	r4, [sp, #0]
 800f952:	e004      	b.n	800f95e <__gethex+0x7e>
 800f954:	9b00      	ldr	r3, [sp, #0]
 800f956:	3301      	adds	r3, #1
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	e7ed      	b.n	800f938 <__gethex+0x58>
 800f95c:	3401      	adds	r4, #1
 800f95e:	7820      	ldrb	r0, [r4, #0]
 800f960:	f7ff ffa9 	bl	800f8b6 <__hexdig_fun>
 800f964:	1e07      	subs	r7, r0, #0
 800f966:	d1f9      	bne.n	800f95c <__gethex+0x7c>
 800f968:	2201      	movs	r2, #1
 800f96a:	0020      	movs	r0, r4
 800f96c:	4990      	ldr	r1, [pc, #576]	; (800fbb0 <__gethex+0x2d0>)
 800f96e:	f7fe fe84 	bl	800e67a <strncmp>
 800f972:	2800      	cmp	r0, #0
 800f974:	d10d      	bne.n	800f992 <__gethex+0xb2>
 800f976:	2d00      	cmp	r5, #0
 800f978:	d106      	bne.n	800f988 <__gethex+0xa8>
 800f97a:	3401      	adds	r4, #1
 800f97c:	0025      	movs	r5, r4
 800f97e:	7820      	ldrb	r0, [r4, #0]
 800f980:	f7ff ff99 	bl	800f8b6 <__hexdig_fun>
 800f984:	2800      	cmp	r0, #0
 800f986:	d102      	bne.n	800f98e <__gethex+0xae>
 800f988:	1b2d      	subs	r5, r5, r4
 800f98a:	00af      	lsls	r7, r5, #2
 800f98c:	e003      	b.n	800f996 <__gethex+0xb6>
 800f98e:	3401      	adds	r4, #1
 800f990:	e7f5      	b.n	800f97e <__gethex+0x9e>
 800f992:	2d00      	cmp	r5, #0
 800f994:	d1f8      	bne.n	800f988 <__gethex+0xa8>
 800f996:	2220      	movs	r2, #32
 800f998:	7823      	ldrb	r3, [r4, #0]
 800f99a:	0026      	movs	r6, r4
 800f99c:	4393      	bics	r3, r2
 800f99e:	2b50      	cmp	r3, #80	; 0x50
 800f9a0:	d11d      	bne.n	800f9de <__gethex+0xfe>
 800f9a2:	7863      	ldrb	r3, [r4, #1]
 800f9a4:	2b2b      	cmp	r3, #43	; 0x2b
 800f9a6:	d02c      	beq.n	800fa02 <__gethex+0x122>
 800f9a8:	2b2d      	cmp	r3, #45	; 0x2d
 800f9aa:	d02e      	beq.n	800fa0a <__gethex+0x12a>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	1c66      	adds	r6, r4, #1
 800f9b0:	9304      	str	r3, [sp, #16]
 800f9b2:	7830      	ldrb	r0, [r6, #0]
 800f9b4:	f7ff ff7f 	bl	800f8b6 <__hexdig_fun>
 800f9b8:	1e43      	subs	r3, r0, #1
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	2b18      	cmp	r3, #24
 800f9be:	d82b      	bhi.n	800fa18 <__gethex+0x138>
 800f9c0:	3810      	subs	r0, #16
 800f9c2:	0005      	movs	r5, r0
 800f9c4:	7870      	ldrb	r0, [r6, #1]
 800f9c6:	f7ff ff76 	bl	800f8b6 <__hexdig_fun>
 800f9ca:	1e43      	subs	r3, r0, #1
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	3601      	adds	r6, #1
 800f9d0:	2b18      	cmp	r3, #24
 800f9d2:	d91c      	bls.n	800fa0e <__gethex+0x12e>
 800f9d4:	9b04      	ldr	r3, [sp, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d000      	beq.n	800f9dc <__gethex+0xfc>
 800f9da:	426d      	negs	r5, r5
 800f9dc:	197f      	adds	r7, r7, r5
 800f9de:	9b06      	ldr	r3, [sp, #24]
 800f9e0:	601e      	str	r6, [r3, #0]
 800f9e2:	9b02      	ldr	r3, [sp, #8]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d019      	beq.n	800fa1c <__gethex+0x13c>
 800f9e8:	2600      	movs	r6, #0
 800f9ea:	9b05      	ldr	r3, [sp, #20]
 800f9ec:	42b3      	cmp	r3, r6
 800f9ee:	d100      	bne.n	800f9f2 <__gethex+0x112>
 800f9f0:	3606      	adds	r6, #6
 800f9f2:	0030      	movs	r0, r6
 800f9f4:	b009      	add	sp, #36	; 0x24
 800f9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	2700      	movs	r7, #0
 800f9fc:	9c00      	ldr	r4, [sp, #0]
 800f9fe:	9302      	str	r3, [sp, #8]
 800fa00:	e7c9      	b.n	800f996 <__gethex+0xb6>
 800fa02:	2300      	movs	r3, #0
 800fa04:	9304      	str	r3, [sp, #16]
 800fa06:	1ca6      	adds	r6, r4, #2
 800fa08:	e7d3      	b.n	800f9b2 <__gethex+0xd2>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e7fa      	b.n	800fa04 <__gethex+0x124>
 800fa0e:	230a      	movs	r3, #10
 800fa10:	435d      	muls	r5, r3
 800fa12:	182d      	adds	r5, r5, r0
 800fa14:	3d10      	subs	r5, #16
 800fa16:	e7d5      	b.n	800f9c4 <__gethex+0xe4>
 800fa18:	0026      	movs	r6, r4
 800fa1a:	e7e0      	b.n	800f9de <__gethex+0xfe>
 800fa1c:	9b00      	ldr	r3, [sp, #0]
 800fa1e:	9902      	ldr	r1, [sp, #8]
 800fa20:	1ae3      	subs	r3, r4, r3
 800fa22:	3b01      	subs	r3, #1
 800fa24:	2b07      	cmp	r3, #7
 800fa26:	dc0a      	bgt.n	800fa3e <__gethex+0x15e>
 800fa28:	9803      	ldr	r0, [sp, #12]
 800fa2a:	f000 fa5d 	bl	800fee8 <_Balloc>
 800fa2e:	1e05      	subs	r5, r0, #0
 800fa30:	d108      	bne.n	800fa44 <__gethex+0x164>
 800fa32:	002a      	movs	r2, r5
 800fa34:	21e4      	movs	r1, #228	; 0xe4
 800fa36:	4b5f      	ldr	r3, [pc, #380]	; (800fbb4 <__gethex+0x2d4>)
 800fa38:	485f      	ldr	r0, [pc, #380]	; (800fbb8 <__gethex+0x2d8>)
 800fa3a:	f7fe ffe1 	bl	800ea00 <__assert_func>
 800fa3e:	3101      	adds	r1, #1
 800fa40:	105b      	asrs	r3, r3, #1
 800fa42:	e7ef      	b.n	800fa24 <__gethex+0x144>
 800fa44:	0003      	movs	r3, r0
 800fa46:	3314      	adds	r3, #20
 800fa48:	9302      	str	r3, [sp, #8]
 800fa4a:	9305      	str	r3, [sp, #20]
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	001e      	movs	r6, r3
 800fa50:	9304      	str	r3, [sp, #16]
 800fa52:	9b00      	ldr	r3, [sp, #0]
 800fa54:	42a3      	cmp	r3, r4
 800fa56:	d33f      	bcc.n	800fad8 <__gethex+0x1f8>
 800fa58:	9c05      	ldr	r4, [sp, #20]
 800fa5a:	9b02      	ldr	r3, [sp, #8]
 800fa5c:	c440      	stmia	r4!, {r6}
 800fa5e:	1ae4      	subs	r4, r4, r3
 800fa60:	10a4      	asrs	r4, r4, #2
 800fa62:	0030      	movs	r0, r6
 800fa64:	612c      	str	r4, [r5, #16]
 800fa66:	f000 fb37 	bl	80100d8 <__hi0bits>
 800fa6a:	9b01      	ldr	r3, [sp, #4]
 800fa6c:	0164      	lsls	r4, r4, #5
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	1a26      	subs	r6, r4, r0
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	429e      	cmp	r6, r3
 800fa76:	dd51      	ble.n	800fb1c <__gethex+0x23c>
 800fa78:	1af6      	subs	r6, r6, r3
 800fa7a:	0031      	movs	r1, r6
 800fa7c:	0028      	movs	r0, r5
 800fa7e:	f000 fecb 	bl	8010818 <__any_on>
 800fa82:	1e04      	subs	r4, r0, #0
 800fa84:	d016      	beq.n	800fab4 <__gethex+0x1d4>
 800fa86:	2401      	movs	r4, #1
 800fa88:	231f      	movs	r3, #31
 800fa8a:	0020      	movs	r0, r4
 800fa8c:	1e72      	subs	r2, r6, #1
 800fa8e:	4013      	ands	r3, r2
 800fa90:	4098      	lsls	r0, r3
 800fa92:	0003      	movs	r3, r0
 800fa94:	1151      	asrs	r1, r2, #5
 800fa96:	9802      	ldr	r0, [sp, #8]
 800fa98:	0089      	lsls	r1, r1, #2
 800fa9a:	5809      	ldr	r1, [r1, r0]
 800fa9c:	4219      	tst	r1, r3
 800fa9e:	d009      	beq.n	800fab4 <__gethex+0x1d4>
 800faa0:	42a2      	cmp	r2, r4
 800faa2:	dd06      	ble.n	800fab2 <__gethex+0x1d2>
 800faa4:	0028      	movs	r0, r5
 800faa6:	1eb1      	subs	r1, r6, #2
 800faa8:	f000 feb6 	bl	8010818 <__any_on>
 800faac:	3402      	adds	r4, #2
 800faae:	2800      	cmp	r0, #0
 800fab0:	d100      	bne.n	800fab4 <__gethex+0x1d4>
 800fab2:	2402      	movs	r4, #2
 800fab4:	0031      	movs	r1, r6
 800fab6:	0028      	movs	r0, r5
 800fab8:	f7ff fea8 	bl	800f80c <rshift>
 800fabc:	19bf      	adds	r7, r7, r6
 800fabe:	9b01      	ldr	r3, [sp, #4]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	42bb      	cmp	r3, r7
 800fac4:	da3a      	bge.n	800fb3c <__gethex+0x25c>
 800fac6:	0029      	movs	r1, r5
 800fac8:	9803      	ldr	r0, [sp, #12]
 800faca:	f000 fa51 	bl	800ff70 <_Bfree>
 800face:	2300      	movs	r3, #0
 800fad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fad2:	26a3      	movs	r6, #163	; 0xa3
 800fad4:	6013      	str	r3, [r2, #0]
 800fad6:	e78c      	b.n	800f9f2 <__gethex+0x112>
 800fad8:	3c01      	subs	r4, #1
 800fada:	7823      	ldrb	r3, [r4, #0]
 800fadc:	2b2e      	cmp	r3, #46	; 0x2e
 800fade:	d012      	beq.n	800fb06 <__gethex+0x226>
 800fae0:	9b04      	ldr	r3, [sp, #16]
 800fae2:	2b20      	cmp	r3, #32
 800fae4:	d104      	bne.n	800faf0 <__gethex+0x210>
 800fae6:	9b05      	ldr	r3, [sp, #20]
 800fae8:	c340      	stmia	r3!, {r6}
 800faea:	2600      	movs	r6, #0
 800faec:	9305      	str	r3, [sp, #20]
 800faee:	9604      	str	r6, [sp, #16]
 800faf0:	7820      	ldrb	r0, [r4, #0]
 800faf2:	f7ff fee0 	bl	800f8b6 <__hexdig_fun>
 800faf6:	230f      	movs	r3, #15
 800faf8:	4018      	ands	r0, r3
 800fafa:	9b04      	ldr	r3, [sp, #16]
 800fafc:	4098      	lsls	r0, r3
 800fafe:	3304      	adds	r3, #4
 800fb00:	4306      	orrs	r6, r0
 800fb02:	9304      	str	r3, [sp, #16]
 800fb04:	e7a5      	b.n	800fa52 <__gethex+0x172>
 800fb06:	9b00      	ldr	r3, [sp, #0]
 800fb08:	42a3      	cmp	r3, r4
 800fb0a:	d8e9      	bhi.n	800fae0 <__gethex+0x200>
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	0020      	movs	r0, r4
 800fb10:	4927      	ldr	r1, [pc, #156]	; (800fbb0 <__gethex+0x2d0>)
 800fb12:	f7fe fdb2 	bl	800e67a <strncmp>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d1e2      	bne.n	800fae0 <__gethex+0x200>
 800fb1a:	e79a      	b.n	800fa52 <__gethex+0x172>
 800fb1c:	9b00      	ldr	r3, [sp, #0]
 800fb1e:	2400      	movs	r4, #0
 800fb20:	429e      	cmp	r6, r3
 800fb22:	dacc      	bge.n	800fabe <__gethex+0x1de>
 800fb24:	1b9e      	subs	r6, r3, r6
 800fb26:	0029      	movs	r1, r5
 800fb28:	0032      	movs	r2, r6
 800fb2a:	9803      	ldr	r0, [sp, #12]
 800fb2c:	f000 fc40 	bl	80103b0 <__lshift>
 800fb30:	0003      	movs	r3, r0
 800fb32:	3314      	adds	r3, #20
 800fb34:	0005      	movs	r5, r0
 800fb36:	1bbf      	subs	r7, r7, r6
 800fb38:	9302      	str	r3, [sp, #8]
 800fb3a:	e7c0      	b.n	800fabe <__gethex+0x1de>
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	685e      	ldr	r6, [r3, #4]
 800fb40:	42be      	cmp	r6, r7
 800fb42:	dd70      	ble.n	800fc26 <__gethex+0x346>
 800fb44:	9b00      	ldr	r3, [sp, #0]
 800fb46:	1bf6      	subs	r6, r6, r7
 800fb48:	42b3      	cmp	r3, r6
 800fb4a:	dc37      	bgt.n	800fbbc <__gethex+0x2dc>
 800fb4c:	9b01      	ldr	r3, [sp, #4]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	2b02      	cmp	r3, #2
 800fb52:	d024      	beq.n	800fb9e <__gethex+0x2be>
 800fb54:	2b03      	cmp	r3, #3
 800fb56:	d026      	beq.n	800fba6 <__gethex+0x2c6>
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d117      	bne.n	800fb8c <__gethex+0x2ac>
 800fb5c:	9b00      	ldr	r3, [sp, #0]
 800fb5e:	42b3      	cmp	r3, r6
 800fb60:	d114      	bne.n	800fb8c <__gethex+0x2ac>
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d10b      	bne.n	800fb7e <__gethex+0x29e>
 800fb66:	9b01      	ldr	r3, [sp, #4]
 800fb68:	9a07      	ldr	r2, [sp, #28]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	2662      	movs	r6, #98	; 0x62
 800fb6e:	6013      	str	r3, [r2, #0]
 800fb70:	2301      	movs	r3, #1
 800fb72:	9a02      	ldr	r2, [sp, #8]
 800fb74:	612b      	str	r3, [r5, #16]
 800fb76:	6013      	str	r3, [r2, #0]
 800fb78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb7a:	601d      	str	r5, [r3, #0]
 800fb7c:	e739      	b.n	800f9f2 <__gethex+0x112>
 800fb7e:	9900      	ldr	r1, [sp, #0]
 800fb80:	0028      	movs	r0, r5
 800fb82:	3901      	subs	r1, #1
 800fb84:	f000 fe48 	bl	8010818 <__any_on>
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d1ec      	bne.n	800fb66 <__gethex+0x286>
 800fb8c:	0029      	movs	r1, r5
 800fb8e:	9803      	ldr	r0, [sp, #12]
 800fb90:	f000 f9ee 	bl	800ff70 <_Bfree>
 800fb94:	2300      	movs	r3, #0
 800fb96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb98:	2650      	movs	r6, #80	; 0x50
 800fb9a:	6013      	str	r3, [r2, #0]
 800fb9c:	e729      	b.n	800f9f2 <__gethex+0x112>
 800fb9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d1f3      	bne.n	800fb8c <__gethex+0x2ac>
 800fba4:	e7df      	b.n	800fb66 <__gethex+0x286>
 800fba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d1dc      	bne.n	800fb66 <__gethex+0x286>
 800fbac:	e7ee      	b.n	800fb8c <__gethex+0x2ac>
 800fbae:	46c0      	nop			; (mov r8, r8)
 800fbb0:	08013570 	.word	0x08013570
 800fbb4:	0801381c 	.word	0x0801381c
 800fbb8:	0801382d 	.word	0x0801382d
 800fbbc:	1e77      	subs	r7, r6, #1
 800fbbe:	2c00      	cmp	r4, #0
 800fbc0:	d12f      	bne.n	800fc22 <__gethex+0x342>
 800fbc2:	2f00      	cmp	r7, #0
 800fbc4:	d004      	beq.n	800fbd0 <__gethex+0x2f0>
 800fbc6:	0039      	movs	r1, r7
 800fbc8:	0028      	movs	r0, r5
 800fbca:	f000 fe25 	bl	8010818 <__any_on>
 800fbce:	0004      	movs	r4, r0
 800fbd0:	231f      	movs	r3, #31
 800fbd2:	117a      	asrs	r2, r7, #5
 800fbd4:	401f      	ands	r7, r3
 800fbd6:	3b1e      	subs	r3, #30
 800fbd8:	40bb      	lsls	r3, r7
 800fbda:	9902      	ldr	r1, [sp, #8]
 800fbdc:	0092      	lsls	r2, r2, #2
 800fbde:	5852      	ldr	r2, [r2, r1]
 800fbe0:	421a      	tst	r2, r3
 800fbe2:	d001      	beq.n	800fbe8 <__gethex+0x308>
 800fbe4:	2302      	movs	r3, #2
 800fbe6:	431c      	orrs	r4, r3
 800fbe8:	9b00      	ldr	r3, [sp, #0]
 800fbea:	0031      	movs	r1, r6
 800fbec:	1b9b      	subs	r3, r3, r6
 800fbee:	2602      	movs	r6, #2
 800fbf0:	0028      	movs	r0, r5
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	f7ff fe0a 	bl	800f80c <rshift>
 800fbf8:	9b01      	ldr	r3, [sp, #4]
 800fbfa:	685f      	ldr	r7, [r3, #4]
 800fbfc:	2c00      	cmp	r4, #0
 800fbfe:	d041      	beq.n	800fc84 <__gethex+0x3a4>
 800fc00:	9b01      	ldr	r3, [sp, #4]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	d010      	beq.n	800fc2a <__gethex+0x34a>
 800fc08:	2b03      	cmp	r3, #3
 800fc0a:	d012      	beq.n	800fc32 <__gethex+0x352>
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d106      	bne.n	800fc1e <__gethex+0x33e>
 800fc10:	07a2      	lsls	r2, r4, #30
 800fc12:	d504      	bpl.n	800fc1e <__gethex+0x33e>
 800fc14:	9a02      	ldr	r2, [sp, #8]
 800fc16:	6812      	ldr	r2, [r2, #0]
 800fc18:	4314      	orrs	r4, r2
 800fc1a:	421c      	tst	r4, r3
 800fc1c:	d10c      	bne.n	800fc38 <__gethex+0x358>
 800fc1e:	2310      	movs	r3, #16
 800fc20:	e02f      	b.n	800fc82 <__gethex+0x3a2>
 800fc22:	2401      	movs	r4, #1
 800fc24:	e7d4      	b.n	800fbd0 <__gethex+0x2f0>
 800fc26:	2601      	movs	r6, #1
 800fc28:	e7e8      	b.n	800fbfc <__gethex+0x31c>
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc2e:	1a9b      	subs	r3, r3, r2
 800fc30:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d0f2      	beq.n	800fc1e <__gethex+0x33e>
 800fc38:	692b      	ldr	r3, [r5, #16]
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	9302      	str	r3, [sp, #8]
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	9304      	str	r3, [sp, #16]
 800fc42:	002b      	movs	r3, r5
 800fc44:	9a04      	ldr	r2, [sp, #16]
 800fc46:	3314      	adds	r3, #20
 800fc48:	1899      	adds	r1, r3, r2
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	1c54      	adds	r4, r2, #1
 800fc4e:	d01e      	beq.n	800fc8e <__gethex+0x3ae>
 800fc50:	3201      	adds	r2, #1
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	002b      	movs	r3, r5
 800fc56:	3314      	adds	r3, #20
 800fc58:	2e02      	cmp	r6, #2
 800fc5a:	d141      	bne.n	800fce0 <__gethex+0x400>
 800fc5c:	9a01      	ldr	r2, [sp, #4]
 800fc5e:	9900      	ldr	r1, [sp, #0]
 800fc60:	6812      	ldr	r2, [r2, #0]
 800fc62:	3a01      	subs	r2, #1
 800fc64:	428a      	cmp	r2, r1
 800fc66:	d10b      	bne.n	800fc80 <__gethex+0x3a0>
 800fc68:	221f      	movs	r2, #31
 800fc6a:	9800      	ldr	r0, [sp, #0]
 800fc6c:	1149      	asrs	r1, r1, #5
 800fc6e:	4002      	ands	r2, r0
 800fc70:	2001      	movs	r0, #1
 800fc72:	0004      	movs	r4, r0
 800fc74:	4094      	lsls	r4, r2
 800fc76:	0089      	lsls	r1, r1, #2
 800fc78:	58cb      	ldr	r3, [r1, r3]
 800fc7a:	4223      	tst	r3, r4
 800fc7c:	d000      	beq.n	800fc80 <__gethex+0x3a0>
 800fc7e:	2601      	movs	r6, #1
 800fc80:	2320      	movs	r3, #32
 800fc82:	431e      	orrs	r6, r3
 800fc84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc86:	601d      	str	r5, [r3, #0]
 800fc88:	9b07      	ldr	r3, [sp, #28]
 800fc8a:	601f      	str	r7, [r3, #0]
 800fc8c:	e6b1      	b.n	800f9f2 <__gethex+0x112>
 800fc8e:	c301      	stmia	r3!, {r0}
 800fc90:	4299      	cmp	r1, r3
 800fc92:	d8da      	bhi.n	800fc4a <__gethex+0x36a>
 800fc94:	68ab      	ldr	r3, [r5, #8]
 800fc96:	9a02      	ldr	r2, [sp, #8]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	db18      	blt.n	800fcce <__gethex+0x3ee>
 800fc9c:	6869      	ldr	r1, [r5, #4]
 800fc9e:	9803      	ldr	r0, [sp, #12]
 800fca0:	3101      	adds	r1, #1
 800fca2:	f000 f921 	bl	800fee8 <_Balloc>
 800fca6:	1e04      	subs	r4, r0, #0
 800fca8:	d104      	bne.n	800fcb4 <__gethex+0x3d4>
 800fcaa:	0022      	movs	r2, r4
 800fcac:	2184      	movs	r1, #132	; 0x84
 800fcae:	4b1c      	ldr	r3, [pc, #112]	; (800fd20 <__gethex+0x440>)
 800fcb0:	481c      	ldr	r0, [pc, #112]	; (800fd24 <__gethex+0x444>)
 800fcb2:	e6c2      	b.n	800fa3a <__gethex+0x15a>
 800fcb4:	0029      	movs	r1, r5
 800fcb6:	692a      	ldr	r2, [r5, #16]
 800fcb8:	310c      	adds	r1, #12
 800fcba:	3202      	adds	r2, #2
 800fcbc:	0092      	lsls	r2, r2, #2
 800fcbe:	300c      	adds	r0, #12
 800fcc0:	f7fe fe8a 	bl	800e9d8 <memcpy>
 800fcc4:	0029      	movs	r1, r5
 800fcc6:	9803      	ldr	r0, [sp, #12]
 800fcc8:	f000 f952 	bl	800ff70 <_Bfree>
 800fccc:	0025      	movs	r5, r4
 800fcce:	692b      	ldr	r3, [r5, #16]
 800fcd0:	1c5a      	adds	r2, r3, #1
 800fcd2:	612a      	str	r2, [r5, #16]
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	009b      	lsls	r3, r3, #2
 800fcda:	18eb      	adds	r3, r5, r3
 800fcdc:	605a      	str	r2, [r3, #4]
 800fcde:	e7b9      	b.n	800fc54 <__gethex+0x374>
 800fce0:	692a      	ldr	r2, [r5, #16]
 800fce2:	9902      	ldr	r1, [sp, #8]
 800fce4:	428a      	cmp	r2, r1
 800fce6:	dd09      	ble.n	800fcfc <__gethex+0x41c>
 800fce8:	2101      	movs	r1, #1
 800fcea:	0028      	movs	r0, r5
 800fcec:	f7ff fd8e 	bl	800f80c <rshift>
 800fcf0:	9b01      	ldr	r3, [sp, #4]
 800fcf2:	3701      	adds	r7, #1
 800fcf4:	689b      	ldr	r3, [r3, #8]
 800fcf6:	42bb      	cmp	r3, r7
 800fcf8:	dac1      	bge.n	800fc7e <__gethex+0x39e>
 800fcfa:	e6e4      	b.n	800fac6 <__gethex+0x1e6>
 800fcfc:	221f      	movs	r2, #31
 800fcfe:	9c00      	ldr	r4, [sp, #0]
 800fd00:	9900      	ldr	r1, [sp, #0]
 800fd02:	2601      	movs	r6, #1
 800fd04:	4014      	ands	r4, r2
 800fd06:	4211      	tst	r1, r2
 800fd08:	d0ba      	beq.n	800fc80 <__gethex+0x3a0>
 800fd0a:	9a04      	ldr	r2, [sp, #16]
 800fd0c:	189b      	adds	r3, r3, r2
 800fd0e:	3b04      	subs	r3, #4
 800fd10:	6818      	ldr	r0, [r3, #0]
 800fd12:	f000 f9e1 	bl	80100d8 <__hi0bits>
 800fd16:	2320      	movs	r3, #32
 800fd18:	1b1b      	subs	r3, r3, r4
 800fd1a:	4298      	cmp	r0, r3
 800fd1c:	dbe4      	blt.n	800fce8 <__gethex+0x408>
 800fd1e:	e7af      	b.n	800fc80 <__gethex+0x3a0>
 800fd20:	0801381c 	.word	0x0801381c
 800fd24:	0801382d 	.word	0x0801382d

0800fd28 <L_shift>:
 800fd28:	2308      	movs	r3, #8
 800fd2a:	b570      	push	{r4, r5, r6, lr}
 800fd2c:	2520      	movs	r5, #32
 800fd2e:	1a9a      	subs	r2, r3, r2
 800fd30:	0092      	lsls	r2, r2, #2
 800fd32:	1aad      	subs	r5, r5, r2
 800fd34:	6843      	ldr	r3, [r0, #4]
 800fd36:	6804      	ldr	r4, [r0, #0]
 800fd38:	001e      	movs	r6, r3
 800fd3a:	40ae      	lsls	r6, r5
 800fd3c:	40d3      	lsrs	r3, r2
 800fd3e:	4334      	orrs	r4, r6
 800fd40:	6004      	str	r4, [r0, #0]
 800fd42:	6043      	str	r3, [r0, #4]
 800fd44:	3004      	adds	r0, #4
 800fd46:	4288      	cmp	r0, r1
 800fd48:	d3f4      	bcc.n	800fd34 <L_shift+0xc>
 800fd4a:	bd70      	pop	{r4, r5, r6, pc}

0800fd4c <__match>:
 800fd4c:	b530      	push	{r4, r5, lr}
 800fd4e:	6803      	ldr	r3, [r0, #0]
 800fd50:	780c      	ldrb	r4, [r1, #0]
 800fd52:	3301      	adds	r3, #1
 800fd54:	2c00      	cmp	r4, #0
 800fd56:	d102      	bne.n	800fd5e <__match+0x12>
 800fd58:	6003      	str	r3, [r0, #0]
 800fd5a:	2001      	movs	r0, #1
 800fd5c:	bd30      	pop	{r4, r5, pc}
 800fd5e:	781a      	ldrb	r2, [r3, #0]
 800fd60:	0015      	movs	r5, r2
 800fd62:	3d41      	subs	r5, #65	; 0x41
 800fd64:	2d19      	cmp	r5, #25
 800fd66:	d800      	bhi.n	800fd6a <__match+0x1e>
 800fd68:	3220      	adds	r2, #32
 800fd6a:	3101      	adds	r1, #1
 800fd6c:	42a2      	cmp	r2, r4
 800fd6e:	d0ef      	beq.n	800fd50 <__match+0x4>
 800fd70:	2000      	movs	r0, #0
 800fd72:	e7f3      	b.n	800fd5c <__match+0x10>

0800fd74 <__hexnan>:
 800fd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd76:	680b      	ldr	r3, [r1, #0]
 800fd78:	b08b      	sub	sp, #44	; 0x2c
 800fd7a:	9201      	str	r2, [sp, #4]
 800fd7c:	9901      	ldr	r1, [sp, #4]
 800fd7e:	115a      	asrs	r2, r3, #5
 800fd80:	0092      	lsls	r2, r2, #2
 800fd82:	188a      	adds	r2, r1, r2
 800fd84:	9202      	str	r2, [sp, #8]
 800fd86:	0019      	movs	r1, r3
 800fd88:	221f      	movs	r2, #31
 800fd8a:	4011      	ands	r1, r2
 800fd8c:	9008      	str	r0, [sp, #32]
 800fd8e:	9106      	str	r1, [sp, #24]
 800fd90:	4213      	tst	r3, r2
 800fd92:	d002      	beq.n	800fd9a <__hexnan+0x26>
 800fd94:	9b02      	ldr	r3, [sp, #8]
 800fd96:	3304      	adds	r3, #4
 800fd98:	9302      	str	r3, [sp, #8]
 800fd9a:	9b02      	ldr	r3, [sp, #8]
 800fd9c:	2500      	movs	r5, #0
 800fd9e:	1f1f      	subs	r7, r3, #4
 800fda0:	003e      	movs	r6, r7
 800fda2:	003c      	movs	r4, r7
 800fda4:	9b08      	ldr	r3, [sp, #32]
 800fda6:	603d      	str	r5, [r7, #0]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	9507      	str	r5, [sp, #28]
 800fdac:	9305      	str	r3, [sp, #20]
 800fdae:	9503      	str	r5, [sp, #12]
 800fdb0:	9b05      	ldr	r3, [sp, #20]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdb6:	9b05      	ldr	r3, [sp, #20]
 800fdb8:	785b      	ldrb	r3, [r3, #1]
 800fdba:	9304      	str	r3, [sp, #16]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d028      	beq.n	800fe12 <__hexnan+0x9e>
 800fdc0:	9804      	ldr	r0, [sp, #16]
 800fdc2:	f7ff fd78 	bl	800f8b6 <__hexdig_fun>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d154      	bne.n	800fe74 <__hexnan+0x100>
 800fdca:	9b04      	ldr	r3, [sp, #16]
 800fdcc:	2b20      	cmp	r3, #32
 800fdce:	d819      	bhi.n	800fe04 <__hexnan+0x90>
 800fdd0:	9b03      	ldr	r3, [sp, #12]
 800fdd2:	9a07      	ldr	r2, [sp, #28]
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	dd12      	ble.n	800fdfe <__hexnan+0x8a>
 800fdd8:	42b4      	cmp	r4, r6
 800fdda:	d206      	bcs.n	800fdea <__hexnan+0x76>
 800fddc:	2d07      	cmp	r5, #7
 800fdde:	dc04      	bgt.n	800fdea <__hexnan+0x76>
 800fde0:	002a      	movs	r2, r5
 800fde2:	0031      	movs	r1, r6
 800fde4:	0020      	movs	r0, r4
 800fde6:	f7ff ff9f 	bl	800fd28 <L_shift>
 800fdea:	9b01      	ldr	r3, [sp, #4]
 800fdec:	2508      	movs	r5, #8
 800fdee:	429c      	cmp	r4, r3
 800fdf0:	d905      	bls.n	800fdfe <__hexnan+0x8a>
 800fdf2:	1f26      	subs	r6, r4, #4
 800fdf4:	2500      	movs	r5, #0
 800fdf6:	0034      	movs	r4, r6
 800fdf8:	9b03      	ldr	r3, [sp, #12]
 800fdfa:	6035      	str	r5, [r6, #0]
 800fdfc:	9307      	str	r3, [sp, #28]
 800fdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe00:	9305      	str	r3, [sp, #20]
 800fe02:	e7d5      	b.n	800fdb0 <__hexnan+0x3c>
 800fe04:	9b04      	ldr	r3, [sp, #16]
 800fe06:	2b29      	cmp	r3, #41	; 0x29
 800fe08:	d159      	bne.n	800febe <__hexnan+0x14a>
 800fe0a:	9b05      	ldr	r3, [sp, #20]
 800fe0c:	9a08      	ldr	r2, [sp, #32]
 800fe0e:	3302      	adds	r3, #2
 800fe10:	6013      	str	r3, [r2, #0]
 800fe12:	9b03      	ldr	r3, [sp, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d052      	beq.n	800febe <__hexnan+0x14a>
 800fe18:	42b4      	cmp	r4, r6
 800fe1a:	d206      	bcs.n	800fe2a <__hexnan+0xb6>
 800fe1c:	2d07      	cmp	r5, #7
 800fe1e:	dc04      	bgt.n	800fe2a <__hexnan+0xb6>
 800fe20:	002a      	movs	r2, r5
 800fe22:	0031      	movs	r1, r6
 800fe24:	0020      	movs	r0, r4
 800fe26:	f7ff ff7f 	bl	800fd28 <L_shift>
 800fe2a:	9b01      	ldr	r3, [sp, #4]
 800fe2c:	429c      	cmp	r4, r3
 800fe2e:	d935      	bls.n	800fe9c <__hexnan+0x128>
 800fe30:	001a      	movs	r2, r3
 800fe32:	0023      	movs	r3, r4
 800fe34:	cb02      	ldmia	r3!, {r1}
 800fe36:	c202      	stmia	r2!, {r1}
 800fe38:	429f      	cmp	r7, r3
 800fe3a:	d2fb      	bcs.n	800fe34 <__hexnan+0xc0>
 800fe3c:	9b02      	ldr	r3, [sp, #8]
 800fe3e:	1c62      	adds	r2, r4, #1
 800fe40:	1ed9      	subs	r1, r3, #3
 800fe42:	2304      	movs	r3, #4
 800fe44:	4291      	cmp	r1, r2
 800fe46:	d305      	bcc.n	800fe54 <__hexnan+0xe0>
 800fe48:	9b02      	ldr	r3, [sp, #8]
 800fe4a:	3b04      	subs	r3, #4
 800fe4c:	1b1b      	subs	r3, r3, r4
 800fe4e:	089b      	lsrs	r3, r3, #2
 800fe50:	3301      	adds	r3, #1
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	9a01      	ldr	r2, [sp, #4]
 800fe56:	18d3      	adds	r3, r2, r3
 800fe58:	2200      	movs	r2, #0
 800fe5a:	c304      	stmia	r3!, {r2}
 800fe5c:	429f      	cmp	r7, r3
 800fe5e:	d2fc      	bcs.n	800fe5a <__hexnan+0xe6>
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d104      	bne.n	800fe70 <__hexnan+0xfc>
 800fe66:	9b01      	ldr	r3, [sp, #4]
 800fe68:	429f      	cmp	r7, r3
 800fe6a:	d126      	bne.n	800feba <__hexnan+0x146>
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	603b      	str	r3, [r7, #0]
 800fe70:	2005      	movs	r0, #5
 800fe72:	e025      	b.n	800fec0 <__hexnan+0x14c>
 800fe74:	9b03      	ldr	r3, [sp, #12]
 800fe76:	3501      	adds	r5, #1
 800fe78:	3301      	adds	r3, #1
 800fe7a:	9303      	str	r3, [sp, #12]
 800fe7c:	2d08      	cmp	r5, #8
 800fe7e:	dd06      	ble.n	800fe8e <__hexnan+0x11a>
 800fe80:	9b01      	ldr	r3, [sp, #4]
 800fe82:	429c      	cmp	r4, r3
 800fe84:	d9bb      	bls.n	800fdfe <__hexnan+0x8a>
 800fe86:	2300      	movs	r3, #0
 800fe88:	2501      	movs	r5, #1
 800fe8a:	3c04      	subs	r4, #4
 800fe8c:	6023      	str	r3, [r4, #0]
 800fe8e:	220f      	movs	r2, #15
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	4010      	ands	r0, r2
 800fe94:	011b      	lsls	r3, r3, #4
 800fe96:	4303      	orrs	r3, r0
 800fe98:	6023      	str	r3, [r4, #0]
 800fe9a:	e7b0      	b.n	800fdfe <__hexnan+0x8a>
 800fe9c:	9b06      	ldr	r3, [sp, #24]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d0de      	beq.n	800fe60 <__hexnan+0xec>
 800fea2:	2320      	movs	r3, #32
 800fea4:	9a06      	ldr	r2, [sp, #24]
 800fea6:	9902      	ldr	r1, [sp, #8]
 800fea8:	1a9b      	subs	r3, r3, r2
 800feaa:	2201      	movs	r2, #1
 800feac:	4252      	negs	r2, r2
 800feae:	40da      	lsrs	r2, r3
 800feb0:	3904      	subs	r1, #4
 800feb2:	680b      	ldr	r3, [r1, #0]
 800feb4:	4013      	ands	r3, r2
 800feb6:	600b      	str	r3, [r1, #0]
 800feb8:	e7d2      	b.n	800fe60 <__hexnan+0xec>
 800feba:	3f04      	subs	r7, #4
 800febc:	e7d0      	b.n	800fe60 <__hexnan+0xec>
 800febe:	2004      	movs	r0, #4
 800fec0:	b00b      	add	sp, #44	; 0x2c
 800fec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fec4 <__ascii_mbtowc>:
 800fec4:	b082      	sub	sp, #8
 800fec6:	2900      	cmp	r1, #0
 800fec8:	d100      	bne.n	800fecc <__ascii_mbtowc+0x8>
 800feca:	a901      	add	r1, sp, #4
 800fecc:	1e10      	subs	r0, r2, #0
 800fece:	d006      	beq.n	800fede <__ascii_mbtowc+0x1a>
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d006      	beq.n	800fee2 <__ascii_mbtowc+0x1e>
 800fed4:	7813      	ldrb	r3, [r2, #0]
 800fed6:	600b      	str	r3, [r1, #0]
 800fed8:	7810      	ldrb	r0, [r2, #0]
 800feda:	1e43      	subs	r3, r0, #1
 800fedc:	4198      	sbcs	r0, r3
 800fede:	b002      	add	sp, #8
 800fee0:	4770      	bx	lr
 800fee2:	2002      	movs	r0, #2
 800fee4:	4240      	negs	r0, r0
 800fee6:	e7fa      	b.n	800fede <__ascii_mbtowc+0x1a>

0800fee8 <_Balloc>:
 800fee8:	b570      	push	{r4, r5, r6, lr}
 800feea:	69c5      	ldr	r5, [r0, #28]
 800feec:	0006      	movs	r6, r0
 800feee:	000c      	movs	r4, r1
 800fef0:	2d00      	cmp	r5, #0
 800fef2:	d10e      	bne.n	800ff12 <_Balloc+0x2a>
 800fef4:	2010      	movs	r0, #16
 800fef6:	f7fc fc27 	bl	800c748 <malloc>
 800fefa:	1e02      	subs	r2, r0, #0
 800fefc:	61f0      	str	r0, [r6, #28]
 800fefe:	d104      	bne.n	800ff0a <_Balloc+0x22>
 800ff00:	216b      	movs	r1, #107	; 0x6b
 800ff02:	4b19      	ldr	r3, [pc, #100]	; (800ff68 <_Balloc+0x80>)
 800ff04:	4819      	ldr	r0, [pc, #100]	; (800ff6c <_Balloc+0x84>)
 800ff06:	f7fe fd7b 	bl	800ea00 <__assert_func>
 800ff0a:	6045      	str	r5, [r0, #4]
 800ff0c:	6085      	str	r5, [r0, #8]
 800ff0e:	6005      	str	r5, [r0, #0]
 800ff10:	60c5      	str	r5, [r0, #12]
 800ff12:	69f5      	ldr	r5, [r6, #28]
 800ff14:	68eb      	ldr	r3, [r5, #12]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d013      	beq.n	800ff42 <_Balloc+0x5a>
 800ff1a:	69f3      	ldr	r3, [r6, #28]
 800ff1c:	00a2      	lsls	r2, r4, #2
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	189b      	adds	r3, r3, r2
 800ff22:	6818      	ldr	r0, [r3, #0]
 800ff24:	2800      	cmp	r0, #0
 800ff26:	d118      	bne.n	800ff5a <_Balloc+0x72>
 800ff28:	2101      	movs	r1, #1
 800ff2a:	000d      	movs	r5, r1
 800ff2c:	40a5      	lsls	r5, r4
 800ff2e:	1d6a      	adds	r2, r5, #5
 800ff30:	0030      	movs	r0, r6
 800ff32:	0092      	lsls	r2, r2, #2
 800ff34:	f000 fee2 	bl	8010cfc <_calloc_r>
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	d00c      	beq.n	800ff56 <_Balloc+0x6e>
 800ff3c:	6044      	str	r4, [r0, #4]
 800ff3e:	6085      	str	r5, [r0, #8]
 800ff40:	e00d      	b.n	800ff5e <_Balloc+0x76>
 800ff42:	2221      	movs	r2, #33	; 0x21
 800ff44:	2104      	movs	r1, #4
 800ff46:	0030      	movs	r0, r6
 800ff48:	f000 fed8 	bl	8010cfc <_calloc_r>
 800ff4c:	69f3      	ldr	r3, [r6, #28]
 800ff4e:	60e8      	str	r0, [r5, #12]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1e1      	bne.n	800ff1a <_Balloc+0x32>
 800ff56:	2000      	movs	r0, #0
 800ff58:	bd70      	pop	{r4, r5, r6, pc}
 800ff5a:	6802      	ldr	r2, [r0, #0]
 800ff5c:	601a      	str	r2, [r3, #0]
 800ff5e:	2300      	movs	r3, #0
 800ff60:	6103      	str	r3, [r0, #16]
 800ff62:	60c3      	str	r3, [r0, #12]
 800ff64:	e7f8      	b.n	800ff58 <_Balloc+0x70>
 800ff66:	46c0      	nop			; (mov r8, r8)
 800ff68:	08013702 	.word	0x08013702
 800ff6c:	0801388d 	.word	0x0801388d

0800ff70 <_Bfree>:
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	69c6      	ldr	r6, [r0, #28]
 800ff74:	0005      	movs	r5, r0
 800ff76:	000c      	movs	r4, r1
 800ff78:	2e00      	cmp	r6, #0
 800ff7a:	d10e      	bne.n	800ff9a <_Bfree+0x2a>
 800ff7c:	2010      	movs	r0, #16
 800ff7e:	f7fc fbe3 	bl	800c748 <malloc>
 800ff82:	1e02      	subs	r2, r0, #0
 800ff84:	61e8      	str	r0, [r5, #28]
 800ff86:	d104      	bne.n	800ff92 <_Bfree+0x22>
 800ff88:	218f      	movs	r1, #143	; 0x8f
 800ff8a:	4b09      	ldr	r3, [pc, #36]	; (800ffb0 <_Bfree+0x40>)
 800ff8c:	4809      	ldr	r0, [pc, #36]	; (800ffb4 <_Bfree+0x44>)
 800ff8e:	f7fe fd37 	bl	800ea00 <__assert_func>
 800ff92:	6046      	str	r6, [r0, #4]
 800ff94:	6086      	str	r6, [r0, #8]
 800ff96:	6006      	str	r6, [r0, #0]
 800ff98:	60c6      	str	r6, [r0, #12]
 800ff9a:	2c00      	cmp	r4, #0
 800ff9c:	d007      	beq.n	800ffae <_Bfree+0x3e>
 800ff9e:	69eb      	ldr	r3, [r5, #28]
 800ffa0:	6862      	ldr	r2, [r4, #4]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	0092      	lsls	r2, r2, #2
 800ffa6:	189b      	adds	r3, r3, r2
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	6022      	str	r2, [r4, #0]
 800ffac:	601c      	str	r4, [r3, #0]
 800ffae:	bd70      	pop	{r4, r5, r6, pc}
 800ffb0:	08013702 	.word	0x08013702
 800ffb4:	0801388d 	.word	0x0801388d

0800ffb8 <__multadd>:
 800ffb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffba:	000e      	movs	r6, r1
 800ffbc:	9001      	str	r0, [sp, #4]
 800ffbe:	000c      	movs	r4, r1
 800ffc0:	001d      	movs	r5, r3
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	690f      	ldr	r7, [r1, #16]
 800ffc6:	3614      	adds	r6, #20
 800ffc8:	6833      	ldr	r3, [r6, #0]
 800ffca:	3001      	adds	r0, #1
 800ffcc:	b299      	uxth	r1, r3
 800ffce:	4351      	muls	r1, r2
 800ffd0:	0c1b      	lsrs	r3, r3, #16
 800ffd2:	4353      	muls	r3, r2
 800ffd4:	1949      	adds	r1, r1, r5
 800ffd6:	0c0d      	lsrs	r5, r1, #16
 800ffd8:	195b      	adds	r3, r3, r5
 800ffda:	0c1d      	lsrs	r5, r3, #16
 800ffdc:	b289      	uxth	r1, r1
 800ffde:	041b      	lsls	r3, r3, #16
 800ffe0:	185b      	adds	r3, r3, r1
 800ffe2:	c608      	stmia	r6!, {r3}
 800ffe4:	4287      	cmp	r7, r0
 800ffe6:	dcef      	bgt.n	800ffc8 <__multadd+0x10>
 800ffe8:	2d00      	cmp	r5, #0
 800ffea:	d022      	beq.n	8010032 <__multadd+0x7a>
 800ffec:	68a3      	ldr	r3, [r4, #8]
 800ffee:	42bb      	cmp	r3, r7
 800fff0:	dc19      	bgt.n	8010026 <__multadd+0x6e>
 800fff2:	6861      	ldr	r1, [r4, #4]
 800fff4:	9801      	ldr	r0, [sp, #4]
 800fff6:	3101      	adds	r1, #1
 800fff8:	f7ff ff76 	bl	800fee8 <_Balloc>
 800fffc:	1e06      	subs	r6, r0, #0
 800fffe:	d105      	bne.n	801000c <__multadd+0x54>
 8010000:	0032      	movs	r2, r6
 8010002:	21ba      	movs	r1, #186	; 0xba
 8010004:	4b0c      	ldr	r3, [pc, #48]	; (8010038 <__multadd+0x80>)
 8010006:	480d      	ldr	r0, [pc, #52]	; (801003c <__multadd+0x84>)
 8010008:	f7fe fcfa 	bl	800ea00 <__assert_func>
 801000c:	0021      	movs	r1, r4
 801000e:	6922      	ldr	r2, [r4, #16]
 8010010:	310c      	adds	r1, #12
 8010012:	3202      	adds	r2, #2
 8010014:	0092      	lsls	r2, r2, #2
 8010016:	300c      	adds	r0, #12
 8010018:	f7fe fcde 	bl	800e9d8 <memcpy>
 801001c:	0021      	movs	r1, r4
 801001e:	9801      	ldr	r0, [sp, #4]
 8010020:	f7ff ffa6 	bl	800ff70 <_Bfree>
 8010024:	0034      	movs	r4, r6
 8010026:	1d3b      	adds	r3, r7, #4
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	18e3      	adds	r3, r4, r3
 801002c:	605d      	str	r5, [r3, #4]
 801002e:	1c7b      	adds	r3, r7, #1
 8010030:	6123      	str	r3, [r4, #16]
 8010032:	0020      	movs	r0, r4
 8010034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010036:	46c0      	nop			; (mov r8, r8)
 8010038:	0801381c 	.word	0x0801381c
 801003c:	0801388d 	.word	0x0801388d

08010040 <__s2b>:
 8010040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010042:	0006      	movs	r6, r0
 8010044:	0018      	movs	r0, r3
 8010046:	000c      	movs	r4, r1
 8010048:	3008      	adds	r0, #8
 801004a:	2109      	movs	r1, #9
 801004c:	9301      	str	r3, [sp, #4]
 801004e:	0015      	movs	r5, r2
 8010050:	f7f0 f900 	bl	8000254 <__divsi3>
 8010054:	2301      	movs	r3, #1
 8010056:	2100      	movs	r1, #0
 8010058:	4283      	cmp	r3, r0
 801005a:	db0a      	blt.n	8010072 <__s2b+0x32>
 801005c:	0030      	movs	r0, r6
 801005e:	f7ff ff43 	bl	800fee8 <_Balloc>
 8010062:	1e01      	subs	r1, r0, #0
 8010064:	d108      	bne.n	8010078 <__s2b+0x38>
 8010066:	000a      	movs	r2, r1
 8010068:	4b19      	ldr	r3, [pc, #100]	; (80100d0 <__s2b+0x90>)
 801006a:	481a      	ldr	r0, [pc, #104]	; (80100d4 <__s2b+0x94>)
 801006c:	31d3      	adds	r1, #211	; 0xd3
 801006e:	f7fe fcc7 	bl	800ea00 <__assert_func>
 8010072:	005b      	lsls	r3, r3, #1
 8010074:	3101      	adds	r1, #1
 8010076:	e7ef      	b.n	8010058 <__s2b+0x18>
 8010078:	9b08      	ldr	r3, [sp, #32]
 801007a:	6143      	str	r3, [r0, #20]
 801007c:	2301      	movs	r3, #1
 801007e:	6103      	str	r3, [r0, #16]
 8010080:	2d09      	cmp	r5, #9
 8010082:	dd18      	ble.n	80100b6 <__s2b+0x76>
 8010084:	0023      	movs	r3, r4
 8010086:	3309      	adds	r3, #9
 8010088:	001f      	movs	r7, r3
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	1964      	adds	r4, r4, r5
 801008e:	783b      	ldrb	r3, [r7, #0]
 8010090:	220a      	movs	r2, #10
 8010092:	0030      	movs	r0, r6
 8010094:	3b30      	subs	r3, #48	; 0x30
 8010096:	f7ff ff8f 	bl	800ffb8 <__multadd>
 801009a:	3701      	adds	r7, #1
 801009c:	0001      	movs	r1, r0
 801009e:	42a7      	cmp	r7, r4
 80100a0:	d1f5      	bne.n	801008e <__s2b+0x4e>
 80100a2:	002c      	movs	r4, r5
 80100a4:	9b00      	ldr	r3, [sp, #0]
 80100a6:	3c08      	subs	r4, #8
 80100a8:	191c      	adds	r4, r3, r4
 80100aa:	002f      	movs	r7, r5
 80100ac:	9b01      	ldr	r3, [sp, #4]
 80100ae:	429f      	cmp	r7, r3
 80100b0:	db04      	blt.n	80100bc <__s2b+0x7c>
 80100b2:	0008      	movs	r0, r1
 80100b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80100b6:	2509      	movs	r5, #9
 80100b8:	340a      	adds	r4, #10
 80100ba:	e7f6      	b.n	80100aa <__s2b+0x6a>
 80100bc:	1b63      	subs	r3, r4, r5
 80100be:	5ddb      	ldrb	r3, [r3, r7]
 80100c0:	220a      	movs	r2, #10
 80100c2:	0030      	movs	r0, r6
 80100c4:	3b30      	subs	r3, #48	; 0x30
 80100c6:	f7ff ff77 	bl	800ffb8 <__multadd>
 80100ca:	3701      	adds	r7, #1
 80100cc:	0001      	movs	r1, r0
 80100ce:	e7ed      	b.n	80100ac <__s2b+0x6c>
 80100d0:	0801381c 	.word	0x0801381c
 80100d4:	0801388d 	.word	0x0801388d

080100d8 <__hi0bits>:
 80100d8:	0003      	movs	r3, r0
 80100da:	0c02      	lsrs	r2, r0, #16
 80100dc:	2000      	movs	r0, #0
 80100de:	4282      	cmp	r2, r0
 80100e0:	d101      	bne.n	80100e6 <__hi0bits+0xe>
 80100e2:	041b      	lsls	r3, r3, #16
 80100e4:	3010      	adds	r0, #16
 80100e6:	0e1a      	lsrs	r2, r3, #24
 80100e8:	d101      	bne.n	80100ee <__hi0bits+0x16>
 80100ea:	3008      	adds	r0, #8
 80100ec:	021b      	lsls	r3, r3, #8
 80100ee:	0f1a      	lsrs	r2, r3, #28
 80100f0:	d101      	bne.n	80100f6 <__hi0bits+0x1e>
 80100f2:	3004      	adds	r0, #4
 80100f4:	011b      	lsls	r3, r3, #4
 80100f6:	0f9a      	lsrs	r2, r3, #30
 80100f8:	d101      	bne.n	80100fe <__hi0bits+0x26>
 80100fa:	3002      	adds	r0, #2
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	2b00      	cmp	r3, #0
 8010100:	db03      	blt.n	801010a <__hi0bits+0x32>
 8010102:	3001      	adds	r0, #1
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	d400      	bmi.n	801010a <__hi0bits+0x32>
 8010108:	2020      	movs	r0, #32
 801010a:	4770      	bx	lr

0801010c <__lo0bits>:
 801010c:	6803      	ldr	r3, [r0, #0]
 801010e:	0001      	movs	r1, r0
 8010110:	2207      	movs	r2, #7
 8010112:	0018      	movs	r0, r3
 8010114:	4010      	ands	r0, r2
 8010116:	4213      	tst	r3, r2
 8010118:	d00d      	beq.n	8010136 <__lo0bits+0x2a>
 801011a:	3a06      	subs	r2, #6
 801011c:	2000      	movs	r0, #0
 801011e:	4213      	tst	r3, r2
 8010120:	d105      	bne.n	801012e <__lo0bits+0x22>
 8010122:	3002      	adds	r0, #2
 8010124:	4203      	tst	r3, r0
 8010126:	d003      	beq.n	8010130 <__lo0bits+0x24>
 8010128:	40d3      	lsrs	r3, r2
 801012a:	0010      	movs	r0, r2
 801012c:	600b      	str	r3, [r1, #0]
 801012e:	4770      	bx	lr
 8010130:	089b      	lsrs	r3, r3, #2
 8010132:	600b      	str	r3, [r1, #0]
 8010134:	e7fb      	b.n	801012e <__lo0bits+0x22>
 8010136:	b29a      	uxth	r2, r3
 8010138:	2a00      	cmp	r2, #0
 801013a:	d101      	bne.n	8010140 <__lo0bits+0x34>
 801013c:	2010      	movs	r0, #16
 801013e:	0c1b      	lsrs	r3, r3, #16
 8010140:	b2da      	uxtb	r2, r3
 8010142:	2a00      	cmp	r2, #0
 8010144:	d101      	bne.n	801014a <__lo0bits+0x3e>
 8010146:	3008      	adds	r0, #8
 8010148:	0a1b      	lsrs	r3, r3, #8
 801014a:	071a      	lsls	r2, r3, #28
 801014c:	d101      	bne.n	8010152 <__lo0bits+0x46>
 801014e:	3004      	adds	r0, #4
 8010150:	091b      	lsrs	r3, r3, #4
 8010152:	079a      	lsls	r2, r3, #30
 8010154:	d101      	bne.n	801015a <__lo0bits+0x4e>
 8010156:	3002      	adds	r0, #2
 8010158:	089b      	lsrs	r3, r3, #2
 801015a:	07da      	lsls	r2, r3, #31
 801015c:	d4e9      	bmi.n	8010132 <__lo0bits+0x26>
 801015e:	3001      	adds	r0, #1
 8010160:	085b      	lsrs	r3, r3, #1
 8010162:	d1e6      	bne.n	8010132 <__lo0bits+0x26>
 8010164:	2020      	movs	r0, #32
 8010166:	e7e2      	b.n	801012e <__lo0bits+0x22>

08010168 <__i2b>:
 8010168:	b510      	push	{r4, lr}
 801016a:	000c      	movs	r4, r1
 801016c:	2101      	movs	r1, #1
 801016e:	f7ff febb 	bl	800fee8 <_Balloc>
 8010172:	2800      	cmp	r0, #0
 8010174:	d107      	bne.n	8010186 <__i2b+0x1e>
 8010176:	2146      	movs	r1, #70	; 0x46
 8010178:	4c05      	ldr	r4, [pc, #20]	; (8010190 <__i2b+0x28>)
 801017a:	0002      	movs	r2, r0
 801017c:	4b05      	ldr	r3, [pc, #20]	; (8010194 <__i2b+0x2c>)
 801017e:	0020      	movs	r0, r4
 8010180:	31ff      	adds	r1, #255	; 0xff
 8010182:	f7fe fc3d 	bl	800ea00 <__assert_func>
 8010186:	2301      	movs	r3, #1
 8010188:	6144      	str	r4, [r0, #20]
 801018a:	6103      	str	r3, [r0, #16]
 801018c:	bd10      	pop	{r4, pc}
 801018e:	46c0      	nop			; (mov r8, r8)
 8010190:	0801388d 	.word	0x0801388d
 8010194:	0801381c 	.word	0x0801381c

08010198 <__multiply>:
 8010198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801019a:	0015      	movs	r5, r2
 801019c:	690a      	ldr	r2, [r1, #16]
 801019e:	692b      	ldr	r3, [r5, #16]
 80101a0:	000c      	movs	r4, r1
 80101a2:	b08b      	sub	sp, #44	; 0x2c
 80101a4:	429a      	cmp	r2, r3
 80101a6:	da01      	bge.n	80101ac <__multiply+0x14>
 80101a8:	002c      	movs	r4, r5
 80101aa:	000d      	movs	r5, r1
 80101ac:	6927      	ldr	r7, [r4, #16]
 80101ae:	692e      	ldr	r6, [r5, #16]
 80101b0:	6861      	ldr	r1, [r4, #4]
 80101b2:	19bb      	adds	r3, r7, r6
 80101b4:	9303      	str	r3, [sp, #12]
 80101b6:	68a3      	ldr	r3, [r4, #8]
 80101b8:	19ba      	adds	r2, r7, r6
 80101ba:	4293      	cmp	r3, r2
 80101bc:	da00      	bge.n	80101c0 <__multiply+0x28>
 80101be:	3101      	adds	r1, #1
 80101c0:	f7ff fe92 	bl	800fee8 <_Balloc>
 80101c4:	9002      	str	r0, [sp, #8]
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d106      	bne.n	80101d8 <__multiply+0x40>
 80101ca:	21b1      	movs	r1, #177	; 0xb1
 80101cc:	4b48      	ldr	r3, [pc, #288]	; (80102f0 <__multiply+0x158>)
 80101ce:	4849      	ldr	r0, [pc, #292]	; (80102f4 <__multiply+0x15c>)
 80101d0:	9a02      	ldr	r2, [sp, #8]
 80101d2:	0049      	lsls	r1, r1, #1
 80101d4:	f7fe fc14 	bl	800ea00 <__assert_func>
 80101d8:	9b02      	ldr	r3, [sp, #8]
 80101da:	2200      	movs	r2, #0
 80101dc:	3314      	adds	r3, #20
 80101de:	469c      	mov	ip, r3
 80101e0:	19bb      	adds	r3, r7, r6
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	4463      	add	r3, ip
 80101e6:	9304      	str	r3, [sp, #16]
 80101e8:	4663      	mov	r3, ip
 80101ea:	9904      	ldr	r1, [sp, #16]
 80101ec:	428b      	cmp	r3, r1
 80101ee:	d32a      	bcc.n	8010246 <__multiply+0xae>
 80101f0:	0023      	movs	r3, r4
 80101f2:	00bf      	lsls	r7, r7, #2
 80101f4:	3314      	adds	r3, #20
 80101f6:	3514      	adds	r5, #20
 80101f8:	9308      	str	r3, [sp, #32]
 80101fa:	00b6      	lsls	r6, r6, #2
 80101fc:	19db      	adds	r3, r3, r7
 80101fe:	9305      	str	r3, [sp, #20]
 8010200:	19ab      	adds	r3, r5, r6
 8010202:	9309      	str	r3, [sp, #36]	; 0x24
 8010204:	2304      	movs	r3, #4
 8010206:	9306      	str	r3, [sp, #24]
 8010208:	0023      	movs	r3, r4
 801020a:	9a05      	ldr	r2, [sp, #20]
 801020c:	3315      	adds	r3, #21
 801020e:	9501      	str	r5, [sp, #4]
 8010210:	429a      	cmp	r2, r3
 8010212:	d305      	bcc.n	8010220 <__multiply+0x88>
 8010214:	1b13      	subs	r3, r2, r4
 8010216:	3b15      	subs	r3, #21
 8010218:	089b      	lsrs	r3, r3, #2
 801021a:	3301      	adds	r3, #1
 801021c:	009b      	lsls	r3, r3, #2
 801021e:	9306      	str	r3, [sp, #24]
 8010220:	9b01      	ldr	r3, [sp, #4]
 8010222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010224:	4293      	cmp	r3, r2
 8010226:	d310      	bcc.n	801024a <__multiply+0xb2>
 8010228:	9b03      	ldr	r3, [sp, #12]
 801022a:	2b00      	cmp	r3, #0
 801022c:	dd05      	ble.n	801023a <__multiply+0xa2>
 801022e:	9b04      	ldr	r3, [sp, #16]
 8010230:	3b04      	subs	r3, #4
 8010232:	9304      	str	r3, [sp, #16]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d056      	beq.n	80102e8 <__multiply+0x150>
 801023a:	9b02      	ldr	r3, [sp, #8]
 801023c:	9a03      	ldr	r2, [sp, #12]
 801023e:	0018      	movs	r0, r3
 8010240:	611a      	str	r2, [r3, #16]
 8010242:	b00b      	add	sp, #44	; 0x2c
 8010244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010246:	c304      	stmia	r3!, {r2}
 8010248:	e7cf      	b.n	80101ea <__multiply+0x52>
 801024a:	9b01      	ldr	r3, [sp, #4]
 801024c:	6818      	ldr	r0, [r3, #0]
 801024e:	b280      	uxth	r0, r0
 8010250:	2800      	cmp	r0, #0
 8010252:	d01e      	beq.n	8010292 <__multiply+0xfa>
 8010254:	4667      	mov	r7, ip
 8010256:	2500      	movs	r5, #0
 8010258:	9e08      	ldr	r6, [sp, #32]
 801025a:	ce02      	ldmia	r6!, {r1}
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	9307      	str	r3, [sp, #28]
 8010260:	b28b      	uxth	r3, r1
 8010262:	4343      	muls	r3, r0
 8010264:	001a      	movs	r2, r3
 8010266:	466b      	mov	r3, sp
 8010268:	8b9b      	ldrh	r3, [r3, #28]
 801026a:	18d3      	adds	r3, r2, r3
 801026c:	195b      	adds	r3, r3, r5
 801026e:	0c0d      	lsrs	r5, r1, #16
 8010270:	4345      	muls	r5, r0
 8010272:	9a07      	ldr	r2, [sp, #28]
 8010274:	0c11      	lsrs	r1, r2, #16
 8010276:	1869      	adds	r1, r5, r1
 8010278:	0c1a      	lsrs	r2, r3, #16
 801027a:	188a      	adds	r2, r1, r2
 801027c:	b29b      	uxth	r3, r3
 801027e:	0c15      	lsrs	r5, r2, #16
 8010280:	0412      	lsls	r2, r2, #16
 8010282:	431a      	orrs	r2, r3
 8010284:	9b05      	ldr	r3, [sp, #20]
 8010286:	c704      	stmia	r7!, {r2}
 8010288:	42b3      	cmp	r3, r6
 801028a:	d8e6      	bhi.n	801025a <__multiply+0xc2>
 801028c:	4663      	mov	r3, ip
 801028e:	9a06      	ldr	r2, [sp, #24]
 8010290:	509d      	str	r5, [r3, r2]
 8010292:	9b01      	ldr	r3, [sp, #4]
 8010294:	6818      	ldr	r0, [r3, #0]
 8010296:	0c00      	lsrs	r0, r0, #16
 8010298:	d020      	beq.n	80102dc <__multiply+0x144>
 801029a:	4663      	mov	r3, ip
 801029c:	0025      	movs	r5, r4
 801029e:	4661      	mov	r1, ip
 80102a0:	2700      	movs	r7, #0
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	3514      	adds	r5, #20
 80102a6:	682a      	ldr	r2, [r5, #0]
 80102a8:	680e      	ldr	r6, [r1, #0]
 80102aa:	b292      	uxth	r2, r2
 80102ac:	4342      	muls	r2, r0
 80102ae:	0c36      	lsrs	r6, r6, #16
 80102b0:	1992      	adds	r2, r2, r6
 80102b2:	19d2      	adds	r2, r2, r7
 80102b4:	0416      	lsls	r6, r2, #16
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	431e      	orrs	r6, r3
 80102ba:	600e      	str	r6, [r1, #0]
 80102bc:	cd40      	ldmia	r5!, {r6}
 80102be:	684b      	ldr	r3, [r1, #4]
 80102c0:	0c36      	lsrs	r6, r6, #16
 80102c2:	4346      	muls	r6, r0
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	0c12      	lsrs	r2, r2, #16
 80102c8:	18f3      	adds	r3, r6, r3
 80102ca:	189b      	adds	r3, r3, r2
 80102cc:	9a05      	ldr	r2, [sp, #20]
 80102ce:	0c1f      	lsrs	r7, r3, #16
 80102d0:	3104      	adds	r1, #4
 80102d2:	42aa      	cmp	r2, r5
 80102d4:	d8e7      	bhi.n	80102a6 <__multiply+0x10e>
 80102d6:	4662      	mov	r2, ip
 80102d8:	9906      	ldr	r1, [sp, #24]
 80102da:	5053      	str	r3, [r2, r1]
 80102dc:	9b01      	ldr	r3, [sp, #4]
 80102de:	3304      	adds	r3, #4
 80102e0:	9301      	str	r3, [sp, #4]
 80102e2:	2304      	movs	r3, #4
 80102e4:	449c      	add	ip, r3
 80102e6:	e79b      	b.n	8010220 <__multiply+0x88>
 80102e8:	9b03      	ldr	r3, [sp, #12]
 80102ea:	3b01      	subs	r3, #1
 80102ec:	9303      	str	r3, [sp, #12]
 80102ee:	e79b      	b.n	8010228 <__multiply+0x90>
 80102f0:	0801381c 	.word	0x0801381c
 80102f4:	0801388d 	.word	0x0801388d

080102f8 <__pow5mult>:
 80102f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102fa:	2303      	movs	r3, #3
 80102fc:	0015      	movs	r5, r2
 80102fe:	0007      	movs	r7, r0
 8010300:	000e      	movs	r6, r1
 8010302:	401a      	ands	r2, r3
 8010304:	421d      	tst	r5, r3
 8010306:	d008      	beq.n	801031a <__pow5mult+0x22>
 8010308:	4925      	ldr	r1, [pc, #148]	; (80103a0 <__pow5mult+0xa8>)
 801030a:	3a01      	subs	r2, #1
 801030c:	0092      	lsls	r2, r2, #2
 801030e:	5852      	ldr	r2, [r2, r1]
 8010310:	2300      	movs	r3, #0
 8010312:	0031      	movs	r1, r6
 8010314:	f7ff fe50 	bl	800ffb8 <__multadd>
 8010318:	0006      	movs	r6, r0
 801031a:	10ad      	asrs	r5, r5, #2
 801031c:	d03d      	beq.n	801039a <__pow5mult+0xa2>
 801031e:	69fc      	ldr	r4, [r7, #28]
 8010320:	2c00      	cmp	r4, #0
 8010322:	d10f      	bne.n	8010344 <__pow5mult+0x4c>
 8010324:	2010      	movs	r0, #16
 8010326:	f7fc fa0f 	bl	800c748 <malloc>
 801032a:	1e02      	subs	r2, r0, #0
 801032c:	61f8      	str	r0, [r7, #28]
 801032e:	d105      	bne.n	801033c <__pow5mult+0x44>
 8010330:	21b4      	movs	r1, #180	; 0xb4
 8010332:	4b1c      	ldr	r3, [pc, #112]	; (80103a4 <__pow5mult+0xac>)
 8010334:	481c      	ldr	r0, [pc, #112]	; (80103a8 <__pow5mult+0xb0>)
 8010336:	31ff      	adds	r1, #255	; 0xff
 8010338:	f7fe fb62 	bl	800ea00 <__assert_func>
 801033c:	6044      	str	r4, [r0, #4]
 801033e:	6084      	str	r4, [r0, #8]
 8010340:	6004      	str	r4, [r0, #0]
 8010342:	60c4      	str	r4, [r0, #12]
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	689c      	ldr	r4, [r3, #8]
 8010348:	9301      	str	r3, [sp, #4]
 801034a:	2c00      	cmp	r4, #0
 801034c:	d108      	bne.n	8010360 <__pow5mult+0x68>
 801034e:	0038      	movs	r0, r7
 8010350:	4916      	ldr	r1, [pc, #88]	; (80103ac <__pow5mult+0xb4>)
 8010352:	f7ff ff09 	bl	8010168 <__i2b>
 8010356:	9b01      	ldr	r3, [sp, #4]
 8010358:	0004      	movs	r4, r0
 801035a:	6098      	str	r0, [r3, #8]
 801035c:	2300      	movs	r3, #0
 801035e:	6003      	str	r3, [r0, #0]
 8010360:	2301      	movs	r3, #1
 8010362:	421d      	tst	r5, r3
 8010364:	d00a      	beq.n	801037c <__pow5mult+0x84>
 8010366:	0031      	movs	r1, r6
 8010368:	0022      	movs	r2, r4
 801036a:	0038      	movs	r0, r7
 801036c:	f7ff ff14 	bl	8010198 <__multiply>
 8010370:	0031      	movs	r1, r6
 8010372:	9001      	str	r0, [sp, #4]
 8010374:	0038      	movs	r0, r7
 8010376:	f7ff fdfb 	bl	800ff70 <_Bfree>
 801037a:	9e01      	ldr	r6, [sp, #4]
 801037c:	106d      	asrs	r5, r5, #1
 801037e:	d00c      	beq.n	801039a <__pow5mult+0xa2>
 8010380:	6820      	ldr	r0, [r4, #0]
 8010382:	2800      	cmp	r0, #0
 8010384:	d107      	bne.n	8010396 <__pow5mult+0x9e>
 8010386:	0022      	movs	r2, r4
 8010388:	0021      	movs	r1, r4
 801038a:	0038      	movs	r0, r7
 801038c:	f7ff ff04 	bl	8010198 <__multiply>
 8010390:	2300      	movs	r3, #0
 8010392:	6020      	str	r0, [r4, #0]
 8010394:	6003      	str	r3, [r0, #0]
 8010396:	0004      	movs	r4, r0
 8010398:	e7e2      	b.n	8010360 <__pow5mult+0x68>
 801039a:	0030      	movs	r0, r6
 801039c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801039e:	46c0      	nop			; (mov r8, r8)
 80103a0:	080139d8 	.word	0x080139d8
 80103a4:	08013702 	.word	0x08013702
 80103a8:	0801388d 	.word	0x0801388d
 80103ac:	00000271 	.word	0x00000271

080103b0 <__lshift>:
 80103b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103b2:	000c      	movs	r4, r1
 80103b4:	0017      	movs	r7, r2
 80103b6:	6923      	ldr	r3, [r4, #16]
 80103b8:	1155      	asrs	r5, r2, #5
 80103ba:	b087      	sub	sp, #28
 80103bc:	18eb      	adds	r3, r5, r3
 80103be:	9302      	str	r3, [sp, #8]
 80103c0:	3301      	adds	r3, #1
 80103c2:	9301      	str	r3, [sp, #4]
 80103c4:	6849      	ldr	r1, [r1, #4]
 80103c6:	68a3      	ldr	r3, [r4, #8]
 80103c8:	9004      	str	r0, [sp, #16]
 80103ca:	9a01      	ldr	r2, [sp, #4]
 80103cc:	4293      	cmp	r3, r2
 80103ce:	db10      	blt.n	80103f2 <__lshift+0x42>
 80103d0:	9804      	ldr	r0, [sp, #16]
 80103d2:	f7ff fd89 	bl	800fee8 <_Balloc>
 80103d6:	2300      	movs	r3, #0
 80103d8:	0002      	movs	r2, r0
 80103da:	0006      	movs	r6, r0
 80103dc:	0019      	movs	r1, r3
 80103de:	3214      	adds	r2, #20
 80103e0:	4298      	cmp	r0, r3
 80103e2:	d10c      	bne.n	80103fe <__lshift+0x4e>
 80103e4:	31df      	adds	r1, #223	; 0xdf
 80103e6:	0032      	movs	r2, r6
 80103e8:	4b26      	ldr	r3, [pc, #152]	; (8010484 <__lshift+0xd4>)
 80103ea:	4827      	ldr	r0, [pc, #156]	; (8010488 <__lshift+0xd8>)
 80103ec:	31ff      	adds	r1, #255	; 0xff
 80103ee:	f7fe fb07 	bl	800ea00 <__assert_func>
 80103f2:	3101      	adds	r1, #1
 80103f4:	005b      	lsls	r3, r3, #1
 80103f6:	e7e8      	b.n	80103ca <__lshift+0x1a>
 80103f8:	0098      	lsls	r0, r3, #2
 80103fa:	5011      	str	r1, [r2, r0]
 80103fc:	3301      	adds	r3, #1
 80103fe:	42ab      	cmp	r3, r5
 8010400:	dbfa      	blt.n	80103f8 <__lshift+0x48>
 8010402:	43eb      	mvns	r3, r5
 8010404:	17db      	asrs	r3, r3, #31
 8010406:	401d      	ands	r5, r3
 8010408:	211f      	movs	r1, #31
 801040a:	0023      	movs	r3, r4
 801040c:	0038      	movs	r0, r7
 801040e:	00ad      	lsls	r5, r5, #2
 8010410:	1955      	adds	r5, r2, r5
 8010412:	6922      	ldr	r2, [r4, #16]
 8010414:	3314      	adds	r3, #20
 8010416:	0092      	lsls	r2, r2, #2
 8010418:	4008      	ands	r0, r1
 801041a:	4684      	mov	ip, r0
 801041c:	189a      	adds	r2, r3, r2
 801041e:	420f      	tst	r7, r1
 8010420:	d02a      	beq.n	8010478 <__lshift+0xc8>
 8010422:	3101      	adds	r1, #1
 8010424:	1a09      	subs	r1, r1, r0
 8010426:	9105      	str	r1, [sp, #20]
 8010428:	2100      	movs	r1, #0
 801042a:	9503      	str	r5, [sp, #12]
 801042c:	4667      	mov	r7, ip
 801042e:	6818      	ldr	r0, [r3, #0]
 8010430:	40b8      	lsls	r0, r7
 8010432:	4308      	orrs	r0, r1
 8010434:	9903      	ldr	r1, [sp, #12]
 8010436:	c101      	stmia	r1!, {r0}
 8010438:	9103      	str	r1, [sp, #12]
 801043a:	9805      	ldr	r0, [sp, #20]
 801043c:	cb02      	ldmia	r3!, {r1}
 801043e:	40c1      	lsrs	r1, r0
 8010440:	429a      	cmp	r2, r3
 8010442:	d8f3      	bhi.n	801042c <__lshift+0x7c>
 8010444:	0020      	movs	r0, r4
 8010446:	3015      	adds	r0, #21
 8010448:	2304      	movs	r3, #4
 801044a:	4282      	cmp	r2, r0
 801044c:	d304      	bcc.n	8010458 <__lshift+0xa8>
 801044e:	1b13      	subs	r3, r2, r4
 8010450:	3b15      	subs	r3, #21
 8010452:	089b      	lsrs	r3, r3, #2
 8010454:	3301      	adds	r3, #1
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	50e9      	str	r1, [r5, r3]
 801045a:	2900      	cmp	r1, #0
 801045c:	d002      	beq.n	8010464 <__lshift+0xb4>
 801045e:	9b02      	ldr	r3, [sp, #8]
 8010460:	3302      	adds	r3, #2
 8010462:	9301      	str	r3, [sp, #4]
 8010464:	9b01      	ldr	r3, [sp, #4]
 8010466:	9804      	ldr	r0, [sp, #16]
 8010468:	3b01      	subs	r3, #1
 801046a:	0021      	movs	r1, r4
 801046c:	6133      	str	r3, [r6, #16]
 801046e:	f7ff fd7f 	bl	800ff70 <_Bfree>
 8010472:	0030      	movs	r0, r6
 8010474:	b007      	add	sp, #28
 8010476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010478:	cb02      	ldmia	r3!, {r1}
 801047a:	c502      	stmia	r5!, {r1}
 801047c:	429a      	cmp	r2, r3
 801047e:	d8fb      	bhi.n	8010478 <__lshift+0xc8>
 8010480:	e7f0      	b.n	8010464 <__lshift+0xb4>
 8010482:	46c0      	nop			; (mov r8, r8)
 8010484:	0801381c 	.word	0x0801381c
 8010488:	0801388d 	.word	0x0801388d

0801048c <__mcmp>:
 801048c:	b530      	push	{r4, r5, lr}
 801048e:	690b      	ldr	r3, [r1, #16]
 8010490:	6904      	ldr	r4, [r0, #16]
 8010492:	0002      	movs	r2, r0
 8010494:	1ae0      	subs	r0, r4, r3
 8010496:	429c      	cmp	r4, r3
 8010498:	d10e      	bne.n	80104b8 <__mcmp+0x2c>
 801049a:	3214      	adds	r2, #20
 801049c:	009b      	lsls	r3, r3, #2
 801049e:	3114      	adds	r1, #20
 80104a0:	0014      	movs	r4, r2
 80104a2:	18c9      	adds	r1, r1, r3
 80104a4:	18d2      	adds	r2, r2, r3
 80104a6:	3a04      	subs	r2, #4
 80104a8:	3904      	subs	r1, #4
 80104aa:	6815      	ldr	r5, [r2, #0]
 80104ac:	680b      	ldr	r3, [r1, #0]
 80104ae:	429d      	cmp	r5, r3
 80104b0:	d003      	beq.n	80104ba <__mcmp+0x2e>
 80104b2:	2001      	movs	r0, #1
 80104b4:	429d      	cmp	r5, r3
 80104b6:	d303      	bcc.n	80104c0 <__mcmp+0x34>
 80104b8:	bd30      	pop	{r4, r5, pc}
 80104ba:	4294      	cmp	r4, r2
 80104bc:	d3f3      	bcc.n	80104a6 <__mcmp+0x1a>
 80104be:	e7fb      	b.n	80104b8 <__mcmp+0x2c>
 80104c0:	4240      	negs	r0, r0
 80104c2:	e7f9      	b.n	80104b8 <__mcmp+0x2c>

080104c4 <__mdiff>:
 80104c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104c6:	000e      	movs	r6, r1
 80104c8:	0007      	movs	r7, r0
 80104ca:	0011      	movs	r1, r2
 80104cc:	0030      	movs	r0, r6
 80104ce:	b087      	sub	sp, #28
 80104d0:	0014      	movs	r4, r2
 80104d2:	f7ff ffdb 	bl	801048c <__mcmp>
 80104d6:	1e05      	subs	r5, r0, #0
 80104d8:	d110      	bne.n	80104fc <__mdiff+0x38>
 80104da:	0001      	movs	r1, r0
 80104dc:	0038      	movs	r0, r7
 80104de:	f7ff fd03 	bl	800fee8 <_Balloc>
 80104e2:	1e02      	subs	r2, r0, #0
 80104e4:	d104      	bne.n	80104f0 <__mdiff+0x2c>
 80104e6:	4b3f      	ldr	r3, [pc, #252]	; (80105e4 <__mdiff+0x120>)
 80104e8:	483f      	ldr	r0, [pc, #252]	; (80105e8 <__mdiff+0x124>)
 80104ea:	4940      	ldr	r1, [pc, #256]	; (80105ec <__mdiff+0x128>)
 80104ec:	f7fe fa88 	bl	800ea00 <__assert_func>
 80104f0:	2301      	movs	r3, #1
 80104f2:	6145      	str	r5, [r0, #20]
 80104f4:	6103      	str	r3, [r0, #16]
 80104f6:	0010      	movs	r0, r2
 80104f8:	b007      	add	sp, #28
 80104fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104fc:	2301      	movs	r3, #1
 80104fe:	9301      	str	r3, [sp, #4]
 8010500:	2800      	cmp	r0, #0
 8010502:	db04      	blt.n	801050e <__mdiff+0x4a>
 8010504:	0023      	movs	r3, r4
 8010506:	0034      	movs	r4, r6
 8010508:	001e      	movs	r6, r3
 801050a:	2300      	movs	r3, #0
 801050c:	9301      	str	r3, [sp, #4]
 801050e:	0038      	movs	r0, r7
 8010510:	6861      	ldr	r1, [r4, #4]
 8010512:	f7ff fce9 	bl	800fee8 <_Balloc>
 8010516:	1e02      	subs	r2, r0, #0
 8010518:	d103      	bne.n	8010522 <__mdiff+0x5e>
 801051a:	4b32      	ldr	r3, [pc, #200]	; (80105e4 <__mdiff+0x120>)
 801051c:	4832      	ldr	r0, [pc, #200]	; (80105e8 <__mdiff+0x124>)
 801051e:	4934      	ldr	r1, [pc, #208]	; (80105f0 <__mdiff+0x12c>)
 8010520:	e7e4      	b.n	80104ec <__mdiff+0x28>
 8010522:	9b01      	ldr	r3, [sp, #4]
 8010524:	2700      	movs	r7, #0
 8010526:	60c3      	str	r3, [r0, #12]
 8010528:	6920      	ldr	r0, [r4, #16]
 801052a:	3414      	adds	r4, #20
 801052c:	0083      	lsls	r3, r0, #2
 801052e:	18e3      	adds	r3, r4, r3
 8010530:	0021      	movs	r1, r4
 8010532:	9401      	str	r4, [sp, #4]
 8010534:	0034      	movs	r4, r6
 8010536:	9302      	str	r3, [sp, #8]
 8010538:	6933      	ldr	r3, [r6, #16]
 801053a:	3414      	adds	r4, #20
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	18e3      	adds	r3, r4, r3
 8010540:	9303      	str	r3, [sp, #12]
 8010542:	0013      	movs	r3, r2
 8010544:	3314      	adds	r3, #20
 8010546:	469c      	mov	ip, r3
 8010548:	9305      	str	r3, [sp, #20]
 801054a:	9104      	str	r1, [sp, #16]
 801054c:	9b04      	ldr	r3, [sp, #16]
 801054e:	cc02      	ldmia	r4!, {r1}
 8010550:	cb20      	ldmia	r3!, {r5}
 8010552:	9304      	str	r3, [sp, #16]
 8010554:	b2ab      	uxth	r3, r5
 8010556:	19df      	adds	r7, r3, r7
 8010558:	b28b      	uxth	r3, r1
 801055a:	1afb      	subs	r3, r7, r3
 801055c:	0c09      	lsrs	r1, r1, #16
 801055e:	0c2d      	lsrs	r5, r5, #16
 8010560:	1a6d      	subs	r5, r5, r1
 8010562:	1419      	asrs	r1, r3, #16
 8010564:	1869      	adds	r1, r5, r1
 8010566:	b29b      	uxth	r3, r3
 8010568:	140f      	asrs	r7, r1, #16
 801056a:	0409      	lsls	r1, r1, #16
 801056c:	4319      	orrs	r1, r3
 801056e:	4663      	mov	r3, ip
 8010570:	c302      	stmia	r3!, {r1}
 8010572:	469c      	mov	ip, r3
 8010574:	9b03      	ldr	r3, [sp, #12]
 8010576:	42a3      	cmp	r3, r4
 8010578:	d8e8      	bhi.n	801054c <__mdiff+0x88>
 801057a:	0031      	movs	r1, r6
 801057c:	9c03      	ldr	r4, [sp, #12]
 801057e:	3115      	adds	r1, #21
 8010580:	2304      	movs	r3, #4
 8010582:	428c      	cmp	r4, r1
 8010584:	d304      	bcc.n	8010590 <__mdiff+0xcc>
 8010586:	1ba3      	subs	r3, r4, r6
 8010588:	3b15      	subs	r3, #21
 801058a:	089b      	lsrs	r3, r3, #2
 801058c:	3301      	adds	r3, #1
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	9901      	ldr	r1, [sp, #4]
 8010592:	18cd      	adds	r5, r1, r3
 8010594:	9905      	ldr	r1, [sp, #20]
 8010596:	002e      	movs	r6, r5
 8010598:	18cb      	adds	r3, r1, r3
 801059a:	469c      	mov	ip, r3
 801059c:	9902      	ldr	r1, [sp, #8]
 801059e:	428e      	cmp	r6, r1
 80105a0:	d310      	bcc.n	80105c4 <__mdiff+0x100>
 80105a2:	9e02      	ldr	r6, [sp, #8]
 80105a4:	1ee9      	subs	r1, r5, #3
 80105a6:	2400      	movs	r4, #0
 80105a8:	428e      	cmp	r6, r1
 80105aa:	d304      	bcc.n	80105b6 <__mdiff+0xf2>
 80105ac:	0031      	movs	r1, r6
 80105ae:	3103      	adds	r1, #3
 80105b0:	1b49      	subs	r1, r1, r5
 80105b2:	0889      	lsrs	r1, r1, #2
 80105b4:	008c      	lsls	r4, r1, #2
 80105b6:	191b      	adds	r3, r3, r4
 80105b8:	3b04      	subs	r3, #4
 80105ba:	6819      	ldr	r1, [r3, #0]
 80105bc:	2900      	cmp	r1, #0
 80105be:	d00f      	beq.n	80105e0 <__mdiff+0x11c>
 80105c0:	6110      	str	r0, [r2, #16]
 80105c2:	e798      	b.n	80104f6 <__mdiff+0x32>
 80105c4:	ce02      	ldmia	r6!, {r1}
 80105c6:	b28c      	uxth	r4, r1
 80105c8:	19e4      	adds	r4, r4, r7
 80105ca:	0c0f      	lsrs	r7, r1, #16
 80105cc:	1421      	asrs	r1, r4, #16
 80105ce:	1879      	adds	r1, r7, r1
 80105d0:	b2a4      	uxth	r4, r4
 80105d2:	140f      	asrs	r7, r1, #16
 80105d4:	0409      	lsls	r1, r1, #16
 80105d6:	4321      	orrs	r1, r4
 80105d8:	4664      	mov	r4, ip
 80105da:	c402      	stmia	r4!, {r1}
 80105dc:	46a4      	mov	ip, r4
 80105de:	e7dd      	b.n	801059c <__mdiff+0xd8>
 80105e0:	3801      	subs	r0, #1
 80105e2:	e7e9      	b.n	80105b8 <__mdiff+0xf4>
 80105e4:	0801381c 	.word	0x0801381c
 80105e8:	0801388d 	.word	0x0801388d
 80105ec:	00000237 	.word	0x00000237
 80105f0:	00000245 	.word	0x00000245

080105f4 <__ulp>:
 80105f4:	2000      	movs	r0, #0
 80105f6:	4b0b      	ldr	r3, [pc, #44]	; (8010624 <__ulp+0x30>)
 80105f8:	4019      	ands	r1, r3
 80105fa:	4b0b      	ldr	r3, [pc, #44]	; (8010628 <__ulp+0x34>)
 80105fc:	18c9      	adds	r1, r1, r3
 80105fe:	4281      	cmp	r1, r0
 8010600:	dc06      	bgt.n	8010610 <__ulp+0x1c>
 8010602:	4249      	negs	r1, r1
 8010604:	150b      	asrs	r3, r1, #20
 8010606:	2b13      	cmp	r3, #19
 8010608:	dc03      	bgt.n	8010612 <__ulp+0x1e>
 801060a:	2180      	movs	r1, #128	; 0x80
 801060c:	0309      	lsls	r1, r1, #12
 801060e:	4119      	asrs	r1, r3
 8010610:	4770      	bx	lr
 8010612:	3b14      	subs	r3, #20
 8010614:	2001      	movs	r0, #1
 8010616:	2b1e      	cmp	r3, #30
 8010618:	dc02      	bgt.n	8010620 <__ulp+0x2c>
 801061a:	2080      	movs	r0, #128	; 0x80
 801061c:	0600      	lsls	r0, r0, #24
 801061e:	40d8      	lsrs	r0, r3
 8010620:	2100      	movs	r1, #0
 8010622:	e7f5      	b.n	8010610 <__ulp+0x1c>
 8010624:	7ff00000 	.word	0x7ff00000
 8010628:	fcc00000 	.word	0xfcc00000

0801062c <__b2d>:
 801062c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801062e:	0006      	movs	r6, r0
 8010630:	6903      	ldr	r3, [r0, #16]
 8010632:	3614      	adds	r6, #20
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	18f3      	adds	r3, r6, r3
 8010638:	1f1d      	subs	r5, r3, #4
 801063a:	682c      	ldr	r4, [r5, #0]
 801063c:	000f      	movs	r7, r1
 801063e:	0020      	movs	r0, r4
 8010640:	9301      	str	r3, [sp, #4]
 8010642:	f7ff fd49 	bl	80100d8 <__hi0bits>
 8010646:	2220      	movs	r2, #32
 8010648:	1a12      	subs	r2, r2, r0
 801064a:	603a      	str	r2, [r7, #0]
 801064c:	0003      	movs	r3, r0
 801064e:	4a1c      	ldr	r2, [pc, #112]	; (80106c0 <__b2d+0x94>)
 8010650:	280a      	cmp	r0, #10
 8010652:	dc15      	bgt.n	8010680 <__b2d+0x54>
 8010654:	210b      	movs	r1, #11
 8010656:	0027      	movs	r7, r4
 8010658:	1a09      	subs	r1, r1, r0
 801065a:	40cf      	lsrs	r7, r1
 801065c:	433a      	orrs	r2, r7
 801065e:	468c      	mov	ip, r1
 8010660:	0011      	movs	r1, r2
 8010662:	2200      	movs	r2, #0
 8010664:	42ae      	cmp	r6, r5
 8010666:	d202      	bcs.n	801066e <__b2d+0x42>
 8010668:	9a01      	ldr	r2, [sp, #4]
 801066a:	3a08      	subs	r2, #8
 801066c:	6812      	ldr	r2, [r2, #0]
 801066e:	3315      	adds	r3, #21
 8010670:	409c      	lsls	r4, r3
 8010672:	4663      	mov	r3, ip
 8010674:	0027      	movs	r7, r4
 8010676:	40da      	lsrs	r2, r3
 8010678:	4317      	orrs	r7, r2
 801067a:	0038      	movs	r0, r7
 801067c:	b003      	add	sp, #12
 801067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010680:	2700      	movs	r7, #0
 8010682:	42ae      	cmp	r6, r5
 8010684:	d202      	bcs.n	801068c <__b2d+0x60>
 8010686:	9d01      	ldr	r5, [sp, #4]
 8010688:	3d08      	subs	r5, #8
 801068a:	682f      	ldr	r7, [r5, #0]
 801068c:	210b      	movs	r1, #11
 801068e:	4249      	negs	r1, r1
 8010690:	468c      	mov	ip, r1
 8010692:	449c      	add	ip, r3
 8010694:	2b0b      	cmp	r3, #11
 8010696:	d010      	beq.n	80106ba <__b2d+0x8e>
 8010698:	4661      	mov	r1, ip
 801069a:	2320      	movs	r3, #32
 801069c:	408c      	lsls	r4, r1
 801069e:	1a5b      	subs	r3, r3, r1
 80106a0:	0039      	movs	r1, r7
 80106a2:	40d9      	lsrs	r1, r3
 80106a4:	430c      	orrs	r4, r1
 80106a6:	4322      	orrs	r2, r4
 80106a8:	0011      	movs	r1, r2
 80106aa:	2200      	movs	r2, #0
 80106ac:	42b5      	cmp	r5, r6
 80106ae:	d901      	bls.n	80106b4 <__b2d+0x88>
 80106b0:	3d04      	subs	r5, #4
 80106b2:	682a      	ldr	r2, [r5, #0]
 80106b4:	4664      	mov	r4, ip
 80106b6:	40a7      	lsls	r7, r4
 80106b8:	e7dd      	b.n	8010676 <__b2d+0x4a>
 80106ba:	4322      	orrs	r2, r4
 80106bc:	0011      	movs	r1, r2
 80106be:	e7dc      	b.n	801067a <__b2d+0x4e>
 80106c0:	3ff00000 	.word	0x3ff00000

080106c4 <__d2b>:
 80106c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106c6:	2101      	movs	r1, #1
 80106c8:	0014      	movs	r4, r2
 80106ca:	001d      	movs	r5, r3
 80106cc:	9f08      	ldr	r7, [sp, #32]
 80106ce:	f7ff fc0b 	bl	800fee8 <_Balloc>
 80106d2:	1e06      	subs	r6, r0, #0
 80106d4:	d105      	bne.n	80106e2 <__d2b+0x1e>
 80106d6:	0032      	movs	r2, r6
 80106d8:	4b24      	ldr	r3, [pc, #144]	; (801076c <__d2b+0xa8>)
 80106da:	4825      	ldr	r0, [pc, #148]	; (8010770 <__d2b+0xac>)
 80106dc:	4925      	ldr	r1, [pc, #148]	; (8010774 <__d2b+0xb0>)
 80106de:	f7fe f98f 	bl	800ea00 <__assert_func>
 80106e2:	032b      	lsls	r3, r5, #12
 80106e4:	006d      	lsls	r5, r5, #1
 80106e6:	0b1b      	lsrs	r3, r3, #12
 80106e8:	0d6d      	lsrs	r5, r5, #21
 80106ea:	d125      	bne.n	8010738 <__d2b+0x74>
 80106ec:	9301      	str	r3, [sp, #4]
 80106ee:	2c00      	cmp	r4, #0
 80106f0:	d028      	beq.n	8010744 <__d2b+0x80>
 80106f2:	4668      	mov	r0, sp
 80106f4:	9400      	str	r4, [sp, #0]
 80106f6:	f7ff fd09 	bl	801010c <__lo0bits>
 80106fa:	9b01      	ldr	r3, [sp, #4]
 80106fc:	9900      	ldr	r1, [sp, #0]
 80106fe:	2800      	cmp	r0, #0
 8010700:	d01e      	beq.n	8010740 <__d2b+0x7c>
 8010702:	2220      	movs	r2, #32
 8010704:	001c      	movs	r4, r3
 8010706:	1a12      	subs	r2, r2, r0
 8010708:	4094      	lsls	r4, r2
 801070a:	0022      	movs	r2, r4
 801070c:	40c3      	lsrs	r3, r0
 801070e:	430a      	orrs	r2, r1
 8010710:	6172      	str	r2, [r6, #20]
 8010712:	9301      	str	r3, [sp, #4]
 8010714:	9c01      	ldr	r4, [sp, #4]
 8010716:	61b4      	str	r4, [r6, #24]
 8010718:	1e63      	subs	r3, r4, #1
 801071a:	419c      	sbcs	r4, r3
 801071c:	3401      	adds	r4, #1
 801071e:	6134      	str	r4, [r6, #16]
 8010720:	2d00      	cmp	r5, #0
 8010722:	d017      	beq.n	8010754 <__d2b+0x90>
 8010724:	2435      	movs	r4, #53	; 0x35
 8010726:	4b14      	ldr	r3, [pc, #80]	; (8010778 <__d2b+0xb4>)
 8010728:	18ed      	adds	r5, r5, r3
 801072a:	182d      	adds	r5, r5, r0
 801072c:	603d      	str	r5, [r7, #0]
 801072e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010730:	1a24      	subs	r4, r4, r0
 8010732:	601c      	str	r4, [r3, #0]
 8010734:	0030      	movs	r0, r6
 8010736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010738:	2280      	movs	r2, #128	; 0x80
 801073a:	0352      	lsls	r2, r2, #13
 801073c:	4313      	orrs	r3, r2
 801073e:	e7d5      	b.n	80106ec <__d2b+0x28>
 8010740:	6171      	str	r1, [r6, #20]
 8010742:	e7e7      	b.n	8010714 <__d2b+0x50>
 8010744:	a801      	add	r0, sp, #4
 8010746:	f7ff fce1 	bl	801010c <__lo0bits>
 801074a:	9b01      	ldr	r3, [sp, #4]
 801074c:	2401      	movs	r4, #1
 801074e:	6173      	str	r3, [r6, #20]
 8010750:	3020      	adds	r0, #32
 8010752:	e7e4      	b.n	801071e <__d2b+0x5a>
 8010754:	4b09      	ldr	r3, [pc, #36]	; (801077c <__d2b+0xb8>)
 8010756:	18c0      	adds	r0, r0, r3
 8010758:	4b09      	ldr	r3, [pc, #36]	; (8010780 <__d2b+0xbc>)
 801075a:	6038      	str	r0, [r7, #0]
 801075c:	18e3      	adds	r3, r4, r3
 801075e:	009b      	lsls	r3, r3, #2
 8010760:	18f3      	adds	r3, r6, r3
 8010762:	6958      	ldr	r0, [r3, #20]
 8010764:	f7ff fcb8 	bl	80100d8 <__hi0bits>
 8010768:	0164      	lsls	r4, r4, #5
 801076a:	e7e0      	b.n	801072e <__d2b+0x6a>
 801076c:	0801381c 	.word	0x0801381c
 8010770:	0801388d 	.word	0x0801388d
 8010774:	0000030f 	.word	0x0000030f
 8010778:	fffffbcd 	.word	0xfffffbcd
 801077c:	fffffbce 	.word	0xfffffbce
 8010780:	3fffffff 	.word	0x3fffffff

08010784 <__ratio>:
 8010784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010786:	b087      	sub	sp, #28
 8010788:	000f      	movs	r7, r1
 801078a:	a904      	add	r1, sp, #16
 801078c:	0006      	movs	r6, r0
 801078e:	f7ff ff4d 	bl	801062c <__b2d>
 8010792:	9000      	str	r0, [sp, #0]
 8010794:	9101      	str	r1, [sp, #4]
 8010796:	9c00      	ldr	r4, [sp, #0]
 8010798:	9d01      	ldr	r5, [sp, #4]
 801079a:	0038      	movs	r0, r7
 801079c:	a905      	add	r1, sp, #20
 801079e:	f7ff ff45 	bl	801062c <__b2d>
 80107a2:	9002      	str	r0, [sp, #8]
 80107a4:	9103      	str	r1, [sp, #12]
 80107a6:	9a02      	ldr	r2, [sp, #8]
 80107a8:	9b03      	ldr	r3, [sp, #12]
 80107aa:	6930      	ldr	r0, [r6, #16]
 80107ac:	6939      	ldr	r1, [r7, #16]
 80107ae:	9e04      	ldr	r6, [sp, #16]
 80107b0:	1a40      	subs	r0, r0, r1
 80107b2:	9905      	ldr	r1, [sp, #20]
 80107b4:	0140      	lsls	r0, r0, #5
 80107b6:	1a71      	subs	r1, r6, r1
 80107b8:	1841      	adds	r1, r0, r1
 80107ba:	0508      	lsls	r0, r1, #20
 80107bc:	2900      	cmp	r1, #0
 80107be:	dd07      	ble.n	80107d0 <__ratio+0x4c>
 80107c0:	9901      	ldr	r1, [sp, #4]
 80107c2:	1845      	adds	r5, r0, r1
 80107c4:	0020      	movs	r0, r4
 80107c6:	0029      	movs	r1, r5
 80107c8:	f7f1 f98a 	bl	8001ae0 <__aeabi_ddiv>
 80107cc:	b007      	add	sp, #28
 80107ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107d0:	9903      	ldr	r1, [sp, #12]
 80107d2:	1a0b      	subs	r3, r1, r0
 80107d4:	e7f6      	b.n	80107c4 <__ratio+0x40>

080107d6 <__copybits>:
 80107d6:	b570      	push	{r4, r5, r6, lr}
 80107d8:	0014      	movs	r4, r2
 80107da:	0005      	movs	r5, r0
 80107dc:	3901      	subs	r1, #1
 80107de:	6913      	ldr	r3, [r2, #16]
 80107e0:	1149      	asrs	r1, r1, #5
 80107e2:	3101      	adds	r1, #1
 80107e4:	0089      	lsls	r1, r1, #2
 80107e6:	3414      	adds	r4, #20
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	1841      	adds	r1, r0, r1
 80107ec:	18e3      	adds	r3, r4, r3
 80107ee:	42a3      	cmp	r3, r4
 80107f0:	d80d      	bhi.n	801080e <__copybits+0x38>
 80107f2:	0014      	movs	r4, r2
 80107f4:	3411      	adds	r4, #17
 80107f6:	2500      	movs	r5, #0
 80107f8:	429c      	cmp	r4, r3
 80107fa:	d803      	bhi.n	8010804 <__copybits+0x2e>
 80107fc:	1a9b      	subs	r3, r3, r2
 80107fe:	3b11      	subs	r3, #17
 8010800:	089b      	lsrs	r3, r3, #2
 8010802:	009d      	lsls	r5, r3, #2
 8010804:	2300      	movs	r3, #0
 8010806:	1940      	adds	r0, r0, r5
 8010808:	4281      	cmp	r1, r0
 801080a:	d803      	bhi.n	8010814 <__copybits+0x3e>
 801080c:	bd70      	pop	{r4, r5, r6, pc}
 801080e:	cc40      	ldmia	r4!, {r6}
 8010810:	c540      	stmia	r5!, {r6}
 8010812:	e7ec      	b.n	80107ee <__copybits+0x18>
 8010814:	c008      	stmia	r0!, {r3}
 8010816:	e7f7      	b.n	8010808 <__copybits+0x32>

08010818 <__any_on>:
 8010818:	0002      	movs	r2, r0
 801081a:	6900      	ldr	r0, [r0, #16]
 801081c:	b510      	push	{r4, lr}
 801081e:	3214      	adds	r2, #20
 8010820:	114b      	asrs	r3, r1, #5
 8010822:	4298      	cmp	r0, r3
 8010824:	db13      	blt.n	801084e <__any_on+0x36>
 8010826:	dd0c      	ble.n	8010842 <__any_on+0x2a>
 8010828:	241f      	movs	r4, #31
 801082a:	0008      	movs	r0, r1
 801082c:	4020      	ands	r0, r4
 801082e:	4221      	tst	r1, r4
 8010830:	d007      	beq.n	8010842 <__any_on+0x2a>
 8010832:	0099      	lsls	r1, r3, #2
 8010834:	588c      	ldr	r4, [r1, r2]
 8010836:	0021      	movs	r1, r4
 8010838:	40c1      	lsrs	r1, r0
 801083a:	4081      	lsls	r1, r0
 801083c:	2001      	movs	r0, #1
 801083e:	428c      	cmp	r4, r1
 8010840:	d104      	bne.n	801084c <__any_on+0x34>
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	18d3      	adds	r3, r2, r3
 8010846:	4293      	cmp	r3, r2
 8010848:	d803      	bhi.n	8010852 <__any_on+0x3a>
 801084a:	2000      	movs	r0, #0
 801084c:	bd10      	pop	{r4, pc}
 801084e:	0003      	movs	r3, r0
 8010850:	e7f7      	b.n	8010842 <__any_on+0x2a>
 8010852:	3b04      	subs	r3, #4
 8010854:	6819      	ldr	r1, [r3, #0]
 8010856:	2900      	cmp	r1, #0
 8010858:	d0f5      	beq.n	8010846 <__any_on+0x2e>
 801085a:	2001      	movs	r0, #1
 801085c:	e7f6      	b.n	801084c <__any_on+0x34>

0801085e <__ascii_wctomb>:
 801085e:	0003      	movs	r3, r0
 8010860:	1e08      	subs	r0, r1, #0
 8010862:	d005      	beq.n	8010870 <__ascii_wctomb+0x12>
 8010864:	2aff      	cmp	r2, #255	; 0xff
 8010866:	d904      	bls.n	8010872 <__ascii_wctomb+0x14>
 8010868:	228a      	movs	r2, #138	; 0x8a
 801086a:	2001      	movs	r0, #1
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	4240      	negs	r0, r0
 8010870:	4770      	bx	lr
 8010872:	2001      	movs	r0, #1
 8010874:	700a      	strb	r2, [r1, #0]
 8010876:	e7fb      	b.n	8010870 <__ascii_wctomb+0x12>

08010878 <__ssputs_r>:
 8010878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801087a:	b085      	sub	sp, #20
 801087c:	9301      	str	r3, [sp, #4]
 801087e:	9203      	str	r2, [sp, #12]
 8010880:	688e      	ldr	r6, [r1, #8]
 8010882:	9a01      	ldr	r2, [sp, #4]
 8010884:	0007      	movs	r7, r0
 8010886:	000c      	movs	r4, r1
 8010888:	680b      	ldr	r3, [r1, #0]
 801088a:	4296      	cmp	r6, r2
 801088c:	d831      	bhi.n	80108f2 <__ssputs_r+0x7a>
 801088e:	898a      	ldrh	r2, [r1, #12]
 8010890:	2190      	movs	r1, #144	; 0x90
 8010892:	00c9      	lsls	r1, r1, #3
 8010894:	420a      	tst	r2, r1
 8010896:	d029      	beq.n	80108ec <__ssputs_r+0x74>
 8010898:	2003      	movs	r0, #3
 801089a:	6921      	ldr	r1, [r4, #16]
 801089c:	1a5b      	subs	r3, r3, r1
 801089e:	9302      	str	r3, [sp, #8]
 80108a0:	6963      	ldr	r3, [r4, #20]
 80108a2:	4343      	muls	r3, r0
 80108a4:	0fdd      	lsrs	r5, r3, #31
 80108a6:	18ed      	adds	r5, r5, r3
 80108a8:	9b01      	ldr	r3, [sp, #4]
 80108aa:	9802      	ldr	r0, [sp, #8]
 80108ac:	3301      	adds	r3, #1
 80108ae:	181b      	adds	r3, r3, r0
 80108b0:	106d      	asrs	r5, r5, #1
 80108b2:	42ab      	cmp	r3, r5
 80108b4:	d900      	bls.n	80108b8 <__ssputs_r+0x40>
 80108b6:	001d      	movs	r5, r3
 80108b8:	0552      	lsls	r2, r2, #21
 80108ba:	d529      	bpl.n	8010910 <__ssputs_r+0x98>
 80108bc:	0029      	movs	r1, r5
 80108be:	0038      	movs	r0, r7
 80108c0:	f7fb ff6e 	bl	800c7a0 <_malloc_r>
 80108c4:	1e06      	subs	r6, r0, #0
 80108c6:	d02d      	beq.n	8010924 <__ssputs_r+0xac>
 80108c8:	9a02      	ldr	r2, [sp, #8]
 80108ca:	6921      	ldr	r1, [r4, #16]
 80108cc:	f7fe f884 	bl	800e9d8 <memcpy>
 80108d0:	89a2      	ldrh	r2, [r4, #12]
 80108d2:	4b19      	ldr	r3, [pc, #100]	; (8010938 <__ssputs_r+0xc0>)
 80108d4:	401a      	ands	r2, r3
 80108d6:	2380      	movs	r3, #128	; 0x80
 80108d8:	4313      	orrs	r3, r2
 80108da:	81a3      	strh	r3, [r4, #12]
 80108dc:	9b02      	ldr	r3, [sp, #8]
 80108de:	6126      	str	r6, [r4, #16]
 80108e0:	18f6      	adds	r6, r6, r3
 80108e2:	6026      	str	r6, [r4, #0]
 80108e4:	6165      	str	r5, [r4, #20]
 80108e6:	9e01      	ldr	r6, [sp, #4]
 80108e8:	1aed      	subs	r5, r5, r3
 80108ea:	60a5      	str	r5, [r4, #8]
 80108ec:	9b01      	ldr	r3, [sp, #4]
 80108ee:	429e      	cmp	r6, r3
 80108f0:	d900      	bls.n	80108f4 <__ssputs_r+0x7c>
 80108f2:	9e01      	ldr	r6, [sp, #4]
 80108f4:	0032      	movs	r2, r6
 80108f6:	9903      	ldr	r1, [sp, #12]
 80108f8:	6820      	ldr	r0, [r4, #0]
 80108fa:	f000 f9e5 	bl	8010cc8 <memmove>
 80108fe:	2000      	movs	r0, #0
 8010900:	68a3      	ldr	r3, [r4, #8]
 8010902:	1b9b      	subs	r3, r3, r6
 8010904:	60a3      	str	r3, [r4, #8]
 8010906:	6823      	ldr	r3, [r4, #0]
 8010908:	199b      	adds	r3, r3, r6
 801090a:	6023      	str	r3, [r4, #0]
 801090c:	b005      	add	sp, #20
 801090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010910:	002a      	movs	r2, r5
 8010912:	0038      	movs	r0, r7
 8010914:	f000 fa1f 	bl	8010d56 <_realloc_r>
 8010918:	1e06      	subs	r6, r0, #0
 801091a:	d1df      	bne.n	80108dc <__ssputs_r+0x64>
 801091c:	0038      	movs	r0, r7
 801091e:	6921      	ldr	r1, [r4, #16]
 8010920:	f7fe ff2a 	bl	800f778 <_free_r>
 8010924:	230c      	movs	r3, #12
 8010926:	2001      	movs	r0, #1
 8010928:	603b      	str	r3, [r7, #0]
 801092a:	89a2      	ldrh	r2, [r4, #12]
 801092c:	3334      	adds	r3, #52	; 0x34
 801092e:	4313      	orrs	r3, r2
 8010930:	81a3      	strh	r3, [r4, #12]
 8010932:	4240      	negs	r0, r0
 8010934:	e7ea      	b.n	801090c <__ssputs_r+0x94>
 8010936:	46c0      	nop			; (mov r8, r8)
 8010938:	fffffb7f 	.word	0xfffffb7f

0801093c <_svfiprintf_r>:
 801093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801093e:	b0a1      	sub	sp, #132	; 0x84
 8010940:	9003      	str	r0, [sp, #12]
 8010942:	001d      	movs	r5, r3
 8010944:	898b      	ldrh	r3, [r1, #12]
 8010946:	000f      	movs	r7, r1
 8010948:	0016      	movs	r6, r2
 801094a:	061b      	lsls	r3, r3, #24
 801094c:	d511      	bpl.n	8010972 <_svfiprintf_r+0x36>
 801094e:	690b      	ldr	r3, [r1, #16]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d10e      	bne.n	8010972 <_svfiprintf_r+0x36>
 8010954:	2140      	movs	r1, #64	; 0x40
 8010956:	f7fb ff23 	bl	800c7a0 <_malloc_r>
 801095a:	6038      	str	r0, [r7, #0]
 801095c:	6138      	str	r0, [r7, #16]
 801095e:	2800      	cmp	r0, #0
 8010960:	d105      	bne.n	801096e <_svfiprintf_r+0x32>
 8010962:	230c      	movs	r3, #12
 8010964:	9a03      	ldr	r2, [sp, #12]
 8010966:	3801      	subs	r0, #1
 8010968:	6013      	str	r3, [r2, #0]
 801096a:	b021      	add	sp, #132	; 0x84
 801096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801096e:	2340      	movs	r3, #64	; 0x40
 8010970:	617b      	str	r3, [r7, #20]
 8010972:	2300      	movs	r3, #0
 8010974:	ac08      	add	r4, sp, #32
 8010976:	6163      	str	r3, [r4, #20]
 8010978:	3320      	adds	r3, #32
 801097a:	7663      	strb	r3, [r4, #25]
 801097c:	3310      	adds	r3, #16
 801097e:	76a3      	strb	r3, [r4, #26]
 8010980:	9507      	str	r5, [sp, #28]
 8010982:	0035      	movs	r5, r6
 8010984:	782b      	ldrb	r3, [r5, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d001      	beq.n	801098e <_svfiprintf_r+0x52>
 801098a:	2b25      	cmp	r3, #37	; 0x25
 801098c:	d148      	bne.n	8010a20 <_svfiprintf_r+0xe4>
 801098e:	1bab      	subs	r3, r5, r6
 8010990:	9305      	str	r3, [sp, #20]
 8010992:	42b5      	cmp	r5, r6
 8010994:	d00b      	beq.n	80109ae <_svfiprintf_r+0x72>
 8010996:	0032      	movs	r2, r6
 8010998:	0039      	movs	r1, r7
 801099a:	9803      	ldr	r0, [sp, #12]
 801099c:	f7ff ff6c 	bl	8010878 <__ssputs_r>
 80109a0:	3001      	adds	r0, #1
 80109a2:	d100      	bne.n	80109a6 <_svfiprintf_r+0x6a>
 80109a4:	e0af      	b.n	8010b06 <_svfiprintf_r+0x1ca>
 80109a6:	6963      	ldr	r3, [r4, #20]
 80109a8:	9a05      	ldr	r2, [sp, #20]
 80109aa:	189b      	adds	r3, r3, r2
 80109ac:	6163      	str	r3, [r4, #20]
 80109ae:	782b      	ldrb	r3, [r5, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d100      	bne.n	80109b6 <_svfiprintf_r+0x7a>
 80109b4:	e0a7      	b.n	8010b06 <_svfiprintf_r+0x1ca>
 80109b6:	2201      	movs	r2, #1
 80109b8:	2300      	movs	r3, #0
 80109ba:	4252      	negs	r2, r2
 80109bc:	6062      	str	r2, [r4, #4]
 80109be:	a904      	add	r1, sp, #16
 80109c0:	3254      	adds	r2, #84	; 0x54
 80109c2:	1852      	adds	r2, r2, r1
 80109c4:	1c6e      	adds	r6, r5, #1
 80109c6:	6023      	str	r3, [r4, #0]
 80109c8:	60e3      	str	r3, [r4, #12]
 80109ca:	60a3      	str	r3, [r4, #8]
 80109cc:	7013      	strb	r3, [r2, #0]
 80109ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80109d0:	4b55      	ldr	r3, [pc, #340]	; (8010b28 <_svfiprintf_r+0x1ec>)
 80109d2:	2205      	movs	r2, #5
 80109d4:	0018      	movs	r0, r3
 80109d6:	7831      	ldrb	r1, [r6, #0]
 80109d8:	9305      	str	r3, [sp, #20]
 80109da:	f7fd fff2 	bl	800e9c2 <memchr>
 80109de:	1c75      	adds	r5, r6, #1
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d11f      	bne.n	8010a24 <_svfiprintf_r+0xe8>
 80109e4:	6822      	ldr	r2, [r4, #0]
 80109e6:	06d3      	lsls	r3, r2, #27
 80109e8:	d504      	bpl.n	80109f4 <_svfiprintf_r+0xb8>
 80109ea:	2353      	movs	r3, #83	; 0x53
 80109ec:	a904      	add	r1, sp, #16
 80109ee:	185b      	adds	r3, r3, r1
 80109f0:	2120      	movs	r1, #32
 80109f2:	7019      	strb	r1, [r3, #0]
 80109f4:	0713      	lsls	r3, r2, #28
 80109f6:	d504      	bpl.n	8010a02 <_svfiprintf_r+0xc6>
 80109f8:	2353      	movs	r3, #83	; 0x53
 80109fa:	a904      	add	r1, sp, #16
 80109fc:	185b      	adds	r3, r3, r1
 80109fe:	212b      	movs	r1, #43	; 0x2b
 8010a00:	7019      	strb	r1, [r3, #0]
 8010a02:	7833      	ldrb	r3, [r6, #0]
 8010a04:	2b2a      	cmp	r3, #42	; 0x2a
 8010a06:	d016      	beq.n	8010a36 <_svfiprintf_r+0xfa>
 8010a08:	0035      	movs	r5, r6
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	200a      	movs	r0, #10
 8010a0e:	68e3      	ldr	r3, [r4, #12]
 8010a10:	782a      	ldrb	r2, [r5, #0]
 8010a12:	1c6e      	adds	r6, r5, #1
 8010a14:	3a30      	subs	r2, #48	; 0x30
 8010a16:	2a09      	cmp	r2, #9
 8010a18:	d94e      	bls.n	8010ab8 <_svfiprintf_r+0x17c>
 8010a1a:	2900      	cmp	r1, #0
 8010a1c:	d111      	bne.n	8010a42 <_svfiprintf_r+0x106>
 8010a1e:	e017      	b.n	8010a50 <_svfiprintf_r+0x114>
 8010a20:	3501      	adds	r5, #1
 8010a22:	e7af      	b.n	8010984 <_svfiprintf_r+0x48>
 8010a24:	9b05      	ldr	r3, [sp, #20]
 8010a26:	6822      	ldr	r2, [r4, #0]
 8010a28:	1ac0      	subs	r0, r0, r3
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	4083      	lsls	r3, r0
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	002e      	movs	r6, r5
 8010a32:	6023      	str	r3, [r4, #0]
 8010a34:	e7cc      	b.n	80109d0 <_svfiprintf_r+0x94>
 8010a36:	9b07      	ldr	r3, [sp, #28]
 8010a38:	1d19      	adds	r1, r3, #4
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	9107      	str	r1, [sp, #28]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	db01      	blt.n	8010a46 <_svfiprintf_r+0x10a>
 8010a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a44:	e004      	b.n	8010a50 <_svfiprintf_r+0x114>
 8010a46:	425b      	negs	r3, r3
 8010a48:	60e3      	str	r3, [r4, #12]
 8010a4a:	2302      	movs	r3, #2
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	6023      	str	r3, [r4, #0]
 8010a50:	782b      	ldrb	r3, [r5, #0]
 8010a52:	2b2e      	cmp	r3, #46	; 0x2e
 8010a54:	d10a      	bne.n	8010a6c <_svfiprintf_r+0x130>
 8010a56:	786b      	ldrb	r3, [r5, #1]
 8010a58:	2b2a      	cmp	r3, #42	; 0x2a
 8010a5a:	d135      	bne.n	8010ac8 <_svfiprintf_r+0x18c>
 8010a5c:	9b07      	ldr	r3, [sp, #28]
 8010a5e:	3502      	adds	r5, #2
 8010a60:	1d1a      	adds	r2, r3, #4
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	9207      	str	r2, [sp, #28]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	db2b      	blt.n	8010ac2 <_svfiprintf_r+0x186>
 8010a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a6c:	4e2f      	ldr	r6, [pc, #188]	; (8010b2c <_svfiprintf_r+0x1f0>)
 8010a6e:	2203      	movs	r2, #3
 8010a70:	0030      	movs	r0, r6
 8010a72:	7829      	ldrb	r1, [r5, #0]
 8010a74:	f7fd ffa5 	bl	800e9c2 <memchr>
 8010a78:	2800      	cmp	r0, #0
 8010a7a:	d006      	beq.n	8010a8a <_svfiprintf_r+0x14e>
 8010a7c:	2340      	movs	r3, #64	; 0x40
 8010a7e:	1b80      	subs	r0, r0, r6
 8010a80:	4083      	lsls	r3, r0
 8010a82:	6822      	ldr	r2, [r4, #0]
 8010a84:	3501      	adds	r5, #1
 8010a86:	4313      	orrs	r3, r2
 8010a88:	6023      	str	r3, [r4, #0]
 8010a8a:	7829      	ldrb	r1, [r5, #0]
 8010a8c:	2206      	movs	r2, #6
 8010a8e:	4828      	ldr	r0, [pc, #160]	; (8010b30 <_svfiprintf_r+0x1f4>)
 8010a90:	1c6e      	adds	r6, r5, #1
 8010a92:	7621      	strb	r1, [r4, #24]
 8010a94:	f7fd ff95 	bl	800e9c2 <memchr>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	d03c      	beq.n	8010b16 <_svfiprintf_r+0x1da>
 8010a9c:	4b25      	ldr	r3, [pc, #148]	; (8010b34 <_svfiprintf_r+0x1f8>)
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d125      	bne.n	8010aee <_svfiprintf_r+0x1b2>
 8010aa2:	2207      	movs	r2, #7
 8010aa4:	9b07      	ldr	r3, [sp, #28]
 8010aa6:	3307      	adds	r3, #7
 8010aa8:	4393      	bics	r3, r2
 8010aaa:	3308      	adds	r3, #8
 8010aac:	9307      	str	r3, [sp, #28]
 8010aae:	6963      	ldr	r3, [r4, #20]
 8010ab0:	9a04      	ldr	r2, [sp, #16]
 8010ab2:	189b      	adds	r3, r3, r2
 8010ab4:	6163      	str	r3, [r4, #20]
 8010ab6:	e764      	b.n	8010982 <_svfiprintf_r+0x46>
 8010ab8:	4343      	muls	r3, r0
 8010aba:	0035      	movs	r5, r6
 8010abc:	2101      	movs	r1, #1
 8010abe:	189b      	adds	r3, r3, r2
 8010ac0:	e7a6      	b.n	8010a10 <_svfiprintf_r+0xd4>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	425b      	negs	r3, r3
 8010ac6:	e7d0      	b.n	8010a6a <_svfiprintf_r+0x12e>
 8010ac8:	2300      	movs	r3, #0
 8010aca:	200a      	movs	r0, #10
 8010acc:	001a      	movs	r2, r3
 8010ace:	3501      	adds	r5, #1
 8010ad0:	6063      	str	r3, [r4, #4]
 8010ad2:	7829      	ldrb	r1, [r5, #0]
 8010ad4:	1c6e      	adds	r6, r5, #1
 8010ad6:	3930      	subs	r1, #48	; 0x30
 8010ad8:	2909      	cmp	r1, #9
 8010ada:	d903      	bls.n	8010ae4 <_svfiprintf_r+0x1a8>
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d0c5      	beq.n	8010a6c <_svfiprintf_r+0x130>
 8010ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8010ae2:	e7c3      	b.n	8010a6c <_svfiprintf_r+0x130>
 8010ae4:	4342      	muls	r2, r0
 8010ae6:	0035      	movs	r5, r6
 8010ae8:	2301      	movs	r3, #1
 8010aea:	1852      	adds	r2, r2, r1
 8010aec:	e7f1      	b.n	8010ad2 <_svfiprintf_r+0x196>
 8010aee:	aa07      	add	r2, sp, #28
 8010af0:	9200      	str	r2, [sp, #0]
 8010af2:	0021      	movs	r1, r4
 8010af4:	003a      	movs	r2, r7
 8010af6:	4b10      	ldr	r3, [pc, #64]	; (8010b38 <_svfiprintf_r+0x1fc>)
 8010af8:	9803      	ldr	r0, [sp, #12]
 8010afa:	f7fc fe59 	bl	800d7b0 <_printf_float>
 8010afe:	9004      	str	r0, [sp, #16]
 8010b00:	9b04      	ldr	r3, [sp, #16]
 8010b02:	3301      	adds	r3, #1
 8010b04:	d1d3      	bne.n	8010aae <_svfiprintf_r+0x172>
 8010b06:	89bb      	ldrh	r3, [r7, #12]
 8010b08:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010b0a:	065b      	lsls	r3, r3, #25
 8010b0c:	d400      	bmi.n	8010b10 <_svfiprintf_r+0x1d4>
 8010b0e:	e72c      	b.n	801096a <_svfiprintf_r+0x2e>
 8010b10:	2001      	movs	r0, #1
 8010b12:	4240      	negs	r0, r0
 8010b14:	e729      	b.n	801096a <_svfiprintf_r+0x2e>
 8010b16:	aa07      	add	r2, sp, #28
 8010b18:	9200      	str	r2, [sp, #0]
 8010b1a:	0021      	movs	r1, r4
 8010b1c:	003a      	movs	r2, r7
 8010b1e:	4b06      	ldr	r3, [pc, #24]	; (8010b38 <_svfiprintf_r+0x1fc>)
 8010b20:	9803      	ldr	r0, [sp, #12]
 8010b22:	f7fd f90b 	bl	800dd3c <_printf_i>
 8010b26:	e7ea      	b.n	8010afe <_svfiprintf_r+0x1c2>
 8010b28:	080139e4 	.word	0x080139e4
 8010b2c:	080139ea 	.word	0x080139ea
 8010b30:	080139ee 	.word	0x080139ee
 8010b34:	0800d7b1 	.word	0x0800d7b1
 8010b38:	08010879 	.word	0x08010879

08010b3c <__sflush_r>:
 8010b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b3e:	898b      	ldrh	r3, [r1, #12]
 8010b40:	0005      	movs	r5, r0
 8010b42:	000c      	movs	r4, r1
 8010b44:	071a      	lsls	r2, r3, #28
 8010b46:	d45c      	bmi.n	8010c02 <__sflush_r+0xc6>
 8010b48:	684a      	ldr	r2, [r1, #4]
 8010b4a:	2a00      	cmp	r2, #0
 8010b4c:	dc04      	bgt.n	8010b58 <__sflush_r+0x1c>
 8010b4e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8010b50:	2a00      	cmp	r2, #0
 8010b52:	dc01      	bgt.n	8010b58 <__sflush_r+0x1c>
 8010b54:	2000      	movs	r0, #0
 8010b56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010b5a:	2f00      	cmp	r7, #0
 8010b5c:	d0fa      	beq.n	8010b54 <__sflush_r+0x18>
 8010b5e:	2200      	movs	r2, #0
 8010b60:	2080      	movs	r0, #128	; 0x80
 8010b62:	682e      	ldr	r6, [r5, #0]
 8010b64:	602a      	str	r2, [r5, #0]
 8010b66:	001a      	movs	r2, r3
 8010b68:	0140      	lsls	r0, r0, #5
 8010b6a:	6a21      	ldr	r1, [r4, #32]
 8010b6c:	4002      	ands	r2, r0
 8010b6e:	4203      	tst	r3, r0
 8010b70:	d034      	beq.n	8010bdc <__sflush_r+0xa0>
 8010b72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b74:	89a3      	ldrh	r3, [r4, #12]
 8010b76:	075b      	lsls	r3, r3, #29
 8010b78:	d506      	bpl.n	8010b88 <__sflush_r+0x4c>
 8010b7a:	6863      	ldr	r3, [r4, #4]
 8010b7c:	1ac0      	subs	r0, r0, r3
 8010b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d001      	beq.n	8010b88 <__sflush_r+0x4c>
 8010b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b86:	1ac0      	subs	r0, r0, r3
 8010b88:	0002      	movs	r2, r0
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	0028      	movs	r0, r5
 8010b8e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010b90:	6a21      	ldr	r1, [r4, #32]
 8010b92:	47b8      	blx	r7
 8010b94:	89a2      	ldrh	r2, [r4, #12]
 8010b96:	1c43      	adds	r3, r0, #1
 8010b98:	d106      	bne.n	8010ba8 <__sflush_r+0x6c>
 8010b9a:	6829      	ldr	r1, [r5, #0]
 8010b9c:	291d      	cmp	r1, #29
 8010b9e:	d82c      	bhi.n	8010bfa <__sflush_r+0xbe>
 8010ba0:	4b2a      	ldr	r3, [pc, #168]	; (8010c4c <__sflush_r+0x110>)
 8010ba2:	410b      	asrs	r3, r1
 8010ba4:	07db      	lsls	r3, r3, #31
 8010ba6:	d428      	bmi.n	8010bfa <__sflush_r+0xbe>
 8010ba8:	2300      	movs	r3, #0
 8010baa:	6063      	str	r3, [r4, #4]
 8010bac:	6923      	ldr	r3, [r4, #16]
 8010bae:	6023      	str	r3, [r4, #0]
 8010bb0:	04d2      	lsls	r2, r2, #19
 8010bb2:	d505      	bpl.n	8010bc0 <__sflush_r+0x84>
 8010bb4:	1c43      	adds	r3, r0, #1
 8010bb6:	d102      	bne.n	8010bbe <__sflush_r+0x82>
 8010bb8:	682b      	ldr	r3, [r5, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d100      	bne.n	8010bc0 <__sflush_r+0x84>
 8010bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8010bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bc2:	602e      	str	r6, [r5, #0]
 8010bc4:	2900      	cmp	r1, #0
 8010bc6:	d0c5      	beq.n	8010b54 <__sflush_r+0x18>
 8010bc8:	0023      	movs	r3, r4
 8010bca:	3344      	adds	r3, #68	; 0x44
 8010bcc:	4299      	cmp	r1, r3
 8010bce:	d002      	beq.n	8010bd6 <__sflush_r+0x9a>
 8010bd0:	0028      	movs	r0, r5
 8010bd2:	f7fe fdd1 	bl	800f778 <_free_r>
 8010bd6:	2000      	movs	r0, #0
 8010bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8010bda:	e7bc      	b.n	8010b56 <__sflush_r+0x1a>
 8010bdc:	2301      	movs	r3, #1
 8010bde:	0028      	movs	r0, r5
 8010be0:	47b8      	blx	r7
 8010be2:	1c43      	adds	r3, r0, #1
 8010be4:	d1c6      	bne.n	8010b74 <__sflush_r+0x38>
 8010be6:	682b      	ldr	r3, [r5, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d0c3      	beq.n	8010b74 <__sflush_r+0x38>
 8010bec:	2b1d      	cmp	r3, #29
 8010bee:	d001      	beq.n	8010bf4 <__sflush_r+0xb8>
 8010bf0:	2b16      	cmp	r3, #22
 8010bf2:	d101      	bne.n	8010bf8 <__sflush_r+0xbc>
 8010bf4:	602e      	str	r6, [r5, #0]
 8010bf6:	e7ad      	b.n	8010b54 <__sflush_r+0x18>
 8010bf8:	89a2      	ldrh	r2, [r4, #12]
 8010bfa:	2340      	movs	r3, #64	; 0x40
 8010bfc:	4313      	orrs	r3, r2
 8010bfe:	81a3      	strh	r3, [r4, #12]
 8010c00:	e7a9      	b.n	8010b56 <__sflush_r+0x1a>
 8010c02:	690e      	ldr	r6, [r1, #16]
 8010c04:	2e00      	cmp	r6, #0
 8010c06:	d0a5      	beq.n	8010b54 <__sflush_r+0x18>
 8010c08:	680f      	ldr	r7, [r1, #0]
 8010c0a:	600e      	str	r6, [r1, #0]
 8010c0c:	1bba      	subs	r2, r7, r6
 8010c0e:	9201      	str	r2, [sp, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	079b      	lsls	r3, r3, #30
 8010c14:	d100      	bne.n	8010c18 <__sflush_r+0xdc>
 8010c16:	694a      	ldr	r2, [r1, #20]
 8010c18:	60a2      	str	r2, [r4, #8]
 8010c1a:	9b01      	ldr	r3, [sp, #4]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	dd99      	ble.n	8010b54 <__sflush_r+0x18>
 8010c20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010c22:	0032      	movs	r2, r6
 8010c24:	001f      	movs	r7, r3
 8010c26:	0028      	movs	r0, r5
 8010c28:	9b01      	ldr	r3, [sp, #4]
 8010c2a:	6a21      	ldr	r1, [r4, #32]
 8010c2c:	47b8      	blx	r7
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	dc06      	bgt.n	8010c40 <__sflush_r+0x104>
 8010c32:	2340      	movs	r3, #64	; 0x40
 8010c34:	2001      	movs	r0, #1
 8010c36:	89a2      	ldrh	r2, [r4, #12]
 8010c38:	4240      	negs	r0, r0
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	81a3      	strh	r3, [r4, #12]
 8010c3e:	e78a      	b.n	8010b56 <__sflush_r+0x1a>
 8010c40:	9b01      	ldr	r3, [sp, #4]
 8010c42:	1836      	adds	r6, r6, r0
 8010c44:	1a1b      	subs	r3, r3, r0
 8010c46:	9301      	str	r3, [sp, #4]
 8010c48:	e7e7      	b.n	8010c1a <__sflush_r+0xde>
 8010c4a:	46c0      	nop			; (mov r8, r8)
 8010c4c:	dfbffffe 	.word	0xdfbffffe

08010c50 <_fflush_r>:
 8010c50:	690b      	ldr	r3, [r1, #16]
 8010c52:	b570      	push	{r4, r5, r6, lr}
 8010c54:	0005      	movs	r5, r0
 8010c56:	000c      	movs	r4, r1
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d102      	bne.n	8010c62 <_fflush_r+0x12>
 8010c5c:	2500      	movs	r5, #0
 8010c5e:	0028      	movs	r0, r5
 8010c60:	bd70      	pop	{r4, r5, r6, pc}
 8010c62:	2800      	cmp	r0, #0
 8010c64:	d004      	beq.n	8010c70 <_fflush_r+0x20>
 8010c66:	6a03      	ldr	r3, [r0, #32]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d101      	bne.n	8010c70 <_fflush_r+0x20>
 8010c6c:	f7fd fc0e 	bl	800e48c <__sinit>
 8010c70:	220c      	movs	r2, #12
 8010c72:	5ea3      	ldrsh	r3, [r4, r2]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d0f1      	beq.n	8010c5c <_fflush_r+0xc>
 8010c78:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c7a:	07d2      	lsls	r2, r2, #31
 8010c7c:	d404      	bmi.n	8010c88 <_fflush_r+0x38>
 8010c7e:	059b      	lsls	r3, r3, #22
 8010c80:	d402      	bmi.n	8010c88 <_fflush_r+0x38>
 8010c82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c84:	f7fd fe93 	bl	800e9ae <__retarget_lock_acquire_recursive>
 8010c88:	0028      	movs	r0, r5
 8010c8a:	0021      	movs	r1, r4
 8010c8c:	f7ff ff56 	bl	8010b3c <__sflush_r>
 8010c90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c92:	0005      	movs	r5, r0
 8010c94:	07db      	lsls	r3, r3, #31
 8010c96:	d4e2      	bmi.n	8010c5e <_fflush_r+0xe>
 8010c98:	89a3      	ldrh	r3, [r4, #12]
 8010c9a:	059b      	lsls	r3, r3, #22
 8010c9c:	d4df      	bmi.n	8010c5e <_fflush_r+0xe>
 8010c9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ca0:	f7fd fe86 	bl	800e9b0 <__retarget_lock_release_recursive>
 8010ca4:	e7db      	b.n	8010c5e <_fflush_r+0xe>
	...

08010ca8 <fiprintf>:
 8010ca8:	b40e      	push	{r1, r2, r3}
 8010caa:	b517      	push	{r0, r1, r2, r4, lr}
 8010cac:	4c05      	ldr	r4, [pc, #20]	; (8010cc4 <fiprintf+0x1c>)
 8010cae:	ab05      	add	r3, sp, #20
 8010cb0:	cb04      	ldmia	r3!, {r2}
 8010cb2:	0001      	movs	r1, r0
 8010cb4:	6820      	ldr	r0, [r4, #0]
 8010cb6:	9301      	str	r3, [sp, #4]
 8010cb8:	f000 f8a4 	bl	8010e04 <_vfiprintf_r>
 8010cbc:	bc1e      	pop	{r1, r2, r3, r4}
 8010cbe:	bc08      	pop	{r3}
 8010cc0:	b003      	add	sp, #12
 8010cc2:	4718      	bx	r3
 8010cc4:	200002b8 	.word	0x200002b8

08010cc8 <memmove>:
 8010cc8:	b510      	push	{r4, lr}
 8010cca:	4288      	cmp	r0, r1
 8010ccc:	d902      	bls.n	8010cd4 <memmove+0xc>
 8010cce:	188b      	adds	r3, r1, r2
 8010cd0:	4298      	cmp	r0, r3
 8010cd2:	d303      	bcc.n	8010cdc <memmove+0x14>
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	e007      	b.n	8010ce8 <memmove+0x20>
 8010cd8:	5c8b      	ldrb	r3, [r1, r2]
 8010cda:	5483      	strb	r3, [r0, r2]
 8010cdc:	3a01      	subs	r2, #1
 8010cde:	d2fb      	bcs.n	8010cd8 <memmove+0x10>
 8010ce0:	bd10      	pop	{r4, pc}
 8010ce2:	5ccc      	ldrb	r4, [r1, r3]
 8010ce4:	54c4      	strb	r4, [r0, r3]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d1fa      	bne.n	8010ce2 <memmove+0x1a>
 8010cec:	e7f8      	b.n	8010ce0 <memmove+0x18>

08010cee <abort>:
 8010cee:	2006      	movs	r0, #6
 8010cf0:	b510      	push	{r4, lr}
 8010cf2:	f000 fa73 	bl	80111dc <raise>
 8010cf6:	2001      	movs	r0, #1
 8010cf8:	f7f6 fc2e 	bl	8007558 <_exit>

08010cfc <_calloc_r>:
 8010cfc:	b570      	push	{r4, r5, r6, lr}
 8010cfe:	0c0b      	lsrs	r3, r1, #16
 8010d00:	0c15      	lsrs	r5, r2, #16
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d11e      	bne.n	8010d44 <_calloc_r+0x48>
 8010d06:	2d00      	cmp	r5, #0
 8010d08:	d10c      	bne.n	8010d24 <_calloc_r+0x28>
 8010d0a:	b289      	uxth	r1, r1
 8010d0c:	b294      	uxth	r4, r2
 8010d0e:	434c      	muls	r4, r1
 8010d10:	0021      	movs	r1, r4
 8010d12:	f7fb fd45 	bl	800c7a0 <_malloc_r>
 8010d16:	1e05      	subs	r5, r0, #0
 8010d18:	d01b      	beq.n	8010d52 <_calloc_r+0x56>
 8010d1a:	0022      	movs	r2, r4
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	f7fd fc89 	bl	800e634 <memset>
 8010d22:	e016      	b.n	8010d52 <_calloc_r+0x56>
 8010d24:	1c2b      	adds	r3, r5, #0
 8010d26:	1c0c      	adds	r4, r1, #0
 8010d28:	b289      	uxth	r1, r1
 8010d2a:	b292      	uxth	r2, r2
 8010d2c:	434a      	muls	r2, r1
 8010d2e:	b2a1      	uxth	r1, r4
 8010d30:	b29c      	uxth	r4, r3
 8010d32:	434c      	muls	r4, r1
 8010d34:	0c13      	lsrs	r3, r2, #16
 8010d36:	18e4      	adds	r4, r4, r3
 8010d38:	0c23      	lsrs	r3, r4, #16
 8010d3a:	d107      	bne.n	8010d4c <_calloc_r+0x50>
 8010d3c:	0424      	lsls	r4, r4, #16
 8010d3e:	b292      	uxth	r2, r2
 8010d40:	4314      	orrs	r4, r2
 8010d42:	e7e5      	b.n	8010d10 <_calloc_r+0x14>
 8010d44:	2d00      	cmp	r5, #0
 8010d46:	d101      	bne.n	8010d4c <_calloc_r+0x50>
 8010d48:	1c14      	adds	r4, r2, #0
 8010d4a:	e7ed      	b.n	8010d28 <_calloc_r+0x2c>
 8010d4c:	230c      	movs	r3, #12
 8010d4e:	2500      	movs	r5, #0
 8010d50:	6003      	str	r3, [r0, #0]
 8010d52:	0028      	movs	r0, r5
 8010d54:	bd70      	pop	{r4, r5, r6, pc}

08010d56 <_realloc_r>:
 8010d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d58:	0007      	movs	r7, r0
 8010d5a:	000e      	movs	r6, r1
 8010d5c:	0014      	movs	r4, r2
 8010d5e:	2900      	cmp	r1, #0
 8010d60:	d105      	bne.n	8010d6e <_realloc_r+0x18>
 8010d62:	0011      	movs	r1, r2
 8010d64:	f7fb fd1c 	bl	800c7a0 <_malloc_r>
 8010d68:	0005      	movs	r5, r0
 8010d6a:	0028      	movs	r0, r5
 8010d6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010d6e:	2a00      	cmp	r2, #0
 8010d70:	d103      	bne.n	8010d7a <_realloc_r+0x24>
 8010d72:	f7fe fd01 	bl	800f778 <_free_r>
 8010d76:	0025      	movs	r5, r4
 8010d78:	e7f7      	b.n	8010d6a <_realloc_r+0x14>
 8010d7a:	f000 fa4f 	bl	801121c <_malloc_usable_size_r>
 8010d7e:	9001      	str	r0, [sp, #4]
 8010d80:	4284      	cmp	r4, r0
 8010d82:	d803      	bhi.n	8010d8c <_realloc_r+0x36>
 8010d84:	0035      	movs	r5, r6
 8010d86:	0843      	lsrs	r3, r0, #1
 8010d88:	42a3      	cmp	r3, r4
 8010d8a:	d3ee      	bcc.n	8010d6a <_realloc_r+0x14>
 8010d8c:	0021      	movs	r1, r4
 8010d8e:	0038      	movs	r0, r7
 8010d90:	f7fb fd06 	bl	800c7a0 <_malloc_r>
 8010d94:	1e05      	subs	r5, r0, #0
 8010d96:	d0e8      	beq.n	8010d6a <_realloc_r+0x14>
 8010d98:	9b01      	ldr	r3, [sp, #4]
 8010d9a:	0022      	movs	r2, r4
 8010d9c:	429c      	cmp	r4, r3
 8010d9e:	d900      	bls.n	8010da2 <_realloc_r+0x4c>
 8010da0:	001a      	movs	r2, r3
 8010da2:	0031      	movs	r1, r6
 8010da4:	0028      	movs	r0, r5
 8010da6:	f7fd fe17 	bl	800e9d8 <memcpy>
 8010daa:	0031      	movs	r1, r6
 8010dac:	0038      	movs	r0, r7
 8010dae:	f7fe fce3 	bl	800f778 <_free_r>
 8010db2:	e7da      	b.n	8010d6a <_realloc_r+0x14>

08010db4 <__sfputc_r>:
 8010db4:	6893      	ldr	r3, [r2, #8]
 8010db6:	b510      	push	{r4, lr}
 8010db8:	3b01      	subs	r3, #1
 8010dba:	6093      	str	r3, [r2, #8]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	da04      	bge.n	8010dca <__sfputc_r+0x16>
 8010dc0:	6994      	ldr	r4, [r2, #24]
 8010dc2:	42a3      	cmp	r3, r4
 8010dc4:	db07      	blt.n	8010dd6 <__sfputc_r+0x22>
 8010dc6:	290a      	cmp	r1, #10
 8010dc8:	d005      	beq.n	8010dd6 <__sfputc_r+0x22>
 8010dca:	6813      	ldr	r3, [r2, #0]
 8010dcc:	1c58      	adds	r0, r3, #1
 8010dce:	6010      	str	r0, [r2, #0]
 8010dd0:	7019      	strb	r1, [r3, #0]
 8010dd2:	0008      	movs	r0, r1
 8010dd4:	bd10      	pop	{r4, pc}
 8010dd6:	f000 f931 	bl	801103c <__swbuf_r>
 8010dda:	0001      	movs	r1, r0
 8010ddc:	e7f9      	b.n	8010dd2 <__sfputc_r+0x1e>

08010dde <__sfputs_r>:
 8010dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de0:	0006      	movs	r6, r0
 8010de2:	000f      	movs	r7, r1
 8010de4:	0014      	movs	r4, r2
 8010de6:	18d5      	adds	r5, r2, r3
 8010de8:	42ac      	cmp	r4, r5
 8010dea:	d101      	bne.n	8010df0 <__sfputs_r+0x12>
 8010dec:	2000      	movs	r0, #0
 8010dee:	e007      	b.n	8010e00 <__sfputs_r+0x22>
 8010df0:	7821      	ldrb	r1, [r4, #0]
 8010df2:	003a      	movs	r2, r7
 8010df4:	0030      	movs	r0, r6
 8010df6:	f7ff ffdd 	bl	8010db4 <__sfputc_r>
 8010dfa:	3401      	adds	r4, #1
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d1f3      	bne.n	8010de8 <__sfputs_r+0xa>
 8010e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e04 <_vfiprintf_r>:
 8010e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e06:	b0a1      	sub	sp, #132	; 0x84
 8010e08:	000f      	movs	r7, r1
 8010e0a:	0015      	movs	r5, r2
 8010e0c:	001e      	movs	r6, r3
 8010e0e:	9003      	str	r0, [sp, #12]
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d004      	beq.n	8010e1e <_vfiprintf_r+0x1a>
 8010e14:	6a03      	ldr	r3, [r0, #32]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d101      	bne.n	8010e1e <_vfiprintf_r+0x1a>
 8010e1a:	f7fd fb37 	bl	800e48c <__sinit>
 8010e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e20:	07db      	lsls	r3, r3, #31
 8010e22:	d405      	bmi.n	8010e30 <_vfiprintf_r+0x2c>
 8010e24:	89bb      	ldrh	r3, [r7, #12]
 8010e26:	059b      	lsls	r3, r3, #22
 8010e28:	d402      	bmi.n	8010e30 <_vfiprintf_r+0x2c>
 8010e2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010e2c:	f7fd fdbf 	bl	800e9ae <__retarget_lock_acquire_recursive>
 8010e30:	89bb      	ldrh	r3, [r7, #12]
 8010e32:	071b      	lsls	r3, r3, #28
 8010e34:	d502      	bpl.n	8010e3c <_vfiprintf_r+0x38>
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d113      	bne.n	8010e64 <_vfiprintf_r+0x60>
 8010e3c:	0039      	movs	r1, r7
 8010e3e:	9803      	ldr	r0, [sp, #12]
 8010e40:	f000 f93e 	bl	80110c0 <__swsetup_r>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d00d      	beq.n	8010e64 <_vfiprintf_r+0x60>
 8010e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e4a:	07db      	lsls	r3, r3, #31
 8010e4c:	d503      	bpl.n	8010e56 <_vfiprintf_r+0x52>
 8010e4e:	2001      	movs	r0, #1
 8010e50:	4240      	negs	r0, r0
 8010e52:	b021      	add	sp, #132	; 0x84
 8010e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e56:	89bb      	ldrh	r3, [r7, #12]
 8010e58:	059b      	lsls	r3, r3, #22
 8010e5a:	d4f8      	bmi.n	8010e4e <_vfiprintf_r+0x4a>
 8010e5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010e5e:	f7fd fda7 	bl	800e9b0 <__retarget_lock_release_recursive>
 8010e62:	e7f4      	b.n	8010e4e <_vfiprintf_r+0x4a>
 8010e64:	2300      	movs	r3, #0
 8010e66:	ac08      	add	r4, sp, #32
 8010e68:	6163      	str	r3, [r4, #20]
 8010e6a:	3320      	adds	r3, #32
 8010e6c:	7663      	strb	r3, [r4, #25]
 8010e6e:	3310      	adds	r3, #16
 8010e70:	76a3      	strb	r3, [r4, #26]
 8010e72:	9607      	str	r6, [sp, #28]
 8010e74:	002e      	movs	r6, r5
 8010e76:	7833      	ldrb	r3, [r6, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d001      	beq.n	8010e80 <_vfiprintf_r+0x7c>
 8010e7c:	2b25      	cmp	r3, #37	; 0x25
 8010e7e:	d148      	bne.n	8010f12 <_vfiprintf_r+0x10e>
 8010e80:	1b73      	subs	r3, r6, r5
 8010e82:	9305      	str	r3, [sp, #20]
 8010e84:	42ae      	cmp	r6, r5
 8010e86:	d00b      	beq.n	8010ea0 <_vfiprintf_r+0x9c>
 8010e88:	002a      	movs	r2, r5
 8010e8a:	0039      	movs	r1, r7
 8010e8c:	9803      	ldr	r0, [sp, #12]
 8010e8e:	f7ff ffa6 	bl	8010dde <__sfputs_r>
 8010e92:	3001      	adds	r0, #1
 8010e94:	d100      	bne.n	8010e98 <_vfiprintf_r+0x94>
 8010e96:	e0af      	b.n	8010ff8 <_vfiprintf_r+0x1f4>
 8010e98:	6963      	ldr	r3, [r4, #20]
 8010e9a:	9a05      	ldr	r2, [sp, #20]
 8010e9c:	189b      	adds	r3, r3, r2
 8010e9e:	6163      	str	r3, [r4, #20]
 8010ea0:	7833      	ldrb	r3, [r6, #0]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d100      	bne.n	8010ea8 <_vfiprintf_r+0xa4>
 8010ea6:	e0a7      	b.n	8010ff8 <_vfiprintf_r+0x1f4>
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	2300      	movs	r3, #0
 8010eac:	4252      	negs	r2, r2
 8010eae:	6062      	str	r2, [r4, #4]
 8010eb0:	a904      	add	r1, sp, #16
 8010eb2:	3254      	adds	r2, #84	; 0x54
 8010eb4:	1852      	adds	r2, r2, r1
 8010eb6:	1c75      	adds	r5, r6, #1
 8010eb8:	6023      	str	r3, [r4, #0]
 8010eba:	60e3      	str	r3, [r4, #12]
 8010ebc:	60a3      	str	r3, [r4, #8]
 8010ebe:	7013      	strb	r3, [r2, #0]
 8010ec0:	65a3      	str	r3, [r4, #88]	; 0x58
 8010ec2:	4b59      	ldr	r3, [pc, #356]	; (8011028 <_vfiprintf_r+0x224>)
 8010ec4:	2205      	movs	r2, #5
 8010ec6:	0018      	movs	r0, r3
 8010ec8:	7829      	ldrb	r1, [r5, #0]
 8010eca:	9305      	str	r3, [sp, #20]
 8010ecc:	f7fd fd79 	bl	800e9c2 <memchr>
 8010ed0:	1c6e      	adds	r6, r5, #1
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d11f      	bne.n	8010f16 <_vfiprintf_r+0x112>
 8010ed6:	6822      	ldr	r2, [r4, #0]
 8010ed8:	06d3      	lsls	r3, r2, #27
 8010eda:	d504      	bpl.n	8010ee6 <_vfiprintf_r+0xe2>
 8010edc:	2353      	movs	r3, #83	; 0x53
 8010ede:	a904      	add	r1, sp, #16
 8010ee0:	185b      	adds	r3, r3, r1
 8010ee2:	2120      	movs	r1, #32
 8010ee4:	7019      	strb	r1, [r3, #0]
 8010ee6:	0713      	lsls	r3, r2, #28
 8010ee8:	d504      	bpl.n	8010ef4 <_vfiprintf_r+0xf0>
 8010eea:	2353      	movs	r3, #83	; 0x53
 8010eec:	a904      	add	r1, sp, #16
 8010eee:	185b      	adds	r3, r3, r1
 8010ef0:	212b      	movs	r1, #43	; 0x2b
 8010ef2:	7019      	strb	r1, [r3, #0]
 8010ef4:	782b      	ldrb	r3, [r5, #0]
 8010ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ef8:	d016      	beq.n	8010f28 <_vfiprintf_r+0x124>
 8010efa:	002e      	movs	r6, r5
 8010efc:	2100      	movs	r1, #0
 8010efe:	200a      	movs	r0, #10
 8010f00:	68e3      	ldr	r3, [r4, #12]
 8010f02:	7832      	ldrb	r2, [r6, #0]
 8010f04:	1c75      	adds	r5, r6, #1
 8010f06:	3a30      	subs	r2, #48	; 0x30
 8010f08:	2a09      	cmp	r2, #9
 8010f0a:	d94e      	bls.n	8010faa <_vfiprintf_r+0x1a6>
 8010f0c:	2900      	cmp	r1, #0
 8010f0e:	d111      	bne.n	8010f34 <_vfiprintf_r+0x130>
 8010f10:	e017      	b.n	8010f42 <_vfiprintf_r+0x13e>
 8010f12:	3601      	adds	r6, #1
 8010f14:	e7af      	b.n	8010e76 <_vfiprintf_r+0x72>
 8010f16:	9b05      	ldr	r3, [sp, #20]
 8010f18:	6822      	ldr	r2, [r4, #0]
 8010f1a:	1ac0      	subs	r0, r0, r3
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	4083      	lsls	r3, r0
 8010f20:	4313      	orrs	r3, r2
 8010f22:	0035      	movs	r5, r6
 8010f24:	6023      	str	r3, [r4, #0]
 8010f26:	e7cc      	b.n	8010ec2 <_vfiprintf_r+0xbe>
 8010f28:	9b07      	ldr	r3, [sp, #28]
 8010f2a:	1d19      	adds	r1, r3, #4
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	9107      	str	r1, [sp, #28]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	db01      	blt.n	8010f38 <_vfiprintf_r+0x134>
 8010f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f36:	e004      	b.n	8010f42 <_vfiprintf_r+0x13e>
 8010f38:	425b      	negs	r3, r3
 8010f3a:	60e3      	str	r3, [r4, #12]
 8010f3c:	2302      	movs	r3, #2
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	6023      	str	r3, [r4, #0]
 8010f42:	7833      	ldrb	r3, [r6, #0]
 8010f44:	2b2e      	cmp	r3, #46	; 0x2e
 8010f46:	d10a      	bne.n	8010f5e <_vfiprintf_r+0x15a>
 8010f48:	7873      	ldrb	r3, [r6, #1]
 8010f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f4c:	d135      	bne.n	8010fba <_vfiprintf_r+0x1b6>
 8010f4e:	9b07      	ldr	r3, [sp, #28]
 8010f50:	3602      	adds	r6, #2
 8010f52:	1d1a      	adds	r2, r3, #4
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	9207      	str	r2, [sp, #28]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	db2b      	blt.n	8010fb4 <_vfiprintf_r+0x1b0>
 8010f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8010f5e:	4d33      	ldr	r5, [pc, #204]	; (801102c <_vfiprintf_r+0x228>)
 8010f60:	2203      	movs	r2, #3
 8010f62:	0028      	movs	r0, r5
 8010f64:	7831      	ldrb	r1, [r6, #0]
 8010f66:	f7fd fd2c 	bl	800e9c2 <memchr>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d006      	beq.n	8010f7c <_vfiprintf_r+0x178>
 8010f6e:	2340      	movs	r3, #64	; 0x40
 8010f70:	1b40      	subs	r0, r0, r5
 8010f72:	4083      	lsls	r3, r0
 8010f74:	6822      	ldr	r2, [r4, #0]
 8010f76:	3601      	adds	r6, #1
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	6023      	str	r3, [r4, #0]
 8010f7c:	7831      	ldrb	r1, [r6, #0]
 8010f7e:	2206      	movs	r2, #6
 8010f80:	482b      	ldr	r0, [pc, #172]	; (8011030 <_vfiprintf_r+0x22c>)
 8010f82:	1c75      	adds	r5, r6, #1
 8010f84:	7621      	strb	r1, [r4, #24]
 8010f86:	f7fd fd1c 	bl	800e9c2 <memchr>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d043      	beq.n	8011016 <_vfiprintf_r+0x212>
 8010f8e:	4b29      	ldr	r3, [pc, #164]	; (8011034 <_vfiprintf_r+0x230>)
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d125      	bne.n	8010fe0 <_vfiprintf_r+0x1dc>
 8010f94:	2207      	movs	r2, #7
 8010f96:	9b07      	ldr	r3, [sp, #28]
 8010f98:	3307      	adds	r3, #7
 8010f9a:	4393      	bics	r3, r2
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	9307      	str	r3, [sp, #28]
 8010fa0:	6963      	ldr	r3, [r4, #20]
 8010fa2:	9a04      	ldr	r2, [sp, #16]
 8010fa4:	189b      	adds	r3, r3, r2
 8010fa6:	6163      	str	r3, [r4, #20]
 8010fa8:	e764      	b.n	8010e74 <_vfiprintf_r+0x70>
 8010faa:	4343      	muls	r3, r0
 8010fac:	002e      	movs	r6, r5
 8010fae:	2101      	movs	r1, #1
 8010fb0:	189b      	adds	r3, r3, r2
 8010fb2:	e7a6      	b.n	8010f02 <_vfiprintf_r+0xfe>
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	425b      	negs	r3, r3
 8010fb8:	e7d0      	b.n	8010f5c <_vfiprintf_r+0x158>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	200a      	movs	r0, #10
 8010fbe:	001a      	movs	r2, r3
 8010fc0:	3601      	adds	r6, #1
 8010fc2:	6063      	str	r3, [r4, #4]
 8010fc4:	7831      	ldrb	r1, [r6, #0]
 8010fc6:	1c75      	adds	r5, r6, #1
 8010fc8:	3930      	subs	r1, #48	; 0x30
 8010fca:	2909      	cmp	r1, #9
 8010fcc:	d903      	bls.n	8010fd6 <_vfiprintf_r+0x1d2>
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d0c5      	beq.n	8010f5e <_vfiprintf_r+0x15a>
 8010fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8010fd4:	e7c3      	b.n	8010f5e <_vfiprintf_r+0x15a>
 8010fd6:	4342      	muls	r2, r0
 8010fd8:	002e      	movs	r6, r5
 8010fda:	2301      	movs	r3, #1
 8010fdc:	1852      	adds	r2, r2, r1
 8010fde:	e7f1      	b.n	8010fc4 <_vfiprintf_r+0x1c0>
 8010fe0:	aa07      	add	r2, sp, #28
 8010fe2:	9200      	str	r2, [sp, #0]
 8010fe4:	0021      	movs	r1, r4
 8010fe6:	003a      	movs	r2, r7
 8010fe8:	4b13      	ldr	r3, [pc, #76]	; (8011038 <_vfiprintf_r+0x234>)
 8010fea:	9803      	ldr	r0, [sp, #12]
 8010fec:	f7fc fbe0 	bl	800d7b0 <_printf_float>
 8010ff0:	9004      	str	r0, [sp, #16]
 8010ff2:	9b04      	ldr	r3, [sp, #16]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	d1d3      	bne.n	8010fa0 <_vfiprintf_r+0x19c>
 8010ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ffa:	07db      	lsls	r3, r3, #31
 8010ffc:	d405      	bmi.n	801100a <_vfiprintf_r+0x206>
 8010ffe:	89bb      	ldrh	r3, [r7, #12]
 8011000:	059b      	lsls	r3, r3, #22
 8011002:	d402      	bmi.n	801100a <_vfiprintf_r+0x206>
 8011004:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011006:	f7fd fcd3 	bl	800e9b0 <__retarget_lock_release_recursive>
 801100a:	89bb      	ldrh	r3, [r7, #12]
 801100c:	065b      	lsls	r3, r3, #25
 801100e:	d500      	bpl.n	8011012 <_vfiprintf_r+0x20e>
 8011010:	e71d      	b.n	8010e4e <_vfiprintf_r+0x4a>
 8011012:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011014:	e71d      	b.n	8010e52 <_vfiprintf_r+0x4e>
 8011016:	aa07      	add	r2, sp, #28
 8011018:	9200      	str	r2, [sp, #0]
 801101a:	0021      	movs	r1, r4
 801101c:	003a      	movs	r2, r7
 801101e:	4b06      	ldr	r3, [pc, #24]	; (8011038 <_vfiprintf_r+0x234>)
 8011020:	9803      	ldr	r0, [sp, #12]
 8011022:	f7fc fe8b 	bl	800dd3c <_printf_i>
 8011026:	e7e3      	b.n	8010ff0 <_vfiprintf_r+0x1ec>
 8011028:	080139e4 	.word	0x080139e4
 801102c:	080139ea 	.word	0x080139ea
 8011030:	080139ee 	.word	0x080139ee
 8011034:	0800d7b1 	.word	0x0800d7b1
 8011038:	08010ddf 	.word	0x08010ddf

0801103c <__swbuf_r>:
 801103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103e:	0006      	movs	r6, r0
 8011040:	000d      	movs	r5, r1
 8011042:	0014      	movs	r4, r2
 8011044:	2800      	cmp	r0, #0
 8011046:	d004      	beq.n	8011052 <__swbuf_r+0x16>
 8011048:	6a03      	ldr	r3, [r0, #32]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d101      	bne.n	8011052 <__swbuf_r+0x16>
 801104e:	f7fd fa1d 	bl	800e48c <__sinit>
 8011052:	69a3      	ldr	r3, [r4, #24]
 8011054:	60a3      	str	r3, [r4, #8]
 8011056:	89a3      	ldrh	r3, [r4, #12]
 8011058:	071b      	lsls	r3, r3, #28
 801105a:	d528      	bpl.n	80110ae <__swbuf_r+0x72>
 801105c:	6923      	ldr	r3, [r4, #16]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d025      	beq.n	80110ae <__swbuf_r+0x72>
 8011062:	6923      	ldr	r3, [r4, #16]
 8011064:	6820      	ldr	r0, [r4, #0]
 8011066:	b2ef      	uxtb	r7, r5
 8011068:	1ac0      	subs	r0, r0, r3
 801106a:	6963      	ldr	r3, [r4, #20]
 801106c:	b2ed      	uxtb	r5, r5
 801106e:	4283      	cmp	r3, r0
 8011070:	dc05      	bgt.n	801107e <__swbuf_r+0x42>
 8011072:	0021      	movs	r1, r4
 8011074:	0030      	movs	r0, r6
 8011076:	f7ff fdeb 	bl	8010c50 <_fflush_r>
 801107a:	2800      	cmp	r0, #0
 801107c:	d11d      	bne.n	80110ba <__swbuf_r+0x7e>
 801107e:	68a3      	ldr	r3, [r4, #8]
 8011080:	3001      	adds	r0, #1
 8011082:	3b01      	subs	r3, #1
 8011084:	60a3      	str	r3, [r4, #8]
 8011086:	6823      	ldr	r3, [r4, #0]
 8011088:	1c5a      	adds	r2, r3, #1
 801108a:	6022      	str	r2, [r4, #0]
 801108c:	701f      	strb	r7, [r3, #0]
 801108e:	6963      	ldr	r3, [r4, #20]
 8011090:	4283      	cmp	r3, r0
 8011092:	d004      	beq.n	801109e <__swbuf_r+0x62>
 8011094:	89a3      	ldrh	r3, [r4, #12]
 8011096:	07db      	lsls	r3, r3, #31
 8011098:	d507      	bpl.n	80110aa <__swbuf_r+0x6e>
 801109a:	2d0a      	cmp	r5, #10
 801109c:	d105      	bne.n	80110aa <__swbuf_r+0x6e>
 801109e:	0021      	movs	r1, r4
 80110a0:	0030      	movs	r0, r6
 80110a2:	f7ff fdd5 	bl	8010c50 <_fflush_r>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d107      	bne.n	80110ba <__swbuf_r+0x7e>
 80110aa:	0028      	movs	r0, r5
 80110ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110ae:	0021      	movs	r1, r4
 80110b0:	0030      	movs	r0, r6
 80110b2:	f000 f805 	bl	80110c0 <__swsetup_r>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	d0d3      	beq.n	8011062 <__swbuf_r+0x26>
 80110ba:	2501      	movs	r5, #1
 80110bc:	426d      	negs	r5, r5
 80110be:	e7f4      	b.n	80110aa <__swbuf_r+0x6e>

080110c0 <__swsetup_r>:
 80110c0:	4b30      	ldr	r3, [pc, #192]	; (8011184 <__swsetup_r+0xc4>)
 80110c2:	b570      	push	{r4, r5, r6, lr}
 80110c4:	0005      	movs	r5, r0
 80110c6:	6818      	ldr	r0, [r3, #0]
 80110c8:	000c      	movs	r4, r1
 80110ca:	2800      	cmp	r0, #0
 80110cc:	d004      	beq.n	80110d8 <__swsetup_r+0x18>
 80110ce:	6a03      	ldr	r3, [r0, #32]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d101      	bne.n	80110d8 <__swsetup_r+0x18>
 80110d4:	f7fd f9da 	bl	800e48c <__sinit>
 80110d8:	230c      	movs	r3, #12
 80110da:	5ee2      	ldrsh	r2, [r4, r3]
 80110dc:	b293      	uxth	r3, r2
 80110de:	0711      	lsls	r1, r2, #28
 80110e0:	d423      	bmi.n	801112a <__swsetup_r+0x6a>
 80110e2:	06d9      	lsls	r1, r3, #27
 80110e4:	d407      	bmi.n	80110f6 <__swsetup_r+0x36>
 80110e6:	2309      	movs	r3, #9
 80110e8:	2001      	movs	r0, #1
 80110ea:	602b      	str	r3, [r5, #0]
 80110ec:	3337      	adds	r3, #55	; 0x37
 80110ee:	4313      	orrs	r3, r2
 80110f0:	81a3      	strh	r3, [r4, #12]
 80110f2:	4240      	negs	r0, r0
 80110f4:	bd70      	pop	{r4, r5, r6, pc}
 80110f6:	075b      	lsls	r3, r3, #29
 80110f8:	d513      	bpl.n	8011122 <__swsetup_r+0x62>
 80110fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110fc:	2900      	cmp	r1, #0
 80110fe:	d008      	beq.n	8011112 <__swsetup_r+0x52>
 8011100:	0023      	movs	r3, r4
 8011102:	3344      	adds	r3, #68	; 0x44
 8011104:	4299      	cmp	r1, r3
 8011106:	d002      	beq.n	801110e <__swsetup_r+0x4e>
 8011108:	0028      	movs	r0, r5
 801110a:	f7fe fb35 	bl	800f778 <_free_r>
 801110e:	2300      	movs	r3, #0
 8011110:	6363      	str	r3, [r4, #52]	; 0x34
 8011112:	2224      	movs	r2, #36	; 0x24
 8011114:	89a3      	ldrh	r3, [r4, #12]
 8011116:	4393      	bics	r3, r2
 8011118:	81a3      	strh	r3, [r4, #12]
 801111a:	2300      	movs	r3, #0
 801111c:	6063      	str	r3, [r4, #4]
 801111e:	6923      	ldr	r3, [r4, #16]
 8011120:	6023      	str	r3, [r4, #0]
 8011122:	2308      	movs	r3, #8
 8011124:	89a2      	ldrh	r2, [r4, #12]
 8011126:	4313      	orrs	r3, r2
 8011128:	81a3      	strh	r3, [r4, #12]
 801112a:	6923      	ldr	r3, [r4, #16]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d10b      	bne.n	8011148 <__swsetup_r+0x88>
 8011130:	21a0      	movs	r1, #160	; 0xa0
 8011132:	2280      	movs	r2, #128	; 0x80
 8011134:	89a3      	ldrh	r3, [r4, #12]
 8011136:	0089      	lsls	r1, r1, #2
 8011138:	0092      	lsls	r2, r2, #2
 801113a:	400b      	ands	r3, r1
 801113c:	4293      	cmp	r3, r2
 801113e:	d003      	beq.n	8011148 <__swsetup_r+0x88>
 8011140:	0021      	movs	r1, r4
 8011142:	0028      	movs	r0, r5
 8011144:	f000 f89a 	bl	801127c <__smakebuf_r>
 8011148:	220c      	movs	r2, #12
 801114a:	5ea3      	ldrsh	r3, [r4, r2]
 801114c:	2001      	movs	r0, #1
 801114e:	001a      	movs	r2, r3
 8011150:	b299      	uxth	r1, r3
 8011152:	4002      	ands	r2, r0
 8011154:	4203      	tst	r3, r0
 8011156:	d00f      	beq.n	8011178 <__swsetup_r+0xb8>
 8011158:	2200      	movs	r2, #0
 801115a:	60a2      	str	r2, [r4, #8]
 801115c:	6962      	ldr	r2, [r4, #20]
 801115e:	4252      	negs	r2, r2
 8011160:	61a2      	str	r2, [r4, #24]
 8011162:	2000      	movs	r0, #0
 8011164:	6922      	ldr	r2, [r4, #16]
 8011166:	4282      	cmp	r2, r0
 8011168:	d1c4      	bne.n	80110f4 <__swsetup_r+0x34>
 801116a:	0609      	lsls	r1, r1, #24
 801116c:	d5c2      	bpl.n	80110f4 <__swsetup_r+0x34>
 801116e:	2240      	movs	r2, #64	; 0x40
 8011170:	4313      	orrs	r3, r2
 8011172:	81a3      	strh	r3, [r4, #12]
 8011174:	3801      	subs	r0, #1
 8011176:	e7bd      	b.n	80110f4 <__swsetup_r+0x34>
 8011178:	0788      	lsls	r0, r1, #30
 801117a:	d400      	bmi.n	801117e <__swsetup_r+0xbe>
 801117c:	6962      	ldr	r2, [r4, #20]
 801117e:	60a2      	str	r2, [r4, #8]
 8011180:	e7ef      	b.n	8011162 <__swsetup_r+0xa2>
 8011182:	46c0      	nop			; (mov r8, r8)
 8011184:	200002b8 	.word	0x200002b8

08011188 <_raise_r>:
 8011188:	b570      	push	{r4, r5, r6, lr}
 801118a:	0004      	movs	r4, r0
 801118c:	000d      	movs	r5, r1
 801118e:	291f      	cmp	r1, #31
 8011190:	d904      	bls.n	801119c <_raise_r+0x14>
 8011192:	2316      	movs	r3, #22
 8011194:	6003      	str	r3, [r0, #0]
 8011196:	2001      	movs	r0, #1
 8011198:	4240      	negs	r0, r0
 801119a:	bd70      	pop	{r4, r5, r6, pc}
 801119c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d004      	beq.n	80111ac <_raise_r+0x24>
 80111a2:	008a      	lsls	r2, r1, #2
 80111a4:	189b      	adds	r3, r3, r2
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	2a00      	cmp	r2, #0
 80111aa:	d108      	bne.n	80111be <_raise_r+0x36>
 80111ac:	0020      	movs	r0, r4
 80111ae:	f000 f831 	bl	8011214 <_getpid_r>
 80111b2:	002a      	movs	r2, r5
 80111b4:	0001      	movs	r1, r0
 80111b6:	0020      	movs	r0, r4
 80111b8:	f000 f81a 	bl	80111f0 <_kill_r>
 80111bc:	e7ed      	b.n	801119a <_raise_r+0x12>
 80111be:	2000      	movs	r0, #0
 80111c0:	2a01      	cmp	r2, #1
 80111c2:	d0ea      	beq.n	801119a <_raise_r+0x12>
 80111c4:	1c51      	adds	r1, r2, #1
 80111c6:	d103      	bne.n	80111d0 <_raise_r+0x48>
 80111c8:	2316      	movs	r3, #22
 80111ca:	3001      	adds	r0, #1
 80111cc:	6023      	str	r3, [r4, #0]
 80111ce:	e7e4      	b.n	801119a <_raise_r+0x12>
 80111d0:	2400      	movs	r4, #0
 80111d2:	0028      	movs	r0, r5
 80111d4:	601c      	str	r4, [r3, #0]
 80111d6:	4790      	blx	r2
 80111d8:	0020      	movs	r0, r4
 80111da:	e7de      	b.n	801119a <_raise_r+0x12>

080111dc <raise>:
 80111dc:	b510      	push	{r4, lr}
 80111de:	4b03      	ldr	r3, [pc, #12]	; (80111ec <raise+0x10>)
 80111e0:	0001      	movs	r1, r0
 80111e2:	6818      	ldr	r0, [r3, #0]
 80111e4:	f7ff ffd0 	bl	8011188 <_raise_r>
 80111e8:	bd10      	pop	{r4, pc}
 80111ea:	46c0      	nop			; (mov r8, r8)
 80111ec:	200002b8 	.word	0x200002b8

080111f0 <_kill_r>:
 80111f0:	2300      	movs	r3, #0
 80111f2:	b570      	push	{r4, r5, r6, lr}
 80111f4:	4d06      	ldr	r5, [pc, #24]	; (8011210 <_kill_r+0x20>)
 80111f6:	0004      	movs	r4, r0
 80111f8:	0008      	movs	r0, r1
 80111fa:	0011      	movs	r1, r2
 80111fc:	602b      	str	r3, [r5, #0]
 80111fe:	f7f6 f9a3 	bl	8007548 <_kill>
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	d103      	bne.n	801120e <_kill_r+0x1e>
 8011206:	682b      	ldr	r3, [r5, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d000      	beq.n	801120e <_kill_r+0x1e>
 801120c:	6023      	str	r3, [r4, #0]
 801120e:	bd70      	pop	{r4, r5, r6, pc}
 8011210:	20006650 	.word	0x20006650

08011214 <_getpid_r>:
 8011214:	b510      	push	{r4, lr}
 8011216:	f7f6 f995 	bl	8007544 <_getpid>
 801121a:	bd10      	pop	{r4, pc}

0801121c <_malloc_usable_size_r>:
 801121c:	1f0b      	subs	r3, r1, #4
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	1f18      	subs	r0, r3, #4
 8011222:	2b00      	cmp	r3, #0
 8011224:	da01      	bge.n	801122a <_malloc_usable_size_r+0xe>
 8011226:	580b      	ldr	r3, [r1, r0]
 8011228:	18c0      	adds	r0, r0, r3
 801122a:	4770      	bx	lr

0801122c <__swhatbuf_r>:
 801122c:	b570      	push	{r4, r5, r6, lr}
 801122e:	000e      	movs	r6, r1
 8011230:	001d      	movs	r5, r3
 8011232:	230e      	movs	r3, #14
 8011234:	5ec9      	ldrsh	r1, [r1, r3]
 8011236:	0014      	movs	r4, r2
 8011238:	b096      	sub	sp, #88	; 0x58
 801123a:	2900      	cmp	r1, #0
 801123c:	da0c      	bge.n	8011258 <__swhatbuf_r+0x2c>
 801123e:	89b2      	ldrh	r2, [r6, #12]
 8011240:	2380      	movs	r3, #128	; 0x80
 8011242:	0011      	movs	r1, r2
 8011244:	4019      	ands	r1, r3
 8011246:	421a      	tst	r2, r3
 8011248:	d013      	beq.n	8011272 <__swhatbuf_r+0x46>
 801124a:	2100      	movs	r1, #0
 801124c:	3b40      	subs	r3, #64	; 0x40
 801124e:	2000      	movs	r0, #0
 8011250:	6029      	str	r1, [r5, #0]
 8011252:	6023      	str	r3, [r4, #0]
 8011254:	b016      	add	sp, #88	; 0x58
 8011256:	bd70      	pop	{r4, r5, r6, pc}
 8011258:	466a      	mov	r2, sp
 801125a:	f000 f84d 	bl	80112f8 <_fstat_r>
 801125e:	2800      	cmp	r0, #0
 8011260:	dbed      	blt.n	801123e <__swhatbuf_r+0x12>
 8011262:	23f0      	movs	r3, #240	; 0xf0
 8011264:	9901      	ldr	r1, [sp, #4]
 8011266:	021b      	lsls	r3, r3, #8
 8011268:	4019      	ands	r1, r3
 801126a:	4b03      	ldr	r3, [pc, #12]	; (8011278 <__swhatbuf_r+0x4c>)
 801126c:	18c9      	adds	r1, r1, r3
 801126e:	424b      	negs	r3, r1
 8011270:	4159      	adcs	r1, r3
 8011272:	2380      	movs	r3, #128	; 0x80
 8011274:	00db      	lsls	r3, r3, #3
 8011276:	e7ea      	b.n	801124e <__swhatbuf_r+0x22>
 8011278:	ffffe000 	.word	0xffffe000

0801127c <__smakebuf_r>:
 801127c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801127e:	2602      	movs	r6, #2
 8011280:	898b      	ldrh	r3, [r1, #12]
 8011282:	0005      	movs	r5, r0
 8011284:	000c      	movs	r4, r1
 8011286:	4233      	tst	r3, r6
 8011288:	d006      	beq.n	8011298 <__smakebuf_r+0x1c>
 801128a:	0023      	movs	r3, r4
 801128c:	3347      	adds	r3, #71	; 0x47
 801128e:	6023      	str	r3, [r4, #0]
 8011290:	6123      	str	r3, [r4, #16]
 8011292:	2301      	movs	r3, #1
 8011294:	6163      	str	r3, [r4, #20]
 8011296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011298:	466a      	mov	r2, sp
 801129a:	ab01      	add	r3, sp, #4
 801129c:	f7ff ffc6 	bl	801122c <__swhatbuf_r>
 80112a0:	9900      	ldr	r1, [sp, #0]
 80112a2:	0007      	movs	r7, r0
 80112a4:	0028      	movs	r0, r5
 80112a6:	f7fb fa7b 	bl	800c7a0 <_malloc_r>
 80112aa:	2800      	cmp	r0, #0
 80112ac:	d108      	bne.n	80112c0 <__smakebuf_r+0x44>
 80112ae:	220c      	movs	r2, #12
 80112b0:	5ea3      	ldrsh	r3, [r4, r2]
 80112b2:	059a      	lsls	r2, r3, #22
 80112b4:	d4ef      	bmi.n	8011296 <__smakebuf_r+0x1a>
 80112b6:	2203      	movs	r2, #3
 80112b8:	4393      	bics	r3, r2
 80112ba:	431e      	orrs	r6, r3
 80112bc:	81a6      	strh	r6, [r4, #12]
 80112be:	e7e4      	b.n	801128a <__smakebuf_r+0xe>
 80112c0:	2380      	movs	r3, #128	; 0x80
 80112c2:	89a2      	ldrh	r2, [r4, #12]
 80112c4:	6020      	str	r0, [r4, #0]
 80112c6:	4313      	orrs	r3, r2
 80112c8:	81a3      	strh	r3, [r4, #12]
 80112ca:	9b00      	ldr	r3, [sp, #0]
 80112cc:	6120      	str	r0, [r4, #16]
 80112ce:	6163      	str	r3, [r4, #20]
 80112d0:	9b01      	ldr	r3, [sp, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00c      	beq.n	80112f0 <__smakebuf_r+0x74>
 80112d6:	0028      	movs	r0, r5
 80112d8:	230e      	movs	r3, #14
 80112da:	5ee1      	ldrsh	r1, [r4, r3]
 80112dc:	f000 f81e 	bl	801131c <_isatty_r>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	d005      	beq.n	80112f0 <__smakebuf_r+0x74>
 80112e4:	2303      	movs	r3, #3
 80112e6:	89a2      	ldrh	r2, [r4, #12]
 80112e8:	439a      	bics	r2, r3
 80112ea:	3b02      	subs	r3, #2
 80112ec:	4313      	orrs	r3, r2
 80112ee:	81a3      	strh	r3, [r4, #12]
 80112f0:	89a3      	ldrh	r3, [r4, #12]
 80112f2:	433b      	orrs	r3, r7
 80112f4:	81a3      	strh	r3, [r4, #12]
 80112f6:	e7ce      	b.n	8011296 <__smakebuf_r+0x1a>

080112f8 <_fstat_r>:
 80112f8:	2300      	movs	r3, #0
 80112fa:	b570      	push	{r4, r5, r6, lr}
 80112fc:	4d06      	ldr	r5, [pc, #24]	; (8011318 <_fstat_r+0x20>)
 80112fe:	0004      	movs	r4, r0
 8011300:	0008      	movs	r0, r1
 8011302:	0011      	movs	r1, r2
 8011304:	602b      	str	r3, [r5, #0]
 8011306:	f7f6 f94d 	bl	80075a4 <_fstat>
 801130a:	1c43      	adds	r3, r0, #1
 801130c:	d103      	bne.n	8011316 <_fstat_r+0x1e>
 801130e:	682b      	ldr	r3, [r5, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d000      	beq.n	8011316 <_fstat_r+0x1e>
 8011314:	6023      	str	r3, [r4, #0]
 8011316:	bd70      	pop	{r4, r5, r6, pc}
 8011318:	20006650 	.word	0x20006650

0801131c <_isatty_r>:
 801131c:	2300      	movs	r3, #0
 801131e:	b570      	push	{r4, r5, r6, lr}
 8011320:	4d06      	ldr	r5, [pc, #24]	; (801133c <_isatty_r+0x20>)
 8011322:	0004      	movs	r4, r0
 8011324:	0008      	movs	r0, r1
 8011326:	602b      	str	r3, [r5, #0]
 8011328:	f7f6 f942 	bl	80075b0 <_isatty>
 801132c:	1c43      	adds	r3, r0, #1
 801132e:	d103      	bne.n	8011338 <_isatty_r+0x1c>
 8011330:	682b      	ldr	r3, [r5, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d000      	beq.n	8011338 <_isatty_r+0x1c>
 8011336:	6023      	str	r3, [r4, #0]
 8011338:	bd70      	pop	{r4, r5, r6, pc}
 801133a:	46c0      	nop			; (mov r8, r8)
 801133c:	20006650 	.word	0x20006650

08011340 <pow>:
 8011340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011342:	0014      	movs	r4, r2
 8011344:	001d      	movs	r5, r3
 8011346:	9000      	str	r0, [sp, #0]
 8011348:	9101      	str	r1, [sp, #4]
 801134a:	f000 f86f 	bl	801142c <__ieee754_pow>
 801134e:	0022      	movs	r2, r4
 8011350:	0006      	movs	r6, r0
 8011352:	000f      	movs	r7, r1
 8011354:	002b      	movs	r3, r5
 8011356:	0020      	movs	r0, r4
 8011358:	0029      	movs	r1, r5
 801135a:	f7f1 fdff 	bl	8002f5c <__aeabi_dcmpun>
 801135e:	2800      	cmp	r0, #0
 8011360:	d13f      	bne.n	80113e2 <pow+0xa2>
 8011362:	9800      	ldr	r0, [sp, #0]
 8011364:	9901      	ldr	r1, [sp, #4]
 8011366:	2200      	movs	r2, #0
 8011368:	2300      	movs	r3, #0
 801136a:	f7ef f86f 	bl	800044c <__aeabi_dcmpeq>
 801136e:	2800      	cmp	r0, #0
 8011370:	d019      	beq.n	80113a6 <pow+0x66>
 8011372:	2200      	movs	r2, #0
 8011374:	2300      	movs	r3, #0
 8011376:	0020      	movs	r0, r4
 8011378:	0029      	movs	r1, r5
 801137a:	f7ef f867 	bl	800044c <__aeabi_dcmpeq>
 801137e:	2800      	cmp	r0, #0
 8011380:	d146      	bne.n	8011410 <pow+0xd0>
 8011382:	0020      	movs	r0, r4
 8011384:	0029      	movs	r1, r5
 8011386:	f000 f849 	bl	801141c <finite>
 801138a:	2800      	cmp	r0, #0
 801138c:	d029      	beq.n	80113e2 <pow+0xa2>
 801138e:	2200      	movs	r2, #0
 8011390:	2300      	movs	r3, #0
 8011392:	0020      	movs	r0, r4
 8011394:	0029      	movs	r1, r5
 8011396:	f7ef f85f 	bl	8000458 <__aeabi_dcmplt>
 801139a:	2800      	cmp	r0, #0
 801139c:	d021      	beq.n	80113e2 <pow+0xa2>
 801139e:	f7fd fadb 	bl	800e958 <__errno>
 80113a2:	2322      	movs	r3, #34	; 0x22
 80113a4:	e01c      	b.n	80113e0 <pow+0xa0>
 80113a6:	0030      	movs	r0, r6
 80113a8:	0039      	movs	r1, r7
 80113aa:	f000 f837 	bl	801141c <finite>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d11b      	bne.n	80113ea <pow+0xaa>
 80113b2:	9800      	ldr	r0, [sp, #0]
 80113b4:	9901      	ldr	r1, [sp, #4]
 80113b6:	f000 f831 	bl	801141c <finite>
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d015      	beq.n	80113ea <pow+0xaa>
 80113be:	0020      	movs	r0, r4
 80113c0:	0029      	movs	r1, r5
 80113c2:	f000 f82b 	bl	801141c <finite>
 80113c6:	2800      	cmp	r0, #0
 80113c8:	d00f      	beq.n	80113ea <pow+0xaa>
 80113ca:	0032      	movs	r2, r6
 80113cc:	003b      	movs	r3, r7
 80113ce:	0030      	movs	r0, r6
 80113d0:	0039      	movs	r1, r7
 80113d2:	f7f1 fdc3 	bl	8002f5c <__aeabi_dcmpun>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d0e1      	beq.n	801139e <pow+0x5e>
 80113da:	f7fd fabd 	bl	800e958 <__errno>
 80113de:	2321      	movs	r3, #33	; 0x21
 80113e0:	6003      	str	r3, [r0, #0]
 80113e2:	0030      	movs	r0, r6
 80113e4:	0039      	movs	r1, r7
 80113e6:	b003      	add	sp, #12
 80113e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ea:	2200      	movs	r2, #0
 80113ec:	2300      	movs	r3, #0
 80113ee:	0030      	movs	r0, r6
 80113f0:	0039      	movs	r1, r7
 80113f2:	f7ef f82b 	bl	800044c <__aeabi_dcmpeq>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d0f3      	beq.n	80113e2 <pow+0xa2>
 80113fa:	9800      	ldr	r0, [sp, #0]
 80113fc:	9901      	ldr	r1, [sp, #4]
 80113fe:	f000 f80d 	bl	801141c <finite>
 8011402:	2800      	cmp	r0, #0
 8011404:	d0ed      	beq.n	80113e2 <pow+0xa2>
 8011406:	0020      	movs	r0, r4
 8011408:	0029      	movs	r1, r5
 801140a:	f000 f807 	bl	801141c <finite>
 801140e:	e7c4      	b.n	801139a <pow+0x5a>
 8011410:	2600      	movs	r6, #0
 8011412:	4f01      	ldr	r7, [pc, #4]	; (8011418 <pow+0xd8>)
 8011414:	e7e5      	b.n	80113e2 <pow+0xa2>
 8011416:	46c0      	nop			; (mov r8, r8)
 8011418:	3ff00000 	.word	0x3ff00000

0801141c <finite>:
 801141c:	4b02      	ldr	r3, [pc, #8]	; (8011428 <finite+0xc>)
 801141e:	0048      	lsls	r0, r1, #1
 8011420:	0840      	lsrs	r0, r0, #1
 8011422:	18c0      	adds	r0, r0, r3
 8011424:	0fc0      	lsrs	r0, r0, #31
 8011426:	4770      	bx	lr
 8011428:	80100000 	.word	0x80100000

0801142c <__ieee754_pow>:
 801142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801142e:	b095      	sub	sp, #84	; 0x54
 8011430:	9202      	str	r2, [sp, #8]
 8011432:	9303      	str	r3, [sp, #12]
 8011434:	9b03      	ldr	r3, [sp, #12]
 8011436:	9a03      	ldr	r2, [sp, #12]
 8011438:	9304      	str	r3, [sp, #16]
 801143a:	9b02      	ldr	r3, [sp, #8]
 801143c:	0056      	lsls	r6, r2, #1
 801143e:	001a      	movs	r2, r3
 8011440:	0876      	lsrs	r6, r6, #1
 8011442:	0007      	movs	r7, r0
 8011444:	000d      	movs	r5, r1
 8011446:	4332      	orrs	r2, r6
 8011448:	d119      	bne.n	801147e <__ieee754_pow+0x52>
 801144a:	2180      	movs	r1, #128	; 0x80
 801144c:	0309      	lsls	r1, r1, #12
 801144e:	4069      	eors	r1, r5
 8011450:	0002      	movs	r2, r0
 8011452:	000b      	movs	r3, r1
 8011454:	1892      	adds	r2, r2, r2
 8011456:	415b      	adcs	r3, r3
 8011458:	4989      	ldr	r1, [pc, #548]	; (8011680 <__ieee754_pow+0x254>)
 801145a:	428b      	cmp	r3, r1
 801145c:	d806      	bhi.n	801146c <__ieee754_pow+0x40>
 801145e:	d001      	beq.n	8011464 <__ieee754_pow+0x38>
 8011460:	f000 fcb6 	bl	8011dd0 <__ieee754_pow+0x9a4>
 8011464:	2a00      	cmp	r2, #0
 8011466:	d101      	bne.n	801146c <__ieee754_pow+0x40>
 8011468:	f000 fcb2 	bl	8011dd0 <__ieee754_pow+0x9a4>
 801146c:	9a02      	ldr	r2, [sp, #8]
 801146e:	9b03      	ldr	r3, [sp, #12]
 8011470:	0038      	movs	r0, r7
 8011472:	0029      	movs	r1, r5
 8011474:	f7ef ffd4 	bl	8001420 <__aeabi_dadd>
 8011478:	9000      	str	r0, [sp, #0]
 801147a:	9101      	str	r1, [sp, #4]
 801147c:	e0ad      	b.n	80115da <__ieee754_pow+0x1ae>
 801147e:	4a81      	ldr	r2, [pc, #516]	; (8011684 <__ieee754_pow+0x258>)
 8011480:	004c      	lsls	r4, r1, #1
 8011482:	9108      	str	r1, [sp, #32]
 8011484:	9000      	str	r0, [sp, #0]
 8011486:	0864      	lsrs	r4, r4, #1
 8011488:	4294      	cmp	r4, r2
 801148a:	dc08      	bgt.n	801149e <__ieee754_pow+0x72>
 801148c:	d101      	bne.n	8011492 <__ieee754_pow+0x66>
 801148e:	2800      	cmp	r0, #0
 8011490:	d1ec      	bne.n	801146c <__ieee754_pow+0x40>
 8011492:	4a7c      	ldr	r2, [pc, #496]	; (8011684 <__ieee754_pow+0x258>)
 8011494:	4296      	cmp	r6, r2
 8011496:	dc02      	bgt.n	801149e <__ieee754_pow+0x72>
 8011498:	d10c      	bne.n	80114b4 <__ieee754_pow+0x88>
 801149a:	2b00      	cmp	r3, #0
 801149c:	d00a      	beq.n	80114b4 <__ieee754_pow+0x88>
 801149e:	4b7a      	ldr	r3, [pc, #488]	; (8011688 <__ieee754_pow+0x25c>)
 80114a0:	18eb      	adds	r3, r5, r3
 80114a2:	433b      	orrs	r3, r7
 80114a4:	d1e2      	bne.n	801146c <__ieee754_pow+0x40>
 80114a6:	2180      	movs	r1, #128	; 0x80
 80114a8:	9803      	ldr	r0, [sp, #12]
 80114aa:	0309      	lsls	r1, r1, #12
 80114ac:	4048      	eors	r0, r1
 80114ae:	0003      	movs	r3, r0
 80114b0:	9a02      	ldr	r2, [sp, #8]
 80114b2:	e7cf      	b.n	8011454 <__ieee754_pow+0x28>
 80114b4:	2200      	movs	r2, #0
 80114b6:	9206      	str	r2, [sp, #24]
 80114b8:	2d00      	cmp	r5, #0
 80114ba:	da69      	bge.n	8011590 <__ieee754_pow+0x164>
 80114bc:	4a73      	ldr	r2, [pc, #460]	; (801168c <__ieee754_pow+0x260>)
 80114be:	4296      	cmp	r6, r2
 80114c0:	dc64      	bgt.n	801158c <__ieee754_pow+0x160>
 80114c2:	4a73      	ldr	r2, [pc, #460]	; (8011690 <__ieee754_pow+0x264>)
 80114c4:	4296      	cmp	r6, r2
 80114c6:	dd11      	ble.n	80114ec <__ieee754_pow+0xc0>
 80114c8:	4972      	ldr	r1, [pc, #456]	; (8011694 <__ieee754_pow+0x268>)
 80114ca:	1532      	asrs	r2, r6, #20
 80114cc:	1852      	adds	r2, r2, r1
 80114ce:	2a14      	cmp	r2, #20
 80114d0:	dd3c      	ble.n	801154c <__ieee754_pow+0x120>
 80114d2:	2134      	movs	r1, #52	; 0x34
 80114d4:	1a89      	subs	r1, r1, r2
 80114d6:	9a02      	ldr	r2, [sp, #8]
 80114d8:	40ca      	lsrs	r2, r1
 80114da:	0010      	movs	r0, r2
 80114dc:	4088      	lsls	r0, r1
 80114de:	4298      	cmp	r0, r3
 80114e0:	d104      	bne.n	80114ec <__ieee754_pow+0xc0>
 80114e2:	2101      	movs	r1, #1
 80114e4:	400a      	ands	r2, r1
 80114e6:	1849      	adds	r1, r1, r1
 80114e8:	1a8a      	subs	r2, r1, r2
 80114ea:	9206      	str	r2, [sp, #24]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d03c      	beq.n	801156a <__ieee754_pow+0x13e>
 80114f0:	0038      	movs	r0, r7
 80114f2:	0029      	movs	r1, r5
 80114f4:	f000 fca4 	bl	8011e40 <fabs>
 80114f8:	9000      	str	r0, [sp, #0]
 80114fa:	9101      	str	r1, [sp, #4]
 80114fc:	2f00      	cmp	r7, #0
 80114fe:	d000      	beq.n	8011502 <__ieee754_pow+0xd6>
 8011500:	e094      	b.n	801162c <__ieee754_pow+0x200>
 8011502:	2c00      	cmp	r4, #0
 8011504:	d005      	beq.n	8011512 <__ieee754_pow+0xe6>
 8011506:	4a64      	ldr	r2, [pc, #400]	; (8011698 <__ieee754_pow+0x26c>)
 8011508:	00ab      	lsls	r3, r5, #2
 801150a:	089b      	lsrs	r3, r3, #2
 801150c:	4293      	cmp	r3, r2
 801150e:	d000      	beq.n	8011512 <__ieee754_pow+0xe6>
 8011510:	e08c      	b.n	801162c <__ieee754_pow+0x200>
 8011512:	9b04      	ldr	r3, [sp, #16]
 8011514:	2b00      	cmp	r3, #0
 8011516:	da07      	bge.n	8011528 <__ieee754_pow+0xfc>
 8011518:	9a00      	ldr	r2, [sp, #0]
 801151a:	9b01      	ldr	r3, [sp, #4]
 801151c:	2000      	movs	r0, #0
 801151e:	495e      	ldr	r1, [pc, #376]	; (8011698 <__ieee754_pow+0x26c>)
 8011520:	f7f0 fade 	bl	8001ae0 <__aeabi_ddiv>
 8011524:	9000      	str	r0, [sp, #0]
 8011526:	9101      	str	r1, [sp, #4]
 8011528:	9b08      	ldr	r3, [sp, #32]
 801152a:	2b00      	cmp	r3, #0
 801152c:	da55      	bge.n	80115da <__ieee754_pow+0x1ae>
 801152e:	4b56      	ldr	r3, [pc, #344]	; (8011688 <__ieee754_pow+0x25c>)
 8011530:	18e4      	adds	r4, r4, r3
 8011532:	9b06      	ldr	r3, [sp, #24]
 8011534:	431c      	orrs	r4, r3
 8011536:	d000      	beq.n	801153a <__ieee754_pow+0x10e>
 8011538:	e06c      	b.n	8011614 <__ieee754_pow+0x1e8>
 801153a:	9a00      	ldr	r2, [sp, #0]
 801153c:	9b01      	ldr	r3, [sp, #4]
 801153e:	0010      	movs	r0, r2
 8011540:	0019      	movs	r1, r3
 8011542:	f7f1 f989 	bl	8002858 <__aeabi_dsub>
 8011546:	0002      	movs	r2, r0
 8011548:	000b      	movs	r3, r1
 801154a:	e01c      	b.n	8011586 <__ieee754_pow+0x15a>
 801154c:	2b00      	cmp	r3, #0
 801154e:	d1cf      	bne.n	80114f0 <__ieee754_pow+0xc4>
 8011550:	3314      	adds	r3, #20
 8011552:	1a9a      	subs	r2, r3, r2
 8011554:	0033      	movs	r3, r6
 8011556:	4113      	asrs	r3, r2
 8011558:	0019      	movs	r1, r3
 801155a:	4091      	lsls	r1, r2
 801155c:	42b1      	cmp	r1, r6
 801155e:	d104      	bne.n	801156a <__ieee754_pow+0x13e>
 8011560:	2201      	movs	r2, #1
 8011562:	4013      	ands	r3, r2
 8011564:	1892      	adds	r2, r2, r2
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	9306      	str	r3, [sp, #24]
 801156a:	4b4b      	ldr	r3, [pc, #300]	; (8011698 <__ieee754_pow+0x26c>)
 801156c:	429e      	cmp	r6, r3
 801156e:	d138      	bne.n	80115e2 <__ieee754_pow+0x1b6>
 8011570:	0038      	movs	r0, r7
 8011572:	0029      	movs	r1, r5
 8011574:	9b04      	ldr	r3, [sp, #16]
 8011576:	9000      	str	r0, [sp, #0]
 8011578:	9101      	str	r1, [sp, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	da2d      	bge.n	80115da <__ieee754_pow+0x1ae>
 801157e:	003a      	movs	r2, r7
 8011580:	002b      	movs	r3, r5
 8011582:	2000      	movs	r0, #0
 8011584:	4944      	ldr	r1, [pc, #272]	; (8011698 <__ieee754_pow+0x26c>)
 8011586:	f7f0 faab 	bl	8001ae0 <__aeabi_ddiv>
 801158a:	e775      	b.n	8011478 <__ieee754_pow+0x4c>
 801158c:	2202      	movs	r2, #2
 801158e:	9206      	str	r2, [sp, #24]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1ad      	bne.n	80114f0 <__ieee754_pow+0xc4>
 8011594:	4b3b      	ldr	r3, [pc, #236]	; (8011684 <__ieee754_pow+0x258>)
 8011596:	429e      	cmp	r6, r3
 8011598:	d1e7      	bne.n	801156a <__ieee754_pow+0x13e>
 801159a:	4b3b      	ldr	r3, [pc, #236]	; (8011688 <__ieee754_pow+0x25c>)
 801159c:	18e3      	adds	r3, r4, r3
 801159e:	433b      	orrs	r3, r7
 80115a0:	d101      	bne.n	80115a6 <__ieee754_pow+0x17a>
 80115a2:	f000 fc15 	bl	8011dd0 <__ieee754_pow+0x9a4>
 80115a6:	4b3a      	ldr	r3, [pc, #232]	; (8011690 <__ieee754_pow+0x264>)
 80115a8:	429c      	cmp	r4, r3
 80115aa:	dd09      	ble.n	80115c0 <__ieee754_pow+0x194>
 80115ac:	9b04      	ldr	r3, [sp, #16]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	da01      	bge.n	80115b6 <__ieee754_pow+0x18a>
 80115b2:	f000 fc11 	bl	8011dd8 <__ieee754_pow+0x9ac>
 80115b6:	9b02      	ldr	r3, [sp, #8]
 80115b8:	9c03      	ldr	r4, [sp, #12]
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	9401      	str	r4, [sp, #4]
 80115be:	e00c      	b.n	80115da <__ieee754_pow+0x1ae>
 80115c0:	9b04      	ldr	r3, [sp, #16]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	db01      	blt.n	80115ca <__ieee754_pow+0x19e>
 80115c6:	f000 fc07 	bl	8011dd8 <__ieee754_pow+0x9ac>
 80115ca:	2280      	movs	r2, #128	; 0x80
 80115cc:	0612      	lsls	r2, r2, #24
 80115ce:	4694      	mov	ip, r2
 80115d0:	9b02      	ldr	r3, [sp, #8]
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	4463      	add	r3, ip
 80115d8:	9301      	str	r3, [sp, #4]
 80115da:	9800      	ldr	r0, [sp, #0]
 80115dc:	9901      	ldr	r1, [sp, #4]
 80115de:	b015      	add	sp, #84	; 0x54
 80115e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115e2:	2380      	movs	r3, #128	; 0x80
 80115e4:	9a04      	ldr	r2, [sp, #16]
 80115e6:	05db      	lsls	r3, r3, #23
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d106      	bne.n	80115fa <__ieee754_pow+0x1ce>
 80115ec:	003a      	movs	r2, r7
 80115ee:	002b      	movs	r3, r5
 80115f0:	0038      	movs	r0, r7
 80115f2:	0029      	movs	r1, r5
 80115f4:	f7f0 fe6e 	bl	80022d4 <__aeabi_dmul>
 80115f8:	e73e      	b.n	8011478 <__ieee754_pow+0x4c>
 80115fa:	4b28      	ldr	r3, [pc, #160]	; (801169c <__ieee754_pow+0x270>)
 80115fc:	9a04      	ldr	r2, [sp, #16]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d000      	beq.n	8011604 <__ieee754_pow+0x1d8>
 8011602:	e775      	b.n	80114f0 <__ieee754_pow+0xc4>
 8011604:	2d00      	cmp	r5, #0
 8011606:	da00      	bge.n	801160a <__ieee754_pow+0x1de>
 8011608:	e772      	b.n	80114f0 <__ieee754_pow+0xc4>
 801160a:	0038      	movs	r0, r7
 801160c:	0029      	movs	r1, r5
 801160e:	f000 fcb7 	bl	8011f80 <__ieee754_sqrt>
 8011612:	e731      	b.n	8011478 <__ieee754_pow+0x4c>
 8011614:	9b06      	ldr	r3, [sp, #24]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d1df      	bne.n	80115da <__ieee754_pow+0x1ae>
 801161a:	9800      	ldr	r0, [sp, #0]
 801161c:	2180      	movs	r1, #128	; 0x80
 801161e:	0002      	movs	r2, r0
 8011620:	9801      	ldr	r0, [sp, #4]
 8011622:	0609      	lsls	r1, r1, #24
 8011624:	1843      	adds	r3, r0, r1
 8011626:	9200      	str	r2, [sp, #0]
 8011628:	9301      	str	r3, [sp, #4]
 801162a:	e7d6      	b.n	80115da <__ieee754_pow+0x1ae>
 801162c:	0feb      	lsrs	r3, r5, #31
 801162e:	3b01      	subs	r3, #1
 8011630:	930e      	str	r3, [sp, #56]	; 0x38
 8011632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011634:	9b06      	ldr	r3, [sp, #24]
 8011636:	4313      	orrs	r3, r2
 8011638:	d104      	bne.n	8011644 <__ieee754_pow+0x218>
 801163a:	003a      	movs	r2, r7
 801163c:	002b      	movs	r3, r5
 801163e:	0038      	movs	r0, r7
 8011640:	0029      	movs	r1, r5
 8011642:	e77e      	b.n	8011542 <__ieee754_pow+0x116>
 8011644:	4b16      	ldr	r3, [pc, #88]	; (80116a0 <__ieee754_pow+0x274>)
 8011646:	429e      	cmp	r6, r3
 8011648:	dc00      	bgt.n	801164c <__ieee754_pow+0x220>
 801164a:	e0f1      	b.n	8011830 <__ieee754_pow+0x404>
 801164c:	4b15      	ldr	r3, [pc, #84]	; (80116a4 <__ieee754_pow+0x278>)
 801164e:	429e      	cmp	r6, r3
 8011650:	dd09      	ble.n	8011666 <__ieee754_pow+0x23a>
 8011652:	4b0f      	ldr	r3, [pc, #60]	; (8011690 <__ieee754_pow+0x264>)
 8011654:	429c      	cmp	r4, r3
 8011656:	dc0c      	bgt.n	8011672 <__ieee754_pow+0x246>
 8011658:	9b04      	ldr	r3, [sp, #16]
 801165a:	2b00      	cmp	r3, #0
 801165c:	da0c      	bge.n	8011678 <__ieee754_pow+0x24c>
 801165e:	2000      	movs	r0, #0
 8011660:	f000 fc86 	bl	8011f70 <__math_oflow>
 8011664:	e708      	b.n	8011478 <__ieee754_pow+0x4c>
 8011666:	4b10      	ldr	r3, [pc, #64]	; (80116a8 <__ieee754_pow+0x27c>)
 8011668:	429c      	cmp	r4, r3
 801166a:	ddf5      	ble.n	8011658 <__ieee754_pow+0x22c>
 801166c:	4b0a      	ldr	r3, [pc, #40]	; (8011698 <__ieee754_pow+0x26c>)
 801166e:	429c      	cmp	r4, r3
 8011670:	dd1c      	ble.n	80116ac <__ieee754_pow+0x280>
 8011672:	9b04      	ldr	r3, [sp, #16]
 8011674:	2b00      	cmp	r3, #0
 8011676:	dcf2      	bgt.n	801165e <__ieee754_pow+0x232>
 8011678:	2000      	movs	r0, #0
 801167a:	f000 fc72 	bl	8011f62 <__math_uflow>
 801167e:	e6fb      	b.n	8011478 <__ieee754_pow+0x4c>
 8011680:	fff00000 	.word	0xfff00000
 8011684:	7ff00000 	.word	0x7ff00000
 8011688:	c0100000 	.word	0xc0100000
 801168c:	433fffff 	.word	0x433fffff
 8011690:	3fefffff 	.word	0x3fefffff
 8011694:	fffffc01 	.word	0xfffffc01
 8011698:	3ff00000 	.word	0x3ff00000
 801169c:	3fe00000 	.word	0x3fe00000
 80116a0:	41e00000 	.word	0x41e00000
 80116a4:	43f00000 	.word	0x43f00000
 80116a8:	3feffffe 	.word	0x3feffffe
 80116ac:	2200      	movs	r2, #0
 80116ae:	9800      	ldr	r0, [sp, #0]
 80116b0:	9901      	ldr	r1, [sp, #4]
 80116b2:	4b53      	ldr	r3, [pc, #332]	; (8011800 <__ieee754_pow+0x3d4>)
 80116b4:	f7f1 f8d0 	bl	8002858 <__aeabi_dsub>
 80116b8:	22c0      	movs	r2, #192	; 0xc0
 80116ba:	4b52      	ldr	r3, [pc, #328]	; (8011804 <__ieee754_pow+0x3d8>)
 80116bc:	05d2      	lsls	r2, r2, #23
 80116be:	0004      	movs	r4, r0
 80116c0:	000d      	movs	r5, r1
 80116c2:	f7f0 fe07 	bl	80022d4 <__aeabi_dmul>
 80116c6:	4a50      	ldr	r2, [pc, #320]	; (8011808 <__ieee754_pow+0x3dc>)
 80116c8:	0006      	movs	r6, r0
 80116ca:	000f      	movs	r7, r1
 80116cc:	0020      	movs	r0, r4
 80116ce:	0029      	movs	r1, r5
 80116d0:	4b4e      	ldr	r3, [pc, #312]	; (801180c <__ieee754_pow+0x3e0>)
 80116d2:	f7f0 fdff 	bl	80022d4 <__aeabi_dmul>
 80116d6:	2200      	movs	r2, #0
 80116d8:	9000      	str	r0, [sp, #0]
 80116da:	9101      	str	r1, [sp, #4]
 80116dc:	4b4c      	ldr	r3, [pc, #304]	; (8011810 <__ieee754_pow+0x3e4>)
 80116de:	0020      	movs	r0, r4
 80116e0:	0029      	movs	r1, r5
 80116e2:	f7f0 fdf7 	bl	80022d4 <__aeabi_dmul>
 80116e6:	0002      	movs	r2, r0
 80116e8:	000b      	movs	r3, r1
 80116ea:	484a      	ldr	r0, [pc, #296]	; (8011814 <__ieee754_pow+0x3e8>)
 80116ec:	494a      	ldr	r1, [pc, #296]	; (8011818 <__ieee754_pow+0x3ec>)
 80116ee:	f7f1 f8b3 	bl	8002858 <__aeabi_dsub>
 80116f2:	0022      	movs	r2, r4
 80116f4:	002b      	movs	r3, r5
 80116f6:	f7f0 fded 	bl	80022d4 <__aeabi_dmul>
 80116fa:	0002      	movs	r2, r0
 80116fc:	000b      	movs	r3, r1
 80116fe:	2000      	movs	r0, #0
 8011700:	4946      	ldr	r1, [pc, #280]	; (801181c <__ieee754_pow+0x3f0>)
 8011702:	f7f1 f8a9 	bl	8002858 <__aeabi_dsub>
 8011706:	0022      	movs	r2, r4
 8011708:	002b      	movs	r3, r5
 801170a:	9004      	str	r0, [sp, #16]
 801170c:	9105      	str	r1, [sp, #20]
 801170e:	0020      	movs	r0, r4
 8011710:	0029      	movs	r1, r5
 8011712:	f7f0 fddf 	bl	80022d4 <__aeabi_dmul>
 8011716:	0002      	movs	r2, r0
 8011718:	000b      	movs	r3, r1
 801171a:	9804      	ldr	r0, [sp, #16]
 801171c:	9905      	ldr	r1, [sp, #20]
 801171e:	f7f0 fdd9 	bl	80022d4 <__aeabi_dmul>
 8011722:	4a3f      	ldr	r2, [pc, #252]	; (8011820 <__ieee754_pow+0x3f4>)
 8011724:	4b37      	ldr	r3, [pc, #220]	; (8011804 <__ieee754_pow+0x3d8>)
 8011726:	f7f0 fdd5 	bl	80022d4 <__aeabi_dmul>
 801172a:	0002      	movs	r2, r0
 801172c:	000b      	movs	r3, r1
 801172e:	9800      	ldr	r0, [sp, #0]
 8011730:	9901      	ldr	r1, [sp, #4]
 8011732:	f7f1 f891 	bl	8002858 <__aeabi_dsub>
 8011736:	0002      	movs	r2, r0
 8011738:	000b      	movs	r3, r1
 801173a:	0004      	movs	r4, r0
 801173c:	000d      	movs	r5, r1
 801173e:	0030      	movs	r0, r6
 8011740:	0039      	movs	r1, r7
 8011742:	f7ef fe6d 	bl	8001420 <__aeabi_dadd>
 8011746:	2000      	movs	r0, #0
 8011748:	0032      	movs	r2, r6
 801174a:	003b      	movs	r3, r7
 801174c:	9004      	str	r0, [sp, #16]
 801174e:	9105      	str	r1, [sp, #20]
 8011750:	f7f1 f882 	bl	8002858 <__aeabi_dsub>
 8011754:	0002      	movs	r2, r0
 8011756:	000b      	movs	r3, r1
 8011758:	0020      	movs	r0, r4
 801175a:	0029      	movs	r1, r5
 801175c:	f7f1 f87c 	bl	8002858 <__aeabi_dsub>
 8011760:	9b06      	ldr	r3, [sp, #24]
 8011762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011764:	3b01      	subs	r3, #1
 8011766:	0006      	movs	r6, r0
 8011768:	000f      	movs	r7, r1
 801176a:	4313      	orrs	r3, r2
 801176c:	d000      	beq.n	8011770 <__ieee754_pow+0x344>
 801176e:	e1dc      	b.n	8011b2a <__ieee754_pow+0x6fe>
 8011770:	2300      	movs	r3, #0
 8011772:	4c2c      	ldr	r4, [pc, #176]	; (8011824 <__ieee754_pow+0x3f8>)
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	9401      	str	r4, [sp, #4]
 8011778:	9c02      	ldr	r4, [sp, #8]
 801177a:	9d03      	ldr	r5, [sp, #12]
 801177c:	9802      	ldr	r0, [sp, #8]
 801177e:	9903      	ldr	r1, [sp, #12]
 8011780:	2400      	movs	r4, #0
 8011782:	002b      	movs	r3, r5
 8011784:	0022      	movs	r2, r4
 8011786:	f7f1 f867 	bl	8002858 <__aeabi_dsub>
 801178a:	9a04      	ldr	r2, [sp, #16]
 801178c:	9b05      	ldr	r3, [sp, #20]
 801178e:	f7f0 fda1 	bl	80022d4 <__aeabi_dmul>
 8011792:	9a02      	ldr	r2, [sp, #8]
 8011794:	9b03      	ldr	r3, [sp, #12]
 8011796:	9006      	str	r0, [sp, #24]
 8011798:	9107      	str	r1, [sp, #28]
 801179a:	0030      	movs	r0, r6
 801179c:	0039      	movs	r1, r7
 801179e:	f7f0 fd99 	bl	80022d4 <__aeabi_dmul>
 80117a2:	0002      	movs	r2, r0
 80117a4:	000b      	movs	r3, r1
 80117a6:	9806      	ldr	r0, [sp, #24]
 80117a8:	9907      	ldr	r1, [sp, #28]
 80117aa:	f7ef fe39 	bl	8001420 <__aeabi_dadd>
 80117ae:	0022      	movs	r2, r4
 80117b0:	002b      	movs	r3, r5
 80117b2:	0006      	movs	r6, r0
 80117b4:	000f      	movs	r7, r1
 80117b6:	9804      	ldr	r0, [sp, #16]
 80117b8:	9905      	ldr	r1, [sp, #20]
 80117ba:	f7f0 fd8b 	bl	80022d4 <__aeabi_dmul>
 80117be:	0003      	movs	r3, r0
 80117c0:	000c      	movs	r4, r1
 80117c2:	9004      	str	r0, [sp, #16]
 80117c4:	9105      	str	r1, [sp, #20]
 80117c6:	9306      	str	r3, [sp, #24]
 80117c8:	9407      	str	r4, [sp, #28]
 80117ca:	0002      	movs	r2, r0
 80117cc:	000b      	movs	r3, r1
 80117ce:	0030      	movs	r0, r6
 80117d0:	0039      	movs	r1, r7
 80117d2:	f7ef fe25 	bl	8001420 <__aeabi_dadd>
 80117d6:	4b14      	ldr	r3, [pc, #80]	; (8011828 <__ieee754_pow+0x3fc>)
 80117d8:	0005      	movs	r5, r0
 80117da:	000c      	movs	r4, r1
 80117dc:	9108      	str	r1, [sp, #32]
 80117de:	4299      	cmp	r1, r3
 80117e0:	dc00      	bgt.n	80117e4 <__ieee754_pow+0x3b8>
 80117e2:	e2d4      	b.n	8011d8e <__ieee754_pow+0x962>
 80117e4:	4b11      	ldr	r3, [pc, #68]	; (801182c <__ieee754_pow+0x400>)
 80117e6:	18cb      	adds	r3, r1, r3
 80117e8:	4303      	orrs	r3, r0
 80117ea:	d100      	bne.n	80117ee <__ieee754_pow+0x3c2>
 80117ec:	e1d6      	b.n	8011b9c <__ieee754_pow+0x770>
 80117ee:	9800      	ldr	r0, [sp, #0]
 80117f0:	9901      	ldr	r1, [sp, #4]
 80117f2:	2300      	movs	r3, #0
 80117f4:	2200      	movs	r2, #0
 80117f6:	f7ee fe2f 	bl	8000458 <__aeabi_dcmplt>
 80117fa:	1e43      	subs	r3, r0, #1
 80117fc:	4198      	sbcs	r0, r3
 80117fe:	e72f      	b.n	8011660 <__ieee754_pow+0x234>
 8011800:	3ff00000 	.word	0x3ff00000
 8011804:	3ff71547 	.word	0x3ff71547
 8011808:	f85ddf44 	.word	0xf85ddf44
 801180c:	3e54ae0b 	.word	0x3e54ae0b
 8011810:	3fd00000 	.word	0x3fd00000
 8011814:	55555555 	.word	0x55555555
 8011818:	3fd55555 	.word	0x3fd55555
 801181c:	3fe00000 	.word	0x3fe00000
 8011820:	652b82fe 	.word	0x652b82fe
 8011824:	bff00000 	.word	0xbff00000
 8011828:	408fffff 	.word	0x408fffff
 801182c:	bf700000 	.word	0xbf700000
 8011830:	4bbf      	ldr	r3, [pc, #764]	; (8011b30 <__ieee754_pow+0x704>)
 8011832:	2200      	movs	r2, #0
 8011834:	422b      	tst	r3, r5
 8011836:	d10a      	bne.n	801184e <__ieee754_pow+0x422>
 8011838:	9800      	ldr	r0, [sp, #0]
 801183a:	9901      	ldr	r1, [sp, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	4bbd      	ldr	r3, [pc, #756]	; (8011b34 <__ieee754_pow+0x708>)
 8011840:	f7f0 fd48 	bl	80022d4 <__aeabi_dmul>
 8011844:	2235      	movs	r2, #53	; 0x35
 8011846:	9000      	str	r0, [sp, #0]
 8011848:	9101      	str	r1, [sp, #4]
 801184a:	9c01      	ldr	r4, [sp, #4]
 801184c:	4252      	negs	r2, r2
 801184e:	49ba      	ldr	r1, [pc, #744]	; (8011b38 <__ieee754_pow+0x70c>)
 8011850:	1523      	asrs	r3, r4, #20
 8011852:	185b      	adds	r3, r3, r1
 8011854:	189b      	adds	r3, r3, r2
 8011856:	0324      	lsls	r4, r4, #12
 8011858:	4db8      	ldr	r5, [pc, #736]	; (8011b3c <__ieee754_pow+0x710>)
 801185a:	930d      	str	r3, [sp, #52]	; 0x34
 801185c:	4bb8      	ldr	r3, [pc, #736]	; (8011b40 <__ieee754_pow+0x714>)
 801185e:	0b22      	lsrs	r2, r4, #12
 8011860:	4315      	orrs	r5, r2
 8011862:	2400      	movs	r4, #0
 8011864:	429a      	cmp	r2, r3
 8011866:	dd09      	ble.n	801187c <__ieee754_pow+0x450>
 8011868:	4bb6      	ldr	r3, [pc, #728]	; (8011b44 <__ieee754_pow+0x718>)
 801186a:	3401      	adds	r4, #1
 801186c:	429a      	cmp	r2, r3
 801186e:	dd05      	ble.n	801187c <__ieee754_pow+0x450>
 8011870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011872:	191b      	adds	r3, r3, r4
 8011874:	2400      	movs	r4, #0
 8011876:	930d      	str	r3, [sp, #52]	; 0x34
 8011878:	4bb3      	ldr	r3, [pc, #716]	; (8011b48 <__ieee754_pow+0x71c>)
 801187a:	18ed      	adds	r5, r5, r3
 801187c:	4bb3      	ldr	r3, [pc, #716]	; (8011b4c <__ieee754_pow+0x720>)
 801187e:	00e2      	lsls	r2, r4, #3
 8011880:	189b      	adds	r3, r3, r2
 8011882:	9800      	ldr	r0, [sp, #0]
 8011884:	9901      	ldr	r1, [sp, #4]
 8011886:	920f      	str	r2, [sp, #60]	; 0x3c
 8011888:	0029      	movs	r1, r5
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	0006      	movs	r6, r0
 8011890:	920a      	str	r2, [sp, #40]	; 0x28
 8011892:	930b      	str	r3, [sp, #44]	; 0x2c
 8011894:	f7f0 ffe0 	bl	8002858 <__aeabi_dsub>
 8011898:	0032      	movs	r2, r6
 801189a:	002b      	movs	r3, r5
 801189c:	9010      	str	r0, [sp, #64]	; 0x40
 801189e:	9111      	str	r1, [sp, #68]	; 0x44
 80118a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80118a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80118a4:	f7ef fdbc 	bl	8001420 <__aeabi_dadd>
 80118a8:	0002      	movs	r2, r0
 80118aa:	000b      	movs	r3, r1
 80118ac:	2000      	movs	r0, #0
 80118ae:	49a3      	ldr	r1, [pc, #652]	; (8011b3c <__ieee754_pow+0x710>)
 80118b0:	f7f0 f916 	bl	8001ae0 <__aeabi_ddiv>
 80118b4:	0002      	movs	r2, r0
 80118b6:	000b      	movs	r3, r1
 80118b8:	9012      	str	r0, [sp, #72]	; 0x48
 80118ba:	9113      	str	r1, [sp, #76]	; 0x4c
 80118bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80118be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80118c0:	f7f0 fd08 	bl	80022d4 <__aeabi_dmul>
 80118c4:	9008      	str	r0, [sp, #32]
 80118c6:	9109      	str	r1, [sp, #36]	; 0x24
 80118c8:	9a08      	ldr	r2, [sp, #32]
 80118ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118cc:	9204      	str	r2, [sp, #16]
 80118ce:	9305      	str	r3, [sp, #20]
 80118d0:	2300      	movs	r3, #0
 80118d2:	2180      	movs	r1, #128	; 0x80
 80118d4:	2080      	movs	r0, #128	; 0x80
 80118d6:	9304      	str	r3, [sp, #16]
 80118d8:	9a04      	ldr	r2, [sp, #16]
 80118da:	9b05      	ldr	r3, [sp, #20]
 80118dc:	9200      	str	r2, [sp, #0]
 80118de:	9301      	str	r3, [sp, #4]
 80118e0:	2200      	movs	r2, #0
 80118e2:	002f      	movs	r7, r5
 80118e4:	0589      	lsls	r1, r1, #22
 80118e6:	106d      	asrs	r5, r5, #1
 80118e8:	4329      	orrs	r1, r5
 80118ea:	0300      	lsls	r0, r0, #12
 80118ec:	1809      	adds	r1, r1, r0
 80118ee:	04a0      	lsls	r0, r4, #18
 80118f0:	180b      	adds	r3, r1, r0
 80118f2:	9800      	ldr	r0, [sp, #0]
 80118f4:	9901      	ldr	r1, [sp, #4]
 80118f6:	0014      	movs	r4, r2
 80118f8:	001d      	movs	r5, r3
 80118fa:	f7f0 fceb 	bl	80022d4 <__aeabi_dmul>
 80118fe:	0002      	movs	r2, r0
 8011900:	000b      	movs	r3, r1
 8011902:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011904:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011906:	f7f0 ffa7 	bl	8002858 <__aeabi_dsub>
 801190a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801190c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801190e:	9010      	str	r0, [sp, #64]	; 0x40
 8011910:	9111      	str	r1, [sp, #68]	; 0x44
 8011912:	0020      	movs	r0, r4
 8011914:	0029      	movs	r1, r5
 8011916:	f7f0 ff9f 	bl	8002858 <__aeabi_dsub>
 801191a:	0002      	movs	r2, r0
 801191c:	000b      	movs	r3, r1
 801191e:	0030      	movs	r0, r6
 8011920:	0039      	movs	r1, r7
 8011922:	f7f0 ff99 	bl	8002858 <__aeabi_dsub>
 8011926:	9a00      	ldr	r2, [sp, #0]
 8011928:	9b01      	ldr	r3, [sp, #4]
 801192a:	f7f0 fcd3 	bl	80022d4 <__aeabi_dmul>
 801192e:	0002      	movs	r2, r0
 8011930:	000b      	movs	r3, r1
 8011932:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011934:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011936:	f7f0 ff8f 	bl	8002858 <__aeabi_dsub>
 801193a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801193c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801193e:	f7f0 fcc9 	bl	80022d4 <__aeabi_dmul>
 8011942:	9a08      	ldr	r2, [sp, #32]
 8011944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011946:	900a      	str	r0, [sp, #40]	; 0x28
 8011948:	910b      	str	r1, [sp, #44]	; 0x2c
 801194a:	0010      	movs	r0, r2
 801194c:	0019      	movs	r1, r3
 801194e:	f7f0 fcc1 	bl	80022d4 <__aeabi_dmul>
 8011952:	0006      	movs	r6, r0
 8011954:	000f      	movs	r7, r1
 8011956:	4a7e      	ldr	r2, [pc, #504]	; (8011b50 <__ieee754_pow+0x724>)
 8011958:	4b7e      	ldr	r3, [pc, #504]	; (8011b54 <__ieee754_pow+0x728>)
 801195a:	f7f0 fcbb 	bl	80022d4 <__aeabi_dmul>
 801195e:	4a7e      	ldr	r2, [pc, #504]	; (8011b58 <__ieee754_pow+0x72c>)
 8011960:	4b7e      	ldr	r3, [pc, #504]	; (8011b5c <__ieee754_pow+0x730>)
 8011962:	f7ef fd5d 	bl	8001420 <__aeabi_dadd>
 8011966:	0032      	movs	r2, r6
 8011968:	003b      	movs	r3, r7
 801196a:	f7f0 fcb3 	bl	80022d4 <__aeabi_dmul>
 801196e:	4a7c      	ldr	r2, [pc, #496]	; (8011b60 <__ieee754_pow+0x734>)
 8011970:	4b7c      	ldr	r3, [pc, #496]	; (8011b64 <__ieee754_pow+0x738>)
 8011972:	f7ef fd55 	bl	8001420 <__aeabi_dadd>
 8011976:	0032      	movs	r2, r6
 8011978:	003b      	movs	r3, r7
 801197a:	f7f0 fcab 	bl	80022d4 <__aeabi_dmul>
 801197e:	4a7a      	ldr	r2, [pc, #488]	; (8011b68 <__ieee754_pow+0x73c>)
 8011980:	4b7a      	ldr	r3, [pc, #488]	; (8011b6c <__ieee754_pow+0x740>)
 8011982:	f7ef fd4d 	bl	8001420 <__aeabi_dadd>
 8011986:	0032      	movs	r2, r6
 8011988:	003b      	movs	r3, r7
 801198a:	f7f0 fca3 	bl	80022d4 <__aeabi_dmul>
 801198e:	4a78      	ldr	r2, [pc, #480]	; (8011b70 <__ieee754_pow+0x744>)
 8011990:	4b78      	ldr	r3, [pc, #480]	; (8011b74 <__ieee754_pow+0x748>)
 8011992:	f7ef fd45 	bl	8001420 <__aeabi_dadd>
 8011996:	0032      	movs	r2, r6
 8011998:	003b      	movs	r3, r7
 801199a:	f7f0 fc9b 	bl	80022d4 <__aeabi_dmul>
 801199e:	4a76      	ldr	r2, [pc, #472]	; (8011b78 <__ieee754_pow+0x74c>)
 80119a0:	4b76      	ldr	r3, [pc, #472]	; (8011b7c <__ieee754_pow+0x750>)
 80119a2:	f7ef fd3d 	bl	8001420 <__aeabi_dadd>
 80119a6:	0032      	movs	r2, r6
 80119a8:	0004      	movs	r4, r0
 80119aa:	000d      	movs	r5, r1
 80119ac:	003b      	movs	r3, r7
 80119ae:	0030      	movs	r0, r6
 80119b0:	0039      	movs	r1, r7
 80119b2:	f7f0 fc8f 	bl	80022d4 <__aeabi_dmul>
 80119b6:	0002      	movs	r2, r0
 80119b8:	000b      	movs	r3, r1
 80119ba:	0020      	movs	r0, r4
 80119bc:	0029      	movs	r1, r5
 80119be:	f7f0 fc89 	bl	80022d4 <__aeabi_dmul>
 80119c2:	9a00      	ldr	r2, [sp, #0]
 80119c4:	9b01      	ldr	r3, [sp, #4]
 80119c6:	0004      	movs	r4, r0
 80119c8:	000d      	movs	r5, r1
 80119ca:	9808      	ldr	r0, [sp, #32]
 80119cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119ce:	f7ef fd27 	bl	8001420 <__aeabi_dadd>
 80119d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119d6:	f7f0 fc7d 	bl	80022d4 <__aeabi_dmul>
 80119da:	0022      	movs	r2, r4
 80119dc:	002b      	movs	r3, r5
 80119de:	f7ef fd1f 	bl	8001420 <__aeabi_dadd>
 80119e2:	9a00      	ldr	r2, [sp, #0]
 80119e4:	9b01      	ldr	r3, [sp, #4]
 80119e6:	9010      	str	r0, [sp, #64]	; 0x40
 80119e8:	9111      	str	r1, [sp, #68]	; 0x44
 80119ea:	0010      	movs	r0, r2
 80119ec:	0019      	movs	r1, r3
 80119ee:	f7f0 fc71 	bl	80022d4 <__aeabi_dmul>
 80119f2:	2200      	movs	r2, #0
 80119f4:	4b62      	ldr	r3, [pc, #392]	; (8011b80 <__ieee754_pow+0x754>)
 80119f6:	0004      	movs	r4, r0
 80119f8:	000d      	movs	r5, r1
 80119fa:	f7ef fd11 	bl	8001420 <__aeabi_dadd>
 80119fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011a00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a02:	f7ef fd0d 	bl	8001420 <__aeabi_dadd>
 8011a06:	2000      	movs	r0, #0
 8011a08:	000f      	movs	r7, r1
 8011a0a:	0006      	movs	r6, r0
 8011a0c:	0002      	movs	r2, r0
 8011a0e:	000b      	movs	r3, r1
 8011a10:	9800      	ldr	r0, [sp, #0]
 8011a12:	9901      	ldr	r1, [sp, #4]
 8011a14:	f7f0 fc5e 	bl	80022d4 <__aeabi_dmul>
 8011a18:	2200      	movs	r2, #0
 8011a1a:	9000      	str	r0, [sp, #0]
 8011a1c:	9101      	str	r1, [sp, #4]
 8011a1e:	4b58      	ldr	r3, [pc, #352]	; (8011b80 <__ieee754_pow+0x754>)
 8011a20:	0030      	movs	r0, r6
 8011a22:	0039      	movs	r1, r7
 8011a24:	f7f0 ff18 	bl	8002858 <__aeabi_dsub>
 8011a28:	0022      	movs	r2, r4
 8011a2a:	002b      	movs	r3, r5
 8011a2c:	f7f0 ff14 	bl	8002858 <__aeabi_dsub>
 8011a30:	0002      	movs	r2, r0
 8011a32:	000b      	movs	r3, r1
 8011a34:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a36:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a38:	f7f0 ff0e 	bl	8002858 <__aeabi_dsub>
 8011a3c:	9a08      	ldr	r2, [sp, #32]
 8011a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a40:	f7f0 fc48 	bl	80022d4 <__aeabi_dmul>
 8011a44:	0032      	movs	r2, r6
 8011a46:	0004      	movs	r4, r0
 8011a48:	000d      	movs	r5, r1
 8011a4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011a4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a4e:	003b      	movs	r3, r7
 8011a50:	f7f0 fc40 	bl	80022d4 <__aeabi_dmul>
 8011a54:	0002      	movs	r2, r0
 8011a56:	000b      	movs	r3, r1
 8011a58:	0020      	movs	r0, r4
 8011a5a:	0029      	movs	r1, r5
 8011a5c:	f7ef fce0 	bl	8001420 <__aeabi_dadd>
 8011a60:	0004      	movs	r4, r0
 8011a62:	000d      	movs	r5, r1
 8011a64:	0002      	movs	r2, r0
 8011a66:	000b      	movs	r3, r1
 8011a68:	9800      	ldr	r0, [sp, #0]
 8011a6a:	9901      	ldr	r1, [sp, #4]
 8011a6c:	f7ef fcd8 	bl	8001420 <__aeabi_dadd>
 8011a70:	22e0      	movs	r2, #224	; 0xe0
 8011a72:	2000      	movs	r0, #0
 8011a74:	4b43      	ldr	r3, [pc, #268]	; (8011b84 <__ieee754_pow+0x758>)
 8011a76:	0612      	lsls	r2, r2, #24
 8011a78:	0006      	movs	r6, r0
 8011a7a:	000f      	movs	r7, r1
 8011a7c:	f7f0 fc2a 	bl	80022d4 <__aeabi_dmul>
 8011a80:	9008      	str	r0, [sp, #32]
 8011a82:	9109      	str	r1, [sp, #36]	; 0x24
 8011a84:	9a00      	ldr	r2, [sp, #0]
 8011a86:	9b01      	ldr	r3, [sp, #4]
 8011a88:	0030      	movs	r0, r6
 8011a8a:	0039      	movs	r1, r7
 8011a8c:	f7f0 fee4 	bl	8002858 <__aeabi_dsub>
 8011a90:	0002      	movs	r2, r0
 8011a92:	000b      	movs	r3, r1
 8011a94:	0020      	movs	r0, r4
 8011a96:	0029      	movs	r1, r5
 8011a98:	f7f0 fede 	bl	8002858 <__aeabi_dsub>
 8011a9c:	4a3a      	ldr	r2, [pc, #232]	; (8011b88 <__ieee754_pow+0x75c>)
 8011a9e:	4b39      	ldr	r3, [pc, #228]	; (8011b84 <__ieee754_pow+0x758>)
 8011aa0:	f7f0 fc18 	bl	80022d4 <__aeabi_dmul>
 8011aa4:	4a39      	ldr	r2, [pc, #228]	; (8011b8c <__ieee754_pow+0x760>)
 8011aa6:	0004      	movs	r4, r0
 8011aa8:	000d      	movs	r5, r1
 8011aaa:	0030      	movs	r0, r6
 8011aac:	0039      	movs	r1, r7
 8011aae:	4b38      	ldr	r3, [pc, #224]	; (8011b90 <__ieee754_pow+0x764>)
 8011ab0:	f7f0 fc10 	bl	80022d4 <__aeabi_dmul>
 8011ab4:	0002      	movs	r2, r0
 8011ab6:	000b      	movs	r3, r1
 8011ab8:	0020      	movs	r0, r4
 8011aba:	0029      	movs	r1, r5
 8011abc:	f7ef fcb0 	bl	8001420 <__aeabi_dadd>
 8011ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ac2:	4b34      	ldr	r3, [pc, #208]	; (8011b94 <__ieee754_pow+0x768>)
 8011ac4:	189b      	adds	r3, r3, r2
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	f7ef fca9 	bl	8001420 <__aeabi_dadd>
 8011ace:	9000      	str	r0, [sp, #0]
 8011ad0:	9101      	str	r1, [sp, #4]
 8011ad2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011ad4:	f7f1 fa96 	bl	8003004 <__aeabi_i2d>
 8011ad8:	0004      	movs	r4, r0
 8011ada:	000d      	movs	r5, r1
 8011adc:	9808      	ldr	r0, [sp, #32]
 8011ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ae2:	4b2d      	ldr	r3, [pc, #180]	; (8011b98 <__ieee754_pow+0x76c>)
 8011ae4:	189b      	adds	r3, r3, r2
 8011ae6:	681e      	ldr	r6, [r3, #0]
 8011ae8:	685f      	ldr	r7, [r3, #4]
 8011aea:	9a00      	ldr	r2, [sp, #0]
 8011aec:	9b01      	ldr	r3, [sp, #4]
 8011aee:	f7ef fc97 	bl	8001420 <__aeabi_dadd>
 8011af2:	0032      	movs	r2, r6
 8011af4:	003b      	movs	r3, r7
 8011af6:	f7ef fc93 	bl	8001420 <__aeabi_dadd>
 8011afa:	0022      	movs	r2, r4
 8011afc:	002b      	movs	r3, r5
 8011afe:	f7ef fc8f 	bl	8001420 <__aeabi_dadd>
 8011b02:	2000      	movs	r0, #0
 8011b04:	0022      	movs	r2, r4
 8011b06:	002b      	movs	r3, r5
 8011b08:	9004      	str	r0, [sp, #16]
 8011b0a:	9105      	str	r1, [sp, #20]
 8011b0c:	f7f0 fea4 	bl	8002858 <__aeabi_dsub>
 8011b10:	0032      	movs	r2, r6
 8011b12:	003b      	movs	r3, r7
 8011b14:	f7f0 fea0 	bl	8002858 <__aeabi_dsub>
 8011b18:	9a08      	ldr	r2, [sp, #32]
 8011b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b1c:	f7f0 fe9c 	bl	8002858 <__aeabi_dsub>
 8011b20:	0002      	movs	r2, r0
 8011b22:	000b      	movs	r3, r1
 8011b24:	9800      	ldr	r0, [sp, #0]
 8011b26:	9901      	ldr	r1, [sp, #4]
 8011b28:	e618      	b.n	801175c <__ieee754_pow+0x330>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	4c03      	ldr	r4, [pc, #12]	; (8011b3c <__ieee754_pow+0x710>)
 8011b2e:	e621      	b.n	8011774 <__ieee754_pow+0x348>
 8011b30:	7ff00000 	.word	0x7ff00000
 8011b34:	43400000 	.word	0x43400000
 8011b38:	fffffc01 	.word	0xfffffc01
 8011b3c:	3ff00000 	.word	0x3ff00000
 8011b40:	0003988e 	.word	0x0003988e
 8011b44:	000bb679 	.word	0x000bb679
 8011b48:	fff00000 	.word	0xfff00000
 8011b4c:	080139f8 	.word	0x080139f8
 8011b50:	4a454eef 	.word	0x4a454eef
 8011b54:	3fca7e28 	.word	0x3fca7e28
 8011b58:	93c9db65 	.word	0x93c9db65
 8011b5c:	3fcd864a 	.word	0x3fcd864a
 8011b60:	a91d4101 	.word	0xa91d4101
 8011b64:	3fd17460 	.word	0x3fd17460
 8011b68:	518f264d 	.word	0x518f264d
 8011b6c:	3fd55555 	.word	0x3fd55555
 8011b70:	db6fabff 	.word	0xdb6fabff
 8011b74:	3fdb6db6 	.word	0x3fdb6db6
 8011b78:	33333303 	.word	0x33333303
 8011b7c:	3fe33333 	.word	0x3fe33333
 8011b80:	40080000 	.word	0x40080000
 8011b84:	3feec709 	.word	0x3feec709
 8011b88:	dc3a03fd 	.word	0xdc3a03fd
 8011b8c:	145b01f5 	.word	0x145b01f5
 8011b90:	be3e2fe0 	.word	0xbe3e2fe0
 8011b94:	08013a18 	.word	0x08013a18
 8011b98:	08013a08 	.word	0x08013a08
 8011b9c:	4a90      	ldr	r2, [pc, #576]	; (8011de0 <__ieee754_pow+0x9b4>)
 8011b9e:	4b91      	ldr	r3, [pc, #580]	; (8011de4 <__ieee754_pow+0x9b8>)
 8011ba0:	0030      	movs	r0, r6
 8011ba2:	0039      	movs	r1, r7
 8011ba4:	f7ef fc3c 	bl	8001420 <__aeabi_dadd>
 8011ba8:	9a04      	ldr	r2, [sp, #16]
 8011baa:	9b05      	ldr	r3, [sp, #20]
 8011bac:	9002      	str	r0, [sp, #8]
 8011bae:	9103      	str	r1, [sp, #12]
 8011bb0:	0028      	movs	r0, r5
 8011bb2:	0021      	movs	r1, r4
 8011bb4:	f7f0 fe50 	bl	8002858 <__aeabi_dsub>
 8011bb8:	0002      	movs	r2, r0
 8011bba:	000b      	movs	r3, r1
 8011bbc:	9802      	ldr	r0, [sp, #8]
 8011bbe:	9903      	ldr	r1, [sp, #12]
 8011bc0:	f7ee fc5e 	bl	8000480 <__aeabi_dcmpgt>
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	d000      	beq.n	8011bca <__ieee754_pow+0x79e>
 8011bc8:	e611      	b.n	80117ee <__ieee754_pow+0x3c2>
 8011bca:	2100      	movs	r1, #0
 8011bcc:	4a86      	ldr	r2, [pc, #536]	; (8011de8 <__ieee754_pow+0x9bc>)
 8011bce:	0063      	lsls	r3, r4, #1
 8011bd0:	085b      	lsrs	r3, r3, #1
 8011bd2:	9102      	str	r1, [sp, #8]
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	dd25      	ble.n	8011c24 <__ieee754_pow+0x7f8>
 8011bd8:	4a84      	ldr	r2, [pc, #528]	; (8011dec <__ieee754_pow+0x9c0>)
 8011bda:	151b      	asrs	r3, r3, #20
 8011bdc:	189b      	adds	r3, r3, r2
 8011bde:	2280      	movs	r2, #128	; 0x80
 8011be0:	0352      	lsls	r2, r2, #13
 8011be2:	0011      	movs	r1, r2
 8011be4:	4119      	asrs	r1, r3
 8011be6:	190b      	adds	r3, r1, r4
 8011be8:	005c      	lsls	r4, r3, #1
 8011bea:	4981      	ldr	r1, [pc, #516]	; (8011df0 <__ieee754_pow+0x9c4>)
 8011bec:	4d81      	ldr	r5, [pc, #516]	; (8011df4 <__ieee754_pow+0x9c8>)
 8011bee:	0d64      	lsrs	r4, r4, #21
 8011bf0:	1864      	adds	r4, r4, r1
 8011bf2:	4125      	asrs	r5, r4
 8011bf4:	401d      	ands	r5, r3
 8011bf6:	031b      	lsls	r3, r3, #12
 8011bf8:	0b1b      	lsrs	r3, r3, #12
 8011bfa:	4313      	orrs	r3, r2
 8011bfc:	2214      	movs	r2, #20
 8011bfe:	1b12      	subs	r2, r2, r4
 8011c00:	4113      	asrs	r3, r2
 8011c02:	9302      	str	r3, [sp, #8]
 8011c04:	9b08      	ldr	r3, [sp, #32]
 8011c06:	2000      	movs	r0, #0
 8011c08:	0029      	movs	r1, r5
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	da02      	bge.n	8011c14 <__ieee754_pow+0x7e8>
 8011c0e:	9b02      	ldr	r3, [sp, #8]
 8011c10:	425b      	negs	r3, r3
 8011c12:	9302      	str	r3, [sp, #8]
 8011c14:	0002      	movs	r2, r0
 8011c16:	000b      	movs	r3, r1
 8011c18:	9804      	ldr	r0, [sp, #16]
 8011c1a:	9905      	ldr	r1, [sp, #20]
 8011c1c:	f7f0 fe1c 	bl	8002858 <__aeabi_dsub>
 8011c20:	9006      	str	r0, [sp, #24]
 8011c22:	9107      	str	r1, [sp, #28]
 8011c24:	9806      	ldr	r0, [sp, #24]
 8011c26:	9907      	ldr	r1, [sp, #28]
 8011c28:	0032      	movs	r2, r6
 8011c2a:	003b      	movs	r3, r7
 8011c2c:	f7ef fbf8 	bl	8001420 <__aeabi_dadd>
 8011c30:	2000      	movs	r0, #0
 8011c32:	2200      	movs	r2, #0
 8011c34:	4b70      	ldr	r3, [pc, #448]	; (8011df8 <__ieee754_pow+0x9cc>)
 8011c36:	9004      	str	r0, [sp, #16]
 8011c38:	9105      	str	r1, [sp, #20]
 8011c3a:	f7f0 fb4b 	bl	80022d4 <__aeabi_dmul>
 8011c3e:	9a06      	ldr	r2, [sp, #24]
 8011c40:	9b07      	ldr	r3, [sp, #28]
 8011c42:	9008      	str	r0, [sp, #32]
 8011c44:	9109      	str	r1, [sp, #36]	; 0x24
 8011c46:	9804      	ldr	r0, [sp, #16]
 8011c48:	9905      	ldr	r1, [sp, #20]
 8011c4a:	f7f0 fe05 	bl	8002858 <__aeabi_dsub>
 8011c4e:	0002      	movs	r2, r0
 8011c50:	000b      	movs	r3, r1
 8011c52:	0030      	movs	r0, r6
 8011c54:	0039      	movs	r1, r7
 8011c56:	f7f0 fdff 	bl	8002858 <__aeabi_dsub>
 8011c5a:	4a68      	ldr	r2, [pc, #416]	; (8011dfc <__ieee754_pow+0x9d0>)
 8011c5c:	4b68      	ldr	r3, [pc, #416]	; (8011e00 <__ieee754_pow+0x9d4>)
 8011c5e:	f7f0 fb39 	bl	80022d4 <__aeabi_dmul>
 8011c62:	4a68      	ldr	r2, [pc, #416]	; (8011e04 <__ieee754_pow+0x9d8>)
 8011c64:	0004      	movs	r4, r0
 8011c66:	000d      	movs	r5, r1
 8011c68:	9804      	ldr	r0, [sp, #16]
 8011c6a:	9905      	ldr	r1, [sp, #20]
 8011c6c:	4b66      	ldr	r3, [pc, #408]	; (8011e08 <__ieee754_pow+0x9dc>)
 8011c6e:	f7f0 fb31 	bl	80022d4 <__aeabi_dmul>
 8011c72:	0002      	movs	r2, r0
 8011c74:	000b      	movs	r3, r1
 8011c76:	0020      	movs	r0, r4
 8011c78:	0029      	movs	r1, r5
 8011c7a:	f7ef fbd1 	bl	8001420 <__aeabi_dadd>
 8011c7e:	0004      	movs	r4, r0
 8011c80:	000d      	movs	r5, r1
 8011c82:	0002      	movs	r2, r0
 8011c84:	000b      	movs	r3, r1
 8011c86:	9808      	ldr	r0, [sp, #32]
 8011c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c8a:	f7ef fbc9 	bl	8001420 <__aeabi_dadd>
 8011c8e:	9a08      	ldr	r2, [sp, #32]
 8011c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c92:	0006      	movs	r6, r0
 8011c94:	000f      	movs	r7, r1
 8011c96:	f7f0 fddf 	bl	8002858 <__aeabi_dsub>
 8011c9a:	0002      	movs	r2, r0
 8011c9c:	000b      	movs	r3, r1
 8011c9e:	0020      	movs	r0, r4
 8011ca0:	0029      	movs	r1, r5
 8011ca2:	f7f0 fdd9 	bl	8002858 <__aeabi_dsub>
 8011ca6:	0032      	movs	r2, r6
 8011ca8:	9004      	str	r0, [sp, #16]
 8011caa:	9105      	str	r1, [sp, #20]
 8011cac:	003b      	movs	r3, r7
 8011cae:	0030      	movs	r0, r6
 8011cb0:	0039      	movs	r1, r7
 8011cb2:	f7f0 fb0f 	bl	80022d4 <__aeabi_dmul>
 8011cb6:	0004      	movs	r4, r0
 8011cb8:	000d      	movs	r5, r1
 8011cba:	4a54      	ldr	r2, [pc, #336]	; (8011e0c <__ieee754_pow+0x9e0>)
 8011cbc:	4b54      	ldr	r3, [pc, #336]	; (8011e10 <__ieee754_pow+0x9e4>)
 8011cbe:	f7f0 fb09 	bl	80022d4 <__aeabi_dmul>
 8011cc2:	4a54      	ldr	r2, [pc, #336]	; (8011e14 <__ieee754_pow+0x9e8>)
 8011cc4:	4b54      	ldr	r3, [pc, #336]	; (8011e18 <__ieee754_pow+0x9ec>)
 8011cc6:	f7f0 fdc7 	bl	8002858 <__aeabi_dsub>
 8011cca:	0022      	movs	r2, r4
 8011ccc:	002b      	movs	r3, r5
 8011cce:	f7f0 fb01 	bl	80022d4 <__aeabi_dmul>
 8011cd2:	4a52      	ldr	r2, [pc, #328]	; (8011e1c <__ieee754_pow+0x9f0>)
 8011cd4:	4b52      	ldr	r3, [pc, #328]	; (8011e20 <__ieee754_pow+0x9f4>)
 8011cd6:	f7ef fba3 	bl	8001420 <__aeabi_dadd>
 8011cda:	0022      	movs	r2, r4
 8011cdc:	002b      	movs	r3, r5
 8011cde:	f7f0 faf9 	bl	80022d4 <__aeabi_dmul>
 8011ce2:	4a50      	ldr	r2, [pc, #320]	; (8011e24 <__ieee754_pow+0x9f8>)
 8011ce4:	4b50      	ldr	r3, [pc, #320]	; (8011e28 <__ieee754_pow+0x9fc>)
 8011ce6:	f7f0 fdb7 	bl	8002858 <__aeabi_dsub>
 8011cea:	0022      	movs	r2, r4
 8011cec:	002b      	movs	r3, r5
 8011cee:	f7f0 faf1 	bl	80022d4 <__aeabi_dmul>
 8011cf2:	4a4e      	ldr	r2, [pc, #312]	; (8011e2c <__ieee754_pow+0xa00>)
 8011cf4:	4b4e      	ldr	r3, [pc, #312]	; (8011e30 <__ieee754_pow+0xa04>)
 8011cf6:	f7ef fb93 	bl	8001420 <__aeabi_dadd>
 8011cfa:	0022      	movs	r2, r4
 8011cfc:	002b      	movs	r3, r5
 8011cfe:	f7f0 fae9 	bl	80022d4 <__aeabi_dmul>
 8011d02:	0002      	movs	r2, r0
 8011d04:	000b      	movs	r3, r1
 8011d06:	0030      	movs	r0, r6
 8011d08:	0039      	movs	r1, r7
 8011d0a:	f7f0 fda5 	bl	8002858 <__aeabi_dsub>
 8011d0e:	0004      	movs	r4, r0
 8011d10:	000d      	movs	r5, r1
 8011d12:	0002      	movs	r2, r0
 8011d14:	000b      	movs	r3, r1
 8011d16:	0030      	movs	r0, r6
 8011d18:	0039      	movs	r1, r7
 8011d1a:	f7f0 fadb 	bl	80022d4 <__aeabi_dmul>
 8011d1e:	2380      	movs	r3, #128	; 0x80
 8011d20:	9006      	str	r0, [sp, #24]
 8011d22:	9107      	str	r1, [sp, #28]
 8011d24:	2200      	movs	r2, #0
 8011d26:	0020      	movs	r0, r4
 8011d28:	0029      	movs	r1, r5
 8011d2a:	05db      	lsls	r3, r3, #23
 8011d2c:	f7f0 fd94 	bl	8002858 <__aeabi_dsub>
 8011d30:	0002      	movs	r2, r0
 8011d32:	000b      	movs	r3, r1
 8011d34:	9806      	ldr	r0, [sp, #24]
 8011d36:	9907      	ldr	r1, [sp, #28]
 8011d38:	f7ef fed2 	bl	8001ae0 <__aeabi_ddiv>
 8011d3c:	9a04      	ldr	r2, [sp, #16]
 8011d3e:	9b05      	ldr	r3, [sp, #20]
 8011d40:	0004      	movs	r4, r0
 8011d42:	000d      	movs	r5, r1
 8011d44:	0030      	movs	r0, r6
 8011d46:	0039      	movs	r1, r7
 8011d48:	f7f0 fac4 	bl	80022d4 <__aeabi_dmul>
 8011d4c:	9a04      	ldr	r2, [sp, #16]
 8011d4e:	9b05      	ldr	r3, [sp, #20]
 8011d50:	f7ef fb66 	bl	8001420 <__aeabi_dadd>
 8011d54:	0002      	movs	r2, r0
 8011d56:	000b      	movs	r3, r1
 8011d58:	0020      	movs	r0, r4
 8011d5a:	0029      	movs	r1, r5
 8011d5c:	f7f0 fd7c 	bl	8002858 <__aeabi_dsub>
 8011d60:	0032      	movs	r2, r6
 8011d62:	003b      	movs	r3, r7
 8011d64:	f7f0 fd78 	bl	8002858 <__aeabi_dsub>
 8011d68:	0002      	movs	r2, r0
 8011d6a:	000b      	movs	r3, r1
 8011d6c:	2000      	movs	r0, #0
 8011d6e:	4931      	ldr	r1, [pc, #196]	; (8011e34 <__ieee754_pow+0xa08>)
 8011d70:	f7f0 fd72 	bl	8002858 <__aeabi_dsub>
 8011d74:	9b02      	ldr	r3, [sp, #8]
 8011d76:	051b      	lsls	r3, r3, #20
 8011d78:	185b      	adds	r3, r3, r1
 8011d7a:	151a      	asrs	r2, r3, #20
 8011d7c:	2a00      	cmp	r2, #0
 8011d7e:	dc25      	bgt.n	8011dcc <__ieee754_pow+0x9a0>
 8011d80:	9a02      	ldr	r2, [sp, #8]
 8011d82:	f000 f861 	bl	8011e48 <scalbn>
 8011d86:	9a00      	ldr	r2, [sp, #0]
 8011d88:	9b01      	ldr	r3, [sp, #4]
 8011d8a:	f7ff fc33 	bl	80115f4 <__ieee754_pow+0x1c8>
 8011d8e:	4a2a      	ldr	r2, [pc, #168]	; (8011e38 <__ieee754_pow+0xa0c>)
 8011d90:	004b      	lsls	r3, r1, #1
 8011d92:	085b      	lsrs	r3, r3, #1
 8011d94:	4293      	cmp	r3, r2
 8011d96:	dc00      	bgt.n	8011d9a <__ieee754_pow+0x96e>
 8011d98:	e717      	b.n	8011bca <__ieee754_pow+0x79e>
 8011d9a:	4b28      	ldr	r3, [pc, #160]	; (8011e3c <__ieee754_pow+0xa10>)
 8011d9c:	18cb      	adds	r3, r1, r3
 8011d9e:	4303      	orrs	r3, r0
 8011da0:	d008      	beq.n	8011db4 <__ieee754_pow+0x988>
 8011da2:	9800      	ldr	r0, [sp, #0]
 8011da4:	9901      	ldr	r1, [sp, #4]
 8011da6:	2300      	movs	r3, #0
 8011da8:	2200      	movs	r2, #0
 8011daa:	f7ee fb55 	bl	8000458 <__aeabi_dcmplt>
 8011dae:	1e43      	subs	r3, r0, #1
 8011db0:	4198      	sbcs	r0, r3
 8011db2:	e462      	b.n	801167a <__ieee754_pow+0x24e>
 8011db4:	9a04      	ldr	r2, [sp, #16]
 8011db6:	9b05      	ldr	r3, [sp, #20]
 8011db8:	f7f0 fd4e 	bl	8002858 <__aeabi_dsub>
 8011dbc:	0032      	movs	r2, r6
 8011dbe:	003b      	movs	r3, r7
 8011dc0:	f7ee fb68 	bl	8000494 <__aeabi_dcmpge>
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d100      	bne.n	8011dca <__ieee754_pow+0x99e>
 8011dc8:	e6ff      	b.n	8011bca <__ieee754_pow+0x79e>
 8011dca:	e7ea      	b.n	8011da2 <__ieee754_pow+0x976>
 8011dcc:	0019      	movs	r1, r3
 8011dce:	e7da      	b.n	8011d86 <__ieee754_pow+0x95a>
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	4c18      	ldr	r4, [pc, #96]	; (8011e34 <__ieee754_pow+0xa08>)
 8011dd4:	f7ff fbf1 	bl	80115ba <__ieee754_pow+0x18e>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	2400      	movs	r4, #0
 8011ddc:	f7ff fbed 	bl	80115ba <__ieee754_pow+0x18e>
 8011de0:	652b82fe 	.word	0x652b82fe
 8011de4:	3c971547 	.word	0x3c971547
 8011de8:	3fe00000 	.word	0x3fe00000
 8011dec:	fffffc02 	.word	0xfffffc02
 8011df0:	fffffc01 	.word	0xfffffc01
 8011df4:	fff00000 	.word	0xfff00000
 8011df8:	3fe62e43 	.word	0x3fe62e43
 8011dfc:	fefa39ef 	.word	0xfefa39ef
 8011e00:	3fe62e42 	.word	0x3fe62e42
 8011e04:	0ca86c39 	.word	0x0ca86c39
 8011e08:	be205c61 	.word	0xbe205c61
 8011e0c:	72bea4d0 	.word	0x72bea4d0
 8011e10:	3e663769 	.word	0x3e663769
 8011e14:	c5d26bf1 	.word	0xc5d26bf1
 8011e18:	3ebbbd41 	.word	0x3ebbbd41
 8011e1c:	af25de2c 	.word	0xaf25de2c
 8011e20:	3f11566a 	.word	0x3f11566a
 8011e24:	16bebd93 	.word	0x16bebd93
 8011e28:	3f66c16c 	.word	0x3f66c16c
 8011e2c:	5555553e 	.word	0x5555553e
 8011e30:	3fc55555 	.word	0x3fc55555
 8011e34:	3ff00000 	.word	0x3ff00000
 8011e38:	4090cbff 	.word	0x4090cbff
 8011e3c:	3f6f3400 	.word	0x3f6f3400

08011e40 <fabs>:
 8011e40:	0049      	lsls	r1, r1, #1
 8011e42:	084b      	lsrs	r3, r1, #1
 8011e44:	0019      	movs	r1, r3
 8011e46:	4770      	bx	lr

08011e48 <scalbn>:
 8011e48:	b570      	push	{r4, r5, r6, lr}
 8011e4a:	0014      	movs	r4, r2
 8011e4c:	004a      	lsls	r2, r1, #1
 8011e4e:	000b      	movs	r3, r1
 8011e50:	0d52      	lsrs	r2, r2, #21
 8011e52:	d10f      	bne.n	8011e74 <scalbn+0x2c>
 8011e54:	004b      	lsls	r3, r1, #1
 8011e56:	085b      	lsrs	r3, r3, #1
 8011e58:	4303      	orrs	r3, r0
 8011e5a:	d011      	beq.n	8011e80 <scalbn+0x38>
 8011e5c:	4b22      	ldr	r3, [pc, #136]	; (8011ee8 <scalbn+0xa0>)
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f7f0 fa38 	bl	80022d4 <__aeabi_dmul>
 8011e64:	4b21      	ldr	r3, [pc, #132]	; (8011eec <scalbn+0xa4>)
 8011e66:	429c      	cmp	r4, r3
 8011e68:	da0b      	bge.n	8011e82 <scalbn+0x3a>
 8011e6a:	4a21      	ldr	r2, [pc, #132]	; (8011ef0 <scalbn+0xa8>)
 8011e6c:	4b21      	ldr	r3, [pc, #132]	; (8011ef4 <scalbn+0xac>)
 8011e6e:	f7f0 fa31 	bl	80022d4 <__aeabi_dmul>
 8011e72:	e005      	b.n	8011e80 <scalbn+0x38>
 8011e74:	4d20      	ldr	r5, [pc, #128]	; (8011ef8 <scalbn+0xb0>)
 8011e76:	42aa      	cmp	r2, r5
 8011e78:	d107      	bne.n	8011e8a <scalbn+0x42>
 8011e7a:	0002      	movs	r2, r0
 8011e7c:	f7ef fad0 	bl	8001420 <__aeabi_dadd>
 8011e80:	bd70      	pop	{r4, r5, r6, pc}
 8011e82:	000b      	movs	r3, r1
 8011e84:	004a      	lsls	r2, r1, #1
 8011e86:	0d52      	lsrs	r2, r2, #21
 8011e88:	3a36      	subs	r2, #54	; 0x36
 8011e8a:	4d1c      	ldr	r5, [pc, #112]	; (8011efc <scalbn+0xb4>)
 8011e8c:	42ac      	cmp	r4, r5
 8011e8e:	dd0a      	ble.n	8011ea6 <scalbn+0x5e>
 8011e90:	4c1b      	ldr	r4, [pc, #108]	; (8011f00 <scalbn+0xb8>)
 8011e92:	4d1c      	ldr	r5, [pc, #112]	; (8011f04 <scalbn+0xbc>)
 8011e94:	2900      	cmp	r1, #0
 8011e96:	da01      	bge.n	8011e9c <scalbn+0x54>
 8011e98:	4c19      	ldr	r4, [pc, #100]	; (8011f00 <scalbn+0xb8>)
 8011e9a:	4d1b      	ldr	r5, [pc, #108]	; (8011f08 <scalbn+0xc0>)
 8011e9c:	4a18      	ldr	r2, [pc, #96]	; (8011f00 <scalbn+0xb8>)
 8011e9e:	4b19      	ldr	r3, [pc, #100]	; (8011f04 <scalbn+0xbc>)
 8011ea0:	0020      	movs	r0, r4
 8011ea2:	0029      	movs	r1, r5
 8011ea4:	e7e3      	b.n	8011e6e <scalbn+0x26>
 8011ea6:	18a2      	adds	r2, r4, r2
 8011ea8:	4c18      	ldr	r4, [pc, #96]	; (8011f0c <scalbn+0xc4>)
 8011eaa:	42a2      	cmp	r2, r4
 8011eac:	dcf0      	bgt.n	8011e90 <scalbn+0x48>
 8011eae:	2a00      	cmp	r2, #0
 8011eb0:	dd05      	ble.n	8011ebe <scalbn+0x76>
 8011eb2:	4c17      	ldr	r4, [pc, #92]	; (8011f10 <scalbn+0xc8>)
 8011eb4:	0512      	lsls	r2, r2, #20
 8011eb6:	4023      	ands	r3, r4
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	0019      	movs	r1, r3
 8011ebc:	e7e0      	b.n	8011e80 <scalbn+0x38>
 8011ebe:	0014      	movs	r4, r2
 8011ec0:	3435      	adds	r4, #53	; 0x35
 8011ec2:	da08      	bge.n	8011ed6 <scalbn+0x8e>
 8011ec4:	4c0a      	ldr	r4, [pc, #40]	; (8011ef0 <scalbn+0xa8>)
 8011ec6:	4d0b      	ldr	r5, [pc, #44]	; (8011ef4 <scalbn+0xac>)
 8011ec8:	2900      	cmp	r1, #0
 8011eca:	da01      	bge.n	8011ed0 <scalbn+0x88>
 8011ecc:	4c08      	ldr	r4, [pc, #32]	; (8011ef0 <scalbn+0xa8>)
 8011ece:	4d11      	ldr	r5, [pc, #68]	; (8011f14 <scalbn+0xcc>)
 8011ed0:	4a07      	ldr	r2, [pc, #28]	; (8011ef0 <scalbn+0xa8>)
 8011ed2:	4b08      	ldr	r3, [pc, #32]	; (8011ef4 <scalbn+0xac>)
 8011ed4:	e7e4      	b.n	8011ea0 <scalbn+0x58>
 8011ed6:	4c0e      	ldr	r4, [pc, #56]	; (8011f10 <scalbn+0xc8>)
 8011ed8:	3236      	adds	r2, #54	; 0x36
 8011eda:	4023      	ands	r3, r4
 8011edc:	0512      	lsls	r2, r2, #20
 8011ede:	431a      	orrs	r2, r3
 8011ee0:	0011      	movs	r1, r2
 8011ee2:	4b0d      	ldr	r3, [pc, #52]	; (8011f18 <scalbn+0xd0>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	e7c2      	b.n	8011e6e <scalbn+0x26>
 8011ee8:	43500000 	.word	0x43500000
 8011eec:	ffff3cb0 	.word	0xffff3cb0
 8011ef0:	c2f8f359 	.word	0xc2f8f359
 8011ef4:	01a56e1f 	.word	0x01a56e1f
 8011ef8:	000007ff 	.word	0x000007ff
 8011efc:	0000c350 	.word	0x0000c350
 8011f00:	8800759c 	.word	0x8800759c
 8011f04:	7e37e43c 	.word	0x7e37e43c
 8011f08:	fe37e43c 	.word	0xfe37e43c
 8011f0c:	000007fe 	.word	0x000007fe
 8011f10:	800fffff 	.word	0x800fffff
 8011f14:	81a56e1f 	.word	0x81a56e1f
 8011f18:	3c900000 	.word	0x3c900000

08011f1c <with_errno>:
 8011f1c:	b570      	push	{r4, r5, r6, lr}
 8011f1e:	000d      	movs	r5, r1
 8011f20:	0016      	movs	r6, r2
 8011f22:	0004      	movs	r4, r0
 8011f24:	f7fc fd18 	bl	800e958 <__errno>
 8011f28:	0029      	movs	r1, r5
 8011f2a:	6006      	str	r6, [r0, #0]
 8011f2c:	0020      	movs	r0, r4
 8011f2e:	bd70      	pop	{r4, r5, r6, pc}

08011f30 <xflow>:
 8011f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f32:	0015      	movs	r5, r2
 8011f34:	001c      	movs	r4, r3
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d010      	beq.n	8011f5c <xflow+0x2c>
 8011f3a:	2380      	movs	r3, #128	; 0x80
 8011f3c:	0010      	movs	r0, r2
 8011f3e:	061b      	lsls	r3, r3, #24
 8011f40:	18e1      	adds	r1, r4, r3
 8011f42:	9000      	str	r0, [sp, #0]
 8011f44:	9101      	str	r1, [sp, #4]
 8011f46:	9a00      	ldr	r2, [sp, #0]
 8011f48:	9b01      	ldr	r3, [sp, #4]
 8011f4a:	0028      	movs	r0, r5
 8011f4c:	0021      	movs	r1, r4
 8011f4e:	f7f0 f9c1 	bl	80022d4 <__aeabi_dmul>
 8011f52:	2222      	movs	r2, #34	; 0x22
 8011f54:	f7ff ffe2 	bl	8011f1c <with_errno>
 8011f58:	b003      	add	sp, #12
 8011f5a:	bd30      	pop	{r4, r5, pc}
 8011f5c:	0010      	movs	r0, r2
 8011f5e:	0019      	movs	r1, r3
 8011f60:	e7ef      	b.n	8011f42 <xflow+0x12>

08011f62 <__math_uflow>:
 8011f62:	2380      	movs	r3, #128	; 0x80
 8011f64:	b510      	push	{r4, lr}
 8011f66:	2200      	movs	r2, #0
 8011f68:	055b      	lsls	r3, r3, #21
 8011f6a:	f7ff ffe1 	bl	8011f30 <xflow>
 8011f6e:	bd10      	pop	{r4, pc}

08011f70 <__math_oflow>:
 8011f70:	23e0      	movs	r3, #224	; 0xe0
 8011f72:	b510      	push	{r4, lr}
 8011f74:	2200      	movs	r2, #0
 8011f76:	05db      	lsls	r3, r3, #23
 8011f78:	f7ff ffda 	bl	8011f30 <xflow>
 8011f7c:	bd10      	pop	{r4, pc}
	...

08011f80 <__ieee754_sqrt>:
 8011f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f82:	000a      	movs	r2, r1
 8011f84:	000c      	movs	r4, r1
 8011f86:	496f      	ldr	r1, [pc, #444]	; (8012144 <__ieee754_sqrt+0x1c4>)
 8011f88:	0005      	movs	r5, r0
 8011f8a:	0003      	movs	r3, r0
 8011f8c:	0008      	movs	r0, r1
 8011f8e:	b087      	sub	sp, #28
 8011f90:	4020      	ands	r0, r4
 8011f92:	4288      	cmp	r0, r1
 8011f94:	d111      	bne.n	8011fba <__ieee754_sqrt+0x3a>
 8011f96:	002a      	movs	r2, r5
 8011f98:	0023      	movs	r3, r4
 8011f9a:	0028      	movs	r0, r5
 8011f9c:	0021      	movs	r1, r4
 8011f9e:	f7f0 f999 	bl	80022d4 <__aeabi_dmul>
 8011fa2:	0002      	movs	r2, r0
 8011fa4:	000b      	movs	r3, r1
 8011fa6:	0028      	movs	r0, r5
 8011fa8:	0021      	movs	r1, r4
 8011faa:	f7ef fa39 	bl	8001420 <__aeabi_dadd>
 8011fae:	0005      	movs	r5, r0
 8011fb0:	000c      	movs	r4, r1
 8011fb2:	0028      	movs	r0, r5
 8011fb4:	0021      	movs	r1, r4
 8011fb6:	b007      	add	sp, #28
 8011fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fba:	2c00      	cmp	r4, #0
 8011fbc:	dc12      	bgt.n	8011fe4 <__ieee754_sqrt+0x64>
 8011fbe:	0061      	lsls	r1, r4, #1
 8011fc0:	0849      	lsrs	r1, r1, #1
 8011fc2:	4329      	orrs	r1, r5
 8011fc4:	d0f5      	beq.n	8011fb2 <__ieee754_sqrt+0x32>
 8011fc6:	2100      	movs	r1, #0
 8011fc8:	428c      	cmp	r4, r1
 8011fca:	d100      	bne.n	8011fce <__ieee754_sqrt+0x4e>
 8011fcc:	e09f      	b.n	801210e <__ieee754_sqrt+0x18e>
 8011fce:	002a      	movs	r2, r5
 8011fd0:	0023      	movs	r3, r4
 8011fd2:	0028      	movs	r0, r5
 8011fd4:	0021      	movs	r1, r4
 8011fd6:	f7f0 fc3f 	bl	8002858 <__aeabi_dsub>
 8011fda:	0002      	movs	r2, r0
 8011fdc:	000b      	movs	r3, r1
 8011fde:	f7ef fd7f 	bl	8001ae0 <__aeabi_ddiv>
 8011fe2:	e7e4      	b.n	8011fae <__ieee754_sqrt+0x2e>
 8011fe4:	1521      	asrs	r1, r4, #20
 8011fe6:	d100      	bne.n	8011fea <__ieee754_sqrt+0x6a>
 8011fe8:	e091      	b.n	801210e <__ieee754_sqrt+0x18e>
 8011fea:	4857      	ldr	r0, [pc, #348]	; (8012148 <__ieee754_sqrt+0x1c8>)
 8011fec:	0312      	lsls	r2, r2, #12
 8011fee:	180c      	adds	r4, r1, r0
 8011ff0:	2080      	movs	r0, #128	; 0x80
 8011ff2:	0b12      	lsrs	r2, r2, #12
 8011ff4:	0340      	lsls	r0, r0, #13
 8011ff6:	4310      	orrs	r0, r2
 8011ff8:	07c9      	lsls	r1, r1, #31
 8011ffa:	d403      	bmi.n	8012004 <__ieee754_sqrt+0x84>
 8011ffc:	0fda      	lsrs	r2, r3, #31
 8011ffe:	0040      	lsls	r0, r0, #1
 8012000:	1810      	adds	r0, r2, r0
 8012002:	005b      	lsls	r3, r3, #1
 8012004:	2500      	movs	r5, #0
 8012006:	1062      	asrs	r2, r4, #1
 8012008:	0040      	lsls	r0, r0, #1
 801200a:	2480      	movs	r4, #128	; 0x80
 801200c:	9205      	str	r2, [sp, #20]
 801200e:	0fda      	lsrs	r2, r3, #31
 8012010:	1812      	adds	r2, r2, r0
 8012012:	0029      	movs	r1, r5
 8012014:	2016      	movs	r0, #22
 8012016:	005b      	lsls	r3, r3, #1
 8012018:	03a4      	lsls	r4, r4, #14
 801201a:	190e      	adds	r6, r1, r4
 801201c:	4296      	cmp	r6, r2
 801201e:	dc02      	bgt.n	8012026 <__ieee754_sqrt+0xa6>
 8012020:	1931      	adds	r1, r6, r4
 8012022:	1b92      	subs	r2, r2, r6
 8012024:	192d      	adds	r5, r5, r4
 8012026:	0fde      	lsrs	r6, r3, #31
 8012028:	0052      	lsls	r2, r2, #1
 801202a:	3801      	subs	r0, #1
 801202c:	18b2      	adds	r2, r6, r2
 801202e:	005b      	lsls	r3, r3, #1
 8012030:	0864      	lsrs	r4, r4, #1
 8012032:	2800      	cmp	r0, #0
 8012034:	d1f1      	bne.n	801201a <__ieee754_sqrt+0x9a>
 8012036:	2620      	movs	r6, #32
 8012038:	2780      	movs	r7, #128	; 0x80
 801203a:	0004      	movs	r4, r0
 801203c:	9604      	str	r6, [sp, #16]
 801203e:	063f      	lsls	r7, r7, #24
 8012040:	183e      	adds	r6, r7, r0
 8012042:	46b4      	mov	ip, r6
 8012044:	428a      	cmp	r2, r1
 8012046:	dc02      	bgt.n	801204e <__ieee754_sqrt+0xce>
 8012048:	d114      	bne.n	8012074 <__ieee754_sqrt+0xf4>
 801204a:	429e      	cmp	r6, r3
 801204c:	d812      	bhi.n	8012074 <__ieee754_sqrt+0xf4>
 801204e:	4660      	mov	r0, ip
 8012050:	4666      	mov	r6, ip
 8012052:	19c0      	adds	r0, r0, r7
 8012054:	9100      	str	r1, [sp, #0]
 8012056:	2e00      	cmp	r6, #0
 8012058:	da03      	bge.n	8012062 <__ieee754_sqrt+0xe2>
 801205a:	43c6      	mvns	r6, r0
 801205c:	0ff6      	lsrs	r6, r6, #31
 801205e:	198e      	adds	r6, r1, r6
 8012060:	9600      	str	r6, [sp, #0]
 8012062:	1a52      	subs	r2, r2, r1
 8012064:	4563      	cmp	r3, ip
 8012066:	4189      	sbcs	r1, r1
 8012068:	4249      	negs	r1, r1
 801206a:	1a52      	subs	r2, r2, r1
 801206c:	4661      	mov	r1, ip
 801206e:	1a5b      	subs	r3, r3, r1
 8012070:	9900      	ldr	r1, [sp, #0]
 8012072:	19e4      	adds	r4, r4, r7
 8012074:	0fde      	lsrs	r6, r3, #31
 8012076:	0052      	lsls	r2, r2, #1
 8012078:	18b2      	adds	r2, r6, r2
 801207a:	9e04      	ldr	r6, [sp, #16]
 801207c:	005b      	lsls	r3, r3, #1
 801207e:	3e01      	subs	r6, #1
 8012080:	087f      	lsrs	r7, r7, #1
 8012082:	9604      	str	r6, [sp, #16]
 8012084:	2e00      	cmp	r6, #0
 8012086:	d1db      	bne.n	8012040 <__ieee754_sqrt+0xc0>
 8012088:	431a      	orrs	r2, r3
 801208a:	d01f      	beq.n	80120cc <__ieee754_sqrt+0x14c>
 801208c:	4e2f      	ldr	r6, [pc, #188]	; (801214c <__ieee754_sqrt+0x1cc>)
 801208e:	4f30      	ldr	r7, [pc, #192]	; (8012150 <__ieee754_sqrt+0x1d0>)
 8012090:	6830      	ldr	r0, [r6, #0]
 8012092:	6871      	ldr	r1, [r6, #4]
 8012094:	683a      	ldr	r2, [r7, #0]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	9200      	str	r2, [sp, #0]
 801209a:	9301      	str	r3, [sp, #4]
 801209c:	6832      	ldr	r2, [r6, #0]
 801209e:	6873      	ldr	r3, [r6, #4]
 80120a0:	9202      	str	r2, [sp, #8]
 80120a2:	9303      	str	r3, [sp, #12]
 80120a4:	9a00      	ldr	r2, [sp, #0]
 80120a6:	9b01      	ldr	r3, [sp, #4]
 80120a8:	f7f0 fbd6 	bl	8002858 <__aeabi_dsub>
 80120ac:	0002      	movs	r2, r0
 80120ae:	000b      	movs	r3, r1
 80120b0:	9802      	ldr	r0, [sp, #8]
 80120b2:	9903      	ldr	r1, [sp, #12]
 80120b4:	f7ee f9da 	bl	800046c <__aeabi_dcmple>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d007      	beq.n	80120cc <__ieee754_sqrt+0x14c>
 80120bc:	6830      	ldr	r0, [r6, #0]
 80120be:	6871      	ldr	r1, [r6, #4]
 80120c0:	683a      	ldr	r2, [r7, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	1c67      	adds	r7, r4, #1
 80120c6:	d127      	bne.n	8012118 <__ieee754_sqrt+0x198>
 80120c8:	9c04      	ldr	r4, [sp, #16]
 80120ca:	3501      	adds	r5, #1
 80120cc:	4b21      	ldr	r3, [pc, #132]	; (8012154 <__ieee754_sqrt+0x1d4>)
 80120ce:	1069      	asrs	r1, r5, #1
 80120d0:	18c9      	adds	r1, r1, r3
 80120d2:	0864      	lsrs	r4, r4, #1
 80120d4:	07ed      	lsls	r5, r5, #31
 80120d6:	d502      	bpl.n	80120de <__ieee754_sqrt+0x15e>
 80120d8:	2380      	movs	r3, #128	; 0x80
 80120da:	061b      	lsls	r3, r3, #24
 80120dc:	431c      	orrs	r4, r3
 80120de:	9b05      	ldr	r3, [sp, #20]
 80120e0:	0025      	movs	r5, r4
 80120e2:	0518      	lsls	r0, r3, #20
 80120e4:	1843      	adds	r3, r0, r1
 80120e6:	001c      	movs	r4, r3
 80120e8:	e763      	b.n	8011fb2 <__ieee754_sqrt+0x32>
 80120ea:	0ada      	lsrs	r2, r3, #11
 80120ec:	3815      	subs	r0, #21
 80120ee:	055b      	lsls	r3, r3, #21
 80120f0:	2a00      	cmp	r2, #0
 80120f2:	d0fa      	beq.n	80120ea <__ieee754_sqrt+0x16a>
 80120f4:	2480      	movs	r4, #128	; 0x80
 80120f6:	0364      	lsls	r4, r4, #13
 80120f8:	4222      	tst	r2, r4
 80120fa:	d00a      	beq.n	8012112 <__ieee754_sqrt+0x192>
 80120fc:	2420      	movs	r4, #32
 80120fe:	001e      	movs	r6, r3
 8012100:	1a64      	subs	r4, r4, r1
 8012102:	40e6      	lsrs	r6, r4
 8012104:	1e4d      	subs	r5, r1, #1
 8012106:	408b      	lsls	r3, r1
 8012108:	4332      	orrs	r2, r6
 801210a:	1b41      	subs	r1, r0, r5
 801210c:	e76d      	b.n	8011fea <__ieee754_sqrt+0x6a>
 801210e:	2000      	movs	r0, #0
 8012110:	e7ee      	b.n	80120f0 <__ieee754_sqrt+0x170>
 8012112:	0052      	lsls	r2, r2, #1
 8012114:	3101      	adds	r1, #1
 8012116:	e7ef      	b.n	80120f8 <__ieee754_sqrt+0x178>
 8012118:	f7ef f982 	bl	8001420 <__aeabi_dadd>
 801211c:	6877      	ldr	r7, [r6, #4]
 801211e:	6836      	ldr	r6, [r6, #0]
 8012120:	0002      	movs	r2, r0
 8012122:	000b      	movs	r3, r1
 8012124:	0030      	movs	r0, r6
 8012126:	0039      	movs	r1, r7
 8012128:	f7ee f996 	bl	8000458 <__aeabi_dcmplt>
 801212c:	2800      	cmp	r0, #0
 801212e:	d004      	beq.n	801213a <__ieee754_sqrt+0x1ba>
 8012130:	3402      	adds	r4, #2
 8012132:	4263      	negs	r3, r4
 8012134:	4163      	adcs	r3, r4
 8012136:	18ed      	adds	r5, r5, r3
 8012138:	e7c8      	b.n	80120cc <__ieee754_sqrt+0x14c>
 801213a:	2301      	movs	r3, #1
 801213c:	3401      	adds	r4, #1
 801213e:	439c      	bics	r4, r3
 8012140:	e7c4      	b.n	80120cc <__ieee754_sqrt+0x14c>
 8012142:	46c0      	nop			; (mov r8, r8)
 8012144:	7ff00000 	.word	0x7ff00000
 8012148:	fffffc01 	.word	0xfffffc01
 801214c:	200002c0 	.word	0x200002c0
 8012150:	200002c8 	.word	0x200002c8
 8012154:	3fe00000 	.word	0x3fe00000

08012158 <_init>:
 8012158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801215a:	46c0      	nop			; (mov r8, r8)
 801215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801215e:	bc08      	pop	{r3}
 8012160:	469e      	mov	lr, r3
 8012162:	4770      	bx	lr

08012164 <_fini>:
 8012164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012166:	46c0      	nop			; (mov r8, r8)
 8012168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801216a:	bc08      	pop	{r3}
 801216c:	469e      	mov	lr, r3
 801216e:	4770      	bx	lr
